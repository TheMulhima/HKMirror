using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for TMP_StyleSheet class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_StyleSheet
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "get_instance", false),
                    get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static TMPro.TMP_StyleSheet get_instance(Func<TMPro.TMP_StyleSheet> orig)
        {
            if (_beforeget_instance != null)
            {
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                {
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_instance != null)
            {
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLoadDefaultStyleSheet()
        {
            if (!HookedList.Contains("LoadDefaultStyleSheet"))
            {
                HookedList.Add("LoadDefaultStyleSheet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "LoadDefaultStyleSheet", false),
                    LoadDefaultStyleSheet);
            }
        }

        internal static event Delegates.LoadDefaultStyleSheet_BeforeArgs _beforeLoadDefaultStyleSheet;
        internal static event Delegates.LoadDefaultStyleSheet_AfterArgs _afterLoadDefaultStyleSheet;

        private static TMPro.TMP_StyleSheet LoadDefaultStyleSheet(Func<TMPro.TMP_StyleSheet> orig)
        {
            if (_beforeLoadDefaultStyleSheet != null)
            {
                foreach (Delegates.LoadDefaultStyleSheet_BeforeArgs toInvoke in _beforeLoadDefaultStyleSheet
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLoadDefaultStyleSheet?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterLoadDefaultStyleSheet != null)
            {
                foreach (Delegates.LoadDefaultStyleSheet_AfterArgs toInvoke in _afterLoadDefaultStyleSheet
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLoadDefaultStyleSheet.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetStyle()
        {
            if (!HookedList.Contains("GetStyle"))
            {
                HookedList.Add("GetStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "GetStyle", false), GetStyle);
            }
        }

        internal static event Delegates.GetStyle_BeforeArgs _beforeGetStyle;
        internal static event Delegates.GetStyle_AfterArgs _afterGetStyle;

        private static TMPro.TMP_Style GetStyle(Func<int, TMPro.TMP_Style> orig, int hashCode)
        {
            Delegates.Params_GetStyle @params = new()
            {
                hashCode = hashCode
            };
            if (_beforeGetStyle != null)
            {
                foreach (Delegates.GetStyle_BeforeArgs toInvoke in _beforeGetStyle.GetInvocationList())
                {
                    try
                    {
                        _beforeGetStyle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            hashCode = @params.hashCode;
            var retVal = orig(hashCode);
            if (_afterGetStyle != null)
            {
                foreach (Delegates.GetStyle_AfterArgs toInvoke in _afterGetStyle.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetStyle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetStyleInternal()
        {
            if (!HookedList.Contains("GetStyleInternal"))
            {
                HookedList.Add("GetStyleInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "GetStyleInternal", true),
                    GetStyleInternal);
            }
        }

        internal static event Delegates.GetStyleInternal_BeforeArgs _beforeGetStyleInternal;
        internal static event Delegates.GetStyleInternal_AfterArgs _afterGetStyleInternal;

        private static TMPro.TMP_Style GetStyleInternal(Func<TMPro.TMP_StyleSheet, int, TMPro.TMP_Style> orig,
            TMPro.TMP_StyleSheet self, int hashCode)
        {
            Delegates.Params_GetStyleInternal @params = new()
            {
                self = self, hashCode = hashCode
            };
            if (_beforeGetStyleInternal != null)
            {
                foreach (Delegates.GetStyleInternal_BeforeArgs toInvoke in _beforeGetStyleInternal.GetInvocationList())
                {
                    try
                    {
                        _beforeGetStyleInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            hashCode = @params.hashCode;
            var retVal = orig(self, hashCode);
            if (_afterGetStyleInternal != null)
            {
                foreach (Delegates.GetStyleInternal_AfterArgs toInvoke in _afterGetStyleInternal.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetStyleInternal.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpdateStyleDictionaryKey()
        {
            if (!HookedList.Contains("UpdateStyleDictionaryKey"))
            {
                HookedList.Add("UpdateStyleDictionaryKey");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "UpdateStyleDictionaryKey", true),
                    UpdateStyleDictionaryKey);
            }
        }

        internal static event Delegates.UpdateStyleDictionaryKey_BeforeArgs _beforeUpdateStyleDictionaryKey;
        internal static event Delegates.UpdateStyleDictionaryKey_AfterArgs _afterUpdateStyleDictionaryKey;

        private static void UpdateStyleDictionaryKey(Action<TMPro.TMP_StyleSheet, int, int> orig,
            TMPro.TMP_StyleSheet self, int old_key, int new_key)
        {
            Delegates.Params_UpdateStyleDictionaryKey @params = new()
            {
                self = self, old_key = old_key, new_key = new_key
            };
            if (_beforeUpdateStyleDictionaryKey != null)
            {
                foreach (Delegates.UpdateStyleDictionaryKey_BeforeArgs toInvoke in _beforeUpdateStyleDictionaryKey
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateStyleDictionaryKey?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            old_key = @params.old_key;
            new_key = @params.new_key;
            orig(self, old_key, new_key);
            if (_afterUpdateStyleDictionaryKey != null)
            {
                foreach (Delegates.UpdateStyleDictionaryKey_AfterArgs toInvoke in _afterUpdateStyleDictionaryKey
                             .GetInvocationList())
                {
                    try
                    {
                        _afterUpdateStyleDictionaryKey.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshStyles()
        {
            if (!HookedList.Contains("RefreshStyles"))
            {
                HookedList.Add("RefreshStyles");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "RefreshStyles", false),
                    RefreshStyles);
            }
        }

        internal static event Delegates.RefreshStyles_BeforeArgs _beforeRefreshStyles;
        internal static event Delegates.RefreshStyles_AfterArgs _afterRefreshStyles;

        private static void RefreshStyles(Action orig)
        {
            if (_beforeRefreshStyles != null)
            {
                foreach (Delegates.RefreshStyles_BeforeArgs toInvoke in _beforeRefreshStyles.GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshStyles?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterRefreshStyles != null)
            {
                foreach (Delegates.RefreshStyles_AfterArgs toInvoke in _afterRefreshStyles.GetInvocationList())
                {
                    try
                    {
                        _afterRefreshStyles.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLoadStyleDictionaryInternal()
        {
            if (!HookedList.Contains("LoadStyleDictionaryInternal"))
            {
                HookedList.Add("LoadStyleDictionaryInternal");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "LoadStyleDictionaryInternal", true),
                    LoadStyleDictionaryInternal);
            }
        }

        internal static event Delegates.LoadStyleDictionaryInternal_BeforeArgs _beforeLoadStyleDictionaryInternal;
        internal static event Delegates.LoadStyleDictionaryInternal_AfterArgs _afterLoadStyleDictionaryInternal;

        private static void LoadStyleDictionaryInternal(Action<TMPro.TMP_StyleSheet> orig, TMPro.TMP_StyleSheet self)
        {
            Delegates.Params_LoadStyleDictionaryInternal @params = new()
            {
                self = self
            };
            if (_beforeLoadStyleDictionaryInternal != null)
            {
                foreach (Delegates.LoadStyleDictionaryInternal_BeforeArgs toInvoke in _beforeLoadStyleDictionaryInternal
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLoadStyleDictionaryInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterLoadStyleDictionaryInternal != null)
            {
                foreach (Delegates.LoadStyleDictionaryInternal_AfterArgs toInvoke in _afterLoadStyleDictionaryInternal
                             .GetInvocationList())
                {
                    try
                    {
                        _afterLoadStyleDictionaryInternal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_instance_BeforeArgs();

        public delegate TMPro.TMP_StyleSheet get_instance_AfterArgs(TMPro.TMP_StyleSheet ret);

        public delegate TMPro.TMP_StyleSheet get_instance_WithArgs(Func<TMPro.TMP_StyleSheet> orig);

        public delegate void LoadDefaultStyleSheet_BeforeArgs();

        public delegate TMPro.TMP_StyleSheet LoadDefaultStyleSheet_AfterArgs(TMPro.TMP_StyleSheet ret);

        public delegate TMPro.TMP_StyleSheet LoadDefaultStyleSheet_WithArgs(Func<TMPro.TMP_StyleSheet> orig);

        public sealed class Params_GetStyle
        {
            public int hashCode;
        }

        public delegate void GetStyle_BeforeArgs(Params_GetStyle args);

        public delegate TMPro.TMP_Style GetStyle_AfterArgs(Params_GetStyle args, TMPro.TMP_Style ret);

        public delegate TMPro.TMP_Style GetStyle_WithArgs(Func<int, TMPro.TMP_Style> orig, int hashCode);

        public sealed class Params_GetStyleInternal
        {
            public TMPro.TMP_StyleSheet self;
            public int hashCode;
        }

        public delegate void GetStyleInternal_BeforeArgs(Params_GetStyleInternal args);

        public delegate TMPro.TMP_Style GetStyleInternal_AfterArgs(Params_GetStyleInternal args, TMPro.TMP_Style ret);

        public delegate TMPro.TMP_Style GetStyleInternal_WithArgs(Func<TMPro.TMP_StyleSheet, int, TMPro.TMP_Style> orig,
            TMPro.TMP_StyleSheet self, int hashCode);

        public sealed class Params_UpdateStyleDictionaryKey
        {
            public TMPro.TMP_StyleSheet self;
            public int old_key;
            public int new_key;
        }

        public delegate void UpdateStyleDictionaryKey_BeforeArgs(Params_UpdateStyleDictionaryKey args);

        public delegate void UpdateStyleDictionaryKey_AfterArgs(Params_UpdateStyleDictionaryKey args);

        public delegate void UpdateStyleDictionaryKey_WithArgs(Action<TMPro.TMP_StyleSheet, int, int> orig,
            TMPro.TMP_StyleSheet self, int old_key, int new_key);

        public delegate void RefreshStyles_BeforeArgs();

        public delegate void RefreshStyles_AfterArgs();

        public delegate void RefreshStyles_WithArgs(Action orig);

        public sealed class Params_LoadStyleDictionaryInternal
        {
            public TMPro.TMP_StyleSheet self;
        }

        public delegate void LoadStyleDictionaryInternal_BeforeArgs(Params_LoadStyleDictionaryInternal args);

        public delegate void LoadStyleDictionaryInternal_AfterArgs(Params_LoadStyleDictionaryInternal args);

        public delegate void LoadStyleDictionaryInternal_WithArgs(Action<TMPro.TMP_StyleSheet> orig,
            TMPro.TMP_StyleSheet self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.LoadDefaultStyleSheet_BeforeArgs LoadDefaultStyleSheet
        {
            add
            {
                HookHandler._beforeLoadDefaultStyleSheet += value;
                HookHandler.HookLoadDefaultStyleSheet();
            }
            remove => HookHandler._beforeLoadDefaultStyleSheet -= value;
        }

        public static event Delegates.GetStyle_BeforeArgs GetStyle
        {
            add
            {
                HookHandler._beforeGetStyle += value;
                HookHandler.HookGetStyle();
            }
            remove => HookHandler._beforeGetStyle -= value;
        }

        public static event Delegates.GetStyleInternal_BeforeArgs GetStyleInternal
        {
            add
            {
                HookHandler._beforeGetStyleInternal += value;
                HookHandler.HookGetStyleInternal();
            }
            remove => HookHandler._beforeGetStyleInternal -= value;
        }

        public static event Delegates.UpdateStyleDictionaryKey_BeforeArgs UpdateStyleDictionaryKey
        {
            add
            {
                HookHandler._beforeUpdateStyleDictionaryKey += value;
                HookHandler.HookUpdateStyleDictionaryKey();
            }
            remove => HookHandler._beforeUpdateStyleDictionaryKey -= value;
        }

        public static event Delegates.RefreshStyles_BeforeArgs RefreshStyles
        {
            add
            {
                HookHandler._beforeRefreshStyles += value;
                HookHandler.HookRefreshStyles();
            }
            remove => HookHandler._beforeRefreshStyles -= value;
        }

        public static event Delegates.LoadStyleDictionaryInternal_BeforeArgs LoadStyleDictionaryInternal
        {
            add
            {
                HookHandler._beforeLoadStyleDictionaryInternal += value;
                HookHandler.HookLoadStyleDictionaryInternal();
            }
            remove => HookHandler._beforeLoadStyleDictionaryInternal -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.LoadDefaultStyleSheet_AfterArgs LoadDefaultStyleSheet
        {
            add
            {
                HookHandler._afterLoadDefaultStyleSheet += value;
                HookHandler.HookLoadDefaultStyleSheet();
            }
            remove => HookHandler._afterLoadDefaultStyleSheet -= value;
        }

        public static event Delegates.GetStyle_AfterArgs GetStyle
        {
            add
            {
                HookHandler._afterGetStyle += value;
                HookHandler.HookGetStyle();
            }
            remove => HookHandler._afterGetStyle -= value;
        }

        public static event Delegates.GetStyleInternal_AfterArgs GetStyleInternal
        {
            add
            {
                HookHandler._afterGetStyleInternal += value;
                HookHandler.HookGetStyleInternal();
            }
            remove => HookHandler._afterGetStyleInternal -= value;
        }

        public static event Delegates.UpdateStyleDictionaryKey_AfterArgs UpdateStyleDictionaryKey
        {
            add
            {
                HookHandler._afterUpdateStyleDictionaryKey += value;
                HookHandler.HookUpdateStyleDictionaryKey();
            }
            remove => HookHandler._afterUpdateStyleDictionaryKey -= value;
        }

        public static event Delegates.RefreshStyles_AfterArgs RefreshStyles
        {
            add
            {
                HookHandler._afterRefreshStyles += value;
                HookHandler.HookRefreshStyles();
            }
            remove => HookHandler._afterRefreshStyles -= value;
        }

        public static event Delegates.LoadStyleDictionaryInternal_AfterArgs LoadStyleDictionaryInternal
        {
            add
            {
                HookHandler._afterLoadStyleDictionaryInternal += value;
                HookHandler.HookLoadStyleDictionaryInternal();
            }
            remove => HookHandler._afterLoadStyleDictionaryInternal -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "get_instance", false), value);
        }

        public static event Delegates.LoadDefaultStyleSheet_WithArgs LoadDefaultStyleSheet
        {
            add => HookEndpointManager.Add<Delegates.LoadDefaultStyleSheet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "LoadDefaultStyleSheet", false), value);
            remove => HookEndpointManager.Remove<Delegates.LoadDefaultStyleSheet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "LoadDefaultStyleSheet", false), value);
        }

        public static event Delegates.GetStyle_WithArgs GetStyle
        {
            add => HookEndpointManager.Add<Delegates.GetStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "GetStyle", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "GetStyle", false), value);
        }

        public static event Delegates.GetStyleInternal_WithArgs GetStyleInternal
        {
            add => HookEndpointManager.Add<Delegates.GetStyleInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "GetStyleInternal", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetStyleInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "GetStyleInternal", true), value);
        }

        public static event Delegates.UpdateStyleDictionaryKey_WithArgs UpdateStyleDictionaryKey
        {
            add => HookEndpointManager.Add<Delegates.UpdateStyleDictionaryKey_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "UpdateStyleDictionaryKey", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateStyleDictionaryKey_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "UpdateStyleDictionaryKey", true), value);
        }

        public static event Delegates.RefreshStyles_WithArgs RefreshStyles
        {
            add => HookEndpointManager.Add<Delegates.RefreshStyles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "RefreshStyles", false), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshStyles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "RefreshStyles", false), value);
        }

        public static event Delegates.LoadStyleDictionaryInternal_WithArgs LoadStyleDictionaryInternal
        {
            add => HookEndpointManager.Add<Delegates.LoadStyleDictionaryInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "LoadStyleDictionaryInternal", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.LoadStyleDictionaryInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_StyleSheet), "LoadStyleDictionaryInternal", true),
                value);
        }
    }
}