namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameMap class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameMap
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GameMap.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.GameMap.orig_OnEnable orig, GameMap self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GameMap.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.GameMap.orig_OnDisable orig, GameMap self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GameMap.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.GameMap.orig_Start orig, GameMap self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookLevelReady()
        {
            if (!HookedList.Contains("LevelReady"))
            {
                HookedList.Add("LevelReady");
                On.GameMap.LevelReady += LevelReady;
            }
        }

        internal static event Delegates.LevelReady_BeforeArgs _beforeLevelReady;
        internal static event Delegates.LevelReady_NormalArgs _afterLevelReady;

        private static void LevelReady(On.GameMap.orig_LevelReady orig, GameMap self)
        {
            Delegates.Params_LevelReady @params = new()
            {
                self = self
            };
            _beforeLevelReady?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLevelReady != null) _afterLevelReady.Invoke(@params);
        }

        internal static void HookOnLevelWasLoaded()
        {
            if (!HookedList.Contains("OnLevelWasLoaded"))
            {
                HookedList.Add("OnLevelWasLoaded");
                On.GameMap.OnLevelWasLoaded += OnLevelWasLoaded;
            }
        }

        internal static event Delegates.OnLevelWasLoaded_BeforeArgs _beforeOnLevelWasLoaded;
        internal static event Delegates.OnLevelWasLoaded_NormalArgs _afterOnLevelWasLoaded;

        private static void OnLevelWasLoaded(On.GameMap.orig_OnLevelWasLoaded orig, GameMap self)
        {
            Delegates.Params_OnLevelWasLoaded @params = new()
            {
                self = self
            };
            _beforeOnLevelWasLoaded?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnLevelWasLoaded != null) _afterOnLevelWasLoaded.Invoke(@params);
        }

        internal static void HookSetCompassPoint()
        {
            if (!HookedList.Contains("SetCompassPoint"))
            {
                HookedList.Add("SetCompassPoint");
                On.GameMap.SetCompassPoint += SetCompassPoint;
            }
        }

        internal static event Delegates.SetCompassPoint_BeforeArgs _beforeSetCompassPoint;
        internal static event Delegates.SetCompassPoint_NormalArgs _afterSetCompassPoint;

        private static void SetCompassPoint(On.GameMap.orig_SetCompassPoint orig, GameMap self)
        {
            Delegates.Params_SetCompassPoint @params = new()
            {
                self = self
            };
            _beforeSetCompassPoint?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCompassPoint != null) _afterSetCompassPoint.Invoke(@params);
        }

        internal static void HookGetDoorValues()
        {
            if (!HookedList.Contains("GetDoorValues"))
            {
                HookedList.Add("GetDoorValues");
                On.GameMap.GetDoorValues += GetDoorValues;
            }
        }

        internal static event Delegates.GetDoorValues_BeforeArgs _beforeGetDoorValues;
        internal static event Delegates.GetDoorValues_NormalArgs _afterGetDoorValues;

        private static void GetDoorValues(On.GameMap.orig_GetDoorValues orig, GameMap self)
        {
            Delegates.Params_GetDoorValues @params = new()
            {
                self = self
            };
            _beforeGetDoorValues?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGetDoorValues != null) _afterGetDoorValues.Invoke(@params);
        }

        internal static void HookSetupMap()
        {
            if (!HookedList.Contains("SetupMap"))
            {
                HookedList.Add("SetupMap");
                On.GameMap.SetupMap += SetupMap;
            }
        }

        internal static event Delegates.SetupMap_BeforeArgs _beforeSetupMap;
        internal static event Delegates.SetupMap_NormalArgs _afterSetupMap;

        private static void SetupMap(On.GameMap.orig_SetupMap orig, GameMap self, bool pinsOnly)
        {
            Delegates.Params_SetupMap @params = new()
            {
                self = self, pinsOnly = pinsOnly
            };
            _beforeSetupMap?.Invoke(@params);
            self = @params.self;
            pinsOnly = @params.pinsOnly;
            orig(self, pinsOnly);
            if (_afterSetupMap != null) _afterSetupMap.Invoke(@params);
        }

        internal static void HookGetTilemapDimensions()
        {
            if (!HookedList.Contains("GetTilemapDimensions"))
            {
                HookedList.Add("GetTilemapDimensions");
                On.GameMap.GetTilemapDimensions += GetTilemapDimensions;
            }
        }

        internal static event Delegates.GetTilemapDimensions_BeforeArgs _beforeGetTilemapDimensions;
        internal static event Delegates.GetTilemapDimensions_NormalArgs _afterGetTilemapDimensions;

        private static void GetTilemapDimensions(On.GameMap.orig_GetTilemapDimensions orig, GameMap self)
        {
            Delegates.Params_GetTilemapDimensions @params = new()
            {
                self = self
            };
            _beforeGetTilemapDimensions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGetTilemapDimensions != null) _afterGetTilemapDimensions.Invoke(@params);
        }

        internal static void HookWorldMap()
        {
            if (!HookedList.Contains("WorldMap"))
            {
                HookedList.Add("WorldMap");
                On.GameMap.WorldMap += WorldMap;
            }
        }

        internal static event Delegates.WorldMap_BeforeArgs _beforeWorldMap;
        internal static event Delegates.WorldMap_NormalArgs _afterWorldMap;

        private static void WorldMap(On.GameMap.orig_WorldMap orig, GameMap self)
        {
            Delegates.Params_WorldMap @params = new()
            {
                self = self
            };
            _beforeWorldMap?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterWorldMap != null) _afterWorldMap.Invoke(@params);
        }

        internal static void HookQuickMapAncientBasin()
        {
            if (!HookedList.Contains("QuickMapAncientBasin"))
            {
                HookedList.Add("QuickMapAncientBasin");
                On.GameMap.QuickMapAncientBasin += QuickMapAncientBasin;
            }
        }

        internal static event Delegates.QuickMapAncientBasin_BeforeArgs _beforeQuickMapAncientBasin;
        internal static event Delegates.QuickMapAncientBasin_NormalArgs _afterQuickMapAncientBasin;

        private static void QuickMapAncientBasin(On.GameMap.orig_QuickMapAncientBasin orig, GameMap self)
        {
            Delegates.Params_QuickMapAncientBasin @params = new()
            {
                self = self
            };
            _beforeQuickMapAncientBasin?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapAncientBasin != null) _afterQuickMapAncientBasin.Invoke(@params);
        }

        internal static void HookQuickMapCity()
        {
            if (!HookedList.Contains("QuickMapCity"))
            {
                HookedList.Add("QuickMapCity");
                On.GameMap.QuickMapCity += QuickMapCity;
            }
        }

        internal static event Delegates.QuickMapCity_BeforeArgs _beforeQuickMapCity;
        internal static event Delegates.QuickMapCity_NormalArgs _afterQuickMapCity;

        private static void QuickMapCity(On.GameMap.orig_QuickMapCity orig, GameMap self)
        {
            Delegates.Params_QuickMapCity @params = new()
            {
                self = self
            };
            _beforeQuickMapCity?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapCity != null) _afterQuickMapCity.Invoke(@params);
        }

        internal static void HookQuickMapCliffs()
        {
            if (!HookedList.Contains("QuickMapCliffs"))
            {
                HookedList.Add("QuickMapCliffs");
                On.GameMap.QuickMapCliffs += QuickMapCliffs;
            }
        }

        internal static event Delegates.QuickMapCliffs_BeforeArgs _beforeQuickMapCliffs;
        internal static event Delegates.QuickMapCliffs_NormalArgs _afterQuickMapCliffs;

        private static void QuickMapCliffs(On.GameMap.orig_QuickMapCliffs orig, GameMap self)
        {
            Delegates.Params_QuickMapCliffs @params = new()
            {
                self = self
            };
            _beforeQuickMapCliffs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapCliffs != null) _afterQuickMapCliffs.Invoke(@params);
        }

        internal static void HookQuickMapCrossroads()
        {
            if (!HookedList.Contains("QuickMapCrossroads"))
            {
                HookedList.Add("QuickMapCrossroads");
                On.GameMap.QuickMapCrossroads += QuickMapCrossroads;
            }
        }

        internal static event Delegates.QuickMapCrossroads_BeforeArgs _beforeQuickMapCrossroads;
        internal static event Delegates.QuickMapCrossroads_NormalArgs _afterQuickMapCrossroads;

        private static void QuickMapCrossroads(On.GameMap.orig_QuickMapCrossroads orig, GameMap self)
        {
            Delegates.Params_QuickMapCrossroads @params = new()
            {
                self = self
            };
            _beforeQuickMapCrossroads?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapCrossroads != null) _afterQuickMapCrossroads.Invoke(@params);
        }

        internal static void HookQuickMapCrystalPeak()
        {
            if (!HookedList.Contains("QuickMapCrystalPeak"))
            {
                HookedList.Add("QuickMapCrystalPeak");
                On.GameMap.QuickMapCrystalPeak += QuickMapCrystalPeak;
            }
        }

        internal static event Delegates.QuickMapCrystalPeak_BeforeArgs _beforeQuickMapCrystalPeak;
        internal static event Delegates.QuickMapCrystalPeak_NormalArgs _afterQuickMapCrystalPeak;

        private static void QuickMapCrystalPeak(On.GameMap.orig_QuickMapCrystalPeak orig, GameMap self)
        {
            Delegates.Params_QuickMapCrystalPeak @params = new()
            {
                self = self
            };
            _beforeQuickMapCrystalPeak?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapCrystalPeak != null) _afterQuickMapCrystalPeak.Invoke(@params);
        }

        internal static void HookQuickMapDeepnest()
        {
            if (!HookedList.Contains("QuickMapDeepnest"))
            {
                HookedList.Add("QuickMapDeepnest");
                On.GameMap.QuickMapDeepnest += QuickMapDeepnest;
            }
        }

        internal static event Delegates.QuickMapDeepnest_BeforeArgs _beforeQuickMapDeepnest;
        internal static event Delegates.QuickMapDeepnest_NormalArgs _afterQuickMapDeepnest;

        private static void QuickMapDeepnest(On.GameMap.orig_QuickMapDeepnest orig, GameMap self)
        {
            Delegates.Params_QuickMapDeepnest @params = new()
            {
                self = self
            };
            _beforeQuickMapDeepnest?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapDeepnest != null) _afterQuickMapDeepnest.Invoke(@params);
        }

        internal static void HookQuickMapFogCanyon()
        {
            if (!HookedList.Contains("QuickMapFogCanyon"))
            {
                HookedList.Add("QuickMapFogCanyon");
                On.GameMap.QuickMapFogCanyon += QuickMapFogCanyon;
            }
        }

        internal static event Delegates.QuickMapFogCanyon_BeforeArgs _beforeQuickMapFogCanyon;
        internal static event Delegates.QuickMapFogCanyon_NormalArgs _afterQuickMapFogCanyon;

        private static void QuickMapFogCanyon(On.GameMap.orig_QuickMapFogCanyon orig, GameMap self)
        {
            Delegates.Params_QuickMapFogCanyon @params = new()
            {
                self = self
            };
            _beforeQuickMapFogCanyon?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapFogCanyon != null) _afterQuickMapFogCanyon.Invoke(@params);
        }

        internal static void HookQuickMapFungalWastes()
        {
            if (!HookedList.Contains("QuickMapFungalWastes"))
            {
                HookedList.Add("QuickMapFungalWastes");
                On.GameMap.QuickMapFungalWastes += QuickMapFungalWastes;
            }
        }

        internal static event Delegates.QuickMapFungalWastes_BeforeArgs _beforeQuickMapFungalWastes;
        internal static event Delegates.QuickMapFungalWastes_NormalArgs _afterQuickMapFungalWastes;

        private static void QuickMapFungalWastes(On.GameMap.orig_QuickMapFungalWastes orig, GameMap self)
        {
            Delegates.Params_QuickMapFungalWastes @params = new()
            {
                self = self
            };
            _beforeQuickMapFungalWastes?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapFungalWastes != null) _afterQuickMapFungalWastes.Invoke(@params);
        }

        internal static void HookQuickMapGreenpath()
        {
            if (!HookedList.Contains("QuickMapGreenpath"))
            {
                HookedList.Add("QuickMapGreenpath");
                On.GameMap.QuickMapGreenpath += QuickMapGreenpath;
            }
        }

        internal static event Delegates.QuickMapGreenpath_BeforeArgs _beforeQuickMapGreenpath;
        internal static event Delegates.QuickMapGreenpath_NormalArgs _afterQuickMapGreenpath;

        private static void QuickMapGreenpath(On.GameMap.orig_QuickMapGreenpath orig, GameMap self)
        {
            Delegates.Params_QuickMapGreenpath @params = new()
            {
                self = self
            };
            _beforeQuickMapGreenpath?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapGreenpath != null) _afterQuickMapGreenpath.Invoke(@params);
        }

        internal static void HookQuickMapKingdomsEdge()
        {
            if (!HookedList.Contains("QuickMapKingdomsEdge"))
            {
                HookedList.Add("QuickMapKingdomsEdge");
                On.GameMap.QuickMapKingdomsEdge += QuickMapKingdomsEdge;
            }
        }

        internal static event Delegates.QuickMapKingdomsEdge_BeforeArgs _beforeQuickMapKingdomsEdge;
        internal static event Delegates.QuickMapKingdomsEdge_NormalArgs _afterQuickMapKingdomsEdge;

        private static void QuickMapKingdomsEdge(On.GameMap.orig_QuickMapKingdomsEdge orig, GameMap self)
        {
            Delegates.Params_QuickMapKingdomsEdge @params = new()
            {
                self = self
            };
            _beforeQuickMapKingdomsEdge?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapKingdomsEdge != null) _afterQuickMapKingdomsEdge.Invoke(@params);
        }

        internal static void HookQuickMapQueensGardens()
        {
            if (!HookedList.Contains("QuickMapQueensGardens"))
            {
                HookedList.Add("QuickMapQueensGardens");
                On.GameMap.QuickMapQueensGardens += QuickMapQueensGardens;
            }
        }

        internal static event Delegates.QuickMapQueensGardens_BeforeArgs _beforeQuickMapQueensGardens;
        internal static event Delegates.QuickMapQueensGardens_NormalArgs _afterQuickMapQueensGardens;

        private static void QuickMapQueensGardens(On.GameMap.orig_QuickMapQueensGardens orig, GameMap self)
        {
            Delegates.Params_QuickMapQueensGardens @params = new()
            {
                self = self
            };
            _beforeQuickMapQueensGardens?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapQueensGardens != null) _afterQuickMapQueensGardens.Invoke(@params);
        }

        internal static void HookQuickMapRestingGrounds()
        {
            if (!HookedList.Contains("QuickMapRestingGrounds"))
            {
                HookedList.Add("QuickMapRestingGrounds");
                On.GameMap.QuickMapRestingGrounds += QuickMapRestingGrounds;
            }
        }

        internal static event Delegates.QuickMapRestingGrounds_BeforeArgs _beforeQuickMapRestingGrounds;
        internal static event Delegates.QuickMapRestingGrounds_NormalArgs _afterQuickMapRestingGrounds;

        private static void QuickMapRestingGrounds(On.GameMap.orig_QuickMapRestingGrounds orig, GameMap self)
        {
            Delegates.Params_QuickMapRestingGrounds @params = new()
            {
                self = self
            };
            _beforeQuickMapRestingGrounds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapRestingGrounds != null) _afterQuickMapRestingGrounds.Invoke(@params);
        }

        internal static void HookQuickMapDirtmouth()
        {
            if (!HookedList.Contains("QuickMapDirtmouth"))
            {
                HookedList.Add("QuickMapDirtmouth");
                On.GameMap.QuickMapDirtmouth += QuickMapDirtmouth;
            }
        }

        internal static event Delegates.QuickMapDirtmouth_BeforeArgs _beforeQuickMapDirtmouth;
        internal static event Delegates.QuickMapDirtmouth_NormalArgs _afterQuickMapDirtmouth;

        private static void QuickMapDirtmouth(On.GameMap.orig_QuickMapDirtmouth orig, GameMap self)
        {
            Delegates.Params_QuickMapDirtmouth @params = new()
            {
                self = self
            };
            _beforeQuickMapDirtmouth?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapDirtmouth != null) _afterQuickMapDirtmouth.Invoke(@params);
        }

        internal static void HookQuickMapWaterways()
        {
            if (!HookedList.Contains("QuickMapWaterways"))
            {
                HookedList.Add("QuickMapWaterways");
                On.GameMap.QuickMapWaterways += QuickMapWaterways;
            }
        }

        internal static event Delegates.QuickMapWaterways_BeforeArgs _beforeQuickMapWaterways;
        internal static event Delegates.QuickMapWaterways_NormalArgs _afterQuickMapWaterways;

        private static void QuickMapWaterways(On.GameMap.orig_QuickMapWaterways orig, GameMap self)
        {
            Delegates.Params_QuickMapWaterways @params = new()
            {
                self = self
            };
            _beforeQuickMapWaterways?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuickMapWaterways != null) _afterQuickMapWaterways.Invoke(@params);
        }

        internal static void HookCloseQuickMap()
        {
            if (!HookedList.Contains("CloseQuickMap"))
            {
                HookedList.Add("CloseQuickMap");
                On.GameMap.CloseQuickMap += CloseQuickMap;
            }
        }

        internal static event Delegates.CloseQuickMap_BeforeArgs _beforeCloseQuickMap;
        internal static event Delegates.CloseQuickMap_NormalArgs _afterCloseQuickMap;

        private static void CloseQuickMap(On.GameMap.orig_CloseQuickMap orig, GameMap self)
        {
            Delegates.Params_CloseQuickMap @params = new()
            {
                self = self
            };
            _beforeCloseQuickMap?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCloseQuickMap != null) _afterCloseQuickMap.Invoke(@params);
        }

        internal static void HookPositionDreamGateMarker()
        {
            if (!HookedList.Contains("PositionDreamGateMarker"))
            {
                HookedList.Add("PositionDreamGateMarker");
                On.GameMap.PositionDreamGateMarker += PositionDreamGateMarker;
            }
        }

        internal static event Delegates.PositionDreamGateMarker_BeforeArgs _beforePositionDreamGateMarker;
        internal static event Delegates.PositionDreamGateMarker_NormalArgs _afterPositionDreamGateMarker;

        private static void PositionDreamGateMarker(On.GameMap.orig_PositionDreamGateMarker orig, GameMap self)
        {
            Delegates.Params_PositionDreamGateMarker @params = new()
            {
                self = self
            };
            _beforePositionDreamGateMarker?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPositionDreamGateMarker != null) _afterPositionDreamGateMarker.Invoke(@params);
        }

        internal static void HookPositionCompass()
        {
            if (!HookedList.Contains("PositionCompass"))
            {
                HookedList.Add("PositionCompass");
                On.GameMap.PositionCompass += PositionCompass;
            }
        }

        internal static event Delegates.PositionCompass_BeforeArgs _beforePositionCompass;
        internal static event Delegates.PositionCompass_NormalArgs _afterPositionCompass;

        private static void PositionCompass(On.GameMap.orig_PositionCompass orig, GameMap self, bool posShade)
        {
            Delegates.Params_PositionCompass @params = new()
            {
                self = self, posShade = posShade
            };
            _beforePositionCompass?.Invoke(@params);
            self = @params.self;
            posShade = @params.posShade;
            orig(self, posShade);
            if (_afterPositionCompass != null) _afterPositionCompass.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GameMap.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.GameMap.orig_Update orig, GameMap self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookDisableMarkers()
        {
            if (!HookedList.Contains("DisableMarkers"))
            {
                HookedList.Add("DisableMarkers");
                On.GameMap.DisableMarkers += DisableMarkers;
            }
        }

        internal static event Delegates.DisableMarkers_BeforeArgs _beforeDisableMarkers;
        internal static event Delegates.DisableMarkers_NormalArgs _afterDisableMarkers;

        private static void DisableMarkers(On.GameMap.orig_DisableMarkers orig, GameMap self)
        {
            Delegates.Params_DisableMarkers @params = new()
            {
                self = self
            };
            _beforeDisableMarkers?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableMarkers != null) _afterDisableMarkers.Invoke(@params);
        }

        internal static void HookSetManualTilemap()
        {
            if (!HookedList.Contains("SetManualTilemap"))
            {
                HookedList.Add("SetManualTilemap");
                On.GameMap.SetManualTilemap += SetManualTilemap;
            }
        }

        internal static event Delegates.SetManualTilemap_BeforeArgs _beforeSetManualTilemap;
        internal static event Delegates.SetManualTilemap_NormalArgs _afterSetManualTilemap;

        private static void SetManualTilemap(On.GameMap.orig_SetManualTilemap orig, GameMap self, float offsetX,
            float offsetY, float width, float height)
        {
            Delegates.Params_SetManualTilemap @params = new()
            {
                self = self, offsetX = offsetX, offsetY = offsetY, width = width, height = height
            };
            _beforeSetManualTilemap?.Invoke(@params);
            self = @params.self;
            offsetX = @params.offsetX;
            offsetY = @params.offsetY;
            width = @params.width;
            height = @params.height;
            orig(self, offsetX, offsetY, width, height);
            if (_afterSetManualTilemap != null) _afterSetManualTilemap.Invoke(@params);
        }

        internal static void HookSetDoorValues()
        {
            if (!HookedList.Contains("SetDoorValues"))
            {
                HookedList.Add("SetDoorValues");
                On.GameMap.SetDoorValues += SetDoorValues;
            }
        }

        internal static event Delegates.SetDoorValues_BeforeArgs _beforeSetDoorValues;
        internal static event Delegates.SetDoorValues_NormalArgs _afterSetDoorValues;

        private static void SetDoorValues(On.GameMap.orig_SetDoorValues orig, GameMap self, float x, float y,
            string scene, string mapZone)
        {
            Delegates.Params_SetDoorValues @params = new()
            {
                self = self, x = x, y = y, scene = scene, mapZone = mapZone
            };
            _beforeSetDoorValues?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            scene = @params.scene;
            mapZone = @params.mapZone;
            orig(self, x, y, scene, mapZone);
            if (_afterSetDoorValues != null) _afterSetDoorValues.Invoke(@params);
        }

        internal static void HookSetCustomCompassPos()
        {
            if (!HookedList.Contains("SetCustomCompassPos"))
            {
                HookedList.Add("SetCustomCompassPos");
                On.GameMap.SetCustomCompassPos += SetCustomCompassPos;
            }
        }

        internal static event Delegates.SetCustomCompassPos_BeforeArgs _beforeSetCustomCompassPos;
        internal static event Delegates.SetCustomCompassPos_NormalArgs _afterSetCustomCompassPos;

        private static void SetCustomCompassPos(On.GameMap.orig_SetCustomCompassPos orig, GameMap self, float x,
            float y, string scene, string mapZone, float offsetX, float offsetY, float width, float height)
        {
            Delegates.Params_SetCustomCompassPos @params = new()
            {
                self = self, x = x, y = y, scene = scene, mapZone = mapZone, offsetX = offsetX, offsetY = offsetY,
                width = width, height = height
            };
            _beforeSetCustomCompassPos?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            scene = @params.scene;
            mapZone = @params.mapZone;
            offsetX = @params.offsetX;
            offsetY = @params.offsetY;
            width = @params.width;
            height = @params.height;
            orig(self, x, y, scene, mapZone, offsetX, offsetY, width, height);
            if (_afterSetCustomCompassPos != null) _afterSetCustomCompassPos.Invoke(@params);
        }

        internal static void HookSetInRoom()
        {
            if (!HookedList.Contains("SetInRoom"))
            {
                HookedList.Add("SetInRoom");
                On.GameMap.SetInRoom += SetInRoom;
            }
        }

        internal static event Delegates.SetInRoom_BeforeArgs _beforeSetInRoom;
        internal static event Delegates.SetInRoom_NormalArgs _afterSetInRoom;

        private static void SetInRoom(On.GameMap.orig_SetInRoom orig, GameMap self, bool room)
        {
            Delegates.Params_SetInRoom @params = new()
            {
                self = self, room = room
            };
            _beforeSetInRoom?.Invoke(@params);
            self = @params.self;
            room = @params.room;
            orig(self, room);
            if (_afterSetInRoom != null) _afterSetInRoom.Invoke(@params);
        }

        internal static void HookSetCanPan()
        {
            if (!HookedList.Contains("SetCanPan"))
            {
                HookedList.Add("SetCanPan");
                On.GameMap.SetCanPan += SetCanPan;
            }
        }

        internal static event Delegates.SetCanPan_BeforeArgs _beforeSetCanPan;
        internal static event Delegates.SetCanPan_NormalArgs _afterSetCanPan;

        private static void SetCanPan(On.GameMap.orig_SetCanPan orig, GameMap self, bool pan)
        {
            Delegates.Params_SetCanPan @params = new()
            {
                self = self, pan = pan
            };
            _beforeSetCanPan?.Invoke(@params);
            self = @params.self;
            pan = @params.pan;
            orig(self, pan);
            if (_afterSetCanPan != null) _afterSetCanPan.Invoke(@params);
        }

        internal static void HookGetDoorMapZone()
        {
            if (!HookedList.Contains("GetDoorMapZone"))
            {
                HookedList.Add("GetDoorMapZone");
                On.GameMap.GetDoorMapZone += GetDoorMapZone;
            }
        }

        internal static event Delegates.GetDoorMapZone_BeforeArgs _beforeGetDoorMapZone;
        internal static event Delegates.GetDoorMapZone_NormalArgs _afterGetDoorMapZone;

        private static string GetDoorMapZone(On.GameMap.orig_GetDoorMapZone orig, GameMap self)
        {
            Delegates.Params_GetDoorMapZone @params = new()
            {
                self = self
            };
            _beforeGetDoorMapZone?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDoorMapZone != null) retVal = _afterGetDoorMapZone.Invoke(@params);
            return retVal;
        }

        internal static void HookGetInRoom()
        {
            if (!HookedList.Contains("GetInRoom"))
            {
                HookedList.Add("GetInRoom");
                On.GameMap.GetInRoom += GetInRoom;
            }
        }

        internal static event Delegates.GetInRoom_BeforeArgs _beforeGetInRoom;
        internal static event Delegates.GetInRoom_NormalArgs _afterGetInRoom;

        private static bool GetInRoom(On.GameMap.orig_GetInRoom orig, GameMap self)
        {
            Delegates.Params_GetInRoom @params = new()
            {
                self = self
            };
            _beforeGetInRoom?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetInRoom != null) retVal = _afterGetInRoom.Invoke(@params);
            return retVal;
        }

        internal static void HookSetPanArrows()
        {
            if (!HookedList.Contains("SetPanArrows"))
            {
                HookedList.Add("SetPanArrows");
                On.GameMap.SetPanArrows += SetPanArrows;
            }
        }

        internal static event Delegates.SetPanArrows_BeforeArgs _beforeSetPanArrows;
        internal static event Delegates.SetPanArrows_NormalArgs _afterSetPanArrows;

        private static void SetPanArrows(On.GameMap.orig_SetPanArrows orig, GameMap self, GameObject arrowU,
            GameObject arrowD, GameObject arrowL, GameObject arrowR)
        {
            Delegates.Params_SetPanArrows @params = new()
            {
                self = self, arrowU = arrowU, arrowD = arrowD, arrowL = arrowL, arrowR = arrowR
            };
            _beforeSetPanArrows?.Invoke(@params);
            self = @params.self;
            arrowU = @params.arrowU;
            arrowD = @params.arrowD;
            arrowL = @params.arrowL;
            arrowR = @params.arrowR;
            orig(self, arrowU, arrowD, arrowL, arrowR);
            if (_afterSetPanArrows != null) _afterSetPanArrows.Invoke(@params);
        }

        internal static void HookKeepWithinBounds()
        {
            if (!HookedList.Contains("KeepWithinBounds"))
            {
                HookedList.Add("KeepWithinBounds");
                On.GameMap.KeepWithinBounds += KeepWithinBounds;
            }
        }

        internal static event Delegates.KeepWithinBounds_BeforeArgs _beforeKeepWithinBounds;
        internal static event Delegates.KeepWithinBounds_NormalArgs _afterKeepWithinBounds;

        private static void KeepWithinBounds(On.GameMap.orig_KeepWithinBounds orig, GameMap self)
        {
            Delegates.Params_KeepWithinBounds @params = new()
            {
                self = self
            };
            _beforeKeepWithinBounds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterKeepWithinBounds != null) _afterKeepWithinBounds.Invoke(@params);
        }

        internal static void HookStopPan()
        {
            if (!HookedList.Contains("StopPan"))
            {
                HookedList.Add("StopPan");
                On.GameMap.StopPan += StopPan;
            }
        }

        internal static event Delegates.StopPan_BeforeArgs _beforeStopPan;
        internal static event Delegates.StopPan_NormalArgs _afterStopPan;

        private static void StopPan(On.GameMap.orig_StopPan orig, GameMap self)
        {
            Delegates.Params_StopPan @params = new()
            {
                self = self
            };
            _beforeStopPan?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopPan != null) _afterStopPan.Invoke(@params);
        }

        internal static void HookStartPan()
        {
            if (!HookedList.Contains("StartPan"))
            {
                HookedList.Add("StartPan");
                On.GameMap.StartPan += StartPan;
            }
        }

        internal static event Delegates.StartPan_BeforeArgs _beforeStartPan;
        internal static event Delegates.StartPan_NormalArgs _afterStartPan;

        private static void StartPan(On.GameMap.orig_StartPan orig, GameMap self)
        {
            Delegates.Params_StartPan @params = new()
            {
                self = self
            };
            _beforeStartPan?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartPan != null) _afterStartPan.Invoke(@params);
        }

        internal static void HookSetupMapMarkers()
        {
            if (!HookedList.Contains("SetupMapMarkers"))
            {
                HookedList.Add("SetupMapMarkers");
                On.GameMap.SetupMapMarkers += SetupMapMarkers;
            }
        }

        internal static event Delegates.SetupMapMarkers_BeforeArgs _beforeSetupMapMarkers;
        internal static event Delegates.SetupMapMarkers_NormalArgs _afterSetupMapMarkers;

        private static void SetupMapMarkers(On.GameMap.orig_SetupMapMarkers orig, GameMap self)
        {
            Delegates.Params_SetupMapMarkers @params = new()
            {
                self = self
            };
            _beforeSetupMapMarkers?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupMapMarkers != null) _afterSetupMapMarkers.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CloseQuickMap_BeforeArgs(Params_CloseQuickMap args);

        public delegate void CloseQuickMap_NormalArgs(Params_CloseQuickMap args);

        public delegate void DisableMarkers_BeforeArgs(Params_DisableMarkers args);

        public delegate void DisableMarkers_NormalArgs(Params_DisableMarkers args);

        public delegate void GetDoorMapZone_BeforeArgs(Params_GetDoorMapZone args);

        public delegate string GetDoorMapZone_NormalArgs(Params_GetDoorMapZone args);

        public delegate void GetDoorValues_BeforeArgs(Params_GetDoorValues args);

        public delegate void GetDoorValues_NormalArgs(Params_GetDoorValues args);

        public delegate void GetInRoom_BeforeArgs(Params_GetInRoom args);

        public delegate bool GetInRoom_NormalArgs(Params_GetInRoom args);

        public delegate void GetTilemapDimensions_BeforeArgs(Params_GetTilemapDimensions args);

        public delegate void GetTilemapDimensions_NormalArgs(Params_GetTilemapDimensions args);

        public delegate void KeepWithinBounds_BeforeArgs(Params_KeepWithinBounds args);

        public delegate void KeepWithinBounds_NormalArgs(Params_KeepWithinBounds args);

        public delegate void LevelReady_BeforeArgs(Params_LevelReady args);

        public delegate void LevelReady_NormalArgs(Params_LevelReady args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnLevelWasLoaded_BeforeArgs(Params_OnLevelWasLoaded args);

        public delegate void OnLevelWasLoaded_NormalArgs(Params_OnLevelWasLoaded args);

        public delegate void PositionCompass_BeforeArgs(Params_PositionCompass args);

        public delegate void PositionCompass_NormalArgs(Params_PositionCompass args);

        public delegate void PositionDreamGateMarker_BeforeArgs(Params_PositionDreamGateMarker args);

        public delegate void PositionDreamGateMarker_NormalArgs(Params_PositionDreamGateMarker args);

        public delegate void QuickMapAncientBasin_BeforeArgs(Params_QuickMapAncientBasin args);

        public delegate void QuickMapAncientBasin_NormalArgs(Params_QuickMapAncientBasin args);

        public delegate void QuickMapCity_BeforeArgs(Params_QuickMapCity args);

        public delegate void QuickMapCity_NormalArgs(Params_QuickMapCity args);

        public delegate void QuickMapCliffs_BeforeArgs(Params_QuickMapCliffs args);

        public delegate void QuickMapCliffs_NormalArgs(Params_QuickMapCliffs args);

        public delegate void QuickMapCrossroads_BeforeArgs(Params_QuickMapCrossroads args);

        public delegate void QuickMapCrossroads_NormalArgs(Params_QuickMapCrossroads args);

        public delegate void QuickMapCrystalPeak_BeforeArgs(Params_QuickMapCrystalPeak args);

        public delegate void QuickMapCrystalPeak_NormalArgs(Params_QuickMapCrystalPeak args);

        public delegate void QuickMapDeepnest_BeforeArgs(Params_QuickMapDeepnest args);

        public delegate void QuickMapDeepnest_NormalArgs(Params_QuickMapDeepnest args);

        public delegate void QuickMapDirtmouth_BeforeArgs(Params_QuickMapDirtmouth args);

        public delegate void QuickMapDirtmouth_NormalArgs(Params_QuickMapDirtmouth args);

        public delegate void QuickMapFogCanyon_BeforeArgs(Params_QuickMapFogCanyon args);

        public delegate void QuickMapFogCanyon_NormalArgs(Params_QuickMapFogCanyon args);

        public delegate void QuickMapFungalWastes_BeforeArgs(Params_QuickMapFungalWastes args);

        public delegate void QuickMapFungalWastes_NormalArgs(Params_QuickMapFungalWastes args);

        public delegate void QuickMapGreenpath_BeforeArgs(Params_QuickMapGreenpath args);

        public delegate void QuickMapGreenpath_NormalArgs(Params_QuickMapGreenpath args);

        public delegate void QuickMapKingdomsEdge_BeforeArgs(Params_QuickMapKingdomsEdge args);

        public delegate void QuickMapKingdomsEdge_NormalArgs(Params_QuickMapKingdomsEdge args);

        public delegate void QuickMapQueensGardens_BeforeArgs(Params_QuickMapQueensGardens args);

        public delegate void QuickMapQueensGardens_NormalArgs(Params_QuickMapQueensGardens args);

        public delegate void QuickMapRestingGrounds_BeforeArgs(Params_QuickMapRestingGrounds args);

        public delegate void QuickMapRestingGrounds_NormalArgs(Params_QuickMapRestingGrounds args);

        public delegate void QuickMapWaterways_BeforeArgs(Params_QuickMapWaterways args);

        public delegate void QuickMapWaterways_NormalArgs(Params_QuickMapWaterways args);

        public delegate void SetCanPan_BeforeArgs(Params_SetCanPan args);

        public delegate void SetCanPan_NormalArgs(Params_SetCanPan args);

        public delegate void SetCompassPoint_BeforeArgs(Params_SetCompassPoint args);

        public delegate void SetCompassPoint_NormalArgs(Params_SetCompassPoint args);

        public delegate void SetCustomCompassPos_BeforeArgs(Params_SetCustomCompassPos args);

        public delegate void SetCustomCompassPos_NormalArgs(Params_SetCustomCompassPos args);

        public delegate void SetDoorValues_BeforeArgs(Params_SetDoorValues args);

        public delegate void SetDoorValues_NormalArgs(Params_SetDoorValues args);

        public delegate void SetInRoom_BeforeArgs(Params_SetInRoom args);

        public delegate void SetInRoom_NormalArgs(Params_SetInRoom args);

        public delegate void SetManualTilemap_BeforeArgs(Params_SetManualTilemap args);

        public delegate void SetManualTilemap_NormalArgs(Params_SetManualTilemap args);

        public delegate void SetPanArrows_BeforeArgs(Params_SetPanArrows args);

        public delegate void SetPanArrows_NormalArgs(Params_SetPanArrows args);

        public delegate void SetupMap_BeforeArgs(Params_SetupMap args);

        public delegate void SetupMap_NormalArgs(Params_SetupMap args);

        public delegate void SetupMapMarkers_BeforeArgs(Params_SetupMapMarkers args);

        public delegate void SetupMapMarkers_NormalArgs(Params_SetupMapMarkers args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StartPan_BeforeArgs(Params_StartPan args);

        public delegate void StartPan_NormalArgs(Params_StartPan args);

        public delegate void StopPan_BeforeArgs(Params_StopPan args);

        public delegate void StopPan_NormalArgs(Params_StopPan args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void WorldMap_BeforeArgs(Params_WorldMap args);

        public delegate void WorldMap_NormalArgs(Params_WorldMap args);

        public sealed class Params_OnEnable
        {
            public GameMap self;
        }

        public sealed class Params_OnDisable
        {
            public GameMap self;
        }

        public sealed class Params_Start
        {
            public GameMap self;
        }

        public sealed class Params_LevelReady
        {
            public GameMap self;
        }

        public sealed class Params_OnLevelWasLoaded
        {
            public GameMap self;
        }

        public sealed class Params_SetCompassPoint
        {
            public GameMap self;
        }

        public sealed class Params_GetDoorValues
        {
            public GameMap self;
        }

        public sealed class Params_SetupMap
        {
            public bool pinsOnly;
            public GameMap self;
        }

        public sealed class Params_GetTilemapDimensions
        {
            public GameMap self;
        }

        public sealed class Params_WorldMap
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapAncientBasin
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapCity
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapCliffs
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapCrossroads
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapCrystalPeak
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapDeepnest
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapFogCanyon
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapFungalWastes
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapGreenpath
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapKingdomsEdge
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapQueensGardens
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapRestingGrounds
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapDirtmouth
        {
            public GameMap self;
        }

        public sealed class Params_QuickMapWaterways
        {
            public GameMap self;
        }

        public sealed class Params_CloseQuickMap
        {
            public GameMap self;
        }

        public sealed class Params_PositionDreamGateMarker
        {
            public GameMap self;
        }

        public sealed class Params_PositionCompass
        {
            public bool posShade;
            public GameMap self;
        }

        public sealed class Params_Update
        {
            public GameMap self;
        }

        public sealed class Params_DisableMarkers
        {
            public GameMap self;
        }

        public sealed class Params_SetManualTilemap
        {
            public float height;
            public float offsetX;
            public float offsetY;
            public GameMap self;
            public float width;
        }

        public sealed class Params_SetDoorValues
        {
            public string mapZone;
            public string scene;
            public GameMap self;
            public float x;
            public float y;
        }

        public sealed class Params_SetCustomCompassPos
        {
            public float height;
            public string mapZone;
            public float offsetX;
            public float offsetY;
            public string scene;
            public GameMap self;
            public float width;
            public float x;
            public float y;
        }

        public sealed class Params_SetInRoom
        {
            public bool room;
            public GameMap self;
        }

        public sealed class Params_SetCanPan
        {
            public bool pan;
            public GameMap self;
        }

        public sealed class Params_GetDoorMapZone
        {
            public GameMap self;
        }

        public sealed class Params_GetInRoom
        {
            public GameMap self;
        }

        public sealed class Params_SetPanArrows
        {
            public GameObject arrowD;
            public GameObject arrowL;
            public GameObject arrowR;
            public GameObject arrowU;
            public GameMap self;
        }

        public sealed class Params_KeepWithinBounds
        {
            public GameMap self;
        }

        public sealed class Params_StopPan
        {
            public GameMap self;
        }

        public sealed class Params_StartPan
        {
            public GameMap self;
        }

        public sealed class Params_SetupMapMarkers
        {
            public GameMap self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.LevelReady_BeforeArgs LevelReady
        {
            add
            {
                HookHandler._beforeLevelReady += value;
                HookHandler.HookLevelReady();
            }
            remove => HookHandler._beforeLevelReady -= value;
        }

        public static event Delegates.OnLevelWasLoaded_BeforeArgs OnLevelWasLoaded
        {
            add
            {
                HookHandler._beforeOnLevelWasLoaded += value;
                HookHandler.HookOnLevelWasLoaded();
            }
            remove => HookHandler._beforeOnLevelWasLoaded -= value;
        }

        public static event Delegates.SetCompassPoint_BeforeArgs SetCompassPoint
        {
            add
            {
                HookHandler._beforeSetCompassPoint += value;
                HookHandler.HookSetCompassPoint();
            }
            remove => HookHandler._beforeSetCompassPoint -= value;
        }

        public static event Delegates.GetDoorValues_BeforeArgs GetDoorValues
        {
            add
            {
                HookHandler._beforeGetDoorValues += value;
                HookHandler.HookGetDoorValues();
            }
            remove => HookHandler._beforeGetDoorValues -= value;
        }

        public static event Delegates.SetupMap_BeforeArgs SetupMap
        {
            add
            {
                HookHandler._beforeSetupMap += value;
                HookHandler.HookSetupMap();
            }
            remove => HookHandler._beforeSetupMap -= value;
        }

        public static event Delegates.GetTilemapDimensions_BeforeArgs GetTilemapDimensions
        {
            add
            {
                HookHandler._beforeGetTilemapDimensions += value;
                HookHandler.HookGetTilemapDimensions();
            }
            remove => HookHandler._beforeGetTilemapDimensions -= value;
        }

        public static event Delegates.WorldMap_BeforeArgs WorldMap
        {
            add
            {
                HookHandler._beforeWorldMap += value;
                HookHandler.HookWorldMap();
            }
            remove => HookHandler._beforeWorldMap -= value;
        }

        public static event Delegates.QuickMapAncientBasin_BeforeArgs QuickMapAncientBasin
        {
            add
            {
                HookHandler._beforeQuickMapAncientBasin += value;
                HookHandler.HookQuickMapAncientBasin();
            }
            remove => HookHandler._beforeQuickMapAncientBasin -= value;
        }

        public static event Delegates.QuickMapCity_BeforeArgs QuickMapCity
        {
            add
            {
                HookHandler._beforeQuickMapCity += value;
                HookHandler.HookQuickMapCity();
            }
            remove => HookHandler._beforeQuickMapCity -= value;
        }

        public static event Delegates.QuickMapCliffs_BeforeArgs QuickMapCliffs
        {
            add
            {
                HookHandler._beforeQuickMapCliffs += value;
                HookHandler.HookQuickMapCliffs();
            }
            remove => HookHandler._beforeQuickMapCliffs -= value;
        }

        public static event Delegates.QuickMapCrossroads_BeforeArgs QuickMapCrossroads
        {
            add
            {
                HookHandler._beforeQuickMapCrossroads += value;
                HookHandler.HookQuickMapCrossroads();
            }
            remove => HookHandler._beforeQuickMapCrossroads -= value;
        }

        public static event Delegates.QuickMapCrystalPeak_BeforeArgs QuickMapCrystalPeak
        {
            add
            {
                HookHandler._beforeQuickMapCrystalPeak += value;
                HookHandler.HookQuickMapCrystalPeak();
            }
            remove => HookHandler._beforeQuickMapCrystalPeak -= value;
        }

        public static event Delegates.QuickMapDeepnest_BeforeArgs QuickMapDeepnest
        {
            add
            {
                HookHandler._beforeQuickMapDeepnest += value;
                HookHandler.HookQuickMapDeepnest();
            }
            remove => HookHandler._beforeQuickMapDeepnest -= value;
        }

        public static event Delegates.QuickMapFogCanyon_BeforeArgs QuickMapFogCanyon
        {
            add
            {
                HookHandler._beforeQuickMapFogCanyon += value;
                HookHandler.HookQuickMapFogCanyon();
            }
            remove => HookHandler._beforeQuickMapFogCanyon -= value;
        }

        public static event Delegates.QuickMapFungalWastes_BeforeArgs QuickMapFungalWastes
        {
            add
            {
                HookHandler._beforeQuickMapFungalWastes += value;
                HookHandler.HookQuickMapFungalWastes();
            }
            remove => HookHandler._beforeQuickMapFungalWastes -= value;
        }

        public static event Delegates.QuickMapGreenpath_BeforeArgs QuickMapGreenpath
        {
            add
            {
                HookHandler._beforeQuickMapGreenpath += value;
                HookHandler.HookQuickMapGreenpath();
            }
            remove => HookHandler._beforeQuickMapGreenpath -= value;
        }

        public static event Delegates.QuickMapKingdomsEdge_BeforeArgs QuickMapKingdomsEdge
        {
            add
            {
                HookHandler._beforeQuickMapKingdomsEdge += value;
                HookHandler.HookQuickMapKingdomsEdge();
            }
            remove => HookHandler._beforeQuickMapKingdomsEdge -= value;
        }

        public static event Delegates.QuickMapQueensGardens_BeforeArgs QuickMapQueensGardens
        {
            add
            {
                HookHandler._beforeQuickMapQueensGardens += value;
                HookHandler.HookQuickMapQueensGardens();
            }
            remove => HookHandler._beforeQuickMapQueensGardens -= value;
        }

        public static event Delegates.QuickMapRestingGrounds_BeforeArgs QuickMapRestingGrounds
        {
            add
            {
                HookHandler._beforeQuickMapRestingGrounds += value;
                HookHandler.HookQuickMapRestingGrounds();
            }
            remove => HookHandler._beforeQuickMapRestingGrounds -= value;
        }

        public static event Delegates.QuickMapDirtmouth_BeforeArgs QuickMapDirtmouth
        {
            add
            {
                HookHandler._beforeQuickMapDirtmouth += value;
                HookHandler.HookQuickMapDirtmouth();
            }
            remove => HookHandler._beforeQuickMapDirtmouth -= value;
        }

        public static event Delegates.QuickMapWaterways_BeforeArgs QuickMapWaterways
        {
            add
            {
                HookHandler._beforeQuickMapWaterways += value;
                HookHandler.HookQuickMapWaterways();
            }
            remove => HookHandler._beforeQuickMapWaterways -= value;
        }

        public static event Delegates.CloseQuickMap_BeforeArgs CloseQuickMap
        {
            add
            {
                HookHandler._beforeCloseQuickMap += value;
                HookHandler.HookCloseQuickMap();
            }
            remove => HookHandler._beforeCloseQuickMap -= value;
        }

        public static event Delegates.PositionDreamGateMarker_BeforeArgs PositionDreamGateMarker
        {
            add
            {
                HookHandler._beforePositionDreamGateMarker += value;
                HookHandler.HookPositionDreamGateMarker();
            }
            remove => HookHandler._beforePositionDreamGateMarker -= value;
        }

        public static event Delegates.PositionCompass_BeforeArgs PositionCompass
        {
            add
            {
                HookHandler._beforePositionCompass += value;
                HookHandler.HookPositionCompass();
            }
            remove => HookHandler._beforePositionCompass -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.DisableMarkers_BeforeArgs DisableMarkers
        {
            add
            {
                HookHandler._beforeDisableMarkers += value;
                HookHandler.HookDisableMarkers();
            }
            remove => HookHandler._beforeDisableMarkers -= value;
        }

        public static event Delegates.SetManualTilemap_BeforeArgs SetManualTilemap
        {
            add
            {
                HookHandler._beforeSetManualTilemap += value;
                HookHandler.HookSetManualTilemap();
            }
            remove => HookHandler._beforeSetManualTilemap -= value;
        }

        public static event Delegates.SetDoorValues_BeforeArgs SetDoorValues
        {
            add
            {
                HookHandler._beforeSetDoorValues += value;
                HookHandler.HookSetDoorValues();
            }
            remove => HookHandler._beforeSetDoorValues -= value;
        }

        public static event Delegates.SetCustomCompassPos_BeforeArgs SetCustomCompassPos
        {
            add
            {
                HookHandler._beforeSetCustomCompassPos += value;
                HookHandler.HookSetCustomCompassPos();
            }
            remove => HookHandler._beforeSetCustomCompassPos -= value;
        }

        public static event Delegates.SetInRoom_BeforeArgs SetInRoom
        {
            add
            {
                HookHandler._beforeSetInRoom += value;
                HookHandler.HookSetInRoom();
            }
            remove => HookHandler._beforeSetInRoom -= value;
        }

        public static event Delegates.SetCanPan_BeforeArgs SetCanPan
        {
            add
            {
                HookHandler._beforeSetCanPan += value;
                HookHandler.HookSetCanPan();
            }
            remove => HookHandler._beforeSetCanPan -= value;
        }

        public static event Delegates.GetDoorMapZone_BeforeArgs GetDoorMapZone
        {
            add
            {
                HookHandler._beforeGetDoorMapZone += value;
                HookHandler.HookGetDoorMapZone();
            }
            remove => HookHandler._beforeGetDoorMapZone -= value;
        }

        public static event Delegates.GetInRoom_BeforeArgs GetInRoom
        {
            add
            {
                HookHandler._beforeGetInRoom += value;
                HookHandler.HookGetInRoom();
            }
            remove => HookHandler._beforeGetInRoom -= value;
        }

        public static event Delegates.SetPanArrows_BeforeArgs SetPanArrows
        {
            add
            {
                HookHandler._beforeSetPanArrows += value;
                HookHandler.HookSetPanArrows();
            }
            remove => HookHandler._beforeSetPanArrows -= value;
        }

        public static event Delegates.KeepWithinBounds_BeforeArgs KeepWithinBounds
        {
            add
            {
                HookHandler._beforeKeepWithinBounds += value;
                HookHandler.HookKeepWithinBounds();
            }
            remove => HookHandler._beforeKeepWithinBounds -= value;
        }

        public static event Delegates.StopPan_BeforeArgs StopPan
        {
            add
            {
                HookHandler._beforeStopPan += value;
                HookHandler.HookStopPan();
            }
            remove => HookHandler._beforeStopPan -= value;
        }

        public static event Delegates.StartPan_BeforeArgs StartPan
        {
            add
            {
                HookHandler._beforeStartPan += value;
                HookHandler.HookStartPan();
            }
            remove => HookHandler._beforeStartPan -= value;
        }

        public static event Delegates.SetupMapMarkers_BeforeArgs SetupMapMarkers
        {
            add
            {
                HookHandler._beforeSetupMapMarkers += value;
                HookHandler.HookSetupMapMarkers();
            }
            remove => HookHandler._beforeSetupMapMarkers -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.LevelReady_NormalArgs LevelReady
        {
            add
            {
                HookHandler._afterLevelReady += value;
                HookHandler.HookLevelReady();
            }
            remove => HookHandler._afterLevelReady -= value;
        }

        public static event Delegates.OnLevelWasLoaded_NormalArgs OnLevelWasLoaded
        {
            add
            {
                HookHandler._afterOnLevelWasLoaded += value;
                HookHandler.HookOnLevelWasLoaded();
            }
            remove => HookHandler._afterOnLevelWasLoaded -= value;
        }

        public static event Delegates.SetCompassPoint_NormalArgs SetCompassPoint
        {
            add
            {
                HookHandler._afterSetCompassPoint += value;
                HookHandler.HookSetCompassPoint();
            }
            remove => HookHandler._afterSetCompassPoint -= value;
        }

        public static event Delegates.GetDoorValues_NormalArgs GetDoorValues
        {
            add
            {
                HookHandler._afterGetDoorValues += value;
                HookHandler.HookGetDoorValues();
            }
            remove => HookHandler._afterGetDoorValues -= value;
        }

        public static event Delegates.SetupMap_NormalArgs SetupMap
        {
            add
            {
                HookHandler._afterSetupMap += value;
                HookHandler.HookSetupMap();
            }
            remove => HookHandler._afterSetupMap -= value;
        }

        public static event Delegates.GetTilemapDimensions_NormalArgs GetTilemapDimensions
        {
            add
            {
                HookHandler._afterGetTilemapDimensions += value;
                HookHandler.HookGetTilemapDimensions();
            }
            remove => HookHandler._afterGetTilemapDimensions -= value;
        }

        public static event Delegates.WorldMap_NormalArgs WorldMap
        {
            add
            {
                HookHandler._afterWorldMap += value;
                HookHandler.HookWorldMap();
            }
            remove => HookHandler._afterWorldMap -= value;
        }

        public static event Delegates.QuickMapAncientBasin_NormalArgs QuickMapAncientBasin
        {
            add
            {
                HookHandler._afterQuickMapAncientBasin += value;
                HookHandler.HookQuickMapAncientBasin();
            }
            remove => HookHandler._afterQuickMapAncientBasin -= value;
        }

        public static event Delegates.QuickMapCity_NormalArgs QuickMapCity
        {
            add
            {
                HookHandler._afterQuickMapCity += value;
                HookHandler.HookQuickMapCity();
            }
            remove => HookHandler._afterQuickMapCity -= value;
        }

        public static event Delegates.QuickMapCliffs_NormalArgs QuickMapCliffs
        {
            add
            {
                HookHandler._afterQuickMapCliffs += value;
                HookHandler.HookQuickMapCliffs();
            }
            remove => HookHandler._afterQuickMapCliffs -= value;
        }

        public static event Delegates.QuickMapCrossroads_NormalArgs QuickMapCrossroads
        {
            add
            {
                HookHandler._afterQuickMapCrossroads += value;
                HookHandler.HookQuickMapCrossroads();
            }
            remove => HookHandler._afterQuickMapCrossroads -= value;
        }

        public static event Delegates.QuickMapCrystalPeak_NormalArgs QuickMapCrystalPeak
        {
            add
            {
                HookHandler._afterQuickMapCrystalPeak += value;
                HookHandler.HookQuickMapCrystalPeak();
            }
            remove => HookHandler._afterQuickMapCrystalPeak -= value;
        }

        public static event Delegates.QuickMapDeepnest_NormalArgs QuickMapDeepnest
        {
            add
            {
                HookHandler._afterQuickMapDeepnest += value;
                HookHandler.HookQuickMapDeepnest();
            }
            remove => HookHandler._afterQuickMapDeepnest -= value;
        }

        public static event Delegates.QuickMapFogCanyon_NormalArgs QuickMapFogCanyon
        {
            add
            {
                HookHandler._afterQuickMapFogCanyon += value;
                HookHandler.HookQuickMapFogCanyon();
            }
            remove => HookHandler._afterQuickMapFogCanyon -= value;
        }

        public static event Delegates.QuickMapFungalWastes_NormalArgs QuickMapFungalWastes
        {
            add
            {
                HookHandler._afterQuickMapFungalWastes += value;
                HookHandler.HookQuickMapFungalWastes();
            }
            remove => HookHandler._afterQuickMapFungalWastes -= value;
        }

        public static event Delegates.QuickMapGreenpath_NormalArgs QuickMapGreenpath
        {
            add
            {
                HookHandler._afterQuickMapGreenpath += value;
                HookHandler.HookQuickMapGreenpath();
            }
            remove => HookHandler._afterQuickMapGreenpath -= value;
        }

        public static event Delegates.QuickMapKingdomsEdge_NormalArgs QuickMapKingdomsEdge
        {
            add
            {
                HookHandler._afterQuickMapKingdomsEdge += value;
                HookHandler.HookQuickMapKingdomsEdge();
            }
            remove => HookHandler._afterQuickMapKingdomsEdge -= value;
        }

        public static event Delegates.QuickMapQueensGardens_NormalArgs QuickMapQueensGardens
        {
            add
            {
                HookHandler._afterQuickMapQueensGardens += value;
                HookHandler.HookQuickMapQueensGardens();
            }
            remove => HookHandler._afterQuickMapQueensGardens -= value;
        }

        public static event Delegates.QuickMapRestingGrounds_NormalArgs QuickMapRestingGrounds
        {
            add
            {
                HookHandler._afterQuickMapRestingGrounds += value;
                HookHandler.HookQuickMapRestingGrounds();
            }
            remove => HookHandler._afterQuickMapRestingGrounds -= value;
        }

        public static event Delegates.QuickMapDirtmouth_NormalArgs QuickMapDirtmouth
        {
            add
            {
                HookHandler._afterQuickMapDirtmouth += value;
                HookHandler.HookQuickMapDirtmouth();
            }
            remove => HookHandler._afterQuickMapDirtmouth -= value;
        }

        public static event Delegates.QuickMapWaterways_NormalArgs QuickMapWaterways
        {
            add
            {
                HookHandler._afterQuickMapWaterways += value;
                HookHandler.HookQuickMapWaterways();
            }
            remove => HookHandler._afterQuickMapWaterways -= value;
        }

        public static event Delegates.CloseQuickMap_NormalArgs CloseQuickMap
        {
            add
            {
                HookHandler._afterCloseQuickMap += value;
                HookHandler.HookCloseQuickMap();
            }
            remove => HookHandler._afterCloseQuickMap -= value;
        }

        public static event Delegates.PositionDreamGateMarker_NormalArgs PositionDreamGateMarker
        {
            add
            {
                HookHandler._afterPositionDreamGateMarker += value;
                HookHandler.HookPositionDreamGateMarker();
            }
            remove => HookHandler._afterPositionDreamGateMarker -= value;
        }

        public static event Delegates.PositionCompass_NormalArgs PositionCompass
        {
            add
            {
                HookHandler._afterPositionCompass += value;
                HookHandler.HookPositionCompass();
            }
            remove => HookHandler._afterPositionCompass -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.DisableMarkers_NormalArgs DisableMarkers
        {
            add
            {
                HookHandler._afterDisableMarkers += value;
                HookHandler.HookDisableMarkers();
            }
            remove => HookHandler._afterDisableMarkers -= value;
        }

        public static event Delegates.SetManualTilemap_NormalArgs SetManualTilemap
        {
            add
            {
                HookHandler._afterSetManualTilemap += value;
                HookHandler.HookSetManualTilemap();
            }
            remove => HookHandler._afterSetManualTilemap -= value;
        }

        public static event Delegates.SetDoorValues_NormalArgs SetDoorValues
        {
            add
            {
                HookHandler._afterSetDoorValues += value;
                HookHandler.HookSetDoorValues();
            }
            remove => HookHandler._afterSetDoorValues -= value;
        }

        public static event Delegates.SetCustomCompassPos_NormalArgs SetCustomCompassPos
        {
            add
            {
                HookHandler._afterSetCustomCompassPos += value;
                HookHandler.HookSetCustomCompassPos();
            }
            remove => HookHandler._afterSetCustomCompassPos -= value;
        }

        public static event Delegates.SetInRoom_NormalArgs SetInRoom
        {
            add
            {
                HookHandler._afterSetInRoom += value;
                HookHandler.HookSetInRoom();
            }
            remove => HookHandler._afterSetInRoom -= value;
        }

        public static event Delegates.SetCanPan_NormalArgs SetCanPan
        {
            add
            {
                HookHandler._afterSetCanPan += value;
                HookHandler.HookSetCanPan();
            }
            remove => HookHandler._afterSetCanPan -= value;
        }

        public static event Delegates.GetDoorMapZone_NormalArgs GetDoorMapZone
        {
            add
            {
                HookHandler._afterGetDoorMapZone += value;
                HookHandler.HookGetDoorMapZone();
            }
            remove => HookHandler._afterGetDoorMapZone -= value;
        }

        public static event Delegates.GetInRoom_NormalArgs GetInRoom
        {
            add
            {
                HookHandler._afterGetInRoom += value;
                HookHandler.HookGetInRoom();
            }
            remove => HookHandler._afterGetInRoom -= value;
        }

        public static event Delegates.SetPanArrows_NormalArgs SetPanArrows
        {
            add
            {
                HookHandler._afterSetPanArrows += value;
                HookHandler.HookSetPanArrows();
            }
            remove => HookHandler._afterSetPanArrows -= value;
        }

        public static event Delegates.KeepWithinBounds_NormalArgs KeepWithinBounds
        {
            add
            {
                HookHandler._afterKeepWithinBounds += value;
                HookHandler.HookKeepWithinBounds();
            }
            remove => HookHandler._afterKeepWithinBounds -= value;
        }

        public static event Delegates.StopPan_NormalArgs StopPan
        {
            add
            {
                HookHandler._afterStopPan += value;
                HookHandler.HookStopPan();
            }
            remove => HookHandler._afterStopPan -= value;
        }

        public static event Delegates.StartPan_NormalArgs StartPan
        {
            add
            {
                HookHandler._afterStartPan += value;
                HookHandler.HookStartPan();
            }
            remove => HookHandler._afterStartPan -= value;
        }

        public static event Delegates.SetupMapMarkers_NormalArgs SetupMapMarkers
        {
            add
            {
                HookHandler._afterSetupMapMarkers += value;
                HookHandler.HookSetupMapMarkers();
            }
            remove => HookHandler._afterSetupMapMarkers -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GameMap.hook_OnEnable OnEnable
        {
            add => On.GameMap.OnEnable += value;
            remove => On.GameMap.OnEnable -= value;
        }

        public static event On.GameMap.hook_OnDisable OnDisable
        {
            add => On.GameMap.OnDisable += value;
            remove => On.GameMap.OnDisable -= value;
        }

        public static event On.GameMap.hook_Start Start
        {
            add => On.GameMap.Start += value;
            remove => On.GameMap.Start -= value;
        }

        public static event On.GameMap.hook_LevelReady LevelReady
        {
            add => On.GameMap.LevelReady += value;
            remove => On.GameMap.LevelReady -= value;
        }

        public static event On.GameMap.hook_OnLevelWasLoaded OnLevelWasLoaded
        {
            add => On.GameMap.OnLevelWasLoaded += value;
            remove => On.GameMap.OnLevelWasLoaded -= value;
        }

        public static event On.GameMap.hook_SetCompassPoint SetCompassPoint
        {
            add => On.GameMap.SetCompassPoint += value;
            remove => On.GameMap.SetCompassPoint -= value;
        }

        public static event On.GameMap.hook_GetDoorValues GetDoorValues
        {
            add => On.GameMap.GetDoorValues += value;
            remove => On.GameMap.GetDoorValues -= value;
        }

        public static event On.GameMap.hook_SetupMap SetupMap
        {
            add => On.GameMap.SetupMap += value;
            remove => On.GameMap.SetupMap -= value;
        }

        public static event On.GameMap.hook_GetTilemapDimensions GetTilemapDimensions
        {
            add => On.GameMap.GetTilemapDimensions += value;
            remove => On.GameMap.GetTilemapDimensions -= value;
        }

        public static event On.GameMap.hook_WorldMap WorldMap
        {
            add => On.GameMap.WorldMap += value;
            remove => On.GameMap.WorldMap -= value;
        }

        public static event On.GameMap.hook_QuickMapAncientBasin QuickMapAncientBasin
        {
            add => On.GameMap.QuickMapAncientBasin += value;
            remove => On.GameMap.QuickMapAncientBasin -= value;
        }

        public static event On.GameMap.hook_QuickMapCity QuickMapCity
        {
            add => On.GameMap.QuickMapCity += value;
            remove => On.GameMap.QuickMapCity -= value;
        }

        public static event On.GameMap.hook_QuickMapCliffs QuickMapCliffs
        {
            add => On.GameMap.QuickMapCliffs += value;
            remove => On.GameMap.QuickMapCliffs -= value;
        }

        public static event On.GameMap.hook_QuickMapCrossroads QuickMapCrossroads
        {
            add => On.GameMap.QuickMapCrossroads += value;
            remove => On.GameMap.QuickMapCrossroads -= value;
        }

        public static event On.GameMap.hook_QuickMapCrystalPeak QuickMapCrystalPeak
        {
            add => On.GameMap.QuickMapCrystalPeak += value;
            remove => On.GameMap.QuickMapCrystalPeak -= value;
        }

        public static event On.GameMap.hook_QuickMapDeepnest QuickMapDeepnest
        {
            add => On.GameMap.QuickMapDeepnest += value;
            remove => On.GameMap.QuickMapDeepnest -= value;
        }

        public static event On.GameMap.hook_QuickMapFogCanyon QuickMapFogCanyon
        {
            add => On.GameMap.QuickMapFogCanyon += value;
            remove => On.GameMap.QuickMapFogCanyon -= value;
        }

        public static event On.GameMap.hook_QuickMapFungalWastes QuickMapFungalWastes
        {
            add => On.GameMap.QuickMapFungalWastes += value;
            remove => On.GameMap.QuickMapFungalWastes -= value;
        }

        public static event On.GameMap.hook_QuickMapGreenpath QuickMapGreenpath
        {
            add => On.GameMap.QuickMapGreenpath += value;
            remove => On.GameMap.QuickMapGreenpath -= value;
        }

        public static event On.GameMap.hook_QuickMapKingdomsEdge QuickMapKingdomsEdge
        {
            add => On.GameMap.QuickMapKingdomsEdge += value;
            remove => On.GameMap.QuickMapKingdomsEdge -= value;
        }

        public static event On.GameMap.hook_QuickMapQueensGardens QuickMapQueensGardens
        {
            add => On.GameMap.QuickMapQueensGardens += value;
            remove => On.GameMap.QuickMapQueensGardens -= value;
        }

        public static event On.GameMap.hook_QuickMapRestingGrounds QuickMapRestingGrounds
        {
            add => On.GameMap.QuickMapRestingGrounds += value;
            remove => On.GameMap.QuickMapRestingGrounds -= value;
        }

        public static event On.GameMap.hook_QuickMapDirtmouth QuickMapDirtmouth
        {
            add => On.GameMap.QuickMapDirtmouth += value;
            remove => On.GameMap.QuickMapDirtmouth -= value;
        }

        public static event On.GameMap.hook_QuickMapWaterways QuickMapWaterways
        {
            add => On.GameMap.QuickMapWaterways += value;
            remove => On.GameMap.QuickMapWaterways -= value;
        }

        public static event On.GameMap.hook_CloseQuickMap CloseQuickMap
        {
            add => On.GameMap.CloseQuickMap += value;
            remove => On.GameMap.CloseQuickMap -= value;
        }

        public static event On.GameMap.hook_PositionDreamGateMarker PositionDreamGateMarker
        {
            add => On.GameMap.PositionDreamGateMarker += value;
            remove => On.GameMap.PositionDreamGateMarker -= value;
        }

        public static event On.GameMap.hook_PositionCompass PositionCompass
        {
            add => On.GameMap.PositionCompass += value;
            remove => On.GameMap.PositionCompass -= value;
        }

        public static event On.GameMap.hook_Update Update
        {
            add => On.GameMap.Update += value;
            remove => On.GameMap.Update -= value;
        }

        public static event On.GameMap.hook_DisableMarkers DisableMarkers
        {
            add => On.GameMap.DisableMarkers += value;
            remove => On.GameMap.DisableMarkers -= value;
        }

        public static event On.GameMap.hook_SetManualTilemap SetManualTilemap
        {
            add => On.GameMap.SetManualTilemap += value;
            remove => On.GameMap.SetManualTilemap -= value;
        }

        public static event On.GameMap.hook_SetDoorValues SetDoorValues
        {
            add => On.GameMap.SetDoorValues += value;
            remove => On.GameMap.SetDoorValues -= value;
        }

        public static event On.GameMap.hook_SetCustomCompassPos SetCustomCompassPos
        {
            add => On.GameMap.SetCustomCompassPos += value;
            remove => On.GameMap.SetCustomCompassPos -= value;
        }

        public static event On.GameMap.hook_SetInRoom SetInRoom
        {
            add => On.GameMap.SetInRoom += value;
            remove => On.GameMap.SetInRoom -= value;
        }

        public static event On.GameMap.hook_SetCanPan SetCanPan
        {
            add => On.GameMap.SetCanPan += value;
            remove => On.GameMap.SetCanPan -= value;
        }

        public static event On.GameMap.hook_GetDoorMapZone GetDoorMapZone
        {
            add => On.GameMap.GetDoorMapZone += value;
            remove => On.GameMap.GetDoorMapZone -= value;
        }

        public static event On.GameMap.hook_GetInRoom GetInRoom
        {
            add => On.GameMap.GetInRoom += value;
            remove => On.GameMap.GetInRoom -= value;
        }

        public static event On.GameMap.hook_SetPanArrows SetPanArrows
        {
            add => On.GameMap.SetPanArrows += value;
            remove => On.GameMap.SetPanArrows -= value;
        }

        public static event On.GameMap.hook_KeepWithinBounds KeepWithinBounds
        {
            add => On.GameMap.KeepWithinBounds += value;
            remove => On.GameMap.KeepWithinBounds -= value;
        }

        public static event On.GameMap.hook_StopPan StopPan
        {
            add => On.GameMap.StopPan += value;
            remove => On.GameMap.StopPan -= value;
        }

        public static event On.GameMap.hook_StartPan StartPan
        {
            add => On.GameMap.StartPan += value;
            remove => On.GameMap.StartPan -= value;
        }

        public static event On.GameMap.hook_SetupMapMarkers SetupMapMarkers
        {
            add => On.GameMap.SetupMapMarkers += value;
            remove => On.GameMap.SetupMapMarkers -= value;
        }
    }
}