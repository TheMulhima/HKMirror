using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_UpdateRegistry class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_UpdateRegistry
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "get_instance", false),
                    get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static TMP_UpdateRegistry get_instance(Func<TMP_UpdateRegistry> orig)
        {
            if (_beforeget_instance != null)
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_instance != null)
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRegisterCanvasElementForLayoutRebuild()
        {
            if (!HookedList.Contains("RegisterCanvasElementForLayoutRebuild"))
            {
                HookedList.Add("RegisterCanvasElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForLayoutRebuild",
                        false), RegisterCanvasElementForLayoutRebuild);
            }
        }

        internal static event Delegates.RegisterCanvasElementForLayoutRebuild_BeforeArgs
            _beforeRegisterCanvasElementForLayoutRebuild;

        internal static event Delegates.RegisterCanvasElementForLayoutRebuild_AfterArgs
            _afterRegisterCanvasElementForLayoutRebuild;

        private static void RegisterCanvasElementForLayoutRebuild(Action<ICanvasElement> orig, ICanvasElement element)
        {
            Delegates.Params_RegisterCanvasElementForLayoutRebuild @params = new()
            {
                element = element
            };
            if (_beforeRegisterCanvasElementForLayoutRebuild != null)
                foreach (Delegates.RegisterCanvasElementForLayoutRebuild_BeforeArgs toInvoke in
                         _beforeRegisterCanvasElementForLayoutRebuild.GetInvocationList())
                    try
                    {
                        _beforeRegisterCanvasElementForLayoutRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            element = @params.element;
            orig(element);
            if (_afterRegisterCanvasElementForLayoutRebuild != null)
                foreach (Delegates.RegisterCanvasElementForLayoutRebuild_AfterArgs toInvoke in
                         _afterRegisterCanvasElementForLayoutRebuild.GetInvocationList())
                    try
                    {
                        _afterRegisterCanvasElementForLayoutRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInternalRegisterCanvasElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalRegisterCanvasElementForLayoutRebuild"))
            {
                HookedList.Add("InternalRegisterCanvasElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForLayoutRebuild"),
                    InternalRegisterCanvasElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs
            _beforeInternalRegisterCanvasElementForLayoutRebuild;

        internal static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_AfterArgs
            _afterInternalRegisterCanvasElementForLayoutRebuild;

        private static bool InternalRegisterCanvasElementForLayoutRebuild(
            Func<TMP_UpdateRegistry, ICanvasElement, bool> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalRegisterCanvasElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalRegisterCanvasElementForLayoutRebuild != null)
                foreach (Delegates.InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs toInvoke in
                         _beforeInternalRegisterCanvasElementForLayoutRebuild.GetInvocationList())
                    try
                    {
                        _beforeInternalRegisterCanvasElementForLayoutRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterCanvasElementForLayoutRebuild != null)
                foreach (Delegates.InternalRegisterCanvasElementForLayoutRebuild_AfterArgs toInvoke in
                         _afterInternalRegisterCanvasElementForLayoutRebuild.GetInvocationList())
                    try
                    {
                        retVal = _afterInternalRegisterCanvasElementForLayoutRebuild.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRegisterCanvasElementForGraphicRebuild()
        {
            if (!HookedList.Contains("RegisterCanvasElementForGraphicRebuild"))
            {
                HookedList.Add("RegisterCanvasElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForGraphicRebuild",
                        false), RegisterCanvasElementForGraphicRebuild);
            }
        }

        internal static event Delegates.RegisterCanvasElementForGraphicRebuild_BeforeArgs
            _beforeRegisterCanvasElementForGraphicRebuild;

        internal static event Delegates.RegisterCanvasElementForGraphicRebuild_AfterArgs
            _afterRegisterCanvasElementForGraphicRebuild;

        private static void RegisterCanvasElementForGraphicRebuild(Action<ICanvasElement> orig, ICanvasElement element)
        {
            Delegates.Params_RegisterCanvasElementForGraphicRebuild @params = new()
            {
                element = element
            };
            if (_beforeRegisterCanvasElementForGraphicRebuild != null)
                foreach (Delegates.RegisterCanvasElementForGraphicRebuild_BeforeArgs toInvoke in
                         _beforeRegisterCanvasElementForGraphicRebuild.GetInvocationList())
                    try
                    {
                        _beforeRegisterCanvasElementForGraphicRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            element = @params.element;
            orig(element);
            if (_afterRegisterCanvasElementForGraphicRebuild != null)
                foreach (Delegates.RegisterCanvasElementForGraphicRebuild_AfterArgs toInvoke in
                         _afterRegisterCanvasElementForGraphicRebuild.GetInvocationList())
                    try
                    {
                        _afterRegisterCanvasElementForGraphicRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInternalRegisterCanvasElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalRegisterCanvasElementForGraphicRebuild"))
            {
                HookedList.Add("InternalRegisterCanvasElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForGraphicRebuild"),
                    InternalRegisterCanvasElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs
            _beforeInternalRegisterCanvasElementForGraphicRebuild;

        internal static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_AfterArgs
            _afterInternalRegisterCanvasElementForGraphicRebuild;

        private static bool InternalRegisterCanvasElementForGraphicRebuild(
            Func<TMP_UpdateRegistry, ICanvasElement, bool> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalRegisterCanvasElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalRegisterCanvasElementForGraphicRebuild != null)
                foreach (Delegates.InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs toInvoke in
                         _beforeInternalRegisterCanvasElementForGraphicRebuild.GetInvocationList())
                    try
                    {
                        _beforeInternalRegisterCanvasElementForGraphicRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterCanvasElementForGraphicRebuild != null)
                foreach (Delegates.InternalRegisterCanvasElementForGraphicRebuild_AfterArgs toInvoke in
                         _afterInternalRegisterCanvasElementForGraphicRebuild.GetInvocationList())
                    try
                    {
                        retVal = _afterInternalRegisterCanvasElementForGraphicRebuild.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPerformUpdateForCanvasRendererObjects()
        {
            if (!HookedList.Contains("PerformUpdateForCanvasRendererObjects"))
            {
                HookedList.Add("PerformUpdateForCanvasRendererObjects");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForCanvasRendererObjects"),
                    PerformUpdateForCanvasRendererObjects);
            }
        }

        internal static event Delegates.PerformUpdateForCanvasRendererObjects_BeforeArgs
            _beforePerformUpdateForCanvasRendererObjects;

        internal static event Delegates.PerformUpdateForCanvasRendererObjects_AfterArgs
            _afterPerformUpdateForCanvasRendererObjects;

        private static void PerformUpdateForCanvasRendererObjects(Action<TMP_UpdateRegistry> orig,
            TMP_UpdateRegistry self)
        {
            Delegates.Params_PerformUpdateForCanvasRendererObjects @params = new()
            {
                self = self
            };
            if (_beforePerformUpdateForCanvasRendererObjects != null)
                foreach (Delegates.PerformUpdateForCanvasRendererObjects_BeforeArgs toInvoke in
                         _beforePerformUpdateForCanvasRendererObjects.GetInvocationList())
                    try
                    {
                        _beforePerformUpdateForCanvasRendererObjects?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPerformUpdateForCanvasRendererObjects != null)
                foreach (Delegates.PerformUpdateForCanvasRendererObjects_AfterArgs toInvoke in
                         _afterPerformUpdateForCanvasRendererObjects.GetInvocationList())
                    try
                    {
                        _afterPerformUpdateForCanvasRendererObjects.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPerformUpdateForMeshRendererObjects()
        {
            if (!HookedList.Contains("PerformUpdateForMeshRendererObjects"))
            {
                HookedList.Add("PerformUpdateForMeshRendererObjects");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForMeshRendererObjects"),
                    PerformUpdateForMeshRendererObjects);
            }
        }

        internal static event Delegates.PerformUpdateForMeshRendererObjects_BeforeArgs
            _beforePerformUpdateForMeshRendererObjects;

        internal static event Delegates.PerformUpdateForMeshRendererObjects_AfterArgs
            _afterPerformUpdateForMeshRendererObjects;

        private static void PerformUpdateForMeshRendererObjects(Action<TMP_UpdateRegistry> orig,
            TMP_UpdateRegistry self)
        {
            Delegates.Params_PerformUpdateForMeshRendererObjects @params = new()
            {
                self = self
            };
            if (_beforePerformUpdateForMeshRendererObjects != null)
                foreach (Delegates.PerformUpdateForMeshRendererObjects_BeforeArgs toInvoke in
                         _beforePerformUpdateForMeshRendererObjects.GetInvocationList())
                    try
                    {
                        _beforePerformUpdateForMeshRendererObjects?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPerformUpdateForMeshRendererObjects != null)
                foreach (Delegates.PerformUpdateForMeshRendererObjects_AfterArgs toInvoke in
                         _afterPerformUpdateForMeshRendererObjects.GetInvocationList())
                    try
                    {
                        _afterPerformUpdateForMeshRendererObjects.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUnRegisterCanvasElementForRebuild()
        {
            if (!HookedList.Contains("UnRegisterCanvasElementForRebuild"))
            {
                HookedList.Add("UnRegisterCanvasElementForRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "UnRegisterCanvasElementForRebuild",
                        false), UnRegisterCanvasElementForRebuild);
            }
        }

        internal static event Delegates.UnRegisterCanvasElementForRebuild_BeforeArgs
            _beforeUnRegisterCanvasElementForRebuild;

        internal static event Delegates.UnRegisterCanvasElementForRebuild_AfterArgs
            _afterUnRegisterCanvasElementForRebuild;

        private static void UnRegisterCanvasElementForRebuild(Action<ICanvasElement> orig, ICanvasElement element)
        {
            Delegates.Params_UnRegisterCanvasElementForRebuild @params = new()
            {
                element = element
            };
            if (_beforeUnRegisterCanvasElementForRebuild != null)
                foreach (Delegates.UnRegisterCanvasElementForRebuild_BeforeArgs toInvoke in
                         _beforeUnRegisterCanvasElementForRebuild.GetInvocationList())
                    try
                    {
                        _beforeUnRegisterCanvasElementForRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            element = @params.element;
            orig(element);
            if (_afterUnRegisterCanvasElementForRebuild != null)
                foreach (Delegates.UnRegisterCanvasElementForRebuild_AfterArgs toInvoke in
                         _afterUnRegisterCanvasElementForRebuild.GetInvocationList())
                    try
                    {
                        _afterUnRegisterCanvasElementForRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInternalUnRegisterCanvasElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterCanvasElementForLayoutRebuild"))
            {
                HookedList.Add("InternalUnRegisterCanvasElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForLayoutRebuild"),
                    InternalUnRegisterCanvasElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs
            _beforeInternalUnRegisterCanvasElementForLayoutRebuild;

        internal static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_AfterArgs
            _afterInternalUnRegisterCanvasElementForLayoutRebuild;

        private static void InternalUnRegisterCanvasElementForLayoutRebuild(
            Action<TMP_UpdateRegistry, ICanvasElement> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalUnRegisterCanvasElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalUnRegisterCanvasElementForLayoutRebuild != null)
                foreach (Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs toInvoke in
                         _beforeInternalUnRegisterCanvasElementForLayoutRebuild.GetInvocationList())
                    try
                    {
                        _beforeInternalUnRegisterCanvasElementForLayoutRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterCanvasElementForLayoutRebuild != null)
                foreach (Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_AfterArgs toInvoke in
                         _afterInternalUnRegisterCanvasElementForLayoutRebuild.GetInvocationList())
                    try
                    {
                        _afterInternalUnRegisterCanvasElementForLayoutRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInternalUnRegisterCanvasElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterCanvasElementForGraphicRebuild"))
            {
                HookedList.Add("InternalUnRegisterCanvasElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForGraphicRebuild"),
                    InternalUnRegisterCanvasElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs
            _beforeInternalUnRegisterCanvasElementForGraphicRebuild;

        internal static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_AfterArgs
            _afterInternalUnRegisterCanvasElementForGraphicRebuild;

        private static void InternalUnRegisterCanvasElementForGraphicRebuild(
            Action<TMP_UpdateRegistry, ICanvasElement> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalUnRegisterCanvasElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalUnRegisterCanvasElementForGraphicRebuild != null)
                foreach (Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs toInvoke in
                         _beforeInternalUnRegisterCanvasElementForGraphicRebuild.GetInvocationList())
                    try
                    {
                        _beforeInternalUnRegisterCanvasElementForGraphicRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterCanvasElementForGraphicRebuild != null)
                foreach (Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_AfterArgs toInvoke in
                         _afterInternalUnRegisterCanvasElementForGraphicRebuild.GetInvocationList())
                    try
                    {
                        _afterInternalUnRegisterCanvasElementForGraphicRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate TMP_UpdateRegistry get_instance_AfterArgs(TMP_UpdateRegistry ret);

        public delegate void get_instance_BeforeArgs();

        public delegate TMP_UpdateRegistry get_instance_WithArgs(Func<TMP_UpdateRegistry> orig);

        public delegate bool InternalRegisterCanvasElementForGraphicRebuild_AfterArgs(
            Params_InternalRegisterCanvasElementForGraphicRebuild args, bool ret);

        public delegate void InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs(
            Params_InternalRegisterCanvasElementForGraphicRebuild args);

        public delegate bool InternalRegisterCanvasElementForGraphicRebuild_WithArgs(
            Func<TMP_UpdateRegistry, ICanvasElement, bool> orig, TMP_UpdateRegistry self, ICanvasElement element);

        public delegate bool InternalRegisterCanvasElementForLayoutRebuild_AfterArgs(
            Params_InternalRegisterCanvasElementForLayoutRebuild args, bool ret);

        public delegate void InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs(
            Params_InternalRegisterCanvasElementForLayoutRebuild args);

        public delegate bool InternalRegisterCanvasElementForLayoutRebuild_WithArgs(
            Func<TMP_UpdateRegistry, ICanvasElement, bool> orig, TMP_UpdateRegistry self, ICanvasElement element);

        public delegate void InternalUnRegisterCanvasElementForGraphicRebuild_AfterArgs(
            Params_InternalUnRegisterCanvasElementForGraphicRebuild args);

        public delegate void InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs(
            Params_InternalUnRegisterCanvasElementForGraphicRebuild args);

        public delegate void InternalUnRegisterCanvasElementForGraphicRebuild_WithArgs(
            Action<TMP_UpdateRegistry, ICanvasElement> orig, TMP_UpdateRegistry self, ICanvasElement element);

        public delegate void InternalUnRegisterCanvasElementForLayoutRebuild_AfterArgs(
            Params_InternalUnRegisterCanvasElementForLayoutRebuild args);

        public delegate void InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs(
            Params_InternalUnRegisterCanvasElementForLayoutRebuild args);

        public delegate void InternalUnRegisterCanvasElementForLayoutRebuild_WithArgs(
            Action<TMP_UpdateRegistry, ICanvasElement> orig, TMP_UpdateRegistry self, ICanvasElement element);

        public delegate void PerformUpdateForCanvasRendererObjects_AfterArgs(
            Params_PerformUpdateForCanvasRendererObjects args);

        public delegate void PerformUpdateForCanvasRendererObjects_BeforeArgs(
            Params_PerformUpdateForCanvasRendererObjects args);

        public delegate void PerformUpdateForCanvasRendererObjects_WithArgs(Action<TMP_UpdateRegistry> orig,
            TMP_UpdateRegistry self);

        public delegate void PerformUpdateForMeshRendererObjects_AfterArgs(
            Params_PerformUpdateForMeshRendererObjects args);

        public delegate void PerformUpdateForMeshRendererObjects_BeforeArgs(
            Params_PerformUpdateForMeshRendererObjects args);

        public delegate void PerformUpdateForMeshRendererObjects_WithArgs(Action<TMP_UpdateRegistry> orig,
            TMP_UpdateRegistry self);

        public delegate void RegisterCanvasElementForGraphicRebuild_AfterArgs(
            Params_RegisterCanvasElementForGraphicRebuild args);

        public delegate void RegisterCanvasElementForGraphicRebuild_BeforeArgs(
            Params_RegisterCanvasElementForGraphicRebuild args);

        public delegate void RegisterCanvasElementForGraphicRebuild_WithArgs(Action<ICanvasElement> orig,
            ICanvasElement element);

        public delegate void RegisterCanvasElementForLayoutRebuild_AfterArgs(
            Params_RegisterCanvasElementForLayoutRebuild args);

        public delegate void RegisterCanvasElementForLayoutRebuild_BeforeArgs(
            Params_RegisterCanvasElementForLayoutRebuild args);

        public delegate void RegisterCanvasElementForLayoutRebuild_WithArgs(Action<ICanvasElement> orig,
            ICanvasElement element);

        public delegate void UnRegisterCanvasElementForRebuild_AfterArgs(Params_UnRegisterCanvasElementForRebuild args);

        public delegate void
            UnRegisterCanvasElementForRebuild_BeforeArgs(Params_UnRegisterCanvasElementForRebuild args);

        public delegate void UnRegisterCanvasElementForRebuild_WithArgs(Action<ICanvasElement> orig,
            ICanvasElement element);

        public sealed class Params_RegisterCanvasElementForLayoutRebuild
        {
            public ICanvasElement element;
        }

        public sealed class Params_InternalRegisterCanvasElementForLayoutRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_RegisterCanvasElementForGraphicRebuild
        {
            public ICanvasElement element;
        }

        public sealed class Params_InternalRegisterCanvasElementForGraphicRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_PerformUpdateForCanvasRendererObjects
        {
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_PerformUpdateForMeshRendererObjects
        {
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_UnRegisterCanvasElementForRebuild
        {
            public ICanvasElement element;
        }

        public sealed class Params_InternalUnRegisterCanvasElementForLayoutRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_InternalUnRegisterCanvasElementForGraphicRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.RegisterCanvasElementForLayoutRebuild_BeforeArgs
            RegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._beforeRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs
            InternalRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterCanvasElementForGraphicRebuild_BeforeArgs
            RegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._beforeRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs
            InternalRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.PerformUpdateForCanvasRendererObjects_BeforeArgs
            PerformUpdateForCanvasRendererObjects
            {
                add
                {
                    HookHandler._beforePerformUpdateForCanvasRendererObjects += value;
                    HookHandler.HookPerformUpdateForCanvasRendererObjects();
                }
                remove => HookHandler._beforePerformUpdateForCanvasRendererObjects -= value;
            }

        public static event Delegates.PerformUpdateForMeshRendererObjects_BeforeArgs PerformUpdateForMeshRendererObjects
        {
            add
            {
                HookHandler._beforePerformUpdateForMeshRendererObjects += value;
                HookHandler.HookPerformUpdateForMeshRendererObjects();
            }
            remove => HookHandler._beforePerformUpdateForMeshRendererObjects -= value;
        }

        public static event Delegates.UnRegisterCanvasElementForRebuild_BeforeArgs UnRegisterCanvasElementForRebuild
        {
            add
            {
                HookHandler._beforeUnRegisterCanvasElementForRebuild += value;
                HookHandler.HookUnRegisterCanvasElementForRebuild();
            }
            remove => HookHandler._beforeUnRegisterCanvasElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs
            InternalUnRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs
            InternalUnRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterCanvasElementForGraphicRebuild -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.RegisterCanvasElementForLayoutRebuild_AfterArgs
            RegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._afterRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_AfterArgs
            InternalRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterCanvasElementForGraphicRebuild_AfterArgs
            RegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._afterRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_AfterArgs
            InternalRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.PerformUpdateForCanvasRendererObjects_AfterArgs
            PerformUpdateForCanvasRendererObjects
            {
                add
                {
                    HookHandler._afterPerformUpdateForCanvasRendererObjects += value;
                    HookHandler.HookPerformUpdateForCanvasRendererObjects();
                }
                remove => HookHandler._afterPerformUpdateForCanvasRendererObjects -= value;
            }

        public static event Delegates.PerformUpdateForMeshRendererObjects_AfterArgs PerformUpdateForMeshRendererObjects
        {
            add
            {
                HookHandler._afterPerformUpdateForMeshRendererObjects += value;
                HookHandler.HookPerformUpdateForMeshRendererObjects();
            }
            remove => HookHandler._afterPerformUpdateForMeshRendererObjects -= value;
        }

        public static event Delegates.UnRegisterCanvasElementForRebuild_AfterArgs UnRegisterCanvasElementForRebuild
        {
            add
            {
                HookHandler._afterUnRegisterCanvasElementForRebuild += value;
                HookHandler.HookUnRegisterCanvasElementForRebuild();
            }
            remove => HookHandler._afterUnRegisterCanvasElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_AfterArgs
            InternalUnRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_AfterArgs
            InternalUnRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterCanvasElementForGraphicRebuild -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "get_instance", false), value);
        }

        public static event Delegates.RegisterCanvasElementForLayoutRebuild_WithArgs
            RegisterCanvasElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.RegisterCanvasElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForLayoutRebuild",
                        false), value);
                remove => HookEndpointManager.Remove<Delegates.RegisterCanvasElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForLayoutRebuild",
                        false), value);
            }

        public static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_WithArgs
            InternalRegisterCanvasElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterCanvasElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForLayoutRebuild"), value);
                remove => HookEndpointManager.Remove<Delegates.InternalRegisterCanvasElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForLayoutRebuild"), value);
            }

        public static event Delegates.RegisterCanvasElementForGraphicRebuild_WithArgs
            RegisterCanvasElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.RegisterCanvasElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForGraphicRebuild",
                        false), value);
                remove => HookEndpointManager.Remove<Delegates.RegisterCanvasElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForGraphicRebuild",
                        false), value);
            }

        public static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_WithArgs
            InternalRegisterCanvasElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterCanvasElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForGraphicRebuild"), value);
                remove => HookEndpointManager.Remove<Delegates.InternalRegisterCanvasElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForGraphicRebuild"), value);
            }

        public static event Delegates.PerformUpdateForCanvasRendererObjects_WithArgs
            PerformUpdateForCanvasRendererObjects
            {
                add => HookEndpointManager.Add<Delegates.PerformUpdateForCanvasRendererObjects_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForCanvasRendererObjects"),
                    value);
                remove => HookEndpointManager.Remove<Delegates.PerformUpdateForCanvasRendererObjects_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForCanvasRendererObjects"),
                    value);
            }

        public static event Delegates.PerformUpdateForMeshRendererObjects_WithArgs PerformUpdateForMeshRendererObjects
        {
            add => HookEndpointManager.Add<Delegates.PerformUpdateForMeshRendererObjects_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForMeshRendererObjects"),
                value);
            remove => HookEndpointManager.Remove<Delegates.PerformUpdateForMeshRendererObjects_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForMeshRendererObjects"),
                value);
        }

        public static event Delegates.UnRegisterCanvasElementForRebuild_WithArgs UnRegisterCanvasElementForRebuild
        {
            add => HookEndpointManager.Add<Delegates.UnRegisterCanvasElementForRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "UnRegisterCanvasElementForRebuild", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.UnRegisterCanvasElementForRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "UnRegisterCanvasElementForRebuild", false),
                value);
        }

        public static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_WithArgs
            InternalUnRegisterCanvasElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForLayoutRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                            "InternalUnRegisterCanvasElementForLayoutRebuild"), value);
            }

        public static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_WithArgs
            InternalUnRegisterCanvasElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForGraphicRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                            "InternalUnRegisterCanvasElementForGraphicRebuild"), value);
            }
    }
}