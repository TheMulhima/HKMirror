using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_UpdateRegistry class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_UpdateRegistry
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "get_instance", false),
                    get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_NormalArgs _afterget_instance;

        private static TMP_UpdateRegistry get_instance(Func<TMP_UpdateRegistry> orig)
        {
            _beforeget_instance?.Invoke();
            var retVal = orig();
            if (_afterget_instance != null) retVal = _afterget_instance.Invoke();
            return retVal;
        }

        internal static void HookRegisterCanvasElementForLayoutRebuild()
        {
            if (!HookedList.Contains("RegisterCanvasElementForLayoutRebuild"))
            {
                HookedList.Add("RegisterCanvasElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForLayoutRebuild",
                        false), RegisterCanvasElementForLayoutRebuild);
            }
        }

        internal static event Delegates.RegisterCanvasElementForLayoutRebuild_BeforeArgs
            _beforeRegisterCanvasElementForLayoutRebuild;

        internal static event Delegates.RegisterCanvasElementForLayoutRebuild_NormalArgs
            _afterRegisterCanvasElementForLayoutRebuild;

        private static void RegisterCanvasElementForLayoutRebuild(Action<ICanvasElement> orig, ICanvasElement element)
        {
            Delegates.Params_RegisterCanvasElementForLayoutRebuild @params = new()
            {
                element = element
            };
            _beforeRegisterCanvasElementForLayoutRebuild?.Invoke(@params);
            element = @params.element;
            orig(element);
            if (_afterRegisterCanvasElementForLayoutRebuild != null)
                _afterRegisterCanvasElementForLayoutRebuild.Invoke(@params);
        }

        internal static void HookInternalRegisterCanvasElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalRegisterCanvasElementForLayoutRebuild"))
            {
                HookedList.Add("InternalRegisterCanvasElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForLayoutRebuild"),
                    InternalRegisterCanvasElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs
            _beforeInternalRegisterCanvasElementForLayoutRebuild;

        internal static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_NormalArgs
            _afterInternalRegisterCanvasElementForLayoutRebuild;

        private static bool InternalRegisterCanvasElementForLayoutRebuild(
            Func<TMP_UpdateRegistry, ICanvasElement, bool> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalRegisterCanvasElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalRegisterCanvasElementForLayoutRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterCanvasElementForLayoutRebuild != null)
                retVal = _afterInternalRegisterCanvasElementForLayoutRebuild.Invoke(@params);
            return retVal;
        }

        internal static void HookRegisterCanvasElementForGraphicRebuild()
        {
            if (!HookedList.Contains("RegisterCanvasElementForGraphicRebuild"))
            {
                HookedList.Add("RegisterCanvasElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForGraphicRebuild",
                        false), RegisterCanvasElementForGraphicRebuild);
            }
        }

        internal static event Delegates.RegisterCanvasElementForGraphicRebuild_BeforeArgs
            _beforeRegisterCanvasElementForGraphicRebuild;

        internal static event Delegates.RegisterCanvasElementForGraphicRebuild_NormalArgs
            _afterRegisterCanvasElementForGraphicRebuild;

        private static void RegisterCanvasElementForGraphicRebuild(Action<ICanvasElement> orig, ICanvasElement element)
        {
            Delegates.Params_RegisterCanvasElementForGraphicRebuild @params = new()
            {
                element = element
            };
            _beforeRegisterCanvasElementForGraphicRebuild?.Invoke(@params);
            element = @params.element;
            orig(element);
            if (_afterRegisterCanvasElementForGraphicRebuild != null)
                _afterRegisterCanvasElementForGraphicRebuild.Invoke(@params);
        }

        internal static void HookInternalRegisterCanvasElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalRegisterCanvasElementForGraphicRebuild"))
            {
                HookedList.Add("InternalRegisterCanvasElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForGraphicRebuild"),
                    InternalRegisterCanvasElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs
            _beforeInternalRegisterCanvasElementForGraphicRebuild;

        internal static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_NormalArgs
            _afterInternalRegisterCanvasElementForGraphicRebuild;

        private static bool InternalRegisterCanvasElementForGraphicRebuild(
            Func<TMP_UpdateRegistry, ICanvasElement, bool> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalRegisterCanvasElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalRegisterCanvasElementForGraphicRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterCanvasElementForGraphicRebuild != null)
                retVal = _afterInternalRegisterCanvasElementForGraphicRebuild.Invoke(@params);
            return retVal;
        }

        internal static void HookPerformUpdateForCanvasRendererObjects()
        {
            if (!HookedList.Contains("PerformUpdateForCanvasRendererObjects"))
            {
                HookedList.Add("PerformUpdateForCanvasRendererObjects");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForCanvasRendererObjects"),
                    PerformUpdateForCanvasRendererObjects);
            }
        }

        internal static event Delegates.PerformUpdateForCanvasRendererObjects_BeforeArgs
            _beforePerformUpdateForCanvasRendererObjects;

        internal static event Delegates.PerformUpdateForCanvasRendererObjects_NormalArgs
            _afterPerformUpdateForCanvasRendererObjects;

        private static void PerformUpdateForCanvasRendererObjects(Action<TMP_UpdateRegistry> orig,
            TMP_UpdateRegistry self)
        {
            Delegates.Params_PerformUpdateForCanvasRendererObjects @params = new()
            {
                self = self
            };
            _beforePerformUpdateForCanvasRendererObjects?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPerformUpdateForCanvasRendererObjects != null)
                _afterPerformUpdateForCanvasRendererObjects.Invoke(@params);
        }

        internal static void HookPerformUpdateForMeshRendererObjects()
        {
            if (!HookedList.Contains("PerformUpdateForMeshRendererObjects"))
            {
                HookedList.Add("PerformUpdateForMeshRendererObjects");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForMeshRendererObjects"),
                    PerformUpdateForMeshRendererObjects);
            }
        }

        internal static event Delegates.PerformUpdateForMeshRendererObjects_BeforeArgs
            _beforePerformUpdateForMeshRendererObjects;

        internal static event Delegates.PerformUpdateForMeshRendererObjects_NormalArgs
            _afterPerformUpdateForMeshRendererObjects;

        private static void PerformUpdateForMeshRendererObjects(Action<TMP_UpdateRegistry> orig,
            TMP_UpdateRegistry self)
        {
            Delegates.Params_PerformUpdateForMeshRendererObjects @params = new()
            {
                self = self
            };
            _beforePerformUpdateForMeshRendererObjects?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPerformUpdateForMeshRendererObjects != null)
                _afterPerformUpdateForMeshRendererObjects.Invoke(@params);
        }

        internal static void HookUnRegisterCanvasElementForRebuild()
        {
            if (!HookedList.Contains("UnRegisterCanvasElementForRebuild"))
            {
                HookedList.Add("UnRegisterCanvasElementForRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "UnRegisterCanvasElementForRebuild",
                        false), UnRegisterCanvasElementForRebuild);
            }
        }

        internal static event Delegates.UnRegisterCanvasElementForRebuild_BeforeArgs
            _beforeUnRegisterCanvasElementForRebuild;

        internal static event Delegates.UnRegisterCanvasElementForRebuild_NormalArgs
            _afterUnRegisterCanvasElementForRebuild;

        private static void UnRegisterCanvasElementForRebuild(Action<ICanvasElement> orig, ICanvasElement element)
        {
            Delegates.Params_UnRegisterCanvasElementForRebuild @params = new()
            {
                element = element
            };
            _beforeUnRegisterCanvasElementForRebuild?.Invoke(@params);
            element = @params.element;
            orig(element);
            if (_afterUnRegisterCanvasElementForRebuild != null)
                _afterUnRegisterCanvasElementForRebuild.Invoke(@params);
        }

        internal static void HookInternalUnRegisterCanvasElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterCanvasElementForLayoutRebuild"))
            {
                HookedList.Add("InternalUnRegisterCanvasElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForLayoutRebuild"),
                    InternalUnRegisterCanvasElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs
            _beforeInternalUnRegisterCanvasElementForLayoutRebuild;

        internal static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_NormalArgs
            _afterInternalUnRegisterCanvasElementForLayoutRebuild;

        private static void InternalUnRegisterCanvasElementForLayoutRebuild(
            Action<TMP_UpdateRegistry, ICanvasElement> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalUnRegisterCanvasElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalUnRegisterCanvasElementForLayoutRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterCanvasElementForLayoutRebuild != null)
                _afterInternalUnRegisterCanvasElementForLayoutRebuild.Invoke(@params);
        }

        internal static void HookInternalUnRegisterCanvasElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterCanvasElementForGraphicRebuild"))
            {
                HookedList.Add("InternalUnRegisterCanvasElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForGraphicRebuild"),
                    InternalUnRegisterCanvasElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs
            _beforeInternalUnRegisterCanvasElementForGraphicRebuild;

        internal static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_NormalArgs
            _afterInternalUnRegisterCanvasElementForGraphicRebuild;

        private static void InternalUnRegisterCanvasElementForGraphicRebuild(
            Action<TMP_UpdateRegistry, ICanvasElement> orig, TMP_UpdateRegistry self, ICanvasElement element)
        {
            Delegates.Params_InternalUnRegisterCanvasElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalUnRegisterCanvasElementForGraphicRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterCanvasElementForGraphicRebuild != null)
                _afterInternalUnRegisterCanvasElementForGraphicRebuild.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_instance_BeforeArgs();

        public delegate TMP_UpdateRegistry get_instance_NormalArgs();

        public delegate void InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs(
            Params_InternalRegisterCanvasElementForGraphicRebuild args);

        public delegate bool InternalRegisterCanvasElementForGraphicRebuild_NormalArgs(
            Params_InternalRegisterCanvasElementForGraphicRebuild args);

        public delegate void InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs(
            Params_InternalRegisterCanvasElementForLayoutRebuild args);

        public delegate bool InternalRegisterCanvasElementForLayoutRebuild_NormalArgs(
            Params_InternalRegisterCanvasElementForLayoutRebuild args);

        public delegate void InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs(
            Params_InternalUnRegisterCanvasElementForGraphicRebuild args);

        public delegate void InternalUnRegisterCanvasElementForGraphicRebuild_NormalArgs(
            Params_InternalUnRegisterCanvasElementForGraphicRebuild args);

        public delegate void InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs(
            Params_InternalUnRegisterCanvasElementForLayoutRebuild args);

        public delegate void InternalUnRegisterCanvasElementForLayoutRebuild_NormalArgs(
            Params_InternalUnRegisterCanvasElementForLayoutRebuild args);

        public delegate void PerformUpdateForCanvasRendererObjects_BeforeArgs(
            Params_PerformUpdateForCanvasRendererObjects args);

        public delegate void PerformUpdateForCanvasRendererObjects_NormalArgs(
            Params_PerformUpdateForCanvasRendererObjects args);

        public delegate void PerformUpdateForMeshRendererObjects_BeforeArgs(
            Params_PerformUpdateForMeshRendererObjects args);

        public delegate void PerformUpdateForMeshRendererObjects_NormalArgs(
            Params_PerformUpdateForMeshRendererObjects args);

        public delegate void RegisterCanvasElementForGraphicRebuild_BeforeArgs(
            Params_RegisterCanvasElementForGraphicRebuild args);

        public delegate void RegisterCanvasElementForGraphicRebuild_NormalArgs(
            Params_RegisterCanvasElementForGraphicRebuild args);

        public delegate void RegisterCanvasElementForLayoutRebuild_BeforeArgs(
            Params_RegisterCanvasElementForLayoutRebuild args);

        public delegate void RegisterCanvasElementForLayoutRebuild_NormalArgs(
            Params_RegisterCanvasElementForLayoutRebuild args);

        public delegate void
            UnRegisterCanvasElementForRebuild_BeforeArgs(Params_UnRegisterCanvasElementForRebuild args);

        public delegate void
            UnRegisterCanvasElementForRebuild_NormalArgs(Params_UnRegisterCanvasElementForRebuild args);

        public sealed class Params_RegisterCanvasElementForLayoutRebuild
        {
            public ICanvasElement element;
        }

        public sealed class Params_InternalRegisterCanvasElementForLayoutRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_RegisterCanvasElementForGraphicRebuild
        {
            public ICanvasElement element;
        }

        public sealed class Params_InternalRegisterCanvasElementForGraphicRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_PerformUpdateForCanvasRendererObjects
        {
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_PerformUpdateForMeshRendererObjects
        {
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_UnRegisterCanvasElementForRebuild
        {
            public ICanvasElement element;
        }

        public sealed class Params_InternalUnRegisterCanvasElementForLayoutRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }

        public sealed class Params_InternalUnRegisterCanvasElementForGraphicRebuild
        {
            public ICanvasElement element;
            public TMP_UpdateRegistry self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.RegisterCanvasElementForLayoutRebuild_BeforeArgs
            RegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._beforeRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_BeforeArgs
            InternalRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterCanvasElementForGraphicRebuild_BeforeArgs
            RegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._beforeRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_BeforeArgs
            InternalRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.PerformUpdateForCanvasRendererObjects_BeforeArgs
            PerformUpdateForCanvasRendererObjects
            {
                add
                {
                    HookHandler._beforePerformUpdateForCanvasRendererObjects += value;
                    HookHandler.HookPerformUpdateForCanvasRendererObjects();
                }
                remove => HookHandler._beforePerformUpdateForCanvasRendererObjects -= value;
            }

        public static event Delegates.PerformUpdateForMeshRendererObjects_BeforeArgs PerformUpdateForMeshRendererObjects
        {
            add
            {
                HookHandler._beforePerformUpdateForMeshRendererObjects += value;
                HookHandler.HookPerformUpdateForMeshRendererObjects();
            }
            remove => HookHandler._beforePerformUpdateForMeshRendererObjects -= value;
        }

        public static event Delegates.UnRegisterCanvasElementForRebuild_BeforeArgs UnRegisterCanvasElementForRebuild
        {
            add
            {
                HookHandler._beforeUnRegisterCanvasElementForRebuild += value;
                HookHandler.HookUnRegisterCanvasElementForRebuild();
            }
            remove => HookHandler._beforeUnRegisterCanvasElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_BeforeArgs
            InternalUnRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_BeforeArgs
            InternalUnRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterCanvasElementForGraphicRebuild -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.RegisterCanvasElementForLayoutRebuild_NormalArgs
            RegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._afterRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_NormalArgs
            InternalRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterCanvasElementForGraphicRebuild_NormalArgs
            RegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._afterRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_NormalArgs
            InternalRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalRegisterCanvasElementForGraphicRebuild -= value;
            }

        public static event Delegates.PerformUpdateForCanvasRendererObjects_NormalArgs
            PerformUpdateForCanvasRendererObjects
            {
                add
                {
                    HookHandler._afterPerformUpdateForCanvasRendererObjects += value;
                    HookHandler.HookPerformUpdateForCanvasRendererObjects();
                }
                remove => HookHandler._afterPerformUpdateForCanvasRendererObjects -= value;
            }

        public static event Delegates.PerformUpdateForMeshRendererObjects_NormalArgs PerformUpdateForMeshRendererObjects
        {
            add
            {
                HookHandler._afterPerformUpdateForMeshRendererObjects += value;
                HookHandler.HookPerformUpdateForMeshRendererObjects();
            }
            remove => HookHandler._afterPerformUpdateForMeshRendererObjects -= value;
        }

        public static event Delegates.UnRegisterCanvasElementForRebuild_NormalArgs UnRegisterCanvasElementForRebuild
        {
            add
            {
                HookHandler._afterUnRegisterCanvasElementForRebuild += value;
                HookHandler.HookUnRegisterCanvasElementForRebuild();
            }
            remove => HookHandler._afterUnRegisterCanvasElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_NormalArgs
            InternalUnRegisterCanvasElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterCanvasElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterCanvasElementForLayoutRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_NormalArgs
            InternalUnRegisterCanvasElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterCanvasElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterCanvasElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterCanvasElementForGraphicRebuild -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "get_instance", false), value);
        }

        public static event Delegates.RegisterCanvasElementForLayoutRebuild_NormalArgs
            RegisterCanvasElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.RegisterCanvasElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForLayoutRebuild",
                        false), value);
                remove => HookEndpointManager.Remove<Delegates.RegisterCanvasElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForLayoutRebuild",
                        false), value);
            }

        public static event Delegates.InternalRegisterCanvasElementForLayoutRebuild_NormalArgs
            InternalRegisterCanvasElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterCanvasElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForLayoutRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalRegisterCanvasElementForLayoutRebuild_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                            "InternalRegisterCanvasElementForLayoutRebuild"), value);
            }

        public static event Delegates.RegisterCanvasElementForGraphicRebuild_NormalArgs
            RegisterCanvasElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.RegisterCanvasElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForGraphicRebuild",
                        false), value);
                remove => HookEndpointManager.Remove<Delegates.RegisterCanvasElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "RegisterCanvasElementForGraphicRebuild",
                        false), value);
            }

        public static event Delegates.InternalRegisterCanvasElementForGraphicRebuild_NormalArgs
            InternalRegisterCanvasElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterCanvasElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalRegisterCanvasElementForGraphicRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalRegisterCanvasElementForGraphicRebuild_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                            "InternalRegisterCanvasElementForGraphicRebuild"), value);
            }

        public static event Delegates.PerformUpdateForCanvasRendererObjects_NormalArgs
            PerformUpdateForCanvasRendererObjects
            {
                add => HookEndpointManager.Add<Delegates.PerformUpdateForCanvasRendererObjects_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForCanvasRendererObjects"),
                    value);
                remove => HookEndpointManager.Remove<Delegates.PerformUpdateForCanvasRendererObjects_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForCanvasRendererObjects"),
                    value);
            }

        public static event Delegates.PerformUpdateForMeshRendererObjects_NormalArgs PerformUpdateForMeshRendererObjects
        {
            add => HookEndpointManager.Add<Delegates.PerformUpdateForMeshRendererObjects_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForMeshRendererObjects"),
                value);
            remove => HookEndpointManager.Remove<Delegates.PerformUpdateForMeshRendererObjects_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "PerformUpdateForMeshRendererObjects"),
                value);
        }

        public static event Delegates.UnRegisterCanvasElementForRebuild_NormalArgs UnRegisterCanvasElementForRebuild
        {
            add => HookEndpointManager.Add<Delegates.UnRegisterCanvasElementForRebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "UnRegisterCanvasElementForRebuild", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.UnRegisterCanvasElementForRebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry), "UnRegisterCanvasElementForRebuild", false),
                value);
        }

        public static event Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_NormalArgs
            InternalUnRegisterCanvasElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForLayoutRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalUnRegisterCanvasElementForLayoutRebuild_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                            "InternalUnRegisterCanvasElementForLayoutRebuild"), value);
            }

        public static event Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_NormalArgs
            InternalUnRegisterCanvasElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                        "InternalUnRegisterCanvasElementForGraphicRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalUnRegisterCanvasElementForGraphicRebuild_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateRegistry),
                            "InternalUnRegisterCanvasElementForGraphicRebuild"), value);
            }
    }
}