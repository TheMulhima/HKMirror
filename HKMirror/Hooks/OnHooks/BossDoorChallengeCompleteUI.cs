using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for BossDoorChallengeCompleteUI class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossDoorChallengeCompleteUI
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossDoorChallengeCompleteUI.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.BossDoorChallengeCompleteUI.orig_Start orig, BossDoorChallengeCompleteUI self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.BossDoorChallengeCompleteUI.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.BossDoorChallengeCompleteUI.orig_Update orig, BossDoorChallengeCompleteUI self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowAchievements()
        {
            if (!HookedList.Contains("ShowAchievements"))
            {
                HookedList.Add("ShowAchievements");
                On.BossDoorChallengeCompleteUI.ShowAchievements += ShowAchievements;
            }
        }

        internal static event Delegates.ShowAchievements_BeforeArgs _beforeShowAchievements;

        private static System.Collections.IEnumerator ShowAchievements(
            On.BossDoorChallengeCompleteUI.orig_ShowAchievements orig, BossDoorChallengeCompleteUI self)
        {
            Delegates.Params_ShowAchievements @params = new()
            {
                self = self
            };
            if (_beforeShowAchievements != null)
            {
                foreach (Delegates.ShowAchievements_BeforeArgs toInvoke in _beforeShowAchievements.GetInvocationList())
                {
                    try
                    {
                        _beforeShowAchievements?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookSequence()
        {
            if (!HookedList.Contains("Sequence"))
            {
                HookedList.Add("Sequence");
                On.BossDoorChallengeCompleteUI.Sequence += Sequence;
            }
        }

        internal static event Delegates.Sequence_BeforeArgs _beforeSequence;

        private static System.Collections.IEnumerator Sequence(On.BossDoorChallengeCompleteUI.orig_Sequence orig,
            BossDoorChallengeCompleteUI self)
        {
            Delegates.Params_Sequence @params = new()
            {
                self = self
            };
            if (_beforeSequence != null)
            {
                foreach (Delegates.Sequence_BeforeArgs toInvoke in _beforeSequence.GetInvocationList())
                {
                    try
                    {
                        _beforeSequence?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public BossDoorChallengeCompleteUI self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<BossDoorChallengeCompleteUI> orig, BossDoorChallengeCompleteUI self);

        public sealed class Params_Update
        {
            public BossDoorChallengeCompleteUI self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<BossDoorChallengeCompleteUI> orig,
            BossDoorChallengeCompleteUI self);

        public sealed class Params_ShowAchievements
        {
            public BossDoorChallengeCompleteUI self;
        }

        public delegate void ShowAchievements_BeforeArgs(Params_ShowAchievements args);

        public delegate System.Collections.IEnumerator ShowAchievements_AfterArgs(Params_ShowAchievements args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator ShowAchievements_WithArgs(
            Func<BossDoorChallengeCompleteUI, System.Collections.IEnumerator> orig, BossDoorChallengeCompleteUI self);

        public sealed class Params_Sequence
        {
            public BossDoorChallengeCompleteUI self;
        }

        public delegate void Sequence_BeforeArgs(Params_Sequence args);

        public delegate System.Collections.IEnumerator Sequence_AfterArgs(Params_Sequence args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator Sequence_WithArgs(
            Func<BossDoorChallengeCompleteUI, System.Collections.IEnumerator> orig, BossDoorChallengeCompleteUI self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ShowAchievements_BeforeArgs ShowAchievements
        {
            add
            {
                HookHandler._beforeShowAchievements += value;
                HookHandler.HookShowAchievements();
            }
            remove => HookHandler._beforeShowAchievements -= value;
        }

        public static event Delegates.Sequence_BeforeArgs Sequence
        {
            add
            {
                HookHandler._beforeSequence += value;
                HookHandler.HookSequence();
            }
            remove => HookHandler._beforeSequence -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossDoorChallengeCompleteUI.hook_Start Start
        {
            add => On.BossDoorChallengeCompleteUI.Start += value;
            remove => On.BossDoorChallengeCompleteUI.Start -= value;
        }

        public static event On.BossDoorChallengeCompleteUI.hook_Update Update
        {
            add => On.BossDoorChallengeCompleteUI.Update += value;
            remove => On.BossDoorChallengeCompleteUI.Update -= value;
        }

        public static event On.BossDoorChallengeCompleteUI.hook_ShowAchievements ShowAchievements
        {
            add => On.BossDoorChallengeCompleteUI.ShowAchievements += value;
            remove => On.BossDoorChallengeCompleteUI.ShowAchievements -= value;
        }

        public static event On.BossDoorChallengeCompleteUI.hook_Sequence Sequence
        {
            add => On.BossDoorChallengeCompleteUI.Sequence += value;
            remove => On.BossDoorChallengeCompleteUI.Sequence -= value;
        }
    }
}