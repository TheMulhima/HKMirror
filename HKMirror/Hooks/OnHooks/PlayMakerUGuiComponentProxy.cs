namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerUGuiComponentProxy class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerUGuiComponentProxy
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PlayMakerUGuiComponentProxy.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.PlayMakerUGuiComponentProxy.orig_Start orig, PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.PlayMakerUGuiComponentProxy.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.PlayMakerUGuiComponentProxy.orig_Update orig, PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSetupEventTarget()
        {
            if (!HookedList.Contains("SetupEventTarget"))
            {
                HookedList.Add("SetupEventTarget");
                On.PlayMakerUGuiComponentProxy.SetupEventTarget += SetupEventTarget;
            }
        }

        internal static event Delegates.SetupEventTarget_BeforeArgs _beforeSetupEventTarget;
        internal static event Delegates.SetupEventTarget_NormalArgs _afterSetupEventTarget;

        private static void SetupEventTarget(On.PlayMakerUGuiComponentProxy.orig_SetupEventTarget orig,
            PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_SetupEventTarget @params = new()
            {
                self = self
            };
            _beforeSetupEventTarget?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupEventTarget != null) _afterSetupEventTarget.Invoke(@params);
        }

        internal static void HookSetupVariableTarget()
        {
            if (!HookedList.Contains("SetupVariableTarget"))
            {
                HookedList.Add("SetupVariableTarget");
                On.PlayMakerUGuiComponentProxy.SetupVariableTarget += SetupVariableTarget;
            }
        }

        internal static event Delegates.SetupVariableTarget_BeforeArgs _beforeSetupVariableTarget;
        internal static event Delegates.SetupVariableTarget_NormalArgs _afterSetupVariableTarget;

        private static void SetupVariableTarget(On.PlayMakerUGuiComponentProxy.orig_SetupVariableTarget orig,
            PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_SetupVariableTarget @params = new()
            {
                self = self
            };
            _beforeSetupVariableTarget?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupVariableTarget != null) _afterSetupVariableTarget.Invoke(@params);
        }

        internal static void HookSetupUiListeners()
        {
            if (!HookedList.Contains("SetupUiListeners"))
            {
                HookedList.Add("SetupUiListeners");
                On.PlayMakerUGuiComponentProxy.SetupUiListeners += SetupUiListeners;
            }
        }

        internal static event Delegates.SetupUiListeners_BeforeArgs _beforeSetupUiListeners;
        internal static event Delegates.SetupUiListeners_NormalArgs _afterSetupUiListeners;

        private static void SetupUiListeners(On.PlayMakerUGuiComponentProxy.orig_SetupUiListeners orig,
            PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_SetupUiListeners @params = new()
            {
                self = self
            };
            _beforeSetupUiListeners?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupUiListeners != null) _afterSetupUiListeners.Invoke(@params);
        }

        internal static void HookOnClick()
        {
            if (!HookedList.Contains("OnClick"))
            {
                HookedList.Add("OnClick");
                On.PlayMakerUGuiComponentProxy.OnClick += OnClick;
            }
        }

        internal static event Delegates.OnClick_BeforeArgs _beforeOnClick;
        internal static event Delegates.OnClick_NormalArgs _afterOnClick;

        private static void OnClick(On.PlayMakerUGuiComponentProxy.orig_OnClick orig, PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_OnClick @params = new()
            {
                self = self
            };
            _beforeOnClick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnClick != null) _afterOnClick.Invoke(@params);
        }

        internal static void HookOnValueChanged_bool()
        {
            if (!HookedList.Contains("OnValueChanged_bool"))
            {
                HookedList.Add("OnValueChanged_bool");
                On.PlayMakerUGuiComponentProxy.OnValueChanged_bool += OnValueChanged_bool;
            }
        }

        internal static event Delegates.OnValueChanged_bool_BeforeArgs _beforeOnValueChanged_bool;
        internal static event Delegates.OnValueChanged_bool_NormalArgs _afterOnValueChanged_bool;

        private static void OnValueChanged_bool(On.PlayMakerUGuiComponentProxy.orig_OnValueChanged_bool orig,
            PlayMakerUGuiComponentProxy self, bool value)
        {
            Delegates.Params_OnValueChanged_bool @params = new()
            {
                self = self, value = value
            };
            _beforeOnValueChanged_bool?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterOnValueChanged_bool != null) _afterOnValueChanged_bool.Invoke(@params);
        }

        internal static void HookOnValueChanged_float()
        {
            if (!HookedList.Contains("OnValueChanged_float"))
            {
                HookedList.Add("OnValueChanged_float");
                On.PlayMakerUGuiComponentProxy.OnValueChanged_float += OnValueChanged_float;
            }
        }

        internal static event Delegates.OnValueChanged_float_BeforeArgs _beforeOnValueChanged_float;
        internal static event Delegates.OnValueChanged_float_NormalArgs _afterOnValueChanged_float;

        private static void OnValueChanged_float(On.PlayMakerUGuiComponentProxy.orig_OnValueChanged_float orig,
            PlayMakerUGuiComponentProxy self, float value)
        {
            Delegates.Params_OnValueChanged_float @params = new()
            {
                self = self, value = value
            };
            _beforeOnValueChanged_float?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterOnValueChanged_float != null) _afterOnValueChanged_float.Invoke(@params);
        }

        internal static void HookOnValueChanged_Vector2()
        {
            if (!HookedList.Contains("OnValueChanged_Vector2"))
            {
                HookedList.Add("OnValueChanged_Vector2");
                On.PlayMakerUGuiComponentProxy.OnValueChanged_Vector2 += OnValueChanged_Vector2;
            }
        }

        internal static event Delegates.OnValueChanged_Vector2_BeforeArgs _beforeOnValueChanged_Vector2;
        internal static event Delegates.OnValueChanged_Vector2_NormalArgs _afterOnValueChanged_Vector2;

        private static void OnValueChanged_Vector2(On.PlayMakerUGuiComponentProxy.orig_OnValueChanged_Vector2 orig,
            PlayMakerUGuiComponentProxy self, Vector2 value)
        {
            Delegates.Params_OnValueChanged_Vector2 @params = new()
            {
                self = self, value = value
            };
            _beforeOnValueChanged_Vector2?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterOnValueChanged_Vector2 != null) _afterOnValueChanged_Vector2.Invoke(@params);
        }

        internal static void HookonEndEdit()
        {
            if (!HookedList.Contains("onEndEdit"))
            {
                HookedList.Add("onEndEdit");
                On.PlayMakerUGuiComponentProxy.onEndEdit += onEndEdit;
            }
        }

        internal static event Delegates.onEndEdit_BeforeArgs _beforeonEndEdit;
        internal static event Delegates.onEndEdit_NormalArgs _afteronEndEdit;

        private static void onEndEdit(On.PlayMakerUGuiComponentProxy.orig_onEndEdit orig,
            PlayMakerUGuiComponentProxy self, string value)
        {
            Delegates.Params_onEndEdit @params = new()
            {
                self = self, value = value
            };
            _beforeonEndEdit?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afteronEndEdit != null) _afteronEndEdit.Invoke(@params);
        }

        internal static void HookSetFsmVariable_Vector2()
        {
            if (!HookedList.Contains("SetFsmVariable_Vector2"))
            {
                HookedList.Add("SetFsmVariable_Vector2");
                On.PlayMakerUGuiComponentProxy.SetFsmVariable_Vector2 += SetFsmVariable_Vector2;
            }
        }

        internal static event Delegates.SetFsmVariable_Vector2_BeforeArgs _beforeSetFsmVariable_Vector2;
        internal static event Delegates.SetFsmVariable_Vector2_NormalArgs _afterSetFsmVariable_Vector2;

        private static void SetFsmVariable_Vector2(On.PlayMakerUGuiComponentProxy.orig_SetFsmVariable_Vector2 orig,
            PlayMakerUGuiComponentProxy self, Vector2 value)
        {
            Delegates.Params_SetFsmVariable_Vector2 @params = new()
            {
                self = self, value = value
            };
            _beforeSetFsmVariable_Vector2?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetFsmVariable_Vector2 != null) _afterSetFsmVariable_Vector2.Invoke(@params);
        }

        internal static void HookSetFsmVariable_bool()
        {
            if (!HookedList.Contains("SetFsmVariable_bool"))
            {
                HookedList.Add("SetFsmVariable_bool");
                On.PlayMakerUGuiComponentProxy.SetFsmVariable_bool += SetFsmVariable_bool;
            }
        }

        internal static event Delegates.SetFsmVariable_bool_BeforeArgs _beforeSetFsmVariable_bool;
        internal static event Delegates.SetFsmVariable_bool_NormalArgs _afterSetFsmVariable_bool;

        private static void SetFsmVariable_bool(On.PlayMakerUGuiComponentProxy.orig_SetFsmVariable_bool orig,
            PlayMakerUGuiComponentProxy self, bool value)
        {
            Delegates.Params_SetFsmVariable_bool @params = new()
            {
                self = self, value = value
            };
            _beforeSetFsmVariable_bool?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetFsmVariable_bool != null) _afterSetFsmVariable_bool.Invoke(@params);
        }

        internal static void HookSetFsmVariable_float()
        {
            if (!HookedList.Contains("SetFsmVariable_float"))
            {
                HookedList.Add("SetFsmVariable_float");
                On.PlayMakerUGuiComponentProxy.SetFsmVariable_float += SetFsmVariable_float;
            }
        }

        internal static event Delegates.SetFsmVariable_float_BeforeArgs _beforeSetFsmVariable_float;
        internal static event Delegates.SetFsmVariable_float_NormalArgs _afterSetFsmVariable_float;

        private static void SetFsmVariable_float(On.PlayMakerUGuiComponentProxy.orig_SetFsmVariable_float orig,
            PlayMakerUGuiComponentProxy self, float value)
        {
            Delegates.Params_SetFsmVariable_float @params = new()
            {
                self = self, value = value
            };
            _beforeSetFsmVariable_float?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetFsmVariable_float != null) _afterSetFsmVariable_float.Invoke(@params);
        }

        internal static void HookSetFsmVariable_string()
        {
            if (!HookedList.Contains("SetFsmVariable_string"))
            {
                HookedList.Add("SetFsmVariable_string");
                On.PlayMakerUGuiComponentProxy.SetFsmVariable_string += SetFsmVariable_string;
            }
        }

        internal static event Delegates.SetFsmVariable_string_BeforeArgs _beforeSetFsmVariable_string;
        internal static event Delegates.SetFsmVariable_string_NormalArgs _afterSetFsmVariable_string;

        private static void SetFsmVariable_string(On.PlayMakerUGuiComponentProxy.orig_SetFsmVariable_string orig,
            PlayMakerUGuiComponentProxy self, string value)
        {
            Delegates.Params_SetFsmVariable_string @params = new()
            {
                self = self, value = value
            };
            _beforeSetFsmVariable_string?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetFsmVariable_string != null) _afterSetFsmVariable_string.Invoke(@params);
        }

        internal static void HookFirePlayMakerEvent()
        {
            if (!HookedList.Contains("FirePlayMakerEvent"))
            {
                HookedList.Add("FirePlayMakerEvent");
                On.PlayMakerUGuiComponentProxy.FirePlayMakerEvent += FirePlayMakerEvent;
            }
        }

        internal static event Delegates.FirePlayMakerEvent_BeforeArgs _beforeFirePlayMakerEvent;
        internal static event Delegates.FirePlayMakerEvent_NormalArgs _afterFirePlayMakerEvent;

        private static void FirePlayMakerEvent(On.PlayMakerUGuiComponentProxy.orig_FirePlayMakerEvent orig,
            PlayMakerUGuiComponentProxy self, FsmEventData eventData)
        {
            Delegates.Params_FirePlayMakerEvent @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeFirePlayMakerEvent?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterFirePlayMakerEvent != null) _afterFirePlayMakerEvent.Invoke(@params);
        }

        internal static void HookDoesTargetImplementsEvent()
        {
            if (!HookedList.Contains("DoesTargetImplementsEvent"))
            {
                HookedList.Add("DoesTargetImplementsEvent");
                On.PlayMakerUGuiComponentProxy.DoesTargetImplementsEvent += DoesTargetImplementsEvent;
            }
        }

        internal static event Delegates.DoesTargetImplementsEvent_BeforeArgs _beforeDoesTargetImplementsEvent;
        internal static event Delegates.DoesTargetImplementsEvent_NormalArgs _afterDoesTargetImplementsEvent;

        private static bool DoesTargetImplementsEvent(
            On.PlayMakerUGuiComponentProxy.orig_DoesTargetImplementsEvent orig, PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_DoesTargetImplementsEvent @params = new()
            {
                self = self
            };
            _beforeDoesTargetImplementsEvent?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterDoesTargetImplementsEvent != null) retVal = _afterDoesTargetImplementsEvent.Invoke(@params);
            return retVal;
        }

        internal static void HookGetEventString()
        {
            if (!HookedList.Contains("GetEventString"))
            {
                HookedList.Add("GetEventString");
                On.PlayMakerUGuiComponentProxy.GetEventString += GetEventString;
            }
        }

        internal static event Delegates.GetEventString_BeforeArgs _beforeGetEventString;
        internal static event Delegates.GetEventString_NormalArgs _afterGetEventString;

        private static string GetEventString(On.PlayMakerUGuiComponentProxy.orig_GetEventString orig,
            PlayMakerUGuiComponentProxy self)
        {
            Delegates.Params_GetEventString @params = new()
            {
                self = self
            };
            _beforeGetEventString?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetEventString != null) retVal = _afterGetEventString.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoesTargetImplementsEvent_BeforeArgs(Params_DoesTargetImplementsEvent args);

        public delegate bool DoesTargetImplementsEvent_NormalArgs(Params_DoesTargetImplementsEvent args);

        public delegate void FirePlayMakerEvent_BeforeArgs(Params_FirePlayMakerEvent args);

        public delegate void FirePlayMakerEvent_NormalArgs(Params_FirePlayMakerEvent args);

        public delegate void GetEventString_BeforeArgs(Params_GetEventString args);

        public delegate string GetEventString_NormalArgs(Params_GetEventString args);

        public delegate void OnClick_BeforeArgs(Params_OnClick args);

        public delegate void OnClick_NormalArgs(Params_OnClick args);

        public delegate void onEndEdit_BeforeArgs(Params_onEndEdit args);

        public delegate void onEndEdit_NormalArgs(Params_onEndEdit args);

        public delegate void OnValueChanged_bool_BeforeArgs(Params_OnValueChanged_bool args);

        public delegate void OnValueChanged_bool_NormalArgs(Params_OnValueChanged_bool args);

        public delegate void OnValueChanged_float_BeforeArgs(Params_OnValueChanged_float args);

        public delegate void OnValueChanged_float_NormalArgs(Params_OnValueChanged_float args);

        public delegate void OnValueChanged_Vector2_BeforeArgs(Params_OnValueChanged_Vector2 args);

        public delegate void OnValueChanged_Vector2_NormalArgs(Params_OnValueChanged_Vector2 args);

        public delegate void SetFsmVariable_bool_BeforeArgs(Params_SetFsmVariable_bool args);

        public delegate void SetFsmVariable_bool_NormalArgs(Params_SetFsmVariable_bool args);

        public delegate void SetFsmVariable_float_BeforeArgs(Params_SetFsmVariable_float args);

        public delegate void SetFsmVariable_float_NormalArgs(Params_SetFsmVariable_float args);

        public delegate void SetFsmVariable_string_BeforeArgs(Params_SetFsmVariable_string args);

        public delegate void SetFsmVariable_string_NormalArgs(Params_SetFsmVariable_string args);

        public delegate void SetFsmVariable_Vector2_BeforeArgs(Params_SetFsmVariable_Vector2 args);

        public delegate void SetFsmVariable_Vector2_NormalArgs(Params_SetFsmVariable_Vector2 args);

        public delegate void SetupEventTarget_BeforeArgs(Params_SetupEventTarget args);

        public delegate void SetupEventTarget_NormalArgs(Params_SetupEventTarget args);

        public delegate void SetupUiListeners_BeforeArgs(Params_SetupUiListeners args);

        public delegate void SetupUiListeners_NormalArgs(Params_SetupUiListeners args);

        public delegate void SetupVariableTarget_BeforeArgs(Params_SetupVariableTarget args);

        public delegate void SetupVariableTarget_NormalArgs(Params_SetupVariableTarget args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Start
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_Update
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_SetupEventTarget
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_SetupVariableTarget
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_SetupUiListeners
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_OnClick
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_OnValueChanged_bool
        {
            public PlayMakerUGuiComponentProxy self;
            public bool value;
        }

        public sealed class Params_OnValueChanged_float
        {
            public PlayMakerUGuiComponentProxy self;
            public float value;
        }

        public sealed class Params_OnValueChanged_Vector2
        {
            public PlayMakerUGuiComponentProxy self;
            public Vector2 value;
        }

        public sealed class Params_onEndEdit
        {
            public PlayMakerUGuiComponentProxy self;
            public string value;
        }

        public sealed class Params_SetFsmVariable_Vector2
        {
            public PlayMakerUGuiComponentProxy self;
            public Vector2 value;
        }

        public sealed class Params_SetFsmVariable_bool
        {
            public PlayMakerUGuiComponentProxy self;
            public bool value;
        }

        public sealed class Params_SetFsmVariable_float
        {
            public PlayMakerUGuiComponentProxy self;
            public float value;
        }

        public sealed class Params_SetFsmVariable_string
        {
            public PlayMakerUGuiComponentProxy self;
            public string value;
        }

        public sealed class Params_FirePlayMakerEvent
        {
            public FsmEventData eventData;
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_DoesTargetImplementsEvent
        {
            public PlayMakerUGuiComponentProxy self;
        }

        public sealed class Params_GetEventString
        {
            public PlayMakerUGuiComponentProxy self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SetupEventTarget_BeforeArgs SetupEventTarget
        {
            add
            {
                HookHandler._beforeSetupEventTarget += value;
                HookHandler.HookSetupEventTarget();
            }
            remove => HookHandler._beforeSetupEventTarget -= value;
        }

        public static event Delegates.SetupVariableTarget_BeforeArgs SetupVariableTarget
        {
            add
            {
                HookHandler._beforeSetupVariableTarget += value;
                HookHandler.HookSetupVariableTarget();
            }
            remove => HookHandler._beforeSetupVariableTarget -= value;
        }

        public static event Delegates.SetupUiListeners_BeforeArgs SetupUiListeners
        {
            add
            {
                HookHandler._beforeSetupUiListeners += value;
                HookHandler.HookSetupUiListeners();
            }
            remove => HookHandler._beforeSetupUiListeners -= value;
        }

        public static event Delegates.OnClick_BeforeArgs OnClick
        {
            add
            {
                HookHandler._beforeOnClick += value;
                HookHandler.HookOnClick();
            }
            remove => HookHandler._beforeOnClick -= value;
        }

        public static event Delegates.OnValueChanged_bool_BeforeArgs OnValueChanged_bool
        {
            add
            {
                HookHandler._beforeOnValueChanged_bool += value;
                HookHandler.HookOnValueChanged_bool();
            }
            remove => HookHandler._beforeOnValueChanged_bool -= value;
        }

        public static event Delegates.OnValueChanged_float_BeforeArgs OnValueChanged_float
        {
            add
            {
                HookHandler._beforeOnValueChanged_float += value;
                HookHandler.HookOnValueChanged_float();
            }
            remove => HookHandler._beforeOnValueChanged_float -= value;
        }

        public static event Delegates.OnValueChanged_Vector2_BeforeArgs OnValueChanged_Vector2
        {
            add
            {
                HookHandler._beforeOnValueChanged_Vector2 += value;
                HookHandler.HookOnValueChanged_Vector2();
            }
            remove => HookHandler._beforeOnValueChanged_Vector2 -= value;
        }

        public static event Delegates.onEndEdit_BeforeArgs onEndEdit
        {
            add
            {
                HookHandler._beforeonEndEdit += value;
                HookHandler.HookonEndEdit();
            }
            remove => HookHandler._beforeonEndEdit -= value;
        }

        public static event Delegates.SetFsmVariable_Vector2_BeforeArgs SetFsmVariable_Vector2
        {
            add
            {
                HookHandler._beforeSetFsmVariable_Vector2 += value;
                HookHandler.HookSetFsmVariable_Vector2();
            }
            remove => HookHandler._beforeSetFsmVariable_Vector2 -= value;
        }

        public static event Delegates.SetFsmVariable_bool_BeforeArgs SetFsmVariable_bool
        {
            add
            {
                HookHandler._beforeSetFsmVariable_bool += value;
                HookHandler.HookSetFsmVariable_bool();
            }
            remove => HookHandler._beforeSetFsmVariable_bool -= value;
        }

        public static event Delegates.SetFsmVariable_float_BeforeArgs SetFsmVariable_float
        {
            add
            {
                HookHandler._beforeSetFsmVariable_float += value;
                HookHandler.HookSetFsmVariable_float();
            }
            remove => HookHandler._beforeSetFsmVariable_float -= value;
        }

        public static event Delegates.SetFsmVariable_string_BeforeArgs SetFsmVariable_string
        {
            add
            {
                HookHandler._beforeSetFsmVariable_string += value;
                HookHandler.HookSetFsmVariable_string();
            }
            remove => HookHandler._beforeSetFsmVariable_string -= value;
        }

        public static event Delegates.FirePlayMakerEvent_BeforeArgs FirePlayMakerEvent
        {
            add
            {
                HookHandler._beforeFirePlayMakerEvent += value;
                HookHandler.HookFirePlayMakerEvent();
            }
            remove => HookHandler._beforeFirePlayMakerEvent -= value;
        }

        public static event Delegates.DoesTargetImplementsEvent_BeforeArgs DoesTargetImplementsEvent
        {
            add
            {
                HookHandler._beforeDoesTargetImplementsEvent += value;
                HookHandler.HookDoesTargetImplementsEvent();
            }
            remove => HookHandler._beforeDoesTargetImplementsEvent -= value;
        }

        public static event Delegates.GetEventString_BeforeArgs GetEventString
        {
            add
            {
                HookHandler._beforeGetEventString += value;
                HookHandler.HookGetEventString();
            }
            remove => HookHandler._beforeGetEventString -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SetupEventTarget_NormalArgs SetupEventTarget
        {
            add
            {
                HookHandler._afterSetupEventTarget += value;
                HookHandler.HookSetupEventTarget();
            }
            remove => HookHandler._afterSetupEventTarget -= value;
        }

        public static event Delegates.SetupVariableTarget_NormalArgs SetupVariableTarget
        {
            add
            {
                HookHandler._afterSetupVariableTarget += value;
                HookHandler.HookSetupVariableTarget();
            }
            remove => HookHandler._afterSetupVariableTarget -= value;
        }

        public static event Delegates.SetupUiListeners_NormalArgs SetupUiListeners
        {
            add
            {
                HookHandler._afterSetupUiListeners += value;
                HookHandler.HookSetupUiListeners();
            }
            remove => HookHandler._afterSetupUiListeners -= value;
        }

        public static event Delegates.OnClick_NormalArgs OnClick
        {
            add
            {
                HookHandler._afterOnClick += value;
                HookHandler.HookOnClick();
            }
            remove => HookHandler._afterOnClick -= value;
        }

        public static event Delegates.OnValueChanged_bool_NormalArgs OnValueChanged_bool
        {
            add
            {
                HookHandler._afterOnValueChanged_bool += value;
                HookHandler.HookOnValueChanged_bool();
            }
            remove => HookHandler._afterOnValueChanged_bool -= value;
        }

        public static event Delegates.OnValueChanged_float_NormalArgs OnValueChanged_float
        {
            add
            {
                HookHandler._afterOnValueChanged_float += value;
                HookHandler.HookOnValueChanged_float();
            }
            remove => HookHandler._afterOnValueChanged_float -= value;
        }

        public static event Delegates.OnValueChanged_Vector2_NormalArgs OnValueChanged_Vector2
        {
            add
            {
                HookHandler._afterOnValueChanged_Vector2 += value;
                HookHandler.HookOnValueChanged_Vector2();
            }
            remove => HookHandler._afterOnValueChanged_Vector2 -= value;
        }

        public static event Delegates.onEndEdit_NormalArgs onEndEdit
        {
            add
            {
                HookHandler._afteronEndEdit += value;
                HookHandler.HookonEndEdit();
            }
            remove => HookHandler._afteronEndEdit -= value;
        }

        public static event Delegates.SetFsmVariable_Vector2_NormalArgs SetFsmVariable_Vector2
        {
            add
            {
                HookHandler._afterSetFsmVariable_Vector2 += value;
                HookHandler.HookSetFsmVariable_Vector2();
            }
            remove => HookHandler._afterSetFsmVariable_Vector2 -= value;
        }

        public static event Delegates.SetFsmVariable_bool_NormalArgs SetFsmVariable_bool
        {
            add
            {
                HookHandler._afterSetFsmVariable_bool += value;
                HookHandler.HookSetFsmVariable_bool();
            }
            remove => HookHandler._afterSetFsmVariable_bool -= value;
        }

        public static event Delegates.SetFsmVariable_float_NormalArgs SetFsmVariable_float
        {
            add
            {
                HookHandler._afterSetFsmVariable_float += value;
                HookHandler.HookSetFsmVariable_float();
            }
            remove => HookHandler._afterSetFsmVariable_float -= value;
        }

        public static event Delegates.SetFsmVariable_string_NormalArgs SetFsmVariable_string
        {
            add
            {
                HookHandler._afterSetFsmVariable_string += value;
                HookHandler.HookSetFsmVariable_string();
            }
            remove => HookHandler._afterSetFsmVariable_string -= value;
        }

        public static event Delegates.FirePlayMakerEvent_NormalArgs FirePlayMakerEvent
        {
            add
            {
                HookHandler._afterFirePlayMakerEvent += value;
                HookHandler.HookFirePlayMakerEvent();
            }
            remove => HookHandler._afterFirePlayMakerEvent -= value;
        }

        public static event Delegates.DoesTargetImplementsEvent_NormalArgs DoesTargetImplementsEvent
        {
            add
            {
                HookHandler._afterDoesTargetImplementsEvent += value;
                HookHandler.HookDoesTargetImplementsEvent();
            }
            remove => HookHandler._afterDoesTargetImplementsEvent -= value;
        }

        public static event Delegates.GetEventString_NormalArgs GetEventString
        {
            add
            {
                HookHandler._afterGetEventString += value;
                HookHandler.HookGetEventString();
            }
            remove => HookHandler._afterGetEventString -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerUGuiComponentProxy.hook_Start Start
        {
            add => On.PlayMakerUGuiComponentProxy.Start += value;
            remove => On.PlayMakerUGuiComponentProxy.Start -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_Update Update
        {
            add => On.PlayMakerUGuiComponentProxy.Update += value;
            remove => On.PlayMakerUGuiComponentProxy.Update -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetupEventTarget SetupEventTarget
        {
            add => On.PlayMakerUGuiComponentProxy.SetupEventTarget += value;
            remove => On.PlayMakerUGuiComponentProxy.SetupEventTarget -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetupVariableTarget SetupVariableTarget
        {
            add => On.PlayMakerUGuiComponentProxy.SetupVariableTarget += value;
            remove => On.PlayMakerUGuiComponentProxy.SetupVariableTarget -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetupUiListeners SetupUiListeners
        {
            add => On.PlayMakerUGuiComponentProxy.SetupUiListeners += value;
            remove => On.PlayMakerUGuiComponentProxy.SetupUiListeners -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_OnClick OnClick
        {
            add => On.PlayMakerUGuiComponentProxy.OnClick += value;
            remove => On.PlayMakerUGuiComponentProxy.OnClick -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_OnValueChanged_bool OnValueChanged_bool
        {
            add => On.PlayMakerUGuiComponentProxy.OnValueChanged_bool += value;
            remove => On.PlayMakerUGuiComponentProxy.OnValueChanged_bool -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_OnValueChanged_float OnValueChanged_float
        {
            add => On.PlayMakerUGuiComponentProxy.OnValueChanged_float += value;
            remove => On.PlayMakerUGuiComponentProxy.OnValueChanged_float -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_OnValueChanged_Vector2 OnValueChanged_Vector2
        {
            add => On.PlayMakerUGuiComponentProxy.OnValueChanged_Vector2 += value;
            remove => On.PlayMakerUGuiComponentProxy.OnValueChanged_Vector2 -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_onEndEdit onEndEdit
        {
            add => On.PlayMakerUGuiComponentProxy.onEndEdit += value;
            remove => On.PlayMakerUGuiComponentProxy.onEndEdit -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetFsmVariable_Vector2 SetFsmVariable_Vector2
        {
            add => On.PlayMakerUGuiComponentProxy.SetFsmVariable_Vector2 += value;
            remove => On.PlayMakerUGuiComponentProxy.SetFsmVariable_Vector2 -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetFsmVariable_bool SetFsmVariable_bool
        {
            add => On.PlayMakerUGuiComponentProxy.SetFsmVariable_bool += value;
            remove => On.PlayMakerUGuiComponentProxy.SetFsmVariable_bool -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetFsmVariable_float SetFsmVariable_float
        {
            add => On.PlayMakerUGuiComponentProxy.SetFsmVariable_float += value;
            remove => On.PlayMakerUGuiComponentProxy.SetFsmVariable_float -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_SetFsmVariable_string SetFsmVariable_string
        {
            add => On.PlayMakerUGuiComponentProxy.SetFsmVariable_string += value;
            remove => On.PlayMakerUGuiComponentProxy.SetFsmVariable_string -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_FirePlayMakerEvent FirePlayMakerEvent
        {
            add => On.PlayMakerUGuiComponentProxy.FirePlayMakerEvent += value;
            remove => On.PlayMakerUGuiComponentProxy.FirePlayMakerEvent -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_DoesTargetImplementsEvent DoesTargetImplementsEvent
        {
            add => On.PlayMakerUGuiComponentProxy.DoesTargetImplementsEvent += value;
            remove => On.PlayMakerUGuiComponentProxy.DoesTargetImplementsEvent -= value;
        }

        public static event On.PlayMakerUGuiComponentProxy.hook_GetEventString GetEventString
        {
            add => On.PlayMakerUGuiComponentProxy.GetEventString += value;
            remove => On.PlayMakerUGuiComponentProxy.GetEventString -= value;
        }
    }
}