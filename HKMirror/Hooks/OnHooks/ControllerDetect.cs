namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ControllerDetect class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnControllerDetect
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ControllerDetect.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.ControllerDetect.orig_Awake orig, ControllerDetect self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.ControllerDetect.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.ControllerDetect.orig_OnEnable orig, ControllerDetect self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.ControllerDetect.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.ControllerDetect.orig_OnDisable orig, ControllerDetect self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookControllerActivated()
        {
            if (!HookedList.Contains("ControllerActivated"))
            {
                HookedList.Add("ControllerActivated");
                On.ControllerDetect.ControllerActivated += ControllerActivated;
            }
        }

        internal static event Delegates.ControllerActivated_BeforeArgs _beforeControllerActivated;
        internal static event Delegates.ControllerActivated_NormalArgs _afterControllerActivated;

        private static void ControllerActivated(On.ControllerDetect.orig_ControllerActivated orig,
            ControllerDetect self, InputDevice inputDevice)
        {
            Delegates.Params_ControllerActivated @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeControllerActivated?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterControllerActivated != null) _afterControllerActivated.Invoke(@params);
        }

        internal static void HookControllerAttached()
        {
            if (!HookedList.Contains("ControllerAttached"))
            {
                HookedList.Add("ControllerAttached");
                On.ControllerDetect.ControllerAttached += ControllerAttached;
            }
        }

        internal static event Delegates.ControllerAttached_BeforeArgs _beforeControllerAttached;
        internal static event Delegates.ControllerAttached_NormalArgs _afterControllerAttached;

        private static void ControllerAttached(On.ControllerDetect.orig_ControllerAttached orig, ControllerDetect self,
            InputDevice inputDevice)
        {
            Delegates.Params_ControllerAttached @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeControllerAttached?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterControllerAttached != null) _afterControllerAttached.Invoke(@params);
        }

        internal static void HookControllerDetached()
        {
            if (!HookedList.Contains("ControllerDetached"))
            {
                HookedList.Add("ControllerDetached");
                On.ControllerDetect.ControllerDetached += ControllerDetached;
            }
        }

        internal static event Delegates.ControllerDetached_BeforeArgs _beforeControllerDetached;
        internal static event Delegates.ControllerDetached_NormalArgs _afterControllerDetached;

        private static void ControllerDetached(On.ControllerDetect.orig_ControllerDetached orig, ControllerDetect self,
            InputDevice inputDevice)
        {
            Delegates.Params_ControllerDetached @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            _beforeControllerDetached?.Invoke(@params);
            self = @params.self;
            inputDevice = @params.inputDevice;
            orig(self, inputDevice);
            if (_afterControllerDetached != null) _afterControllerDetached.Invoke(@params);
        }

        internal static void HookShowController()
        {
            if (!HookedList.Contains("ShowController"))
            {
                HookedList.Add("ShowController");
                On.ControllerDetect.ShowController += ShowController;
            }
        }

        internal static event Delegates.ShowController_BeforeArgs _beforeShowController;
        internal static event Delegates.ShowController_NormalArgs _afterShowController;

        private static void ShowController(On.ControllerDetect.orig_ShowController orig, ControllerDetect self,
            GamepadType gamepadType)
        {
            Delegates.Params_ShowController @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            _beforeShowController?.Invoke(@params);
            self = @params.self;
            gamepadType = @params.gamepadType;
            orig(self, gamepadType);
            if (_afterShowController != null) _afterShowController.Invoke(@params);
        }

        internal static void HookHideButtonLabels()
        {
            if (!HookedList.Contains("HideButtonLabels"))
            {
                HookedList.Add("HideButtonLabels");
                On.ControllerDetect.HideButtonLabels += HideButtonLabels;
            }
        }

        internal static event Delegates.HideButtonLabels_BeforeArgs _beforeHideButtonLabels;
        internal static event Delegates.HideButtonLabels_NormalArgs _afterHideButtonLabels;

        private static void HideButtonLabels(On.ControllerDetect.orig_HideButtonLabels orig, ControllerDetect self)
        {
            Delegates.Params_HideButtonLabels @params = new()
            {
                self = self
            };
            _beforeHideButtonLabels?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHideButtonLabels != null) _afterHideButtonLabels.Invoke(@params);
        }

        internal static void HookLookForActiveController()
        {
            if (!HookedList.Contains("LookForActiveController"))
            {
                HookedList.Add("LookForActiveController");
                On.ControllerDetect.LookForActiveController += LookForActiveController;
            }
        }

        internal static event Delegates.LookForActiveController_BeforeArgs _beforeLookForActiveController;
        internal static event Delegates.LookForActiveController_NormalArgs _afterLookForActiveController;

        private static void LookForActiveController(On.ControllerDetect.orig_LookForActiveController orig,
            ControllerDetect self)
        {
            Delegates.Params_LookForActiveController @params = new()
            {
                self = self
            };
            _beforeLookForActiveController?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLookForActiveController != null) _afterLookForActiveController.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ControllerActivated_BeforeArgs(Params_ControllerActivated args);

        public delegate void ControllerActivated_NormalArgs(Params_ControllerActivated args);

        public delegate void ControllerAttached_BeforeArgs(Params_ControllerAttached args);

        public delegate void ControllerAttached_NormalArgs(Params_ControllerAttached args);

        public delegate void ControllerDetached_BeforeArgs(Params_ControllerDetached args);

        public delegate void ControllerDetached_NormalArgs(Params_ControllerDetached args);

        public delegate void HideButtonLabels_BeforeArgs(Params_HideButtonLabels args);

        public delegate void HideButtonLabels_NormalArgs(Params_HideButtonLabels args);

        public delegate void LookForActiveController_BeforeArgs(Params_LookForActiveController args);

        public delegate void LookForActiveController_NormalArgs(Params_LookForActiveController args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void ShowController_BeforeArgs(Params_ShowController args);

        public delegate void ShowController_NormalArgs(Params_ShowController args);

        public sealed class Params_Awake
        {
            public ControllerDetect self;
        }

        public sealed class Params_OnEnable
        {
            public ControllerDetect self;
        }

        public sealed class Params_OnDisable
        {
            public ControllerDetect self;
        }

        public sealed class Params_ControllerActivated
        {
            public InputDevice inputDevice;
            public ControllerDetect self;
        }

        public sealed class Params_ControllerAttached
        {
            public InputDevice inputDevice;
            public ControllerDetect self;
        }

        public sealed class Params_ControllerDetached
        {
            public InputDevice inputDevice;
            public ControllerDetect self;
        }

        public sealed class Params_ShowController
        {
            public GamepadType gamepadType;
            public ControllerDetect self;
        }

        public sealed class Params_HideButtonLabels
        {
            public ControllerDetect self;
        }

        public sealed class Params_LookForActiveController
        {
            public ControllerDetect self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.ControllerActivated_BeforeArgs ControllerActivated
        {
            add
            {
                HookHandler._beforeControllerActivated += value;
                HookHandler.HookControllerActivated();
            }
            remove => HookHandler._beforeControllerActivated -= value;
        }

        public static event Delegates.ControllerAttached_BeforeArgs ControllerAttached
        {
            add
            {
                HookHandler._beforeControllerAttached += value;
                HookHandler.HookControllerAttached();
            }
            remove => HookHandler._beforeControllerAttached -= value;
        }

        public static event Delegates.ControllerDetached_BeforeArgs ControllerDetached
        {
            add
            {
                HookHandler._beforeControllerDetached += value;
                HookHandler.HookControllerDetached();
            }
            remove => HookHandler._beforeControllerDetached -= value;
        }

        public static event Delegates.ShowController_BeforeArgs ShowController
        {
            add
            {
                HookHandler._beforeShowController += value;
                HookHandler.HookShowController();
            }
            remove => HookHandler._beforeShowController -= value;
        }

        public static event Delegates.HideButtonLabels_BeforeArgs HideButtonLabels
        {
            add
            {
                HookHandler._beforeHideButtonLabels += value;
                HookHandler.HookHideButtonLabels();
            }
            remove => HookHandler._beforeHideButtonLabels -= value;
        }

        public static event Delegates.LookForActiveController_BeforeArgs LookForActiveController
        {
            add
            {
                HookHandler._beforeLookForActiveController += value;
                HookHandler.HookLookForActiveController();
            }
            remove => HookHandler._beforeLookForActiveController -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.ControllerActivated_NormalArgs ControllerActivated
        {
            add
            {
                HookHandler._afterControllerActivated += value;
                HookHandler.HookControllerActivated();
            }
            remove => HookHandler._afterControllerActivated -= value;
        }

        public static event Delegates.ControllerAttached_NormalArgs ControllerAttached
        {
            add
            {
                HookHandler._afterControllerAttached += value;
                HookHandler.HookControllerAttached();
            }
            remove => HookHandler._afterControllerAttached -= value;
        }

        public static event Delegates.ControllerDetached_NormalArgs ControllerDetached
        {
            add
            {
                HookHandler._afterControllerDetached += value;
                HookHandler.HookControllerDetached();
            }
            remove => HookHandler._afterControllerDetached -= value;
        }

        public static event Delegates.ShowController_NormalArgs ShowController
        {
            add
            {
                HookHandler._afterShowController += value;
                HookHandler.HookShowController();
            }
            remove => HookHandler._afterShowController -= value;
        }

        public static event Delegates.HideButtonLabels_NormalArgs HideButtonLabels
        {
            add
            {
                HookHandler._afterHideButtonLabels += value;
                HookHandler.HookHideButtonLabels();
            }
            remove => HookHandler._afterHideButtonLabels -= value;
        }

        public static event Delegates.LookForActiveController_NormalArgs LookForActiveController
        {
            add
            {
                HookHandler._afterLookForActiveController += value;
                HookHandler.HookLookForActiveController();
            }
            remove => HookHandler._afterLookForActiveController -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ControllerDetect.hook_Awake Awake
        {
            add => On.ControllerDetect.Awake += value;
            remove => On.ControllerDetect.Awake -= value;
        }

        public static event On.ControllerDetect.hook_OnEnable OnEnable
        {
            add => On.ControllerDetect.OnEnable += value;
            remove => On.ControllerDetect.OnEnable -= value;
        }

        public static event On.ControllerDetect.hook_OnDisable OnDisable
        {
            add => On.ControllerDetect.OnDisable += value;
            remove => On.ControllerDetect.OnDisable -= value;
        }

        public static event On.ControllerDetect.hook_ControllerActivated ControllerActivated
        {
            add => On.ControllerDetect.ControllerActivated += value;
            remove => On.ControllerDetect.ControllerActivated -= value;
        }

        public static event On.ControllerDetect.hook_ControllerAttached ControllerAttached
        {
            add => On.ControllerDetect.ControllerAttached += value;
            remove => On.ControllerDetect.ControllerAttached -= value;
        }

        public static event On.ControllerDetect.hook_ControllerDetached ControllerDetached
        {
            add => On.ControllerDetect.ControllerDetached += value;
            remove => On.ControllerDetect.ControllerDetached -= value;
        }

        public static event On.ControllerDetect.hook_ShowController ShowController
        {
            add => On.ControllerDetect.ShowController += value;
            remove => On.ControllerDetect.ShowController -= value;
        }

        public static event On.ControllerDetect.hook_HideButtonLabels HideButtonLabels
        {
            add => On.ControllerDetect.HideButtonLabels += value;
            remove => On.ControllerDetect.HideButtonLabels -= value;
        }

        public static event On.ControllerDetect.hook_LookForActiveController LookForActiveController
        {
            add => On.ControllerDetect.LookForActiveController += value;
            remove => On.ControllerDetect.LookForActiveController -= value;
        }
    }
}