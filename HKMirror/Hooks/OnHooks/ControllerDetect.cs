using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ControllerDetect class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnControllerDetect
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.ControllerDetect.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.ControllerDetect.orig_Awake orig,ControllerDetect self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.ControllerDetect.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.ControllerDetect.orig_OnEnable orig,ControllerDetect self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.ControllerDetect.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.ControllerDetect.orig_OnDisable orig,ControllerDetect self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookControllerActivated()
{
if (!HookedList.Contains("ControllerActivated"))
{
HookedList.Add("ControllerActivated");
On.ControllerDetect.ControllerActivated += ControllerActivated;

}
}
internal static event Delegates.ControllerActivated_BeforeArgs _beforeControllerActivated;
internal static event Delegates.ControllerActivated_AfterArgs _afterControllerActivated;
private static void ControllerActivated(On.ControllerDetect.orig_ControllerActivated orig,ControllerDetect self,  InControl.InputDevice inputDevice)
{
Delegates.Params_ControllerActivated @params = new() 
{
self = self
, inputDevice = inputDevice
};
if (_beforeControllerActivated != null)
{
foreach (Delegates.ControllerActivated_BeforeArgs toInvoke in _beforeControllerActivated.GetInvocationList())
{
try
{
_beforeControllerActivated?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
inputDevice = @params.inputDevice;
orig(self, inputDevice);
if (_afterControllerActivated != null)
{
foreach (Delegates.ControllerActivated_AfterArgs toInvoke in _afterControllerActivated.GetInvocationList())
{
try
{
_afterControllerActivated.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookControllerAttached()
{
if (!HookedList.Contains("ControllerAttached"))
{
HookedList.Add("ControllerAttached");
On.ControllerDetect.ControllerAttached += ControllerAttached;

}
}
internal static event Delegates.ControllerAttached_BeforeArgs _beforeControllerAttached;
internal static event Delegates.ControllerAttached_AfterArgs _afterControllerAttached;
private static void ControllerAttached(On.ControllerDetect.orig_ControllerAttached orig,ControllerDetect self,  InControl.InputDevice inputDevice)
{
Delegates.Params_ControllerAttached @params = new() 
{
self = self
, inputDevice = inputDevice
};
if (_beforeControllerAttached != null)
{
foreach (Delegates.ControllerAttached_BeforeArgs toInvoke in _beforeControllerAttached.GetInvocationList())
{
try
{
_beforeControllerAttached?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
inputDevice = @params.inputDevice;
orig(self, inputDevice);
if (_afterControllerAttached != null)
{
foreach (Delegates.ControllerAttached_AfterArgs toInvoke in _afterControllerAttached.GetInvocationList())
{
try
{
_afterControllerAttached.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookControllerDetached()
{
if (!HookedList.Contains("ControllerDetached"))
{
HookedList.Add("ControllerDetached");
On.ControllerDetect.ControllerDetached += ControllerDetached;

}
}
internal static event Delegates.ControllerDetached_BeforeArgs _beforeControllerDetached;
internal static event Delegates.ControllerDetached_AfterArgs _afterControllerDetached;
private static void ControllerDetached(On.ControllerDetect.orig_ControllerDetached orig,ControllerDetect self,  InControl.InputDevice inputDevice)
{
Delegates.Params_ControllerDetached @params = new() 
{
self = self
, inputDevice = inputDevice
};
if (_beforeControllerDetached != null)
{
foreach (Delegates.ControllerDetached_BeforeArgs toInvoke in _beforeControllerDetached.GetInvocationList())
{
try
{
_beforeControllerDetached?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
inputDevice = @params.inputDevice;
orig(self, inputDevice);
if (_afterControllerDetached != null)
{
foreach (Delegates.ControllerDetached_AfterArgs toInvoke in _afterControllerDetached.GetInvocationList())
{
try
{
_afterControllerDetached.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShowController()
{
if (!HookedList.Contains("ShowController"))
{
HookedList.Add("ShowController");
On.ControllerDetect.ShowController += ShowController;

}
}
internal static event Delegates.ShowController_BeforeArgs _beforeShowController;
internal static event Delegates.ShowController_AfterArgs _afterShowController;
private static void ShowController(On.ControllerDetect.orig_ShowController orig,ControllerDetect self,  GlobalEnums.GamepadType gamepadType)
{
Delegates.Params_ShowController @params = new() 
{
self = self
, gamepadType = gamepadType
};
if (_beforeShowController != null)
{
foreach (Delegates.ShowController_BeforeArgs toInvoke in _beforeShowController.GetInvocationList())
{
try
{
_beforeShowController?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
gamepadType = @params.gamepadType;
orig(self, gamepadType);
if (_afterShowController != null)
{
foreach (Delegates.ShowController_AfterArgs toInvoke in _afterShowController.GetInvocationList())
{
try
{
_afterShowController.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHideButtonLabels()
{
if (!HookedList.Contains("HideButtonLabels"))
{
HookedList.Add("HideButtonLabels");
On.ControllerDetect.HideButtonLabels += HideButtonLabels;

}
}
internal static event Delegates.HideButtonLabels_BeforeArgs _beforeHideButtonLabels;
internal static event Delegates.HideButtonLabels_AfterArgs _afterHideButtonLabels;
private static void HideButtonLabels(On.ControllerDetect.orig_HideButtonLabels orig,ControllerDetect self)
{
Delegates.Params_HideButtonLabels @params = new() 
{
self = self
};
if (_beforeHideButtonLabels != null)
{
foreach (Delegates.HideButtonLabels_BeforeArgs toInvoke in _beforeHideButtonLabels.GetInvocationList())
{
try
{
_beforeHideButtonLabels?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterHideButtonLabels != null)
{
foreach (Delegates.HideButtonLabels_AfterArgs toInvoke in _afterHideButtonLabels.GetInvocationList())
{
try
{
_afterHideButtonLabels.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLookForActiveController()
{
if (!HookedList.Contains("LookForActiveController"))
{
HookedList.Add("LookForActiveController");
On.ControllerDetect.LookForActiveController += LookForActiveController;

}
}
internal static event Delegates.LookForActiveController_BeforeArgs _beforeLookForActiveController;
internal static event Delegates.LookForActiveController_AfterArgs _afterLookForActiveController;
private static void LookForActiveController(On.ControllerDetect.orig_LookForActiveController orig,ControllerDetect self)
{
Delegates.Params_LookForActiveController @params = new() 
{
self = self
};
if (_beforeLookForActiveController != null)
{
foreach (Delegates.LookForActiveController_BeforeArgs toInvoke in _beforeLookForActiveController.GetInvocationList())
{
try
{
_beforeLookForActiveController?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLookForActiveController != null)
{
foreach (Delegates.LookForActiveController_AfterArgs toInvoke in _afterLookForActiveController.GetInvocationList())
{
try
{
_afterLookForActiveController.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public ControllerDetect self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<ControllerDetect> orig, ControllerDetect self);
public sealed class Params_OnEnable
{
public ControllerDetect self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<ControllerDetect> orig, ControllerDetect self);
public sealed class Params_OnDisable
{
public ControllerDetect self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<ControllerDetect> orig, ControllerDetect self);
public sealed class Params_ControllerActivated
{
public ControllerDetect self;
public InControl.InputDevice inputDevice;
}
public delegate void ControllerActivated_BeforeArgs(Params_ControllerActivated args);
public delegate void ControllerActivated_AfterArgs(Params_ControllerActivated args);
public delegate void ControllerActivated_WithArgs (Action<ControllerDetect,  InControl.InputDevice> orig, ControllerDetect self,  InControl.InputDevice inputDevice);
public sealed class Params_ControllerAttached
{
public ControllerDetect self;
public InControl.InputDevice inputDevice;
}
public delegate void ControllerAttached_BeforeArgs(Params_ControllerAttached args);
public delegate void ControllerAttached_AfterArgs(Params_ControllerAttached args);
public delegate void ControllerAttached_WithArgs (Action<ControllerDetect,  InControl.InputDevice> orig, ControllerDetect self,  InControl.InputDevice inputDevice);
public sealed class Params_ControllerDetached
{
public ControllerDetect self;
public InControl.InputDevice inputDevice;
}
public delegate void ControllerDetached_BeforeArgs(Params_ControllerDetached args);
public delegate void ControllerDetached_AfterArgs(Params_ControllerDetached args);
public delegate void ControllerDetached_WithArgs (Action<ControllerDetect,  InControl.InputDevice> orig, ControllerDetect self,  InControl.InputDevice inputDevice);
public sealed class Params_ShowController
{
public ControllerDetect self;
public GlobalEnums.GamepadType gamepadType;
}
public delegate void ShowController_BeforeArgs(Params_ShowController args);
public delegate void ShowController_AfterArgs(Params_ShowController args);
public delegate void ShowController_WithArgs (Action<ControllerDetect,  GlobalEnums.GamepadType> orig, ControllerDetect self,  GlobalEnums.GamepadType gamepadType);
public sealed class Params_HideButtonLabels
{
public ControllerDetect self;
}
public delegate void HideButtonLabels_BeforeArgs(Params_HideButtonLabels args);
public delegate void HideButtonLabels_AfterArgs(Params_HideButtonLabels args);
public delegate void HideButtonLabels_WithArgs (Action<ControllerDetect> orig, ControllerDetect self);
public sealed class Params_LookForActiveController
{
public ControllerDetect self;
}
public delegate void LookForActiveController_BeforeArgs(Params_LookForActiveController args);
public delegate void LookForActiveController_AfterArgs(Params_LookForActiveController args);
public delegate void LookForActiveController_WithArgs (Action<ControllerDetect> orig, ControllerDetect self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.ControllerActivated_BeforeArgs ControllerActivated
{
add
{

HookHandler._beforeControllerActivated += value;
HookHandler.HookControllerActivated();
}
remove => HookHandler._beforeControllerActivated -= value;
}
public static event Delegates.ControllerAttached_BeforeArgs ControllerAttached
{
add
{

HookHandler._beforeControllerAttached += value;
HookHandler.HookControllerAttached();
}
remove => HookHandler._beforeControllerAttached -= value;
}
public static event Delegates.ControllerDetached_BeforeArgs ControllerDetached
{
add
{

HookHandler._beforeControllerDetached += value;
HookHandler.HookControllerDetached();
}
remove => HookHandler._beforeControllerDetached -= value;
}
public static event Delegates.ShowController_BeforeArgs ShowController
{
add
{

HookHandler._beforeShowController += value;
HookHandler.HookShowController();
}
remove => HookHandler._beforeShowController -= value;
}
public static event Delegates.HideButtonLabels_BeforeArgs HideButtonLabels
{
add
{

HookHandler._beforeHideButtonLabels += value;
HookHandler.HookHideButtonLabels();
}
remove => HookHandler._beforeHideButtonLabels -= value;
}
public static event Delegates.LookForActiveController_BeforeArgs LookForActiveController
{
add
{

HookHandler._beforeLookForActiveController += value;
HookHandler.HookLookForActiveController();
}
remove => HookHandler._beforeLookForActiveController -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.ControllerActivated_AfterArgs ControllerActivated
{
add
{

HookHandler._afterControllerActivated += value;
HookHandler.HookControllerActivated();
}
remove => HookHandler._afterControllerActivated -= value;
}
public static event Delegates.ControllerAttached_AfterArgs ControllerAttached
{
add
{

HookHandler._afterControllerAttached += value;
HookHandler.HookControllerAttached();
}
remove => HookHandler._afterControllerAttached -= value;
}
public static event Delegates.ControllerDetached_AfterArgs ControllerDetached
{
add
{

HookHandler._afterControllerDetached += value;
HookHandler.HookControllerDetached();
}
remove => HookHandler._afterControllerDetached -= value;
}
public static event Delegates.ShowController_AfterArgs ShowController
{
add
{

HookHandler._afterShowController += value;
HookHandler.HookShowController();
}
remove => HookHandler._afterShowController -= value;
}
public static event Delegates.HideButtonLabels_AfterArgs HideButtonLabels
{
add
{

HookHandler._afterHideButtonLabels += value;
HookHandler.HookHideButtonLabels();
}
remove => HookHandler._afterHideButtonLabels -= value;
}
public static event Delegates.LookForActiveController_AfterArgs LookForActiveController
{
add
{

HookHandler._afterLookForActiveController += value;
HookHandler.HookLookForActiveController();
}
remove => HookHandler._afterLookForActiveController -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.ControllerDetect.hook_Awake Awake
{
add => On.ControllerDetect.Awake += value;
remove => On.ControllerDetect.Awake -= value;
}
public static event On.ControllerDetect.hook_OnEnable OnEnable
{
add => On.ControllerDetect.OnEnable += value;
remove => On.ControllerDetect.OnEnable -= value;
}
public static event On.ControllerDetect.hook_OnDisable OnDisable
{
add => On.ControllerDetect.OnDisable += value;
remove => On.ControllerDetect.OnDisable -= value;
}
public static event On.ControllerDetect.hook_ControllerActivated ControllerActivated
{
add => On.ControllerDetect.ControllerActivated += value;
remove => On.ControllerDetect.ControllerActivated -= value;
}
public static event On.ControllerDetect.hook_ControllerAttached ControllerAttached
{
add => On.ControllerDetect.ControllerAttached += value;
remove => On.ControllerDetect.ControllerAttached -= value;
}
public static event On.ControllerDetect.hook_ControllerDetached ControllerDetached
{
add => On.ControllerDetect.ControllerDetached += value;
remove => On.ControllerDetect.ControllerDetached -= value;
}
public static event On.ControllerDetect.hook_ShowController ShowController
{
add => On.ControllerDetect.ShowController += value;
remove => On.ControllerDetect.ShowController -= value;
}
public static event On.ControllerDetect.hook_HideButtonLabels HideButtonLabels
{
add => On.ControllerDetect.HideButtonLabels += value;
remove => On.ControllerDetect.HideButtonLabels -= value;
}
public static event On.ControllerDetect.hook_LookForActiveController LookForActiveController
{
add => On.ControllerDetect.LookForActiveController += value;
remove => On.ControllerDetect.LookForActiveController -= value;
}
}

}
