namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AcidCorpseSplash class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAcidCorpseSplash
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.AcidCorpseSplash.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.AcidCorpseSplash.orig_Start orig, AcidCorpseSplash self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookCorpseSplash()
        {
            if (!HookedList.Contains("CorpseSplash"))
            {
                HookedList.Add("CorpseSplash");
                On.AcidCorpseSplash.CorpseSplash += CorpseSplash;
            }
        }

        internal static event Delegates.CorpseSplash_BeforeArgs _beforeCorpseSplash;

        private static IEnumerator CorpseSplash(On.AcidCorpseSplash.orig_CorpseSplash orig, AcidCorpseSplash self,
            GameObject corpseObject)
        {
            Delegates.Params_CorpseSplash @params = new()
            {
                self = self, corpseObject = corpseObject
            };
            _beforeCorpseSplash?.Invoke(@params);
            self = @params.self;
            corpseObject = @params.corpseObject;
            return orig(self, corpseObject);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CorpseSplash_BeforeArgs(Params_CorpseSplash args);

        public delegate IEnumerator CorpseSplash_NormalArgs(Params_CorpseSplash args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public AcidCorpseSplash self;
        }

        public sealed class Params_CorpseSplash
        {
            public GameObject corpseObject;
            public AcidCorpseSplash self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.CorpseSplash_BeforeArgs CorpseSplash
        {
            add
            {
                HookHandler._beforeCorpseSplash += value;
                HookHandler.HookCorpseSplash();
            }
            remove => HookHandler._beforeCorpseSplash -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.AcidCorpseSplash.hook_Start Start
        {
            add => On.AcidCorpseSplash.Start += value;
            remove => On.AcidCorpseSplash.Start -= value;
        }

        public static event On.AcidCorpseSplash.hook_CorpseSplash CorpseSplash
        {
            add => On.AcidCorpseSplash.CorpseSplash += value;
            remove => On.AcidCorpseSplash.CorpseSplash -= value;
        }
    }
}