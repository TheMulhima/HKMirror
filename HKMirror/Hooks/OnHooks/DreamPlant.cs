using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for DreamPlant class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDreamPlant
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.DreamPlant.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.DreamPlant.orig_Awake orig,DreamPlant self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.DreamPlant.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.DreamPlant.orig_Start orig,DreamPlant self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnTriggerEnter2D()
{
if (!HookedList.Contains("OnTriggerEnter2D"))
{
HookedList.Add("OnTriggerEnter2D");
On.DreamPlant.OnTriggerEnter2D += OnTriggerEnter2D;

}
}
internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;
private static void OnTriggerEnter2D(On.DreamPlant.orig_OnTriggerEnter2D orig,DreamPlant self,  UnityEngine.Collider2D collision)
{
Delegates.Params_OnTriggerEnter2D @params = new() 
{
self = self
, collision = collision
};
if (_beforeOnTriggerEnter2D != null)
{
foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
{
try
{
_beforeOnTriggerEnter2D?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
collision = @params.collision;
orig(self, collision);
if (_afterOnTriggerEnter2D != null)
{
foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
{
try
{
_afterOnTriggerEnter2D.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddOrbCount()
{
if (!HookedList.Contains("AddOrbCount"))
{
HookedList.Add("AddOrbCount");
On.DreamPlant.AddOrbCount += AddOrbCount;

}
}
internal static event Delegates.AddOrbCount_BeforeArgs _beforeAddOrbCount;
internal static event Delegates.AddOrbCount_AfterArgs _afterAddOrbCount;
private static void AddOrbCount(On.DreamPlant.orig_AddOrbCount orig,DreamPlant self)
{
Delegates.Params_AddOrbCount @params = new() 
{
self = self
};
if (_beforeAddOrbCount != null)
{
foreach (Delegates.AddOrbCount_BeforeArgs toInvoke in _beforeAddOrbCount.GetInvocationList())
{
try
{
_beforeAddOrbCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAddOrbCount != null)
{
foreach (Delegates.AddOrbCount_AfterArgs toInvoke in _afterAddOrbCount.GetInvocationList())
{
try
{
_afterAddOrbCount.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRemoveOrbCount()
{
if (!HookedList.Contains("RemoveOrbCount"))
{
HookedList.Add("RemoveOrbCount");
On.DreamPlant.RemoveOrbCount += RemoveOrbCount;

}
}
internal static event Delegates.RemoveOrbCount_BeforeArgs _beforeRemoveOrbCount;
internal static event Delegates.RemoveOrbCount_AfterArgs _afterRemoveOrbCount;
private static void RemoveOrbCount(On.DreamPlant.orig_RemoveOrbCount orig,DreamPlant self)
{
Delegates.Params_RemoveOrbCount @params = new() 
{
self = self
};
if (_beforeRemoveOrbCount != null)
{
foreach (Delegates.RemoveOrbCount_BeforeArgs toInvoke in _beforeRemoveOrbCount.GetInvocationList())
{
try
{
_beforeRemoveOrbCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRemoveOrbCount != null)
{
foreach (Delegates.RemoveOrbCount_AfterArgs toInvoke in _afterRemoveOrbCount.GetInvocationList())
{
try
{
_afterRemoveOrbCount.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShowPrompt()
{
if (!HookedList.Contains("ShowPrompt"))
{
HookedList.Add("ShowPrompt");
On.DreamPlant.ShowPrompt += ShowPrompt;

}
}
internal static event Delegates.ShowPrompt_BeforeArgs _beforeShowPrompt;
internal static event Delegates.ShowPrompt_AfterArgs _afterShowPrompt;
private static void ShowPrompt(On.DreamPlant.orig_ShowPrompt orig,DreamPlant self,  bool show)
{
Delegates.Params_ShowPrompt @params = new() 
{
self = self
, show = show
};
if (_beforeShowPrompt != null)
{
foreach (Delegates.ShowPrompt_BeforeArgs toInvoke in _beforeShowPrompt.GetInvocationList())
{
try
{
_beforeShowPrompt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
show = @params.show;
orig(self, show);
if (_afterShowPrompt != null)
{
foreach (Delegates.ShowPrompt_AfterArgs toInvoke in _afterShowPrompt.GetInvocationList())
{
try
{
_afterShowPrompt.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCheckOrbs()
{
if (!HookedList.Contains("CheckOrbs"))
{
HookedList.Add("CheckOrbs");
On.DreamPlant.CheckOrbs += CheckOrbs;

}
}
internal static event Delegates.CheckOrbs_BeforeArgs _beforeCheckOrbs;
private static System.Collections.IEnumerator CheckOrbs(On.DreamPlant.orig_CheckOrbs orig,DreamPlant self)
{
Delegates.Params_CheckOrbs @params = new() 
{
self = self
};
if (_beforeCheckOrbs != null)
{
foreach (Delegates.CheckOrbs_BeforeArgs toInvoke in _beforeCheckOrbs.GetInvocationList())
{
try
{
_beforeCheckOrbs?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public DreamPlant self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<DreamPlant> orig, DreamPlant self);
public sealed class Params_Start
{
public DreamPlant self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<DreamPlant> orig, DreamPlant self);
public sealed class Params_OnTriggerEnter2D
{
public DreamPlant self;
public UnityEngine.Collider2D collision;
}
public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);
public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);
public delegate void OnTriggerEnter2D_WithArgs (Action<DreamPlant,  UnityEngine.Collider2D> orig, DreamPlant self,  UnityEngine.Collider2D collision);
public sealed class Params_AddOrbCount
{
public DreamPlant self;
}
public delegate void AddOrbCount_BeforeArgs(Params_AddOrbCount args);
public delegate void AddOrbCount_AfterArgs(Params_AddOrbCount args);
public delegate void AddOrbCount_WithArgs (Action<DreamPlant> orig, DreamPlant self);
public sealed class Params_RemoveOrbCount
{
public DreamPlant self;
}
public delegate void RemoveOrbCount_BeforeArgs(Params_RemoveOrbCount args);
public delegate void RemoveOrbCount_AfterArgs(Params_RemoveOrbCount args);
public delegate void RemoveOrbCount_WithArgs (Action<DreamPlant> orig, DreamPlant self);
public sealed class Params_ShowPrompt
{
public DreamPlant self;
public bool show;
}
public delegate void ShowPrompt_BeforeArgs(Params_ShowPrompt args);
public delegate void ShowPrompt_AfterArgs(Params_ShowPrompt args);
public delegate void ShowPrompt_WithArgs (Action<DreamPlant,  bool> orig, DreamPlant self,  bool show);
public sealed class Params_CheckOrbs
{
public DreamPlant self;
}
public delegate void CheckOrbs_BeforeArgs(Params_CheckOrbs args);
public delegate System.Collections.IEnumerator CheckOrbs_AfterArgs(Params_CheckOrbs args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator CheckOrbs_WithArgs (Func<DreamPlant, System.Collections.IEnumerator> orig, DreamPlant self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
{
add
{

HookHandler._beforeOnTriggerEnter2D += value;
HookHandler.HookOnTriggerEnter2D();
}
remove => HookHandler._beforeOnTriggerEnter2D -= value;
}
public static event Delegates.AddOrbCount_BeforeArgs AddOrbCount
{
add
{

HookHandler._beforeAddOrbCount += value;
HookHandler.HookAddOrbCount();
}
remove => HookHandler._beforeAddOrbCount -= value;
}
public static event Delegates.RemoveOrbCount_BeforeArgs RemoveOrbCount
{
add
{

HookHandler._beforeRemoveOrbCount += value;
HookHandler.HookRemoveOrbCount();
}
remove => HookHandler._beforeRemoveOrbCount -= value;
}
public static event Delegates.ShowPrompt_BeforeArgs ShowPrompt
{
add
{

HookHandler._beforeShowPrompt += value;
HookHandler.HookShowPrompt();
}
remove => HookHandler._beforeShowPrompt -= value;
}
public static event Delegates.CheckOrbs_BeforeArgs CheckOrbs
{
add
{

HookHandler._beforeCheckOrbs += value;
HookHandler.HookCheckOrbs();
}
remove => HookHandler._beforeCheckOrbs -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
{
add
{

HookHandler._afterOnTriggerEnter2D += value;
HookHandler.HookOnTriggerEnter2D();
}
remove => HookHandler._afterOnTriggerEnter2D -= value;
}
public static event Delegates.AddOrbCount_AfterArgs AddOrbCount
{
add
{

HookHandler._afterAddOrbCount += value;
HookHandler.HookAddOrbCount();
}
remove => HookHandler._afterAddOrbCount -= value;
}
public static event Delegates.RemoveOrbCount_AfterArgs RemoveOrbCount
{
add
{

HookHandler._afterRemoveOrbCount += value;
HookHandler.HookRemoveOrbCount();
}
remove => HookHandler._afterRemoveOrbCount -= value;
}
public static event Delegates.ShowPrompt_AfterArgs ShowPrompt
{
add
{

HookHandler._afterShowPrompt += value;
HookHandler.HookShowPrompt();
}
remove => HookHandler._afterShowPrompt -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.DreamPlant.hook_Awake Awake
{
add => On.DreamPlant.Awake += value;
remove => On.DreamPlant.Awake -= value;
}
public static event On.DreamPlant.hook_Start Start
{
add => On.DreamPlant.Start += value;
remove => On.DreamPlant.Start -= value;
}
public static event On.DreamPlant.hook_OnTriggerEnter2D OnTriggerEnter2D
{
add => On.DreamPlant.OnTriggerEnter2D += value;
remove => On.DreamPlant.OnTriggerEnter2D -= value;
}
public static event On.DreamPlant.hook_AddOrbCount AddOrbCount
{
add => On.DreamPlant.AddOrbCount += value;
remove => On.DreamPlant.AddOrbCount -= value;
}
public static event On.DreamPlant.hook_RemoveOrbCount RemoveOrbCount
{
add => On.DreamPlant.RemoveOrbCount += value;
remove => On.DreamPlant.RemoveOrbCount -= value;
}
public static event On.DreamPlant.hook_ShowPrompt ShowPrompt
{
add => On.DreamPlant.ShowPrompt += value;
remove => On.DreamPlant.ShowPrompt -= value;
}
public static event On.DreamPlant.hook_CheckOrbs CheckOrbs
{
add => On.DreamPlant.CheckOrbs += value;
remove => On.DreamPlant.CheckOrbs -= value;
}
}

}
