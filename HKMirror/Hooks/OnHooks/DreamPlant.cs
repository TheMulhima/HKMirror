namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for DreamPlant class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDreamPlant
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.DreamPlant.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.DreamPlant.orig_Awake orig, DreamPlant self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.DreamPlant.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.DreamPlant.orig_Start orig, DreamPlant self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.DreamPlant.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.DreamPlant.orig_OnTriggerEnter2D orig, DreamPlant self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookAddOrbCount()
        {
            if (!HookedList.Contains("AddOrbCount"))
            {
                HookedList.Add("AddOrbCount");
                On.DreamPlant.AddOrbCount += AddOrbCount;
            }
        }

        internal static event Delegates.AddOrbCount_BeforeArgs _beforeAddOrbCount;
        internal static event Delegates.AddOrbCount_NormalArgs _afterAddOrbCount;

        private static void AddOrbCount(On.DreamPlant.orig_AddOrbCount orig, DreamPlant self)
        {
            Delegates.Params_AddOrbCount @params = new()
            {
                self = self
            };
            _beforeAddOrbCount?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAddOrbCount != null) _afterAddOrbCount.Invoke(@params);
        }

        internal static void HookRemoveOrbCount()
        {
            if (!HookedList.Contains("RemoveOrbCount"))
            {
                HookedList.Add("RemoveOrbCount");
                On.DreamPlant.RemoveOrbCount += RemoveOrbCount;
            }
        }

        internal static event Delegates.RemoveOrbCount_BeforeArgs _beforeRemoveOrbCount;
        internal static event Delegates.RemoveOrbCount_NormalArgs _afterRemoveOrbCount;

        private static void RemoveOrbCount(On.DreamPlant.orig_RemoveOrbCount orig, DreamPlant self)
        {
            Delegates.Params_RemoveOrbCount @params = new()
            {
                self = self
            };
            _beforeRemoveOrbCount?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemoveOrbCount != null) _afterRemoveOrbCount.Invoke(@params);
        }

        internal static void HookShowPrompt()
        {
            if (!HookedList.Contains("ShowPrompt"))
            {
                HookedList.Add("ShowPrompt");
                On.DreamPlant.ShowPrompt += ShowPrompt;
            }
        }

        internal static event Delegates.ShowPrompt_BeforeArgs _beforeShowPrompt;
        internal static event Delegates.ShowPrompt_NormalArgs _afterShowPrompt;

        private static void ShowPrompt(On.DreamPlant.orig_ShowPrompt orig, DreamPlant self, bool show)
        {
            Delegates.Params_ShowPrompt @params = new()
            {
                self = self, show = show
            };
            _beforeShowPrompt?.Invoke(@params);
            self = @params.self;
            show = @params.show;
            orig(self, show);
            if (_afterShowPrompt != null) _afterShowPrompt.Invoke(@params);
        }

        internal static void HookCheckOrbs()
        {
            if (!HookedList.Contains("CheckOrbs"))
            {
                HookedList.Add("CheckOrbs");
                On.DreamPlant.CheckOrbs += CheckOrbs;
            }
        }

        internal static event Delegates.CheckOrbs_BeforeArgs _beforeCheckOrbs;

        private static IEnumerator CheckOrbs(On.DreamPlant.orig_CheckOrbs orig, DreamPlant self)
        {
            Delegates.Params_CheckOrbs @params = new()
            {
                self = self
            };
            _beforeCheckOrbs?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddOrbCount_BeforeArgs(Params_AddOrbCount args);

        public delegate void AddOrbCount_NormalArgs(Params_AddOrbCount args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CheckOrbs_BeforeArgs(Params_CheckOrbs args);

        public delegate IEnumerator CheckOrbs_NormalArgs(Params_CheckOrbs args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void RemoveOrbCount_BeforeArgs(Params_RemoveOrbCount args);

        public delegate void RemoveOrbCount_NormalArgs(Params_RemoveOrbCount args);

        public delegate void ShowPrompt_BeforeArgs(Params_ShowPrompt args);

        public delegate void ShowPrompt_NormalArgs(Params_ShowPrompt args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public DreamPlant self;
        }

        public sealed class Params_Start
        {
            public DreamPlant self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public DreamPlant self;
        }

        public sealed class Params_AddOrbCount
        {
            public DreamPlant self;
        }

        public sealed class Params_RemoveOrbCount
        {
            public DreamPlant self;
        }

        public sealed class Params_ShowPrompt
        {
            public DreamPlant self;
            public bool show;
        }

        public sealed class Params_CheckOrbs
        {
            public DreamPlant self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.AddOrbCount_BeforeArgs AddOrbCount
        {
            add
            {
                HookHandler._beforeAddOrbCount += value;
                HookHandler.HookAddOrbCount();
            }
            remove => HookHandler._beforeAddOrbCount -= value;
        }

        public static event Delegates.RemoveOrbCount_BeforeArgs RemoveOrbCount
        {
            add
            {
                HookHandler._beforeRemoveOrbCount += value;
                HookHandler.HookRemoveOrbCount();
            }
            remove => HookHandler._beforeRemoveOrbCount -= value;
        }

        public static event Delegates.ShowPrompt_BeforeArgs ShowPrompt
        {
            add
            {
                HookHandler._beforeShowPrompt += value;
                HookHandler.HookShowPrompt();
            }
            remove => HookHandler._beforeShowPrompt -= value;
        }

        public static event Delegates.CheckOrbs_BeforeArgs CheckOrbs
        {
            add
            {
                HookHandler._beforeCheckOrbs += value;
                HookHandler.HookCheckOrbs();
            }
            remove => HookHandler._beforeCheckOrbs -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.AddOrbCount_NormalArgs AddOrbCount
        {
            add
            {
                HookHandler._afterAddOrbCount += value;
                HookHandler.HookAddOrbCount();
            }
            remove => HookHandler._afterAddOrbCount -= value;
        }

        public static event Delegates.RemoveOrbCount_NormalArgs RemoveOrbCount
        {
            add
            {
                HookHandler._afterRemoveOrbCount += value;
                HookHandler.HookRemoveOrbCount();
            }
            remove => HookHandler._afterRemoveOrbCount -= value;
        }

        public static event Delegates.ShowPrompt_NormalArgs ShowPrompt
        {
            add
            {
                HookHandler._afterShowPrompt += value;
                HookHandler.HookShowPrompt();
            }
            remove => HookHandler._afterShowPrompt -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.DreamPlant.hook_Awake Awake
        {
            add => On.DreamPlant.Awake += value;
            remove => On.DreamPlant.Awake -= value;
        }

        public static event On.DreamPlant.hook_Start Start
        {
            add => On.DreamPlant.Start += value;
            remove => On.DreamPlant.Start -= value;
        }

        public static event On.DreamPlant.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.DreamPlant.OnTriggerEnter2D += value;
            remove => On.DreamPlant.OnTriggerEnter2D -= value;
        }

        public static event On.DreamPlant.hook_AddOrbCount AddOrbCount
        {
            add => On.DreamPlant.AddOrbCount += value;
            remove => On.DreamPlant.AddOrbCount -= value;
        }

        public static event On.DreamPlant.hook_RemoveOrbCount RemoveOrbCount
        {
            add => On.DreamPlant.RemoveOrbCount += value;
            remove => On.DreamPlant.RemoveOrbCount -= value;
        }

        public static event On.DreamPlant.hook_ShowPrompt ShowPrompt
        {
            add => On.DreamPlant.ShowPrompt += value;
            remove => On.DreamPlant.ShowPrompt -= value;
        }

        public static event On.DreamPlant.hook_CheckOrbs CheckOrbs
        {
            add => On.DreamPlant.CheckOrbs += value;
            remove => On.DreamPlant.CheckOrbs -= value;
        }
    }
}