using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossSequence class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossSequence
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Count()
        {
            if (!HookedList.Contains("get_Count"))
            {
                HookedList.Add("get_Count");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossSequence), "get_Count"), get_Count);
            }
        }

        internal static event Delegates.get_Count_BeforeArgs _beforeget_Count;
        internal static event Delegates.get_Count_NormalArgs _afterget_Count;

        private static int get_Count(Func<BossSequence, int> orig, BossSequence self)
        {
            Delegates.Params_get_Count @params = new()
            {
                self = self
            };
            _beforeget_Count?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Count != null) retVal = _afterget_Count.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSceneAt()
        {
            if (!HookedList.Contains("GetSceneAt"))
            {
                HookedList.Add("GetSceneAt");
                On.BossSequence.GetSceneAt += GetSceneAt;
            }
        }

        internal static event Delegates.GetSceneAt_BeforeArgs _beforeGetSceneAt;
        internal static event Delegates.GetSceneAt_NormalArgs _afterGetSceneAt;

        private static string GetSceneAt(On.BossSequence.orig_GetSceneAt orig, BossSequence self, int index)
        {
            Delegates.Params_GetSceneAt @params = new()
            {
                self = self, index = index
            };
            _beforeGetSceneAt?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterGetSceneAt != null) retVal = _afterGetSceneAt.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSceneObjectName()
        {
            if (!HookedList.Contains("GetSceneObjectName"))
            {
                HookedList.Add("GetSceneObjectName");
                On.BossSequence.GetSceneObjectName += GetSceneObjectName;
            }
        }

        internal static event Delegates.GetSceneObjectName_BeforeArgs _beforeGetSceneObjectName;
        internal static event Delegates.GetSceneObjectName_NormalArgs _afterGetSceneObjectName;

        private static string GetSceneObjectName(On.BossSequence.orig_GetSceneObjectName orig, BossSequence self,
            int index)
        {
            Delegates.Params_GetSceneObjectName @params = new()
            {
                self = self, index = index
            };
            _beforeGetSceneObjectName?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterGetSceneObjectName != null) retVal = _afterGetSceneObjectName.Invoke(@params);
            return retVal;
        }

        internal static void HookCanLoad()
        {
            if (!HookedList.Contains("CanLoad"))
            {
                HookedList.Add("CanLoad");
                On.BossSequence.CanLoad += CanLoad;
            }
        }

        internal static event Delegates.CanLoad_BeforeArgs _beforeCanLoad;
        internal static event Delegates.CanLoad_NormalArgs _afterCanLoad;

        private static bool CanLoad(On.BossSequence.orig_CanLoad orig, BossSequence self, int index)
        {
            Delegates.Params_CanLoad @params = new()
            {
                self = self, index = index
            };
            _beforeCanLoad?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterCanLoad != null) retVal = _afterCanLoad.Invoke(@params);
            return retVal;
        }

        internal static void HookGetBossScene()
        {
            if (!HookedList.Contains("GetBossScene"))
            {
                HookedList.Add("GetBossScene");
                On.BossSequence.GetBossScene += GetBossScene;
            }
        }

        internal static event Delegates.GetBossScene_BeforeArgs _beforeGetBossScene;
        internal static event Delegates.GetBossScene_NormalArgs _afterGetBossScene;

        private static BossScene GetBossScene(On.BossSequence.orig_GetBossScene orig, BossSequence self, int index)
        {
            Delegates.Params_GetBossScene @params = new()
            {
                self = self, index = index
            };
            _beforeGetBossScene?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterGetBossScene != null) retVal = _afterGetBossScene.Invoke(@params);
            return retVal;
        }

        internal static void HookIsUnlocked()
        {
            if (!HookedList.Contains("IsUnlocked"))
            {
                HookedList.Add("IsUnlocked");
                On.BossSequence.IsUnlocked += IsUnlocked;
            }
        }

        internal static event Delegates.IsUnlocked_BeforeArgs _beforeIsUnlocked;
        internal static event Delegates.IsUnlocked_NormalArgs _afterIsUnlocked;

        private static bool IsUnlocked(On.BossSequence.orig_IsUnlocked orig, BossSequence self)
        {
            Delegates.Params_IsUnlocked @params = new()
            {
                self = self
            };
            _beforeIsUnlocked?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterIsUnlocked != null) retVal = _afterIsUnlocked.Invoke(@params);
            return retVal;
        }

        internal static void HookIsSceneHidden()
        {
            if (!HookedList.Contains("IsSceneHidden"))
            {
                HookedList.Add("IsSceneHidden");
                On.BossSequence.IsSceneHidden += IsSceneHidden;
            }
        }

        internal static event Delegates.IsSceneHidden_BeforeArgs _beforeIsSceneHidden;
        internal static event Delegates.IsSceneHidden_NormalArgs _afterIsSceneHidden;

        private static bool IsSceneHidden(On.BossSequence.orig_IsSceneHidden orig, BossSequence self, int index)
        {
            Delegates.Params_IsSceneHidden @params = new()
            {
                self = self, index = index
            };
            _beforeIsSceneHidden?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterIsSceneHidden != null) retVal = _afterIsSceneHidden.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CanLoad_BeforeArgs(Params_CanLoad args);

        public delegate bool CanLoad_NormalArgs(Params_CanLoad args);

        public delegate void get_Count_BeforeArgs(Params_get_Count args);

        public delegate int get_Count_NormalArgs(Params_get_Count args);

        public delegate void GetBossScene_BeforeArgs(Params_GetBossScene args);

        public delegate BossScene GetBossScene_NormalArgs(Params_GetBossScene args);

        public delegate void GetSceneAt_BeforeArgs(Params_GetSceneAt args);

        public delegate string GetSceneAt_NormalArgs(Params_GetSceneAt args);

        public delegate void GetSceneObjectName_BeforeArgs(Params_GetSceneObjectName args);

        public delegate string GetSceneObjectName_NormalArgs(Params_GetSceneObjectName args);

        public delegate void IsSceneHidden_BeforeArgs(Params_IsSceneHidden args);

        public delegate bool IsSceneHidden_NormalArgs(Params_IsSceneHidden args);

        public delegate void IsUnlocked_BeforeArgs(Params_IsUnlocked args);

        public delegate bool IsUnlocked_NormalArgs(Params_IsUnlocked args);

        public sealed class Params_get_Count
        {
            public BossSequence self;
        }

        public sealed class Params_GetSceneAt
        {
            public int index;
            public BossSequence self;
        }

        public sealed class Params_GetSceneObjectName
        {
            public int index;
            public BossSequence self;
        }

        public sealed class Params_CanLoad
        {
            public int index;
            public BossSequence self;
        }

        public sealed class Params_GetBossScene
        {
            public int index;
            public BossSequence self;
        }

        public sealed class Params_IsUnlocked
        {
            public BossSequence self;
        }

        public sealed class Params_IsSceneHidden
        {
            public int index;
            public BossSequence self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Count_BeforeArgs get_Count
        {
            add
            {
                HookHandler._beforeget_Count += value;
                HookHandler.Hookget_Count();
            }
            remove => HookHandler._beforeget_Count -= value;
        }

        public static event Delegates.GetSceneAt_BeforeArgs GetSceneAt
        {
            add
            {
                HookHandler._beforeGetSceneAt += value;
                HookHandler.HookGetSceneAt();
            }
            remove => HookHandler._beforeGetSceneAt -= value;
        }

        public static event Delegates.GetSceneObjectName_BeforeArgs GetSceneObjectName
        {
            add
            {
                HookHandler._beforeGetSceneObjectName += value;
                HookHandler.HookGetSceneObjectName();
            }
            remove => HookHandler._beforeGetSceneObjectName -= value;
        }

        public static event Delegates.CanLoad_BeforeArgs CanLoad
        {
            add
            {
                HookHandler._beforeCanLoad += value;
                HookHandler.HookCanLoad();
            }
            remove => HookHandler._beforeCanLoad -= value;
        }

        public static event Delegates.GetBossScene_BeforeArgs GetBossScene
        {
            add
            {
                HookHandler._beforeGetBossScene += value;
                HookHandler.HookGetBossScene();
            }
            remove => HookHandler._beforeGetBossScene -= value;
        }

        public static event Delegates.IsUnlocked_BeforeArgs IsUnlocked
        {
            add
            {
                HookHandler._beforeIsUnlocked += value;
                HookHandler.HookIsUnlocked();
            }
            remove => HookHandler._beforeIsUnlocked -= value;
        }

        public static event Delegates.IsSceneHidden_BeforeArgs IsSceneHidden
        {
            add
            {
                HookHandler._beforeIsSceneHidden += value;
                HookHandler.HookIsSceneHidden();
            }
            remove => HookHandler._beforeIsSceneHidden -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Count_NormalArgs get_Count
        {
            add
            {
                HookHandler._afterget_Count += value;
                HookHandler.Hookget_Count();
            }
            remove => HookHandler._afterget_Count -= value;
        }

        public static event Delegates.GetSceneAt_NormalArgs GetSceneAt
        {
            add
            {
                HookHandler._afterGetSceneAt += value;
                HookHandler.HookGetSceneAt();
            }
            remove => HookHandler._afterGetSceneAt -= value;
        }

        public static event Delegates.GetSceneObjectName_NormalArgs GetSceneObjectName
        {
            add
            {
                HookHandler._afterGetSceneObjectName += value;
                HookHandler.HookGetSceneObjectName();
            }
            remove => HookHandler._afterGetSceneObjectName -= value;
        }

        public static event Delegates.CanLoad_NormalArgs CanLoad
        {
            add
            {
                HookHandler._afterCanLoad += value;
                HookHandler.HookCanLoad();
            }
            remove => HookHandler._afterCanLoad -= value;
        }

        public static event Delegates.GetBossScene_NormalArgs GetBossScene
        {
            add
            {
                HookHandler._afterGetBossScene += value;
                HookHandler.HookGetBossScene();
            }
            remove => HookHandler._afterGetBossScene -= value;
        }

        public static event Delegates.IsUnlocked_NormalArgs IsUnlocked
        {
            add
            {
                HookHandler._afterIsUnlocked += value;
                HookHandler.HookIsUnlocked();
            }
            remove => HookHandler._afterIsUnlocked -= value;
        }

        public static event Delegates.IsSceneHidden_NormalArgs IsSceneHidden
        {
            add
            {
                HookHandler._afterIsSceneHidden += value;
                HookHandler.HookIsSceneHidden();
            }
            remove => HookHandler._afterIsSceneHidden -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Count_NormalArgs get_Count
        {
            add => HookEndpointManager.Add<Delegates.get_Count_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequence), "get_Count"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Count_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossSequence), "get_Count"), value);
        }

        public static event On.BossSequence.hook_GetSceneAt GetSceneAt
        {
            add => On.BossSequence.GetSceneAt += value;
            remove => On.BossSequence.GetSceneAt -= value;
        }

        public static event On.BossSequence.hook_GetSceneObjectName GetSceneObjectName
        {
            add => On.BossSequence.GetSceneObjectName += value;
            remove => On.BossSequence.GetSceneObjectName -= value;
        }

        public static event On.BossSequence.hook_CanLoad CanLoad
        {
            add => On.BossSequence.CanLoad += value;
            remove => On.BossSequence.CanLoad -= value;
        }

        public static event On.BossSequence.hook_GetBossScene GetBossScene
        {
            add => On.BossSequence.GetBossScene += value;
            remove => On.BossSequence.GetBossScene -= value;
        }

        public static event On.BossSequence.hook_IsUnlocked IsUnlocked
        {
            add => On.BossSequence.IsUnlocked += value;
            remove => On.BossSequence.IsUnlocked -= value;
        }

        public static event On.BossSequence.hook_IsSceneHidden IsSceneHidden
        {
            add => On.BossSequence.IsSceneHidden += value;
            remove => On.BossSequence.IsSceneHidden -= value;
        }
    }
}