namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for EventRegister class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnEventRegister
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.EventRegister.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.EventRegister.orig_Awake orig, EventRegister self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.EventRegister.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.EventRegister.orig_OnDestroy orig, EventRegister self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookReceiveEvent()
        {
            if (!HookedList.Contains("ReceiveEvent"))
            {
                HookedList.Add("ReceiveEvent");
                On.EventRegister.ReceiveEvent += ReceiveEvent;
            }
        }

        internal static event Delegates.ReceiveEvent_BeforeArgs _beforeReceiveEvent;
        internal static event Delegates.ReceiveEvent_NormalArgs _afterReceiveEvent;

        private static void ReceiveEvent(On.EventRegister.orig_ReceiveEvent orig, EventRegister self)
        {
            Delegates.Params_ReceiveEvent @params = new()
            {
                self = self
            };
            _beforeReceiveEvent?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReceiveEvent != null) _afterReceiveEvent.Invoke(@params);
        }

        internal static void HookSwitchEvent()
        {
            if (!HookedList.Contains("SwitchEvent"))
            {
                HookedList.Add("SwitchEvent");
                On.EventRegister.SwitchEvent += SwitchEvent;
            }
        }

        internal static event Delegates.SwitchEvent_BeforeArgs _beforeSwitchEvent;
        internal static event Delegates.SwitchEvent_NormalArgs _afterSwitchEvent;

        private static void SwitchEvent(On.EventRegister.orig_SwitchEvent orig, EventRegister self, string eventName)
        {
            Delegates.Params_SwitchEvent @params = new()
            {
                self = self, eventName = eventName
            };
            _beforeSwitchEvent?.Invoke(@params);
            self = @params.self;
            eventName = @params.eventName;
            orig(self, eventName);
            if (_afterSwitchEvent != null) _afterSwitchEvent.Invoke(@params);
        }

        internal static void HookSendEvent()
        {
            if (!HookedList.Contains("SendEvent"))
            {
                HookedList.Add("SendEvent");
                On.EventRegister.SendEvent += SendEvent;
            }
        }

        internal static event Delegates.SendEvent_BeforeArgs _beforeSendEvent;
        internal static event Delegates.SendEvent_NormalArgs _afterSendEvent;

        private static void SendEvent(On.EventRegister.orig_SendEvent orig, string eventName)
        {
            Delegates.Params_SendEvent @params = new()
            {
                eventName = eventName
            };
            _beforeSendEvent?.Invoke(@params);
            eventName = @params.eventName;
            orig(eventName);
            if (_afterSendEvent != null) _afterSendEvent.Invoke(@params);
        }

        internal static void HookSubscribeEvent()
        {
            if (!HookedList.Contains("SubscribeEvent"))
            {
                HookedList.Add("SubscribeEvent");
                On.EventRegister.SubscribeEvent += SubscribeEvent;
            }
        }

        internal static event Delegates.SubscribeEvent_BeforeArgs _beforeSubscribeEvent;
        internal static event Delegates.SubscribeEvent_NormalArgs _afterSubscribeEvent;

        private static void SubscribeEvent(On.EventRegister.orig_SubscribeEvent orig, EventRegister register)
        {
            Delegates.Params_SubscribeEvent @params = new()
            {
                register = register
            };
            _beforeSubscribeEvent?.Invoke(@params);
            register = @params.register;
            orig(register);
            if (_afterSubscribeEvent != null) _afterSubscribeEvent.Invoke(@params);
        }

        internal static void HookUnsubscribeEvent()
        {
            if (!HookedList.Contains("UnsubscribeEvent"))
            {
                HookedList.Add("UnsubscribeEvent");
                On.EventRegister.UnsubscribeEvent += UnsubscribeEvent;
            }
        }

        internal static event Delegates.UnsubscribeEvent_BeforeArgs _beforeUnsubscribeEvent;
        internal static event Delegates.UnsubscribeEvent_NormalArgs _afterUnsubscribeEvent;

        private static void UnsubscribeEvent(On.EventRegister.orig_UnsubscribeEvent orig, EventRegister register)
        {
            Delegates.Params_UnsubscribeEvent @params = new()
            {
                register = register
            };
            _beforeUnsubscribeEvent?.Invoke(@params);
            register = @params.register;
            orig(register);
            if (_afterUnsubscribeEvent != null) _afterUnsubscribeEvent.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void ReceiveEvent_BeforeArgs(Params_ReceiveEvent args);

        public delegate void ReceiveEvent_NormalArgs(Params_ReceiveEvent args);

        public delegate void SendEvent_BeforeArgs(Params_SendEvent args);

        public delegate void SendEvent_NormalArgs(Params_SendEvent args);

        public delegate void SubscribeEvent_BeforeArgs(Params_SubscribeEvent args);

        public delegate void SubscribeEvent_NormalArgs(Params_SubscribeEvent args);

        public delegate void SwitchEvent_BeforeArgs(Params_SwitchEvent args);

        public delegate void SwitchEvent_NormalArgs(Params_SwitchEvent args);

        public delegate void UnsubscribeEvent_BeforeArgs(Params_UnsubscribeEvent args);

        public delegate void UnsubscribeEvent_NormalArgs(Params_UnsubscribeEvent args);

        public sealed class Params_Awake
        {
            public EventRegister self;
        }

        public sealed class Params_OnDestroy
        {
            public EventRegister self;
        }

        public sealed class Params_ReceiveEvent
        {
            public EventRegister self;
        }

        public sealed class Params_SwitchEvent
        {
            public string eventName;
            public EventRegister self;
        }

        public sealed class Params_SendEvent
        {
            public string eventName;
        }

        public sealed class Params_SubscribeEvent
        {
            public EventRegister register;
        }

        public sealed class Params_UnsubscribeEvent
        {
            public EventRegister register;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.ReceiveEvent_BeforeArgs ReceiveEvent
        {
            add
            {
                HookHandler._beforeReceiveEvent += value;
                HookHandler.HookReceiveEvent();
            }
            remove => HookHandler._beforeReceiveEvent -= value;
        }

        public static event Delegates.SwitchEvent_BeforeArgs SwitchEvent
        {
            add
            {
                HookHandler._beforeSwitchEvent += value;
                HookHandler.HookSwitchEvent();
            }
            remove => HookHandler._beforeSwitchEvent -= value;
        }

        public static event Delegates.SendEvent_BeforeArgs SendEvent
        {
            add
            {
                HookHandler._beforeSendEvent += value;
                HookHandler.HookSendEvent();
            }
            remove => HookHandler._beforeSendEvent -= value;
        }

        public static event Delegates.SubscribeEvent_BeforeArgs SubscribeEvent
        {
            add
            {
                HookHandler._beforeSubscribeEvent += value;
                HookHandler.HookSubscribeEvent();
            }
            remove => HookHandler._beforeSubscribeEvent -= value;
        }

        public static event Delegates.UnsubscribeEvent_BeforeArgs UnsubscribeEvent
        {
            add
            {
                HookHandler._beforeUnsubscribeEvent += value;
                HookHandler.HookUnsubscribeEvent();
            }
            remove => HookHandler._beforeUnsubscribeEvent -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.ReceiveEvent_NormalArgs ReceiveEvent
        {
            add
            {
                HookHandler._afterReceiveEvent += value;
                HookHandler.HookReceiveEvent();
            }
            remove => HookHandler._afterReceiveEvent -= value;
        }

        public static event Delegates.SwitchEvent_NormalArgs SwitchEvent
        {
            add
            {
                HookHandler._afterSwitchEvent += value;
                HookHandler.HookSwitchEvent();
            }
            remove => HookHandler._afterSwitchEvent -= value;
        }

        public static event Delegates.SendEvent_NormalArgs SendEvent
        {
            add
            {
                HookHandler._afterSendEvent += value;
                HookHandler.HookSendEvent();
            }
            remove => HookHandler._afterSendEvent -= value;
        }

        public static event Delegates.SubscribeEvent_NormalArgs SubscribeEvent
        {
            add
            {
                HookHandler._afterSubscribeEvent += value;
                HookHandler.HookSubscribeEvent();
            }
            remove => HookHandler._afterSubscribeEvent -= value;
        }

        public static event Delegates.UnsubscribeEvent_NormalArgs UnsubscribeEvent
        {
            add
            {
                HookHandler._afterUnsubscribeEvent += value;
                HookHandler.HookUnsubscribeEvent();
            }
            remove => HookHandler._afterUnsubscribeEvent -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.EventRegister.hook_Awake Awake
        {
            add => On.EventRegister.Awake += value;
            remove => On.EventRegister.Awake -= value;
        }

        public static event On.EventRegister.hook_OnDestroy OnDestroy
        {
            add => On.EventRegister.OnDestroy += value;
            remove => On.EventRegister.OnDestroy -= value;
        }

        public static event On.EventRegister.hook_ReceiveEvent ReceiveEvent
        {
            add => On.EventRegister.ReceiveEvent += value;
            remove => On.EventRegister.ReceiveEvent -= value;
        }

        public static event On.EventRegister.hook_SwitchEvent SwitchEvent
        {
            add => On.EventRegister.SwitchEvent += value;
            remove => On.EventRegister.SwitchEvent -= value;
        }

        public static event On.EventRegister.hook_SendEvent SendEvent
        {
            add => On.EventRegister.SendEvent += value;
            remove => On.EventRegister.SendEvent -= value;
        }

        public static event On.EventRegister.hook_SubscribeEvent SubscribeEvent
        {
            add => On.EventRegister.SubscribeEvent += value;
            remove => On.EventRegister.SubscribeEvent -= value;
        }

        public static event On.EventRegister.hook_UnsubscribeEvent UnsubscribeEvent
        {
            add => On.EventRegister.UnsubscribeEvent += value;
            remove => On.EventRegister.UnsubscribeEvent -= value;
        }
    }
}