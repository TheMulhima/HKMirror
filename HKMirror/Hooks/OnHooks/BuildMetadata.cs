using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BuildMetadata class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBuildMetadata
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_BranchName()
        {
            if (!HookedList.Contains("get_BranchName"))
            {
                HookedList.Add("get_BranchName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_BranchName"), get_BranchName);
            }
        }

        internal static event Delegates.get_BranchName_BeforeArgs _beforeget_BranchName;
        internal static event Delegates.get_BranchName_NormalArgs _afterget_BranchName;

        private static string get_BranchName(Func<BuildMetadata, string> orig, BuildMetadata self)
        {
            Delegates.Params_get_BranchName @params = new()
            {
                self = self
            };
            _beforeget_BranchName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BranchName != null) retVal = _afterget_BranchName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Revision()
        {
            if (!HookedList.Contains("get_Revision"))
            {
                HookedList.Add("get_Revision");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_Revision"), get_Revision);
            }
        }

        internal static event Delegates.get_Revision_BeforeArgs _beforeget_Revision;
        internal static event Delegates.get_Revision_NormalArgs _afterget_Revision;

        private static string get_Revision(Func<BuildMetadata, string> orig, BuildMetadata self)
        {
            Delegates.Params_get_Revision @params = new()
            {
                self = self
            };
            _beforeget_Revision?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Revision != null) retVal = _afterget_Revision.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_CommitTime()
        {
            if (!HookedList.Contains("get_CommitTime"))
            {
                HookedList.Add("get_CommitTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_CommitTime"), get_CommitTime);
            }
        }

        internal static event Delegates.get_CommitTime_BeforeArgs _beforeget_CommitTime;
        internal static event Delegates.get_CommitTime_NormalArgs _afterget_CommitTime;

        private static DateTime get_CommitTime(Func<BuildMetadata, DateTime> orig, BuildMetadata self)
        {
            Delegates.Params_get_CommitTime @params = new()
            {
                self = self
            };
            _beforeget_CommitTime?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CommitTime != null) retVal = _afterget_CommitTime.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_MachineName()
        {
            if (!HookedList.Contains("get_MachineName"))
            {
                HookedList.Add("get_MachineName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_MachineName"), get_MachineName);
            }
        }

        internal static event Delegates.get_MachineName_BeforeArgs _beforeget_MachineName;
        internal static event Delegates.get_MachineName_NormalArgs _afterget_MachineName;

        private static string get_MachineName(Func<BuildMetadata, string> orig, BuildMetadata self)
        {
            Delegates.Params_get_MachineName @params = new()
            {
                self = self
            };
            _beforeget_MachineName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MachineName != null) retVal = _afterget_MachineName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_BuildTime()
        {
            if (!HookedList.Contains("get_BuildTime"))
            {
                HookedList.Add("get_BuildTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_BuildTime"), get_BuildTime);
            }
        }

        internal static event Delegates.get_BuildTime_BeforeArgs _beforeget_BuildTime;
        internal static event Delegates.get_BuildTime_NormalArgs _afterget_BuildTime;

        private static DateTime get_BuildTime(Func<BuildMetadata, DateTime> orig, BuildMetadata self)
        {
            Delegates.Params_get_BuildTime @params = new()
            {
                self = self
            };
            _beforeget_BuildTime?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BuildTime != null) retVal = _afterget_BuildTime.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Embedded()
        {
            if (!HookedList.Contains("get_Embedded"))
            {
                HookedList.Add("get_Embedded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_Embedded", false), get_Embedded);
            }
        }

        internal static event Delegates.get_Embedded_BeforeArgs _beforeget_Embedded;
        internal static event Delegates.get_Embedded_NormalArgs _afterget_Embedded;

        private static BuildMetadata get_Embedded(Func<BuildMetadata> orig)
        {
            _beforeget_Embedded?.Invoke();
            var retVal = orig();
            if (_afterget_Embedded != null) retVal = _afterget_Embedded.Invoke();
            return retVal;
        }

        internal static void HookCreate()
        {
            if (!HookedList.Contains("Create"))
            {
                HookedList.Add("Create");
                On.BuildMetadata.Create += Create;
            }
        }

        internal static event Delegates.Create_BeforeArgs _beforeCreate;
        internal static event Delegates.Create_NormalArgs _afterCreate;

        private static BuildMetadata Create(On.BuildMetadata.orig_Create orig, string branchName, string revision,
            DateTime commitTime, string machineName, DateTime buildTime)
        {
            Delegates.Params_Create @params = new()
            {
                branchName = branchName, revision = revision, commitTime = commitTime, machineName = machineName,
                buildTime = buildTime
            };
            _beforeCreate?.Invoke(@params);
            branchName = @params.branchName;
            revision = @params.revision;
            commitTime = @params.commitTime;
            machineName = @params.machineName;
            buildTime = @params.buildTime;
            var retVal = orig(branchName, revision, commitTime, machineName, buildTime);
            if (_afterCreate != null) retVal = _afterCreate.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Create_BeforeArgs(Params_Create args);

        public delegate BuildMetadata Create_NormalArgs(Params_Create args);

        public delegate void get_BranchName_BeforeArgs(Params_get_BranchName args);

        public delegate string get_BranchName_NormalArgs(Params_get_BranchName args);

        public delegate void get_BuildTime_BeforeArgs(Params_get_BuildTime args);

        public delegate DateTime get_BuildTime_NormalArgs(Params_get_BuildTime args);

        public delegate void get_CommitTime_BeforeArgs(Params_get_CommitTime args);

        public delegate DateTime get_CommitTime_NormalArgs(Params_get_CommitTime args);

        public delegate void get_Embedded_BeforeArgs();

        public delegate BuildMetadata get_Embedded_NormalArgs();

        public delegate void get_MachineName_BeforeArgs(Params_get_MachineName args);

        public delegate string get_MachineName_NormalArgs(Params_get_MachineName args);

        public delegate void get_Revision_BeforeArgs(Params_get_Revision args);

        public delegate string get_Revision_NormalArgs(Params_get_Revision args);

        public sealed class Params_get_BranchName
        {
            public BuildMetadata self;
        }

        public sealed class Params_get_Revision
        {
            public BuildMetadata self;
        }

        public sealed class Params_get_CommitTime
        {
            public BuildMetadata self;
        }

        public sealed class Params_get_MachineName
        {
            public BuildMetadata self;
        }

        public sealed class Params_get_BuildTime
        {
            public BuildMetadata self;
        }

        public sealed class Params_Create
        {
            public string branchName;
            public DateTime buildTime;
            public DateTime commitTime;
            public string machineName;
            public string revision;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_BranchName_BeforeArgs get_BranchName
        {
            add
            {
                HookHandler._beforeget_BranchName += value;
                HookHandler.Hookget_BranchName();
            }
            remove => HookHandler._beforeget_BranchName -= value;
        }

        public static event Delegates.get_Revision_BeforeArgs get_Revision
        {
            add
            {
                HookHandler._beforeget_Revision += value;
                HookHandler.Hookget_Revision();
            }
            remove => HookHandler._beforeget_Revision -= value;
        }

        public static event Delegates.get_CommitTime_BeforeArgs get_CommitTime
        {
            add
            {
                HookHandler._beforeget_CommitTime += value;
                HookHandler.Hookget_CommitTime();
            }
            remove => HookHandler._beforeget_CommitTime -= value;
        }

        public static event Delegates.get_MachineName_BeforeArgs get_MachineName
        {
            add
            {
                HookHandler._beforeget_MachineName += value;
                HookHandler.Hookget_MachineName();
            }
            remove => HookHandler._beforeget_MachineName -= value;
        }

        public static event Delegates.get_BuildTime_BeforeArgs get_BuildTime
        {
            add
            {
                HookHandler._beforeget_BuildTime += value;
                HookHandler.Hookget_BuildTime();
            }
            remove => HookHandler._beforeget_BuildTime -= value;
        }

        public static event Delegates.get_Embedded_BeforeArgs get_Embedded
        {
            add
            {
                HookHandler._beforeget_Embedded += value;
                HookHandler.Hookget_Embedded();
            }
            remove => HookHandler._beforeget_Embedded -= value;
        }

        public static event Delegates.Create_BeforeArgs Create
        {
            add
            {
                HookHandler._beforeCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._beforeCreate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_BranchName_NormalArgs get_BranchName
        {
            add
            {
                HookHandler._afterget_BranchName += value;
                HookHandler.Hookget_BranchName();
            }
            remove => HookHandler._afterget_BranchName -= value;
        }

        public static event Delegates.get_Revision_NormalArgs get_Revision
        {
            add
            {
                HookHandler._afterget_Revision += value;
                HookHandler.Hookget_Revision();
            }
            remove => HookHandler._afterget_Revision -= value;
        }

        public static event Delegates.get_CommitTime_NormalArgs get_CommitTime
        {
            add
            {
                HookHandler._afterget_CommitTime += value;
                HookHandler.Hookget_CommitTime();
            }
            remove => HookHandler._afterget_CommitTime -= value;
        }

        public static event Delegates.get_MachineName_NormalArgs get_MachineName
        {
            add
            {
                HookHandler._afterget_MachineName += value;
                HookHandler.Hookget_MachineName();
            }
            remove => HookHandler._afterget_MachineName -= value;
        }

        public static event Delegates.get_BuildTime_NormalArgs get_BuildTime
        {
            add
            {
                HookHandler._afterget_BuildTime += value;
                HookHandler.Hookget_BuildTime();
            }
            remove => HookHandler._afterget_BuildTime -= value;
        }

        public static event Delegates.get_Embedded_NormalArgs get_Embedded
        {
            add
            {
                HookHandler._afterget_Embedded += value;
                HookHandler.Hookget_Embedded();
            }
            remove => HookHandler._afterget_Embedded -= value;
        }

        public static event Delegates.Create_NormalArgs Create
        {
            add
            {
                HookHandler._afterCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._afterCreate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_BranchName_NormalArgs get_BranchName
        {
            add => HookEndpointManager.Add<Delegates.get_BranchName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_BranchName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BranchName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_BranchName"), value);
        }

        public static event Delegates.get_Revision_NormalArgs get_Revision
        {
            add => HookEndpointManager.Add<Delegates.get_Revision_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_Revision"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Revision_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_Revision"), value);
        }

        public static event Delegates.get_CommitTime_NormalArgs get_CommitTime
        {
            add => HookEndpointManager.Add<Delegates.get_CommitTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_CommitTime"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CommitTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_CommitTime"), value);
        }

        public static event Delegates.get_MachineName_NormalArgs get_MachineName
        {
            add => HookEndpointManager.Add<Delegates.get_MachineName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_MachineName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MachineName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_MachineName"), value);
        }

        public static event Delegates.get_BuildTime_NormalArgs get_BuildTime
        {
            add => HookEndpointManager.Add<Delegates.get_BuildTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_BuildTime"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BuildTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_BuildTime"), value);
        }

        public static event Delegates.get_Embedded_NormalArgs get_Embedded
        {
            add => HookEndpointManager.Add<Delegates.get_Embedded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_Embedded", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Embedded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuildMetadata), "get_Embedded", false), value);
        }

        public static event On.BuildMetadata.hook_Create Create
        {
            add => On.BuildMetadata.Create += value;
            remove => On.BuildMetadata.Create -= value;
        }
    }
}