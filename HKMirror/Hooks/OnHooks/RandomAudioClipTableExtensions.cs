namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RandomAudioClipTableExtensions class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRandomAudioClipTableExtensions
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookPlayOneShot()
        {
            if (!HookedList.Contains("PlayOneShot"))
            {
                HookedList.Add("PlayOneShot");
                On.RandomAudioClipTableExtensions.PlayOneShot += PlayOneShot;
            }
        }

        internal static event Delegates.PlayOneShot_BeforeArgs _beforePlayOneShot;
        internal static event Delegates.PlayOneShot_AfterArgs _afterPlayOneShot;

        private static void PlayOneShot(On.RandomAudioClipTableExtensions.orig_PlayOneShot orig,
            RandomAudioClipTable table, AudioSource audioSource)
        {
            Delegates.Params_PlayOneShot @params = new()
            {
                table = table, audioSource = audioSource
            };
            if (_beforePlayOneShot != null)
                foreach (Delegates.PlayOneShot_BeforeArgs toInvoke in _beforePlayOneShot.GetInvocationList())
                    try
                    {
                        _beforePlayOneShot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            table = @params.table;
            audioSource = @params.audioSource;
            orig(table, audioSource);
            if (_afterPlayOneShot != null)
                foreach (Delegates.PlayOneShot_AfterArgs toInvoke in _afterPlayOneShot.GetInvocationList())
                    try
                    {
                        _afterPlayOneShot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSpawnAndPlayOneShot()
        {
            if (!HookedList.Contains("SpawnAndPlayOneShot"))
            {
                HookedList.Add("SpawnAndPlayOneShot");
                On.RandomAudioClipTableExtensions.SpawnAndPlayOneShot += SpawnAndPlayOneShot;
            }
        }

        internal static event Delegates.SpawnAndPlayOneShot_BeforeArgs _beforeSpawnAndPlayOneShot;
        internal static event Delegates.SpawnAndPlayOneShot_AfterArgs _afterSpawnAndPlayOneShot;

        private static void SpawnAndPlayOneShot(On.RandomAudioClipTableExtensions.orig_SpawnAndPlayOneShot orig,
            RandomAudioClipTable table, AudioSource prefab, Vector3 position)
        {
            Delegates.Params_SpawnAndPlayOneShot @params = new()
            {
                table = table, prefab = prefab, position = position
            };
            if (_beforeSpawnAndPlayOneShot != null)
                foreach (Delegates.SpawnAndPlayOneShot_BeforeArgs toInvoke in _beforeSpawnAndPlayOneShot
                             .GetInvocationList())
                    try
                    {
                        _beforeSpawnAndPlayOneShot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            table = @params.table;
            prefab = @params.prefab;
            position = @params.position;
            orig(table, prefab, position);
            if (_afterSpawnAndPlayOneShot != null)
                foreach (Delegates.SpawnAndPlayOneShot_AfterArgs toInvoke in
                         _afterSpawnAndPlayOneShot.GetInvocationList())
                    try
                    {
                        _afterSpawnAndPlayOneShot.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void PlayOneShot_AfterArgs(Params_PlayOneShot args);

        public delegate void PlayOneShot_BeforeArgs(Params_PlayOneShot args);

        public delegate void PlayOneShot_WithArgs(Action<RandomAudioClipTable, AudioSource> orig,
            RandomAudioClipTable table, AudioSource audioSource);

        public delegate void SpawnAndPlayOneShot_AfterArgs(Params_SpawnAndPlayOneShot args);

        public delegate void SpawnAndPlayOneShot_BeforeArgs(Params_SpawnAndPlayOneShot args);

        public delegate void SpawnAndPlayOneShot_WithArgs(Action<RandomAudioClipTable, AudioSource, Vector3> orig,
            RandomAudioClipTable table, AudioSource prefab, Vector3 position);

        public sealed class Params_PlayOneShot
        {
            public AudioSource audioSource;
            public RandomAudioClipTable table;
        }

        public sealed class Params_SpawnAndPlayOneShot
        {
            public Vector3 position;
            public AudioSource prefab;
            public RandomAudioClipTable table;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.PlayOneShot_BeforeArgs PlayOneShot
        {
            add
            {
                HookHandler._beforePlayOneShot += value;
                HookHandler.HookPlayOneShot();
            }
            remove => HookHandler._beforePlayOneShot -= value;
        }

        public static event Delegates.SpawnAndPlayOneShot_BeforeArgs SpawnAndPlayOneShot
        {
            add
            {
                HookHandler._beforeSpawnAndPlayOneShot += value;
                HookHandler.HookSpawnAndPlayOneShot();
            }
            remove => HookHandler._beforeSpawnAndPlayOneShot -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.PlayOneShot_AfterArgs PlayOneShot
        {
            add
            {
                HookHandler._afterPlayOneShot += value;
                HookHandler.HookPlayOneShot();
            }
            remove => HookHandler._afterPlayOneShot -= value;
        }

        public static event Delegates.SpawnAndPlayOneShot_AfterArgs SpawnAndPlayOneShot
        {
            add
            {
                HookHandler._afterSpawnAndPlayOneShot += value;
                HookHandler.HookSpawnAndPlayOneShot();
            }
            remove => HookHandler._afterSpawnAndPlayOneShot -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.RandomAudioClipTableExtensions.hook_PlayOneShot PlayOneShot
        {
            add => On.RandomAudioClipTableExtensions.PlayOneShot += value;
            remove => On.RandomAudioClipTableExtensions.PlayOneShot -= value;
        }

        public static event On.RandomAudioClipTableExtensions.hook_SpawnAndPlayOneShot SpawnAndPlayOneShot
        {
            add => On.RandomAudioClipTableExtensions.SpawnAndPlayOneShot += value;
            remove => On.RandomAudioClipTableExtensions.SpawnAndPlayOneShot -= value;
        }
    }
}