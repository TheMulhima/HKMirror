using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteCollectionFont class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteCollectionFont
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCopyFrom()
        {
            if (!HookedList.Contains("CopyFrom"))
            {
                HookedList.Add("CopyFrom");
                On.tk2dSpriteCollectionFont.CopyFrom += CopyFrom;
            }
        }

        internal static event Delegates.CopyFrom_BeforeArgs _beforeCopyFrom;
        internal static event Delegates.CopyFrom_NormalArgs _afterCopyFrom;

        private static void CopyFrom(On.tk2dSpriteCollectionFont.orig_CopyFrom orig, tk2dSpriteCollectionFont self,
            tk2dSpriteCollectionFont src)
        {
            Delegates.Params_CopyFrom @params = new()
            {
                self = self, src = src
            };
            _beforeCopyFrom?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            orig(self, src);
            if (_afterCopyFrom != null) _afterCopyFrom.Invoke(@params);
        }

        internal static void Hookget_Name()
        {
            if (!HookedList.Contains("get_Name"))
            {
                HookedList.Add("get_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionFont), "get_Name"), get_Name);
            }
        }

        internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
        internal static event Delegates.get_Name_NormalArgs _afterget_Name;

        private static string get_Name(Func<tk2dSpriteCollectionFont, string> orig, tk2dSpriteCollectionFont self)
        {
            Delegates.Params_get_Name @params = new()
            {
                self = self
            };
            _beforeget_Name?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Name != null) retVal = _afterget_Name.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_InUse()
        {
            if (!HookedList.Contains("get_InUse"))
            {
                HookedList.Add("get_InUse");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionFont), "get_InUse"), get_InUse);
            }
        }

        internal static event Delegates.get_InUse_BeforeArgs _beforeget_InUse;
        internal static event Delegates.get_InUse_NormalArgs _afterget_InUse;

        private static bool get_InUse(Func<tk2dSpriteCollectionFont, bool> orig, tk2dSpriteCollectionFont self)
        {
            Delegates.Params_get_InUse @params = new()
            {
                self = self
            };
            _beforeget_InUse?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_InUse != null) retVal = _afterget_InUse.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CopyFrom_BeforeArgs(Params_CopyFrom args);

        public delegate void CopyFrom_NormalArgs(Params_CopyFrom args);

        public delegate void get_InUse_BeforeArgs(Params_get_InUse args);

        public delegate bool get_InUse_NormalArgs(Params_get_InUse args);

        public delegate void get_Name_BeforeArgs(Params_get_Name args);

        public delegate string get_Name_NormalArgs(Params_get_Name args);

        public sealed class Params_CopyFrom
        {
            public tk2dSpriteCollectionFont self;
            public tk2dSpriteCollectionFont src;
        }

        public sealed class Params_get_Name
        {
            public tk2dSpriteCollectionFont self;
        }

        public sealed class Params_get_InUse
        {
            public tk2dSpriteCollectionFont self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CopyFrom_BeforeArgs CopyFrom
        {
            add
            {
                HookHandler._beforeCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._beforeCopyFrom -= value;
        }

        public static event Delegates.get_Name_BeforeArgs get_Name
        {
            add
            {
                HookHandler._beforeget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._beforeget_Name -= value;
        }

        public static event Delegates.get_InUse_BeforeArgs get_InUse
        {
            add
            {
                HookHandler._beforeget_InUse += value;
                HookHandler.Hookget_InUse();
            }
            remove => HookHandler._beforeget_InUse -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CopyFrom_NormalArgs CopyFrom
        {
            add
            {
                HookHandler._afterCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._afterCopyFrom -= value;
        }

        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add
            {
                HookHandler._afterget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._afterget_Name -= value;
        }

        public static event Delegates.get_InUse_NormalArgs get_InUse
        {
            add
            {
                HookHandler._afterget_InUse += value;
                HookHandler.Hookget_InUse();
            }
            remove => HookHandler._afterget_InUse -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSpriteCollectionFont.hook_CopyFrom CopyFrom
        {
            add => On.tk2dSpriteCollectionFont.CopyFrom += value;
            remove => On.tk2dSpriteCollectionFont.CopyFrom -= value;
        }

        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add => HookEndpointManager.Add<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionFont), "get_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionFont), "get_Name"), value);
        }

        public static event Delegates.get_InUse_NormalArgs get_InUse
        {
            add => HookEndpointManager.Add<Delegates.get_InUse_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionFont), "get_InUse"), value);
            remove => HookEndpointManager.Remove<Delegates.get_InUse_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionFont), "get_InUse"), value);
        }
    }
}