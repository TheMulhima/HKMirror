using Modding.Utils;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UnityExtensions class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnityExtensions
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookFindGameObject()
        {
            if (!HookedList.Contains("FindGameObject"))
            {
                HookedList.Add("FindGameObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityExtensions), "FindGameObject", false),
                    FindGameObject);
            }
        }

        internal static event Delegates.FindGameObject_BeforeArgs _beforeFindGameObject;
        internal static event Delegates.FindGameObject_AfterArgs _afterFindGameObject;

        private static GameObject FindGameObject(Func<Scene, string, GameObject> orig, Scene scene, string objName)
        {
            Delegates.Params_FindGameObject @params = new()
            {
                scene = scene, objName = objName
            };
            if (_beforeFindGameObject != null)
                foreach (Delegates.FindGameObject_BeforeArgs toInvoke in _beforeFindGameObject.GetInvocationList())
                    try
                    {
                        _beforeFindGameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            scene = @params.scene;
            objName = @params.objName;
            var retVal = orig(scene, objName);
            if (_afterFindGameObject != null)
                foreach (Delegates.FindGameObject_AfterArgs toInvoke in _afterFindGameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterFindGameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetGameObjectFromArray()
        {
            if (!HookedList.Contains("GetGameObjectFromArray"))
            {
                HookedList.Add("GetGameObjectFromArray");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityExtensions), "GetGameObjectFromArray", false),
                    GetGameObjectFromArray);
            }
        }

        internal static event Delegates.GetGameObjectFromArray_BeforeArgs _beforeGetGameObjectFromArray;
        internal static event Delegates.GetGameObjectFromArray_AfterArgs _afterGetGameObjectFromArray;

        private static GameObject GetGameObjectFromArray(Func<GameObject[], string, GameObject> orig,
            GameObject[] objects, string objName)
        {
            Delegates.Params_GetGameObjectFromArray @params = new()
            {
                objects = objects, objName = objName
            };
            if (_beforeGetGameObjectFromArray != null)
                foreach (Delegates.GetGameObjectFromArray_BeforeArgs toInvoke in _beforeGetGameObjectFromArray
                             .GetInvocationList())
                    try
                    {
                        _beforeGetGameObjectFromArray?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            objects = @params.objects;
            objName = @params.objName;
            var retVal = orig(objects, objName);
            if (_afterGetGameObjectFromArray != null)
                foreach (Delegates.GetGameObjectFromArray_AfterArgs toInvoke in _afterGetGameObjectFromArray
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetGameObjectFromArray.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate GameObject FindGameObject_AfterArgs(Params_FindGameObject args, GameObject ret);

        public delegate void FindGameObject_BeforeArgs(Params_FindGameObject args);

        public delegate GameObject FindGameObject_WithArgs(Func<Scene, string, GameObject> orig, Scene scene,
            string objName);

        public delegate GameObject GetGameObjectFromArray_AfterArgs(Params_GetGameObjectFromArray args, GameObject ret);

        public delegate void GetGameObjectFromArray_BeforeArgs(Params_GetGameObjectFromArray args);

        public delegate GameObject GetGameObjectFromArray_WithArgs(Func<GameObject[], string, GameObject> orig,
            GameObject[] objects, string objName);

        public sealed class Params_FindGameObject
        {
            public string objName;
            public Scene scene;
        }

        public sealed class Params_GetGameObjectFromArray
        {
            public GameObject[] objects;
            public string objName;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.FindGameObject_BeforeArgs FindGameObject
        {
            add
            {
                HookHandler._beforeFindGameObject += value;
                HookHandler.HookFindGameObject();
            }
            remove => HookHandler._beforeFindGameObject -= value;
        }

        public static event Delegates.GetGameObjectFromArray_BeforeArgs GetGameObjectFromArray
        {
            add
            {
                HookHandler._beforeGetGameObjectFromArray += value;
                HookHandler.HookGetGameObjectFromArray();
            }
            remove => HookHandler._beforeGetGameObjectFromArray -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.FindGameObject_AfterArgs FindGameObject
        {
            add
            {
                HookHandler._afterFindGameObject += value;
                HookHandler.HookFindGameObject();
            }
            remove => HookHandler._afterFindGameObject -= value;
        }

        public static event Delegates.GetGameObjectFromArray_AfterArgs GetGameObjectFromArray
        {
            add
            {
                HookHandler._afterGetGameObjectFromArray += value;
                HookHandler.HookGetGameObjectFromArray();
            }
            remove => HookHandler._afterGetGameObjectFromArray -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.FindGameObject_WithArgs FindGameObject
        {
            add => HookEndpointManager.Add<Delegates.FindGameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityExtensions), "FindGameObject", false), value);
            remove => HookEndpointManager.Remove<Delegates.FindGameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityExtensions), "FindGameObject", false), value);
        }

        public static event Delegates.GetGameObjectFromArray_WithArgs GetGameObjectFromArray
        {
            add => HookEndpointManager.Add<Delegates.GetGameObjectFromArray_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityExtensions), "GetGameObjectFromArray", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetGameObjectFromArray_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityExtensions), "GetGameObjectFromArray", false), value);
        }
    }
}