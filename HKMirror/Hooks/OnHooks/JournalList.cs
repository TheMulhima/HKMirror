using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for JournalList class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnJournalList
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookBuildEnemyList()
        {
            if (!HookedList.Contains("BuildEnemyList"))
            {
                HookedList.Add("BuildEnemyList");
                On.JournalList.BuildEnemyList += BuildEnemyList;
            }
        }

        internal static event Delegates.BuildEnemyList_BeforeArgs _beforeBuildEnemyList;
        internal static event Delegates.BuildEnemyList_AfterArgs _afterBuildEnemyList;

        private static void BuildEnemyList(On.JournalList.orig_BuildEnemyList orig, JournalList self)
        {
            Delegates.Params_BuildEnemyList @params = new()
            {
                self = self
            };
            if (_beforeBuildEnemyList != null)
            {
                foreach (Delegates.BuildEnemyList_BeforeArgs toInvoke in _beforeBuildEnemyList.GetInvocationList())
                {
                    try
                    {
                        _beforeBuildEnemyList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterBuildEnemyList != null)
            {
                foreach (Delegates.BuildEnemyList_AfterArgs toInvoke in _afterBuildEnemyList.GetInvocationList())
                {
                    try
                    {
                        _afterBuildEnemyList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateEnemyList()
        {
            if (!HookedList.Contains("UpdateEnemyList"))
            {
                HookedList.Add("UpdateEnemyList");
                On.JournalList.UpdateEnemyList += UpdateEnemyList;
            }
        }

        internal static event Delegates.UpdateEnemyList_BeforeArgs _beforeUpdateEnemyList;
        internal static event Delegates.UpdateEnemyList_AfterArgs _afterUpdateEnemyList;

        private static void UpdateEnemyList(On.JournalList.orig_UpdateEnemyList orig, JournalList self)
        {
            Delegates.Params_UpdateEnemyList @params = new()
            {
                self = self
            };
            if (_beforeUpdateEnemyList != null)
            {
                foreach (Delegates.UpdateEnemyList_BeforeArgs toInvoke in _beforeUpdateEnemyList.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateEnemyList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateEnemyList != null)
            {
                foreach (Delegates.UpdateEnemyList_AfterArgs toInvoke in _afterUpdateEnemyList.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateEnemyList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetItemCount()
        {
            if (!HookedList.Contains("GetItemCount"))
            {
                HookedList.Add("GetItemCount");
                On.JournalList.GetItemCount += GetItemCount;
            }
        }

        internal static event Delegates.GetItemCount_BeforeArgs _beforeGetItemCount;
        internal static event Delegates.GetItemCount_AfterArgs _afterGetItemCount;

        private static int GetItemCount(On.JournalList.orig_GetItemCount orig, JournalList self)
        {
            Delegates.Params_GetItemCount @params = new()
            {
                self = self
            };
            if (_beforeGetItemCount != null)
            {
                foreach (Delegates.GetItemCount_BeforeArgs toInvoke in _beforeGetItemCount.GetInvocationList())
                {
                    try
                    {
                        _beforeGetItemCount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetItemCount != null)
            {
                foreach (Delegates.GetItemCount_AfterArgs toInvoke in _afterGetItemCount.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetItemCount.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetNameConvo()
        {
            if (!HookedList.Contains("GetNameConvo"))
            {
                HookedList.Add("GetNameConvo");
                On.JournalList.GetNameConvo += GetNameConvo;
            }
        }

        internal static event Delegates.GetNameConvo_BeforeArgs _beforeGetNameConvo;
        internal static event Delegates.GetNameConvo_AfterArgs _afterGetNameConvo;

        private static string GetNameConvo(On.JournalList.orig_GetNameConvo orig, JournalList self, int itemNum)
        {
            Delegates.Params_GetNameConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetNameConvo != null)
            {
                foreach (Delegates.GetNameConvo_BeforeArgs toInvoke in _beforeGetNameConvo.GetInvocationList())
                {
                    try
                    {
                        _beforeGetNameConvo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetNameConvo != null)
            {
                foreach (Delegates.GetNameConvo_AfterArgs toInvoke in _afterGetNameConvo.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetNameConvo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetDescConvo()
        {
            if (!HookedList.Contains("GetDescConvo"))
            {
                HookedList.Add("GetDescConvo");
                On.JournalList.GetDescConvo += GetDescConvo;
            }
        }

        internal static event Delegates.GetDescConvo_BeforeArgs _beforeGetDescConvo;
        internal static event Delegates.GetDescConvo_AfterArgs _afterGetDescConvo;

        private static string GetDescConvo(On.JournalList.orig_GetDescConvo orig, JournalList self, int itemNum)
        {
            Delegates.Params_GetDescConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetDescConvo != null)
            {
                foreach (Delegates.GetDescConvo_BeforeArgs toInvoke in _beforeGetDescConvo.GetInvocationList())
                {
                    try
                    {
                        _beforeGetDescConvo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetDescConvo != null)
            {
                foreach (Delegates.GetDescConvo_AfterArgs toInvoke in _afterGetDescConvo.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetDescConvo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetWarriorGhost()
        {
            if (!HookedList.Contains("GetWarriorGhost"))
            {
                HookedList.Add("GetWarriorGhost");
                On.JournalList.GetWarriorGhost += GetWarriorGhost;
            }
        }

        internal static event Delegates.GetWarriorGhost_BeforeArgs _beforeGetWarriorGhost;
        internal static event Delegates.GetWarriorGhost_AfterArgs _afterGetWarriorGhost;

        private static bool GetWarriorGhost(On.JournalList.orig_GetWarriorGhost orig, JournalList self, int itemNum)
        {
            Delegates.Params_GetWarriorGhost @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetWarriorGhost != null)
            {
                foreach (Delegates.GetWarriorGhost_BeforeArgs toInvoke in _beforeGetWarriorGhost.GetInvocationList())
                {
                    try
                    {
                        _beforeGetWarriorGhost?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetWarriorGhost != null)
            {
                foreach (Delegates.GetWarriorGhost_AfterArgs toInvoke in _afterGetWarriorGhost.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetWarriorGhost.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetGrimm()
        {
            if (!HookedList.Contains("GetGrimm"))
            {
                HookedList.Add("GetGrimm");
                On.JournalList.GetGrimm += GetGrimm;
            }
        }

        internal static event Delegates.GetGrimm_BeforeArgs _beforeGetGrimm;
        internal static event Delegates.GetGrimm_AfterArgs _afterGetGrimm;

        private static bool GetGrimm(On.JournalList.orig_GetGrimm orig, JournalList self, int itemNum)
        {
            Delegates.Params_GetGrimm @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetGrimm != null)
            {
                foreach (Delegates.GetGrimm_BeforeArgs toInvoke in _beforeGetGrimm.GetInvocationList())
                {
                    try
                    {
                        _beforeGetGrimm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetGrimm != null)
            {
                foreach (Delegates.GetGrimm_AfterArgs toInvoke in _afterGetGrimm.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetGrimm.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetNotesConvo()
        {
            if (!HookedList.Contains("GetNotesConvo"))
            {
                HookedList.Add("GetNotesConvo");
                On.JournalList.GetNotesConvo += GetNotesConvo;
            }
        }

        internal static event Delegates.GetNotesConvo_BeforeArgs _beforeGetNotesConvo;
        internal static event Delegates.GetNotesConvo_AfterArgs _afterGetNotesConvo;

        private static string GetNotesConvo(On.JournalList.orig_GetNotesConvo orig, JournalList self, int itemNum)
        {
            Delegates.Params_GetNotesConvo @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetNotesConvo != null)
            {
                foreach (Delegates.GetNotesConvo_BeforeArgs toInvoke in _beforeGetNotesConvo.GetInvocationList())
                {
                    try
                    {
                        _beforeGetNotesConvo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetNotesConvo != null)
            {
                foreach (Delegates.GetNotesConvo_AfterArgs toInvoke in _afterGetNotesConvo.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetNotesConvo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetPlayerDataBoolName()
        {
            if (!HookedList.Contains("GetPlayerDataBoolName"))
            {
                HookedList.Add("GetPlayerDataBoolName");
                On.JournalList.GetPlayerDataBoolName += GetPlayerDataBoolName;
            }
        }

        internal static event Delegates.GetPlayerDataBoolName_BeforeArgs _beforeGetPlayerDataBoolName;
        internal static event Delegates.GetPlayerDataBoolName_AfterArgs _afterGetPlayerDataBoolName;

        private static string GetPlayerDataBoolName(On.JournalList.orig_GetPlayerDataBoolName orig, JournalList self,
            int itemNum)
        {
            Delegates.Params_GetPlayerDataBoolName @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetPlayerDataBoolName != null)
            {
                foreach (Delegates.GetPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetPlayerDataBoolName
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerDataBoolName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataBoolName != null)
            {
                foreach (Delegates.GetPlayerDataBoolName_AfterArgs toInvoke in _afterGetPlayerDataBoolName
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerDataBoolName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetPlayerDataKillsName()
        {
            if (!HookedList.Contains("GetPlayerDataKillsName"))
            {
                HookedList.Add("GetPlayerDataKillsName");
                On.JournalList.GetPlayerDataKillsName += GetPlayerDataKillsName;
            }
        }

        internal static event Delegates.GetPlayerDataKillsName_BeforeArgs _beforeGetPlayerDataKillsName;
        internal static event Delegates.GetPlayerDataKillsName_AfterArgs _afterGetPlayerDataKillsName;

        private static string GetPlayerDataKillsName(On.JournalList.orig_GetPlayerDataKillsName orig, JournalList self,
            int itemNum)
        {
            Delegates.Params_GetPlayerDataKillsName @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetPlayerDataKillsName != null)
            {
                foreach (Delegates.GetPlayerDataKillsName_BeforeArgs toInvoke in _beforeGetPlayerDataKillsName
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerDataKillsName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataKillsName != null)
            {
                foreach (Delegates.GetPlayerDataKillsName_AfterArgs toInvoke in _afterGetPlayerDataKillsName
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerDataKillsName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetPlayerDataNewDataName()
        {
            if (!HookedList.Contains("GetPlayerDataNewDataName"))
            {
                HookedList.Add("GetPlayerDataNewDataName");
                On.JournalList.GetPlayerDataNewDataName += GetPlayerDataNewDataName;
            }
        }

        internal static event Delegates.GetPlayerDataNewDataName_BeforeArgs _beforeGetPlayerDataNewDataName;
        internal static event Delegates.GetPlayerDataNewDataName_AfterArgs _afterGetPlayerDataNewDataName;

        private static string GetPlayerDataNewDataName(On.JournalList.orig_GetPlayerDataNewDataName orig,
            JournalList self, int itemNum)
        {
            Delegates.Params_GetPlayerDataNewDataName @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetPlayerDataNewDataName != null)
            {
                foreach (Delegates.GetPlayerDataNewDataName_BeforeArgs toInvoke in _beforeGetPlayerDataNewDataName
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerDataNewDataName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetPlayerDataNewDataName != null)
            {
                foreach (Delegates.GetPlayerDataNewDataName_AfterArgs toInvoke in _afterGetPlayerDataNewDataName
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerDataNewDataName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetSprite()
        {
            if (!HookedList.Contains("GetSprite"))
            {
                HookedList.Add("GetSprite");
                On.JournalList.GetSprite += GetSprite;
            }
        }

        internal static event Delegates.GetSprite_BeforeArgs _beforeGetSprite;
        internal static event Delegates.GetSprite_AfterArgs _afterGetSprite;

        private static UnityEngine.Sprite GetSprite(On.JournalList.orig_GetSprite orig, JournalList self, int itemNum)
        {
            Delegates.Params_GetSprite @params = new()
            {
                self = self, itemNum = itemNum
            };
            if (_beforeGetSprite != null)
            {
                foreach (Delegates.GetSprite_BeforeArgs toInvoke in _beforeGetSprite.GetInvocationList())
                {
                    try
                    {
                        _beforeGetSprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetSprite != null)
            {
                foreach (Delegates.GetSprite_AfterArgs toInvoke in _afterGetSprite.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetSprite.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetYDistance()
        {
            if (!HookedList.Contains("GetYDistance"))
            {
                HookedList.Add("GetYDistance");
                On.JournalList.GetYDistance += GetYDistance;
            }
        }

        internal static event Delegates.GetYDistance_BeforeArgs _beforeGetYDistance;
        internal static event Delegates.GetYDistance_AfterArgs _afterGetYDistance;

        private static float GetYDistance(On.JournalList.orig_GetYDistance orig, JournalList self)
        {
            Delegates.Params_GetYDistance @params = new()
            {
                self = self
            };
            if (_beforeGetYDistance != null)
            {
                foreach (Delegates.GetYDistance_BeforeArgs toInvoke in _beforeGetYDistance.GetInvocationList())
                {
                    try
                    {
                        _beforeGetYDistance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetYDistance != null)
            {
                foreach (Delegates.GetYDistance_AfterArgs toInvoke in _afterGetYDistance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetYDistance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetFirstNewItem()
        {
            if (!HookedList.Contains("GetFirstNewItem"))
            {
                HookedList.Add("GetFirstNewItem");
                On.JournalList.GetFirstNewItem += GetFirstNewItem;
            }
        }

        internal static event Delegates.GetFirstNewItem_BeforeArgs _beforeGetFirstNewItem;
        internal static event Delegates.GetFirstNewItem_AfterArgs _afterGetFirstNewItem;

        private static int GetFirstNewItem(On.JournalList.orig_GetFirstNewItem orig, JournalList self)
        {
            Delegates.Params_GetFirstNewItem @params = new()
            {
                self = self
            };
            if (_beforeGetFirstNewItem != null)
            {
                foreach (Delegates.GetFirstNewItem_BeforeArgs toInvoke in _beforeGetFirstNewItem.GetInvocationList())
                {
                    try
                    {
                        _beforeGetFirstNewItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetFirstNewItem != null)
            {
                foreach (Delegates.GetFirstNewItem_AfterArgs toInvoke in _afterGetFirstNewItem.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetFirstNewItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_BuildEnemyList
        {
            public JournalList self;
        }

        public delegate void BuildEnemyList_BeforeArgs(Params_BuildEnemyList args);

        public delegate void BuildEnemyList_AfterArgs(Params_BuildEnemyList args);

        public delegate void BuildEnemyList_WithArgs(Action<JournalList> orig, JournalList self);

        public sealed class Params_UpdateEnemyList
        {
            public JournalList self;
        }

        public delegate void UpdateEnemyList_BeforeArgs(Params_UpdateEnemyList args);

        public delegate void UpdateEnemyList_AfterArgs(Params_UpdateEnemyList args);

        public delegate void UpdateEnemyList_WithArgs(Action<JournalList> orig, JournalList self);

        public sealed class Params_GetItemCount
        {
            public JournalList self;
        }

        public delegate void GetItemCount_BeforeArgs(Params_GetItemCount args);

        public delegate int GetItemCount_AfterArgs(Params_GetItemCount args, int ret);

        public delegate int GetItemCount_WithArgs(Func<JournalList, int> orig, JournalList self);

        public sealed class Params_GetNameConvo
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetNameConvo_BeforeArgs(Params_GetNameConvo args);

        public delegate string GetNameConvo_AfterArgs(Params_GetNameConvo args, string ret);

        public delegate string GetNameConvo_WithArgs(Func<JournalList, int, string> orig, JournalList self,
            int itemNum);

        public sealed class Params_GetDescConvo
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetDescConvo_BeforeArgs(Params_GetDescConvo args);

        public delegate string GetDescConvo_AfterArgs(Params_GetDescConvo args, string ret);

        public delegate string GetDescConvo_WithArgs(Func<JournalList, int, string> orig, JournalList self,
            int itemNum);

        public sealed class Params_GetWarriorGhost
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetWarriorGhost_BeforeArgs(Params_GetWarriorGhost args);

        public delegate bool GetWarriorGhost_AfterArgs(Params_GetWarriorGhost args, bool ret);

        public delegate bool GetWarriorGhost_WithArgs(Func<JournalList, int, bool> orig, JournalList self, int itemNum);

        public sealed class Params_GetGrimm
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetGrimm_BeforeArgs(Params_GetGrimm args);

        public delegate bool GetGrimm_AfterArgs(Params_GetGrimm args, bool ret);

        public delegate bool GetGrimm_WithArgs(Func<JournalList, int, bool> orig, JournalList self, int itemNum);

        public sealed class Params_GetNotesConvo
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetNotesConvo_BeforeArgs(Params_GetNotesConvo args);

        public delegate string GetNotesConvo_AfterArgs(Params_GetNotesConvo args, string ret);

        public delegate string GetNotesConvo_WithArgs(Func<JournalList, int, string> orig, JournalList self,
            int itemNum);

        public sealed class Params_GetPlayerDataBoolName
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetPlayerDataBoolName_BeforeArgs(Params_GetPlayerDataBoolName args);

        public delegate string GetPlayerDataBoolName_AfterArgs(Params_GetPlayerDataBoolName args, string ret);

        public delegate string GetPlayerDataBoolName_WithArgs(Func<JournalList, int, string> orig, JournalList self,
            int itemNum);

        public sealed class Params_GetPlayerDataKillsName
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetPlayerDataKillsName_BeforeArgs(Params_GetPlayerDataKillsName args);

        public delegate string GetPlayerDataKillsName_AfterArgs(Params_GetPlayerDataKillsName args, string ret);

        public delegate string GetPlayerDataKillsName_WithArgs(Func<JournalList, int, string> orig, JournalList self,
            int itemNum);

        public sealed class Params_GetPlayerDataNewDataName
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetPlayerDataNewDataName_BeforeArgs(Params_GetPlayerDataNewDataName args);

        public delegate string GetPlayerDataNewDataName_AfterArgs(Params_GetPlayerDataNewDataName args, string ret);

        public delegate string GetPlayerDataNewDataName_WithArgs(Func<JournalList, int, string> orig, JournalList self,
            int itemNum);

        public sealed class Params_GetSprite
        {
            public JournalList self;
            public int itemNum;
        }

        public delegate void GetSprite_BeforeArgs(Params_GetSprite args);

        public delegate UnityEngine.Sprite GetSprite_AfterArgs(Params_GetSprite args, UnityEngine.Sprite ret);

        public delegate UnityEngine.Sprite GetSprite_WithArgs(Func<JournalList, int, UnityEngine.Sprite> orig,
            JournalList self, int itemNum);

        public sealed class Params_GetYDistance
        {
            public JournalList self;
        }

        public delegate void GetYDistance_BeforeArgs(Params_GetYDistance args);

        public delegate float GetYDistance_AfterArgs(Params_GetYDistance args, float ret);

        public delegate float GetYDistance_WithArgs(Func<JournalList, float> orig, JournalList self);

        public sealed class Params_GetFirstNewItem
        {
            public JournalList self;
        }

        public delegate void GetFirstNewItem_BeforeArgs(Params_GetFirstNewItem args);

        public delegate int GetFirstNewItem_AfterArgs(Params_GetFirstNewItem args, int ret);

        public delegate int GetFirstNewItem_WithArgs(Func<JournalList, int> orig, JournalList self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.BuildEnemyList_BeforeArgs BuildEnemyList
        {
            add
            {
                HookHandler._beforeBuildEnemyList += value;
                HookHandler.HookBuildEnemyList();
            }
            remove => HookHandler._beforeBuildEnemyList -= value;
        }

        public static event Delegates.UpdateEnemyList_BeforeArgs UpdateEnemyList
        {
            add
            {
                HookHandler._beforeUpdateEnemyList += value;
                HookHandler.HookUpdateEnemyList();
            }
            remove => HookHandler._beforeUpdateEnemyList -= value;
        }

        public static event Delegates.GetItemCount_BeforeArgs GetItemCount
        {
            add
            {
                HookHandler._beforeGetItemCount += value;
                HookHandler.HookGetItemCount();
            }
            remove => HookHandler._beforeGetItemCount -= value;
        }

        public static event Delegates.GetNameConvo_BeforeArgs GetNameConvo
        {
            add
            {
                HookHandler._beforeGetNameConvo += value;
                HookHandler.HookGetNameConvo();
            }
            remove => HookHandler._beforeGetNameConvo -= value;
        }

        public static event Delegates.GetDescConvo_BeforeArgs GetDescConvo
        {
            add
            {
                HookHandler._beforeGetDescConvo += value;
                HookHandler.HookGetDescConvo();
            }
            remove => HookHandler._beforeGetDescConvo -= value;
        }

        public static event Delegates.GetWarriorGhost_BeforeArgs GetWarriorGhost
        {
            add
            {
                HookHandler._beforeGetWarriorGhost += value;
                HookHandler.HookGetWarriorGhost();
            }
            remove => HookHandler._beforeGetWarriorGhost -= value;
        }

        public static event Delegates.GetGrimm_BeforeArgs GetGrimm
        {
            add
            {
                HookHandler._beforeGetGrimm += value;
                HookHandler.HookGetGrimm();
            }
            remove => HookHandler._beforeGetGrimm -= value;
        }

        public static event Delegates.GetNotesConvo_BeforeArgs GetNotesConvo
        {
            add
            {
                HookHandler._beforeGetNotesConvo += value;
                HookHandler.HookGetNotesConvo();
            }
            remove => HookHandler._beforeGetNotesConvo -= value;
        }

        public static event Delegates.GetPlayerDataBoolName_BeforeArgs GetPlayerDataBoolName
        {
            add
            {
                HookHandler._beforeGetPlayerDataBoolName += value;
                HookHandler.HookGetPlayerDataBoolName();
            }
            remove => HookHandler._beforeGetPlayerDataBoolName -= value;
        }

        public static event Delegates.GetPlayerDataKillsName_BeforeArgs GetPlayerDataKillsName
        {
            add
            {
                HookHandler._beforeGetPlayerDataKillsName += value;
                HookHandler.HookGetPlayerDataKillsName();
            }
            remove => HookHandler._beforeGetPlayerDataKillsName -= value;
        }

        public static event Delegates.GetPlayerDataNewDataName_BeforeArgs GetPlayerDataNewDataName
        {
            add
            {
                HookHandler._beforeGetPlayerDataNewDataName += value;
                HookHandler.HookGetPlayerDataNewDataName();
            }
            remove => HookHandler._beforeGetPlayerDataNewDataName -= value;
        }

        public static event Delegates.GetSprite_BeforeArgs GetSprite
        {
            add
            {
                HookHandler._beforeGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._beforeGetSprite -= value;
        }

        public static event Delegates.GetYDistance_BeforeArgs GetYDistance
        {
            add
            {
                HookHandler._beforeGetYDistance += value;
                HookHandler.HookGetYDistance();
            }
            remove => HookHandler._beforeGetYDistance -= value;
        }

        public static event Delegates.GetFirstNewItem_BeforeArgs GetFirstNewItem
        {
            add
            {
                HookHandler._beforeGetFirstNewItem += value;
                HookHandler.HookGetFirstNewItem();
            }
            remove => HookHandler._beforeGetFirstNewItem -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.BuildEnemyList_AfterArgs BuildEnemyList
        {
            add
            {
                HookHandler._afterBuildEnemyList += value;
                HookHandler.HookBuildEnemyList();
            }
            remove => HookHandler._afterBuildEnemyList -= value;
        }

        public static event Delegates.UpdateEnemyList_AfterArgs UpdateEnemyList
        {
            add
            {
                HookHandler._afterUpdateEnemyList += value;
                HookHandler.HookUpdateEnemyList();
            }
            remove => HookHandler._afterUpdateEnemyList -= value;
        }

        public static event Delegates.GetItemCount_AfterArgs GetItemCount
        {
            add
            {
                HookHandler._afterGetItemCount += value;
                HookHandler.HookGetItemCount();
            }
            remove => HookHandler._afterGetItemCount -= value;
        }

        public static event Delegates.GetNameConvo_AfterArgs GetNameConvo
        {
            add
            {
                HookHandler._afterGetNameConvo += value;
                HookHandler.HookGetNameConvo();
            }
            remove => HookHandler._afterGetNameConvo -= value;
        }

        public static event Delegates.GetDescConvo_AfterArgs GetDescConvo
        {
            add
            {
                HookHandler._afterGetDescConvo += value;
                HookHandler.HookGetDescConvo();
            }
            remove => HookHandler._afterGetDescConvo -= value;
        }

        public static event Delegates.GetWarriorGhost_AfterArgs GetWarriorGhost
        {
            add
            {
                HookHandler._afterGetWarriorGhost += value;
                HookHandler.HookGetWarriorGhost();
            }
            remove => HookHandler._afterGetWarriorGhost -= value;
        }

        public static event Delegates.GetGrimm_AfterArgs GetGrimm
        {
            add
            {
                HookHandler._afterGetGrimm += value;
                HookHandler.HookGetGrimm();
            }
            remove => HookHandler._afterGetGrimm -= value;
        }

        public static event Delegates.GetNotesConvo_AfterArgs GetNotesConvo
        {
            add
            {
                HookHandler._afterGetNotesConvo += value;
                HookHandler.HookGetNotesConvo();
            }
            remove => HookHandler._afterGetNotesConvo -= value;
        }

        public static event Delegates.GetPlayerDataBoolName_AfterArgs GetPlayerDataBoolName
        {
            add
            {
                HookHandler._afterGetPlayerDataBoolName += value;
                HookHandler.HookGetPlayerDataBoolName();
            }
            remove => HookHandler._afterGetPlayerDataBoolName -= value;
        }

        public static event Delegates.GetPlayerDataKillsName_AfterArgs GetPlayerDataKillsName
        {
            add
            {
                HookHandler._afterGetPlayerDataKillsName += value;
                HookHandler.HookGetPlayerDataKillsName();
            }
            remove => HookHandler._afterGetPlayerDataKillsName -= value;
        }

        public static event Delegates.GetPlayerDataNewDataName_AfterArgs GetPlayerDataNewDataName
        {
            add
            {
                HookHandler._afterGetPlayerDataNewDataName += value;
                HookHandler.HookGetPlayerDataNewDataName();
            }
            remove => HookHandler._afterGetPlayerDataNewDataName -= value;
        }

        public static event Delegates.GetSprite_AfterArgs GetSprite
        {
            add
            {
                HookHandler._afterGetSprite += value;
                HookHandler.HookGetSprite();
            }
            remove => HookHandler._afterGetSprite -= value;
        }

        public static event Delegates.GetYDistance_AfterArgs GetYDistance
        {
            add
            {
                HookHandler._afterGetYDistance += value;
                HookHandler.HookGetYDistance();
            }
            remove => HookHandler._afterGetYDistance -= value;
        }

        public static event Delegates.GetFirstNewItem_AfterArgs GetFirstNewItem
        {
            add
            {
                HookHandler._afterGetFirstNewItem += value;
                HookHandler.HookGetFirstNewItem();
            }
            remove => HookHandler._afterGetFirstNewItem -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.JournalList.hook_BuildEnemyList BuildEnemyList
        {
            add => On.JournalList.BuildEnemyList += value;
            remove => On.JournalList.BuildEnemyList -= value;
        }

        public static event On.JournalList.hook_UpdateEnemyList UpdateEnemyList
        {
            add => On.JournalList.UpdateEnemyList += value;
            remove => On.JournalList.UpdateEnemyList -= value;
        }

        public static event On.JournalList.hook_GetItemCount GetItemCount
        {
            add => On.JournalList.GetItemCount += value;
            remove => On.JournalList.GetItemCount -= value;
        }

        public static event On.JournalList.hook_GetNameConvo GetNameConvo
        {
            add => On.JournalList.GetNameConvo += value;
            remove => On.JournalList.GetNameConvo -= value;
        }

        public static event On.JournalList.hook_GetDescConvo GetDescConvo
        {
            add => On.JournalList.GetDescConvo += value;
            remove => On.JournalList.GetDescConvo -= value;
        }

        public static event On.JournalList.hook_GetWarriorGhost GetWarriorGhost
        {
            add => On.JournalList.GetWarriorGhost += value;
            remove => On.JournalList.GetWarriorGhost -= value;
        }

        public static event On.JournalList.hook_GetGrimm GetGrimm
        {
            add => On.JournalList.GetGrimm += value;
            remove => On.JournalList.GetGrimm -= value;
        }

        public static event On.JournalList.hook_GetNotesConvo GetNotesConvo
        {
            add => On.JournalList.GetNotesConvo += value;
            remove => On.JournalList.GetNotesConvo -= value;
        }

        public static event On.JournalList.hook_GetPlayerDataBoolName GetPlayerDataBoolName
        {
            add => On.JournalList.GetPlayerDataBoolName += value;
            remove => On.JournalList.GetPlayerDataBoolName -= value;
        }

        public static event On.JournalList.hook_GetPlayerDataKillsName GetPlayerDataKillsName
        {
            add => On.JournalList.GetPlayerDataKillsName += value;
            remove => On.JournalList.GetPlayerDataKillsName -= value;
        }

        public static event On.JournalList.hook_GetPlayerDataNewDataName GetPlayerDataNewDataName
        {
            add => On.JournalList.GetPlayerDataNewDataName += value;
            remove => On.JournalList.GetPlayerDataNewDataName -= value;
        }

        public static event On.JournalList.hook_GetSprite GetSprite
        {
            add => On.JournalList.GetSprite += value;
            remove => On.JournalList.GetSprite -= value;
        }

        public static event On.JournalList.hook_GetYDistance GetYDistance
        {
            add => On.JournalList.GetYDistance += value;
            remove => On.JournalList.GetYDistance -= value;
        }

        public static event On.JournalList.hook_GetFirstNewItem GetFirstNewItem
        {
            add => On.JournalList.GetFirstNewItem += value;
            remove => On.JournalList.GetFirstNewItem -= value;
        }
    }
}