namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FSMActivator class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFSMActivator
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.FSMActivator.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.FSMActivator.orig_Awake orig, FSMActivator self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookActivate()
        {
            if (!HookedList.Contains("Activate"))
            {
                HookedList.Add("Activate");
                On.FSMActivator.Activate += Activate;
            }
        }

        internal static event Delegates.Activate_BeforeArgs _beforeActivate;
        internal static event Delegates.Activate_NormalArgs _afterActivate;

        private static void Activate(On.FSMActivator.orig_Activate orig, FSMActivator self)
        {
            Delegates.Params_Activate @params = new()
            {
                self = self
            };
            _beforeActivate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterActivate != null) _afterActivate.Invoke(@params);
        }

        internal static void HookActivateStaggered()
        {
            if (!HookedList.Contains("ActivateStaggered"))
            {
                HookedList.Add("ActivateStaggered");
                On.FSMActivator.ActivateStaggered += ActivateStaggered;
            }
        }

        internal static event Delegates.ActivateStaggered_BeforeArgs _beforeActivateStaggered;

        private static IEnumerator ActivateStaggered(On.FSMActivator.orig_ActivateStaggered orig, FSMActivator self)
        {
            Delegates.Params_ActivateStaggered @params = new()
            {
                self = self
            };
            _beforeActivateStaggered?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookDeactivate()
        {
            if (!HookedList.Contains("Deactivate"))
            {
                HookedList.Add("Deactivate");
                On.FSMActivator.Deactivate += Deactivate;
            }
        }

        internal static event Delegates.Deactivate_BeforeArgs _beforeDeactivate;
        internal static event Delegates.Deactivate_NormalArgs _afterDeactivate;

        private static void Deactivate(On.FSMActivator.orig_Deactivate orig, FSMActivator self)
        {
            Delegates.Params_Deactivate @params = new()
            {
                self = self
            };
            _beforeDeactivate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDeactivate != null) _afterDeactivate.Invoke(@params);
        }

        internal static void HookDeactivateStaggered()
        {
            if (!HookedList.Contains("DeactivateStaggered"))
            {
                HookedList.Add("DeactivateStaggered");
                On.FSMActivator.DeactivateStaggered += DeactivateStaggered;
            }
        }

        internal static event Delegates.DeactivateStaggered_BeforeArgs _beforeDeactivateStaggered;

        private static IEnumerator DeactivateStaggered(On.FSMActivator.orig_DeactivateStaggered orig, FSMActivator self)
        {
            Delegates.Params_DeactivateStaggered @params = new()
            {
                self = self
            };
            _beforeDeactivateStaggered?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Activate_BeforeArgs(Params_Activate args);

        public delegate void Activate_NormalArgs(Params_Activate args);

        public delegate void ActivateStaggered_BeforeArgs(Params_ActivateStaggered args);

        public delegate IEnumerator ActivateStaggered_NormalArgs(Params_ActivateStaggered args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Deactivate_BeforeArgs(Params_Deactivate args);

        public delegate void Deactivate_NormalArgs(Params_Deactivate args);

        public delegate void DeactivateStaggered_BeforeArgs(Params_DeactivateStaggered args);

        public delegate IEnumerator DeactivateStaggered_NormalArgs(Params_DeactivateStaggered args);

        public sealed class Params_Awake
        {
            public FSMActivator self;
        }

        public sealed class Params_Activate
        {
            public FSMActivator self;
        }

        public sealed class Params_ActivateStaggered
        {
            public FSMActivator self;
        }

        public sealed class Params_Deactivate
        {
            public FSMActivator self;
        }

        public sealed class Params_DeactivateStaggered
        {
            public FSMActivator self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Activate_BeforeArgs Activate
        {
            add
            {
                HookHandler._beforeActivate += value;
                HookHandler.HookActivate();
            }
            remove => HookHandler._beforeActivate -= value;
        }

        public static event Delegates.ActivateStaggered_BeforeArgs ActivateStaggered
        {
            add
            {
                HookHandler._beforeActivateStaggered += value;
                HookHandler.HookActivateStaggered();
            }
            remove => HookHandler._beforeActivateStaggered -= value;
        }

        public static event Delegates.Deactivate_BeforeArgs Deactivate
        {
            add
            {
                HookHandler._beforeDeactivate += value;
                HookHandler.HookDeactivate();
            }
            remove => HookHandler._beforeDeactivate -= value;
        }

        public static event Delegates.DeactivateStaggered_BeforeArgs DeactivateStaggered
        {
            add
            {
                HookHandler._beforeDeactivateStaggered += value;
                HookHandler.HookDeactivateStaggered();
            }
            remove => HookHandler._beforeDeactivateStaggered -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Activate_NormalArgs Activate
        {
            add
            {
                HookHandler._afterActivate += value;
                HookHandler.HookActivate();
            }
            remove => HookHandler._afterActivate -= value;
        }

        public static event Delegates.Deactivate_NormalArgs Deactivate
        {
            add
            {
                HookHandler._afterDeactivate += value;
                HookHandler.HookDeactivate();
            }
            remove => HookHandler._afterDeactivate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.FSMActivator.hook_Awake Awake
        {
            add => On.FSMActivator.Awake += value;
            remove => On.FSMActivator.Awake -= value;
        }

        public static event On.FSMActivator.hook_Activate Activate
        {
            add => On.FSMActivator.Activate += value;
            remove => On.FSMActivator.Activate -= value;
        }

        public static event On.FSMActivator.hook_ActivateStaggered ActivateStaggered
        {
            add => On.FSMActivator.ActivateStaggered += value;
            remove => On.FSMActivator.ActivateStaggered -= value;
        }

        public static event On.FSMActivator.hook_Deactivate Deactivate
        {
            add => On.FSMActivator.Deactivate += value;
            remove => On.FSMActivator.Deactivate -= value;
        }

        public static event On.FSMActivator.hook_DeactivateStaggered DeactivateStaggered
        {
            add => On.FSMActivator.DeactivateStaggered += value;
            remove => On.FSMActivator.DeactivateStaggered -= value;
        }
    }
}