using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using tk2dRuntime.TileMap;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BuilderUtil class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBuilderUtil
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookInitDataStore()
        {
            if (!HookedList.Contains("InitDataStore"))
            {
                HookedList.Add("InitDataStore");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "InitDataStore", false), InitDataStore);
            }
        }

        internal static event Delegates.InitDataStore_BeforeArgs _beforeInitDataStore;
        internal static event Delegates.InitDataStore_AfterArgs _afterInitDataStore;

        private static bool InitDataStore(Func<tk2dTileMap, bool> orig, tk2dTileMap tileMap)
        {
            Delegates.Params_InitDataStore @params = new()
            {
                tileMap = tileMap
            };
            if (_beforeInitDataStore != null)
                foreach (Delegates.InitDataStore_BeforeArgs toInvoke in _beforeInitDataStore.GetInvocationList())
                    try
                    {
                        _beforeInitDataStore?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            var retVal = orig(tileMap);
            if (_afterInitDataStore != null)
                foreach (Delegates.InitDataStore_AfterArgs toInvoke in _afterInitDataStore.GetInvocationList())
                    try
                    {
                        retVal = _afterInitDataStore.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetExistingTilePrefabInstance()
        {
            if (!HookedList.Contains("GetExistingTilePrefabInstance"))
            {
                HookedList.Add("GetExistingTilePrefabInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetExistingTilePrefabInstance", false),
                    GetExistingTilePrefabInstance);
            }
        }

        internal static event Delegates.GetExistingTilePrefabInstance_BeforeArgs _beforeGetExistingTilePrefabInstance;
        internal static event Delegates.GetExistingTilePrefabInstance_AfterArgs _afterGetExistingTilePrefabInstance;

        private static GameObject GetExistingTilePrefabInstance(Func<tk2dTileMap, int, int, int, GameObject> orig,
            tk2dTileMap tileMap, int tileX, int tileY, int tileLayer)
        {
            Delegates.Params_GetExistingTilePrefabInstance @params = new()
            {
                tileMap = tileMap, tileX = tileX, tileY = tileY, tileLayer = tileLayer
            };
            if (_beforeGetExistingTilePrefabInstance != null)
                foreach (Delegates.GetExistingTilePrefabInstance_BeforeArgs toInvoke in
                         _beforeGetExistingTilePrefabInstance.GetInvocationList())
                    try
                    {
                        _beforeGetExistingTilePrefabInstance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            tileX = @params.tileX;
            tileY = @params.tileY;
            tileLayer = @params.tileLayer;
            var retVal = orig(tileMap, tileX, tileY, tileLayer);
            if (_afterGetExistingTilePrefabInstance != null)
                foreach (Delegates.GetExistingTilePrefabInstance_AfterArgs toInvoke in
                         _afterGetExistingTilePrefabInstance.GetInvocationList())
                    try
                    {
                        retVal = _afterGetExistingTilePrefabInstance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSpawnPrefabsForChunk()
        {
            if (!HookedList.Contains("SpawnPrefabsForChunk"))
            {
                HookedList.Add("SpawnPrefabsForChunk");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SpawnPrefabsForChunk", false),
                    SpawnPrefabsForChunk);
            }
        }

        internal static event Delegates.SpawnPrefabsForChunk_BeforeArgs _beforeSpawnPrefabsForChunk;
        internal static event Delegates.SpawnPrefabsForChunk_AfterArgs _afterSpawnPrefabsForChunk;

        private static void SpawnPrefabsForChunk(Action<tk2dTileMap, SpriteChunk, int, int, int, int[]> orig,
            tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY, int layer, int[] prefabCounts)
        {
            Delegates.Params_SpawnPrefabsForChunk @params = new()
            {
                tileMap = tileMap, chunk = chunk, baseX = baseX, baseY = baseY, layer = layer,
                prefabCounts = prefabCounts
            };
            if (_beforeSpawnPrefabsForChunk != null)
                foreach (Delegates.SpawnPrefabsForChunk_BeforeArgs toInvoke in _beforeSpawnPrefabsForChunk
                             .GetInvocationList())
                    try
                    {
                        _beforeSpawnPrefabsForChunk?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            chunk = @params.chunk;
            baseX = @params.baseX;
            baseY = @params.baseY;
            layer = @params.layer;
            prefabCounts = @params.prefabCounts;
            orig(tileMap, chunk, baseX, baseY, layer, prefabCounts);
            if (_afterSpawnPrefabsForChunk != null)
                foreach (Delegates.SpawnPrefabsForChunk_AfterArgs toInvoke in _afterSpawnPrefabsForChunk
                             .GetInvocationList())
                    try
                    {
                        _afterSpawnPrefabsForChunk.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSpawnPrefabs()
        {
            if (!HookedList.Contains("SpawnPrefabs"))
            {
                HookedList.Add("SpawnPrefabs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SpawnPrefabs", false), SpawnPrefabs);
            }
        }

        internal static event Delegates.SpawnPrefabs_BeforeArgs _beforeSpawnPrefabs;
        internal static event Delegates.SpawnPrefabs_AfterArgs _afterSpawnPrefabs;

        private static void SpawnPrefabs(Action<tk2dTileMap, bool> orig, tk2dTileMap tileMap, bool forceBuild)
        {
            Delegates.Params_SpawnPrefabs @params = new()
            {
                tileMap = tileMap, forceBuild = forceBuild
            };
            if (_beforeSpawnPrefabs != null)
                foreach (Delegates.SpawnPrefabs_BeforeArgs toInvoke in _beforeSpawnPrefabs.GetInvocationList())
                    try
                    {
                        _beforeSpawnPrefabs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            forceBuild = @params.forceBuild;
            orig(tileMap, forceBuild);
            if (_afterSpawnPrefabs != null)
                foreach (Delegates.SpawnPrefabs_AfterArgs toInvoke in _afterSpawnPrefabs.GetInvocationList())
                    try
                    {
                        _afterSpawnPrefabs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHideTileMapPrefabs()
        {
            if (!HookedList.Contains("HideTileMapPrefabs"))
            {
                HookedList.Add("HideTileMapPrefabs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "HideTileMapPrefabs", false),
                    HideTileMapPrefabs);
            }
        }

        internal static event Delegates.HideTileMapPrefabs_BeforeArgs _beforeHideTileMapPrefabs;
        internal static event Delegates.HideTileMapPrefabs_AfterArgs _afterHideTileMapPrefabs;

        private static void HideTileMapPrefabs(Action<tk2dTileMap> orig, tk2dTileMap tileMap)
        {
            Delegates.Params_HideTileMapPrefabs @params = new()
            {
                tileMap = tileMap
            };
            if (_beforeHideTileMapPrefabs != null)
                foreach (Delegates.HideTileMapPrefabs_BeforeArgs toInvoke in
                         _beforeHideTileMapPrefabs.GetInvocationList())
                    try
                    {
                        _beforeHideTileMapPrefabs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            orig(tileMap);
            if (_afterHideTileMapPrefabs != null)
                foreach (Delegates.HideTileMapPrefabs_AfterArgs toInvoke in
                         _afterHideTileMapPrefabs.GetInvocationList())
                    try
                    {
                        _afterHideTileMapPrefabs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetTilePosition()
        {
            if (!HookedList.Contains("GetTilePosition"))
            {
                HookedList.Add("GetTilePosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetTilePosition", false),
                    GetTilePosition);
            }
        }

        internal static event Delegates.GetTilePosition_BeforeArgs _beforeGetTilePosition;
        internal static event Delegates.GetTilePosition_AfterArgs _afterGetTilePosition;

        private static Vector3 GetTilePosition(Func<tk2dTileMap, int, int, Vector3> orig, tk2dTileMap tileMap, int x,
            int y)
        {
            Delegates.Params_GetTilePosition @params = new()
            {
                tileMap = tileMap, x = x, y = y
            };
            if (_beforeGetTilePosition != null)
                foreach (Delegates.GetTilePosition_BeforeArgs toInvoke in _beforeGetTilePosition.GetInvocationList())
                    try
                    {
                        _beforeGetTilePosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            x = @params.x;
            y = @params.y;
            var retVal = orig(tileMap, x, y);
            if (_afterGetTilePosition != null)
                foreach (Delegates.GetTilePosition_AfterArgs toInvoke in _afterGetTilePosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTilePosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateRenderData()
        {
            if (!HookedList.Contains("CreateRenderData"))
            {
                HookedList.Add("CreateRenderData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "CreateRenderData", false),
                    CreateRenderData);
            }
        }

        internal static event Delegates.CreateRenderData_BeforeArgs _beforeCreateRenderData;
        internal static event Delegates.CreateRenderData_AfterArgs _afterCreateRenderData;

        private static void CreateRenderData(Action<tk2dTileMap, bool, Dictionary<Layer, bool>> orig,
            tk2dTileMap tileMap, bool editMode, Dictionary<Layer, bool> layersActive)
        {
            Delegates.Params_CreateRenderData @params = new()
            {
                tileMap = tileMap, editMode = editMode, layersActive = layersActive
            };
            if (_beforeCreateRenderData != null)
                foreach (Delegates.CreateRenderData_BeforeArgs toInvoke in _beforeCreateRenderData.GetInvocationList())
                    try
                    {
                        _beforeCreateRenderData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            editMode = @params.editMode;
            layersActive = @params.layersActive;
            orig(tileMap, editMode, layersActive);
            if (_afterCreateRenderData != null)
                foreach (Delegates.CreateRenderData_AfterArgs toInvoke in _afterCreateRenderData.GetInvocationList())
                    try
                    {
                        _afterCreateRenderData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetTileFromRawTile()
        {
            if (!HookedList.Contains("GetTileFromRawTile"))
            {
                HookedList.Add("GetTileFromRawTile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetTileFromRawTile", false),
                    GetTileFromRawTile);
            }
        }

        internal static event Delegates.GetTileFromRawTile_BeforeArgs _beforeGetTileFromRawTile;
        internal static event Delegates.GetTileFromRawTile_AfterArgs _afterGetTileFromRawTile;

        private static int GetTileFromRawTile(Func<int, int> orig, int rawTile)
        {
            Delegates.Params_GetTileFromRawTile @params = new()
            {
                rawTile = rawTile
            };
            if (_beforeGetTileFromRawTile != null)
                foreach (Delegates.GetTileFromRawTile_BeforeArgs toInvoke in
                         _beforeGetTileFromRawTile.GetInvocationList())
                    try
                    {
                        _beforeGetTileFromRawTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rawTile = @params.rawTile;
            var retVal = orig(rawTile);
            if (_afterGetTileFromRawTile != null)
                foreach (Delegates.GetTileFromRawTile_AfterArgs toInvoke in
                         _afterGetTileFromRawTile.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTileFromRawTile.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsRawTileFlagSet()
        {
            if (!HookedList.Contains("IsRawTileFlagSet"))
            {
                HookedList.Add("IsRawTileFlagSet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "IsRawTileFlagSet", false),
                    IsRawTileFlagSet);
            }
        }

        internal static event Delegates.IsRawTileFlagSet_BeforeArgs _beforeIsRawTileFlagSet;
        internal static event Delegates.IsRawTileFlagSet_AfterArgs _afterIsRawTileFlagSet;

        private static bool IsRawTileFlagSet(Func<int, tk2dTileFlags, bool> orig, int rawTile, tk2dTileFlags flag)
        {
            Delegates.Params_IsRawTileFlagSet @params = new()
            {
                rawTile = rawTile, flag = flag
            };
            if (_beforeIsRawTileFlagSet != null)
                foreach (Delegates.IsRawTileFlagSet_BeforeArgs toInvoke in _beforeIsRawTileFlagSet.GetInvocationList())
                    try
                    {
                        _beforeIsRawTileFlagSet?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rawTile = @params.rawTile;
            flag = @params.flag;
            var retVal = orig(rawTile, flag);
            if (_afterIsRawTileFlagSet != null)
                foreach (Delegates.IsRawTileFlagSet_AfterArgs toInvoke in _afterIsRawTileFlagSet.GetInvocationList())
                    try
                    {
                        retVal = _afterIsRawTileFlagSet.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetRawTileFlag()
        {
            if (!HookedList.Contains("SetRawTileFlag"))
            {
                HookedList.Add("SetRawTileFlag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SetRawTileFlag", false), SetRawTileFlag);
            }
        }

        internal static event Delegates.SetRawTileFlag_BeforeArgs _beforeSetRawTileFlag;
        internal static event Delegates.SetRawTileFlag_AfterArgs _afterSetRawTileFlag;

        private static void SetRawTileFlag(Action<int, tk2dTileFlags, bool> orig, int rawTile, tk2dTileFlags flag,
            bool setValue)
        {
            Delegates.Params_SetRawTileFlag @params = new()
            {
                rawTile = rawTile, flag = flag, setValue = setValue
            };
            if (_beforeSetRawTileFlag != null)
                foreach (Delegates.SetRawTileFlag_BeforeArgs toInvoke in _beforeSetRawTileFlag.GetInvocationList())
                    try
                    {
                        _beforeSetRawTileFlag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rawTile = @params.rawTile;
            flag = @params.flag;
            setValue = @params.setValue;
            orig(rawTile, flag, setValue);
            if (_afterSetRawTileFlag != null)
                foreach (Delegates.SetRawTileFlag_AfterArgs toInvoke in _afterSetRawTileFlag.GetInvocationList())
                    try
                    {
                        _afterSetRawTileFlag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInvertRawTileFlag()
        {
            if (!HookedList.Contains("InvertRawTileFlag"))
            {
                HookedList.Add("InvertRawTileFlag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "InvertRawTileFlag", false),
                    InvertRawTileFlag);
            }
        }

        internal static event Delegates.InvertRawTileFlag_BeforeArgs _beforeInvertRawTileFlag;
        internal static event Delegates.InvertRawTileFlag_AfterArgs _afterInvertRawTileFlag;

        private static void InvertRawTileFlag(Action<int, tk2dTileFlags> orig, int rawTile, tk2dTileFlags flag)
        {
            Delegates.Params_InvertRawTileFlag @params = new()
            {
                rawTile = rawTile, flag = flag
            };
            if (_beforeInvertRawTileFlag != null)
                foreach (Delegates.InvertRawTileFlag_BeforeArgs toInvoke in
                         _beforeInvertRawTileFlag.GetInvocationList())
                    try
                    {
                        _beforeInvertRawTileFlag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rawTile = @params.rawTile;
            flag = @params.flag;
            orig(rawTile, flag);
            if (_afterInvertRawTileFlag != null)
                foreach (Delegates.InvertRawTileFlag_AfterArgs toInvoke in _afterInvertRawTileFlag.GetInvocationList())
                    try
                    {
                        _afterInvertRawTileFlag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool()
        {
            if (!HookedList.Contains(
                    "ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool"))
            {
                HookedList.Add("ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BuilderUtil),
                        "ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool", false),
                    ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool);
            }
        }

        internal static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_BeforeArgs
            _beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool;

        internal static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_AfterArgs
            _afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool;

        private static Vector3 ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool(
            Func<tk2dTileMap, tk2dSpriteDefinition, Vector3, bool, bool, bool, Vector3> orig, tk2dTileMap tileMap,
            tk2dSpriteDefinition spriteDef, Vector3 pos, bool flipH, bool flipV, bool rot90)
        {
            Delegates.Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
                @params = new()
                {
                    tileMap = tileMap, spriteDef = spriteDef, pos = pos, flipH = flipH, flipV = flipV, rot90 = rot90
                };
            if (_beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool != null)
                foreach
                    (Delegates.
                         ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_BeforeArgs
                         toInvoke in
                     _beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
                         .GetInvocationList())
                    try
                    {
                        _beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
                            ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            spriteDef = @params.spriteDef;
            pos = @params.pos;
            flipH = @params.flipH;
            flipV = @params.flipV;
            rot90 = @params.rot90;
            var retVal = orig(tileMap, spriteDef, pos, flipH, flipV, rot90);
            if (_afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool != null)
                foreach
                    (Delegates.
                         ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_AfterArgs
                         toInvoke in
                     _afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
                         .GetInvocationList())
                    try
                    {
                        retVal =
                            _afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
                                .Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool()
        {
            if (!HookedList.Contains(
                    "ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool"))
            {
                HookedList.Add("ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BuilderUtil),
                        "ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool", false),
                    ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool);
            }
        }

        internal static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_BeforeArgs
            _beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool;

        internal static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_AfterArgs
            _afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool;

        private static Vector2 ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool(
            Func<tk2dTileMap, tk2dSpriteDefinition, Vector2, bool, bool, bool, Vector2> orig, tk2dTileMap tileMap,
            tk2dSpriteDefinition spriteDef, Vector2 pos, bool flipH, bool flipV, bool rot90)
        {
            Delegates.Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
                @params = new()
                {
                    tileMap = tileMap, spriteDef = spriteDef, pos = pos, flipH = flipH, flipV = flipV, rot90 = rot90
                };
            if (_beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool != null)
                foreach
                    (Delegates.
                         ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_BeforeArgs
                         toInvoke in
                     _beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
                         .GetInvocationList())
                    try
                    {
                        _beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
                            ?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            tileMap = @params.tileMap;
            spriteDef = @params.spriteDef;
            pos = @params.pos;
            flipH = @params.flipH;
            flipV = @params.flipV;
            rot90 = @params.rot90;
            var retVal = orig(tileMap, spriteDef, pos, flipH, flipV, rot90);
            if (_afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool != null)
                foreach
                    (Delegates.
                         ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_AfterArgs
                         toInvoke in
                     _afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
                         .GetInvocationList())
                    try
                    {
                        retVal =
                            _afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
                                .Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate Vector2
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_AfterArgs(
                Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool args,
                Vector2 ret);

        public delegate void
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_BeforeArgs(
                Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool args);

        public delegate Vector2
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_WithArgs(
                Func<tk2dTileMap, tk2dSpriteDefinition, Vector2, bool, bool, bool, Vector2> orig, tk2dTileMap tileMap,
                tk2dSpriteDefinition spriteDef, Vector2 pos, bool flipH, bool flipV, bool rot90);

        public delegate Vector3
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_AfterArgs(
                Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool args,
                Vector3 ret);

        public delegate void
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_BeforeArgs(
                Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool args);

        public delegate Vector3
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_WithArgs(
                Func<tk2dTileMap, tk2dSpriteDefinition, Vector3, bool, bool, bool, Vector3> orig, tk2dTileMap tileMap,
                tk2dSpriteDefinition spriteDef, Vector3 pos, bool flipH, bool flipV, bool rot90);

        public delegate void CreateRenderData_AfterArgs(Params_CreateRenderData args);

        public delegate void CreateRenderData_BeforeArgs(Params_CreateRenderData args);

        public delegate void CreateRenderData_WithArgs(Action<tk2dTileMap, bool, Dictionary<Layer, bool>> orig,
            tk2dTileMap tileMap, bool editMode, Dictionary<Layer, bool> layersActive);

        public delegate GameObject GetExistingTilePrefabInstance_AfterArgs(Params_GetExistingTilePrefabInstance args,
            GameObject ret);

        public delegate void GetExistingTilePrefabInstance_BeforeArgs(Params_GetExistingTilePrefabInstance args);

        public delegate GameObject GetExistingTilePrefabInstance_WithArgs(
            Func<tk2dTileMap, int, int, int, GameObject> orig, tk2dTileMap tileMap, int tileX, int tileY,
            int tileLayer);

        public delegate int GetTileFromRawTile_AfterArgs(Params_GetTileFromRawTile args, int ret);

        public delegate void GetTileFromRawTile_BeforeArgs(Params_GetTileFromRawTile args);

        public delegate int GetTileFromRawTile_WithArgs(Func<int, int> orig, int rawTile);

        public delegate Vector3 GetTilePosition_AfterArgs(Params_GetTilePosition args, Vector3 ret);

        public delegate void GetTilePosition_BeforeArgs(Params_GetTilePosition args);

        public delegate Vector3 GetTilePosition_WithArgs(Func<tk2dTileMap, int, int, Vector3> orig, tk2dTileMap tileMap,
            int x, int y);

        public delegate void HideTileMapPrefabs_AfterArgs(Params_HideTileMapPrefabs args);

        public delegate void HideTileMapPrefabs_BeforeArgs(Params_HideTileMapPrefabs args);

        public delegate void HideTileMapPrefabs_WithArgs(Action<tk2dTileMap> orig, tk2dTileMap tileMap);

        public delegate bool InitDataStore_AfterArgs(Params_InitDataStore args, bool ret);

        public delegate void InitDataStore_BeforeArgs(Params_InitDataStore args);

        public delegate bool InitDataStore_WithArgs(Func<tk2dTileMap, bool> orig, tk2dTileMap tileMap);

        public delegate void InvertRawTileFlag_AfterArgs(Params_InvertRawTileFlag args);

        public delegate void InvertRawTileFlag_BeforeArgs(Params_InvertRawTileFlag args);

        public delegate void InvertRawTileFlag_WithArgs(Action<int, tk2dTileFlags> orig, int rawTile,
            tk2dTileFlags flag);

        public delegate bool IsRawTileFlagSet_AfterArgs(Params_IsRawTileFlagSet args, bool ret);

        public delegate void IsRawTileFlagSet_BeforeArgs(Params_IsRawTileFlagSet args);

        public delegate bool IsRawTileFlagSet_WithArgs(Func<int, tk2dTileFlags, bool> orig, int rawTile,
            tk2dTileFlags flag);

        public delegate void SetRawTileFlag_AfterArgs(Params_SetRawTileFlag args);

        public delegate void SetRawTileFlag_BeforeArgs(Params_SetRawTileFlag args);

        public delegate void SetRawTileFlag_WithArgs(Action<int, tk2dTileFlags, bool> orig, int rawTile,
            tk2dTileFlags flag, bool setValue);

        public delegate void SpawnPrefabs_AfterArgs(Params_SpawnPrefabs args);

        public delegate void SpawnPrefabs_BeforeArgs(Params_SpawnPrefabs args);

        public delegate void SpawnPrefabs_WithArgs(Action<tk2dTileMap, bool> orig, tk2dTileMap tileMap,
            bool forceBuild);

        public delegate void SpawnPrefabsForChunk_AfterArgs(Params_SpawnPrefabsForChunk args);

        public delegate void SpawnPrefabsForChunk_BeforeArgs(Params_SpawnPrefabsForChunk args);

        public delegate void SpawnPrefabsForChunk_WithArgs(Action<tk2dTileMap, SpriteChunk, int, int, int, int[]> orig,
            tk2dTileMap tileMap, SpriteChunk chunk, int baseX, int baseY, int layer, int[] prefabCounts);

        public sealed class Params_InitDataStore
        {
            public tk2dTileMap tileMap;
        }

        public sealed class Params_GetExistingTilePrefabInstance
        {
            public int tileLayer;
            public tk2dTileMap tileMap;
            public int tileX;
            public int tileY;
        }

        public sealed class Params_SpawnPrefabsForChunk
        {
            public int baseX;
            public int baseY;
            public SpriteChunk chunk;
            public int layer;
            public int[] prefabCounts;
            public tk2dTileMap tileMap;
        }

        public sealed class Params_SpawnPrefabs
        {
            public bool forceBuild;
            public tk2dTileMap tileMap;
        }

        public sealed class Params_HideTileMapPrefabs
        {
            public tk2dTileMap tileMap;
        }

        public sealed class Params_GetTilePosition
        {
            public tk2dTileMap tileMap;
            public int x;
            public int y;
        }

        public sealed class Params_CreateRenderData
        {
            public bool editMode;
            public Dictionary<Layer, bool> layersActive;
            public tk2dTileMap tileMap;
        }

        public sealed class Params_GetTileFromRawTile
        {
            public int rawTile;
        }

        public sealed class Params_IsRawTileFlagSet
        {
            public tk2dTileFlags flag;
            public int rawTile;
        }

        public sealed class Params_SetRawTileFlag
        {
            public tk2dTileFlags flag;
            public int rawTile;
            public bool setValue;
        }

        public sealed class Params_InvertRawTileFlag
        {
            public tk2dTileFlags flag;
            public int rawTile;
        }

        public sealed class Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
        {
            public bool flipH;
            public bool flipV;
            public Vector3 pos;
            public bool rot90;
            public tk2dSpriteDefinition spriteDef;
            public tk2dTileMap tileMap;
        }

        public sealed class Params_ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
        {
            public bool flipH;
            public bool flipV;
            public Vector2 pos;
            public bool rot90;
            public tk2dSpriteDefinition spriteDef;
            public tk2dTileMap tileMap;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.InitDataStore_BeforeArgs InitDataStore
        {
            add
            {
                HookHandler._beforeInitDataStore += value;
                HookHandler.HookInitDataStore();
            }
            remove => HookHandler._beforeInitDataStore -= value;
        }

        public static event Delegates.GetExistingTilePrefabInstance_BeforeArgs GetExistingTilePrefabInstance
        {
            add
            {
                HookHandler._beforeGetExistingTilePrefabInstance += value;
                HookHandler.HookGetExistingTilePrefabInstance();
            }
            remove => HookHandler._beforeGetExistingTilePrefabInstance -= value;
        }

        public static event Delegates.SpawnPrefabsForChunk_BeforeArgs SpawnPrefabsForChunk
        {
            add
            {
                HookHandler._beforeSpawnPrefabsForChunk += value;
                HookHandler.HookSpawnPrefabsForChunk();
            }
            remove => HookHandler._beforeSpawnPrefabsForChunk -= value;
        }

        public static event Delegates.SpawnPrefabs_BeforeArgs SpawnPrefabs
        {
            add
            {
                HookHandler._beforeSpawnPrefabs += value;
                HookHandler.HookSpawnPrefabs();
            }
            remove => HookHandler._beforeSpawnPrefabs -= value;
        }

        public static event Delegates.HideTileMapPrefabs_BeforeArgs HideTileMapPrefabs
        {
            add
            {
                HookHandler._beforeHideTileMapPrefabs += value;
                HookHandler.HookHideTileMapPrefabs();
            }
            remove => HookHandler._beforeHideTileMapPrefabs -= value;
        }

        public static event Delegates.GetTilePosition_BeforeArgs GetTilePosition
        {
            add
            {
                HookHandler._beforeGetTilePosition += value;
                HookHandler.HookGetTilePosition();
            }
            remove => HookHandler._beforeGetTilePosition -= value;
        }

        public static event Delegates.CreateRenderData_BeforeArgs CreateRenderData
        {
            add
            {
                HookHandler._beforeCreateRenderData += value;
                HookHandler.HookCreateRenderData();
            }
            remove => HookHandler._beforeCreateRenderData -= value;
        }

        public static event Delegates.GetTileFromRawTile_BeforeArgs GetTileFromRawTile
        {
            add
            {
                HookHandler._beforeGetTileFromRawTile += value;
                HookHandler.HookGetTileFromRawTile();
            }
            remove => HookHandler._beforeGetTileFromRawTile -= value;
        }

        public static event Delegates.IsRawTileFlagSet_BeforeArgs IsRawTileFlagSet
        {
            add
            {
                HookHandler._beforeIsRawTileFlagSet += value;
                HookHandler.HookIsRawTileFlagSet();
            }
            remove => HookHandler._beforeIsRawTileFlagSet -= value;
        }

        public static event Delegates.SetRawTileFlag_BeforeArgs SetRawTileFlag
        {
            add
            {
                HookHandler._beforeSetRawTileFlag += value;
                HookHandler.HookSetRawTileFlag();
            }
            remove => HookHandler._beforeSetRawTileFlag -= value;
        }

        public static event Delegates.InvertRawTileFlag_BeforeArgs InvertRawTileFlag
        {
            add
            {
                HookHandler._beforeInvertRawTileFlag += value;
                HookHandler.HookInvertRawTileFlag();
            }
            remove => HookHandler._beforeInvertRawTileFlag -= value;
        }

        public static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_BeforeArgs
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
            {
                add
                {
                    HookHandler
                            ._beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool +=
                        value;
                    HookHandler
                        .HookApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool();
                }
                remove => HookHandler
                    ._beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool -= value;
            }

        public static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_BeforeArgs
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
            {
                add
                {
                    HookHandler
                            ._beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool +=
                        value;
                    HookHandler
                        .HookApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool();
                }
                remove => HookHandler
                    ._beforeApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.InitDataStore_AfterArgs InitDataStore
        {
            add
            {
                HookHandler._afterInitDataStore += value;
                HookHandler.HookInitDataStore();
            }
            remove => HookHandler._afterInitDataStore -= value;
        }

        public static event Delegates.GetExistingTilePrefabInstance_AfterArgs GetExistingTilePrefabInstance
        {
            add
            {
                HookHandler._afterGetExistingTilePrefabInstance += value;
                HookHandler.HookGetExistingTilePrefabInstance();
            }
            remove => HookHandler._afterGetExistingTilePrefabInstance -= value;
        }

        public static event Delegates.SpawnPrefabsForChunk_AfterArgs SpawnPrefabsForChunk
        {
            add
            {
                HookHandler._afterSpawnPrefabsForChunk += value;
                HookHandler.HookSpawnPrefabsForChunk();
            }
            remove => HookHandler._afterSpawnPrefabsForChunk -= value;
        }

        public static event Delegates.SpawnPrefabs_AfterArgs SpawnPrefabs
        {
            add
            {
                HookHandler._afterSpawnPrefabs += value;
                HookHandler.HookSpawnPrefabs();
            }
            remove => HookHandler._afterSpawnPrefabs -= value;
        }

        public static event Delegates.HideTileMapPrefabs_AfterArgs HideTileMapPrefabs
        {
            add
            {
                HookHandler._afterHideTileMapPrefabs += value;
                HookHandler.HookHideTileMapPrefabs();
            }
            remove => HookHandler._afterHideTileMapPrefabs -= value;
        }

        public static event Delegates.GetTilePosition_AfterArgs GetTilePosition
        {
            add
            {
                HookHandler._afterGetTilePosition += value;
                HookHandler.HookGetTilePosition();
            }
            remove => HookHandler._afterGetTilePosition -= value;
        }

        public static event Delegates.CreateRenderData_AfterArgs CreateRenderData
        {
            add
            {
                HookHandler._afterCreateRenderData += value;
                HookHandler.HookCreateRenderData();
            }
            remove => HookHandler._afterCreateRenderData -= value;
        }

        public static event Delegates.GetTileFromRawTile_AfterArgs GetTileFromRawTile
        {
            add
            {
                HookHandler._afterGetTileFromRawTile += value;
                HookHandler.HookGetTileFromRawTile();
            }
            remove => HookHandler._afterGetTileFromRawTile -= value;
        }

        public static event Delegates.IsRawTileFlagSet_AfterArgs IsRawTileFlagSet
        {
            add
            {
                HookHandler._afterIsRawTileFlagSet += value;
                HookHandler.HookIsRawTileFlagSet();
            }
            remove => HookHandler._afterIsRawTileFlagSet -= value;
        }

        public static event Delegates.SetRawTileFlag_AfterArgs SetRawTileFlag
        {
            add
            {
                HookHandler._afterSetRawTileFlag += value;
                HookHandler.HookSetRawTileFlag();
            }
            remove => HookHandler._afterSetRawTileFlag -= value;
        }

        public static event Delegates.InvertRawTileFlag_AfterArgs InvertRawTileFlag
        {
            add
            {
                HookHandler._afterInvertRawTileFlag += value;
                HookHandler.HookInvertRawTileFlag();
            }
            remove => HookHandler._afterInvertRawTileFlag -= value;
        }

        public static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_AfterArgs
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
            {
                add
                {
                    HookHandler
                            ._afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool +=
                        value;
                    HookHandler
                        .HookApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool();
                }
                remove => HookHandler
                    ._afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool -= value;
            }

        public static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_AfterArgs
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
            {
                add
                {
                    HookHandler
                            ._afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool +=
                        value;
                    HookHandler
                        .HookApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool();
                }
                remove => HookHandler
                    ._afterApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.InitDataStore_WithArgs InitDataStore
        {
            add => HookEndpointManager.Add<Delegates.InitDataStore_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "InitDataStore", false), value);
            remove => HookEndpointManager.Remove<Delegates.InitDataStore_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "InitDataStore", false), value);
        }

        public static event Delegates.GetExistingTilePrefabInstance_WithArgs GetExistingTilePrefabInstance
        {
            add => HookEndpointManager.Add<Delegates.GetExistingTilePrefabInstance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetExistingTilePrefabInstance", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetExistingTilePrefabInstance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetExistingTilePrefabInstance", false), value);
        }

        public static event Delegates.SpawnPrefabsForChunk_WithArgs SpawnPrefabsForChunk
        {
            add => HookEndpointManager.Add<Delegates.SpawnPrefabsForChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SpawnPrefabsForChunk", false), value);
            remove => HookEndpointManager.Remove<Delegates.SpawnPrefabsForChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SpawnPrefabsForChunk", false), value);
        }

        public static event Delegates.SpawnPrefabs_WithArgs SpawnPrefabs
        {
            add => HookEndpointManager.Add<Delegates.SpawnPrefabs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SpawnPrefabs", false), value);
            remove => HookEndpointManager.Remove<Delegates.SpawnPrefabs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SpawnPrefabs", false), value);
        }

        public static event Delegates.HideTileMapPrefabs_WithArgs HideTileMapPrefabs
        {
            add => HookEndpointManager.Add<Delegates.HideTileMapPrefabs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "HideTileMapPrefabs", false), value);
            remove => HookEndpointManager.Remove<Delegates.HideTileMapPrefabs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "HideTileMapPrefabs", false), value);
        }

        public static event Delegates.GetTilePosition_WithArgs GetTilePosition
        {
            add => HookEndpointManager.Add<Delegates.GetTilePosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetTilePosition", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetTilePosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetTilePosition", false), value);
        }

        public static event Delegates.CreateRenderData_WithArgs CreateRenderData
        {
            add => HookEndpointManager.Add<Delegates.CreateRenderData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "CreateRenderData", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateRenderData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "CreateRenderData", false), value);
        }

        public static event Delegates.GetTileFromRawTile_WithArgs GetTileFromRawTile
        {
            add => HookEndpointManager.Add<Delegates.GetTileFromRawTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetTileFromRawTile", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetTileFromRawTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "GetTileFromRawTile", false), value);
        }

        public static event Delegates.IsRawTileFlagSet_WithArgs IsRawTileFlagSet
        {
            add => HookEndpointManager.Add<Delegates.IsRawTileFlagSet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "IsRawTileFlagSet", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsRawTileFlagSet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "IsRawTileFlagSet", false), value);
        }

        public static event Delegates.SetRawTileFlag_WithArgs SetRawTileFlag
        {
            add => HookEndpointManager.Add<Delegates.SetRawTileFlag_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SetRawTileFlag", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetRawTileFlag_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "SetRawTileFlag", false), value);
        }

        public static event Delegates.InvertRawTileFlag_WithArgs InvertRawTileFlag
        {
            add => HookEndpointManager.Add<Delegates.InvertRawTileFlag_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "InvertRawTileFlag", false), value);
            remove => HookEndpointManager.Remove<Delegates.InvertRawTileFlag_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "InvertRawTileFlag", false), value);
        }

        public static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_WithArgs
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool
            {
                add => HookEndpointManager
                    .Add<Delegates.
                        ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "ApplySpriteVertexTileFlags", false),
                        value);
                remove =>
                    HookEndpointManager
                        .Remove<
                            Delegates.
                            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector3_bool_bool_bool_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "ApplySpriteVertexTileFlags", false),
                            value);
            }

        public static event
            Delegates.ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_WithArgs
            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool
            {
                add => HookEndpointManager
                    .Add<Delegates.
                        ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "ApplySpriteVertexTileFlags", false),
                        value);
                remove =>
                    HookEndpointManager
                        .Remove<
                            Delegates.
                            ApplySpriteVertexTileFlags_tk2dTileMap_tk2dSpriteDefinition_Vector2_bool_bool_bool_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(BuilderUtil), "ApplySpriteVertexTileFlags", false),
                            value);
            }
    }
}