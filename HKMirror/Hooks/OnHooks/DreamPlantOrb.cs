namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for DreamPlantOrb class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDreamPlantOrb
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.DreamPlantOrb.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.DreamPlantOrb.orig_Awake orig, DreamPlantOrb self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.DreamPlantOrb.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.DreamPlantOrb.orig_Start orig, DreamPlantOrb self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.DreamPlantOrb.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.DreamPlantOrb.orig_OnTriggerEnter2D orig, DreamPlantOrb self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShow()
        {
            if (!HookedList.Contains("Show"))
            {
                HookedList.Add("Show");
                On.DreamPlantOrb.Show += Show;
            }
        }

        internal static event Delegates.Show_BeforeArgs _beforeShow;
        internal static event Delegates.Show_AfterArgs _afterShow;

        private static void Show(On.DreamPlantOrb.orig_Show orig, DreamPlantOrb self)
        {
            Delegates.Params_Show @params = new()
            {
                self = self
            };
            if (_beforeShow != null)
                foreach (Delegates.Show_BeforeArgs toInvoke in _beforeShow.GetInvocationList())
                    try
                    {
                        _beforeShow?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShow != null)
                foreach (Delegates.Show_AfterArgs toInvoke in _afterShow.GetInvocationList())
                    try
                    {
                        _afterShow.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetActive()
        {
            if (!HookedList.Contains("SetActive"))
            {
                HookedList.Add("SetActive");
                On.DreamPlantOrb.SetActive += SetActive;
            }
        }

        internal static event Delegates.SetActive_BeforeArgs _beforeSetActive;
        internal static event Delegates.SetActive_AfterArgs _afterSetActive;

        private static void SetActive(On.DreamPlantOrb.orig_SetActive orig, DreamPlantOrb self, bool value)
        {
            Delegates.Params_SetActive @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetActive != null)
                foreach (Delegates.SetActive_BeforeArgs toInvoke in _beforeSetActive.GetInvocationList())
                    try
                    {
                        _beforeSetActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetActive != null)
                foreach (Delegates.SetActive_AfterArgs toInvoke in _afterSetActive.GetInvocationList())
                    try
                    {
                        _afterSetActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSpread()
        {
            if (!HookedList.Contains("Spread"))
            {
                HookedList.Add("Spread");
                On.DreamPlantOrb.Spread += Spread;
            }
        }

        internal static event Delegates.Spread_BeforeArgs _beforeSpread;

        private static IEnumerator Spread(On.DreamPlantOrb.orig_Spread orig, DreamPlantOrb self)
        {
            Delegates.Params_Spread @params = new()
            {
                self = self
            };
            if (_beforeSpread != null)
                foreach (Delegates.Spread_BeforeArgs toInvoke in _beforeSpread.GetInvocationList())
                    try
                    {
                        _beforeSpread?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookDisable()
        {
            if (!HookedList.Contains("Disable"))
            {
                HookedList.Add("Disable");
                On.DreamPlantOrb.Disable += Disable;
            }
        }

        internal static event Delegates.Disable_BeforeArgs _beforeDisable;
        internal static event Delegates.Disable_AfterArgs _afterDisable;

        private static void Disable(On.DreamPlantOrb.orig_Disable orig, DreamPlantOrb self)
        {
            Delegates.Params_Disable @params = new()
            {
                self = self
            };
            if (_beforeDisable != null)
                foreach (Delegates.Disable_BeforeArgs toInvoke in _beforeDisable.GetInvocationList())
                    try
                    {
                        _beforeDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDisable != null)
                foreach (Delegates.Disable_AfterArgs toInvoke in _afterDisable.GetInvocationList())
                    try
                    {
                        _afterDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDisableAfterTime()
        {
            if (!HookedList.Contains("DisableAfterTime"))
            {
                HookedList.Add("DisableAfterTime");
                On.DreamPlantOrb.DisableAfterTime += DisableAfterTime;
            }
        }

        internal static event Delegates.DisableAfterTime_BeforeArgs _beforeDisableAfterTime;

        private static IEnumerator DisableAfterTime(On.DreamPlantOrb.orig_DisableAfterTime orig, DreamPlantOrb self,
            GameObject obj, float time)
        {
            Delegates.Params_DisableAfterTime @params = new()
            {
                self = self, obj = obj, time = time
            };
            if (_beforeDisableAfterTime != null)
                foreach (Delegates.DisableAfterTime_BeforeArgs toInvoke in _beforeDisableAfterTime.GetInvocationList())
                    try
                    {
                        _beforeDisableAfterTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            obj = @params.obj;
            time = @params.time;
            return orig(self, obj, time);
        }

        internal static void HookTweenPosition()
        {
            if (!HookedList.Contains("TweenPosition"))
            {
                HookedList.Add("TweenPosition");
                On.DreamPlantOrb.TweenPosition += TweenPosition;
            }
        }

        internal static event Delegates.TweenPosition_BeforeArgs _beforeTweenPosition;

        private static IEnumerator TweenPosition(On.DreamPlantOrb.orig_TweenPosition orig, DreamPlantOrb self,
            Vector3 position, float time, AnimationCurve curve)
        {
            Delegates.Params_TweenPosition @params = new()
            {
                self = self, position = position, time = time, curve = curve
            };
            if (_beforeTweenPosition != null)
                foreach (Delegates.TweenPosition_BeforeArgs toInvoke in _beforeTweenPosition.GetInvocationList())
                    try
                    {
                        _beforeTweenPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            time = @params.time;
            curve = @params.curve;
            return orig(self, position, time, curve);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<DreamPlantOrb> orig, DreamPlantOrb self);

        public delegate void Disable_AfterArgs(Params_Disable args);

        public delegate void Disable_BeforeArgs(Params_Disable args);

        public delegate void Disable_WithArgs(Action<DreamPlantOrb> orig, DreamPlantOrb self);

        public delegate IEnumerator DisableAfterTime_AfterArgs(Params_DisableAfterTime args, IEnumerator ret);

        public delegate void DisableAfterTime_BeforeArgs(Params_DisableAfterTime args);

        public delegate IEnumerator DisableAfterTime_WithArgs(Func<DreamPlantOrb, GameObject, float, IEnumerator> orig,
            DreamPlantOrb self, GameObject obj, float time);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<DreamPlantOrb, Collider2D> orig, DreamPlantOrb self,
            Collider2D collision);

        public delegate void SetActive_AfterArgs(Params_SetActive args);

        public delegate void SetActive_BeforeArgs(Params_SetActive args);

        public delegate void SetActive_WithArgs(Action<DreamPlantOrb, bool> orig, DreamPlantOrb self, bool value);

        public delegate void Show_AfterArgs(Params_Show args);

        public delegate void Show_BeforeArgs(Params_Show args);

        public delegate void Show_WithArgs(Action<DreamPlantOrb> orig, DreamPlantOrb self);

        public delegate IEnumerator Spread_AfterArgs(Params_Spread args, IEnumerator ret);

        public delegate void Spread_BeforeArgs(Params_Spread args);

        public delegate IEnumerator Spread_WithArgs(Func<DreamPlantOrb, IEnumerator> orig, DreamPlantOrb self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<DreamPlantOrb> orig, DreamPlantOrb self);

        public delegate IEnumerator TweenPosition_AfterArgs(Params_TweenPosition args, IEnumerator ret);

        public delegate void TweenPosition_BeforeArgs(Params_TweenPosition args);

        public delegate IEnumerator TweenPosition_WithArgs(
            Func<DreamPlantOrb, Vector3, float, AnimationCurve, IEnumerator> orig, DreamPlantOrb self, Vector3 position,
            float time, AnimationCurve curve);

        public sealed class Params_Awake
        {
            public DreamPlantOrb self;
        }

        public sealed class Params_Start
        {
            public DreamPlantOrb self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public DreamPlantOrb self;
        }

        public sealed class Params_Show
        {
            public DreamPlantOrb self;
        }

        public sealed class Params_SetActive
        {
            public DreamPlantOrb self;
            public bool value;
        }

        public sealed class Params_Spread
        {
            public DreamPlantOrb self;
        }

        public sealed class Params_Disable
        {
            public DreamPlantOrb self;
        }

        public sealed class Params_DisableAfterTime
        {
            public GameObject obj;
            public DreamPlantOrb self;
            public float time;
        }

        public sealed class Params_TweenPosition
        {
            public AnimationCurve curve;
            public Vector3 position;
            public DreamPlantOrb self;
            public float time;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.Show_BeforeArgs Show
        {
            add
            {
                HookHandler._beforeShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._beforeShow -= value;
        }

        public static event Delegates.SetActive_BeforeArgs SetActive
        {
            add
            {
                HookHandler._beforeSetActive += value;
                HookHandler.HookSetActive();
            }
            remove => HookHandler._beforeSetActive -= value;
        }

        public static event Delegates.Spread_BeforeArgs Spread
        {
            add
            {
                HookHandler._beforeSpread += value;
                HookHandler.HookSpread();
            }
            remove => HookHandler._beforeSpread -= value;
        }

        public static event Delegates.Disable_BeforeArgs Disable
        {
            add
            {
                HookHandler._beforeDisable += value;
                HookHandler.HookDisable();
            }
            remove => HookHandler._beforeDisable -= value;
        }

        public static event Delegates.DisableAfterTime_BeforeArgs DisableAfterTime
        {
            add
            {
                HookHandler._beforeDisableAfterTime += value;
                HookHandler.HookDisableAfterTime();
            }
            remove => HookHandler._beforeDisableAfterTime -= value;
        }

        public static event Delegates.TweenPosition_BeforeArgs TweenPosition
        {
            add
            {
                HookHandler._beforeTweenPosition += value;
                HookHandler.HookTweenPosition();
            }
            remove => HookHandler._beforeTweenPosition -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.Show_AfterArgs Show
        {
            add
            {
                HookHandler._afterShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._afterShow -= value;
        }

        public static event Delegates.SetActive_AfterArgs SetActive
        {
            add
            {
                HookHandler._afterSetActive += value;
                HookHandler.HookSetActive();
            }
            remove => HookHandler._afterSetActive -= value;
        }

        public static event Delegates.Disable_AfterArgs Disable
        {
            add
            {
                HookHandler._afterDisable += value;
                HookHandler.HookDisable();
            }
            remove => HookHandler._afterDisable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.DreamPlantOrb.hook_Awake Awake
        {
            add => On.DreamPlantOrb.Awake += value;
            remove => On.DreamPlantOrb.Awake -= value;
        }

        public static event On.DreamPlantOrb.hook_Start Start
        {
            add => On.DreamPlantOrb.Start += value;
            remove => On.DreamPlantOrb.Start -= value;
        }

        public static event On.DreamPlantOrb.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.DreamPlantOrb.OnTriggerEnter2D += value;
            remove => On.DreamPlantOrb.OnTriggerEnter2D -= value;
        }

        public static event On.DreamPlantOrb.hook_Show Show
        {
            add => On.DreamPlantOrb.Show += value;
            remove => On.DreamPlantOrb.Show -= value;
        }

        public static event On.DreamPlantOrb.hook_SetActive SetActive
        {
            add => On.DreamPlantOrb.SetActive += value;
            remove => On.DreamPlantOrb.SetActive -= value;
        }

        public static event On.DreamPlantOrb.hook_Spread Spread
        {
            add => On.DreamPlantOrb.Spread += value;
            remove => On.DreamPlantOrb.Spread -= value;
        }

        public static event On.DreamPlantOrb.hook_Disable Disable
        {
            add => On.DreamPlantOrb.Disable += value;
            remove => On.DreamPlantOrb.Disable -= value;
        }

        public static event On.DreamPlantOrb.hook_DisableAfterTime DisableAfterTime
        {
            add => On.DreamPlantOrb.DisableAfterTime += value;
            remove => On.DreamPlantOrb.DisableAfterTime -= value;
        }

        public static event On.DreamPlantOrb.hook_TweenPosition TweenPosition
        {
            add => On.DreamPlantOrb.TweenPosition += value;
            remove => On.DreamPlantOrb.TweenPosition -= value;
        }
    }
}