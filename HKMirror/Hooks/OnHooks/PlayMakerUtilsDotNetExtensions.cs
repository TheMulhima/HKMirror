namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerUtilsDotNetExtensions class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerUtilsDotNetExtensions
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookContains()
        {
            if (!HookedList.Contains("Contains"))
            {
                HookedList.Add("Contains");
                On.PlayMakerUtilsDotNetExtensions.Contains += Contains;
            }
        }

        internal static event Delegates.Contains_BeforeArgs _beforeContains;
        internal static event Delegates.Contains_AfterArgs _afterContains;

        private static bool Contains(On.PlayMakerUtilsDotNetExtensions.orig_Contains orig, VariableType[] target,
            VariableType vType)
        {
            Delegates.Params_Contains @params = new()
            {
                target = target, vType = vType
            };
            if (_beforeContains != null)
                foreach (Delegates.Contains_BeforeArgs toInvoke in _beforeContains.GetInvocationList())
                    try
                    {
                        _beforeContains?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            vType = @params.vType;
            var retVal = orig(target, vType);
            if (_afterContains != null)
                foreach (Delegates.Contains_AfterArgs toInvoke in _afterContains.GetInvocationList())
                    try
                    {
                        retVal = _afterContains.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool Contains_AfterArgs(Params_Contains args, bool ret);

        public delegate void Contains_BeforeArgs(Params_Contains args);

        public delegate bool Contains_WithArgs(Func<VariableType[], VariableType, bool> orig, VariableType[] target,
            VariableType vType);

        public sealed class Params_Contains
        {
            public VariableType[] target;
            public VariableType vType;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Contains_BeforeArgs Contains
        {
            add
            {
                HookHandler._beforeContains += value;
                HookHandler.HookContains();
            }
            remove => HookHandler._beforeContains -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Contains_AfterArgs Contains
        {
            add
            {
                HookHandler._afterContains += value;
                HookHandler.HookContains();
            }
            remove => HookHandler._afterContains -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerUtilsDotNetExtensions.hook_Contains Contains
        {
            add => On.PlayMakerUtilsDotNetExtensions.Contains += value;
            remove => On.PlayMakerUtilsDotNetExtensions.Contains -= value;
        }
    }
}