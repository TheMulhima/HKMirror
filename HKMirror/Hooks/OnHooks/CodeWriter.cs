using InControl.Internal;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CodeWriter class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCodeWriter
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookIncreaseIndent()
        {
            if (!HookedList.Contains("IncreaseIndent"))
            {
                HookedList.Add("IncreaseIndent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "IncreaseIndent"), IncreaseIndent);
            }
        }

        internal static event Delegates.IncreaseIndent_BeforeArgs _beforeIncreaseIndent;
        internal static event Delegates.IncreaseIndent_NormalArgs _afterIncreaseIndent;

        private static void IncreaseIndent(Action<CodeWriter> orig, CodeWriter self)
        {
            Delegates.Params_IncreaseIndent @params = new()
            {
                self = self
            };
            _beforeIncreaseIndent?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterIncreaseIndent != null) _afterIncreaseIndent.Invoke(@params);
        }

        internal static void HookDecreaseIndent()
        {
            if (!HookedList.Contains("DecreaseIndent"))
            {
                HookedList.Add("DecreaseIndent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "DecreaseIndent"), DecreaseIndent);
            }
        }

        internal static event Delegates.DecreaseIndent_BeforeArgs _beforeDecreaseIndent;
        internal static event Delegates.DecreaseIndent_NormalArgs _afterDecreaseIndent;

        private static void DecreaseIndent(Action<CodeWriter> orig, CodeWriter self)
        {
            Delegates.Params_DecreaseIndent @params = new()
            {
                self = self
            };
            _beforeDecreaseIndent?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDecreaseIndent != null) _afterDecreaseIndent.Invoke(@params);
        }

        internal static void HookAppend_string()
        {
            if (!HookedList.Contains("Append_string"))
            {
                HookedList.Add("Append_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "Append_string"), Append_string);
            }
        }

        internal static event Delegates.Append_string_BeforeArgs _beforeAppend_string;
        internal static event Delegates.Append_string_NormalArgs _afterAppend_string;

        private static void Append_string(Action<CodeWriter, string> orig, CodeWriter self, string code)
        {
            Delegates.Params_Append_string @params = new()
            {
                self = self, code = code
            };
            _beforeAppend_string?.Invoke(@params);
            self = @params.self;
            code = @params.code;
            orig(self, code);
            if (_afterAppend_string != null) _afterAppend_string.Invoke(@params);
        }

        internal static void HookAppend_bool_string()
        {
            if (!HookedList.Contains("Append_bool_string"))
            {
                HookedList.Add("Append_bool_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "Append_bool_string"), Append_bool_string);
            }
        }

        internal static event Delegates.Append_bool_string_BeforeArgs _beforeAppend_bool_string;
        internal static event Delegates.Append_bool_string_NormalArgs _afterAppend_bool_string;

        private static void Append_bool_string(Action<CodeWriter, bool, string> orig, CodeWriter self, bool trim,
            string code)
        {
            Delegates.Params_Append_bool_string @params = new()
            {
                self = self, trim = trim, code = code
            };
            _beforeAppend_bool_string?.Invoke(@params);
            self = @params.self;
            trim = @params.trim;
            code = @params.code;
            orig(self, trim, code);
            if (_afterAppend_bool_string != null) _afterAppend_bool_string.Invoke(@params);
        }

        internal static void HookAppendLine_string()
        {
            if (!HookedList.Contains("AppendLine_string"))
            {
                HookedList.Add("AppendLine_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLine_string"), AppendLine_string);
            }
        }

        internal static event Delegates.AppendLine_string_BeforeArgs _beforeAppendLine_string;
        internal static event Delegates.AppendLine_string_NormalArgs _afterAppendLine_string;

        private static void AppendLine_string(Action<CodeWriter, string> orig, CodeWriter self, string code)
        {
            Delegates.Params_AppendLine_string @params = new()
            {
                self = self, code = code
            };
            _beforeAppendLine_string?.Invoke(@params);
            self = @params.self;
            code = @params.code;
            orig(self, code);
            if (_afterAppendLine_string != null) _afterAppendLine_string.Invoke(@params);
        }

        internal static void HookAppendLine_int()
        {
            if (!HookedList.Contains("AppendLine_int"))
            {
                HookedList.Add("AppendLine_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLine_int"), AppendLine_int);
            }
        }

        internal static event Delegates.AppendLine_int_BeforeArgs _beforeAppendLine_int;
        internal static event Delegates.AppendLine_int_NormalArgs _afterAppendLine_int;

        private static void AppendLine_int(Action<CodeWriter, int> orig, CodeWriter self, int count)
        {
            Delegates.Params_AppendLine_int @params = new()
            {
                self = self, count = count
            };
            _beforeAppendLine_int?.Invoke(@params);
            self = @params.self;
            count = @params.count;
            orig(self, count);
            if (_afterAppendLine_int != null) _afterAppendLine_int.Invoke(@params);
        }

        internal static void HookAppendFormat()
        {
            if (!HookedList.Contains("AppendFormat"))
            {
                HookedList.Add("AppendFormat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendFormat"), AppendFormat);
            }
        }

        internal static event Delegates.AppendFormat_BeforeArgs _beforeAppendFormat;
        internal static event Delegates.AppendFormat_NormalArgs _afterAppendFormat;

        private static void AppendFormat(Action<CodeWriter, string, object[]> orig, CodeWriter self, string format,
            object[] args)
        {
            Delegates.Params_AppendFormat @params = new()
            {
                self = self, format = format, args = args
            };
            _beforeAppendFormat?.Invoke(@params);
            self = @params.self;
            format = @params.format;
            args = @params.args;
            orig(self, format, args);
            if (_afterAppendFormat != null) _afterAppendFormat.Invoke(@params);
        }

        internal static void HookAppendLineFormat()
        {
            if (!HookedList.Contains("AppendLineFormat"))
            {
                HookedList.Add("AppendLineFormat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLineFormat"), AppendLineFormat);
            }
        }

        internal static event Delegates.AppendLineFormat_BeforeArgs _beforeAppendLineFormat;
        internal static event Delegates.AppendLineFormat_NormalArgs _afterAppendLineFormat;

        private static void AppendLineFormat(Action<CodeWriter, string, object[]> orig, CodeWriter self, string format,
            object[] args)
        {
            Delegates.Params_AppendLineFormat @params = new()
            {
                self = self, format = format, args = args
            };
            _beforeAppendLineFormat?.Invoke(@params);
            self = @params.self;
            format = @params.format;
            args = @params.args;
            orig(self, format, args);
            if (_afterAppendLineFormat != null) _afterAppendLineFormat.Invoke(@params);
        }

        internal static void HookToString()
        {
            if (!HookedList.Contains("ToString"))
            {
                HookedList.Add("ToString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "ToString"), ToString);
            }
        }

        internal static event Delegates.ToString_BeforeArgs _beforeToString;
        internal static event Delegates.ToString_NormalArgs _afterToString;

        private static string ToString(Func<CodeWriter, string> orig, CodeWriter self)
        {
            Delegates.Params_ToString @params = new()
            {
                self = self
            };
            _beforeToString?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterToString != null) retVal = _afterToString.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Append_bool_string_BeforeArgs(Params_Append_bool_string args);

        public delegate void Append_bool_string_NormalArgs(Params_Append_bool_string args);

        public delegate void Append_string_BeforeArgs(Params_Append_string args);

        public delegate void Append_string_NormalArgs(Params_Append_string args);

        public delegate void AppendFormat_BeforeArgs(Params_AppendFormat args);

        public delegate void AppendFormat_NormalArgs(Params_AppendFormat args);

        public delegate void AppendLine_int_BeforeArgs(Params_AppendLine_int args);

        public delegate void AppendLine_int_NormalArgs(Params_AppendLine_int args);

        public delegate void AppendLine_string_BeforeArgs(Params_AppendLine_string args);

        public delegate void AppendLine_string_NormalArgs(Params_AppendLine_string args);

        public delegate void AppendLineFormat_BeforeArgs(Params_AppendLineFormat args);

        public delegate void AppendLineFormat_NormalArgs(Params_AppendLineFormat args);

        public delegate void DecreaseIndent_BeforeArgs(Params_DecreaseIndent args);

        public delegate void DecreaseIndent_NormalArgs(Params_DecreaseIndent args);

        public delegate void IncreaseIndent_BeforeArgs(Params_IncreaseIndent args);

        public delegate void IncreaseIndent_NormalArgs(Params_IncreaseIndent args);

        public delegate void ToString_BeforeArgs(Params_ToString args);

        public delegate string ToString_NormalArgs(Params_ToString args);

        public sealed class Params_IncreaseIndent
        {
            public CodeWriter self;
        }

        public sealed class Params_DecreaseIndent
        {
            public CodeWriter self;
        }

        public sealed class Params_Append_string
        {
            public string code;
            public CodeWriter self;
        }

        public sealed class Params_Append_bool_string
        {
            public string code;
            public CodeWriter self;
            public bool trim;
        }

        public sealed class Params_AppendLine_string
        {
            public string code;
            public CodeWriter self;
        }

        public sealed class Params_AppendLine_int
        {
            public int count;
            public CodeWriter self;
        }

        public sealed class Params_AppendFormat
        {
            public object[] args;
            public string format;
            public CodeWriter self;
        }

        public sealed class Params_AppendLineFormat
        {
            public object[] args;
            public string format;
            public CodeWriter self;
        }

        public sealed class Params_ToString
        {
            public CodeWriter self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.IncreaseIndent_BeforeArgs IncreaseIndent
        {
            add
            {
                HookHandler._beforeIncreaseIndent += value;
                HookHandler.HookIncreaseIndent();
            }
            remove => HookHandler._beforeIncreaseIndent -= value;
        }

        public static event Delegates.DecreaseIndent_BeforeArgs DecreaseIndent
        {
            add
            {
                HookHandler._beforeDecreaseIndent += value;
                HookHandler.HookDecreaseIndent();
            }
            remove => HookHandler._beforeDecreaseIndent -= value;
        }

        public static event Delegates.Append_string_BeforeArgs Append_string
        {
            add
            {
                HookHandler._beforeAppend_string += value;
                HookHandler.HookAppend_string();
            }
            remove => HookHandler._beforeAppend_string -= value;
        }

        public static event Delegates.Append_bool_string_BeforeArgs Append_bool_string
        {
            add
            {
                HookHandler._beforeAppend_bool_string += value;
                HookHandler.HookAppend_bool_string();
            }
            remove => HookHandler._beforeAppend_bool_string -= value;
        }

        public static event Delegates.AppendLine_string_BeforeArgs AppendLine_string
        {
            add
            {
                HookHandler._beforeAppendLine_string += value;
                HookHandler.HookAppendLine_string();
            }
            remove => HookHandler._beforeAppendLine_string -= value;
        }

        public static event Delegates.AppendLine_int_BeforeArgs AppendLine_int
        {
            add
            {
                HookHandler._beforeAppendLine_int += value;
                HookHandler.HookAppendLine_int();
            }
            remove => HookHandler._beforeAppendLine_int -= value;
        }

        public static event Delegates.AppendFormat_BeforeArgs AppendFormat
        {
            add
            {
                HookHandler._beforeAppendFormat += value;
                HookHandler.HookAppendFormat();
            }
            remove => HookHandler._beforeAppendFormat -= value;
        }

        public static event Delegates.AppendLineFormat_BeforeArgs AppendLineFormat
        {
            add
            {
                HookHandler._beforeAppendLineFormat += value;
                HookHandler.HookAppendLineFormat();
            }
            remove => HookHandler._beforeAppendLineFormat -= value;
        }

        public static event Delegates.ToString_BeforeArgs ToString
        {
            add
            {
                HookHandler._beforeToString += value;
                HookHandler.HookToString();
            }
            remove => HookHandler._beforeToString -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.IncreaseIndent_NormalArgs IncreaseIndent
        {
            add
            {
                HookHandler._afterIncreaseIndent += value;
                HookHandler.HookIncreaseIndent();
            }
            remove => HookHandler._afterIncreaseIndent -= value;
        }

        public static event Delegates.DecreaseIndent_NormalArgs DecreaseIndent
        {
            add
            {
                HookHandler._afterDecreaseIndent += value;
                HookHandler.HookDecreaseIndent();
            }
            remove => HookHandler._afterDecreaseIndent -= value;
        }

        public static event Delegates.Append_string_NormalArgs Append_string
        {
            add
            {
                HookHandler._afterAppend_string += value;
                HookHandler.HookAppend_string();
            }
            remove => HookHandler._afterAppend_string -= value;
        }

        public static event Delegates.Append_bool_string_NormalArgs Append_bool_string
        {
            add
            {
                HookHandler._afterAppend_bool_string += value;
                HookHandler.HookAppend_bool_string();
            }
            remove => HookHandler._afterAppend_bool_string -= value;
        }

        public static event Delegates.AppendLine_string_NormalArgs AppendLine_string
        {
            add
            {
                HookHandler._afterAppendLine_string += value;
                HookHandler.HookAppendLine_string();
            }
            remove => HookHandler._afterAppendLine_string -= value;
        }

        public static event Delegates.AppendLine_int_NormalArgs AppendLine_int
        {
            add
            {
                HookHandler._afterAppendLine_int += value;
                HookHandler.HookAppendLine_int();
            }
            remove => HookHandler._afterAppendLine_int -= value;
        }

        public static event Delegates.AppendFormat_NormalArgs AppendFormat
        {
            add
            {
                HookHandler._afterAppendFormat += value;
                HookHandler.HookAppendFormat();
            }
            remove => HookHandler._afterAppendFormat -= value;
        }

        public static event Delegates.AppendLineFormat_NormalArgs AppendLineFormat
        {
            add
            {
                HookHandler._afterAppendLineFormat += value;
                HookHandler.HookAppendLineFormat();
            }
            remove => HookHandler._afterAppendLineFormat -= value;
        }

        public static event Delegates.ToString_NormalArgs ToString
        {
            add
            {
                HookHandler._afterToString += value;
                HookHandler.HookToString();
            }
            remove => HookHandler._afterToString -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.IncreaseIndent_NormalArgs IncreaseIndent
        {
            add => HookEndpointManager.Add<Delegates.IncreaseIndent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "IncreaseIndent"), value);
            remove => HookEndpointManager.Remove<Delegates.IncreaseIndent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "IncreaseIndent"), value);
        }

        public static event Delegates.DecreaseIndent_NormalArgs DecreaseIndent
        {
            add => HookEndpointManager.Add<Delegates.DecreaseIndent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "DecreaseIndent"), value);
            remove => HookEndpointManager.Remove<Delegates.DecreaseIndent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "DecreaseIndent"), value);
        }

        public static event Delegates.Append_string_NormalArgs Append_string
        {
            add => HookEndpointManager.Add<Delegates.Append_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "Append"), value);
            remove => HookEndpointManager.Remove<Delegates.Append_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "Append"), value);
        }

        public static event Delegates.Append_bool_string_NormalArgs Append_bool_string
        {
            add => HookEndpointManager.Add<Delegates.Append_bool_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "Append"), value);
            remove => HookEndpointManager.Remove<Delegates.Append_bool_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "Append"), value);
        }

        public static event Delegates.AppendLine_string_NormalArgs AppendLine_string
        {
            add => HookEndpointManager.Add<Delegates.AppendLine_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLine"), value);
            remove => HookEndpointManager.Remove<Delegates.AppendLine_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLine"), value);
        }

        public static event Delegates.AppendLine_int_NormalArgs AppendLine_int
        {
            add => HookEndpointManager.Add<Delegates.AppendLine_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLine"), value);
            remove => HookEndpointManager.Remove<Delegates.AppendLine_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLine"), value);
        }

        public static event Delegates.AppendFormat_NormalArgs AppendFormat
        {
            add => HookEndpointManager.Add<Delegates.AppendFormat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendFormat"), value);
            remove => HookEndpointManager.Remove<Delegates.AppendFormat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendFormat"), value);
        }

        public static event Delegates.AppendLineFormat_NormalArgs AppendLineFormat
        {
            add => HookEndpointManager.Add<Delegates.AppendLineFormat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLineFormat"), value);
            remove => HookEndpointManager.Remove<Delegates.AppendLineFormat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "AppendLineFormat"), value);
        }

        public static event Delegates.ToString_NormalArgs ToString
        {
            add => HookEndpointManager.Add<Delegates.ToString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "ToString"), value);
            remove => HookEndpointManager.Remove<Delegates.ToString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CodeWriter), "ToString"), value);
        }
    }
}