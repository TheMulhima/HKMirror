using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MenuOptionHorizontal class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuOptionHorizontal
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "Awake", true),
                    Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnEnable", true),
                    OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnDisable", true),
                    OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnMove", true),
                    OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_AfterArgs _afterOnMove;

        private static void OnMove(
            Action<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.AxisEventData> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            if (_beforeOnMove != null)
            {
                foreach (Delegates.OnMove_BeforeArgs toInvoke in _beforeOnMove.GetInvocationList())
                {
                    try
                    {
                        _beforeOnMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null)
            {
                foreach (Delegates.OnMove_AfterArgs toInvoke in _afterOnMove.GetInvocationList())
                {
                    try
                    {
                        _afterOnMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnPointerClick", true),
                    OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(
            Action<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
            {
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                {
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookMoveOption()
        {
            if (!HookedList.Contains("MoveOption"))
            {
                HookedList.Add("MoveOption");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "MoveOption", true),
                    MoveOption);
            }
        }

        internal static event Delegates.MoveOption_BeforeArgs _beforeMoveOption;
        internal static event Delegates.MoveOption_AfterArgs _afterMoveOption;

        private static bool MoveOption(
            Func<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.MoveDirection, bool> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.MoveDirection dir)
        {
            Delegates.Params_MoveOption @params = new()
            {
                self = self, dir = dir
            };
            if (_beforeMoveOption != null)
            {
                foreach (Delegates.MoveOption_BeforeArgs toInvoke in _beforeMoveOption.GetInvocationList())
                {
                    try
                    {
                        _beforeMoveOption?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            dir = @params.dir;
            var retVal = orig(self, dir);
            if (_afterMoveOption != null)
            {
                foreach (Delegates.MoveOption_AfterArgs toInvoke in _afterMoveOption.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterMoveOption.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookPointerClickCheckArrows()
        {
            if (!HookedList.Contains("PointerClickCheckArrows"))
            {
                HookedList.Add("PointerClickCheckArrows");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal),
                        "PointerClickCheckArrows", true), PointerClickCheckArrows);
            }
        }

        internal static event Delegates.PointerClickCheckArrows_BeforeArgs _beforePointerClickCheckArrows;
        internal static event Delegates.PointerClickCheckArrows_AfterArgs _afterPointerClickCheckArrows;

        private static void PointerClickCheckArrows(
            Action<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.PointerEventData eventData)
        {
            Delegates.Params_PointerClickCheckArrows @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforePointerClickCheckArrows != null)
            {
                foreach (Delegates.PointerClickCheckArrows_BeforeArgs toInvoke in _beforePointerClickCheckArrows
                             .GetInvocationList())
                {
                    try
                    {
                        _beforePointerClickCheckArrows?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterPointerClickCheckArrows != null)
            {
                foreach (Delegates.PointerClickCheckArrows_AfterArgs toInvoke in _afterPointerClickCheckArrows
                             .GetInvocationList())
                {
                    try
                    {
                        _afterPointerClickCheckArrows.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIsInside()
        {
            if (!HookedList.Contains("IsInside"))
            {
                HookedList.Add("IsInside");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "IsInside", true),
                    IsInside);
            }
        }

        internal static event Delegates.IsInside_BeforeArgs _beforeIsInside;
        internal static event Delegates.IsInside_AfterArgs _afterIsInside;

        private static bool IsInside(
            Func<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.GameObject, UnityEngine.EventSystems.PointerEventData,
                bool> orig, UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.GameObject obj,
            UnityEngine.EventSystems.PointerEventData eventData)
        {
            Delegates.Params_IsInside @params = new()
            {
                self = self, obj = obj, eventData = eventData
            };
            if (_beforeIsInside != null)
            {
                foreach (Delegates.IsInside_BeforeArgs toInvoke in _beforeIsInside.GetInvocationList())
                {
                    try
                    {
                        _beforeIsInside?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            obj = @params.obj;
            eventData = @params.eventData;
            var retVal = orig(self, obj, eventData);
            if (_afterIsInside != null)
            {
                foreach (Delegates.IsInside_AfterArgs toInvoke in _afterIsInside.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterIsInside.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetOptionList()
        {
            if (!HookedList.Contains("SetOptionList"))
            {
                HookedList.Add("SetOptionList");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "SetOptionList", true),
                    SetOptionList);
            }
        }

        internal static event Delegates.SetOptionList_BeforeArgs _beforeSetOptionList;
        internal static event Delegates.SetOptionList_AfterArgs _afterSetOptionList;

        private static void SetOptionList(Action<UnityEngine.UI.MenuOptionHorizontal, string[]> orig,
            UnityEngine.UI.MenuOptionHorizontal self, string[] optionList)
        {
            Delegates.Params_SetOptionList @params = new()
            {
                self = self, optionList = optionList
            };
            if (_beforeSetOptionList != null)
            {
                foreach (Delegates.SetOptionList_BeforeArgs toInvoke in _beforeSetOptionList.GetInvocationList())
                {
                    try
                    {
                        _beforeSetOptionList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            optionList = @params.optionList;
            orig(self, optionList);
            if (_afterSetOptionList != null)
            {
                foreach (Delegates.SetOptionList_AfterArgs toInvoke in _afterSetOptionList.GetInvocationList())
                {
                    try
                    {
                        _afterSetOptionList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetSelectedOptionText()
        {
            if (!HookedList.Contains("GetSelectedOptionText"))
            {
                HookedList.Add("GetSelectedOptionText");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "GetSelectedOptionText",
                        true), GetSelectedOptionText);
            }
        }

        internal static event Delegates.GetSelectedOptionText_BeforeArgs _beforeGetSelectedOptionText;
        internal static event Delegates.GetSelectedOptionText_AfterArgs _afterGetSelectedOptionText;

        private static string GetSelectedOptionText(Func<UnityEngine.UI.MenuOptionHorizontal, string> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_GetSelectedOptionText @params = new()
            {
                self = self
            };
            if (_beforeGetSelectedOptionText != null)
            {
                foreach (Delegates.GetSelectedOptionText_BeforeArgs toInvoke in _beforeGetSelectedOptionText
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetSelectedOptionText?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSelectedOptionText != null)
            {
                foreach (Delegates.GetSelectedOptionText_AfterArgs toInvoke in _afterGetSelectedOptionText
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetSelectedOptionText.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetSelectedOptionTextRaw()
        {
            if (!HookedList.Contains("GetSelectedOptionTextRaw"))
            {
                HookedList.Add("GetSelectedOptionTextRaw");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal),
                        "GetSelectedOptionTextRaw", true), GetSelectedOptionTextRaw);
            }
        }

        internal static event Delegates.GetSelectedOptionTextRaw_BeforeArgs _beforeGetSelectedOptionTextRaw;
        internal static event Delegates.GetSelectedOptionTextRaw_AfterArgs _afterGetSelectedOptionTextRaw;

        private static string GetSelectedOptionTextRaw(Func<UnityEngine.UI.MenuOptionHorizontal, string> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_GetSelectedOptionTextRaw @params = new()
            {
                self = self
            };
            if (_beforeGetSelectedOptionTextRaw != null)
            {
                foreach (Delegates.GetSelectedOptionTextRaw_BeforeArgs toInvoke in _beforeGetSelectedOptionTextRaw
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetSelectedOptionTextRaw?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSelectedOptionTextRaw != null)
            {
                foreach (Delegates.GetSelectedOptionTextRaw_AfterArgs toInvoke in _afterGetSelectedOptionTextRaw
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetSelectedOptionTextRaw.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetOptionTo()
        {
            if (!HookedList.Contains("SetOptionTo"))
            {
                HookedList.Add("SetOptionTo");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "SetOptionTo", true),
                    SetOptionTo);
            }
        }

        internal static event Delegates.SetOptionTo_BeforeArgs _beforeSetOptionTo;
        internal static event Delegates.SetOptionTo_AfterArgs _afterSetOptionTo;

        private static void SetOptionTo(Action<UnityEngine.UI.MenuOptionHorizontal, int> orig,
            UnityEngine.UI.MenuOptionHorizontal self, int optionNumber)
        {
            Delegates.Params_SetOptionTo @params = new()
            {
                self = self, optionNumber = optionNumber
            };
            if (_beforeSetOptionTo != null)
            {
                foreach (Delegates.SetOptionTo_BeforeArgs toInvoke in _beforeSetOptionTo.GetInvocationList())
                {
                    try
                    {
                        _beforeSetOptionTo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            optionNumber = @params.optionNumber;
            orig(self, optionNumber);
            if (_afterSetOptionTo != null)
            {
                foreach (Delegates.SetOptionTo_AfterArgs toInvoke in _afterSetOptionTo.GetInvocationList())
                {
                    try
                    {
                        _afterSetOptionTo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateText()
        {
            if (!HookedList.Contains("UpdateText"))
            {
                HookedList.Add("UpdateText");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "UpdateText", true),
                    UpdateText);
            }
        }

        internal static event Delegates.UpdateText_BeforeArgs _beforeUpdateText;
        internal static event Delegates.UpdateText_AfterArgs _afterUpdateText;

        private static void UpdateText(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_UpdateText @params = new()
            {
                self = self
            };
            if (_beforeUpdateText != null)
            {
                foreach (Delegates.UpdateText_BeforeArgs toInvoke in _beforeUpdateText.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateText?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateText != null)
            {
                foreach (Delegates.UpdateText_AfterArgs toInvoke in _afterUpdateText.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateText.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateSetting()
        {
            if (!HookedList.Contains("UpdateSetting"))
            {
                HookedList.Add("UpdateSetting");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "UpdateSetting", true),
                    UpdateSetting);
            }
        }

        internal static event Delegates.UpdateSetting_BeforeArgs _beforeUpdateSetting;
        internal static event Delegates.UpdateSetting_AfterArgs _afterUpdateSetting;

        private static void UpdateSetting(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_UpdateSetting @params = new()
            {
                self = self
            };
            if (_beforeUpdateSetting != null)
            {
                foreach (Delegates.UpdateSetting_BeforeArgs toInvoke in _beforeUpdateSetting.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateSetting?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateSetting != null)
            {
                foreach (Delegates.UpdateSetting_AfterArgs toInvoke in _afterUpdateSetting.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateSetting.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDecrementOption()
        {
            if (!HookedList.Contains("DecrementOption"))
            {
                HookedList.Add("DecrementOption");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "DecrementOption",
                        true), DecrementOption);
            }
        }

        internal static event Delegates.DecrementOption_BeforeArgs _beforeDecrementOption;
        internal static event Delegates.DecrementOption_AfterArgs _afterDecrementOption;

        private static void DecrementOption(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_DecrementOption @params = new()
            {
                self = self
            };
            if (_beforeDecrementOption != null)
            {
                foreach (Delegates.DecrementOption_BeforeArgs toInvoke in _beforeDecrementOption.GetInvocationList())
                {
                    try
                    {
                        _beforeDecrementOption?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDecrementOption != null)
            {
                foreach (Delegates.DecrementOption_AfterArgs toInvoke in _afterDecrementOption.GetInvocationList())
                {
                    try
                    {
                        _afterDecrementOption.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookIncrementOption()
        {
            if (!HookedList.Contains("IncrementOption"))
            {
                HookedList.Add("IncrementOption");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "IncrementOption",
                        true), IncrementOption);
            }
        }

        internal static event Delegates.IncrementOption_BeforeArgs _beforeIncrementOption;
        internal static event Delegates.IncrementOption_AfterArgs _afterIncrementOption;

        private static void IncrementOption(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self)
        {
            Delegates.Params_IncrementOption @params = new()
            {
                self = self
            };
            if (_beforeIncrementOption != null)
            {
                foreach (Delegates.IncrementOption_BeforeArgs toInvoke in _beforeIncrementOption.GetInvocationList())
                {
                    try
                    {
                        _beforeIncrementOption?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterIncrementOption != null)
            {
                foreach (Delegates.IncrementOption_AfterArgs toInvoke in _afterIncrementOption.GetInvocationList())
                {
                    try
                    {
                        _afterIncrementOption.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_OnEnable
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_OnDisable
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_OnMove
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public UnityEngine.EventSystems.AxisEventData move;
        }

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_AfterArgs(Params_OnMove args);

        public delegate void OnMove_WithArgs(
            Action<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.AxisEventData> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.AxisEventData move);

        public sealed class Params_OnPointerClick
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public UnityEngine.EventSystems.PointerEventData eventData;
        }

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(
            Action<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.PointerEventData eventData);

        public sealed class Params_MoveOption
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public UnityEngine.EventSystems.MoveDirection dir;
        }

        public delegate void MoveOption_BeforeArgs(Params_MoveOption args);

        public delegate bool MoveOption_AfterArgs(Params_MoveOption args, bool ret);

        public delegate bool MoveOption_WithArgs(
            Func<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.MoveDirection, bool> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.MoveDirection dir);

        public sealed class Params_PointerClickCheckArrows
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public UnityEngine.EventSystems.PointerEventData eventData;
        }

        public delegate void PointerClickCheckArrows_BeforeArgs(Params_PointerClickCheckArrows args);

        public delegate void PointerClickCheckArrows_AfterArgs(Params_PointerClickCheckArrows args);

        public delegate void PointerClickCheckArrows_WithArgs(
            Action<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.EventSystems.PointerEventData> orig,
            UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.EventSystems.PointerEventData eventData);

        public sealed class Params_IsInside
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public UnityEngine.GameObject obj;
            public UnityEngine.EventSystems.PointerEventData eventData;
        }

        public delegate void IsInside_BeforeArgs(Params_IsInside args);

        public delegate bool IsInside_AfterArgs(Params_IsInside args, bool ret);

        public delegate bool IsInside_WithArgs(
            Func<UnityEngine.UI.MenuOptionHorizontal, UnityEngine.GameObject, UnityEngine.EventSystems.PointerEventData,
                bool> orig, UnityEngine.UI.MenuOptionHorizontal self, UnityEngine.GameObject obj,
            UnityEngine.EventSystems.PointerEventData eventData);

        public sealed class Params_SetOptionList
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public string[] optionList;
        }

        public delegate void SetOptionList_BeforeArgs(Params_SetOptionList args);

        public delegate void SetOptionList_AfterArgs(Params_SetOptionList args);

        public delegate void SetOptionList_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal, string[]> orig,
            UnityEngine.UI.MenuOptionHorizontal self, string[] optionList);

        public sealed class Params_GetSelectedOptionText
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void GetSelectedOptionText_BeforeArgs(Params_GetSelectedOptionText args);

        public delegate string GetSelectedOptionText_AfterArgs(Params_GetSelectedOptionText args, string ret);

        public delegate string GetSelectedOptionText_WithArgs(Func<UnityEngine.UI.MenuOptionHorizontal, string> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_GetSelectedOptionTextRaw
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void GetSelectedOptionTextRaw_BeforeArgs(Params_GetSelectedOptionTextRaw args);

        public delegate string GetSelectedOptionTextRaw_AfterArgs(Params_GetSelectedOptionTextRaw args, string ret);

        public delegate string GetSelectedOptionTextRaw_WithArgs(Func<UnityEngine.UI.MenuOptionHorizontal, string> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_SetOptionTo
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
            public int optionNumber;
        }

        public delegate void SetOptionTo_BeforeArgs(Params_SetOptionTo args);

        public delegate void SetOptionTo_AfterArgs(Params_SetOptionTo args);

        public delegate void SetOptionTo_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal, int> orig,
            UnityEngine.UI.MenuOptionHorizontal self, int optionNumber);

        public sealed class Params_UpdateText
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void UpdateText_BeforeArgs(Params_UpdateText args);

        public delegate void UpdateText_AfterArgs(Params_UpdateText args);

        public delegate void UpdateText_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_UpdateSetting
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void UpdateSetting_BeforeArgs(Params_UpdateSetting args);

        public delegate void UpdateSetting_AfterArgs(Params_UpdateSetting args);

        public delegate void UpdateSetting_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_DecrementOption
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void DecrementOption_BeforeArgs(Params_DecrementOption args);

        public delegate void DecrementOption_AfterArgs(Params_DecrementOption args);

        public delegate void DecrementOption_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);

        public sealed class Params_IncrementOption
        {
            public UnityEngine.UI.MenuOptionHorizontal self;
        }

        public delegate void IncrementOption_BeforeArgs(Params_IncrementOption args);

        public delegate void IncrementOption_AfterArgs(Params_IncrementOption args);

        public delegate void IncrementOption_WithArgs(Action<UnityEngine.UI.MenuOptionHorizontal> orig,
            UnityEngine.UI.MenuOptionHorizontal self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.MoveOption_BeforeArgs MoveOption
        {
            add
            {
                HookHandler._beforeMoveOption += value;
                HookHandler.HookMoveOption();
            }
            remove => HookHandler._beforeMoveOption -= value;
        }

        public static event Delegates.PointerClickCheckArrows_BeforeArgs PointerClickCheckArrows
        {
            add
            {
                HookHandler._beforePointerClickCheckArrows += value;
                HookHandler.HookPointerClickCheckArrows();
            }
            remove => HookHandler._beforePointerClickCheckArrows -= value;
        }

        public static event Delegates.IsInside_BeforeArgs IsInside
        {
            add
            {
                HookHandler._beforeIsInside += value;
                HookHandler.HookIsInside();
            }
            remove => HookHandler._beforeIsInside -= value;
        }

        public static event Delegates.SetOptionList_BeforeArgs SetOptionList
        {
            add
            {
                HookHandler._beforeSetOptionList += value;
                HookHandler.HookSetOptionList();
            }
            remove => HookHandler._beforeSetOptionList -= value;
        }

        public static event Delegates.GetSelectedOptionText_BeforeArgs GetSelectedOptionText
        {
            add
            {
                HookHandler._beforeGetSelectedOptionText += value;
                HookHandler.HookGetSelectedOptionText();
            }
            remove => HookHandler._beforeGetSelectedOptionText -= value;
        }

        public static event Delegates.GetSelectedOptionTextRaw_BeforeArgs GetSelectedOptionTextRaw
        {
            add
            {
                HookHandler._beforeGetSelectedOptionTextRaw += value;
                HookHandler.HookGetSelectedOptionTextRaw();
            }
            remove => HookHandler._beforeGetSelectedOptionTextRaw -= value;
        }

        public static event Delegates.SetOptionTo_BeforeArgs SetOptionTo
        {
            add
            {
                HookHandler._beforeSetOptionTo += value;
                HookHandler.HookSetOptionTo();
            }
            remove => HookHandler._beforeSetOptionTo -= value;
        }

        public static event Delegates.UpdateText_BeforeArgs UpdateText
        {
            add
            {
                HookHandler._beforeUpdateText += value;
                HookHandler.HookUpdateText();
            }
            remove => HookHandler._beforeUpdateText -= value;
        }

        public static event Delegates.UpdateSetting_BeforeArgs UpdateSetting
        {
            add
            {
                HookHandler._beforeUpdateSetting += value;
                HookHandler.HookUpdateSetting();
            }
            remove => HookHandler._beforeUpdateSetting -= value;
        }

        public static event Delegates.DecrementOption_BeforeArgs DecrementOption
        {
            add
            {
                HookHandler._beforeDecrementOption += value;
                HookHandler.HookDecrementOption();
            }
            remove => HookHandler._beforeDecrementOption -= value;
        }

        public static event Delegates.IncrementOption_BeforeArgs IncrementOption
        {
            add
            {
                HookHandler._beforeIncrementOption += value;
                HookHandler.HookIncrementOption();
            }
            remove => HookHandler._beforeIncrementOption -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnMove_AfterArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.MoveOption_AfterArgs MoveOption
        {
            add
            {
                HookHandler._afterMoveOption += value;
                HookHandler.HookMoveOption();
            }
            remove => HookHandler._afterMoveOption -= value;
        }

        public static event Delegates.PointerClickCheckArrows_AfterArgs PointerClickCheckArrows
        {
            add
            {
                HookHandler._afterPointerClickCheckArrows += value;
                HookHandler.HookPointerClickCheckArrows();
            }
            remove => HookHandler._afterPointerClickCheckArrows -= value;
        }

        public static event Delegates.IsInside_AfterArgs IsInside
        {
            add
            {
                HookHandler._afterIsInside += value;
                HookHandler.HookIsInside();
            }
            remove => HookHandler._afterIsInside -= value;
        }

        public static event Delegates.SetOptionList_AfterArgs SetOptionList
        {
            add
            {
                HookHandler._afterSetOptionList += value;
                HookHandler.HookSetOptionList();
            }
            remove => HookHandler._afterSetOptionList -= value;
        }

        public static event Delegates.GetSelectedOptionText_AfterArgs GetSelectedOptionText
        {
            add
            {
                HookHandler._afterGetSelectedOptionText += value;
                HookHandler.HookGetSelectedOptionText();
            }
            remove => HookHandler._afterGetSelectedOptionText -= value;
        }

        public static event Delegates.GetSelectedOptionTextRaw_AfterArgs GetSelectedOptionTextRaw
        {
            add
            {
                HookHandler._afterGetSelectedOptionTextRaw += value;
                HookHandler.HookGetSelectedOptionTextRaw();
            }
            remove => HookHandler._afterGetSelectedOptionTextRaw -= value;
        }

        public static event Delegates.SetOptionTo_AfterArgs SetOptionTo
        {
            add
            {
                HookHandler._afterSetOptionTo += value;
                HookHandler.HookSetOptionTo();
            }
            remove => HookHandler._afterSetOptionTo -= value;
        }

        public static event Delegates.UpdateText_AfterArgs UpdateText
        {
            add
            {
                HookHandler._afterUpdateText += value;
                HookHandler.HookUpdateText();
            }
            remove => HookHandler._afterUpdateText -= value;
        }

        public static event Delegates.UpdateSetting_AfterArgs UpdateSetting
        {
            add
            {
                HookHandler._afterUpdateSetting += value;
                HookHandler.HookUpdateSetting();
            }
            remove => HookHandler._afterUpdateSetting -= value;
        }

        public static event Delegates.DecrementOption_AfterArgs DecrementOption
        {
            add
            {
                HookHandler._afterDecrementOption += value;
                HookHandler.HookDecrementOption();
            }
            remove => HookHandler._afterDecrementOption -= value;
        }

        public static event Delegates.IncrementOption_AfterArgs IncrementOption
        {
            add
            {
                HookHandler._afterIncrementOption += value;
                HookHandler.HookIncrementOption();
            }
            remove => HookHandler._afterIncrementOption -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Awake_WithArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "Awake", true), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "Awake", true), value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnEnable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnEnable", true), value);
        }

        public static event Delegates.OnDisable_WithArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnDisable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnDisable", true), value);
        }

        public static event Delegates.OnMove_WithArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnMove", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnMove", true), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnPointerClick", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "OnPointerClick", true),
                value);
        }

        public static event Delegates.MoveOption_WithArgs MoveOption
        {
            add => HookEndpointManager.Add<Delegates.MoveOption_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "MoveOption", true), value);
            remove => HookEndpointManager.Remove<Delegates.MoveOption_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "MoveOption", true), value);
        }

        public static event Delegates.PointerClickCheckArrows_WithArgs PointerClickCheckArrows
        {
            add => HookEndpointManager.Add<Delegates.PointerClickCheckArrows_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "PointerClickCheckArrows",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.PointerClickCheckArrows_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "PointerClickCheckArrows",
                    true), value);
        }

        public static event Delegates.IsInside_WithArgs IsInside
        {
            add => HookEndpointManager.Add<Delegates.IsInside_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "IsInside", true), value);
            remove => HookEndpointManager.Remove<Delegates.IsInside_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "IsInside", true), value);
        }

        public static event Delegates.SetOptionList_WithArgs SetOptionList
        {
            add => HookEndpointManager.Add<Delegates.SetOptionList_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "SetOptionList", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.SetOptionList_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "SetOptionList", true),
                value);
        }

        public static event Delegates.GetSelectedOptionText_WithArgs GetSelectedOptionText
        {
            add => HookEndpointManager.Add<Delegates.GetSelectedOptionText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "GetSelectedOptionText",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.GetSelectedOptionText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "GetSelectedOptionText",
                    true), value);
        }

        public static event Delegates.GetSelectedOptionTextRaw_WithArgs GetSelectedOptionTextRaw
        {
            add => HookEndpointManager.Add<Delegates.GetSelectedOptionTextRaw_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "GetSelectedOptionTextRaw",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.GetSelectedOptionTextRaw_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "GetSelectedOptionTextRaw",
                    true), value);
        }

        public static event Delegates.SetOptionTo_WithArgs SetOptionTo
        {
            add => HookEndpointManager.Add<Delegates.SetOptionTo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "SetOptionTo", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.SetOptionTo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "SetOptionTo", true),
                value);
        }

        public static event Delegates.UpdateText_WithArgs UpdateText
        {
            add => HookEndpointManager.Add<Delegates.UpdateText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "UpdateText", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateText_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "UpdateText", true), value);
        }

        public static event Delegates.UpdateSetting_WithArgs UpdateSetting
        {
            add => HookEndpointManager.Add<Delegates.UpdateSetting_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "UpdateSetting", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSetting_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "UpdateSetting", true),
                value);
        }

        public static event Delegates.DecrementOption_WithArgs DecrementOption
        {
            add => HookEndpointManager.Add<Delegates.DecrementOption_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "DecrementOption", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.DecrementOption_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "DecrementOption", true),
                value);
        }

        public static event Delegates.IncrementOption_WithArgs IncrementOption
        {
            add => HookEndpointManager.Add<Delegates.IncrementOption_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "IncrementOption", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.IncrementOption_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuOptionHorizontal), "IncrementOption", true),
                value);
        }
    }
}