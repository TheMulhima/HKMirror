using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuOptionHorizontal class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuOptionHorizontal
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnMove"), OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_NormalArgs _afterOnMove;

        private static void OnMove(Action<MenuOptionHorizontal, AxisEventData> orig, MenuOptionHorizontal self,
            AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            _beforeOnMove?.Invoke(@params);
            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null) _afterOnMove.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnPointerClick"),
                    OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuOptionHorizontal, PointerEventData> orig,
            MenuOptionHorizontal self, PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookMoveOption()
        {
            if (!HookedList.Contains("MoveOption"))
            {
                HookedList.Add("MoveOption");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "MoveOption"), MoveOption);
            }
        }

        internal static event Delegates.MoveOption_BeforeArgs _beforeMoveOption;
        internal static event Delegates.MoveOption_NormalArgs _afterMoveOption;

        private static bool MoveOption(Func<MenuOptionHorizontal, MoveDirection, bool> orig, MenuOptionHorizontal self,
            MoveDirection dir)
        {
            Delegates.Params_MoveOption @params = new()
            {
                self = self, dir = dir
            };
            _beforeMoveOption?.Invoke(@params);
            self = @params.self;
            dir = @params.dir;
            var retVal = orig(self, dir);
            if (_afterMoveOption != null) retVal = _afterMoveOption.Invoke(@params);
            return retVal;
        }

        internal static void HookPointerClickCheckArrows()
        {
            if (!HookedList.Contains("PointerClickCheckArrows"))
            {
                HookedList.Add("PointerClickCheckArrows");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "PointerClickCheckArrows"),
                    PointerClickCheckArrows);
            }
        }

        internal static event Delegates.PointerClickCheckArrows_BeforeArgs _beforePointerClickCheckArrows;
        internal static event Delegates.PointerClickCheckArrows_NormalArgs _afterPointerClickCheckArrows;

        private static void PointerClickCheckArrows(Action<MenuOptionHorizontal, PointerEventData> orig,
            MenuOptionHorizontal self, PointerEventData eventData)
        {
            Delegates.Params_PointerClickCheckArrows @params = new()
            {
                self = self, eventData = eventData
            };
            _beforePointerClickCheckArrows?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterPointerClickCheckArrows != null) _afterPointerClickCheckArrows.Invoke(@params);
        }

        internal static void HookIsInside()
        {
            if (!HookedList.Contains("IsInside"))
            {
                HookedList.Add("IsInside");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "IsInside"), IsInside);
            }
        }

        internal static event Delegates.IsInside_BeforeArgs _beforeIsInside;
        internal static event Delegates.IsInside_NormalArgs _afterIsInside;

        private static bool IsInside(Func<MenuOptionHorizontal, GameObject, PointerEventData, bool> orig,
            MenuOptionHorizontal self, GameObject obj, PointerEventData eventData)
        {
            Delegates.Params_IsInside @params = new()
            {
                self = self, obj = obj, eventData = eventData
            };
            _beforeIsInside?.Invoke(@params);
            self = @params.self;
            obj = @params.obj;
            eventData = @params.eventData;
            var retVal = orig(self, obj, eventData);
            if (_afterIsInside != null) retVal = _afterIsInside.Invoke(@params);
            return retVal;
        }

        internal static void HookSetOptionList()
        {
            if (!HookedList.Contains("SetOptionList"))
            {
                HookedList.Add("SetOptionList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "SetOptionList"), SetOptionList);
            }
        }

        internal static event Delegates.SetOptionList_BeforeArgs _beforeSetOptionList;
        internal static event Delegates.SetOptionList_NormalArgs _afterSetOptionList;

        private static void SetOptionList(Action<MenuOptionHorizontal, string[]> orig, MenuOptionHorizontal self,
            string[] optionList)
        {
            Delegates.Params_SetOptionList @params = new()
            {
                self = self, optionList = optionList
            };
            _beforeSetOptionList?.Invoke(@params);
            self = @params.self;
            optionList = @params.optionList;
            orig(self, optionList);
            if (_afterSetOptionList != null) _afterSetOptionList.Invoke(@params);
        }

        internal static void HookGetSelectedOptionText()
        {
            if (!HookedList.Contains("GetSelectedOptionText"))
            {
                HookedList.Add("GetSelectedOptionText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "GetSelectedOptionText"),
                    GetSelectedOptionText);
            }
        }

        internal static event Delegates.GetSelectedOptionText_BeforeArgs _beforeGetSelectedOptionText;
        internal static event Delegates.GetSelectedOptionText_NormalArgs _afterGetSelectedOptionText;

        private static string GetSelectedOptionText(Func<MenuOptionHorizontal, string> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_GetSelectedOptionText @params = new()
            {
                self = self
            };
            _beforeGetSelectedOptionText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSelectedOptionText != null) retVal = _afterGetSelectedOptionText.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSelectedOptionTextRaw()
        {
            if (!HookedList.Contains("GetSelectedOptionTextRaw"))
            {
                HookedList.Add("GetSelectedOptionTextRaw");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "GetSelectedOptionTextRaw"),
                    GetSelectedOptionTextRaw);
            }
        }

        internal static event Delegates.GetSelectedOptionTextRaw_BeforeArgs _beforeGetSelectedOptionTextRaw;
        internal static event Delegates.GetSelectedOptionTextRaw_NormalArgs _afterGetSelectedOptionTextRaw;

        private static string GetSelectedOptionTextRaw(Func<MenuOptionHorizontal, string> orig,
            MenuOptionHorizontal self)
        {
            Delegates.Params_GetSelectedOptionTextRaw @params = new()
            {
                self = self
            };
            _beforeGetSelectedOptionTextRaw?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSelectedOptionTextRaw != null) retVal = _afterGetSelectedOptionTextRaw.Invoke(@params);
            return retVal;
        }

        internal static void HookSetOptionTo()
        {
            if (!HookedList.Contains("SetOptionTo"))
            {
                HookedList.Add("SetOptionTo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "SetOptionTo"), SetOptionTo);
            }
        }

        internal static event Delegates.SetOptionTo_BeforeArgs _beforeSetOptionTo;
        internal static event Delegates.SetOptionTo_NormalArgs _afterSetOptionTo;

        private static void SetOptionTo(Action<MenuOptionHorizontal, int> orig, MenuOptionHorizontal self,
            int optionNumber)
        {
            Delegates.Params_SetOptionTo @params = new()
            {
                self = self, optionNumber = optionNumber
            };
            _beforeSetOptionTo?.Invoke(@params);
            self = @params.self;
            optionNumber = @params.optionNumber;
            orig(self, optionNumber);
            if (_afterSetOptionTo != null) _afterSetOptionTo.Invoke(@params);
        }

        internal static void HookUpdateText()
        {
            if (!HookedList.Contains("UpdateText"))
            {
                HookedList.Add("UpdateText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "UpdateText"), UpdateText);
            }
        }

        internal static event Delegates.UpdateText_BeforeArgs _beforeUpdateText;
        internal static event Delegates.UpdateText_NormalArgs _afterUpdateText;

        private static void UpdateText(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_UpdateText @params = new()
            {
                self = self
            };
            _beforeUpdateText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateText != null) _afterUpdateText.Invoke(@params);
        }

        internal static void HookUpdateSetting()
        {
            if (!HookedList.Contains("UpdateSetting"))
            {
                HookedList.Add("UpdateSetting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "UpdateSetting"), UpdateSetting);
            }
        }

        internal static event Delegates.UpdateSetting_BeforeArgs _beforeUpdateSetting;
        internal static event Delegates.UpdateSetting_NormalArgs _afterUpdateSetting;

        private static void UpdateSetting(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_UpdateSetting @params = new()
            {
                self = self
            };
            _beforeUpdateSetting?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateSetting != null) _afterUpdateSetting.Invoke(@params);
        }

        internal static void HookDecrementOption()
        {
            if (!HookedList.Contains("DecrementOption"))
            {
                HookedList.Add("DecrementOption");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "DecrementOption"),
                    DecrementOption);
            }
        }

        internal static event Delegates.DecrementOption_BeforeArgs _beforeDecrementOption;
        internal static event Delegates.DecrementOption_NormalArgs _afterDecrementOption;

        private static void DecrementOption(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_DecrementOption @params = new()
            {
                self = self
            };
            _beforeDecrementOption?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDecrementOption != null) _afterDecrementOption.Invoke(@params);
        }

        internal static void HookIncrementOption()
        {
            if (!HookedList.Contains("IncrementOption"))
            {
                HookedList.Add("IncrementOption");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "IncrementOption"),
                    IncrementOption);
            }
        }

        internal static event Delegates.IncrementOption_BeforeArgs _beforeIncrementOption;
        internal static event Delegates.IncrementOption_NormalArgs _afterIncrementOption;

        private static void IncrementOption(Action<MenuOptionHorizontal> orig, MenuOptionHorizontal self)
        {
            Delegates.Params_IncrementOption @params = new()
            {
                self = self
            };
            _beforeIncrementOption?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterIncrementOption != null) _afterIncrementOption.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void DecrementOption_BeforeArgs(Params_DecrementOption args);

        public delegate void DecrementOption_NormalArgs(Params_DecrementOption args);

        public delegate void GetSelectedOptionText_BeforeArgs(Params_GetSelectedOptionText args);

        public delegate string GetSelectedOptionText_NormalArgs(Params_GetSelectedOptionText args);

        public delegate void GetSelectedOptionTextRaw_BeforeArgs(Params_GetSelectedOptionTextRaw args);

        public delegate string GetSelectedOptionTextRaw_NormalArgs(Params_GetSelectedOptionTextRaw args);

        public delegate void IncrementOption_BeforeArgs(Params_IncrementOption args);

        public delegate void IncrementOption_NormalArgs(Params_IncrementOption args);

        public delegate void IsInside_BeforeArgs(Params_IsInside args);

        public delegate bool IsInside_NormalArgs(Params_IsInside args);

        public delegate void MoveOption_BeforeArgs(Params_MoveOption args);

        public delegate bool MoveOption_NormalArgs(Params_MoveOption args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_NormalArgs(Params_OnMove args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void PointerClickCheckArrows_BeforeArgs(Params_PointerClickCheckArrows args);

        public delegate void PointerClickCheckArrows_NormalArgs(Params_PointerClickCheckArrows args);

        public delegate void SetOptionList_BeforeArgs(Params_SetOptionList args);

        public delegate void SetOptionList_NormalArgs(Params_SetOptionList args);

        public delegate void SetOptionTo_BeforeArgs(Params_SetOptionTo args);

        public delegate void SetOptionTo_NormalArgs(Params_SetOptionTo args);

        public delegate void UpdateSetting_BeforeArgs(Params_UpdateSetting args);

        public delegate void UpdateSetting_NormalArgs(Params_UpdateSetting args);

        public delegate void UpdateText_BeforeArgs(Params_UpdateText args);

        public delegate void UpdateText_NormalArgs(Params_UpdateText args);

        public sealed class Params_Awake
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_OnEnable
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_OnDisable
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_OnMove
        {
            public AxisEventData move;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_MoveOption
        {
            public MoveDirection dir;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_PointerClickCheckArrows
        {
            public PointerEventData eventData;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_IsInside
        {
            public PointerEventData eventData;
            public GameObject obj;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_SetOptionList
        {
            public string[] optionList;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_GetSelectedOptionText
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_GetSelectedOptionTextRaw
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_SetOptionTo
        {
            public int optionNumber;
            public MenuOptionHorizontal self;
        }

        public sealed class Params_UpdateText
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_UpdateSetting
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_DecrementOption
        {
            public MenuOptionHorizontal self;
        }

        public sealed class Params_IncrementOption
        {
            public MenuOptionHorizontal self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.MoveOption_BeforeArgs MoveOption
        {
            add
            {
                HookHandler._beforeMoveOption += value;
                HookHandler.HookMoveOption();
            }
            remove => HookHandler._beforeMoveOption -= value;
        }

        public static event Delegates.PointerClickCheckArrows_BeforeArgs PointerClickCheckArrows
        {
            add
            {
                HookHandler._beforePointerClickCheckArrows += value;
                HookHandler.HookPointerClickCheckArrows();
            }
            remove => HookHandler._beforePointerClickCheckArrows -= value;
        }

        public static event Delegates.IsInside_BeforeArgs IsInside
        {
            add
            {
                HookHandler._beforeIsInside += value;
                HookHandler.HookIsInside();
            }
            remove => HookHandler._beforeIsInside -= value;
        }

        public static event Delegates.SetOptionList_BeforeArgs SetOptionList
        {
            add
            {
                HookHandler._beforeSetOptionList += value;
                HookHandler.HookSetOptionList();
            }
            remove => HookHandler._beforeSetOptionList -= value;
        }

        public static event Delegates.GetSelectedOptionText_BeforeArgs GetSelectedOptionText
        {
            add
            {
                HookHandler._beforeGetSelectedOptionText += value;
                HookHandler.HookGetSelectedOptionText();
            }
            remove => HookHandler._beforeGetSelectedOptionText -= value;
        }

        public static event Delegates.GetSelectedOptionTextRaw_BeforeArgs GetSelectedOptionTextRaw
        {
            add
            {
                HookHandler._beforeGetSelectedOptionTextRaw += value;
                HookHandler.HookGetSelectedOptionTextRaw();
            }
            remove => HookHandler._beforeGetSelectedOptionTextRaw -= value;
        }

        public static event Delegates.SetOptionTo_BeforeArgs SetOptionTo
        {
            add
            {
                HookHandler._beforeSetOptionTo += value;
                HookHandler.HookSetOptionTo();
            }
            remove => HookHandler._beforeSetOptionTo -= value;
        }

        public static event Delegates.UpdateText_BeforeArgs UpdateText
        {
            add
            {
                HookHandler._beforeUpdateText += value;
                HookHandler.HookUpdateText();
            }
            remove => HookHandler._beforeUpdateText -= value;
        }

        public static event Delegates.UpdateSetting_BeforeArgs UpdateSetting
        {
            add
            {
                HookHandler._beforeUpdateSetting += value;
                HookHandler.HookUpdateSetting();
            }
            remove => HookHandler._beforeUpdateSetting -= value;
        }

        public static event Delegates.DecrementOption_BeforeArgs DecrementOption
        {
            add
            {
                HookHandler._beforeDecrementOption += value;
                HookHandler.HookDecrementOption();
            }
            remove => HookHandler._beforeDecrementOption -= value;
        }

        public static event Delegates.IncrementOption_BeforeArgs IncrementOption
        {
            add
            {
                HookHandler._beforeIncrementOption += value;
                HookHandler.HookIncrementOption();
            }
            remove => HookHandler._beforeIncrementOption -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.MoveOption_NormalArgs MoveOption
        {
            add
            {
                HookHandler._afterMoveOption += value;
                HookHandler.HookMoveOption();
            }
            remove => HookHandler._afterMoveOption -= value;
        }

        public static event Delegates.PointerClickCheckArrows_NormalArgs PointerClickCheckArrows
        {
            add
            {
                HookHandler._afterPointerClickCheckArrows += value;
                HookHandler.HookPointerClickCheckArrows();
            }
            remove => HookHandler._afterPointerClickCheckArrows -= value;
        }

        public static event Delegates.IsInside_NormalArgs IsInside
        {
            add
            {
                HookHandler._afterIsInside += value;
                HookHandler.HookIsInside();
            }
            remove => HookHandler._afterIsInside -= value;
        }

        public static event Delegates.SetOptionList_NormalArgs SetOptionList
        {
            add
            {
                HookHandler._afterSetOptionList += value;
                HookHandler.HookSetOptionList();
            }
            remove => HookHandler._afterSetOptionList -= value;
        }

        public static event Delegates.GetSelectedOptionText_NormalArgs GetSelectedOptionText
        {
            add
            {
                HookHandler._afterGetSelectedOptionText += value;
                HookHandler.HookGetSelectedOptionText();
            }
            remove => HookHandler._afterGetSelectedOptionText -= value;
        }

        public static event Delegates.GetSelectedOptionTextRaw_NormalArgs GetSelectedOptionTextRaw
        {
            add
            {
                HookHandler._afterGetSelectedOptionTextRaw += value;
                HookHandler.HookGetSelectedOptionTextRaw();
            }
            remove => HookHandler._afterGetSelectedOptionTextRaw -= value;
        }

        public static event Delegates.SetOptionTo_NormalArgs SetOptionTo
        {
            add
            {
                HookHandler._afterSetOptionTo += value;
                HookHandler.HookSetOptionTo();
            }
            remove => HookHandler._afterSetOptionTo -= value;
        }

        public static event Delegates.UpdateText_NormalArgs UpdateText
        {
            add
            {
                HookHandler._afterUpdateText += value;
                HookHandler.HookUpdateText();
            }
            remove => HookHandler._afterUpdateText -= value;
        }

        public static event Delegates.UpdateSetting_NormalArgs UpdateSetting
        {
            add
            {
                HookHandler._afterUpdateSetting += value;
                HookHandler.HookUpdateSetting();
            }
            remove => HookHandler._afterUpdateSetting -= value;
        }

        public static event Delegates.DecrementOption_NormalArgs DecrementOption
        {
            add
            {
                HookHandler._afterDecrementOption += value;
                HookHandler.HookDecrementOption();
            }
            remove => HookHandler._afterDecrementOption -= value;
        }

        public static event Delegates.IncrementOption_NormalArgs IncrementOption
        {
            add
            {
                HookHandler._afterIncrementOption += value;
                HookHandler.HookIncrementOption();
            }
            remove => HookHandler._afterIncrementOption -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "Awake"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnDisable"), value);
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnMove"), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnMove"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "OnPointerClick"), value);
        }

        public static event Delegates.MoveOption_NormalArgs MoveOption
        {
            add => HookEndpointManager.Add<Delegates.MoveOption_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "MoveOption"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveOption_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "MoveOption"), value);
        }

        public static event Delegates.PointerClickCheckArrows_NormalArgs PointerClickCheckArrows
        {
            add => HookEndpointManager.Add<Delegates.PointerClickCheckArrows_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "PointerClickCheckArrows"), value);
            remove => HookEndpointManager.Remove<Delegates.PointerClickCheckArrows_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "PointerClickCheckArrows"), value);
        }

        public static event Delegates.IsInside_NormalArgs IsInside
        {
            add => HookEndpointManager.Add<Delegates.IsInside_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "IsInside"), value);
            remove => HookEndpointManager.Remove<Delegates.IsInside_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "IsInside"), value);
        }

        public static event Delegates.SetOptionList_NormalArgs SetOptionList
        {
            add => HookEndpointManager.Add<Delegates.SetOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "SetOptionList"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "SetOptionList"), value);
        }

        public static event Delegates.GetSelectedOptionText_NormalArgs GetSelectedOptionText
        {
            add => HookEndpointManager.Add<Delegates.GetSelectedOptionText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "GetSelectedOptionText"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSelectedOptionText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "GetSelectedOptionText"), value);
        }

        public static event Delegates.GetSelectedOptionTextRaw_NormalArgs GetSelectedOptionTextRaw
        {
            add => HookEndpointManager.Add<Delegates.GetSelectedOptionTextRaw_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "GetSelectedOptionTextRaw"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSelectedOptionTextRaw_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "GetSelectedOptionTextRaw"), value);
        }

        public static event Delegates.SetOptionTo_NormalArgs SetOptionTo
        {
            add => HookEndpointManager.Add<Delegates.SetOptionTo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "SetOptionTo"), value);
            remove => HookEndpointManager.Remove<Delegates.SetOptionTo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "SetOptionTo"), value);
        }

        public static event Delegates.UpdateText_NormalArgs UpdateText
        {
            add => HookEndpointManager.Add<Delegates.UpdateText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "UpdateText"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "UpdateText"), value);
        }

        public static event Delegates.UpdateSetting_NormalArgs UpdateSetting
        {
            add => HookEndpointManager.Add<Delegates.UpdateSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "UpdateSetting"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "UpdateSetting"), value);
        }

        public static event Delegates.DecrementOption_NormalArgs DecrementOption
        {
            add => HookEndpointManager.Add<Delegates.DecrementOption_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "DecrementOption"), value);
            remove => HookEndpointManager.Remove<Delegates.DecrementOption_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "DecrementOption"), value);
        }

        public static event Delegates.IncrementOption_NormalArgs IncrementOption
        {
            add => HookEndpointManager.Add<Delegates.IncrementOption_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "IncrementOption"), value);
            remove => HookEndpointManager.Remove<Delegates.IncrementOption_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuOptionHorizontal), "IncrementOption"), value);
        }
    }
}