using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuStyleSetting class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuStyleSetting
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<MenuStyleSetting> orig, MenuStyleSetting self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnMove"), OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_AfterArgs _afterOnMove;

        private static void OnMove(Action<MenuStyleSetting, AxisEventData> orig, MenuStyleSetting self,
            AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            if (_beforeOnMove != null)
                foreach (Delegates.OnMove_BeforeArgs toInvoke in _beforeOnMove.GetInvocationList())
                    try
                    {
                        _beforeOnMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null)
                foreach (Delegates.OnMove_AfterArgs toInvoke in _afterOnMove.GetInvocationList())
                    try
                    {
                        _afterOnMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuStyleSetting, PointerEventData> orig, MenuStyleSetting self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateStyle()
        {
            if (!HookedList.Contains("UpdateStyle"))
            {
                HookedList.Add("UpdateStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "UpdateStyle"), UpdateStyle);
            }
        }

        internal static event Delegates.UpdateStyle_BeforeArgs _beforeUpdateStyle;
        internal static event Delegates.UpdateStyle_AfterArgs _afterUpdateStyle;

        private static void UpdateStyle(Action<MenuStyleSetting> orig, MenuStyleSetting self)
        {
            Delegates.Params_UpdateStyle @params = new()
            {
                self = self
            };
            if (_beforeUpdateStyle != null)
                foreach (Delegates.UpdateStyle_BeforeArgs toInvoke in _beforeUpdateStyle.GetInvocationList())
                    try
                    {
                        _beforeUpdateStyle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateStyle != null)
                foreach (Delegates.UpdateStyle_AfterArgs toInvoke in _afterUpdateStyle.GetInvocationList())
                    try
                    {
                        _afterUpdateStyle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<MenuStyleSetting> orig, MenuStyleSetting self);

        public delegate void OnMove_AfterArgs(Params_OnMove args);

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_WithArgs(Action<MenuStyleSetting, AxisEventData> orig, MenuStyleSetting self,
            AxisEventData move);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(Action<MenuStyleSetting, PointerEventData> orig,
            MenuStyleSetting self, PointerEventData eventData);

        public delegate void UpdateStyle_AfterArgs(Params_UpdateStyle args);

        public delegate void UpdateStyle_BeforeArgs(Params_UpdateStyle args);

        public delegate void UpdateStyle_WithArgs(Action<MenuStyleSetting> orig, MenuStyleSetting self);

        public sealed class Params_OnEnable
        {
            public MenuStyleSetting self;
        }

        public sealed class Params_OnMove
        {
            public AxisEventData move;
            public MenuStyleSetting self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuStyleSetting self;
        }

        public sealed class Params_UpdateStyle
        {
            public MenuStyleSetting self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.UpdateStyle_BeforeArgs UpdateStyle
        {
            add
            {
                HookHandler._beforeUpdateStyle += value;
                HookHandler.HookUpdateStyle();
            }
            remove => HookHandler._beforeUpdateStyle -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnMove_AfterArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.UpdateStyle_AfterArgs UpdateStyle
        {
            add
            {
                HookHandler._afterUpdateStyle += value;
                HookHandler.HookUpdateStyle();
            }
            remove => HookHandler._afterUpdateStyle -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnEnable"), value);
        }

        public static event Delegates.OnMove_WithArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnMove"), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnMove"), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "OnPointerClick"), value);
        }

        public static event Delegates.UpdateStyle_WithArgs UpdateStyle
        {
            add => HookEndpointManager.Add<Delegates.UpdateStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "UpdateStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuStyleSetting), "UpdateStyle"), value);
        }
    }
}