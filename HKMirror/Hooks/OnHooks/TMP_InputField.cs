using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_InputField class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_InputField
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_mesh()
        {
            if (!HookedList.Contains("get_mesh"))
            {
                HookedList.Add("get_mesh");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_mesh"), get_mesh);
            }
        }

        internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
        internal static event Delegates.get_mesh_NormalArgs _afterget_mesh;

        private static Mesh get_mesh(Func<TMP_InputField, Mesh> orig, TMP_InputField self)
        {
            Delegates.Params_get_mesh @params = new()
            {
                self = self
            };
            _beforeget_mesh?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_mesh != null) retVal = _afterget_mesh.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_shouldHideMobileInput()
        {
            if (!HookedList.Contains("set_shouldHideMobileInput"))
            {
                HookedList.Add("set_shouldHideMobileInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_shouldHideMobileInput"),
                    set_shouldHideMobileInput);
            }
        }

        internal static event Delegates.set_shouldHideMobileInput_BeforeArgs _beforeset_shouldHideMobileInput;
        internal static event Delegates.set_shouldHideMobileInput_NormalArgs _afterset_shouldHideMobileInput;

        private static void set_shouldHideMobileInput(Action<TMP_InputField, bool> orig, TMP_InputField self,
            bool value)
        {
            Delegates.Params_set_shouldHideMobileInput @params = new()
            {
                self = self, value = value
            };
            _beforeset_shouldHideMobileInput?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_shouldHideMobileInput != null) _afterset_shouldHideMobileInput.Invoke(@params);
        }

        internal static void Hookget_shouldHideMobileInput()
        {
            if (!HookedList.Contains("get_shouldHideMobileInput"))
            {
                HookedList.Add("get_shouldHideMobileInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_shouldHideMobileInput"),
                    get_shouldHideMobileInput);
            }
        }

        internal static event Delegates.get_shouldHideMobileInput_BeforeArgs _beforeget_shouldHideMobileInput;
        internal static event Delegates.get_shouldHideMobileInput_NormalArgs _afterget_shouldHideMobileInput;

        private static bool get_shouldHideMobileInput(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_shouldHideMobileInput @params = new()
            {
                self = self
            };
            _beforeget_shouldHideMobileInput?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_shouldHideMobileInput != null) retVal = _afterget_shouldHideMobileInput.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_text()
        {
            if (!HookedList.Contains("get_text"))
            {
                HookedList.Add("get_text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_text"), get_text);
            }
        }

        internal static event Delegates.get_text_BeforeArgs _beforeget_text;
        internal static event Delegates.get_text_NormalArgs _afterget_text;

        private static string get_text(Func<TMP_InputField, string> orig, TMP_InputField self)
        {
            Delegates.Params_get_text @params = new()
            {
                self = self
            };
            _beforeget_text?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_text != null) retVal = _afterget_text.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_text()
        {
            if (!HookedList.Contains("set_text"))
            {
                HookedList.Add("set_text");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_text"), set_text);
            }
        }

        internal static event Delegates.set_text_BeforeArgs _beforeset_text;
        internal static event Delegates.set_text_NormalArgs _afterset_text;

        private static void set_text(Action<TMP_InputField, string> orig, TMP_InputField self, string value)
        {
            Delegates.Params_set_text @params = new()
            {
                self = self, value = value
            };
            _beforeset_text?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_text != null) _afterset_text.Invoke(@params);
        }

        internal static void Hookget_isFocused()
        {
            if (!HookedList.Contains("get_isFocused"))
            {
                HookedList.Add("get_isFocused");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_isFocused"), get_isFocused);
            }
        }

        internal static event Delegates.get_isFocused_BeforeArgs _beforeget_isFocused;
        internal static event Delegates.get_isFocused_NormalArgs _afterget_isFocused;

        private static bool get_isFocused(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_isFocused @params = new()
            {
                self = self
            };
            _beforeget_isFocused?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_isFocused != null) retVal = _afterget_isFocused.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_caretBlinkRate()
        {
            if (!HookedList.Contains("get_caretBlinkRate"))
            {
                HookedList.Add("get_caretBlinkRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretBlinkRate"),
                    get_caretBlinkRate);
            }
        }

        internal static event Delegates.get_caretBlinkRate_BeforeArgs _beforeget_caretBlinkRate;
        internal static event Delegates.get_caretBlinkRate_NormalArgs _afterget_caretBlinkRate;

        private static float get_caretBlinkRate(Func<TMP_InputField, float> orig, TMP_InputField self)
        {
            Delegates.Params_get_caretBlinkRate @params = new()
            {
                self = self
            };
            _beforeget_caretBlinkRate?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_caretBlinkRate != null) retVal = _afterget_caretBlinkRate.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_caretBlinkRate()
        {
            if (!HookedList.Contains("set_caretBlinkRate"))
            {
                HookedList.Add("set_caretBlinkRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretBlinkRate"),
                    set_caretBlinkRate);
            }
        }

        internal static event Delegates.set_caretBlinkRate_BeforeArgs _beforeset_caretBlinkRate;
        internal static event Delegates.set_caretBlinkRate_NormalArgs _afterset_caretBlinkRate;

        private static void set_caretBlinkRate(Action<TMP_InputField, float> orig, TMP_InputField self, float value)
        {
            Delegates.Params_set_caretBlinkRate @params = new()
            {
                self = self, value = value
            };
            _beforeset_caretBlinkRate?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_caretBlinkRate != null) _afterset_caretBlinkRate.Invoke(@params);
        }

        internal static void Hookget_caretWidth()
        {
            if (!HookedList.Contains("get_caretWidth"))
            {
                HookedList.Add("get_caretWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretWidth"), get_caretWidth);
            }
        }

        internal static event Delegates.get_caretWidth_BeforeArgs _beforeget_caretWidth;
        internal static event Delegates.get_caretWidth_NormalArgs _afterget_caretWidth;

        private static int get_caretWidth(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_caretWidth @params = new()
            {
                self = self
            };
            _beforeget_caretWidth?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_caretWidth != null) retVal = _afterget_caretWidth.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_caretWidth()
        {
            if (!HookedList.Contains("set_caretWidth"))
            {
                HookedList.Add("set_caretWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretWidth"), set_caretWidth);
            }
        }

        internal static event Delegates.set_caretWidth_BeforeArgs _beforeset_caretWidth;
        internal static event Delegates.set_caretWidth_NormalArgs _afterset_caretWidth;

        private static void set_caretWidth(Action<TMP_InputField, int> orig, TMP_InputField self, int value)
        {
            Delegates.Params_set_caretWidth @params = new()
            {
                self = self, value = value
            };
            _beforeset_caretWidth?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_caretWidth != null) _afterset_caretWidth.Invoke(@params);
        }

        internal static void Hookget_textViewport()
        {
            if (!HookedList.Contains("get_textViewport"))
            {
                HookedList.Add("get_textViewport");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_textViewport"), get_textViewport);
            }
        }

        internal static event Delegates.get_textViewport_BeforeArgs _beforeget_textViewport;
        internal static event Delegates.get_textViewport_NormalArgs _afterget_textViewport;

        private static RectTransform get_textViewport(Func<TMP_InputField, RectTransform> orig, TMP_InputField self)
        {
            Delegates.Params_get_textViewport @params = new()
            {
                self = self
            };
            _beforeget_textViewport?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textViewport != null) retVal = _afterget_textViewport.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_textViewport()
        {
            if (!HookedList.Contains("set_textViewport"))
            {
                HookedList.Add("set_textViewport");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_textViewport"), set_textViewport);
            }
        }

        internal static event Delegates.set_textViewport_BeforeArgs _beforeset_textViewport;
        internal static event Delegates.set_textViewport_NormalArgs _afterset_textViewport;

        private static void set_textViewport(Action<TMP_InputField, RectTransform> orig, TMP_InputField self,
            RectTransform value)
        {
            Delegates.Params_set_textViewport @params = new()
            {
                self = self, value = value
            };
            _beforeset_textViewport?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_textViewport != null) _afterset_textViewport.Invoke(@params);
        }

        internal static void Hookget_textComponent()
        {
            if (!HookedList.Contains("get_textComponent"))
            {
                HookedList.Add("get_textComponent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_textComponent"),
                    get_textComponent);
            }
        }

        internal static event Delegates.get_textComponent_BeforeArgs _beforeget_textComponent;
        internal static event Delegates.get_textComponent_NormalArgs _afterget_textComponent;

        private static TMP_Text get_textComponent(Func<TMP_InputField, TMP_Text> orig, TMP_InputField self)
        {
            Delegates.Params_get_textComponent @params = new()
            {
                self = self
            };
            _beforeget_textComponent?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_textComponent != null) retVal = _afterget_textComponent.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_textComponent()
        {
            if (!HookedList.Contains("set_textComponent"))
            {
                HookedList.Add("set_textComponent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_textComponent"),
                    set_textComponent);
            }
        }

        internal static event Delegates.set_textComponent_BeforeArgs _beforeset_textComponent;
        internal static event Delegates.set_textComponent_NormalArgs _afterset_textComponent;

        private static void set_textComponent(Action<TMP_InputField, TMP_Text> orig, TMP_InputField self,
            TMP_Text value)
        {
            Delegates.Params_set_textComponent @params = new()
            {
                self = self, value = value
            };
            _beforeset_textComponent?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_textComponent != null) _afterset_textComponent.Invoke(@params);
        }

        internal static void Hookget_placeholder()
        {
            if (!HookedList.Contains("get_placeholder"))
            {
                HookedList.Add("get_placeholder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_placeholder"), get_placeholder);
            }
        }

        internal static event Delegates.get_placeholder_BeforeArgs _beforeget_placeholder;
        internal static event Delegates.get_placeholder_NormalArgs _afterget_placeholder;

        private static Graphic get_placeholder(Func<TMP_InputField, Graphic> orig, TMP_InputField self)
        {
            Delegates.Params_get_placeholder @params = new()
            {
                self = self
            };
            _beforeget_placeholder?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_placeholder != null) retVal = _afterget_placeholder.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_placeholder()
        {
            if (!HookedList.Contains("set_placeholder"))
            {
                HookedList.Add("set_placeholder");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_placeholder"), set_placeholder);
            }
        }

        internal static event Delegates.set_placeholder_BeforeArgs _beforeset_placeholder;
        internal static event Delegates.set_placeholder_NormalArgs _afterset_placeholder;

        private static void set_placeholder(Action<TMP_InputField, Graphic> orig, TMP_InputField self, Graphic value)
        {
            Delegates.Params_set_placeholder @params = new()
            {
                self = self, value = value
            };
            _beforeset_placeholder?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_placeholder != null) _afterset_placeholder.Invoke(@params);
        }

        internal static void Hookget_caretColor()
        {
            if (!HookedList.Contains("get_caretColor"))
            {
                HookedList.Add("get_caretColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretColor"), get_caretColor);
            }
        }

        internal static event Delegates.get_caretColor_BeforeArgs _beforeget_caretColor;
        internal static event Delegates.get_caretColor_NormalArgs _afterget_caretColor;

        private static Color get_caretColor(Func<TMP_InputField, Color> orig, TMP_InputField self)
        {
            Delegates.Params_get_caretColor @params = new()
            {
                self = self
            };
            _beforeget_caretColor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_caretColor != null) retVal = _afterget_caretColor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_caretColor()
        {
            if (!HookedList.Contains("set_caretColor"))
            {
                HookedList.Add("set_caretColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretColor"), set_caretColor);
            }
        }

        internal static event Delegates.set_caretColor_BeforeArgs _beforeset_caretColor;
        internal static event Delegates.set_caretColor_NormalArgs _afterset_caretColor;

        private static void set_caretColor(Action<TMP_InputField, Color> orig, TMP_InputField self, Color value)
        {
            Delegates.Params_set_caretColor @params = new()
            {
                self = self, value = value
            };
            _beforeset_caretColor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_caretColor != null) _afterset_caretColor.Invoke(@params);
        }

        internal static void Hookget_customCaretColor()
        {
            if (!HookedList.Contains("get_customCaretColor"))
            {
                HookedList.Add("get_customCaretColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_customCaretColor"),
                    get_customCaretColor);
            }
        }

        internal static event Delegates.get_customCaretColor_BeforeArgs _beforeget_customCaretColor;
        internal static event Delegates.get_customCaretColor_NormalArgs _afterget_customCaretColor;

        private static bool get_customCaretColor(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_customCaretColor @params = new()
            {
                self = self
            };
            _beforeget_customCaretColor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_customCaretColor != null) retVal = _afterget_customCaretColor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_customCaretColor()
        {
            if (!HookedList.Contains("set_customCaretColor"))
            {
                HookedList.Add("set_customCaretColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_customCaretColor"),
                    set_customCaretColor);
            }
        }

        internal static event Delegates.set_customCaretColor_BeforeArgs _beforeset_customCaretColor;
        internal static event Delegates.set_customCaretColor_NormalArgs _afterset_customCaretColor;

        private static void set_customCaretColor(Action<TMP_InputField, bool> orig, TMP_InputField self, bool value)
        {
            Delegates.Params_set_customCaretColor @params = new()
            {
                self = self, value = value
            };
            _beforeset_customCaretColor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_customCaretColor != null) _afterset_customCaretColor.Invoke(@params);
        }

        internal static void Hookget_selectionColor()
        {
            if (!HookedList.Contains("get_selectionColor"))
            {
                HookedList.Add("get_selectionColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionColor"),
                    get_selectionColor);
            }
        }

        internal static event Delegates.get_selectionColor_BeforeArgs _beforeget_selectionColor;
        internal static event Delegates.get_selectionColor_NormalArgs _afterget_selectionColor;

        private static Color get_selectionColor(Func<TMP_InputField, Color> orig, TMP_InputField self)
        {
            Delegates.Params_get_selectionColor @params = new()
            {
                self = self
            };
            _beforeget_selectionColor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_selectionColor != null) retVal = _afterget_selectionColor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_selectionColor()
        {
            if (!HookedList.Contains("set_selectionColor"))
            {
                HookedList.Add("set_selectionColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionColor"),
                    set_selectionColor);
            }
        }

        internal static event Delegates.set_selectionColor_BeforeArgs _beforeset_selectionColor;
        internal static event Delegates.set_selectionColor_NormalArgs _afterset_selectionColor;

        private static void set_selectionColor(Action<TMP_InputField, Color> orig, TMP_InputField self, Color value)
        {
            Delegates.Params_set_selectionColor @params = new()
            {
                self = self, value = value
            };
            _beforeset_selectionColor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_selectionColor != null) _afterset_selectionColor.Invoke(@params);
        }

        internal static void Hookget_characterLimit()
        {
            if (!HookedList.Contains("get_characterLimit"))
            {
                HookedList.Add("get_characterLimit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_characterLimit"),
                    get_characterLimit);
            }
        }

        internal static event Delegates.get_characterLimit_BeforeArgs _beforeget_characterLimit;
        internal static event Delegates.get_characterLimit_NormalArgs _afterget_characterLimit;

        private static int get_characterLimit(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_characterLimit @params = new()
            {
                self = self
            };
            _beforeget_characterLimit?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_characterLimit != null) retVal = _afterget_characterLimit.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_characterLimit()
        {
            if (!HookedList.Contains("set_characterLimit"))
            {
                HookedList.Add("set_characterLimit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_characterLimit"),
                    set_characterLimit);
            }
        }

        internal static event Delegates.set_characterLimit_BeforeArgs _beforeset_characterLimit;
        internal static event Delegates.set_characterLimit_NormalArgs _afterset_characterLimit;

        private static void set_characterLimit(Action<TMP_InputField, int> orig, TMP_InputField self, int value)
        {
            Delegates.Params_set_characterLimit @params = new()
            {
                self = self, value = value
            };
            _beforeset_characterLimit?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_characterLimit != null) _afterset_characterLimit.Invoke(@params);
        }

        internal static void Hookget_keyboardType()
        {
            if (!HookedList.Contains("get_keyboardType"))
            {
                HookedList.Add("get_keyboardType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_keyboardType"), get_keyboardType);
            }
        }

        internal static event Delegates.get_keyboardType_BeforeArgs _beforeget_keyboardType;
        internal static event Delegates.get_keyboardType_NormalArgs _afterget_keyboardType;

        private static TouchScreenKeyboardType get_keyboardType(Func<TMP_InputField, TouchScreenKeyboardType> orig,
            TMP_InputField self)
        {
            Delegates.Params_get_keyboardType @params = new()
            {
                self = self
            };
            _beforeget_keyboardType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_keyboardType != null) retVal = _afterget_keyboardType.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_keyboardType()
        {
            if (!HookedList.Contains("set_keyboardType"))
            {
                HookedList.Add("set_keyboardType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_keyboardType"), set_keyboardType);
            }
        }

        internal static event Delegates.set_keyboardType_BeforeArgs _beforeset_keyboardType;
        internal static event Delegates.set_keyboardType_NormalArgs _afterset_keyboardType;

        private static void set_keyboardType(Action<TMP_InputField, TouchScreenKeyboardType> orig, TMP_InputField self,
            TouchScreenKeyboardType value)
        {
            Delegates.Params_set_keyboardType @params = new()
            {
                self = self, value = value
            };
            _beforeset_keyboardType?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_keyboardType != null) _afterset_keyboardType.Invoke(@params);
        }

        internal static void Hookget_readOnly()
        {
            if (!HookedList.Contains("get_readOnly"))
            {
                HookedList.Add("get_readOnly");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_readOnly"), get_readOnly);
            }
        }

        internal static event Delegates.get_readOnly_BeforeArgs _beforeget_readOnly;
        internal static event Delegates.get_readOnly_NormalArgs _afterget_readOnly;

        private static bool get_readOnly(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_readOnly @params = new()
            {
                self = self
            };
            _beforeget_readOnly?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_readOnly != null) retVal = _afterget_readOnly.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_readOnly()
        {
            if (!HookedList.Contains("set_readOnly"))
            {
                HookedList.Add("set_readOnly");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_readOnly"), set_readOnly);
            }
        }

        internal static event Delegates.set_readOnly_BeforeArgs _beforeset_readOnly;
        internal static event Delegates.set_readOnly_NormalArgs _afterset_readOnly;

        private static void set_readOnly(Action<TMP_InputField, bool> orig, TMP_InputField self, bool value)
        {
            Delegates.Params_set_readOnly @params = new()
            {
                self = self, value = value
            };
            _beforeset_readOnly?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_readOnly != null) _afterset_readOnly.Invoke(@params);
        }

        internal static void Hookget_richText()
        {
            if (!HookedList.Contains("get_richText"))
            {
                HookedList.Add("get_richText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_richText"), get_richText);
            }
        }

        internal static event Delegates.get_richText_BeforeArgs _beforeget_richText;
        internal static event Delegates.get_richText_NormalArgs _afterget_richText;

        private static bool get_richText(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_richText @params = new()
            {
                self = self
            };
            _beforeget_richText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_richText != null) retVal = _afterget_richText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_richText()
        {
            if (!HookedList.Contains("set_richText"))
            {
                HookedList.Add("set_richText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_richText"), set_richText);
            }
        }

        internal static event Delegates.set_richText_BeforeArgs _beforeset_richText;
        internal static event Delegates.set_richText_NormalArgs _afterset_richText;

        private static void set_richText(Action<TMP_InputField, bool> orig, TMP_InputField self, bool value)
        {
            Delegates.Params_set_richText @params = new()
            {
                self = self, value = value
            };
            _beforeset_richText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_richText != null) _afterset_richText.Invoke(@params);
        }

        internal static void Hookget_multiLine()
        {
            if (!HookedList.Contains("get_multiLine"))
            {
                HookedList.Add("get_multiLine");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_multiLine"), get_multiLine);
            }
        }

        internal static event Delegates.get_multiLine_BeforeArgs _beforeget_multiLine;
        internal static event Delegates.get_multiLine_NormalArgs _afterget_multiLine;

        private static bool get_multiLine(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_multiLine @params = new()
            {
                self = self
            };
            _beforeget_multiLine?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_multiLine != null) retVal = _afterget_multiLine.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_asteriskChar()
        {
            if (!HookedList.Contains("get_asteriskChar"))
            {
                HookedList.Add("get_asteriskChar");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_asteriskChar"), get_asteriskChar);
            }
        }

        internal static event Delegates.get_asteriskChar_BeforeArgs _beforeget_asteriskChar;
        internal static event Delegates.get_asteriskChar_NormalArgs _afterget_asteriskChar;

        private static char get_asteriskChar(Func<TMP_InputField, char> orig, TMP_InputField self)
        {
            Delegates.Params_get_asteriskChar @params = new()
            {
                self = self
            };
            _beforeget_asteriskChar?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_asteriskChar != null) retVal = _afterget_asteriskChar.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_asteriskChar()
        {
            if (!HookedList.Contains("set_asteriskChar"))
            {
                HookedList.Add("set_asteriskChar");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_asteriskChar"), set_asteriskChar);
            }
        }

        internal static event Delegates.set_asteriskChar_BeforeArgs _beforeset_asteriskChar;
        internal static event Delegates.set_asteriskChar_NormalArgs _afterset_asteriskChar;

        private static void set_asteriskChar(Action<TMP_InputField, char> orig, TMP_InputField self, char value)
        {
            Delegates.Params_set_asteriskChar @params = new()
            {
                self = self, value = value
            };
            _beforeset_asteriskChar?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_asteriskChar != null) _afterset_asteriskChar.Invoke(@params);
        }

        internal static void Hookget_wasCanceled()
        {
            if (!HookedList.Contains("get_wasCanceled"))
            {
                HookedList.Add("get_wasCanceled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_wasCanceled"), get_wasCanceled);
            }
        }

        internal static event Delegates.get_wasCanceled_BeforeArgs _beforeget_wasCanceled;
        internal static event Delegates.get_wasCanceled_NormalArgs _afterget_wasCanceled;

        private static bool get_wasCanceled(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_wasCanceled @params = new()
            {
                self = self
            };
            _beforeget_wasCanceled?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_wasCanceled != null) retVal = _afterget_wasCanceled.Invoke(@params);
            return retVal;
        }

        internal static void HookClampPos()
        {
            if (!HookedList.Contains("ClampPos"))
            {
                HookedList.Add("ClampPos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ClampPos"), ClampPos);
            }
        }

        internal static event Delegates.ClampPos_BeforeArgs _beforeClampPos;
        internal static event Delegates.ClampPos_NormalArgs _afterClampPos;

        private static void ClampPos(Action<TMP_InputField, int> orig, TMP_InputField self, int pos)
        {
            Delegates.Params_ClampPos @params = new()
            {
                self = self, pos = pos
            };
            _beforeClampPos?.Invoke(@params);
            self = @params.self;
            pos = @params.pos;
            orig(self, pos);
            if (_afterClampPos != null) _afterClampPos.Invoke(@params);
        }

        internal static void Hookget_caretPositionInternal()
        {
            if (!HookedList.Contains("get_caretPositionInternal"))
            {
                HookedList.Add("get_caretPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretPositionInternal"),
                    get_caretPositionInternal);
            }
        }

        internal static event Delegates.get_caretPositionInternal_BeforeArgs _beforeget_caretPositionInternal;
        internal static event Delegates.get_caretPositionInternal_NormalArgs _afterget_caretPositionInternal;

        private static int get_caretPositionInternal(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_caretPositionInternal @params = new()
            {
                self = self
            };
            _beforeget_caretPositionInternal?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_caretPositionInternal != null) retVal = _afterget_caretPositionInternal.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_caretPositionInternal()
        {
            if (!HookedList.Contains("set_caretPositionInternal"))
            {
                HookedList.Add("set_caretPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretPositionInternal"),
                    set_caretPositionInternal);
            }
        }

        internal static event Delegates.set_caretPositionInternal_BeforeArgs _beforeset_caretPositionInternal;
        internal static event Delegates.set_caretPositionInternal_NormalArgs _afterset_caretPositionInternal;

        private static void set_caretPositionInternal(Action<TMP_InputField, int> orig, TMP_InputField self, int value)
        {
            Delegates.Params_set_caretPositionInternal @params = new()
            {
                self = self, value = value
            };
            _beforeset_caretPositionInternal?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_caretPositionInternal != null) _afterset_caretPositionInternal.Invoke(@params);
        }

        internal static void Hookget_stringPositionInternal()
        {
            if (!HookedList.Contains("get_stringPositionInternal"))
            {
                HookedList.Add("get_stringPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_stringPositionInternal"),
                    get_stringPositionInternal);
            }
        }

        internal static event Delegates.get_stringPositionInternal_BeforeArgs _beforeget_stringPositionInternal;
        internal static event Delegates.get_stringPositionInternal_NormalArgs _afterget_stringPositionInternal;

        private static int get_stringPositionInternal(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_stringPositionInternal @params = new()
            {
                self = self
            };
            _beforeget_stringPositionInternal?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_stringPositionInternal != null) retVal = _afterget_stringPositionInternal.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_stringPositionInternal()
        {
            if (!HookedList.Contains("set_stringPositionInternal"))
            {
                HookedList.Add("set_stringPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_stringPositionInternal"),
                    set_stringPositionInternal);
            }
        }

        internal static event Delegates.set_stringPositionInternal_BeforeArgs _beforeset_stringPositionInternal;
        internal static event Delegates.set_stringPositionInternal_NormalArgs _afterset_stringPositionInternal;

        private static void set_stringPositionInternal(Action<TMP_InputField, int> orig, TMP_InputField self, int value)
        {
            Delegates.Params_set_stringPositionInternal @params = new()
            {
                self = self, value = value
            };
            _beforeset_stringPositionInternal?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_stringPositionInternal != null) _afterset_stringPositionInternal.Invoke(@params);
        }

        internal static void Hookget_caretSelectPositionInternal()
        {
            if (!HookedList.Contains("get_caretSelectPositionInternal"))
            {
                HookedList.Add("get_caretSelectPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretSelectPositionInternal"),
                    get_caretSelectPositionInternal);
            }
        }

        internal static event Delegates.get_caretSelectPositionInternal_BeforeArgs
            _beforeget_caretSelectPositionInternal;

        internal static event Delegates.get_caretSelectPositionInternal_NormalArgs
            _afterget_caretSelectPositionInternal;

        private static int get_caretSelectPositionInternal(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_caretSelectPositionInternal @params = new()
            {
                self = self
            };
            _beforeget_caretSelectPositionInternal?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_caretSelectPositionInternal != null)
                retVal = _afterget_caretSelectPositionInternal.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_caretSelectPositionInternal()
        {
            if (!HookedList.Contains("set_caretSelectPositionInternal"))
            {
                HookedList.Add("set_caretSelectPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretSelectPositionInternal"),
                    set_caretSelectPositionInternal);
            }
        }

        internal static event Delegates.set_caretSelectPositionInternal_BeforeArgs
            _beforeset_caretSelectPositionInternal;

        internal static event Delegates.set_caretSelectPositionInternal_NormalArgs
            _afterset_caretSelectPositionInternal;

        private static void set_caretSelectPositionInternal(Action<TMP_InputField, int> orig, TMP_InputField self,
            int value)
        {
            Delegates.Params_set_caretSelectPositionInternal @params = new()
            {
                self = self, value = value
            };
            _beforeset_caretSelectPositionInternal?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_caretSelectPositionInternal != null) _afterset_caretSelectPositionInternal.Invoke(@params);
        }

        internal static void Hookget_stringSelectPositionInternal()
        {
            if (!HookedList.Contains("get_stringSelectPositionInternal"))
            {
                HookedList.Add("get_stringSelectPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_stringSelectPositionInternal"),
                    get_stringSelectPositionInternal);
            }
        }

        internal static event Delegates.get_stringSelectPositionInternal_BeforeArgs
            _beforeget_stringSelectPositionInternal;

        internal static event Delegates.get_stringSelectPositionInternal_NormalArgs
            _afterget_stringSelectPositionInternal;

        private static int get_stringSelectPositionInternal(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_stringSelectPositionInternal @params = new()
            {
                self = self
            };
            _beforeget_stringSelectPositionInternal?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_stringSelectPositionInternal != null)
                retVal = _afterget_stringSelectPositionInternal.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_stringSelectPositionInternal()
        {
            if (!HookedList.Contains("set_stringSelectPositionInternal"))
            {
                HookedList.Add("set_stringSelectPositionInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_stringSelectPositionInternal"),
                    set_stringSelectPositionInternal);
            }
        }

        internal static event Delegates.set_stringSelectPositionInternal_BeforeArgs
            _beforeset_stringSelectPositionInternal;

        internal static event Delegates.set_stringSelectPositionInternal_NormalArgs
            _afterset_stringSelectPositionInternal;

        private static void set_stringSelectPositionInternal(Action<TMP_InputField, int> orig, TMP_InputField self,
            int value)
        {
            Delegates.Params_set_stringSelectPositionInternal @params = new()
            {
                self = self, value = value
            };
            _beforeset_stringSelectPositionInternal?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_stringSelectPositionInternal != null) _afterset_stringSelectPositionInternal.Invoke(@params);
        }

        internal static void Hookget_hasSelection()
        {
            if (!HookedList.Contains("get_hasSelection"))
            {
                HookedList.Add("get_hasSelection");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_hasSelection"), get_hasSelection);
            }
        }

        internal static event Delegates.get_hasSelection_BeforeArgs _beforeget_hasSelection;
        internal static event Delegates.get_hasSelection_NormalArgs _afterget_hasSelection;

        private static bool get_hasSelection(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_get_hasSelection @params = new()
            {
                self = self
            };
            _beforeget_hasSelection?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_hasSelection != null) retVal = _afterget_hasSelection.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_caretPosition()
        {
            if (!HookedList.Contains("get_caretPosition"))
            {
                HookedList.Add("get_caretPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretPosition"),
                    get_caretPosition);
            }
        }

        internal static event Delegates.get_caretPosition_BeforeArgs _beforeget_caretPosition;
        internal static event Delegates.get_caretPosition_NormalArgs _afterget_caretPosition;

        private static int get_caretPosition(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_caretPosition @params = new()
            {
                self = self
            };
            _beforeget_caretPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_caretPosition != null) retVal = _afterget_caretPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_caretPosition()
        {
            if (!HookedList.Contains("set_caretPosition"))
            {
                HookedList.Add("set_caretPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretPosition"),
                    set_caretPosition);
            }
        }

        internal static event Delegates.set_caretPosition_BeforeArgs _beforeset_caretPosition;
        internal static event Delegates.set_caretPosition_NormalArgs _afterset_caretPosition;

        private static void set_caretPosition(Action<TMP_InputField, int> orig, TMP_InputField self, int value)
        {
            Delegates.Params_set_caretPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_caretPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_caretPosition != null) _afterset_caretPosition.Invoke(@params);
        }

        internal static void Hookget_selectionAnchorPosition()
        {
            if (!HookedList.Contains("get_selectionAnchorPosition"))
            {
                HookedList.Add("get_selectionAnchorPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionAnchorPosition"),
                    get_selectionAnchorPosition);
            }
        }

        internal static event Delegates.get_selectionAnchorPosition_BeforeArgs _beforeget_selectionAnchorPosition;
        internal static event Delegates.get_selectionAnchorPosition_NormalArgs _afterget_selectionAnchorPosition;

        private static int get_selectionAnchorPosition(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_selectionAnchorPosition @params = new()
            {
                self = self
            };
            _beforeget_selectionAnchorPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_selectionAnchorPosition != null) retVal = _afterget_selectionAnchorPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_selectionAnchorPosition()
        {
            if (!HookedList.Contains("set_selectionAnchorPosition"))
            {
                HookedList.Add("set_selectionAnchorPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionAnchorPosition"),
                    set_selectionAnchorPosition);
            }
        }

        internal static event Delegates.set_selectionAnchorPosition_BeforeArgs _beforeset_selectionAnchorPosition;
        internal static event Delegates.set_selectionAnchorPosition_NormalArgs _afterset_selectionAnchorPosition;

        private static void set_selectionAnchorPosition(Action<TMP_InputField, int> orig, TMP_InputField self,
            int value)
        {
            Delegates.Params_set_selectionAnchorPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_selectionAnchorPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_selectionAnchorPosition != null) _afterset_selectionAnchorPosition.Invoke(@params);
        }

        internal static void Hookget_selectionFocusPosition()
        {
            if (!HookedList.Contains("get_selectionFocusPosition"))
            {
                HookedList.Add("get_selectionFocusPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionFocusPosition"),
                    get_selectionFocusPosition);
            }
        }

        internal static event Delegates.get_selectionFocusPosition_BeforeArgs _beforeget_selectionFocusPosition;
        internal static event Delegates.get_selectionFocusPosition_NormalArgs _afterget_selectionFocusPosition;

        private static int get_selectionFocusPosition(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_get_selectionFocusPosition @params = new()
            {
                self = self
            };
            _beforeget_selectionFocusPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_selectionFocusPosition != null) retVal = _afterget_selectionFocusPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_selectionFocusPosition()
        {
            if (!HookedList.Contains("set_selectionFocusPosition"))
            {
                HookedList.Add("set_selectionFocusPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionFocusPosition"),
                    set_selectionFocusPosition);
            }
        }

        internal static event Delegates.set_selectionFocusPosition_BeforeArgs _beforeset_selectionFocusPosition;
        internal static event Delegates.set_selectionFocusPosition_NormalArgs _afterset_selectionFocusPosition;

        private static void set_selectionFocusPosition(Action<TMP_InputField, int> orig, TMP_InputField self, int value)
        {
            Delegates.Params_set_selectionFocusPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_selectionFocusPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_selectionFocusPosition != null) _afterset_selectionFocusPosition.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDisable"), OnDisable);
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookCaretBlink()
        {
            if (!HookedList.Contains("CaretBlink"))
            {
                HookedList.Add("CaretBlink");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "CaretBlink"), CaretBlink);
            }
        }

        internal static event Delegates.CaretBlink_BeforeArgs _beforeCaretBlink;

        private static IEnumerator CaretBlink(Func<TMP_InputField, IEnumerator> orig, TMP_InputField self)
        {
            Delegates.Params_CaretBlink @params = new()
            {
                self = self
            };
            _beforeCaretBlink?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookSetCaretVisible()
        {
            if (!HookedList.Contains("SetCaretVisible"))
            {
                HookedList.Add("SetCaretVisible");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetCaretVisible"), SetCaretVisible);
            }
        }

        internal static event Delegates.SetCaretVisible_BeforeArgs _beforeSetCaretVisible;
        internal static event Delegates.SetCaretVisible_NormalArgs _afterSetCaretVisible;

        private static void SetCaretVisible(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SetCaretVisible @params = new()
            {
                self = self
            };
            _beforeSetCaretVisible?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCaretVisible != null) _afterSetCaretVisible.Invoke(@params);
        }

        internal static void HookSetCaretActive()
        {
            if (!HookedList.Contains("SetCaretActive"))
            {
                HookedList.Add("SetCaretActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetCaretActive"), SetCaretActive);
            }
        }

        internal static event Delegates.SetCaretActive_BeforeArgs _beforeSetCaretActive;
        internal static event Delegates.SetCaretActive_NormalArgs _afterSetCaretActive;

        private static void SetCaretActive(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SetCaretActive @params = new()
            {
                self = self
            };
            _beforeSetCaretActive?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetCaretActive != null) _afterSetCaretActive.Invoke(@params);
        }

        internal static void HookOnFocus()
        {
            if (!HookedList.Contains("OnFocus"))
            {
                HookedList.Add("OnFocus");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnFocus"), OnFocus);
            }
        }

        internal static event Delegates.OnFocus_BeforeArgs _beforeOnFocus;
        internal static event Delegates.OnFocus_NormalArgs _afterOnFocus;

        private static void OnFocus(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_OnFocus @params = new()
            {
                self = self
            };
            _beforeOnFocus?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnFocus != null) _afterOnFocus.Invoke(@params);
        }

        internal static void HookSelectAll()
        {
            if (!HookedList.Contains("SelectAll"))
            {
                HookedList.Add("SelectAll");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SelectAll"), SelectAll);
            }
        }

        internal static event Delegates.SelectAll_BeforeArgs _beforeSelectAll;
        internal static event Delegates.SelectAll_NormalArgs _afterSelectAll;

        private static void SelectAll(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SelectAll @params = new()
            {
                self = self
            };
            _beforeSelectAll?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSelectAll != null) _afterSelectAll.Invoke(@params);
        }

        internal static void HookMoveTextEnd()
        {
            if (!HookedList.Contains("MoveTextEnd"))
            {
                HookedList.Add("MoveTextEnd");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveTextEnd"), MoveTextEnd);
            }
        }

        internal static event Delegates.MoveTextEnd_BeforeArgs _beforeMoveTextEnd;
        internal static event Delegates.MoveTextEnd_NormalArgs _afterMoveTextEnd;

        private static void MoveTextEnd(Action<TMP_InputField, bool> orig, TMP_InputField self, bool shift)
        {
            Delegates.Params_MoveTextEnd @params = new()
            {
                self = self, shift = shift
            };
            _beforeMoveTextEnd?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            orig(self, shift);
            if (_afterMoveTextEnd != null) _afterMoveTextEnd.Invoke(@params);
        }

        internal static void HookMoveTextStart()
        {
            if (!HookedList.Contains("MoveTextStart"))
            {
                HookedList.Add("MoveTextStart");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveTextStart"), MoveTextStart);
            }
        }

        internal static event Delegates.MoveTextStart_BeforeArgs _beforeMoveTextStart;
        internal static event Delegates.MoveTextStart_NormalArgs _afterMoveTextStart;

        private static void MoveTextStart(Action<TMP_InputField, bool> orig, TMP_InputField self, bool shift)
        {
            Delegates.Params_MoveTextStart @params = new()
            {
                self = self, shift = shift
            };
            _beforeMoveTextStart?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            orig(self, shift);
            if (_afterMoveTextStart != null) _afterMoveTextStart.Invoke(@params);
        }

        internal static void Hookget_clipboard()
        {
            if (!HookedList.Contains("get_clipboard"))
            {
                HookedList.Add("get_clipboard");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_clipboard", false), get_clipboard);
            }
        }

        internal static event Delegates.get_clipboard_BeforeArgs _beforeget_clipboard;
        internal static event Delegates.get_clipboard_NormalArgs _afterget_clipboard;

        private static string get_clipboard(Func<string> orig)
        {
            _beforeget_clipboard?.Invoke();
            var retVal = orig();
            if (_afterget_clipboard != null) retVal = _afterget_clipboard.Invoke();
            return retVal;
        }

        internal static void Hookset_clipboard()
        {
            if (!HookedList.Contains("set_clipboard"))
            {
                HookedList.Add("set_clipboard");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_clipboard", false), set_clipboard);
            }
        }

        internal static event Delegates.set_clipboard_BeforeArgs _beforeset_clipboard;
        internal static event Delegates.set_clipboard_NormalArgs _afterset_clipboard;

        private static void set_clipboard(Action<string> orig, string value)
        {
            Delegates.Params_set_clipboard @params = new()
            {
                value = value
            };
            _beforeset_clipboard?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_clipboard != null) _afterset_clipboard.Invoke(@params);
        }

        internal static void HookInPlaceEditing()
        {
            if (!HookedList.Contains("InPlaceEditing"))
            {
                HookedList.Add("InPlaceEditing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "InPlaceEditing"), InPlaceEditing);
            }
        }

        internal static event Delegates.InPlaceEditing_BeforeArgs _beforeInPlaceEditing;
        internal static event Delegates.InPlaceEditing_NormalArgs _afterInPlaceEditing;

        private static bool InPlaceEditing(Func<TMP_InputField, bool> orig, TMP_InputField self)
        {
            Delegates.Params_InPlaceEditing @params = new()
            {
                self = self
            };
            _beforeInPlaceEditing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterInPlaceEditing != null) retVal = _afterInPlaceEditing.Invoke(@params);
            return retVal;
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LateUpdate"), LateUpdate);
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookGetCharacterIndexFromPosition()
        {
            if (!HookedList.Contains("GetCharacterIndexFromPosition"))
            {
                HookedList.Add("GetCharacterIndexFromPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetCharacterIndexFromPosition"),
                    GetCharacterIndexFromPosition);
            }
        }

        internal static event Delegates.GetCharacterIndexFromPosition_BeforeArgs _beforeGetCharacterIndexFromPosition;
        internal static event Delegates.GetCharacterIndexFromPosition_NormalArgs _afterGetCharacterIndexFromPosition;

        private static int GetCharacterIndexFromPosition(Func<TMP_InputField, Vector2, int> orig, TMP_InputField self,
            Vector2 pos)
        {
            Delegates.Params_GetCharacterIndexFromPosition @params = new()
            {
                self = self, pos = pos
            };
            _beforeGetCharacterIndexFromPosition?.Invoke(@params);
            self = @params.self;
            pos = @params.pos;
            var retVal = orig(self, pos);
            if (_afterGetCharacterIndexFromPosition != null)
                retVal = _afterGetCharacterIndexFromPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookMayDrag()
        {
            if (!HookedList.Contains("MayDrag"))
            {
                HookedList.Add("MayDrag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MayDrag"), MayDrag);
            }
        }

        internal static event Delegates.MayDrag_BeforeArgs _beforeMayDrag;
        internal static event Delegates.MayDrag_NormalArgs _afterMayDrag;

        private static bool MayDrag(Func<TMP_InputField, PointerEventData, bool> orig, TMP_InputField self,
            PointerEventData eventData)
        {
            Delegates.Params_MayDrag @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeMayDrag?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            var retVal = orig(self, eventData);
            if (_afterMayDrag != null) retVal = _afterMayDrag.Invoke(@params);
            return retVal;
        }

        internal static void HookOnBeginDrag()
        {
            if (!HookedList.Contains("OnBeginDrag"))
            {
                HookedList.Add("OnBeginDrag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnBeginDrag"), OnBeginDrag);
            }
        }

        internal static event Delegates.OnBeginDrag_BeforeArgs _beforeOnBeginDrag;
        internal static event Delegates.OnBeginDrag_NormalArgs _afterOnBeginDrag;

        private static void OnBeginDrag(Action<TMP_InputField, PointerEventData> orig, TMP_InputField self,
            PointerEventData eventData)
        {
            Delegates.Params_OnBeginDrag @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnBeginDrag?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnBeginDrag != null) _afterOnBeginDrag.Invoke(@params);
        }

        internal static void HookOnDrag()
        {
            if (!HookedList.Contains("OnDrag"))
            {
                HookedList.Add("OnDrag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDrag"), OnDrag);
            }
        }

        internal static event Delegates.OnDrag_BeforeArgs _beforeOnDrag;
        internal static event Delegates.OnDrag_NormalArgs _afterOnDrag;

        private static void OnDrag(Action<TMP_InputField, PointerEventData> orig, TMP_InputField self,
            PointerEventData eventData)
        {
            Delegates.Params_OnDrag @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnDrag?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDrag != null) _afterOnDrag.Invoke(@params);
        }

        internal static void HookMouseDragOutsideRect()
        {
            if (!HookedList.Contains("MouseDragOutsideRect"))
            {
                HookedList.Add("MouseDragOutsideRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MouseDragOutsideRect"),
                    MouseDragOutsideRect);
            }
        }

        internal static event Delegates.MouseDragOutsideRect_BeforeArgs _beforeMouseDragOutsideRect;

        private static IEnumerator MouseDragOutsideRect(Func<TMP_InputField, PointerEventData, IEnumerator> orig,
            TMP_InputField self, PointerEventData eventData)
        {
            Delegates.Params_MouseDragOutsideRect @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeMouseDragOutsideRect?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            return orig(self, eventData);
        }

        internal static void HookOnEndDrag()
        {
            if (!HookedList.Contains("OnEndDrag"))
            {
                HookedList.Add("OnEndDrag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnEndDrag"), OnEndDrag);
            }
        }

        internal static event Delegates.OnEndDrag_BeforeArgs _beforeOnEndDrag;
        internal static event Delegates.OnEndDrag_NormalArgs _afterOnEndDrag;

        private static void OnEndDrag(Action<TMP_InputField, PointerEventData> orig, TMP_InputField self,
            PointerEventData eventData)
        {
            Delegates.Params_OnEndDrag @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnEndDrag?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnEndDrag != null) _afterOnEndDrag.Invoke(@params);
        }

        internal static void HookOnPointerDown()
        {
            if (!HookedList.Contains("OnPointerDown"))
            {
                HookedList.Add("OnPointerDown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnPointerDown"), OnPointerDown);
            }
        }

        internal static event Delegates.OnPointerDown_BeforeArgs _beforeOnPointerDown;
        internal static event Delegates.OnPointerDown_NormalArgs _afterOnPointerDown;

        private static void OnPointerDown(Action<TMP_InputField, PointerEventData> orig, TMP_InputField self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerDown @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerDown?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerDown != null) _afterOnPointerDown.Invoke(@params);
        }

        internal static void HookIsValidChar()
        {
            if (!HookedList.Contains("IsValidChar"))
            {
                HookedList.Add("IsValidChar");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "IsValidChar"), IsValidChar);
            }
        }

        internal static event Delegates.IsValidChar_BeforeArgs _beforeIsValidChar;
        internal static event Delegates.IsValidChar_NormalArgs _afterIsValidChar;

        private static bool IsValidChar(Func<TMP_InputField, char, bool> orig, TMP_InputField self, char c)
        {
            Delegates.Params_IsValidChar @params = new()
            {
                self = self, c = c
            };
            _beforeIsValidChar?.Invoke(@params);
            self = @params.self;
            c = @params.c;
            var retVal = orig(self, c);
            if (_afterIsValidChar != null) retVal = _afterIsValidChar.Invoke(@params);
            return retVal;
        }

        internal static void HookProcessEvent()
        {
            if (!HookedList.Contains("ProcessEvent"))
            {
                HookedList.Add("ProcessEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ProcessEvent"), ProcessEvent);
            }
        }

        internal static event Delegates.ProcessEvent_BeforeArgs _beforeProcessEvent;
        internal static event Delegates.ProcessEvent_NormalArgs _afterProcessEvent;

        private static void ProcessEvent(Action<TMP_InputField, Event> orig, TMP_InputField self, Event e)
        {
            Delegates.Params_ProcessEvent @params = new()
            {
                self = self, e = e
            };
            _beforeProcessEvent?.Invoke(@params);
            self = @params.self;
            e = @params.e;
            orig(self, e);
            if (_afterProcessEvent != null) _afterProcessEvent.Invoke(@params);
        }

        internal static void HookOnUpdateSelected()
        {
            if (!HookedList.Contains("OnUpdateSelected"))
            {
                HookedList.Add("OnUpdateSelected");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnUpdateSelected"), OnUpdateSelected);
            }
        }

        internal static event Delegates.OnUpdateSelected_BeforeArgs _beforeOnUpdateSelected;
        internal static event Delegates.OnUpdateSelected_NormalArgs _afterOnUpdateSelected;

        private static void OnUpdateSelected(Action<TMP_InputField, BaseEventData> orig, TMP_InputField self,
            BaseEventData eventData)
        {
            Delegates.Params_OnUpdateSelected @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnUpdateSelected?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnUpdateSelected != null) _afterOnUpdateSelected.Invoke(@params);
        }

        internal static void HookGetSelectedString()
        {
            if (!HookedList.Contains("GetSelectedString"))
            {
                HookedList.Add("GetSelectedString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetSelectedString"),
                    GetSelectedString);
            }
        }

        internal static event Delegates.GetSelectedString_BeforeArgs _beforeGetSelectedString;
        internal static event Delegates.GetSelectedString_NormalArgs _afterGetSelectedString;

        private static string GetSelectedString(Func<TMP_InputField, string> orig, TMP_InputField self)
        {
            Delegates.Params_GetSelectedString @params = new()
            {
                self = self
            };
            _beforeGetSelectedString?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetSelectedString != null) retVal = _afterGetSelectedString.Invoke(@params);
            return retVal;
        }

        internal static void HookFindtNextWordBegin()
        {
            if (!HookedList.Contains("FindtNextWordBegin"))
            {
                HookedList.Add("FindtNextWordBegin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "FindtNextWordBegin"),
                    FindtNextWordBegin);
            }
        }

        internal static event Delegates.FindtNextWordBegin_BeforeArgs _beforeFindtNextWordBegin;
        internal static event Delegates.FindtNextWordBegin_NormalArgs _afterFindtNextWordBegin;

        private static int FindtNextWordBegin(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_FindtNextWordBegin @params = new()
            {
                self = self
            };
            _beforeFindtNextWordBegin?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterFindtNextWordBegin != null) retVal = _afterFindtNextWordBegin.Invoke(@params);
            return retVal;
        }

        internal static void HookMoveRight()
        {
            if (!HookedList.Contains("MoveRight"))
            {
                HookedList.Add("MoveRight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveRight"), MoveRight);
            }
        }

        internal static event Delegates.MoveRight_BeforeArgs _beforeMoveRight;
        internal static event Delegates.MoveRight_NormalArgs _afterMoveRight;

        private static void MoveRight(Action<TMP_InputField, bool, bool> orig, TMP_InputField self, bool shift,
            bool ctrl)
        {
            Delegates.Params_MoveRight @params = new()
            {
                self = self, shift = shift, ctrl = ctrl
            };
            _beforeMoveRight?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            ctrl = @params.ctrl;
            orig(self, shift, ctrl);
            if (_afterMoveRight != null) _afterMoveRight.Invoke(@params);
        }

        internal static void HookFindtPrevWordBegin()
        {
            if (!HookedList.Contains("FindtPrevWordBegin"))
            {
                HookedList.Add("FindtPrevWordBegin");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "FindtPrevWordBegin"),
                    FindtPrevWordBegin);
            }
        }

        internal static event Delegates.FindtPrevWordBegin_BeforeArgs _beforeFindtPrevWordBegin;
        internal static event Delegates.FindtPrevWordBegin_NormalArgs _afterFindtPrevWordBegin;

        private static int FindtPrevWordBegin(Func<TMP_InputField, int> orig, TMP_InputField self)
        {
            Delegates.Params_FindtPrevWordBegin @params = new()
            {
                self = self
            };
            _beforeFindtPrevWordBegin?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterFindtPrevWordBegin != null) retVal = _afterFindtPrevWordBegin.Invoke(@params);
            return retVal;
        }

        internal static void HookMoveLeft()
        {
            if (!HookedList.Contains("MoveLeft"))
            {
                HookedList.Add("MoveLeft");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveLeft"), MoveLeft);
            }
        }

        internal static event Delegates.MoveLeft_BeforeArgs _beforeMoveLeft;
        internal static event Delegates.MoveLeft_NormalArgs _afterMoveLeft;

        private static void MoveLeft(Action<TMP_InputField, bool, bool> orig, TMP_InputField self, bool shift,
            bool ctrl)
        {
            Delegates.Params_MoveLeft @params = new()
            {
                self = self, shift = shift, ctrl = ctrl
            };
            _beforeMoveLeft?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            ctrl = @params.ctrl;
            orig(self, shift, ctrl);
            if (_afterMoveLeft != null) _afterMoveLeft.Invoke(@params);
        }

        internal static void HookLineUpCharacterPosition()
        {
            if (!HookedList.Contains("LineUpCharacterPosition"))
            {
                HookedList.Add("LineUpCharacterPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LineUpCharacterPosition"),
                    LineUpCharacterPosition);
            }
        }

        internal static event Delegates.LineUpCharacterPosition_BeforeArgs _beforeLineUpCharacterPosition;
        internal static event Delegates.LineUpCharacterPosition_NormalArgs _afterLineUpCharacterPosition;

        private static int LineUpCharacterPosition(Func<TMP_InputField, int, bool, int> orig, TMP_InputField self,
            int originalPos, bool goToFirstChar)
        {
            Delegates.Params_LineUpCharacterPosition @params = new()
            {
                self = self, originalPos = originalPos, goToFirstChar = goToFirstChar
            };
            _beforeLineUpCharacterPosition?.Invoke(@params);
            self = @params.self;
            originalPos = @params.originalPos;
            goToFirstChar = @params.goToFirstChar;
            var retVal = orig(self, originalPos, goToFirstChar);
            if (_afterLineUpCharacterPosition != null) retVal = _afterLineUpCharacterPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookLineDownCharacterPosition()
        {
            if (!HookedList.Contains("LineDownCharacterPosition"))
            {
                HookedList.Add("LineDownCharacterPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LineDownCharacterPosition"),
                    LineDownCharacterPosition);
            }
        }

        internal static event Delegates.LineDownCharacterPosition_BeforeArgs _beforeLineDownCharacterPosition;
        internal static event Delegates.LineDownCharacterPosition_NormalArgs _afterLineDownCharacterPosition;

        private static int LineDownCharacterPosition(Func<TMP_InputField, int, bool, int> orig, TMP_InputField self,
            int originalPos, bool goToLastChar)
        {
            Delegates.Params_LineDownCharacterPosition @params = new()
            {
                self = self, originalPos = originalPos, goToLastChar = goToLastChar
            };
            _beforeLineDownCharacterPosition?.Invoke(@params);
            self = @params.self;
            originalPos = @params.originalPos;
            goToLastChar = @params.goToLastChar;
            var retVal = orig(self, originalPos, goToLastChar);
            if (_afterLineDownCharacterPosition != null) retVal = _afterLineDownCharacterPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookMoveDown_bool()
        {
            if (!HookedList.Contains("MoveDown_bool"))
            {
                HookedList.Add("MoveDown_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveDown_bool"), MoveDown_bool);
            }
        }

        internal static event Delegates.MoveDown_bool_BeforeArgs _beforeMoveDown_bool;
        internal static event Delegates.MoveDown_bool_NormalArgs _afterMoveDown_bool;

        private static void MoveDown_bool(Action<TMP_InputField, bool> orig, TMP_InputField self, bool shift)
        {
            Delegates.Params_MoveDown_bool @params = new()
            {
                self = self, shift = shift
            };
            _beforeMoveDown_bool?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            orig(self, shift);
            if (_afterMoveDown_bool != null) _afterMoveDown_bool.Invoke(@params);
        }

        internal static void HookMoveDown_bool_bool()
        {
            if (!HookedList.Contains("MoveDown_bool_bool"))
            {
                HookedList.Add("MoveDown_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveDown_bool_bool"),
                    MoveDown_bool_bool);
            }
        }

        internal static event Delegates.MoveDown_bool_bool_BeforeArgs _beforeMoveDown_bool_bool;
        internal static event Delegates.MoveDown_bool_bool_NormalArgs _afterMoveDown_bool_bool;

        private static void MoveDown_bool_bool(Action<TMP_InputField, bool, bool> orig, TMP_InputField self, bool shift,
            bool goToLastChar)
        {
            Delegates.Params_MoveDown_bool_bool @params = new()
            {
                self = self, shift = shift, goToLastChar = goToLastChar
            };
            _beforeMoveDown_bool_bool?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            goToLastChar = @params.goToLastChar;
            orig(self, shift, goToLastChar);
            if (_afterMoveDown_bool_bool != null) _afterMoveDown_bool_bool.Invoke(@params);
        }

        internal static void HookMoveUp_bool()
        {
            if (!HookedList.Contains("MoveUp_bool"))
            {
                HookedList.Add("MoveUp_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveUp_bool"), MoveUp_bool);
            }
        }

        internal static event Delegates.MoveUp_bool_BeforeArgs _beforeMoveUp_bool;
        internal static event Delegates.MoveUp_bool_NormalArgs _afterMoveUp_bool;

        private static void MoveUp_bool(Action<TMP_InputField, bool> orig, TMP_InputField self, bool shift)
        {
            Delegates.Params_MoveUp_bool @params = new()
            {
                self = self, shift = shift
            };
            _beforeMoveUp_bool?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            orig(self, shift);
            if (_afterMoveUp_bool != null) _afterMoveUp_bool.Invoke(@params);
        }

        internal static void HookMoveUp_bool_bool()
        {
            if (!HookedList.Contains("MoveUp_bool_bool"))
            {
                HookedList.Add("MoveUp_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveUp_bool_bool"), MoveUp_bool_bool);
            }
        }

        internal static event Delegates.MoveUp_bool_bool_BeforeArgs _beforeMoveUp_bool_bool;
        internal static event Delegates.MoveUp_bool_bool_NormalArgs _afterMoveUp_bool_bool;

        private static void MoveUp_bool_bool(Action<TMP_InputField, bool, bool> orig, TMP_InputField self, bool shift,
            bool goToFirstChar)
        {
            Delegates.Params_MoveUp_bool_bool @params = new()
            {
                self = self, shift = shift, goToFirstChar = goToFirstChar
            };
            _beforeMoveUp_bool_bool?.Invoke(@params);
            self = @params.self;
            shift = @params.shift;
            goToFirstChar = @params.goToFirstChar;
            orig(self, shift, goToFirstChar);
            if (_afterMoveUp_bool_bool != null) _afterMoveUp_bool_bool.Invoke(@params);
        }

        internal static void HookDelete()
        {
            if (!HookedList.Contains("Delete"))
            {
                HookedList.Add("Delete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Delete"), Delete);
            }
        }

        internal static event Delegates.Delete_BeforeArgs _beforeDelete;
        internal static event Delegates.Delete_NormalArgs _afterDelete;

        private static void Delete(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_Delete @params = new()
            {
                self = self
            };
            _beforeDelete?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDelete != null) _afterDelete.Invoke(@params);
        }

        internal static void HookForwardSpace()
        {
            if (!HookedList.Contains("ForwardSpace"))
            {
                HookedList.Add("ForwardSpace");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ForwardSpace"), ForwardSpace);
            }
        }

        internal static event Delegates.ForwardSpace_BeforeArgs _beforeForwardSpace;
        internal static event Delegates.ForwardSpace_NormalArgs _afterForwardSpace;

        private static void ForwardSpace(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_ForwardSpace @params = new()
            {
                self = self
            };
            _beforeForwardSpace?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForwardSpace != null) _afterForwardSpace.Invoke(@params);
        }

        internal static void HookBackspace()
        {
            if (!HookedList.Contains("Backspace"))
            {
                HookedList.Add("Backspace");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Backspace"), Backspace);
            }
        }

        internal static event Delegates.Backspace_BeforeArgs _beforeBackspace;
        internal static event Delegates.Backspace_NormalArgs _afterBackspace;

        private static void Backspace(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_Backspace @params = new()
            {
                self = self
            };
            _beforeBackspace?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackspace != null) _afterBackspace.Invoke(@params);
        }

        internal static void HookInsert()
        {
            if (!HookedList.Contains("Insert"))
            {
                HookedList.Add("Insert");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Insert"), Insert);
            }
        }

        internal static event Delegates.Insert_BeforeArgs _beforeInsert;
        internal static event Delegates.Insert_NormalArgs _afterInsert;

        private static void Insert(Action<TMP_InputField, char> orig, TMP_InputField self, char c)
        {
            Delegates.Params_Insert @params = new()
            {
                self = self, c = c
            };
            _beforeInsert?.Invoke(@params);
            self = @params.self;
            c = @params.c;
            orig(self, c);
            if (_afterInsert != null) _afterInsert.Invoke(@params);
        }

        internal static void HookSendOnValueChangedAndUpdateLabel()
        {
            if (!HookedList.Contains("SendOnValueChangedAndUpdateLabel"))
            {
                HookedList.Add("SendOnValueChangedAndUpdateLabel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnValueChangedAndUpdateLabel"),
                    SendOnValueChangedAndUpdateLabel);
            }
        }

        internal static event Delegates.SendOnValueChangedAndUpdateLabel_BeforeArgs
            _beforeSendOnValueChangedAndUpdateLabel;

        internal static event Delegates.SendOnValueChangedAndUpdateLabel_NormalArgs
            _afterSendOnValueChangedAndUpdateLabel;

        private static void SendOnValueChangedAndUpdateLabel(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SendOnValueChangedAndUpdateLabel @params = new()
            {
                self = self
            };
            _beforeSendOnValueChangedAndUpdateLabel?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSendOnValueChangedAndUpdateLabel != null) _afterSendOnValueChangedAndUpdateLabel.Invoke(@params);
        }

        internal static void HookSendOnValueChanged()
        {
            if (!HookedList.Contains("SendOnValueChanged"))
            {
                HookedList.Add("SendOnValueChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnValueChanged"),
                    SendOnValueChanged);
            }
        }

        internal static event Delegates.SendOnValueChanged_BeforeArgs _beforeSendOnValueChanged;
        internal static event Delegates.SendOnValueChanged_NormalArgs _afterSendOnValueChanged;

        private static void SendOnValueChanged(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SendOnValueChanged @params = new()
            {
                self = self
            };
            _beforeSendOnValueChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSendOnValueChanged != null) _afterSendOnValueChanged.Invoke(@params);
        }

        internal static void HookSendOnSubmit()
        {
            if (!HookedList.Contains("SendOnSubmit"))
            {
                HookedList.Add("SendOnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnSubmit"), SendOnSubmit);
            }
        }

        internal static event Delegates.SendOnSubmit_BeforeArgs _beforeSendOnSubmit;
        internal static event Delegates.SendOnSubmit_NormalArgs _afterSendOnSubmit;

        private static void SendOnSubmit(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SendOnSubmit @params = new()
            {
                self = self
            };
            _beforeSendOnSubmit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSendOnSubmit != null) _afterSendOnSubmit.Invoke(@params);
        }

        internal static void HookSendOnFocusLost()
        {
            if (!HookedList.Contains("SendOnFocusLost"))
            {
                HookedList.Add("SendOnFocusLost");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnFocusLost"), SendOnFocusLost);
            }
        }

        internal static event Delegates.SendOnFocusLost_BeforeArgs _beforeSendOnFocusLost;
        internal static event Delegates.SendOnFocusLost_NormalArgs _afterSendOnFocusLost;

        private static void SendOnFocusLost(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SendOnFocusLost @params = new()
            {
                self = self
            };
            _beforeSendOnFocusLost?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSendOnFocusLost != null) _afterSendOnFocusLost.Invoke(@params);
        }

        internal static void HookAppend_string()
        {
            if (!HookedList.Contains("Append_string"))
            {
                HookedList.Add("Append_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Append_string"), Append_string);
            }
        }

        internal static event Delegates.Append_string_BeforeArgs _beforeAppend_string;
        internal static event Delegates.Append_string_NormalArgs _afterAppend_string;

        private static void Append_string(Action<TMP_InputField, string> orig, TMP_InputField self, string input)
        {
            Delegates.Params_Append_string @params = new()
            {
                self = self, input = input
            };
            _beforeAppend_string?.Invoke(@params);
            self = @params.self;
            input = @params.input;
            orig(self, input);
            if (_afterAppend_string != null) _afterAppend_string.Invoke(@params);
        }

        internal static void HookAppend_Char()
        {
            if (!HookedList.Contains("Append_Char"))
            {
                HookedList.Add("Append_Char");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Append_Char"), Append_Char);
            }
        }

        internal static event Delegates.Append_Char_BeforeArgs _beforeAppend_Char;
        internal static event Delegates.Append_Char_NormalArgs _afterAppend_Char;

        private static void Append_Char(Action<TMP_InputField, char> orig, TMP_InputField self, char input)
        {
            Delegates.Params_Append_Char @params = new()
            {
                self = self, input = input
            };
            _beforeAppend_Char?.Invoke(@params);
            self = @params.self;
            input = @params.input;
            orig(self, input);
            if (_afterAppend_Char != null) _afterAppend_Char.Invoke(@params);
        }

        internal static void HookUpdateLabel()
        {
            if (!HookedList.Contains("UpdateLabel"))
            {
                HookedList.Add("UpdateLabel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UpdateLabel"), UpdateLabel);
            }
        }

        internal static event Delegates.UpdateLabel_BeforeArgs _beforeUpdateLabel;
        internal static event Delegates.UpdateLabel_NormalArgs _afterUpdateLabel;

        private static void UpdateLabel(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_UpdateLabel @params = new()
            {
                self = self
            };
            _beforeUpdateLabel?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateLabel != null) _afterUpdateLabel.Invoke(@params);
        }

        internal static void HookGetCaretPositionFromStringIndex()
        {
            if (!HookedList.Contains("GetCaretPositionFromStringIndex"))
            {
                HookedList.Add("GetCaretPositionFromStringIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetCaretPositionFromStringIndex"),
                    GetCaretPositionFromStringIndex);
            }
        }

        internal static event Delegates.GetCaretPositionFromStringIndex_BeforeArgs
            _beforeGetCaretPositionFromStringIndex;

        internal static event Delegates.GetCaretPositionFromStringIndex_NormalArgs
            _afterGetCaretPositionFromStringIndex;

        private static int GetCaretPositionFromStringIndex(Func<TMP_InputField, int, int> orig, TMP_InputField self,
            int stringIndex)
        {
            Delegates.Params_GetCaretPositionFromStringIndex @params = new()
            {
                self = self, stringIndex = stringIndex
            };
            _beforeGetCaretPositionFromStringIndex?.Invoke(@params);
            self = @params.self;
            stringIndex = @params.stringIndex;
            var retVal = orig(self, stringIndex);
            if (_afterGetCaretPositionFromStringIndex != null)
                retVal = _afterGetCaretPositionFromStringIndex.Invoke(@params);
            return retVal;
        }

        internal static void HookGetStringIndexFromCaretPosition()
        {
            if (!HookedList.Contains("GetStringIndexFromCaretPosition"))
            {
                HookedList.Add("GetStringIndexFromCaretPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetStringIndexFromCaretPosition"),
                    GetStringIndexFromCaretPosition);
            }
        }

        internal static event Delegates.GetStringIndexFromCaretPosition_BeforeArgs
            _beforeGetStringIndexFromCaretPosition;

        internal static event Delegates.GetStringIndexFromCaretPosition_NormalArgs
            _afterGetStringIndexFromCaretPosition;

        private static int GetStringIndexFromCaretPosition(Func<TMP_InputField, int, int> orig, TMP_InputField self,
            int caretPosition)
        {
            Delegates.Params_GetStringIndexFromCaretPosition @params = new()
            {
                self = self, caretPosition = caretPosition
            };
            _beforeGetStringIndexFromCaretPosition?.Invoke(@params);
            self = @params.self;
            caretPosition = @params.caretPosition;
            var retVal = orig(self, caretPosition);
            if (_afterGetStringIndexFromCaretPosition != null)
                retVal = _afterGetStringIndexFromCaretPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookForceLabelUpdate()
        {
            if (!HookedList.Contains("ForceLabelUpdate"))
            {
                HookedList.Add("ForceLabelUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ForceLabelUpdate"), ForceLabelUpdate);
            }
        }

        internal static event Delegates.ForceLabelUpdate_BeforeArgs _beforeForceLabelUpdate;
        internal static event Delegates.ForceLabelUpdate_NormalArgs _afterForceLabelUpdate;

        private static void ForceLabelUpdate(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_ForceLabelUpdate @params = new()
            {
                self = self
            };
            _beforeForceLabelUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceLabelUpdate != null) _afterForceLabelUpdate.Invoke(@params);
        }

        internal static void HookMarkGeometryAsDirty()
        {
            if (!HookedList.Contains("MarkGeometryAsDirty"))
            {
                HookedList.Add("MarkGeometryAsDirty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MarkGeometryAsDirty"),
                    MarkGeometryAsDirty);
            }
        }

        internal static event Delegates.MarkGeometryAsDirty_BeforeArgs _beforeMarkGeometryAsDirty;
        internal static event Delegates.MarkGeometryAsDirty_NormalArgs _afterMarkGeometryAsDirty;

        private static void MarkGeometryAsDirty(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_MarkGeometryAsDirty @params = new()
            {
                self = self
            };
            _beforeMarkGeometryAsDirty?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMarkGeometryAsDirty != null) _afterMarkGeometryAsDirty.Invoke(@params);
        }

        internal static void HookRebuild()
        {
            if (!HookedList.Contains("Rebuild"))
            {
                HookedList.Add("Rebuild");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Rebuild"), Rebuild);
            }
        }

        internal static event Delegates.Rebuild_BeforeArgs _beforeRebuild;
        internal static event Delegates.Rebuild_NormalArgs _afterRebuild;

        private static void Rebuild(Action<TMP_InputField, CanvasUpdate> orig, TMP_InputField self, CanvasUpdate update)
        {
            Delegates.Params_Rebuild @params = new()
            {
                self = self, update = update
            };
            _beforeRebuild?.Invoke(@params);
            self = @params.self;
            update = @params.update;
            orig(self, update);
            if (_afterRebuild != null) _afterRebuild.Invoke(@params);
        }

        internal static void HookLayoutComplete()
        {
            if (!HookedList.Contains("LayoutComplete"))
            {
                HookedList.Add("LayoutComplete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LayoutComplete"), LayoutComplete);
            }
        }

        internal static event Delegates.LayoutComplete_BeforeArgs _beforeLayoutComplete;
        internal static event Delegates.LayoutComplete_NormalArgs _afterLayoutComplete;

        private static void LayoutComplete(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_LayoutComplete @params = new()
            {
                self = self
            };
            _beforeLayoutComplete?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLayoutComplete != null) _afterLayoutComplete.Invoke(@params);
        }

        internal static void HookGraphicUpdateComplete()
        {
            if (!HookedList.Contains("GraphicUpdateComplete"))
            {
                HookedList.Add("GraphicUpdateComplete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GraphicUpdateComplete"),
                    GraphicUpdateComplete);
            }
        }

        internal static event Delegates.GraphicUpdateComplete_BeforeArgs _beforeGraphicUpdateComplete;
        internal static event Delegates.GraphicUpdateComplete_NormalArgs _afterGraphicUpdateComplete;

        private static void GraphicUpdateComplete(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_GraphicUpdateComplete @params = new()
            {
                self = self
            };
            _beforeGraphicUpdateComplete?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGraphicUpdateComplete != null) _afterGraphicUpdateComplete.Invoke(@params);
        }

        internal static void HookUpdateGeometry()
        {
            if (!HookedList.Contains("UpdateGeometry"))
            {
                HookedList.Add("UpdateGeometry");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UpdateGeometry"), UpdateGeometry);
            }
        }

        internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
        internal static event Delegates.UpdateGeometry_NormalArgs _afterUpdateGeometry;

        private static void UpdateGeometry(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_UpdateGeometry @params = new()
            {
                self = self
            };
            _beforeUpdateGeometry?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateGeometry != null) _afterUpdateGeometry.Invoke(@params);
        }

        internal static void HookAssignPositioningIfNeeded()
        {
            if (!HookedList.Contains("AssignPositioningIfNeeded"))
            {
                HookedList.Add("AssignPositioningIfNeeded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "AssignPositioningIfNeeded"),
                    AssignPositioningIfNeeded);
            }
        }

        internal static event Delegates.AssignPositioningIfNeeded_BeforeArgs _beforeAssignPositioningIfNeeded;
        internal static event Delegates.AssignPositioningIfNeeded_NormalArgs _afterAssignPositioningIfNeeded;

        private static void AssignPositioningIfNeeded(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_AssignPositioningIfNeeded @params = new()
            {
                self = self
            };
            _beforeAssignPositioningIfNeeded?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAssignPositioningIfNeeded != null) _afterAssignPositioningIfNeeded.Invoke(@params);
        }

        internal static void HookOnFillVBO()
        {
            if (!HookedList.Contains("OnFillVBO"))
            {
                HookedList.Add("OnFillVBO");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnFillVBO"), OnFillVBO);
            }
        }

        internal static event Delegates.OnFillVBO_BeforeArgs _beforeOnFillVBO;
        internal static event Delegates.OnFillVBO_NormalArgs _afterOnFillVBO;

        private static void OnFillVBO(Action<TMP_InputField, Mesh> orig, TMP_InputField self, Mesh vbo)
        {
            Delegates.Params_OnFillVBO @params = new()
            {
                self = self, vbo = vbo
            };
            _beforeOnFillVBO?.Invoke(@params);
            self = @params.self;
            vbo = @params.vbo;
            orig(self, vbo);
            if (_afterOnFillVBO != null) _afterOnFillVBO.Invoke(@params);
        }

        internal static void HookGenerateCaret()
        {
            if (!HookedList.Contains("GenerateCaret"))
            {
                HookedList.Add("GenerateCaret");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GenerateCaret"), GenerateCaret);
            }
        }

        internal static event Delegates.GenerateCaret_BeforeArgs _beforeGenerateCaret;
        internal static event Delegates.GenerateCaret_NormalArgs _afterGenerateCaret;

        private static void GenerateCaret(Action<TMP_InputField, VertexHelper, Vector2> orig, TMP_InputField self,
            VertexHelper vbo, Vector2 roundingOffset)
        {
            Delegates.Params_GenerateCaret @params = new()
            {
                self = self, vbo = vbo, roundingOffset = roundingOffset
            };
            _beforeGenerateCaret?.Invoke(@params);
            self = @params.self;
            vbo = @params.vbo;
            roundingOffset = @params.roundingOffset;
            orig(self, vbo, roundingOffset);
            if (_afterGenerateCaret != null) _afterGenerateCaret.Invoke(@params);
        }

        internal static void HookCreateCursorVerts()
        {
            if (!HookedList.Contains("CreateCursorVerts"))
            {
                HookedList.Add("CreateCursorVerts");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "CreateCursorVerts"),
                    CreateCursorVerts);
            }
        }

        internal static event Delegates.CreateCursorVerts_BeforeArgs _beforeCreateCursorVerts;
        internal static event Delegates.CreateCursorVerts_NormalArgs _afterCreateCursorVerts;

        private static void CreateCursorVerts(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_CreateCursorVerts @params = new()
            {
                self = self
            };
            _beforeCreateCursorVerts?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateCursorVerts != null) _afterCreateCursorVerts.Invoke(@params);
        }

        internal static void HookGenerateHightlight()
        {
            if (!HookedList.Contains("GenerateHightlight"))
            {
                HookedList.Add("GenerateHightlight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GenerateHightlight"),
                    GenerateHightlight);
            }
        }

        internal static event Delegates.GenerateHightlight_BeforeArgs _beforeGenerateHightlight;
        internal static event Delegates.GenerateHightlight_NormalArgs _afterGenerateHightlight;

        private static void GenerateHightlight(Action<TMP_InputField, VertexHelper, Vector2> orig, TMP_InputField self,
            VertexHelper vbo, Vector2 roundingOffset)
        {
            Delegates.Params_GenerateHightlight @params = new()
            {
                self = self, vbo = vbo, roundingOffset = roundingOffset
            };
            _beforeGenerateHightlight?.Invoke(@params);
            self = @params.self;
            vbo = @params.vbo;
            roundingOffset = @params.roundingOffset;
            orig(self, vbo, roundingOffset);
            if (_afterGenerateHightlight != null) _afterGenerateHightlight.Invoke(@params);
        }

        internal static void HookAdjustRectTransformRelativeToViewport()
        {
            if (!HookedList.Contains("AdjustRectTransformRelativeToViewport"))
            {
                HookedList.Add("AdjustRectTransformRelativeToViewport");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "AdjustRectTransformRelativeToViewport"),
                    AdjustRectTransformRelativeToViewport);
            }
        }

        internal static event Delegates.AdjustRectTransformRelativeToViewport_BeforeArgs
            _beforeAdjustRectTransformRelativeToViewport;

        internal static event Delegates.AdjustRectTransformRelativeToViewport_NormalArgs
            _afterAdjustRectTransformRelativeToViewport;

        private static void AdjustRectTransformRelativeToViewport(Action<TMP_InputField, Vector2, float, bool> orig,
            TMP_InputField self, Vector2 startPosition, float height, bool isCharVisible)
        {
            Delegates.Params_AdjustRectTransformRelativeToViewport @params = new()
            {
                self = self, startPosition = startPosition, height = height, isCharVisible = isCharVisible
            };
            _beforeAdjustRectTransformRelativeToViewport?.Invoke(@params);
            self = @params.self;
            startPosition = @params.startPosition;
            height = @params.height;
            isCharVisible = @params.isCharVisible;
            orig(self, startPosition, height, isCharVisible);
            if (_afterAdjustRectTransformRelativeToViewport != null)
                _afterAdjustRectTransformRelativeToViewport.Invoke(@params);
        }

        internal static void HookValidate()
        {
            if (!HookedList.Contains("Validate"))
            {
                HookedList.Add("Validate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Validate"), Validate);
            }
        }

        internal static event Delegates.Validate_BeforeArgs _beforeValidate;
        internal static event Delegates.Validate_NormalArgs _afterValidate;

        private static char Validate(Func<TMP_InputField, string, int, char, char> orig, TMP_InputField self,
            string text, int pos, char ch)
        {
            Delegates.Params_Validate @params = new()
            {
                self = self, text = text, pos = pos, ch = ch
            };
            _beforeValidate?.Invoke(@params);
            self = @params.self;
            text = @params.text;
            pos = @params.pos;
            ch = @params.ch;
            var retVal = orig(self, text, pos, ch);
            if (_afterValidate != null) retVal = _afterValidate.Invoke(@params);
            return retVal;
        }

        internal static void HookActivateInputField()
        {
            if (!HookedList.Contains("ActivateInputField"))
            {
                HookedList.Add("ActivateInputField");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ActivateInputField"),
                    ActivateInputField);
            }
        }

        internal static event Delegates.ActivateInputField_BeforeArgs _beforeActivateInputField;
        internal static event Delegates.ActivateInputField_NormalArgs _afterActivateInputField;

        private static void ActivateInputField(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_ActivateInputField @params = new()
            {
                self = self
            };
            _beforeActivateInputField?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterActivateInputField != null) _afterActivateInputField.Invoke(@params);
        }

        internal static void HookActivateInputFieldInternal()
        {
            if (!HookedList.Contains("ActivateInputFieldInternal"))
            {
                HookedList.Add("ActivateInputFieldInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ActivateInputFieldInternal"),
                    ActivateInputFieldInternal);
            }
        }

        internal static event Delegates.ActivateInputFieldInternal_BeforeArgs _beforeActivateInputFieldInternal;
        internal static event Delegates.ActivateInputFieldInternal_NormalArgs _afterActivateInputFieldInternal;

        private static void ActivateInputFieldInternal(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_ActivateInputFieldInternal @params = new()
            {
                self = self
            };
            _beforeActivateInputFieldInternal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterActivateInputFieldInternal != null) _afterActivateInputFieldInternal.Invoke(@params);
        }

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnSelect"), OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_NormalArgs _afterOnSelect;

        private static void OnSelect(Action<TMP_InputField, BaseEventData> orig, TMP_InputField self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSelect?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null) _afterOnSelect.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<TMP_InputField, PointerEventData> orig, TMP_InputField self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookDeactivateInputField()
        {
            if (!HookedList.Contains("DeactivateInputField"))
            {
                HookedList.Add("DeactivateInputField");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "DeactivateInputField"),
                    DeactivateInputField);
            }
        }

        internal static event Delegates.DeactivateInputField_BeforeArgs _beforeDeactivateInputField;
        internal static event Delegates.DeactivateInputField_NormalArgs _afterDeactivateInputField;

        private static void DeactivateInputField(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_DeactivateInputField @params = new()
            {
                self = self
            };
            _beforeDeactivateInputField?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDeactivateInputField != null) _afterDeactivateInputField.Invoke(@params);
        }

        internal static void HookOnDeselect()
        {
            if (!HookedList.Contains("OnDeselect"))
            {
                HookedList.Add("OnDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDeselect"), OnDeselect);
            }
        }

        internal static event Delegates.OnDeselect_BeforeArgs _beforeOnDeselect;
        internal static event Delegates.OnDeselect_NormalArgs _afterOnDeselect;

        private static void OnDeselect(Action<TMP_InputField, BaseEventData> orig, TMP_InputField self,
            BaseEventData eventData)
        {
            Delegates.Params_OnDeselect @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnDeselect?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDeselect != null) _afterOnDeselect.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(Action<TMP_InputField, BaseEventData> orig, TMP_InputField self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookEnforceContentType()
        {
            if (!HookedList.Contains("EnforceContentType"))
            {
                HookedList.Add("EnforceContentType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "EnforceContentType"),
                    EnforceContentType);
            }
        }

        internal static event Delegates.EnforceContentType_BeforeArgs _beforeEnforceContentType;
        internal static event Delegates.EnforceContentType_NormalArgs _afterEnforceContentType;

        private static void EnforceContentType(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_EnforceContentType @params = new()
            {
                self = self
            };
            _beforeEnforceContentType?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnforceContentType != null) _afterEnforceContentType.Invoke(@params);
        }

        internal static void HookSetTextComponentWrapMode()
        {
            if (!HookedList.Contains("SetTextComponentWrapMode"))
            {
                HookedList.Add("SetTextComponentWrapMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetTextComponentWrapMode"),
                    SetTextComponentWrapMode);
            }
        }

        internal static event Delegates.SetTextComponentWrapMode_BeforeArgs _beforeSetTextComponentWrapMode;
        internal static event Delegates.SetTextComponentWrapMode_NormalArgs _afterSetTextComponentWrapMode;

        private static void SetTextComponentWrapMode(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SetTextComponentWrapMode @params = new()
            {
                self = self
            };
            _beforeSetTextComponentWrapMode?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetTextComponentWrapMode != null) _afterSetTextComponentWrapMode.Invoke(@params);
        }

        internal static void HookSetTextComponentRichTextMode()
        {
            if (!HookedList.Contains("SetTextComponentRichTextMode"))
            {
                HookedList.Add("SetTextComponentRichTextMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetTextComponentRichTextMode"),
                    SetTextComponentRichTextMode);
            }
        }

        internal static event Delegates.SetTextComponentRichTextMode_BeforeArgs _beforeSetTextComponentRichTextMode;
        internal static event Delegates.SetTextComponentRichTextMode_NormalArgs _afterSetTextComponentRichTextMode;

        private static void SetTextComponentRichTextMode(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SetTextComponentRichTextMode @params = new()
            {
                self = self
            };
            _beforeSetTextComponentRichTextMode?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetTextComponentRichTextMode != null) _afterSetTextComponentRichTextMode.Invoke(@params);
        }

        internal static void HookSetToCustomIfContentTypeIsNot()
        {
            if (!HookedList.Contains("SetToCustomIfContentTypeIsNot"))
            {
                HookedList.Add("SetToCustomIfContentTypeIsNot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetToCustomIfContentTypeIsNot"),
                    SetToCustomIfContentTypeIsNot);
            }
        }

        internal static event Delegates.SetToCustomIfContentTypeIsNot_BeforeArgs _beforeSetToCustomIfContentTypeIsNot;
        internal static event Delegates.SetToCustomIfContentTypeIsNot_NormalArgs _afterSetToCustomIfContentTypeIsNot;

        private static void SetToCustomIfContentTypeIsNot(Action<TMP_InputField, TMP_InputField.ContentType[]> orig,
            TMP_InputField self, TMP_InputField.ContentType[] allowedContentTypes)
        {
            Delegates.Params_SetToCustomIfContentTypeIsNot @params = new()
            {
                self = self, allowedContentTypes = allowedContentTypes
            };
            _beforeSetToCustomIfContentTypeIsNot?.Invoke(@params);
            self = @params.self;
            allowedContentTypes = @params.allowedContentTypes;
            orig(self, allowedContentTypes);
            if (_afterSetToCustomIfContentTypeIsNot != null) _afterSetToCustomIfContentTypeIsNot.Invoke(@params);
        }

        internal static void HookSetToCustom()
        {
            if (!HookedList.Contains("SetToCustom"))
            {
                HookedList.Add("SetToCustom");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetToCustom"), SetToCustom);
            }
        }

        internal static event Delegates.SetToCustom_BeforeArgs _beforeSetToCustom;
        internal static event Delegates.SetToCustom_NormalArgs _afterSetToCustom;

        private static void SetToCustom(Action<TMP_InputField> orig, TMP_InputField self)
        {
            Delegates.Params_SetToCustom @params = new()
            {
                self = self
            };
            _beforeSetToCustom?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetToCustom != null) _afterSetToCustom.Invoke(@params);
        }

        internal static void Hookget_transform()
        {
            if (!HookedList.Contains("get_transform"))
            {
                HookedList.Add("get_transform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_transform"), get_transform);
            }
        }

        internal static event Delegates.get_transform_BeforeArgs _beforeget_transform;
        internal static event Delegates.get_transform_NormalArgs _afterget_transform;

        private static Transform get_transform(Func<TMP_InputField, Transform> orig, TMP_InputField self)
        {
            Delegates.Params_get_transform @params = new()
            {
                self = self
            };
            _beforeget_transform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_transform != null) retVal = _afterget_transform.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ActivateInputField_BeforeArgs(Params_ActivateInputField args);

        public delegate void ActivateInputField_NormalArgs(Params_ActivateInputField args);

        public delegate void ActivateInputFieldInternal_BeforeArgs(Params_ActivateInputFieldInternal args);

        public delegate void ActivateInputFieldInternal_NormalArgs(Params_ActivateInputFieldInternal args);

        public delegate void AdjustRectTransformRelativeToViewport_BeforeArgs(
            Params_AdjustRectTransformRelativeToViewport args);

        public delegate void AdjustRectTransformRelativeToViewport_NormalArgs(
            Params_AdjustRectTransformRelativeToViewport args);

        public delegate void Append_Char_BeforeArgs(Params_Append_Char args);

        public delegate void Append_Char_NormalArgs(Params_Append_Char args);

        public delegate void Append_string_BeforeArgs(Params_Append_string args);

        public delegate void Append_string_NormalArgs(Params_Append_string args);

        public delegate void AssignPositioningIfNeeded_BeforeArgs(Params_AssignPositioningIfNeeded args);

        public delegate void AssignPositioningIfNeeded_NormalArgs(Params_AssignPositioningIfNeeded args);

        public delegate void Backspace_BeforeArgs(Params_Backspace args);

        public delegate void Backspace_NormalArgs(Params_Backspace args);

        public delegate void CaretBlink_BeforeArgs(Params_CaretBlink args);

        public delegate IEnumerator CaretBlink_NormalArgs(Params_CaretBlink args);

        public delegate void ClampPos_BeforeArgs(Params_ClampPos args);

        public delegate void ClampPos_NormalArgs(Params_ClampPos args);

        public delegate void CreateCursorVerts_BeforeArgs(Params_CreateCursorVerts args);

        public delegate void CreateCursorVerts_NormalArgs(Params_CreateCursorVerts args);

        public delegate void DeactivateInputField_BeforeArgs(Params_DeactivateInputField args);

        public delegate void DeactivateInputField_NormalArgs(Params_DeactivateInputField args);

        public delegate void Delete_BeforeArgs(Params_Delete args);

        public delegate void Delete_NormalArgs(Params_Delete args);

        public delegate void EnforceContentType_BeforeArgs(Params_EnforceContentType args);

        public delegate void EnforceContentType_NormalArgs(Params_EnforceContentType args);

        public delegate void FindtNextWordBegin_BeforeArgs(Params_FindtNextWordBegin args);

        public delegate int FindtNextWordBegin_NormalArgs(Params_FindtNextWordBegin args);

        public delegate void FindtPrevWordBegin_BeforeArgs(Params_FindtPrevWordBegin args);

        public delegate int FindtPrevWordBegin_NormalArgs(Params_FindtPrevWordBegin args);

        public delegate void ForceLabelUpdate_BeforeArgs(Params_ForceLabelUpdate args);

        public delegate void ForceLabelUpdate_NormalArgs(Params_ForceLabelUpdate args);

        public delegate void ForwardSpace_BeforeArgs(Params_ForwardSpace args);

        public delegate void ForwardSpace_NormalArgs(Params_ForwardSpace args);

        public delegate void GenerateCaret_BeforeArgs(Params_GenerateCaret args);

        public delegate void GenerateCaret_NormalArgs(Params_GenerateCaret args);

        public delegate void GenerateHightlight_BeforeArgs(Params_GenerateHightlight args);

        public delegate void GenerateHightlight_NormalArgs(Params_GenerateHightlight args);

        public delegate void get_asteriskChar_BeforeArgs(Params_get_asteriskChar args);

        public delegate char get_asteriskChar_NormalArgs(Params_get_asteriskChar args);

        public delegate void get_caretBlinkRate_BeforeArgs(Params_get_caretBlinkRate args);

        public delegate float get_caretBlinkRate_NormalArgs(Params_get_caretBlinkRate args);

        public delegate void get_caretColor_BeforeArgs(Params_get_caretColor args);

        public delegate Color get_caretColor_NormalArgs(Params_get_caretColor args);

        public delegate void get_caretPosition_BeforeArgs(Params_get_caretPosition args);

        public delegate int get_caretPosition_NormalArgs(Params_get_caretPosition args);

        public delegate void get_caretPositionInternal_BeforeArgs(Params_get_caretPositionInternal args);

        public delegate int get_caretPositionInternal_NormalArgs(Params_get_caretPositionInternal args);

        public delegate void get_caretSelectPositionInternal_BeforeArgs(Params_get_caretSelectPositionInternal args);

        public delegate int get_caretSelectPositionInternal_NormalArgs(Params_get_caretSelectPositionInternal args);

        public delegate void get_caretWidth_BeforeArgs(Params_get_caretWidth args);

        public delegate int get_caretWidth_NormalArgs(Params_get_caretWidth args);

        public delegate void get_characterLimit_BeforeArgs(Params_get_characterLimit args);

        public delegate int get_characterLimit_NormalArgs(Params_get_characterLimit args);

        public delegate void get_clipboard_BeforeArgs();

        public delegate string get_clipboard_NormalArgs();

        public delegate void get_customCaretColor_BeforeArgs(Params_get_customCaretColor args);

        public delegate bool get_customCaretColor_NormalArgs(Params_get_customCaretColor args);

        public delegate void get_hasSelection_BeforeArgs(Params_get_hasSelection args);

        public delegate bool get_hasSelection_NormalArgs(Params_get_hasSelection args);

        public delegate void get_isFocused_BeforeArgs(Params_get_isFocused args);

        public delegate bool get_isFocused_NormalArgs(Params_get_isFocused args);

        public delegate void get_keyboardType_BeforeArgs(Params_get_keyboardType args);

        public delegate TouchScreenKeyboardType get_keyboardType_NormalArgs(Params_get_keyboardType args);

        public delegate void get_mesh_BeforeArgs(Params_get_mesh args);

        public delegate Mesh get_mesh_NormalArgs(Params_get_mesh args);

        public delegate void get_multiLine_BeforeArgs(Params_get_multiLine args);

        public delegate bool get_multiLine_NormalArgs(Params_get_multiLine args);

        public delegate void get_placeholder_BeforeArgs(Params_get_placeholder args);

        public delegate Graphic get_placeholder_NormalArgs(Params_get_placeholder args);

        public delegate void get_readOnly_BeforeArgs(Params_get_readOnly args);

        public delegate bool get_readOnly_NormalArgs(Params_get_readOnly args);

        public delegate void get_richText_BeforeArgs(Params_get_richText args);

        public delegate bool get_richText_NormalArgs(Params_get_richText args);

        public delegate void get_selectionAnchorPosition_BeforeArgs(Params_get_selectionAnchorPosition args);

        public delegate int get_selectionAnchorPosition_NormalArgs(Params_get_selectionAnchorPosition args);

        public delegate void get_selectionColor_BeforeArgs(Params_get_selectionColor args);

        public delegate Color get_selectionColor_NormalArgs(Params_get_selectionColor args);

        public delegate void get_selectionFocusPosition_BeforeArgs(Params_get_selectionFocusPosition args);

        public delegate int get_selectionFocusPosition_NormalArgs(Params_get_selectionFocusPosition args);

        public delegate void get_shouldHideMobileInput_BeforeArgs(Params_get_shouldHideMobileInput args);

        public delegate bool get_shouldHideMobileInput_NormalArgs(Params_get_shouldHideMobileInput args);

        public delegate void get_stringPositionInternal_BeforeArgs(Params_get_stringPositionInternal args);

        public delegate int get_stringPositionInternal_NormalArgs(Params_get_stringPositionInternal args);

        public delegate void get_stringSelectPositionInternal_BeforeArgs(Params_get_stringSelectPositionInternal args);

        public delegate int get_stringSelectPositionInternal_NormalArgs(Params_get_stringSelectPositionInternal args);

        public delegate void get_text_BeforeArgs(Params_get_text args);

        public delegate string get_text_NormalArgs(Params_get_text args);

        public delegate void get_textComponent_BeforeArgs(Params_get_textComponent args);

        public delegate TMP_Text get_textComponent_NormalArgs(Params_get_textComponent args);

        public delegate void get_textViewport_BeforeArgs(Params_get_textViewport args);

        public delegate RectTransform get_textViewport_NormalArgs(Params_get_textViewport args);

        public delegate void get_transform_BeforeArgs(Params_get_transform args);

        public delegate Transform get_transform_NormalArgs(Params_get_transform args);

        public delegate void get_wasCanceled_BeforeArgs(Params_get_wasCanceled args);

        public delegate bool get_wasCanceled_NormalArgs(Params_get_wasCanceled args);

        public delegate void GetCaretPositionFromStringIndex_BeforeArgs(Params_GetCaretPositionFromStringIndex args);

        public delegate int GetCaretPositionFromStringIndex_NormalArgs(Params_GetCaretPositionFromStringIndex args);

        public delegate void GetCharacterIndexFromPosition_BeforeArgs(Params_GetCharacterIndexFromPosition args);

        public delegate int GetCharacterIndexFromPosition_NormalArgs(Params_GetCharacterIndexFromPosition args);

        public delegate void GetSelectedString_BeforeArgs(Params_GetSelectedString args);

        public delegate string GetSelectedString_NormalArgs(Params_GetSelectedString args);

        public delegate void GetStringIndexFromCaretPosition_BeforeArgs(Params_GetStringIndexFromCaretPosition args);

        public delegate int GetStringIndexFromCaretPosition_NormalArgs(Params_GetStringIndexFromCaretPosition args);

        public delegate void GraphicUpdateComplete_BeforeArgs(Params_GraphicUpdateComplete args);

        public delegate void GraphicUpdateComplete_NormalArgs(Params_GraphicUpdateComplete args);

        public delegate void InPlaceEditing_BeforeArgs(Params_InPlaceEditing args);

        public delegate bool InPlaceEditing_NormalArgs(Params_InPlaceEditing args);

        public delegate void Insert_BeforeArgs(Params_Insert args);

        public delegate void Insert_NormalArgs(Params_Insert args);

        public delegate void IsValidChar_BeforeArgs(Params_IsValidChar args);

        public delegate bool IsValidChar_NormalArgs(Params_IsValidChar args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void LayoutComplete_BeforeArgs(Params_LayoutComplete args);

        public delegate void LayoutComplete_NormalArgs(Params_LayoutComplete args);

        public delegate void LineDownCharacterPosition_BeforeArgs(Params_LineDownCharacterPosition args);

        public delegate int LineDownCharacterPosition_NormalArgs(Params_LineDownCharacterPosition args);

        public delegate void LineUpCharacterPosition_BeforeArgs(Params_LineUpCharacterPosition args);

        public delegate int LineUpCharacterPosition_NormalArgs(Params_LineUpCharacterPosition args);

        public delegate void MarkGeometryAsDirty_BeforeArgs(Params_MarkGeometryAsDirty args);

        public delegate void MarkGeometryAsDirty_NormalArgs(Params_MarkGeometryAsDirty args);

        public delegate void MayDrag_BeforeArgs(Params_MayDrag args);

        public delegate bool MayDrag_NormalArgs(Params_MayDrag args);

        public delegate void MouseDragOutsideRect_BeforeArgs(Params_MouseDragOutsideRect args);

        public delegate IEnumerator MouseDragOutsideRect_NormalArgs(Params_MouseDragOutsideRect args);

        public delegate void MoveDown_bool_BeforeArgs(Params_MoveDown_bool args);

        public delegate void MoveDown_bool_bool_BeforeArgs(Params_MoveDown_bool_bool args);

        public delegate void MoveDown_bool_bool_NormalArgs(Params_MoveDown_bool_bool args);

        public delegate void MoveDown_bool_NormalArgs(Params_MoveDown_bool args);

        public delegate void MoveLeft_BeforeArgs(Params_MoveLeft args);

        public delegate void MoveLeft_NormalArgs(Params_MoveLeft args);

        public delegate void MoveRight_BeforeArgs(Params_MoveRight args);

        public delegate void MoveRight_NormalArgs(Params_MoveRight args);

        public delegate void MoveTextEnd_BeforeArgs(Params_MoveTextEnd args);

        public delegate void MoveTextEnd_NormalArgs(Params_MoveTextEnd args);

        public delegate void MoveTextStart_BeforeArgs(Params_MoveTextStart args);

        public delegate void MoveTextStart_NormalArgs(Params_MoveTextStart args);

        public delegate void MoveUp_bool_BeforeArgs(Params_MoveUp_bool args);

        public delegate void MoveUp_bool_bool_BeforeArgs(Params_MoveUp_bool_bool args);

        public delegate void MoveUp_bool_bool_NormalArgs(Params_MoveUp_bool_bool args);

        public delegate void MoveUp_bool_NormalArgs(Params_MoveUp_bool args);

        public delegate void OnBeginDrag_BeforeArgs(Params_OnBeginDrag args);

        public delegate void OnBeginDrag_NormalArgs(Params_OnBeginDrag args);

        public delegate void OnDeselect_BeforeArgs(Params_OnDeselect args);

        public delegate void OnDeselect_NormalArgs(Params_OnDeselect args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnDrag_BeforeArgs(Params_OnDrag args);

        public delegate void OnDrag_NormalArgs(Params_OnDrag args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnEndDrag_BeforeArgs(Params_OnEndDrag args);

        public delegate void OnEndDrag_NormalArgs(Params_OnEndDrag args);

        public delegate void OnFillVBO_BeforeArgs(Params_OnFillVBO args);

        public delegate void OnFillVBO_NormalArgs(Params_OnFillVBO args);

        public delegate void OnFocus_BeforeArgs(Params_OnFocus args);

        public delegate void OnFocus_NormalArgs(Params_OnFocus args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnPointerDown_BeforeArgs(Params_OnPointerDown args);

        public delegate void OnPointerDown_NormalArgs(Params_OnPointerDown args);

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_NormalArgs(Params_OnSelect args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void OnUpdateSelected_BeforeArgs(Params_OnUpdateSelected args);

        public delegate void OnUpdateSelected_NormalArgs(Params_OnUpdateSelected args);

        public delegate void ProcessEvent_BeforeArgs(Params_ProcessEvent args);

        public delegate void ProcessEvent_NormalArgs(Params_ProcessEvent args);

        public delegate void Rebuild_BeforeArgs(Params_Rebuild args);

        public delegate void Rebuild_NormalArgs(Params_Rebuild args);

        public delegate void SelectAll_BeforeArgs(Params_SelectAll args);

        public delegate void SelectAll_NormalArgs(Params_SelectAll args);

        public delegate void SendOnFocusLost_BeforeArgs(Params_SendOnFocusLost args);

        public delegate void SendOnFocusLost_NormalArgs(Params_SendOnFocusLost args);

        public delegate void SendOnSubmit_BeforeArgs(Params_SendOnSubmit args);

        public delegate void SendOnSubmit_NormalArgs(Params_SendOnSubmit args);

        public delegate void SendOnValueChanged_BeforeArgs(Params_SendOnValueChanged args);

        public delegate void SendOnValueChanged_NormalArgs(Params_SendOnValueChanged args);

        public delegate void SendOnValueChangedAndUpdateLabel_BeforeArgs(Params_SendOnValueChangedAndUpdateLabel args);

        public delegate void SendOnValueChangedAndUpdateLabel_NormalArgs(Params_SendOnValueChangedAndUpdateLabel args);

        public delegate void set_asteriskChar_BeforeArgs(Params_set_asteriskChar args);

        public delegate void set_asteriskChar_NormalArgs(Params_set_asteriskChar args);

        public delegate void set_caretBlinkRate_BeforeArgs(Params_set_caretBlinkRate args);

        public delegate void set_caretBlinkRate_NormalArgs(Params_set_caretBlinkRate args);

        public delegate void set_caretColor_BeforeArgs(Params_set_caretColor args);

        public delegate void set_caretColor_NormalArgs(Params_set_caretColor args);

        public delegate void set_caretPosition_BeforeArgs(Params_set_caretPosition args);

        public delegate void set_caretPosition_NormalArgs(Params_set_caretPosition args);

        public delegate void set_caretPositionInternal_BeforeArgs(Params_set_caretPositionInternal args);

        public delegate void set_caretPositionInternal_NormalArgs(Params_set_caretPositionInternal args);

        public delegate void set_caretSelectPositionInternal_BeforeArgs(Params_set_caretSelectPositionInternal args);

        public delegate void set_caretSelectPositionInternal_NormalArgs(Params_set_caretSelectPositionInternal args);

        public delegate void set_caretWidth_BeforeArgs(Params_set_caretWidth args);

        public delegate void set_caretWidth_NormalArgs(Params_set_caretWidth args);

        public delegate void set_characterLimit_BeforeArgs(Params_set_characterLimit args);

        public delegate void set_characterLimit_NormalArgs(Params_set_characterLimit args);

        public delegate void set_clipboard_BeforeArgs(Params_set_clipboard args);

        public delegate void set_clipboard_NormalArgs(Params_set_clipboard args);

        public delegate void set_customCaretColor_BeforeArgs(Params_set_customCaretColor args);

        public delegate void set_customCaretColor_NormalArgs(Params_set_customCaretColor args);

        public delegate void set_keyboardType_BeforeArgs(Params_set_keyboardType args);

        public delegate void set_keyboardType_NormalArgs(Params_set_keyboardType args);

        public delegate void set_placeholder_BeforeArgs(Params_set_placeholder args);

        public delegate void set_placeholder_NormalArgs(Params_set_placeholder args);

        public delegate void set_readOnly_BeforeArgs(Params_set_readOnly args);

        public delegate void set_readOnly_NormalArgs(Params_set_readOnly args);

        public delegate void set_richText_BeforeArgs(Params_set_richText args);

        public delegate void set_richText_NormalArgs(Params_set_richText args);

        public delegate void set_selectionAnchorPosition_BeforeArgs(Params_set_selectionAnchorPosition args);

        public delegate void set_selectionAnchorPosition_NormalArgs(Params_set_selectionAnchorPosition args);

        public delegate void set_selectionColor_BeforeArgs(Params_set_selectionColor args);

        public delegate void set_selectionColor_NormalArgs(Params_set_selectionColor args);

        public delegate void set_selectionFocusPosition_BeforeArgs(Params_set_selectionFocusPosition args);

        public delegate void set_selectionFocusPosition_NormalArgs(Params_set_selectionFocusPosition args);

        public delegate void set_shouldHideMobileInput_BeforeArgs(Params_set_shouldHideMobileInput args);

        public delegate void set_shouldHideMobileInput_NormalArgs(Params_set_shouldHideMobileInput args);

        public delegate void set_stringPositionInternal_BeforeArgs(Params_set_stringPositionInternal args);

        public delegate void set_stringPositionInternal_NormalArgs(Params_set_stringPositionInternal args);

        public delegate void set_stringSelectPositionInternal_BeforeArgs(Params_set_stringSelectPositionInternal args);

        public delegate void set_stringSelectPositionInternal_NormalArgs(Params_set_stringSelectPositionInternal args);

        public delegate void set_text_BeforeArgs(Params_set_text args);

        public delegate void set_text_NormalArgs(Params_set_text args);

        public delegate void set_textComponent_BeforeArgs(Params_set_textComponent args);

        public delegate void set_textComponent_NormalArgs(Params_set_textComponent args);

        public delegate void set_textViewport_BeforeArgs(Params_set_textViewport args);

        public delegate void set_textViewport_NormalArgs(Params_set_textViewport args);

        public delegate void SetCaretActive_BeforeArgs(Params_SetCaretActive args);

        public delegate void SetCaretActive_NormalArgs(Params_SetCaretActive args);

        public delegate void SetCaretVisible_BeforeArgs(Params_SetCaretVisible args);

        public delegate void SetCaretVisible_NormalArgs(Params_SetCaretVisible args);

        public delegate void SetTextComponentRichTextMode_BeforeArgs(Params_SetTextComponentRichTextMode args);

        public delegate void SetTextComponentRichTextMode_NormalArgs(Params_SetTextComponentRichTextMode args);

        public delegate void SetTextComponentWrapMode_BeforeArgs(Params_SetTextComponentWrapMode args);

        public delegate void SetTextComponentWrapMode_NormalArgs(Params_SetTextComponentWrapMode args);

        public delegate void SetToCustom_BeforeArgs(Params_SetToCustom args);

        public delegate void SetToCustom_NormalArgs(Params_SetToCustom args);

        public delegate void SetToCustomIfContentTypeIsNot_BeforeArgs(Params_SetToCustomIfContentTypeIsNot args);

        public delegate void SetToCustomIfContentTypeIsNot_NormalArgs(Params_SetToCustomIfContentTypeIsNot args);

        public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);

        public delegate void UpdateGeometry_NormalArgs(Params_UpdateGeometry args);

        public delegate void UpdateLabel_BeforeArgs(Params_UpdateLabel args);

        public delegate void UpdateLabel_NormalArgs(Params_UpdateLabel args);

        public delegate void Validate_BeforeArgs(Params_Validate args);

        public delegate char Validate_NormalArgs(Params_Validate args);

        public sealed class Params_get_mesh
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_shouldHideMobileInput
        {
            public TMP_InputField self;
            public bool value;
        }

        public sealed class Params_get_shouldHideMobileInput
        {
            public TMP_InputField self;
        }

        public sealed class Params_get_text
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_text
        {
            public TMP_InputField self;
            public string value;
        }

        public sealed class Params_get_isFocused
        {
            public TMP_InputField self;
        }

        public sealed class Params_get_caretBlinkRate
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_caretBlinkRate
        {
            public TMP_InputField self;
            public float value;
        }

        public sealed class Params_get_caretWidth
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_caretWidth
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_textViewport
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_textViewport
        {
            public TMP_InputField self;
            public RectTransform value;
        }

        public sealed class Params_get_textComponent
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_textComponent
        {
            public TMP_InputField self;
            public TMP_Text value;
        }

        public sealed class Params_get_placeholder
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_placeholder
        {
            public TMP_InputField self;
            public Graphic value;
        }

        public sealed class Params_get_caretColor
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_caretColor
        {
            public TMP_InputField self;
            public Color value;
        }

        public sealed class Params_get_customCaretColor
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_customCaretColor
        {
            public TMP_InputField self;
            public bool value;
        }

        public sealed class Params_get_selectionColor
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_selectionColor
        {
            public TMP_InputField self;
            public Color value;
        }

        public sealed class Params_get_characterLimit
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_characterLimit
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_keyboardType
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_keyboardType
        {
            public TMP_InputField self;
            public TouchScreenKeyboardType value;
        }

        public sealed class Params_get_readOnly
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_readOnly
        {
            public TMP_InputField self;
            public bool value;
        }

        public sealed class Params_get_richText
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_richText
        {
            public TMP_InputField self;
            public bool value;
        }

        public sealed class Params_get_multiLine
        {
            public TMP_InputField self;
        }

        public sealed class Params_get_asteriskChar
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_asteriskChar
        {
            public TMP_InputField self;
            public char value;
        }

        public sealed class Params_get_wasCanceled
        {
            public TMP_InputField self;
        }

        public sealed class Params_ClampPos
        {
            public int pos;
            public TMP_InputField self;
        }

        public sealed class Params_get_caretPositionInternal
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_caretPositionInternal
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_stringPositionInternal
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_stringPositionInternal
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_caretSelectPositionInternal
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_caretSelectPositionInternal
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_stringSelectPositionInternal
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_stringSelectPositionInternal
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_hasSelection
        {
            public TMP_InputField self;
        }

        public sealed class Params_get_caretPosition
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_caretPosition
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_selectionAnchorPosition
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_selectionAnchorPosition
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_get_selectionFocusPosition
        {
            public TMP_InputField self;
        }

        public sealed class Params_set_selectionFocusPosition
        {
            public TMP_InputField self;
            public int value;
        }

        public sealed class Params_OnEnable
        {
            public TMP_InputField self;
        }

        public sealed class Params_OnDisable
        {
            public TMP_InputField self;
        }

        public sealed class Params_CaretBlink
        {
            public TMP_InputField self;
        }

        public sealed class Params_SetCaretVisible
        {
            public TMP_InputField self;
        }

        public sealed class Params_SetCaretActive
        {
            public TMP_InputField self;
        }

        public sealed class Params_OnFocus
        {
            public TMP_InputField self;
        }

        public sealed class Params_SelectAll
        {
            public TMP_InputField self;
        }

        public sealed class Params_MoveTextEnd
        {
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_MoveTextStart
        {
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_set_clipboard
        {
            public string value;
        }

        public sealed class Params_InPlaceEditing
        {
            public TMP_InputField self;
        }

        public sealed class Params_LateUpdate
        {
            public TMP_InputField self;
        }

        public sealed class Params_GetCharacterIndexFromPosition
        {
            public Vector2 pos;
            public TMP_InputField self;
        }

        public sealed class Params_MayDrag
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_OnBeginDrag
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_OnDrag
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_MouseDragOutsideRect
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_OnEndDrag
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_OnPointerDown
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_IsValidChar
        {
            public char c;
            public TMP_InputField self;
        }

        public sealed class Params_ProcessEvent
        {
            public Event e;
            public TMP_InputField self;
        }

        public sealed class Params_OnUpdateSelected
        {
            public BaseEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_GetSelectedString
        {
            public TMP_InputField self;
        }

        public sealed class Params_FindtNextWordBegin
        {
            public TMP_InputField self;
        }

        public sealed class Params_MoveRight
        {
            public bool ctrl;
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_FindtPrevWordBegin
        {
            public TMP_InputField self;
        }

        public sealed class Params_MoveLeft
        {
            public bool ctrl;
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_LineUpCharacterPosition
        {
            public bool goToFirstChar;
            public int originalPos;
            public TMP_InputField self;
        }

        public sealed class Params_LineDownCharacterPosition
        {
            public bool goToLastChar;
            public int originalPos;
            public TMP_InputField self;
        }

        public sealed class Params_MoveDown_bool
        {
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_MoveDown_bool_bool
        {
            public bool goToLastChar;
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_MoveUp_bool
        {
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_MoveUp_bool_bool
        {
            public bool goToFirstChar;
            public TMP_InputField self;
            public bool shift;
        }

        public sealed class Params_Delete
        {
            public TMP_InputField self;
        }

        public sealed class Params_ForwardSpace
        {
            public TMP_InputField self;
        }

        public sealed class Params_Backspace
        {
            public TMP_InputField self;
        }

        public sealed class Params_Insert
        {
            public char c;
            public TMP_InputField self;
        }

        public sealed class Params_SendOnValueChangedAndUpdateLabel
        {
            public TMP_InputField self;
        }

        public sealed class Params_SendOnValueChanged
        {
            public TMP_InputField self;
        }

        public sealed class Params_SendOnSubmit
        {
            public TMP_InputField self;
        }

        public sealed class Params_SendOnFocusLost
        {
            public TMP_InputField self;
        }

        public sealed class Params_Append_string
        {
            public string input;
            public TMP_InputField self;
        }

        public sealed class Params_Append_Char
        {
            public char input;
            public TMP_InputField self;
        }

        public sealed class Params_UpdateLabel
        {
            public TMP_InputField self;
        }

        public sealed class Params_GetCaretPositionFromStringIndex
        {
            public TMP_InputField self;
            public int stringIndex;
        }

        public sealed class Params_GetStringIndexFromCaretPosition
        {
            public int caretPosition;
            public TMP_InputField self;
        }

        public sealed class Params_ForceLabelUpdate
        {
            public TMP_InputField self;
        }

        public sealed class Params_MarkGeometryAsDirty
        {
            public TMP_InputField self;
        }

        public sealed class Params_Rebuild
        {
            public TMP_InputField self;
            public CanvasUpdate update;
        }

        public sealed class Params_LayoutComplete
        {
            public TMP_InputField self;
        }

        public sealed class Params_GraphicUpdateComplete
        {
            public TMP_InputField self;
        }

        public sealed class Params_UpdateGeometry
        {
            public TMP_InputField self;
        }

        public sealed class Params_AssignPositioningIfNeeded
        {
            public TMP_InputField self;
        }

        public sealed class Params_OnFillVBO
        {
            public TMP_InputField self;
            public Mesh vbo;
        }

        public sealed class Params_GenerateCaret
        {
            public Vector2 roundingOffset;
            public TMP_InputField self;
            public VertexHelper vbo;
        }

        public sealed class Params_CreateCursorVerts
        {
            public TMP_InputField self;
        }

        public sealed class Params_GenerateHightlight
        {
            public Vector2 roundingOffset;
            public TMP_InputField self;
            public VertexHelper vbo;
        }

        public sealed class Params_AdjustRectTransformRelativeToViewport
        {
            public float height;
            public bool isCharVisible;
            public TMP_InputField self;
            public Vector2 startPosition;
        }

        public sealed class Params_Validate
        {
            public char ch;
            public int pos;
            public TMP_InputField self;
            public string text;
        }

        public sealed class Params_ActivateInputField
        {
            public TMP_InputField self;
        }

        public sealed class Params_ActivateInputFieldInternal
        {
            public TMP_InputField self;
        }

        public sealed class Params_OnSelect
        {
            public BaseEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_DeactivateInputField
        {
            public TMP_InputField self;
        }

        public sealed class Params_OnDeselect
        {
            public BaseEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public TMP_InputField self;
        }

        public sealed class Params_EnforceContentType
        {
            public TMP_InputField self;
        }

        public sealed class Params_SetTextComponentWrapMode
        {
            public TMP_InputField self;
        }

        public sealed class Params_SetTextComponentRichTextMode
        {
            public TMP_InputField self;
        }

        public sealed class Params_SetToCustomIfContentTypeIsNot
        {
            public TMP_InputField.ContentType[] allowedContentTypes;
            public TMP_InputField self;
        }

        public sealed class Params_SetToCustom
        {
            public TMP_InputField self;
        }

        public sealed class Params_get_transform
        {
            public TMP_InputField self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_mesh_BeforeArgs get_mesh
        {
            add
            {
                HookHandler._beforeget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._beforeget_mesh -= value;
        }

        public static event Delegates.set_shouldHideMobileInput_BeforeArgs set_shouldHideMobileInput
        {
            add
            {
                HookHandler._beforeset_shouldHideMobileInput += value;
                HookHandler.Hookset_shouldHideMobileInput();
            }
            remove => HookHandler._beforeset_shouldHideMobileInput -= value;
        }

        public static event Delegates.get_shouldHideMobileInput_BeforeArgs get_shouldHideMobileInput
        {
            add
            {
                HookHandler._beforeget_shouldHideMobileInput += value;
                HookHandler.Hookget_shouldHideMobileInput();
            }
            remove => HookHandler._beforeget_shouldHideMobileInput -= value;
        }

        public static event Delegates.get_text_BeforeArgs get_text
        {
            add
            {
                HookHandler._beforeget_text += value;
                HookHandler.Hookget_text();
            }
            remove => HookHandler._beforeget_text -= value;
        }

        public static event Delegates.set_text_BeforeArgs set_text
        {
            add
            {
                HookHandler._beforeset_text += value;
                HookHandler.Hookset_text();
            }
            remove => HookHandler._beforeset_text -= value;
        }

        public static event Delegates.get_isFocused_BeforeArgs get_isFocused
        {
            add
            {
                HookHandler._beforeget_isFocused += value;
                HookHandler.Hookget_isFocused();
            }
            remove => HookHandler._beforeget_isFocused -= value;
        }

        public static event Delegates.get_caretBlinkRate_BeforeArgs get_caretBlinkRate
        {
            add
            {
                HookHandler._beforeget_caretBlinkRate += value;
                HookHandler.Hookget_caretBlinkRate();
            }
            remove => HookHandler._beforeget_caretBlinkRate -= value;
        }

        public static event Delegates.set_caretBlinkRate_BeforeArgs set_caretBlinkRate
        {
            add
            {
                HookHandler._beforeset_caretBlinkRate += value;
                HookHandler.Hookset_caretBlinkRate();
            }
            remove => HookHandler._beforeset_caretBlinkRate -= value;
        }

        public static event Delegates.get_caretWidth_BeforeArgs get_caretWidth
        {
            add
            {
                HookHandler._beforeget_caretWidth += value;
                HookHandler.Hookget_caretWidth();
            }
            remove => HookHandler._beforeget_caretWidth -= value;
        }

        public static event Delegates.set_caretWidth_BeforeArgs set_caretWidth
        {
            add
            {
                HookHandler._beforeset_caretWidth += value;
                HookHandler.Hookset_caretWidth();
            }
            remove => HookHandler._beforeset_caretWidth -= value;
        }

        public static event Delegates.get_textViewport_BeforeArgs get_textViewport
        {
            add
            {
                HookHandler._beforeget_textViewport += value;
                HookHandler.Hookget_textViewport();
            }
            remove => HookHandler._beforeget_textViewport -= value;
        }

        public static event Delegates.set_textViewport_BeforeArgs set_textViewport
        {
            add
            {
                HookHandler._beforeset_textViewport += value;
                HookHandler.Hookset_textViewport();
            }
            remove => HookHandler._beforeset_textViewport -= value;
        }

        public static event Delegates.get_textComponent_BeforeArgs get_textComponent
        {
            add
            {
                HookHandler._beforeget_textComponent += value;
                HookHandler.Hookget_textComponent();
            }
            remove => HookHandler._beforeget_textComponent -= value;
        }

        public static event Delegates.set_textComponent_BeforeArgs set_textComponent
        {
            add
            {
                HookHandler._beforeset_textComponent += value;
                HookHandler.Hookset_textComponent();
            }
            remove => HookHandler._beforeset_textComponent -= value;
        }

        public static event Delegates.get_placeholder_BeforeArgs get_placeholder
        {
            add
            {
                HookHandler._beforeget_placeholder += value;
                HookHandler.Hookget_placeholder();
            }
            remove => HookHandler._beforeget_placeholder -= value;
        }

        public static event Delegates.set_placeholder_BeforeArgs set_placeholder
        {
            add
            {
                HookHandler._beforeset_placeholder += value;
                HookHandler.Hookset_placeholder();
            }
            remove => HookHandler._beforeset_placeholder -= value;
        }

        public static event Delegates.get_caretColor_BeforeArgs get_caretColor
        {
            add
            {
                HookHandler._beforeget_caretColor += value;
                HookHandler.Hookget_caretColor();
            }
            remove => HookHandler._beforeget_caretColor -= value;
        }

        public static event Delegates.set_caretColor_BeforeArgs set_caretColor
        {
            add
            {
                HookHandler._beforeset_caretColor += value;
                HookHandler.Hookset_caretColor();
            }
            remove => HookHandler._beforeset_caretColor -= value;
        }

        public static event Delegates.get_customCaretColor_BeforeArgs get_customCaretColor
        {
            add
            {
                HookHandler._beforeget_customCaretColor += value;
                HookHandler.Hookget_customCaretColor();
            }
            remove => HookHandler._beforeget_customCaretColor -= value;
        }

        public static event Delegates.set_customCaretColor_BeforeArgs set_customCaretColor
        {
            add
            {
                HookHandler._beforeset_customCaretColor += value;
                HookHandler.Hookset_customCaretColor();
            }
            remove => HookHandler._beforeset_customCaretColor -= value;
        }

        public static event Delegates.get_selectionColor_BeforeArgs get_selectionColor
        {
            add
            {
                HookHandler._beforeget_selectionColor += value;
                HookHandler.Hookget_selectionColor();
            }
            remove => HookHandler._beforeget_selectionColor -= value;
        }

        public static event Delegates.set_selectionColor_BeforeArgs set_selectionColor
        {
            add
            {
                HookHandler._beforeset_selectionColor += value;
                HookHandler.Hookset_selectionColor();
            }
            remove => HookHandler._beforeset_selectionColor -= value;
        }

        public static event Delegates.get_characterLimit_BeforeArgs get_characterLimit
        {
            add
            {
                HookHandler._beforeget_characterLimit += value;
                HookHandler.Hookget_characterLimit();
            }
            remove => HookHandler._beforeget_characterLimit -= value;
        }

        public static event Delegates.set_characterLimit_BeforeArgs set_characterLimit
        {
            add
            {
                HookHandler._beforeset_characterLimit += value;
                HookHandler.Hookset_characterLimit();
            }
            remove => HookHandler._beforeset_characterLimit -= value;
        }

        public static event Delegates.get_keyboardType_BeforeArgs get_keyboardType
        {
            add
            {
                HookHandler._beforeget_keyboardType += value;
                HookHandler.Hookget_keyboardType();
            }
            remove => HookHandler._beforeget_keyboardType -= value;
        }

        public static event Delegates.set_keyboardType_BeforeArgs set_keyboardType
        {
            add
            {
                HookHandler._beforeset_keyboardType += value;
                HookHandler.Hookset_keyboardType();
            }
            remove => HookHandler._beforeset_keyboardType -= value;
        }

        public static event Delegates.get_readOnly_BeforeArgs get_readOnly
        {
            add
            {
                HookHandler._beforeget_readOnly += value;
                HookHandler.Hookget_readOnly();
            }
            remove => HookHandler._beforeget_readOnly -= value;
        }

        public static event Delegates.set_readOnly_BeforeArgs set_readOnly
        {
            add
            {
                HookHandler._beforeset_readOnly += value;
                HookHandler.Hookset_readOnly();
            }
            remove => HookHandler._beforeset_readOnly -= value;
        }

        public static event Delegates.get_richText_BeforeArgs get_richText
        {
            add
            {
                HookHandler._beforeget_richText += value;
                HookHandler.Hookget_richText();
            }
            remove => HookHandler._beforeget_richText -= value;
        }

        public static event Delegates.set_richText_BeforeArgs set_richText
        {
            add
            {
                HookHandler._beforeset_richText += value;
                HookHandler.Hookset_richText();
            }
            remove => HookHandler._beforeset_richText -= value;
        }

        public static event Delegates.get_multiLine_BeforeArgs get_multiLine
        {
            add
            {
                HookHandler._beforeget_multiLine += value;
                HookHandler.Hookget_multiLine();
            }
            remove => HookHandler._beforeget_multiLine -= value;
        }

        public static event Delegates.get_asteriskChar_BeforeArgs get_asteriskChar
        {
            add
            {
                HookHandler._beforeget_asteriskChar += value;
                HookHandler.Hookget_asteriskChar();
            }
            remove => HookHandler._beforeget_asteriskChar -= value;
        }

        public static event Delegates.set_asteriskChar_BeforeArgs set_asteriskChar
        {
            add
            {
                HookHandler._beforeset_asteriskChar += value;
                HookHandler.Hookset_asteriskChar();
            }
            remove => HookHandler._beforeset_asteriskChar -= value;
        }

        public static event Delegates.get_wasCanceled_BeforeArgs get_wasCanceled
        {
            add
            {
                HookHandler._beforeget_wasCanceled += value;
                HookHandler.Hookget_wasCanceled();
            }
            remove => HookHandler._beforeget_wasCanceled -= value;
        }

        public static event Delegates.ClampPos_BeforeArgs ClampPos
        {
            add
            {
                HookHandler._beforeClampPos += value;
                HookHandler.HookClampPos();
            }
            remove => HookHandler._beforeClampPos -= value;
        }

        public static event Delegates.get_caretPositionInternal_BeforeArgs get_caretPositionInternal
        {
            add
            {
                HookHandler._beforeget_caretPositionInternal += value;
                HookHandler.Hookget_caretPositionInternal();
            }
            remove => HookHandler._beforeget_caretPositionInternal -= value;
        }

        public static event Delegates.set_caretPositionInternal_BeforeArgs set_caretPositionInternal
        {
            add
            {
                HookHandler._beforeset_caretPositionInternal += value;
                HookHandler.Hookset_caretPositionInternal();
            }
            remove => HookHandler._beforeset_caretPositionInternal -= value;
        }

        public static event Delegates.get_stringPositionInternal_BeforeArgs get_stringPositionInternal
        {
            add
            {
                HookHandler._beforeget_stringPositionInternal += value;
                HookHandler.Hookget_stringPositionInternal();
            }
            remove => HookHandler._beforeget_stringPositionInternal -= value;
        }

        public static event Delegates.set_stringPositionInternal_BeforeArgs set_stringPositionInternal
        {
            add
            {
                HookHandler._beforeset_stringPositionInternal += value;
                HookHandler.Hookset_stringPositionInternal();
            }
            remove => HookHandler._beforeset_stringPositionInternal -= value;
        }

        public static event Delegates.get_caretSelectPositionInternal_BeforeArgs get_caretSelectPositionInternal
        {
            add
            {
                HookHandler._beforeget_caretSelectPositionInternal += value;
                HookHandler.Hookget_caretSelectPositionInternal();
            }
            remove => HookHandler._beforeget_caretSelectPositionInternal -= value;
        }

        public static event Delegates.set_caretSelectPositionInternal_BeforeArgs set_caretSelectPositionInternal
        {
            add
            {
                HookHandler._beforeset_caretSelectPositionInternal += value;
                HookHandler.Hookset_caretSelectPositionInternal();
            }
            remove => HookHandler._beforeset_caretSelectPositionInternal -= value;
        }

        public static event Delegates.get_stringSelectPositionInternal_BeforeArgs get_stringSelectPositionInternal
        {
            add
            {
                HookHandler._beforeget_stringSelectPositionInternal += value;
                HookHandler.Hookget_stringSelectPositionInternal();
            }
            remove => HookHandler._beforeget_stringSelectPositionInternal -= value;
        }

        public static event Delegates.set_stringSelectPositionInternal_BeforeArgs set_stringSelectPositionInternal
        {
            add
            {
                HookHandler._beforeset_stringSelectPositionInternal += value;
                HookHandler.Hookset_stringSelectPositionInternal();
            }
            remove => HookHandler._beforeset_stringSelectPositionInternal -= value;
        }

        public static event Delegates.get_hasSelection_BeforeArgs get_hasSelection
        {
            add
            {
                HookHandler._beforeget_hasSelection += value;
                HookHandler.Hookget_hasSelection();
            }
            remove => HookHandler._beforeget_hasSelection -= value;
        }

        public static event Delegates.get_caretPosition_BeforeArgs get_caretPosition
        {
            add
            {
                HookHandler._beforeget_caretPosition += value;
                HookHandler.Hookget_caretPosition();
            }
            remove => HookHandler._beforeget_caretPosition -= value;
        }

        public static event Delegates.set_caretPosition_BeforeArgs set_caretPosition
        {
            add
            {
                HookHandler._beforeset_caretPosition += value;
                HookHandler.Hookset_caretPosition();
            }
            remove => HookHandler._beforeset_caretPosition -= value;
        }

        public static event Delegates.get_selectionAnchorPosition_BeforeArgs get_selectionAnchorPosition
        {
            add
            {
                HookHandler._beforeget_selectionAnchorPosition += value;
                HookHandler.Hookget_selectionAnchorPosition();
            }
            remove => HookHandler._beforeget_selectionAnchorPosition -= value;
        }

        public static event Delegates.set_selectionAnchorPosition_BeforeArgs set_selectionAnchorPosition
        {
            add
            {
                HookHandler._beforeset_selectionAnchorPosition += value;
                HookHandler.Hookset_selectionAnchorPosition();
            }
            remove => HookHandler._beforeset_selectionAnchorPosition -= value;
        }

        public static event Delegates.get_selectionFocusPosition_BeforeArgs get_selectionFocusPosition
        {
            add
            {
                HookHandler._beforeget_selectionFocusPosition += value;
                HookHandler.Hookget_selectionFocusPosition();
            }
            remove => HookHandler._beforeget_selectionFocusPosition -= value;
        }

        public static event Delegates.set_selectionFocusPosition_BeforeArgs set_selectionFocusPosition
        {
            add
            {
                HookHandler._beforeset_selectionFocusPosition += value;
                HookHandler.Hookset_selectionFocusPosition();
            }
            remove => HookHandler._beforeset_selectionFocusPosition -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.CaretBlink_BeforeArgs CaretBlink
        {
            add
            {
                HookHandler._beforeCaretBlink += value;
                HookHandler.HookCaretBlink();
            }
            remove => HookHandler._beforeCaretBlink -= value;
        }

        public static event Delegates.SetCaretVisible_BeforeArgs SetCaretVisible
        {
            add
            {
                HookHandler._beforeSetCaretVisible += value;
                HookHandler.HookSetCaretVisible();
            }
            remove => HookHandler._beforeSetCaretVisible -= value;
        }

        public static event Delegates.SetCaretActive_BeforeArgs SetCaretActive
        {
            add
            {
                HookHandler._beforeSetCaretActive += value;
                HookHandler.HookSetCaretActive();
            }
            remove => HookHandler._beforeSetCaretActive -= value;
        }

        public static event Delegates.OnFocus_BeforeArgs OnFocus
        {
            add
            {
                HookHandler._beforeOnFocus += value;
                HookHandler.HookOnFocus();
            }
            remove => HookHandler._beforeOnFocus -= value;
        }

        public static event Delegates.SelectAll_BeforeArgs SelectAll
        {
            add
            {
                HookHandler._beforeSelectAll += value;
                HookHandler.HookSelectAll();
            }
            remove => HookHandler._beforeSelectAll -= value;
        }

        public static event Delegates.MoveTextEnd_BeforeArgs MoveTextEnd
        {
            add
            {
                HookHandler._beforeMoveTextEnd += value;
                HookHandler.HookMoveTextEnd();
            }
            remove => HookHandler._beforeMoveTextEnd -= value;
        }

        public static event Delegates.MoveTextStart_BeforeArgs MoveTextStart
        {
            add
            {
                HookHandler._beforeMoveTextStart += value;
                HookHandler.HookMoveTextStart();
            }
            remove => HookHandler._beforeMoveTextStart -= value;
        }

        public static event Delegates.get_clipboard_BeforeArgs get_clipboard
        {
            add
            {
                HookHandler._beforeget_clipboard += value;
                HookHandler.Hookget_clipboard();
            }
            remove => HookHandler._beforeget_clipboard -= value;
        }

        public static event Delegates.set_clipboard_BeforeArgs set_clipboard
        {
            add
            {
                HookHandler._beforeset_clipboard += value;
                HookHandler.Hookset_clipboard();
            }
            remove => HookHandler._beforeset_clipboard -= value;
        }

        public static event Delegates.InPlaceEditing_BeforeArgs InPlaceEditing
        {
            add
            {
                HookHandler._beforeInPlaceEditing += value;
                HookHandler.HookInPlaceEditing();
            }
            remove => HookHandler._beforeInPlaceEditing -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.GetCharacterIndexFromPosition_BeforeArgs GetCharacterIndexFromPosition
        {
            add
            {
                HookHandler._beforeGetCharacterIndexFromPosition += value;
                HookHandler.HookGetCharacterIndexFromPosition();
            }
            remove => HookHandler._beforeGetCharacterIndexFromPosition -= value;
        }

        public static event Delegates.MayDrag_BeforeArgs MayDrag
        {
            add
            {
                HookHandler._beforeMayDrag += value;
                HookHandler.HookMayDrag();
            }
            remove => HookHandler._beforeMayDrag -= value;
        }

        public static event Delegates.OnBeginDrag_BeforeArgs OnBeginDrag
        {
            add
            {
                HookHandler._beforeOnBeginDrag += value;
                HookHandler.HookOnBeginDrag();
            }
            remove => HookHandler._beforeOnBeginDrag -= value;
        }

        public static event Delegates.OnDrag_BeforeArgs OnDrag
        {
            add
            {
                HookHandler._beforeOnDrag += value;
                HookHandler.HookOnDrag();
            }
            remove => HookHandler._beforeOnDrag -= value;
        }

        public static event Delegates.MouseDragOutsideRect_BeforeArgs MouseDragOutsideRect
        {
            add
            {
                HookHandler._beforeMouseDragOutsideRect += value;
                HookHandler.HookMouseDragOutsideRect();
            }
            remove => HookHandler._beforeMouseDragOutsideRect -= value;
        }

        public static event Delegates.OnEndDrag_BeforeArgs OnEndDrag
        {
            add
            {
                HookHandler._beforeOnEndDrag += value;
                HookHandler.HookOnEndDrag();
            }
            remove => HookHandler._beforeOnEndDrag -= value;
        }

        public static event Delegates.OnPointerDown_BeforeArgs OnPointerDown
        {
            add
            {
                HookHandler._beforeOnPointerDown += value;
                HookHandler.HookOnPointerDown();
            }
            remove => HookHandler._beforeOnPointerDown -= value;
        }

        public static event Delegates.IsValidChar_BeforeArgs IsValidChar
        {
            add
            {
                HookHandler._beforeIsValidChar += value;
                HookHandler.HookIsValidChar();
            }
            remove => HookHandler._beforeIsValidChar -= value;
        }

        public static event Delegates.ProcessEvent_BeforeArgs ProcessEvent
        {
            add
            {
                HookHandler._beforeProcessEvent += value;
                HookHandler.HookProcessEvent();
            }
            remove => HookHandler._beforeProcessEvent -= value;
        }

        public static event Delegates.OnUpdateSelected_BeforeArgs OnUpdateSelected
        {
            add
            {
                HookHandler._beforeOnUpdateSelected += value;
                HookHandler.HookOnUpdateSelected();
            }
            remove => HookHandler._beforeOnUpdateSelected -= value;
        }

        public static event Delegates.GetSelectedString_BeforeArgs GetSelectedString
        {
            add
            {
                HookHandler._beforeGetSelectedString += value;
                HookHandler.HookGetSelectedString();
            }
            remove => HookHandler._beforeGetSelectedString -= value;
        }

        public static event Delegates.FindtNextWordBegin_BeforeArgs FindtNextWordBegin
        {
            add
            {
                HookHandler._beforeFindtNextWordBegin += value;
                HookHandler.HookFindtNextWordBegin();
            }
            remove => HookHandler._beforeFindtNextWordBegin -= value;
        }

        public static event Delegates.MoveRight_BeforeArgs MoveRight
        {
            add
            {
                HookHandler._beforeMoveRight += value;
                HookHandler.HookMoveRight();
            }
            remove => HookHandler._beforeMoveRight -= value;
        }

        public static event Delegates.FindtPrevWordBegin_BeforeArgs FindtPrevWordBegin
        {
            add
            {
                HookHandler._beforeFindtPrevWordBegin += value;
                HookHandler.HookFindtPrevWordBegin();
            }
            remove => HookHandler._beforeFindtPrevWordBegin -= value;
        }

        public static event Delegates.MoveLeft_BeforeArgs MoveLeft
        {
            add
            {
                HookHandler._beforeMoveLeft += value;
                HookHandler.HookMoveLeft();
            }
            remove => HookHandler._beforeMoveLeft -= value;
        }

        public static event Delegates.LineUpCharacterPosition_BeforeArgs LineUpCharacterPosition
        {
            add
            {
                HookHandler._beforeLineUpCharacterPosition += value;
                HookHandler.HookLineUpCharacterPosition();
            }
            remove => HookHandler._beforeLineUpCharacterPosition -= value;
        }

        public static event Delegates.LineDownCharacterPosition_BeforeArgs LineDownCharacterPosition
        {
            add
            {
                HookHandler._beforeLineDownCharacterPosition += value;
                HookHandler.HookLineDownCharacterPosition();
            }
            remove => HookHandler._beforeLineDownCharacterPosition -= value;
        }

        public static event Delegates.MoveDown_bool_BeforeArgs MoveDown_bool
        {
            add
            {
                HookHandler._beforeMoveDown_bool += value;
                HookHandler.HookMoveDown_bool();
            }
            remove => HookHandler._beforeMoveDown_bool -= value;
        }

        public static event Delegates.MoveDown_bool_bool_BeforeArgs MoveDown_bool_bool
        {
            add
            {
                HookHandler._beforeMoveDown_bool_bool += value;
                HookHandler.HookMoveDown_bool_bool();
            }
            remove => HookHandler._beforeMoveDown_bool_bool -= value;
        }

        public static event Delegates.MoveUp_bool_BeforeArgs MoveUp_bool
        {
            add
            {
                HookHandler._beforeMoveUp_bool += value;
                HookHandler.HookMoveUp_bool();
            }
            remove => HookHandler._beforeMoveUp_bool -= value;
        }

        public static event Delegates.MoveUp_bool_bool_BeforeArgs MoveUp_bool_bool
        {
            add
            {
                HookHandler._beforeMoveUp_bool_bool += value;
                HookHandler.HookMoveUp_bool_bool();
            }
            remove => HookHandler._beforeMoveUp_bool_bool -= value;
        }

        public static event Delegates.Delete_BeforeArgs Delete
        {
            add
            {
                HookHandler._beforeDelete += value;
                HookHandler.HookDelete();
            }
            remove => HookHandler._beforeDelete -= value;
        }

        public static event Delegates.ForwardSpace_BeforeArgs ForwardSpace
        {
            add
            {
                HookHandler._beforeForwardSpace += value;
                HookHandler.HookForwardSpace();
            }
            remove => HookHandler._beforeForwardSpace -= value;
        }

        public static event Delegates.Backspace_BeforeArgs Backspace
        {
            add
            {
                HookHandler._beforeBackspace += value;
                HookHandler.HookBackspace();
            }
            remove => HookHandler._beforeBackspace -= value;
        }

        public static event Delegates.Insert_BeforeArgs Insert
        {
            add
            {
                HookHandler._beforeInsert += value;
                HookHandler.HookInsert();
            }
            remove => HookHandler._beforeInsert -= value;
        }

        public static event Delegates.SendOnValueChangedAndUpdateLabel_BeforeArgs SendOnValueChangedAndUpdateLabel
        {
            add
            {
                HookHandler._beforeSendOnValueChangedAndUpdateLabel += value;
                HookHandler.HookSendOnValueChangedAndUpdateLabel();
            }
            remove => HookHandler._beforeSendOnValueChangedAndUpdateLabel -= value;
        }

        public static event Delegates.SendOnValueChanged_BeforeArgs SendOnValueChanged
        {
            add
            {
                HookHandler._beforeSendOnValueChanged += value;
                HookHandler.HookSendOnValueChanged();
            }
            remove => HookHandler._beforeSendOnValueChanged -= value;
        }

        public static event Delegates.SendOnSubmit_BeforeArgs SendOnSubmit
        {
            add
            {
                HookHandler._beforeSendOnSubmit += value;
                HookHandler.HookSendOnSubmit();
            }
            remove => HookHandler._beforeSendOnSubmit -= value;
        }

        public static event Delegates.SendOnFocusLost_BeforeArgs SendOnFocusLost
        {
            add
            {
                HookHandler._beforeSendOnFocusLost += value;
                HookHandler.HookSendOnFocusLost();
            }
            remove => HookHandler._beforeSendOnFocusLost -= value;
        }

        public static event Delegates.Append_string_BeforeArgs Append_string
        {
            add
            {
                HookHandler._beforeAppend_string += value;
                HookHandler.HookAppend_string();
            }
            remove => HookHandler._beforeAppend_string -= value;
        }

        public static event Delegates.Append_Char_BeforeArgs Append_Char
        {
            add
            {
                HookHandler._beforeAppend_Char += value;
                HookHandler.HookAppend_Char();
            }
            remove => HookHandler._beforeAppend_Char -= value;
        }

        public static event Delegates.UpdateLabel_BeforeArgs UpdateLabel
        {
            add
            {
                HookHandler._beforeUpdateLabel += value;
                HookHandler.HookUpdateLabel();
            }
            remove => HookHandler._beforeUpdateLabel -= value;
        }

        public static event Delegates.GetCaretPositionFromStringIndex_BeforeArgs GetCaretPositionFromStringIndex
        {
            add
            {
                HookHandler._beforeGetCaretPositionFromStringIndex += value;
                HookHandler.HookGetCaretPositionFromStringIndex();
            }
            remove => HookHandler._beforeGetCaretPositionFromStringIndex -= value;
        }

        public static event Delegates.GetStringIndexFromCaretPosition_BeforeArgs GetStringIndexFromCaretPosition
        {
            add
            {
                HookHandler._beforeGetStringIndexFromCaretPosition += value;
                HookHandler.HookGetStringIndexFromCaretPosition();
            }
            remove => HookHandler._beforeGetStringIndexFromCaretPosition -= value;
        }

        public static event Delegates.ForceLabelUpdate_BeforeArgs ForceLabelUpdate
        {
            add
            {
                HookHandler._beforeForceLabelUpdate += value;
                HookHandler.HookForceLabelUpdate();
            }
            remove => HookHandler._beforeForceLabelUpdate -= value;
        }

        public static event Delegates.MarkGeometryAsDirty_BeforeArgs MarkGeometryAsDirty
        {
            add
            {
                HookHandler._beforeMarkGeometryAsDirty += value;
                HookHandler.HookMarkGeometryAsDirty();
            }
            remove => HookHandler._beforeMarkGeometryAsDirty -= value;
        }

        public static event Delegates.Rebuild_BeforeArgs Rebuild
        {
            add
            {
                HookHandler._beforeRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._beforeRebuild -= value;
        }

        public static event Delegates.LayoutComplete_BeforeArgs LayoutComplete
        {
            add
            {
                HookHandler._beforeLayoutComplete += value;
                HookHandler.HookLayoutComplete();
            }
            remove => HookHandler._beforeLayoutComplete -= value;
        }

        public static event Delegates.GraphicUpdateComplete_BeforeArgs GraphicUpdateComplete
        {
            add
            {
                HookHandler._beforeGraphicUpdateComplete += value;
                HookHandler.HookGraphicUpdateComplete();
            }
            remove => HookHandler._beforeGraphicUpdateComplete -= value;
        }

        public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
        {
            add
            {
                HookHandler._beforeUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._beforeUpdateGeometry -= value;
        }

        public static event Delegates.AssignPositioningIfNeeded_BeforeArgs AssignPositioningIfNeeded
        {
            add
            {
                HookHandler._beforeAssignPositioningIfNeeded += value;
                HookHandler.HookAssignPositioningIfNeeded();
            }
            remove => HookHandler._beforeAssignPositioningIfNeeded -= value;
        }

        public static event Delegates.OnFillVBO_BeforeArgs OnFillVBO
        {
            add
            {
                HookHandler._beforeOnFillVBO += value;
                HookHandler.HookOnFillVBO();
            }
            remove => HookHandler._beforeOnFillVBO -= value;
        }

        public static event Delegates.GenerateCaret_BeforeArgs GenerateCaret
        {
            add
            {
                HookHandler._beforeGenerateCaret += value;
                HookHandler.HookGenerateCaret();
            }
            remove => HookHandler._beforeGenerateCaret -= value;
        }

        public static event Delegates.CreateCursorVerts_BeforeArgs CreateCursorVerts
        {
            add
            {
                HookHandler._beforeCreateCursorVerts += value;
                HookHandler.HookCreateCursorVerts();
            }
            remove => HookHandler._beforeCreateCursorVerts -= value;
        }

        public static event Delegates.GenerateHightlight_BeforeArgs GenerateHightlight
        {
            add
            {
                HookHandler._beforeGenerateHightlight += value;
                HookHandler.HookGenerateHightlight();
            }
            remove => HookHandler._beforeGenerateHightlight -= value;
        }

        public static event Delegates.AdjustRectTransformRelativeToViewport_BeforeArgs
            AdjustRectTransformRelativeToViewport
            {
                add
                {
                    HookHandler._beforeAdjustRectTransformRelativeToViewport += value;
                    HookHandler.HookAdjustRectTransformRelativeToViewport();
                }
                remove => HookHandler._beforeAdjustRectTransformRelativeToViewport -= value;
            }

        public static event Delegates.Validate_BeforeArgs Validate
        {
            add
            {
                HookHandler._beforeValidate += value;
                HookHandler.HookValidate();
            }
            remove => HookHandler._beforeValidate -= value;
        }

        public static event Delegates.ActivateInputField_BeforeArgs ActivateInputField
        {
            add
            {
                HookHandler._beforeActivateInputField += value;
                HookHandler.HookActivateInputField();
            }
            remove => HookHandler._beforeActivateInputField -= value;
        }

        public static event Delegates.ActivateInputFieldInternal_BeforeArgs ActivateInputFieldInternal
        {
            add
            {
                HookHandler._beforeActivateInputFieldInternal += value;
                HookHandler.HookActivateInputFieldInternal();
            }
            remove => HookHandler._beforeActivateInputFieldInternal -= value;
        }

        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.DeactivateInputField_BeforeArgs DeactivateInputField
        {
            add
            {
                HookHandler._beforeDeactivateInputField += value;
                HookHandler.HookDeactivateInputField();
            }
            remove => HookHandler._beforeDeactivateInputField -= value;
        }

        public static event Delegates.OnDeselect_BeforeArgs OnDeselect
        {
            add
            {
                HookHandler._beforeOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._beforeOnDeselect -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.EnforceContentType_BeforeArgs EnforceContentType
        {
            add
            {
                HookHandler._beforeEnforceContentType += value;
                HookHandler.HookEnforceContentType();
            }
            remove => HookHandler._beforeEnforceContentType -= value;
        }

        public static event Delegates.SetTextComponentWrapMode_BeforeArgs SetTextComponentWrapMode
        {
            add
            {
                HookHandler._beforeSetTextComponentWrapMode += value;
                HookHandler.HookSetTextComponentWrapMode();
            }
            remove => HookHandler._beforeSetTextComponentWrapMode -= value;
        }

        public static event Delegates.SetTextComponentRichTextMode_BeforeArgs SetTextComponentRichTextMode
        {
            add
            {
                HookHandler._beforeSetTextComponentRichTextMode += value;
                HookHandler.HookSetTextComponentRichTextMode();
            }
            remove => HookHandler._beforeSetTextComponentRichTextMode -= value;
        }

        public static event Delegates.SetToCustomIfContentTypeIsNot_BeforeArgs SetToCustomIfContentTypeIsNot
        {
            add
            {
                HookHandler._beforeSetToCustomIfContentTypeIsNot += value;
                HookHandler.HookSetToCustomIfContentTypeIsNot();
            }
            remove => HookHandler._beforeSetToCustomIfContentTypeIsNot -= value;
        }

        public static event Delegates.SetToCustom_BeforeArgs SetToCustom
        {
            add
            {
                HookHandler._beforeSetToCustom += value;
                HookHandler.HookSetToCustom();
            }
            remove => HookHandler._beforeSetToCustom -= value;
        }

        public static event Delegates.get_transform_BeforeArgs get_transform
        {
            add
            {
                HookHandler._beforeget_transform += value;
                HookHandler.Hookget_transform();
            }
            remove => HookHandler._beforeget_transform -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add
            {
                HookHandler._afterget_mesh += value;
                HookHandler.Hookget_mesh();
            }
            remove => HookHandler._afterget_mesh -= value;
        }

        public static event Delegates.set_shouldHideMobileInput_NormalArgs set_shouldHideMobileInput
        {
            add
            {
                HookHandler._afterset_shouldHideMobileInput += value;
                HookHandler.Hookset_shouldHideMobileInput();
            }
            remove => HookHandler._afterset_shouldHideMobileInput -= value;
        }

        public static event Delegates.get_shouldHideMobileInput_NormalArgs get_shouldHideMobileInput
        {
            add
            {
                HookHandler._afterget_shouldHideMobileInput += value;
                HookHandler.Hookget_shouldHideMobileInput();
            }
            remove => HookHandler._afterget_shouldHideMobileInput -= value;
        }

        public static event Delegates.get_text_NormalArgs get_text
        {
            add
            {
                HookHandler._afterget_text += value;
                HookHandler.Hookget_text();
            }
            remove => HookHandler._afterget_text -= value;
        }

        public static event Delegates.set_text_NormalArgs set_text
        {
            add
            {
                HookHandler._afterset_text += value;
                HookHandler.Hookset_text();
            }
            remove => HookHandler._afterset_text -= value;
        }

        public static event Delegates.get_isFocused_NormalArgs get_isFocused
        {
            add
            {
                HookHandler._afterget_isFocused += value;
                HookHandler.Hookget_isFocused();
            }
            remove => HookHandler._afterget_isFocused -= value;
        }

        public static event Delegates.get_caretBlinkRate_NormalArgs get_caretBlinkRate
        {
            add
            {
                HookHandler._afterget_caretBlinkRate += value;
                HookHandler.Hookget_caretBlinkRate();
            }
            remove => HookHandler._afterget_caretBlinkRate -= value;
        }

        public static event Delegates.set_caretBlinkRate_NormalArgs set_caretBlinkRate
        {
            add
            {
                HookHandler._afterset_caretBlinkRate += value;
                HookHandler.Hookset_caretBlinkRate();
            }
            remove => HookHandler._afterset_caretBlinkRate -= value;
        }

        public static event Delegates.get_caretWidth_NormalArgs get_caretWidth
        {
            add
            {
                HookHandler._afterget_caretWidth += value;
                HookHandler.Hookget_caretWidth();
            }
            remove => HookHandler._afterget_caretWidth -= value;
        }

        public static event Delegates.set_caretWidth_NormalArgs set_caretWidth
        {
            add
            {
                HookHandler._afterset_caretWidth += value;
                HookHandler.Hookset_caretWidth();
            }
            remove => HookHandler._afterset_caretWidth -= value;
        }

        public static event Delegates.get_textViewport_NormalArgs get_textViewport
        {
            add
            {
                HookHandler._afterget_textViewport += value;
                HookHandler.Hookget_textViewport();
            }
            remove => HookHandler._afterget_textViewport -= value;
        }

        public static event Delegates.set_textViewport_NormalArgs set_textViewport
        {
            add
            {
                HookHandler._afterset_textViewport += value;
                HookHandler.Hookset_textViewport();
            }
            remove => HookHandler._afterset_textViewport -= value;
        }

        public static event Delegates.get_textComponent_NormalArgs get_textComponent
        {
            add
            {
                HookHandler._afterget_textComponent += value;
                HookHandler.Hookget_textComponent();
            }
            remove => HookHandler._afterget_textComponent -= value;
        }

        public static event Delegates.set_textComponent_NormalArgs set_textComponent
        {
            add
            {
                HookHandler._afterset_textComponent += value;
                HookHandler.Hookset_textComponent();
            }
            remove => HookHandler._afterset_textComponent -= value;
        }

        public static event Delegates.get_placeholder_NormalArgs get_placeholder
        {
            add
            {
                HookHandler._afterget_placeholder += value;
                HookHandler.Hookget_placeholder();
            }
            remove => HookHandler._afterget_placeholder -= value;
        }

        public static event Delegates.set_placeholder_NormalArgs set_placeholder
        {
            add
            {
                HookHandler._afterset_placeholder += value;
                HookHandler.Hookset_placeholder();
            }
            remove => HookHandler._afterset_placeholder -= value;
        }

        public static event Delegates.get_caretColor_NormalArgs get_caretColor
        {
            add
            {
                HookHandler._afterget_caretColor += value;
                HookHandler.Hookget_caretColor();
            }
            remove => HookHandler._afterget_caretColor -= value;
        }

        public static event Delegates.set_caretColor_NormalArgs set_caretColor
        {
            add
            {
                HookHandler._afterset_caretColor += value;
                HookHandler.Hookset_caretColor();
            }
            remove => HookHandler._afterset_caretColor -= value;
        }

        public static event Delegates.get_customCaretColor_NormalArgs get_customCaretColor
        {
            add
            {
                HookHandler._afterget_customCaretColor += value;
                HookHandler.Hookget_customCaretColor();
            }
            remove => HookHandler._afterget_customCaretColor -= value;
        }

        public static event Delegates.set_customCaretColor_NormalArgs set_customCaretColor
        {
            add
            {
                HookHandler._afterset_customCaretColor += value;
                HookHandler.Hookset_customCaretColor();
            }
            remove => HookHandler._afterset_customCaretColor -= value;
        }

        public static event Delegates.get_selectionColor_NormalArgs get_selectionColor
        {
            add
            {
                HookHandler._afterget_selectionColor += value;
                HookHandler.Hookget_selectionColor();
            }
            remove => HookHandler._afterget_selectionColor -= value;
        }

        public static event Delegates.set_selectionColor_NormalArgs set_selectionColor
        {
            add
            {
                HookHandler._afterset_selectionColor += value;
                HookHandler.Hookset_selectionColor();
            }
            remove => HookHandler._afterset_selectionColor -= value;
        }

        public static event Delegates.get_characterLimit_NormalArgs get_characterLimit
        {
            add
            {
                HookHandler._afterget_characterLimit += value;
                HookHandler.Hookget_characterLimit();
            }
            remove => HookHandler._afterget_characterLimit -= value;
        }

        public static event Delegates.set_characterLimit_NormalArgs set_characterLimit
        {
            add
            {
                HookHandler._afterset_characterLimit += value;
                HookHandler.Hookset_characterLimit();
            }
            remove => HookHandler._afterset_characterLimit -= value;
        }

        public static event Delegates.get_keyboardType_NormalArgs get_keyboardType
        {
            add
            {
                HookHandler._afterget_keyboardType += value;
                HookHandler.Hookget_keyboardType();
            }
            remove => HookHandler._afterget_keyboardType -= value;
        }

        public static event Delegates.set_keyboardType_NormalArgs set_keyboardType
        {
            add
            {
                HookHandler._afterset_keyboardType += value;
                HookHandler.Hookset_keyboardType();
            }
            remove => HookHandler._afterset_keyboardType -= value;
        }

        public static event Delegates.get_readOnly_NormalArgs get_readOnly
        {
            add
            {
                HookHandler._afterget_readOnly += value;
                HookHandler.Hookget_readOnly();
            }
            remove => HookHandler._afterget_readOnly -= value;
        }

        public static event Delegates.set_readOnly_NormalArgs set_readOnly
        {
            add
            {
                HookHandler._afterset_readOnly += value;
                HookHandler.Hookset_readOnly();
            }
            remove => HookHandler._afterset_readOnly -= value;
        }

        public static event Delegates.get_richText_NormalArgs get_richText
        {
            add
            {
                HookHandler._afterget_richText += value;
                HookHandler.Hookget_richText();
            }
            remove => HookHandler._afterget_richText -= value;
        }

        public static event Delegates.set_richText_NormalArgs set_richText
        {
            add
            {
                HookHandler._afterset_richText += value;
                HookHandler.Hookset_richText();
            }
            remove => HookHandler._afterset_richText -= value;
        }

        public static event Delegates.get_multiLine_NormalArgs get_multiLine
        {
            add
            {
                HookHandler._afterget_multiLine += value;
                HookHandler.Hookget_multiLine();
            }
            remove => HookHandler._afterget_multiLine -= value;
        }

        public static event Delegates.get_asteriskChar_NormalArgs get_asteriskChar
        {
            add
            {
                HookHandler._afterget_asteriskChar += value;
                HookHandler.Hookget_asteriskChar();
            }
            remove => HookHandler._afterget_asteriskChar -= value;
        }

        public static event Delegates.set_asteriskChar_NormalArgs set_asteriskChar
        {
            add
            {
                HookHandler._afterset_asteriskChar += value;
                HookHandler.Hookset_asteriskChar();
            }
            remove => HookHandler._afterset_asteriskChar -= value;
        }

        public static event Delegates.get_wasCanceled_NormalArgs get_wasCanceled
        {
            add
            {
                HookHandler._afterget_wasCanceled += value;
                HookHandler.Hookget_wasCanceled();
            }
            remove => HookHandler._afterget_wasCanceled -= value;
        }

        public static event Delegates.ClampPos_NormalArgs ClampPos
        {
            add
            {
                HookHandler._afterClampPos += value;
                HookHandler.HookClampPos();
            }
            remove => HookHandler._afterClampPos -= value;
        }

        public static event Delegates.get_caretPositionInternal_NormalArgs get_caretPositionInternal
        {
            add
            {
                HookHandler._afterget_caretPositionInternal += value;
                HookHandler.Hookget_caretPositionInternal();
            }
            remove => HookHandler._afterget_caretPositionInternal -= value;
        }

        public static event Delegates.set_caretPositionInternal_NormalArgs set_caretPositionInternal
        {
            add
            {
                HookHandler._afterset_caretPositionInternal += value;
                HookHandler.Hookset_caretPositionInternal();
            }
            remove => HookHandler._afterset_caretPositionInternal -= value;
        }

        public static event Delegates.get_stringPositionInternal_NormalArgs get_stringPositionInternal
        {
            add
            {
                HookHandler._afterget_stringPositionInternal += value;
                HookHandler.Hookget_stringPositionInternal();
            }
            remove => HookHandler._afterget_stringPositionInternal -= value;
        }

        public static event Delegates.set_stringPositionInternal_NormalArgs set_stringPositionInternal
        {
            add
            {
                HookHandler._afterset_stringPositionInternal += value;
                HookHandler.Hookset_stringPositionInternal();
            }
            remove => HookHandler._afterset_stringPositionInternal -= value;
        }

        public static event Delegates.get_caretSelectPositionInternal_NormalArgs get_caretSelectPositionInternal
        {
            add
            {
                HookHandler._afterget_caretSelectPositionInternal += value;
                HookHandler.Hookget_caretSelectPositionInternal();
            }
            remove => HookHandler._afterget_caretSelectPositionInternal -= value;
        }

        public static event Delegates.set_caretSelectPositionInternal_NormalArgs set_caretSelectPositionInternal
        {
            add
            {
                HookHandler._afterset_caretSelectPositionInternal += value;
                HookHandler.Hookset_caretSelectPositionInternal();
            }
            remove => HookHandler._afterset_caretSelectPositionInternal -= value;
        }

        public static event Delegates.get_stringSelectPositionInternal_NormalArgs get_stringSelectPositionInternal
        {
            add
            {
                HookHandler._afterget_stringSelectPositionInternal += value;
                HookHandler.Hookget_stringSelectPositionInternal();
            }
            remove => HookHandler._afterget_stringSelectPositionInternal -= value;
        }

        public static event Delegates.set_stringSelectPositionInternal_NormalArgs set_stringSelectPositionInternal
        {
            add
            {
                HookHandler._afterset_stringSelectPositionInternal += value;
                HookHandler.Hookset_stringSelectPositionInternal();
            }
            remove => HookHandler._afterset_stringSelectPositionInternal -= value;
        }

        public static event Delegates.get_hasSelection_NormalArgs get_hasSelection
        {
            add
            {
                HookHandler._afterget_hasSelection += value;
                HookHandler.Hookget_hasSelection();
            }
            remove => HookHandler._afterget_hasSelection -= value;
        }

        public static event Delegates.get_caretPosition_NormalArgs get_caretPosition
        {
            add
            {
                HookHandler._afterget_caretPosition += value;
                HookHandler.Hookget_caretPosition();
            }
            remove => HookHandler._afterget_caretPosition -= value;
        }

        public static event Delegates.set_caretPosition_NormalArgs set_caretPosition
        {
            add
            {
                HookHandler._afterset_caretPosition += value;
                HookHandler.Hookset_caretPosition();
            }
            remove => HookHandler._afterset_caretPosition -= value;
        }

        public static event Delegates.get_selectionAnchorPosition_NormalArgs get_selectionAnchorPosition
        {
            add
            {
                HookHandler._afterget_selectionAnchorPosition += value;
                HookHandler.Hookget_selectionAnchorPosition();
            }
            remove => HookHandler._afterget_selectionAnchorPosition -= value;
        }

        public static event Delegates.set_selectionAnchorPosition_NormalArgs set_selectionAnchorPosition
        {
            add
            {
                HookHandler._afterset_selectionAnchorPosition += value;
                HookHandler.Hookset_selectionAnchorPosition();
            }
            remove => HookHandler._afterset_selectionAnchorPosition -= value;
        }

        public static event Delegates.get_selectionFocusPosition_NormalArgs get_selectionFocusPosition
        {
            add
            {
                HookHandler._afterget_selectionFocusPosition += value;
                HookHandler.Hookget_selectionFocusPosition();
            }
            remove => HookHandler._afterget_selectionFocusPosition -= value;
        }

        public static event Delegates.set_selectionFocusPosition_NormalArgs set_selectionFocusPosition
        {
            add
            {
                HookHandler._afterset_selectionFocusPosition += value;
                HookHandler.Hookset_selectionFocusPosition();
            }
            remove => HookHandler._afterset_selectionFocusPosition -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.SetCaretVisible_NormalArgs SetCaretVisible
        {
            add
            {
                HookHandler._afterSetCaretVisible += value;
                HookHandler.HookSetCaretVisible();
            }
            remove => HookHandler._afterSetCaretVisible -= value;
        }

        public static event Delegates.SetCaretActive_NormalArgs SetCaretActive
        {
            add
            {
                HookHandler._afterSetCaretActive += value;
                HookHandler.HookSetCaretActive();
            }
            remove => HookHandler._afterSetCaretActive -= value;
        }

        public static event Delegates.OnFocus_NormalArgs OnFocus
        {
            add
            {
                HookHandler._afterOnFocus += value;
                HookHandler.HookOnFocus();
            }
            remove => HookHandler._afterOnFocus -= value;
        }

        public static event Delegates.SelectAll_NormalArgs SelectAll
        {
            add
            {
                HookHandler._afterSelectAll += value;
                HookHandler.HookSelectAll();
            }
            remove => HookHandler._afterSelectAll -= value;
        }

        public static event Delegates.MoveTextEnd_NormalArgs MoveTextEnd
        {
            add
            {
                HookHandler._afterMoveTextEnd += value;
                HookHandler.HookMoveTextEnd();
            }
            remove => HookHandler._afterMoveTextEnd -= value;
        }

        public static event Delegates.MoveTextStart_NormalArgs MoveTextStart
        {
            add
            {
                HookHandler._afterMoveTextStart += value;
                HookHandler.HookMoveTextStart();
            }
            remove => HookHandler._afterMoveTextStart -= value;
        }

        public static event Delegates.get_clipboard_NormalArgs get_clipboard
        {
            add
            {
                HookHandler._afterget_clipboard += value;
                HookHandler.Hookget_clipboard();
            }
            remove => HookHandler._afterget_clipboard -= value;
        }

        public static event Delegates.set_clipboard_NormalArgs set_clipboard
        {
            add
            {
                HookHandler._afterset_clipboard += value;
                HookHandler.Hookset_clipboard();
            }
            remove => HookHandler._afterset_clipboard -= value;
        }

        public static event Delegates.InPlaceEditing_NormalArgs InPlaceEditing
        {
            add
            {
                HookHandler._afterInPlaceEditing += value;
                HookHandler.HookInPlaceEditing();
            }
            remove => HookHandler._afterInPlaceEditing -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.GetCharacterIndexFromPosition_NormalArgs GetCharacterIndexFromPosition
        {
            add
            {
                HookHandler._afterGetCharacterIndexFromPosition += value;
                HookHandler.HookGetCharacterIndexFromPosition();
            }
            remove => HookHandler._afterGetCharacterIndexFromPosition -= value;
        }

        public static event Delegates.MayDrag_NormalArgs MayDrag
        {
            add
            {
                HookHandler._afterMayDrag += value;
                HookHandler.HookMayDrag();
            }
            remove => HookHandler._afterMayDrag -= value;
        }

        public static event Delegates.OnBeginDrag_NormalArgs OnBeginDrag
        {
            add
            {
                HookHandler._afterOnBeginDrag += value;
                HookHandler.HookOnBeginDrag();
            }
            remove => HookHandler._afterOnBeginDrag -= value;
        }

        public static event Delegates.OnDrag_NormalArgs OnDrag
        {
            add
            {
                HookHandler._afterOnDrag += value;
                HookHandler.HookOnDrag();
            }
            remove => HookHandler._afterOnDrag -= value;
        }

        public static event Delegates.OnEndDrag_NormalArgs OnEndDrag
        {
            add
            {
                HookHandler._afterOnEndDrag += value;
                HookHandler.HookOnEndDrag();
            }
            remove => HookHandler._afterOnEndDrag -= value;
        }

        public static event Delegates.OnPointerDown_NormalArgs OnPointerDown
        {
            add
            {
                HookHandler._afterOnPointerDown += value;
                HookHandler.HookOnPointerDown();
            }
            remove => HookHandler._afterOnPointerDown -= value;
        }

        public static event Delegates.IsValidChar_NormalArgs IsValidChar
        {
            add
            {
                HookHandler._afterIsValidChar += value;
                HookHandler.HookIsValidChar();
            }
            remove => HookHandler._afterIsValidChar -= value;
        }

        public static event Delegates.ProcessEvent_NormalArgs ProcessEvent
        {
            add
            {
                HookHandler._afterProcessEvent += value;
                HookHandler.HookProcessEvent();
            }
            remove => HookHandler._afterProcessEvent -= value;
        }

        public static event Delegates.OnUpdateSelected_NormalArgs OnUpdateSelected
        {
            add
            {
                HookHandler._afterOnUpdateSelected += value;
                HookHandler.HookOnUpdateSelected();
            }
            remove => HookHandler._afterOnUpdateSelected -= value;
        }

        public static event Delegates.GetSelectedString_NormalArgs GetSelectedString
        {
            add
            {
                HookHandler._afterGetSelectedString += value;
                HookHandler.HookGetSelectedString();
            }
            remove => HookHandler._afterGetSelectedString -= value;
        }

        public static event Delegates.FindtNextWordBegin_NormalArgs FindtNextWordBegin
        {
            add
            {
                HookHandler._afterFindtNextWordBegin += value;
                HookHandler.HookFindtNextWordBegin();
            }
            remove => HookHandler._afterFindtNextWordBegin -= value;
        }

        public static event Delegates.MoveRight_NormalArgs MoveRight
        {
            add
            {
                HookHandler._afterMoveRight += value;
                HookHandler.HookMoveRight();
            }
            remove => HookHandler._afterMoveRight -= value;
        }

        public static event Delegates.FindtPrevWordBegin_NormalArgs FindtPrevWordBegin
        {
            add
            {
                HookHandler._afterFindtPrevWordBegin += value;
                HookHandler.HookFindtPrevWordBegin();
            }
            remove => HookHandler._afterFindtPrevWordBegin -= value;
        }

        public static event Delegates.MoveLeft_NormalArgs MoveLeft
        {
            add
            {
                HookHandler._afterMoveLeft += value;
                HookHandler.HookMoveLeft();
            }
            remove => HookHandler._afterMoveLeft -= value;
        }

        public static event Delegates.LineUpCharacterPosition_NormalArgs LineUpCharacterPosition
        {
            add
            {
                HookHandler._afterLineUpCharacterPosition += value;
                HookHandler.HookLineUpCharacterPosition();
            }
            remove => HookHandler._afterLineUpCharacterPosition -= value;
        }

        public static event Delegates.LineDownCharacterPosition_NormalArgs LineDownCharacterPosition
        {
            add
            {
                HookHandler._afterLineDownCharacterPosition += value;
                HookHandler.HookLineDownCharacterPosition();
            }
            remove => HookHandler._afterLineDownCharacterPosition -= value;
        }

        public static event Delegates.MoveDown_bool_NormalArgs MoveDown_bool
        {
            add
            {
                HookHandler._afterMoveDown_bool += value;
                HookHandler.HookMoveDown_bool();
            }
            remove => HookHandler._afterMoveDown_bool -= value;
        }

        public static event Delegates.MoveDown_bool_bool_NormalArgs MoveDown_bool_bool
        {
            add
            {
                HookHandler._afterMoveDown_bool_bool += value;
                HookHandler.HookMoveDown_bool_bool();
            }
            remove => HookHandler._afterMoveDown_bool_bool -= value;
        }

        public static event Delegates.MoveUp_bool_NormalArgs MoveUp_bool
        {
            add
            {
                HookHandler._afterMoveUp_bool += value;
                HookHandler.HookMoveUp_bool();
            }
            remove => HookHandler._afterMoveUp_bool -= value;
        }

        public static event Delegates.MoveUp_bool_bool_NormalArgs MoveUp_bool_bool
        {
            add
            {
                HookHandler._afterMoveUp_bool_bool += value;
                HookHandler.HookMoveUp_bool_bool();
            }
            remove => HookHandler._afterMoveUp_bool_bool -= value;
        }

        public static event Delegates.Delete_NormalArgs Delete
        {
            add
            {
                HookHandler._afterDelete += value;
                HookHandler.HookDelete();
            }
            remove => HookHandler._afterDelete -= value;
        }

        public static event Delegates.ForwardSpace_NormalArgs ForwardSpace
        {
            add
            {
                HookHandler._afterForwardSpace += value;
                HookHandler.HookForwardSpace();
            }
            remove => HookHandler._afterForwardSpace -= value;
        }

        public static event Delegates.Backspace_NormalArgs Backspace
        {
            add
            {
                HookHandler._afterBackspace += value;
                HookHandler.HookBackspace();
            }
            remove => HookHandler._afterBackspace -= value;
        }

        public static event Delegates.Insert_NormalArgs Insert
        {
            add
            {
                HookHandler._afterInsert += value;
                HookHandler.HookInsert();
            }
            remove => HookHandler._afterInsert -= value;
        }

        public static event Delegates.SendOnValueChangedAndUpdateLabel_NormalArgs SendOnValueChangedAndUpdateLabel
        {
            add
            {
                HookHandler._afterSendOnValueChangedAndUpdateLabel += value;
                HookHandler.HookSendOnValueChangedAndUpdateLabel();
            }
            remove => HookHandler._afterSendOnValueChangedAndUpdateLabel -= value;
        }

        public static event Delegates.SendOnValueChanged_NormalArgs SendOnValueChanged
        {
            add
            {
                HookHandler._afterSendOnValueChanged += value;
                HookHandler.HookSendOnValueChanged();
            }
            remove => HookHandler._afterSendOnValueChanged -= value;
        }

        public static event Delegates.SendOnSubmit_NormalArgs SendOnSubmit
        {
            add
            {
                HookHandler._afterSendOnSubmit += value;
                HookHandler.HookSendOnSubmit();
            }
            remove => HookHandler._afterSendOnSubmit -= value;
        }

        public static event Delegates.SendOnFocusLost_NormalArgs SendOnFocusLost
        {
            add
            {
                HookHandler._afterSendOnFocusLost += value;
                HookHandler.HookSendOnFocusLost();
            }
            remove => HookHandler._afterSendOnFocusLost -= value;
        }

        public static event Delegates.Append_string_NormalArgs Append_string
        {
            add
            {
                HookHandler._afterAppend_string += value;
                HookHandler.HookAppend_string();
            }
            remove => HookHandler._afterAppend_string -= value;
        }

        public static event Delegates.Append_Char_NormalArgs Append_Char
        {
            add
            {
                HookHandler._afterAppend_Char += value;
                HookHandler.HookAppend_Char();
            }
            remove => HookHandler._afterAppend_Char -= value;
        }

        public static event Delegates.UpdateLabel_NormalArgs UpdateLabel
        {
            add
            {
                HookHandler._afterUpdateLabel += value;
                HookHandler.HookUpdateLabel();
            }
            remove => HookHandler._afterUpdateLabel -= value;
        }

        public static event Delegates.GetCaretPositionFromStringIndex_NormalArgs GetCaretPositionFromStringIndex
        {
            add
            {
                HookHandler._afterGetCaretPositionFromStringIndex += value;
                HookHandler.HookGetCaretPositionFromStringIndex();
            }
            remove => HookHandler._afterGetCaretPositionFromStringIndex -= value;
        }

        public static event Delegates.GetStringIndexFromCaretPosition_NormalArgs GetStringIndexFromCaretPosition
        {
            add
            {
                HookHandler._afterGetStringIndexFromCaretPosition += value;
                HookHandler.HookGetStringIndexFromCaretPosition();
            }
            remove => HookHandler._afterGetStringIndexFromCaretPosition -= value;
        }

        public static event Delegates.ForceLabelUpdate_NormalArgs ForceLabelUpdate
        {
            add
            {
                HookHandler._afterForceLabelUpdate += value;
                HookHandler.HookForceLabelUpdate();
            }
            remove => HookHandler._afterForceLabelUpdate -= value;
        }

        public static event Delegates.MarkGeometryAsDirty_NormalArgs MarkGeometryAsDirty
        {
            add
            {
                HookHandler._afterMarkGeometryAsDirty += value;
                HookHandler.HookMarkGeometryAsDirty();
            }
            remove => HookHandler._afterMarkGeometryAsDirty -= value;
        }

        public static event Delegates.Rebuild_NormalArgs Rebuild
        {
            add
            {
                HookHandler._afterRebuild += value;
                HookHandler.HookRebuild();
            }
            remove => HookHandler._afterRebuild -= value;
        }

        public static event Delegates.LayoutComplete_NormalArgs LayoutComplete
        {
            add
            {
                HookHandler._afterLayoutComplete += value;
                HookHandler.HookLayoutComplete();
            }
            remove => HookHandler._afterLayoutComplete -= value;
        }

        public static event Delegates.GraphicUpdateComplete_NormalArgs GraphicUpdateComplete
        {
            add
            {
                HookHandler._afterGraphicUpdateComplete += value;
                HookHandler.HookGraphicUpdateComplete();
            }
            remove => HookHandler._afterGraphicUpdateComplete -= value;
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add
            {
                HookHandler._afterUpdateGeometry += value;
                HookHandler.HookUpdateGeometry();
            }
            remove => HookHandler._afterUpdateGeometry -= value;
        }

        public static event Delegates.AssignPositioningIfNeeded_NormalArgs AssignPositioningIfNeeded
        {
            add
            {
                HookHandler._afterAssignPositioningIfNeeded += value;
                HookHandler.HookAssignPositioningIfNeeded();
            }
            remove => HookHandler._afterAssignPositioningIfNeeded -= value;
        }

        public static event Delegates.OnFillVBO_NormalArgs OnFillVBO
        {
            add
            {
                HookHandler._afterOnFillVBO += value;
                HookHandler.HookOnFillVBO();
            }
            remove => HookHandler._afterOnFillVBO -= value;
        }

        public static event Delegates.GenerateCaret_NormalArgs GenerateCaret
        {
            add
            {
                HookHandler._afterGenerateCaret += value;
                HookHandler.HookGenerateCaret();
            }
            remove => HookHandler._afterGenerateCaret -= value;
        }

        public static event Delegates.CreateCursorVerts_NormalArgs CreateCursorVerts
        {
            add
            {
                HookHandler._afterCreateCursorVerts += value;
                HookHandler.HookCreateCursorVerts();
            }
            remove => HookHandler._afterCreateCursorVerts -= value;
        }

        public static event Delegates.GenerateHightlight_NormalArgs GenerateHightlight
        {
            add
            {
                HookHandler._afterGenerateHightlight += value;
                HookHandler.HookGenerateHightlight();
            }
            remove => HookHandler._afterGenerateHightlight -= value;
        }

        public static event Delegates.AdjustRectTransformRelativeToViewport_NormalArgs
            AdjustRectTransformRelativeToViewport
            {
                add
                {
                    HookHandler._afterAdjustRectTransformRelativeToViewport += value;
                    HookHandler.HookAdjustRectTransformRelativeToViewport();
                }
                remove => HookHandler._afterAdjustRectTransformRelativeToViewport -= value;
            }

        public static event Delegates.Validate_NormalArgs Validate
        {
            add
            {
                HookHandler._afterValidate += value;
                HookHandler.HookValidate();
            }
            remove => HookHandler._afterValidate -= value;
        }

        public static event Delegates.ActivateInputField_NormalArgs ActivateInputField
        {
            add
            {
                HookHandler._afterActivateInputField += value;
                HookHandler.HookActivateInputField();
            }
            remove => HookHandler._afterActivateInputField -= value;
        }

        public static event Delegates.ActivateInputFieldInternal_NormalArgs ActivateInputFieldInternal
        {
            add
            {
                HookHandler._afterActivateInputFieldInternal += value;
                HookHandler.HookActivateInputFieldInternal();
            }
            remove => HookHandler._afterActivateInputFieldInternal -= value;
        }

        public static event Delegates.OnSelect_NormalArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.DeactivateInputField_NormalArgs DeactivateInputField
        {
            add
            {
                HookHandler._afterDeactivateInputField += value;
                HookHandler.HookDeactivateInputField();
            }
            remove => HookHandler._afterDeactivateInputField -= value;
        }

        public static event Delegates.OnDeselect_NormalArgs OnDeselect
        {
            add
            {
                HookHandler._afterOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._afterOnDeselect -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.EnforceContentType_NormalArgs EnforceContentType
        {
            add
            {
                HookHandler._afterEnforceContentType += value;
                HookHandler.HookEnforceContentType();
            }
            remove => HookHandler._afterEnforceContentType -= value;
        }

        public static event Delegates.SetTextComponentWrapMode_NormalArgs SetTextComponentWrapMode
        {
            add
            {
                HookHandler._afterSetTextComponentWrapMode += value;
                HookHandler.HookSetTextComponentWrapMode();
            }
            remove => HookHandler._afterSetTextComponentWrapMode -= value;
        }

        public static event Delegates.SetTextComponentRichTextMode_NormalArgs SetTextComponentRichTextMode
        {
            add
            {
                HookHandler._afterSetTextComponentRichTextMode += value;
                HookHandler.HookSetTextComponentRichTextMode();
            }
            remove => HookHandler._afterSetTextComponentRichTextMode -= value;
        }

        public static event Delegates.SetToCustomIfContentTypeIsNot_NormalArgs SetToCustomIfContentTypeIsNot
        {
            add
            {
                HookHandler._afterSetToCustomIfContentTypeIsNot += value;
                HookHandler.HookSetToCustomIfContentTypeIsNot();
            }
            remove => HookHandler._afterSetToCustomIfContentTypeIsNot -= value;
        }

        public static event Delegates.SetToCustom_NormalArgs SetToCustom
        {
            add
            {
                HookHandler._afterSetToCustom += value;
                HookHandler.HookSetToCustom();
            }
            remove => HookHandler._afterSetToCustom -= value;
        }

        public static event Delegates.get_transform_NormalArgs get_transform
        {
            add
            {
                HookHandler._afterget_transform += value;
                HookHandler.Hookget_transform();
            }
            remove => HookHandler._afterget_transform -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_mesh_NormalArgs get_mesh
        {
            add => HookEndpointManager.Add<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_mesh"), value);
            remove => HookEndpointManager.Remove<Delegates.get_mesh_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_mesh"), value);
        }

        public static event Delegates.set_shouldHideMobileInput_NormalArgs set_shouldHideMobileInput
        {
            add => HookEndpointManager.Add<Delegates.set_shouldHideMobileInput_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_shouldHideMobileInput"), value);
            remove => HookEndpointManager.Remove<Delegates.set_shouldHideMobileInput_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_shouldHideMobileInput"), value);
        }

        public static event Delegates.get_shouldHideMobileInput_NormalArgs get_shouldHideMobileInput
        {
            add => HookEndpointManager.Add<Delegates.get_shouldHideMobileInput_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_shouldHideMobileInput"), value);
            remove => HookEndpointManager.Remove<Delegates.get_shouldHideMobileInput_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_shouldHideMobileInput"), value);
        }

        public static event Delegates.get_text_NormalArgs get_text
        {
            add => HookEndpointManager.Add<Delegates.get_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_text"), value);
            remove => HookEndpointManager.Remove<Delegates.get_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_text"), value);
        }

        public static event Delegates.set_text_NormalArgs set_text
        {
            add => HookEndpointManager.Add<Delegates.set_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_text"), value);
            remove => HookEndpointManager.Remove<Delegates.set_text_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_text"), value);
        }

        public static event Delegates.get_isFocused_NormalArgs get_isFocused
        {
            add => HookEndpointManager.Add<Delegates.get_isFocused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_isFocused"), value);
            remove => HookEndpointManager.Remove<Delegates.get_isFocused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_isFocused"), value);
        }

        public static event Delegates.get_caretBlinkRate_NormalArgs get_caretBlinkRate
        {
            add => HookEndpointManager.Add<Delegates.get_caretBlinkRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretBlinkRate"), value);
            remove => HookEndpointManager.Remove<Delegates.get_caretBlinkRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretBlinkRate"), value);
        }

        public static event Delegates.set_caretBlinkRate_NormalArgs set_caretBlinkRate
        {
            add => HookEndpointManager.Add<Delegates.set_caretBlinkRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretBlinkRate"), value);
            remove => HookEndpointManager.Remove<Delegates.set_caretBlinkRate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretBlinkRate"), value);
        }

        public static event Delegates.get_caretWidth_NormalArgs get_caretWidth
        {
            add => HookEndpointManager.Add<Delegates.get_caretWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_caretWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretWidth"), value);
        }

        public static event Delegates.set_caretWidth_NormalArgs set_caretWidth
        {
            add => HookEndpointManager.Add<Delegates.set_caretWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretWidth"), value);
            remove => HookEndpointManager.Remove<Delegates.set_caretWidth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretWidth"), value);
        }

        public static event Delegates.get_textViewport_NormalArgs get_textViewport
        {
            add => HookEndpointManager.Add<Delegates.get_textViewport_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_textViewport"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textViewport_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_textViewport"), value);
        }

        public static event Delegates.set_textViewport_NormalArgs set_textViewport
        {
            add => HookEndpointManager.Add<Delegates.set_textViewport_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_textViewport"), value);
            remove => HookEndpointManager.Remove<Delegates.set_textViewport_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_textViewport"), value);
        }

        public static event Delegates.get_textComponent_NormalArgs get_textComponent
        {
            add => HookEndpointManager.Add<Delegates.get_textComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_textComponent"), value);
            remove => HookEndpointManager.Remove<Delegates.get_textComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_textComponent"), value);
        }

        public static event Delegates.set_textComponent_NormalArgs set_textComponent
        {
            add => HookEndpointManager.Add<Delegates.set_textComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_textComponent"), value);
            remove => HookEndpointManager.Remove<Delegates.set_textComponent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_textComponent"), value);
        }

        public static event Delegates.get_placeholder_NormalArgs get_placeholder
        {
            add => HookEndpointManager.Add<Delegates.get_placeholder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_placeholder"), value);
            remove => HookEndpointManager.Remove<Delegates.get_placeholder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_placeholder"), value);
        }

        public static event Delegates.set_placeholder_NormalArgs set_placeholder
        {
            add => HookEndpointManager.Add<Delegates.set_placeholder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_placeholder"), value);
            remove => HookEndpointManager.Remove<Delegates.set_placeholder_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_placeholder"), value);
        }

        public static event Delegates.get_caretColor_NormalArgs get_caretColor
        {
            add => HookEndpointManager.Add<Delegates.get_caretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_caretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretColor"), value);
        }

        public static event Delegates.set_caretColor_NormalArgs set_caretColor
        {
            add => HookEndpointManager.Add<Delegates.set_caretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_caretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretColor"), value);
        }

        public static event Delegates.get_customCaretColor_NormalArgs get_customCaretColor
        {
            add => HookEndpointManager.Add<Delegates.get_customCaretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_customCaretColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_customCaretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_customCaretColor"), value);
        }

        public static event Delegates.set_customCaretColor_NormalArgs set_customCaretColor
        {
            add => HookEndpointManager.Add<Delegates.set_customCaretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_customCaretColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_customCaretColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_customCaretColor"), value);
        }

        public static event Delegates.get_selectionColor_NormalArgs get_selectionColor
        {
            add => HookEndpointManager.Add<Delegates.get_selectionColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionColor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_selectionColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionColor"), value);
        }

        public static event Delegates.set_selectionColor_NormalArgs set_selectionColor
        {
            add => HookEndpointManager.Add<Delegates.set_selectionColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionColor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_selectionColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionColor"), value);
        }

        public static event Delegates.get_characterLimit_NormalArgs get_characterLimit
        {
            add => HookEndpointManager.Add<Delegates.get_characterLimit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_characterLimit"), value);
            remove => HookEndpointManager.Remove<Delegates.get_characterLimit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_characterLimit"), value);
        }

        public static event Delegates.set_characterLimit_NormalArgs set_characterLimit
        {
            add => HookEndpointManager.Add<Delegates.set_characterLimit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_characterLimit"), value);
            remove => HookEndpointManager.Remove<Delegates.set_characterLimit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_characterLimit"), value);
        }

        public static event Delegates.get_keyboardType_NormalArgs get_keyboardType
        {
            add => HookEndpointManager.Add<Delegates.get_keyboardType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_keyboardType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_keyboardType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_keyboardType"), value);
        }

        public static event Delegates.set_keyboardType_NormalArgs set_keyboardType
        {
            add => HookEndpointManager.Add<Delegates.set_keyboardType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_keyboardType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_keyboardType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_keyboardType"), value);
        }

        public static event Delegates.get_readOnly_NormalArgs get_readOnly
        {
            add => HookEndpointManager.Add<Delegates.get_readOnly_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_readOnly"), value);
            remove => HookEndpointManager.Remove<Delegates.get_readOnly_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_readOnly"), value);
        }

        public static event Delegates.set_readOnly_NormalArgs set_readOnly
        {
            add => HookEndpointManager.Add<Delegates.set_readOnly_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_readOnly"), value);
            remove => HookEndpointManager.Remove<Delegates.set_readOnly_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_readOnly"), value);
        }

        public static event Delegates.get_richText_NormalArgs get_richText
        {
            add => HookEndpointManager.Add<Delegates.get_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_richText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_richText"), value);
        }

        public static event Delegates.set_richText_NormalArgs set_richText
        {
            add => HookEndpointManager.Add<Delegates.set_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_richText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_richText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_richText"), value);
        }

        public static event Delegates.get_multiLine_NormalArgs get_multiLine
        {
            add => HookEndpointManager.Add<Delegates.get_multiLine_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_multiLine"), value);
            remove => HookEndpointManager.Remove<Delegates.get_multiLine_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_multiLine"), value);
        }

        public static event Delegates.get_asteriskChar_NormalArgs get_asteriskChar
        {
            add => HookEndpointManager.Add<Delegates.get_asteriskChar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_asteriskChar"), value);
            remove => HookEndpointManager.Remove<Delegates.get_asteriskChar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_asteriskChar"), value);
        }

        public static event Delegates.set_asteriskChar_NormalArgs set_asteriskChar
        {
            add => HookEndpointManager.Add<Delegates.set_asteriskChar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_asteriskChar"), value);
            remove => HookEndpointManager.Remove<Delegates.set_asteriskChar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_asteriskChar"), value);
        }

        public static event Delegates.get_wasCanceled_NormalArgs get_wasCanceled
        {
            add => HookEndpointManager.Add<Delegates.get_wasCanceled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_wasCanceled"), value);
            remove => HookEndpointManager.Remove<Delegates.get_wasCanceled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_wasCanceled"), value);
        }

        public static event Delegates.ClampPos_NormalArgs ClampPos
        {
            add => HookEndpointManager.Add<Delegates.ClampPos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ClampPos"), value);
            remove => HookEndpointManager.Remove<Delegates.ClampPos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ClampPos"), value);
        }

        public static event Delegates.get_caretPositionInternal_NormalArgs get_caretPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.get_caretPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.get_caretPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretPositionInternal"), value);
        }

        public static event Delegates.set_caretPositionInternal_NormalArgs set_caretPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.set_caretPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.set_caretPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretPositionInternal"), value);
        }

        public static event Delegates.get_stringPositionInternal_NormalArgs get_stringPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.get_stringPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_stringPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.get_stringPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_stringPositionInternal"), value);
        }

        public static event Delegates.set_stringPositionInternal_NormalArgs set_stringPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.set_stringPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_stringPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.set_stringPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_stringPositionInternal"), value);
        }

        public static event Delegates.get_caretSelectPositionInternal_NormalArgs get_caretSelectPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.get_caretSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretSelectPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.get_caretSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretSelectPositionInternal"), value);
        }

        public static event Delegates.set_caretSelectPositionInternal_NormalArgs set_caretSelectPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.set_caretSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretSelectPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.set_caretSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretSelectPositionInternal"), value);
        }

        public static event Delegates.get_stringSelectPositionInternal_NormalArgs get_stringSelectPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.get_stringSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_stringSelectPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.get_stringSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_stringSelectPositionInternal"), value);
        }

        public static event Delegates.set_stringSelectPositionInternal_NormalArgs set_stringSelectPositionInternal
        {
            add => HookEndpointManager.Add<Delegates.set_stringSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_stringSelectPositionInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.set_stringSelectPositionInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_stringSelectPositionInternal"), value);
        }

        public static event Delegates.get_hasSelection_NormalArgs get_hasSelection
        {
            add => HookEndpointManager.Add<Delegates.get_hasSelection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_hasSelection"), value);
            remove => HookEndpointManager.Remove<Delegates.get_hasSelection_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_hasSelection"), value);
        }

        public static event Delegates.get_caretPosition_NormalArgs get_caretPosition
        {
            add => HookEndpointManager.Add<Delegates.get_caretPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_caretPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_caretPosition"), value);
        }

        public static event Delegates.set_caretPosition_NormalArgs set_caretPosition
        {
            add => HookEndpointManager.Add<Delegates.set_caretPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_caretPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_caretPosition"), value);
        }

        public static event Delegates.get_selectionAnchorPosition_NormalArgs get_selectionAnchorPosition
        {
            add => HookEndpointManager.Add<Delegates.get_selectionAnchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionAnchorPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_selectionAnchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionAnchorPosition"), value);
        }

        public static event Delegates.set_selectionAnchorPosition_NormalArgs set_selectionAnchorPosition
        {
            add => HookEndpointManager.Add<Delegates.set_selectionAnchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionAnchorPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_selectionAnchorPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionAnchorPosition"), value);
        }

        public static event Delegates.get_selectionFocusPosition_NormalArgs get_selectionFocusPosition
        {
            add => HookEndpointManager.Add<Delegates.get_selectionFocusPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionFocusPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_selectionFocusPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_selectionFocusPosition"), value);
        }

        public static event Delegates.set_selectionFocusPosition_NormalArgs set_selectionFocusPosition
        {
            add => HookEndpointManager.Add<Delegates.set_selectionFocusPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionFocusPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_selectionFocusPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_selectionFocusPosition"), value);
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnEnable"), value);
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add => HookEndpointManager.Add<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDisable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDisable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDisable"), value);
        }

        public static event Delegates.CaretBlink_NormalArgs CaretBlink
        {
            add => HookEndpointManager.Add<Delegates.CaretBlink_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "CaretBlink"), value);
            remove => HookEndpointManager.Remove<Delegates.CaretBlink_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "CaretBlink"), value);
        }

        public static event Delegates.SetCaretVisible_NormalArgs SetCaretVisible
        {
            add => HookEndpointManager.Add<Delegates.SetCaretVisible_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetCaretVisible"), value);
            remove => HookEndpointManager.Remove<Delegates.SetCaretVisible_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetCaretVisible"), value);
        }

        public static event Delegates.SetCaretActive_NormalArgs SetCaretActive
        {
            add => HookEndpointManager.Add<Delegates.SetCaretActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetCaretActive"), value);
            remove => HookEndpointManager.Remove<Delegates.SetCaretActive_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetCaretActive"), value);
        }

        public static event Delegates.OnFocus_NormalArgs OnFocus
        {
            add => HookEndpointManager.Add<Delegates.OnFocus_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnFocus"), value);
            remove => HookEndpointManager.Remove<Delegates.OnFocus_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnFocus"), value);
        }

        public static event Delegates.SelectAll_NormalArgs SelectAll
        {
            add => HookEndpointManager.Add<Delegates.SelectAll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SelectAll"), value);
            remove => HookEndpointManager.Remove<Delegates.SelectAll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SelectAll"), value);
        }

        public static event Delegates.MoveTextEnd_NormalArgs MoveTextEnd
        {
            add => HookEndpointManager.Add<Delegates.MoveTextEnd_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveTextEnd"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveTextEnd_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveTextEnd"), value);
        }

        public static event Delegates.MoveTextStart_NormalArgs MoveTextStart
        {
            add => HookEndpointManager.Add<Delegates.MoveTextStart_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveTextStart"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveTextStart_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveTextStart"), value);
        }

        public static event Delegates.get_clipboard_NormalArgs get_clipboard
        {
            add => HookEndpointManager.Add<Delegates.get_clipboard_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_clipboard", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_clipboard_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "get_clipboard", false), value);
        }

        public static event Delegates.set_clipboard_NormalArgs set_clipboard
        {
            add => HookEndpointManager.Add<Delegates.set_clipboard_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_clipboard", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_clipboard_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "set_clipboard", false), value);
        }

        public static event Delegates.InPlaceEditing_NormalArgs InPlaceEditing
        {
            add => HookEndpointManager.Add<Delegates.InPlaceEditing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "InPlaceEditing"), value);
            remove => HookEndpointManager.Remove<Delegates.InPlaceEditing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "InPlaceEditing"), value);
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add => HookEndpointManager.Add<Delegates.LateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LateUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.LateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LateUpdate"), value);
        }

        public static event Delegates.GetCharacterIndexFromPosition_NormalArgs GetCharacterIndexFromPosition
        {
            add => HookEndpointManager.Add<Delegates.GetCharacterIndexFromPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetCharacterIndexFromPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCharacterIndexFromPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetCharacterIndexFromPosition"), value);
        }

        public static event Delegates.MayDrag_NormalArgs MayDrag
        {
            add => HookEndpointManager.Add<Delegates.MayDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MayDrag"), value);
            remove => HookEndpointManager.Remove<Delegates.MayDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MayDrag"), value);
        }

        public static event Delegates.OnBeginDrag_NormalArgs OnBeginDrag
        {
            add => HookEndpointManager.Add<Delegates.OnBeginDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnBeginDrag"), value);
            remove => HookEndpointManager.Remove<Delegates.OnBeginDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnBeginDrag"), value);
        }

        public static event Delegates.OnDrag_NormalArgs OnDrag
        {
            add => HookEndpointManager.Add<Delegates.OnDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDrag"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDrag"), value);
        }

        public static event Delegates.MouseDragOutsideRect_NormalArgs MouseDragOutsideRect
        {
            add => HookEndpointManager.Add<Delegates.MouseDragOutsideRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MouseDragOutsideRect"), value);
            remove => HookEndpointManager.Remove<Delegates.MouseDragOutsideRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MouseDragOutsideRect"), value);
        }

        public static event Delegates.OnEndDrag_NormalArgs OnEndDrag
        {
            add => HookEndpointManager.Add<Delegates.OnEndDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnEndDrag"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEndDrag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnEndDrag"), value);
        }

        public static event Delegates.OnPointerDown_NormalArgs OnPointerDown
        {
            add => HookEndpointManager.Add<Delegates.OnPointerDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnPointerDown"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerDown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnPointerDown"), value);
        }

        public static event Delegates.IsValidChar_NormalArgs IsValidChar
        {
            add => HookEndpointManager.Add<Delegates.IsValidChar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "IsValidChar"), value);
            remove => HookEndpointManager.Remove<Delegates.IsValidChar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "IsValidChar"), value);
        }

        public static event Delegates.ProcessEvent_NormalArgs ProcessEvent
        {
            add => HookEndpointManager.Add<Delegates.ProcessEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ProcessEvent"), value);
            remove => HookEndpointManager.Remove<Delegates.ProcessEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ProcessEvent"), value);
        }

        public static event Delegates.OnUpdateSelected_NormalArgs OnUpdateSelected
        {
            add => HookEndpointManager.Add<Delegates.OnUpdateSelected_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnUpdateSelected"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdateSelected_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnUpdateSelected"), value);
        }

        public static event Delegates.GetSelectedString_NormalArgs GetSelectedString
        {
            add => HookEndpointManager.Add<Delegates.GetSelectedString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetSelectedString"), value);
            remove => HookEndpointManager.Remove<Delegates.GetSelectedString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetSelectedString"), value);
        }

        public static event Delegates.FindtNextWordBegin_NormalArgs FindtNextWordBegin
        {
            add => HookEndpointManager.Add<Delegates.FindtNextWordBegin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "FindtNextWordBegin"), value);
            remove => HookEndpointManager.Remove<Delegates.FindtNextWordBegin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "FindtNextWordBegin"), value);
        }

        public static event Delegates.MoveRight_NormalArgs MoveRight
        {
            add => HookEndpointManager.Add<Delegates.MoveRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveRight"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveRight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveRight"), value);
        }

        public static event Delegates.FindtPrevWordBegin_NormalArgs FindtPrevWordBegin
        {
            add => HookEndpointManager.Add<Delegates.FindtPrevWordBegin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "FindtPrevWordBegin"), value);
            remove => HookEndpointManager.Remove<Delegates.FindtPrevWordBegin_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "FindtPrevWordBegin"), value);
        }

        public static event Delegates.MoveLeft_NormalArgs MoveLeft
        {
            add => HookEndpointManager.Add<Delegates.MoveLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveLeft"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveLeft_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveLeft"), value);
        }

        public static event Delegates.LineUpCharacterPosition_NormalArgs LineUpCharacterPosition
        {
            add => HookEndpointManager.Add<Delegates.LineUpCharacterPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LineUpCharacterPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.LineUpCharacterPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LineUpCharacterPosition"), value);
        }

        public static event Delegates.LineDownCharacterPosition_NormalArgs LineDownCharacterPosition
        {
            add => HookEndpointManager.Add<Delegates.LineDownCharacterPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LineDownCharacterPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.LineDownCharacterPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LineDownCharacterPosition"), value);
        }

        public static event Delegates.MoveDown_bool_NormalArgs MoveDown_bool
        {
            add => HookEndpointManager.Add<Delegates.MoveDown_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveDown"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveDown_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveDown"), value);
        }

        public static event Delegates.MoveDown_bool_bool_NormalArgs MoveDown_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.MoveDown_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveDown"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveDown_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveDown"), value);
        }

        public static event Delegates.MoveUp_bool_NormalArgs MoveUp_bool
        {
            add => HookEndpointManager.Add<Delegates.MoveUp_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveUp"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveUp_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveUp"), value);
        }

        public static event Delegates.MoveUp_bool_bool_NormalArgs MoveUp_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.MoveUp_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveUp"), value);
            remove => HookEndpointManager.Remove<Delegates.MoveUp_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MoveUp"), value);
        }

        public static event Delegates.Delete_NormalArgs Delete
        {
            add => HookEndpointManager.Add<Delegates.Delete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Delete"), value);
            remove => HookEndpointManager.Remove<Delegates.Delete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Delete"), value);
        }

        public static event Delegates.ForwardSpace_NormalArgs ForwardSpace
        {
            add => HookEndpointManager.Add<Delegates.ForwardSpace_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ForwardSpace"), value);
            remove => HookEndpointManager.Remove<Delegates.ForwardSpace_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ForwardSpace"), value);
        }

        public static event Delegates.Backspace_NormalArgs Backspace
        {
            add => HookEndpointManager.Add<Delegates.Backspace_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Backspace"), value);
            remove => HookEndpointManager.Remove<Delegates.Backspace_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Backspace"), value);
        }

        public static event Delegates.Insert_NormalArgs Insert
        {
            add => HookEndpointManager.Add<Delegates.Insert_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Insert"), value);
            remove => HookEndpointManager.Remove<Delegates.Insert_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Insert"), value);
        }

        public static event Delegates.SendOnValueChangedAndUpdateLabel_NormalArgs SendOnValueChangedAndUpdateLabel
        {
            add => HookEndpointManager.Add<Delegates.SendOnValueChangedAndUpdateLabel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnValueChangedAndUpdateLabel"), value);
            remove => HookEndpointManager.Remove<Delegates.SendOnValueChangedAndUpdateLabel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnValueChangedAndUpdateLabel"), value);
        }

        public static event Delegates.SendOnValueChanged_NormalArgs SendOnValueChanged
        {
            add => HookEndpointManager.Add<Delegates.SendOnValueChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnValueChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.SendOnValueChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnValueChanged"), value);
        }

        public static event Delegates.SendOnSubmit_NormalArgs SendOnSubmit
        {
            add => HookEndpointManager.Add<Delegates.SendOnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.SendOnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnSubmit"), value);
        }

        public static event Delegates.SendOnFocusLost_NormalArgs SendOnFocusLost
        {
            add => HookEndpointManager.Add<Delegates.SendOnFocusLost_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnFocusLost"), value);
            remove => HookEndpointManager.Remove<Delegates.SendOnFocusLost_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SendOnFocusLost"), value);
        }

        public static event Delegates.Append_string_NormalArgs Append_string
        {
            add => HookEndpointManager.Add<Delegates.Append_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Append"), value);
            remove => HookEndpointManager.Remove<Delegates.Append_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Append"), value);
        }

        public static event Delegates.Append_Char_NormalArgs Append_Char
        {
            add => HookEndpointManager.Add<Delegates.Append_Char_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Append"), value);
            remove => HookEndpointManager.Remove<Delegates.Append_Char_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Append"), value);
        }

        public static event Delegates.UpdateLabel_NormalArgs UpdateLabel
        {
            add => HookEndpointManager.Add<Delegates.UpdateLabel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UpdateLabel"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateLabel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UpdateLabel"), value);
        }

        public static event Delegates.GetCaretPositionFromStringIndex_NormalArgs GetCaretPositionFromStringIndex
        {
            add => HookEndpointManager.Add<Delegates.GetCaretPositionFromStringIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetCaretPositionFromStringIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.GetCaretPositionFromStringIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetCaretPositionFromStringIndex"), value);
        }

        public static event Delegates.GetStringIndexFromCaretPosition_NormalArgs GetStringIndexFromCaretPosition
        {
            add => HookEndpointManager.Add<Delegates.GetStringIndexFromCaretPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetStringIndexFromCaretPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.GetStringIndexFromCaretPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GetStringIndexFromCaretPosition"), value);
        }

        public static event Delegates.ForceLabelUpdate_NormalArgs ForceLabelUpdate
        {
            add => HookEndpointManager.Add<Delegates.ForceLabelUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ForceLabelUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceLabelUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ForceLabelUpdate"), value);
        }

        public static event Delegates.MarkGeometryAsDirty_NormalArgs MarkGeometryAsDirty
        {
            add => HookEndpointManager.Add<Delegates.MarkGeometryAsDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MarkGeometryAsDirty"), value);
            remove => HookEndpointManager.Remove<Delegates.MarkGeometryAsDirty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "MarkGeometryAsDirty"), value);
        }

        public static event Delegates.Rebuild_NormalArgs Rebuild
        {
            add => HookEndpointManager.Add<Delegates.Rebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Rebuild"), value);
            remove => HookEndpointManager.Remove<Delegates.Rebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Rebuild"), value);
        }

        public static event Delegates.LayoutComplete_NormalArgs LayoutComplete
        {
            add => HookEndpointManager.Add<Delegates.LayoutComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LayoutComplete"), value);
            remove => HookEndpointManager.Remove<Delegates.LayoutComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "LayoutComplete"), value);
        }

        public static event Delegates.GraphicUpdateComplete_NormalArgs GraphicUpdateComplete
        {
            add => HookEndpointManager.Add<Delegates.GraphicUpdateComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GraphicUpdateComplete"), value);
            remove => HookEndpointManager.Remove<Delegates.GraphicUpdateComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GraphicUpdateComplete"), value);
        }

        public static event Delegates.UpdateGeometry_NormalArgs UpdateGeometry
        {
            add => HookEndpointManager.Add<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UpdateGeometry"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UpdateGeometry"), value);
        }

        public static event Delegates.AssignPositioningIfNeeded_NormalArgs AssignPositioningIfNeeded
        {
            add => HookEndpointManager.Add<Delegates.AssignPositioningIfNeeded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "AssignPositioningIfNeeded"), value);
            remove => HookEndpointManager.Remove<Delegates.AssignPositioningIfNeeded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "AssignPositioningIfNeeded"), value);
        }

        public static event Delegates.OnFillVBO_NormalArgs OnFillVBO
        {
            add => HookEndpointManager.Add<Delegates.OnFillVBO_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnFillVBO"), value);
            remove => HookEndpointManager.Remove<Delegates.OnFillVBO_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnFillVBO"), value);
        }

        public static event Delegates.GenerateCaret_NormalArgs GenerateCaret
        {
            add => HookEndpointManager.Add<Delegates.GenerateCaret_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GenerateCaret"), value);
            remove => HookEndpointManager.Remove<Delegates.GenerateCaret_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GenerateCaret"), value);
        }

        public static event Delegates.CreateCursorVerts_NormalArgs CreateCursorVerts
        {
            add => HookEndpointManager.Add<Delegates.CreateCursorVerts_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "CreateCursorVerts"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateCursorVerts_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "CreateCursorVerts"), value);
        }

        public static event Delegates.GenerateHightlight_NormalArgs GenerateHightlight
        {
            add => HookEndpointManager.Add<Delegates.GenerateHightlight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GenerateHightlight"), value);
            remove => HookEndpointManager.Remove<Delegates.GenerateHightlight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "GenerateHightlight"), value);
        }

        public static event Delegates.AdjustRectTransformRelativeToViewport_NormalArgs
            AdjustRectTransformRelativeToViewport
            {
                add => HookEndpointManager.Add<Delegates.AdjustRectTransformRelativeToViewport_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "AdjustRectTransformRelativeToViewport"),
                    value);
                remove => HookEndpointManager.Remove<Delegates.AdjustRectTransformRelativeToViewport_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "AdjustRectTransformRelativeToViewport"),
                    value);
            }

        public static event Delegates.Validate_NormalArgs Validate
        {
            add => HookEndpointManager.Add<Delegates.Validate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Validate"), value);
            remove => HookEndpointManager.Remove<Delegates.Validate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "Validate"), value);
        }

        public static event Delegates.ActivateInputField_NormalArgs ActivateInputField
        {
            add => HookEndpointManager.Add<Delegates.ActivateInputField_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ActivateInputField"), value);
            remove => HookEndpointManager.Remove<Delegates.ActivateInputField_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ActivateInputField"), value);
        }

        public static event Delegates.ActivateInputFieldInternal_NormalArgs ActivateInputFieldInternal
        {
            add => HookEndpointManager.Add<Delegates.ActivateInputFieldInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ActivateInputFieldInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.ActivateInputFieldInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "ActivateInputFieldInternal"), value);
        }

        public static event Delegates.OnSelect_NormalArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnSelect"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnPointerClick"), value);
        }

        public static event Delegates.DeactivateInputField_NormalArgs DeactivateInputField
        {
            add => HookEndpointManager.Add<Delegates.DeactivateInputField_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "DeactivateInputField"), value);
            remove => HookEndpointManager.Remove<Delegates.DeactivateInputField_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "DeactivateInputField"), value);
        }

        public static event Delegates.OnDeselect_NormalArgs OnDeselect
        {
            add => HookEndpointManager.Add<Delegates.OnDeselect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDeselect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnDeselect"), value);
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "OnSubmit"), value);
        }

        public static event Delegates.EnforceContentType_NormalArgs EnforceContentType
        {
            add => HookEndpointManager.Add<Delegates.EnforceContentType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "EnforceContentType"), value);
            remove => HookEndpointManager.Remove<Delegates.EnforceContentType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "EnforceContentType"), value);
        }

        public static event Delegates.SetTextComponentWrapMode_NormalArgs SetTextComponentWrapMode
        {
            add => HookEndpointManager.Add<Delegates.SetTextComponentWrapMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetTextComponentWrapMode"), value);
            remove => HookEndpointManager.Remove<Delegates.SetTextComponentWrapMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetTextComponentWrapMode"), value);
        }

        public static event Delegates.SetTextComponentRichTextMode_NormalArgs SetTextComponentRichTextMode
        {
            add => HookEndpointManager.Add<Delegates.SetTextComponentRichTextMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetTextComponentRichTextMode"), value);
            remove => HookEndpointManager.Remove<Delegates.SetTextComponentRichTextMode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetTextComponentRichTextMode"), value);
        }

        public static event Delegates.SetToCustomIfContentTypeIsNot_NormalArgs SetToCustomIfContentTypeIsNot
        {
            add => HookEndpointManager.Add<Delegates.SetToCustomIfContentTypeIsNot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetToCustomIfContentTypeIsNot"), value);
            remove => HookEndpointManager.Remove<Delegates.SetToCustomIfContentTypeIsNot_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetToCustomIfContentTypeIsNot"), value);
        }

        public static event Delegates.SetToCustom_NormalArgs SetToCustom
        {
            add => HookEndpointManager.Add<Delegates.SetToCustom_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetToCustom"), value);
            remove => HookEndpointManager.Remove<Delegates.SetToCustom_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "SetToCustom"), value);
        }

        public static event Delegates.get_transform_NormalArgs get_transform
        {
            add => HookEndpointManager.Add<Delegates.get_transform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UnityEngine.UI.ICanvasElement.get_transform"),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_transform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_InputField), "UnityEngine.UI.ICanvasElement.get_transform"),
                value);
        }
    }
}