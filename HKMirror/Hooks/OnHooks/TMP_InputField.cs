using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TMP_InputField class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_InputField
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_mesh()
{
if (!HookedList.Contains("get_mesh"))
{
HookedList.Add("get_mesh");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_mesh", true), get_mesh);

}
}
internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
internal static event Delegates.get_mesh_AfterArgs _afterget_mesh;
private static UnityEngine.Mesh get_mesh(Func<TMPro.TMP_InputField, UnityEngine.Mesh> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_mesh @params = new() 
{
self = self
};
if (_beforeget_mesh != null)
{
foreach (Delegates.get_mesh_BeforeArgs toInvoke in _beforeget_mesh.GetInvocationList())
{
try
{
_beforeget_mesh?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_mesh != null)
{
foreach (Delegates.get_mesh_AfterArgs toInvoke in _afterget_mesh.GetInvocationList())
{
try
{
retVal = _afterget_mesh.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_shouldHideMobileInput()
{
if (!HookedList.Contains("set_shouldHideMobileInput"))
{
HookedList.Add("set_shouldHideMobileInput");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_shouldHideMobileInput", true), set_shouldHideMobileInput);

}
}
internal static event Delegates.set_shouldHideMobileInput_BeforeArgs _beforeset_shouldHideMobileInput;
internal static event Delegates.set_shouldHideMobileInput_AfterArgs _afterset_shouldHideMobileInput;
private static void set_shouldHideMobileInput(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value)
{
Delegates.Params_set_shouldHideMobileInput @params = new() 
{
self = self
, value = value
};
if (_beforeset_shouldHideMobileInput != null)
{
foreach (Delegates.set_shouldHideMobileInput_BeforeArgs toInvoke in _beforeset_shouldHideMobileInput.GetInvocationList())
{
try
{
_beforeset_shouldHideMobileInput?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_shouldHideMobileInput != null)
{
foreach (Delegates.set_shouldHideMobileInput_AfterArgs toInvoke in _afterset_shouldHideMobileInput.GetInvocationList())
{
try
{
_afterset_shouldHideMobileInput.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_shouldHideMobileInput()
{
if (!HookedList.Contains("get_shouldHideMobileInput"))
{
HookedList.Add("get_shouldHideMobileInput");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_shouldHideMobileInput", true), get_shouldHideMobileInput);

}
}
internal static event Delegates.get_shouldHideMobileInput_BeforeArgs _beforeget_shouldHideMobileInput;
internal static event Delegates.get_shouldHideMobileInput_AfterArgs _afterget_shouldHideMobileInput;
private static bool get_shouldHideMobileInput(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_shouldHideMobileInput @params = new() 
{
self = self
};
if (_beforeget_shouldHideMobileInput != null)
{
foreach (Delegates.get_shouldHideMobileInput_BeforeArgs toInvoke in _beforeget_shouldHideMobileInput.GetInvocationList())
{
try
{
_beforeget_shouldHideMobileInput?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_shouldHideMobileInput != null)
{
foreach (Delegates.get_shouldHideMobileInput_AfterArgs toInvoke in _afterget_shouldHideMobileInput.GetInvocationList())
{
try
{
retVal = _afterget_shouldHideMobileInput.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_text()
{
if (!HookedList.Contains("get_text"))
{
HookedList.Add("get_text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_text", true), get_text);

}
}
internal static event Delegates.get_text_BeforeArgs _beforeget_text;
internal static event Delegates.get_text_AfterArgs _afterget_text;
private static string get_text(Func<TMPro.TMP_InputField, string> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_text @params = new() 
{
self = self
};
if (_beforeget_text != null)
{
foreach (Delegates.get_text_BeforeArgs toInvoke in _beforeget_text.GetInvocationList())
{
try
{
_beforeget_text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_text != null)
{
foreach (Delegates.get_text_AfterArgs toInvoke in _afterget_text.GetInvocationList())
{
try
{
retVal = _afterget_text.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_text()
{
if (!HookedList.Contains("set_text"))
{
HookedList.Add("set_text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_text", true), set_text);

}
}
internal static event Delegates.set_text_BeforeArgs _beforeset_text;
internal static event Delegates.set_text_AfterArgs _afterset_text;
private static void set_text(Action<TMPro.TMP_InputField,  string> orig, TMPro.TMP_InputField self,  string value)
{
Delegates.Params_set_text @params = new() 
{
self = self
, value = value
};
if (_beforeset_text != null)
{
foreach (Delegates.set_text_BeforeArgs toInvoke in _beforeset_text.GetInvocationList())
{
try
{
_beforeset_text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_text != null)
{
foreach (Delegates.set_text_AfterArgs toInvoke in _afterset_text.GetInvocationList())
{
try
{
_afterset_text.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_isFocused()
{
if (!HookedList.Contains("get_isFocused"))
{
HookedList.Add("get_isFocused");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_isFocused", true), get_isFocused);

}
}
internal static event Delegates.get_isFocused_BeforeArgs _beforeget_isFocused;
internal static event Delegates.get_isFocused_AfterArgs _afterget_isFocused;
private static bool get_isFocused(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_isFocused @params = new() 
{
self = self
};
if (_beforeget_isFocused != null)
{
foreach (Delegates.get_isFocused_BeforeArgs toInvoke in _beforeget_isFocused.GetInvocationList())
{
try
{
_beforeget_isFocused?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isFocused != null)
{
foreach (Delegates.get_isFocused_AfterArgs toInvoke in _afterget_isFocused.GetInvocationList())
{
try
{
retVal = _afterget_isFocused.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_caretBlinkRate()
{
if (!HookedList.Contains("get_caretBlinkRate"))
{
HookedList.Add("get_caretBlinkRate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretBlinkRate", true), get_caretBlinkRate);

}
}
internal static event Delegates.get_caretBlinkRate_BeforeArgs _beforeget_caretBlinkRate;
internal static event Delegates.get_caretBlinkRate_AfterArgs _afterget_caretBlinkRate;
private static float get_caretBlinkRate(Func<TMPro.TMP_InputField, float> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_caretBlinkRate @params = new() 
{
self = self
};
if (_beforeget_caretBlinkRate != null)
{
foreach (Delegates.get_caretBlinkRate_BeforeArgs toInvoke in _beforeget_caretBlinkRate.GetInvocationList())
{
try
{
_beforeget_caretBlinkRate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_caretBlinkRate != null)
{
foreach (Delegates.get_caretBlinkRate_AfterArgs toInvoke in _afterget_caretBlinkRate.GetInvocationList())
{
try
{
retVal = _afterget_caretBlinkRate.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_caretBlinkRate()
{
if (!HookedList.Contains("set_caretBlinkRate"))
{
HookedList.Add("set_caretBlinkRate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretBlinkRate", true), set_caretBlinkRate);

}
}
internal static event Delegates.set_caretBlinkRate_BeforeArgs _beforeset_caretBlinkRate;
internal static event Delegates.set_caretBlinkRate_AfterArgs _afterset_caretBlinkRate;
private static void set_caretBlinkRate(Action<TMPro.TMP_InputField,  float> orig, TMPro.TMP_InputField self,  float value)
{
Delegates.Params_set_caretBlinkRate @params = new() 
{
self = self
, value = value
};
if (_beforeset_caretBlinkRate != null)
{
foreach (Delegates.set_caretBlinkRate_BeforeArgs toInvoke in _beforeset_caretBlinkRate.GetInvocationList())
{
try
{
_beforeset_caretBlinkRate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_caretBlinkRate != null)
{
foreach (Delegates.set_caretBlinkRate_AfterArgs toInvoke in _afterset_caretBlinkRate.GetInvocationList())
{
try
{
_afterset_caretBlinkRate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_caretWidth()
{
if (!HookedList.Contains("get_caretWidth"))
{
HookedList.Add("get_caretWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretWidth", true), get_caretWidth);

}
}
internal static event Delegates.get_caretWidth_BeforeArgs _beforeget_caretWidth;
internal static event Delegates.get_caretWidth_AfterArgs _afterget_caretWidth;
private static int get_caretWidth(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_caretWidth @params = new() 
{
self = self
};
if (_beforeget_caretWidth != null)
{
foreach (Delegates.get_caretWidth_BeforeArgs toInvoke in _beforeget_caretWidth.GetInvocationList())
{
try
{
_beforeget_caretWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_caretWidth != null)
{
foreach (Delegates.get_caretWidth_AfterArgs toInvoke in _afterget_caretWidth.GetInvocationList())
{
try
{
retVal = _afterget_caretWidth.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_caretWidth()
{
if (!HookedList.Contains("set_caretWidth"))
{
HookedList.Add("set_caretWidth");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretWidth", true), set_caretWidth);

}
}
internal static event Delegates.set_caretWidth_BeforeArgs _beforeset_caretWidth;
internal static event Delegates.set_caretWidth_AfterArgs _afterset_caretWidth;
private static void set_caretWidth(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_caretWidth @params = new() 
{
self = self
, value = value
};
if (_beforeset_caretWidth != null)
{
foreach (Delegates.set_caretWidth_BeforeArgs toInvoke in _beforeset_caretWidth.GetInvocationList())
{
try
{
_beforeset_caretWidth?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_caretWidth != null)
{
foreach (Delegates.set_caretWidth_AfterArgs toInvoke in _afterset_caretWidth.GetInvocationList())
{
try
{
_afterset_caretWidth.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_textViewport()
{
if (!HookedList.Contains("get_textViewport"))
{
HookedList.Add("get_textViewport");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_textViewport", true), get_textViewport);

}
}
internal static event Delegates.get_textViewport_BeforeArgs _beforeget_textViewport;
internal static event Delegates.get_textViewport_AfterArgs _afterget_textViewport;
private static UnityEngine.RectTransform get_textViewport(Func<TMPro.TMP_InputField, UnityEngine.RectTransform> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_textViewport @params = new() 
{
self = self
};
if (_beforeget_textViewport != null)
{
foreach (Delegates.get_textViewport_BeforeArgs toInvoke in _beforeget_textViewport.GetInvocationList())
{
try
{
_beforeget_textViewport?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_textViewport != null)
{
foreach (Delegates.get_textViewport_AfterArgs toInvoke in _afterget_textViewport.GetInvocationList())
{
try
{
retVal = _afterget_textViewport.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_textViewport()
{
if (!HookedList.Contains("set_textViewport"))
{
HookedList.Add("set_textViewport");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_textViewport", true), set_textViewport);

}
}
internal static event Delegates.set_textViewport_BeforeArgs _beforeset_textViewport;
internal static event Delegates.set_textViewport_AfterArgs _afterset_textViewport;
private static void set_textViewport(Action<TMPro.TMP_InputField,  UnityEngine.RectTransform> orig, TMPro.TMP_InputField self,  UnityEngine.RectTransform value)
{
Delegates.Params_set_textViewport @params = new() 
{
self = self
, value = value
};
if (_beforeset_textViewport != null)
{
foreach (Delegates.set_textViewport_BeforeArgs toInvoke in _beforeset_textViewport.GetInvocationList())
{
try
{
_beforeset_textViewport?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_textViewport != null)
{
foreach (Delegates.set_textViewport_AfterArgs toInvoke in _afterset_textViewport.GetInvocationList())
{
try
{
_afterset_textViewport.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_textComponent()
{
if (!HookedList.Contains("get_textComponent"))
{
HookedList.Add("get_textComponent");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_textComponent", true), get_textComponent);

}
}
internal static event Delegates.get_textComponent_BeforeArgs _beforeget_textComponent;
internal static event Delegates.get_textComponent_AfterArgs _afterget_textComponent;
private static TMPro.TMP_Text get_textComponent(Func<TMPro.TMP_InputField, TMPro.TMP_Text> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_textComponent @params = new() 
{
self = self
};
if (_beforeget_textComponent != null)
{
foreach (Delegates.get_textComponent_BeforeArgs toInvoke in _beforeget_textComponent.GetInvocationList())
{
try
{
_beforeget_textComponent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_textComponent != null)
{
foreach (Delegates.get_textComponent_AfterArgs toInvoke in _afterget_textComponent.GetInvocationList())
{
try
{
retVal = _afterget_textComponent.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_textComponent()
{
if (!HookedList.Contains("set_textComponent"))
{
HookedList.Add("set_textComponent");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_textComponent", true), set_textComponent);

}
}
internal static event Delegates.set_textComponent_BeforeArgs _beforeset_textComponent;
internal static event Delegates.set_textComponent_AfterArgs _afterset_textComponent;
private static void set_textComponent(Action<TMPro.TMP_InputField,  TMPro.TMP_Text> orig, TMPro.TMP_InputField self,  TMPro.TMP_Text value)
{
Delegates.Params_set_textComponent @params = new() 
{
self = self
, value = value
};
if (_beforeset_textComponent != null)
{
foreach (Delegates.set_textComponent_BeforeArgs toInvoke in _beforeset_textComponent.GetInvocationList())
{
try
{
_beforeset_textComponent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_textComponent != null)
{
foreach (Delegates.set_textComponent_AfterArgs toInvoke in _afterset_textComponent.GetInvocationList())
{
try
{
_afterset_textComponent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_placeholder()
{
if (!HookedList.Contains("get_placeholder"))
{
HookedList.Add("get_placeholder");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_placeholder", true), get_placeholder);

}
}
internal static event Delegates.get_placeholder_BeforeArgs _beforeget_placeholder;
internal static event Delegates.get_placeholder_AfterArgs _afterget_placeholder;
private static UnityEngine.UI.Graphic get_placeholder(Func<TMPro.TMP_InputField, UnityEngine.UI.Graphic> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_placeholder @params = new() 
{
self = self
};
if (_beforeget_placeholder != null)
{
foreach (Delegates.get_placeholder_BeforeArgs toInvoke in _beforeget_placeholder.GetInvocationList())
{
try
{
_beforeget_placeholder?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_placeholder != null)
{
foreach (Delegates.get_placeholder_AfterArgs toInvoke in _afterget_placeholder.GetInvocationList())
{
try
{
retVal = _afterget_placeholder.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_placeholder()
{
if (!HookedList.Contains("set_placeholder"))
{
HookedList.Add("set_placeholder");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_placeholder", true), set_placeholder);

}
}
internal static event Delegates.set_placeholder_BeforeArgs _beforeset_placeholder;
internal static event Delegates.set_placeholder_AfterArgs _afterset_placeholder;
private static void set_placeholder(Action<TMPro.TMP_InputField,  UnityEngine.UI.Graphic> orig, TMPro.TMP_InputField self,  UnityEngine.UI.Graphic value)
{
Delegates.Params_set_placeholder @params = new() 
{
self = self
, value = value
};
if (_beforeset_placeholder != null)
{
foreach (Delegates.set_placeholder_BeforeArgs toInvoke in _beforeset_placeholder.GetInvocationList())
{
try
{
_beforeset_placeholder?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_placeholder != null)
{
foreach (Delegates.set_placeholder_AfterArgs toInvoke in _afterset_placeholder.GetInvocationList())
{
try
{
_afterset_placeholder.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_caretColor()
{
if (!HookedList.Contains("get_caretColor"))
{
HookedList.Add("get_caretColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretColor", true), get_caretColor);

}
}
internal static event Delegates.get_caretColor_BeforeArgs _beforeget_caretColor;
internal static event Delegates.get_caretColor_AfterArgs _afterget_caretColor;
private static UnityEngine.Color get_caretColor(Func<TMPro.TMP_InputField, UnityEngine.Color> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_caretColor @params = new() 
{
self = self
};
if (_beforeget_caretColor != null)
{
foreach (Delegates.get_caretColor_BeforeArgs toInvoke in _beforeget_caretColor.GetInvocationList())
{
try
{
_beforeget_caretColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_caretColor != null)
{
foreach (Delegates.get_caretColor_AfterArgs toInvoke in _afterget_caretColor.GetInvocationList())
{
try
{
retVal = _afterget_caretColor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_caretColor()
{
if (!HookedList.Contains("set_caretColor"))
{
HookedList.Add("set_caretColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretColor", true), set_caretColor);

}
}
internal static event Delegates.set_caretColor_BeforeArgs _beforeset_caretColor;
internal static event Delegates.set_caretColor_AfterArgs _afterset_caretColor;
private static void set_caretColor(Action<TMPro.TMP_InputField,  UnityEngine.Color> orig, TMPro.TMP_InputField self,  UnityEngine.Color value)
{
Delegates.Params_set_caretColor @params = new() 
{
self = self
, value = value
};
if (_beforeset_caretColor != null)
{
foreach (Delegates.set_caretColor_BeforeArgs toInvoke in _beforeset_caretColor.GetInvocationList())
{
try
{
_beforeset_caretColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_caretColor != null)
{
foreach (Delegates.set_caretColor_AfterArgs toInvoke in _afterset_caretColor.GetInvocationList())
{
try
{
_afterset_caretColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_customCaretColor()
{
if (!HookedList.Contains("get_customCaretColor"))
{
HookedList.Add("get_customCaretColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_customCaretColor", true), get_customCaretColor);

}
}
internal static event Delegates.get_customCaretColor_BeforeArgs _beforeget_customCaretColor;
internal static event Delegates.get_customCaretColor_AfterArgs _afterget_customCaretColor;
private static bool get_customCaretColor(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_customCaretColor @params = new() 
{
self = self
};
if (_beforeget_customCaretColor != null)
{
foreach (Delegates.get_customCaretColor_BeforeArgs toInvoke in _beforeget_customCaretColor.GetInvocationList())
{
try
{
_beforeget_customCaretColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_customCaretColor != null)
{
foreach (Delegates.get_customCaretColor_AfterArgs toInvoke in _afterget_customCaretColor.GetInvocationList())
{
try
{
retVal = _afterget_customCaretColor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_customCaretColor()
{
if (!HookedList.Contains("set_customCaretColor"))
{
HookedList.Add("set_customCaretColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_customCaretColor", true), set_customCaretColor);

}
}
internal static event Delegates.set_customCaretColor_BeforeArgs _beforeset_customCaretColor;
internal static event Delegates.set_customCaretColor_AfterArgs _afterset_customCaretColor;
private static void set_customCaretColor(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value)
{
Delegates.Params_set_customCaretColor @params = new() 
{
self = self
, value = value
};
if (_beforeset_customCaretColor != null)
{
foreach (Delegates.set_customCaretColor_BeforeArgs toInvoke in _beforeset_customCaretColor.GetInvocationList())
{
try
{
_beforeset_customCaretColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_customCaretColor != null)
{
foreach (Delegates.set_customCaretColor_AfterArgs toInvoke in _afterset_customCaretColor.GetInvocationList())
{
try
{
_afterset_customCaretColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_selectionColor()
{
if (!HookedList.Contains("get_selectionColor"))
{
HookedList.Add("get_selectionColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionColor", true), get_selectionColor);

}
}
internal static event Delegates.get_selectionColor_BeforeArgs _beforeget_selectionColor;
internal static event Delegates.get_selectionColor_AfterArgs _afterget_selectionColor;
private static UnityEngine.Color get_selectionColor(Func<TMPro.TMP_InputField, UnityEngine.Color> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_selectionColor @params = new() 
{
self = self
};
if (_beforeget_selectionColor != null)
{
foreach (Delegates.get_selectionColor_BeforeArgs toInvoke in _beforeget_selectionColor.GetInvocationList())
{
try
{
_beforeget_selectionColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_selectionColor != null)
{
foreach (Delegates.get_selectionColor_AfterArgs toInvoke in _afterget_selectionColor.GetInvocationList())
{
try
{
retVal = _afterget_selectionColor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_selectionColor()
{
if (!HookedList.Contains("set_selectionColor"))
{
HookedList.Add("set_selectionColor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionColor", true), set_selectionColor);

}
}
internal static event Delegates.set_selectionColor_BeforeArgs _beforeset_selectionColor;
internal static event Delegates.set_selectionColor_AfterArgs _afterset_selectionColor;
private static void set_selectionColor(Action<TMPro.TMP_InputField,  UnityEngine.Color> orig, TMPro.TMP_InputField self,  UnityEngine.Color value)
{
Delegates.Params_set_selectionColor @params = new() 
{
self = self
, value = value
};
if (_beforeset_selectionColor != null)
{
foreach (Delegates.set_selectionColor_BeforeArgs toInvoke in _beforeset_selectionColor.GetInvocationList())
{
try
{
_beforeset_selectionColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_selectionColor != null)
{
foreach (Delegates.set_selectionColor_AfterArgs toInvoke in _afterset_selectionColor.GetInvocationList())
{
try
{
_afterset_selectionColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_characterLimit()
{
if (!HookedList.Contains("get_characterLimit"))
{
HookedList.Add("get_characterLimit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_characterLimit", true), get_characterLimit);

}
}
internal static event Delegates.get_characterLimit_BeforeArgs _beforeget_characterLimit;
internal static event Delegates.get_characterLimit_AfterArgs _afterget_characterLimit;
private static int get_characterLimit(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_characterLimit @params = new() 
{
self = self
};
if (_beforeget_characterLimit != null)
{
foreach (Delegates.get_characterLimit_BeforeArgs toInvoke in _beforeget_characterLimit.GetInvocationList())
{
try
{
_beforeget_characterLimit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_characterLimit != null)
{
foreach (Delegates.get_characterLimit_AfterArgs toInvoke in _afterget_characterLimit.GetInvocationList())
{
try
{
retVal = _afterget_characterLimit.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_characterLimit()
{
if (!HookedList.Contains("set_characterLimit"))
{
HookedList.Add("set_characterLimit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_characterLimit", true), set_characterLimit);

}
}
internal static event Delegates.set_characterLimit_BeforeArgs _beforeset_characterLimit;
internal static event Delegates.set_characterLimit_AfterArgs _afterset_characterLimit;
private static void set_characterLimit(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_characterLimit @params = new() 
{
self = self
, value = value
};
if (_beforeset_characterLimit != null)
{
foreach (Delegates.set_characterLimit_BeforeArgs toInvoke in _beforeset_characterLimit.GetInvocationList())
{
try
{
_beforeset_characterLimit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_characterLimit != null)
{
foreach (Delegates.set_characterLimit_AfterArgs toInvoke in _afterset_characterLimit.GetInvocationList())
{
try
{
_afterset_characterLimit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_keyboardType()
{
if (!HookedList.Contains("get_keyboardType"))
{
HookedList.Add("get_keyboardType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_keyboardType", true), get_keyboardType);

}
}
internal static event Delegates.get_keyboardType_BeforeArgs _beforeget_keyboardType;
internal static event Delegates.get_keyboardType_AfterArgs _afterget_keyboardType;
private static UnityEngine.TouchScreenKeyboardType get_keyboardType(Func<TMPro.TMP_InputField, UnityEngine.TouchScreenKeyboardType> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_keyboardType @params = new() 
{
self = self
};
if (_beforeget_keyboardType != null)
{
foreach (Delegates.get_keyboardType_BeforeArgs toInvoke in _beforeget_keyboardType.GetInvocationList())
{
try
{
_beforeget_keyboardType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_keyboardType != null)
{
foreach (Delegates.get_keyboardType_AfterArgs toInvoke in _afterget_keyboardType.GetInvocationList())
{
try
{
retVal = _afterget_keyboardType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_keyboardType()
{
if (!HookedList.Contains("set_keyboardType"))
{
HookedList.Add("set_keyboardType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_keyboardType", true), set_keyboardType);

}
}
internal static event Delegates.set_keyboardType_BeforeArgs _beforeset_keyboardType;
internal static event Delegates.set_keyboardType_AfterArgs _afterset_keyboardType;
private static void set_keyboardType(Action<TMPro.TMP_InputField,  UnityEngine.TouchScreenKeyboardType> orig, TMPro.TMP_InputField self,  UnityEngine.TouchScreenKeyboardType value)
{
Delegates.Params_set_keyboardType @params = new() 
{
self = self
, value = value
};
if (_beforeset_keyboardType != null)
{
foreach (Delegates.set_keyboardType_BeforeArgs toInvoke in _beforeset_keyboardType.GetInvocationList())
{
try
{
_beforeset_keyboardType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_keyboardType != null)
{
foreach (Delegates.set_keyboardType_AfterArgs toInvoke in _afterset_keyboardType.GetInvocationList())
{
try
{
_afterset_keyboardType.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_readOnly()
{
if (!HookedList.Contains("get_readOnly"))
{
HookedList.Add("get_readOnly");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_readOnly", true), get_readOnly);

}
}
internal static event Delegates.get_readOnly_BeforeArgs _beforeget_readOnly;
internal static event Delegates.get_readOnly_AfterArgs _afterget_readOnly;
private static bool get_readOnly(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_readOnly @params = new() 
{
self = self
};
if (_beforeget_readOnly != null)
{
foreach (Delegates.get_readOnly_BeforeArgs toInvoke in _beforeget_readOnly.GetInvocationList())
{
try
{
_beforeget_readOnly?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_readOnly != null)
{
foreach (Delegates.get_readOnly_AfterArgs toInvoke in _afterget_readOnly.GetInvocationList())
{
try
{
retVal = _afterget_readOnly.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_readOnly()
{
if (!HookedList.Contains("set_readOnly"))
{
HookedList.Add("set_readOnly");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_readOnly", true), set_readOnly);

}
}
internal static event Delegates.set_readOnly_BeforeArgs _beforeset_readOnly;
internal static event Delegates.set_readOnly_AfterArgs _afterset_readOnly;
private static void set_readOnly(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value)
{
Delegates.Params_set_readOnly @params = new() 
{
self = self
, value = value
};
if (_beforeset_readOnly != null)
{
foreach (Delegates.set_readOnly_BeforeArgs toInvoke in _beforeset_readOnly.GetInvocationList())
{
try
{
_beforeset_readOnly?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_readOnly != null)
{
foreach (Delegates.set_readOnly_AfterArgs toInvoke in _afterset_readOnly.GetInvocationList())
{
try
{
_afterset_readOnly.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_richText()
{
if (!HookedList.Contains("get_richText"))
{
HookedList.Add("get_richText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_richText", true), get_richText);

}
}
internal static event Delegates.get_richText_BeforeArgs _beforeget_richText;
internal static event Delegates.get_richText_AfterArgs _afterget_richText;
private static bool get_richText(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_richText @params = new() 
{
self = self
};
if (_beforeget_richText != null)
{
foreach (Delegates.get_richText_BeforeArgs toInvoke in _beforeget_richText.GetInvocationList())
{
try
{
_beforeget_richText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_richText != null)
{
foreach (Delegates.get_richText_AfterArgs toInvoke in _afterget_richText.GetInvocationList())
{
try
{
retVal = _afterget_richText.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_richText()
{
if (!HookedList.Contains("set_richText"))
{
HookedList.Add("set_richText");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_richText", true), set_richText);

}
}
internal static event Delegates.set_richText_BeforeArgs _beforeset_richText;
internal static event Delegates.set_richText_AfterArgs _afterset_richText;
private static void set_richText(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value)
{
Delegates.Params_set_richText @params = new() 
{
self = self
, value = value
};
if (_beforeset_richText != null)
{
foreach (Delegates.set_richText_BeforeArgs toInvoke in _beforeset_richText.GetInvocationList())
{
try
{
_beforeset_richText?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_richText != null)
{
foreach (Delegates.set_richText_AfterArgs toInvoke in _afterset_richText.GetInvocationList())
{
try
{
_afterset_richText.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_multiLine()
{
if (!HookedList.Contains("get_multiLine"))
{
HookedList.Add("get_multiLine");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_multiLine", true), get_multiLine);

}
}
internal static event Delegates.get_multiLine_BeforeArgs _beforeget_multiLine;
internal static event Delegates.get_multiLine_AfterArgs _afterget_multiLine;
private static bool get_multiLine(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_multiLine @params = new() 
{
self = self
};
if (_beforeget_multiLine != null)
{
foreach (Delegates.get_multiLine_BeforeArgs toInvoke in _beforeget_multiLine.GetInvocationList())
{
try
{
_beforeget_multiLine?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_multiLine != null)
{
foreach (Delegates.get_multiLine_AfterArgs toInvoke in _afterget_multiLine.GetInvocationList())
{
try
{
retVal = _afterget_multiLine.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_asteriskChar()
{
if (!HookedList.Contains("get_asteriskChar"))
{
HookedList.Add("get_asteriskChar");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_asteriskChar", true), get_asteriskChar);

}
}
internal static event Delegates.get_asteriskChar_BeforeArgs _beforeget_asteriskChar;
internal static event Delegates.get_asteriskChar_AfterArgs _afterget_asteriskChar;
private static char get_asteriskChar(Func<TMPro.TMP_InputField, char> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_asteriskChar @params = new() 
{
self = self
};
if (_beforeget_asteriskChar != null)
{
foreach (Delegates.get_asteriskChar_BeforeArgs toInvoke in _beforeget_asteriskChar.GetInvocationList())
{
try
{
_beforeget_asteriskChar?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_asteriskChar != null)
{
foreach (Delegates.get_asteriskChar_AfterArgs toInvoke in _afterget_asteriskChar.GetInvocationList())
{
try
{
retVal = _afterget_asteriskChar.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_asteriskChar()
{
if (!HookedList.Contains("set_asteriskChar"))
{
HookedList.Add("set_asteriskChar");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_asteriskChar", true), set_asteriskChar);

}
}
internal static event Delegates.set_asteriskChar_BeforeArgs _beforeset_asteriskChar;
internal static event Delegates.set_asteriskChar_AfterArgs _afterset_asteriskChar;
private static void set_asteriskChar(Action<TMPro.TMP_InputField,  char> orig, TMPro.TMP_InputField self,  char value)
{
Delegates.Params_set_asteriskChar @params = new() 
{
self = self
, value = value
};
if (_beforeset_asteriskChar != null)
{
foreach (Delegates.set_asteriskChar_BeforeArgs toInvoke in _beforeset_asteriskChar.GetInvocationList())
{
try
{
_beforeset_asteriskChar?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_asteriskChar != null)
{
foreach (Delegates.set_asteriskChar_AfterArgs toInvoke in _afterset_asteriskChar.GetInvocationList())
{
try
{
_afterset_asteriskChar.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_wasCanceled()
{
if (!HookedList.Contains("get_wasCanceled"))
{
HookedList.Add("get_wasCanceled");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_wasCanceled", true), get_wasCanceled);

}
}
internal static event Delegates.get_wasCanceled_BeforeArgs _beforeget_wasCanceled;
internal static event Delegates.get_wasCanceled_AfterArgs _afterget_wasCanceled;
private static bool get_wasCanceled(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_wasCanceled @params = new() 
{
self = self
};
if (_beforeget_wasCanceled != null)
{
foreach (Delegates.get_wasCanceled_BeforeArgs toInvoke in _beforeget_wasCanceled.GetInvocationList())
{
try
{
_beforeget_wasCanceled?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_wasCanceled != null)
{
foreach (Delegates.get_wasCanceled_AfterArgs toInvoke in _afterget_wasCanceled.GetInvocationList())
{
try
{
retVal = _afterget_wasCanceled.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookClampPos()
{
if (!HookedList.Contains("ClampPos"))
{
HookedList.Add("ClampPos");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ClampPos", true), ClampPos);

}
}
internal static event Delegates.ClampPos_BeforeArgs _beforeClampPos;
internal static event Delegates.ClampPos_AfterArgs _afterClampPos;
private static void ClampPos(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int pos)
{
Delegates.Params_ClampPos @params = new() 
{
self = self
, pos = pos
};
if (_beforeClampPos != null)
{
foreach (Delegates.ClampPos_BeforeArgs toInvoke in _beforeClampPos.GetInvocationList())
{
try
{
_beforeClampPos?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
pos = @params.pos;
orig(self, pos);
if (_afterClampPos != null)
{
foreach (Delegates.ClampPos_AfterArgs toInvoke in _afterClampPos.GetInvocationList())
{
try
{
_afterClampPos.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_caretPositionInternal()
{
if (!HookedList.Contains("get_caretPositionInternal"))
{
HookedList.Add("get_caretPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretPositionInternal", true), get_caretPositionInternal);

}
}
internal static event Delegates.get_caretPositionInternal_BeforeArgs _beforeget_caretPositionInternal;
internal static event Delegates.get_caretPositionInternal_AfterArgs _afterget_caretPositionInternal;
private static int get_caretPositionInternal(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_caretPositionInternal @params = new() 
{
self = self
};
if (_beforeget_caretPositionInternal != null)
{
foreach (Delegates.get_caretPositionInternal_BeforeArgs toInvoke in _beforeget_caretPositionInternal.GetInvocationList())
{
try
{
_beforeget_caretPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_caretPositionInternal != null)
{
foreach (Delegates.get_caretPositionInternal_AfterArgs toInvoke in _afterget_caretPositionInternal.GetInvocationList())
{
try
{
retVal = _afterget_caretPositionInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_caretPositionInternal()
{
if (!HookedList.Contains("set_caretPositionInternal"))
{
HookedList.Add("set_caretPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretPositionInternal", true), set_caretPositionInternal);

}
}
internal static event Delegates.set_caretPositionInternal_BeforeArgs _beforeset_caretPositionInternal;
internal static event Delegates.set_caretPositionInternal_AfterArgs _afterset_caretPositionInternal;
private static void set_caretPositionInternal(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_caretPositionInternal @params = new() 
{
self = self
, value = value
};
if (_beforeset_caretPositionInternal != null)
{
foreach (Delegates.set_caretPositionInternal_BeforeArgs toInvoke in _beforeset_caretPositionInternal.GetInvocationList())
{
try
{
_beforeset_caretPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_caretPositionInternal != null)
{
foreach (Delegates.set_caretPositionInternal_AfterArgs toInvoke in _afterset_caretPositionInternal.GetInvocationList())
{
try
{
_afterset_caretPositionInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_stringPositionInternal()
{
if (!HookedList.Contains("get_stringPositionInternal"))
{
HookedList.Add("get_stringPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_stringPositionInternal", true), get_stringPositionInternal);

}
}
internal static event Delegates.get_stringPositionInternal_BeforeArgs _beforeget_stringPositionInternal;
internal static event Delegates.get_stringPositionInternal_AfterArgs _afterget_stringPositionInternal;
private static int get_stringPositionInternal(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_stringPositionInternal @params = new() 
{
self = self
};
if (_beforeget_stringPositionInternal != null)
{
foreach (Delegates.get_stringPositionInternal_BeforeArgs toInvoke in _beforeget_stringPositionInternal.GetInvocationList())
{
try
{
_beforeget_stringPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_stringPositionInternal != null)
{
foreach (Delegates.get_stringPositionInternal_AfterArgs toInvoke in _afterget_stringPositionInternal.GetInvocationList())
{
try
{
retVal = _afterget_stringPositionInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_stringPositionInternal()
{
if (!HookedList.Contains("set_stringPositionInternal"))
{
HookedList.Add("set_stringPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_stringPositionInternal", true), set_stringPositionInternal);

}
}
internal static event Delegates.set_stringPositionInternal_BeforeArgs _beforeset_stringPositionInternal;
internal static event Delegates.set_stringPositionInternal_AfterArgs _afterset_stringPositionInternal;
private static void set_stringPositionInternal(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_stringPositionInternal @params = new() 
{
self = self
, value = value
};
if (_beforeset_stringPositionInternal != null)
{
foreach (Delegates.set_stringPositionInternal_BeforeArgs toInvoke in _beforeset_stringPositionInternal.GetInvocationList())
{
try
{
_beforeset_stringPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_stringPositionInternal != null)
{
foreach (Delegates.set_stringPositionInternal_AfterArgs toInvoke in _afterset_stringPositionInternal.GetInvocationList())
{
try
{
_afterset_stringPositionInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_caretSelectPositionInternal()
{
if (!HookedList.Contains("get_caretSelectPositionInternal"))
{
HookedList.Add("get_caretSelectPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretSelectPositionInternal", true), get_caretSelectPositionInternal);

}
}
internal static event Delegates.get_caretSelectPositionInternal_BeforeArgs _beforeget_caretSelectPositionInternal;
internal static event Delegates.get_caretSelectPositionInternal_AfterArgs _afterget_caretSelectPositionInternal;
private static int get_caretSelectPositionInternal(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_caretSelectPositionInternal @params = new() 
{
self = self
};
if (_beforeget_caretSelectPositionInternal != null)
{
foreach (Delegates.get_caretSelectPositionInternal_BeforeArgs toInvoke in _beforeget_caretSelectPositionInternal.GetInvocationList())
{
try
{
_beforeget_caretSelectPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_caretSelectPositionInternal != null)
{
foreach (Delegates.get_caretSelectPositionInternal_AfterArgs toInvoke in _afterget_caretSelectPositionInternal.GetInvocationList())
{
try
{
retVal = _afterget_caretSelectPositionInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_caretSelectPositionInternal()
{
if (!HookedList.Contains("set_caretSelectPositionInternal"))
{
HookedList.Add("set_caretSelectPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretSelectPositionInternal", true), set_caretSelectPositionInternal);

}
}
internal static event Delegates.set_caretSelectPositionInternal_BeforeArgs _beforeset_caretSelectPositionInternal;
internal static event Delegates.set_caretSelectPositionInternal_AfterArgs _afterset_caretSelectPositionInternal;
private static void set_caretSelectPositionInternal(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_caretSelectPositionInternal @params = new() 
{
self = self
, value = value
};
if (_beforeset_caretSelectPositionInternal != null)
{
foreach (Delegates.set_caretSelectPositionInternal_BeforeArgs toInvoke in _beforeset_caretSelectPositionInternal.GetInvocationList())
{
try
{
_beforeset_caretSelectPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_caretSelectPositionInternal != null)
{
foreach (Delegates.set_caretSelectPositionInternal_AfterArgs toInvoke in _afterset_caretSelectPositionInternal.GetInvocationList())
{
try
{
_afterset_caretSelectPositionInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_stringSelectPositionInternal()
{
if (!HookedList.Contains("get_stringSelectPositionInternal"))
{
HookedList.Add("get_stringSelectPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_stringSelectPositionInternal", true), get_stringSelectPositionInternal);

}
}
internal static event Delegates.get_stringSelectPositionInternal_BeforeArgs _beforeget_stringSelectPositionInternal;
internal static event Delegates.get_stringSelectPositionInternal_AfterArgs _afterget_stringSelectPositionInternal;
private static int get_stringSelectPositionInternal(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_stringSelectPositionInternal @params = new() 
{
self = self
};
if (_beforeget_stringSelectPositionInternal != null)
{
foreach (Delegates.get_stringSelectPositionInternal_BeforeArgs toInvoke in _beforeget_stringSelectPositionInternal.GetInvocationList())
{
try
{
_beforeget_stringSelectPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_stringSelectPositionInternal != null)
{
foreach (Delegates.get_stringSelectPositionInternal_AfterArgs toInvoke in _afterget_stringSelectPositionInternal.GetInvocationList())
{
try
{
retVal = _afterget_stringSelectPositionInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_stringSelectPositionInternal()
{
if (!HookedList.Contains("set_stringSelectPositionInternal"))
{
HookedList.Add("set_stringSelectPositionInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_stringSelectPositionInternal", true), set_stringSelectPositionInternal);

}
}
internal static event Delegates.set_stringSelectPositionInternal_BeforeArgs _beforeset_stringSelectPositionInternal;
internal static event Delegates.set_stringSelectPositionInternal_AfterArgs _afterset_stringSelectPositionInternal;
private static void set_stringSelectPositionInternal(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_stringSelectPositionInternal @params = new() 
{
self = self
, value = value
};
if (_beforeset_stringSelectPositionInternal != null)
{
foreach (Delegates.set_stringSelectPositionInternal_BeforeArgs toInvoke in _beforeset_stringSelectPositionInternal.GetInvocationList())
{
try
{
_beforeset_stringSelectPositionInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_stringSelectPositionInternal != null)
{
foreach (Delegates.set_stringSelectPositionInternal_AfterArgs toInvoke in _afterset_stringSelectPositionInternal.GetInvocationList())
{
try
{
_afterset_stringSelectPositionInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_hasSelection()
{
if (!HookedList.Contains("get_hasSelection"))
{
HookedList.Add("get_hasSelection");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_hasSelection", true), get_hasSelection);

}
}
internal static event Delegates.get_hasSelection_BeforeArgs _beforeget_hasSelection;
internal static event Delegates.get_hasSelection_AfterArgs _afterget_hasSelection;
private static bool get_hasSelection(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_hasSelection @params = new() 
{
self = self
};
if (_beforeget_hasSelection != null)
{
foreach (Delegates.get_hasSelection_BeforeArgs toInvoke in _beforeget_hasSelection.GetInvocationList())
{
try
{
_beforeget_hasSelection?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_hasSelection != null)
{
foreach (Delegates.get_hasSelection_AfterArgs toInvoke in _afterget_hasSelection.GetInvocationList())
{
try
{
retVal = _afterget_hasSelection.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_caretPosition()
{
if (!HookedList.Contains("get_caretPosition"))
{
HookedList.Add("get_caretPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretPosition", true), get_caretPosition);

}
}
internal static event Delegates.get_caretPosition_BeforeArgs _beforeget_caretPosition;
internal static event Delegates.get_caretPosition_AfterArgs _afterget_caretPosition;
private static int get_caretPosition(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_caretPosition @params = new() 
{
self = self
};
if (_beforeget_caretPosition != null)
{
foreach (Delegates.get_caretPosition_BeforeArgs toInvoke in _beforeget_caretPosition.GetInvocationList())
{
try
{
_beforeget_caretPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_caretPosition != null)
{
foreach (Delegates.get_caretPosition_AfterArgs toInvoke in _afterget_caretPosition.GetInvocationList())
{
try
{
retVal = _afterget_caretPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_caretPosition()
{
if (!HookedList.Contains("set_caretPosition"))
{
HookedList.Add("set_caretPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretPosition", true), set_caretPosition);

}
}
internal static event Delegates.set_caretPosition_BeforeArgs _beforeset_caretPosition;
internal static event Delegates.set_caretPosition_AfterArgs _afterset_caretPosition;
private static void set_caretPosition(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_caretPosition @params = new() 
{
self = self
, value = value
};
if (_beforeset_caretPosition != null)
{
foreach (Delegates.set_caretPosition_BeforeArgs toInvoke in _beforeset_caretPosition.GetInvocationList())
{
try
{
_beforeset_caretPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_caretPosition != null)
{
foreach (Delegates.set_caretPosition_AfterArgs toInvoke in _afterset_caretPosition.GetInvocationList())
{
try
{
_afterset_caretPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_selectionAnchorPosition()
{
if (!HookedList.Contains("get_selectionAnchorPosition"))
{
HookedList.Add("get_selectionAnchorPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionAnchorPosition", true), get_selectionAnchorPosition);

}
}
internal static event Delegates.get_selectionAnchorPosition_BeforeArgs _beforeget_selectionAnchorPosition;
internal static event Delegates.get_selectionAnchorPosition_AfterArgs _afterget_selectionAnchorPosition;
private static int get_selectionAnchorPosition(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_selectionAnchorPosition @params = new() 
{
self = self
};
if (_beforeget_selectionAnchorPosition != null)
{
foreach (Delegates.get_selectionAnchorPosition_BeforeArgs toInvoke in _beforeget_selectionAnchorPosition.GetInvocationList())
{
try
{
_beforeget_selectionAnchorPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_selectionAnchorPosition != null)
{
foreach (Delegates.get_selectionAnchorPosition_AfterArgs toInvoke in _afterget_selectionAnchorPosition.GetInvocationList())
{
try
{
retVal = _afterget_selectionAnchorPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_selectionAnchorPosition()
{
if (!HookedList.Contains("set_selectionAnchorPosition"))
{
HookedList.Add("set_selectionAnchorPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionAnchorPosition", true), set_selectionAnchorPosition);

}
}
internal static event Delegates.set_selectionAnchorPosition_BeforeArgs _beforeset_selectionAnchorPosition;
internal static event Delegates.set_selectionAnchorPosition_AfterArgs _afterset_selectionAnchorPosition;
private static void set_selectionAnchorPosition(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_selectionAnchorPosition @params = new() 
{
self = self
, value = value
};
if (_beforeset_selectionAnchorPosition != null)
{
foreach (Delegates.set_selectionAnchorPosition_BeforeArgs toInvoke in _beforeset_selectionAnchorPosition.GetInvocationList())
{
try
{
_beforeset_selectionAnchorPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_selectionAnchorPosition != null)
{
foreach (Delegates.set_selectionAnchorPosition_AfterArgs toInvoke in _afterset_selectionAnchorPosition.GetInvocationList())
{
try
{
_afterset_selectionAnchorPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_selectionFocusPosition()
{
if (!HookedList.Contains("get_selectionFocusPosition"))
{
HookedList.Add("get_selectionFocusPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionFocusPosition", true), get_selectionFocusPosition);

}
}
internal static event Delegates.get_selectionFocusPosition_BeforeArgs _beforeget_selectionFocusPosition;
internal static event Delegates.get_selectionFocusPosition_AfterArgs _afterget_selectionFocusPosition;
private static int get_selectionFocusPosition(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_selectionFocusPosition @params = new() 
{
self = self
};
if (_beforeget_selectionFocusPosition != null)
{
foreach (Delegates.get_selectionFocusPosition_BeforeArgs toInvoke in _beforeget_selectionFocusPosition.GetInvocationList())
{
try
{
_beforeget_selectionFocusPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_selectionFocusPosition != null)
{
foreach (Delegates.get_selectionFocusPosition_AfterArgs toInvoke in _afterget_selectionFocusPosition.GetInvocationList())
{
try
{
retVal = _afterget_selectionFocusPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_selectionFocusPosition()
{
if (!HookedList.Contains("set_selectionFocusPosition"))
{
HookedList.Add("set_selectionFocusPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionFocusPosition", true), set_selectionFocusPosition);

}
}
internal static event Delegates.set_selectionFocusPosition_BeforeArgs _beforeset_selectionFocusPosition;
internal static event Delegates.set_selectionFocusPosition_AfterArgs _afterset_selectionFocusPosition;
private static void set_selectionFocusPosition(Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value)
{
Delegates.Params_set_selectionFocusPosition @params = new() 
{
self = self
, value = value
};
if (_beforeset_selectionFocusPosition != null)
{
foreach (Delegates.set_selectionFocusPosition_BeforeArgs toInvoke in _beforeset_selectionFocusPosition.GetInvocationList())
{
try
{
_beforeset_selectionFocusPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_selectionFocusPosition != null)
{
foreach (Delegates.set_selectionFocusPosition_AfterArgs toInvoke in _afterset_selectionFocusPosition.GetInvocationList())
{
try
{
_afterset_selectionFocusPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnEnable", true), OnEnable);

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDisable", true), OnDisable);

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCaretBlink()
{
if (!HookedList.Contains("CaretBlink"))
{
HookedList.Add("CaretBlink");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "CaretBlink", true), CaretBlink);

}
}
internal static event Delegates.CaretBlink_BeforeArgs _beforeCaretBlink;
private static System.Collections.IEnumerator CaretBlink(Func<TMPro.TMP_InputField, System.Collections.IEnumerator> orig, TMPro.TMP_InputField self)
{
Delegates.Params_CaretBlink @params = new() 
{
self = self
};
if (_beforeCaretBlink != null)
{
foreach (Delegates.CaretBlink_BeforeArgs toInvoke in _beforeCaretBlink.GetInvocationList())
{
try
{
_beforeCaretBlink?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookSetCaretVisible()
{
if (!HookedList.Contains("SetCaretVisible"))
{
HookedList.Add("SetCaretVisible");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetCaretVisible", true), SetCaretVisible);

}
}
internal static event Delegates.SetCaretVisible_BeforeArgs _beforeSetCaretVisible;
internal static event Delegates.SetCaretVisible_AfterArgs _afterSetCaretVisible;
private static void SetCaretVisible(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SetCaretVisible @params = new() 
{
self = self
};
if (_beforeSetCaretVisible != null)
{
foreach (Delegates.SetCaretVisible_BeforeArgs toInvoke in _beforeSetCaretVisible.GetInvocationList())
{
try
{
_beforeSetCaretVisible?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetCaretVisible != null)
{
foreach (Delegates.SetCaretVisible_AfterArgs toInvoke in _afterSetCaretVisible.GetInvocationList())
{
try
{
_afterSetCaretVisible.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetCaretActive()
{
if (!HookedList.Contains("SetCaretActive"))
{
HookedList.Add("SetCaretActive");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetCaretActive", true), SetCaretActive);

}
}
internal static event Delegates.SetCaretActive_BeforeArgs _beforeSetCaretActive;
internal static event Delegates.SetCaretActive_AfterArgs _afterSetCaretActive;
private static void SetCaretActive(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SetCaretActive @params = new() 
{
self = self
};
if (_beforeSetCaretActive != null)
{
foreach (Delegates.SetCaretActive_BeforeArgs toInvoke in _beforeSetCaretActive.GetInvocationList())
{
try
{
_beforeSetCaretActive?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetCaretActive != null)
{
foreach (Delegates.SetCaretActive_AfterArgs toInvoke in _afterSetCaretActive.GetInvocationList())
{
try
{
_afterSetCaretActive.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnFocus()
{
if (!HookedList.Contains("OnFocus"))
{
HookedList.Add("OnFocus");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnFocus", true), OnFocus);

}
}
internal static event Delegates.OnFocus_BeforeArgs _beforeOnFocus;
internal static event Delegates.OnFocus_AfterArgs _afterOnFocus;
private static void OnFocus(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_OnFocus @params = new() 
{
self = self
};
if (_beforeOnFocus != null)
{
foreach (Delegates.OnFocus_BeforeArgs toInvoke in _beforeOnFocus.GetInvocationList())
{
try
{
_beforeOnFocus?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnFocus != null)
{
foreach (Delegates.OnFocus_AfterArgs toInvoke in _afterOnFocus.GetInvocationList())
{
try
{
_afterOnFocus.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSelectAll()
{
if (!HookedList.Contains("SelectAll"))
{
HookedList.Add("SelectAll");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SelectAll", true), SelectAll);

}
}
internal static event Delegates.SelectAll_BeforeArgs _beforeSelectAll;
internal static event Delegates.SelectAll_AfterArgs _afterSelectAll;
private static void SelectAll(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SelectAll @params = new() 
{
self = self
};
if (_beforeSelectAll != null)
{
foreach (Delegates.SelectAll_BeforeArgs toInvoke in _beforeSelectAll.GetInvocationList())
{
try
{
_beforeSelectAll?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSelectAll != null)
{
foreach (Delegates.SelectAll_AfterArgs toInvoke in _afterSelectAll.GetInvocationList())
{
try
{
_afterSelectAll.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMoveTextEnd()
{
if (!HookedList.Contains("MoveTextEnd"))
{
HookedList.Add("MoveTextEnd");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveTextEnd", true), MoveTextEnd);

}
}
internal static event Delegates.MoveTextEnd_BeforeArgs _beforeMoveTextEnd;
internal static event Delegates.MoveTextEnd_AfterArgs _afterMoveTextEnd;
private static void MoveTextEnd(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift)
{
Delegates.Params_MoveTextEnd @params = new() 
{
self = self
, shift = shift
};
if (_beforeMoveTextEnd != null)
{
foreach (Delegates.MoveTextEnd_BeforeArgs toInvoke in _beforeMoveTextEnd.GetInvocationList())
{
try
{
_beforeMoveTextEnd?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
orig(self, shift);
if (_afterMoveTextEnd != null)
{
foreach (Delegates.MoveTextEnd_AfterArgs toInvoke in _afterMoveTextEnd.GetInvocationList())
{
try
{
_afterMoveTextEnd.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMoveTextStart()
{
if (!HookedList.Contains("MoveTextStart"))
{
HookedList.Add("MoveTextStart");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveTextStart", true), MoveTextStart);

}
}
internal static event Delegates.MoveTextStart_BeforeArgs _beforeMoveTextStart;
internal static event Delegates.MoveTextStart_AfterArgs _afterMoveTextStart;
private static void MoveTextStart(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift)
{
Delegates.Params_MoveTextStart @params = new() 
{
self = self
, shift = shift
};
if (_beforeMoveTextStart != null)
{
foreach (Delegates.MoveTextStart_BeforeArgs toInvoke in _beforeMoveTextStart.GetInvocationList())
{
try
{
_beforeMoveTextStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
orig(self, shift);
if (_afterMoveTextStart != null)
{
foreach (Delegates.MoveTextStart_AfterArgs toInvoke in _afterMoveTextStart.GetInvocationList())
{
try
{
_afterMoveTextStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_clipboard()
{
if (!HookedList.Contains("get_clipboard"))
{
HookedList.Add("get_clipboard");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_clipboard", false), get_clipboard);

}
}
internal static event Delegates.get_clipboard_BeforeArgs _beforeget_clipboard;
internal static event Delegates.get_clipboard_AfterArgs _afterget_clipboard;
private static string get_clipboard(Func<string> orig)
{
if (_beforeget_clipboard != null)
{
foreach (Delegates.get_clipboard_BeforeArgs toInvoke in _beforeget_clipboard.GetInvocationList())
{
try
{
_beforeget_clipboard?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_clipboard != null)
{
foreach (Delegates.get_clipboard_AfterArgs toInvoke in _afterget_clipboard.GetInvocationList())
{
try
{
retVal = _afterget_clipboard.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_clipboard()
{
if (!HookedList.Contains("set_clipboard"))
{
HookedList.Add("set_clipboard");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_clipboard", false), set_clipboard);

}
}
internal static event Delegates.set_clipboard_BeforeArgs _beforeset_clipboard;
internal static event Delegates.set_clipboard_AfterArgs _afterset_clipboard;
private static void set_clipboard(Action< string> orig,  string value)
{
Delegates.Params_set_clipboard @params = new() 
{
value = value
};
if (_beforeset_clipboard != null)
{
foreach (Delegates.set_clipboard_BeforeArgs toInvoke in _beforeset_clipboard.GetInvocationList())
{
try
{
_beforeset_clipboard?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
value = @params.value;
orig(value);
if (_afterset_clipboard != null)
{
foreach (Delegates.set_clipboard_AfterArgs toInvoke in _afterset_clipboard.GetInvocationList())
{
try
{
_afterset_clipboard.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInPlaceEditing()
{
if (!HookedList.Contains("InPlaceEditing"))
{
HookedList.Add("InPlaceEditing");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "InPlaceEditing", true), InPlaceEditing);

}
}
internal static event Delegates.InPlaceEditing_BeforeArgs _beforeInPlaceEditing;
internal static event Delegates.InPlaceEditing_AfterArgs _afterInPlaceEditing;
private static bool InPlaceEditing(Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self)
{
Delegates.Params_InPlaceEditing @params = new() 
{
self = self
};
if (_beforeInPlaceEditing != null)
{
foreach (Delegates.InPlaceEditing_BeforeArgs toInvoke in _beforeInPlaceEditing.GetInvocationList())
{
try
{
_beforeInPlaceEditing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterInPlaceEditing != null)
{
foreach (Delegates.InPlaceEditing_AfterArgs toInvoke in _afterInPlaceEditing.GetInvocationList())
{
try
{
retVal = _afterInPlaceEditing.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookLateUpdate()
{
if (!HookedList.Contains("LateUpdate"))
{
HookedList.Add("LateUpdate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LateUpdate", true), LateUpdate);

}
}
internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;
private static void LateUpdate(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_LateUpdate @params = new() 
{
self = self
};
if (_beforeLateUpdate != null)
{
foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
{
try
{
_beforeLateUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLateUpdate != null)
{
foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
{
try
{
_afterLateUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetCharacterIndexFromPosition()
{
if (!HookedList.Contains("GetCharacterIndexFromPosition"))
{
HookedList.Add("GetCharacterIndexFromPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetCharacterIndexFromPosition", true), GetCharacterIndexFromPosition);

}
}
internal static event Delegates.GetCharacterIndexFromPosition_BeforeArgs _beforeGetCharacterIndexFromPosition;
internal static event Delegates.GetCharacterIndexFromPosition_AfterArgs _afterGetCharacterIndexFromPosition;
private static int GetCharacterIndexFromPosition(Func<TMPro.TMP_InputField,  UnityEngine.Vector2, int> orig, TMPro.TMP_InputField self,  UnityEngine.Vector2 pos)
{
Delegates.Params_GetCharacterIndexFromPosition @params = new() 
{
self = self
, pos = pos
};
if (_beforeGetCharacterIndexFromPosition != null)
{
foreach (Delegates.GetCharacterIndexFromPosition_BeforeArgs toInvoke in _beforeGetCharacterIndexFromPosition.GetInvocationList())
{
try
{
_beforeGetCharacterIndexFromPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
pos = @params.pos;
var retVal = orig(self, pos);
if (_afterGetCharacterIndexFromPosition != null)
{
foreach (Delegates.GetCharacterIndexFromPosition_AfterArgs toInvoke in _afterGetCharacterIndexFromPosition.GetInvocationList())
{
try
{
retVal = _afterGetCharacterIndexFromPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookMayDrag()
{
if (!HookedList.Contains("MayDrag"))
{
HookedList.Add("MayDrag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MayDrag", true), MayDrag);

}
}
internal static event Delegates.MayDrag_BeforeArgs _beforeMayDrag;
internal static event Delegates.MayDrag_AfterArgs _afterMayDrag;
private static bool MayDrag(Func<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData, bool> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_MayDrag @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeMayDrag != null)
{
foreach (Delegates.MayDrag_BeforeArgs toInvoke in _beforeMayDrag.GetInvocationList())
{
try
{
_beforeMayDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
var retVal = orig(self, eventData);
if (_afterMayDrag != null)
{
foreach (Delegates.MayDrag_AfterArgs toInvoke in _afterMayDrag.GetInvocationList())
{
try
{
retVal = _afterMayDrag.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnBeginDrag()
{
if (!HookedList.Contains("OnBeginDrag"))
{
HookedList.Add("OnBeginDrag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnBeginDrag", true), OnBeginDrag);

}
}
internal static event Delegates.OnBeginDrag_BeforeArgs _beforeOnBeginDrag;
internal static event Delegates.OnBeginDrag_AfterArgs _afterOnBeginDrag;
private static void OnBeginDrag(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnBeginDrag @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnBeginDrag != null)
{
foreach (Delegates.OnBeginDrag_BeforeArgs toInvoke in _beforeOnBeginDrag.GetInvocationList())
{
try
{
_beforeOnBeginDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnBeginDrag != null)
{
foreach (Delegates.OnBeginDrag_AfterArgs toInvoke in _afterOnBeginDrag.GetInvocationList())
{
try
{
_afterOnBeginDrag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDrag()
{
if (!HookedList.Contains("OnDrag"))
{
HookedList.Add("OnDrag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDrag", true), OnDrag);

}
}
internal static event Delegates.OnDrag_BeforeArgs _beforeOnDrag;
internal static event Delegates.OnDrag_AfterArgs _afterOnDrag;
private static void OnDrag(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnDrag @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnDrag != null)
{
foreach (Delegates.OnDrag_BeforeArgs toInvoke in _beforeOnDrag.GetInvocationList())
{
try
{
_beforeOnDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnDrag != null)
{
foreach (Delegates.OnDrag_AfterArgs toInvoke in _afterOnDrag.GetInvocationList())
{
try
{
_afterOnDrag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMouseDragOutsideRect()
{
if (!HookedList.Contains("MouseDragOutsideRect"))
{
HookedList.Add("MouseDragOutsideRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MouseDragOutsideRect", true), MouseDragOutsideRect);

}
}
internal static event Delegates.MouseDragOutsideRect_BeforeArgs _beforeMouseDragOutsideRect;
private static System.Collections.IEnumerator MouseDragOutsideRect(Func<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData, System.Collections.IEnumerator> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_MouseDragOutsideRect @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeMouseDragOutsideRect != null)
{
foreach (Delegates.MouseDragOutsideRect_BeforeArgs toInvoke in _beforeMouseDragOutsideRect.GetInvocationList())
{
try
{
_beforeMouseDragOutsideRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
return orig(self, eventData);
}
internal static void HookOnEndDrag()
{
if (!HookedList.Contains("OnEndDrag"))
{
HookedList.Add("OnEndDrag");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnEndDrag", true), OnEndDrag);

}
}
internal static event Delegates.OnEndDrag_BeforeArgs _beforeOnEndDrag;
internal static event Delegates.OnEndDrag_AfterArgs _afterOnEndDrag;
private static void OnEndDrag(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnEndDrag @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnEndDrag != null)
{
foreach (Delegates.OnEndDrag_BeforeArgs toInvoke in _beforeOnEndDrag.GetInvocationList())
{
try
{
_beforeOnEndDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnEndDrag != null)
{
foreach (Delegates.OnEndDrag_AfterArgs toInvoke in _afterOnEndDrag.GetInvocationList())
{
try
{
_afterOnEndDrag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPointerDown()
{
if (!HookedList.Contains("OnPointerDown"))
{
HookedList.Add("OnPointerDown");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnPointerDown", true), OnPointerDown);

}
}
internal static event Delegates.OnPointerDown_BeforeArgs _beforeOnPointerDown;
internal static event Delegates.OnPointerDown_AfterArgs _afterOnPointerDown;
private static void OnPointerDown(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerDown @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerDown != null)
{
foreach (Delegates.OnPointerDown_BeforeArgs toInvoke in _beforeOnPointerDown.GetInvocationList())
{
try
{
_beforeOnPointerDown?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerDown != null)
{
foreach (Delegates.OnPointerDown_AfterArgs toInvoke in _afterOnPointerDown.GetInvocationList())
{
try
{
_afterOnPointerDown.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookIsValidChar()
{
if (!HookedList.Contains("IsValidChar"))
{
HookedList.Add("IsValidChar");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "IsValidChar", true), IsValidChar);

}
}
internal static event Delegates.IsValidChar_BeforeArgs _beforeIsValidChar;
internal static event Delegates.IsValidChar_AfterArgs _afterIsValidChar;
private static bool IsValidChar(Func<TMPro.TMP_InputField,  char, bool> orig, TMPro.TMP_InputField self,  char c)
{
Delegates.Params_IsValidChar @params = new() 
{
self = self
, c = c
};
if (_beforeIsValidChar != null)
{
foreach (Delegates.IsValidChar_BeforeArgs toInvoke in _beforeIsValidChar.GetInvocationList())
{
try
{
_beforeIsValidChar?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
c = @params.c;
var retVal = orig(self, c);
if (_afterIsValidChar != null)
{
foreach (Delegates.IsValidChar_AfterArgs toInvoke in _afterIsValidChar.GetInvocationList())
{
try
{
retVal = _afterIsValidChar.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookProcessEvent()
{
if (!HookedList.Contains("ProcessEvent"))
{
HookedList.Add("ProcessEvent");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ProcessEvent", true), ProcessEvent);

}
}
internal static event Delegates.ProcessEvent_BeforeArgs _beforeProcessEvent;
internal static event Delegates.ProcessEvent_AfterArgs _afterProcessEvent;
private static void ProcessEvent(Action<TMPro.TMP_InputField,  UnityEngine.Event> orig, TMPro.TMP_InputField self,  UnityEngine.Event e)
{
Delegates.Params_ProcessEvent @params = new() 
{
self = self
, e = e
};
if (_beforeProcessEvent != null)
{
foreach (Delegates.ProcessEvent_BeforeArgs toInvoke in _beforeProcessEvent.GetInvocationList())
{
try
{
_beforeProcessEvent?.Invoke(@params);
}
catch (Exception ex) 
{ HKMirrorMod.DoLogError(ex);
}
}
}
self = @params.self;
e = @params.e;
orig(self, e);
if (_afterProcessEvent != null)
{
foreach (Delegates.ProcessEvent_AfterArgs toInvoke in _afterProcessEvent.GetInvocationList())
{
try
{
_afterProcessEvent.Invoke(@params);
}
catch (Exception ex) 
{ HKMirrorMod.DoLogError(ex);
}
}
}
}
internal static void HookOnUpdateSelected()
{
if (!HookedList.Contains("OnUpdateSelected"))
{
HookedList.Add("OnUpdateSelected");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnUpdateSelected", true), OnUpdateSelected);

}
}
internal static event Delegates.OnUpdateSelected_BeforeArgs _beforeOnUpdateSelected;
internal static event Delegates.OnUpdateSelected_AfterArgs _afterOnUpdateSelected;
private static void OnUpdateSelected(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnUpdateSelected @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnUpdateSelected != null)
{
foreach (Delegates.OnUpdateSelected_BeforeArgs toInvoke in _beforeOnUpdateSelected.GetInvocationList())
{
try
{
_beforeOnUpdateSelected?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnUpdateSelected != null)
{
foreach (Delegates.OnUpdateSelected_AfterArgs toInvoke in _afterOnUpdateSelected.GetInvocationList())
{
try
{
_afterOnUpdateSelected.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetSelectedString()
{
if (!HookedList.Contains("GetSelectedString"))
{
HookedList.Add("GetSelectedString");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetSelectedString", true), GetSelectedString);

}
}
internal static event Delegates.GetSelectedString_BeforeArgs _beforeGetSelectedString;
internal static event Delegates.GetSelectedString_AfterArgs _afterGetSelectedString;
private static string GetSelectedString(Func<TMPro.TMP_InputField, string> orig, TMPro.TMP_InputField self)
{
Delegates.Params_GetSelectedString @params = new() 
{
self = self
};
if (_beforeGetSelectedString != null)
{
foreach (Delegates.GetSelectedString_BeforeArgs toInvoke in _beforeGetSelectedString.GetInvocationList())
{
try
{
_beforeGetSelectedString?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetSelectedString != null)
{
foreach (Delegates.GetSelectedString_AfterArgs toInvoke in _afterGetSelectedString.GetInvocationList())
{
try
{
retVal = _afterGetSelectedString.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookFindtNextWordBegin()
{
if (!HookedList.Contains("FindtNextWordBegin"))
{
HookedList.Add("FindtNextWordBegin");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "FindtNextWordBegin", true), FindtNextWordBegin);

}
}
internal static event Delegates.FindtNextWordBegin_BeforeArgs _beforeFindtNextWordBegin;
internal static event Delegates.FindtNextWordBegin_AfterArgs _afterFindtNextWordBegin;
private static int FindtNextWordBegin(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_FindtNextWordBegin @params = new() 
{
self = self
};
if (_beforeFindtNextWordBegin != null)
{
foreach (Delegates.FindtNextWordBegin_BeforeArgs toInvoke in _beforeFindtNextWordBegin.GetInvocationList())
{
try
{
_beforeFindtNextWordBegin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterFindtNextWordBegin != null)
{
foreach (Delegates.FindtNextWordBegin_AfterArgs toInvoke in _afterFindtNextWordBegin.GetInvocationList())
{
try
{
retVal = _afterFindtNextWordBegin.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookMoveRight()
{
if (!HookedList.Contains("MoveRight"))
{
HookedList.Add("MoveRight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveRight", true), MoveRight);

}
}
internal static event Delegates.MoveRight_BeforeArgs _beforeMoveRight;
internal static event Delegates.MoveRight_AfterArgs _afterMoveRight;
private static void MoveRight(Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool ctrl)
{
Delegates.Params_MoveRight @params = new() 
{
self = self
, shift = shift
, ctrl = ctrl
};
if (_beforeMoveRight != null)
{
foreach (Delegates.MoveRight_BeforeArgs toInvoke in _beforeMoveRight.GetInvocationList())
{
try
{
_beforeMoveRight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
ctrl = @params.ctrl;
orig(self, shift, ctrl);
if (_afterMoveRight != null)
{
foreach (Delegates.MoveRight_AfterArgs toInvoke in _afterMoveRight.GetInvocationList())
{
try
{
_afterMoveRight.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFindtPrevWordBegin()
{
if (!HookedList.Contains("FindtPrevWordBegin"))
{
HookedList.Add("FindtPrevWordBegin");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "FindtPrevWordBegin", true), FindtPrevWordBegin);

}
}
internal static event Delegates.FindtPrevWordBegin_BeforeArgs _beforeFindtPrevWordBegin;
internal static event Delegates.FindtPrevWordBegin_AfterArgs _afterFindtPrevWordBegin;
private static int FindtPrevWordBegin(Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self)
{
Delegates.Params_FindtPrevWordBegin @params = new() 
{
self = self
};
if (_beforeFindtPrevWordBegin != null)
{
foreach (Delegates.FindtPrevWordBegin_BeforeArgs toInvoke in _beforeFindtPrevWordBegin.GetInvocationList())
{
try
{
_beforeFindtPrevWordBegin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterFindtPrevWordBegin != null)
{
foreach (Delegates.FindtPrevWordBegin_AfterArgs toInvoke in _afterFindtPrevWordBegin.GetInvocationList())
{
try
{
retVal = _afterFindtPrevWordBegin.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookMoveLeft()
{
if (!HookedList.Contains("MoveLeft"))
{
HookedList.Add("MoveLeft");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveLeft", true), MoveLeft);

}
}
internal static event Delegates.MoveLeft_BeforeArgs _beforeMoveLeft;
internal static event Delegates.MoveLeft_AfterArgs _afterMoveLeft;
private static void MoveLeft(Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool ctrl)
{
Delegates.Params_MoveLeft @params = new() 
{
self = self
, shift = shift
, ctrl = ctrl
};
if (_beforeMoveLeft != null)
{
foreach (Delegates.MoveLeft_BeforeArgs toInvoke in _beforeMoveLeft.GetInvocationList())
{
try
{
_beforeMoveLeft?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
ctrl = @params.ctrl;
orig(self, shift, ctrl);
if (_afterMoveLeft != null)
{
foreach (Delegates.MoveLeft_AfterArgs toInvoke in _afterMoveLeft.GetInvocationList())
{
try
{
_afterMoveLeft.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLineUpCharacterPosition()
{
if (!HookedList.Contains("LineUpCharacterPosition"))
{
HookedList.Add("LineUpCharacterPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LineUpCharacterPosition", true), LineUpCharacterPosition);

}
}
internal static event Delegates.LineUpCharacterPosition_BeforeArgs _beforeLineUpCharacterPosition;
internal static event Delegates.LineUpCharacterPosition_AfterArgs _afterLineUpCharacterPosition;
private static int LineUpCharacterPosition(Func<TMPro.TMP_InputField,  int,  bool, int> orig, TMPro.TMP_InputField self,  int originalPos,  bool goToFirstChar)
{
Delegates.Params_LineUpCharacterPosition @params = new() 
{
self = self
, originalPos = originalPos
, goToFirstChar = goToFirstChar
};
if (_beforeLineUpCharacterPosition != null)
{
foreach (Delegates.LineUpCharacterPosition_BeforeArgs toInvoke in _beforeLineUpCharacterPosition.GetInvocationList())
{
try
{
_beforeLineUpCharacterPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
originalPos = @params.originalPos;
goToFirstChar = @params.goToFirstChar;
var retVal = orig(self, originalPos, goToFirstChar);
if (_afterLineUpCharacterPosition != null)
{
foreach (Delegates.LineUpCharacterPosition_AfterArgs toInvoke in _afterLineUpCharacterPosition.GetInvocationList())
{
try
{
retVal = _afterLineUpCharacterPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookLineDownCharacterPosition()
{
if (!HookedList.Contains("LineDownCharacterPosition"))
{
HookedList.Add("LineDownCharacterPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LineDownCharacterPosition", true), LineDownCharacterPosition);

}
}
internal static event Delegates.LineDownCharacterPosition_BeforeArgs _beforeLineDownCharacterPosition;
internal static event Delegates.LineDownCharacterPosition_AfterArgs _afterLineDownCharacterPosition;
private static int LineDownCharacterPosition(Func<TMPro.TMP_InputField,  int,  bool, int> orig, TMPro.TMP_InputField self,  int originalPos,  bool goToLastChar)
{
Delegates.Params_LineDownCharacterPosition @params = new() 
{
self = self
, originalPos = originalPos
, goToLastChar = goToLastChar
};
if (_beforeLineDownCharacterPosition != null)
{
foreach (Delegates.LineDownCharacterPosition_BeforeArgs toInvoke in _beforeLineDownCharacterPosition.GetInvocationList())
{
try
{
_beforeLineDownCharacterPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
originalPos = @params.originalPos;
goToLastChar = @params.goToLastChar;
var retVal = orig(self, originalPos, goToLastChar);
if (_afterLineDownCharacterPosition != null)
{
foreach (Delegates.LineDownCharacterPosition_AfterArgs toInvoke in _afterLineDownCharacterPosition.GetInvocationList())
{
try
{
retVal = _afterLineDownCharacterPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookMoveDown_bool()
{
if (!HookedList.Contains("MoveDown_bool"))
{
HookedList.Add("MoveDown_bool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveDown_bool", true), MoveDown_bool);

}
}
internal static event Delegates.MoveDown_bool_BeforeArgs _beforeMoveDown_bool;
internal static event Delegates.MoveDown_bool_AfterArgs _afterMoveDown_bool;
private static void MoveDown_bool(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift)
{
Delegates.Params_MoveDown_bool @params = new() 
{
self = self
, shift = shift
};
if (_beforeMoveDown_bool != null)
{
foreach (Delegates.MoveDown_bool_BeforeArgs toInvoke in _beforeMoveDown_bool.GetInvocationList())
{
try
{
_beforeMoveDown_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
orig(self, shift);
if (_afterMoveDown_bool != null)
{
foreach (Delegates.MoveDown_bool_AfterArgs toInvoke in _afterMoveDown_bool.GetInvocationList())
{
try
{
_afterMoveDown_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMoveDown_bool_bool()
{
if (!HookedList.Contains("MoveDown_bool_bool"))
{
HookedList.Add("MoveDown_bool_bool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveDown_bool_bool", true), MoveDown_bool_bool);

}
}
internal static event Delegates.MoveDown_bool_bool_BeforeArgs _beforeMoveDown_bool_bool;
internal static event Delegates.MoveDown_bool_bool_AfterArgs _afterMoveDown_bool_bool;
private static void MoveDown_bool_bool(Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool goToLastChar)
{
Delegates.Params_MoveDown_bool_bool @params = new() 
{
self = self
, shift = shift
, goToLastChar = goToLastChar
};
if (_beforeMoveDown_bool_bool != null)
{
foreach (Delegates.MoveDown_bool_bool_BeforeArgs toInvoke in _beforeMoveDown_bool_bool.GetInvocationList())
{
try
{
_beforeMoveDown_bool_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
goToLastChar = @params.goToLastChar;
orig(self, shift, goToLastChar);
if (_afterMoveDown_bool_bool != null)
{
foreach (Delegates.MoveDown_bool_bool_AfterArgs toInvoke in _afterMoveDown_bool_bool.GetInvocationList())
{
try
{
_afterMoveDown_bool_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMoveUp_bool()
{
if (!HookedList.Contains("MoveUp_bool"))
{
HookedList.Add("MoveUp_bool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveUp_bool", true), MoveUp_bool);

}
}
internal static event Delegates.MoveUp_bool_BeforeArgs _beforeMoveUp_bool;
internal static event Delegates.MoveUp_bool_AfterArgs _afterMoveUp_bool;
private static void MoveUp_bool(Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift)
{
Delegates.Params_MoveUp_bool @params = new() 
{
self = self
, shift = shift
};
if (_beforeMoveUp_bool != null)
{
foreach (Delegates.MoveUp_bool_BeforeArgs toInvoke in _beforeMoveUp_bool.GetInvocationList())
{
try
{
_beforeMoveUp_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
orig(self, shift);
if (_afterMoveUp_bool != null)
{
foreach (Delegates.MoveUp_bool_AfterArgs toInvoke in _afterMoveUp_bool.GetInvocationList())
{
try
{
_afterMoveUp_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMoveUp_bool_bool()
{
if (!HookedList.Contains("MoveUp_bool_bool"))
{
HookedList.Add("MoveUp_bool_bool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveUp_bool_bool", true), MoveUp_bool_bool);

}
}
internal static event Delegates.MoveUp_bool_bool_BeforeArgs _beforeMoveUp_bool_bool;
internal static event Delegates.MoveUp_bool_bool_AfterArgs _afterMoveUp_bool_bool;
private static void MoveUp_bool_bool(Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool goToFirstChar)
{
Delegates.Params_MoveUp_bool_bool @params = new() 
{
self = self
, shift = shift
, goToFirstChar = goToFirstChar
};
if (_beforeMoveUp_bool_bool != null)
{
foreach (Delegates.MoveUp_bool_bool_BeforeArgs toInvoke in _beforeMoveUp_bool_bool.GetInvocationList())
{
try
{
_beforeMoveUp_bool_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
shift = @params.shift;
goToFirstChar = @params.goToFirstChar;
orig(self, shift, goToFirstChar);
if (_afterMoveUp_bool_bool != null)
{
foreach (Delegates.MoveUp_bool_bool_AfterArgs toInvoke in _afterMoveUp_bool_bool.GetInvocationList())
{
try
{
_afterMoveUp_bool_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDelete()
{
if (!HookedList.Contains("Delete"))
{
HookedList.Add("Delete");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Delete", true), Delete);

}
}
internal static event Delegates.Delete_BeforeArgs _beforeDelete;
internal static event Delegates.Delete_AfterArgs _afterDelete;
private static void Delete(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_Delete @params = new() 
{
self = self
};
if (_beforeDelete != null)
{
foreach (Delegates.Delete_BeforeArgs toInvoke in _beforeDelete.GetInvocationList())
{
try
{
_beforeDelete?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDelete != null)
{
foreach (Delegates.Delete_AfterArgs toInvoke in _afterDelete.GetInvocationList())
{
try
{
_afterDelete.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookForwardSpace()
{
if (!HookedList.Contains("ForwardSpace"))
{
HookedList.Add("ForwardSpace");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ForwardSpace", true), ForwardSpace);

}
}
internal static event Delegates.ForwardSpace_BeforeArgs _beforeForwardSpace;
internal static event Delegates.ForwardSpace_AfterArgs _afterForwardSpace;
private static void ForwardSpace(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_ForwardSpace @params = new() 
{
self = self
};
if (_beforeForwardSpace != null)
{
foreach (Delegates.ForwardSpace_BeforeArgs toInvoke in _beforeForwardSpace.GetInvocationList())
{
try
{
_beforeForwardSpace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterForwardSpace != null)
{
foreach (Delegates.ForwardSpace_AfterArgs toInvoke in _afterForwardSpace.GetInvocationList())
{
try
{
_afterForwardSpace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackspace()
{
if (!HookedList.Contains("Backspace"))
{
HookedList.Add("Backspace");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Backspace", true), Backspace);

}
}
internal static event Delegates.Backspace_BeforeArgs _beforeBackspace;
internal static event Delegates.Backspace_AfterArgs _afterBackspace;
private static void Backspace(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_Backspace @params = new() 
{
self = self
};
if (_beforeBackspace != null)
{
foreach (Delegates.Backspace_BeforeArgs toInvoke in _beforeBackspace.GetInvocationList())
{
try
{
_beforeBackspace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBackspace != null)
{
foreach (Delegates.Backspace_AfterArgs toInvoke in _afterBackspace.GetInvocationList())
{
try
{
_afterBackspace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookInsert()
{
if (!HookedList.Contains("Insert"))
{
HookedList.Add("Insert");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Insert", true), Insert);

}
}
internal static event Delegates.Insert_BeforeArgs _beforeInsert;
internal static event Delegates.Insert_AfterArgs _afterInsert;
private static void Insert(Action<TMPro.TMP_InputField,  char> orig, TMPro.TMP_InputField self,  char c)
{
Delegates.Params_Insert @params = new() 
{
self = self
, c = c
};
if (_beforeInsert != null)
{
foreach (Delegates.Insert_BeforeArgs toInvoke in _beforeInsert.GetInvocationList())
{
try
{
_beforeInsert?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
c = @params.c;
orig(self, c);
if (_afterInsert != null)
{
foreach (Delegates.Insert_AfterArgs toInvoke in _afterInsert.GetInvocationList())
{
try
{
_afterInsert.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendOnValueChangedAndUpdateLabel()
{
if (!HookedList.Contains("SendOnValueChangedAndUpdateLabel"))
{
HookedList.Add("SendOnValueChangedAndUpdateLabel");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnValueChangedAndUpdateLabel", true), SendOnValueChangedAndUpdateLabel);

}
}
internal static event Delegates.SendOnValueChangedAndUpdateLabel_BeforeArgs _beforeSendOnValueChangedAndUpdateLabel;
internal static event Delegates.SendOnValueChangedAndUpdateLabel_AfterArgs _afterSendOnValueChangedAndUpdateLabel;
private static void SendOnValueChangedAndUpdateLabel(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SendOnValueChangedAndUpdateLabel @params = new() 
{
self = self
};
if (_beforeSendOnValueChangedAndUpdateLabel != null)
{
foreach (Delegates.SendOnValueChangedAndUpdateLabel_BeforeArgs toInvoke in _beforeSendOnValueChangedAndUpdateLabel.GetInvocationList())
{
try
{
_beforeSendOnValueChangedAndUpdateLabel?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendOnValueChangedAndUpdateLabel != null)
{
foreach (Delegates.SendOnValueChangedAndUpdateLabel_AfterArgs toInvoke in _afterSendOnValueChangedAndUpdateLabel.GetInvocationList())
{
try
{
_afterSendOnValueChangedAndUpdateLabel.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendOnValueChanged()
{
if (!HookedList.Contains("SendOnValueChanged"))
{
HookedList.Add("SendOnValueChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnValueChanged", true), SendOnValueChanged);

}
}
internal static event Delegates.SendOnValueChanged_BeforeArgs _beforeSendOnValueChanged;
internal static event Delegates.SendOnValueChanged_AfterArgs _afterSendOnValueChanged;
private static void SendOnValueChanged(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SendOnValueChanged @params = new() 
{
self = self
};
if (_beforeSendOnValueChanged != null)
{
foreach (Delegates.SendOnValueChanged_BeforeArgs toInvoke in _beforeSendOnValueChanged.GetInvocationList())
{
try
{
_beforeSendOnValueChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendOnValueChanged != null)
{
foreach (Delegates.SendOnValueChanged_AfterArgs toInvoke in _afterSendOnValueChanged.GetInvocationList())
{
try
{
_afterSendOnValueChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendOnSubmit()
{
if (!HookedList.Contains("SendOnSubmit"))
{
HookedList.Add("SendOnSubmit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnSubmit", true), SendOnSubmit);

}
}
internal static event Delegates.SendOnSubmit_BeforeArgs _beforeSendOnSubmit;
internal static event Delegates.SendOnSubmit_AfterArgs _afterSendOnSubmit;
private static void SendOnSubmit(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SendOnSubmit @params = new() 
{
self = self
};
if (_beforeSendOnSubmit != null)
{
foreach (Delegates.SendOnSubmit_BeforeArgs toInvoke in _beforeSendOnSubmit.GetInvocationList())
{
try
{
_beforeSendOnSubmit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendOnSubmit != null)
{
foreach (Delegates.SendOnSubmit_AfterArgs toInvoke in _afterSendOnSubmit.GetInvocationList())
{
try
{
_afterSendOnSubmit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSendOnFocusLost()
{
if (!HookedList.Contains("SendOnFocusLost"))
{
HookedList.Add("SendOnFocusLost");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnFocusLost", true), SendOnFocusLost);

}
}
internal static event Delegates.SendOnFocusLost_BeforeArgs _beforeSendOnFocusLost;
internal static event Delegates.SendOnFocusLost_AfterArgs _afterSendOnFocusLost;
private static void SendOnFocusLost(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SendOnFocusLost @params = new() 
{
self = self
};
if (_beforeSendOnFocusLost != null)
{
foreach (Delegates.SendOnFocusLost_BeforeArgs toInvoke in _beforeSendOnFocusLost.GetInvocationList())
{
try
{
_beforeSendOnFocusLost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSendOnFocusLost != null)
{
foreach (Delegates.SendOnFocusLost_AfterArgs toInvoke in _afterSendOnFocusLost.GetInvocationList())
{
try
{
_afterSendOnFocusLost.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAppend_string()
{
if (!HookedList.Contains("Append_string"))
{
HookedList.Add("Append_string");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Append_string", true), Append_string);

}
}
internal static event Delegates.Append_string_BeforeArgs _beforeAppend_string;
internal static event Delegates.Append_string_AfterArgs _afterAppend_string;
private static void Append_string(Action<TMPro.TMP_InputField,  string> orig, TMPro.TMP_InputField self,  string input)
{
Delegates.Params_Append_string @params = new() 
{
self = self
, input = input
};
if (_beforeAppend_string != null)
{
foreach (Delegates.Append_string_BeforeArgs toInvoke in _beforeAppend_string.GetInvocationList())
{
try
{
_beforeAppend_string?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
input = @params.input;
orig(self, input);
if (_afterAppend_string != null)
{
foreach (Delegates.Append_string_AfterArgs toInvoke in _afterAppend_string.GetInvocationList())
{
try
{
_afterAppend_string.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAppend_Char()
{
if (!HookedList.Contains("Append_Char"))
{
HookedList.Add("Append_Char");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Append_Char", true), Append_Char);

}
}
internal static event Delegates.Append_Char_BeforeArgs _beforeAppend_Char;
internal static event Delegates.Append_Char_AfterArgs _afterAppend_Char;
private static void Append_Char(Action<TMPro.TMP_InputField,  char> orig, TMPro.TMP_InputField self,  char input)
{
Delegates.Params_Append_Char @params = new() 
{
self = self
, input = input
};
if (_beforeAppend_Char != null)
{
foreach (Delegates.Append_Char_BeforeArgs toInvoke in _beforeAppend_Char.GetInvocationList())
{
try
{
_beforeAppend_Char?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
input = @params.input;
orig(self, input);
if (_afterAppend_Char != null)
{
foreach (Delegates.Append_Char_AfterArgs toInvoke in _afterAppend_Char.GetInvocationList())
{
try
{
_afterAppend_Char.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateLabel()
{
if (!HookedList.Contains("UpdateLabel"))
{
HookedList.Add("UpdateLabel");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UpdateLabel", true), UpdateLabel);

}
}
internal static event Delegates.UpdateLabel_BeforeArgs _beforeUpdateLabel;
internal static event Delegates.UpdateLabel_AfterArgs _afterUpdateLabel;
private static void UpdateLabel(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_UpdateLabel @params = new() 
{
self = self
};
if (_beforeUpdateLabel != null)
{
foreach (Delegates.UpdateLabel_BeforeArgs toInvoke in _beforeUpdateLabel.GetInvocationList())
{
try
{
_beforeUpdateLabel?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateLabel != null)
{
foreach (Delegates.UpdateLabel_AfterArgs toInvoke in _afterUpdateLabel.GetInvocationList())
{
try
{
_afterUpdateLabel.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetCaretPositionFromStringIndex()
{
if (!HookedList.Contains("GetCaretPositionFromStringIndex"))
{
HookedList.Add("GetCaretPositionFromStringIndex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetCaretPositionFromStringIndex", true), GetCaretPositionFromStringIndex);

}
}
internal static event Delegates.GetCaretPositionFromStringIndex_BeforeArgs _beforeGetCaretPositionFromStringIndex;
internal static event Delegates.GetCaretPositionFromStringIndex_AfterArgs _afterGetCaretPositionFromStringIndex;
private static int GetCaretPositionFromStringIndex(Func<TMPro.TMP_InputField,  int, int> orig, TMPro.TMP_InputField self,  int stringIndex)
{
Delegates.Params_GetCaretPositionFromStringIndex @params = new() 
{
self = self
, stringIndex = stringIndex
};
if (_beforeGetCaretPositionFromStringIndex != null)
{
foreach (Delegates.GetCaretPositionFromStringIndex_BeforeArgs toInvoke in _beforeGetCaretPositionFromStringIndex.GetInvocationList())
{
try
{
_beforeGetCaretPositionFromStringIndex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
stringIndex = @params.stringIndex;
var retVal = orig(self, stringIndex);
if (_afterGetCaretPositionFromStringIndex != null)
{
foreach (Delegates.GetCaretPositionFromStringIndex_AfterArgs toInvoke in _afterGetCaretPositionFromStringIndex.GetInvocationList())
{
try
{
retVal = _afterGetCaretPositionFromStringIndex.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetStringIndexFromCaretPosition()
{
if (!HookedList.Contains("GetStringIndexFromCaretPosition"))
{
HookedList.Add("GetStringIndexFromCaretPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetStringIndexFromCaretPosition", true), GetStringIndexFromCaretPosition);

}
}
internal static event Delegates.GetStringIndexFromCaretPosition_BeforeArgs _beforeGetStringIndexFromCaretPosition;
internal static event Delegates.GetStringIndexFromCaretPosition_AfterArgs _afterGetStringIndexFromCaretPosition;
private static int GetStringIndexFromCaretPosition(Func<TMPro.TMP_InputField,  int, int> orig, TMPro.TMP_InputField self,  int caretPosition)
{
Delegates.Params_GetStringIndexFromCaretPosition @params = new() 
{
self = self
, caretPosition = caretPosition
};
if (_beforeGetStringIndexFromCaretPosition != null)
{
foreach (Delegates.GetStringIndexFromCaretPosition_BeforeArgs toInvoke in _beforeGetStringIndexFromCaretPosition.GetInvocationList())
{
try
{
_beforeGetStringIndexFromCaretPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
caretPosition = @params.caretPosition;
var retVal = orig(self, caretPosition);
if (_afterGetStringIndexFromCaretPosition != null)
{
foreach (Delegates.GetStringIndexFromCaretPosition_AfterArgs toInvoke in _afterGetStringIndexFromCaretPosition.GetInvocationList())
{
try
{
retVal = _afterGetStringIndexFromCaretPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookForceLabelUpdate()
{
if (!HookedList.Contains("ForceLabelUpdate"))
{
HookedList.Add("ForceLabelUpdate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ForceLabelUpdate", true), ForceLabelUpdate);

}
}
internal static event Delegates.ForceLabelUpdate_BeforeArgs _beforeForceLabelUpdate;
internal static event Delegates.ForceLabelUpdate_AfterArgs _afterForceLabelUpdate;
private static void ForceLabelUpdate(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_ForceLabelUpdate @params = new() 
{
self = self
};
if (_beforeForceLabelUpdate != null)
{
foreach (Delegates.ForceLabelUpdate_BeforeArgs toInvoke in _beforeForceLabelUpdate.GetInvocationList())
{
try
{
_beforeForceLabelUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterForceLabelUpdate != null)
{
foreach (Delegates.ForceLabelUpdate_AfterArgs toInvoke in _afterForceLabelUpdate.GetInvocationList())
{
try
{
_afterForceLabelUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMarkGeometryAsDirty()
{
if (!HookedList.Contains("MarkGeometryAsDirty"))
{
HookedList.Add("MarkGeometryAsDirty");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MarkGeometryAsDirty", true), MarkGeometryAsDirty);

}
}
internal static event Delegates.MarkGeometryAsDirty_BeforeArgs _beforeMarkGeometryAsDirty;
internal static event Delegates.MarkGeometryAsDirty_AfterArgs _afterMarkGeometryAsDirty;
private static void MarkGeometryAsDirty(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_MarkGeometryAsDirty @params = new() 
{
self = self
};
if (_beforeMarkGeometryAsDirty != null)
{
foreach (Delegates.MarkGeometryAsDirty_BeforeArgs toInvoke in _beforeMarkGeometryAsDirty.GetInvocationList())
{
try
{
_beforeMarkGeometryAsDirty?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterMarkGeometryAsDirty != null)
{
foreach (Delegates.MarkGeometryAsDirty_AfterArgs toInvoke in _afterMarkGeometryAsDirty.GetInvocationList())
{
try
{
_afterMarkGeometryAsDirty.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRebuild()
{
if (!HookedList.Contains("Rebuild"))
{
HookedList.Add("Rebuild");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Rebuild", true), Rebuild);

}
}
internal static event Delegates.Rebuild_BeforeArgs _beforeRebuild;
internal static event Delegates.Rebuild_AfterArgs _afterRebuild;
private static void Rebuild(Action<TMPro.TMP_InputField,  UnityEngine.UI.CanvasUpdate> orig, TMPro.TMP_InputField self,  UnityEngine.UI.CanvasUpdate update)
{
Delegates.Params_Rebuild @params = new() 
{
self = self
, update = update
};
if (_beforeRebuild != null)
{
foreach (Delegates.Rebuild_BeforeArgs toInvoke in _beforeRebuild.GetInvocationList())
{
try
{
_beforeRebuild?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
update = @params.update;
orig(self, update);
if (_afterRebuild != null)
{
foreach (Delegates.Rebuild_AfterArgs toInvoke in _afterRebuild.GetInvocationList())
{
try
{
_afterRebuild.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLayoutComplete()
{
if (!HookedList.Contains("LayoutComplete"))
{
HookedList.Add("LayoutComplete");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LayoutComplete", true), LayoutComplete);

}
}
internal static event Delegates.LayoutComplete_BeforeArgs _beforeLayoutComplete;
internal static event Delegates.LayoutComplete_AfterArgs _afterLayoutComplete;
private static void LayoutComplete(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_LayoutComplete @params = new() 
{
self = self
};
if (_beforeLayoutComplete != null)
{
foreach (Delegates.LayoutComplete_BeforeArgs toInvoke in _beforeLayoutComplete.GetInvocationList())
{
try
{
_beforeLayoutComplete?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLayoutComplete != null)
{
foreach (Delegates.LayoutComplete_AfterArgs toInvoke in _afterLayoutComplete.GetInvocationList())
{
try
{
_afterLayoutComplete.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGraphicUpdateComplete()
{
if (!HookedList.Contains("GraphicUpdateComplete"))
{
HookedList.Add("GraphicUpdateComplete");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GraphicUpdateComplete", true), GraphicUpdateComplete);

}
}
internal static event Delegates.GraphicUpdateComplete_BeforeArgs _beforeGraphicUpdateComplete;
internal static event Delegates.GraphicUpdateComplete_AfterArgs _afterGraphicUpdateComplete;
private static void GraphicUpdateComplete(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_GraphicUpdateComplete @params = new() 
{
self = self
};
if (_beforeGraphicUpdateComplete != null)
{
foreach (Delegates.GraphicUpdateComplete_BeforeArgs toInvoke in _beforeGraphicUpdateComplete.GetInvocationList())
{
try
{
_beforeGraphicUpdateComplete?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterGraphicUpdateComplete != null)
{
foreach (Delegates.GraphicUpdateComplete_AfterArgs toInvoke in _afterGraphicUpdateComplete.GetInvocationList())
{
try
{
_afterGraphicUpdateComplete.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateGeometry()
{
if (!HookedList.Contains("UpdateGeometry"))
{
HookedList.Add("UpdateGeometry");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UpdateGeometry", true), UpdateGeometry);

}
}
internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;
private static void UpdateGeometry(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_UpdateGeometry @params = new() 
{
self = self
};
if (_beforeUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
{
try
{
_beforeUpdateGeometry?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
{
try
{
_afterUpdateGeometry.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAssignPositioningIfNeeded()
{
if (!HookedList.Contains("AssignPositioningIfNeeded"))
{
HookedList.Add("AssignPositioningIfNeeded");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "AssignPositioningIfNeeded", true), AssignPositioningIfNeeded);

}
}
internal static event Delegates.AssignPositioningIfNeeded_BeforeArgs _beforeAssignPositioningIfNeeded;
internal static event Delegates.AssignPositioningIfNeeded_AfterArgs _afterAssignPositioningIfNeeded;
private static void AssignPositioningIfNeeded(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_AssignPositioningIfNeeded @params = new() 
{
self = self
};
if (_beforeAssignPositioningIfNeeded != null)
{
foreach (Delegates.AssignPositioningIfNeeded_BeforeArgs toInvoke in _beforeAssignPositioningIfNeeded.GetInvocationList())
{
try
{
_beforeAssignPositioningIfNeeded?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAssignPositioningIfNeeded != null)
{
foreach (Delegates.AssignPositioningIfNeeded_AfterArgs toInvoke in _afterAssignPositioningIfNeeded.GetInvocationList())
{
try
{
_afterAssignPositioningIfNeeded.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnFillVBO()
{
if (!HookedList.Contains("OnFillVBO"))
{
HookedList.Add("OnFillVBO");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnFillVBO", true), OnFillVBO);

}
}
internal static event Delegates.OnFillVBO_BeforeArgs _beforeOnFillVBO;
internal static event Delegates.OnFillVBO_AfterArgs _afterOnFillVBO;
private static void OnFillVBO(Action<TMPro.TMP_InputField,  UnityEngine.Mesh> orig, TMPro.TMP_InputField self,  UnityEngine.Mesh vbo)
{
Delegates.Params_OnFillVBO @params = new() 
{
self = self
, vbo = vbo
};
if (_beforeOnFillVBO != null)
{
foreach (Delegates.OnFillVBO_BeforeArgs toInvoke in _beforeOnFillVBO.GetInvocationList())
{
try
{
_beforeOnFillVBO?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vbo = @params.vbo;
orig(self, vbo);
if (_afterOnFillVBO != null)
{
foreach (Delegates.OnFillVBO_AfterArgs toInvoke in _afterOnFillVBO.GetInvocationList())
{
try
{
_afterOnFillVBO.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGenerateCaret()
{
if (!HookedList.Contains("GenerateCaret"))
{
HookedList.Add("GenerateCaret");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GenerateCaret", true), GenerateCaret);

}
}
internal static event Delegates.GenerateCaret_BeforeArgs _beforeGenerateCaret;
internal static event Delegates.GenerateCaret_AfterArgs _afterGenerateCaret;
private static void GenerateCaret(Action<TMPro.TMP_InputField,  UnityEngine.UI.VertexHelper,  UnityEngine.Vector2> orig, TMPro.TMP_InputField self,  UnityEngine.UI.VertexHelper vbo,  UnityEngine.Vector2 roundingOffset)
{
Delegates.Params_GenerateCaret @params = new() 
{
self = self
, vbo = vbo
, roundingOffset = roundingOffset
};
if (_beforeGenerateCaret != null)
{
foreach (Delegates.GenerateCaret_BeforeArgs toInvoke in _beforeGenerateCaret.GetInvocationList())
{
try
{
_beforeGenerateCaret?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vbo = @params.vbo;
roundingOffset = @params.roundingOffset;
orig(self, vbo, roundingOffset);
if (_afterGenerateCaret != null)
{
foreach (Delegates.GenerateCaret_AfterArgs toInvoke in _afterGenerateCaret.GetInvocationList())
{
try
{
_afterGenerateCaret.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateCursorVerts()
{
if (!HookedList.Contains("CreateCursorVerts"))
{
HookedList.Add("CreateCursorVerts");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "CreateCursorVerts", true), CreateCursorVerts);

}
}
internal static event Delegates.CreateCursorVerts_BeforeArgs _beforeCreateCursorVerts;
internal static event Delegates.CreateCursorVerts_AfterArgs _afterCreateCursorVerts;
private static void CreateCursorVerts(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_CreateCursorVerts @params = new() 
{
self = self
};
if (_beforeCreateCursorVerts != null)
{
foreach (Delegates.CreateCursorVerts_BeforeArgs toInvoke in _beforeCreateCursorVerts.GetInvocationList())
{
try
{
_beforeCreateCursorVerts?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateCursorVerts != null)
{
foreach (Delegates.CreateCursorVerts_AfterArgs toInvoke in _afterCreateCursorVerts.GetInvocationList())
{
try
{
_afterCreateCursorVerts.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGenerateHightlight()
{
if (!HookedList.Contains("GenerateHightlight"))
{
HookedList.Add("GenerateHightlight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GenerateHightlight", true), GenerateHightlight);

}
}
internal static event Delegates.GenerateHightlight_BeforeArgs _beforeGenerateHightlight;
internal static event Delegates.GenerateHightlight_AfterArgs _afterGenerateHightlight;
private static void GenerateHightlight(Action<TMPro.TMP_InputField,  UnityEngine.UI.VertexHelper,  UnityEngine.Vector2> orig, TMPro.TMP_InputField self,  UnityEngine.UI.VertexHelper vbo,  UnityEngine.Vector2 roundingOffset)
{
Delegates.Params_GenerateHightlight @params = new() 
{
self = self
, vbo = vbo
, roundingOffset = roundingOffset
};
if (_beforeGenerateHightlight != null)
{
foreach (Delegates.GenerateHightlight_BeforeArgs toInvoke in _beforeGenerateHightlight.GetInvocationList())
{
try
{
_beforeGenerateHightlight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vbo = @params.vbo;
roundingOffset = @params.roundingOffset;
orig(self, vbo, roundingOffset);
if (_afterGenerateHightlight != null)
{
foreach (Delegates.GenerateHightlight_AfterArgs toInvoke in _afterGenerateHightlight.GetInvocationList())
{
try
{
_afterGenerateHightlight.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAdjustRectTransformRelativeToViewport()
{
if (!HookedList.Contains("AdjustRectTransformRelativeToViewport"))
{
HookedList.Add("AdjustRectTransformRelativeToViewport");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "AdjustRectTransformRelativeToViewport", true), AdjustRectTransformRelativeToViewport);

}
}
internal static event Delegates.AdjustRectTransformRelativeToViewport_BeforeArgs _beforeAdjustRectTransformRelativeToViewport;
internal static event Delegates.AdjustRectTransformRelativeToViewport_AfterArgs _afterAdjustRectTransformRelativeToViewport;
private static void AdjustRectTransformRelativeToViewport(Action<TMPro.TMP_InputField,  UnityEngine.Vector2,  float,  bool> orig, TMPro.TMP_InputField self,  UnityEngine.Vector2 startPosition,  float height,  bool isCharVisible)
{
Delegates.Params_AdjustRectTransformRelativeToViewport @params = new() 
{
self = self
, startPosition = startPosition
, height = height
, isCharVisible = isCharVisible
};
if (_beforeAdjustRectTransformRelativeToViewport != null)
{
foreach (Delegates.AdjustRectTransformRelativeToViewport_BeforeArgs toInvoke in _beforeAdjustRectTransformRelativeToViewport.GetInvocationList())
{
try
{
_beforeAdjustRectTransformRelativeToViewport?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
startPosition = @params.startPosition;
height = @params.height;
isCharVisible = @params.isCharVisible;
orig(self, startPosition, height, isCharVisible);
if (_afterAdjustRectTransformRelativeToViewport != null)
{
foreach (Delegates.AdjustRectTransformRelativeToViewport_AfterArgs toInvoke in _afterAdjustRectTransformRelativeToViewport.GetInvocationList())
{
try
{
_afterAdjustRectTransformRelativeToViewport.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookValidate()
{
if (!HookedList.Contains("Validate"))
{
HookedList.Add("Validate");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Validate", true), Validate);

}
}
internal static event Delegates.Validate_BeforeArgs _beforeValidate;
internal static event Delegates.Validate_AfterArgs _afterValidate;
private static char Validate(Func<TMPro.TMP_InputField,  string,  int,  char, char> orig, TMPro.TMP_InputField self,  string text,  int pos,  char ch)
{
Delegates.Params_Validate @params = new() 
{
self = self
, text = text
, pos = pos
, ch = ch
};
if (_beforeValidate != null)
{
foreach (Delegates.Validate_BeforeArgs toInvoke in _beforeValidate.GetInvocationList())
{
try
{
_beforeValidate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
text = @params.text;
pos = @params.pos;
ch = @params.ch;
var retVal = orig(self, text, pos, ch);
if (_afterValidate != null)
{
foreach (Delegates.Validate_AfterArgs toInvoke in _afterValidate.GetInvocationList())
{
try
{
retVal = _afterValidate.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookActivateInputField()
{
if (!HookedList.Contains("ActivateInputField"))
{
HookedList.Add("ActivateInputField");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ActivateInputField", true), ActivateInputField);

}
}
internal static event Delegates.ActivateInputField_BeforeArgs _beforeActivateInputField;
internal static event Delegates.ActivateInputField_AfterArgs _afterActivateInputField;
private static void ActivateInputField(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_ActivateInputField @params = new() 
{
self = self
};
if (_beforeActivateInputField != null)
{
foreach (Delegates.ActivateInputField_BeforeArgs toInvoke in _beforeActivateInputField.GetInvocationList())
{
try
{
_beforeActivateInputField?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterActivateInputField != null)
{
foreach (Delegates.ActivateInputField_AfterArgs toInvoke in _afterActivateInputField.GetInvocationList())
{
try
{
_afterActivateInputField.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookActivateInputFieldInternal()
{
if (!HookedList.Contains("ActivateInputFieldInternal"))
{
HookedList.Add("ActivateInputFieldInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ActivateInputFieldInternal", true), ActivateInputFieldInternal);

}
}
internal static event Delegates.ActivateInputFieldInternal_BeforeArgs _beforeActivateInputFieldInternal;
internal static event Delegates.ActivateInputFieldInternal_AfterArgs _afterActivateInputFieldInternal;
private static void ActivateInputFieldInternal(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_ActivateInputFieldInternal @params = new() 
{
self = self
};
if (_beforeActivateInputFieldInternal != null)
{
foreach (Delegates.ActivateInputFieldInternal_BeforeArgs toInvoke in _beforeActivateInputFieldInternal.GetInvocationList())
{
try
{
_beforeActivateInputFieldInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterActivateInputFieldInternal != null)
{
foreach (Delegates.ActivateInputFieldInternal_AfterArgs toInvoke in _afterActivateInputFieldInternal.GetInvocationList())
{
try
{
_afterActivateInputFieldInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnSelect()
{
if (!HookedList.Contains("OnSelect"))
{
HookedList.Add("OnSelect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnSelect", true), OnSelect);

}
}
internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
internal static event Delegates.OnSelect_AfterArgs _afterOnSelect;
private static void OnSelect(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnSelect @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnSelect != null)
{
foreach (Delegates.OnSelect_BeforeArgs toInvoke in _beforeOnSelect.GetInvocationList())
{
try
{
_beforeOnSelect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnSelect != null)
{
foreach (Delegates.OnSelect_AfterArgs toInvoke in _afterOnSelect.GetInvocationList())
{
try
{
_afterOnSelect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPointerClick()
{
if (!HookedList.Contains("OnPointerClick"))
{
HookedList.Add("OnPointerClick");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnPointerClick", true), OnPointerClick);

}
}
internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;
private static void OnPointerClick(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerClick @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
{
try
{
_beforeOnPointerClick?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
{
try
{
_afterOnPointerClick.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDeactivateInputField()
{
if (!HookedList.Contains("DeactivateInputField"))
{
HookedList.Add("DeactivateInputField");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "DeactivateInputField", true), DeactivateInputField);

}
}
internal static event Delegates.DeactivateInputField_BeforeArgs _beforeDeactivateInputField;
internal static event Delegates.DeactivateInputField_AfterArgs _afterDeactivateInputField;
private static void DeactivateInputField(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_DeactivateInputField @params = new() 
{
self = self
};
if (_beforeDeactivateInputField != null)
{
foreach (Delegates.DeactivateInputField_BeforeArgs toInvoke in _beforeDeactivateInputField.GetInvocationList())
{
try
{
_beforeDeactivateInputField?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDeactivateInputField != null)
{
foreach (Delegates.DeactivateInputField_AfterArgs toInvoke in _afterDeactivateInputField.GetInvocationList())
{
try
{
_afterDeactivateInputField.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDeselect()
{
if (!HookedList.Contains("OnDeselect"))
{
HookedList.Add("OnDeselect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDeselect", true), OnDeselect);

}
}
internal static event Delegates.OnDeselect_BeforeArgs _beforeOnDeselect;
internal static event Delegates.OnDeselect_AfterArgs _afterOnDeselect;
private static void OnDeselect(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnDeselect @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnDeselect != null)
{
foreach (Delegates.OnDeselect_BeforeArgs toInvoke in _beforeOnDeselect.GetInvocationList())
{
try
{
_beforeOnDeselect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnDeselect != null)
{
foreach (Delegates.OnDeselect_AfterArgs toInvoke in _afterOnDeselect.GetInvocationList())
{
try
{
_afterOnDeselect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnSubmit()
{
if (!HookedList.Contains("OnSubmit"))
{
HookedList.Add("OnSubmit");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnSubmit", true), OnSubmit);

}
}
internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;
private static void OnSubmit(Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnSubmit @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnSubmit != null)
{
foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
{
try
{
_beforeOnSubmit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnSubmit != null)
{
foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
{
try
{
_afterOnSubmit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookEnforceContentType()
{
if (!HookedList.Contains("EnforceContentType"))
{
HookedList.Add("EnforceContentType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "EnforceContentType", true), EnforceContentType);

}
}
internal static event Delegates.EnforceContentType_BeforeArgs _beforeEnforceContentType;
internal static event Delegates.EnforceContentType_AfterArgs _afterEnforceContentType;
private static void EnforceContentType(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_EnforceContentType @params = new() 
{
self = self
};
if (_beforeEnforceContentType != null)
{
foreach (Delegates.EnforceContentType_BeforeArgs toInvoke in _beforeEnforceContentType.GetInvocationList())
{
try
{
_beforeEnforceContentType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterEnforceContentType != null)
{
foreach (Delegates.EnforceContentType_AfterArgs toInvoke in _afterEnforceContentType.GetInvocationList())
{
try
{
_afterEnforceContentType.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetTextComponentWrapMode()
{
if (!HookedList.Contains("SetTextComponentWrapMode"))
{
HookedList.Add("SetTextComponentWrapMode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetTextComponentWrapMode", true), SetTextComponentWrapMode);

}
}
internal static event Delegates.SetTextComponentWrapMode_BeforeArgs _beforeSetTextComponentWrapMode;
internal static event Delegates.SetTextComponentWrapMode_AfterArgs _afterSetTextComponentWrapMode;
private static void SetTextComponentWrapMode(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SetTextComponentWrapMode @params = new() 
{
self = self
};
if (_beforeSetTextComponentWrapMode != null)
{
foreach (Delegates.SetTextComponentWrapMode_BeforeArgs toInvoke in _beforeSetTextComponentWrapMode.GetInvocationList())
{
try
{
_beforeSetTextComponentWrapMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetTextComponentWrapMode != null)
{
foreach (Delegates.SetTextComponentWrapMode_AfterArgs toInvoke in _afterSetTextComponentWrapMode.GetInvocationList())
{
try
{
_afterSetTextComponentWrapMode.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetTextComponentRichTextMode()
{
if (!HookedList.Contains("SetTextComponentRichTextMode"))
{
HookedList.Add("SetTextComponentRichTextMode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetTextComponentRichTextMode", true), SetTextComponentRichTextMode);

}
}
internal static event Delegates.SetTextComponentRichTextMode_BeforeArgs _beforeSetTextComponentRichTextMode;
internal static event Delegates.SetTextComponentRichTextMode_AfterArgs _afterSetTextComponentRichTextMode;
private static void SetTextComponentRichTextMode(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SetTextComponentRichTextMode @params = new() 
{
self = self
};
if (_beforeSetTextComponentRichTextMode != null)
{
foreach (Delegates.SetTextComponentRichTextMode_BeforeArgs toInvoke in _beforeSetTextComponentRichTextMode.GetInvocationList())
{
try
{
_beforeSetTextComponentRichTextMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetTextComponentRichTextMode != null)
{
foreach (Delegates.SetTextComponentRichTextMode_AfterArgs toInvoke in _afterSetTextComponentRichTextMode.GetInvocationList())
{
try
{
_afterSetTextComponentRichTextMode.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetToCustomIfContentTypeIsNot()
{
if (!HookedList.Contains("SetToCustomIfContentTypeIsNot"))
{
HookedList.Add("SetToCustomIfContentTypeIsNot");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetToCustomIfContentTypeIsNot", true), SetToCustomIfContentTypeIsNot);

}
}
internal static event Delegates.SetToCustomIfContentTypeIsNot_BeforeArgs _beforeSetToCustomIfContentTypeIsNot;
internal static event Delegates.SetToCustomIfContentTypeIsNot_AfterArgs _afterSetToCustomIfContentTypeIsNot;
private static void SetToCustomIfContentTypeIsNot(Action<TMPro.TMP_InputField,  TMPro.TMP_InputField.ContentType[]> orig, TMPro.TMP_InputField self,  TMPro.TMP_InputField.ContentType[] allowedContentTypes)
{
Delegates.Params_SetToCustomIfContentTypeIsNot @params = new() 
{
self = self
, allowedContentTypes = allowedContentTypes
};
if (_beforeSetToCustomIfContentTypeIsNot != null)
{
foreach (Delegates.SetToCustomIfContentTypeIsNot_BeforeArgs toInvoke in _beforeSetToCustomIfContentTypeIsNot.GetInvocationList())
{
try
{
_beforeSetToCustomIfContentTypeIsNot?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
allowedContentTypes = @params.allowedContentTypes;
orig(self, allowedContentTypes);
if (_afterSetToCustomIfContentTypeIsNot != null)
{
foreach (Delegates.SetToCustomIfContentTypeIsNot_AfterArgs toInvoke in _afterSetToCustomIfContentTypeIsNot.GetInvocationList())
{
try
{
_afterSetToCustomIfContentTypeIsNot.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetToCustom()
{
if (!HookedList.Contains("SetToCustom"))
{
HookedList.Add("SetToCustom");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetToCustom", true), SetToCustom);

}
}
internal static event Delegates.SetToCustom_BeforeArgs _beforeSetToCustom;
internal static event Delegates.SetToCustom_AfterArgs _afterSetToCustom;
private static void SetToCustom(Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self)
{
Delegates.Params_SetToCustom @params = new() 
{
self = self
};
if (_beforeSetToCustom != null)
{
foreach (Delegates.SetToCustom_BeforeArgs toInvoke in _beforeSetToCustom.GetInvocationList())
{
try
{
_beforeSetToCustom?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetToCustom != null)
{
foreach (Delegates.SetToCustom_AfterArgs toInvoke in _afterSetToCustom.GetInvocationList())
{
try
{
_afterSetToCustom.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_transform()
{
if (!HookedList.Contains("get_transform"))
{
HookedList.Add("get_transform");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_transform", true), get_transform);

}
}
internal static event Delegates.get_transform_BeforeArgs _beforeget_transform;
internal static event Delegates.get_transform_AfterArgs _afterget_transform;
private static UnityEngine.Transform get_transform(Func<TMPro.TMP_InputField, UnityEngine.Transform> orig, TMPro.TMP_InputField self)
{
Delegates.Params_get_transform @params = new() 
{
self = self
};
if (_beforeget_transform != null)
{
foreach (Delegates.get_transform_BeforeArgs toInvoke in _beforeget_transform.GetInvocationList())
{
try
{
_beforeget_transform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_transform != null)
{
foreach (Delegates.get_transform_AfterArgs toInvoke in _afterget_transform.GetInvocationList())
{
try
{
retVal = _afterget_transform.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_mesh
{
public TMPro.TMP_InputField self;
}
public delegate void get_mesh_BeforeArgs(Params_get_mesh args);
public delegate UnityEngine.Mesh get_mesh_AfterArgs(Params_get_mesh args, UnityEngine.Mesh ret);
public delegate UnityEngine.Mesh get_mesh_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.Mesh> orig, TMPro.TMP_InputField self);
public sealed class Params_set_shouldHideMobileInput
{
public TMPro.TMP_InputField self;
public bool value;
}
public delegate void set_shouldHideMobileInput_BeforeArgs(Params_set_shouldHideMobileInput args);
public delegate void set_shouldHideMobileInput_AfterArgs(Params_set_shouldHideMobileInput args);
public delegate void set_shouldHideMobileInput_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value);
public sealed class Params_get_shouldHideMobileInput
{
public TMPro.TMP_InputField self;
}
public delegate void get_shouldHideMobileInput_BeforeArgs(Params_get_shouldHideMobileInput args);
public delegate bool get_shouldHideMobileInput_AfterArgs(Params_get_shouldHideMobileInput args, bool ret);
public delegate bool get_shouldHideMobileInput_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_get_text
{
public TMPro.TMP_InputField self;
}
public delegate void get_text_BeforeArgs(Params_get_text args);
public delegate string get_text_AfterArgs(Params_get_text args, string ret);
public delegate string get_text_WithArgs (Func<TMPro.TMP_InputField, string> orig, TMPro.TMP_InputField self);
public sealed class Params_set_text
{
public TMPro.TMP_InputField self;
public string value;
}
public delegate void set_text_BeforeArgs(Params_set_text args);
public delegate void set_text_AfterArgs(Params_set_text args);
public delegate void set_text_WithArgs (Action<TMPro.TMP_InputField,  string> orig, TMPro.TMP_InputField self,  string value);
public sealed class Params_get_isFocused
{
public TMPro.TMP_InputField self;
}
public delegate void get_isFocused_BeforeArgs(Params_get_isFocused args);
public delegate bool get_isFocused_AfterArgs(Params_get_isFocused args, bool ret);
public delegate bool get_isFocused_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_get_caretBlinkRate
{
public TMPro.TMP_InputField self;
}
public delegate void get_caretBlinkRate_BeforeArgs(Params_get_caretBlinkRate args);
public delegate float get_caretBlinkRate_AfterArgs(Params_get_caretBlinkRate args, float ret);
public delegate float get_caretBlinkRate_WithArgs (Func<TMPro.TMP_InputField, float> orig, TMPro.TMP_InputField self);
public sealed class Params_set_caretBlinkRate
{
public TMPro.TMP_InputField self;
public float value;
}
public delegate void set_caretBlinkRate_BeforeArgs(Params_set_caretBlinkRate args);
public delegate void set_caretBlinkRate_AfterArgs(Params_set_caretBlinkRate args);
public delegate void set_caretBlinkRate_WithArgs (Action<TMPro.TMP_InputField,  float> orig, TMPro.TMP_InputField self,  float value);
public sealed class Params_get_caretWidth
{
public TMPro.TMP_InputField self;
}
public delegate void get_caretWidth_BeforeArgs(Params_get_caretWidth args);
public delegate int get_caretWidth_AfterArgs(Params_get_caretWidth args, int ret);
public delegate int get_caretWidth_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_caretWidth
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_caretWidth_BeforeArgs(Params_set_caretWidth args);
public delegate void set_caretWidth_AfterArgs(Params_set_caretWidth args);
public delegate void set_caretWidth_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_textViewport
{
public TMPro.TMP_InputField self;
}
public delegate void get_textViewport_BeforeArgs(Params_get_textViewport args);
public delegate UnityEngine.RectTransform get_textViewport_AfterArgs(Params_get_textViewport args, UnityEngine.RectTransform ret);
public delegate UnityEngine.RectTransform get_textViewport_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.RectTransform> orig, TMPro.TMP_InputField self);
public sealed class Params_set_textViewport
{
public TMPro.TMP_InputField self;
public UnityEngine.RectTransform value;
}
public delegate void set_textViewport_BeforeArgs(Params_set_textViewport args);
public delegate void set_textViewport_AfterArgs(Params_set_textViewport args);
public delegate void set_textViewport_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.RectTransform> orig, TMPro.TMP_InputField self,  UnityEngine.RectTransform value);
public sealed class Params_get_textComponent
{
public TMPro.TMP_InputField self;
}
public delegate void get_textComponent_BeforeArgs(Params_get_textComponent args);
public delegate TMPro.TMP_Text get_textComponent_AfterArgs(Params_get_textComponent args, TMPro.TMP_Text ret);
public delegate TMPro.TMP_Text get_textComponent_WithArgs (Func<TMPro.TMP_InputField, TMPro.TMP_Text> orig, TMPro.TMP_InputField self);
public sealed class Params_set_textComponent
{
public TMPro.TMP_InputField self;
public TMPro.TMP_Text value;
}
public delegate void set_textComponent_BeforeArgs(Params_set_textComponent args);
public delegate void set_textComponent_AfterArgs(Params_set_textComponent args);
public delegate void set_textComponent_WithArgs (Action<TMPro.TMP_InputField,  TMPro.TMP_Text> orig, TMPro.TMP_InputField self,  TMPro.TMP_Text value);
public sealed class Params_get_placeholder
{
public TMPro.TMP_InputField self;
}
public delegate void get_placeholder_BeforeArgs(Params_get_placeholder args);
public delegate UnityEngine.UI.Graphic get_placeholder_AfterArgs(Params_get_placeholder args, UnityEngine.UI.Graphic ret);
public delegate UnityEngine.UI.Graphic get_placeholder_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.UI.Graphic> orig, TMPro.TMP_InputField self);
public sealed class Params_set_placeholder
{
public TMPro.TMP_InputField self;
public UnityEngine.UI.Graphic value;
}
public delegate void set_placeholder_BeforeArgs(Params_set_placeholder args);
public delegate void set_placeholder_AfterArgs(Params_set_placeholder args);
public delegate void set_placeholder_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.UI.Graphic> orig, TMPro.TMP_InputField self,  UnityEngine.UI.Graphic value);
public sealed class Params_get_caretColor
{
public TMPro.TMP_InputField self;
}
public delegate void get_caretColor_BeforeArgs(Params_get_caretColor args);
public delegate UnityEngine.Color get_caretColor_AfterArgs(Params_get_caretColor args, UnityEngine.Color ret);
public delegate UnityEngine.Color get_caretColor_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.Color> orig, TMPro.TMP_InputField self);
public sealed class Params_set_caretColor
{
public TMPro.TMP_InputField self;
public UnityEngine.Color value;
}
public delegate void set_caretColor_BeforeArgs(Params_set_caretColor args);
public delegate void set_caretColor_AfterArgs(Params_set_caretColor args);
public delegate void set_caretColor_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.Color> orig, TMPro.TMP_InputField self,  UnityEngine.Color value);
public sealed class Params_get_customCaretColor
{
public TMPro.TMP_InputField self;
}
public delegate void get_customCaretColor_BeforeArgs(Params_get_customCaretColor args);
public delegate bool get_customCaretColor_AfterArgs(Params_get_customCaretColor args, bool ret);
public delegate bool get_customCaretColor_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_set_customCaretColor
{
public TMPro.TMP_InputField self;
public bool value;
}
public delegate void set_customCaretColor_BeforeArgs(Params_set_customCaretColor args);
public delegate void set_customCaretColor_AfterArgs(Params_set_customCaretColor args);
public delegate void set_customCaretColor_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value);
public sealed class Params_get_selectionColor
{
public TMPro.TMP_InputField self;
}
public delegate void get_selectionColor_BeforeArgs(Params_get_selectionColor args);
public delegate UnityEngine.Color get_selectionColor_AfterArgs(Params_get_selectionColor args, UnityEngine.Color ret);
public delegate UnityEngine.Color get_selectionColor_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.Color> orig, TMPro.TMP_InputField self);
public sealed class Params_set_selectionColor
{
public TMPro.TMP_InputField self;
public UnityEngine.Color value;
}
public delegate void set_selectionColor_BeforeArgs(Params_set_selectionColor args);
public delegate void set_selectionColor_AfterArgs(Params_set_selectionColor args);
public delegate void set_selectionColor_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.Color> orig, TMPro.TMP_InputField self,  UnityEngine.Color value);
public sealed class Params_get_characterLimit
{
public TMPro.TMP_InputField self;
}
public delegate void get_characterLimit_BeforeArgs(Params_get_characterLimit args);
public delegate int get_characterLimit_AfterArgs(Params_get_characterLimit args, int ret);
public delegate int get_characterLimit_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_characterLimit
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_characterLimit_BeforeArgs(Params_set_characterLimit args);
public delegate void set_characterLimit_AfterArgs(Params_set_characterLimit args);
public delegate void set_characterLimit_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_keyboardType
{
public TMPro.TMP_InputField self;
}
public delegate void get_keyboardType_BeforeArgs(Params_get_keyboardType args);
public delegate UnityEngine.TouchScreenKeyboardType get_keyboardType_AfterArgs(Params_get_keyboardType args, UnityEngine.TouchScreenKeyboardType ret);
public delegate UnityEngine.TouchScreenKeyboardType get_keyboardType_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.TouchScreenKeyboardType> orig, TMPro.TMP_InputField self);
public sealed class Params_set_keyboardType
{
public TMPro.TMP_InputField self;
public UnityEngine.TouchScreenKeyboardType value;
}
public delegate void set_keyboardType_BeforeArgs(Params_set_keyboardType args);
public delegate void set_keyboardType_AfterArgs(Params_set_keyboardType args);
public delegate void set_keyboardType_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.TouchScreenKeyboardType> orig, TMPro.TMP_InputField self,  UnityEngine.TouchScreenKeyboardType value);
public sealed class Params_get_readOnly
{
public TMPro.TMP_InputField self;
}
public delegate void get_readOnly_BeforeArgs(Params_get_readOnly args);
public delegate bool get_readOnly_AfterArgs(Params_get_readOnly args, bool ret);
public delegate bool get_readOnly_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_set_readOnly
{
public TMPro.TMP_InputField self;
public bool value;
}
public delegate void set_readOnly_BeforeArgs(Params_set_readOnly args);
public delegate void set_readOnly_AfterArgs(Params_set_readOnly args);
public delegate void set_readOnly_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value);
public sealed class Params_get_richText
{
public TMPro.TMP_InputField self;
}
public delegate void get_richText_BeforeArgs(Params_get_richText args);
public delegate bool get_richText_AfterArgs(Params_get_richText args, bool ret);
public delegate bool get_richText_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_set_richText
{
public TMPro.TMP_InputField self;
public bool value;
}
public delegate void set_richText_BeforeArgs(Params_set_richText args);
public delegate void set_richText_AfterArgs(Params_set_richText args);
public delegate void set_richText_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool value);
public sealed class Params_get_multiLine
{
public TMPro.TMP_InputField self;
}
public delegate void get_multiLine_BeforeArgs(Params_get_multiLine args);
public delegate bool get_multiLine_AfterArgs(Params_get_multiLine args, bool ret);
public delegate bool get_multiLine_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_get_asteriskChar
{
public TMPro.TMP_InputField self;
}
public delegate void get_asteriskChar_BeforeArgs(Params_get_asteriskChar args);
public delegate char get_asteriskChar_AfterArgs(Params_get_asteriskChar args, char ret);
public delegate char get_asteriskChar_WithArgs (Func<TMPro.TMP_InputField, char> orig, TMPro.TMP_InputField self);
public sealed class Params_set_asteriskChar
{
public TMPro.TMP_InputField self;
public char value;
}
public delegate void set_asteriskChar_BeforeArgs(Params_set_asteriskChar args);
public delegate void set_asteriskChar_AfterArgs(Params_set_asteriskChar args);
public delegate void set_asteriskChar_WithArgs (Action<TMPro.TMP_InputField,  char> orig, TMPro.TMP_InputField self,  char value);
public sealed class Params_get_wasCanceled
{
public TMPro.TMP_InputField self;
}
public delegate void get_wasCanceled_BeforeArgs(Params_get_wasCanceled args);
public delegate bool get_wasCanceled_AfterArgs(Params_get_wasCanceled args, bool ret);
public delegate bool get_wasCanceled_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_ClampPos
{
public TMPro.TMP_InputField self;
public int pos;
}
public delegate void ClampPos_BeforeArgs(Params_ClampPos args);
public delegate void ClampPos_AfterArgs(Params_ClampPos args);
public delegate void ClampPos_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int pos);
public sealed class Params_get_caretPositionInternal
{
public TMPro.TMP_InputField self;
}
public delegate void get_caretPositionInternal_BeforeArgs(Params_get_caretPositionInternal args);
public delegate int get_caretPositionInternal_AfterArgs(Params_get_caretPositionInternal args, int ret);
public delegate int get_caretPositionInternal_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_caretPositionInternal
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_caretPositionInternal_BeforeArgs(Params_set_caretPositionInternal args);
public delegate void set_caretPositionInternal_AfterArgs(Params_set_caretPositionInternal args);
public delegate void set_caretPositionInternal_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_stringPositionInternal
{
public TMPro.TMP_InputField self;
}
public delegate void get_stringPositionInternal_BeforeArgs(Params_get_stringPositionInternal args);
public delegate int get_stringPositionInternal_AfterArgs(Params_get_stringPositionInternal args, int ret);
public delegate int get_stringPositionInternal_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_stringPositionInternal
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_stringPositionInternal_BeforeArgs(Params_set_stringPositionInternal args);
public delegate void set_stringPositionInternal_AfterArgs(Params_set_stringPositionInternal args);
public delegate void set_stringPositionInternal_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_caretSelectPositionInternal
{
public TMPro.TMP_InputField self;
}
public delegate void get_caretSelectPositionInternal_BeforeArgs(Params_get_caretSelectPositionInternal args);
public delegate int get_caretSelectPositionInternal_AfterArgs(Params_get_caretSelectPositionInternal args, int ret);
public delegate int get_caretSelectPositionInternal_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_caretSelectPositionInternal
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_caretSelectPositionInternal_BeforeArgs(Params_set_caretSelectPositionInternal args);
public delegate void set_caretSelectPositionInternal_AfterArgs(Params_set_caretSelectPositionInternal args);
public delegate void set_caretSelectPositionInternal_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_stringSelectPositionInternal
{
public TMPro.TMP_InputField self;
}
public delegate void get_stringSelectPositionInternal_BeforeArgs(Params_get_stringSelectPositionInternal args);
public delegate int get_stringSelectPositionInternal_AfterArgs(Params_get_stringSelectPositionInternal args, int ret);
public delegate int get_stringSelectPositionInternal_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_stringSelectPositionInternal
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_stringSelectPositionInternal_BeforeArgs(Params_set_stringSelectPositionInternal args);
public delegate void set_stringSelectPositionInternal_AfterArgs(Params_set_stringSelectPositionInternal args);
public delegate void set_stringSelectPositionInternal_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_hasSelection
{
public TMPro.TMP_InputField self;
}
public delegate void get_hasSelection_BeforeArgs(Params_get_hasSelection args);
public delegate bool get_hasSelection_AfterArgs(Params_get_hasSelection args, bool ret);
public delegate bool get_hasSelection_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_get_caretPosition
{
public TMPro.TMP_InputField self;
}
public delegate void get_caretPosition_BeforeArgs(Params_get_caretPosition args);
public delegate int get_caretPosition_AfterArgs(Params_get_caretPosition args, int ret);
public delegate int get_caretPosition_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_caretPosition
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_caretPosition_BeforeArgs(Params_set_caretPosition args);
public delegate void set_caretPosition_AfterArgs(Params_set_caretPosition args);
public delegate void set_caretPosition_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_selectionAnchorPosition
{
public TMPro.TMP_InputField self;
}
public delegate void get_selectionAnchorPosition_BeforeArgs(Params_get_selectionAnchorPosition args);
public delegate int get_selectionAnchorPosition_AfterArgs(Params_get_selectionAnchorPosition args, int ret);
public delegate int get_selectionAnchorPosition_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_selectionAnchorPosition
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_selectionAnchorPosition_BeforeArgs(Params_set_selectionAnchorPosition args);
public delegate void set_selectionAnchorPosition_AfterArgs(Params_set_selectionAnchorPosition args);
public delegate void set_selectionAnchorPosition_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_get_selectionFocusPosition
{
public TMPro.TMP_InputField self;
}
public delegate void get_selectionFocusPosition_BeforeArgs(Params_get_selectionFocusPosition args);
public delegate int get_selectionFocusPosition_AfterArgs(Params_get_selectionFocusPosition args, int ret);
public delegate int get_selectionFocusPosition_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_set_selectionFocusPosition
{
public TMPro.TMP_InputField self;
public int value;
}
public delegate void set_selectionFocusPosition_BeforeArgs(Params_set_selectionFocusPosition args);
public delegate void set_selectionFocusPosition_AfterArgs(Params_set_selectionFocusPosition args);
public delegate void set_selectionFocusPosition_WithArgs (Action<TMPro.TMP_InputField,  int> orig, TMPro.TMP_InputField self,  int value);
public sealed class Params_OnEnable
{
public TMPro.TMP_InputField self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_OnDisable
{
public TMPro.TMP_InputField self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_CaretBlink
{
public TMPro.TMP_InputField self;
}
public delegate void CaretBlink_BeforeArgs(Params_CaretBlink args);
public delegate System.Collections.IEnumerator CaretBlink_AfterArgs(Params_CaretBlink args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator CaretBlink_WithArgs (Func<TMPro.TMP_InputField, System.Collections.IEnumerator> orig, TMPro.TMP_InputField self);
public sealed class Params_SetCaretVisible
{
public TMPro.TMP_InputField self;
}
public delegate void SetCaretVisible_BeforeArgs(Params_SetCaretVisible args);
public delegate void SetCaretVisible_AfterArgs(Params_SetCaretVisible args);
public delegate void SetCaretVisible_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SetCaretActive
{
public TMPro.TMP_InputField self;
}
public delegate void SetCaretActive_BeforeArgs(Params_SetCaretActive args);
public delegate void SetCaretActive_AfterArgs(Params_SetCaretActive args);
public delegate void SetCaretActive_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_OnFocus
{
public TMPro.TMP_InputField self;
}
public delegate void OnFocus_BeforeArgs(Params_OnFocus args);
public delegate void OnFocus_AfterArgs(Params_OnFocus args);
public delegate void OnFocus_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SelectAll
{
public TMPro.TMP_InputField self;
}
public delegate void SelectAll_BeforeArgs(Params_SelectAll args);
public delegate void SelectAll_AfterArgs(Params_SelectAll args);
public delegate void SelectAll_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_MoveTextEnd
{
public TMPro.TMP_InputField self;
public bool shift;
}
public delegate void MoveTextEnd_BeforeArgs(Params_MoveTextEnd args);
public delegate void MoveTextEnd_AfterArgs(Params_MoveTextEnd args);
public delegate void MoveTextEnd_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift);
public sealed class Params_MoveTextStart
{
public TMPro.TMP_InputField self;
public bool shift;
}
public delegate void MoveTextStart_BeforeArgs(Params_MoveTextStart args);
public delegate void MoveTextStart_AfterArgs(Params_MoveTextStart args);
public delegate void MoveTextStart_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift);
public delegate void get_clipboard_BeforeArgs();
public delegate string get_clipboard_AfterArgs(string ret);
public delegate string get_clipboard_WithArgs (Func<string> orig);
public sealed class Params_set_clipboard
{
public string value;
}
public delegate void set_clipboard_BeforeArgs(Params_set_clipboard args);
public delegate void set_clipboard_AfterArgs(Params_set_clipboard args);
public delegate void set_clipboard_WithArgs (Action< string> orig,  string value);
public sealed class Params_InPlaceEditing
{
public TMPro.TMP_InputField self;
}
public delegate void InPlaceEditing_BeforeArgs(Params_InPlaceEditing args);
public delegate bool InPlaceEditing_AfterArgs(Params_InPlaceEditing args, bool ret);
public delegate bool InPlaceEditing_WithArgs (Func<TMPro.TMP_InputField, bool> orig, TMPro.TMP_InputField self);
public sealed class Params_LateUpdate
{
public TMPro.TMP_InputField self;
}
public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);
public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);
public delegate void LateUpdate_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_GetCharacterIndexFromPosition
{
public TMPro.TMP_InputField self;
public UnityEngine.Vector2 pos;
}
public delegate void GetCharacterIndexFromPosition_BeforeArgs(Params_GetCharacterIndexFromPosition args);
public delegate int GetCharacterIndexFromPosition_AfterArgs(Params_GetCharacterIndexFromPosition args, int ret);
public delegate int GetCharacterIndexFromPosition_WithArgs (Func<TMPro.TMP_InputField,  UnityEngine.Vector2, int> orig, TMPro.TMP_InputField self,  UnityEngine.Vector2 pos);
public sealed class Params_MayDrag
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void MayDrag_BeforeArgs(Params_MayDrag args);
public delegate bool MayDrag_AfterArgs(Params_MayDrag args, bool ret);
public delegate bool MayDrag_WithArgs (Func<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData, bool> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_OnBeginDrag
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnBeginDrag_BeforeArgs(Params_OnBeginDrag args);
public delegate void OnBeginDrag_AfterArgs(Params_OnBeginDrag args);
public delegate void OnBeginDrag_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_OnDrag
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnDrag_BeforeArgs(Params_OnDrag args);
public delegate void OnDrag_AfterArgs(Params_OnDrag args);
public delegate void OnDrag_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_MouseDragOutsideRect
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void MouseDragOutsideRect_BeforeArgs(Params_MouseDragOutsideRect args);
public delegate System.Collections.IEnumerator MouseDragOutsideRect_AfterArgs(Params_MouseDragOutsideRect args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator MouseDragOutsideRect_WithArgs (Func<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData, System.Collections.IEnumerator> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_OnEndDrag
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnEndDrag_BeforeArgs(Params_OnEndDrag args);
public delegate void OnEndDrag_AfterArgs(Params_OnEndDrag args);
public delegate void OnEndDrag_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_OnPointerDown
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerDown_BeforeArgs(Params_OnPointerDown args);
public delegate void OnPointerDown_AfterArgs(Params_OnPointerDown args);
public delegate void OnPointerDown_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_IsValidChar
{
public TMPro.TMP_InputField self;
public char c;
}
public delegate void IsValidChar_BeforeArgs(Params_IsValidChar args);
public delegate bool IsValidChar_AfterArgs(Params_IsValidChar args, bool ret);
public delegate bool IsValidChar_WithArgs (Func<TMPro.TMP_InputField,  char, bool> orig, TMPro.TMP_InputField self,  char c);
public sealed class Params_ProcessEvent
{
public TMPro.TMP_InputField self;
public UnityEngine.Event e;
}
public delegate void ProcessEvent_BeforeArgs(Params_ProcessEvent args);
public delegate void ProcessEvent_AfterArgs(Params_ProcessEvent args);
public delegate void ProcessEvent_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.Event> orig, TMPro.TMP_InputField self,  UnityEngine.Event e);
public sealed class Params_OnUpdateSelected
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnUpdateSelected_BeforeArgs(Params_OnUpdateSelected args);
public delegate void OnUpdateSelected_AfterArgs(Params_OnUpdateSelected args);
public delegate void OnUpdateSelected_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_GetSelectedString
{
public TMPro.TMP_InputField self;
}
public delegate void GetSelectedString_BeforeArgs(Params_GetSelectedString args);
public delegate string GetSelectedString_AfterArgs(Params_GetSelectedString args, string ret);
public delegate string GetSelectedString_WithArgs (Func<TMPro.TMP_InputField, string> orig, TMPro.TMP_InputField self);
public sealed class Params_FindtNextWordBegin
{
public TMPro.TMP_InputField self;
}
public delegate void FindtNextWordBegin_BeforeArgs(Params_FindtNextWordBegin args);
public delegate int FindtNextWordBegin_AfterArgs(Params_FindtNextWordBegin args, int ret);
public delegate int FindtNextWordBegin_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_MoveRight
{
public TMPro.TMP_InputField self;
public bool shift;
public bool ctrl;
}
public delegate void MoveRight_BeforeArgs(Params_MoveRight args);
public delegate void MoveRight_AfterArgs(Params_MoveRight args);
public delegate void MoveRight_WithArgs (Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool ctrl);
public sealed class Params_FindtPrevWordBegin
{
public TMPro.TMP_InputField self;
}
public delegate void FindtPrevWordBegin_BeforeArgs(Params_FindtPrevWordBegin args);
public delegate int FindtPrevWordBegin_AfterArgs(Params_FindtPrevWordBegin args, int ret);
public delegate int FindtPrevWordBegin_WithArgs (Func<TMPro.TMP_InputField, int> orig, TMPro.TMP_InputField self);
public sealed class Params_MoveLeft
{
public TMPro.TMP_InputField self;
public bool shift;
public bool ctrl;
}
public delegate void MoveLeft_BeforeArgs(Params_MoveLeft args);
public delegate void MoveLeft_AfterArgs(Params_MoveLeft args);
public delegate void MoveLeft_WithArgs (Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool ctrl);
public sealed class Params_LineUpCharacterPosition
{
public TMPro.TMP_InputField self;
public int originalPos;
public bool goToFirstChar;
}
public delegate void LineUpCharacterPosition_BeforeArgs(Params_LineUpCharacterPosition args);
public delegate int LineUpCharacterPosition_AfterArgs(Params_LineUpCharacterPosition args, int ret);
public delegate int LineUpCharacterPosition_WithArgs (Func<TMPro.TMP_InputField,  int,  bool, int> orig, TMPro.TMP_InputField self,  int originalPos,  bool goToFirstChar);
public sealed class Params_LineDownCharacterPosition
{
public TMPro.TMP_InputField self;
public int originalPos;
public bool goToLastChar;
}
public delegate void LineDownCharacterPosition_BeforeArgs(Params_LineDownCharacterPosition args);
public delegate int LineDownCharacterPosition_AfterArgs(Params_LineDownCharacterPosition args, int ret);
public delegate int LineDownCharacterPosition_WithArgs (Func<TMPro.TMP_InputField,  int,  bool, int> orig, TMPro.TMP_InputField self,  int originalPos,  bool goToLastChar);
public sealed class Params_MoveDown_bool
{
public TMPro.TMP_InputField self;
public bool shift;
}
public delegate void MoveDown_bool_BeforeArgs(Params_MoveDown_bool args);
public delegate void MoveDown_bool_AfterArgs(Params_MoveDown_bool args);
public delegate void MoveDown_bool_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift);
public sealed class Params_MoveDown_bool_bool
{
public TMPro.TMP_InputField self;
public bool shift;
public bool goToLastChar;
}
public delegate void MoveDown_bool_bool_BeforeArgs(Params_MoveDown_bool_bool args);
public delegate void MoveDown_bool_bool_AfterArgs(Params_MoveDown_bool_bool args);
public delegate void MoveDown_bool_bool_WithArgs (Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool goToLastChar);
public sealed class Params_MoveUp_bool
{
public TMPro.TMP_InputField self;
public bool shift;
}
public delegate void MoveUp_bool_BeforeArgs(Params_MoveUp_bool args);
public delegate void MoveUp_bool_AfterArgs(Params_MoveUp_bool args);
public delegate void MoveUp_bool_WithArgs (Action<TMPro.TMP_InputField,  bool> orig, TMPro.TMP_InputField self,  bool shift);
public sealed class Params_MoveUp_bool_bool
{
public TMPro.TMP_InputField self;
public bool shift;
public bool goToFirstChar;
}
public delegate void MoveUp_bool_bool_BeforeArgs(Params_MoveUp_bool_bool args);
public delegate void MoveUp_bool_bool_AfterArgs(Params_MoveUp_bool_bool args);
public delegate void MoveUp_bool_bool_WithArgs (Action<TMPro.TMP_InputField,  bool,  bool> orig, TMPro.TMP_InputField self,  bool shift,  bool goToFirstChar);
public sealed class Params_Delete
{
public TMPro.TMP_InputField self;
}
public delegate void Delete_BeforeArgs(Params_Delete args);
public delegate void Delete_AfterArgs(Params_Delete args);
public delegate void Delete_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_ForwardSpace
{
public TMPro.TMP_InputField self;
}
public delegate void ForwardSpace_BeforeArgs(Params_ForwardSpace args);
public delegate void ForwardSpace_AfterArgs(Params_ForwardSpace args);
public delegate void ForwardSpace_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_Backspace
{
public TMPro.TMP_InputField self;
}
public delegate void Backspace_BeforeArgs(Params_Backspace args);
public delegate void Backspace_AfterArgs(Params_Backspace args);
public delegate void Backspace_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_Insert
{
public TMPro.TMP_InputField self;
public char c;
}
public delegate void Insert_BeforeArgs(Params_Insert args);
public delegate void Insert_AfterArgs(Params_Insert args);
public delegate void Insert_WithArgs (Action<TMPro.TMP_InputField,  char> orig, TMPro.TMP_InputField self,  char c);
public sealed class Params_SendOnValueChangedAndUpdateLabel
{
public TMPro.TMP_InputField self;
}
public delegate void SendOnValueChangedAndUpdateLabel_BeforeArgs(Params_SendOnValueChangedAndUpdateLabel args);
public delegate void SendOnValueChangedAndUpdateLabel_AfterArgs(Params_SendOnValueChangedAndUpdateLabel args);
public delegate void SendOnValueChangedAndUpdateLabel_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SendOnValueChanged
{
public TMPro.TMP_InputField self;
}
public delegate void SendOnValueChanged_BeforeArgs(Params_SendOnValueChanged args);
public delegate void SendOnValueChanged_AfterArgs(Params_SendOnValueChanged args);
public delegate void SendOnValueChanged_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SendOnSubmit
{
public TMPro.TMP_InputField self;
}
public delegate void SendOnSubmit_BeforeArgs(Params_SendOnSubmit args);
public delegate void SendOnSubmit_AfterArgs(Params_SendOnSubmit args);
public delegate void SendOnSubmit_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SendOnFocusLost
{
public TMPro.TMP_InputField self;
}
public delegate void SendOnFocusLost_BeforeArgs(Params_SendOnFocusLost args);
public delegate void SendOnFocusLost_AfterArgs(Params_SendOnFocusLost args);
public delegate void SendOnFocusLost_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_Append_string
{
public TMPro.TMP_InputField self;
public string input;
}
public delegate void Append_string_BeforeArgs(Params_Append_string args);
public delegate void Append_string_AfterArgs(Params_Append_string args);
public delegate void Append_string_WithArgs (Action<TMPro.TMP_InputField,  string> orig, TMPro.TMP_InputField self,  string input);
public sealed class Params_Append_Char
{
public TMPro.TMP_InputField self;
public char input;
}
public delegate void Append_Char_BeforeArgs(Params_Append_Char args);
public delegate void Append_Char_AfterArgs(Params_Append_Char args);
public delegate void Append_Char_WithArgs (Action<TMPro.TMP_InputField,  char> orig, TMPro.TMP_InputField self,  char input);
public sealed class Params_UpdateLabel
{
public TMPro.TMP_InputField self;
}
public delegate void UpdateLabel_BeforeArgs(Params_UpdateLabel args);
public delegate void UpdateLabel_AfterArgs(Params_UpdateLabel args);
public delegate void UpdateLabel_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_GetCaretPositionFromStringIndex
{
public TMPro.TMP_InputField self;
public int stringIndex;
}
public delegate void GetCaretPositionFromStringIndex_BeforeArgs(Params_GetCaretPositionFromStringIndex args);
public delegate int GetCaretPositionFromStringIndex_AfterArgs(Params_GetCaretPositionFromStringIndex args, int ret);
public delegate int GetCaretPositionFromStringIndex_WithArgs (Func<TMPro.TMP_InputField,  int, int> orig, TMPro.TMP_InputField self,  int stringIndex);
public sealed class Params_GetStringIndexFromCaretPosition
{
public TMPro.TMP_InputField self;
public int caretPosition;
}
public delegate void GetStringIndexFromCaretPosition_BeforeArgs(Params_GetStringIndexFromCaretPosition args);
public delegate int GetStringIndexFromCaretPosition_AfterArgs(Params_GetStringIndexFromCaretPosition args, int ret);
public delegate int GetStringIndexFromCaretPosition_WithArgs (Func<TMPro.TMP_InputField,  int, int> orig, TMPro.TMP_InputField self,  int caretPosition);
public sealed class Params_ForceLabelUpdate
{
public TMPro.TMP_InputField self;
}
public delegate void ForceLabelUpdate_BeforeArgs(Params_ForceLabelUpdate args);
public delegate void ForceLabelUpdate_AfterArgs(Params_ForceLabelUpdate args);
public delegate void ForceLabelUpdate_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_MarkGeometryAsDirty
{
public TMPro.TMP_InputField self;
}
public delegate void MarkGeometryAsDirty_BeforeArgs(Params_MarkGeometryAsDirty args);
public delegate void MarkGeometryAsDirty_AfterArgs(Params_MarkGeometryAsDirty args);
public delegate void MarkGeometryAsDirty_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_Rebuild
{
public TMPro.TMP_InputField self;
public UnityEngine.UI.CanvasUpdate update;
}
public delegate void Rebuild_BeforeArgs(Params_Rebuild args);
public delegate void Rebuild_AfterArgs(Params_Rebuild args);
public delegate void Rebuild_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.UI.CanvasUpdate> orig, TMPro.TMP_InputField self,  UnityEngine.UI.CanvasUpdate update);
public sealed class Params_LayoutComplete
{
public TMPro.TMP_InputField self;
}
public delegate void LayoutComplete_BeforeArgs(Params_LayoutComplete args);
public delegate void LayoutComplete_AfterArgs(Params_LayoutComplete args);
public delegate void LayoutComplete_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_GraphicUpdateComplete
{
public TMPro.TMP_InputField self;
}
public delegate void GraphicUpdateComplete_BeforeArgs(Params_GraphicUpdateComplete args);
public delegate void GraphicUpdateComplete_AfterArgs(Params_GraphicUpdateComplete args);
public delegate void GraphicUpdateComplete_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_UpdateGeometry
{
public TMPro.TMP_InputField self;
}
public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_AssignPositioningIfNeeded
{
public TMPro.TMP_InputField self;
}
public delegate void AssignPositioningIfNeeded_BeforeArgs(Params_AssignPositioningIfNeeded args);
public delegate void AssignPositioningIfNeeded_AfterArgs(Params_AssignPositioningIfNeeded args);
public delegate void AssignPositioningIfNeeded_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_OnFillVBO
{
public TMPro.TMP_InputField self;
public UnityEngine.Mesh vbo;
}
public delegate void OnFillVBO_BeforeArgs(Params_OnFillVBO args);
public delegate void OnFillVBO_AfterArgs(Params_OnFillVBO args);
public delegate void OnFillVBO_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.Mesh> orig, TMPro.TMP_InputField self,  UnityEngine.Mesh vbo);
public sealed class Params_GenerateCaret
{
public TMPro.TMP_InputField self;
public UnityEngine.UI.VertexHelper vbo;
public UnityEngine.Vector2 roundingOffset;
}
public delegate void GenerateCaret_BeforeArgs(Params_GenerateCaret args);
public delegate void GenerateCaret_AfterArgs(Params_GenerateCaret args);
public delegate void GenerateCaret_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.UI.VertexHelper,  UnityEngine.Vector2> orig, TMPro.TMP_InputField self,  UnityEngine.UI.VertexHelper vbo,  UnityEngine.Vector2 roundingOffset);
public sealed class Params_CreateCursorVerts
{
public TMPro.TMP_InputField self;
}
public delegate void CreateCursorVerts_BeforeArgs(Params_CreateCursorVerts args);
public delegate void CreateCursorVerts_AfterArgs(Params_CreateCursorVerts args);
public delegate void CreateCursorVerts_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_GenerateHightlight
{
public TMPro.TMP_InputField self;
public UnityEngine.UI.VertexHelper vbo;
public UnityEngine.Vector2 roundingOffset;
}
public delegate void GenerateHightlight_BeforeArgs(Params_GenerateHightlight args);
public delegate void GenerateHightlight_AfterArgs(Params_GenerateHightlight args);
public delegate void GenerateHightlight_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.UI.VertexHelper,  UnityEngine.Vector2> orig, TMPro.TMP_InputField self,  UnityEngine.UI.VertexHelper vbo,  UnityEngine.Vector2 roundingOffset);
public sealed class Params_AdjustRectTransformRelativeToViewport
{
public TMPro.TMP_InputField self;
public UnityEngine.Vector2 startPosition;
public float height;
public bool isCharVisible;
}
public delegate void AdjustRectTransformRelativeToViewport_BeforeArgs(Params_AdjustRectTransformRelativeToViewport args);
public delegate void AdjustRectTransformRelativeToViewport_AfterArgs(Params_AdjustRectTransformRelativeToViewport args);
public delegate void AdjustRectTransformRelativeToViewport_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.Vector2,  float,  bool> orig, TMPro.TMP_InputField self,  UnityEngine.Vector2 startPosition,  float height,  bool isCharVisible);
public sealed class Params_Validate
{
public TMPro.TMP_InputField self;
public string text;
public int pos;
public char ch;
}
public delegate void Validate_BeforeArgs(Params_Validate args);
public delegate char Validate_AfterArgs(Params_Validate args, char ret);
public delegate char Validate_WithArgs (Func<TMPro.TMP_InputField,  string,  int,  char, char> orig, TMPro.TMP_InputField self,  string text,  int pos,  char ch);
public sealed class Params_ActivateInputField
{
public TMPro.TMP_InputField self;
}
public delegate void ActivateInputField_BeforeArgs(Params_ActivateInputField args);
public delegate void ActivateInputField_AfterArgs(Params_ActivateInputField args);
public delegate void ActivateInputField_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_ActivateInputFieldInternal
{
public TMPro.TMP_InputField self;
}
public delegate void ActivateInputFieldInternal_BeforeArgs(Params_ActivateInputFieldInternal args);
public delegate void ActivateInputFieldInternal_AfterArgs(Params_ActivateInputFieldInternal args);
public delegate void ActivateInputFieldInternal_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_OnSelect
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnSelect_BeforeArgs(Params_OnSelect args);
public delegate void OnSelect_AfterArgs(Params_OnSelect args);
public delegate void OnSelect_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_OnPointerClick
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.PointerEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_DeactivateInputField
{
public TMPro.TMP_InputField self;
}
public delegate void DeactivateInputField_BeforeArgs(Params_DeactivateInputField args);
public delegate void DeactivateInputField_AfterArgs(Params_DeactivateInputField args);
public delegate void DeactivateInputField_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_OnDeselect
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnDeselect_BeforeArgs(Params_OnDeselect args);
public delegate void OnDeselect_AfterArgs(Params_OnDeselect args);
public delegate void OnDeselect_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_OnSubmit
{
public TMPro.TMP_InputField self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);
public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);
public delegate void OnSubmit_WithArgs (Action<TMPro.TMP_InputField,  UnityEngine.EventSystems.BaseEventData> orig, TMPro.TMP_InputField self,  UnityEngine.EventSystems.BaseEventData eventData);
public sealed class Params_EnforceContentType
{
public TMPro.TMP_InputField self;
}
public delegate void EnforceContentType_BeforeArgs(Params_EnforceContentType args);
public delegate void EnforceContentType_AfterArgs(Params_EnforceContentType args);
public delegate void EnforceContentType_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SetTextComponentWrapMode
{
public TMPro.TMP_InputField self;
}
public delegate void SetTextComponentWrapMode_BeforeArgs(Params_SetTextComponentWrapMode args);
public delegate void SetTextComponentWrapMode_AfterArgs(Params_SetTextComponentWrapMode args);
public delegate void SetTextComponentWrapMode_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SetTextComponentRichTextMode
{
public TMPro.TMP_InputField self;
}
public delegate void SetTextComponentRichTextMode_BeforeArgs(Params_SetTextComponentRichTextMode args);
public delegate void SetTextComponentRichTextMode_AfterArgs(Params_SetTextComponentRichTextMode args);
public delegate void SetTextComponentRichTextMode_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_SetToCustomIfContentTypeIsNot
{
public TMPro.TMP_InputField self;
public TMPro.TMP_InputField.ContentType[] allowedContentTypes;
}
public delegate void SetToCustomIfContentTypeIsNot_BeforeArgs(Params_SetToCustomIfContentTypeIsNot args);
public delegate void SetToCustomIfContentTypeIsNot_AfterArgs(Params_SetToCustomIfContentTypeIsNot args);
public delegate void SetToCustomIfContentTypeIsNot_WithArgs (Action<TMPro.TMP_InputField,  TMPro.TMP_InputField.ContentType[]> orig, TMPro.TMP_InputField self,  TMPro.TMP_InputField.ContentType[] allowedContentTypes);
public sealed class Params_SetToCustom
{
public TMPro.TMP_InputField self;
}
public delegate void SetToCustom_BeforeArgs(Params_SetToCustom args);
public delegate void SetToCustom_AfterArgs(Params_SetToCustom args);
public delegate void SetToCustom_WithArgs (Action<TMPro.TMP_InputField> orig, TMPro.TMP_InputField self);
public sealed class Params_get_transform
{
public TMPro.TMP_InputField self;
}
public delegate void get_transform_BeforeArgs(Params_get_transform args);
public delegate UnityEngine.Transform get_transform_AfterArgs(Params_get_transform args, UnityEngine.Transform ret);
public delegate UnityEngine.Transform get_transform_WithArgs (Func<TMPro.TMP_InputField, UnityEngine.Transform> orig, TMPro.TMP_InputField self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_mesh_BeforeArgs get_mesh
{
add
{

HookHandler._beforeget_mesh += value;
HookHandler.Hookget_mesh();
}
remove => HookHandler._beforeget_mesh -= value;
}
public static event Delegates.set_shouldHideMobileInput_BeforeArgs set_shouldHideMobileInput
{
add
{

HookHandler._beforeset_shouldHideMobileInput += value;
HookHandler.Hookset_shouldHideMobileInput();
}
remove => HookHandler._beforeset_shouldHideMobileInput -= value;
}
public static event Delegates.get_shouldHideMobileInput_BeforeArgs get_shouldHideMobileInput
{
add
{

HookHandler._beforeget_shouldHideMobileInput += value;
HookHandler.Hookget_shouldHideMobileInput();
}
remove => HookHandler._beforeget_shouldHideMobileInput -= value;
}
public static event Delegates.get_text_BeforeArgs get_text
{
add
{

HookHandler._beforeget_text += value;
HookHandler.Hookget_text();
}
remove => HookHandler._beforeget_text -= value;
}
public static event Delegates.set_text_BeforeArgs set_text
{
add
{

HookHandler._beforeset_text += value;
HookHandler.Hookset_text();
}
remove => HookHandler._beforeset_text -= value;
}
public static event Delegates.get_isFocused_BeforeArgs get_isFocused
{
add
{

HookHandler._beforeget_isFocused += value;
HookHandler.Hookget_isFocused();
}
remove => HookHandler._beforeget_isFocused -= value;
}
public static event Delegates.get_caretBlinkRate_BeforeArgs get_caretBlinkRate
{
add
{

HookHandler._beforeget_caretBlinkRate += value;
HookHandler.Hookget_caretBlinkRate();
}
remove => HookHandler._beforeget_caretBlinkRate -= value;
}
public static event Delegates.set_caretBlinkRate_BeforeArgs set_caretBlinkRate
{
add
{

HookHandler._beforeset_caretBlinkRate += value;
HookHandler.Hookset_caretBlinkRate();
}
remove => HookHandler._beforeset_caretBlinkRate -= value;
}
public static event Delegates.get_caretWidth_BeforeArgs get_caretWidth
{
add
{

HookHandler._beforeget_caretWidth += value;
HookHandler.Hookget_caretWidth();
}
remove => HookHandler._beforeget_caretWidth -= value;
}
public static event Delegates.set_caretWidth_BeforeArgs set_caretWidth
{
add
{

HookHandler._beforeset_caretWidth += value;
HookHandler.Hookset_caretWidth();
}
remove => HookHandler._beforeset_caretWidth -= value;
}
public static event Delegates.get_textViewport_BeforeArgs get_textViewport
{
add
{

HookHandler._beforeget_textViewport += value;
HookHandler.Hookget_textViewport();
}
remove => HookHandler._beforeget_textViewport -= value;
}
public static event Delegates.set_textViewport_BeforeArgs set_textViewport
{
add
{

HookHandler._beforeset_textViewport += value;
HookHandler.Hookset_textViewport();
}
remove => HookHandler._beforeset_textViewport -= value;
}
public static event Delegates.get_textComponent_BeforeArgs get_textComponent
{
add
{

HookHandler._beforeget_textComponent += value;
HookHandler.Hookget_textComponent();
}
remove => HookHandler._beforeget_textComponent -= value;
}
public static event Delegates.set_textComponent_BeforeArgs set_textComponent
{
add
{

HookHandler._beforeset_textComponent += value;
HookHandler.Hookset_textComponent();
}
remove => HookHandler._beforeset_textComponent -= value;
}
public static event Delegates.get_placeholder_BeforeArgs get_placeholder
{
add
{

HookHandler._beforeget_placeholder += value;
HookHandler.Hookget_placeholder();
}
remove => HookHandler._beforeget_placeholder -= value;
}
public static event Delegates.set_placeholder_BeforeArgs set_placeholder
{
add
{

HookHandler._beforeset_placeholder += value;
HookHandler.Hookset_placeholder();
}
remove => HookHandler._beforeset_placeholder -= value;
}
public static event Delegates.get_caretColor_BeforeArgs get_caretColor
{
add
{

HookHandler._beforeget_caretColor += value;
HookHandler.Hookget_caretColor();
}
remove => HookHandler._beforeget_caretColor -= value;
}
public static event Delegates.set_caretColor_BeforeArgs set_caretColor
{
add
{

HookHandler._beforeset_caretColor += value;
HookHandler.Hookset_caretColor();
}
remove => HookHandler._beforeset_caretColor -= value;
}
public static event Delegates.get_customCaretColor_BeforeArgs get_customCaretColor
{
add
{

HookHandler._beforeget_customCaretColor += value;
HookHandler.Hookget_customCaretColor();
}
remove => HookHandler._beforeget_customCaretColor -= value;
}
public static event Delegates.set_customCaretColor_BeforeArgs set_customCaretColor
{
add
{

HookHandler._beforeset_customCaretColor += value;
HookHandler.Hookset_customCaretColor();
}
remove => HookHandler._beforeset_customCaretColor -= value;
}
public static event Delegates.get_selectionColor_BeforeArgs get_selectionColor
{
add
{

HookHandler._beforeget_selectionColor += value;
HookHandler.Hookget_selectionColor();
}
remove => HookHandler._beforeget_selectionColor -= value;
}
public static event Delegates.set_selectionColor_BeforeArgs set_selectionColor
{
add
{

HookHandler._beforeset_selectionColor += value;
HookHandler.Hookset_selectionColor();
}
remove => HookHandler._beforeset_selectionColor -= value;
}
public static event Delegates.get_characterLimit_BeforeArgs get_characterLimit
{
add
{

HookHandler._beforeget_characterLimit += value;
HookHandler.Hookget_characterLimit();
}
remove => HookHandler._beforeget_characterLimit -= value;
}
public static event Delegates.set_characterLimit_BeforeArgs set_characterLimit
{
add
{

HookHandler._beforeset_characterLimit += value;
HookHandler.Hookset_characterLimit();
}
remove => HookHandler._beforeset_characterLimit -= value;
}
public static event Delegates.get_keyboardType_BeforeArgs get_keyboardType
{
add
{

HookHandler._beforeget_keyboardType += value;
HookHandler.Hookget_keyboardType();
}
remove => HookHandler._beforeget_keyboardType -= value;
}
public static event Delegates.set_keyboardType_BeforeArgs set_keyboardType
{
add
{

HookHandler._beforeset_keyboardType += value;
HookHandler.Hookset_keyboardType();
}
remove => HookHandler._beforeset_keyboardType -= value;
}
public static event Delegates.get_readOnly_BeforeArgs get_readOnly
{
add
{

HookHandler._beforeget_readOnly += value;
HookHandler.Hookget_readOnly();
}
remove => HookHandler._beforeget_readOnly -= value;
}
public static event Delegates.set_readOnly_BeforeArgs set_readOnly
{
add
{

HookHandler._beforeset_readOnly += value;
HookHandler.Hookset_readOnly();
}
remove => HookHandler._beforeset_readOnly -= value;
}
public static event Delegates.get_richText_BeforeArgs get_richText
{
add
{

HookHandler._beforeget_richText += value;
HookHandler.Hookget_richText();
}
remove => HookHandler._beforeget_richText -= value;
}
public static event Delegates.set_richText_BeforeArgs set_richText
{
add
{

HookHandler._beforeset_richText += value;
HookHandler.Hookset_richText();
}
remove => HookHandler._beforeset_richText -= value;
}
public static event Delegates.get_multiLine_BeforeArgs get_multiLine
{
add
{

HookHandler._beforeget_multiLine += value;
HookHandler.Hookget_multiLine();
}
remove => HookHandler._beforeget_multiLine -= value;
}
public static event Delegates.get_asteriskChar_BeforeArgs get_asteriskChar
{
add
{

HookHandler._beforeget_asteriskChar += value;
HookHandler.Hookget_asteriskChar();
}
remove => HookHandler._beforeget_asteriskChar -= value;
}
public static event Delegates.set_asteriskChar_BeforeArgs set_asteriskChar
{
add
{

HookHandler._beforeset_asteriskChar += value;
HookHandler.Hookset_asteriskChar();
}
remove => HookHandler._beforeset_asteriskChar -= value;
}
public static event Delegates.get_wasCanceled_BeforeArgs get_wasCanceled
{
add
{

HookHandler._beforeget_wasCanceled += value;
HookHandler.Hookget_wasCanceled();
}
remove => HookHandler._beforeget_wasCanceled -= value;
}
public static event Delegates.ClampPos_BeforeArgs ClampPos
{
add
{

HookHandler._beforeClampPos += value;
HookHandler.HookClampPos();
}
remove => HookHandler._beforeClampPos -= value;
}
public static event Delegates.get_caretPositionInternal_BeforeArgs get_caretPositionInternal
{
add
{

HookHandler._beforeget_caretPositionInternal += value;
HookHandler.Hookget_caretPositionInternal();
}
remove => HookHandler._beforeget_caretPositionInternal -= value;
}
public static event Delegates.set_caretPositionInternal_BeforeArgs set_caretPositionInternal
{
add
{

HookHandler._beforeset_caretPositionInternal += value;
HookHandler.Hookset_caretPositionInternal();
}
remove => HookHandler._beforeset_caretPositionInternal -= value;
}
public static event Delegates.get_stringPositionInternal_BeforeArgs get_stringPositionInternal
{
add
{

HookHandler._beforeget_stringPositionInternal += value;
HookHandler.Hookget_stringPositionInternal();
}
remove => HookHandler._beforeget_stringPositionInternal -= value;
}
public static event Delegates.set_stringPositionInternal_BeforeArgs set_stringPositionInternal
{
add
{

HookHandler._beforeset_stringPositionInternal += value;
HookHandler.Hookset_stringPositionInternal();
}
remove => HookHandler._beforeset_stringPositionInternal -= value;
}
public static event Delegates.get_caretSelectPositionInternal_BeforeArgs get_caretSelectPositionInternal
{
add
{

HookHandler._beforeget_caretSelectPositionInternal += value;
HookHandler.Hookget_caretSelectPositionInternal();
}
remove => HookHandler._beforeget_caretSelectPositionInternal -= value;
}
public static event Delegates.set_caretSelectPositionInternal_BeforeArgs set_caretSelectPositionInternal
{
add
{

HookHandler._beforeset_caretSelectPositionInternal += value;
HookHandler.Hookset_caretSelectPositionInternal();
}
remove => HookHandler._beforeset_caretSelectPositionInternal -= value;
}
public static event Delegates.get_stringSelectPositionInternal_BeforeArgs get_stringSelectPositionInternal
{
add
{

HookHandler._beforeget_stringSelectPositionInternal += value;
HookHandler.Hookget_stringSelectPositionInternal();
}
remove => HookHandler._beforeget_stringSelectPositionInternal -= value;
}
public static event Delegates.set_stringSelectPositionInternal_BeforeArgs set_stringSelectPositionInternal
{
add
{

HookHandler._beforeset_stringSelectPositionInternal += value;
HookHandler.Hookset_stringSelectPositionInternal();
}
remove => HookHandler._beforeset_stringSelectPositionInternal -= value;
}
public static event Delegates.get_hasSelection_BeforeArgs get_hasSelection
{
add
{

HookHandler._beforeget_hasSelection += value;
HookHandler.Hookget_hasSelection();
}
remove => HookHandler._beforeget_hasSelection -= value;
}
public static event Delegates.get_caretPosition_BeforeArgs get_caretPosition
{
add
{

HookHandler._beforeget_caretPosition += value;
HookHandler.Hookget_caretPosition();
}
remove => HookHandler._beforeget_caretPosition -= value;
}
public static event Delegates.set_caretPosition_BeforeArgs set_caretPosition
{
add
{

HookHandler._beforeset_caretPosition += value;
HookHandler.Hookset_caretPosition();
}
remove => HookHandler._beforeset_caretPosition -= value;
}
public static event Delegates.get_selectionAnchorPosition_BeforeArgs get_selectionAnchorPosition
{
add
{

HookHandler._beforeget_selectionAnchorPosition += value;
HookHandler.Hookget_selectionAnchorPosition();
}
remove => HookHandler._beforeget_selectionAnchorPosition -= value;
}
public static event Delegates.set_selectionAnchorPosition_BeforeArgs set_selectionAnchorPosition
{
add
{

HookHandler._beforeset_selectionAnchorPosition += value;
HookHandler.Hookset_selectionAnchorPosition();
}
remove => HookHandler._beforeset_selectionAnchorPosition -= value;
}
public static event Delegates.get_selectionFocusPosition_BeforeArgs get_selectionFocusPosition
{
add
{

HookHandler._beforeget_selectionFocusPosition += value;
HookHandler.Hookget_selectionFocusPosition();
}
remove => HookHandler._beforeget_selectionFocusPosition -= value;
}
public static event Delegates.set_selectionFocusPosition_BeforeArgs set_selectionFocusPosition
{
add
{

HookHandler._beforeset_selectionFocusPosition += value;
HookHandler.Hookset_selectionFocusPosition();
}
remove => HookHandler._beforeset_selectionFocusPosition -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.CaretBlink_BeforeArgs CaretBlink
{
add
{

HookHandler._beforeCaretBlink += value;
HookHandler.HookCaretBlink();
}
remove => HookHandler._beforeCaretBlink -= value;
}
public static event Delegates.SetCaretVisible_BeforeArgs SetCaretVisible
{
add
{

HookHandler._beforeSetCaretVisible += value;
HookHandler.HookSetCaretVisible();
}
remove => HookHandler._beforeSetCaretVisible -= value;
}
public static event Delegates.SetCaretActive_BeforeArgs SetCaretActive
{
add
{

HookHandler._beforeSetCaretActive += value;
HookHandler.HookSetCaretActive();
}
remove => HookHandler._beforeSetCaretActive -= value;
}
public static event Delegates.OnFocus_BeforeArgs OnFocus
{
add
{

HookHandler._beforeOnFocus += value;
HookHandler.HookOnFocus();
}
remove => HookHandler._beforeOnFocus -= value;
}
public static event Delegates.SelectAll_BeforeArgs SelectAll
{
add
{

HookHandler._beforeSelectAll += value;
HookHandler.HookSelectAll();
}
remove => HookHandler._beforeSelectAll -= value;
}
public static event Delegates.MoveTextEnd_BeforeArgs MoveTextEnd
{
add
{

HookHandler._beforeMoveTextEnd += value;
HookHandler.HookMoveTextEnd();
}
remove => HookHandler._beforeMoveTextEnd -= value;
}
public static event Delegates.MoveTextStart_BeforeArgs MoveTextStart
{
add
{

HookHandler._beforeMoveTextStart += value;
HookHandler.HookMoveTextStart();
}
remove => HookHandler._beforeMoveTextStart -= value;
}
public static event Delegates.get_clipboard_BeforeArgs get_clipboard
{
add
{

HookHandler._beforeget_clipboard += value;
HookHandler.Hookget_clipboard();
}
remove => HookHandler._beforeget_clipboard -= value;
}
public static event Delegates.set_clipboard_BeforeArgs set_clipboard
{
add
{

HookHandler._beforeset_clipboard += value;
HookHandler.Hookset_clipboard();
}
remove => HookHandler._beforeset_clipboard -= value;
}
public static event Delegates.InPlaceEditing_BeforeArgs InPlaceEditing
{
add
{

HookHandler._beforeInPlaceEditing += value;
HookHandler.HookInPlaceEditing();
}
remove => HookHandler._beforeInPlaceEditing -= value;
}
public static event Delegates.LateUpdate_BeforeArgs LateUpdate
{
add
{

HookHandler._beforeLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._beforeLateUpdate -= value;
}
public static event Delegates.GetCharacterIndexFromPosition_BeforeArgs GetCharacterIndexFromPosition
{
add
{

HookHandler._beforeGetCharacterIndexFromPosition += value;
HookHandler.HookGetCharacterIndexFromPosition();
}
remove => HookHandler._beforeGetCharacterIndexFromPosition -= value;
}
public static event Delegates.MayDrag_BeforeArgs MayDrag
{
add
{

HookHandler._beforeMayDrag += value;
HookHandler.HookMayDrag();
}
remove => HookHandler._beforeMayDrag -= value;
}
public static event Delegates.OnBeginDrag_BeforeArgs OnBeginDrag
{
add
{

HookHandler._beforeOnBeginDrag += value;
HookHandler.HookOnBeginDrag();
}
remove => HookHandler._beforeOnBeginDrag -= value;
}
public static event Delegates.OnDrag_BeforeArgs OnDrag
{
add
{

HookHandler._beforeOnDrag += value;
HookHandler.HookOnDrag();
}
remove => HookHandler._beforeOnDrag -= value;
}
public static event Delegates.MouseDragOutsideRect_BeforeArgs MouseDragOutsideRect
{
add
{

HookHandler._beforeMouseDragOutsideRect += value;
HookHandler.HookMouseDragOutsideRect();
}
remove => HookHandler._beforeMouseDragOutsideRect -= value;
}
public static event Delegates.OnEndDrag_BeforeArgs OnEndDrag
{
add
{

HookHandler._beforeOnEndDrag += value;
HookHandler.HookOnEndDrag();
}
remove => HookHandler._beforeOnEndDrag -= value;
}
public static event Delegates.OnPointerDown_BeforeArgs OnPointerDown
{
add
{

HookHandler._beforeOnPointerDown += value;
HookHandler.HookOnPointerDown();
}
remove => HookHandler._beforeOnPointerDown -= value;
}
public static event Delegates.IsValidChar_BeforeArgs IsValidChar
{
add
{

HookHandler._beforeIsValidChar += value;
HookHandler.HookIsValidChar();
}
remove => HookHandler._beforeIsValidChar -= value;
}
public static event Delegates.ProcessEvent_BeforeArgs ProcessEvent
{
add
{

HookHandler._beforeProcessEvent += value;
HookHandler.HookProcessEvent();
}
remove => HookHandler._beforeProcessEvent -= value;
}
public static event Delegates.OnUpdateSelected_BeforeArgs OnUpdateSelected
{
add
{

HookHandler._beforeOnUpdateSelected += value;
HookHandler.HookOnUpdateSelected();
}
remove => HookHandler._beforeOnUpdateSelected -= value;
}
public static event Delegates.GetSelectedString_BeforeArgs GetSelectedString
{
add
{

HookHandler._beforeGetSelectedString += value;
HookHandler.HookGetSelectedString();
}
remove => HookHandler._beforeGetSelectedString -= value;
}
public static event Delegates.FindtNextWordBegin_BeforeArgs FindtNextWordBegin
{
add
{

HookHandler._beforeFindtNextWordBegin += value;
HookHandler.HookFindtNextWordBegin();
}
remove => HookHandler._beforeFindtNextWordBegin -= value;
}
public static event Delegates.MoveRight_BeforeArgs MoveRight
{
add
{

HookHandler._beforeMoveRight += value;
HookHandler.HookMoveRight();
}
remove => HookHandler._beforeMoveRight -= value;
}
public static event Delegates.FindtPrevWordBegin_BeforeArgs FindtPrevWordBegin
{
add
{

HookHandler._beforeFindtPrevWordBegin += value;
HookHandler.HookFindtPrevWordBegin();
}
remove => HookHandler._beforeFindtPrevWordBegin -= value;
}
public static event Delegates.MoveLeft_BeforeArgs MoveLeft
{
add
{

HookHandler._beforeMoveLeft += value;
HookHandler.HookMoveLeft();
}
remove => HookHandler._beforeMoveLeft -= value;
}
public static event Delegates.LineUpCharacterPosition_BeforeArgs LineUpCharacterPosition
{
add
{

HookHandler._beforeLineUpCharacterPosition += value;
HookHandler.HookLineUpCharacterPosition();
}
remove => HookHandler._beforeLineUpCharacterPosition -= value;
}
public static event Delegates.LineDownCharacterPosition_BeforeArgs LineDownCharacterPosition
{
add
{

HookHandler._beforeLineDownCharacterPosition += value;
HookHandler.HookLineDownCharacterPosition();
}
remove => HookHandler._beforeLineDownCharacterPosition -= value;
}
public static event Delegates.MoveDown_bool_BeforeArgs MoveDown_bool
{
add
{

HookHandler._beforeMoveDown_bool += value;
HookHandler.HookMoveDown_bool();
}
remove => HookHandler._beforeMoveDown_bool -= value;
}
public static event Delegates.MoveDown_bool_bool_BeforeArgs MoveDown_bool_bool
{
add
{

HookHandler._beforeMoveDown_bool_bool += value;
HookHandler.HookMoveDown_bool_bool();
}
remove => HookHandler._beforeMoveDown_bool_bool -= value;
}
public static event Delegates.MoveUp_bool_BeforeArgs MoveUp_bool
{
add
{

HookHandler._beforeMoveUp_bool += value;
HookHandler.HookMoveUp_bool();
}
remove => HookHandler._beforeMoveUp_bool -= value;
}
public static event Delegates.MoveUp_bool_bool_BeforeArgs MoveUp_bool_bool
{
add
{

HookHandler._beforeMoveUp_bool_bool += value;
HookHandler.HookMoveUp_bool_bool();
}
remove => HookHandler._beforeMoveUp_bool_bool -= value;
}
public static event Delegates.Delete_BeforeArgs Delete
{
add
{

HookHandler._beforeDelete += value;
HookHandler.HookDelete();
}
remove => HookHandler._beforeDelete -= value;
}
public static event Delegates.ForwardSpace_BeforeArgs ForwardSpace
{
add
{

HookHandler._beforeForwardSpace += value;
HookHandler.HookForwardSpace();
}
remove => HookHandler._beforeForwardSpace -= value;
}
public static event Delegates.Backspace_BeforeArgs Backspace
{
add
{

HookHandler._beforeBackspace += value;
HookHandler.HookBackspace();
}
remove => HookHandler._beforeBackspace -= value;
}
public static event Delegates.Insert_BeforeArgs Insert
{
add
{

HookHandler._beforeInsert += value;
HookHandler.HookInsert();
}
remove => HookHandler._beforeInsert -= value;
}
public static event Delegates.SendOnValueChangedAndUpdateLabel_BeforeArgs SendOnValueChangedAndUpdateLabel
{
add
{

HookHandler._beforeSendOnValueChangedAndUpdateLabel += value;
HookHandler.HookSendOnValueChangedAndUpdateLabel();
}
remove => HookHandler._beforeSendOnValueChangedAndUpdateLabel -= value;
}
public static event Delegates.SendOnValueChanged_BeforeArgs SendOnValueChanged
{
add
{

HookHandler._beforeSendOnValueChanged += value;
HookHandler.HookSendOnValueChanged();
}
remove => HookHandler._beforeSendOnValueChanged -= value;
}
public static event Delegates.SendOnSubmit_BeforeArgs SendOnSubmit
{
add
{

HookHandler._beforeSendOnSubmit += value;
HookHandler.HookSendOnSubmit();
}
remove => HookHandler._beforeSendOnSubmit -= value;
}
public static event Delegates.SendOnFocusLost_BeforeArgs SendOnFocusLost
{
add
{

HookHandler._beforeSendOnFocusLost += value;
HookHandler.HookSendOnFocusLost();
}
remove => HookHandler._beforeSendOnFocusLost -= value;
}
public static event Delegates.Append_string_BeforeArgs Append_string
{
add
{

HookHandler._beforeAppend_string += value;
HookHandler.HookAppend_string();
}
remove => HookHandler._beforeAppend_string -= value;
}
public static event Delegates.Append_Char_BeforeArgs Append_Char
{
add
{

HookHandler._beforeAppend_Char += value;
HookHandler.HookAppend_Char();
}
remove => HookHandler._beforeAppend_Char -= value;
}
public static event Delegates.UpdateLabel_BeforeArgs UpdateLabel
{
add
{

HookHandler._beforeUpdateLabel += value;
HookHandler.HookUpdateLabel();
}
remove => HookHandler._beforeUpdateLabel -= value;
}
public static event Delegates.GetCaretPositionFromStringIndex_BeforeArgs GetCaretPositionFromStringIndex
{
add
{

HookHandler._beforeGetCaretPositionFromStringIndex += value;
HookHandler.HookGetCaretPositionFromStringIndex();
}
remove => HookHandler._beforeGetCaretPositionFromStringIndex -= value;
}
public static event Delegates.GetStringIndexFromCaretPosition_BeforeArgs GetStringIndexFromCaretPosition
{
add
{

HookHandler._beforeGetStringIndexFromCaretPosition += value;
HookHandler.HookGetStringIndexFromCaretPosition();
}
remove => HookHandler._beforeGetStringIndexFromCaretPosition -= value;
}
public static event Delegates.ForceLabelUpdate_BeforeArgs ForceLabelUpdate
{
add
{

HookHandler._beforeForceLabelUpdate += value;
HookHandler.HookForceLabelUpdate();
}
remove => HookHandler._beforeForceLabelUpdate -= value;
}
public static event Delegates.MarkGeometryAsDirty_BeforeArgs MarkGeometryAsDirty
{
add
{

HookHandler._beforeMarkGeometryAsDirty += value;
HookHandler.HookMarkGeometryAsDirty();
}
remove => HookHandler._beforeMarkGeometryAsDirty -= value;
}
public static event Delegates.Rebuild_BeforeArgs Rebuild
{
add
{

HookHandler._beforeRebuild += value;
HookHandler.HookRebuild();
}
remove => HookHandler._beforeRebuild -= value;
}
public static event Delegates.LayoutComplete_BeforeArgs LayoutComplete
{
add
{

HookHandler._beforeLayoutComplete += value;
HookHandler.HookLayoutComplete();
}
remove => HookHandler._beforeLayoutComplete -= value;
}
public static event Delegates.GraphicUpdateComplete_BeforeArgs GraphicUpdateComplete
{
add
{

HookHandler._beforeGraphicUpdateComplete += value;
HookHandler.HookGraphicUpdateComplete();
}
remove => HookHandler._beforeGraphicUpdateComplete -= value;
}
public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
{
add
{

HookHandler._beforeUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._beforeUpdateGeometry -= value;
}
public static event Delegates.AssignPositioningIfNeeded_BeforeArgs AssignPositioningIfNeeded
{
add
{

HookHandler._beforeAssignPositioningIfNeeded += value;
HookHandler.HookAssignPositioningIfNeeded();
}
remove => HookHandler._beforeAssignPositioningIfNeeded -= value;
}
public static event Delegates.OnFillVBO_BeforeArgs OnFillVBO
{
add
{

HookHandler._beforeOnFillVBO += value;
HookHandler.HookOnFillVBO();
}
remove => HookHandler._beforeOnFillVBO -= value;
}
public static event Delegates.GenerateCaret_BeforeArgs GenerateCaret
{
add
{

HookHandler._beforeGenerateCaret += value;
HookHandler.HookGenerateCaret();
}
remove => HookHandler._beforeGenerateCaret -= value;
}
public static event Delegates.CreateCursorVerts_BeforeArgs CreateCursorVerts
{
add
{

HookHandler._beforeCreateCursorVerts += value;
HookHandler.HookCreateCursorVerts();
}
remove => HookHandler._beforeCreateCursorVerts -= value;
}
public static event Delegates.GenerateHightlight_BeforeArgs GenerateHightlight
{
add
{

HookHandler._beforeGenerateHightlight += value;
HookHandler.HookGenerateHightlight();
}
remove => HookHandler._beforeGenerateHightlight -= value;
}
public static event Delegates.AdjustRectTransformRelativeToViewport_BeforeArgs AdjustRectTransformRelativeToViewport
{
add
{

HookHandler._beforeAdjustRectTransformRelativeToViewport += value;
HookHandler.HookAdjustRectTransformRelativeToViewport();
}
remove => HookHandler._beforeAdjustRectTransformRelativeToViewport -= value;
}
public static event Delegates.Validate_BeforeArgs Validate
{
add
{

HookHandler._beforeValidate += value;
HookHandler.HookValidate();
}
remove => HookHandler._beforeValidate -= value;
}
public static event Delegates.ActivateInputField_BeforeArgs ActivateInputField
{
add
{

HookHandler._beforeActivateInputField += value;
HookHandler.HookActivateInputField();
}
remove => HookHandler._beforeActivateInputField -= value;
}
public static event Delegates.ActivateInputFieldInternal_BeforeArgs ActivateInputFieldInternal
{
add
{

HookHandler._beforeActivateInputFieldInternal += value;
HookHandler.HookActivateInputFieldInternal();
}
remove => HookHandler._beforeActivateInputFieldInternal -= value;
}
public static event Delegates.OnSelect_BeforeArgs OnSelect
{
add
{

HookHandler._beforeOnSelect += value;
HookHandler.HookOnSelect();
}
remove => HookHandler._beforeOnSelect -= value;
}
public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
{
add
{

HookHandler._beforeOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._beforeOnPointerClick -= value;
}
public static event Delegates.DeactivateInputField_BeforeArgs DeactivateInputField
{
add
{

HookHandler._beforeDeactivateInputField += value;
HookHandler.HookDeactivateInputField();
}
remove => HookHandler._beforeDeactivateInputField -= value;
}
public static event Delegates.OnDeselect_BeforeArgs OnDeselect
{
add
{

HookHandler._beforeOnDeselect += value;
HookHandler.HookOnDeselect();
}
remove => HookHandler._beforeOnDeselect -= value;
}
public static event Delegates.OnSubmit_BeforeArgs OnSubmit
{
add
{

HookHandler._beforeOnSubmit += value;
HookHandler.HookOnSubmit();
}
remove => HookHandler._beforeOnSubmit -= value;
}
public static event Delegates.EnforceContentType_BeforeArgs EnforceContentType
{
add
{

HookHandler._beforeEnforceContentType += value;
HookHandler.HookEnforceContentType();
}
remove => HookHandler._beforeEnforceContentType -= value;
}
public static event Delegates.SetTextComponentWrapMode_BeforeArgs SetTextComponentWrapMode
{
add
{

HookHandler._beforeSetTextComponentWrapMode += value;
HookHandler.HookSetTextComponentWrapMode();
}
remove => HookHandler._beforeSetTextComponentWrapMode -= value;
}
public static event Delegates.SetTextComponentRichTextMode_BeforeArgs SetTextComponentRichTextMode
{
add
{

HookHandler._beforeSetTextComponentRichTextMode += value;
HookHandler.HookSetTextComponentRichTextMode();
}
remove => HookHandler._beforeSetTextComponentRichTextMode -= value;
}
public static event Delegates.SetToCustomIfContentTypeIsNot_BeforeArgs SetToCustomIfContentTypeIsNot
{
add
{

HookHandler._beforeSetToCustomIfContentTypeIsNot += value;
HookHandler.HookSetToCustomIfContentTypeIsNot();
}
remove => HookHandler._beforeSetToCustomIfContentTypeIsNot -= value;
}
public static event Delegates.SetToCustom_BeforeArgs SetToCustom
{
add
{

HookHandler._beforeSetToCustom += value;
HookHandler.HookSetToCustom();
}
remove => HookHandler._beforeSetToCustom -= value;
}
public static event Delegates.get_transform_BeforeArgs get_transform
{
add
{

HookHandler._beforeget_transform += value;
HookHandler.Hookget_transform();
}
remove => HookHandler._beforeget_transform -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_mesh_AfterArgs get_mesh
{
add
{

HookHandler._afterget_mesh += value;
HookHandler.Hookget_mesh();
}
remove => HookHandler._afterget_mesh -= value;
}
public static event Delegates.set_shouldHideMobileInput_AfterArgs set_shouldHideMobileInput
{
add
{

HookHandler._afterset_shouldHideMobileInput += value;
HookHandler.Hookset_shouldHideMobileInput();
}
remove => HookHandler._afterset_shouldHideMobileInput -= value;
}
public static event Delegates.get_shouldHideMobileInput_AfterArgs get_shouldHideMobileInput
{
add
{

HookHandler._afterget_shouldHideMobileInput += value;
HookHandler.Hookget_shouldHideMobileInput();
}
remove => HookHandler._afterget_shouldHideMobileInput -= value;
}
public static event Delegates.get_text_AfterArgs get_text
{
add
{

HookHandler._afterget_text += value;
HookHandler.Hookget_text();
}
remove => HookHandler._afterget_text -= value;
}
public static event Delegates.set_text_AfterArgs set_text
{
add
{

HookHandler._afterset_text += value;
HookHandler.Hookset_text();
}
remove => HookHandler._afterset_text -= value;
}
public static event Delegates.get_isFocused_AfterArgs get_isFocused
{
add
{

HookHandler._afterget_isFocused += value;
HookHandler.Hookget_isFocused();
}
remove => HookHandler._afterget_isFocused -= value;
}
public static event Delegates.get_caretBlinkRate_AfterArgs get_caretBlinkRate
{
add
{

HookHandler._afterget_caretBlinkRate += value;
HookHandler.Hookget_caretBlinkRate();
}
remove => HookHandler._afterget_caretBlinkRate -= value;
}
public static event Delegates.set_caretBlinkRate_AfterArgs set_caretBlinkRate
{
add
{

HookHandler._afterset_caretBlinkRate += value;
HookHandler.Hookset_caretBlinkRate();
}
remove => HookHandler._afterset_caretBlinkRate -= value;
}
public static event Delegates.get_caretWidth_AfterArgs get_caretWidth
{
add
{

HookHandler._afterget_caretWidth += value;
HookHandler.Hookget_caretWidth();
}
remove => HookHandler._afterget_caretWidth -= value;
}
public static event Delegates.set_caretWidth_AfterArgs set_caretWidth
{
add
{

HookHandler._afterset_caretWidth += value;
HookHandler.Hookset_caretWidth();
}
remove => HookHandler._afterset_caretWidth -= value;
}
public static event Delegates.get_textViewport_AfterArgs get_textViewport
{
add
{

HookHandler._afterget_textViewport += value;
HookHandler.Hookget_textViewport();
}
remove => HookHandler._afterget_textViewport -= value;
}
public static event Delegates.set_textViewport_AfterArgs set_textViewport
{
add
{

HookHandler._afterset_textViewport += value;
HookHandler.Hookset_textViewport();
}
remove => HookHandler._afterset_textViewport -= value;
}
public static event Delegates.get_textComponent_AfterArgs get_textComponent
{
add
{

HookHandler._afterget_textComponent += value;
HookHandler.Hookget_textComponent();
}
remove => HookHandler._afterget_textComponent -= value;
}
public static event Delegates.set_textComponent_AfterArgs set_textComponent
{
add
{

HookHandler._afterset_textComponent += value;
HookHandler.Hookset_textComponent();
}
remove => HookHandler._afterset_textComponent -= value;
}
public static event Delegates.get_placeholder_AfterArgs get_placeholder
{
add
{

HookHandler._afterget_placeholder += value;
HookHandler.Hookget_placeholder();
}
remove => HookHandler._afterget_placeholder -= value;
}
public static event Delegates.set_placeholder_AfterArgs set_placeholder
{
add
{

HookHandler._afterset_placeholder += value;
HookHandler.Hookset_placeholder();
}
remove => HookHandler._afterset_placeholder -= value;
}
public static event Delegates.get_caretColor_AfterArgs get_caretColor
{
add
{

HookHandler._afterget_caretColor += value;
HookHandler.Hookget_caretColor();
}
remove => HookHandler._afterget_caretColor -= value;
}
public static event Delegates.set_caretColor_AfterArgs set_caretColor
{
add
{

HookHandler._afterset_caretColor += value;
HookHandler.Hookset_caretColor();
}
remove => HookHandler._afterset_caretColor -= value;
}
public static event Delegates.get_customCaretColor_AfterArgs get_customCaretColor
{
add
{

HookHandler._afterget_customCaretColor += value;
HookHandler.Hookget_customCaretColor();
}
remove => HookHandler._afterget_customCaretColor -= value;
}
public static event Delegates.set_customCaretColor_AfterArgs set_customCaretColor
{
add
{

HookHandler._afterset_customCaretColor += value;
HookHandler.Hookset_customCaretColor();
}
remove => HookHandler._afterset_customCaretColor -= value;
}
public static event Delegates.get_selectionColor_AfterArgs get_selectionColor
{
add
{

HookHandler._afterget_selectionColor += value;
HookHandler.Hookget_selectionColor();
}
remove => HookHandler._afterget_selectionColor -= value;
}
public static event Delegates.set_selectionColor_AfterArgs set_selectionColor
{
add
{

HookHandler._afterset_selectionColor += value;
HookHandler.Hookset_selectionColor();
}
remove => HookHandler._afterset_selectionColor -= value;
}
public static event Delegates.get_characterLimit_AfterArgs get_characterLimit
{
add
{

HookHandler._afterget_characterLimit += value;
HookHandler.Hookget_characterLimit();
}
remove => HookHandler._afterget_characterLimit -= value;
}
public static event Delegates.set_characterLimit_AfterArgs set_characterLimit
{
add
{

HookHandler._afterset_characterLimit += value;
HookHandler.Hookset_characterLimit();
}
remove => HookHandler._afterset_characterLimit -= value;
}
public static event Delegates.get_keyboardType_AfterArgs get_keyboardType
{
add
{

HookHandler._afterget_keyboardType += value;
HookHandler.Hookget_keyboardType();
}
remove => HookHandler._afterget_keyboardType -= value;
}
public static event Delegates.set_keyboardType_AfterArgs set_keyboardType
{
add
{

HookHandler._afterset_keyboardType += value;
HookHandler.Hookset_keyboardType();
}
remove => HookHandler._afterset_keyboardType -= value;
}
public static event Delegates.get_readOnly_AfterArgs get_readOnly
{
add
{

HookHandler._afterget_readOnly += value;
HookHandler.Hookget_readOnly();
}
remove => HookHandler._afterget_readOnly -= value;
}
public static event Delegates.set_readOnly_AfterArgs set_readOnly
{
add
{

HookHandler._afterset_readOnly += value;
HookHandler.Hookset_readOnly();
}
remove => HookHandler._afterset_readOnly -= value;
}
public static event Delegates.get_richText_AfterArgs get_richText
{
add
{

HookHandler._afterget_richText += value;
HookHandler.Hookget_richText();
}
remove => HookHandler._afterget_richText -= value;
}
public static event Delegates.set_richText_AfterArgs set_richText
{
add
{

HookHandler._afterset_richText += value;
HookHandler.Hookset_richText();
}
remove => HookHandler._afterset_richText -= value;
}
public static event Delegates.get_multiLine_AfterArgs get_multiLine
{
add
{

HookHandler._afterget_multiLine += value;
HookHandler.Hookget_multiLine();
}
remove => HookHandler._afterget_multiLine -= value;
}
public static event Delegates.get_asteriskChar_AfterArgs get_asteriskChar
{
add
{

HookHandler._afterget_asteriskChar += value;
HookHandler.Hookget_asteriskChar();
}
remove => HookHandler._afterget_asteriskChar -= value;
}
public static event Delegates.set_asteriskChar_AfterArgs set_asteriskChar
{
add
{

HookHandler._afterset_asteriskChar += value;
HookHandler.Hookset_asteriskChar();
}
remove => HookHandler._afterset_asteriskChar -= value;
}
public static event Delegates.get_wasCanceled_AfterArgs get_wasCanceled
{
add
{

HookHandler._afterget_wasCanceled += value;
HookHandler.Hookget_wasCanceled();
}
remove => HookHandler._afterget_wasCanceled -= value;
}
public static event Delegates.ClampPos_AfterArgs ClampPos
{
add
{

HookHandler._afterClampPos += value;
HookHandler.HookClampPos();
}
remove => HookHandler._afterClampPos -= value;
}
public static event Delegates.get_caretPositionInternal_AfterArgs get_caretPositionInternal
{
add
{

HookHandler._afterget_caretPositionInternal += value;
HookHandler.Hookget_caretPositionInternal();
}
remove => HookHandler._afterget_caretPositionInternal -= value;
}
public static event Delegates.set_caretPositionInternal_AfterArgs set_caretPositionInternal
{
add
{

HookHandler._afterset_caretPositionInternal += value;
HookHandler.Hookset_caretPositionInternal();
}
remove => HookHandler._afterset_caretPositionInternal -= value;
}
public static event Delegates.get_stringPositionInternal_AfterArgs get_stringPositionInternal
{
add
{

HookHandler._afterget_stringPositionInternal += value;
HookHandler.Hookget_stringPositionInternal();
}
remove => HookHandler._afterget_stringPositionInternal -= value;
}
public static event Delegates.set_stringPositionInternal_AfterArgs set_stringPositionInternal
{
add
{

HookHandler._afterset_stringPositionInternal += value;
HookHandler.Hookset_stringPositionInternal();
}
remove => HookHandler._afterset_stringPositionInternal -= value;
}
public static event Delegates.get_caretSelectPositionInternal_AfterArgs get_caretSelectPositionInternal
{
add
{

HookHandler._afterget_caretSelectPositionInternal += value;
HookHandler.Hookget_caretSelectPositionInternal();
}
remove => HookHandler._afterget_caretSelectPositionInternal -= value;
}
public static event Delegates.set_caretSelectPositionInternal_AfterArgs set_caretSelectPositionInternal
{
add
{

HookHandler._afterset_caretSelectPositionInternal += value;
HookHandler.Hookset_caretSelectPositionInternal();
}
remove => HookHandler._afterset_caretSelectPositionInternal -= value;
}
public static event Delegates.get_stringSelectPositionInternal_AfterArgs get_stringSelectPositionInternal
{
add
{

HookHandler._afterget_stringSelectPositionInternal += value;
HookHandler.Hookget_stringSelectPositionInternal();
}
remove => HookHandler._afterget_stringSelectPositionInternal -= value;
}
public static event Delegates.set_stringSelectPositionInternal_AfterArgs set_stringSelectPositionInternal
{
add
{

HookHandler._afterset_stringSelectPositionInternal += value;
HookHandler.Hookset_stringSelectPositionInternal();
}
remove => HookHandler._afterset_stringSelectPositionInternal -= value;
}
public static event Delegates.get_hasSelection_AfterArgs get_hasSelection
{
add
{

HookHandler._afterget_hasSelection += value;
HookHandler.Hookget_hasSelection();
}
remove => HookHandler._afterget_hasSelection -= value;
}
public static event Delegates.get_caretPosition_AfterArgs get_caretPosition
{
add
{

HookHandler._afterget_caretPosition += value;
HookHandler.Hookget_caretPosition();
}
remove => HookHandler._afterget_caretPosition -= value;
}
public static event Delegates.set_caretPosition_AfterArgs set_caretPosition
{
add
{

HookHandler._afterset_caretPosition += value;
HookHandler.Hookset_caretPosition();
}
remove => HookHandler._afterset_caretPosition -= value;
}
public static event Delegates.get_selectionAnchorPosition_AfterArgs get_selectionAnchorPosition
{
add
{

HookHandler._afterget_selectionAnchorPosition += value;
HookHandler.Hookget_selectionAnchorPosition();
}
remove => HookHandler._afterget_selectionAnchorPosition -= value;
}
public static event Delegates.set_selectionAnchorPosition_AfterArgs set_selectionAnchorPosition
{
add
{

HookHandler._afterset_selectionAnchorPosition += value;
HookHandler.Hookset_selectionAnchorPosition();
}
remove => HookHandler._afterset_selectionAnchorPosition -= value;
}
public static event Delegates.get_selectionFocusPosition_AfterArgs get_selectionFocusPosition
{
add
{

HookHandler._afterget_selectionFocusPosition += value;
HookHandler.Hookget_selectionFocusPosition();
}
remove => HookHandler._afterget_selectionFocusPosition -= value;
}
public static event Delegates.set_selectionFocusPosition_AfterArgs set_selectionFocusPosition
{
add
{

HookHandler._afterset_selectionFocusPosition += value;
HookHandler.Hookset_selectionFocusPosition();
}
remove => HookHandler._afterset_selectionFocusPosition -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.SetCaretVisible_AfterArgs SetCaretVisible
{
add
{

HookHandler._afterSetCaretVisible += value;
HookHandler.HookSetCaretVisible();
}
remove => HookHandler._afterSetCaretVisible -= value;
}
public static event Delegates.SetCaretActive_AfterArgs SetCaretActive
{
add
{

HookHandler._afterSetCaretActive += value;
HookHandler.HookSetCaretActive();
}
remove => HookHandler._afterSetCaretActive -= value;
}
public static event Delegates.OnFocus_AfterArgs OnFocus
{
add
{

HookHandler._afterOnFocus += value;
HookHandler.HookOnFocus();
}
remove => HookHandler._afterOnFocus -= value;
}
public static event Delegates.SelectAll_AfterArgs SelectAll
{
add
{

HookHandler._afterSelectAll += value;
HookHandler.HookSelectAll();
}
remove => HookHandler._afterSelectAll -= value;
}
public static event Delegates.MoveTextEnd_AfterArgs MoveTextEnd
{
add
{

HookHandler._afterMoveTextEnd += value;
HookHandler.HookMoveTextEnd();
}
remove => HookHandler._afterMoveTextEnd -= value;
}
public static event Delegates.MoveTextStart_AfterArgs MoveTextStart
{
add
{

HookHandler._afterMoveTextStart += value;
HookHandler.HookMoveTextStart();
}
remove => HookHandler._afterMoveTextStart -= value;
}
public static event Delegates.get_clipboard_AfterArgs get_clipboard
{
add
{

HookHandler._afterget_clipboard += value;
HookHandler.Hookget_clipboard();
}
remove => HookHandler._afterget_clipboard -= value;
}
public static event Delegates.set_clipboard_AfterArgs set_clipboard
{
add
{

HookHandler._afterset_clipboard += value;
HookHandler.Hookset_clipboard();
}
remove => HookHandler._afterset_clipboard -= value;
}
public static event Delegates.InPlaceEditing_AfterArgs InPlaceEditing
{
add
{

HookHandler._afterInPlaceEditing += value;
HookHandler.HookInPlaceEditing();
}
remove => HookHandler._afterInPlaceEditing -= value;
}
public static event Delegates.LateUpdate_AfterArgs LateUpdate
{
add
{

HookHandler._afterLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._afterLateUpdate -= value;
}
public static event Delegates.GetCharacterIndexFromPosition_AfterArgs GetCharacterIndexFromPosition
{
add
{

HookHandler._afterGetCharacterIndexFromPosition += value;
HookHandler.HookGetCharacterIndexFromPosition();
}
remove => HookHandler._afterGetCharacterIndexFromPosition -= value;
}
public static event Delegates.MayDrag_AfterArgs MayDrag
{
add
{

HookHandler._afterMayDrag += value;
HookHandler.HookMayDrag();
}
remove => HookHandler._afterMayDrag -= value;
}
public static event Delegates.OnBeginDrag_AfterArgs OnBeginDrag
{
add
{

HookHandler._afterOnBeginDrag += value;
HookHandler.HookOnBeginDrag();
}
remove => HookHandler._afterOnBeginDrag -= value;
}
public static event Delegates.OnDrag_AfterArgs OnDrag
{
add
{

HookHandler._afterOnDrag += value;
HookHandler.HookOnDrag();
}
remove => HookHandler._afterOnDrag -= value;
}
public static event Delegates.OnEndDrag_AfterArgs OnEndDrag
{
add
{

HookHandler._afterOnEndDrag += value;
HookHandler.HookOnEndDrag();
}
remove => HookHandler._afterOnEndDrag -= value;
}
public static event Delegates.OnPointerDown_AfterArgs OnPointerDown
{
add
{

HookHandler._afterOnPointerDown += value;
HookHandler.HookOnPointerDown();
}
remove => HookHandler._afterOnPointerDown -= value;
}
public static event Delegates.IsValidChar_AfterArgs IsValidChar
{
add
{

HookHandler._afterIsValidChar += value;
HookHandler.HookIsValidChar();
}
remove => HookHandler._afterIsValidChar -= value;
}
public static event Delegates.ProcessEvent_AfterArgs ProcessEvent
{
add
{

HookHandler._afterProcessEvent += value;
HookHandler.HookProcessEvent();
}
remove => HookHandler._afterProcessEvent -= value;
}
public static event Delegates.OnUpdateSelected_AfterArgs OnUpdateSelected
{
add
{

HookHandler._afterOnUpdateSelected += value;
HookHandler.HookOnUpdateSelected();
}
remove => HookHandler._afterOnUpdateSelected -= value;
}
public static event Delegates.GetSelectedString_AfterArgs GetSelectedString
{
add
{

HookHandler._afterGetSelectedString += value;
HookHandler.HookGetSelectedString();
}
remove => HookHandler._afterGetSelectedString -= value;
}
public static event Delegates.FindtNextWordBegin_AfterArgs FindtNextWordBegin
{
add
{

HookHandler._afterFindtNextWordBegin += value;
HookHandler.HookFindtNextWordBegin();
}
remove => HookHandler._afterFindtNextWordBegin -= value;
}
public static event Delegates.MoveRight_AfterArgs MoveRight
{
add
{

HookHandler._afterMoveRight += value;
HookHandler.HookMoveRight();
}
remove => HookHandler._afterMoveRight -= value;
}
public static event Delegates.FindtPrevWordBegin_AfterArgs FindtPrevWordBegin
{
add
{

HookHandler._afterFindtPrevWordBegin += value;
HookHandler.HookFindtPrevWordBegin();
}
remove => HookHandler._afterFindtPrevWordBegin -= value;
}
public static event Delegates.MoveLeft_AfterArgs MoveLeft
{
add
{

HookHandler._afterMoveLeft += value;
HookHandler.HookMoveLeft();
}
remove => HookHandler._afterMoveLeft -= value;
}
public static event Delegates.LineUpCharacterPosition_AfterArgs LineUpCharacterPosition
{
add
{

HookHandler._afterLineUpCharacterPosition += value;
HookHandler.HookLineUpCharacterPosition();
}
remove => HookHandler._afterLineUpCharacterPosition -= value;
}
public static event Delegates.LineDownCharacterPosition_AfterArgs LineDownCharacterPosition
{
add
{

HookHandler._afterLineDownCharacterPosition += value;
HookHandler.HookLineDownCharacterPosition();
}
remove => HookHandler._afterLineDownCharacterPosition -= value;
}
public static event Delegates.MoveDown_bool_AfterArgs MoveDown_bool
{
add
{

HookHandler._afterMoveDown_bool += value;
HookHandler.HookMoveDown_bool();
}
remove => HookHandler._afterMoveDown_bool -= value;
}
public static event Delegates.MoveDown_bool_bool_AfterArgs MoveDown_bool_bool
{
add
{

HookHandler._afterMoveDown_bool_bool += value;
HookHandler.HookMoveDown_bool_bool();
}
remove => HookHandler._afterMoveDown_bool_bool -= value;
}
public static event Delegates.MoveUp_bool_AfterArgs MoveUp_bool
{
add
{

HookHandler._afterMoveUp_bool += value;
HookHandler.HookMoveUp_bool();
}
remove => HookHandler._afterMoveUp_bool -= value;
}
public static event Delegates.MoveUp_bool_bool_AfterArgs MoveUp_bool_bool
{
add
{

HookHandler._afterMoveUp_bool_bool += value;
HookHandler.HookMoveUp_bool_bool();
}
remove => HookHandler._afterMoveUp_bool_bool -= value;
}
public static event Delegates.Delete_AfterArgs Delete
{
add
{

HookHandler._afterDelete += value;
HookHandler.HookDelete();
}
remove => HookHandler._afterDelete -= value;
}
public static event Delegates.ForwardSpace_AfterArgs ForwardSpace
{
add
{

HookHandler._afterForwardSpace += value;
HookHandler.HookForwardSpace();
}
remove => HookHandler._afterForwardSpace -= value;
}
public static event Delegates.Backspace_AfterArgs Backspace
{
add
{

HookHandler._afterBackspace += value;
HookHandler.HookBackspace();
}
remove => HookHandler._afterBackspace -= value;
}
public static event Delegates.Insert_AfterArgs Insert
{
add
{

HookHandler._afterInsert += value;
HookHandler.HookInsert();
}
remove => HookHandler._afterInsert -= value;
}
public static event Delegates.SendOnValueChangedAndUpdateLabel_AfterArgs SendOnValueChangedAndUpdateLabel
{
add
{

HookHandler._afterSendOnValueChangedAndUpdateLabel += value;
HookHandler.HookSendOnValueChangedAndUpdateLabel();
}
remove => HookHandler._afterSendOnValueChangedAndUpdateLabel -= value;
}
public static event Delegates.SendOnValueChanged_AfterArgs SendOnValueChanged
{
add
{

HookHandler._afterSendOnValueChanged += value;
HookHandler.HookSendOnValueChanged();
}
remove => HookHandler._afterSendOnValueChanged -= value;
}
public static event Delegates.SendOnSubmit_AfterArgs SendOnSubmit
{
add
{

HookHandler._afterSendOnSubmit += value;
HookHandler.HookSendOnSubmit();
}
remove => HookHandler._afterSendOnSubmit -= value;
}
public static event Delegates.SendOnFocusLost_AfterArgs SendOnFocusLost
{
add
{

HookHandler._afterSendOnFocusLost += value;
HookHandler.HookSendOnFocusLost();
}
remove => HookHandler._afterSendOnFocusLost -= value;
}
public static event Delegates.Append_string_AfterArgs Append_string
{
add
{

HookHandler._afterAppend_string += value;
HookHandler.HookAppend_string();
}
remove => HookHandler._afterAppend_string -= value;
}
public static event Delegates.Append_Char_AfterArgs Append_Char
{
add
{

HookHandler._afterAppend_Char += value;
HookHandler.HookAppend_Char();
}
remove => HookHandler._afterAppend_Char -= value;
}
public static event Delegates.UpdateLabel_AfterArgs UpdateLabel
{
add
{

HookHandler._afterUpdateLabel += value;
HookHandler.HookUpdateLabel();
}
remove => HookHandler._afterUpdateLabel -= value;
}
public static event Delegates.GetCaretPositionFromStringIndex_AfterArgs GetCaretPositionFromStringIndex
{
add
{

HookHandler._afterGetCaretPositionFromStringIndex += value;
HookHandler.HookGetCaretPositionFromStringIndex();
}
remove => HookHandler._afterGetCaretPositionFromStringIndex -= value;
}
public static event Delegates.GetStringIndexFromCaretPosition_AfterArgs GetStringIndexFromCaretPosition
{
add
{

HookHandler._afterGetStringIndexFromCaretPosition += value;
HookHandler.HookGetStringIndexFromCaretPosition();
}
remove => HookHandler._afterGetStringIndexFromCaretPosition -= value;
}
public static event Delegates.ForceLabelUpdate_AfterArgs ForceLabelUpdate
{
add
{

HookHandler._afterForceLabelUpdate += value;
HookHandler.HookForceLabelUpdate();
}
remove => HookHandler._afterForceLabelUpdate -= value;
}
public static event Delegates.MarkGeometryAsDirty_AfterArgs MarkGeometryAsDirty
{
add
{

HookHandler._afterMarkGeometryAsDirty += value;
HookHandler.HookMarkGeometryAsDirty();
}
remove => HookHandler._afterMarkGeometryAsDirty -= value;
}
public static event Delegates.Rebuild_AfterArgs Rebuild
{
add
{

HookHandler._afterRebuild += value;
HookHandler.HookRebuild();
}
remove => HookHandler._afterRebuild -= value;
}
public static event Delegates.LayoutComplete_AfterArgs LayoutComplete
{
add
{

HookHandler._afterLayoutComplete += value;
HookHandler.HookLayoutComplete();
}
remove => HookHandler._afterLayoutComplete -= value;
}
public static event Delegates.GraphicUpdateComplete_AfterArgs GraphicUpdateComplete
{
add
{

HookHandler._afterGraphicUpdateComplete += value;
HookHandler.HookGraphicUpdateComplete();
}
remove => HookHandler._afterGraphicUpdateComplete -= value;
}
public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
{
add
{

HookHandler._afterUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._afterUpdateGeometry -= value;
}
public static event Delegates.AssignPositioningIfNeeded_AfterArgs AssignPositioningIfNeeded
{
add
{

HookHandler._afterAssignPositioningIfNeeded += value;
HookHandler.HookAssignPositioningIfNeeded();
}
remove => HookHandler._afterAssignPositioningIfNeeded -= value;
}
public static event Delegates.OnFillVBO_AfterArgs OnFillVBO
{
add
{

HookHandler._afterOnFillVBO += value;
HookHandler.HookOnFillVBO();
}
remove => HookHandler._afterOnFillVBO -= value;
}
public static event Delegates.GenerateCaret_AfterArgs GenerateCaret
{
add
{

HookHandler._afterGenerateCaret += value;
HookHandler.HookGenerateCaret();
}
remove => HookHandler._afterGenerateCaret -= value;
}
public static event Delegates.CreateCursorVerts_AfterArgs CreateCursorVerts
{
add
{

HookHandler._afterCreateCursorVerts += value;
HookHandler.HookCreateCursorVerts();
}
remove => HookHandler._afterCreateCursorVerts -= value;
}
public static event Delegates.GenerateHightlight_AfterArgs GenerateHightlight
{
add
{

HookHandler._afterGenerateHightlight += value;
HookHandler.HookGenerateHightlight();
}
remove => HookHandler._afterGenerateHightlight -= value;
}
public static event Delegates.AdjustRectTransformRelativeToViewport_AfterArgs AdjustRectTransformRelativeToViewport
{
add
{

HookHandler._afterAdjustRectTransformRelativeToViewport += value;
HookHandler.HookAdjustRectTransformRelativeToViewport();
}
remove => HookHandler._afterAdjustRectTransformRelativeToViewport -= value;
}
public static event Delegates.Validate_AfterArgs Validate
{
add
{

HookHandler._afterValidate += value;
HookHandler.HookValidate();
}
remove => HookHandler._afterValidate -= value;
}
public static event Delegates.ActivateInputField_AfterArgs ActivateInputField
{
add
{

HookHandler._afterActivateInputField += value;
HookHandler.HookActivateInputField();
}
remove => HookHandler._afterActivateInputField -= value;
}
public static event Delegates.ActivateInputFieldInternal_AfterArgs ActivateInputFieldInternal
{
add
{

HookHandler._afterActivateInputFieldInternal += value;
HookHandler.HookActivateInputFieldInternal();
}
remove => HookHandler._afterActivateInputFieldInternal -= value;
}
public static event Delegates.OnSelect_AfterArgs OnSelect
{
add
{

HookHandler._afterOnSelect += value;
HookHandler.HookOnSelect();
}
remove => HookHandler._afterOnSelect -= value;
}
public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
{
add
{

HookHandler._afterOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._afterOnPointerClick -= value;
}
public static event Delegates.DeactivateInputField_AfterArgs DeactivateInputField
{
add
{

HookHandler._afterDeactivateInputField += value;
HookHandler.HookDeactivateInputField();
}
remove => HookHandler._afterDeactivateInputField -= value;
}
public static event Delegates.OnDeselect_AfterArgs OnDeselect
{
add
{

HookHandler._afterOnDeselect += value;
HookHandler.HookOnDeselect();
}
remove => HookHandler._afterOnDeselect -= value;
}
public static event Delegates.OnSubmit_AfterArgs OnSubmit
{
add
{

HookHandler._afterOnSubmit += value;
HookHandler.HookOnSubmit();
}
remove => HookHandler._afterOnSubmit -= value;
}
public static event Delegates.EnforceContentType_AfterArgs EnforceContentType
{
add
{

HookHandler._afterEnforceContentType += value;
HookHandler.HookEnforceContentType();
}
remove => HookHandler._afterEnforceContentType -= value;
}
public static event Delegates.SetTextComponentWrapMode_AfterArgs SetTextComponentWrapMode
{
add
{

HookHandler._afterSetTextComponentWrapMode += value;
HookHandler.HookSetTextComponentWrapMode();
}
remove => HookHandler._afterSetTextComponentWrapMode -= value;
}
public static event Delegates.SetTextComponentRichTextMode_AfterArgs SetTextComponentRichTextMode
{
add
{

HookHandler._afterSetTextComponentRichTextMode += value;
HookHandler.HookSetTextComponentRichTextMode();
}
remove => HookHandler._afterSetTextComponentRichTextMode -= value;
}
public static event Delegates.SetToCustomIfContentTypeIsNot_AfterArgs SetToCustomIfContentTypeIsNot
{
add
{

HookHandler._afterSetToCustomIfContentTypeIsNot += value;
HookHandler.HookSetToCustomIfContentTypeIsNot();
}
remove => HookHandler._afterSetToCustomIfContentTypeIsNot -= value;
}
public static event Delegates.SetToCustom_AfterArgs SetToCustom
{
add
{

HookHandler._afterSetToCustom += value;
HookHandler.HookSetToCustom();
}
remove => HookHandler._afterSetToCustom -= value;
}
public static event Delegates.get_transform_AfterArgs get_transform
{
add
{

HookHandler._afterget_transform += value;
HookHandler.Hookget_transform();
}
remove => HookHandler._afterget_transform -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_mesh_WithArgs get_mesh
{
add => HookEndpointManager.Add<Delegates.get_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_mesh", true), value);
remove => HookEndpointManager.Remove<Delegates.get_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_mesh", true), value);
}
public static event Delegates.set_shouldHideMobileInput_WithArgs set_shouldHideMobileInput
{
add => HookEndpointManager.Add<Delegates.set_shouldHideMobileInput_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_shouldHideMobileInput", true), value);
remove => HookEndpointManager.Remove<Delegates.set_shouldHideMobileInput_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_shouldHideMobileInput", true), value);
}
public static event Delegates.get_shouldHideMobileInput_WithArgs get_shouldHideMobileInput
{
add => HookEndpointManager.Add<Delegates.get_shouldHideMobileInput_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_shouldHideMobileInput", true), value);
remove => HookEndpointManager.Remove<Delegates.get_shouldHideMobileInput_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_shouldHideMobileInput", true), value);
}
public static event Delegates.get_text_WithArgs get_text
{
add => HookEndpointManager.Add<Delegates.get_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_text", true), value);
remove => HookEndpointManager.Remove<Delegates.get_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_text", true), value);
}
public static event Delegates.set_text_WithArgs set_text
{
add => HookEndpointManager.Add<Delegates.set_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_text", true), value);
remove => HookEndpointManager.Remove<Delegates.set_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_text", true), value);
}
public static event Delegates.get_isFocused_WithArgs get_isFocused
{
add => HookEndpointManager.Add<Delegates.get_isFocused_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_isFocused", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isFocused_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_isFocused", true), value);
}
public static event Delegates.get_caretBlinkRate_WithArgs get_caretBlinkRate
{
add => HookEndpointManager.Add<Delegates.get_caretBlinkRate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretBlinkRate", true), value);
remove => HookEndpointManager.Remove<Delegates.get_caretBlinkRate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretBlinkRate", true), value);
}
public static event Delegates.set_caretBlinkRate_WithArgs set_caretBlinkRate
{
add => HookEndpointManager.Add<Delegates.set_caretBlinkRate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretBlinkRate", true), value);
remove => HookEndpointManager.Remove<Delegates.set_caretBlinkRate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretBlinkRate", true), value);
}
public static event Delegates.get_caretWidth_WithArgs get_caretWidth
{
add => HookEndpointManager.Add<Delegates.get_caretWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.get_caretWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretWidth", true), value);
}
public static event Delegates.set_caretWidth_WithArgs set_caretWidth
{
add => HookEndpointManager.Add<Delegates.set_caretWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretWidth", true), value);
remove => HookEndpointManager.Remove<Delegates.set_caretWidth_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretWidth", true), value);
}
public static event Delegates.get_textViewport_WithArgs get_textViewport
{
add => HookEndpointManager.Add<Delegates.get_textViewport_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_textViewport", true), value);
remove => HookEndpointManager.Remove<Delegates.get_textViewport_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_textViewport", true), value);
}
public static event Delegates.set_textViewport_WithArgs set_textViewport
{
add => HookEndpointManager.Add<Delegates.set_textViewport_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_textViewport", true), value);
remove => HookEndpointManager.Remove<Delegates.set_textViewport_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_textViewport", true), value);
}
public static event Delegates.get_textComponent_WithArgs get_textComponent
{
add => HookEndpointManager.Add<Delegates.get_textComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_textComponent", true), value);
remove => HookEndpointManager.Remove<Delegates.get_textComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_textComponent", true), value);
}
public static event Delegates.set_textComponent_WithArgs set_textComponent
{
add => HookEndpointManager.Add<Delegates.set_textComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_textComponent", true), value);
remove => HookEndpointManager.Remove<Delegates.set_textComponent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_textComponent", true), value);
}
public static event Delegates.get_placeholder_WithArgs get_placeholder
{
add => HookEndpointManager.Add<Delegates.get_placeholder_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_placeholder", true), value);
remove => HookEndpointManager.Remove<Delegates.get_placeholder_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_placeholder", true), value);
}
public static event Delegates.set_placeholder_WithArgs set_placeholder
{
add => HookEndpointManager.Add<Delegates.set_placeholder_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_placeholder", true), value);
remove => HookEndpointManager.Remove<Delegates.set_placeholder_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_placeholder", true), value);
}
public static event Delegates.get_caretColor_WithArgs get_caretColor
{
add => HookEndpointManager.Add<Delegates.get_caretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretColor", true), value);
remove => HookEndpointManager.Remove<Delegates.get_caretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretColor", true), value);
}
public static event Delegates.set_caretColor_WithArgs set_caretColor
{
add => HookEndpointManager.Add<Delegates.set_caretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretColor", true), value);
remove => HookEndpointManager.Remove<Delegates.set_caretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretColor", true), value);
}
public static event Delegates.get_customCaretColor_WithArgs get_customCaretColor
{
add => HookEndpointManager.Add<Delegates.get_customCaretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_customCaretColor", true), value);
remove => HookEndpointManager.Remove<Delegates.get_customCaretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_customCaretColor", true), value);
}
public static event Delegates.set_customCaretColor_WithArgs set_customCaretColor
{
add => HookEndpointManager.Add<Delegates.set_customCaretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_customCaretColor", true), value);
remove => HookEndpointManager.Remove<Delegates.set_customCaretColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_customCaretColor", true), value);
}
public static event Delegates.get_selectionColor_WithArgs get_selectionColor
{
add => HookEndpointManager.Add<Delegates.get_selectionColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionColor", true), value);
remove => HookEndpointManager.Remove<Delegates.get_selectionColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionColor", true), value);
}
public static event Delegates.set_selectionColor_WithArgs set_selectionColor
{
add => HookEndpointManager.Add<Delegates.set_selectionColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionColor", true), value);
remove => HookEndpointManager.Remove<Delegates.set_selectionColor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionColor", true), value);
}
public static event Delegates.get_characterLimit_WithArgs get_characterLimit
{
add => HookEndpointManager.Add<Delegates.get_characterLimit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_characterLimit", true), value);
remove => HookEndpointManager.Remove<Delegates.get_characterLimit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_characterLimit", true), value);
}
public static event Delegates.set_characterLimit_WithArgs set_characterLimit
{
add => HookEndpointManager.Add<Delegates.set_characterLimit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_characterLimit", true), value);
remove => HookEndpointManager.Remove<Delegates.set_characterLimit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_characterLimit", true), value);
}
public static event Delegates.get_keyboardType_WithArgs get_keyboardType
{
add => HookEndpointManager.Add<Delegates.get_keyboardType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_keyboardType", true), value);
remove => HookEndpointManager.Remove<Delegates.get_keyboardType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_keyboardType", true), value);
}
public static event Delegates.set_keyboardType_WithArgs set_keyboardType
{
add => HookEndpointManager.Add<Delegates.set_keyboardType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_keyboardType", true), value);
remove => HookEndpointManager.Remove<Delegates.set_keyboardType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_keyboardType", true), value);
}
public static event Delegates.get_readOnly_WithArgs get_readOnly
{
add => HookEndpointManager.Add<Delegates.get_readOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_readOnly", true), value);
remove => HookEndpointManager.Remove<Delegates.get_readOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_readOnly", true), value);
}
public static event Delegates.set_readOnly_WithArgs set_readOnly
{
add => HookEndpointManager.Add<Delegates.set_readOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_readOnly", true), value);
remove => HookEndpointManager.Remove<Delegates.set_readOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_readOnly", true), value);
}
public static event Delegates.get_richText_WithArgs get_richText
{
add => HookEndpointManager.Add<Delegates.get_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_richText", true), value);
remove => HookEndpointManager.Remove<Delegates.get_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_richText", true), value);
}
public static event Delegates.set_richText_WithArgs set_richText
{
add => HookEndpointManager.Add<Delegates.set_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_richText", true), value);
remove => HookEndpointManager.Remove<Delegates.set_richText_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_richText", true), value);
}
public static event Delegates.get_multiLine_WithArgs get_multiLine
{
add => HookEndpointManager.Add<Delegates.get_multiLine_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_multiLine", true), value);
remove => HookEndpointManager.Remove<Delegates.get_multiLine_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_multiLine", true), value);
}
public static event Delegates.get_asteriskChar_WithArgs get_asteriskChar
{
add => HookEndpointManager.Add<Delegates.get_asteriskChar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_asteriskChar", true), value);
remove => HookEndpointManager.Remove<Delegates.get_asteriskChar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_asteriskChar", true), value);
}
public static event Delegates.set_asteriskChar_WithArgs set_asteriskChar
{
add => HookEndpointManager.Add<Delegates.set_asteriskChar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_asteriskChar", true), value);
remove => HookEndpointManager.Remove<Delegates.set_asteriskChar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_asteriskChar", true), value);
}
public static event Delegates.get_wasCanceled_WithArgs get_wasCanceled
{
add => HookEndpointManager.Add<Delegates.get_wasCanceled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_wasCanceled", true), value);
remove => HookEndpointManager.Remove<Delegates.get_wasCanceled_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_wasCanceled", true), value);
}
public static event Delegates.ClampPos_WithArgs ClampPos
{
add => HookEndpointManager.Add<Delegates.ClampPos_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ClampPos", true), value);
remove => HookEndpointManager.Remove<Delegates.ClampPos_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ClampPos", true), value);
}
public static event Delegates.get_caretPositionInternal_WithArgs get_caretPositionInternal
{
add => HookEndpointManager.Add<Delegates.get_caretPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.get_caretPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretPositionInternal", true), value);
}
public static event Delegates.set_caretPositionInternal_WithArgs set_caretPositionInternal
{
add => HookEndpointManager.Add<Delegates.set_caretPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.set_caretPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretPositionInternal", true), value);
}
public static event Delegates.get_stringPositionInternal_WithArgs get_stringPositionInternal
{
add => HookEndpointManager.Add<Delegates.get_stringPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_stringPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.get_stringPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_stringPositionInternal", true), value);
}
public static event Delegates.set_stringPositionInternal_WithArgs set_stringPositionInternal
{
add => HookEndpointManager.Add<Delegates.set_stringPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_stringPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.set_stringPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_stringPositionInternal", true), value);
}
public static event Delegates.get_caretSelectPositionInternal_WithArgs get_caretSelectPositionInternal
{
add => HookEndpointManager.Add<Delegates.get_caretSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretSelectPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.get_caretSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretSelectPositionInternal", true), value);
}
public static event Delegates.set_caretSelectPositionInternal_WithArgs set_caretSelectPositionInternal
{
add => HookEndpointManager.Add<Delegates.set_caretSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretSelectPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.set_caretSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretSelectPositionInternal", true), value);
}
public static event Delegates.get_stringSelectPositionInternal_WithArgs get_stringSelectPositionInternal
{
add => HookEndpointManager.Add<Delegates.get_stringSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_stringSelectPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.get_stringSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_stringSelectPositionInternal", true), value);
}
public static event Delegates.set_stringSelectPositionInternal_WithArgs set_stringSelectPositionInternal
{
add => HookEndpointManager.Add<Delegates.set_stringSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_stringSelectPositionInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.set_stringSelectPositionInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_stringSelectPositionInternal", true), value);
}
public static event Delegates.get_hasSelection_WithArgs get_hasSelection
{
add => HookEndpointManager.Add<Delegates.get_hasSelection_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_hasSelection", true), value);
remove => HookEndpointManager.Remove<Delegates.get_hasSelection_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_hasSelection", true), value);
}
public static event Delegates.get_caretPosition_WithArgs get_caretPosition
{
add => HookEndpointManager.Add<Delegates.get_caretPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.get_caretPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_caretPosition", true), value);
}
public static event Delegates.set_caretPosition_WithArgs set_caretPosition
{
add => HookEndpointManager.Add<Delegates.set_caretPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.set_caretPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_caretPosition", true), value);
}
public static event Delegates.get_selectionAnchorPosition_WithArgs get_selectionAnchorPosition
{
add => HookEndpointManager.Add<Delegates.get_selectionAnchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionAnchorPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.get_selectionAnchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionAnchorPosition", true), value);
}
public static event Delegates.set_selectionAnchorPosition_WithArgs set_selectionAnchorPosition
{
add => HookEndpointManager.Add<Delegates.set_selectionAnchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionAnchorPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.set_selectionAnchorPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionAnchorPosition", true), value);
}
public static event Delegates.get_selectionFocusPosition_WithArgs get_selectionFocusPosition
{
add => HookEndpointManager.Add<Delegates.get_selectionFocusPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionFocusPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.get_selectionFocusPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_selectionFocusPosition", true), value);
}
public static event Delegates.set_selectionFocusPosition_WithArgs set_selectionFocusPosition
{
add => HookEndpointManager.Add<Delegates.set_selectionFocusPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionFocusPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.set_selectionFocusPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_selectionFocusPosition", true), value);
}
public static event Delegates.OnEnable_WithArgs OnEnable
{
add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnEnable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnEnable", true), value);
}
public static event Delegates.OnDisable_WithArgs OnDisable
{
add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDisable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDisable", true), value);
}
public static event Delegates.CaretBlink_WithArgs CaretBlink
{
add => HookEndpointManager.Add<Delegates.CaretBlink_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "CaretBlink", true), value);
remove => HookEndpointManager.Remove<Delegates.CaretBlink_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "CaretBlink", true), value);
}
public static event Delegates.SetCaretVisible_WithArgs SetCaretVisible
{
add => HookEndpointManager.Add<Delegates.SetCaretVisible_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetCaretVisible", true), value);
remove => HookEndpointManager.Remove<Delegates.SetCaretVisible_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetCaretVisible", true), value);
}
public static event Delegates.SetCaretActive_WithArgs SetCaretActive
{
add => HookEndpointManager.Add<Delegates.SetCaretActive_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetCaretActive", true), value);
remove => HookEndpointManager.Remove<Delegates.SetCaretActive_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetCaretActive", true), value);
}
public static event Delegates.OnFocus_WithArgs OnFocus
{
add => HookEndpointManager.Add<Delegates.OnFocus_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnFocus", true), value);
remove => HookEndpointManager.Remove<Delegates.OnFocus_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnFocus", true), value);
}
public static event Delegates.SelectAll_WithArgs SelectAll
{
add => HookEndpointManager.Add<Delegates.SelectAll_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SelectAll", true), value);
remove => HookEndpointManager.Remove<Delegates.SelectAll_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SelectAll", true), value);
}
public static event Delegates.MoveTextEnd_WithArgs MoveTextEnd
{
add => HookEndpointManager.Add<Delegates.MoveTextEnd_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveTextEnd", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveTextEnd_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveTextEnd", true), value);
}
public static event Delegates.MoveTextStart_WithArgs MoveTextStart
{
add => HookEndpointManager.Add<Delegates.MoveTextStart_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveTextStart", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveTextStart_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveTextStart", true), value);
}
public static event Delegates.get_clipboard_WithArgs get_clipboard
{
add => HookEndpointManager.Add<Delegates.get_clipboard_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_clipboard", false), value);
remove => HookEndpointManager.Remove<Delegates.get_clipboard_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "get_clipboard", false), value);
}
public static event Delegates.set_clipboard_WithArgs set_clipboard
{
add => HookEndpointManager.Add<Delegates.set_clipboard_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_clipboard", false), value);
remove => HookEndpointManager.Remove<Delegates.set_clipboard_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "set_clipboard", false), value);
}
public static event Delegates.InPlaceEditing_WithArgs InPlaceEditing
{
add => HookEndpointManager.Add<Delegates.InPlaceEditing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "InPlaceEditing", true), value);
remove => HookEndpointManager.Remove<Delegates.InPlaceEditing_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "InPlaceEditing", true), value);
}
public static event Delegates.LateUpdate_WithArgs LateUpdate
{
add => HookEndpointManager.Add<Delegates.LateUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LateUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.LateUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LateUpdate", true), value);
}
public static event Delegates.GetCharacterIndexFromPosition_WithArgs GetCharacterIndexFromPosition
{
add => HookEndpointManager.Add<Delegates.GetCharacterIndexFromPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetCharacterIndexFromPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.GetCharacterIndexFromPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetCharacterIndexFromPosition", true), value);
}
public static event Delegates.MayDrag_WithArgs MayDrag
{
add => HookEndpointManager.Add<Delegates.MayDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MayDrag", true), value);
remove => HookEndpointManager.Remove<Delegates.MayDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MayDrag", true), value);
}
public static event Delegates.OnBeginDrag_WithArgs OnBeginDrag
{
add => HookEndpointManager.Add<Delegates.OnBeginDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnBeginDrag", true), value);
remove => HookEndpointManager.Remove<Delegates.OnBeginDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnBeginDrag", true), value);
}
public static event Delegates.OnDrag_WithArgs OnDrag
{
add => HookEndpointManager.Add<Delegates.OnDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDrag", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDrag", true), value);
}
public static event Delegates.MouseDragOutsideRect_WithArgs MouseDragOutsideRect
{
add => HookEndpointManager.Add<Delegates.MouseDragOutsideRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MouseDragOutsideRect", true), value);
remove => HookEndpointManager.Remove<Delegates.MouseDragOutsideRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MouseDragOutsideRect", true), value);
}
public static event Delegates.OnEndDrag_WithArgs OnEndDrag
{
add => HookEndpointManager.Add<Delegates.OnEndDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnEndDrag", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEndDrag_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnEndDrag", true), value);
}
public static event Delegates.OnPointerDown_WithArgs OnPointerDown
{
add => HookEndpointManager.Add<Delegates.OnPointerDown_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnPointerDown", true), value);
remove => HookEndpointManager.Remove<Delegates.OnPointerDown_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnPointerDown", true), value);
}
public static event Delegates.IsValidChar_WithArgs IsValidChar
{
add => HookEndpointManager.Add<Delegates.IsValidChar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "IsValidChar", true), value);
remove => HookEndpointManager.Remove<Delegates.IsValidChar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "IsValidChar", true), value);
}
public static event Delegates.ProcessEvent_WithArgs ProcessEvent
{
add => HookEndpointManager.Add<Delegates.ProcessEvent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ProcessEvent", true), value);
remove => HookEndpointManager.Remove<Delegates.ProcessEvent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ProcessEvent", true), value);
}
public static event Delegates.OnUpdateSelected_WithArgs OnUpdateSelected
{
add => HookEndpointManager.Add<Delegates.OnUpdateSelected_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnUpdateSelected", true), value);
remove => HookEndpointManager.Remove<Delegates.OnUpdateSelected_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnUpdateSelected", true), value);
}
public static event Delegates.GetSelectedString_WithArgs GetSelectedString
{
add => HookEndpointManager.Add<Delegates.GetSelectedString_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetSelectedString", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSelectedString_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetSelectedString", true), value);
}
public static event Delegates.FindtNextWordBegin_WithArgs FindtNextWordBegin
{
add => HookEndpointManager.Add<Delegates.FindtNextWordBegin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "FindtNextWordBegin", true), value);
remove => HookEndpointManager.Remove<Delegates.FindtNextWordBegin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "FindtNextWordBegin", true), value);
}
public static event Delegates.MoveRight_WithArgs MoveRight
{
add => HookEndpointManager.Add<Delegates.MoveRight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveRight", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveRight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveRight", true), value);
}
public static event Delegates.FindtPrevWordBegin_WithArgs FindtPrevWordBegin
{
add => HookEndpointManager.Add<Delegates.FindtPrevWordBegin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "FindtPrevWordBegin", true), value);
remove => HookEndpointManager.Remove<Delegates.FindtPrevWordBegin_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "FindtPrevWordBegin", true), value);
}
public static event Delegates.MoveLeft_WithArgs MoveLeft
{
add => HookEndpointManager.Add<Delegates.MoveLeft_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveLeft", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveLeft_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveLeft", true), value);
}
public static event Delegates.LineUpCharacterPosition_WithArgs LineUpCharacterPosition
{
add => HookEndpointManager.Add<Delegates.LineUpCharacterPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LineUpCharacterPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.LineUpCharacterPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LineUpCharacterPosition", true), value);
}
public static event Delegates.LineDownCharacterPosition_WithArgs LineDownCharacterPosition
{
add => HookEndpointManager.Add<Delegates.LineDownCharacterPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LineDownCharacterPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.LineDownCharacterPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LineDownCharacterPosition", true), value);
}
public static event Delegates.MoveDown_bool_WithArgs MoveDown_bool
{
add => HookEndpointManager.Add<Delegates.MoveDown_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveDown", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveDown_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveDown", true), value);
}
public static event Delegates.MoveDown_bool_bool_WithArgs MoveDown_bool_bool
{
add => HookEndpointManager.Add<Delegates.MoveDown_bool_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveDown", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveDown_bool_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveDown", true), value);
}
public static event Delegates.MoveUp_bool_WithArgs MoveUp_bool
{
add => HookEndpointManager.Add<Delegates.MoveUp_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveUp", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveUp_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveUp", true), value);
}
public static event Delegates.MoveUp_bool_bool_WithArgs MoveUp_bool_bool
{
add => HookEndpointManager.Add<Delegates.MoveUp_bool_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveUp", true), value);
remove => HookEndpointManager.Remove<Delegates.MoveUp_bool_bool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MoveUp", true), value);
}
public static event Delegates.Delete_WithArgs Delete
{
add => HookEndpointManager.Add<Delegates.Delete_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Delete", true), value);
remove => HookEndpointManager.Remove<Delegates.Delete_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Delete", true), value);
}
public static event Delegates.ForwardSpace_WithArgs ForwardSpace
{
add => HookEndpointManager.Add<Delegates.ForwardSpace_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ForwardSpace", true), value);
remove => HookEndpointManager.Remove<Delegates.ForwardSpace_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ForwardSpace", true), value);
}
public static event Delegates.Backspace_WithArgs Backspace
{
add => HookEndpointManager.Add<Delegates.Backspace_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Backspace", true), value);
remove => HookEndpointManager.Remove<Delegates.Backspace_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Backspace", true), value);
}
public static event Delegates.Insert_WithArgs Insert
{
add => HookEndpointManager.Add<Delegates.Insert_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Insert", true), value);
remove => HookEndpointManager.Remove<Delegates.Insert_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Insert", true), value);
}
public static event Delegates.SendOnValueChangedAndUpdateLabel_WithArgs SendOnValueChangedAndUpdateLabel
{
add => HookEndpointManager.Add<Delegates.SendOnValueChangedAndUpdateLabel_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnValueChangedAndUpdateLabel", true), value);
remove => HookEndpointManager.Remove<Delegates.SendOnValueChangedAndUpdateLabel_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnValueChangedAndUpdateLabel", true), value);
}
public static event Delegates.SendOnValueChanged_WithArgs SendOnValueChanged
{
add => HookEndpointManager.Add<Delegates.SendOnValueChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnValueChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.SendOnValueChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnValueChanged", true), value);
}
public static event Delegates.SendOnSubmit_WithArgs SendOnSubmit
{
add => HookEndpointManager.Add<Delegates.SendOnSubmit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnSubmit", true), value);
remove => HookEndpointManager.Remove<Delegates.SendOnSubmit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnSubmit", true), value);
}
public static event Delegates.SendOnFocusLost_WithArgs SendOnFocusLost
{
add => HookEndpointManager.Add<Delegates.SendOnFocusLost_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnFocusLost", true), value);
remove => HookEndpointManager.Remove<Delegates.SendOnFocusLost_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SendOnFocusLost", true), value);
}
public static event Delegates.Append_string_WithArgs Append_string
{
add => HookEndpointManager.Add<Delegates.Append_string_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Append", true), value);
remove => HookEndpointManager.Remove<Delegates.Append_string_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Append", true), value);
}
public static event Delegates.Append_Char_WithArgs Append_Char
{
add => HookEndpointManager.Add<Delegates.Append_Char_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Append", true), value);
remove => HookEndpointManager.Remove<Delegates.Append_Char_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Append", true), value);
}
public static event Delegates.UpdateLabel_WithArgs UpdateLabel
{
add => HookEndpointManager.Add<Delegates.UpdateLabel_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UpdateLabel", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateLabel_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UpdateLabel", true), value);
}
public static event Delegates.GetCaretPositionFromStringIndex_WithArgs GetCaretPositionFromStringIndex
{
add => HookEndpointManager.Add<Delegates.GetCaretPositionFromStringIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetCaretPositionFromStringIndex", true), value);
remove => HookEndpointManager.Remove<Delegates.GetCaretPositionFromStringIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetCaretPositionFromStringIndex", true), value);
}
public static event Delegates.GetStringIndexFromCaretPosition_WithArgs GetStringIndexFromCaretPosition
{
add => HookEndpointManager.Add<Delegates.GetStringIndexFromCaretPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetStringIndexFromCaretPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.GetStringIndexFromCaretPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GetStringIndexFromCaretPosition", true), value);
}
public static event Delegates.ForceLabelUpdate_WithArgs ForceLabelUpdate
{
add => HookEndpointManager.Add<Delegates.ForceLabelUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ForceLabelUpdate", true), value);
remove => HookEndpointManager.Remove<Delegates.ForceLabelUpdate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ForceLabelUpdate", true), value);
}
public static event Delegates.MarkGeometryAsDirty_WithArgs MarkGeometryAsDirty
{
add => HookEndpointManager.Add<Delegates.MarkGeometryAsDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MarkGeometryAsDirty", true), value);
remove => HookEndpointManager.Remove<Delegates.MarkGeometryAsDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "MarkGeometryAsDirty", true), value);
}
public static event Delegates.Rebuild_WithArgs Rebuild
{
add => HookEndpointManager.Add<Delegates.Rebuild_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Rebuild", true), value);
remove => HookEndpointManager.Remove<Delegates.Rebuild_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Rebuild", true), value);
}
public static event Delegates.LayoutComplete_WithArgs LayoutComplete
{
add => HookEndpointManager.Add<Delegates.LayoutComplete_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LayoutComplete", true), value);
remove => HookEndpointManager.Remove<Delegates.LayoutComplete_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "LayoutComplete", true), value);
}
public static event Delegates.GraphicUpdateComplete_WithArgs GraphicUpdateComplete
{
add => HookEndpointManager.Add<Delegates.GraphicUpdateComplete_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GraphicUpdateComplete", true), value);
remove => HookEndpointManager.Remove<Delegates.GraphicUpdateComplete_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GraphicUpdateComplete", true), value);
}
public static event Delegates.UpdateGeometry_WithArgs UpdateGeometry
{
add => HookEndpointManager.Add<Delegates.UpdateGeometry_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UpdateGeometry", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UpdateGeometry", true), value);
}
public static event Delegates.AssignPositioningIfNeeded_WithArgs AssignPositioningIfNeeded
{
add => HookEndpointManager.Add<Delegates.AssignPositioningIfNeeded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "AssignPositioningIfNeeded", true), value);
remove => HookEndpointManager.Remove<Delegates.AssignPositioningIfNeeded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "AssignPositioningIfNeeded", true), value);
}
public static event Delegates.OnFillVBO_WithArgs OnFillVBO
{
add => HookEndpointManager.Add<Delegates.OnFillVBO_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnFillVBO", true), value);
remove => HookEndpointManager.Remove<Delegates.OnFillVBO_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnFillVBO", true), value);
}
public static event Delegates.GenerateCaret_WithArgs GenerateCaret
{
add => HookEndpointManager.Add<Delegates.GenerateCaret_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GenerateCaret", true), value);
remove => HookEndpointManager.Remove<Delegates.GenerateCaret_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GenerateCaret", true), value);
}
public static event Delegates.CreateCursorVerts_WithArgs CreateCursorVerts
{
add => HookEndpointManager.Add<Delegates.CreateCursorVerts_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "CreateCursorVerts", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateCursorVerts_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "CreateCursorVerts", true), value);
}
public static event Delegates.GenerateHightlight_WithArgs GenerateHightlight
{
add => HookEndpointManager.Add<Delegates.GenerateHightlight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GenerateHightlight", true), value);
remove => HookEndpointManager.Remove<Delegates.GenerateHightlight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "GenerateHightlight", true), value);
}
public static event Delegates.AdjustRectTransformRelativeToViewport_WithArgs AdjustRectTransformRelativeToViewport
{
add => HookEndpointManager.Add<Delegates.AdjustRectTransformRelativeToViewport_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "AdjustRectTransformRelativeToViewport", true), value);
remove => HookEndpointManager.Remove<Delegates.AdjustRectTransformRelativeToViewport_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "AdjustRectTransformRelativeToViewport", true), value);
}
public static event Delegates.Validate_WithArgs Validate
{
add => HookEndpointManager.Add<Delegates.Validate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Validate", true), value);
remove => HookEndpointManager.Remove<Delegates.Validate_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "Validate", true), value);
}
public static event Delegates.ActivateInputField_WithArgs ActivateInputField
{
add => HookEndpointManager.Add<Delegates.ActivateInputField_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ActivateInputField", true), value);
remove => HookEndpointManager.Remove<Delegates.ActivateInputField_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ActivateInputField", true), value);
}
public static event Delegates.ActivateInputFieldInternal_WithArgs ActivateInputFieldInternal
{
add => HookEndpointManager.Add<Delegates.ActivateInputFieldInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ActivateInputFieldInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.ActivateInputFieldInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "ActivateInputFieldInternal", true), value);
}
public static event Delegates.OnSelect_WithArgs OnSelect
{
add => HookEndpointManager.Add<Delegates.OnSelect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnSelect", true), value);
remove => HookEndpointManager.Remove<Delegates.OnSelect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnSelect", true), value);
}
public static event Delegates.OnPointerClick_WithArgs OnPointerClick
{
add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnPointerClick", true), value);
remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnPointerClick", true), value);
}
public static event Delegates.DeactivateInputField_WithArgs DeactivateInputField
{
add => HookEndpointManager.Add<Delegates.DeactivateInputField_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "DeactivateInputField", true), value);
remove => HookEndpointManager.Remove<Delegates.DeactivateInputField_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "DeactivateInputField", true), value);
}
public static event Delegates.OnDeselect_WithArgs OnDeselect
{
add => HookEndpointManager.Add<Delegates.OnDeselect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDeselect", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDeselect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnDeselect", true), value);
}
public static event Delegates.OnSubmit_WithArgs OnSubmit
{
add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnSubmit", true), value);
remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "OnSubmit", true), value);
}
public static event Delegates.EnforceContentType_WithArgs EnforceContentType
{
add => HookEndpointManager.Add<Delegates.EnforceContentType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "EnforceContentType", true), value);
remove => HookEndpointManager.Remove<Delegates.EnforceContentType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "EnforceContentType", true), value);
}
public static event Delegates.SetTextComponentWrapMode_WithArgs SetTextComponentWrapMode
{
add => HookEndpointManager.Add<Delegates.SetTextComponentWrapMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetTextComponentWrapMode", true), value);
remove => HookEndpointManager.Remove<Delegates.SetTextComponentWrapMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetTextComponentWrapMode", true), value);
}
public static event Delegates.SetTextComponentRichTextMode_WithArgs SetTextComponentRichTextMode
{
add => HookEndpointManager.Add<Delegates.SetTextComponentRichTextMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetTextComponentRichTextMode", true), value);
remove => HookEndpointManager.Remove<Delegates.SetTextComponentRichTextMode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetTextComponentRichTextMode", true), value);
}
public static event Delegates.SetToCustomIfContentTypeIsNot_WithArgs SetToCustomIfContentTypeIsNot
{
add => HookEndpointManager.Add<Delegates.SetToCustomIfContentTypeIsNot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetToCustomIfContentTypeIsNot", true), value);
remove => HookEndpointManager.Remove<Delegates.SetToCustomIfContentTypeIsNot_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetToCustomIfContentTypeIsNot", true), value);
}
public static event Delegates.SetToCustom_WithArgs SetToCustom
{
add => HookEndpointManager.Add<Delegates.SetToCustom_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetToCustom", true), value);
remove => HookEndpointManager.Remove<Delegates.SetToCustom_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "SetToCustom", true), value);
}
public static event Delegates.get_transform_WithArgs get_transform
{
add => HookEndpointManager.Add<Delegates.get_transform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UnityEngine.UI.ICanvasElement.get_transform", true), value);
remove => HookEndpointManager.Remove<Delegates.get_transform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_InputField), "UnityEngine.UI.ICanvasElement.get_transform", true), value);
}
}

}
