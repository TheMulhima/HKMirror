namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GeoControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGeoControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GeoControl.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GeoControl.orig_Awake orig, GeoControl self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GeoControl.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GeoControl.orig_Start orig, GeoControl self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GeoControl.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.GeoControl.orig_OnEnable orig, GeoControl self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.GeoControl.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.GeoControl.orig_FixedUpdate orig, GeoControl self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSize()
        {
            if (!HookedList.Contains("SetSize"))
            {
                HookedList.Add("SetSize");
                On.GeoControl.SetSize += SetSize;
            }
        }

        internal static event Delegates.SetSize_BeforeArgs _beforeSetSize;
        internal static event Delegates.SetSize_AfterArgs _afterSetSize;

        private static void SetSize(On.GeoControl.orig_SetSize orig, GeoControl self, int index)
        {
            Delegates.Params_SetSize @params = new()
            {
                self = self, index = index
            };
            if (_beforeSetSize != null)
                foreach (Delegates.SetSize_BeforeArgs toInvoke in _beforeSetSize.GetInvocationList())
                    try
                    {
                        _beforeSetSize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterSetSize != null)
                foreach (Delegates.SetSize_AfterArgs toInvoke in _afterSetSize.GetInvocationList())
                    try
                    {
                        _afterSetSize.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetFlashing()
        {
            if (!HookedList.Contains("SetFlashing"))
            {
                HookedList.Add("SetFlashing");
                On.GeoControl.SetFlashing += SetFlashing;
            }
        }

        internal static event Delegates.SetFlashing_BeforeArgs _beforeSetFlashing;
        internal static event Delegates.SetFlashing_AfterArgs _afterSetFlashing;

        private static void SetFlashing(On.GeoControl.orig_SetFlashing orig, GeoControl self)
        {
            Delegates.Params_SetFlashing @params = new()
            {
                self = self
            };
            if (_beforeSetFlashing != null)
                foreach (Delegates.SetFlashing_BeforeArgs toInvoke in _beforeSetFlashing.GetInvocationList())
                    try
                    {
                        _beforeSetFlashing?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetFlashing != null)
                foreach (Delegates.SetFlashing_AfterArgs toInvoke in _afterSetFlashing.GetInvocationList())
                    try
                    {
                        _afterSetFlashing.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.GeoControl.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_AfterArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.GeoControl.orig_OnCollisionEnter2D orig, GeoControl self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnCollisionEnter2D != null)
                foreach (Delegates.OnCollisionEnter2D_BeforeArgs toInvoke in
                         _beforeOnCollisionEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnCollisionEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionEnter2D != null)
                foreach (Delegates.OnCollisionEnter2D_AfterArgs toInvoke in
                         _afterOnCollisionEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnCollisionEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.GeoControl.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.GeoControl.orig_OnTriggerEnter2D orig, GeoControl self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlayCollectSound()
        {
            if (!HookedList.Contains("PlayCollectSound"))
            {
                HookedList.Add("PlayCollectSound");
                On.GeoControl.PlayCollectSound += PlayCollectSound;
            }
        }

        internal static event Delegates.PlayCollectSound_BeforeArgs _beforePlayCollectSound;
        internal static event Delegates.PlayCollectSound_AfterArgs _afterPlayCollectSound;

        private static float PlayCollectSound(On.GeoControl.orig_PlayCollectSound orig, GeoControl self)
        {
            Delegates.Params_PlayCollectSound @params = new()
            {
                self = self
            };
            if (_beforePlayCollectSound != null)
                foreach (Delegates.PlayCollectSound_BeforeArgs toInvoke in _beforePlayCollectSound.GetInvocationList())
                    try
                    {
                        _beforePlayCollectSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterPlayCollectSound != null)
                foreach (Delegates.PlayCollectSound_AfterArgs toInvoke in _afterPlayCollectSound.GetInvocationList())
                    try
                    {
                        retVal = _afterPlayCollectSound.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDisable()
        {
            if (!HookedList.Contains("Disable"))
            {
                HookedList.Add("Disable");
                On.GeoControl.Disable += Disable;
            }
        }

        internal static event Delegates.Disable_BeforeArgs _beforeDisable;
        internal static event Delegates.Disable_AfterArgs _afterDisable;

        private static void Disable(On.GeoControl.orig_Disable orig, GeoControl self, float waitTime)
        {
            Delegates.Params_Disable @params = new()
            {
                self = self, waitTime = waitTime
            };
            if (_beforeDisable != null)
                foreach (Delegates.Disable_BeforeArgs toInvoke in _beforeDisable.GetInvocationList())
                    try
                    {
                        _beforeDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            waitTime = @params.waitTime;
            orig(self, waitTime);
            if (_afterDisable != null)
                foreach (Delegates.Disable_AfterArgs toInvoke in _afterDisable.GetInvocationList())
                    try
                    {
                        _afterDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDisableAfterTime()
        {
            if (!HookedList.Contains("DisableAfterTime"))
            {
                HookedList.Add("DisableAfterTime");
                On.GeoControl.DisableAfterTime += DisableAfterTime;
            }
        }

        internal static event Delegates.DisableAfterTime_BeforeArgs _beforeDisableAfterTime;

        private static IEnumerator DisableAfterTime(On.GeoControl.orig_DisableAfterTime orig, GeoControl self,
            float waitTime)
        {
            Delegates.Params_DisableAfterTime @params = new()
            {
                self = self, waitTime = waitTime
            };
            if (_beforeDisableAfterTime != null)
                foreach (Delegates.DisableAfterTime_BeforeArgs toInvoke in _beforeDisableAfterTime.GetInvocationList())
                    try
                    {
                        _beforeDisableAfterTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            waitTime = @params.waitTime;
            return orig(self, waitTime);
        }

        internal static void HookGetter()
        {
            if (!HookedList.Contains("Getter"))
            {
                HookedList.Add("Getter");
                On.GeoControl.Getter += Getter;
            }
        }

        internal static event Delegates.Getter_BeforeArgs _beforeGetter;

        private static IEnumerator Getter(On.GeoControl.orig_Getter orig, GeoControl self)
        {
            Delegates.Params_Getter @params = new()
            {
                self = self
            };
            if (_beforeGetter != null)
                foreach (Delegates.Getter_BeforeArgs toInvoke in _beforeGetter.GetInvocationList())
                    try
                    {
                        _beforeGetter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GeoControl> orig, GeoControl self);

        public delegate void Disable_AfterArgs(Params_Disable args);

        public delegate void Disable_BeforeArgs(Params_Disable args);

        public delegate void Disable_WithArgs(Action<GeoControl, float> orig, GeoControl self, float waitTime);

        public delegate IEnumerator DisableAfterTime_AfterArgs(Params_DisableAfterTime args, IEnumerator ret);

        public delegate void DisableAfterTime_BeforeArgs(Params_DisableAfterTime args);

        public delegate IEnumerator DisableAfterTime_WithArgs(Func<GeoControl, float, IEnumerator> orig,
            GeoControl self, float waitTime);

        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<GeoControl> orig, GeoControl self);

        public delegate IEnumerator Getter_AfterArgs(Params_Getter args, IEnumerator ret);

        public delegate void Getter_BeforeArgs(Params_Getter args);

        public delegate IEnumerator Getter_WithArgs(Func<GeoControl, IEnumerator> orig, GeoControl self);

        public delegate void OnCollisionEnter2D_AfterArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_WithArgs(Action<GeoControl, Collision2D> orig, GeoControl self,
            Collision2D collision);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<GeoControl> orig, GeoControl self);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<GeoControl, Collider2D> orig, GeoControl self,
            Collider2D collision);

        public delegate float PlayCollectSound_AfterArgs(Params_PlayCollectSound args, float ret);

        public delegate void PlayCollectSound_BeforeArgs(Params_PlayCollectSound args);

        public delegate float PlayCollectSound_WithArgs(Func<GeoControl, float> orig, GeoControl self);

        public delegate void SetFlashing_AfterArgs(Params_SetFlashing args);

        public delegate void SetFlashing_BeforeArgs(Params_SetFlashing args);

        public delegate void SetFlashing_WithArgs(Action<GeoControl> orig, GeoControl self);

        public delegate void SetSize_AfterArgs(Params_SetSize args);

        public delegate void SetSize_BeforeArgs(Params_SetSize args);

        public delegate void SetSize_WithArgs(Action<GeoControl, int> orig, GeoControl self, int index);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GeoControl> orig, GeoControl self);

        public sealed class Params_Awake
        {
            public GeoControl self;
        }

        public sealed class Params_Start
        {
            public GeoControl self;
        }

        public sealed class Params_OnEnable
        {
            public GeoControl self;
        }

        public sealed class Params_FixedUpdate
        {
            public GeoControl self;
        }

        public sealed class Params_SetSize
        {
            public int index;
            public GeoControl self;
        }

        public sealed class Params_SetFlashing
        {
            public GeoControl self;
        }

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D collision;
            public GeoControl self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public GeoControl self;
        }

        public sealed class Params_PlayCollectSound
        {
            public GeoControl self;
        }

        public sealed class Params_Disable
        {
            public GeoControl self;
            public float waitTime;
        }

        public sealed class Params_DisableAfterTime
        {
            public GeoControl self;
            public float waitTime;
        }

        public sealed class Params_Getter
        {
            public GeoControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.SetSize_BeforeArgs SetSize
        {
            add
            {
                HookHandler._beforeSetSize += value;
                HookHandler.HookSetSize();
            }
            remove => HookHandler._beforeSetSize -= value;
        }

        public static event Delegates.SetFlashing_BeforeArgs SetFlashing
        {
            add
            {
                HookHandler._beforeSetFlashing += value;
                HookHandler.HookSetFlashing();
            }
            remove => HookHandler._beforeSetFlashing -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.PlayCollectSound_BeforeArgs PlayCollectSound
        {
            add
            {
                HookHandler._beforePlayCollectSound += value;
                HookHandler.HookPlayCollectSound();
            }
            remove => HookHandler._beforePlayCollectSound -= value;
        }

        public static event Delegates.Disable_BeforeArgs Disable
        {
            add
            {
                HookHandler._beforeDisable += value;
                HookHandler.HookDisable();
            }
            remove => HookHandler._beforeDisable -= value;
        }

        public static event Delegates.DisableAfterTime_BeforeArgs DisableAfterTime
        {
            add
            {
                HookHandler._beforeDisableAfterTime += value;
                HookHandler.HookDisableAfterTime();
            }
            remove => HookHandler._beforeDisableAfterTime -= value;
        }

        public static event Delegates.Getter_BeforeArgs Getter
        {
            add
            {
                HookHandler._beforeGetter += value;
                HookHandler.HookGetter();
            }
            remove => HookHandler._beforeGetter -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.SetSize_AfterArgs SetSize
        {
            add
            {
                HookHandler._afterSetSize += value;
                HookHandler.HookSetSize();
            }
            remove => HookHandler._afterSetSize -= value;
        }

        public static event Delegates.SetFlashing_AfterArgs SetFlashing
        {
            add
            {
                HookHandler._afterSetFlashing += value;
                HookHandler.HookSetFlashing();
            }
            remove => HookHandler._afterSetFlashing -= value;
        }

        public static event Delegates.OnCollisionEnter2D_AfterArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.PlayCollectSound_AfterArgs PlayCollectSound
        {
            add
            {
                HookHandler._afterPlayCollectSound += value;
                HookHandler.HookPlayCollectSound();
            }
            remove => HookHandler._afterPlayCollectSound -= value;
        }

        public static event Delegates.Disable_AfterArgs Disable
        {
            add
            {
                HookHandler._afterDisable += value;
                HookHandler.HookDisable();
            }
            remove => HookHandler._afterDisable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GeoControl.hook_Awake Awake
        {
            add => On.GeoControl.Awake += value;
            remove => On.GeoControl.Awake -= value;
        }

        public static event On.GeoControl.hook_Start Start
        {
            add => On.GeoControl.Start += value;
            remove => On.GeoControl.Start -= value;
        }

        public static event On.GeoControl.hook_OnEnable OnEnable
        {
            add => On.GeoControl.OnEnable += value;
            remove => On.GeoControl.OnEnable -= value;
        }

        public static event On.GeoControl.hook_FixedUpdate FixedUpdate
        {
            add => On.GeoControl.FixedUpdate += value;
            remove => On.GeoControl.FixedUpdate -= value;
        }

        public static event On.GeoControl.hook_SetSize SetSize
        {
            add => On.GeoControl.SetSize += value;
            remove => On.GeoControl.SetSize -= value;
        }

        public static event On.GeoControl.hook_SetFlashing SetFlashing
        {
            add => On.GeoControl.SetFlashing += value;
            remove => On.GeoControl.SetFlashing -= value;
        }

        public static event On.GeoControl.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.GeoControl.OnCollisionEnter2D += value;
            remove => On.GeoControl.OnCollisionEnter2D -= value;
        }

        public static event On.GeoControl.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.GeoControl.OnTriggerEnter2D += value;
            remove => On.GeoControl.OnTriggerEnter2D -= value;
        }

        public static event On.GeoControl.hook_PlayCollectSound PlayCollectSound
        {
            add => On.GeoControl.PlayCollectSound += value;
            remove => On.GeoControl.PlayCollectSound -= value;
        }

        public static event On.GeoControl.hook_Disable Disable
        {
            add => On.GeoControl.Disable += value;
            remove => On.GeoControl.Disable -= value;
        }

        public static event On.GeoControl.hook_DisableAfterTime DisableAfterTime
        {
            add => On.GeoControl.DisableAfterTime += value;
            remove => On.GeoControl.DisableAfterTime -= value;
        }

        public static event On.GeoControl.hook_Getter Getter
        {
            add => On.GeoControl.Getter += value;
            remove => On.GeoControl.Getter -= value;
        }
    }
}