using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for HealthCocoon_FlingPrefab class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHealthCocoon_FlingPrefab
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookSetupPool()
{
if (!HookedList.Contains("SetupPool"))
{
HookedList.Add("SetupPool");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HealthCocoon.FlingPrefab), "SetupPool", true), SetupPool);

}
}
internal static event Delegates.SetupPool_BeforeArgs _beforeSetupPool;
internal static event Delegates.SetupPool_AfterArgs _afterSetupPool;
private static void SetupPool(Action<HealthCocoon.FlingPrefab,  UnityEngine.Transform> orig, HealthCocoon.FlingPrefab self,  UnityEngine.Transform parent)
{
Delegates.Params_SetupPool @params = new() 
{
self = self
, parent = parent
};
if (_beforeSetupPool != null)
{
foreach (Delegates.SetupPool_BeforeArgs toInvoke in _beforeSetupPool.GetInvocationList())
{
try
{
_beforeSetupPool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
parent = @params.parent;
orig(self, parent);
if (_afterSetupPool != null)
{
foreach (Delegates.SetupPool_AfterArgs toInvoke in _afterSetupPool.GetInvocationList())
{
try
{
_afterSetupPool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSpawn()
{
if (!HookedList.Contains("Spawn"))
{
HookedList.Add("Spawn");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HealthCocoon.FlingPrefab), "Spawn", true), Spawn);

}
}
internal static event Delegates.Spawn_BeforeArgs _beforeSpawn;
internal static event Delegates.Spawn_AfterArgs _afterSpawn;
private static UnityEngine.GameObject Spawn(Func<HealthCocoon.FlingPrefab, UnityEngine.GameObject> orig, HealthCocoon.FlingPrefab self)
{
Delegates.Params_Spawn @params = new() 
{
self = self
};
if (_beforeSpawn != null)
{
foreach (Delegates.Spawn_BeforeArgs toInvoke in _beforeSpawn.GetInvocationList())
{
try
{
_beforeSpawn?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterSpawn != null)
{
foreach (Delegates.Spawn_AfterArgs toInvoke in _afterSpawn.GetInvocationList())
{
try
{
retVal = _afterSpawn.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_SetupPool
{
public HealthCocoon.FlingPrefab self;
public UnityEngine.Transform parent;
}
public delegate void SetupPool_BeforeArgs(Params_SetupPool args);
public delegate void SetupPool_AfterArgs(Params_SetupPool args);
public delegate void SetupPool_WithArgs (Action<HealthCocoon.FlingPrefab,  UnityEngine.Transform> orig, HealthCocoon.FlingPrefab self,  UnityEngine.Transform parent);
public sealed class Params_Spawn
{
public HealthCocoon.FlingPrefab self;
}
public delegate void Spawn_BeforeArgs(Params_Spawn args);
public delegate UnityEngine.GameObject Spawn_AfterArgs(Params_Spawn args, UnityEngine.GameObject ret);
public delegate UnityEngine.GameObject Spawn_WithArgs (Func<HealthCocoon.FlingPrefab, UnityEngine.GameObject> orig, HealthCocoon.FlingPrefab self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.SetupPool_BeforeArgs SetupPool
{
add
{

HookHandler._beforeSetupPool += value;
HookHandler.HookSetupPool();
}
remove => HookHandler._beforeSetupPool -= value;
}
public static event Delegates.Spawn_BeforeArgs Spawn
{
add
{

HookHandler._beforeSpawn += value;
HookHandler.HookSpawn();
}
remove => HookHandler._beforeSpawn -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.SetupPool_AfterArgs SetupPool
{
add
{

HookHandler._afterSetupPool += value;
HookHandler.HookSetupPool();
}
remove => HookHandler._afterSetupPool -= value;
}
public static event Delegates.Spawn_AfterArgs Spawn
{
add
{

HookHandler._afterSpawn += value;
HookHandler.HookSpawn();
}
remove => HookHandler._afterSpawn -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.SetupPool_WithArgs SetupPool
{
add => HookEndpointManager.Add<Delegates.SetupPool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HealthCocoon.FlingPrefab), "SetupPool", true), value);
remove => HookEndpointManager.Remove<Delegates.SetupPool_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HealthCocoon.FlingPrefab), "SetupPool", true), value);
}
public static event Delegates.Spawn_WithArgs Spawn
{
add => HookEndpointManager.Add<Delegates.Spawn_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HealthCocoon.FlingPrefab), "Spawn", true), value);
remove => HookEndpointManager.Remove<Delegates.Spawn_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HealthCocoon.FlingPrefab), "Spawn", true), value);
}
}

}
