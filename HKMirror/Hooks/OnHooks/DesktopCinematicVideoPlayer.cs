using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for DesktopCinematicVideoPlayer class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDesktopCinematicVideoPlayer
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookGetAbsolutePath()
{
if (!HookedList.Contains("GetAbsolutePath"))
{
HookedList.Add("GetAbsolutePath");
On.DesktopCinematicVideoPlayer.GetAbsolutePath += GetAbsolutePath;

}
}
internal static event Delegates.GetAbsolutePath_BeforeArgs _beforeGetAbsolutePath;
internal static event Delegates.GetAbsolutePath_AfterArgs _afterGetAbsolutePath;
private static string GetAbsolutePath(On.DesktopCinematicVideoPlayer.orig_GetAbsolutePath orig,DesktopCinematicVideoPlayer self)
{
Delegates.Params_GetAbsolutePath @params = new() 
{
self = self
};
if (_beforeGetAbsolutePath != null)
{
foreach (Delegates.GetAbsolutePath_BeforeArgs toInvoke in _beforeGetAbsolutePath.GetInvocationList())
{
try
{
_beforeGetAbsolutePath?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetAbsolutePath != null)
{
foreach (Delegates.GetAbsolutePath_AfterArgs toInvoke in _afterGetAbsolutePath.GetInvocationList())
{
try
{
retVal = _afterGetAbsolutePath.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_GetAbsolutePath
{
public DesktopCinematicVideoPlayer self;
}
public delegate void GetAbsolutePath_BeforeArgs(Params_GetAbsolutePath args);
public delegate string GetAbsolutePath_AfterArgs(Params_GetAbsolutePath args, string ret);
public delegate string GetAbsolutePath_WithArgs (Func<DesktopCinematicVideoPlayer, string> orig, DesktopCinematicVideoPlayer self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.GetAbsolutePath_BeforeArgs GetAbsolutePath
{
add
{

HookHandler._beforeGetAbsolutePath += value;
HookHandler.HookGetAbsolutePath();
}
remove => HookHandler._beforeGetAbsolutePath -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.GetAbsolutePath_AfterArgs GetAbsolutePath
{
add
{

HookHandler._afterGetAbsolutePath += value;
HookHandler.HookGetAbsolutePath();
}
remove => HookHandler._afterGetAbsolutePath -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.DesktopCinematicVideoPlayer.hook_GetAbsolutePath GetAbsolutePath
{
add => On.DesktopCinematicVideoPlayer.GetAbsolutePath += value;
remove => On.DesktopCinematicVideoPlayer.GetAbsolutePath -= value;
}
}

}
