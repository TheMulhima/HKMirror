using Microsoft.Xbox;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using XGamingRuntime;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for XboxSdk class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnXboxSdk
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Helpers()
        {
            if (!HookedList.Contains("get_Helpers"))
            {
                HookedList.Add("get_Helpers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "get_Helpers", false), get_Helpers);
            }
        }

        internal static event Delegates.get_Helpers_BeforeArgs _beforeget_Helpers;
        internal static event Delegates.get_Helpers_NormalArgs _afterget_Helpers;

        private static XboxSdk get_Helpers(Func<XboxSdk> orig)
        {
            _beforeget_Helpers?.Invoke();
            var retVal = orig();
            if (_afterget_Helpers != null) retVal = _afterget_Helpers.Invoke();
            return retVal;
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void Hook_Initialize()
        {
            if (!HookedList.Contains("_Initialize"))
            {
                HookedList.Add("_Initialize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "_Initialize"), _Initialize);
            }
        }

        internal static event Delegates._Initialize_BeforeArgs _before_Initialize;
        internal static event Delegates._Initialize_NormalArgs _after_Initialize;

        private static void _Initialize(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params__Initialize @params = new()
            {
                self = self
            };
            _before_Initialize?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_after_Initialize != null) _after_Initialize.Invoke(@params);
        }

        internal static void HookSignIn()
        {
            if (!HookedList.Contains("SignIn"))
            {
                HookedList.Add("SignIn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SignIn"), SignIn);
            }
        }

        internal static event Delegates.SignIn_BeforeArgs _beforeSignIn;
        internal static event Delegates.SignIn_NormalArgs _afterSignIn;

        private static void SignIn(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_SignIn @params = new()
            {
                self = self
            };
            _beforeSignIn?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSignIn != null) _afterSignIn.Invoke(@params);
        }

        internal static void HookSave()
        {
            if (!HookedList.Contains("Save"))
            {
                HookedList.Add("Save");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Save"), Save);
            }
        }

        internal static event Delegates.Save_BeforeArgs _beforeSave;
        internal static event Delegates.Save_NormalArgs _afterSave;

        private static void Save(Action<XboxSdk, byte[]> orig, XboxSdk self, byte[] data)
        {
            Delegates.Params_Save @params = new()
            {
                self = self, data = data
            };
            _beforeSave?.Invoke(@params);
            self = @params.self;
            data = @params.data;
            orig(self, data);
            if (_afterSave != null) _afterSave.Invoke(@params);
        }

        internal static void HookLoadSaveData()
        {
            if (!HookedList.Contains("LoadSaveData"))
            {
                HookedList.Add("LoadSaveData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "LoadSaveData"), LoadSaveData);
            }
        }

        internal static event Delegates.LoadSaveData_BeforeArgs _beforeLoadSaveData;
        internal static event Delegates.LoadSaveData_NormalArgs _afterLoadSaveData;

        private static void LoadSaveData(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_LoadSaveData @params = new()
            {
                self = self
            };
            _beforeLoadSaveData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadSaveData != null) _afterLoadSaveData.Invoke(@params);
        }

        internal static void HookUnlockAchievement()
        {
            if (!HookedList.Contains("UnlockAchievement"))
            {
                HookedList.Add("UnlockAchievement");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievement"), UnlockAchievement);
            }
        }

        internal static event Delegates.UnlockAchievement_BeforeArgs _beforeUnlockAchievement;
        internal static event Delegates.UnlockAchievement_NormalArgs _afterUnlockAchievement;

        private static void UnlockAchievement(Action<XboxSdk, string> orig, XboxSdk self, string achievementId)
        {
            Delegates.Params_UnlockAchievement @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforeUnlockAchievement?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            orig(self, achievementId);
            if (_afterUnlockAchievement != null) _afterUnlockAchievement.Invoke(@params);
        }

        internal static void HookSignInImpl()
        {
            if (!HookedList.Contains("SignInImpl"))
            {
                HookedList.Add("SignInImpl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SignInImpl"), SignInImpl);
            }
        }

        internal static event Delegates.SignInImpl_BeforeArgs _beforeSignInImpl;
        internal static event Delegates.SignInImpl_NormalArgs _afterSignInImpl;

        private static void SignInImpl(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_SignInImpl @params = new()
            {
                self = self
            };
            _beforeSignInImpl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSignInImpl != null) _afterSignInImpl.Invoke(@params);
        }

        internal static void HookAddUserComplete()
        {
            if (!HookedList.Contains("AddUserComplete"))
            {
                HookedList.Add("AddUserComplete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "AddUserComplete"), AddUserComplete);
            }
        }

        internal static event Delegates.AddUserComplete_BeforeArgs _beforeAddUserComplete;
        internal static event Delegates.AddUserComplete_NormalArgs _afterAddUserComplete;

        private static void AddUserComplete(Action<XboxSdk, int, XUserHandle> orig, XboxSdk self, int hresult,
            XUserHandle userHandle)
        {
            Delegates.Params_AddUserComplete @params = new()
            {
                self = self, hresult = hresult, userHandle = userHandle
            };
            _beforeAddUserComplete?.Invoke(@params);
            self = @params.self;
            hresult = @params.hresult;
            userHandle = @params.userHandle;
            orig(self, hresult, userHandle);
            if (_afterAddUserComplete != null) _afterAddUserComplete.Invoke(@params);
        }

        internal static void HookCompletePostSignInInitialization()
        {
            if (!HookedList.Contains("CompletePostSignInInitialization"))
            {
                HookedList.Add("CompletePostSignInInitialization");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "CompletePostSignInInitialization"),
                    CompletePostSignInInitialization);
            }
        }

        internal static event Delegates.CompletePostSignInInitialization_BeforeArgs
            _beforeCompletePostSignInInitialization;

        internal static event Delegates.CompletePostSignInInitialization_NormalArgs
            _afterCompletePostSignInInitialization;

        private static void CompletePostSignInInitialization(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_CompletePostSignInInitialization @params = new()
            {
                self = self
            };
            _beforeCompletePostSignInInitialization?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCompletePostSignInInitialization != null) _afterCompletePostSignInInitialization.Invoke(@params);
        }

        internal static void HookInitializeGameSaves()
        {
            if (!HookedList.Contains("InitializeGameSaves"))
            {
                HookedList.Add("InitializeGameSaves");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "InitializeGameSaves"), InitializeGameSaves);
            }
        }

        internal static event Delegates.InitializeGameSaves_BeforeArgs _beforeInitializeGameSaves;
        internal static event Delegates.InitializeGameSaves_NormalArgs _afterInitializeGameSaves;

        private static void InitializeGameSaves(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_InitializeGameSaves @params = new()
            {
                self = self
            };
            _beforeInitializeGameSaves?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInitializeGameSaves != null) _afterInitializeGameSaves.Invoke(@params);
        }

        internal static void HookXGameSaveInitializeCompleted()
        {
            if (!HookedList.Contains("XGameSaveInitializeCompleted"))
            {
                HookedList.Add("XGameSaveInitializeCompleted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "XGameSaveInitializeCompleted"),
                    XGameSaveInitializeCompleted);
            }
        }

        internal static event Delegates.XGameSaveInitializeCompleted_BeforeArgs _beforeXGameSaveInitializeCompleted;
        internal static event Delegates.XGameSaveInitializeCompleted_NormalArgs _afterXGameSaveInitializeCompleted;

        private static void XGameSaveInitializeCompleted(Action<XboxSdk, int, XGameSaveProviderHandle> orig,
            XboxSdk self, int hresult, XGameSaveProviderHandle gameSaveProviderHandle)
        {
            Delegates.Params_XGameSaveInitializeCompleted @params = new()
            {
                self = self, hresult = hresult, gameSaveProviderHandle = gameSaveProviderHandle
            };
            _beforeXGameSaveInitializeCompleted?.Invoke(@params);
            self = @params.self;
            hresult = @params.hresult;
            gameSaveProviderHandle = @params.gameSaveProviderHandle;
            orig(self, hresult, gameSaveProviderHandle);
            if (_afterXGameSaveInitializeCompleted != null) _afterXGameSaveInitializeCompleted.Invoke(@params);
        }

        internal static void HookSaveImpl()
        {
            if (!HookedList.Contains("SaveImpl"))
            {
                HookedList.Add("SaveImpl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SaveImpl"), SaveImpl);
            }
        }

        internal static event Delegates.SaveImpl_BeforeArgs _beforeSaveImpl;
        internal static event Delegates.SaveImpl_NormalArgs _afterSaveImpl;

        private static void SaveImpl(Action<XboxSdk, byte[]> orig, XboxSdk self, byte[] data)
        {
            Delegates.Params_SaveImpl @params = new()
            {
                self = self, data = data
            };
            _beforeSaveImpl?.Invoke(@params);
            self = @params.self;
            data = @params.data;
            orig(self, data);
            if (_afterSaveImpl != null) _afterSaveImpl.Invoke(@params);
        }

        internal static void HookGameSaveSubmitUpdateCompleted()
        {
            if (!HookedList.Contains("GameSaveSubmitUpdateCompleted"))
            {
                HookedList.Add("GameSaveSubmitUpdateCompleted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "GameSaveSubmitUpdateCompleted"),
                    GameSaveSubmitUpdateCompleted);
            }
        }

        internal static event Delegates.GameSaveSubmitUpdateCompleted_BeforeArgs _beforeGameSaveSubmitUpdateCompleted;
        internal static event Delegates.GameSaveSubmitUpdateCompleted_NormalArgs _afterGameSaveSubmitUpdateCompleted;

        private static void GameSaveSubmitUpdateCompleted(Action<XboxSdk, int> orig, XboxSdk self, int hresult)
        {
            Delegates.Params_GameSaveSubmitUpdateCompleted @params = new()
            {
                self = self, hresult = hresult
            };
            _beforeGameSaveSubmitUpdateCompleted?.Invoke(@params);
            self = @params.self;
            hresult = @params.hresult;
            orig(self, hresult);
            if (_afterGameSaveSubmitUpdateCompleted != null) _afterGameSaveSubmitUpdateCompleted.Invoke(@params);
        }

        internal static void HookLoadSaveDataImpl()
        {
            if (!HookedList.Contains("LoadSaveDataImpl"))
            {
                HookedList.Add("LoadSaveDataImpl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "LoadSaveDataImpl"), LoadSaveDataImpl);
            }
        }

        internal static event Delegates.LoadSaveDataImpl_BeforeArgs _beforeLoadSaveDataImpl;
        internal static event Delegates.LoadSaveDataImpl_NormalArgs _afterLoadSaveDataImpl;

        private static void LoadSaveDataImpl(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_LoadSaveDataImpl @params = new()
            {
                self = self
            };
            _beforeLoadSaveDataImpl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadSaveDataImpl != null) _afterLoadSaveDataImpl.Invoke(@params);
        }

        internal static void HookGameSaveReadBlobDataCompleted()
        {
            if (!HookedList.Contains("GameSaveReadBlobDataCompleted"))
            {
                HookedList.Add("GameSaveReadBlobDataCompleted");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "GameSaveReadBlobDataCompleted"),
                    GameSaveReadBlobDataCompleted);
            }
        }

        internal static event Delegates.GameSaveReadBlobDataCompleted_BeforeArgs _beforeGameSaveReadBlobDataCompleted;
        internal static event Delegates.GameSaveReadBlobDataCompleted_NormalArgs _afterGameSaveReadBlobDataCompleted;

        private static void GameSaveReadBlobDataCompleted(Action<XboxSdk, int, XGameSaveBlob[]> orig, XboxSdk self,
            int hresult, XGameSaveBlob[] blobs)
        {
            Delegates.Params_GameSaveReadBlobDataCompleted @params = new()
            {
                self = self, hresult = hresult, blobs = blobs
            };
            _beforeGameSaveReadBlobDataCompleted?.Invoke(@params);
            self = @params.self;
            hresult = @params.hresult;
            blobs = @params.blobs;
            orig(self, hresult, blobs);
            if (_afterGameSaveReadBlobDataCompleted != null) _afterGameSaveReadBlobDataCompleted.Invoke(@params);
        }

        internal static void HookUnlockAchievementImpl()
        {
            if (!HookedList.Contains("UnlockAchievementImpl"))
            {
                HookedList.Add("UnlockAchievementImpl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievementImpl"),
                    UnlockAchievementImpl);
            }
        }

        internal static event Delegates.UnlockAchievementImpl_BeforeArgs _beforeUnlockAchievementImpl;
        internal static event Delegates.UnlockAchievementImpl_NormalArgs _afterUnlockAchievementImpl;

        private static void UnlockAchievementImpl(Action<XboxSdk, string> orig, XboxSdk self, string achievementId)
        {
            Delegates.Params_UnlockAchievementImpl @params = new()
            {
                self = self, achievementId = achievementId
            };
            _beforeUnlockAchievementImpl?.Invoke(@params);
            self = @params.self;
            achievementId = @params.achievementId;
            orig(self, achievementId);
            if (_afterUnlockAchievementImpl != null) _afterUnlockAchievementImpl.Invoke(@params);
        }

        internal static void HookUnlockAchievementComplete()
        {
            if (!HookedList.Contains("UnlockAchievementComplete"))
            {
                HookedList.Add("UnlockAchievementComplete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievementComplete"),
                    UnlockAchievementComplete);
            }
        }

        internal static event Delegates.UnlockAchievementComplete_BeforeArgs _beforeUnlockAchievementComplete;
        internal static event Delegates.UnlockAchievementComplete_NormalArgs _afterUnlockAchievementComplete;

        private static void UnlockAchievementComplete(Action<XboxSdk, int> orig, XboxSdk self, int hresult)
        {
            Delegates.Params_UnlockAchievementComplete @params = new()
            {
                self = self, hresult = hresult
            };
            _beforeUnlockAchievementComplete?.Invoke(@params);
            self = @params.self;
            hresult = @params.hresult;
            orig(self, hresult);
            if (_afterUnlockAchievementComplete != null) _afterUnlockAchievementComplete.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<XboxSdk> orig, XboxSdk self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSucceeded()
        {
            if (!HookedList.Contains("Succeeded"))
            {
                HookedList.Add("Succeeded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Succeeded", false), Succeeded);
            }
        }

        internal static event Delegates.Succeeded_BeforeArgs _beforeSucceeded;
        internal static event Delegates.Succeeded_NormalArgs _afterSucceeded;

        private static bool Succeeded(Func<int, string, bool> orig, int hresult, string operationFriendlyName)
        {
            Delegates.Params_Succeeded @params = new()
            {
                hresult = hresult, operationFriendlyName = operationFriendlyName
            };
            _beforeSucceeded?.Invoke(@params);
            hresult = @params.hresult;
            operationFriendlyName = @params.operationFriendlyName;
            var retVal = orig(hresult, operationFriendlyName);
            if (_afterSucceeded != null) retVal = _afterSucceeded.Invoke(@params);
            return retVal;
        }

        internal static void Hook_LogError()
        {
            if (!HookedList.Contains("_LogError"))
            {
                HookedList.Add("_LogError");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "_LogError", false), _LogError);
            }
        }

        internal static event Delegates._LogError_BeforeArgs _before_LogError;
        internal static event Delegates._LogError_NormalArgs _after_LogError;

        private static void _LogError(Action<string> orig, string message)
        {
            Delegates.Params__LogError @params = new()
            {
                message = message
            };
            _before_LogError?.Invoke(@params);
            message = @params.message;
            orig(message);
            if (_after_LogError != null) _after_LogError.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void _Initialize_BeforeArgs(Params__Initialize args);

        public delegate void _Initialize_NormalArgs(Params__Initialize args);

        public delegate void _LogError_BeforeArgs(Params__LogError args);

        public delegate void _LogError_NormalArgs(Params__LogError args);

        public delegate void AddUserComplete_BeforeArgs(Params_AddUserComplete args);

        public delegate void AddUserComplete_NormalArgs(Params_AddUserComplete args);

        public delegate void CompletePostSignInInitialization_BeforeArgs(Params_CompletePostSignInInitialization args);

        public delegate void CompletePostSignInInitialization_NormalArgs(Params_CompletePostSignInInitialization args);

        public delegate void GameSaveReadBlobDataCompleted_BeforeArgs(Params_GameSaveReadBlobDataCompleted args);

        public delegate void GameSaveReadBlobDataCompleted_NormalArgs(Params_GameSaveReadBlobDataCompleted args);

        public delegate void GameSaveSubmitUpdateCompleted_BeforeArgs(Params_GameSaveSubmitUpdateCompleted args);

        public delegate void GameSaveSubmitUpdateCompleted_NormalArgs(Params_GameSaveSubmitUpdateCompleted args);

        public delegate void get_Helpers_BeforeArgs();

        public delegate XboxSdk get_Helpers_NormalArgs();

        public delegate void InitializeGameSaves_BeforeArgs(Params_InitializeGameSaves args);

        public delegate void InitializeGameSaves_NormalArgs(Params_InitializeGameSaves args);

        public delegate void LoadSaveData_BeforeArgs(Params_LoadSaveData args);

        public delegate void LoadSaveData_NormalArgs(Params_LoadSaveData args);

        public delegate void LoadSaveDataImpl_BeforeArgs(Params_LoadSaveDataImpl args);

        public delegate void LoadSaveDataImpl_NormalArgs(Params_LoadSaveDataImpl args);

        public delegate void Save_BeforeArgs(Params_Save args);

        public delegate void Save_NormalArgs(Params_Save args);

        public delegate void SaveImpl_BeforeArgs(Params_SaveImpl args);

        public delegate void SaveImpl_NormalArgs(Params_SaveImpl args);

        public delegate void SignIn_BeforeArgs(Params_SignIn args);

        public delegate void SignIn_NormalArgs(Params_SignIn args);

        public delegate void SignInImpl_BeforeArgs(Params_SignInImpl args);

        public delegate void SignInImpl_NormalArgs(Params_SignInImpl args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Succeeded_BeforeArgs(Params_Succeeded args);

        public delegate bool Succeeded_NormalArgs(Params_Succeeded args);

        public delegate void UnlockAchievement_BeforeArgs(Params_UnlockAchievement args);

        public delegate void UnlockAchievement_NormalArgs(Params_UnlockAchievement args);

        public delegate void UnlockAchievementComplete_BeforeArgs(Params_UnlockAchievementComplete args);

        public delegate void UnlockAchievementComplete_NormalArgs(Params_UnlockAchievementComplete args);

        public delegate void UnlockAchievementImpl_BeforeArgs(Params_UnlockAchievementImpl args);

        public delegate void UnlockAchievementImpl_NormalArgs(Params_UnlockAchievementImpl args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void XGameSaveInitializeCompleted_BeforeArgs(Params_XGameSaveInitializeCompleted args);

        public delegate void XGameSaveInitializeCompleted_NormalArgs(Params_XGameSaveInitializeCompleted args);

        public sealed class Params_Start
        {
            public XboxSdk self;
        }

        public sealed class Params__Initialize
        {
            public XboxSdk self;
        }

        public sealed class Params_SignIn
        {
            public XboxSdk self;
        }

        public sealed class Params_Save
        {
            public byte[] data;
            public XboxSdk self;
        }

        public sealed class Params_LoadSaveData
        {
            public XboxSdk self;
        }

        public sealed class Params_UnlockAchievement
        {
            public string achievementId;
            public XboxSdk self;
        }

        public sealed class Params_SignInImpl
        {
            public XboxSdk self;
        }

        public sealed class Params_AddUserComplete
        {
            public int hresult;
            public XboxSdk self;
            public XUserHandle userHandle;
        }

        public sealed class Params_CompletePostSignInInitialization
        {
            public XboxSdk self;
        }

        public sealed class Params_InitializeGameSaves
        {
            public XboxSdk self;
        }

        public sealed class Params_XGameSaveInitializeCompleted
        {
            public XGameSaveProviderHandle gameSaveProviderHandle;
            public int hresult;
            public XboxSdk self;
        }

        public sealed class Params_SaveImpl
        {
            public byte[] data;
            public XboxSdk self;
        }

        public sealed class Params_GameSaveSubmitUpdateCompleted
        {
            public int hresult;
            public XboxSdk self;
        }

        public sealed class Params_LoadSaveDataImpl
        {
            public XboxSdk self;
        }

        public sealed class Params_GameSaveReadBlobDataCompleted
        {
            public XGameSaveBlob[] blobs;
            public int hresult;
            public XboxSdk self;
        }

        public sealed class Params_UnlockAchievementImpl
        {
            public string achievementId;
            public XboxSdk self;
        }

        public sealed class Params_UnlockAchievementComplete
        {
            public int hresult;
            public XboxSdk self;
        }

        public sealed class Params_Update
        {
            public XboxSdk self;
        }

        public sealed class Params_Succeeded
        {
            public int hresult;
            public string operationFriendlyName;
        }

        public sealed class Params__LogError
        {
            public string message;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Helpers_BeforeArgs get_Helpers
        {
            add
            {
                HookHandler._beforeget_Helpers += value;
                HookHandler.Hookget_Helpers();
            }
            remove => HookHandler._beforeget_Helpers -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates._Initialize_BeforeArgs _Initialize
        {
            add
            {
                HookHandler._before_Initialize += value;
                HookHandler.Hook_Initialize();
            }
            remove => HookHandler._before_Initialize -= value;
        }

        public static event Delegates.SignIn_BeforeArgs SignIn
        {
            add
            {
                HookHandler._beforeSignIn += value;
                HookHandler.HookSignIn();
            }
            remove => HookHandler._beforeSignIn -= value;
        }

        public static event Delegates.Save_BeforeArgs Save
        {
            add
            {
                HookHandler._beforeSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._beforeSave -= value;
        }

        public static event Delegates.LoadSaveData_BeforeArgs LoadSaveData
        {
            add
            {
                HookHandler._beforeLoadSaveData += value;
                HookHandler.HookLoadSaveData();
            }
            remove => HookHandler._beforeLoadSaveData -= value;
        }

        public static event Delegates.UnlockAchievement_BeforeArgs UnlockAchievement
        {
            add
            {
                HookHandler._beforeUnlockAchievement += value;
                HookHandler.HookUnlockAchievement();
            }
            remove => HookHandler._beforeUnlockAchievement -= value;
        }

        public static event Delegates.SignInImpl_BeforeArgs SignInImpl
        {
            add
            {
                HookHandler._beforeSignInImpl += value;
                HookHandler.HookSignInImpl();
            }
            remove => HookHandler._beforeSignInImpl -= value;
        }

        public static event Delegates.AddUserComplete_BeforeArgs AddUserComplete
        {
            add
            {
                HookHandler._beforeAddUserComplete += value;
                HookHandler.HookAddUserComplete();
            }
            remove => HookHandler._beforeAddUserComplete -= value;
        }

        public static event Delegates.CompletePostSignInInitialization_BeforeArgs CompletePostSignInInitialization
        {
            add
            {
                HookHandler._beforeCompletePostSignInInitialization += value;
                HookHandler.HookCompletePostSignInInitialization();
            }
            remove => HookHandler._beforeCompletePostSignInInitialization -= value;
        }

        public static event Delegates.InitializeGameSaves_BeforeArgs InitializeGameSaves
        {
            add
            {
                HookHandler._beforeInitializeGameSaves += value;
                HookHandler.HookInitializeGameSaves();
            }
            remove => HookHandler._beforeInitializeGameSaves -= value;
        }

        public static event Delegates.XGameSaveInitializeCompleted_BeforeArgs XGameSaveInitializeCompleted
        {
            add
            {
                HookHandler._beforeXGameSaveInitializeCompleted += value;
                HookHandler.HookXGameSaveInitializeCompleted();
            }
            remove => HookHandler._beforeXGameSaveInitializeCompleted -= value;
        }

        public static event Delegates.SaveImpl_BeforeArgs SaveImpl
        {
            add
            {
                HookHandler._beforeSaveImpl += value;
                HookHandler.HookSaveImpl();
            }
            remove => HookHandler._beforeSaveImpl -= value;
        }

        public static event Delegates.GameSaveSubmitUpdateCompleted_BeforeArgs GameSaveSubmitUpdateCompleted
        {
            add
            {
                HookHandler._beforeGameSaveSubmitUpdateCompleted += value;
                HookHandler.HookGameSaveSubmitUpdateCompleted();
            }
            remove => HookHandler._beforeGameSaveSubmitUpdateCompleted -= value;
        }

        public static event Delegates.LoadSaveDataImpl_BeforeArgs LoadSaveDataImpl
        {
            add
            {
                HookHandler._beforeLoadSaveDataImpl += value;
                HookHandler.HookLoadSaveDataImpl();
            }
            remove => HookHandler._beforeLoadSaveDataImpl -= value;
        }

        public static event Delegates.GameSaveReadBlobDataCompleted_BeforeArgs GameSaveReadBlobDataCompleted
        {
            add
            {
                HookHandler._beforeGameSaveReadBlobDataCompleted += value;
                HookHandler.HookGameSaveReadBlobDataCompleted();
            }
            remove => HookHandler._beforeGameSaveReadBlobDataCompleted -= value;
        }

        public static event Delegates.UnlockAchievementImpl_BeforeArgs UnlockAchievementImpl
        {
            add
            {
                HookHandler._beforeUnlockAchievementImpl += value;
                HookHandler.HookUnlockAchievementImpl();
            }
            remove => HookHandler._beforeUnlockAchievementImpl -= value;
        }

        public static event Delegates.UnlockAchievementComplete_BeforeArgs UnlockAchievementComplete
        {
            add
            {
                HookHandler._beforeUnlockAchievementComplete += value;
                HookHandler.HookUnlockAchievementComplete();
            }
            remove => HookHandler._beforeUnlockAchievementComplete -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Succeeded_BeforeArgs Succeeded
        {
            add
            {
                HookHandler._beforeSucceeded += value;
                HookHandler.HookSucceeded();
            }
            remove => HookHandler._beforeSucceeded -= value;
        }

        public static event Delegates._LogError_BeforeArgs _LogError
        {
            add
            {
                HookHandler._before_LogError += value;
                HookHandler.Hook_LogError();
            }
            remove => HookHandler._before_LogError -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Helpers_NormalArgs get_Helpers
        {
            add
            {
                HookHandler._afterget_Helpers += value;
                HookHandler.Hookget_Helpers();
            }
            remove => HookHandler._afterget_Helpers -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates._Initialize_NormalArgs _Initialize
        {
            add
            {
                HookHandler._after_Initialize += value;
                HookHandler.Hook_Initialize();
            }
            remove => HookHandler._after_Initialize -= value;
        }

        public static event Delegates.SignIn_NormalArgs SignIn
        {
            add
            {
                HookHandler._afterSignIn += value;
                HookHandler.HookSignIn();
            }
            remove => HookHandler._afterSignIn -= value;
        }

        public static event Delegates.Save_NormalArgs Save
        {
            add
            {
                HookHandler._afterSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._afterSave -= value;
        }

        public static event Delegates.LoadSaveData_NormalArgs LoadSaveData
        {
            add
            {
                HookHandler._afterLoadSaveData += value;
                HookHandler.HookLoadSaveData();
            }
            remove => HookHandler._afterLoadSaveData -= value;
        }

        public static event Delegates.UnlockAchievement_NormalArgs UnlockAchievement
        {
            add
            {
                HookHandler._afterUnlockAchievement += value;
                HookHandler.HookUnlockAchievement();
            }
            remove => HookHandler._afterUnlockAchievement -= value;
        }

        public static event Delegates.SignInImpl_NormalArgs SignInImpl
        {
            add
            {
                HookHandler._afterSignInImpl += value;
                HookHandler.HookSignInImpl();
            }
            remove => HookHandler._afterSignInImpl -= value;
        }

        public static event Delegates.AddUserComplete_NormalArgs AddUserComplete
        {
            add
            {
                HookHandler._afterAddUserComplete += value;
                HookHandler.HookAddUserComplete();
            }
            remove => HookHandler._afterAddUserComplete -= value;
        }

        public static event Delegates.CompletePostSignInInitialization_NormalArgs CompletePostSignInInitialization
        {
            add
            {
                HookHandler._afterCompletePostSignInInitialization += value;
                HookHandler.HookCompletePostSignInInitialization();
            }
            remove => HookHandler._afterCompletePostSignInInitialization -= value;
        }

        public static event Delegates.InitializeGameSaves_NormalArgs InitializeGameSaves
        {
            add
            {
                HookHandler._afterInitializeGameSaves += value;
                HookHandler.HookInitializeGameSaves();
            }
            remove => HookHandler._afterInitializeGameSaves -= value;
        }

        public static event Delegates.XGameSaveInitializeCompleted_NormalArgs XGameSaveInitializeCompleted
        {
            add
            {
                HookHandler._afterXGameSaveInitializeCompleted += value;
                HookHandler.HookXGameSaveInitializeCompleted();
            }
            remove => HookHandler._afterXGameSaveInitializeCompleted -= value;
        }

        public static event Delegates.SaveImpl_NormalArgs SaveImpl
        {
            add
            {
                HookHandler._afterSaveImpl += value;
                HookHandler.HookSaveImpl();
            }
            remove => HookHandler._afterSaveImpl -= value;
        }

        public static event Delegates.GameSaveSubmitUpdateCompleted_NormalArgs GameSaveSubmitUpdateCompleted
        {
            add
            {
                HookHandler._afterGameSaveSubmitUpdateCompleted += value;
                HookHandler.HookGameSaveSubmitUpdateCompleted();
            }
            remove => HookHandler._afterGameSaveSubmitUpdateCompleted -= value;
        }

        public static event Delegates.LoadSaveDataImpl_NormalArgs LoadSaveDataImpl
        {
            add
            {
                HookHandler._afterLoadSaveDataImpl += value;
                HookHandler.HookLoadSaveDataImpl();
            }
            remove => HookHandler._afterLoadSaveDataImpl -= value;
        }

        public static event Delegates.GameSaveReadBlobDataCompleted_NormalArgs GameSaveReadBlobDataCompleted
        {
            add
            {
                HookHandler._afterGameSaveReadBlobDataCompleted += value;
                HookHandler.HookGameSaveReadBlobDataCompleted();
            }
            remove => HookHandler._afterGameSaveReadBlobDataCompleted -= value;
        }

        public static event Delegates.UnlockAchievementImpl_NormalArgs UnlockAchievementImpl
        {
            add
            {
                HookHandler._afterUnlockAchievementImpl += value;
                HookHandler.HookUnlockAchievementImpl();
            }
            remove => HookHandler._afterUnlockAchievementImpl -= value;
        }

        public static event Delegates.UnlockAchievementComplete_NormalArgs UnlockAchievementComplete
        {
            add
            {
                HookHandler._afterUnlockAchievementComplete += value;
                HookHandler.HookUnlockAchievementComplete();
            }
            remove => HookHandler._afterUnlockAchievementComplete -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Succeeded_NormalArgs Succeeded
        {
            add
            {
                HookHandler._afterSucceeded += value;
                HookHandler.HookSucceeded();
            }
            remove => HookHandler._afterSucceeded -= value;
        }

        public static event Delegates._LogError_NormalArgs _LogError
        {
            add
            {
                HookHandler._after_LogError += value;
                HookHandler.Hook_LogError();
            }
            remove => HookHandler._after_LogError -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Helpers_NormalArgs get_Helpers
        {
            add => HookEndpointManager.Add<Delegates.get_Helpers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "get_Helpers", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Helpers_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "get_Helpers", false), value);
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Start"), value);
        }

        public static event Delegates._Initialize_NormalArgs _Initialize
        {
            add => HookEndpointManager.Add<Delegates._Initialize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "_Initialize"), value);
            remove => HookEndpointManager.Remove<Delegates._Initialize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "_Initialize"), value);
        }

        public static event Delegates.SignIn_NormalArgs SignIn
        {
            add => HookEndpointManager.Add<Delegates.SignIn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SignIn"), value);
            remove => HookEndpointManager.Remove<Delegates.SignIn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SignIn"), value);
        }

        public static event Delegates.Save_NormalArgs Save
        {
            add => HookEndpointManager.Add<Delegates.Save_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Save"), value);
            remove => HookEndpointManager.Remove<Delegates.Save_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Save"), value);
        }

        public static event Delegates.LoadSaveData_NormalArgs LoadSaveData
        {
            add => HookEndpointManager.Add<Delegates.LoadSaveData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "LoadSaveData"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadSaveData_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "LoadSaveData"), value);
        }

        public static event Delegates.UnlockAchievement_NormalArgs UnlockAchievement
        {
            add => HookEndpointManager.Add<Delegates.UnlockAchievement_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievement"), value);
            remove => HookEndpointManager.Remove<Delegates.UnlockAchievement_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievement"), value);
        }

        public static event Delegates.SignInImpl_NormalArgs SignInImpl
        {
            add => HookEndpointManager.Add<Delegates.SignInImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SignInImpl"), value);
            remove => HookEndpointManager.Remove<Delegates.SignInImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SignInImpl"), value);
        }

        public static event Delegates.AddUserComplete_NormalArgs AddUserComplete
        {
            add => HookEndpointManager.Add<Delegates.AddUserComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "AddUserComplete"), value);
            remove => HookEndpointManager.Remove<Delegates.AddUserComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "AddUserComplete"), value);
        }

        public static event Delegates.CompletePostSignInInitialization_NormalArgs CompletePostSignInInitialization
        {
            add => HookEndpointManager.Add<Delegates.CompletePostSignInInitialization_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "CompletePostSignInInitialization"), value);
            remove => HookEndpointManager.Remove<Delegates.CompletePostSignInInitialization_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "CompletePostSignInInitialization"), value);
        }

        public static event Delegates.InitializeGameSaves_NormalArgs InitializeGameSaves
        {
            add => HookEndpointManager.Add<Delegates.InitializeGameSaves_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "InitializeGameSaves"), value);
            remove => HookEndpointManager.Remove<Delegates.InitializeGameSaves_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "InitializeGameSaves"), value);
        }

        public static event Delegates.XGameSaveInitializeCompleted_NormalArgs XGameSaveInitializeCompleted
        {
            add => HookEndpointManager.Add<Delegates.XGameSaveInitializeCompleted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "XGameSaveInitializeCompleted"), value);
            remove => HookEndpointManager.Remove<Delegates.XGameSaveInitializeCompleted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "XGameSaveInitializeCompleted"), value);
        }

        public static event Delegates.SaveImpl_NormalArgs SaveImpl
        {
            add => HookEndpointManager.Add<Delegates.SaveImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SaveImpl"), value);
            remove => HookEndpointManager.Remove<Delegates.SaveImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "SaveImpl"), value);
        }

        public static event Delegates.GameSaveSubmitUpdateCompleted_NormalArgs GameSaveSubmitUpdateCompleted
        {
            add => HookEndpointManager.Add<Delegates.GameSaveSubmitUpdateCompleted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "GameSaveSubmitUpdateCompleted"), value);
            remove => HookEndpointManager.Remove<Delegates.GameSaveSubmitUpdateCompleted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "GameSaveSubmitUpdateCompleted"), value);
        }

        public static event Delegates.LoadSaveDataImpl_NormalArgs LoadSaveDataImpl
        {
            add => HookEndpointManager.Add<Delegates.LoadSaveDataImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "LoadSaveDataImpl"), value);
            remove => HookEndpointManager.Remove<Delegates.LoadSaveDataImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "LoadSaveDataImpl"), value);
        }

        public static event Delegates.GameSaveReadBlobDataCompleted_NormalArgs GameSaveReadBlobDataCompleted
        {
            add => HookEndpointManager.Add<Delegates.GameSaveReadBlobDataCompleted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "GameSaveReadBlobDataCompleted"), value);
            remove => HookEndpointManager.Remove<Delegates.GameSaveReadBlobDataCompleted_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "GameSaveReadBlobDataCompleted"), value);
        }

        public static event Delegates.UnlockAchievementImpl_NormalArgs UnlockAchievementImpl
        {
            add => HookEndpointManager.Add<Delegates.UnlockAchievementImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievementImpl"), value);
            remove => HookEndpointManager.Remove<Delegates.UnlockAchievementImpl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievementImpl"), value);
        }

        public static event Delegates.UnlockAchievementComplete_NormalArgs UnlockAchievementComplete
        {
            add => HookEndpointManager.Add<Delegates.UnlockAchievementComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievementComplete"), value);
            remove => HookEndpointManager.Remove<Delegates.UnlockAchievementComplete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "UnlockAchievementComplete"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Update"), value);
        }

        public static event Delegates.Succeeded_NormalArgs Succeeded
        {
            add => HookEndpointManager.Add<Delegates.Succeeded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Succeeded", false), value);
            remove => HookEndpointManager.Remove<Delegates.Succeeded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "Succeeded", false), value);
        }

        public static event Delegates._LogError_NormalArgs _LogError
        {
            add => HookEndpointManager.Add<Delegates._LogError_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "_LogError", false), value);
            remove => HookEndpointManager.Remove<Delegates._LogError_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(XboxSdk), "_LogError", false), value);
        }
    }
}