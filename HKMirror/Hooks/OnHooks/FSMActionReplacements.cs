namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FSMActionReplacements class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFSMActionReplacements
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetMaterialColor()
        {
            if (!HookedList.Contains("SetMaterialColor"))
            {
                HookedList.Add("SetMaterialColor");
                On.FSMActionReplacements.SetMaterialColor += SetMaterialColor;
            }
        }

        internal static event Delegates.SetMaterialColor_BeforeArgs _beforeSetMaterialColor;
        internal static event Delegates.SetMaterialColor_AfterArgs _afterSetMaterialColor;

        private static void SetMaterialColor(On.FSMActionReplacements.orig_SetMaterialColor orig, Component me,
            Color color)
        {
            Delegates.Params_SetMaterialColor @params = new()
            {
                me = me, color = color
            };
            if (_beforeSetMaterialColor != null)
                foreach (Delegates.SetMaterialColor_BeforeArgs toInvoke in _beforeSetMaterialColor.GetInvocationList())
                    try
                    {
                        _beforeSetMaterialColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            me = @params.me;
            color = @params.color;
            orig(me, color);
            if (_afterSetMaterialColor != null)
                foreach (Delegates.SetMaterialColor_AfterArgs toInvoke in _afterSetMaterialColor.GetInvocationList())
                    try
                    {
                        _afterSetMaterialColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void SetMaterialColor_AfterArgs(Params_SetMaterialColor args);

        public delegate void SetMaterialColor_BeforeArgs(Params_SetMaterialColor args);

        public delegate void SetMaterialColor_WithArgs(Action<Component, Color> orig, Component me, Color color);

        public sealed class Params_SetMaterialColor
        {
            public Color color;
            public Component me;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetMaterialColor_BeforeArgs SetMaterialColor
        {
            add
            {
                HookHandler._beforeSetMaterialColor += value;
                HookHandler.HookSetMaterialColor();
            }
            remove => HookHandler._beforeSetMaterialColor -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetMaterialColor_AfterArgs SetMaterialColor
        {
            add
            {
                HookHandler._afterSetMaterialColor += value;
                HookHandler.HookSetMaterialColor();
            }
            remove => HookHandler._afterSetMaterialColor -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.FSMActionReplacements.hook_SetMaterialColor SetMaterialColor
        {
            add => On.FSMActionReplacements.SetMaterialColor += value;
            remove => On.FSMActionReplacements.SetMaterialColor -= value;
        }
    }
}