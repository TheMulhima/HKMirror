using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MaterialReferenceManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMaterialReferenceManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "get_instance", false),
                    get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_NormalArgs _afterget_instance;

        private static MaterialReferenceManager get_instance(Func<MaterialReferenceManager> orig)
        {
            _beforeget_instance?.Invoke();
            var retVal = orig();
            if (_afterget_instance != null) retVal = _afterget_instance.Invoke();
            return retVal;
        }

        internal static void HookAddFontAsset()
        {
            if (!HookedList.Contains("AddFontAsset"))
            {
                HookedList.Add("AddFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontAsset", false),
                    AddFontAsset);
            }
        }

        internal static event Delegates.AddFontAsset_BeforeArgs _beforeAddFontAsset;
        internal static event Delegates.AddFontAsset_NormalArgs _afterAddFontAsset;

        private static void AddFontAsset(Action<TMP_FontAsset> orig, TMP_FontAsset fontAsset)
        {
            Delegates.Params_AddFontAsset @params = new()
            {
                fontAsset = fontAsset
            };
            _beforeAddFontAsset?.Invoke(@params);
            fontAsset = @params.fontAsset;
            orig(fontAsset);
            if (_afterAddFontAsset != null) _afterAddFontAsset.Invoke(@params);
        }

        internal static void HookAddFontAssetInternal()
        {
            if (!HookedList.Contains("AddFontAssetInternal"))
            {
                HookedList.Add("AddFontAssetInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontAssetInternal"),
                    AddFontAssetInternal);
            }
        }

        internal static event Delegates.AddFontAssetInternal_BeforeArgs _beforeAddFontAssetInternal;
        internal static event Delegates.AddFontAssetInternal_NormalArgs _afterAddFontAssetInternal;

        private static void AddFontAssetInternal(Action<MaterialReferenceManager, TMP_FontAsset> orig,
            MaterialReferenceManager self, TMP_FontAsset fontAsset)
        {
            Delegates.Params_AddFontAssetInternal @params = new()
            {
                self = self, fontAsset = fontAsset
            };
            _beforeAddFontAssetInternal?.Invoke(@params);
            self = @params.self;
            fontAsset = @params.fontAsset;
            orig(self, fontAsset);
            if (_afterAddFontAssetInternal != null) _afterAddFontAssetInternal.Invoke(@params);
        }

        internal static void HookAddSpriteAsset_TMP_SpriteAsset()
        {
            if (!HookedList.Contains("AddSpriteAsset_TMP_SpriteAsset"))
            {
                HookedList.Add("AddSpriteAsset_TMP_SpriteAsset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAsset_TMP_SpriteAsset",
                        false), AddSpriteAsset_TMP_SpriteAsset);
            }
        }

        internal static event Delegates.AddSpriteAsset_TMP_SpriteAsset_BeforeArgs _beforeAddSpriteAsset_TMP_SpriteAsset;
        internal static event Delegates.AddSpriteAsset_TMP_SpriteAsset_NormalArgs _afterAddSpriteAsset_TMP_SpriteAsset;

        private static void AddSpriteAsset_TMP_SpriteAsset(Action<TMP_SpriteAsset> orig, TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_AddSpriteAsset_TMP_SpriteAsset @params = new()
            {
                spriteAsset = spriteAsset
            };
            _beforeAddSpriteAsset_TMP_SpriteAsset?.Invoke(@params);
            spriteAsset = @params.spriteAsset;
            orig(spriteAsset);
            if (_afterAddSpriteAsset_TMP_SpriteAsset != null) _afterAddSpriteAsset_TMP_SpriteAsset.Invoke(@params);
        }

        internal static void HookAddSpriteAssetInternal_TMP_SpriteAsset()
        {
            if (!HookedList.Contains("AddSpriteAssetInternal_TMP_SpriteAsset"))
            {
                HookedList.Add("AddSpriteAssetInternal_TMP_SpriteAsset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager),
                        "AddSpriteAssetInternal_TMP_SpriteAsset"), AddSpriteAssetInternal_TMP_SpriteAsset);
            }
        }

        internal static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs
            _beforeAddSpriteAssetInternal_TMP_SpriteAsset;

        internal static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_NormalArgs
            _afterAddSpriteAssetInternal_TMP_SpriteAsset;

        private static void AddSpriteAssetInternal_TMP_SpriteAsset(
            Action<MaterialReferenceManager, TMP_SpriteAsset> orig, MaterialReferenceManager self,
            TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_AddSpriteAssetInternal_TMP_SpriteAsset @params = new()
            {
                self = self, spriteAsset = spriteAsset
            };
            _beforeAddSpriteAssetInternal_TMP_SpriteAsset?.Invoke(@params);
            self = @params.self;
            spriteAsset = @params.spriteAsset;
            orig(self, spriteAsset);
            if (_afterAddSpriteAssetInternal_TMP_SpriteAsset != null)
                _afterAddSpriteAssetInternal_TMP_SpriteAsset.Invoke(@params);
        }

        internal static void HookAddSpriteAsset_int_TMP_SpriteAsset()
        {
            if (!HookedList.Contains("AddSpriteAsset_int_TMP_SpriteAsset"))
            {
                HookedList.Add("AddSpriteAsset_int_TMP_SpriteAsset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager),
                        "AddSpriteAsset_int_TMP_SpriteAsset", false), AddSpriteAsset_int_TMP_SpriteAsset);
            }
        }

        internal static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs
            _beforeAddSpriteAsset_int_TMP_SpriteAsset;

        internal static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_NormalArgs
            _afterAddSpriteAsset_int_TMP_SpriteAsset;

        private static void AddSpriteAsset_int_TMP_SpriteAsset(Action<int, TMP_SpriteAsset> orig, int hashCode,
            TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_AddSpriteAsset_int_TMP_SpriteAsset @params = new()
            {
                hashCode = hashCode, spriteAsset = spriteAsset
            };
            _beforeAddSpriteAsset_int_TMP_SpriteAsset?.Invoke(@params);
            hashCode = @params.hashCode;
            spriteAsset = @params.spriteAsset;
            orig(hashCode, spriteAsset);
            if (_afterAddSpriteAsset_int_TMP_SpriteAsset != null)
                _afterAddSpriteAsset_int_TMP_SpriteAsset.Invoke(@params);
        }

        internal static void HookAddSpriteAssetInternal_int_TMP_SpriteAsset()
        {
            if (!HookedList.Contains("AddSpriteAssetInternal_int_TMP_SpriteAsset"))
            {
                HookedList.Add("AddSpriteAssetInternal_int_TMP_SpriteAsset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager),
                        "AddSpriteAssetInternal_int_TMP_SpriteAsset"), AddSpriteAssetInternal_int_TMP_SpriteAsset);
            }
        }

        internal static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs
            _beforeAddSpriteAssetInternal_int_TMP_SpriteAsset;

        internal static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_NormalArgs
            _afterAddSpriteAssetInternal_int_TMP_SpriteAsset;

        private static void AddSpriteAssetInternal_int_TMP_SpriteAsset(
            Action<MaterialReferenceManager, int, TMP_SpriteAsset> orig, MaterialReferenceManager self, int hashCode,
            TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_AddSpriteAssetInternal_int_TMP_SpriteAsset @params = new()
            {
                self = self, hashCode = hashCode, spriteAsset = spriteAsset
            };
            _beforeAddSpriteAssetInternal_int_TMP_SpriteAsset?.Invoke(@params);
            self = @params.self;
            hashCode = @params.hashCode;
            spriteAsset = @params.spriteAsset;
            orig(self, hashCode, spriteAsset);
            if (_afterAddSpriteAssetInternal_int_TMP_SpriteAsset != null)
                _afterAddSpriteAssetInternal_int_TMP_SpriteAsset.Invoke(@params);
        }

        internal static void HookAddFontMaterial()
        {
            if (!HookedList.Contains("AddFontMaterial"))
            {
                HookedList.Add("AddFontMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontMaterial", false),
                    AddFontMaterial);
            }
        }

        internal static event Delegates.AddFontMaterial_BeforeArgs _beforeAddFontMaterial;
        internal static event Delegates.AddFontMaterial_NormalArgs _afterAddFontMaterial;

        private static void AddFontMaterial(Action<int, Material> orig, int hashCode, Material material)
        {
            Delegates.Params_AddFontMaterial @params = new()
            {
                hashCode = hashCode, material = material
            };
            _beforeAddFontMaterial?.Invoke(@params);
            hashCode = @params.hashCode;
            material = @params.material;
            orig(hashCode, material);
            if (_afterAddFontMaterial != null) _afterAddFontMaterial.Invoke(@params);
        }

        internal static void HookAddFontMaterialInternal()
        {
            if (!HookedList.Contains("AddFontMaterialInternal"))
            {
                HookedList.Add("AddFontMaterialInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontMaterialInternal"),
                    AddFontMaterialInternal);
            }
        }

        internal static event Delegates.AddFontMaterialInternal_BeforeArgs _beforeAddFontMaterialInternal;
        internal static event Delegates.AddFontMaterialInternal_NormalArgs _afterAddFontMaterialInternal;

        private static void AddFontMaterialInternal(Action<MaterialReferenceManager, int, Material> orig,
            MaterialReferenceManager self, int hashCode, Material material)
        {
            Delegates.Params_AddFontMaterialInternal @params = new()
            {
                self = self, hashCode = hashCode, material = material
            };
            _beforeAddFontMaterialInternal?.Invoke(@params);
            self = @params.self;
            hashCode = @params.hashCode;
            material = @params.material;
            orig(self, hashCode, material);
            if (_afterAddFontMaterialInternal != null) _afterAddFontMaterialInternal.Invoke(@params);
        }

        internal static void HookContains_TMP_FontAsset()
        {
            if (!HookedList.Contains("Contains_TMP_FontAsset"))
            {
                HookedList.Add("Contains_TMP_FontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "Contains_TMP_FontAsset"),
                    Contains_TMP_FontAsset);
            }
        }

        internal static event Delegates.Contains_TMP_FontAsset_BeforeArgs _beforeContains_TMP_FontAsset;
        internal static event Delegates.Contains_TMP_FontAsset_NormalArgs _afterContains_TMP_FontAsset;

        private static bool Contains_TMP_FontAsset(Func<MaterialReferenceManager, TMP_FontAsset, bool> orig,
            MaterialReferenceManager self, TMP_FontAsset font)
        {
            Delegates.Params_Contains_TMP_FontAsset @params = new()
            {
                self = self, font = font
            };
            _beforeContains_TMP_FontAsset?.Invoke(@params);
            self = @params.self;
            font = @params.font;
            var retVal = orig(self, font);
            if (_afterContains_TMP_FontAsset != null) retVal = _afterContains_TMP_FontAsset.Invoke(@params);
            return retVal;
        }

        internal static void HookContains_TMP_SpriteAsset()
        {
            if (!HookedList.Contains("Contains_TMP_SpriteAsset"))
            {
                HookedList.Add("Contains_TMP_SpriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "Contains_TMP_SpriteAsset"),
                    Contains_TMP_SpriteAsset);
            }
        }

        internal static event Delegates.Contains_TMP_SpriteAsset_BeforeArgs _beforeContains_TMP_SpriteAsset;
        internal static event Delegates.Contains_TMP_SpriteAsset_NormalArgs _afterContains_TMP_SpriteAsset;

        private static bool Contains_TMP_SpriteAsset(Func<MaterialReferenceManager, TMP_SpriteAsset, bool> orig,
            MaterialReferenceManager self, TMP_SpriteAsset sprite)
        {
            Delegates.Params_Contains_TMP_SpriteAsset @params = new()
            {
                self = self, sprite = sprite
            };
            _beforeContains_TMP_SpriteAsset?.Invoke(@params);
            self = @params.self;
            sprite = @params.sprite;
            var retVal = orig(self, sprite);
            if (_afterContains_TMP_SpriteAsset != null) retVal = _afterContains_TMP_SpriteAsset.Invoke(@params);
            return retVal;
        }

        internal static void HookTryGetFontAsset()
        {
            if (!HookedList.Contains("TryGetFontAsset"))
            {
                HookedList.Add("TryGetFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetFontAsset", false),
                    TryGetFontAsset);
            }
        }

        internal static event Delegates.TryGetFontAsset_BeforeArgs _beforeTryGetFontAsset;
        internal static event Delegates.TryGetFontAsset_NormalArgs _afterTryGetFontAsset;

        private static bool TryGetFontAsset(Func<int, TMP_FontAsset, bool> orig, int hashCode, TMP_FontAsset fontAsset)
        {
            Delegates.Params_TryGetFontAsset @params = new()
            {
                hashCode = hashCode, fontAsset = fontAsset
            };
            _beforeTryGetFontAsset?.Invoke(@params);
            hashCode = @params.hashCode;
            fontAsset = @params.fontAsset;
            var retVal = orig(hashCode, fontAsset);
            if (_afterTryGetFontAsset != null) retVal = _afterTryGetFontAsset.Invoke(@params);
            return retVal;
        }

        internal static void HookTryGetFontAssetInternal()
        {
            if (!HookedList.Contains("TryGetFontAssetInternal"))
            {
                HookedList.Add("TryGetFontAssetInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetFontAssetInternal"),
                    TryGetFontAssetInternal);
            }
        }

        internal static event Delegates.TryGetFontAssetInternal_BeforeArgs _beforeTryGetFontAssetInternal;
        internal static event Delegates.TryGetFontAssetInternal_NormalArgs _afterTryGetFontAssetInternal;

        private static bool TryGetFontAssetInternal(Func<MaterialReferenceManager, int, TMP_FontAsset, bool> orig,
            MaterialReferenceManager self, int hashCode, TMP_FontAsset fontAsset)
        {
            Delegates.Params_TryGetFontAssetInternal @params = new()
            {
                self = self, hashCode = hashCode, fontAsset = fontAsset
            };
            _beforeTryGetFontAssetInternal?.Invoke(@params);
            self = @params.self;
            hashCode = @params.hashCode;
            fontAsset = @params.fontAsset;
            var retVal = orig(self, hashCode, fontAsset);
            if (_afterTryGetFontAssetInternal != null) retVal = _afterTryGetFontAssetInternal.Invoke(@params);
            return retVal;
        }

        internal static void HookTryGetSpriteAsset()
        {
            if (!HookedList.Contains("TryGetSpriteAsset"))
            {
                HookedList.Add("TryGetSpriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetSpriteAsset", false),
                    TryGetSpriteAsset);
            }
        }

        internal static event Delegates.TryGetSpriteAsset_BeforeArgs _beforeTryGetSpriteAsset;
        internal static event Delegates.TryGetSpriteAsset_NormalArgs _afterTryGetSpriteAsset;

        private static bool TryGetSpriteAsset(Func<int, TMP_SpriteAsset, bool> orig, int hashCode,
            TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_TryGetSpriteAsset @params = new()
            {
                hashCode = hashCode, spriteAsset = spriteAsset
            };
            _beforeTryGetSpriteAsset?.Invoke(@params);
            hashCode = @params.hashCode;
            spriteAsset = @params.spriteAsset;
            var retVal = orig(hashCode, spriteAsset);
            if (_afterTryGetSpriteAsset != null) retVal = _afterTryGetSpriteAsset.Invoke(@params);
            return retVal;
        }

        internal static void HookTryGetSpriteAssetInternal()
        {
            if (!HookedList.Contains("TryGetSpriteAssetInternal"))
            {
                HookedList.Add("TryGetSpriteAssetInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetSpriteAssetInternal"),
                    TryGetSpriteAssetInternal);
            }
        }

        internal static event Delegates.TryGetSpriteAssetInternal_BeforeArgs _beforeTryGetSpriteAssetInternal;
        internal static event Delegates.TryGetSpriteAssetInternal_NormalArgs _afterTryGetSpriteAssetInternal;

        private static bool TryGetSpriteAssetInternal(Func<MaterialReferenceManager, int, TMP_SpriteAsset, bool> orig,
            MaterialReferenceManager self, int hashCode, TMP_SpriteAsset spriteAsset)
        {
            Delegates.Params_TryGetSpriteAssetInternal @params = new()
            {
                self = self, hashCode = hashCode, spriteAsset = spriteAsset
            };
            _beforeTryGetSpriteAssetInternal?.Invoke(@params);
            self = @params.self;
            hashCode = @params.hashCode;
            spriteAsset = @params.spriteAsset;
            var retVal = orig(self, hashCode, spriteAsset);
            if (_afterTryGetSpriteAssetInternal != null) retVal = _afterTryGetSpriteAssetInternal.Invoke(@params);
            return retVal;
        }

        internal static void HookTryGetMaterial()
        {
            if (!HookedList.Contains("TryGetMaterial"))
            {
                HookedList.Add("TryGetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetMaterial", false),
                    TryGetMaterial);
            }
        }

        internal static event Delegates.TryGetMaterial_BeforeArgs _beforeTryGetMaterial;
        internal static event Delegates.TryGetMaterial_NormalArgs _afterTryGetMaterial;

        private static bool TryGetMaterial(Func<int, Material, bool> orig, int hashCode, Material material)
        {
            Delegates.Params_TryGetMaterial @params = new()
            {
                hashCode = hashCode, material = material
            };
            _beforeTryGetMaterial?.Invoke(@params);
            hashCode = @params.hashCode;
            material = @params.material;
            var retVal = orig(hashCode, material);
            if (_afterTryGetMaterial != null) retVal = _afterTryGetMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookTryGetMaterialInternal()
        {
            if (!HookedList.Contains("TryGetMaterialInternal"))
            {
                HookedList.Add("TryGetMaterialInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetMaterialInternal"),
                    TryGetMaterialInternal);
            }
        }

        internal static event Delegates.TryGetMaterialInternal_BeforeArgs _beforeTryGetMaterialInternal;
        internal static event Delegates.TryGetMaterialInternal_NormalArgs _afterTryGetMaterialInternal;

        private static bool TryGetMaterialInternal(Func<MaterialReferenceManager, int, Material, bool> orig,
            MaterialReferenceManager self, int hashCode, Material material)
        {
            Delegates.Params_TryGetMaterialInternal @params = new()
            {
                self = self, hashCode = hashCode, material = material
            };
            _beforeTryGetMaterialInternal?.Invoke(@params);
            self = @params.self;
            hashCode = @params.hashCode;
            material = @params.material;
            var retVal = orig(self, hashCode, material);
            if (_afterTryGetMaterialInternal != null) retVal = _afterTryGetMaterialInternal.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddFontAsset_BeforeArgs(Params_AddFontAsset args);

        public delegate void AddFontAsset_NormalArgs(Params_AddFontAsset args);

        public delegate void AddFontAssetInternal_BeforeArgs(Params_AddFontAssetInternal args);

        public delegate void AddFontAssetInternal_NormalArgs(Params_AddFontAssetInternal args);

        public delegate void AddFontMaterial_BeforeArgs(Params_AddFontMaterial args);

        public delegate void AddFontMaterial_NormalArgs(Params_AddFontMaterial args);

        public delegate void AddFontMaterialInternal_BeforeArgs(Params_AddFontMaterialInternal args);

        public delegate void AddFontMaterialInternal_NormalArgs(Params_AddFontMaterialInternal args);

        public delegate void AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs(
            Params_AddSpriteAsset_int_TMP_SpriteAsset args);

        public delegate void AddSpriteAsset_int_TMP_SpriteAsset_NormalArgs(
            Params_AddSpriteAsset_int_TMP_SpriteAsset args);

        public delegate void AddSpriteAsset_TMP_SpriteAsset_BeforeArgs(Params_AddSpriteAsset_TMP_SpriteAsset args);

        public delegate void AddSpriteAsset_TMP_SpriteAsset_NormalArgs(Params_AddSpriteAsset_TMP_SpriteAsset args);

        public delegate void AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs(
            Params_AddSpriteAssetInternal_int_TMP_SpriteAsset args);

        public delegate void AddSpriteAssetInternal_int_TMP_SpriteAsset_NormalArgs(
            Params_AddSpriteAssetInternal_int_TMP_SpriteAsset args);

        public delegate void AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs(
            Params_AddSpriteAssetInternal_TMP_SpriteAsset args);

        public delegate void AddSpriteAssetInternal_TMP_SpriteAsset_NormalArgs(
            Params_AddSpriteAssetInternal_TMP_SpriteAsset args);

        public delegate void Contains_TMP_FontAsset_BeforeArgs(Params_Contains_TMP_FontAsset args);

        public delegate bool Contains_TMP_FontAsset_NormalArgs(Params_Contains_TMP_FontAsset args);

        public delegate void Contains_TMP_SpriteAsset_BeforeArgs(Params_Contains_TMP_SpriteAsset args);

        public delegate bool Contains_TMP_SpriteAsset_NormalArgs(Params_Contains_TMP_SpriteAsset args);

        public delegate void get_instance_BeforeArgs();

        public delegate MaterialReferenceManager get_instance_NormalArgs();

        public delegate void TryGetFontAsset_BeforeArgs(Params_TryGetFontAsset args);

        public delegate bool TryGetFontAsset_NormalArgs(Params_TryGetFontAsset args);

        public delegate void TryGetFontAssetInternal_BeforeArgs(Params_TryGetFontAssetInternal args);

        public delegate bool TryGetFontAssetInternal_NormalArgs(Params_TryGetFontAssetInternal args);

        public delegate void TryGetMaterial_BeforeArgs(Params_TryGetMaterial args);

        public delegate bool TryGetMaterial_NormalArgs(Params_TryGetMaterial args);

        public delegate void TryGetMaterialInternal_BeforeArgs(Params_TryGetMaterialInternal args);

        public delegate bool TryGetMaterialInternal_NormalArgs(Params_TryGetMaterialInternal args);

        public delegate void TryGetSpriteAsset_BeforeArgs(Params_TryGetSpriteAsset args);

        public delegate bool TryGetSpriteAsset_NormalArgs(Params_TryGetSpriteAsset args);

        public delegate void TryGetSpriteAssetInternal_BeforeArgs(Params_TryGetSpriteAssetInternal args);

        public delegate bool TryGetSpriteAssetInternal_NormalArgs(Params_TryGetSpriteAssetInternal args);

        public sealed class Params_AddFontAsset
        {
            public TMP_FontAsset fontAsset;
        }

        public sealed class Params_AddFontAssetInternal
        {
            public TMP_FontAsset fontAsset;
            public MaterialReferenceManager self;
        }

        public sealed class Params_AddSpriteAsset_TMP_SpriteAsset
        {
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_AddSpriteAssetInternal_TMP_SpriteAsset
        {
            public MaterialReferenceManager self;
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_AddSpriteAsset_int_TMP_SpriteAsset
        {
            public int hashCode;
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_AddSpriteAssetInternal_int_TMP_SpriteAsset
        {
            public int hashCode;
            public MaterialReferenceManager self;
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_AddFontMaterial
        {
            public int hashCode;
            public Material material;
        }

        public sealed class Params_AddFontMaterialInternal
        {
            public int hashCode;
            public Material material;
            public MaterialReferenceManager self;
        }

        public sealed class Params_Contains_TMP_FontAsset
        {
            public TMP_FontAsset font;
            public MaterialReferenceManager self;
        }

        public sealed class Params_Contains_TMP_SpriteAsset
        {
            public MaterialReferenceManager self;
            public TMP_SpriteAsset sprite;
        }

        public sealed class Params_TryGetFontAsset
        {
            public TMP_FontAsset fontAsset;
            public int hashCode;
        }

        public sealed class Params_TryGetFontAssetInternal
        {
            public TMP_FontAsset fontAsset;
            public int hashCode;
            public MaterialReferenceManager self;
        }

        public sealed class Params_TryGetSpriteAsset
        {
            public int hashCode;
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_TryGetSpriteAssetInternal
        {
            public int hashCode;
            public MaterialReferenceManager self;
            public TMP_SpriteAsset spriteAsset;
        }

        public sealed class Params_TryGetMaterial
        {
            public int hashCode;
            public Material material;
        }

        public sealed class Params_TryGetMaterialInternal
        {
            public int hashCode;
            public Material material;
            public MaterialReferenceManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.AddFontAsset_BeforeArgs AddFontAsset
        {
            add
            {
                HookHandler._beforeAddFontAsset += value;
                HookHandler.HookAddFontAsset();
            }
            remove => HookHandler._beforeAddFontAsset -= value;
        }

        public static event Delegates.AddFontAssetInternal_BeforeArgs AddFontAssetInternal
        {
            add
            {
                HookHandler._beforeAddFontAssetInternal += value;
                HookHandler.HookAddFontAssetInternal();
            }
            remove => HookHandler._beforeAddFontAssetInternal -= value;
        }

        public static event Delegates.AddSpriteAsset_TMP_SpriteAsset_BeforeArgs AddSpriteAsset_TMP_SpriteAsset
        {
            add
            {
                HookHandler._beforeAddSpriteAsset_TMP_SpriteAsset += value;
                HookHandler.HookAddSpriteAsset_TMP_SpriteAsset();
            }
            remove => HookHandler._beforeAddSpriteAsset_TMP_SpriteAsset -= value;
        }

        public static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs
            AddSpriteAssetInternal_TMP_SpriteAsset
            {
                add
                {
                    HookHandler._beforeAddSpriteAssetInternal_TMP_SpriteAsset += value;
                    HookHandler.HookAddSpriteAssetInternal_TMP_SpriteAsset();
                }
                remove => HookHandler._beforeAddSpriteAssetInternal_TMP_SpriteAsset -= value;
            }

        public static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs AddSpriteAsset_int_TMP_SpriteAsset
        {
            add
            {
                HookHandler._beforeAddSpriteAsset_int_TMP_SpriteAsset += value;
                HookHandler.HookAddSpriteAsset_int_TMP_SpriteAsset();
            }
            remove => HookHandler._beforeAddSpriteAsset_int_TMP_SpriteAsset -= value;
        }

        public static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs
            AddSpriteAssetInternal_int_TMP_SpriteAsset
            {
                add
                {
                    HookHandler._beforeAddSpriteAssetInternal_int_TMP_SpriteAsset += value;
                    HookHandler.HookAddSpriteAssetInternal_int_TMP_SpriteAsset();
                }
                remove => HookHandler._beforeAddSpriteAssetInternal_int_TMP_SpriteAsset -= value;
            }

        public static event Delegates.AddFontMaterial_BeforeArgs AddFontMaterial
        {
            add
            {
                HookHandler._beforeAddFontMaterial += value;
                HookHandler.HookAddFontMaterial();
            }
            remove => HookHandler._beforeAddFontMaterial -= value;
        }

        public static event Delegates.AddFontMaterialInternal_BeforeArgs AddFontMaterialInternal
        {
            add
            {
                HookHandler._beforeAddFontMaterialInternal += value;
                HookHandler.HookAddFontMaterialInternal();
            }
            remove => HookHandler._beforeAddFontMaterialInternal -= value;
        }

        public static event Delegates.Contains_TMP_FontAsset_BeforeArgs Contains_TMP_FontAsset
        {
            add
            {
                HookHandler._beforeContains_TMP_FontAsset += value;
                HookHandler.HookContains_TMP_FontAsset();
            }
            remove => HookHandler._beforeContains_TMP_FontAsset -= value;
        }

        public static event Delegates.Contains_TMP_SpriteAsset_BeforeArgs Contains_TMP_SpriteAsset
        {
            add
            {
                HookHandler._beforeContains_TMP_SpriteAsset += value;
                HookHandler.HookContains_TMP_SpriteAsset();
            }
            remove => HookHandler._beforeContains_TMP_SpriteAsset -= value;
        }

        public static event Delegates.TryGetFontAsset_BeforeArgs TryGetFontAsset
        {
            add
            {
                HookHandler._beforeTryGetFontAsset += value;
                HookHandler.HookTryGetFontAsset();
            }
            remove => HookHandler._beforeTryGetFontAsset -= value;
        }

        public static event Delegates.TryGetFontAssetInternal_BeforeArgs TryGetFontAssetInternal
        {
            add
            {
                HookHandler._beforeTryGetFontAssetInternal += value;
                HookHandler.HookTryGetFontAssetInternal();
            }
            remove => HookHandler._beforeTryGetFontAssetInternal -= value;
        }

        public static event Delegates.TryGetSpriteAsset_BeforeArgs TryGetSpriteAsset
        {
            add
            {
                HookHandler._beforeTryGetSpriteAsset += value;
                HookHandler.HookTryGetSpriteAsset();
            }
            remove => HookHandler._beforeTryGetSpriteAsset -= value;
        }

        public static event Delegates.TryGetSpriteAssetInternal_BeforeArgs TryGetSpriteAssetInternal
        {
            add
            {
                HookHandler._beforeTryGetSpriteAssetInternal += value;
                HookHandler.HookTryGetSpriteAssetInternal();
            }
            remove => HookHandler._beforeTryGetSpriteAssetInternal -= value;
        }

        public static event Delegates.TryGetMaterial_BeforeArgs TryGetMaterial
        {
            add
            {
                HookHandler._beforeTryGetMaterial += value;
                HookHandler.HookTryGetMaterial();
            }
            remove => HookHandler._beforeTryGetMaterial -= value;
        }

        public static event Delegates.TryGetMaterialInternal_BeforeArgs TryGetMaterialInternal
        {
            add
            {
                HookHandler._beforeTryGetMaterialInternal += value;
                HookHandler.HookTryGetMaterialInternal();
            }
            remove => HookHandler._beforeTryGetMaterialInternal -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.AddFontAsset_NormalArgs AddFontAsset
        {
            add
            {
                HookHandler._afterAddFontAsset += value;
                HookHandler.HookAddFontAsset();
            }
            remove => HookHandler._afterAddFontAsset -= value;
        }

        public static event Delegates.AddFontAssetInternal_NormalArgs AddFontAssetInternal
        {
            add
            {
                HookHandler._afterAddFontAssetInternal += value;
                HookHandler.HookAddFontAssetInternal();
            }
            remove => HookHandler._afterAddFontAssetInternal -= value;
        }

        public static event Delegates.AddSpriteAsset_TMP_SpriteAsset_NormalArgs AddSpriteAsset_TMP_SpriteAsset
        {
            add
            {
                HookHandler._afterAddSpriteAsset_TMP_SpriteAsset += value;
                HookHandler.HookAddSpriteAsset_TMP_SpriteAsset();
            }
            remove => HookHandler._afterAddSpriteAsset_TMP_SpriteAsset -= value;
        }

        public static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_NormalArgs
            AddSpriteAssetInternal_TMP_SpriteAsset
            {
                add
                {
                    HookHandler._afterAddSpriteAssetInternal_TMP_SpriteAsset += value;
                    HookHandler.HookAddSpriteAssetInternal_TMP_SpriteAsset();
                }
                remove => HookHandler._afterAddSpriteAssetInternal_TMP_SpriteAsset -= value;
            }

        public static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_NormalArgs AddSpriteAsset_int_TMP_SpriteAsset
        {
            add
            {
                HookHandler._afterAddSpriteAsset_int_TMP_SpriteAsset += value;
                HookHandler.HookAddSpriteAsset_int_TMP_SpriteAsset();
            }
            remove => HookHandler._afterAddSpriteAsset_int_TMP_SpriteAsset -= value;
        }

        public static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_NormalArgs
            AddSpriteAssetInternal_int_TMP_SpriteAsset
            {
                add
                {
                    HookHandler._afterAddSpriteAssetInternal_int_TMP_SpriteAsset += value;
                    HookHandler.HookAddSpriteAssetInternal_int_TMP_SpriteAsset();
                }
                remove => HookHandler._afterAddSpriteAssetInternal_int_TMP_SpriteAsset -= value;
            }

        public static event Delegates.AddFontMaterial_NormalArgs AddFontMaterial
        {
            add
            {
                HookHandler._afterAddFontMaterial += value;
                HookHandler.HookAddFontMaterial();
            }
            remove => HookHandler._afterAddFontMaterial -= value;
        }

        public static event Delegates.AddFontMaterialInternal_NormalArgs AddFontMaterialInternal
        {
            add
            {
                HookHandler._afterAddFontMaterialInternal += value;
                HookHandler.HookAddFontMaterialInternal();
            }
            remove => HookHandler._afterAddFontMaterialInternal -= value;
        }

        public static event Delegates.Contains_TMP_FontAsset_NormalArgs Contains_TMP_FontAsset
        {
            add
            {
                HookHandler._afterContains_TMP_FontAsset += value;
                HookHandler.HookContains_TMP_FontAsset();
            }
            remove => HookHandler._afterContains_TMP_FontAsset -= value;
        }

        public static event Delegates.Contains_TMP_SpriteAsset_NormalArgs Contains_TMP_SpriteAsset
        {
            add
            {
                HookHandler._afterContains_TMP_SpriteAsset += value;
                HookHandler.HookContains_TMP_SpriteAsset();
            }
            remove => HookHandler._afterContains_TMP_SpriteAsset -= value;
        }

        public static event Delegates.TryGetFontAsset_NormalArgs TryGetFontAsset
        {
            add
            {
                HookHandler._afterTryGetFontAsset += value;
                HookHandler.HookTryGetFontAsset();
            }
            remove => HookHandler._afterTryGetFontAsset -= value;
        }

        public static event Delegates.TryGetFontAssetInternal_NormalArgs TryGetFontAssetInternal
        {
            add
            {
                HookHandler._afterTryGetFontAssetInternal += value;
                HookHandler.HookTryGetFontAssetInternal();
            }
            remove => HookHandler._afterTryGetFontAssetInternal -= value;
        }

        public static event Delegates.TryGetSpriteAsset_NormalArgs TryGetSpriteAsset
        {
            add
            {
                HookHandler._afterTryGetSpriteAsset += value;
                HookHandler.HookTryGetSpriteAsset();
            }
            remove => HookHandler._afterTryGetSpriteAsset -= value;
        }

        public static event Delegates.TryGetSpriteAssetInternal_NormalArgs TryGetSpriteAssetInternal
        {
            add
            {
                HookHandler._afterTryGetSpriteAssetInternal += value;
                HookHandler.HookTryGetSpriteAssetInternal();
            }
            remove => HookHandler._afterTryGetSpriteAssetInternal -= value;
        }

        public static event Delegates.TryGetMaterial_NormalArgs TryGetMaterial
        {
            add
            {
                HookHandler._afterTryGetMaterial += value;
                HookHandler.HookTryGetMaterial();
            }
            remove => HookHandler._afterTryGetMaterial -= value;
        }

        public static event Delegates.TryGetMaterialInternal_NormalArgs TryGetMaterialInternal
        {
            add
            {
                HookHandler._afterTryGetMaterialInternal += value;
                HookHandler.HookTryGetMaterialInternal();
            }
            remove => HookHandler._afterTryGetMaterialInternal -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "get_instance", false), value);
        }

        public static event Delegates.AddFontAsset_NormalArgs AddFontAsset
        {
            add => HookEndpointManager.Add<Delegates.AddFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontAsset", false), value);
        }

        public static event Delegates.AddFontAssetInternal_NormalArgs AddFontAssetInternal
        {
            add => HookEndpointManager.Add<Delegates.AddFontAssetInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontAssetInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.AddFontAssetInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontAssetInternal"), value);
        }

        public static event Delegates.AddSpriteAsset_TMP_SpriteAsset_NormalArgs AddSpriteAsset_TMP_SpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.AddSpriteAsset_TMP_SpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddSpriteAsset_TMP_SpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAsset", false), value);
        }

        public static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_NormalArgs
            AddSpriteAssetInternal_TMP_SpriteAsset
            {
                add => HookEndpointManager.Add<Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAssetInternal"), value);
                remove => HookEndpointManager.Remove<Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAssetInternal"), value);
            }

        public static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_NormalArgs AddSpriteAsset_int_TMP_SpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.AddSpriteAsset_int_TMP_SpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddSpriteAsset_int_TMP_SpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAsset", false), value);
        }

        public static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_NormalArgs
            AddSpriteAssetInternal_int_TMP_SpriteAsset
            {
                add => HookEndpointManager.Add<Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAssetInternal"), value);
                remove => HookEndpointManager.Remove<Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddSpriteAssetInternal"), value);
            }

        public static event Delegates.AddFontMaterial_NormalArgs AddFontMaterial
        {
            add => HookEndpointManager.Add<Delegates.AddFontMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddFontMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontMaterial", false), value);
        }

        public static event Delegates.AddFontMaterialInternal_NormalArgs AddFontMaterialInternal
        {
            add => HookEndpointManager.Add<Delegates.AddFontMaterialInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontMaterialInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.AddFontMaterialInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "AddFontMaterialInternal"), value);
        }

        public static event Delegates.Contains_TMP_FontAsset_NormalArgs Contains_TMP_FontAsset
        {
            add => HookEndpointManager.Add<Delegates.Contains_TMP_FontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "Contains"), value);
            remove => HookEndpointManager.Remove<Delegates.Contains_TMP_FontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "Contains"), value);
        }

        public static event Delegates.Contains_TMP_SpriteAsset_NormalArgs Contains_TMP_SpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.Contains_TMP_SpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "Contains"), value);
            remove => HookEndpointManager.Remove<Delegates.Contains_TMP_SpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "Contains"), value);
        }

        public static event Delegates.TryGetFontAsset_NormalArgs TryGetFontAsset
        {
            add => HookEndpointManager.Add<Delegates.TryGetFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetFontAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.TryGetFontAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetFontAsset", false), value);
        }

        public static event Delegates.TryGetFontAssetInternal_NormalArgs TryGetFontAssetInternal
        {
            add => HookEndpointManager.Add<Delegates.TryGetFontAssetInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetFontAssetInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.TryGetFontAssetInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetFontAssetInternal"), value);
        }

        public static event Delegates.TryGetSpriteAsset_NormalArgs TryGetSpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.TryGetSpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetSpriteAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.TryGetSpriteAsset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetSpriteAsset", false), value);
        }

        public static event Delegates.TryGetSpriteAssetInternal_NormalArgs TryGetSpriteAssetInternal
        {
            add => HookEndpointManager.Add<Delegates.TryGetSpriteAssetInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetSpriteAssetInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.TryGetSpriteAssetInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetSpriteAssetInternal"), value);
        }

        public static event Delegates.TryGetMaterial_NormalArgs TryGetMaterial
        {
            add => HookEndpointManager.Add<Delegates.TryGetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.TryGetMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetMaterial", false), value);
        }

        public static event Delegates.TryGetMaterialInternal_NormalArgs TryGetMaterialInternal
        {
            add => HookEndpointManager.Add<Delegates.TryGetMaterialInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetMaterialInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.TryGetMaterialInternal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MaterialReferenceManager), "TryGetMaterialInternal"), value);
        }
    }
}