using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for MaterialReferenceManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMaterialReferenceManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_instance()
{
if (!HookedList.Contains("get_instance"))
{
HookedList.Add("get_instance");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "get_instance", false), get_instance);

}
}
internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
internal static event Delegates.get_instance_AfterArgs _afterget_instance;
private static TMPro.MaterialReferenceManager get_instance(Func<TMPro.MaterialReferenceManager> orig)
{
if (_beforeget_instance != null)
{
foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
{
try
{
_beforeget_instance?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
var retVal = orig();
if (_afterget_instance != null)
{
foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
{
try
{
retVal = _afterget_instance.Invoke(retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAddFontAsset()
{
if (!HookedList.Contains("AddFontAsset"))
{
HookedList.Add("AddFontAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontAsset", false), AddFontAsset);

}
}
internal static event Delegates.AddFontAsset_BeforeArgs _beforeAddFontAsset;
internal static event Delegates.AddFontAsset_AfterArgs _afterAddFontAsset;
private static void AddFontAsset(Action< TMPro.TMP_FontAsset> orig,  TMPro.TMP_FontAsset fontAsset)
{
Delegates.Params_AddFontAsset @params = new() 
{
fontAsset = fontAsset
};
if (_beforeAddFontAsset != null)
{
foreach (Delegates.AddFontAsset_BeforeArgs toInvoke in _beforeAddFontAsset.GetInvocationList())
{
try
{
_beforeAddFontAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
fontAsset = @params.fontAsset;
orig(fontAsset);
if (_afterAddFontAsset != null)
{
foreach (Delegates.AddFontAsset_AfterArgs toInvoke in _afterAddFontAsset.GetInvocationList())
{
try
{
_afterAddFontAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddFontAssetInternal()
{
if (!HookedList.Contains("AddFontAssetInternal"))
{
HookedList.Add("AddFontAssetInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontAssetInternal", true), AddFontAssetInternal);

}
}
internal static event Delegates.AddFontAssetInternal_BeforeArgs _beforeAddFontAssetInternal;
internal static event Delegates.AddFontAssetInternal_AfterArgs _afterAddFontAssetInternal;
private static void AddFontAssetInternal(Action<TMPro.MaterialReferenceManager,  TMPro.TMP_FontAsset> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_FontAsset fontAsset)
{
Delegates.Params_AddFontAssetInternal @params = new() 
{
self = self
, fontAsset = fontAsset
};
if (_beforeAddFontAssetInternal != null)
{
foreach (Delegates.AddFontAssetInternal_BeforeArgs toInvoke in _beforeAddFontAssetInternal.GetInvocationList())
{
try
{
_beforeAddFontAssetInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
fontAsset = @params.fontAsset;
orig(self, fontAsset);
if (_afterAddFontAssetInternal != null)
{
foreach (Delegates.AddFontAssetInternal_AfterArgs toInvoke in _afterAddFontAssetInternal.GetInvocationList())
{
try
{
_afterAddFontAssetInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddSpriteAsset_TMP_SpriteAsset()
{
if (!HookedList.Contains("AddSpriteAsset_TMP_SpriteAsset"))
{
HookedList.Add("AddSpriteAsset_TMP_SpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAsset_TMP_SpriteAsset", false), AddSpriteAsset_TMP_SpriteAsset);

}
}
internal static event Delegates.AddSpriteAsset_TMP_SpriteAsset_BeforeArgs _beforeAddSpriteAsset_TMP_SpriteAsset;
internal static event Delegates.AddSpriteAsset_TMP_SpriteAsset_AfterArgs _afterAddSpriteAsset_TMP_SpriteAsset;
private static void AddSpriteAsset_TMP_SpriteAsset(Action< TMPro.TMP_SpriteAsset> orig,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_AddSpriteAsset_TMP_SpriteAsset @params = new() 
{
spriteAsset = spriteAsset
};
if (_beforeAddSpriteAsset_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAsset_TMP_SpriteAsset_BeforeArgs toInvoke in _beforeAddSpriteAsset_TMP_SpriteAsset.GetInvocationList())
{
try
{
_beforeAddSpriteAsset_TMP_SpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
spriteAsset = @params.spriteAsset;
orig(spriteAsset);
if (_afterAddSpriteAsset_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAsset_TMP_SpriteAsset_AfterArgs toInvoke in _afterAddSpriteAsset_TMP_SpriteAsset.GetInvocationList())
{
try
{
_afterAddSpriteAsset_TMP_SpriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddSpriteAssetInternal_TMP_SpriteAsset()
{
if (!HookedList.Contains("AddSpriteAssetInternal_TMP_SpriteAsset"))
{
HookedList.Add("AddSpriteAssetInternal_TMP_SpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAssetInternal_TMP_SpriteAsset", true), AddSpriteAssetInternal_TMP_SpriteAsset);

}
}
internal static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs _beforeAddSpriteAssetInternal_TMP_SpriteAsset;
internal static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_AfterArgs _afterAddSpriteAssetInternal_TMP_SpriteAsset;
private static void AddSpriteAssetInternal_TMP_SpriteAsset(Action<TMPro.MaterialReferenceManager,  TMPro.TMP_SpriteAsset> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_AddSpriteAssetInternal_TMP_SpriteAsset @params = new() 
{
self = self
, spriteAsset = spriteAsset
};
if (_beforeAddSpriteAssetInternal_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs toInvoke in _beforeAddSpriteAssetInternal_TMP_SpriteAsset.GetInvocationList())
{
try
{
_beforeAddSpriteAssetInternal_TMP_SpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
spriteAsset = @params.spriteAsset;
orig(self, spriteAsset);
if (_afterAddSpriteAssetInternal_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_AfterArgs toInvoke in _afterAddSpriteAssetInternal_TMP_SpriteAsset.GetInvocationList())
{
try
{
_afterAddSpriteAssetInternal_TMP_SpriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddSpriteAsset_int_TMP_SpriteAsset()
{
if (!HookedList.Contains("AddSpriteAsset_int_TMP_SpriteAsset"))
{
HookedList.Add("AddSpriteAsset_int_TMP_SpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAsset_int_TMP_SpriteAsset", false), AddSpriteAsset_int_TMP_SpriteAsset);

}
}
internal static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs _beforeAddSpriteAsset_int_TMP_SpriteAsset;
internal static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_AfterArgs _afterAddSpriteAsset_int_TMP_SpriteAsset;
private static void AddSpriteAsset_int_TMP_SpriteAsset(Action< int,  TMPro.TMP_SpriteAsset> orig,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_AddSpriteAsset_int_TMP_SpriteAsset @params = new() 
{
hashCode = hashCode
, spriteAsset = spriteAsset
};
if (_beforeAddSpriteAsset_int_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs toInvoke in _beforeAddSpriteAsset_int_TMP_SpriteAsset.GetInvocationList())
{
try
{
_beforeAddSpriteAsset_int_TMP_SpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
hashCode = @params.hashCode;
spriteAsset = @params.spriteAsset;
orig(hashCode, spriteAsset);
if (_afterAddSpriteAsset_int_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAsset_int_TMP_SpriteAsset_AfterArgs toInvoke in _afterAddSpriteAsset_int_TMP_SpriteAsset.GetInvocationList())
{
try
{
_afterAddSpriteAsset_int_TMP_SpriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddSpriteAssetInternal_int_TMP_SpriteAsset()
{
if (!HookedList.Contains("AddSpriteAssetInternal_int_TMP_SpriteAsset"))
{
HookedList.Add("AddSpriteAssetInternal_int_TMP_SpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAssetInternal_int_TMP_SpriteAsset", true), AddSpriteAssetInternal_int_TMP_SpriteAsset);

}
}
internal static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs _beforeAddSpriteAssetInternal_int_TMP_SpriteAsset;
internal static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_AfterArgs _afterAddSpriteAssetInternal_int_TMP_SpriteAsset;
private static void AddSpriteAssetInternal_int_TMP_SpriteAsset(Action<TMPro.MaterialReferenceManager,  int,  TMPro.TMP_SpriteAsset> orig, TMPro.MaterialReferenceManager self,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_AddSpriteAssetInternal_int_TMP_SpriteAsset @params = new() 
{
self = self
, hashCode = hashCode
, spriteAsset = spriteAsset
};
if (_beforeAddSpriteAssetInternal_int_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs toInvoke in _beforeAddSpriteAssetInternal_int_TMP_SpriteAsset.GetInvocationList())
{
try
{
_beforeAddSpriteAssetInternal_int_TMP_SpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hashCode = @params.hashCode;
spriteAsset = @params.spriteAsset;
orig(self, hashCode, spriteAsset);
if (_afterAddSpriteAssetInternal_int_TMP_SpriteAsset != null)
{
foreach (Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_AfterArgs toInvoke in _afterAddSpriteAssetInternal_int_TMP_SpriteAsset.GetInvocationList())
{
try
{
_afterAddSpriteAssetInternal_int_TMP_SpriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddFontMaterial()
{
if (!HookedList.Contains("AddFontMaterial"))
{
HookedList.Add("AddFontMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontMaterial", false), AddFontMaterial);

}
}
internal static event Delegates.AddFontMaterial_BeforeArgs _beforeAddFontMaterial;
internal static event Delegates.AddFontMaterial_AfterArgs _afterAddFontMaterial;
private static void AddFontMaterial(Action< int,  UnityEngine.Material> orig,  int hashCode,  UnityEngine.Material material)
{
Delegates.Params_AddFontMaterial @params = new() 
{
hashCode = hashCode
, material = material
};
if (_beforeAddFontMaterial != null)
{
foreach (Delegates.AddFontMaterial_BeforeArgs toInvoke in _beforeAddFontMaterial.GetInvocationList())
{
try
{
_beforeAddFontMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
hashCode = @params.hashCode;
material = @params.material;
orig(hashCode, material);
if (_afterAddFontMaterial != null)
{
foreach (Delegates.AddFontMaterial_AfterArgs toInvoke in _afterAddFontMaterial.GetInvocationList())
{
try
{
_afterAddFontMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddFontMaterialInternal()
{
if (!HookedList.Contains("AddFontMaterialInternal"))
{
HookedList.Add("AddFontMaterialInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontMaterialInternal", true), AddFontMaterialInternal);

}
}
internal static event Delegates.AddFontMaterialInternal_BeforeArgs _beforeAddFontMaterialInternal;
internal static event Delegates.AddFontMaterialInternal_AfterArgs _afterAddFontMaterialInternal;
private static void AddFontMaterialInternal(Action<TMPro.MaterialReferenceManager,  int,  UnityEngine.Material> orig, TMPro.MaterialReferenceManager self,  int hashCode,  UnityEngine.Material material)
{
Delegates.Params_AddFontMaterialInternal @params = new() 
{
self = self
, hashCode = hashCode
, material = material
};
if (_beforeAddFontMaterialInternal != null)
{
foreach (Delegates.AddFontMaterialInternal_BeforeArgs toInvoke in _beforeAddFontMaterialInternal.GetInvocationList())
{
try
{
_beforeAddFontMaterialInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hashCode = @params.hashCode;
material = @params.material;
orig(self, hashCode, material);
if (_afterAddFontMaterialInternal != null)
{
foreach (Delegates.AddFontMaterialInternal_AfterArgs toInvoke in _afterAddFontMaterialInternal.GetInvocationList())
{
try
{
_afterAddFontMaterialInternal.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookContains_TMP_FontAsset()
{
if (!HookedList.Contains("Contains_TMP_FontAsset"))
{
HookedList.Add("Contains_TMP_FontAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "Contains_TMP_FontAsset", true), Contains_TMP_FontAsset);

}
}
internal static event Delegates.Contains_TMP_FontAsset_BeforeArgs _beforeContains_TMP_FontAsset;
internal static event Delegates.Contains_TMP_FontAsset_AfterArgs _afterContains_TMP_FontAsset;
private static bool Contains_TMP_FontAsset(Func<TMPro.MaterialReferenceManager,  TMPro.TMP_FontAsset, bool> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_FontAsset font)
{
Delegates.Params_Contains_TMP_FontAsset @params = new() 
{
self = self
, font = font
};
if (_beforeContains_TMP_FontAsset != null)
{
foreach (Delegates.Contains_TMP_FontAsset_BeforeArgs toInvoke in _beforeContains_TMP_FontAsset.GetInvocationList())
{
try
{
_beforeContains_TMP_FontAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
font = @params.font;
var retVal = orig(self, font);
if (_afterContains_TMP_FontAsset != null)
{
foreach (Delegates.Contains_TMP_FontAsset_AfterArgs toInvoke in _afterContains_TMP_FontAsset.GetInvocationList())
{
try
{
retVal = _afterContains_TMP_FontAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookContains_TMP_SpriteAsset()
{
if (!HookedList.Contains("Contains_TMP_SpriteAsset"))
{
HookedList.Add("Contains_TMP_SpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "Contains_TMP_SpriteAsset", true), Contains_TMP_SpriteAsset);

}
}
internal static event Delegates.Contains_TMP_SpriteAsset_BeforeArgs _beforeContains_TMP_SpriteAsset;
internal static event Delegates.Contains_TMP_SpriteAsset_AfterArgs _afterContains_TMP_SpriteAsset;
private static bool Contains_TMP_SpriteAsset(Func<TMPro.MaterialReferenceManager,  TMPro.TMP_SpriteAsset, bool> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_SpriteAsset sprite)
{
Delegates.Params_Contains_TMP_SpriteAsset @params = new() 
{
self = self
, sprite = sprite
};
if (_beforeContains_TMP_SpriteAsset != null)
{
foreach (Delegates.Contains_TMP_SpriteAsset_BeforeArgs toInvoke in _beforeContains_TMP_SpriteAsset.GetInvocationList())
{
try
{
_beforeContains_TMP_SpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
sprite = @params.sprite;
var retVal = orig(self, sprite);
if (_afterContains_TMP_SpriteAsset != null)
{
foreach (Delegates.Contains_TMP_SpriteAsset_AfterArgs toInvoke in _afterContains_TMP_SpriteAsset.GetInvocationList())
{
try
{
retVal = _afterContains_TMP_SpriteAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookTryGetFontAsset()
{
if (!HookedList.Contains("TryGetFontAsset"))
{
HookedList.Add("TryGetFontAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetFontAsset", false), TryGetFontAsset);

}
}
internal static event Delegates.TryGetFontAsset_BeforeArgs _beforeTryGetFontAsset;
internal static event Delegates.TryGetFontAsset_AfterArgs _afterTryGetFontAsset;
private static bool TryGetFontAsset(Func< int,  TMPro.TMP_FontAsset, bool> orig,  int hashCode,  TMPro.TMP_FontAsset fontAsset)
{
Delegates.Params_TryGetFontAsset @params = new() 
{
hashCode = hashCode
, fontAsset = fontAsset
};
if (_beforeTryGetFontAsset != null)
{
foreach (Delegates.TryGetFontAsset_BeforeArgs toInvoke in _beforeTryGetFontAsset.GetInvocationList())
{
try
{
_beforeTryGetFontAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
hashCode = @params.hashCode;
fontAsset = @params.fontAsset;
var retVal = orig(hashCode, fontAsset);
if (_afterTryGetFontAsset != null)
{
foreach (Delegates.TryGetFontAsset_AfterArgs toInvoke in _afterTryGetFontAsset.GetInvocationList())
{
try
{
retVal = _afterTryGetFontAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookTryGetFontAssetInternal()
{
if (!HookedList.Contains("TryGetFontAssetInternal"))
{
HookedList.Add("TryGetFontAssetInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetFontAssetInternal", true), TryGetFontAssetInternal);

}
}
internal static event Delegates.TryGetFontAssetInternal_BeforeArgs _beforeTryGetFontAssetInternal;
internal static event Delegates.TryGetFontAssetInternal_AfterArgs _afterTryGetFontAssetInternal;
private static bool TryGetFontAssetInternal(Func<TMPro.MaterialReferenceManager,  int,  TMPro.TMP_FontAsset, bool> orig, TMPro.MaterialReferenceManager self,  int hashCode,  TMPro.TMP_FontAsset fontAsset)
{
Delegates.Params_TryGetFontAssetInternal @params = new() 
{
self = self
, hashCode = hashCode
, fontAsset = fontAsset
};
if (_beforeTryGetFontAssetInternal != null)
{
foreach (Delegates.TryGetFontAssetInternal_BeforeArgs toInvoke in _beforeTryGetFontAssetInternal.GetInvocationList())
{
try
{
_beforeTryGetFontAssetInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hashCode = @params.hashCode;
fontAsset = @params.fontAsset;
var retVal = orig(self, hashCode, fontAsset);
if (_afterTryGetFontAssetInternal != null)
{
foreach (Delegates.TryGetFontAssetInternal_AfterArgs toInvoke in _afterTryGetFontAssetInternal.GetInvocationList())
{
try
{
retVal = _afterTryGetFontAssetInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookTryGetSpriteAsset()
{
if (!HookedList.Contains("TryGetSpriteAsset"))
{
HookedList.Add("TryGetSpriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetSpriteAsset", false), TryGetSpriteAsset);

}
}
internal static event Delegates.TryGetSpriteAsset_BeforeArgs _beforeTryGetSpriteAsset;
internal static event Delegates.TryGetSpriteAsset_AfterArgs _afterTryGetSpriteAsset;
private static bool TryGetSpriteAsset(Func< int,  TMPro.TMP_SpriteAsset, bool> orig,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_TryGetSpriteAsset @params = new() 
{
hashCode = hashCode
, spriteAsset = spriteAsset
};
if (_beforeTryGetSpriteAsset != null)
{
foreach (Delegates.TryGetSpriteAsset_BeforeArgs toInvoke in _beforeTryGetSpriteAsset.GetInvocationList())
{
try
{
_beforeTryGetSpriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
hashCode = @params.hashCode;
spriteAsset = @params.spriteAsset;
var retVal = orig(hashCode, spriteAsset);
if (_afterTryGetSpriteAsset != null)
{
foreach (Delegates.TryGetSpriteAsset_AfterArgs toInvoke in _afterTryGetSpriteAsset.GetInvocationList())
{
try
{
retVal = _afterTryGetSpriteAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookTryGetSpriteAssetInternal()
{
if (!HookedList.Contains("TryGetSpriteAssetInternal"))
{
HookedList.Add("TryGetSpriteAssetInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetSpriteAssetInternal", true), TryGetSpriteAssetInternal);

}
}
internal static event Delegates.TryGetSpriteAssetInternal_BeforeArgs _beforeTryGetSpriteAssetInternal;
internal static event Delegates.TryGetSpriteAssetInternal_AfterArgs _afterTryGetSpriteAssetInternal;
private static bool TryGetSpriteAssetInternal(Func<TMPro.MaterialReferenceManager,  int,  TMPro.TMP_SpriteAsset, bool> orig, TMPro.MaterialReferenceManager self,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset)
{
Delegates.Params_TryGetSpriteAssetInternal @params = new() 
{
self = self
, hashCode = hashCode
, spriteAsset = spriteAsset
};
if (_beforeTryGetSpriteAssetInternal != null)
{
foreach (Delegates.TryGetSpriteAssetInternal_BeforeArgs toInvoke in _beforeTryGetSpriteAssetInternal.GetInvocationList())
{
try
{
_beforeTryGetSpriteAssetInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hashCode = @params.hashCode;
spriteAsset = @params.spriteAsset;
var retVal = orig(self, hashCode, spriteAsset);
if (_afterTryGetSpriteAssetInternal != null)
{
foreach (Delegates.TryGetSpriteAssetInternal_AfterArgs toInvoke in _afterTryGetSpriteAssetInternal.GetInvocationList())
{
try
{
retVal = _afterTryGetSpriteAssetInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookTryGetMaterial()
{
if (!HookedList.Contains("TryGetMaterial"))
{
HookedList.Add("TryGetMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetMaterial", false), TryGetMaterial);

}
}
internal static event Delegates.TryGetMaterial_BeforeArgs _beforeTryGetMaterial;
internal static event Delegates.TryGetMaterial_AfterArgs _afterTryGetMaterial;
private static bool TryGetMaterial(Func< int,  UnityEngine.Material, bool> orig,  int hashCode,  UnityEngine.Material material)
{
Delegates.Params_TryGetMaterial @params = new() 
{
hashCode = hashCode
, material = material
};
if (_beforeTryGetMaterial != null)
{
foreach (Delegates.TryGetMaterial_BeforeArgs toInvoke in _beforeTryGetMaterial.GetInvocationList())
{
try
{
_beforeTryGetMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
hashCode = @params.hashCode;
material = @params.material;
var retVal = orig(hashCode, material);
if (_afterTryGetMaterial != null)
{
foreach (Delegates.TryGetMaterial_AfterArgs toInvoke in _afterTryGetMaterial.GetInvocationList())
{
try
{
retVal = _afterTryGetMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookTryGetMaterialInternal()
{
if (!HookedList.Contains("TryGetMaterialInternal"))
{
HookedList.Add("TryGetMaterialInternal");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetMaterialInternal", true), TryGetMaterialInternal);

}
}
internal static event Delegates.TryGetMaterialInternal_BeforeArgs _beforeTryGetMaterialInternal;
internal static event Delegates.TryGetMaterialInternal_AfterArgs _afterTryGetMaterialInternal;
private static bool TryGetMaterialInternal(Func<TMPro.MaterialReferenceManager,  int,  UnityEngine.Material, bool> orig, TMPro.MaterialReferenceManager self,  int hashCode,  UnityEngine.Material material)
{
Delegates.Params_TryGetMaterialInternal @params = new() 
{
self = self
, hashCode = hashCode
, material = material
};
if (_beforeTryGetMaterialInternal != null)
{
foreach (Delegates.TryGetMaterialInternal_BeforeArgs toInvoke in _beforeTryGetMaterialInternal.GetInvocationList())
{
try
{
_beforeTryGetMaterialInternal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
hashCode = @params.hashCode;
material = @params.material;
var retVal = orig(self, hashCode, material);
if (_afterTryGetMaterialInternal != null)
{
foreach (Delegates.TryGetMaterialInternal_AfterArgs toInvoke in _afterTryGetMaterialInternal.GetInvocationList())
{
try
{
retVal = _afterTryGetMaterialInternal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public delegate void get_instance_BeforeArgs();
public delegate TMPro.MaterialReferenceManager get_instance_AfterArgs(TMPro.MaterialReferenceManager ret);
public delegate TMPro.MaterialReferenceManager get_instance_WithArgs (Func<TMPro.MaterialReferenceManager> orig);
public sealed class Params_AddFontAsset
{
public TMPro.TMP_FontAsset fontAsset;
}
public delegate void AddFontAsset_BeforeArgs(Params_AddFontAsset args);
public delegate void AddFontAsset_AfterArgs(Params_AddFontAsset args);
public delegate void AddFontAsset_WithArgs (Action< TMPro.TMP_FontAsset> orig,  TMPro.TMP_FontAsset fontAsset);
public sealed class Params_AddFontAssetInternal
{
public TMPro.MaterialReferenceManager self;
public TMPro.TMP_FontAsset fontAsset;
}
public delegate void AddFontAssetInternal_BeforeArgs(Params_AddFontAssetInternal args);
public delegate void AddFontAssetInternal_AfterArgs(Params_AddFontAssetInternal args);
public delegate void AddFontAssetInternal_WithArgs (Action<TMPro.MaterialReferenceManager,  TMPro.TMP_FontAsset> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_FontAsset fontAsset);
public sealed class Params_AddSpriteAsset_TMP_SpriteAsset
{
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void AddSpriteAsset_TMP_SpriteAsset_BeforeArgs(Params_AddSpriteAsset_TMP_SpriteAsset args);
public delegate void AddSpriteAsset_TMP_SpriteAsset_AfterArgs(Params_AddSpriteAsset_TMP_SpriteAsset args);
public delegate void AddSpriteAsset_TMP_SpriteAsset_WithArgs (Action< TMPro.TMP_SpriteAsset> orig,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_AddSpriteAssetInternal_TMP_SpriteAsset
{
public TMPro.MaterialReferenceManager self;
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs(Params_AddSpriteAssetInternal_TMP_SpriteAsset args);
public delegate void AddSpriteAssetInternal_TMP_SpriteAsset_AfterArgs(Params_AddSpriteAssetInternal_TMP_SpriteAsset args);
public delegate void AddSpriteAssetInternal_TMP_SpriteAsset_WithArgs (Action<TMPro.MaterialReferenceManager,  TMPro.TMP_SpriteAsset> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_AddSpriteAsset_int_TMP_SpriteAsset
{
public int hashCode;
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs(Params_AddSpriteAsset_int_TMP_SpriteAsset args);
public delegate void AddSpriteAsset_int_TMP_SpriteAsset_AfterArgs(Params_AddSpriteAsset_int_TMP_SpriteAsset args);
public delegate void AddSpriteAsset_int_TMP_SpriteAsset_WithArgs (Action< int,  TMPro.TMP_SpriteAsset> orig,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_AddSpriteAssetInternal_int_TMP_SpriteAsset
{
public TMPro.MaterialReferenceManager self;
public int hashCode;
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs(Params_AddSpriteAssetInternal_int_TMP_SpriteAsset args);
public delegate void AddSpriteAssetInternal_int_TMP_SpriteAsset_AfterArgs(Params_AddSpriteAssetInternal_int_TMP_SpriteAsset args);
public delegate void AddSpriteAssetInternal_int_TMP_SpriteAsset_WithArgs (Action<TMPro.MaterialReferenceManager,  int,  TMPro.TMP_SpriteAsset> orig, TMPro.MaterialReferenceManager self,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_AddFontMaterial
{
public int hashCode;
public UnityEngine.Material material;
}
public delegate void AddFontMaterial_BeforeArgs(Params_AddFontMaterial args);
public delegate void AddFontMaterial_AfterArgs(Params_AddFontMaterial args);
public delegate void AddFontMaterial_WithArgs (Action< int,  UnityEngine.Material> orig,  int hashCode,  UnityEngine.Material material);
public sealed class Params_AddFontMaterialInternal
{
public TMPro.MaterialReferenceManager self;
public int hashCode;
public UnityEngine.Material material;
}
public delegate void AddFontMaterialInternal_BeforeArgs(Params_AddFontMaterialInternal args);
public delegate void AddFontMaterialInternal_AfterArgs(Params_AddFontMaterialInternal args);
public delegate void AddFontMaterialInternal_WithArgs (Action<TMPro.MaterialReferenceManager,  int,  UnityEngine.Material> orig, TMPro.MaterialReferenceManager self,  int hashCode,  UnityEngine.Material material);
public sealed class Params_Contains_TMP_FontAsset
{
public TMPro.MaterialReferenceManager self;
public TMPro.TMP_FontAsset font;
}
public delegate void Contains_TMP_FontAsset_BeforeArgs(Params_Contains_TMP_FontAsset args);
public delegate bool Contains_TMP_FontAsset_AfterArgs(Params_Contains_TMP_FontAsset args, bool ret);
public delegate bool Contains_TMP_FontAsset_WithArgs (Func<TMPro.MaterialReferenceManager,  TMPro.TMP_FontAsset, bool> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_FontAsset font);
public sealed class Params_Contains_TMP_SpriteAsset
{
public TMPro.MaterialReferenceManager self;
public TMPro.TMP_SpriteAsset sprite;
}
public delegate void Contains_TMP_SpriteAsset_BeforeArgs(Params_Contains_TMP_SpriteAsset args);
public delegate bool Contains_TMP_SpriteAsset_AfterArgs(Params_Contains_TMP_SpriteAsset args, bool ret);
public delegate bool Contains_TMP_SpriteAsset_WithArgs (Func<TMPro.MaterialReferenceManager,  TMPro.TMP_SpriteAsset, bool> orig, TMPro.MaterialReferenceManager self,  TMPro.TMP_SpriteAsset sprite);
public sealed class Params_TryGetFontAsset
{
public int hashCode;
public TMPro.TMP_FontAsset fontAsset;
}
public delegate void TryGetFontAsset_BeforeArgs(Params_TryGetFontAsset args);
public delegate bool TryGetFontAsset_AfterArgs(Params_TryGetFontAsset args, bool ret);
public delegate bool TryGetFontAsset_WithArgs (Func< int,  TMPro.TMP_FontAsset, bool> orig,  int hashCode,  TMPro.TMP_FontAsset fontAsset);
public sealed class Params_TryGetFontAssetInternal
{
public TMPro.MaterialReferenceManager self;
public int hashCode;
public TMPro.TMP_FontAsset fontAsset;
}
public delegate void TryGetFontAssetInternal_BeforeArgs(Params_TryGetFontAssetInternal args);
public delegate bool TryGetFontAssetInternal_AfterArgs(Params_TryGetFontAssetInternal args, bool ret);
public delegate bool TryGetFontAssetInternal_WithArgs (Func<TMPro.MaterialReferenceManager,  int,  TMPro.TMP_FontAsset, bool> orig, TMPro.MaterialReferenceManager self,  int hashCode,  TMPro.TMP_FontAsset fontAsset);
public sealed class Params_TryGetSpriteAsset
{
public int hashCode;
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void TryGetSpriteAsset_BeforeArgs(Params_TryGetSpriteAsset args);
public delegate bool TryGetSpriteAsset_AfterArgs(Params_TryGetSpriteAsset args, bool ret);
public delegate bool TryGetSpriteAsset_WithArgs (Func< int,  TMPro.TMP_SpriteAsset, bool> orig,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_TryGetSpriteAssetInternal
{
public TMPro.MaterialReferenceManager self;
public int hashCode;
public TMPro.TMP_SpriteAsset spriteAsset;
}
public delegate void TryGetSpriteAssetInternal_BeforeArgs(Params_TryGetSpriteAssetInternal args);
public delegate bool TryGetSpriteAssetInternal_AfterArgs(Params_TryGetSpriteAssetInternal args, bool ret);
public delegate bool TryGetSpriteAssetInternal_WithArgs (Func<TMPro.MaterialReferenceManager,  int,  TMPro.TMP_SpriteAsset, bool> orig, TMPro.MaterialReferenceManager self,  int hashCode,  TMPro.TMP_SpriteAsset spriteAsset);
public sealed class Params_TryGetMaterial
{
public int hashCode;
public UnityEngine.Material material;
}
public delegate void TryGetMaterial_BeforeArgs(Params_TryGetMaterial args);
public delegate bool TryGetMaterial_AfterArgs(Params_TryGetMaterial args, bool ret);
public delegate bool TryGetMaterial_WithArgs (Func< int,  UnityEngine.Material, bool> orig,  int hashCode,  UnityEngine.Material material);
public sealed class Params_TryGetMaterialInternal
{
public TMPro.MaterialReferenceManager self;
public int hashCode;
public UnityEngine.Material material;
}
public delegate void TryGetMaterialInternal_BeforeArgs(Params_TryGetMaterialInternal args);
public delegate bool TryGetMaterialInternal_AfterArgs(Params_TryGetMaterialInternal args, bool ret);
public delegate bool TryGetMaterialInternal_WithArgs (Func<TMPro.MaterialReferenceManager,  int,  UnityEngine.Material, bool> orig, TMPro.MaterialReferenceManager self,  int hashCode,  UnityEngine.Material material);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_instance_BeforeArgs get_instance
{
add
{

HookHandler._beforeget_instance += value;
HookHandler.Hookget_instance();
}
remove => HookHandler._beforeget_instance -= value;
}
public static event Delegates.AddFontAsset_BeforeArgs AddFontAsset
{
add
{

HookHandler._beforeAddFontAsset += value;
HookHandler.HookAddFontAsset();
}
remove => HookHandler._beforeAddFontAsset -= value;
}
public static event Delegates.AddFontAssetInternal_BeforeArgs AddFontAssetInternal
{
add
{

HookHandler._beforeAddFontAssetInternal += value;
HookHandler.HookAddFontAssetInternal();
}
remove => HookHandler._beforeAddFontAssetInternal -= value;
}
public static event Delegates.AddSpriteAsset_TMP_SpriteAsset_BeforeArgs AddSpriteAsset_TMP_SpriteAsset
{
add
{

HookHandler._beforeAddSpriteAsset_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAsset_TMP_SpriteAsset();
}
remove => HookHandler._beforeAddSpriteAsset_TMP_SpriteAsset -= value;
}
public static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_BeforeArgs AddSpriteAssetInternal_TMP_SpriteAsset
{
add
{

HookHandler._beforeAddSpriteAssetInternal_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAssetInternal_TMP_SpriteAsset();
}
remove => HookHandler._beforeAddSpriteAssetInternal_TMP_SpriteAsset -= value;
}
public static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_BeforeArgs AddSpriteAsset_int_TMP_SpriteAsset
{
add
{

HookHandler._beforeAddSpriteAsset_int_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAsset_int_TMP_SpriteAsset();
}
remove => HookHandler._beforeAddSpriteAsset_int_TMP_SpriteAsset -= value;
}
public static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_BeforeArgs AddSpriteAssetInternal_int_TMP_SpriteAsset
{
add
{

HookHandler._beforeAddSpriteAssetInternal_int_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAssetInternal_int_TMP_SpriteAsset();
}
remove => HookHandler._beforeAddSpriteAssetInternal_int_TMP_SpriteAsset -= value;
}
public static event Delegates.AddFontMaterial_BeforeArgs AddFontMaterial
{
add
{

HookHandler._beforeAddFontMaterial += value;
HookHandler.HookAddFontMaterial();
}
remove => HookHandler._beforeAddFontMaterial -= value;
}
public static event Delegates.AddFontMaterialInternal_BeforeArgs AddFontMaterialInternal
{
add
{

HookHandler._beforeAddFontMaterialInternal += value;
HookHandler.HookAddFontMaterialInternal();
}
remove => HookHandler._beforeAddFontMaterialInternal -= value;
}
public static event Delegates.Contains_TMP_FontAsset_BeforeArgs Contains_TMP_FontAsset
{
add
{

HookHandler._beforeContains_TMP_FontAsset += value;
HookHandler.HookContains_TMP_FontAsset();
}
remove => HookHandler._beforeContains_TMP_FontAsset -= value;
}
public static event Delegates.Contains_TMP_SpriteAsset_BeforeArgs Contains_TMP_SpriteAsset
{
add
{

HookHandler._beforeContains_TMP_SpriteAsset += value;
HookHandler.HookContains_TMP_SpriteAsset();
}
remove => HookHandler._beforeContains_TMP_SpriteAsset -= value;
}
public static event Delegates.TryGetFontAsset_BeforeArgs TryGetFontAsset
{
add
{

HookHandler._beforeTryGetFontAsset += value;
HookHandler.HookTryGetFontAsset();
}
remove => HookHandler._beforeTryGetFontAsset -= value;
}
public static event Delegates.TryGetFontAssetInternal_BeforeArgs TryGetFontAssetInternal
{
add
{

HookHandler._beforeTryGetFontAssetInternal += value;
HookHandler.HookTryGetFontAssetInternal();
}
remove => HookHandler._beforeTryGetFontAssetInternal -= value;
}
public static event Delegates.TryGetSpriteAsset_BeforeArgs TryGetSpriteAsset
{
add
{

HookHandler._beforeTryGetSpriteAsset += value;
HookHandler.HookTryGetSpriteAsset();
}
remove => HookHandler._beforeTryGetSpriteAsset -= value;
}
public static event Delegates.TryGetSpriteAssetInternal_BeforeArgs TryGetSpriteAssetInternal
{
add
{

HookHandler._beforeTryGetSpriteAssetInternal += value;
HookHandler.HookTryGetSpriteAssetInternal();
}
remove => HookHandler._beforeTryGetSpriteAssetInternal -= value;
}
public static event Delegates.TryGetMaterial_BeforeArgs TryGetMaterial
{
add
{

HookHandler._beforeTryGetMaterial += value;
HookHandler.HookTryGetMaterial();
}
remove => HookHandler._beforeTryGetMaterial -= value;
}
public static event Delegates.TryGetMaterialInternal_BeforeArgs TryGetMaterialInternal
{
add
{

HookHandler._beforeTryGetMaterialInternal += value;
HookHandler.HookTryGetMaterialInternal();
}
remove => HookHandler._beforeTryGetMaterialInternal -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_instance_AfterArgs get_instance
{
add
{

HookHandler._afterget_instance += value;
HookHandler.Hookget_instance();
}
remove => HookHandler._afterget_instance -= value;
}
public static event Delegates.AddFontAsset_AfterArgs AddFontAsset
{
add
{

HookHandler._afterAddFontAsset += value;
HookHandler.HookAddFontAsset();
}
remove => HookHandler._afterAddFontAsset -= value;
}
public static event Delegates.AddFontAssetInternal_AfterArgs AddFontAssetInternal
{
add
{

HookHandler._afterAddFontAssetInternal += value;
HookHandler.HookAddFontAssetInternal();
}
remove => HookHandler._afterAddFontAssetInternal -= value;
}
public static event Delegates.AddSpriteAsset_TMP_SpriteAsset_AfterArgs AddSpriteAsset_TMP_SpriteAsset
{
add
{

HookHandler._afterAddSpriteAsset_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAsset_TMP_SpriteAsset();
}
remove => HookHandler._afterAddSpriteAsset_TMP_SpriteAsset -= value;
}
public static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_AfterArgs AddSpriteAssetInternal_TMP_SpriteAsset
{
add
{

HookHandler._afterAddSpriteAssetInternal_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAssetInternal_TMP_SpriteAsset();
}
remove => HookHandler._afterAddSpriteAssetInternal_TMP_SpriteAsset -= value;
}
public static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_AfterArgs AddSpriteAsset_int_TMP_SpriteAsset
{
add
{

HookHandler._afterAddSpriteAsset_int_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAsset_int_TMP_SpriteAsset();
}
remove => HookHandler._afterAddSpriteAsset_int_TMP_SpriteAsset -= value;
}
public static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_AfterArgs AddSpriteAssetInternal_int_TMP_SpriteAsset
{
add
{

HookHandler._afterAddSpriteAssetInternal_int_TMP_SpriteAsset += value;
HookHandler.HookAddSpriteAssetInternal_int_TMP_SpriteAsset();
}
remove => HookHandler._afterAddSpriteAssetInternal_int_TMP_SpriteAsset -= value;
}
public static event Delegates.AddFontMaterial_AfterArgs AddFontMaterial
{
add
{

HookHandler._afterAddFontMaterial += value;
HookHandler.HookAddFontMaterial();
}
remove => HookHandler._afterAddFontMaterial -= value;
}
public static event Delegates.AddFontMaterialInternal_AfterArgs AddFontMaterialInternal
{
add
{

HookHandler._afterAddFontMaterialInternal += value;
HookHandler.HookAddFontMaterialInternal();
}
remove => HookHandler._afterAddFontMaterialInternal -= value;
}
public static event Delegates.Contains_TMP_FontAsset_AfterArgs Contains_TMP_FontAsset
{
add
{

HookHandler._afterContains_TMP_FontAsset += value;
HookHandler.HookContains_TMP_FontAsset();
}
remove => HookHandler._afterContains_TMP_FontAsset -= value;
}
public static event Delegates.Contains_TMP_SpriteAsset_AfterArgs Contains_TMP_SpriteAsset
{
add
{

HookHandler._afterContains_TMP_SpriteAsset += value;
HookHandler.HookContains_TMP_SpriteAsset();
}
remove => HookHandler._afterContains_TMP_SpriteAsset -= value;
}
public static event Delegates.TryGetFontAsset_AfterArgs TryGetFontAsset
{
add
{

HookHandler._afterTryGetFontAsset += value;
HookHandler.HookTryGetFontAsset();
}
remove => HookHandler._afterTryGetFontAsset -= value;
}
public static event Delegates.TryGetFontAssetInternal_AfterArgs TryGetFontAssetInternal
{
add
{

HookHandler._afterTryGetFontAssetInternal += value;
HookHandler.HookTryGetFontAssetInternal();
}
remove => HookHandler._afterTryGetFontAssetInternal -= value;
}
public static event Delegates.TryGetSpriteAsset_AfterArgs TryGetSpriteAsset
{
add
{

HookHandler._afterTryGetSpriteAsset += value;
HookHandler.HookTryGetSpriteAsset();
}
remove => HookHandler._afterTryGetSpriteAsset -= value;
}
public static event Delegates.TryGetSpriteAssetInternal_AfterArgs TryGetSpriteAssetInternal
{
add
{

HookHandler._afterTryGetSpriteAssetInternal += value;
HookHandler.HookTryGetSpriteAssetInternal();
}
remove => HookHandler._afterTryGetSpriteAssetInternal -= value;
}
public static event Delegates.TryGetMaterial_AfterArgs TryGetMaterial
{
add
{

HookHandler._afterTryGetMaterial += value;
HookHandler.HookTryGetMaterial();
}
remove => HookHandler._afterTryGetMaterial -= value;
}
public static event Delegates.TryGetMaterialInternal_AfterArgs TryGetMaterialInternal
{
add
{

HookHandler._afterTryGetMaterialInternal += value;
HookHandler.HookTryGetMaterialInternal();
}
remove => HookHandler._afterTryGetMaterialInternal -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_instance_WithArgs get_instance
{
add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "get_instance", false), value);
remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "get_instance", false), value);
}
public static event Delegates.AddFontAsset_WithArgs AddFontAsset
{
add => HookEndpointManager.Add<Delegates.AddFontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontAsset", false), value);
remove => HookEndpointManager.Remove<Delegates.AddFontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontAsset", false), value);
}
public static event Delegates.AddFontAssetInternal_WithArgs AddFontAssetInternal
{
add => HookEndpointManager.Add<Delegates.AddFontAssetInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontAssetInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.AddFontAssetInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontAssetInternal", true), value);
}
public static event Delegates.AddSpriteAsset_TMP_SpriteAsset_WithArgs AddSpriteAsset_TMP_SpriteAsset
{
add => HookEndpointManager.Add<Delegates.AddSpriteAsset_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAsset", false), value);
remove => HookEndpointManager.Remove<Delegates.AddSpriteAsset_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAsset", false), value);
}
public static event Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_WithArgs AddSpriteAssetInternal_TMP_SpriteAsset
{
add => HookEndpointManager.Add<Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAssetInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.AddSpriteAssetInternal_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAssetInternal", true), value);
}
public static event Delegates.AddSpriteAsset_int_TMP_SpriteAsset_WithArgs AddSpriteAsset_int_TMP_SpriteAsset
{
add => HookEndpointManager.Add<Delegates.AddSpriteAsset_int_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAsset", false), value);
remove => HookEndpointManager.Remove<Delegates.AddSpriteAsset_int_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAsset", false), value);
}
public static event Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_WithArgs AddSpriteAssetInternal_int_TMP_SpriteAsset
{
add => HookEndpointManager.Add<Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAssetInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.AddSpriteAssetInternal_int_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddSpriteAssetInternal", true), value);
}
public static event Delegates.AddFontMaterial_WithArgs AddFontMaterial
{
add => HookEndpointManager.Add<Delegates.AddFontMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontMaterial", false), value);
remove => HookEndpointManager.Remove<Delegates.AddFontMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontMaterial", false), value);
}
public static event Delegates.AddFontMaterialInternal_WithArgs AddFontMaterialInternal
{
add => HookEndpointManager.Add<Delegates.AddFontMaterialInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontMaterialInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.AddFontMaterialInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "AddFontMaterialInternal", true), value);
}
public static event Delegates.Contains_TMP_FontAsset_WithArgs Contains_TMP_FontAsset
{
add => HookEndpointManager.Add<Delegates.Contains_TMP_FontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "Contains", true), value);
remove => HookEndpointManager.Remove<Delegates.Contains_TMP_FontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "Contains", true), value);
}
public static event Delegates.Contains_TMP_SpriteAsset_WithArgs Contains_TMP_SpriteAsset
{
add => HookEndpointManager.Add<Delegates.Contains_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "Contains", true), value);
remove => HookEndpointManager.Remove<Delegates.Contains_TMP_SpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "Contains", true), value);
}
public static event Delegates.TryGetFontAsset_WithArgs TryGetFontAsset
{
add => HookEndpointManager.Add<Delegates.TryGetFontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetFontAsset", false), value);
remove => HookEndpointManager.Remove<Delegates.TryGetFontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetFontAsset", false), value);
}
public static event Delegates.TryGetFontAssetInternal_WithArgs TryGetFontAssetInternal
{
add => HookEndpointManager.Add<Delegates.TryGetFontAssetInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetFontAssetInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.TryGetFontAssetInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetFontAssetInternal", true), value);
}
public static event Delegates.TryGetSpriteAsset_WithArgs TryGetSpriteAsset
{
add => HookEndpointManager.Add<Delegates.TryGetSpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetSpriteAsset", false), value);
remove => HookEndpointManager.Remove<Delegates.TryGetSpriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetSpriteAsset", false), value);
}
public static event Delegates.TryGetSpriteAssetInternal_WithArgs TryGetSpriteAssetInternal
{
add => HookEndpointManager.Add<Delegates.TryGetSpriteAssetInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetSpriteAssetInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.TryGetSpriteAssetInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetSpriteAssetInternal", true), value);
}
public static event Delegates.TryGetMaterial_WithArgs TryGetMaterial
{
add => HookEndpointManager.Add<Delegates.TryGetMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetMaterial", false), value);
remove => HookEndpointManager.Remove<Delegates.TryGetMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetMaterial", false), value);
}
public static event Delegates.TryGetMaterialInternal_WithArgs TryGetMaterialInternal
{
add => HookEndpointManager.Add<Delegates.TryGetMaterialInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetMaterialInternal", true), value);
remove => HookEndpointManager.Remove<Delegates.TryGetMaterialInternal_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.MaterialReferenceManager), "TryGetMaterialInternal", true), value);
}
}

}
