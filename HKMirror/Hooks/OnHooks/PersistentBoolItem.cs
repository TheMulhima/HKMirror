namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PersistentBoolItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPersistentBoolItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PersistentBoolItem.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.PersistentBoolItem.orig_Awake orig, PersistentBoolItem self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PersistentBoolItem.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.PersistentBoolItem.orig_OnEnable orig, PersistentBoolItem self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.PersistentBoolItem.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.PersistentBoolItem.orig_OnDisable orig, PersistentBoolItem self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PersistentBoolItem.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.PersistentBoolItem.orig_Start orig, PersistentBoolItem self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSaveState()
        {
            if (!HookedList.Contains("SaveState"))
            {
                HookedList.Add("SaveState");
                On.PersistentBoolItem.SaveState += SaveState;
            }
        }

        internal static event Delegates.SaveState_BeforeArgs _beforeSaveState;
        internal static event Delegates.SaveState_NormalArgs _afterSaveState;

        private static void SaveState(On.PersistentBoolItem.orig_SaveState orig, PersistentBoolItem self)
        {
            Delegates.Params_SaveState @params = new()
            {
                self = self
            };
            _beforeSaveState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveState != null) _afterSaveState.Invoke(@params);
        }

        internal static void HookResetState()
        {
            if (!HookedList.Contains("ResetState"))
            {
                HookedList.Add("ResetState");
                On.PersistentBoolItem.ResetState += ResetState;
            }
        }

        internal static event Delegates.ResetState_BeforeArgs _beforeResetState;
        internal static event Delegates.ResetState_NormalArgs _afterResetState;

        private static void ResetState(On.PersistentBoolItem.orig_ResetState orig, PersistentBoolItem self)
        {
            Delegates.Params_ResetState @params = new()
            {
                self = self
            };
            _beforeResetState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetState != null) _afterResetState.Invoke(@params);
        }

        internal static void HookSetMyID()
        {
            if (!HookedList.Contains("SetMyID"))
            {
                HookedList.Add("SetMyID");
                On.PersistentBoolItem.SetMyID += SetMyID;
            }
        }

        internal static event Delegates.SetMyID_BeforeArgs _beforeSetMyID;
        internal static event Delegates.SetMyID_NormalArgs _afterSetMyID;

        private static void SetMyID(On.PersistentBoolItem.orig_SetMyID orig, PersistentBoolItem self)
        {
            Delegates.Params_SetMyID @params = new()
            {
                self = self
            };
            _beforeSetMyID?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetMyID != null) _afterSetMyID.Invoke(@params);
        }

        internal static void HookPreSetup()
        {
            if (!HookedList.Contains("PreSetup"))
            {
                HookedList.Add("PreSetup");
                On.PersistentBoolItem.PreSetup += PreSetup;
            }
        }

        internal static event Delegates.PreSetup_BeforeArgs _beforePreSetup;
        internal static event Delegates.PreSetup_NormalArgs _afterPreSetup;

        private static void PreSetup(On.PersistentBoolItem.orig_PreSetup orig, PersistentBoolItem self)
        {
            Delegates.Params_PreSetup @params = new()
            {
                self = self
            };
            _beforePreSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPreSetup != null) _afterPreSetup.Invoke(@params);
        }

        internal static void HookUpdateActivatedFromFSM()
        {
            if (!HookedList.Contains("UpdateActivatedFromFSM"))
            {
                HookedList.Add("UpdateActivatedFromFSM");
                On.PersistentBoolItem.UpdateActivatedFromFSM += UpdateActivatedFromFSM;
            }
        }

        internal static event Delegates.UpdateActivatedFromFSM_BeforeArgs _beforeUpdateActivatedFromFSM;
        internal static event Delegates.UpdateActivatedFromFSM_NormalArgs _afterUpdateActivatedFromFSM;

        private static void UpdateActivatedFromFSM(On.PersistentBoolItem.orig_UpdateActivatedFromFSM orig,
            PersistentBoolItem self)
        {
            Delegates.Params_UpdateActivatedFromFSM @params = new()
            {
                self = self
            };
            _beforeUpdateActivatedFromFSM?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateActivatedFromFSM != null) _afterUpdateActivatedFromFSM.Invoke(@params);
        }

        internal static void HookLookForMyFSM()
        {
            if (!HookedList.Contains("LookForMyFSM"))
            {
                HookedList.Add("LookForMyFSM");
                On.PersistentBoolItem.LookForMyFSM += LookForMyFSM;
            }
        }

        internal static event Delegates.LookForMyFSM_BeforeArgs _beforeLookForMyFSM;
        internal static event Delegates.LookForMyFSM_NormalArgs _afterLookForMyFSM;

        private static void LookForMyFSM(On.PersistentBoolItem.orig_LookForMyFSM orig, PersistentBoolItem self)
        {
            Delegates.Params_LookForMyFSM @params = new()
            {
                self = self
            };
            _beforeLookForMyFSM?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLookForMyFSM != null) _afterLookForMyFSM.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void LookForMyFSM_BeforeArgs(Params_LookForMyFSM args);

        public delegate void LookForMyFSM_NormalArgs(Params_LookForMyFSM args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void PreSetup_BeforeArgs(Params_PreSetup args);

        public delegate void PreSetup_NormalArgs(Params_PreSetup args);

        public delegate void ResetState_BeforeArgs(Params_ResetState args);

        public delegate void ResetState_NormalArgs(Params_ResetState args);

        public delegate void SaveState_BeforeArgs(Params_SaveState args);

        public delegate void SaveState_NormalArgs(Params_SaveState args);

        public delegate void SetMyID_BeforeArgs(Params_SetMyID args);

        public delegate void SetMyID_NormalArgs(Params_SetMyID args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UpdateActivatedFromFSM_BeforeArgs(Params_UpdateActivatedFromFSM args);

        public delegate void UpdateActivatedFromFSM_NormalArgs(Params_UpdateActivatedFromFSM args);

        public sealed class Params_Awake
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_OnEnable
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_OnDisable
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_Start
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_SaveState
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_ResetState
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_SetMyID
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_PreSetup
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_UpdateActivatedFromFSM
        {
            public PersistentBoolItem self;
        }

        public sealed class Params_LookForMyFSM
        {
            public PersistentBoolItem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SaveState_BeforeArgs SaveState
        {
            add
            {
                HookHandler._beforeSaveState += value;
                HookHandler.HookSaveState();
            }
            remove => HookHandler._beforeSaveState -= value;
        }

        public static event Delegates.ResetState_BeforeArgs ResetState
        {
            add
            {
                HookHandler._beforeResetState += value;
                HookHandler.HookResetState();
            }
            remove => HookHandler._beforeResetState -= value;
        }

        public static event Delegates.SetMyID_BeforeArgs SetMyID
        {
            add
            {
                HookHandler._beforeSetMyID += value;
                HookHandler.HookSetMyID();
            }
            remove => HookHandler._beforeSetMyID -= value;
        }

        public static event Delegates.PreSetup_BeforeArgs PreSetup
        {
            add
            {
                HookHandler._beforePreSetup += value;
                HookHandler.HookPreSetup();
            }
            remove => HookHandler._beforePreSetup -= value;
        }

        public static event Delegates.UpdateActivatedFromFSM_BeforeArgs UpdateActivatedFromFSM
        {
            add
            {
                HookHandler._beforeUpdateActivatedFromFSM += value;
                HookHandler.HookUpdateActivatedFromFSM();
            }
            remove => HookHandler._beforeUpdateActivatedFromFSM -= value;
        }

        public static event Delegates.LookForMyFSM_BeforeArgs LookForMyFSM
        {
            add
            {
                HookHandler._beforeLookForMyFSM += value;
                HookHandler.HookLookForMyFSM();
            }
            remove => HookHandler._beforeLookForMyFSM -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SaveState_NormalArgs SaveState
        {
            add
            {
                HookHandler._afterSaveState += value;
                HookHandler.HookSaveState();
            }
            remove => HookHandler._afterSaveState -= value;
        }

        public static event Delegates.ResetState_NormalArgs ResetState
        {
            add
            {
                HookHandler._afterResetState += value;
                HookHandler.HookResetState();
            }
            remove => HookHandler._afterResetState -= value;
        }

        public static event Delegates.SetMyID_NormalArgs SetMyID
        {
            add
            {
                HookHandler._afterSetMyID += value;
                HookHandler.HookSetMyID();
            }
            remove => HookHandler._afterSetMyID -= value;
        }

        public static event Delegates.PreSetup_NormalArgs PreSetup
        {
            add
            {
                HookHandler._afterPreSetup += value;
                HookHandler.HookPreSetup();
            }
            remove => HookHandler._afterPreSetup -= value;
        }

        public static event Delegates.UpdateActivatedFromFSM_NormalArgs UpdateActivatedFromFSM
        {
            add
            {
                HookHandler._afterUpdateActivatedFromFSM += value;
                HookHandler.HookUpdateActivatedFromFSM();
            }
            remove => HookHandler._afterUpdateActivatedFromFSM -= value;
        }

        public static event Delegates.LookForMyFSM_NormalArgs LookForMyFSM
        {
            add
            {
                HookHandler._afterLookForMyFSM += value;
                HookHandler.HookLookForMyFSM();
            }
            remove => HookHandler._afterLookForMyFSM -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PersistentBoolItem.hook_Awake Awake
        {
            add => On.PersistentBoolItem.Awake += value;
            remove => On.PersistentBoolItem.Awake -= value;
        }

        public static event On.PersistentBoolItem.hook_OnEnable OnEnable
        {
            add => On.PersistentBoolItem.OnEnable += value;
            remove => On.PersistentBoolItem.OnEnable -= value;
        }

        public static event On.PersistentBoolItem.hook_OnDisable OnDisable
        {
            add => On.PersistentBoolItem.OnDisable += value;
            remove => On.PersistentBoolItem.OnDisable -= value;
        }

        public static event On.PersistentBoolItem.hook_Start Start
        {
            add => On.PersistentBoolItem.Start += value;
            remove => On.PersistentBoolItem.Start -= value;
        }

        public static event On.PersistentBoolItem.hook_SaveState SaveState
        {
            add => On.PersistentBoolItem.SaveState += value;
            remove => On.PersistentBoolItem.SaveState -= value;
        }

        public static event On.PersistentBoolItem.hook_ResetState ResetState
        {
            add => On.PersistentBoolItem.ResetState += value;
            remove => On.PersistentBoolItem.ResetState -= value;
        }

        public static event On.PersistentBoolItem.hook_SetMyID SetMyID
        {
            add => On.PersistentBoolItem.SetMyID += value;
            remove => On.PersistentBoolItem.SetMyID -= value;
        }

        public static event On.PersistentBoolItem.hook_PreSetup PreSetup
        {
            add => On.PersistentBoolItem.PreSetup += value;
            remove => On.PersistentBoolItem.PreSetup -= value;
        }

        public static event On.PersistentBoolItem.hook_UpdateActivatedFromFSM UpdateActivatedFromFSM
        {
            add => On.PersistentBoolItem.UpdateActivatedFromFSM += value;
            remove => On.PersistentBoolItem.UpdateActivatedFromFSM -= value;
        }

        public static event On.PersistentBoolItem.hook_LookForMyFSM LookForMyFSM
        {
            add => On.PersistentBoolItem.LookForMyFSM += value;
            remove => On.PersistentBoolItem.LookForMyFSM -= value;
        }
    }
}