namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CorpseDeathStunChunker class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCorpseDeathStunChunker
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CorpseDeathStunChunker.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.CorpseDeathStunChunker.orig_Start orig, CorpseDeathStunChunker self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookDeathStun()
        {
            if (!HookedList.Contains("DeathStun"))
            {
                HookedList.Add("DeathStun");
                On.CorpseDeathStunChunker.DeathStun += DeathStun;
            }
        }

        internal static event Delegates.DeathStun_BeforeArgs _beforeDeathStun;

        private static IEnumerator DeathStun(On.CorpseDeathStunChunker.orig_DeathStun orig, CorpseDeathStunChunker self)
        {
            Delegates.Params_DeathStun @params = new()
            {
                self = self
            };
            _beforeDeathStun?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookJitter()
        {
            if (!HookedList.Contains("Jitter"))
            {
                HookedList.Add("Jitter");
                On.CorpseDeathStunChunker.Jitter += Jitter;
            }
        }

        internal static event Delegates.Jitter_BeforeArgs _beforeJitter;

        private static IEnumerator Jitter(On.CorpseDeathStunChunker.orig_Jitter orig, CorpseDeathStunChunker self,
            float duration)
        {
            Delegates.Params_Jitter @params = new()
            {
                self = self, duration = duration
            };
            _beforeJitter?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            return orig(self, duration);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DeathStun_BeforeArgs(Params_DeathStun args);

        public delegate IEnumerator DeathStun_NormalArgs(Params_DeathStun args);

        public delegate void Jitter_BeforeArgs(Params_Jitter args);

        public delegate IEnumerator Jitter_NormalArgs(Params_Jitter args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public CorpseDeathStunChunker self;
        }

        public sealed class Params_DeathStun
        {
            public CorpseDeathStunChunker self;
        }

        public sealed class Params_Jitter
        {
            public float duration;
            public CorpseDeathStunChunker self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.DeathStun_BeforeArgs DeathStun
        {
            add
            {
                HookHandler._beforeDeathStun += value;
                HookHandler.HookDeathStun();
            }
            remove => HookHandler._beforeDeathStun -= value;
        }

        public static event Delegates.Jitter_BeforeArgs Jitter
        {
            add
            {
                HookHandler._beforeJitter += value;
                HookHandler.HookJitter();
            }
            remove => HookHandler._beforeJitter -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CorpseDeathStunChunker.hook_Start Start
        {
            add => On.CorpseDeathStunChunker.Start += value;
            remove => On.CorpseDeathStunChunker.Start -= value;
        }

        public static event On.CorpseDeathStunChunker.hook_DeathStun DeathStun
        {
            add => On.CorpseDeathStunChunker.DeathStun += value;
            remove => On.CorpseDeathStunChunker.DeathStun -= value;
        }

        public static event On.CorpseDeathStunChunker.hook_Jitter Jitter
        {
            add => On.CorpseDeathStunChunker.Jitter += value;
            remove => On.CorpseDeathStunChunker.Jitter -= value;
        }
    }
}