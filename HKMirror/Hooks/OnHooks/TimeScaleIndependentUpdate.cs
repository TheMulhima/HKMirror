using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for TimeScaleIndependentUpdate class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTimeScaleIndependentUpdate
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_deltaTime()
        {
            if (!HookedList.Contains("get_deltaTime"))
            {
                HookedList.Add("get_deltaTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TimeScaleIndependentUpdate), "get_deltaTime", true),
                    get_deltaTime);
            }
        }

        internal static event Delegates.get_deltaTime_BeforeArgs _beforeget_deltaTime;
        internal static event Delegates.get_deltaTime_AfterArgs _afterget_deltaTime;

        private static float get_deltaTime(Func<TimeScaleIndependentUpdate, float> orig,
            TimeScaleIndependentUpdate self)
        {
            Delegates.Params_get_deltaTime @params = new()
            {
                self = self
            };
            if (_beforeget_deltaTime != null)
            {
                foreach (Delegates.get_deltaTime_BeforeArgs toInvoke in _beforeget_deltaTime.GetInvocationList())
                {
                    try
                    {
                        _beforeget_deltaTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_deltaTime != null)
            {
                foreach (Delegates.get_deltaTime_AfterArgs toInvoke in _afterget_deltaTime.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_deltaTime.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_deltaTime()
        {
            if (!HookedList.Contains("set_deltaTime"))
            {
                HookedList.Add("set_deltaTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TimeScaleIndependentUpdate), "set_deltaTime", true),
                    set_deltaTime);
            }
        }

        internal static event Delegates.set_deltaTime_BeforeArgs _beforeset_deltaTime;
        internal static event Delegates.set_deltaTime_AfterArgs _afterset_deltaTime;

        private static void set_deltaTime(Action<TimeScaleIndependentUpdate, float> orig,
            TimeScaleIndependentUpdate self, float value)
        {
            Delegates.Params_set_deltaTime @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_deltaTime != null)
            {
                foreach (Delegates.set_deltaTime_BeforeArgs toInvoke in _beforeset_deltaTime.GetInvocationList())
                {
                    try
                    {
                        _beforeset_deltaTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_deltaTime != null)
            {
                foreach (Delegates.set_deltaTime_AfterArgs toInvoke in _afterset_deltaTime.GetInvocationList())
                {
                    try
                    {
                        _afterset_deltaTime.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.TimeScaleIndependentUpdate.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.TimeScaleIndependentUpdate.orig_Awake orig, TimeScaleIndependentUpdate self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.TimeScaleIndependentUpdate.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.TimeScaleIndependentUpdate.orig_Update orig, TimeScaleIndependentUpdate self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookTimeScaleIndependentWaitForSeconds()
        {
            if (!HookedList.Contains("TimeScaleIndependentWaitForSeconds"))
            {
                HookedList.Add("TimeScaleIndependentWaitForSeconds");
                On.TimeScaleIndependentUpdate.TimeScaleIndependentWaitForSeconds += TimeScaleIndependentWaitForSeconds;
            }
        }

        internal static event Delegates.TimeScaleIndependentWaitForSeconds_BeforeArgs
            _beforeTimeScaleIndependentWaitForSeconds;

        private static System.Collections.IEnumerator TimeScaleIndependentWaitForSeconds(
            On.TimeScaleIndependentUpdate.orig_TimeScaleIndependentWaitForSeconds orig, TimeScaleIndependentUpdate self,
            float seconds)
        {
            Delegates.Params_TimeScaleIndependentWaitForSeconds @params = new()
            {
                self = self, seconds = seconds
            };
            if (_beforeTimeScaleIndependentWaitForSeconds != null)
            {
                foreach (Delegates.TimeScaleIndependentWaitForSeconds_BeforeArgs toInvoke in
                         _beforeTimeScaleIndependentWaitForSeconds.GetInvocationList())
                {
                    try
                    {
                        _beforeTimeScaleIndependentWaitForSeconds?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            seconds = @params.seconds;
            return orig(self, seconds);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_deltaTime
        {
            public TimeScaleIndependentUpdate self;
        }

        public delegate void get_deltaTime_BeforeArgs(Params_get_deltaTime args);

        public delegate float get_deltaTime_AfterArgs(Params_get_deltaTime args, float ret);

        public delegate float get_deltaTime_WithArgs(Func<TimeScaleIndependentUpdate, float> orig,
            TimeScaleIndependentUpdate self);

        public sealed class Params_set_deltaTime
        {
            public TimeScaleIndependentUpdate self;
            public float value;
        }

        public delegate void set_deltaTime_BeforeArgs(Params_set_deltaTime args);

        public delegate void set_deltaTime_AfterArgs(Params_set_deltaTime args);

        public delegate void set_deltaTime_WithArgs(Action<TimeScaleIndependentUpdate, float> orig,
            TimeScaleIndependentUpdate self, float value);

        public sealed class Params_Awake
        {
            public TimeScaleIndependentUpdate self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<TimeScaleIndependentUpdate> orig, TimeScaleIndependentUpdate self);

        public sealed class Params_Update
        {
            public TimeScaleIndependentUpdate self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<TimeScaleIndependentUpdate> orig, TimeScaleIndependentUpdate self);

        public sealed class Params_TimeScaleIndependentWaitForSeconds
        {
            public TimeScaleIndependentUpdate self;
            public float seconds;
        }

        public delegate void TimeScaleIndependentWaitForSeconds_BeforeArgs(
            Params_TimeScaleIndependentWaitForSeconds args);

        public delegate System.Collections.IEnumerator TimeScaleIndependentWaitForSeconds_AfterArgs(
            Params_TimeScaleIndependentWaitForSeconds args, System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator TimeScaleIndependentWaitForSeconds_WithArgs(
            Func<TimeScaleIndependentUpdate, float, System.Collections.IEnumerator> orig,
            TimeScaleIndependentUpdate self, float seconds);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_deltaTime_BeforeArgs get_deltaTime
        {
            add
            {
                HookHandler._beforeget_deltaTime += value;
                HookHandler.Hookget_deltaTime();
            }
            remove => HookHandler._beforeget_deltaTime -= value;
        }

        public static event Delegates.set_deltaTime_BeforeArgs set_deltaTime
        {
            add
            {
                HookHandler._beforeset_deltaTime += value;
                HookHandler.Hookset_deltaTime();
            }
            remove => HookHandler._beforeset_deltaTime -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.TimeScaleIndependentWaitForSeconds_BeforeArgs TimeScaleIndependentWaitForSeconds
        {
            add
            {
                HookHandler._beforeTimeScaleIndependentWaitForSeconds += value;
                HookHandler.HookTimeScaleIndependentWaitForSeconds();
            }
            remove => HookHandler._beforeTimeScaleIndependentWaitForSeconds -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_deltaTime_AfterArgs get_deltaTime
        {
            add
            {
                HookHandler._afterget_deltaTime += value;
                HookHandler.Hookget_deltaTime();
            }
            remove => HookHandler._afterget_deltaTime -= value;
        }

        public static event Delegates.set_deltaTime_AfterArgs set_deltaTime
        {
            add
            {
                HookHandler._afterset_deltaTime += value;
                HookHandler.Hookset_deltaTime();
            }
            remove => HookHandler._afterset_deltaTime -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_deltaTime_WithArgs get_deltaTime
        {
            add => HookEndpointManager.Add<Delegates.get_deltaTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TimeScaleIndependentUpdate), "get_deltaTime", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_deltaTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TimeScaleIndependentUpdate), "get_deltaTime", true), value);
        }

        public static event Delegates.set_deltaTime_WithArgs set_deltaTime
        {
            add => HookEndpointManager.Add<Delegates.set_deltaTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TimeScaleIndependentUpdate), "set_deltaTime", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_deltaTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TimeScaleIndependentUpdate), "set_deltaTime", true), value);
        }

        public static event On.TimeScaleIndependentUpdate.hook_Awake Awake
        {
            add => On.TimeScaleIndependentUpdate.Awake += value;
            remove => On.TimeScaleIndependentUpdate.Awake -= value;
        }

        public static event On.TimeScaleIndependentUpdate.hook_Update Update
        {
            add => On.TimeScaleIndependentUpdate.Update += value;
            remove => On.TimeScaleIndependentUpdate.Update -= value;
        }

        public static event On.TimeScaleIndependentUpdate.hook_TimeScaleIndependentWaitForSeconds
            TimeScaleIndependentWaitForSeconds
            {
                add => On.TimeScaleIndependentUpdate.TimeScaleIndependentWaitForSeconds += value;
                remove => On.TimeScaleIndependentUpdate.TimeScaleIndependentWaitForSeconds -= value;
            }
    }
}