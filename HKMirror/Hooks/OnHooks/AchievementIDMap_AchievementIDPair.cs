using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AchievementIDMap_AchievementIDPair class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAchievementIDMap_AchievementIDPair
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_InternalId()
        {
            if (!HookedList.Contains("get_InternalId"))
            {
                HookedList.Add("get_InternalId");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AchievementIDMap.AchievementIDPair), "get_InternalId"),
                    get_InternalId);
            }
        }

        internal static event Delegates.get_InternalId_BeforeArgs _beforeget_InternalId;
        internal static event Delegates.get_InternalId_AfterArgs _afterget_InternalId;

        private static string get_InternalId(Func<AchievementIDMap.AchievementIDPair, string> orig,
            AchievementIDMap.AchievementIDPair self)
        {
            Delegates.Params_get_InternalId @params = new()
            {
                self = self
            };
            if (_beforeget_InternalId != null)
                foreach (Delegates.get_InternalId_BeforeArgs toInvoke in _beforeget_InternalId.GetInvocationList())
                    try
                    {
                        _beforeget_InternalId?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_InternalId != null)
                foreach (Delegates.get_InternalId_AfterArgs toInvoke in _afterget_InternalId.GetInvocationList())
                    try
                    {
                        retVal = _afterget_InternalId.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_ServiceId()
        {
            if (!HookedList.Contains("get_ServiceId"))
            {
                HookedList.Add("get_ServiceId");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AchievementIDMap.AchievementIDPair), "get_ServiceId"),
                    get_ServiceId);
            }
        }

        internal static event Delegates.get_ServiceId_BeforeArgs _beforeget_ServiceId;
        internal static event Delegates.get_ServiceId_AfterArgs _afterget_ServiceId;

        private static int get_ServiceId(Func<AchievementIDMap.AchievementIDPair, int> orig,
            AchievementIDMap.AchievementIDPair self)
        {
            Delegates.Params_get_ServiceId @params = new()
            {
                self = self
            };
            if (_beforeget_ServiceId != null)
                foreach (Delegates.get_ServiceId_BeforeArgs toInvoke in _beforeget_ServiceId.GetInvocationList())
                    try
                    {
                        _beforeget_ServiceId?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ServiceId != null)
                foreach (Delegates.get_ServiceId_AfterArgs toInvoke in _afterget_ServiceId.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ServiceId.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate string get_InternalId_AfterArgs(Params_get_InternalId args, string ret);

        public delegate void get_InternalId_BeforeArgs(Params_get_InternalId args);

        public delegate string get_InternalId_WithArgs(Func<AchievementIDMap.AchievementIDPair, string> orig,
            AchievementIDMap.AchievementIDPair self);

        public delegate int get_ServiceId_AfterArgs(Params_get_ServiceId args, int ret);

        public delegate void get_ServiceId_BeforeArgs(Params_get_ServiceId args);

        public delegate int get_ServiceId_WithArgs(Func<AchievementIDMap.AchievementIDPair, int> orig,
            AchievementIDMap.AchievementIDPair self);

        public sealed class Params_get_InternalId
        {
            public AchievementIDMap.AchievementIDPair self;
        }

        public sealed class Params_get_ServiceId
        {
            public AchievementIDMap.AchievementIDPair self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_InternalId_BeforeArgs get_InternalId
        {
            add
            {
                HookHandler._beforeget_InternalId += value;
                HookHandler.Hookget_InternalId();
            }
            remove => HookHandler._beforeget_InternalId -= value;
        }

        public static event Delegates.get_ServiceId_BeforeArgs get_ServiceId
        {
            add
            {
                HookHandler._beforeget_ServiceId += value;
                HookHandler.Hookget_ServiceId();
            }
            remove => HookHandler._beforeget_ServiceId -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_InternalId_AfterArgs get_InternalId
        {
            add
            {
                HookHandler._afterget_InternalId += value;
                HookHandler.Hookget_InternalId();
            }
            remove => HookHandler._afterget_InternalId -= value;
        }

        public static event Delegates.get_ServiceId_AfterArgs get_ServiceId
        {
            add
            {
                HookHandler._afterget_ServiceId += value;
                HookHandler.Hookget_ServiceId();
            }
            remove => HookHandler._afterget_ServiceId -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_InternalId_WithArgs get_InternalId
        {
            add => HookEndpointManager.Add<Delegates.get_InternalId_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AchievementIDMap.AchievementIDPair), "get_InternalId"), value);
            remove => HookEndpointManager.Remove<Delegates.get_InternalId_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AchievementIDMap.AchievementIDPair), "get_InternalId"), value);
        }

        public static event Delegates.get_ServiceId_WithArgs get_ServiceId
        {
            add => HookEndpointManager.Add<Delegates.get_ServiceId_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AchievementIDMap.AchievementIDPair), "get_ServiceId"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ServiceId_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AchievementIDMap.AchievementIDPair), "get_ServiceId"), value);
        }
    }
}