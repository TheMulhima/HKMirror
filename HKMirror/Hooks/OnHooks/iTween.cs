using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for iTween class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OniTween
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.iTween.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.iTween.orig_Init orig, UnityEngine.GameObject target)
        {
            Delegates.Params_Init @params = new()
            {
                target = target
            };
            if (_beforeInit != null)
            {
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                {
                    try
                    {
                        _beforeInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            orig(target);
            if (_afterInit != null)
            {
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                {
                    try
                    {
                        _afterInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCameraFadeFrom_float_float()
        {
            i
            (
                !HookedLis
            t
                .Contain
            s
                ("CameraFadeFrom_float_float
            "
                ))
            {
                HookedLis
                t
                    .Ad
                d
                    ("CameraFadeFrom_float_float
                "
                    );
                O
                n
                    .iTwee
                n
                        .CameraFadeFrom_float_floa
                    +
                    CameraFadeFrom_float_floa
                t
            }
        }

        internal static event Delegates.CameraFadeFrom_float_float_BeforeArgs _beforeCameraFadeFrom_float_float;
        internal static event Delegates.CameraFadeFrom_float_float_AfterArgs _afterCameraFadeFrom_float_float;

        private static void CameraFadeFrom_float_float(On.iTween.orig_CameraFadeFrom_float_float orig, float amount,
            float time)
        {
            Dele
                g
            tes.P
                rams
            _C am eraFadeFr
                o
            m_float_float @params = new()
            {
                mount =
                    a
                oun
                t
                ti me = t
                m
            };
            if (
                befo
            e
                amera F
                ad eF
                o
            m_float_float != null)
            {
                foreach
                De
                    egat
                es.C ameraFa
                e
                    From_floa
                t
                _float_BeforeArgs toInvoke in _before
                    ameraFad
                Fr
                m_float_float.GetInvocationList()
                    )

                {
                    try
                    {
                        _beforeC
                            a
                        m
                            er aF adeF ro m_float_float?.Invoke(@params);
                    }


                    c
                        atch(
                            E
                                xceptio
                                n
                                e)
                    {
                        HK
                            i
                        rrorMod.D
                            L
                        oE r
                        or(e);
                    }
                }
            }

            amount =
                @
            p
                a
            ra ms.a mo unt;
            t
                m
                    = @par
            a
            ms.tim
                e;
            ori
            (
                mount,
                t
            ime)
            ;
            if (
                _
            afterC
                a
            eraF
                a
            de Fr
            m
            _float_float != null)
            {
                foreach
                De
                    egat
                es.C ameraFa
                e
                    From_floa
                t
                _float_AfterArgs toInvoke in _afterC
                    meraFade
                ro
                _float_float.GetInvocationList()
                    )

                {
                    try
                    {
                        _afterCa
                            m
                        e
                            ra Fa deFr om _float_float.Invoke(@params);
                    }

                    c
                        atch(
                            E
                                xceptio
                                n
                                e)
                    {
                        HK
                            i
                        rrorMod.D
                            L
                        oE r
                        or(e);
                    }
                }
            }
        }

        internal static void HookCameraFadeFrom_Hashtable()
        {
            i f(!Hooked Li t
                .o n
            ain("        CameraF
            a
                de ro m_Ha ht
                a
            b
                l
            e"        ))        

            Ho ke dList.Ad
                ("Came
            aFad
                From_Hashtable");
            On.iTween.
                C
                am er aF
            d
                e
            From_Hasht
                a
            ble += C
            a
                meraFadeFrom_Hashtable;
        }
    }

    internal static event Delegates.CameraFadeFrom_Hashtable_BeforeArgs _beforeCameraFadeFrom_Hashtable;
    internal static event Delegates.CameraFadeFrom_Hashtable_AfterArgs _afterCameraFadeFrom_Hashtable;

    private static void CameraFadeFrom_Hashtable(On.iTween.orig_CameraFadeFrom_Hashtable orig,
        System.Collections.Hashtable args)
    {
        Delega
            te s.Param
            _Camer
        Fade
        rom_Hashtable @params =
            n
        ew
        (
        )
        {
            a
            r
                gs = args
        }
        ;
        if (_beforeCamer
        Fade
            F
        om_Has
            h
        table != nu
        l
            l)
        {
            fore
                ch(
                    De le gates.Cam
                        e
                        raFadeFrom_Hashtable_BeforeArgs
                        toInvok
                        n _
                        b
                        eo re Came
                        a
                        adeFr o
                        m_ Ha
                        h
                        table.GetInvocationList())
            {
                tr

                {
                    _bef
                        or eC ameraFa
                    e
                        From_Hash
                    t
                    able?.Invoke(@params);
                }
                catch (Exc
                ption e)

                {
                    HKMirrorMod.DoLogError(e);
                }
            }
        }

        args = @params.a
        r
        g
            s;
        o rig(ar gs);
        if (_afterCameraFadeFrom_H
        a
            s
        htable
            != null
            )

        {
            f oreac
            (Delegate
                .
                Cm e

            aFadeFrom_H
                a
            shtable_Af
                t
            e
                r
            Ar gs t oI nvok
                n _afte
                r
            Came
                ra Fade
                F
            rom_
            H
                as ht
            b
            le.GetInvocationList())
            {
                try


                _
                    fter
                Ca me raFadeF
                    o
                m_Hashtab
                    l
                e.Invoke(@params);
            }
            catch (Except
            on e)
            {
                HK
                irrorMod.DoLogError(e);
            }
        }
    }
}

internal static void HookCameraFadeTo_float_float()
{
    if (!Ho okedL st.C
        o
    ntains("CameraFad
    e
        T
    o_ fl oat
        at ))
    {
        HookedList.A d("CameraFad        eT        o
        _
            float_
        f
            loat");


        On.i Tween
        C
            ameraFa eT
            _
        fo at flo t += Cam
        e
            raFadeTo_f
        l
            o
        a
            t_ fl oa t
    }
}
internal static event Delegates.CameraFadeTo_float_float_BeforeArgs _beforeCameraFadeTo_float_float;
internal static event Delegates.CameraFadeTo_float_float_AfterArgs _afterCameraFadeTo_float_float;

private static void CameraFadeTo_float_float(On.iTween.orig_CameraFadeTo_float_float orig, float amount,
    float time)
{
    Delegates.Params_C
        am eraFadeT
        _float
    float
        @params =
            new()
            {
                amount = amount, time =
                    ime
            };
    if (_beforeCameraFadeTo
    _f loat_fl
    at !=
        ull)
    {
        foreach (Delegates.Cam
                     e
        ra
            F
        adeTo_
            f
        loat_float_BeforeArgs toInvok
            in
        _
            efore
        ameraF
            a
        eTo_f
            oat_
        fl oa t.GetInvo
            c
        ationList())
        {
            try
            {
                _beforeCam
                    raFadeT
                _
                    loa
                t
                    _l oa t?.Inv
                k
                        (@param s
                    ;
            }

            a
                ch(E x
                    ce pt
                    o
                    n e)
            {
                HKMirrorMod.DoLogError(
                );
            }
        }
    }
    am ount =
        p
    arams.amo
    u
        nt;
    time = @params.time;
    orig(amoun
        , time);
    if
        (_afterCameraFadeTo_float_float
         != null)
    {
        foreac
            h
            (D el

        egat es.CameraFadeTo_float_float_After
            A
        r
            gs toI
        n
        voke in

        _a ft erCam
            r
        aFadeTo_f
            o
        a_ f
        oat.GetInvo
            c
        ationList(
            )
            )


        {
            tr y
            {
                _after
                    a
                eraFade
                    T
                o_floa
                    t_ floa
                    .nvoke(@
                p
                    aram
                s) ;
            }

            c
                atch(
                    E
                        cept

            i
                on e


            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }

    internal static void HookCameraFadeTo_Hashtable()
    {
        i f(!Hooke d
        t
            .Contains
            (
                "CameraFadeTo_Hashtable"))
        {
            Ho ok ed Li
            t.Ad d("Cam
            ra
                eTo_Hashta le ");
            On.iTw en.Cam raF
            a
                deTo_Has ht able += C
            am er ad eT o_Ha sh table;
        }
    }
internal static event Delegates.CameraFadeTo_Hashtable_BeforeArgs _beforeCameraFadeTo_Hashtable;
internal static event Delegates.CameraFadeTo_Hashtable_AfterArgs _afterCameraFadeTo_Hashtable;

private static void CameraFadeTo_Hashtable(On.iTween.orig_CameraFadeTo_Hashtable orig,
    System.Collections.Hashtable args)
{
    Delegates.Par
        as _C am eraFadeT
    _Hasht
        ble @
    arams = n

    e
        w()
    {
        args = args
    }

    ;
    if (_before
    ameraFadeTo_Hashtable != null
        )
    {
        foreac
            (Dele
        ates.
            ameraFade
            T
        o_Hashtable_BeforeArgs toInvoke
        n _beforeCameraFadeTo_Hashta
        bl e.GetIn
            ocatio
        List
            ))
        {
            try
            {
                _beforeCame
                    r
                aF
                    a
                deTo_H
                    a
                shtable?.Invoke(@params);
            }

            catc
                h
                (Excep
                    t
                    ion e)
            {
                H
                    K
                MirrorMod
                    DoLo
                gE rr or(e);
            }
        }
    }
    args = @params.args;
    orig(
        rgs);
    i
        _af
    t
        eC am eraF
    d
        To_Ha s
        ht ab
    e
        != null)
    {
        foreach (Delegate
                     .C
                     mera
        Fa de To_Hash
            a
        ble_After
            A
        rgs toInvoke in _afterCameraFadeT
            _Hashtab
        e.etInvocationList())
        {
            try
            {
                _
                    a
                fterCameraFadeTo_
                    H
                a
                    sh ta ble.In voke(@params);
            }
            catch (Excep
                   t

            i
                on e)


            {
                HKMir
                    r
                or Mo d.DoL
                    g
                Error(e);
            }
        }
    }

    internal static void HookValueTo()
    {
        if (Hooke dList.
            C
            o
        n
        ta is (V al ueTo
            )

            {
                Hook
                e
                dLis
                t. Add(
                "V        lue
                T
                o"        )
                iTwe en .ValueTo = alueTo;

        }
    }
internal static event Delegates.ValueTo_BeforeArgs _beforeValueTo;
internal static event Delegates.ValueTo_AfterArgs _afterValueTo;

private static void ValueTo(On.iTween.orig_ValueTo orig, UnityEngine.GameObject target,
    System.Collections.Hashtable args)
{
    eg at s.Params_V
        lueTo
    para
        s = new()

        {
            t ar ge
            =
            target
            ,
            ar gs = a rgs
        }
        ;

    if (_bef r
        lu eTo ! = null)

    {
        fo
            re ach(De le g
        ats ValueT
        o
            _Before
        rg
        toInvo
        k in _ beforeVa
        ueTo.G
            tInvo
        ationList
        (
        ))
        {
            try
            {
                _before
                alueTo?.Invoke
                    (@ params);
            }

            catc
                (Exc
            ption e)


            {
                HKMirrorMod.DoL
                gError(e);
            }
        }
    }
    targe
        = @pa
    ams.arget;

    a
    rg
        s
            = @pa
    r
    ams.args;

    or
        g(ta
            r

    et, args);

    i
        f(_afterV
            lueTo

    !
        null)


    {
        foreach (
            D
                elegates.
        alue
            To _A fterArgs
        t
        oInvoke in _af
            erValue
        o
            Get
        I
            no ca tionLi
        t
            ))
        {
            tr y
            {
                _a
                    t
                rValu e
                To.I
                    v
                oke(@params);


                c
                    tch
                    (E xc eption
                    )

                {
                    HKMir
                        r
                    orMod.DoLogError(e
                        ;
                }
            }
        }
    }

    internal static void HookFadeFrom_GameObject_float_float()
    {
        i f(!Ho ok edList.C ntains
        (
            "
        FadeFro m
        _GameOb
            j
        ec _f loat_ o
        at")        
        {
            Ho
                k
            e
                t
            Add("FadeFr
            o
                m_Ga eObjec
                t
            _
                f
            lo a_ fl oa t");
            O i
            ween Fad
            eF om_Ga
            mO bj ect _f o
                t_fl oa t +
                =
                Fad
            eF rom G
                a
            meO bj ct
                _
            loat
                _
            fo at;
        }
    }
internal static event Delegates.FadeFrom_GameObject_float_float_BeforeArgs
    _beforeFadeFrom_GameObject_float_float;
internal static event Delegates.FadeFrom_GameObject_float_float_AfterArgs _afterFadeFrom_GameObject_float_float;

private static void FadeFrom_GameObject_float_float(On.iTween.orig_FadeFrom_GameObject_float_float orig,
    UnityEngine.GameObject target, float alpha, float time)
{
    D elegates.Par am s_ Fa deFrom_Gam
        eObj ec
        t
    _f oat_
    f
    loat @params = new()
    {
        ta get = t
        rg et, al pha = al ph a
        , time = ime
    };
    if (_
    b
        eF ad eFrom_Ga
    eObjec
        _floa
    _float !=
        null)
    {
        foreach (Delegates.FadeFrom_GameOb
                     ect_float_float_BeforeArgs toInvoke in
        _ beforeFa
        eFrom_
            ameOb
        ect_float
            _
        float.GetInvocationList())
        {
            try
            {
                _befor
                FadeFrom_GameObject_float_float?.Invo
                ke(@param
                );
            }

            c
                tch
            Exception e)
            {
                HKMirrorMod.DoL
                    o
                gE
                    r
                ror(e)
                    ;
            }
        }
    }
    target = @params.target;
    alph
        = @
    p
    rams.alpha;


    time = @pa
    ams.ti
        m
        ;
    ori
        (targ
    e
        , alp
        a, t
    im e) ;
    if (_af
    t
    erFadeFrom_GameObject_float_float != n
    ll)
    {
        f
            r
        ach
            (e le gates.a
        eFrom_G a
        eObje
            t
        float_ f
        oat_
            f
        erArg s
        t oI
        v
        oke in _afterFadeFrom_GameObject_float
            fl
        at.G
            et In vocatio
        L
        ist())
        {
            t
            ry
            {
                _afterFadeFrom_GameObject_float_float
                Invoke(@
                ar
                    ms);
            }
            catch (Exception e)
            {
                HKMirror
                    M
                od.DoLogError(e);
            }
        }
    }
}

internal static void HookFadeFrom_GameObject_Hashtable()
{
    i
    f
        (!Hoo ke
    d
    List.Co t
    ai ns("        ade
    m_GameObj
        c
    tH a
    htable"))
    {
        Hook ed Lis t.Add
        (
            "
        Fa dF ro m_ Ga meObje
        t
            Hashtab
        l
            e");
        O
        n.iTwee F
        de Fr m_Ga
            m
        eObje
            cH asht
            b
        e += Fad
        e
            Fro m_ am eObj c
        t_Has ht b
            e;
    }
internal static event Delegates.FadeFrom_GameObject_Hashtable_BeforeArgs _beforeFadeFrom_GameObject_Hashtable;
internal static event Delegates.FadeFrom_GameObject_Hashtable_AfterArgs _afterFadeFrom_GameObject_Hashtable;

private static void FadeFrom_GameObject_Hashtable(On.iTween.orig_FadeFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Pa
        r
    am s_ Fa d
    o
        m
    _GameO bj ect_
        H
    ashta ble
        @
        params = new()
        {
            ta rget = targ
            et
            , g s = args
        }
        ;

    if (_ be foreFadeFrom_GameO je t_Hashta bl e
        != nu l
        l
        )
    {
        fo
            r
        ea h(Delegat es .
        FadeF rom_GameO je t
        Ha
            htab le _BeforeArgs toI nvoke in _ e
        fr ea de From_Gam
        Object
            Hasht
        ble.GetIn
            v
        ocationList())
        {
            try
            {
                _beforeFadeFrom_G
                meObject_Hashtable?.Invoke(@params);
            }
            catch (
                xcepti
                n

            e)
            {
                HKMirro
                    r
                Mod.DoLogError(e);
            }
        }
    }
    target = @para
    s.target;
    args = @params.args;
    orig
    (t arget,
        rgs);

    f(_
    fterFadeFrom_GameObject_Hasht
        a
    bl
    e
        != nu
    l
        l)
    {
        foreach (Delegates.FadeFrom_G
                     meOb
        j
            ct_Hashtabl
        e
            _AfterArgs
        toInvo
        k
            in _a
            f
        terFadeFrom
            _
        GameObjec
            _Has
        ht ab le.GetInv
            o
        cationList())
        {
            try
            {
                _afterFadeFrom
                    GameObj
                c
                    _Ha
                s
                    ha bl e.Invo
                    e
                @params )
            }

            c
                t
            h(Ex c
            ep ti
            n
                e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }

    internal static void HookFadeTo_GameObject_float_float()
    {
        i(!ookedList.Contain
            ("FadeTo
        Ga
            eObj ect_float_float")        
        {
            Hook dList.dd(
                "
            FadeTo _G ameObject_f
                l
            o
                at _f loat ")        ;
            On.iTween.FadeTo GameObject_float_f
            l
                o
            at +=
                F
            adeTo_G
                a
            mO bj ect_f
            oa _float;
        }
internal static event Delegates.FadeTo_GameObject_float_float_BeforeArgs _beforeFadeTo_GameObject_float_float;
internal static event Delegates.FadeTo_GameObject_float_float_AfterArgs _afterFadeTo_GameObject_float_float;

private static void FadeTo_GameObject_float_float(On.iTween.orig_FadeTo_GameObject_float_float orig,
    UnityEngine.GameObject target, float alpha, float time)

{
    De eg t
    s
        .Par ams_F de o
    _a m
    Object_floa
        t
    _float @pa
    r
        a
    m
        s =
            ()
    {
        target
            targe, a
        pha = alpha
            , time = time
    }
    ;
    if (
        _
    be fo re
        a
    d
        eTo_GameOb
    j
        ect_floa _
    float != nul )
    {
        foreach (Delega
                     tes. Fa deTo_GameO
        b
            jec
        t_ fl oat_float_BeforeArgs t oI nvoke in
        _be fo
        r
            eFadeT
        o
        _GameObject_float_float.Ge tI nv oc
        tin Li st())
        {
            tr y
            {
                _before adeTo_Gam
                e
                    _f loat_flo
                t?.Inv
                ke(@p
                rams);
            }

            c
                atch(Exception e)
            {
                HKMirrorMod.DoLogE
                ror(e);
            }
        }
    }
    target = @params.targe
    t;
    alpha =
        @param
            .alph
        ;
    time =
        @
        params.time;
    orig(target, alpha, time);
    if (_afterFadeTo_GameObject_float_f
    lo at != n
    ll)
    {
        orea
            h(Delegates.FadeTo_GameObjec
                t

        _f
            l
        oat_fl
            o
        at_AfterArgs toInvoke in _afterFad
            To_G
        a
            eObject_flo
        a
        t_float.Ge
            Invoca
        t
        onLis
            ())
        {
            ry
            {
                afte
                    rF ad eTo_GameO
                b
                ject_float_float.Invoke(@params);
            }

            atch(E
            c
                pti
            o
                ne )
            {
                HKM
                    r
                orMod.D o
                ogErr
                    r
                e);
            }
        }
    }
}

internal static void HookFadeTo_GameObject_Hashtable()
{
    if (!Hook edLis
        .C
        ntai
    ns("        FadeTo_
    a
        meObjec t_H
        a
    shtable"))
    {
        Ho oked List.Add("FadeTo_GameObj
        ct_Hasht
            ble );
        On.iT ween.Fa de To_GameObject_Hashtable
            += FadeTo GameObj
            e
        c
            t_ Ha shta bl e;
    }
}
internal static event Delegates.FadeTo_GameObject_Hashtable_BeforeArgs _beforeFadeTo_GameObject_Hashtable;
internal static event Delegates.FadeTo_GameObject_Hashtable_AfterArgs _afterFadeTo_GameObject_Hashtable;

private static void FadeTo_GameObject_Hashtable(On.iTween.orig_FadeTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    D elegate
    s
        .Pa ams_Fad eT _GameO j
        e
    ct _s tab l param s = new()
    {
        t ar get = target
        , a
        r
        gs = a
        r
        gs
    };

    i
        f
        (_e oreF

    d
        eT _G meOb je ct
    _a s
    tabl ! null
        )

    {
        oreach(D l
        e
            ga te s.ad eT o_GameOb
            ect_Ha
        htab
        e_BeforeArgs toInvoke in _befor
            e
        Fa de To
            G
        a
            meObject_H s
            ht ble.G et
        I
        nvocation is t())
        {
            try
            {
                _before
                    Fade To _GameObjec
                t
                    _Ha
                s
                htable?.Invoke(@ arams);
            }

            cat
                ch(Ex
                    c
                    eption
                    e)
            {
                HKMirrorMod.DoLogErro
                    );
            }
        }
    }
    target = @p ar ams.target;

    r gs = @params
    args;

    rig(t
    rget, arg
        s
        );
    if (_afterFadeTo_GameObject_Hashtab
    e != null)
    {
        foreach (Delegates.Fa
                     de To_GameO
            ject_H
        shtab
            e_AfterAr
        g
        s toInvoke in _afterFadeTo_GameObject
        Hashtable.GetInvocationList())
        {
            tr y
            {
                _af
                    erFade
                o_Ga
                eObject_Hashtable.Invoke(@p
                a
                    ra
                m
                    s);
            }

            c
                atch(Exception e)
            {
                HKMirrorMo
                    .DoL
                    o
                Error(e);
            }
        }
    }
}

internal static void HookColorFrom_GameObject_Color_float()
{
    if (!HookedList.Contai ns("ColorFrom_
    ameObje
        t
    Col
        o
    rf lo at"))


    ookedLi s
        .A dd("
    o
        or Fr om_ G
        am eO bj c
        t_Color_f oa t");
    On.iTween.Colo From_
    am
        Objec tC ol or_floa
        += C ol orFro
    m
    _GameObject_Co or_floa;
}

}

internal static event Delegates.ColorFrom_GameObject_Color_float_BeforeArgs
    _beforeColorFrom_GameObject_Color_float;

internal static event Delegates.ColorFrom_GameObject_Color_float_AfterArgs
    _afterColorFrom_GameObject_Color_float;

private static void ColorFrom_GameObject_Color_float(On.iTween.orig_ColorFrom_GameObject_Color_float orig,
    UnityEngine.GameObject target, UnityEngine.Color color, float time)
{
    De
    egates.Params_ColorFrom_ ameObject
    _
        Color_float @para
    m
        s
            = e w()
    {
        tar et = ta get
            , color = color
            , t
        i
            me = t
        i
            me
    }
    ;
    if (_
    b
        ef oe Co lorF
        o
    m_GameObj
        c
    tC o
    or_float != n
    ull)
    {
        forea
            c
        h
            (D eg at es.C olorFrom
        GameOb
            ect_
        olor_float_BeforeArgs toInvoke in _b
            e
        fo rC ol
            r
        F
            rom_GameOb
        j
            ect_Colo
        r
        _float.GetIn ocationL st ))
        {
            t ry
            {
                _
                    bef
                orFrom_Ga e
                Obj
                    e
                ct Co or_float?.Invoke(@ params);
            }

            ca
                tch(E
                    x
                    ceptio
                    n
                    e)
            {
                HKMi ror od.DoLogError(e);
            }

            target = @p arams.target;
            color = @
            pr am s.color;
            t
                me = @
            arams
                time;
            ori
            g
                (target, color, time);
            if (_afterColorFrom_
            ameObject_Color_float != null)
            {
                foreac
                    h(Delegat
                        s.

                Colo
                    From_
                ameObject
                    _
                Color_float_AfterArgs toInvoke in _afterCo
                orFrom_GameObject_Color_float.GetInvoc
                    at ionList
                    ))
                {
                    t
                    y
                    {
                        afterColorFrom_GameObject_Color_
                            f
                        lo
                            a
                        t.Invo
                            k
                        e(@params);
                    }
                    catch (Exception e)
                    {
                        KMir
                            r
                        rMod.DoLogE
                            r
                        ror(e);
                    }
                }
            }

            internal static void HookColorFrom_GameObject_Hashtable()
            {
                if (!HookedList.Contai ns("ColorFrom
                GameOb je ct H
                sht
                    a
                be ")        )
                {
                    Ho
                        k
                    dList.A d
                    ("Col
                    r
                        rom_Ga m
                        Ob je ct
                    H
                        sh ta ble "
                        );
                    O
                        .
                        iT we en.ColorFrom Ga meObject_H sh tabl += Colo
                    Fr
                        m_ Gam
                        eO bj ect_Ha sh t
                        e
                        ;
                }
            }

internal static event Delegates.ColorFrom_GameObject_Hashtable_BeforeArgs _beforeColorFrom_GameObject_Hashtable;
internal static event Delegates.ColorFrom_GameObject_Hashtable_AfterArgs _afterColorFrom_GameObject_Hashtable;

private static void ColorFrom_GameObject_Hashtable(On.iTween.orig_ColorFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Pa
        am
    _Col
        or Fr om_Game O
        j
    ect_Hash a
    b
        le @p rams = new()
    {
        t ar get = target
        , args =
            args
    };

    f
        _beforeCo orFrom_GameObject_Hashtable !
        =
        null)
    {
        foreach (D l
        eg at es Co lr rom_GameObject_Hashtable_BeforeAr gs to In v
        o
        ke in _ b
        e
            foreCol
        o
            rF ro m_Gam
        O
            bject_Has
        t
            al e
            tInvo ca ionL
        i
        st())
        {
            t ry

            {
                _
                    be f
                    ol or From_Gam
                Object
                    Hash
                able?.Invoke(@params);
            }
            catch (Ex
            c
                ep ti on
            e
                )

            {
                HKMirr
                    o
                rMod.DoL
                    o
                gError(e);
            }
        }
        target = @par am s.
            targ et;
        a gs = @pa
        r
            ams a
            rgs;
        ri(target, args);
        f _afterC
        ol o
        rF ro _G ameObj
        e
        ct_Hashtable != null)
        {
            foreac
            (
                elega es.olorFr om_GameObjectH as ha bl e_ AfterArg
            toInv
            ke in
            _afterCol
                o
            rFrom_GameObject_Hashtable.GetInvocationL
            st())
            {
                try
                {
                    _afterColorFrom_GameObj
                        ec t_Hashta

                    le.Inv
                        ke(@p
                            rams);
                }

                c
                    atch(Exception e)
                {
                    HKMirrorMod.DoLogE
                    ror(e);
                }
            }
        }
    }

    internal static void HookColorTo_GameObject_Color_float()
    {
        if (!HookedL
        i
        st
            .
            Contai
            n
        s("ColorTo_GameObject_Color_float")

        {
            H
                o
            kedList.Add
            (
                "ColorTo_G
            meObje
                c
            _Color
                _
            float");
            On
                .
                iTween.Co
                orTo
            _G am eObject_C
                o
            lor flo t += ColorTo_GameO je ct_Color_fl oa t;
        }
    }

internal static event Delegates.ColorTo_GameObject_Color_float_BeforeArgs _beforeColorTo_GameObject_Color_float;
internal static event Delegates.ColorTo_GameObject_Color_float_AfterArgs _afterColorTo_GameObject_Color_float;

private static void ColorTo_GameObject_Color_float(On.iTween.orig_ColorTo_GameObject_Color_float orig,
    UnityEngine.GameObject target, UnityEngine.Color color, float time)
{
    De
        le gates.
        Pa rams
    C
        lorT o_ Gam
    e
        Ob jec
        t_ Colo
        r
    _float
        para
    m
        s =
            e
    w()
    {
        t arge t = target, c ol or = color,
            ti
        e =
            ti me
    }
    ;
    if be oreColor
    T
    o_GameObject_Color_float != null)
    {
        fore h(Del ga
        es.olorTo_Gam eO bject_Color_float_BeforeAr
            g
        s toInvoke in _ ef
        o
            r
        eC ol orTo _G ameObject_Color_float.Ge tInvocation is
            t
            ())

        t
            r
        y
        {
            _bef
                o
            re Cl or To_G
            m
                eObject_C
            l
                o_ f
            oat?.Invoke
            (
                @params;
        }


        c
            a

        tc h(E xc ep tion e)
        {
            HKMi
                rorM
            d.DoLogError(e);
        }
    }
}

target = @p
a
    ra ms.t
    r
g
    et;
colo r = @ pa rams.co lo r
    ;

time = @params.time;
orig(targe
t
ol or, ime);

i
    f
    (_a ft

erColorTo_G meObjec t_ olor_fl oa t !=
    null )
{
    f oreach
        (De egate

    s.ColorTo_Game Ob ject_Colo
        _f
    oat_AfterArgs toInvoke in _aft
        e
    lo rT o_GameOb
        ect_Co
    or_fl
    at.GetInv
        o
    cationList())
    {
        try
        {
            _afterColorTo_GameO
            ject_Color_float.Invoke(@params);
        }

        c
            at ch(Exce
        tion e

        {
            H
            MirrorMod
                .DoLogError(e);
        }
    }
}
}

internal static void HookColorTo_GameObject_Hashtable()
{
    if (!
        ookedL
    st.C
    ntains("ColorTo_GameObject_Has
    h
        ta
    b
        le"))

    {
        HookedList.Add("ColorTo_GameObject
        Hash
            t
        ble");
        On.i
            T
        ween.Color
            o_Game
        O
            ject_Hashta
        b
        le +=
            Color
        T
            _Game
        bjec
            t_ Ha sht able;
    }
}

internal static event Delegates.ColorTo_GameObject_Hashtable_BeforeArgs _beforeColorTo_GameObject_Hashtable;
internal static event Delegates.ColorTo_GameObject_Hashtable_AfterArgs _afterColorTo_GameObject_Hashtable;

private static void ColorTo_GameObject_Hashtable(On.iTween.orig_ColorTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    De
        l
    eg as .P ar ams
        C
    olorTo_Ga
        e
    O
        c
    _Hash able p
    a
        rams = new
        (
        )


        {
            t ar ge t = ta
            g
            t
            , a rgs
            =
            a gs
        };

    if (_be
    o
        eColorT
    o
        _GameO be ct_H
    s
        table !
        =
    nul
        l)
    {
        f
            o
        reach(e lega
        t
        s.Co
            l
        or To _G m
        eObject_Hashtable_BeforeArgs toInvok
        i _bef
        or eC olorTo_
            e
        Object_Ha
            s
        htable.GetInvocationList ))

        try
        {
            _befor
                ColorTo_
            am
                Objec tH ashtable?.Inv ke(@par ms);
        }

        ca
            t
        ch(Exc ep tion e)
        {
            H
                KM ir rorM od.DoLogError(e);
        }
    }

    target = @param
    s
        .targe
        t
        ;
    args
        =
        @ pa ra ms.a
    g
        s;

    or g(ta
        g

    a
        gs;
    if (_aft er ColorTo_Ga
    m
        e
    O
        bj ec t_ Ha sh table !=
        null)


    for
        ach(Delegates.ColorTo_GameObjec
    t
    _H as ht
    b
        le AfterAr s
    t
        oI voke i
    n
        _afterColorTo_GameObjec t_ Has ht ab
    le.e tn vocationLi
        s
    t()
        )

    {
        try
        {
            _afterColor o_Gam eO jec
            t_Ha sh
            t
                ab le.Inv
                o
            ke(@pa ams);
        }

        c tch(Excepti on
        e

        {
            HKMirr or od.DoL gErro r(e);
        }
    }
}

}

internal static void HookAudioFrom_GameObject_float_float_float()
{
    if (!Hoo
    edList.Contains("AudioFrom_GameObje
    ct _float_f
    oat_fl
        at"))
    {
        HookedL
            i
        st.Add("AudioFrom_GameObject_float_flo
        t_float");
        On.iTween.AudioFrom_Gam
            eO bject_f
            oat_fl
        at_f
        oat += AudioFrom_GameObject_
        f
            lo
        a
            t_floa
        t
            _float;
    }
}

internal static event Delegates.AudioFrom_GameObject_float_float_float_BeforeArgs
    _beforeAudioFrom_GameObject_float_float_float;

internal static event Delegates.AudioFrom_GameObject_float_float_float_AfterArgs
    _afterAudioFrom_GameObject_float_float_float;

private static void AudioFrom_GameObject_float_float_float(
    On.iTween.orig_AudioFrom_GameObject_float_float_float orig, UnityEngine.GameObject target, float volume,
    float pitch, float time)
{
    Dele
        g
    a
    tes.Pa
        r
    ams_Aud
        i
    oF ro m_G am eO
        j
    ect_float
        f
    la t
    oa t @params
        =
        new()
        {
            t
            a
            r
            ge t = ta rget
            ,
            v
            lume = vo l
            ume
            , pi tc h = i tc
            , time
                = im e
        };
    if
        (_b fr eA di
        o
    Fr om
    G
        ameObject_float_f lo at _f loat != null)
    {
        for ach
        (
            gate.Au
        i
            oFrom_Gam
        e
            Object_float_float _f loat_Be or eArgs toInvoe i n _befo
        eA ud oFrom_GameObject_float_float_floa t.G
        etInvocationList() )


        {
            ty
            {
                _be fo reAudioFrom_GameObject_f loat_fl oa t_fl
                o
                at?.In vo
                    k
                e(@para
                m
                    s) ;
            }

            cat
                h
                (Excepti
                    n


            HKMirrorMo
            d
                .DoLogErro
            r
            (
                e
            );
        }
    }

    ta rget = @
    arams.arge
        ;
    volume = @params.volume;
    pitch = @params
        .pi tc h;
    t
    i
        me = @param
    s
        .time;
    o
        r
    ig(target, volume, p itch, time)
    if (_a te
        rAud oF rom_Game Ob je
    c
        t_f
    l
    oat_float_float != null)
    {
        forea h(Dele
            gate

        s.
            A
            udioFr
        o
            m_GameObject_f loat_float float_A terAr s t
        In
        oke in _afterAudioFrom _G ame Ob ject_fl oa t_floa
            tf lo at.GetInvo
            ationL
        st())
        {
            try
            {
                _
                    a
                fterAudioFrom_GameObject_float_float_float.Invoke
                    @params);
            }
            catch (Exception e)
            {
                HKMirrorMo
                d.DoLogErr
                r(e);
            }
        }
    }

    internal static void HookAudioFrom_GameObject_Hashtable()
    {
        if (!HookedList.Contains("AudioFrom_GameOb
        je ct_Hash
        able")

        {
            H
            okedList.Add("AudioFrom_GameObject_Has
            h
                ta
            b
                le");

            O
            n.iTween.AudioFrom_GameObject_Hashtable +=
                udio
            F
                om_GameObje
            c
                t_Hashtabl
                ;
        }
    }

internal static event Delegates.AudioFrom_GameObject_Hashtable_BeforeArgs _beforeAudioFrom_GameObject_Hashtable;
internal static event Delegates.AudioFrom_GameObject_Hashtable_AfterArgs _afterAudioFrom_GameObject_Hashtable;

private static void AudioFrom_GameObject_Hashtable(On.iTween.orig_AudioFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delega
        te s.Params_AudioFrom
        _
    G
        aO bj ect_ Ha shtable @params = new()
        {
            target = target, ar
            g
            s
            = ar gs
        }
        ;
    if (_b e
        f
    or eA udio ro _
        GameObje ts able != nul l)

    {
        foreach (D el eg a
        te s.Au di oFrom_
            a
        eO ject_
        Ha htabl _B eforeA
        g
            toInvo
        k
        e in _
            be foreA
            d
        oFrom_Ga me Objec
        t_ as ht ab
            e
        GetInvo ca t
        ionL
            is t( ))
        {
            try
            {
                _
                    eforeA
                u
                    ioFro
                m
                    Game
                O
                    bj ec
                    _
                Hashta ble?.Invoke(@params);
            }

            ca tc h(Exception e)

            {
                HKMi
                    rr or Mod.DoL
                    g
                Error(e);
            }
        }
    }
    targe t = @params.target;
    args = @params.args;
    o
        ig tar et,
        ar
    s);
    if (_afterAudioFrom_GameObject_Has htable
        !
        = null)

    foreac(
        D
    e
        le at es.A ud io Fr om_GameObject_Hashtable_AfterArgs toInvoke
        in _aft rAudioF
    r
        om _G ameOb
    e
        ct_Hashta
    l
        eG e
        InvocationL i
        s
    t())
    {
        tr

        {
            _
                a
            Au di oF rom_Game
            bject_
                asht
            ble.Invoke(@params);
        }
        catch (Exce
        p
            ti on e


        {
            HKMirror
                M
            od.DoLog
                E
            rror(e);
        }
    }
}
}

internal static void HookAudioTo_GameObject_float_float_float()
{
    i f(!H oo
    kedi st.
        C
        ontain
    s
        ("AudioTo_GameObject_float_flo
    t_
        at"))        
    {
        HookedList.A dd("AudioTo_G        mO        bj        ec        t_float_
        loat_f
            oat")

        On.iTwee
        n
                .AudioTo_GameObject_float_float_float +=
            udioTo_GameObject_float_float_float;
    }
}

internal static event Delegates.AudioTo_GameObject_float_float_float_BeforeArgs
    _beforeAudioTo_GameObject_float_float_float;

internal static event Delegates.AudioTo_GameObject_float_float_float_AfterArgs
    _afterAudioTo_GameObject_float_float_float;

private static void AudioTo_GameObject_float_float_float(
    On.iTween.orig_AudioTo_GameObject_float_float_float orig, UnityEngine.GameObject target, float volume,
    float pitch, float time)
{
    De
        lg at es.Para
        s
    _AudioT o_G
    a
        meObject_fl at float_flo at @params = new()
    {
        arget = t a
        ge

        , volume v lume
        , pitch = p itch
        , tim = time
    };
    if (_bef ore
        A
    u
        di o_ Game Oj ec _float_ fl at_flo at != nu ll )
    {
        f re ach(Dele
        g
            a
        tes.Au
            d
        ioTo_Ga
            m
        eO bj ect_f
            o
        at_float_
            l
        o
            Be oreAr gs toIn
            v
        oke n _befo
            r
        e
            A
        ui oT o_ Ga meObje
            t
        float_f
            l
        oat_fl
            oa t.Ge
            I
        vocatio
            n
        List
            () )

        t
            r
        y
        {
            _b
                ef reA d
            i
                oT o_
                a
            meObject_float_float_float?.Invoke(@a ra m
            );
        }

        c at ch(Exc
        pt io n e)
        {
            H
                K
            MirrorMod.DoLogError(e);
        }
    }
}

target =
    params.t
et
    volume = @pa ra ms.volume;
pi tch = @par ms.pit h;
time = @pa ra m
s
    .
    ti me;
oi ga rg e volume, pitch, ime);
i(_af erA
u
    dioTo_
G
    ameObje
c
    t_ fl oat_f
o
    at_fl oa t !=
    n


oreach(D el eg
a
tes.Au di oTo_
    G
a
    m
eO bj ec t_ fl oat_floa
_float
    Afte
Args toInvoke in _afterAudioTo_GameObjec
    t
_f lo at
    f
l
    oat_ float.G
et In vocatio nL i
st())
{
    try
    {
        _afterAudioTo_Ga eOb ec
            t_fl oa t_float_fl
        o
        at.I
        nvoke(@params);
    }
    catch (Ex eption)

    {
        ir
            r
        orMod.Do L
        ogError(e);
    }
}
}
}

internal static void HookAudioTo_GameObject_Hashtable()
{
    (!Ho okedList
        Contai
    s("Au
    ioTo_Game
        O
    bject_Hashtable"))
    {
        HookedList.Add("AudioTo_Ga
        eObject_Hashtable");
        On.iTween.AudioTo_Game
            Ob ject_Has
            table
                = Aud
        oTo_GameO
        b
            ject_Hashtable;
    }
}

internal static event Delegates.AudioTo_GameObject_Hashtable_BeforeArgs _beforeAudioTo_GameObject_Hashtable;
internal static event Delegates.AudioTo_GameObject_Hashtable_AfterArgs _afterAudioTo_GameObject_Hashtable;

private static void AudioTo_GameObject_Hashtable(On.iTween.orig_AudioTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Del e
    ates
        P
    rams_ A
    ud io
    o
        _GameObj ec t_ Hashtable @params = new()
    {
        targe
            =
            targ
        et
        , args =
            a
        rgs
    };
    if (_
    b
        efo re AudioTo_ Ga meObject_H sh table != n ll ){
        foreach (
            elega te s.A
            di
        To_Gam eO bj ec t_Hashtable_Befo eA gs toInv ok e in _b efo
        r
            eAu io o_GameOb je ct_Ha s
            h
        ta bl e.Ge tI nv oca tionList())
        {
            tr
            {
                _beforeAudioTo_GameObject
                    _
                H
                    ashtab
                l
                e?.Inv k
                    e(@a rams)
            }

            ca ch(E
                c
                et i
                n e)
            {
                HKMir
                    r
                orMod.DoLo
                    g
                E
                    r
                ro r(e);
            }
        }
    }

    a
        t = @p
    a
        rm s.get;
    a
        g
            = @par
    a
    ms.arg
        s;
    orig
    t
        rget, a
    r
        gs);

    if (_a
    t
        rAudioT o_ Ga meOb
        je ct_H
        a
    shtabl
    e
        != nul
    l

    {
        fo
            r
        ach
        (
            De le
        a
        tes.Audi oT o_GameO bj ect_Hash ta ble_AfterA gs toInvok
            in _A dioTo_
        a
            meObje ct _Ha
        s
        htable.Ge tI nv oc ationList())
        {
            try

            _after udioT _Gam
                Object_H
            sh
            able.Invoke(@params);
        }

        ca tch(Ex ep ti on e)
        {
            H
                KM irrorMod.DoLogE rr
            o
            r
                (e);
        }
    }
}
}

internal static void HookStab_GameObject_AudioClip_float()
{
    i f(!Hoo
    e
    dList.Con
        a
    i
    "
    b_G am eObje
        c
    t_Au dioClip
    _
        f
    l
        oa t"        ))        
    {
        H ookedLis
            .Add("
        tab_
            ameObject_AudioClip_float");
        On.
            i
            Tw en.S
            a
        b
            _GameObject AudioCl p
        _
        floa += Stab_G am eObject_AudioCl
        ip_f lo at;
    }
}

internal static event Delegates.Stab_GameObject_AudioClip_float_BeforeArgs
    _beforeStab_GameObject_AudioClip_float;

internal static event Delegates.Stab_GameObject_AudioClip_float_AfterArgs _afterStab_GameObject_AudioClip_float;

private static void Stab_GameObject_AudioClip_float(On.iTween.orig_Stab_GameObject_AudioClip_float orig,
    UnityEngine.GameObject target, UnityEngine.AudioClip audioclip, float delay)
{
    Delegates.Params_
        tab_
    G
        meObject_Au
    d
        ioClip_flo
    t @par
    a
        s = ne
    w
        ()
    {
        targe
            t
                = target,
            au
        di oc lip = audio li
            , dela y = d la y
    }
    ;
    if (_beforeStab_
    ameObje
        t
    Aud
        i
    ol ip _float = ull)
    {
        f o
        each
        (D le gate s
            .S ta
        _
            Ga me Object_AudioClip_float_BeforeArgs
        to
        nvok
        e in _befor
            St b_GameOb
            j
        ec _Au ioClip_float.GetInvocationList())


        try
        {
            _
                ef
            reStab _G ameObject_AudioClip_floa t?.Invo
            k
            e(@params);
        }

        cat
            c
        h
            (Ex cept io n e)
        {
            HKMirrorMod.DoLogE rr or(e);
        }
    }
}


t
    arget =
        @params
            .et;
aud
    o
cl p = @p r
    m
sa u
    ioclip;
delay
    = @pa ra ms.d ela
    y
    ;


or ig(t ag
t, a
    d
ocl ip, de
ly );

if (af r
    tab_G am eO
b
    ject _
    Au dioCl p_ loat
    = nu ll
    )


fo
    e
ach(D legates.Stab_Gam eObject _A udioCli p_ lo
t_Af t
rg s t oI vok in _aft rS tab
    _
GameObject_AudioClip_float.GetInvocati
nList())
t
y
{
    _afterStab_ am eObject_Audi oC lip_fl
        o
    at.Invoke(@params
        )
        ;
}

c atch(Exception e)
{
    HK irrorMod.oLo Erro
    r
        (e);
}


}
}
}

internal static void HookStab_GameObject_Hashtable()
{
    i f

    (
        !H oo ke dL is t.Contai
        s("Sta
    _Gam
        Object_Hashtable"))
    {
        HookedList.Ad
        d
            ("        Sa        b_
        a
            m
        eObj ct _Hash
            t
        able );
        n.T ween.Stab_G am eObject_Hash ta bl e +=
            Stab _G ameObject_ a
            sht
        a
            bl;
    }
}

internal static event Delegates.Stab_GameObject_Hashtable_BeforeArgs _beforeStab_GameObject_Hashtable;
internal static event Delegates.Stab_GameObject_Hashtable_AfterArgs _afterStab_GameObject_Hashtable;

private static void Stab_GameObject_Hashtable(On.iTween.orig_Stab_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    elegates.Params_Stab_GameObject
        _
    Ha
        s
    htable
        @params = new()
        {
            target = target,
            args

            args
        };
    if
        (_beforeSt
    b_Game
        O
    ject_Hashta
        b
    le != nul
        )
    {
        forea
            c
            (Del
                gates
                .

        S ta b_GameObj
            e
        ct_Hasht ble_B ef reArgs toInv ok e in _befor S
        ab_Ga me b
            e
        t_H as h
        tb le.GetIn vo a
            ionList )

        {
            try
            {
                _
                    e
                oreStab_Ga m
                Objec
                    _
                ashtab l
                e?.I
                v
                oke(@params);
            }
            catch

            Ex epti on e)
            {
                HKM
                    rr
                rMod
                    .D oL ogE ror(e
                ;
            }
        }
    }
    tar g
        et = @p arams.target;
    args = @params.args;
    ori(ta get, a
    gs
        ;
    if (_ fterStab_Gam eO bject_Hashtable !=
        n
    ull)
    {
        foreach (D
                     e
        l
            e
        s.St ab _G meO ject_Hashtable_AfterArgs toInvoke

        i
            n _af te r
            S
        tab_Gam
            e
        Ob je ct_H as ht b
        le.GetInv
            c
        ai o
        List())
        {
            t
                r
            y
            {
                _after
                    S
                t
                    a
                b_ Ga me Oe ct _Hash
                a
                    .Invoke(@r am
                s) ;
            }

            at ch(
                x
                    eptio e)
            {
                HKMirr
                    or Mod.D
                    g
                rror(e)
                    ;
            }
        }
    }
}

internal static void HookLookFrom_GameObject_Vector3_float()
{
    if (!HookedList.Cont
        (
            LookF rm _G ame bj ect
    V
        ector3_fl
    o
        at"))
    {
        HookedList.Add("LookFr        m_GamO        bje
        t_Vecto
        3_
        loat");
        On.iT ween.LookFrom_GameObject_V
        e
            ctor3_float = Loo
        k
            F
        ro m_ Ga eO bj ect_Vector3_float;
    }
}

internal static event Delegates.LookFrom_GameObject_Vector3_float_BeforeArgs
    _beforeLookFrom_GameObject_Vector3_float;

internal static event Delegates.LookFrom_GameObject_Vector3_float_AfterArgs
    _afterLookFrom_GameObject_Vector3_float;

private static void LookFrom_GameObject_Vector3_float(On.iTween.orig_LookFrom_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 looktarget, float time)
{
    Delegates.Params_LookF
        ro m_GameOb
        ect_Ve
    tor3_
        loat @par
    a
        ms = new()
        {
            target = target, loo
            target = looktarget
            , time = ti
            me
        };
    if
    _befor
        Look
    rom_GameObject_Vector3_fl
        o
    at
        != nul
    l
        )
    {
        foreach (Delegates.LookFro
                     _Gam
        e
            bject_Vecto
        r
        3_float_Be
            oreArg
        s
            toInvo
        k
        e in _befor
            e
        LookFrom_
            ameO
        bj et Vector3_
            f
        loat.GetInvocationList())
        {
            tr y
            {
                _b
                    reLookF
                o
                    _Ga
                m
                    eb je ct_Vec
                o
                3_float?.nvok
                rams) ;
            }

            c
                h
                (Exceptio e)
            {
                HK irrorMod.DoL og Er
                    or
                e);
            }
        }
        targe t @
        para s.targ e
            t;
        looktarget = @params.looktarget;
        ti
            e = @par
        ms
            time;
        ori(target, l ok arget, time
            )
            ;
        if (_aft rLookFr
            o
        m
            me Obje ct _V ct r3_float != ull)
        {
            fo each(De l
                e
                g
                at s.Loo
                k
                From_Ga
                m
                eO bj ect_V
                c
                tor3_floa
                _
                At e
                Args toI voke i
                n _afterLo
                o
                k
                F
                rm _G am eO bject _V
                c
                or3_flo
                a
                t.GetI
                nv ocat
                o
                List())


            {
                tr
                y
                {
                    _a
                        f
                    terLoo
                        k
                    ro _Ga eO bj
                    c
                    t_Vector3_float.Invoke(@params)
                }
                c at ch
                (E xc eption
                )

                {
                    HK Mr o
                        r
                    Mod.DoLogError(e);
                }
            }
        }
    }

    internal static void HookLookFrom_GameObject_Hashtable()
    {
        i
        f
            (!Hook dL ist.onta
        i
            n
        s("L        oo        kF        ro        m_        GameObj        ec        t_        Ha        shtable"))
        {
            Hooke Ls t
                .Add("
            L
                ookFrom _
                G
            am eO bject
                Ha ht ble");
            O
                ni T
            een.Loo kFrom
            _
                Gm eO ject
            _
            H
                as ha bl e += L ookFrom_
                ameObj
            ct_H
                shtable;
        }
    }

internal static event Delegates.LookFrom_GameObject_Hashtable_BeforeArgs _beforeLookFrom_GameObject_Hashtable;
internal static event Delegates.LookFrom_GameObject_Hashtable_AfterArgs _afterLookFrom_GameObject_Hashtable;

private static void LookFrom_GameObject_Hashtable(On.iTween.orig_LookFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Deleg
        a
    tes.Params_LookFrom_GameObject_Hashtable @p
        rams = new()
        {
            target = target, args
                = args
        };
    if (_b
    fore
    ookFrom_GameObject_Hashtable != n
    u
        ll
        )

    {
        for
            e
                ach(Delegates.LookFrom_GameObject_Has
                    tabl
        e
            BeforeArgs
        t
        oInvoke in
        _befor
            e
        ookFrom_Gam
            e
        Object_
        ashtable.G
            e
        Invoc
            tion
        Li st())
        {
            try


            {
                _beforeLook From_GameOb ect_Has table? Invo
                e(@pa ra ms
                    ;
            }

            c
                a
            th(Except
            o
                e)
            {
                H
                    Mirr rMod.D
                    L
                gError(e);
            }
        }
    }

    a
        get = @
    pa ra
        target;
    args @params.args;
    orig(target, ar
        ;

    f(_ af te rL ookFrom
    G
        ameObject
    _
    Hashtabl != n ul )
    {
        foreach (D ele
        gates.Lo kFrom_G am Object_ Ha s
        ta
            le_Afte rA rgs toInvo e in _afterLookFrom_ Ga meOb
            j
        ect_Hashtable.Get
            I
        n
            vo ca tion Li st) )
        {
            try

            _ fter Lo okFrom_Game bj ct_
            Hash
                t
            a

            ble.Iv e(@p
                a
                rm s);
        }
        c t
        ch(Excep
        i
            o e

        {
            HKMirro
                r
            Mod.DoLo Err r
            (
                e);
        }
    }
}
}

internal static void HookLookTo_GameObject_Vector3_float()
{
    f
        (!Hoo edL st.C
    on tain
    s
        ("Look
    T
        _GameObjec
    t
        Vecto r3 _f lo
        t
    "))
    {
        HookedL is tA dd("LookTo_GameObject_
        ec
            or3_
        fl oa t");
        On
            i
        Twee n.Lo okTo
        _
            Game Ob ject_Vec to r3_float + L ookTo_Game bj ect_ ecto
        3_float;
    }
}

internal static event Delegates.LookTo_GameObject_Vector3_float_BeforeArgs
    _beforeLookTo_GameObject_Vector3_float;

internal static event Delegates.LookTo_GameObject_Vector3_float_AfterArgs _afterLookTo_GameObject_Vector3_float;

private static void LookTo_GameObject_Vector3_float(On.iTween.orig_LookTo_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 looktarget, float time)
{
    D elegates.Pa ra ms _LookTo_
    am
        Object_Vec or3_flo t @pa ams = n
    e()
    {
        target
            targe, lo
        ktarget =
            looktarget
            , time = time
    }
    ;
    if (_beforeL
    okTo_GameObject_Vector3_float != nul
    l)
    {
        forea
            h(Del
                gates

        LookTo_Ga
            m
        eObject_Vector3_float_BeforeArgs toInvo
        e in _beforeLookTo_GameObject_Vecto
            r3 _float.
            etInvo
            atio
        List())
        {
            try
            {
                _beforeLookTo
                    _
                Ga
                    m
                eObjec
                    t
                _Vector3_float?.Invoke(@params);
            }

            catc
                h
                (Exception
                    e
                )
            {
                HKMir
                orMod.
                    D
                    LogErr
                o
                r(e);
            }
        }
    }


    target =
        para
    ms.t arget;
    l ook
    t
        arget = @params.looktarget;
    time = @
    ara s.ti
        e

    or
        i
    gt ar get, l
    o
        target,
        ime)
    i
        (_af t
    er oo
    T
        o_G meObj ct_Vector3_float != null)
    {
        or
            ac h(De lg at es.L oo kTo
        G
            ameObject
        _
            Vector3_float_AfterArgs oInvo ke in _afterLo kT o_GameO
            jec _Vector 3_ loat.GetInvo ca tionList ))
        {
            try


            {
                _a terLoo To_Ga meOb
                j
                    e
                ct _V ect3 _f loat.Invoke(@params);
            }
            catch (Excep
                   t

            i
                on e)

            {
                HKMirro Mo.D oL og Er
                o
                r(e);
            }
        }
    }

    internal static void HookLookTo_GameObject_Hashtable()
    {
        if (!Hook
        ed List
        C
        ntains(
            "
        Look
            To _Gam
            e
        Object
            _
        ast al "
            )

        {
            HookedList.A d("LookTo_Ga        me        Object_Ha
            ht
                ble"
                );
            O n.iTwee
                .
                LookT o_Gam
            e
            Object_Hashtable += Look o_G meObject_Has
                table;
        }

internal static event Delegates.LookTo_GameObject_Hashtable_BeforeArgs _beforeLookTo_GameObject_Hashtable;
internal static event Delegates.LookTo_GameObject_Hashtable_AfterArgs _afterLookTo_GameObject_Hashtable;

private static void LookTo_GameObject_Hashtable(On.iTween.orig_LookTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Del
        egat es.ar ams_L
    o
        okTo_Ga me Object_Hashtable @params
        =
        ew()
    {
        target = target
        ar
            gs =
                s
    }
    ;
    if (_be
    oreLoo
        To_Ga
    eObject_H
        a
    shtable != null)
    {
        foreach (Delegates.Look
                     o_GameObject_Hashtable_BeforeArgs toIn
        vo ke in _b
            foreLo
        kTo_G
            meObject_
        H
        ashtable.GetInvocationList())
        {
            try
            {
                _be
                oreLookTo_GameObject_Hashtable?.Invok
                e(@params
                    ;
            }

            ca
                ch(
                    xception e)
            {
                HKMirrorMod.DoLo
                    g
                Er
                    r
                or(e);
            }
        }
    }
    target = @params.target;
    args
        @pa
    r
    ms.args;
    or
        i
    g(target,
        rgs);

    i
        (_afterLoo
    k
        To_Game
    bject_Hash
        t
    ble !
    nul
        l)
    {
        foreach
        (
            Delegates.LookT _Ga eObject_Hashtable_Af
            erArgs
        o
            nv ok
            e
        n _ afterL
            o_Gam
        j
            ct_ ashtabl
            .
            InvocationL i
        t())
        {
            try
            {
                _a ft
                r
                    LookTo_Ga eObject_Hashtable.Invoke(@par
                ms
                    ;
            }

            c
                at ch(Exce t
            o
                n e)
            {
                HKM rrorMod.Do Lo gError(e);
            }
        }
    }
}

internal static void HookMoveTo_GameObject_Vector3_float()
{
    i
    f(!
        Ho kedList Conta ns("
    M
        o
    ve To _Gam eO bject_Vector3_ fl oat ")        )
    {
        Hoo ke dList.Add("Mov
        e
            T
        o_Game
            O
        bject_V
            e
        ct or _floa t"        ;

        On.iTwee.Mo vT o
            GameOb ect_V
            ec to 3_float + =
            M
        o
            ve To _G aO bject_
        e
            r3_fl oa
            t
            ;
    }
}

internal static event Delegates.MoveTo_GameObject_Vector3_float_BeforeArgs
    _beforeMoveTo_GameObject_Vector3_float;

internal static event Delegates.MoveTo_GameObject_Vector3_float_AfterArgs _afterMoveTo_GameObject_Vector3_float;

private static void MoveTo_GameObject_Vector3_float(On.iTween.orig_MoveTo_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 position, float time)
{
    D e
    l
        e
    g
        at es.P ar am s_MoveTo
    GameOb
        ect_
    ector3_float @params = new()
    {
        ta rg et
        =
        targe t
        , pos ti n = po
        si ti on
        , time = ti me
    };
    i f _beforeM
        ov T_ Ga meObject_V
        e
    cto
        r
    3_float != null)
    {
        for ach(De
        le g
        at es
            .
            MoveTo Ga meObject_Ve ct or3_float_Before
        rg
        toInvoke in _beforeMo eTo_G
        a
            ec t_Vector
            _float
        GetIn
            ocationLi
        s
        t())
        {
            try
            {
                _beforeMoveTo_GameObject_
                ector3_float?.Invoke(@params);
            }

            c
                at ch(Exce
            tion e

            {
                H
                MirrorMod
                    .DoLogError(e);
            }
        }
    }
    target = @params
    target;
    position = @params.positi
    on;
    time
        @para
    s.ti
        e;
    orig(target, position, t
    i
        me
        )
    ;
    if (
        _
    afterMoveTo_GameObject_Vector3_f
        oat
    !
        null)
    {
        fo
            r
        each(Dele
        ates.M
            o
        eTo_Ga
            m
        eObject_Vec
            t
        or3_float
            Afte
        rA rg s to Invoke
            in _after Mo veTo_GameObject_Vector3_f
        oat.GetI v
        ti
            o
        ni st())
        {
            r

            {
                _aft e
                Mov eT
                _
                    Ob j
                    ec t_
                    e
                ctor _float.nvoke(params);
            }

            c atch(E
                ce
                tion
                e)
            {
                HKMi
                    r
                orMod.DoL
                    o
                gErro(e);
            }
        }
    }
}

internal static void HookMoveTo_GameObject_Hashtable()
{
    if (!H oo kedList.C
    ontains("MoveTo_G
    a
        m
    eO bj ect_ Ha shta le"))
    {
        HookedList.Add("MoveTo
        _
            G
        ameObj e
        c
            t_Hashta le ")        ;
        O.i
            we n.MoveTo
            G
        ae O
        ject_Hashta
            b
        le += M ove To _G
            a
        m
            e
        Oe ct _H as htable
    }
}

internal static event Delegates.MoveTo_GameObject_Hashtable_BeforeArgs _beforeMoveTo_GameObject_Hashtable;
internal static event Delegates.MoveTo_GameObject_Hashtable_AfterArgs _afterMoveTo_GameObject_Hashtable;

private static void MoveTo_GameObject_Hashtable(On.iTween.orig_MoveTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delega
    es.Par
        ms_M
    veTo_GameObject_Hashtable @params =
        ne w()


    ta rget = tar
    g
        et, arg
    s
        = a rg s
}

;
if (_beforeMoveTo_GameOb
ject _H ashtable !
    =
    nu
l
    l)
{
    fo re ach(De le gates.Mo ve To_GameObje
    ct_a sh
    t
        able_
    B
        eforeA gs toInvoke i n _beforeMov
        To
    me Ob ject_Hashtable.Ge In ocationL is t) )
    {
        try
        {
            _b
                foreMo
            eTo_G
                meObject_
            H
            ashtable?.Invoke(@params);
        }
        catch (Except
               on

        e)
        {
            HKMirrorMod.DoLogError(e);
        }
    }
}
target
    = @par
ms.ta
    get;
args
    = @params.args;
orig(target, args);
if (_
fterMoveTo_GameObject_Hashtable != nu
ll )
{
    for
        ach(D
    lega
    es.MoveTo_GameObject_Hashtable_
        A
    ft
        e
    rArgs
    t
    oInvoke in _afterMoveTo_GameObject_H
        shta
    b
    e.GetInvoca
        t
    ionList())
    {
        try

        {
            _afterMoveT
                o
            _GameOb
                ect_Hash
            t
            ble.I
                voke
            (@ pa ram s) ;
        }

        catc
            h
            (Exception e)
        {
            HKMi rorMo.DoLogError(
            );
        }
    }
}

internal static void HookMoveFrom_GameObject_Vector3_float()
{
    if (
        !H oo
        e
    dList.Con tains("MoveFrom_Gam        eO        bjec        t_        Vec
    tor3
        fl
    at")
        )
    {
        HookedL
            s
        t.A dd("        MoveF        ro        m_GameObject_Vector3_float");
        On.iTween Mov rom_Game
            bj
        ct_Vector3_float M oveFrom_Gam Object_ ector3 float;
    }
}

internal static event Delegates.MoveFrom_GameObject_Vector3_float_BeforeArgs
    _beforeMoveFrom_GameObject_Vector3_float;

internal static event Delegates.MoveFrom_GameObject_Vector3_float_AfterArgs
    _afterMoveFrom_GameObject_Vector3_float;

private static void MoveFrom_GameObject_Vector3_float(On.iTween.orig_MoveFrom_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 position, float time)
{
    Deleg tes
        .
        Params_ ove Fr om_G
    a
        m
    eO be t
        ct or3_fl at @pa a = ne w()

    t arget = tar
    g
        et, p
    o
        sition
            =
            p os ition,
        t me time
}

;

i f
    (_bef re

MoveF
    r
om_G am eObjec
    t
_
    V
ec to r3 _f lo at != nu
l)
{
    f
        reac
        (Delegates.MoveFrom_GameObject
            _

    Ve ct or
        _
    f
        loat_Befor
    eA rg s toInv
    o
    ke in _bef or eM oveFrom_GameObjec
    t_Ve ct or3_float.
        G
        etI
    n
        vocation Li st())
    {
        tr y
        {
            _beforeMo
                veFr om
                _
            Ga eObj
            e
                ct_Vect r3 _flo t?.Invoke(@p ar am
            );
        }
        catch (Ex ce pt ion e)
        {
            HKMirr
                .D oL ogError(
            );
        }
    }
}
tar
    et = @par
a
ms.target;
position = @params.position

time = @params.time;
orig(target,
    p osition,
    time);
if (_
fterMoveF
    r
om_GameObject_Vector3_float != null)


foreach (Delegates.MoveFrom_Game
             Ob ject_Ve
    tor3_f
oat_
fterArgs toInvoke in _after
    M
ov
    e
From_G
    a
meObject_Vector3_float.GetInvoca
    ionL
i
t())
{
    try

    {
        _afterMov
            From_G
        a
            eObjec
        t
            _Vector3_fl
        o
        at.Invoke
            @par
        am s) ;
    }

    cat h
    (
        Exce tion)
    {
        HKMirrorMod.DoLogErr
        r(e);
    }
}
}

internal static void HookMoveFrom_GameObject_Hashtable()
{
    if (!HookedL ist.Contains("
    ov eF om_ Ga m
        eO bj ect_Has
    t
        able"))
    {
        HookedList.Add("        MoveFrom        _G        ameObj        ec        t_Hashtab
        e");
        On.Tw
        en.MoveFrom Gae Object_Hashtable +
            =
            MoveFrom_GameObj
        e
            c
        t_ Ha shta bl e;
    }
}

internal static event Delegates.MoveFrom_GameObject_Hashtable_BeforeArgs _beforeMoveFrom_GameObject_Hashtable;
internal static event Delegates.MoveFrom_GameObject_Hashtable_AfterArgs _afterMoveFrom_GameObject_Hashtable;

private static void MoveFrom_GameObject_Hashtable(On.iTween.orig_MoveFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Del eg ates.Par ms_MoveFr om Gam
    e
        Ob ect_H a
    shtable
        @p ar ams = n w
        ()
    {
        tar
        e
            t =
                arget,
            arg
        s
            = args
    }
    ;

    i
        (_ be f
    ov eFrom_Ga
    eObjec
        _Has
    table != null)
    {
        foreach (Delegates.M
                     o
        ve Fr om
            Ga m
            eObj ct _Hash
        t
            able_Bef
        o
        reArgs toInvoke in _befor eMove rom Ga
        meO bj ec t_Hashta le.
            G
            etI
        n
        vocationList())
        {
            try
            {
                _beforeMove
                    F
                ro m_
                G
                    ameObj
                e
                ct_Hashtable?.nvo e(@params);
            }

            ca
                ch
                (Exception e)
            {
                HKMirrorMod.DoLo
                    gr ro r(e);
            }
        }


        targe
            = @p
        rams.targ
        e
            t;
        args = @params.args;
        orig(target, args);

        f(_afterMoveFrom_GameObject_Hashtable !
            = null)
        {
            oreach
                (Dele
            ates.Move
                F
            rom_GameObject_Hashtable_AfterArgs toInvoke
                in _afterMoveFrom_GameObject_Hashtable.
                Ge tInvoca
            ionLis
                ())


            try
            {
                _afterMoveFrom_GameObject_
                H
                    as
                    h
                table.I
                nvoke(@params);
            }
            catch (Exception e)
            {
                HK
                    M
                rrorMod.DoL
                    o
                gError(e);
            }
        }
    }
}

internal static void HookMoveAdd_GameObject_Vector3_float()
{
    if (!HookedL is t.Contain("MoveAdd_Ga
        eObject
        V
        cto
        r
        3f lo at"))
        ooke dL ist.
        dd ("        MoveAd_        Ga        eObject_V        ct        r3_f
        o
        t");
        On.
        iTw e
        n.MoveAdd_Gam eO bject_Vector3 _f lo at += MoveAdd_
        am
        Obj c
        t_ Ve ct r3_fl t
    ;
}
}

internal static event Delegates.MoveAdd_GameObject_Vector3_float_BeforeArgs
    _beforeMoveAdd_GameObject_Vector3_float;

internal static event Delegates.MoveAdd_GameObject_Vector3_float_AfterArgs
    _afterMoveAdd_GameObject_Vector3_float;

private static void MoveAdd_GameObject_Vector3_float(On.iTween.orig_MoveAdd_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    Delegates.Pa
        am
    _Mov
        e
    GameObj
        c
    t_Vector3
        _
    float @params = new()
    {
        target targ t
        , amou
        t = amou
        t
        time = t ime
    };
    if (_ be foreMoveAdd_GameObject
    _
        Vector3_fl at != n l
        l
        )

    {
        f orec h(Delegates.oveAdd_ Ga eObject _V ector3_float _B ef
        o
            reArgs oInvo ke
        i
            n _b eforeo ve Add_GameO
        j
            et _
            ector3_floa
        t
            .GetInvoc t
        i
            o
        n
            Li st )
        {
            try
            {
                _b
                    foreMo
                eAdd
                GameObject_Vector3_float?.Invoke(
                    @
                pa ra ms
                    ;
            }
            catch (E
                   x

            ception
                e
                ) {
                HKMirrorMo d.DoLogError e) ;
            }
        }
    }
    tg et = @para
    m
    s.t
    a
        rget;
    amount = @params.amount

    time =
        @ ara s.
        t
        ime;
    orig(target, amount, tim
    );
    i(_afterMoveAdd_G am eO bject_Vecto
    r_ fl oa t != nul
        )
    {
        fo
            each
        Delegates
            .MoveAdd_GameObject_Vector3_float_AfterAr
        s toInvoke in _afterMoveAdd_GameObje
            ct _Vector3
        float.etInv
        cationLis
        t
            ())
        {
            try
            {
                _afterMoveAdd_GameObject_Ve
                tor3_float.Invoke(@params);
            }
            catch
                (Excepti
                 n

            e)

            HKM
            rrorMod.DoLogError(e);
        }
    }
}

}

internal static void HookMoveAdd_GameObject_Hashtable()
{
    if
    (
        !HookedLis
            .Conta
    i
    s("Mov
    e
        Add_GameObj
    e
        ct_Hashta
    le")
        )
    {
        HookedLis
        t
            .Add("MoveAdd_GameOb        je        ct_Hashtab        le");
        O
        Tween.M
            v
        Add_ G
        ae Ob ject Ha s
            h
        le += M
        veAd d_ a
            eObje c
            tH ast a
            ble;
    }
}

internal static event Delegates.MoveAdd_GameObject_Hashtable_BeforeArgs _beforeMoveAdd_GameObject_Hashtable;
internal static event Delegates.MoveAdd_GameObject_Hashtable_AfterArgs _afterMoveAdd_GameObject_Hashtable;

private static void MoveAdd_GameObject_Hashtable(On.iTween.orig_MoveAdd_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    D l
    g
    ates.Params_MoveAdd_GameObject_Hash
        ab l
        @pa
    ra m new()
    {
        targ t =
        t
        arget
        , args = args
    };
    if (_beforeMoveAdd
    GameObjec _H
    shtable != null)
    {
        foreach (Delegat
                     es .MoveAdd_G meObjec _
            H
        a
            ble_ Be foreArgs toInvoke in _befor eM ove Ad d_Gam
            eO bj ect_H
        a
        shtable
            .
            Ge tI nvoca
            i
        onList())
        {
            _b ef reMoveA
                d
            d_Ga me Object
                _
            H
                a
            sh ab le? I nv oke(@par
                ms);
        }
        catc
            (Exception e)
        {
            HKMirrorMod.DoLogE
                r
            ro r(e)
        }
    }
}

targe
    t
        = @para
m
s.target;
ar s = @par ms args;

or
    ig(t
        arg
        gs);

if (
    _a te
r
    MoveAdd_GameObject_Hashtable = u
ll)
{
    fo reach(
        D
            elegates.

    MoveAdd_GameObject_Hash
        ab
    e_AfterAr s t Invoke in _afterMoveAd dG am eO bject_Ha
        htable
    GetIn
        ocationLi
    s
    t())
    {
        try
        {
            _afterMoveAdd_GameObject_Hasht
            ble.Invoke(@params);
        }
        catch (Exception
               e)
        {
            HKM
            rrorMo
                .DoLo
            Error(e);
        }
    }
}
}

internal static void HookMoveBy_GameObject_Vector3_float()
{
    if (!HookedL
        is t.Conta
        ns("Mo
    eBy_
        ameObject_Vector3_float"))
    {
        Hoo
            k
        ed
            L
        ist.Ad
        d
            ("MoveBy_GameObject_Vector3_float");

        n.iT
            w
        en.MoveBy_G
            a
        meObject_V
            ctor3_
        f
        oat += Move
        B
            y_GameO
        ject_V
            e
        tor3_
            loat
            ;
    }
}

internal static event Delegates.MoveBy_GameObject_Vector3_float_BeforeArgs
    _beforeMoveBy_GameObject_Vector3_float;

internal static event Delegates.MoveBy_GameObject_Vector3_float_AfterArgs _afterMoveBy_GameObject_Vector3_float;

private static void MoveBy_GameObject_Vector3_float(On.iTween.orig_MoveBy_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    D elega
    e
    s.Pa rams_Moe By _a m
        Object_Vect
    o
        r3_float @
    p
        a
    r
    am s = n ew()
    {
        a
            get = ta r
        g
            et, amo
        un t = am
        u
            t, tim
        e
            = tim
        e
    }
    ;
    if
        (_ eforeMo
        ve By _Ga
    me Obje
    c
        t_Vect
    o
    3_floa
    t
        != n l
        l)
    {
        f
            oreach(Delegates.MoveBy_GameOb ject_Vec

        or
            _flo t_ Be for Args
        Invoke in _b eforeMoveBy_GameObject_Vector3_float.GetI v

        cationLi
            t(
            )
        {
            try
            {
                _beforeMoveBy _GameObject Vecto
                    r3 float? Invoke(@pa ra m
                    s
                );
            }

            cat ch(Exception e)
            {
                HKMirrorMo.DoLogErro
                r
                    (e);
            }
        }
    }
    tar
    g
        et = @para s
        .target;
    a
        o
    u
        @par ms.amou
    n
        t;
    time =
        @
    p
        a
    ra ms.t ie;
    orig(tar
    et, am
        unt,
        time);
    if (_afterMoveBy_GameObje
    c
        t_ Ve ctr 3_ f
    loat != nu l
        )
    {
        fo re c
            h
            (Del eg

        ates.MoveBy_ Ga meObject_V ct
        or3 _f lo at_AfterAr gs
            toI
        n
        voke in _afterMoveBy_GameObjec
            t
        _V et or3_f
            l
        oa.G tInvoc ationList())
        {
            ry
            {
                af erMoveBy_ ameObje ct_Vecto r3_
                    fo at.I nvoke(@p
                    rams);
            }

            cat
                h(Except
                    i
                    on e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }
}

internal static void HookMoveBy_GameObject_Hashtable()
{
    if (!Ho
    o
    kedList.Contains("MoveBy_GameObject_Ha
    htable"))
    {
        HookedList.Add("MoveBy
        _G ameObje
        t_Hash
            able
            );
        On.iTween.MoveBy_GameObje
            c
        t_
            H
        ashtab
            l
        e += MoveBy_GameObject_Hashtable;
    }
}

internal static event Delegates.MoveBy_GameObject_Hashtable_BeforeArgs _beforeMoveBy_GameObject_Hashtable;
internal static event Delegates.MoveBy_GameObject_Hashtable_AfterArgs _afterMoveBy_GameObject_Hashtable;

private static void MoveBy_GameObject_Hashtable(On.iTween.orig_MoveBy_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Pa rams_MoveBy_G am eO bj ect_Has
    h
        t
    able @
    p
        arams =
            n
    ew()
    {
        ta e
            t = targe, a r
            s = args
    }
    ;


    if (_be fo reM
    o
        v
    e
        ae Ob je ct_Has ht b
    e != n ul l
        )

    {
        for
            ea ch(
                e
                    egates.
        M
            oveB
        y_ Gam eO
            b
        je ct_h ab
            l
        e_ Be
        or eArgs to Invoke in _beforeMoveBy_Game
            bj
        ct_ Ha
        sh tb le.GetI
            vo ca tionList
        (
            ))
        {
            try
            {
                _beforeMoveBy Gam Object_Hash
                able?.In
                ok
                    (@params);
            }
            catch (Exceptio e)
            {
                KMirro Mod.DoLogE rr o
                r
                (
                    e);
            }
        }
    }
    target = @params.target;
    args = @pa
    r
    ams.ar
    g
        s;
    orig
    (
        ta rg et, a
    g
        s);
    if (_a t
        eM o
        eBy_ ameObje t
    _Hash able
    !
        =

    nl )
    {
        fo re ach(Del
        gates.
            oveB
            _GameObject_Hashtable_AfterArgs toI
            n
        vo ke i
            _
        afterMov eBy
        _
            GameOb ec
            t
        _Has table GetInvocationList())
        {
            try
            {
                _aft er Mov eB y_G
                    a
                meO bj e
                ct_Hashtable.Invoke(@params);
            }

            c
                a
            th(
                E
            xce pt on
                e)
            {
                HKM ir rorMod.DoLo Error(e);
            }
        }
    }
}

internal static void HookScaleTo_GameObject_Vector3_float()
{
    if
    !HookedLi
    s
    t.Contains("ScaleTo_GameObject_Vector3_flo
    t"))
    {
        HookedList.Add("ScaleTo_GameObj
        ec t_Vector
        _float
            );
        On
        iTween.Sc
            a
        leTo_GameObject_Vector3_float += ScaleTo_
        ameObject_Vector3_float;
    }
}

internal static event Delegates.ScaleTo_GameObject_Vector3_float_BeforeArgs
    _beforeScaleTo_GameObject_Vector3_float;

internal static event Delegates.ScaleTo_GameObject_Vector3_float_AfterArgs
    _afterScaleTo_GameObject_Vector3_float;

private static void ScaleTo_GameObject_Vector3_float(On.iTween.orig_ScaleTo_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 scale, float time)
{
    Delegates.Params_ cal To_GameObject_Vect r3_flo
    t
        params = new()
    {
        target = target, sc
        a
        le = sc le
        , time =
            t me
    };
    if (_beforeScaleTo_GameObject_Vecto r3_float
        !
        = null
        )

    {
        fore ac h
            (De legat
        s
            .ScaleTo_
            a
        mO b
        ect_Vector3
            _
        float_Befo re A
            r
        g
            s tn vo ke in _b ef
        r
            ScaleTo_ G
            ameObj
        ec t_ ec tr float.G
        e
            tInvo ca t

        io nLis
            ()
        {
            t ry
            {
                _
                    b
                efor
                    eS cale
                    T
                o_Ga eO
                b
                    ect Vec
                    to 3_fl
                    o
                at?.n
                voke(@params);
            }
            catch (Exception e )
            {
                HK
                    irror Mo d.DoLogEr ro(
                    e);
            }
        }
    }


    target = @params.target;
    scale = @params.sa le;
    ti me =
        @p
    rams.time;
    orig(target, s cale, time);
    if
    (
        _afterScaleTo_Gam
    e
        O
    bj ec t_Ve tr _float != null)
    {
        foreach (Deleg ates.
        S
            caleTo
        _
            Gam Obje
            c
        t_ ec tor3 f
        o
            at_Afte rA rg

        tI n
        oke in _aft
            e
        rScaleTo_G
            a
        m
            e
        Ob je ct Ve ct or3_floa
            .GetIn
            ocat
        onList())
        {
            try
            {
                _afterScaleTo
                    _
                Ga me Ob
                    e
                c
                    t_V ec tor3_fl
                o
                at.Invok
                e
                    (@params);
            }
            catch (Ex eption

            e)
            {
                HKMirrorM
                    o
                d.D
                    o
                LogError(e);
            }
        }
    }
}

internal static void HookScaleTo_GameObject_Hashtable()
{
    f
        !HookedList.Contains("Scale
    T
        am eO bject_Ha
    htable
        ))
    {
        ookedList
            .Add("ScaleTo_GameObject_Hashtable");
        O
            .iTween.ScaleTo_GameObject_Hashtab
        le += Scal
        To_Gam
            Objec
        _Hashtabl
            e
            ;
    }
}

internal static event Delegates.ScaleTo_GameObject_Hashtable_BeforeArgs _beforeScaleTo_GameObject_Hashtable;
internal static event Delegates.ScaleTo_GameObject_Hashtable_AfterArgs _afterScaleTo_GameObject_Hashtable;

private static void ScaleTo_GameObject_Hashtable(On.iTween.orig_ScaleTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    elega ts.P aram s_Sc
        le o_ ameObj
    ec t_ Hasht able @pa ra ms = new()
    {
        t arget = targe

        , args
        a
        gs
    };
    if (_beforeSc leT _GameO bject_H
        a
    shtab e != null)
    {
        fo r
        ea ch(De le
        gates.ScaleTo_GameObject_Hasht ble_
        B
            e
        for Arg
            toInvok
        e
            i n _befo
        e
            ScaleTo_G
        m
            eb j
            ct_Hashtabl
        e
            .GetInvoca ti on L
        i
        st() )
        {
            try
            {
                b
                    foreSca
                l
                    eTo_Ga
                me Obje
                t
                    Hash ta ble
                    ?
                    .In vo k
                e(@para ms);
            }

            c
                a
            ch(E x
            c
                ep ti
                n
            e)
            {
                HK irrorMod.DoLogE rror(e);
            }
        }
    }

    get
        = @p arams.t
    r
        get;
    args
        = param.args;
    orig(target, args);
    if (
        afte rS cale
    o
        eO bject_Hashta bl e != null)
    {
        foreach (
            D
                elegates.ScaleTo_
            G
        a
            me Oj ect_ Ha shtable_AfterAr gs toInvo ke in _after
            S
        caleTo
            _
        GameObj
            e
        ct _H as ht abl
            .G et Invocati
            i
        s()

        {
            try
            {
                _a
                    f
                terScaleTo
                    _
                G
                    a
                me Ob je t_ Ha shtable.nvoke(
                    para
                s);
            }
            catch (Exception e)
            {
                HKMirro
                    r
                Mo d.Do
                    E
                rror(e);
            }
        }
    }
}

internal static void HookScaleFrom_GameObject_Vector3_float()
{
    if (!HookedLi st.Contains "ScaleF        o
    m_ Gam Object
        _
    Vec to r3_float"))
    {
        HookedList.Add(
            Sc
        leFrom_Ga eObject_Vector3_float")
            ;
        O n.iT ween.Sca
            eFrom_
        ameOb
            ect_Vecto
        r
        3_float += ScaleFrom_GameObject_Vector3_flo
        t;
    }
}

internal static event Delegates.ScaleFrom_GameObject_Vector3_float_BeforeArgs
    _beforeScaleFrom_GameObject_Vector3_float;

internal static event Delegates.ScaleFrom_GameObject_Vector3_float_AfterArgs
    _afterScaleFrom_GameObject_Vector3_float;

private static void ScaleFrom_GameObject_Vector3_float(On.iTween.orig_ScaleFrom_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 scale, float time)
{
    elegat e
        .Par
        ms Scale F
    ro m_
    a
    meObject_Vector3_float @params = new()
    ta r
        et = tr ge t,
        scal
            = scale
    t i
        me = time
}

;
if _beforeScale Fr om_GameObject_ Ve ct o
3_float
    =
    ull)

f reach(Del egates.
ScaleFrom_GameObj
    e
ct _V ector3_fl oat_Bef r
    eA rg s to In vo ke in _ beforeS ca leFrom_G am Object_V ector3_f lo at
    .
    Ge In voca
    t
ionList
(
))
{
    try


    _beforeSc
        l
    er om Gam Object_V
    e
        ctor3_floa
    t?.I
    nv ok e(@r ams);


    atch(E
    x
        ceptio
    n e)
    {
        H
            MirrorM
        o
        d.Do
            Lo gErr
        r();
    }
}


targ
    et = @
p
arams.
    t
    rget;


cale
    = @pr am s.scale;
time = @p ar am s.time;
orig(target
s
    ale,
    t im e);
if
_
    afterScal
eF ro m_GameO bj ect_Vecto r3 _float != nu l)
{
    foreach
    egat s.S
        al
    From_ Ga meObject_Ve ct or 3_ float_AfterArgs toIn o
    ke in after caleFr
    o
        m
    _G am eObj ec t_Vector3_floa t.GetInvo at io nList())
    {
        tr y
        {
            _
                afterS ca l
            eFrom_G
                a
            me Ob ject_
                e
            ctor3_floa.
                Iv o
            e(@params);
        }


        ca tc h(Excep
        t
            i
        o
            n e)
        {
            HK MirrorMo
                .DoLog
                rror
            e);
        }
    }
}
}

internal static void HookScaleFrom_GameObject_Hashtable()
{
    f(!HookedList Contain(
        "S        cl        From_GameO        bj        ect
    _
        Hashtable"))
    {
        HookedList.Add(
            "
        Sc al F
            rom_Ga
        m
            eObject_Hashtable");
        On.iTw ee
            .S
            aleFr m_GameO ject_H shtable += S cl eF ro m_GameOb
        ect_Ha
            htabl
            ;
    }
}

internal static event Delegates.ScaleFrom_GameObject_Hashtable_BeforeArgs _beforeScaleFrom_GameObject_Hashtable;
internal static event Delegates.ScaleFrom_GameObject_Hashtable_AfterArgs _afterScaleFrom_GameObject_Hashtable;

private static void ScaleFrom_GameObject_Hashtable(On.iTween.orig_ScaleFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delega
    es.Para
        s
    Sca
        l
    er om _GameO
        j
    ct_Ha
        a
    le @
    ms = n e
        w()
    {
        target = target
            , args = ar gs
    }

    ;
    if
    _b
        fore
    Sc al eFro m_Ga
    e
        Object_Ha
    s
    htable != null)
    {
        foreach (Del eg at es.Scaler om_GameO bj ct
        Hashta le _BeforeArg t oInv ke in _befor eS c
            aleFrom_GameObj ec t_
        H
            a
        sh ta ble.Gt nv cationLi st())
        {
            t ry
            {
                _b fo eScaleFrom _G a
                    meObje c
                    t
                _Hashta
                    b
                le?.In vo e(
                    p
                        ara ms);
            }
            at h
            E x
            eption e)

            {
                HKMirrorM
                    o
                d
                    .
                    Do L
                og Eo r(e;
            }
        }
        ta
        r
            ge = @p
        ar ams.a r
            et;
        arg
            s
                = @
        pa rams
            .args;

        o
            ig(t
                a
                rg et
                a gs);

        if (_a tr ScaleFrom_GameObj
        ct
            Hash
        ta bl e != nu
        l)
        {
            foreach
                (Delegate s. Sc aleFrom_GameObject_Hashtable
            AfterArg
            t
            Invoke in _after Sc aleFrom_ Ga meObject_Has t
            able.GetInvc at i
                o
            n
            t())
            {
                t ry
                {
                    _afterScale Fr om _G ameObject_Hashtabl
                    e.nvoke
                        (@ arams;
                }

                ca tch(
                    x
                        ception

                e
                    H
                MirrorMo d.DoL
                    o
                gEr or(e);
            }
        }
    }
}

internal static void HookScaleAdd_GameObject_Vector3_float()
{
    if
        (!Ho ok
        d
    L
    ist.Contai
        n
    s("Scale
    A
        dd_GameObj ect_Vector3_f lo at"))
    {
        Hooke
            dLis t.Add("Scale
        A
            dd_
        Ga eOb ect_Vector3_float");
        On.iTween.
            Sca le Ad
            d
        _GameO
            b
        ject Vector3 float = ScaleAdd _G ame
        Obje
        t_
            ector3_float;
    }
}

internal static event Delegates.ScaleAdd_GameObject_Vector3_float_BeforeArgs
    _beforeScaleAdd_GameObject_Vector3_float;

internal static event Delegates.ScaleAdd_GameObject_Vector3_float_AfterArgs
    _afterScaleAdd_GameObject_Vector3_float;

private static void ScaleAdd_GameObject_Vector3_float(On.iTween.orig_ScaleAdd_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    Dele
    ates.
        P
        rams_
    cale
        Ad dG meObject V
        ecto 3_float @p arams = new()
    {
        target = targ
        t
        , amo
        n
        =
        a
        m
        t
        , im

        time
    };
    if (_e f
        reScal e
        dd_ Ga
        e
    bject _
    Ve ct
    r
    3_float != null)
    {
        foreach (Delega es.
        Scal
            d
        meO
            bj ec t_Vecto
        3
        _float_Be
            f
        oreArgs toInvoke i n _beforeScaleAdd_GameObj ect_V
        ctor3_fl
            at
        GetInvocationList())
        {
            try
            {
                _beforeScaleA dd _GameObjec t_ Vector3_ fl o
                at?.Inv
                    params);
            }

            ca tch(Exception e)
            {
                HKMirrorMo d
                    .
                    Do Lo gErro
                r
                    (e);
            }
        }


        et =
            @
        pa ra ms.targ e
            ;

        m ou t @params.a m
        o
            unt;
        time
            @
        p
            a
        ra ms.t i;
        orig(t
        r
            et, amoun
        t, t me);

        _aft
            c
        leAdd_
            G
        ameOb
            je ct_V
            c
        or3_flo
            a
        t !=
            n ull)


        {
            forea(ele
            ga es.S
                c
            al eA
            Ga meObject_V ector3_float_AfterArgs toInvok
            i
                _af
            te rS caleAdd
                meObje
            c
                t_ ect r3_float.GetInvocationList())
            {
                try
                {
                    _
                        fterSca le
                        dd
                    GameObject_Vec to r3 _float.Invoke(@params);
                }


                catch (Exception
                       e
                      )

                {
                    HKMi ro rM od.DoLogEr ror(e);
                }
            }
        }
    }

    internal static void HookScaleAdd_GameObject_Hashtable()
    {
        i f
        (
            !o o
        edList.Cont i
        ns("Sc        leAdd        G
        a
            me Ob je ct _H ashtable
            ))
        {
            H
                oked
            ist.Add("ScaleAdd_GameObject_Hasht
            a
                bl e"        );
            O
            n
                .iTween.Sc
                a
            leAdd_Ga
                me Object_Hashtable += Sc al eAdd_Game
            Obje ct _Hashtable
                ;
        }
    }

internal static event Delegates.ScaleAdd_GameObject_Hashtable_BeforeArgs _beforeScaleAdd_GameObject_Hashtable;
internal static event Delegates.ScaleAdd_GameObject_Hashtable_AfterArgs _afterScaleAdd_GameObject_Hashtable;

private static void ScaleAdd_GameObject_Hashtable(On.iTween.orig_ScaleAdd_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegate
    s
        .P
        a
    rams_S
        c
    aleAdd_GameObject_Hashtable @params
        = ne
    w
        )
    {
        target
            = target
            ,
        args =
            rgs
    }
    ;


    if (_before
    S
        caleAdd_G
    meOb
        je ct _Hashta le
        != nu l) {
        fo re ach(Delega es Scaled d_ am
        Ob ct
        H
            sht a
            b
        l
            eo reArgs
            t
        Invoke i
        _be
            o
        eScal e
        Ad d_
        eOb ect_H ashtable.GetI vo cationList() )
        {
            tr

            {
                _bef
                    or eS caleAdd
                G
                    ameObject
                _
                Hashtable?.Invoke(@p rams);
            }
            catch (Exce
            tion e)
            {
                KMirrorMod.DoLogError(e);
            }
        }
    }
    ta rget =
        @
        params.target;
    ar
    g
        s
            = @ para ms.args;
    orig(target, args);
    i f(_afterS ca
    le
        A
    d
        d_Game
    Ob ec t_Has
        h
    ta bl e != n ll) {
        fore
            c
        h
            el gates.Scal eA dd _G ameO bject_H
        a
            s
        h
            e_ Af ter Ar gs
        o
        nvo ke in

        _af er
        Sc aleA dd G
        me Object_ Ha shta
        be.G tI
        n
            vo ca tionL t())


        {
            tr


            {
                _afterScaleAdd_GameObj ct_ ashta ble.I
                    vo
                e(@ a
                    ra ms );
            }
            ca
                (Exceptio
            n
                e)
            {
                HKMirrorMod.DoLogError(e;
            }
        }
    }
}

internal static void HookScaleBy_GameObject_Vector3_float()
{
    if (!o o
        k
    e
    dL is t.Co nt ains("ScaleBy_GameObject_Vector3_flo        a
    t
    "))
    {
        H o
        okedLis
        t
            .d("        Scale
        y_ am eObject
            V
        _f oat");
        On
            .iTwe en.Scale
            B
        y
            _
        Ge Oe ct _V ec tor3_flo
        t += S
        aleB
            _GameObject_Vector3_float;
    }
}

internal static event Delegates.ScaleBy_GameObject_Vector3_float_BeforeArgs
    _beforeScaleBy_GameObject_Vector3_float;

internal static event Delegates.ScaleBy_GameObject_Vector3_float_AfterArgs
    _afterScaleBy_GameObject_Vector3_float;

private static void ScaleBy_GameObject_Vector3_float(On.iTween.orig_ScaleBy_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    Delegates.Params
        ScaleBy_GameObject_Vector3_float @param
        s = new()

        {
            tar
            et =
            target
            , amount = amount, time =
                ti
            m
            e
        };

    i
        f
        (_beforeScaleBy_GameObject_Vector3_fl
            at

    !
        =
    null)
    {
        for
            e
                ach(Deleg
                    tes.
        Sc
            a
        eBy_GameObj
            e
        ct_Vect
            r3_flo
        a
            _Befo
        eArg
            s to Invok in
        _b ef reScal By_Ga meObject_Vector3_ float.GetInv
        cationL
        s
            ())


        {
            t ry
            {
                _be
                    o
                eScal By _
                    ameO je _e ct o3 _f l

                at?
                    e(@pa r
                        am);
            }

            cat h(Excep ion e)
            {
                HKMirro rMod.oL ogE
                rror
                    e)
            }
        }
    }
    t arget =
        @
        params.ta
    rg et;
    a ou t = @params.amou t;
    time = @p ar ams.tim
        ;
    orig(t
    rg
        t, amount, time);
    if (_afterS aleBy_Gam Obj ct_Vector3_float
        !
        =
        n ul l)
    {
        f oreach(Delegates.ScaleBy_GameObject_Ve ct
        o
            r
        3_ft _After
        A
            rg s toInv
        k
        e in _aft
            r
        Sa l
        By_GameObjec t_ Vector3_fl oa t
            .
            G
            et Iv on is
            ()
                {
        try
        {
            _after cl eBy_G
                m
            Object_
                V
            ect or 3_f
            lo at.I
                vk e(@p ar ams)
                ;
        }

        c
            at ch(
            E
        xc pt on
            )
        {
            H K
            M
                rror
            M
            o.Do
                o
            gErrr(e;
        }
        }
    }
}

internal static void HookScaleBy_GameObject_Hashtable()
{
    if
    (
        !H oo kedLi t.Contains("ScaleBy_GameObject_Has
    table"))        
    H kedL ist.Add("Scl        eBy_Gam        eO        bject_Hashtable
    "
        );
    On.iTween.Scal
        e
    B
        y_ Ga meOb je ct Hashtable = S aleBy_GameObject_Hashtab
    l
        e;
}

}

internal static event Delegates.ScaleBy_GameObject_Hashtable_BeforeArgs _beforeScaleBy_GameObject_Hashtable;
internal static event Delegates.ScaleBy_GameObject_Hashtable_AfterArgs _afterScaleBy_GameObject_Hashtable;

private static void ScaleBy_GameObject_Hashtable(On.iTween.orig_ScaleBy_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Params_ScaleBy_GameO
    ject_Hashtable @params = new()
    {
        ta
        rg et = tar
        et
        , a
        gs =
        rgs
    };
    if
        (_beforeScaleBy_GameObject_Hashtable !=
         null)
    {
        foreach (Delegates.ScaleBy_
                     Ga meObjec
            _Hasht
        ble_
        eforeArgs toInvoke in _before
            S
        ca
            l
        eBy_Ga
            m
        eObject_Hashtable.GetInvocationLis
            ())

        {
            try
            {
                _befo
                    r
                eScaleBy_G
                    meObje
                c
                    _Hasht
                a
                ble?.Invoke
                (
                    @params);
            }

            ca
                tc h(Exceptio n e
            )
            {
                HKMirr or Mod.DoLogError(e);
            }
        }
    }

    ta
        get = @p r
    ms.ta gt;
    args =
        a
    ams.arg s;
    orig
    t
        t, a r
        g;
    i
    (_afterS ca leBy_GameO ject_ Hashtable != n
    )


    for
        ea ch(Deleg
            t
    es.ScaleB
        y
    _GameObject_H shtable Af erArg s to nvoke in _ ft rScale
        y_ meOb ec _Hashta ble.G tInvocationList()
        )

    {
        try
        {
            _afterSc
                a
            l
                eB y_ Ga
            bj ct_Ha shtable.Invo e(@params);
        }
        catch (Ex
               c

        e
            ption
        e
            )
        {
            HK
                M
            ir ro rMod.
                o
                LogEr or(e
                ;
        }
    }

    internal static void HookRotateTo_GameObject_Vector3_float()
    {
        if (
            HookedL
        i
        st.C
            on tain
        s
            ("Rota
        t
            To_G
        a
            me Ob
            e
        ct_Vector3_f lo at "))
        {
            H ookedList.A dd("Rot
            te
                o_Ga
            me Ob ject_ ec tr 3_float"
                )
            ;
            On.iTween.RotateTo_G am eO bc t_Vector3_f
                t = Rot
            te
                GameObj ect_Vector3 float;
        }
    }

internal static event Delegates.RotateTo_GameObject_Vector3_float_BeforeArgs
    _beforeRotateTo_GameObject_Vector3_float;

internal static event Delegates.RotateTo_GameObject_Vector3_float_AfterArgs
    _afterRotateTo_GameObject_Vector3_float;

private static void RotateTo_GameObject_Vector3_float(On.iTween.orig_RotateTo_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 rotation, float time)
{
    Delegates.Pa
        rm s_ Ro tateTo_G
        meObje
    t_Vec
    or3_float
        @params = new()
        {
            target = target, rotati
            n = rotation
            , time = time
        };
    if (_befo
    re RotateTo
    GameOb
        ect_V
    ctor3_flo
        a
    t != null)
    {
        foreach (Delegates.RotateTo_G
                     meObject_Vector3_float_BeforeArgs toIn
        vo ke in _
            eforeR
        tate
        o_GameObject_Vector3_float.GetIn
            v
        oc
            a
        tionLi
            s
        t())
        {
            try
            {
                _beforeRotateTo_GameObje
                    t_Ve
                c
                or3_float?.I
                nvoke(@par
                ms);
            }


            atch(Excep
            t
                ion e)
            {
                HKMi
                    r
                orMod
                    DoLo
                gE rr or(e);
            }
        }
    }
    targ t = @params.target;
    rotation = @
    arams.r o
    a
        ion
        ;


    e = @p ra
    s.ime;

    or i
    (targe
        ,
        rotatio n
            tim
    )

    f(_a ft e
    rR ot at T
    o_GameObject_Vector3_float != null)
    {
        fo
            ea ch(Del
        eg at es.R ot ate
            o
        _GameO jec
        t
            _Ve ct r3_float_Aft er Args toI voke in _ fterRo ateTo _
        ameObjec
            _Vc tor3_float.GetInvocationList())
        {
            try
            {
                _afterR tateTo_G me b
                j
                    e_ V
                    ecto r3 _flo t.nvoke(@par ms);
            }
            catch (Except on
                  )
            {
                HKMir ror
                M
                    od DL ogErr
                r
                    (e);
            }
        }
    }

    internal static void HookRotateTo_GameObject_Hashtable()
    {
        if (!Ho
        ok edList
        C
        ntains(
            "
        Rotate
            To _Gam
            O
        ject_Ha
            s
        htab e"        ))
        {
            Ho ked i
            s
                .Add("
            R
                tate
            T
                o_ Ga
                e
            Object_Hashtable");
            On.iTween.RotateToG am eO ject
            _H as htable
                =
                RotateTo
            _
                GameObject_Hashtable;
        }
    }

internal static event Delegates.RotateTo_GameObject_Hashtable_BeforeArgs _beforeRotateTo_GameObject_Hashtable;
internal static event Delegates.RotateTo_GameObject_Hashtable_AfterArgs _afterRotateTo_GameObject_Hashtable;

private static void RotateTo_GameObject_Hashtable(On.iTween.orig_RotateTo_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Params_Rota te T
        o_ Ga
        m
    eObjec
        t
    _Hash ta bl e @params = new()
    {
        t
        rg
        t = target
        , args = args
    };
    i f
    _ bf or eRotateT
    _GameO
        ject_
    ashtable
        !
        = null)
    {
        foreach (Delegates.RotateTo_G
                     meObject_Hashtable_BeforeArgs toInv
        ok e in _be
            oreRot
        teTo_
            ameObject
        _
        Hashtable.GetInvocationList())
        {
            try
            {
                _beforeRotateTo_GameObject_Hashtab
                le?.Invok
                    (@para
                s);


                catch (Exception e)
                {
                    HKMi
                        r
                    ro
                        r
                    Mod.Do
                        L
                    ogError(e);
                }
            }
        }
        target = @param
            .tar
        g
            t;
        args = @
        p

        arams.args
            orig(
                t
                    rget,
                a
                    rgs);

        if (_
        a
            fterRotat
        To_G
            am eO bject_Has
        h
        table != null)
        {
            fore ch(Delegates.
                otateTo
                G
                meO
                b
                jc t_ Has htab
                e
                Afte Arg s
                to nv
                k
                n _a f
                te rR
                t
                eTo_GameObject_Hashtable.GetInvocat
                onL st()
            )
            {
                try
                {
                    _
                        f
                    terRotate
                        T
                    o_GameObj ect_Hashta le.Invo e(@pa ams);
                }

                c
                    tch(Exc
                        pt
                        on e)
                {
                    H KMi rr orMod.D oL ogError(e);
                }
            }
        }
    }

    internal static void HookRotateFrom_GameObject_Vector3_float()
    {
        if (!Ho
        o
            k
        edList.Co ntains(
            "
        Ro at eFr om_
        a
            meObject_
        ec tr 3
        float"))
        {
            H
            ookedList.
                A
                d
            d
                ("        Ro        ta        te        Fro        _Ga
            e
                bject Ve
                c
            tor3_
                fl oat"
                ;
            O n.Twe
                e
            n.Ro
                ta teFro _a e
                O
            jec t_
            V
                ec t
                f
            loat += RotateFrom_GameObject_Vect
            r3
                fo a
        }
    }

internal static event Delegates.RotateFrom_GameObject_Vector3_float_BeforeArgs
    _beforeRotateFrom_GameObject_Vector3_float;

internal static event Delegates.RotateFrom_GameObject_Vector3_float_AfterArgs
    _afterRotateFrom_GameObject_Vector3_float;

private static void RotateFrom_GameObject_Vector3_float(On.iTween.orig_RotateFrom_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 rotation, float time)
{
    Delegates.Params_Rot
        at eF ro m_
        G
    ameObj
        e
    ct_Vector3_float @params = new )

    {
        targ t target, rotation = rota
        to n, time = t
        me
    }
    ;

    f(_b
    foreRotat
        e
    From_GameObject_Vector3_float != null)
    {
        for
            ach(Delegates.RotateFrom_GameObject_Vec
        to r3_float
        Before
            rgs t
        Invoke in

        _beforeRotateFrom_GameObject_Vector3_float.etInvocationList())
        {
            try
            {
                _beforeRota
                    te From_Ga
                    eObjec
                _Vec
                or3_float?.Invoke(@params);
            }

            cat
                c
            h
            (
                Except
            i
                on e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
        t
        a
            get = @para
        m
        s.target;

        otatio
            n
                = @params.r
        o
            tation;
        time = @
        p
        rams.ime;

        o ri g(target,
            rot ation, time);
        if (_after otateF om_GameOb
        t_Vecto
        3
        flo
            a
        t! = null)


        oreach(
            elegate.o
        ateFrom_G a
        eObj
            c
        _Vect o
        r3 _f
        o
            at_Aft erArgs toIn oke in afterR tateFrom_G am e
        bj
            ct_V
        ec to r3_floa
            .
            GetInvoca
            t
        ionList())

        try
        {
            _afterRotateFrom_GameObjec
                _Vect or3_
                lo
            t.nvoke(@ arams;
        }
        catch (Exception e)
        {
            HKMirr or Mod.D oLogErr or(
                    e
                )
                ;
        }
    }
}
}

internal static void HookRotateFrom_GameObject_Hashtable()
{
    i
    f
        (!o edLi
    t
        .Conta in s("
    o
        t
    F
        om_Ga me bject_ ashta ble"))


    {
        Ho oe di st.Add("
        o
            ateFrom
        _
            GameOb
        je ct_Hasht
        b
            e"        ;
        On.
            i
            Twe n.otat em _
            a
        eObjec _
        H
            asht
        ab le +
            Rotate ro _GameObje _Has tb l
            ;
    }
}

internal static event Delegates.RotateFrom_GameObject_Hashtable_BeforeArgs
    _beforeRotateFrom_GameObject_Hashtable;

internal static event Delegates.RotateFrom_GameObject_Hashtable_AfterArgs _afterRotateFrom_GameObject_Hashtable;

private static void RotateFrom_GameObject_Hashtable(On.iTween.orig_RotateFrom_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Deleg te.Param
        s_ Ro tateFro m_GameO je t_Hashta bl e @par
        ams = e w()
    {
        ta rg t
            =
            t
        ar ge, ar gs = ar s
    }
    ;
    if (_beforeRo
    tate Fr
    o
        m_Game
    O
    bject_Hashtable != null)
    {
        fo
            ch(Delegate s.

        RotateFrom_GameObjec
        tH as ht able_Bef
            reArgs
        toInv
        ke in _be
            f
        oreRotateFrom_GameObject_Hashtable.GetIn
        ocationList())
        {
            try
            {
                _beforeRotate
                    Fr om_GameO
                    ject_H
                shtab
                e?.Invoke
                (
                    @params);
            }
            catch (Exception e)
            {
                HKMi
                rorMod.DoLogError(e);
            }
        }
    }
    target
        = @params
    target
        arg
            = @params.args;
    orig(target,
        ar
    g
        s);
    if
        (_afterRotateFrom_GameObject_Hasht
    ble
        !
    null)
    {
        fo
            r
        each(Dele
        ates.R
            o
        ateFro
            m
        _GameObject
            _
        Hashtable
            Afte
        rA rg s toInvok
        e
            in _afterRotat eFrom _G ameObje ct _Hashtable
        GetInvo
            a
        ion
            L
        it() )

        tr
            afterRo t
            teFr
        m
            GameO b
            je ct_ a
        shtable.Invoke(params)
    }

    cat h(Excepi on
    )
    {
        H KM irrorMo
            .DoLogErro
        r
            (e);
    }
}
}
}

internal static void HookRotateAdd_GameObject_Vector3_float()
{
    if (!Hoo ke dList.Con
        t
    ains("RotateAdd_G
    a
        m
    eO bj ect_ Ve tor3_float"))
    {
        HookedList.Add("Rot        at
        e
            A
        dd_Gam O
        bject_ e
        c
            t
        float
            )
        ;
        On.iTwe
        n
            .o t
        teAdd _G ame Ob jec
            t
        _Ve ct or3_flo
            a
        t
            += R ot at eAdd_G
            m
        Object_ e
        ctor 3_ l
        oa t;
    }

internal static event Delegates.RotateAdd_GameObject_Vector3_float_BeforeArgs
    _beforeRotateAdd_GameObject_Vector3_float;

internal static event Delegates.RotateAdd_GameObject_Vector3_float_AfterArgs
    _afterRotateAdd_GameObject_Vector3_float;

private static void RotateAdd_GameObject_Vector3_float(On.iTween.orig_RotateAdd_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    De le ga
        e
    s
        .Pa ra ms _Rotat
    e
        Add_Game
    Ob je ct_Vector3_f oa t @params new()
    {
        ta
        rget ta rget
        , am
        ou nt = a m
        ount
        , time = t me
    };
    if (_b ef oreRot ateAd
        d_ am eO
    b
        ject_ Ve c
    t
        or3 _float != null )

    forea ch(Dl eg
    ates
        Ro
    ateAdd_GameObject_Vector3_f oat BefoA rg s toInvoke
        in _be
        oreRo
    ateAdd_Ga
        m
    eObject_Vector3_float.GetInvocationList())
    {
        t
        y
        {
            _beforeRotateAdd_GameObject_Vector3_fl
                oa t?.Invok
                (@para
            s);
        }
        catch (Ex
        c
            eption e)
        {
            HKMirrorMod.DoLogError(e);
        }
    }
}

target = @params.target;
amount = @params
    .a mount;

ime =
    para
s.time;
orig(target, amount, time);


if
    (_afte
r
RotateAdd_GameObject_Vector3_float != nu
l)
{
    oreach(Del
    e
    gates.Rota
        eAdd_G
    a
        eObject_Vec
    t
        or3_flo
    t_AfterA
        r
    s toI
    voke
        i n _afterRot
    a
        teAdd_GameO bject_Vec to r3_floa t.GetInvocationLis
        ())
    {
        t
        y
        {
            _
                a
            f
                Ro ateAdd
                G
            meObjec t
            Vector3_
                l
            at.In voke(@
            aram
                )
        }
        cat c
        h(x
        e
            pti n e)
        {
            HK Mi rrorMod.DoLogError(e);
        }
    }
}
}

internal static void HookRotateAdd_GameObject_Hashtable()
{
    if (!Ho kedList Con
    ai s("Rot
    te
        _GameObject_Hashtable"))
    {
        HookedList.Add(
            "R        tateAdd_GameObje
        c
            t
        _H as htab le ");
        On.iTwee n.RotateAd _GameOb ect_H shtable +
            =
            Rotate
        A
            dd_Game
        O
            bj ec t_Ha sh tb le;
    }
}

internal static event Delegates.RotateAdd_GameObject_Hashtable_BeforeArgs _beforeRotateAdd_GameObject_Hashtable;
internal static event Delegates.RotateAdd_GameObject_Hashtable_AfterArgs _afterRotateAdd_GameObject_Hashtable;

private static void RotateAdd_GameObject_Hashtable(On.iTween.orig_RotateAdd_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Params_Rotat Add_GameOb ect H
    a
        shtabl
    e
    @param
        s
            = n ew()
    {
        target =
            t
        ag e
            args = arg
        s
    }
    ;
    if (_b
    ef or eR ot at eA dd _G ameObjec
    _Hasht
        ble
            = null)
    {
        foreach (Delegates.Rotate
                     A
        dd _G am eO j
            e
        ct_Hashta le _
            BeforeAr
        g
            s oI nv ke in _beforeRotateAdd_Gam
            eObc ta shtable.Ge
            t
        Inv
            o
        ca io List())
        {
            try
            {
                _ beforeRotat Ad _
                Game Ob
                je ct _Hash
                    t
                able?.Invoke @p rams);
            }

            ca tch(Exce
                tin e)
            {
                HKMirrorMod.DoLogError(e;
            }
        }
        target =
            @param
                .targ
        t;
        args =
            @params.args;
        orig(target, args);
        if (_aft
        rRotateAdd_GameObject_Hashtable != nul
        l)
        {
            forea
                h(Del
                    gates
                    RotateAdd
                    _
                    GameObject_Hashtable_AfterArgs toInvoke i
                    _afterRotateAdd_GameObject_Hashtable
                    .G etInvoc
                    tionLi
                    t())
            {
                try
                {
                    _afterRotateAdd_GameObj
                        e
                    ct
                        _
                    Hashta
                        b
                    le.Invoke(@params);
                }
                catch (Excepti
                       n

                e)

                {
                    HKMirrorM
                        o
                    d.DoLogErr
                    r(e);
                }
            }
        }
    }

    internal static void HookRotateBy_GameObject_Vector3_float()
    {
        if (!HookedList.C
        ntain s("
        o
            ate
        B
            yG am eObject Vc to r3_flo a
        "))


        ooked L
            is t.
            d
            d("RotateB        y_GameO        bj        ect_Vec        to        r3_float");
        On.Tw
        en.R
            ot at eBy Ga
            e
        Object_Ve
            c
        tor3_float += RotateB y_GameObject_Vec or3_flo t;
    }
}

internal static event Delegates.RotateBy_GameObject_Vector3_float_BeforeArgs
    _beforeRotateBy_GameObject_Vector3_float;

internal static event Delegates.RotateBy_GameObject_Vector3_float_AfterArgs
    _afterRotateBy_GameObject_Vector3_float;

private static void RotateBy_GameObject_Vector3_float(On.iTween.orig_RotateBy_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    Delegates.Params_RotateBy_GameObje t_Vector _f oat @p ar
    a
    m
        s = new
            target = arget,
        mount = amount,
        time
            =
            time
}

;
if (_
b
    ef or eRota
e
    By_GameO
c_ Ve tor3_float = null)
{
    fo re a
        c
    h
        (De le ga te s.Rotate
    y_Game
        bjec
    _Vector3_float_BeforeArgs toInvoke in
    _
        be fo re
    o
        t
    ateBy_Game
        O
    bjec t_ Vect
        o
    r3_float.GetI nv oc ationList())
    {
        try
        {
            _bef or eRotateBy_
                G
            ame
                O
            bject_V ec to r3_float?.Invoke(@ pa rs );
        }

        c tc h(E
        x
            cepti n e
            )
        HKMirrorMod.DoL og Error(e);
    }
}
}
ge
= @params.t rg t;
amount = @params.am
o
ti me = @pa
ams.ti
e;
or
g(target,
amount, time);
if (_afterRotateBy_GameObject_
ector3_float != null)
{
    foreach (Delegate
                 s. RotateBy
        GameOb
    ect_V
        ctor3_flo
    a
    t_AfterArgs toInvoke in _afterRotateBy_GameO
    ject_Vector3_float.GetInvocationList())

    {
        try
        {
            _
                fterRo
            ateB
            _GameObject_Vector3_float.Invoke(@
            p
                ar
            a
                ms);
        }


        catch (Exception e)
        {
            HKMirrorMod.DoLo
                Erro
            r
                e);
        }
    }
}
}

internal static void HookRotateBy_GameObject_Hashtable()
{
    i(!Hooked is t.C
        ontains("Rota        te        By_GameOb        ject_Hashtable"))
    {
        ookedLi
            t
        Add
        (
            "o        ta        teB        y_Ga
        e
            bject_H a
            hta ble"
            ;
        On.iTwee n
        Rota
            e
        y_Gam e
        Ob je
        t
        _Hashtable += Ro tateBy_G am eObject_H as htable;
    }

internal static event Delegates.RotateBy_GameObject_Hashtable_BeforeArgs _beforeRotateBy_GameObject_Hashtable;
internal static event Delegates.RotateBy_GameObject_Hashtable_AfterArgs _afterRotateBy_GameObject_Hashtable;

private static void RotateBy_GameObject_Hashtable(On.iTween.orig_RotateBy_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    De ga
        .
        Params _R otateBy_GameObject_Hashtable @para
    s
    ne(
    )
    t rget =
        t
    arge t, arg
    s
        = ar s
}

;
if (beforeRotate By _GameObj ct_Hashta bl
    = nu l)
{
    or
        ach(Deleg at

    es.RotateBy_GameObject_Hashtab
        l
    e_BeforeArgs toIn o
    k
    e in _ ef re Ro ta tB y_GameObje t_ ashtable.etInvocat on is
        t
        ())
    {
        t
        ry {
            _be o
            ot ateBy _
                a
            meO je ct_Ha
                h
            tb l
                ?.Invoke(@p
            a
                rams);
        }
        c
            a
        t
            c
        h(E xc ep ti on e)
        {
            HKMirr
                rMod
            DoLogError(e);
        }
    }
}
target = @par
a
ms.t ar
e
    t
    ;
args = @
p
aram.arg
    s
    ;
ori(tr get, args);
if (_afte
rRot at eBy_GameOb
    j
ect
    _H ashtable != null)
{
    fo re ach(Deleg
    ates.R
        o
    tateBy
        _
    GameObject_Hashtable_AfterArgs
        to I
    ke in _ af terRotat eB y_GameObject_H
        ah ta bl e.GetInv
        cation
    ist()

    {
        try
        {
            _
            afterRotateBy_GameObject_Hashtable.Invoke
                @params);
        }
        catch (Exception e)
        {
            HK
                Mi rrorMod.oLogEr
            or(e)
        }
    }
}
}

internal static void HookShakePosition_GameObject_Vector3_float()
{
    if (!Hooke
    dL ist.Con
    ains("
    hake
        osition_GameObject_Vector3_flo
    a
        t"
        )
        )
    {
        Ho
            o
        kedList.Add("ShakePosition_GameObje
        t_Ve
            c
        or3_float")
            ;

        On.iTween
            ShakeP
        o
            ition_
        G
            ameObject_V
        e
            ctor3_flo
        t +=
            S ha kePositio
        n
            _GameObject_Vector3_float;
    }
}

internal static event Delegates.ShakePosition_GameObject_Vector3_float_BeforeArgs
    _beforeShakePosition_GameObject_Vector3_float;

internal static event Delegates.ShakePosition_GameObject_Vector3_float_AfterArgs
    _afterShakePosition_GameObject_Vector3_float;

private static void ShakePosition_GameObject_Vector3_float(
    On.iTween.orig_ShakePosition_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 amount, float time)
{
    D
        elegat
    e
        .Par
        a
    ms _S
    a
        kePos tion_GameObject_Vector3_float @
    ar
        ms =
            ne w()
    {
        t r
        e
            t = arget
        amount = am ount
            , time = time
    }
    ;
    if (_bef
    reShakeP
        si on_GameObject_Vector3_float != null)
    {
        foreach Delegat s
            .
            S
            ha eP osit io n_GameObject_Vector3_flo at _Be fo reArgs to In
        v
        oke in

        _before
            S
        ha ke Posit
            o
        n_GameOb e
        t
            _
        o
        3_float.Ge tI n
            v
        ocationLi t
        (
            )
            )


        tr
        {
            _ be foreShak
                Positi
            n_Ga
            eObject_Vector3_float?.Invoke(@params
                )
                ;
        }
        ca
            c
        h
            (Exceptio
        n
        e
        {
            HK
                M
            ir or od.D oL ogError(e);
        }
    }
}

target = @
    .target;
a
mo nt
    =
    @params.amount;
time = @params.tim
e
    ;
or
    ig tar et,
    a mount, time;
if (_after Sh akePositio
_G
meObject_Vector3_float != null)
{
    o re ac h(Deleg
        tes.

    Sh
        kePos
    tion_Game
        O
    bject_Vector3_float_AfterArgs toInvoke in _a
        terShakePosition_GameObject_Vector3_floa
    t.GetInvoc
        tionLi
    t())


    try
    {
        _a
            f
        terShakePosition_GameObject_Vector3_float.I
        voke(@params);
    }
    catch (Exception e)
    {
        H KMirror
        od.DoL
            gErr
        r(e);
    }
}
}
}

internal static void HookShakePosition_GameObject_Hashtable()
{
    if (
        Hook
    e
    List.Contai
        n
    s("ShakePo
    ition_
        G
    meObject_Ha
        s
    htable"
        )
    {
        Ho
            o
        edLis
            .Add
                ("        Sh        akePositi
        o
            n_GameObject_Hashtable");
        On.iTween.Shak
            Posit io n_ G
            m
        Obj_ ashtab
        e
            += Shak e
            ositio
        _
            ameObje c
            _Hast ab e;
    }

internal static event Delegates.ShakePosition_GameObject_Hashtable_BeforeArgs
    _beforeShakePosition_GameObject_Hashtable;

internal static event Delegates.ShakePosition_GameObject_Hashtable_AfterArgs
    _afterShakePosition_GameObject_Hashtable;

private static void ShakePosition_GameObject_Hashtable(On.iTween.orig_ShakePosition_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    De e
    g
    ates.P
        a
    s_Shak
        e
    osit
        i
    on _G
    m
    eObject_Hashtable @params = new()
    {
        tar
        et
        = ta
        rg et
        , args
            =
            args
    };

    i
        f
        (_before hakePos

    tion_G meObject_H as htable != n
    ll)
    {
        fo
            ea
        h(Delegates.ShakePos tion_GameObject_Ha
        s
            htable_BeforeArgs

        t
            on vo ke i n _b foreSha ePosi ion_GameObject_Hashtable.
            G
            etInvo
        c
            at io nLi st()
            )

        {
            y
            {
                _b
                    f
                oreShakeP
                    s
                ii o
                _GameObject
                    _
                Hasht ble?.In o
                    k
                e(@p ar am s);
            }
            catc
                (Exce
            tion
                e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }
    t
        r
    g
        et = @para
    m
    s.target;


    args = @params.args;
    orig(targe
    t
        , ag );
    if (_ ft rSha ke Position_Gam Ob ect_Hasht ble !=
        n ll
    {
        foreach (Dele at s.Shake Posit on _GameObjec
        _H
        shtable_AfterArgs toInvoke in

        rS hakePosi
        ion_Ga
            eObje
        t_Hashtab
            l
        e.GetInvocationList())
        {
            try
            {
                _afterSha
                ePosition_GameObject_Hashtable.Invok
                e(@params)
            }

            cat
                h(Ex
                    eption e)


            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }
}

internal static void HookShakeScale_GameObject_Vector3_float()
{
    if (!HookedList.Contain
    s
        ("
    S
        hakeSc
    a
        le_GameObject_Vector3_float"))
    {
        H
            oked
        L
        st.Add("Sha
        k
            eScale_Gam
        Object
            _
        ector3
            _
        float");
        On
            .
            iTween.Sh
            keSc
        al ea meObjet _V ector3_float += ShakeScale_GameObjec
        _Vecto 3
        at;
    }
}

internal static event Delegates.ShakeScale_GameObject_Vector3_float_BeforeArgs
    _beforeShakeScale_GameObject_Vector3_float;

internal static event Delegates.ShakeScale_GameObject_Vector3_float_AfterArgs
    _afterShakeScale_GameObject_Vector3_float;

private static void ShakeScale_GameObject_Vector3_float(On.iTween.orig_ShakeScale_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    Del
        e
    ga te
        .
        Params _ShakeScale_GameO bj ect_ Vector3_fl
        at
    @par
    am s = new()


    {
        targ et =
        ta rg et
        , am ou nt = amount
        , time = time
    };
    if (_bf or
        Sh
    keScale_GameObject_Vector3_f loat !=
        n
    ull)
    {
        oreach Del
        e
            g
        s.Shak ec al e_GameObject_Vector3_float_BeforeA
        r
            gs toIn oke in
        _
            be fo reSha
        e
            Scale_Gam
        O
            be c
            _Ve ctor3_flo
            at GetInvo at
        i
            o
        n
        t())
        {
            t ry
            {
                _be
                    oreSha
                eSca
                e_GameObject_Vector3_float?.Invoke(@params
                    )
                    ;
            }
            ca
                c
            h
                (Exce ption

            e)
            HKM
                i
            rr rMod.oLogError(e);
        }
    }
}

target = @p ar a
ms.t ar ge t;
am ount =
    @
par
    a
ms.amount;
time = @param.time;
rig(targe
t, ao un
    t, time)
if (_a ft rShakeS ca le_GameObjec t_ Vector3_fl a
    != null)
{
    forea ch(Delegates.ShakeScale_Ga
        mO

    bj ec t_Vector
        _float
    After
        rgs toInv
    o
    ke in _afterShakeScale_GameObject_Vector3_float.G
    tInvocationList())
    {
        try
        {
            _afterShakeScale_G
                am eObject_
                ector3

            float
                Invoke(@p
                    a
                    rams);
        }
        catch (Exception e)
        {
            HKMirrorMod.DoLo
            Error(e);
        }
    }
}
}

internal static void HookShakeScale_GameObject_Hashtable()
{
    if (!HookedList.Contains(
            "
    Sh
        a
    keScal
        e
    _GameObject_Hashtable"))
    {
        HookedList.Add("
        hake
            S
        ale_GameObj
            e
        ct_Hashtab
            e");
        O
            n
        iTween.Shak
            e
        Scale_G
            meObje
        c
            _Hash
        able
            + = S ha keScale _G m
        eObj ec t_Has ta ble;
    }
}

internal static event Delegates.ShakeScale_GameObject_Hashtable_BeforeArgs
    _beforeShakeScale_GameObject_Hashtable;

internal static event Delegates.ShakeScale_GameObject_Hashtable_AfterArgs _afterShakeScale_GameObject_Hashtable;

private static void ShakeScale_GameObject_Hashtable(On.iTween.orig_ShakeScale_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Del eg at es.Pa am s_ h
    akeScale_ Ga e
        Oj e
    t_H as htable @
    p
        arams = ne
    w
    (
    )

    {
        ta rg et = t
        r
            e r
            gs = a
        rg s
    }
    ;
    if (_b foreSha
        k
    eScale
        _G ameO
        j
    ct_Hash
        t
    able ! = nul l)


    {
        forea ch(Deleg
            a

        es.S
            h
        ak eS
        a
            le_GameObject_Hasht ble BeforeArgs toInvoke in
        _b
            fore
        Sh ae Scale_G
            m
        eObjec _Ha
        s
            hta le.Get nvocationL is t())
        {
            try
            {
                _beforeShakeScal
                    _GameObj
                ct
                    Has table?.Invoke(@params);
            }
            catch (Exceptio n

            e)
            {
                HKM rrorMod D
                    o
                L
                    o
                or(e);
            }
        }
    }
    target = @params.target;
    args = @params
        .ar s;
    o
        r
    ig(targ
    e
        t, a rgs);

    i
        f(_after
            h

    ae Sc le_GameOb ec
    t
        _Has table !
        =
        n
    ul l)
    {
        f or each(De
        egates
            Shak
        Scale_GameObject_Hashtable_AfterArgs t
        o
            In vo ke
            in _afte rS akeS
            c
        ale_Gam eO b
            j
        ect_Hasht ble.Get In ocationList())
        {
            try

            {
                _a ft erS ha eScale G
                ameO b
                ject_Hashtabl e.Invoke(@params);
            }

            cat
                ch(Ex
                    c
                    eption
                    e)
            {
                HKMirrorMod Do ogError(e);
            }
        }
    }
}

internal static void HookShakeRotation_GameObject_Vector3_float()
{
    if (!Hook
    e
    dList.Contains("ShakeRotation_GameObject_Vect
    r3_float"))
    {
        HookedList.Add("ShakeRotati
        on _GameObj
        ct_Vec
            or3_f
        oat");
        On
                .iTween.ShakeRotation_GameObject_Vector3_floa
            += ShakeRotation_GameObject_Vector3_flo
        at;
    }
}

internal static event Delegates.ShakeRotation_GameObject_Vector3_float_BeforeArgs
    _beforeShakeRotation_GameObject_Vector3_float;

internal static event Delegates.ShakeRotation_GameObject_Vector3_float_AfterArgs
    _afterShakeRotation_GameObject_Vector3_float;

private static void ShakeRotation_GameObject_Vector3_float(
    On.iTween.orig_ShakeRotation_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 amount, float time)
{
    Delegates.Params_ShakeRo
        ta ti on_Game Ob ject_Vect
    o
        r3 _l oa t @p ar ams = new()
    {
        t rg et = target
        , amo un t = amoun
        t


        , tim e =
        time
    };


    if (_befo S
        hakeR tatio _
    Gm e
    bject_Vecto
        r
    3_float !=
        n
    u
        l)

    fo re ac(De le
    a
    es.Sha ke R
        o
    tation
        _m eObj
        c
    _Vector
    3
    _flo
        at _Bef
        o
    reArgs t o
        nvok
    e
        i n
        b
    eforeShakeRotation_GameObject_Vector3_fl
    at.etIn
        vo ci onList(
    )

    {
        try
        {
            _
                beforeShakeRotation_Game bje t_Vector3_float?.nvoke(@p
            ra
                catch (Exc ption e
            {
                HK irrorMod.D oL o
                    g
                Error(e);
            }
        }
    }

    t
        a
    r
    ge t = @p ar ams.target
        amount = @params.amount;
    time
        = @par a
        m
    s.time;


    g(targ t

    amo nt, ti
    e
        )

    _afterShake
        R
    otation_Ga
        m
    e
        O
    bj ec t_ Ve ct or3_floa
        != nu
    l)
    {
        foreach (Delegates.ShakeRotation_GameOb
                     j
        ec t_ Ve
            t
        o
            r3_float_A
        f
            terArgs to I
        nv ok e in _a ft erShakeRotation_GameObject_
            Vect or 3_ loat.Ge In
        v
            oca
        t
            ionLi st())
        {
            try
            {
                _afterS ha eRotati on _Game
                    Obje ct_ Ve ctor3_
                    f
                loa.Invo ke(@params);
            }
            catch (Except
                   on

            e)
            {
                HKMirrorMod.DoL gError(e)
            }
        }
    }

    internal static void HookShakeRotation_GameObject_Hashtable()
    {
        i
        f(!HookedList.ontains("ShakeRotation_GameObject_Hashtabl
        e"        ))
        {
            Hoo
                edList
            Add("
            hakeRotat
                i
            on_GameObject_Hashtable");
            On.iTween.ShakeRot
            tion_GameObject_Hashtable += ShakeRotatio
            n_ GameObj
            ct_Has
                tabl
                ;
        }
    }

internal static event Delegates.ShakeRotation_GameObject_Hashtable_BeforeArgs
    _beforeShakeRotation_GameObject_Hashtable;

internal static event Delegates.ShakeRotation_GameObject_Hashtable_AfterArgs
    _afterShakeRotation_GameObject_Hashtable;

private static void ShakeRotation_GameObject_Hashtable(On.iTween.orig_ShakeRotation_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    D el
    gates.Pa
        am_ Sh akeRotatio _G ameObject_ as htab e @params = n ew
    (
    )
    {
        target = t ag e
            t, ar gs = a rgs
            ;
        if (_ efore hakeRotation_GameObject_Ha
        s
            h
        table
            !
            = null)
        {
            fo re ach(D el g
            ates.Shak
                t
            ai o
            _Gam eO bject_H
                a
            shtable_Be
                f
            o
                r
            eA rg s to Invoke
                i
            _befo re
            S
                hakeRo
            ta tion_G
            mO bj ect_ Ha sh
                t
            able.G
                et Invo
                a
            ionList
            (
            ))
            {
                t ry
                {
                    _befor e
                    S
                        akeRot at i
                    n_Ga
                        m
                    eO bj
                    c
                    t_Hashtable?.Invoke(@params);
                }
                catch (Ex pt
                    on e
                    )
                {
                    HKMirr
                        r
                    Mod.DoLog
                        E
                    rror(e);
                }
            }
        }
        target = @param.target
        args @p
        rams.a rg s;
        or
        g(target, args);
        if (_afterShakeRotation_
        G
            am Object_Hashtabl
        e
            != n ull)
        {
            foreach (Delegates.ShakeRotat on_Game bject_ ashtab
            l
                e_A ft erAr
            g
                s to Invok
                in _after
                h
            ae R
            tation_Game
                O
            bject Hasht
            a
                b
            l
            e.Ge tI nv oc ationLis
                ())
            {
                ry
                {
                    _afterShakeRotation_GameObject_Hash
                        t
                    ab le.I
                        v
                    o
                    ke(@params
                        )
                        ;
                }

                catc
                    h(E xce pt ion e)
                {
                    HKMirrorMod.DoLogErr
                    or(e);
                }
            }
        }
    }

    internal static void HookPunchPosition_GameObject_Vector3_float()
    {
        if (!Ho kedList.C ntains "Punc        Po
        ition_GameObjec t_Vector3_float")
            ){
            H oo kedList.dd("Pu
            chPos
                tion_Game
            O
                bject_Vector3_float");
            On.iTween.PunchPosi
            ion_GameObject_Vector3_float += PunchP
            os ition_Ga
            eObjec
            _Vect
                r3_float;
        }
    }

internal static event Delegates.PunchPosition_GameObject_Vector3_float_BeforeArgs
    _beforePunchPosition_GameObject_Vector3_float;

internal static event Delegates.PunchPosition_GameObject_Vector3_float_AfterArgs
    _afterPunchPosition_GameObject_Vector3_float;

private static void PunchPosition_GameObject_Vector3_float(
    On.iTween.orig_PunchPosition_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 amount, float time)
{
    Dele at es.Params_PunchPosition_GameObject
        Vector3_
    loa @p rams = new()
    {
        ta ge t = target
        , amount
            = amount,
        time =
            t
        im e
    };
    i f(_beforePunchPosi ion_GameO
    jec _Vector3_
    f
        l
    oat !=
        null)
    {
        fo re ach(
            e
        legates.P
            h
        Ps i
        ion_GameObj
            e
        ct _V ec t3 _f
            l
        o
            a
        t_ Be fo re Args t
        I
        voke in

        _befor
            eP unch
            o
        ition_Ga me Obje
            ct _V ec to
            r
        3_flo at.
            G
            tInv
        o
            ca io n
        i
        st())
        {
            tr y
            {
                _beforePunchPo si tion_GameO
                    je c
                    ec tor
                3_ fl oat?.In

                o
                    ke(params)
            }

            ca ch(Exception e)
            {
                HKMirrorMod.DoLo
                    Er ro r(e);
            }
        }


        target = @pa ra ms.target;
        am ount = @param
        s
            .amount;
        time = @
        p
            a
        ra ms.tie;
        orig(target, amount, time);
        if (_afterP
        u
            nchPos
        i
            tion_Ga
        m
            eO bj ect_ Ve
            t
        or3 _f loat !
        u
            l)


        foreach (D
                     e
        legates.Pu
            n
        c
            h
        Po si ti on _G ameObjec
        _Vecto
        3_fl
        at_AfterArgs toInvoke in _afterPunchPositi
            o
        n_ Ga eO
            j
        e
            ct_Ve ct or3_f
        l
        oat.GetI
            n
        vocationList())
        {
            try
            {
                _afterP nchPosit
                ion_ Ga meObject_V
                    e
                cto
                    r
                3_float.Invok e(@params);
            }
            catch (Excep ion

            e)
            {
                HK Mirror
                M
                od.DoLogError(e);
            }
        }
    }
}

internal static void HookPunchPosition_GameObject_Hashtable()
{
    if (!Ho
    kedLis
        .Cont
    ins("Punc
    h
        Position_GameObject_Hashtable"))
    {
        HookedList.Add
        "PunchPosition_GameObject_Hashtable");
        On.iTw
            ee n.PunchP
            sition
        GameO
            ject_Hash
        t
        able += PunchPosition_GameObject_Hashtable;
    }
}

internal static event Delegates.PunchPosition_GameObject_Hashtable_BeforeArgs
    _beforePunchPosition_GameObject_Hashtable;

internal static event Delegates.PunchPosition_GameObject_Hashtable_AfterArgs
    _afterPunchPosition_GameObject_Hashtable;

private static void PunchPosition_GameObject_Hashtable(On.iTween.orig_PunchPosition_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Del
        egat
    s.
        am s_ Pu
        nc hP osition
    G
        ameOb ec _H
    a
        shtable @ params = new()

    t rget = t ar get, args = a rgs
}

;
if _befo re un
    os ition_GameObject_Hashtable != null)
{
    for ac
        h
        (Dele gates.
    PunchP
        os to n_ Game Oj ec t_Hashtable_BeforeArgs toInvoke in _beforePu
        n
    ch ositi
    o
        n_G met _Hash
    a
    ble.GetIn
        o
    ct i
    nList())
    {
        t
        ry
        {
            _b efore
            P
                u
            n
                ch Po si ti on _G am eOb
                e
            t_Hasht
                a
            ble?.I

            nv oke(@p
                r
                ms);
        }

        c
            atch(
                Ex cept
            )
        {
            H KM i
                r
            rorM
                oo L
                o
            gError
        }
    }
}


arg t =
    ms.target;
a rg s = @params.a rg s;
orig(target, args) if
    (_a t
    er Pu chPosit
o
    n_GameObj
e
ct_Hashtable != null)
{
    foreac(De legates.Pun ch Positio
    _Gam eObje
    t_
    ashtable_AfterArgs toInvoke in _ afterPunchPos
    i
        tion_G am eObj ec t_Hasht
    a
        b
    le.G etIn vo cationList())
    {
        try
        {
            _af terPunchPosition _G ameO
            b
                ject_H
            a
            shtable
                .
                In vo ke(@p
            r
                ams);
        }

        cat h
        E x
        eption e)

        {
            HKMirrorM
                o
            d
                .
                Do Lg Er ro r(e);
        }
    }
}

internal static void HookPunchRotation_GameObject_Vector3_float()
{
    if (!Hooke
    d
    List.Contains("PunchRotation_GameOb        j
    ect_ Ve ctor _float"        )
    {
        Ho kedList.Ad d("PunchRotation_GameObje
        ct_V ec
        t
            or3_fl
        o
            at");
        On.Tween.PunchRotation_GameO
            je
        t_Vector3_flo at += Punc Rotatio _Game be ct _V ector3_f
            oat;
    }

internal static event Delegates.PunchRotation_GameObject_Vector3_float_BeforeArgs
    _beforePunchRotation_GameObject_Vector3_float;

internal static event Delegates.PunchRotation_GameObject_Vector3_float_AfterArgs
    _afterPunchRotation_GameObject_Vector3_float;

private static void PunchRotation_GameObject_Vector3_float(
    On.iTween.orig_PunchRotation_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 amount, float time)
{
    De
    egates.
        a
        ams_ Pu nh Ro tation
    G
        meObje cV e
    tor3
        f
    oat @ p
    ar am
        = new()
        {
            target = target, amount = a mount, t i
            e =
            ti me
        };
    if
    _
        before Punc
        h
    Rotai on _Gam Object_Vector3 _f loat != nul l)
    {
        f oreac
            (Delegat s.

        nchRotat io n_GameO bject_Vec or3_float_Bef or eArg
            s
        t oInvoke in _beforeP un c
            hR oa tion _m eObject_ Ve tor3_float GetIn vo catio Li st())
        {
            try


            {
                _befo
                    r
                ePunchR
                    o
                ta ti on_Ga
                    e
                Object_ ec
                or 3f l
                at?.Inv ke(@p
                a
                    rams);
            }

            cat
                c
            h
                (E xc ep ti on e)
            {
                HKMirro
                    r
                Mod.Do
                    Lo gErr
                    r
                e);
            }
        }
    }

    tar
        ge = p
    a
    rams.t
    a
        get;


    am ou
        t
            = @params.amount;
    ti me = @params.time;
    or i
    ar
        et,
        am ou nt, tim
        )
    ;
    if (_af
    t
        erPunchRotation_GameObject_Vector 3_ float != n ul l

    {
        fore
            (D
        legates Pu nchR tation_GameO bj ect_Vector3_ fl oa t_ A
        f
            terArgs toInvoke n

        _a fe Pun ch otation_GameObject_Vector3_float.Get In voca
            t
        io Li st()
            )

        {
            try
            {
                _ af te rPunc h
                    o
                tation_Ga
                    e
                Oj e
                t_Vector3_f
                    l

                oat.Invok e(
                    @

                p
                    a
                ra ms );
            }

            c atch(Ex
                eption
                e)

            HKMirrorMod.DoLogError(e);
        }
    }
}
}

internal static void HookPunchRotation_GameObject_Hashtable()
{
    if (!HookedL
    ist.C on tains("Pun
    ch ot
    a
        tion GameOb ect_Hashta bl e"))
    {
        HookedList.A
        dd("        Pu
        n
            chRota
        t
            ion_GameOb ect_Hashtable");
        On.iTween.P
            nc
        Rotatio n_GameObjec _Hashta le += unchRota
        t_ Ga me Object_H
            shtabl
            ;
    }
}

internal static event Delegates.PunchRotation_GameObject_Hashtable_BeforeArgs
    _beforePunchRotation_GameObject_Hashtable;

internal static event Delegates.PunchRotation_GameObject_Hashtable_AfterArgs
    _afterPunchRotation_GameObject_Hashtable;

private static void PunchRotation_GameObject_Hashtable(On.iTween.orig_PunchRotation_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    D
        el eg ates.Para
        m
    s_PunchRotation_GameObject_Hasht ble @para s =
        ew()
    {
        t
            rge
        t
        ta rget,
            a
        gs = ar g
    }
    ;
    if
    b
        forePun c
        Rota
    i
        Ga meOb j
    ec t_
    a
    shtable != null)
    {
        foreach (Delegates.Pun ch Ro tat
        on
            meOb
        je cH ashtabl
            _B fo reArgs
        t
            on vo ke i _beforePunc hR otation_GameO bj ec t_ Hashtable.Ge
            In oc tion
            is
            )
        {
            try
            {
                _bef re unchRotation_Ga meObject_ Ha sht
                able
                    ?.In oke(@ pa rams);

                c at

                c
                    h
                    (Ex cept io n e)
                {
                    HKMirrorMod.DoLogEr or();
                }
            }
        }
        t
        arge
            t
                = @ ar am
        s
            .target
            ;

        a rg s = @
        a
        rams.args
            oi g
            target, arg
        s
            );
        if (_aft
        e
            r
        P
            un ch R
        ion_Ga
            e
        bject_H
            a
        shtabl
        e != nul
            )
        {
            forea ch
            (Deleg
                at

            es.P
                n
            hR ot at ion_
            G
                ameO
            bj ect_
            H
                ashtab
            l
                _After
            A
                gs t
                o
            In vo
            e
                in _aft er PunchRo ta tion_Gam eO bject_Hasht bl e.GetInvo
                ai on L
            i
                )
            {
                try
                {
                    _ af terPunc
                        h
                    Rot at io n_ GameObject_Hashtabl.Invoke @pa
                    ra s);
                }
                catch

                Exceptio
                e

                {
                    HKMirrorMod.Do Lo gError(e;
                }
            }
        }
    }

    internal static void HookPunchScale_GameObject_Vector3_float()
    {
        if (!HookedLi st.Con ta ins
            ("Pu
        n
            chScal
        e
            _GameOb
        j
            ec t_ Vecto
        3
        _float"))


        Ho k
        dList.Add("        Pu
        n
            chScale_Ga
        m
            e
        O
            bj ec t_ Ve ct or3_floa
        ");
        On
            iTwe
        n.PunchScale_GameObject_Vector3_float
            +
            = Pu nc
            S
        c
            ale GameObj c
        t_Vec or3
        _
        float;
    }
}

internal static event Delegates.PunchScale_GameObject_Vector3_float_BeforeArgs
    _beforePunchScale_GameObject_Vector3_float;

internal static event Delegates.PunchScale_GameObject_Vector3_float_AfterArgs
    _afterPunchScale_GameObject_Vector3_float;

private static void PunchScale_GameObject_Vector3_float(On.iTween.orig_PunchScale_GameObject_Vector3_float orig,
    UnityEngine.GameObject target, UnityEngine.Vector3 amount, float time)
{
    Del
    gate
        .Params_PunchScale_GameObject_Vect
        o
    r3
        _
    float
        @
        params = new()
    {
        target = target, amo
        nt =
        mount
        , tim
        e
        = time
    };
    if (_b
    e
        orePun
    c
        hScale_Game
    O
        bject_Vec
    or3_
        fl oa t != null

    {
        f oreach(Delegates.P nc
        hScale_GameO bj ect_Vec
            or3_flo
        t
            Bef
        o
            rA rg s toIn
        o
        e in _b e
        oreP
            n
        hScal e
        _G me
        b
            ject_Vector _float.GetInvocationList())


        t
        y
        {
            _b ef orePunc hS a
                le_GameOb
            j
                ect_Vec tor3_float?.Invoke(@params);
        }
        catch (E
        ception
            )
        {
            HKMirror Mo d.DoLogEr ro r(e);
        }
    }
}

target = @pa
r
ams.ta ge t;
a ount
    =
    @p aa ms.am ou nt;
time = @ pa rams.time;
orig(ta ge, amount, tim
e
    )
;
if (_
a
    fte Pu ch
S
    ca l_ Ga meOb
    ec t_Vect
    la t
    != nu ll )
{
    f or

    e
        ach(D elegat.

    Pu nc ha e_Gam
    Oc _V
    e
        ctor3_
    fl oat_
    f
        erArgs
    t
        oInv
    ok e in

    _after
        P
    nchS
        c
    al e_G m
        eObje ct_Vector3_fl at.GetInvoca ti onList())
    {
        ry
        {
            _a
                ft er PunchSc
            l
                e_GameObj
            e
                ct_Vector3_fl at.Invoke(par ms);
        }
        catch (Exce
        tion e)
        {
            KMirrorMod.DoLo gE rror(e);
        }
    }
}
}

internal static void HookPunchScale_GameObject_Hashtable()
{
    if (!H oo kedList.C ontains("P        unchSc
    a
        le_ am eOb
    j
        ec t_ Hashta le"        )
    {
        Ho
            k
        e
            st Add("Punch        Sc        al        e_        GameObject
        _
            H
        a
            sh ta b
            ;
        On.iTwee
            .Punch
            cale
        GameObject_Hashtable += PunchScale_GameObj
        e
            ct _a sh
        a
        b
            le;
    }
}

internal static event Delegates.PunchScale_GameObject_Hashtable_BeforeArgs
    _beforePunchScale_GameObject_Hashtable;

internal static event Delegates.PunchScale_GameObject_Hashtable_AfterArgs _afterPunchScale_GameObject_Hashtable;

private static void PunchScale_GameObject_Hashtable(On.iTween.orig_PunchScale_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Params_PunchScale_Game
    bject_Hashtable @params = new()
        {
            target =
                ta rget
            ,
            rgs =
                rgs

            ;
            if (_beforePunchScale_GameObject_Has
            h
            ta
            b
            le !=
            n
            ull)
            {
            foreach (Delegates.PunchScale_GameOb
            ect_
            H
            shtable_Bef
            o
            reArgs toI
            voke i
            n
            _beforePunc
            h
            Scale_G
            meObje
            c
            _Hash
            able
            .G et Inv cation
            Li t( )
            {
            try
            {
            _before un hScale_GameO ject_ as tab
            e?.Invo
            p
            ram
            s
            )
        }
        catch
    E
        ception
        )
    {
        H
            M
        rrorMo
            d
        DoL g
        ro r(e);
    }
    }

    ar get = @para ms.target;
    args = @params.args;
    ori
        (t
    rget
        , ar gs);
    if _
        afterPunc
    h
    Scale_GameObject_Hashtable != null)
    {
        foreach (De le ates.Pun
            hS
        ale_GameObje ct_Hashtable_AfterArgs toInvoke in

        _afterPunchScale_
            G
        a
            me Ob jecH ah table.Ge tInvocat io nList())
        {
            tr y
            {
                _afterP nchSca e_
                    G
                a
                    meObje
                c
                t_H as htab
                l
                e.In voke(@
                p
                    m
                s);
            }
            cat
                h

            ce tion e)
            {
                HK
                    M
                irr orMod.D Lo E
                    r
                ro r(e
                ;
            }
        }
    }

    internal static void HookGenerateTargets()
    {
        if (!H
        oo kedL
        s
            .Contai
            n
        s("G
        en erae Tar et
        s) )
        {
            Ho
                o
            edLi t.Ad d(
                G
                    ener

            at eTargets");
            On.iTween.GenerateTargets +=
                Ge
            erat
            rg ets;
        }
    }

internal static event Delegates.GenerateTargets_BeforeArgs _beforeGenerateTargets;
internal static event Delegates.GenerateTargets_AfterArgs _afterGenerateTargets;

private static void GenerateTargets(On.iTween.orig_GenerateTargets orig, iTween self)
Delegates.P
    a
rams_Gener
    a
t
    e
Ta rg et s @p arams =
    ew()


sel
    = self
};
if (_beforeGenerateTargets
!
= nu ll


{
    foreach (D
                 e
    legates.
        G
        enera teTarg et s_BeforeArgs toInvoke in
    _bef or eGenerateT
        a
    rg et
    s
        .Get In vocatio nL ist())
    {
        try
        {
            _beforeGe
                nera te
                T
            argets
                ?
                .I vok(@params);
        }
        catch (Exception
               e)

        {
            HKMirro rMod.DoLogError(e)
        }
    }
}
ef = @ params.s
    lf;
or
g(sel
);
if (_a
f
terGenerateTargets != null)
{
    foreach (Delega
                 es.GenerateTargets_AfterArgs toInvoke in
    _a fterGene
    ateTar
    ets.G
        tInvocati
    o
    nList())
    {
        try
        {
            _afterGenerateTargets.Invok
                (@params);
        }
        catch (Exception e)
        {
            HKMi
                rr orMod.D
                LogErr
            r(e)
        }
    }
}
}

internal static void HookGenerateRectTargets()
{
    if (!HookedList.Contains("
    ener
        a
    eRectTarget
        s
    "))
    {
        Hook
        dList.A
        d("Gen
        e
            rateRectTar
        g
            ets");
        On
            iTwe
        en.G en erateRec
            t
        Targe ts += GenerateRectTargets;
    }
}

internal static event Delegates.GenerateRectTargets_BeforeArgs _beforeGenerateRectTargets;
internal static event Delegates.GenerateRectTargets_AfterArgs _afterGenerateRectTargets;

private static void GenerateRectTargets(On.iTween.orig_GenerateRectTargets orig, iTween self)
{
    Del eg ates.Params_GenerateRectTargets @param s = n e
        w
        ()
    {
        s
            elf = s
        e
            lf
    }

    ;
    if (_b f
        oreGenera
    e
        Rc t
    argets != n
    u
        ll)
    {
        fore
            a

        c
            h
            (De le ga te s.Gen e
                e
                ectTarg et s
                _Before Ag s to
                n
                ok i n _b
                e
                fore
                rate ectTar
                g
                ts.G et I
                nv oc
                t
                ionLi st ())
        {
            try

            _before en rateRect Ta rgets?.I

            vo
                e(@p ra s);
        }

        cath
            (Excep tion

        e)
        {
            HKMirrorMod.D oLogE rror(e);
        }
    }
}

s el = @par am.s
    lf;
orig(el);
if (_afterGenerateRectTargets != null)
{
    foreach Delegat eG en er ateR cT argets_Afte rA rgs toInvoke in _afterGenerat
        e
    RectTa
        r
    gets.Get
        I
    nv oc ation
    t())
    {
        tr {
            t
                rGenerateRe
            c
            tTargets.I
                n
            v
                o
            ke(@ pa ra ms );
        }

        cat
            h(Exc
                ptio
                e)
        {
            HKMirrorMod.DoLogError(e);
        }
    }
}


}

internal static void HookGenerateColorTargets()
{
    i f(!HookedLi t.Contai
    ns("        Gn        erat        Color
    T
        arg
    e
        ts")        )
    {
        HookedLis t.Ad d("GenerateColorTarge        s");
        On iTwee.G
        enerateColorTargets += GenerateColoT ar g
            ts;
    }

internal static event Delegates.GenerateColorTargets_BeforeArgs _beforeGenerateColorTargets;
internal static event Delegates.GenerateColorTargets_AfterArgs _afterGenerateColorTargets;

private static void GenerateColorTargets(On.iTween.orig_GenerateColorTargets orig, iTween self)
{
    De legates
    Params
        Gene
    ateColorTargets @params = new()
    {
        s
        el
        f
        = sel
        f
    };
    if (_beforeGenerateColorTargets != n
    ll)

    {
        foreach (De
                     l
        egates.Gen
            rateCo
        l
            rTargets_Be
        f
            oreArgs
        toInvo
        k
            in _
            efor
        eG en erat Color a
        rgets.GetInvocationList())
        {
            try
            {
                _ bef or eGenea te ColorT
                r
                ets
                    ?
                    .n vo ke(@pa
                    a
                    s);
            }

            c a
            ch(xc
            p
                e)
            {
                KMir ro M
                d.DoL o
                gE ro
                (
                    e);
            }
        }
    }
    sel f = @params.se lf;
    orig(sel);
    if (_af
    er
        ener
    ae Co lorTarg
        t
    s != null
        )

    {
        foreach (Delegates.Gene ateColor ar ets_ Af terAr
        s toI vo e
            in
        _aft rGene at ColorTa rgets.et InvocationList())

        {
            try
            {
                _afterGene
                    r
                a
                    t
                or ar gt s.Invoke(@params);
            }
            catch (Exception e)
            {
                H
                    K
                M
                    irrorM
                o
                d.DoLog
                    E
                rr or(e);
            }
        }

        internal static void HookGenerateVector3Targets()
        {
            f
                (!Ho ok edL
            i
            st.Con
                ta ins("Gn        e
            eVector
            3
            Target
                s"        ))
            {
                H
                    okedLis
                t
                    .Add
                        ("        Gene
                r
                    ateVec
                t
                    r3Targ
                e
                    s");        
                O n.iT we
                n
                    .G en erateVecto r3 Targets += G nerateVeo 3Tar et
                    ;
            }
        }

internal static event Delegates.GenerateVector3Targets_BeforeArgs _beforeGenerateVector3Targets;
internal static event Delegates.GenerateVector3Targets_AfterArgs _afterGenerateVector3Targets;

private static void GenerateVector3Targets(On.iTween.orig_GenerateVector3Targets orig, iTween self)
{
    D el egates.P
        rams_G
    nera
    eVector3Targets @params = new()
    {
        s
        el f =
        e
        l
        f
    };
    if (_
    b
        eforeGen
    e
        rateVecto r3 Targets != n ull)
    {
        foreac
            h(D el

        ega es.e ne
        r
            ate
        V
            ector3Targets_BeforeArg s to In voke _b ef
        o
            reGene a
            teVect r3Tar ets.GetInvocationLis
            ()

        {
            try
            {
                _beforeGen er ateVecto 3T ar ge
                t?.I nv oke(@par
                    ms);
            }
            catch
                (Exceptio
                 n

            e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }
    se
        f = @params.self;
    orig(self);
    if (_aft
    er Generate
    ector3
    arget
        != null)


    {
        foreach (Delegates.GenerateVector3Targe
                     s_AfterArgs toInvoke in _afterGenerat
            eV ector3T
        rgets.etIn
        ocationList())
        {
            try
            {
                _afterGe
                    n
                er
                    a
                teVect
                    o
                r3Targets.Invoke(@params);
            }
            catch (
                xcep
                t

            on e)
            {
                HK
                    M
                irrorMod.D
                    LogErr
                o
                    (e);
            }
        }
    }
}

internal static void HookGenerateVector2Targets()
{
    if (!ookedList.Conta
    ns("Gen
    r
        teV
    e
        co r2 Target
    ")        
    {
        Hook e
        st.
            d
            Genr te Ve
        t
            or2Targets");
        On.iTween.GenerateV ec tor 2T ar
        et += Ge
        ne ra teVecto
        2
        Targets;
    }
}

internal static event Delegates.GenerateVector2Targets_BeforeArgs _beforeGenerateVector2Targets;
internal static event Delegates.GenerateVector2Targets_AfterArgs _afterGenerateVector2Targets;

private static void GenerateVector2Targets(On.iTween.orig_GenerateVector2Targets orig, iTween self)
{
    Deleg
    ates
        .P aram _
        Ge erate V
    ctor
    2
    Ta rg
    t
    s @params = ne w()
    {
        self = self
    }
    ;
    if (
        be
    oreG
        en er ateVect
    r
    2Targets
        !
        = nu l)

    foreach (Delegates.GenerateVector
                 Targets_
    ef
    Args toInvoke in _ be fo reGenerateVector2T
    a
    rgets.GetInvocati
        o
    n
        Li st())
    {
        try
        {
            _beforeGener at eV ector2T ar gets?.Invo ke(
                    @
                    params
                )
            ;

            ca t

            c
                h(E xcep i
                )
            {
                HK
                    i
                ro r
                od.Do LogError
                (
                    e);
            }
        }
    }
    se
    l
        f
            = @p ar am s.self;
    or
    g(self
        ;
    if
        (_afterGenerateVect
    o
        r2 Tg et

    !
        = null)
    {
        fo e
        ach(De le g
        a
        tes.GenerateVecto r
        2
        Ta rg ets _A terArg
            s
        to
            In ok e in _afterGen
            erat eV
            e
        ctor2T
            a
        rgets.GetInvoca
            ion ist ))
        {
            t ry
            {
                _f tr Ge nerateVe
                tor2Ta
                gets.nvoke(@pa
                r
                    ams);
            }
            catch (Exception e

            {
                HKMirrorMod.DoLogE
                    rr or(e);
            }
        }
    }
}

internal static void HookGenerateFloatTargets()
{
    if (!HookedLis
    t.Contain
        ("Gene
    ateF
        oatTargets"))
    {
        Ho
            o
        kedLis
        t
            .Add("GenerateFloatT
        rget
            s
            );
        On.Twee
        n.enerateFl
            o
        at Ta rgets += Ge ne ra te FloatTa
            gets;
    }

internal static event Delegates.GenerateFloatTargets_BeforeArgs _beforeGenerateFloatTargets;
internal static event Delegates.GenerateFloatTargets_AfterArgs _afterGenerateFloatTargets;

private static void GenerateFloatTargets(On.iTween.orig_GenerateFloatTargets orig, iTween self)
{
    De
        l
    e
        g
    at es.P ar ams_
        e
    erateFl
        o
    at ar
    ge ts p
    a
        rams =
            n ew
        )

    {
        s elf = self
    }
    ;
    if (
        be
    oreG
        en er ateFloa
    T
        argets =
            n
    ull)
    {
        foreach (Delegates
                     Generate
        lot Targets_Bef reArgs oIn
        v
        ok in _befor eG enera
            t
        e
            Fl oa tTar ge ts.GetInvocationList(
            )
            )
        {
            tr

            {
                _befo
                    r
                eG en erate
                    l
                oatTarget
                    ?
                    .n v
                    ke(@p arams);
            }
            atch(E c
            e
                p
            t
                e )
            {
                H KMirrorM
                d.DoLo
                Erro
                    (e);
            }
        }
    }
    self = @para
    m
    s.se lf


    o
    rig(self);


    if (_aft
    e
        rG nerat eF oatTargets ! = null )
    {
        for ach(
            De le a
        t
        es.Ge ne rateFloatTar ge ts_
            Afte rAr s toI nv
        o
        ke in _after Ge nerateF
            oa
        Targets.GetInvocati
        oL is t( ))
        {
            try
            {
                _aft
                    rGene
                ateFloatT
                    a
                rgets.Invoke(@params);
            }
            catch
                (Exception e)
            {
                HKMirrorM
                od.DoLogEr
                or(e);
            }
        }
    }
}

internal static void HookGenerateColorToTargets()
{
    if (!Hooked
    Li st.Cont
    ins("G
    nera
        eColorToTargets"))

    {
        H
            o
        okedLi
            s
        t.Add("GenerateColorToTa
        gets
        "
            ;
        On.i
        ween
            .G en erateColo
            r
        ToTargets += GenerateColor
        oTarget
            ;
    }
}

internal static event Delegates.GenerateColorToTargets_BeforeArgs _beforeGenerateColorToTargets;
internal static event Delegates.GenerateColorToTargets_AfterArgs _afterGenerateColorToTargets;

private static void GenerateColorToTargets(On.iTween.orig_GenerateColorToTargets orig, iTween self)
{
    Delega
        t
    e
    s
        .P ar am s_ Gene
        a
    eColorT
        o
    Ta ge
    ts @pa
    r
        ams
            =
            n w(


    {
        self = self
    }
    ;
    if (_be
    or
        Gene
    ra to lorToTa
        g
    ets != nu
    l
        l)
    {
        foreach (Delegates.Gener
                     teColorT
        Ta
            gets_BeforeArg s toInvok e in _
            b
        efor eG enerateCol r
        T
            o
        Ta rg ets.Gt In ocationList())
        {
            try
            {
                _b ef or eG en
                    e
                rateCol
                    o
                rT oT arge s
                    .
                    Invo e(@pa m

                s;
                    catch (Exc
                e
                    ption e)

                {
                    H
                        KM ir ro rd.D oLogErro
                    (e);
                }
            }
        }

        elf = @params.self;
        orig
        (
            se lf);

        i
            f
            (_afterGe
                n

        erateCo lo
        r
        ToTargets != nu ll )
        {
            fo re
            ach(D elegates.G
            e
                ner
            a
                teColorToTargets_After
            A
                rg s
                t
            oInvok
            e in _afterGenerateColo
                To
            argets.GetInvocat on
            Ls t())
            {
                try
                {
                    _after
                        enera
                    eColorToT
                        a
                    rgets.Invoke(@params);
                }
                catch

                Exception e)
                {
                    HKMirrorMod
                        .D oLogErro
                    (e);
                }
            }
        }
    }

    internal static void HookGenerateAudioToTargets()
    {
        if (!HookedList
                .C ontains
        "Gener
        teAu
            ioToTargets"))
        {
            Hoo
                k
            ed
                L
            ist.Ad
            d
                    ("GenerateAudioToTargets"
                ;
            On
                .
                Tween.
                ener
                at eu dioToTarge s += Ge erate udioToTargets;
        }
    }

internal static event Delegates.GenerateAudioToTargets_BeforeArgs _beforeGenerateAudioToTargets;
internal static event Delegates.GenerateAudioToTargets_AfterArgs _afterGenerateAudioToTargets;

private static void GenerateAudioToTargets(On.iTween.orig_GenerateAudioToTargets orig, iTween self)
{
    Delegates P
    a
        rams_ Genera eA u
        d
    io To Ta rg ets
    p
        rams =
            n
    ew()

    {
        se
        l
            f =
                s
        el f
            ;

        if _be oreGe nerateAudioTo ar g
        ts
            != nu l)
        {
            foreac
                (Delegate
            s
                .GenerateAudioToTargets_Befor A
            gs toInvo e i _beforeGenerateAudioToTar
                g
            ets.GetInvocation
                L

            i
                s()
            {
                tr y
                {
                    _beforeGe ne ra tu dioToTarg
                        e
                    ts?.In

                    v
                        oke(@pa
                            r
                            am s);
                }
                c
                    t
                ch(Excep
                i
                    o e

                {
                    HK MirrorM od.
                        D
                        oLogEr ro r(e)
                        ;
                }


                el f = @params.elf;

                o
                    ig(s
                        lf);

                if (_afterGenerateAud
                i
                    oT oa ge s
                    != null)
                {
                    f
                        o

                    reac h(De
                        l
                        egats.Generat eA udioToT a
                        rget s_ ft rArgs to In v
                        oke i
                        n _aft er Generat eA dioToTa rg t
                        s.Ge tI
                        n
                        vocat on L
                        ist())
                    {
                        try
                        {
                            _afterG
                                ne
                            ateAudioToTargets.Invo e@ pr am s);
                        }

                        ca
                            ch(Ex
                                eptio
                                e)
                        {
                            HK
                                M
                            irrorMod.DoLogError(e);
                        }
                    }
                }
            }

            internal static void HookGenerateStabTargets()
            {
                if (!
                    ookedList
                        .Contains("GenerateStabTargets"))
                {
                    HookedList.Add("GenerateSt
                    ab Targets
                        );
                    On.Twee
                            .GenerateStabTargets +
                        =
                        G
                    e
                        nerate
                    S
                        tabTargets;
                }
            }

internal static event Delegates.GenerateStabTargets_BeforeArgs _beforeGenerateStabTargets;
internal static event Delegates.GenerateStabTargets_AfterArgs _afterGenerateStabTargets;

private static void GenerateStabTargets(On.iTween.orig_GenerateStabTargets orig, iTween self)
{
    Delegate.
        P
        ms _Gen er ateStabTargets @params = new()


        {
            self
                = sel
        }
        ;

    i f _befor G
    enerateSt ab a
        re t
        != null)
    {
        foreach (D
                     e
        l
            e
        ga te s.Ge ner t
            S
        abTarge
            t
        s_Be
            fo reAr
            g
        s to
        I
        nv ok
            in _b eforeGenera eStabTa gets.G In
        ocat
        iL is t())
        {
            r
            y
            {
                _befo
                    r

                eGenerateStabTargets? Invoke(@par
                    ms);
            }

            c
                tc
                (Exception e)
            {
                HKMirr rMod.
                    Do ogErr r(e);
            }
        }
    }


    s
    el f = @p ar ams.self;
    o rig(s elf);

    i f(_afterGe
        n

    erateS
        t
    abTarge
        t
    s != null

    {
        forea ch(D
            l
            ea t
            s.G en erateSta
            b
            Ta gets_Af te A
            r
            g
            s tn vo ke i n _after
            enerat
            Stab
            argets.GetInvocationList()
        )

        {
            t ry
            {
                _afterGene
                    r
                ateSta Ta
                r
                gets.nv ke(@
                pa rams);
            }

            ca ch(E xcepti n
                e)
            {
                HKMirrorMod Do LogError(e
                );
            }
        }
    }
}

internal static void HookGenerateLookToTargets()
{
    if
        (o ke dL ist.Cont
    ins("G
    nerat
        LookToTar
    g
        ets"))
    {
        HookedList.Add("Generate
        ookToTargets");
        On.iTween.Gen
            er ateLookT
        Target
            += G
        nerateLoo
        k
            ToTargets;
    }
}

internal static event Delegates.GenerateLookToTargets_BeforeArgs _beforeGenerateLookToTargets;
internal static event Delegates.GenerateLookToTargets_AfterArgs _afterGenerateLookToTargets;

private static void GenerateLookToTargets(On.iTween.orig_GenerateLookToTargets orig, iTween self)
{
    Del
        g
    ates.Para
        m
    s_GenerateLookT Targets @ arm s =
        ew()
    {
        el
            = self
    }
    ;
    if (_beforeGe ne rateL
    o
    okToTargets != n ull)


    {
        f or each(Delegates.GenerateLookToTarge
        t
            s
        _Befor
            eA rg s toInv ok e in _be fo r
            G
        enerateo ko T
            rge s.GetI vo
        c
        ationList() )
        {
            tr y
            {
                _b efo re G
                r
                    teLookT
                o
                    Targ
                et s?.n
                v
                oke(@ ar ams;
            }
            catch (Exception e )
            {
                HKM
                    rM o
                    .DoL
                    og Er ror(e);
            }
        }
        se lf =
            @
            params.self;
        or ig(self);
        if (_afte rG ner ateLoo
            To
        argets != null)
        {
            f oreach(D elega
            t
            es.Generat LookToT
            a
                r
            ge ts _Aft eA rgs toInvoke in _ fterGen rate
                Lo kToTa
                r
            gets.G etI
            n
                vo ca tionL
            s
            t())
            {
                tr
                    f
                erGenerateL
                    o
                okToTar gets
                    .
                    I
                    n
                vo ke @p ar am s);
            }

            ca
                ch(Ex
                    epti
                    n e)
            {
                HKMirrorMod.DoLo
                    g
                Er ro r(
                    )
                    ;
            }
        }
    }
}

internal static void HookGenerateMoveToPathTargets()
{
    i f(
        !Ho
    o
    kedList.Contains "Gene        ra        e
    Mo ve
    To athTa r
        g
    ets"))
    {
        Ho ok edList.Ad
            ("
        enerateMoveToPat Targ
        e
            O n.iTween
            Genera
        eMove
            oPathTarg
        e
        ts += GenerateMoveToPathTargets
    }
}

internal static event Delegates.GenerateMoveToPathTargets_BeforeArgs _beforeGenerateMoveToPathTargets;
internal static event Delegates.GenerateMoveToPathTargets_AfterArgs _afterGenerateMoveToPathTargets;

private static void GenerateMoveToPathTargets(On.iTween.orig_GenerateMoveToPathTargets orig, iTween self)
{
    De legates.Para s_ Genera
        eMv eT oPa
    th Ta rgets @
    a
        rams = new )
    {
        self = self
    }
    ;
    if (_before
    enera te Mov
        To
    athTargets != nu ll )
    {
        foreach
        (
            Delegates.Generat
                eM ov eT oP atha rg ets_Be fo reArgs toI vo ke in _bef re G
            ene at
            e
        MoveToP
            a
        ta rg ets.G
            t
        Invo ca ti oL s
            t) )
        {
            try
            {
                _b f
                o
                    reGen rateM v
                e
                    T
                oP at hT ar gets
                    .nvoke(@p a
                r
                    ams)

                ca tch
                (Exc
                    e
                    po n
                )

                {
                    H KM irrorMod.DoLogError(e
                        ;
                }
            }

            s el f = @pa
            am s.self;
            o ri
            g
                (self);
            if (_afterGene rateMoveT
                PathTa rg et
            !
                null)
            {
                foreach (De egates.
                G
                    enerateMoveT oPathT
                    a
                r
                    ge ts _Aft rA rgs t Invoke in _afterG en erate
                    M
                oveToP
                    a
                thTarge
                    t
                s.Ge tInvoc t
                    ionList()


                {
                    t r

                    {
                        _afterG en
                        e
                            rateMove oP
                            a
                        t
                            h
                        Ta ge ts.I vo ke(@para
                        s);
                    }

                    atch
                        (Exception e)
                    {
                        HKMirrorM
                            o
                        d.Do Lo
                        E
                            r
                        ror(e);
                    }
                }
            }
        }

        internal static void HookGenerateMoveToTargets()
        {
            i f

            (!H
            o
            okedList.Contains("        enera        te        ov        eT
            o
                Ta gets"        )
                )
            {
                HookedLis t.Add("Gene
                at
                    MoveToTargets"        ;
                On.iTw e
                en er ateMoveT
                Target
                    += G
                nerateMov
                e
                    ToTargets;
            }
        }

internal static event Delegates.GenerateMoveToTargets_BeforeArgs _beforeGenerateMoveToTargets;
internal static event Delegates.GenerateMoveToTargets_AfterArgs _afterGenerateMoveToTargets;

private static void GenerateMoveToTargets(On.iTween.orig_GenerateMoveToTargets orig, iTween self)
{
    Deleg at
    s.Pa ra ms_e ne ate
        M
    Ta rget

    param s
        = n
    w
        ()

    se f = s elf
}

;
if (_be or eGe
er
    teM ov e
To Ta rgets !

null)
{
    f
        o
    reach Delegates Gen rateMoveToTarge
    s_Before
        rg
    t oI nvoke in _beforeGen er at eMoveTo
    T
    argets.GetInvocat
        i
    o
    nL is t())
    t ry
    {
        _befor eG enerateM ov eToTargets? In voke(@
        p
            arams);
    }
    ch(E
    c
        epti on e)


    H
        r
    Mo d.DoLogErr
        o
    r(e);
}
}
s
e
lf = @p aa s.s
l
;
orig(
s
elf)
;
if (_ af terG
e
ne at eM v
eToTarget s != null)
{
    f oreach(D
        le

    ates
        .G en erate Mov
    T
        oTargets_
    A
        ft er Args t oInvoke in _afterGenera te MovT oT argets.G
        tI
    vocationList())
    {
        t y
        {
            _after
                G
            enerateMoveToT arge
            t
            s
                .I nv oke(@p rams);
                catch (Exception e )
            {
                H
                    KMirro
                r
                Mod.DoL
                    o
                gE rr or(e)
            }
        }
    }

    internal static void HookGenerateMoveByTargets()
    {
        if (
            Hooked
        ist.ontains("GenerateMoveByTar
        g
            et s"        ))
        {
            HookedList.A
            dd("Gener        teMoveB        Targe        s");
            On.iTw
            een.Ge nera te Mov eB yTa
            r
                get s +
                = GenerateMoveByTargets;
        }
    }

internal static event Delegates.GenerateMoveByTargets_BeforeArgs _beforeGenerateMoveByTargets;
internal static event Delegates.GenerateMoveByTargets_AfterArgs _afterGenerateMoveByTargets;

private static void GenerateMoveByTargets(On.iTween.orig_GenerateMoveByTargets orig, iTween self)
{
    Delegates.Param
        s
    _G
        e
    nerate
        M
    oveByTargets @params = new(

        {
            s
            lf = s
            lf
        }
        ;
    if (_before
    G
        en er ateMoveByTargets ! = null)
    {
        f
            ac(De
                ea

        te s.
            G
            e
        at eMo ve B
        Tr ge ts_e oe Ar
        s
        toInvoke in _beforeGenerat Mov By
            arge
        ts.G etInvo
        o
        nList())
        {
            t
            ry
            {
                _beforeGenerateMoveByTarge s?
                Invoke(@
                ar
                    ms);
            }
            catch (Exception e)
            {
                H
                    K
                MirrorMod.DoLo gE rr or
                (
                    e
                );
            }
        }
    }
    s elf = @params.self;
    orig(se lf);


    i
        f(_a fte

    r
        Gene ra teM
    o
        ve By Ta ge ts
    !
        = null
    {
        o
            h
            (Delegates.
                Ge ne

        rateMoveB
            y
        T
            ar gs _A rgs
        t
        Invoke
            in _af
            te rG ne
        r
            at Mo
            v
        eB yT
        r
        gets.GetInvocation Li st())
        {
            tr
                _
            fter
                Ge ne ra te MoveB
            T
                arg et s.Invo
                k
            e(@params);
        }

        catc h(Exception e)

        {
            HKM irr
            rM o
                .DoLogError(e);
        }
    }
}
}

internal static void HookGenerateScaleToTargets()
{
    if (!HookedList.C
    ontain
    s
        ("Gener
    a
        te Sc ale oT
        r
    get "))
    {
        o
            kd L
        st.Ad d("Gener
        a
            teScaleToT
        a
            r
        g
            et s"        );        
        O n.iTween.G
            nerate
        cale
        oTargets += GenerateSca
        l
            eT oT rg
        t
            s;
    }
}

internal static event Delegates.GenerateScaleToTargets_BeforeArgs _beforeGenerateScaleToTargets;
internal static event Delegates.GenerateScaleToTargets_AfterArgs _afterGenerateScaleToTargets;

private static void GenerateScaleToTargets(On.iTween.orig_GenerateScaleToTargets orig, iTween self)
{
    Delegates.
        arams_GenerateScaleToTarg
        et s @para
        s = ne
            ()


    self = self
}

;
if
(
    _b
e
    foreGe
n
erateScaleToTargets != n
ll)

{
    foreac
        (De
    le ga tes.Gener
        at ec aleToTargets_BeforeArg
    toInvo
    e
        in
    _
        b
    Ge nera
    c
        leToT ar gt s.
        e
        tInvocati onList())
    {
        tr y
        {
            ef
                reGe
            ne re ScaleTo
                a
            rg et s?.I nvoke
            (
                @params)
        } catch (E xc eptio n e)
        {
            H K
            irr or Mod.gE
            ror(e);
        }
    }
}
self = @para
m
s.self
orig(self);


i
    f(a te

rG en erateS ca leToTargets != null)


{
    forea
        c
    h(De eg
    a
        te s.Ge era S
        caleToTar
    e
        t_ A
        terArgs toI
    nv oke in _af
        t
    e
        r
    Ge ne ra tc al eTo
    a
    gets.Ge
        t
    Invo
        ca tion
        L
    ist(
        )
        )
    {
        r
        y
        {
            _afte rG enerate Sc aleToTar ge t
                .I
                voke
            ar ams);
        }
        c
            at h(Exc p
        t
            ion e)
        {
            HK Mi rrorMod.DoLogEr ro r(e
                ;
        }
    }
}
}

internal static void HookGenerateScaleByTargets()
{
    f(!Hoo ei st.Contains("        GenerateSc        al        eByT
    a
        rgets"
        )
        )
    {
        Hoo
            k
        ed Li st.Ad
        (
            "Generatec        a
        lB y
        argets");
        O
        n
            .iTween.Ge
            n
        er a
        te Sc aB yT ar gets +=
            enerat
        Scal
            ByTargets;
    }
}

internal static event Delegates.GenerateScaleByTargets_BeforeArgs _beforeGenerateScaleByTargets;
internal static event Delegates.GenerateScaleByTargets_AfterArgs _afterGenerateScaleByTargets;

private static void GenerateScaleByTargets(On.iTween.orig_GenerateScaleByTargets orig, iTween self)
{
    D
        legat
    s.Params_
        G
    enerateScaleByTargets @params =
        new()
        {
            self = self
        };
    if
        (_ beforeG
        nerate
    cale
    yTargets != null)
    {
        f
            o
        re
            a
        ch(De
        l
        egates.GenerateScaleByTarg
            ts_B
        e
            oreArg
        toI
            nv ok e in _b efor
        e
            Gener at eScaleByTargets.GetInvo
            ationLi
        t

        {
            ty
                bef e
                enera t
                eS ca
                e
            ByTargets?.Invoke(@ params);
        }

        at
            h(E
                xp to n e)
        {
            H
                KMirrorMo
            d
                .DoLogError(e);
        }
    }
}

se lf = @p arams
    self;
or
g(
    elf);
i(_afterGenerate caleB
y
Targets != null)
{
    f
        o
    re a(Del eg
    ates.Genr at ScaleByT ar gets_ Aft
    e
        r
    Arg s toI
    n
    voke in

    _f te rGene
        a
    teScaleBy
        a
    re t
        .GeI nvoc t
        ionL ist())

    {
        t
            r
        af te rGen
            rt eS caleBy
        T
            arge
        ts.Inv
            o
        ke(@
        p
            ar am
            )
        ;
    }
    catch (Excepti n e
    {
        HK
            ir
        orMo
        d.Do LogErro
        (
            e);
    }
}
}
}

internal static void HookGenerateScaleAddTargets()
{
    if (!Hook edList.Co nt ains
    (
        "Gene        ra        teScaleAdd        ar        g
    e
        t
    s"        ))        
    {
        ed ist.Add("Gen        er        ateScaleAddT        ar        ge        ts        ");

        O
        n.iTwee
        n
            .G en era eS
        a
            leA dTarg t
            + G
        nerateScale
            A
        ddTar ge ts;
    }
}

internal static event Delegates.GenerateScaleAddTargets_BeforeArgs _beforeGenerateScaleAddTargets;
internal static event Delegates.GenerateScaleAddTargets_AfterArgs _afterGenerateScaleAddTargets;

private static void GenerateScaleAddTargets(On.iTween.orig_GenerateScaleAddTargets orig, iTween self)
{
    Delegates.Params_Generat
    ScaleAddTargets @params = new()

    {
        self =
            elf
    };
    if (_
    eforeGene
        r
    ateScaleAddTargets != null)
    {
        forea
            h(Delegates.GenerateScaleAddTa
                rg

        ets_Bef
            reArgs
        toIn
        oke in _beforeGenerateSca
            l
        eA
            d
        dTarge
            t
        s.GetInvocationList())
        {
            try
            {
                _bef
                    o
                eGener
                    teSc
                al eA ddTargets
                    ?
                    .Invoke(@param);
            }

            catc h(Except
                on e)
            {
                K
                    irr
                o
                    ro d.DoLo
                    E
                ror(e)
                    ;
            }
        }
        self = @params.sel;
        o ig(self);

        f
            _aft
        er Ge nerateSa le AddTarget
        s
            != null )
        {
            foreach (Delegates.Genera
                         eScaleAd
            Ta
                gets_Afte rArgs t oI nvoke in _ afterGene
            r
                at Sc aleAddTargets.G
                e
            tI vo cati on List())
            {
                try
                {
                    _afte rG en erateScaleAdd ar ets.I
                        n
                    voke(@ par
                        a) ;
                }

                c
                    h
                    (Ex ce

                ption
                    H
                MirrorMod.D
                    o
                LogError(e
                    )
                    ;
            }

            internal static void HookGenerateRotateToTargets()
            {
                if (!Hooke List.Contai("        nera
                te Ro tateToT
                    r
                gets"))
                {
                    H oo kedList.Add("Genera        te        Ro        tateToTargets"
                        ;
                    On.iTw
                        en
                    GenerateRotateT oT argets += Generat eR o
                    t
                    ateToTarget s;
                }
            }

internal static event Delegates.GenerateRotateToTargets_BeforeArgs _beforeGenerateRotateToTargets;
internal static event Delegates.GenerateRotateToTargets_AfterArgs _afterGenerateRotateToTargets;

private static void GenerateRotateToTargets(On.iTween.orig_GenerateRotateToTargets orig, iTween self)
{
    Dl egates.Params Generat ot
        te oTargets @ pa rams = ne
    w)
    {
        self = s
        lf
    }
    ;

    f(_b
    foreGener
        a
    teRotateToTargets != null)
    {
        for
            ach(Delegates.GenerateRotat
        eT oTargets
        Before
            rgs t
        Invoke in

        _beforeGenerateRotateToTargets.etInvocationList())
        {
            try
            {
                _ beforeG
                nerate
                    otat
                ToTargets?.Invoke(@pa
                r
                    am
                s
                    );
            }

            c
                a
            tch(Exception e)
            {
                HKMir
                    orMo
                d
                    DoLogE
                ror(
                    e);
            }
        }
    }
    se f
        = @params.self;
    i g(self
    (_afte G
        ne at e
    Rt at eToT
        r
    ets ! =
        n ul
        )

    {
        foreach (De egates. GenerateR
            t
        oTar
            ge ts _A ft erArg

        toInvoke
            i
        n _afterGenerateRota eToTarget.Ge nvocatio
        Li
        t())
        {
            try
            {
                _afterGen er ateRot
                    a
                teToTargets.I nv oke(@
                p
                    a
                ra ms );
            }

            c atch(Exception e)
            {
                HKMirr
                    o
                r
                Mod.Do
                    L
                og Er ror(e
                    )
                    ;
            }
        }
    }

    internal static void HookGenerateRotateAddTargets()

    {
        i f(!Ho
        k
        dList.C
        o
        nt in ("        Gene
        ra te Rot
            at eA dd
        a
            rgets"))        
        {
            HookedLis t.Add("Gen
            ra
                eRot
            at eA ddTarge
                s
            ")        
            On iTwee n
                .GenerateRot te AddTargets + = Genera
            eRotateA
            dT
                rgets;
        }
    }

internal static event Delegates.GenerateRotateAddTargets_BeforeArgs _beforeGenerateRotateAddTargets;
internal static event Delegates.GenerateRotateAddTargets_AfterArgs _afterGenerateRotateAddTargets;

private static void GenerateRotateAddTargets(On.iTween.orig_GenerateRotateAddTargets orig, iTween self)
{
    Delega
    tes.Pa
        r
    ams_ Gen
    e
        rateRotateAddTarg et s @p
    ra m
        = new()
        {
            self = se
            l
        };

    i f(_befo
        eGener

    teRot
        teAddTarg
    e
    ts != null)
    {
        foreach (Delegates
                     GenerateRotateAddTargets_Bef
        or eArgs to
            nvoke
        n _be
        oreGenera
            t
        eRotateAddTargets.GetInvocation
        ist())
        {
            try
            {
                _beforeGener
                    at eRotate
                    ddTarg
                ts?.nvoke(@params);
            }

            cat
                c
            h
            (
                Except
            i
                on e)
            {
                HKMirrorMod.DoLog
                rror
                (
                );
            }
        }
    }
    se
        lf = @params.s
    elf;
    o ri g(s el f);
    if (_ afterGenerat
        RotateA
    d
    arg
        e
            = n ul )


    or ach(De le
        a
        tes.Gene ra teRotateAddTargets_A
        te
        Args
        t oI nv ke
        n
        _a terGe
        ne ra tR otateAddT rgets.GetInvocat on ist())
    {
        tr

        {
            _afterGenerateRotat AddTa rg
                e
            ts.Invoe(@ param
                s
                )
            ;
        }

        ca tch(Exception e)
        {
            HKMirrorMod.
                Do ogErro
            r
                (e;
        }
    }
}

}

internal static void HookGenerateRotateByTargets()
{
    i
    f(!Ho ok edLi
    t
        Contain
    s
        ("Ge
    ne rate
    R
        otat
    e
        Ba rg e
    s
    "))
    {
        Ho okedList.A dd("GenerateRo        at        e
        yTar
            ge t"        ;O        n.        T
        ween.Gene
            ra teRotateByTarg et s += GenerateRotate yT rgets;
    }
}

internal static event Delegates.GenerateRotateByTargets_BeforeArgs _beforeGenerateRotateByTargets;
internal static event Delegates.GenerateRotateByTargets_AfterArgs _afterGenerateRotateByTargets;

private static void GenerateRotateByTargets(On.iTween.orig_GenerateRotateByTargets orig, iTween self)
{
    De
        l
    ega
        t
    es.Para ms _GenerateRo ta te By Tar
        gets @
    p
        arams
            =
            n w()
    {
        elf = self
    }
    ;

    f
        _beforeGener at eRotateB Ta r
    gt s != null)
    {
        foreac
            (Del
        gates.Gen
            e
        rateRotateByTargets_BeforeArgs to
        nvoke in _beforeGenerateRotat
            eB yTargets
            GetInv
        catio
        List())
        {
            try
            {
                _beforeGenerateRotateByTar
                ets?.Invoke(@params);
            }

            catc
                h(Except
                    on e)
            {
                HK
                irrorMod.DoLogError(e)
                    ;
            }
        }
    }
    se
    l
        f = @params.self;
    orig(self
        ;
    if

    _after
        ener
    at eR otateByTa
        rg ts != null)
    {
        foreach (Del ega
        es.Gen r
        t
            Rot t
            e
        gets
            A
        terAr g
        s ton vo ke in _after Ge nerateRotateByTarge
        s.
            et nv
        oa ti nList() {
            tr y
            {
                _af
                    t
                erGene rateRotateByTargets.Invoke(@ rams);

                c tc(E xt ion e)
                {
                    KMirrorMod.
                        Do og Error(e);
                }
            }
        }
    }

    internal static void HookGenerateShakePositionTargets()
    {
        if
            (!Ho okedL
            s
        t.Contain
        (
            "e        n
        rat ShakePos
        ii onT rge
            t
        s
        "
            ))
        {
            H oo kedL
            s
                .Add("        Ge        n
            e
                rate
            Sh akeP
            o
                siti
            o
                nr ge t
            "
                );
            On.iTween.GenerateShakePo
                it
            onTa
                rt s + = Gene ra t
            S
                hakePo si tio
            n
                Targets;
        }
    }

internal static event Delegates.GenerateShakePositionTargets_BeforeArgs _beforeGenerateShakePositionTargets;
internal static event Delegates.GenerateShakePositionTargets_AfterArgs _afterGenerateShakePositionTargets;

private static void GenerateShakePositionTargets(On.iTween.orig_GenerateShakePositionTargets orig, iTween self)
{
    D eleg at es.Params_ en erateShakePo siti nTargets @ pa ra ms = new()
    {
        sel f = self
    };
    if (_be
    eGenera eShak PositionTag et s != null)
    {
        fore
            ch(D
                legates.

        G
            e
        nerateShakePositionTargets_Before
        rgs toInvoke in _beforeGenera
            te ShakePos
            tionTa
        gets.
            etInvocat
            i
        onList())
        {
            try
            {
                _beforeGenerat
                ShakePositionTargets?.Invoke
                    (@ params)
            }

            cat
                h(E
                    ception e)
            {
                HKMirror
                    M
                od
                    .
                    DoLogE
                    r
                ror(e);
            }
        }
    }
    self = @param
        .sel
    f

    orig(
            elf)
        ;
    if (afterG n
        e
    rateShak eP ositionTargets != nul
        )
    {
        for
            ac(D
        e
            lg at es.G
            n
        rateS h
        ak ePs i
            tionTarge s_After rgs t Invoke i
            _
        fter
            Ge ne ra te Sha ke Po
        i
            tio nT argets
            .GetInvocationList()) {
            try
            {
                _afterG erat eShak
                    Po
                itionTa rg ets.Invoke(@params);
            }


            catch (E ception)

            M irr or Mod.DoLo Error(e);
        }
    }
}

internal static void HookGenerateShakeScaleTargets()
{
    i f(!Hooked Li s
    t.Contains
    (
        "
    G
        en er at eS hake
    c
        leTarget "))

    {
        Hoo e
        dL st.A
        dd("
        e
            nerateShakeScaleTarge ts ");
        On.Tw
        en.G
            en ea te Sh akeSc
        l
        eTargets
            +
            = GenerateShakeScaleTargets;
    }
}

internal static event Delegates.GenerateShakeScaleTargets_BeforeArgs _beforeGenerateShakeScaleTargets;
internal static event Delegates.GenerateShakeScaleTargets_AfterArgs _afterGenerateShakeScaleTargets;

private static void GenerateShakeScaleTargets(On.iTween.orig_GenerateShakeScaleTargets orig, iTween self)
{
    Dele gs.Param
        s
    _Ge
        n
    erateShakeScaleTargets @p
    a
    rm s =
        new()
        {
            self = sel
        };
    if (_befo
    n
        ra eShakeScaleT ar gets != n
    u)
    {
        f oreach(
            elegat
                s.

        Gen
            rateShake
        S
        caleTargets_BeforeArgs toInvoke in
        _beforeGenerateShakeScaleTarge
        ts.GetInvo
            ationL
        st())
        {
            try
            {
                _
                    b
                eforeGenerateShakeScaleTargets?.I
                voke(@params);
            }
            catch (Excep
                   ti

            on e)

            HKMir
            orMo
                .DoLogError(e);
        }
    }
}

s
e
    lf
        = @par
a
ms.self;
orig(self);
if (_af
erGe
    n
rateSh
    keSc
al eT argets !=
    null)
{
    foreach (Delegates.Gene
                 ateShak
    S
        ale
    T
        a
    ts _Aft
    r
        s to I
    nv ke
    i
        n afterGener at eShakeScaleTargets
        Ge
    Invo
        ca ti onList )


    {
        try
        {
            _
                a
            fterGenerateShakeSc aleTargets Invoke(param);


            c
                tch(Exception e)
            {
                HKM ir rorMod.Do L
                o
                gError(e);
            }
        }
    }
}

internal static void HookGenerateShakeRotationTargets()
{
    if (!
        H
    oo ke dList
        C
    ontains "G
    n
        ea t
        ak Rota ti onT
        a
    rgets )) {
        H
            o
        o
            ke dL i
        d("Gen
        r
            teShake
        R
            otat
        io nTar
        g
            ets"
            )
        ;
        O.
            een.G enerateShakeRotationTarg et +
            Gen
        er at eShakeR
            t
        ationTarg
        e
            ts;
    }
}

internal static event Delegates.GenerateShakeRotationTargets_BeforeArgs _beforeGenerateShakeRotationTargets;
internal static event Delegates.GenerateShakeRotationTargets_AfterArgs _afterGenerateShakeRotationTargets;

private static void GenerateShakeRotationTargets(On.iTween.orig_GenerateShakeRotationTargets orig, iTween self)
{
    Delegate
    s
        .Pa
        r
    ams_GenerateShakeRotationT rg et
        s
    @pa ams = new()
    {
        self = self

        ;
        f (_beforeG en erateShakeRo
        tt io nT argets !
        null)
        {
        for
        ach (Dele
        g
        ates.GenerateShakeRotationTargets_
        eforeArgs toInvoke in _beforeG
        en erateSha
        eRotat
        onTar
        ets.GetIn
        v
        ocationList())
        {
        try
        {
        _beforeGen
        rateShakeRotationTargets?.Inv
        ok e(@para
        s);
    }

    atch
        (Exception e)
    {
        HKMirr
            o
        rM
            o
        d.DoLo
            g
        Error(e);
    }
    }
    }
    self = @para
    s.se
        l
        ;
    orig
        self
        );

    i f(_after
        G

    enerateShakeRotatio Targets !=
        ull)
    {
        o
            eac h
        (e le gate
            .en rat e
        Sa e
        o
            tat onTargets_ Af terArgs toInvoke
        n
            afte
        rG en erat Sha
        e
            RotationT
        a

        rgets.GetInvoc ationList()
        {
            try

            _a
                te Genera
                eS
            eRotationTargets.Invoke(@param
            s)
        }
        catch

        (Except
        i
            o
        n e)
        {
            HM irrorMod.oLogErr r(e);
        }
    }
    }
}

internal static void HookGeneratePunchPositionTargets()
{
    if (!Ho kedList Con
    ta i
    n
    s("G        en        er        ateP
    h
        osition
    T
        arge
    ts "))

    {
        Hooe i
        st.Add("        enerate        PunchPosi        io        Tar
        ets );
        O.T we en.Gene
            a
        tePunchPo
            s
        itionTarge s + = Gen eratePunchPos
            nTargets
    }
}

internal static event Delegates.GeneratePunchPositionTargets_BeforeArgs _beforeGeneratePunchPositionTargets;
internal static event Delegates.GeneratePunchPositionTargets_AfterArgs _afterGeneratePunchPositionTargets;

private static void GeneratePunchPositionTargets(On.iTween.orig_GeneratePunchPositionTargets orig, iTween self)
{
    Delegates.P ra ms_G en
    e
        ratePun c
    hPositionTargets @params
        =
        ew()
    {
        self = se f
    }
    if (
        _e fo re Generate
        unchPo
    ition
    argets !=
        null)
    {
        foreach (Delegates.Generate
                     unchPositionTargets_BeforeArgs
        to Invoke i
            _befo
        eGene
            atePunchP
        o
        sitionTargets.GetInvocationList())
        {
            try
            {
                _beforeGeneratePunchPo
                    si tionTar
                ets?.I
                voke
                    @params);
            }
            catch (Excep
                   t

            io
                n
            e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
        s
        e
            f = @p
        rams
            .s el f;
        orig(se
        l
            f);
        i f(_afte rG
        eneratePunchPosition
            arg ts ! n
            ll)


        {
            f or each
            (
                ele gat e
            s.Ge
                e
            ratePu chPosit onTarg ts_AfterAr gs t
            In
            oke
                in _ afterGe
            e
                ratePunchP sitionTargets.GetInvocationLi st())
            {
                try
                {
                    _af
                        G
                    nera ePunchPosi ti onTargets.Invoke(
                        @
                        params);
                }

                cat h(
                    E
                        x
                        ce pt ion e)
                {
                    HKMirrorM od.DoLogEr or(e);
                }
            }
        }

        internal static void HookGeneratePunchRotationTargets()
        {
            if (!H okedL is  .
            Co nt ai s("Ge        ne
            a
                ePunchR
            ot at ion
                Ta rget
                s
            "))

            {
                H oo
                e
                dList.Add("Gen        ratePunc        Ro        atio        na        r
                ets"
                    )
                Tween.
                    e
                    nerat Pu nch
                R
                otationTargets += GenerateP nch otati nTargets
            }
        }

internal static event Delegates.GeneratePunchRotationTargets_BeforeArgs _beforeGeneratePunchRotationTargets;
internal static event Delegates.GeneratePunchRotationTargets_AfterArgs _afterGeneratePunchRotationTargets;

private static void GeneratePunchRotationTargets(On.iTween.orig_GeneratePunchRotationTargets orig, iTween self)
{
    De egate s.Pa
        rams _G
        e
    ner ateP
    u
        nchRo tationTargets @para
    s
    new()
        {
            self = self
        }
        ;
    if (_beforeG
    nerate
        unchR
    tationTar
        g
    ets != null)
    {
        foreach (Delegates.
                     eneratePunchRotationTargets_Be
                     fo reArgs t
        Invoke
            in _b
            foreGener
        a
        tePunchRotationTargets.GetInvocat
        onList())
        {
            try
            {
                _beforeGene
                    ra tePunch
                    otatio
                Targ
                ts?.Invoke(@params);
            }

            c
                at

            c
                h(Exc
                    e
                    ption e)
            {
                HKMirrorMod.DoLo
                    Erro
                r
                    e);
            }
        }
        s
        el f = @ pa rams.s el
            f
            ;
        orig(self);
        if (_afterGen erat
            Pu nc hRotai on arg
        e
        t != nul
            )
        {
            for e
                ah(
                    egates.GeneratePunchRotatio nTar
            et
                _Aft
            er Ar s toInv e
                in after
                G
            ener at ePunchRotationTargets.GetInvoc
                tio List(
            )


            try
            {
                _afterGenerate PunchRotati nTarget.Invok(@pa
                r
                    a
                ms )
            }

            cat ch(Exception e)
            {
                HKMirrorM d.D
                    o
                L
                    ogErro
                r
                    (e);
            }
        }
    }
}

internal static void HookGeneratePunchScaleTargets()

i(!H oo ked Li s
    .ontains
    (
        "Gen
er ateP
u
    nchSc le Ta
s"))
{
    ooked List.Add("Gene        rateP
    nc
        Scal
    eT ar gets");
    O
    n.iTwee.G
        e
    nerate un hScale Tg ets + G nerateP u
    chScale
    ar
        ets;
}
}

internal static event Delegates.GeneratePunchScaleTargets_BeforeArgs _beforeGeneratePunchScaleTargets;
internal static event Delegates.GeneratePunchScaleTargets_AfterArgs _afterGeneratePunchScaleTargets;

private static void GeneratePunchScaleTargets(On.iTween.orig_GeneratePunchScaleTargets orig, iTween self)
{
    Dele ga tes.P arams_G en erate Pu nchScale ar g
    et s
        @
        params
        = new()
    {
        self se f
    };
    if (_
    ef
        reGenera eP unchScaleTar ge ts != n
    ul )
    {
        foreach
        Delega
        es.Ge
            eratePunc
        h
        ScaleTargets_BeforeArgs toInvoke in _be
        oreGeneratePunchScaleTargets.GetInv
            oc ationLis
            ())
        {
            ry
            {
                beforeGen
                    e
                ratePunchScaleTargets?.Invoke(@params)
            }
            catch (Exception e)
            {
                HKMirror
                    Mo d.DoLog
                rror(e
                    ;
            }
        }
        self = @params.self;
        orig
        (
            se
        l
            f);
        if
            (_afterGeneratePunchScaleTargets
             = nu
        l
            )
        {
            fo
                each
                (Dl egates.Ge
                    n
                    eratePunchScaleTargets_AfterArgs to
                    nvoke i
                    aft
                    e
                    re ne rate
                    u
                    chSca l
                    eT ar
                    e
                    ts.G tInvocationList())
            {
                try
                {
                    _a
                        te
                    Gene
                        ra eP unchS al
                        T
                    ar ets.Inv
                        o
                    ke(@ params);
                }
                catch (Exception e)
                {
                    KMi
                    rorMod.D
                        Lo
                    Error(e);
                }
            }
        }
    }

    internal static void HookApplyRectTargets()
    {
        i f(!Ho okedList.Contai s("ApplyRectTargets"))
        {
            Hook edList.Ad
                Ap
            plyR cTar ets");
            On.T w
            en.ApplyR ec tTa rg ets += Ap plyRectT ar ge ts;
        }
    }

internal static event Delegates.ApplyRectTargets_BeforeArgs _beforeApplyRectTargets;
internal static event Delegates.ApplyRectTargets_AfterArgs _afterApplyRectTargets;

private static void ApplyRectTargets(On.iTween.orig_ApplyRectTargets orig, iTween self)
{
    Delegates
        .
        Params
        _
    ApplyRe
        c
    tT ae ts @p
    r
        ams = new
        )
    {
        self = self
    }
    ;
    if (_be
    f
        o
    r
        eA pp ly Re ct Targets
        = null

    {
        f
            reach(Delegates.ApplyRectTar
                g

        et s_ Be
            o
        r
            eArgs toIn v
        o
        ke in _be fo re Ap plyRectTarget.G tInvocati
        onLs t())
        {
            t ry
            {
                _b ef or
                    e
                Ap ly RectTargets?.Invoke(@pa
                rams );
            }

            cat h
            (
                Ex ception e)
            {
                H Mi rrorMod.o Lo g
                rror(e);
            }
        }
    }
    self = @pa
    rm s.se lf;
    orig
        self);
    if (_
    fterApply
        R
    ectTargets != null)
    {
        foreach (Deleg
                     tes.ApplyRectTargets_AfterArgs t
        oI nvoke in
        _after
            pplyR
        ctTargets
            .GetInvocationList())
        {
            try
            {
                _after
                pplyRectTargets.Invoke(@params)
                    ;
            }
            catch
                (Excep
                 ion
                )
            {
                HKMirrorMod.DoLogErr
                    o
                r(
                    e
                );
            }
        }
    }
}

internal static void HookApplyColorTargets()
{
    f(!HookedList.Co nt ains("        ApplyColorTargets"))
    {
        Hoo ke dList.
            ("Appy                Cl                    orTargets");
        On.iTween.Ap ly olorTargets += ApplyColorTa rgets;
    }
}

internal static event Delegates.ApplyColorTargets_BeforeArgs _beforeApplyColorTargets;
internal static event Delegates.ApplyColorTargets_AfterArgs _afterApplyColorTargets;

private static void ApplyColorTargets(On.iTween.orig_ApplyColorTargets orig, iTween self)
{
    Dele ga te
    s
        .Par
        am s_Ap
        p
    lyCo
        l
    or Ta
    g
        ets param s new()
    {
        sel f = self
    }

    i
        _bef
    or eA pplyCol
        r
    Targets !
        =
        null
    {
        forea h Dele ga ts.ApplyC lo T
            rget s_Befo eA r
        s toInvoke in _beforeApplyColorT rge s.Get Invocation
        L
            i
            )
        {
            tr y
            {
                _b eforeApplyColorTargets?.Invok
                e
                    (@para
                m
                    s);
            }
            c
                a
            t
                Ex ept
                o
            n e)
            {
                H
                    M
                ir o
                Mod.DoLogEr
                    r
                or(e);
            }
        }
    }


    s
    e
        lf = @ pr am s.self;

    rig(se
    f);

    f(_afterApplyColorTargets != nu
    l
        l)
    {
        f
            r
        ea ch(Delegate.A pplyCol
        o
            rTa ge ts_A terArgs toInv ok e in
        _aft er Ap pl yC olorTe t
        s
            .GetI vo ationLis t())
        {
            try
            {
                _ af ter
                    Ap pl yC ol
                    or arg
                    e
                ts.Invoke(@params);
            }
            catch

            Ex ptio n e)
            {
                HKMi ro rMod.DoLog Er ro
                    re );
            }
        }
    }
}

internal static void HookApplyVector3Targets()
{
    if (!HookedList
    Contains("ApplyVector3Targets"))
    {
        Ho okedList
        Add("A
        plyVe
            tor3Targe
        t
            s");
        On.iTween.ApplyVector3Targets +=
            pplyVector3Targets;
    }
}

internal static event Delegates.ApplyVector3Targets_BeforeArgs _beforeApplyVector3Targets;
internal static event Delegates.ApplyVector3Targets_AfterArgs _afterApplyVector3Targets;

private static void ApplyVector3Targets(On.iTween.orig_ApplyVector3Targets orig, iTween self)
{
    e
        legat es.Par
        a
    ms_ApplyVector3Targets @params = new()


    self =
        el
}

;
if (_ beforeApply ector3T rgets = n
u
    ll)
{
    fo reach(Dele
        g

    a
        te s.Appl yV ector3Targe s_BeforeArgs toInvoke in

    _
        befo reA
        p
    plyVec o
    r
    3T ag ts.Ge I
    nvocation
        i
    s()

    {
        try
        {
            _be fo r
                e
            Apply Ve ctor3
                T
            a
                r
            ge ts?.In voke
                @
            arams)
        }

        ca tc(Excep ion e)

        {
            K
                MirrorM od.DoLogError(e);
        }
    }
}
self
    @
ams
    .s ef
o ig(s
    )
    ;
if (_a te ApplyVec tor3Ta ge ts != null)
{
    foreach (
        elegates
            p
    ector 3Targets_Afte Ar gs toInvok e in _a
        f
    terApplyVector3Ta
        r
    g
        et s.GetI nv oca ionList()) {
        r y
        {
            _afterApplyV
                e
            ctor3T
                a
            rgets.I n
            v
                ok e(@para
            s
                );
        }
        ca tc h(
            x
        cp t
        on e)
        {
            HK
                M
            irrorMod.D
                o
            L
                o
            gE rr or(e);
        }
    }
}
}

internal static void HookApplyVector2Targets()
{
    if (!HookedList.Cont ains("            ApplyVector2Ta            rg                ts"))
    {
        Ho okedL ist.Add(A pplyVecto r2Targets");
        On.iTween.ApplyVecto 2Target s += ApplyVecto 2T argets;
    }
}

internal static event Delegates.ApplyVector2Targets_BeforeArgs _beforeApplyVector2Targets;
internal static event Delegates.ApplyVector2Targets_AfterArgs _afterApplyVector2Targets;

private static void ApplyVector2Targets(On.iTween.orig_ApplyVector2Targets orig, iTween self)
{
    De
        egat
    s.Params_ApplyVector2Targets
        @p
    a
        rams =
            new()
            {
                self = self
            };
    if (_befo
    eApp
        l
    Vector
        Targ
    et s != null)

    {
        foreach (D el egates.Ap plyVector2Target
        _BeforeA g
        oI
            n
        vk e in _
            e
        oreAp p
        ly Ve
        to r2Targets.GetInv cationL st())

        try
        {
            _b
                reAp
            pl yV ector2T
                r
            gets?.Inv
            o
            ke(@param);
        }
        catch (Exception e)
        {
            HKi rrorMod.oL Error();
        }
    }
}

self = @ pa rams.self;
or
    i
g(self);
if (_aft
e
    r
Ap ly Vect or 2Targets != null)
{
    for each(Dele ate
    s
        .
        Ap lyVec or2Targ
        e
    ts _A fterA
        g
    s toIn vo ke in _
        at e
        plyVector2T
    a
    rgets.GetI
        n
    v
        o
    ca t
        is t( )) {
        t
        y
        {
            _afte r
            Appl
                yV ecto
                r
            2Ta rg e
                t
            s.In
                o
            ke(@params);
        }
        catch (Except on e)
        {
            KM rr
            oo d
                .DoLogEr or e);
        }
    }
}


}

internal static void HookApplyFloatTargets()
{
    if (!H
    okedList.on tains("ApplyFloatTargets
    "
        ))
    {
        HookedList.A
            d
        d
            ("        Ap        lyFl        oa        tTar        et        ");
        On.iTween.ApplyFloatTa
            r
        gets +
            = Ap plyFlo
            a
        tT ar gets;
    }
}

internal static event Delegates.ApplyFloatTargets_BeforeArgs _beforeApplyFloatTargets;
internal static event Delegates.ApplyFloatTargets_AfterArgs _afterApplyFloatTargets;

private static void ApplyFloatTargets(On.iTween.orig_ApplyFloatTargets orig, iTween self)
{
    Delegates.P
        ra
    s_ApplyFloatTargets @params = ne w()
    {
        sel
            = sel
    }
    ;
    i
        (_before
    A
    pplyFloatTargets != null)
    {
        foreach (De
                     egates.ApplyFloatTargets_BeforeArgs
            t oInvoke
            n _bef
            reApp
        yFloatTar
            g
        ets.GetInvocationList())
        {
            try
            {
                _befo
                eApplyFloatTargets?.Invoke(@params
                );
            }

            catc
                (Exce
            tion
                e)
            {
                HKMirrorMod.DoLogError
                    (
                        e)
                    ;
            }
        }
    }


    self = @params.self;
    orig(self);

    f(_
    a
        terApp
    yFlo
        at Ta rgets !=
        n
    ull )
    {
        for ea ch(Dele ga
        tes.ApplyFloatTarg
            ts_Aft r
            to
        I
        no ke in
        a
            terAp pl yF lo
            t
        Targets.G tInvoca ionLis())
        {
            try
            {
                _af
                    er
                pply
                    Fl oa tTarget
                    .Invoke(@p
                ar ms);
            }
            catch (Exception e)
            {
                H KMirrorM
                d.oLogErr r(
                );
            }
        }
    }

    internal static void HookApplyColorToTargets()
    {
        i f(!Ho ok edList.Conta ins("Apply        olorToT        rgets        ))


        {
            Hooke
                d
            List.Ad
            d
                ("        Ap        ly        Col        or        T
            T
                arge ts ");
            O
                .
                iw e
            n.ApplyColo
                r
            ToTar ets + = p
            p
                ly C
                To Ta rge
            s
        }
    }

internal static event Delegates.ApplyColorToTargets_BeforeArgs _beforeApplyColorToTargets;
internal static event Delegates.ApplyColorToTargets_AfterArgs _afterApplyColorToTargets;

private static void ApplyColorToTargets(On.iTween.orig_ApplyColorToTargets orig, iTween self)

{
    Deleg
        t
    es.Params
        A
    pl y
    olorToTarge
        t
    s @p ar ams = n ew(
    )


    {
        e l = se lf
    }
    ;
    if
        (_befo
    eApp
    yColorToTargets != null)
    {
        fo
            r

        ea ch(
            e
                l
                egates.App yC lorToTar ge ts_Be foreArg s toInvoke i b
                efor eA pplyColorT
                o
                Tar
                g
                ets.GetInvo ati nList ())
        {
            tr
            y
            {
                be f
                o
                    reAppl
                y
                    Co lo rToTargets?.Invoke(@par
                ms
                    ;
            }
            catch (xception e) {
                H
                    Ki rr or Mod.DoLo
                Error(
                );
            }
        }

        self =
            @params.self;
        orig(self);
        if (_after
        pplyColorToTargets != null)
        {
            fo
                re ach(Del
            gates.
                pplyC
                lorToTarg
            e
            ts_AfterArgs toInvoke in _afterAppl
            ColorToTargets.GetInvocationLis
            t())
            {
                tr

                {
                    _af
                        erAp
                    lyColorToTargets.Invoke(@
                    p
                        ar
                    a
                        ms);
                }


                catch (Exception e)
                {
                    HKMirro
                    Mod.
                        D
                        LogErr
                    r(e)
                        ;
                }
            }
        }
    }

    internal static void HookApplyAudioToTargets()
    {
        !Ho
        o
            kd Li st.C
            n
        ains("
        Ap pl
        A
            ud oTo argets"))
        {
            HookedList.Add(
                Ap
            ly Aud
            io To Targets

            On.iTw en
                .
                App yAudioToTa rg ets += ApplyAudioToTarg
            ts;
        }
    }

internal static event Delegates.ApplyAudioToTargets_BeforeArgs _beforeApplyAudioToTargets;
internal static event Delegates.ApplyAudioToTargets_AfterArgs _afterApplyAudioToTargets;

private static void ApplyAudioToTargets(On.iTween.orig_ApplyAudioToTargets orig, iTween self)
{
    Del gates Params_ApplyAu di oToTargets @params = new()
    {
        self = self
    };
    _bef or eApplyAud oT Targets != n ll )
    {
        foreach (Delegates.A pp lyAu di oTo arg ts_Be foreArgs toInv ke in _before Ap plyAudioToTar ge ts
            .GetInvocationLis()

        {
            tr
            {
                _befor App yAudioToTa rg et s?.I nvoke(@p
                rams);
            }

            ca
                ch(Exception e)
            {
                H
                    KM ir or
                o
                d
                    .DoLogErro
                r
                    (e);
            }
        }
    }
    self = @params.s
    e
        lf;
    orig(self)
        ;

    if (_afterApplyAud
    ioTo Ta
    r
        get !
        =
    null)
    {
        foreach
            (D
                legates.ApplyAud
            iT oT rg ets_Afte
            Args t
        Invok
            in _afte
            r
        ApplyAudioToTargets.GetInvo
        ationList())
        {
            try
            {
                _a
                    ft erApplyA
                    dioToT

                rgets
                    Invoke(@p
                        a
                        rams);
            }
            catch (Exception
                  )
            {
                HKMirrorMod.DoLog
                    Er ror(e);
            }
        }
    }
}

internal static void HookApplyStabTargets()
{
    if (!H
    oked
        L
    st.Con
    ains
        ("            Ap            plyStabTar            ge            ts"))
    {
        H ookedLis t.Add("App
        ySt bT arg
            t
        ");
        n
            we en.A
            p
        yStaa r
        ge ts
           +
            = Ap pl yS ta bTargets;
    }
}

internal static event Delegates.ApplyStabTargets_BeforeArgs _beforeApplyStabTargets;
internal static event Delegates.ApplyStabTargets_AfterArgs _afterApplyStabTargets;

private static void ApplyStabTargets(On.iTween.orig_ApplyStabTargets orig, iTween self)
{
    De
        l
    egat
    es.Para s_Ap
    p
        ly ta
        T
    ar ets @param s = new()
    {
        se
        f =
        se lf
    };
    if
    _
        before ppl
        y
    StabTargets != null)
    {
        for
            ac h(Dele
                ate .
        ApplyS abTarg ts_BeforeA rg s toInvoke in _be
            f
        o
            re Ap plyS ta bTarget.GetInvocationL
            i
        st())

        {
            try
            {
                _b ef or eApply t
                    abTarg ts?
                    vk e
                    @params);
            }


            catch (Ex ce

            p
                ti on
                e)
            {
                K Mi rr orMod.Do
                ogErro
                    (e);
            }
        }
    }
    self = @params.s
    el f
    or
    g
    (
        self);
    if
    (
        _afterAp
    p
    lyStabTargets != nu
    l
        l)
    {
        foreach (
            Dl e
        gates.ApplyStabTar
            g
        et s_
        A
            fterAr
        g
        s toInvoke in _af
            er
        pplyStabTargets.G
            eI nv oc ationLis
            ())
        {
            ry
            {
                afterAppl
                    y
                StabTargets.Invoke(@params);
            }
            catch (Exception e)
            {
                H KMirrorM
                d.DoLo
                    Error
                e);
            }
        }
    }
}

internal static void HookApplyMoveToPathTargets()
{
    if (!H
    okedLi
    t.Co
    tains("ApplyMoveT
    o
        Pa
    t
        hTarge
    t
        s"))
    {
        HookedList.Add(
            Appl
        y
            oveToP
        thTa
            rg et s");
        On.i Tw e
        en.A pplyMov eT oPath Ta rgets += Ap
        lyMoveT
            P
        thT
            a
        re ts;
    }
}

internal static event Delegates.ApplyMoveToPathTargets_BeforeArgs _beforeApplyMoveToPathTargets;
internal static event Delegates.ApplyMoveToPathTargets_AfterArgs _afterApplyMoveToPathTargets;

private static void ApplyMoveToPathTargets(On.iTween.orig_ApplyMoveToPathTargets orig, iTween self)
{
    Delegat
        e
    s.Pa
        rm _Ap
        p
    lyM v
    e
        TP t
        T
    argets @params = new()
    {
        elf =
            se lf
    }

    i f(_
        e

    foreApply
        M
    oveToPath Ta rgets != null)
    {
        f
            reach(D
                lea

        tes.ApplyMoveToPathTarg et s
            _BeforeArgs toInv
            o
        k
        e in _be fo reApply MoveToPat hTarget s.Ge
            t
        Invoca
            t
        ionList
        (
        ))
        {
            try

            beforeApp
                y
            Mv e
            oPathTarget
            s
                ?.Invoke(@ p
                a
            r
                a
            ms );
        }
        c at ch(Exce
        tion e

        {
            KMirrorMod.DoLogError(e
                )
                ;
        }
    }


    s
        elf = @para s.self;

    o
    rig(self);
    if (_after
    A
        pp lM oveToPathTa get
    s
        != null)

    foreach (De l
    egat es
        .
        ApplyM
        o
    veToPathTargets_Aft
    rA
    toInvoke in _afte
        rp pl yM oveToPat
    Target
        .GetI
        vocationL
    i
    st())
    {
        try
        {
            _afterApplyMoveT
            PathTargets.Invoke(@params
            );
        }
        catch
            (Excep
             ion

        e

        {
            HKMir
                r
            orMod.DoLogError(e);
        }
    }
}
}

internal static void HookApplyMoveToTargets()
{
    if (!HookedList.Con
    t
        ai
    n
    s("App
    l
        yMoveToTargets"))
    {
        Hook
            dLis
        t
        Add("A
        plyM
            ov eo ar gets");


        On.i Tw een.ApplyMoveToTargets
            += Appl
        M
            veT
        o
        T
            s;
    }

internal static event Delegates.ApplyMoveToTargets_BeforeArgs _beforeApplyMoveToTargets;
internal static event Delegates.ApplyMoveToTargets_AfterArgs _afterApplyMoveToTargets;

private static void ApplyMoveToTargets(On.iTween.orig_ApplyMoveToTargets orig, iTween self)
{
    Delegates
        .
        Params_App
        l
    y
        M
    ov eT oT ar gets
    ra s = n
    ew()

    {
        se
        l
            f = s el f
            ;

        if (_beforeApplyMoveToTa
        ge
        s !=
            n ul l)
        {
            fo
                ea h(Delega es ApplyMoveToTargets_Befo
            eArgs to
            nv
            ke in _beforeApplyMoveT oT ar get
            s
                .GetInvocationLis
            t
            (
            ))
            {
                try
                {
                    _beforeApply Mo veToTar ge ts?.I
                    n
                        vok e(@pa
                    r
                        ams);

                    c a

                    tc h(Exce
                        ti n e)

                    H
                        M
                    ir o
                    Mod.D oLogErro
                    r
                        (e);
                }
            }
        }
        sel
            f
                =
                @ pa ra ms.s elf;
        ori
            (self)

        if
        _afterApplyMoveToTarget
            s
        ! = nu
            l
            )

        {
            foreach
                (Delegat
                    e
            s.ApplyMoveToTargets_
                A
            ft er Args toInv
            o
                ke
            i
                n _afterApplyMoveToTa
                r
            ge ts
                .
                GetInv
                o
            cationList())
            {
                try
                {
                    afterApplyMoveToTar
                        gt s.In voke(@pa
                        ams);


                    catc
                        (Excepti
                    o
                        n e)
                    {
                        HKMirrorMod.DoLogError
                            e);
                    }
                }
            }
        }

        internal static void HookApplyMoveByTargets()
        {
            if (!HookedList.Contains("App
            yMoveByTargets"))
            {
                Hooke
                    dL ist.Add
                "Apply
                oveB
                    Targets");
                On.iTwee
                n
                    .A
                    p
                plyMov
                    e
                ByTargets += ApplyMoveBy
                arge
                    t
                    ;
            }
        }

internal static event Delegates.ApplyMoveByTargets_BeforeArgs _beforeApplyMoveByTargets;
internal static event Delegates.ApplyMoveByTargets_AfterArgs _afterApplyMoveByTargets;

private static void ApplyMoveByTargets(On.iTween.orig_ApplyMoveByTargets orig, iTween self)
{
    Delegates.Pa am s_Ap
        p
    l
        yMov eB yT
    a
        rgets @
    p
        ar am s = n
    w
        ()
    {
        sel
            = s e
            f
    }
    ;
    if (_
    be oreApplyM
    o
        v
    e
        By Ta rg et s !=
        n
    ll)
    {
        f
            o

        reac
            h(De le

        g
            a
        tes.
            A
            pp ly
            o
        veByT ar ge ts_BeforeArgs toInv
        ke
            in _
            be fo reApply
        o
            veByTarge ts.G etInvocationList())
        {
            try
            {
                _ ef o
                    eApplyMo
                eB
                    Ta rges?.Invoke(@pa ra ms);
            }

            catc h(E xc eptn e)


            {
                HK ir or Mo d.DoLog Error(e);
            }
        }
    }

    self = @
    p
        ara s.se
    l
        f;
    orig
    (
        se lf);
    if
    (
        _afterApp
    y
        M
    B
    rgets != nul l
        )
    {
        foreac
            h
            (
                De le

        ga t.Ap plyMoveB
        Target
            _Aft
        rArgs toInvoke in _af
            t
        er Ap pl
            y
        M
            ov ByTarget
        s
            .GetInvo
            c
        ationList())
        {
            try
            {
                _
                    af te rApplyMove
                B
                    yT ar ge t
                s.Invoke(@params);
            }

            c at

            c
                h(Exc
                    e
                    ption e)
            {
                H KM irro
                    Mo d
                    DoLogErro r(e);
            }
        }
    }
}

internal static void HookApplyScaleToTargets()
{
    if (!HookedList
    Contains("ApplyScaleToTa
    rg ets"))
    {
        Hooked
        ist.A
        d("ApplyS
        c
            aleToTargets");
        On.iTween.A
        plyScaleToTargets += Ap
        pl yScaleT
            Target
            ;
    }
}

internal static event Delegates.ApplyScaleToTargets_BeforeArgs _beforeApplyScaleToTargets;
internal static event Delegates.ApplyScaleToTargets_AfterArgs _afterApplyScaleToTargets;

private static void ApplyScaleToTargets(On.iTween.orig_ApplyScaleToTargets orig, iTween self)
{
    De
        l
    egates.Params_App
        l
    y
        Sc al eToT ar gets @ arams = new()
    {
        s
        e
        l
        f = se
        l
        f
    };
    if (
        _b ef oreAp y
        Scale oTarg t
    s! =
        null)
    {
        for
            e
                ach(Delega te
        s
            .A pl yS ca lo Targ
        t
            _Before
        A
            rgs
        to Invo
        k
        e in

        _e o
        e
            Ap pl ScaleTo arget s.GetInvo
            ato nL ist
        () )
        {
            try
            {
                _
                    beforeApp
                l
                yScaleToTargets.Invoke(@ ams );
            }

            c
                tc
            Ex eption e)
            {
                HK MirrorM
                o
                d.DoLogError(e);
            }
        }
    }
    self = @pa ams self;
    orig(self);
    if (_aft
    e
        rAp plySc
        a
    le To Targe
    s
        != null)
    {
        o r
        ach(Deleg t
        e
        s.ApplySca
            le o
            Ta rg et s_ Af terArgs
        oInvok
            in
        afterApplyScaleToTarget
        s
            .G eI nv
            c
        a
        tionList()
            )

        {
            try
            {
                _afterApplyScaleToTar
                    g

                e.Iv oke(@p ar ams)
                    ;
            }

            ca t
            ch(Exception e)
            {
                HK
                    Mirr or od.DoL g
                E
                rror(e);
            }
        }
    }
}

internal static void HookApplyLookToTargets()
{
    if (
        Hooke
    List.Cont
        a
    ins("ApplyLookToTargets"))
    {
        H
        okedList.Add("ApplyLookToT
        ar gets");

        n.iTwe
        n.App
            yLookToTa
        r
        gets += ApplyLookToTargets;
    }

internal static event Delegates.ApplyLookToTargets_BeforeArgs _beforeApplyLookToTargets;
internal static event Delegates.ApplyLookToTargets_AfterArgs _afterApplyLookToTargets;

private static void ApplyLookToTargets(On.iTween.orig_ApplyLookToTargets orig, iTween self)
{
    D
    elegates.Params_ApplyLookToTar
        ets @par
        ms
            = n ew()
    {
        self = se lf
    }
    ;
    if (_
    b
        eforeApplyLookToT
    a
        r
    ge ts != n ul l)
    {
        fo reach(De legates.
        ApplyL
            o
        o
            kToTar
        g
            ets_B for Ar gs
        toIn
        o
        ke in _be
            o
        rA p
        ly LookToTarg
        e
        ts.Ge Invoc
        at o
        nL i
            )
        {
            tr
                beforeA
            p
                plyL
            oo kToT
            a
                rget
            s
                ?.In

            o
                ke(@par ms);
        }
        catch (Exce
        ti
            n e)

        {
            HKM irror
            o
            d.Do ogErr
            or e);
        }
    }
    self = @p arams.self;

    rig(self
        ;

    f(_afterAp lyLookToTarget
    s
        != null)
    {
        forea c
        h
            (D el eg
        s.Appl LookT Targets_AfterArg
            s
        toInv
            o
        ke i n _ af te
        r
            Ap pL ookTo
        a
        rgets.Get
            n
        vc a
        ionList()
        {
            t ry {
                _afte A
                p
                    p
                ly Lo ok To Ta rg ets.Invo
                    e(@par
                        ms);
            }
            catch (Exception e)

            {
                H K
                r
                Mod.D oLogEr
                r
                    or e)
            }
        }
    }
}

internal static void HookApplyRotateToTargets()
{
    if (!HookedLi
    Co
        n
    tains("            Ap            plyRotateToTargets"
    )


    HookedList.Add("            pp
    lR ot at eToTarge
    s");
    O
        .iTwe
    n.ApplyRo
        t
    ateToTargets += ApplyRotateToT
    rgets;
}
}

internal static event Delegates.ApplyRotateToTargets_BeforeArgs _beforeApplyRotateToTargets;
internal static event Delegates.ApplyRotateToTargets_AfterArgs _afterApplyRotateToTargets;

private static void ApplyRotateToTargets(On.iTween.orig_ApplyRotateToTargets orig, iTween self)
{
    Delegates.Params_Ap
        ly
    otat
        eT oT argets
    p
        arams = n

    e
        w()
    {
        self = self
    }

    ;
    if (_bef
    reApplyR
        ta
    eToTargets != null)
    {
        fore
            a
        ch(Delegates.Ap
        p
            l
        ta teTo Ta rgets_BeforeArgs toInvoke
            i
        n
            _befo
        r
            eAp lyRo
            t
        at To Tar et
            .
            GetInvoca
            i
        oL it() )
        {
            try

            _ be f
                oreApplyRo ta t
            e
                T
            oT ar gs?.Invo
            e
                @params
                )
            ;
        }
        ca
            tc h(E
        x
            cept
        io ne )
        {
            HKMirrorMod.Do LogErro r(e);
        }
    }
    self
        = @ params.s l
        f;
    orig(se
    l
        f);
    if (_ afterApplyRotateT Targ
    ts != nul
    {
        foreac h(Delegates.ApplyRot
            a

        teToTarg ts_AfterA
        r
            g
        s to Invo ke in _afterAppl RotateT Target.GetIn
            v
        oca ti onLi
            s
        t())
        {
            tr


            {
                _afterA
                    yo t
                teToTargets
                    .Invoke(@par
                a
                    m
                s
                    );
            }
            ca tc h(Excepti
            n e)

            HKM
            rrorMod.DoLogError(e
                )
                ;
        }
    }
}

internal static void HookApplyRotateAddTargets()
{
    if (!H
    o
        oke
    d
    List.ontains("A            pl            Rota            ted            dTar
    g
        et ")            
    {
        Hooked List.dd(
            ApplyRotateAddTa
        re ts ")            ;
        On.iTw
        en.App
            yRota
        eAddTarge
            t
        s += ApplyRotateAddTargets;
    }
}

internal static event Delegates.ApplyRotateAddTargets_BeforeArgs _beforeApplyRotateAddTargets;
internal static event Delegates.ApplyRotateAddTargets_AfterArgs _afterApplyRotateAddTargets;

private static void ApplyRotateAddTargets(On.iTween.orig_ApplyRotateAddTargets orig, iTween self)
{
    De le gates.Param
        _A
    plyR
        ot at eAdd arg
        t
    s @pa ams
        =
        new()
        {
            self = self
        };
    if
        (_before
    pp
        yRot at eA ddTargets != null)


    {
        foreach (Dele ga te
        s
            .
            Ap lR otat ed dTargets_Before Args toIn
        vo e in _before
            A
        pp lo tateA
            d
        Target s.GeI n
        vc a
        ionList())

        {
            tr
            {
                _bef r
                e
                    A
                pp yR ot at eAdd
                    a
                gets?.I
                nv ok e(@
                pa ram );
            }
            cat
                c
            h(Ec ep tion e)
            {
                HKMirrorMod.D
                    Lo
                Err or(
                    e);
            }
        }
    }
    s
        lf = @p arams
        .self;
    orig(se lf);
    if (_afterA pp l
    RotateAd
        Ta
    gets != ull)
    {
        foreach
        (
            De legates.ApplyRot t
        e
            Ad da get sA terArgs to In voke in _af
            t
        erAppl
            y
        RotateA
            d
        dT rg ets.G
            t
        Invocatio
            L
        it()
        {
            try
            {
                _ f
                t
                    erApp yRotat A
                d
                    dT ar ge tI nv oke(@par
                ms);
            }

            catc
                (Exception e)
            {
                HKMirror
                    M
                od.D oL
                g
                    E
                rr r(e);
            }
        }
    }
}

internal static void HookApplyShakePositionTargets()
{
    if (!Hoo ke List.Co tains("App
    lySh ak
    e
        Posit io
        n
    Targets"))
    {
        HookedLis
            .A
        d("            pplyShak            Po            itio            nT            arge
        t"            );            On            .iTween.
        pplySh
            kePos
        tionTarge
            t
        s += ApplyShakePositionTargets;
    }

internal static event Delegates.ApplyShakePositionTargets_BeforeArgs _beforeApplyShakePositionTargets;
internal static event Delegates.ApplyShakePositionTargets_AfterArgs _afterApplyShakePositionTargets;

private static void ApplyShakePositionTargets(On.iTween.orig_ApplyShakePositionTargets orig, iTween self)
{
    De le
    a
    te.P arams_Appl yS hakePositionTarg
    ts
        @par
    am s = ew()
    {
        s lf = s
        e
            lf
    }
    ;
    if (_beforeApplyS hakePositio
        Target s !=
        ul
        )
    {
        foreach (Delegates.ApplyS
                     h
        ake Po sitionT ar gets_Bef or e
            Ar gs ton oke in _be or eApp yShakePositi on T
        a
        rgets.
            G
            etI nv oc at io
        n
            Li st())
        {
            t
            ry
            {
                befo
                    e
                y
                    kePosition
                T
                argets?.In
                v
                    ok e(@p ar a
            }

            cat
                h
                (Except
                    i
                    on e
                )
            {
                HKM
                    i
                rror
                    M
                od.D
                    L
                ogError(e);
            }
        }
    }
    self = @para ms se
        f;
    o
        ri g(self);

    f
        (_a fterApp ly ShakePo si tionTargets != null) {
        f each(De
            eg
            tes.Ap plyShakePosition argets_ f
            terAr s toInvoke i n
            _
            a
            ft er Appl yS hakePositionTarge s.GetInvoca
            t
            ionLis
            t
            ())
        {
            tr y

            {
                _ afterA p
                    lyShak Pos
                    t
                a
                gets.I nv oke(@
                p
                    arams);
            }

            c
                a

            t
                ch(Ex ce pt ion e)

            HKMir
            orMo
                .DoLogError(e);
        }
    }
}

}

internal static void HookApplyShakeScaleTargets()
{
    if
        (!H oo kedLi t.Con ta ns(
        "
    App yShak eScaleTarget
        s"){            
    H
        o
    okedLi
        s
    t.Add("ApplyShakeSc            le
    arget ")            
    On.iT wn.
        A
        ha keScaleT
        rgets
            = App
    yShakeSca
    l
        eTargets;
}
}

internal static event Delegates.ApplyShakeScaleTargets_BeforeArgs _beforeApplyShakeScaleTargets;
internal static event Delegates.ApplyShakeScaleTargets_AfterArgs _afterApplyShakeScaleTargets;

private static void ApplyShakeScaleTargets(On.iTween.orig_ApplyShakeScaleTargets orig, iTween self)
{
    elegt sP ar
        m
    s_ApplyShakeScaleTarg ts p
        ram = n
    ew()
    {
        self
            =
            self
    }
    ;

    i
        f(_beforeApplyShakeScal Targe

    s ! nu l)
    {
        oreach(Delegates.ApplySh ak e
        ScaleTargets_Befo re Ar g
        s to Invo ke in _beforeApplyShakeScal
            e
        T
            ar ge ts.G
            e
        tInv oc ati
            o
        nL is t() )
        {
            t
            ry
            {
                befo
                    e
                Ap l
                Sh ke Scal Tar
                g
                ets?.Invok e( @
                p
                    a
                ra ms );
            }
            cat c
            Ex eption
            e
                )
            {
                H KMir o
                rMod
                    .og
                or(e);
            }
        }
    }
    self = @par am.s
        lf;
    or i(se lf);
    if
    a
        fterAppl yS h
    a
    keScaleTargets != nu ll )
    {
        fore
            ch(De le

        gae s.A
            plyShakeScaleTargets _A fterA rg s toInv ok e in _afte
            r
        A
            pp ly Shak Sa eTargets.GetInvocati onLi
        s
        t())
        {
            try

            _a
                f
            t
                plySh e
                ScaleTar ge t
                .
                Iv o
            e(@params);
        }
        catch (Ex e
            p
        ti on e )
        {
            HKMirro
            Mod.Do
                ogEr
            or(e);
        }
    }
}
}

internal static void HookApplyShakeRotationTargets()
{
    if (
        !Hoo ke dList.Conta
        i
    ns("            pplySha            eRota            ionTarg
    ets"            ))


    {
        Hook ed L
            is t.Add("Ap            pl            yShakeRot
            ti
            nTargets");
            n.iTw ee .p pl yS hakeRota
            ionTar
            ets +
                ApplySha
            k
            eRotationTargets;
    }
}

internal static event Delegates.ApplyShakeRotationTargets_BeforeArgs _beforeApplyShakeRotationTargets;
internal static event Delegates.ApplyShakeRotationTargets_AfterArgs _afterApplyShakeRotationTargets;

private static void ApplyShakeRotationTargets(On.iTween.orig_ApplyShakeRotationTargets orig, iTween self)
{
    Dele ga te s.Params_Ap
        lyS ak Ro
    ta ti on Ta rgets
    p
        arams = new
            ()
            {
                sel = self
            };
    if (_beforeAp
    lyShak Rot ti
        nT argets != nu l)
    {
        foreach
        (
            Delegates.ApplySh
                a
        k
            eR ot atio nT argets BeforeArg to nvoke i
        n
            _befor
        e
            ApplySh
        a
            kR oa tionT
        r
        gets.GetI
            v
        o
            n
        ist())
        {
            tr
            y

            {
                _before
                    A
                p
                    p
                ly Sh ak eo tati
                    n
                ar ge ts?.I
                n
                    vok e( @
                pa rams) ;
            }
            ca
                t
            ch(E ce ption e)
            H KM rr rMod.
                oL
                gErro r(e);
        }
    }
}

f = @params
    .self;
orig(elf);
i(_af erApp
yShakeRo
    at
onTa rg ets != nu ll )
{
    foreach (D e
    legates.Ap plyShakeR
    o
        t
    at io nTar ge ts _AfterArgs toIn vo ke in _a f
    t
        erAppl
    y
        ShakeRo
    t
        ai oT arge ts.
        e
        tInv oc ation

    i
        s()

    {
        try
        {
            _aft rApplyShak
            e
                R
            o
                ta ti oT ar ge ts.Invok
                (@para
            s);


            catch (Exception e)
            {
                HK Mi rr
                    r
                M
                od.DoLogErr r(e);
            }
        }
    }
}

internal static void HookApplyPunchPositionTargets()
{
    if (!Ho
    oked Li
    s
    t.Cont
    a
        in ("ApplyPunchPosit
    on
        arg ets"))
    {
        H okedLis.d d(Ap plyPunch
        ositio
            Targe
        s");
        On.i
            T
        ween.ApplyPunchPositionTargets
            += ApplyPunchPositionTarge
        ts;
    }
}

internal static event Delegates.ApplyPunchPositionTargets_BeforeArgs _beforeApplyPunchPositionTargets;
internal static event Delegates.ApplyPunchPositionTargets_AfterArgs _afterApplyPunchPositionTargets;

private static void ApplyPunchPositionTargets(On.iTween.orig_ApplyPunchPositionTargets orig, iTween self)
{
    De
        e
    gates.Para m
    s_ApplyPunchPosit on argets @ pa ram = new()
    {
        se
            = self
    };
    if (_beforeApplyPu
    n
        chPositi nTargets !
        =
        n ul l)
    {
        f re ach(Deleg at es.ApplyPunchPo
        s
            i
        tionTa
            r
        gets_Be
            f
        or eA rg to nvoke in
        b
            eo r
            ApplyPunch Po s
        i
            tionTarget
        s
            .
            G
            eI nc at io nLis
        (
        )
        {
            try


            {
                _b
                    ef oreA
                    p
                plyP
                    u
                nc hP
                s
                    ition Ta rgets?.In vo ke(@params
                ;

                c
                    tch
                    (E cp tio e)


                {
                    HKMirr or M
                        o
                    d.DoLogEr ror(e);
                }
            }
        }

        self = @
        ams.sel
        o
            (self);
        if (_afterApplyP un c
        hPositi nT ar gets !=
            n
        ul l
        {
            fore a(Delegates.ApplyPunchP os
            iti
                o
            nTarge
                t
            s_After
                Ar g to Invo ke
            i
                n _afterA
                p
            lP u
            chP ositionTa
            r
            gets.G et Invo
                c
            a
                t
            io nL is t( ))
            {
                try
                {
                    _after
                        pply
                    unchPositionTargets.In
                        v

                    ok e(@p
                        ra s);
                }

                atch
                    (Exce pt ion

                e)
                {
                    HKMirrorMod.Do
                        L
                    og Er ro(e);
                }
            }
        }
    }

    internal static void HookApplyPunchRotationTargets()
    {
        if
            (!
             ookedList.Contains
             (
                 yP unchRota
        ionTar
            ets")

        {
            Hooked
                L
            ist.Add("ApplyPunchRotationTa
            gets");
            On.iTween.ApplyPu
                nc hRotatio
            Target
                += A
            plyPunchR
            o
                tationTargets;
        }
    }

internal static event Delegates.ApplyPunchRotationTargets_BeforeArgs _beforeApplyPunchRotationTargets;
internal static event Delegates.ApplyPunchRotationTargets_AfterArgs _afterApplyPunchRotationTargets;

private static void ApplyPunchRotationTargets(On.iTween.orig_ApplyPunchRotationTargets orig, iTween self)
{
    D el
    ga
    es.P ra ms_A plyPunchRotat io nT
    a
        rgets @pa rams = n()
    {
        s
            self
    }
    ;
    i f(_b eforeAp
    pl yPunc hR o
    t
        ati nT ar
    g
    ets !=
        n
    ul l)
    {
        fo
            e
        ach(ele a
        e
            s
        p
            yPunchRot ti o
        n
            Targets_B ef
            o
        r
            e
        Ar gs t oI nvok
            n _befo
            r
        eApp
            lP nch
            R
        otati na g
            t
        s.GetInvocationList())
        {
            t y


            _be
                fo re ApplyPu n
                o
            tatioT a
            r
            gets?.Invoke(@params);
        }

        cat ch(Excep ti on
            e)

        {
            HKM ir rorMod.DoLog rr or(e)
                ;
        }
    }
}

self = @para
m
s
    .s ef;
or ig(self);
if (_afterApplyPunc
h
    Rotat o
    n
Targe s
!
    = ul l)
{
    o
        reach(De
            e

    g
    s.ppP nc hRo
        t
    ationTar ge ts
        _
    A
        f
    te rA r to In voke in
    afterA
        plyP
    nchRotationTargets.GetIn
        v
    oc at io
        L
    i
    st())
    {
        r y
        {
            _ after
            A
            pplyPunchRotationTarget.ke(@params
                )
                ;
        }


        catch (Exception e)

        HKMi rr r
        Mod.D L
        o
        gError(e);
    }
}
}
}

internal static void HookApplyPunchScaleTargets()
{
    if (
        HookedLis
    t
        .Contains("ApplyPunchScaleTarge
    s"))
    {
        HookedList.Add("Appl
        yP unchScal
        Target
        ");
        O
            .iTween.A
            p
        plyPunchScaleTargets += ApplyP
        nchScaleTargets;
    }
}

internal static event Delegates.ApplyPunchScaleTargets_BeforeArgs _beforeApplyPunchScaleTargets;
internal static event Delegates.ApplyPunchScaleTargets_AfterArgs _afterApplyPunchScaleTargets;

private static void ApplyPunchScaleTargets(On.iTween.orig_ApplyPunchScaleTargets orig, iTween self)

De le ates.P ar ams_Apply Pu nchScaleTarg ts @params = ne w()


{
    s el f = se lf
}
;
if (_beforeAp pl yP unchScal
    e
T
    arget !null)
{
    f or ea ch(De
        e
        ga te s.App lyP
        n
        c
        al Targets_Bef
        o
        reArgs toI
        n
        v
        o
        k
        _ be foreA p
        yPunchS
        c
        aleT a
        rg ets.
        G
        etI nv o
        c
        at io
        L
        ist())
    {
        try
        {
            _beforeAp ly
            un
                hSca
            le Ta gets?.I

            v
                oke(@para
                    m
                    s);
        }

        cat ch(Exception e)
        {
            H KM ir r
            rMod.DoL
                gE
            ror(e);
        }
    }
}
self = @para
m
s.self;
orig(self);

i
    f
    (_ af

te
    ly PunchSca eTar ets != null)
{
    forea
        c
    h(De le ga te s
        .A pp lyPun
    h
        ScaleTar e
        s
    _
        Args toInvok
    e
        in _after
        A
    pp ly Pu nc h
        Ta rgets.Ge
        Invoca
    ionL
    st())
    {
        try
        {
            _afterApply
                P
            un ch Sc
                l
            e
                Ta rg ets.In voke
            (
                    @params)
                ;
        }
        catch (Exception e)

        {
            HK Mi rrorMod.Do
                L
            ogE
                rr r(e);
        }
    }
}
}

internal static void HookTweenDelay()
{
    if (!Ho o
        ed
    ist.Contains("TweenDe
    l
        ))
    {
        HookedL
        st.Add
        "Twee
        Delay");

        O
        n.iTween.TweenDelay += TweenDela
            ;
    }
}

internal static event Delegates.TweenDelay_BeforeArgs _beforeTweenDelay;

private static System.Collections.IEnumerator TweenDelay(On.iTween.orig_TweenDelay orig, iTween self)
{
    Delegates.Params_T
        eenD
    e
        ay @pa
        ams
            = ne w()
    {
        se
        l
            f = se f
    }
    if (_beforeTweenD la y
        != null
    {
        ore
            a
        c(D eleg
        t
        s.Twe e
        nD ela _
            BeforeAr s t Invoke in _before
            we
        nDel
            aG et Invocat
        o
        nList())
        {
            tr y
            {
                _beforeTweenDelay?.Invoke(@p
                rams) ;
            }

            at
                h(Excep ti on e)
            {
                HKM rr orMod.D
                    o
                LogEr ror();
            }
        }
    }


    sl f = @pa ra ms.self;
    re turn orig(self;
}

internal static void HookTweenStart()
{
    if
    !
        Ho k
    dList.Conta
        i
    ns "Tw            enSta
    rt "
        )
        )
    {
        Ho ok ed is 
            .
        dd("Twee            nS            tart
        ")            ;
        On
            .
            iTwe
            e
        n.Tw
            e
        nStart += T eenStart;
    }
}

internal static event Delegates.TweenStart_BeforeArgs _beforeTweenStart;
internal static event Delegates.TweenStart_AfterArgs _afterTweenStart;

private static void TweenStart(On.iTween.orig_TweenStart orig, iTween self)
{
    e l
    gates.Par am s_
        T
    ween ta rt @pa
    r
        a
    m
        s = n()
    {
        self =
            elf
    }
    ;
    if (
        beforeTweenStart != null)
    {
        f
            o

        re ah(
            e
                l

        egates.Twe
            e
        nStart_B
            e
        foreA rgs toI nv oke in _ be foreTwe
            enSt ar t.GetInvoc t
        io L
        i
        st())
        {
            try
            {
                _beforeTwee nS
                tart?.I
                nvoke(
                        @p rams);
                    catch (Exception e )

                {
                    HKMirrorMod.DoLogError(e)
                        ;
                }
                self = @
                arams.elf;

                rig(self)
                    ;

                if (_afterTweenStart != null)
                {
                    for
                        ach(Delegates.TweenStart_AfterA
                    rg s toInvo
                    e in _
                        fterT
                    eenStart.G
                    etInvocationList())
                    {
                        try
                        {
                            _afterT
                            eenStart.Invoke(@params);
                        }

                        cat
                            ch(Excep
                                ion e)

                        {
                            H
                            MirrorMod.DoLogError(e);
                        }
                    }
                }
            }

            internal static void HookTweenRestart()
            {
                if (
                    Hook
                ed Ls t.Con ai ns(
                    "
                TweenRestart"))
                {
                    HookedList.A d("            weenR            est
                    r
                    ");


                    O
                        Te en.T
                        e
                    nR es tar t
                              + =
                        w
                    eenRestart;
                }
            }

internal static event Delegates.TweenRestart_BeforeArgs _beforeTweenRestart;

private static System.Collections.IEnumerator TweenRestart(On.iTween.orig_TweenRestart orig, iTween self)
{
    Delegates.P ar ams_Tw
        e
    e
        nRe st art
        @para = n ew()
    {
        s
            elf = s el f
            ;
        i(
            befo re Tween Re st
        a
        rt != null)

        {
            f
                or ea ch(Dele
                a

            es.Twee
                n
            Res a
            rt _B efo
                r
            eArg
                s
            o nv k
            e in _beforeTweenRestart.GetInv
                ca
            ionL
                is t( ))
            {
                tr


                {
                    _ efo eTw
                        e
                    enRestart?.Invoke(@params);
                }
                catch
                Exceptio
                e
                {
                    H KMirrorMod.DoLogError(e);
                }
            }
        }
        self = @ pa rams.se lf;


        re tu rn r ig(self);
    }

    internal static void HookTweenUpdate()
    {
        i f(!H oo ke dL
        s
        t.Contain
        (
            "
        Update ))
        {
            o
            okedList.A
                d
            d
            (
                "T            we            en            Ud            at            e");
            On.Tween.ween
            pdate += TweenUpdate;
        }
    }

internal static event Delegates.TweenUpdate_BeforeArgs _beforeTweenUpdate;
internal static event Delegates.TweenUpdate_AfterArgs _afterTweenUpdate;

private static void TweenUpdate(On.iTween.orig_TweenUpdate orig, iTween self)
{
    Delegates.Params_
    weenUpdate @params = new()
    {
        s elf = se
        f
    };
    i
        (_be
    oreTweenU
        p
    date != null)
    {
        foreach (Delegat
                     s.TweenUpdate_BeforeArgs toI
        nv oke in
        before
            ween
        pdate.GetInvocationLis
        t
                ()
            )

        {
            try


            {
                _beforeTweenUpdate?.Invok
                    (@pa
                r
                    ms);
            }

            catc
                h(x eption e
                )

            {
                KM irrorMod.DoLogError(e);
            }

            sel
                @ pa
            r
                as .s elf;
            ri(self)
                ;

            i f(
                a
                    fterTweenUpdate !=

            null)
            {
                f r
                ac
                    (De
                le ae.Tween
                    p
                date_Afte
                    r
                Args toInvo ke in _afterTweenUpdate.
                    etInvoca
                    io
                List())
                {
                    try
                    {
                        _after Tw ee nUpdat
                        e
                            .I nv oke(@param s);
                    }

                    c
                        a

                    t
                        ch(xc ept io n e)

                    H KMir orMod.DoLogErr or(e)
                        ;
                }
            }
        }
    }

    internal static void HookTweenComplete()
    {
        if (!Hook eL ist Co
            n
        t
        a
            in s("T            we            enCo
        p
            ete"))

        {
            H ok
            ed List
                .Add(
                    "
            Tw eeC om plete");
            On.iT ween.TweenComp
            et
                +=
                Tw ee nComp et
                ;
        }
    }

internal static event Delegates.TweenComplete_BeforeArgs _beforeTweenComplete;
internal static event Delegates.TweenComplete_AfterArgs _afterTweenComplete;

private static void TweenComplete(On.iTween.orig_TweenComplete orig, iTween self)
{
    elegat
    s.Pa
    ams_TweenComplete @params = n

    e
        w()
    {
        se l
            f = self
    }

    ;

    if (_ be fo
    r
    eTweenComplete != null)
    {
        f
            oreh(Delegate s.

        T
            w
        een
            C
        omplete_BeforeA gs oInvoke
            in _ be
        f
            oreTwe
        e
        nComplete.GetIn ocation ist
            ))
        try
        {
            _b ef oreTweenComplete
                ? I nv ok e(@param
            );
        }

        c
            tch(
                xception
                    e
            )
        {
            HKMirrorMod.DoLogError(e);
        }
    }


    self = @params.self;
    orig(self)
        ;
    if (_aft
    rTween
        omple
    e != null
        )

    {
        foreach (Delegates.TweenComplete
                     AfterArgs toInvoke in _afterTwe
            en Complet
            .GetIn
            ocat
        onList())
        {
            try
            {
                _afterT
                    w
                ee
                    n
                Comple
                    t
                e.Invoke(@params);
            }
            catch (Ex
                   epti

            o
                e)
            {
                HKMi
                    rr or Mod.DoLog
                    E
                rror(e);
            }
        }
    }
}

internal static void HookTweenLoop()
{
    i f(!HookedLi s
    t.Co
        t
    ains("Twee            Loop"))
    {
        Hook dList.Ad
            ("
        ween
            Lo op ");
        On.T we en.TweenL
            o
        op += Tw ee nL oop;
    }
}

internal static event Delegates.TweenLoop_BeforeArgs _beforeTweenLoop;
internal static event Delegates.TweenLoop_AfterArgs _afterTweenLoop;

private static void TweenLoop(On.iTween.orig_TweenLoop orig, iTween self)
{
    D
        e
    l
        e
    ga te s.Pa m
    _
        weenLoop @ para
        ms = n

    e
        w()


    {
        se
            f
                = self
    }

    ;
    if (_befo eTw enLoop !=
        nu
    l)
    {
        f or each(D
        l
            ega tes.Twe
            e
        nLoop_Before Ar gs toInvoke in _beforeTw
        enLoop.G
            tI
        voca ti onList())
        {
            try
            {
                _ beforeTweenL
                oo?.Invoke(@para s);
            }

            tc h(E xc eption e)
            {
                HKM ir ro rM od.DoLogError
                (
                    e);
            }
        }
        self =
            @
        ms.se
            f
            ;
        orig(se
        f
            )
        i
            _afterT ee nL oo
        p
            != null)

        {
            f
                or ec h(De le
            gates.Tw
                enLoop
            Afte
            Args toInvoke in _afterTweenL
                o
            op.G et
            n
                v
            oca tionLis t()
                )

            {
                tr y
                {
                    _
                        a

                    fterTweenLoop.Inv ke(params
                    );
                }

                c atch(Exce
                    p
                    tio
                    n
                    e)
                {
                    HKMir orMod.D LogErr r
                        (e);
                }
            }
        }
    }

    internal static void HookRectUpdate()
    {
        if (!HookedList.C on
            ti ns("            RectUpda
        e"))
        {
            Hooke
            List.Add(
                "
            RectUpdate");
            On.iTween.RectUpdate +
                RectUpdate;
        }
    }

internal static event Delegates.RectUpdate_BeforeArgs _beforeRectUpdate;
internal static event Delegates.RectUpdate_AfterArgs _afterRectUpdate;

private static UnityEngine.Rect RectUpdate(On.iTween.orig_RectUpdate orig, UnityEngine.Rect currentValue,
    UnityEngine.Rect targetValue, float speed)
{
    Dele g
    at es
    P
        arams_RectUpdat e @params = new()


    c ur entV
    al ue = curr
    n
        tValue,
        t
    argetValue = ta rg etValue, speed = s peed
}

;
if (_bef
re
    tU pdat != null)
{
    fo re ach(Delega te s.Re ctUpdate_BeforeA gs to In voki n _be foreRec tU pdate.G etInv ca tionList())

    {
        try
        {
            _
                beforeR
            e
                ct Up da e?.n v
                oke(@para
                    s
                )

            c
                tch(Excep ti o
                    n
                    e)
            {
                HKM
                    i
                r
                    r
                or Mo d.Do LogE
                r
                r();
            }
        }
    }

    c ur e
        ntVa
    l
        ue =
            @
            params.currentVa lue;
    targetValue
        = p ar ams
        .t ar getValu
        ;

    speed =
        @
        params.speed;
    var r etVal = o rig(curr entV
    lue, targ tV a
        ue, spee );
    if _afterRectUpd at e !=
        null)
    {
        fo re ac h(Dele
            g

        a
            te s.Rect Up ate_Aft rArgs toInvoke in _afterR
            e
        ctU pd ate
            .
            Get nvoc
        a
            ti on List(
        {
            try
            {
                re
                    l
                _
                    fterRectUpd
                a

                te.In voke(@p
                    a

                r
                a
                    ms, rV al );
            }
            catch
                (Excep
                 ion
                )
            {
                HKMirrorMod.DoLogError(e
                    )
                    ;
            }
        }
    }
    r
        et rn retVal
        ;
}

internal static void HookVector3Update()
{
    if (!Ho oke
        d
    Lis
    t
        .Contains("Vector3Upda            e"))

    {
        H oo
        k
        edList
            .Add("Vec            tor3Update";
        On.iT en
        Ve tor3Update + = Vector3Upda
        t;
    }
}

internal static event Delegates.Vector3Update_BeforeArgs _beforeVector3Update;
internal static event Delegates.Vector3Update_AfterArgs _afterVector3Update;

private static UnityEngine.Vector3 Vector3Update(On.iTween.orig_Vector3Update orig,
    UnityEngine.Vector3 currentValue, UnityEngine.Vector3 targetValue, float speed)
{
    Delegates.Params_Vector3U pd ate @
    arams =
        n
    w()


    cu rt alue =
        c ur
    e
        ntValue, targetValu e = targetV al ue

    se ed =
        sp ee d
}

i f(
    b
        eforeVe

to rU pd te != null)
{
    fo reach(Deleg at
    es.V ecto
    3Update
        r
    Args t oI nvoke in _bef or eVector3Upda e.G
        e
    tInvocationList()
        )


    {
        tr y
        {
            fore Vector3Updat?.I nvoke(@pa ra ms);
        }

        catch

        (Except
        i
            on e )
        {
            K
            MirrorMod.o
                L
            r
            or(e);
        }
    }
}

currentVa
    l
u
    e = @ pa ra ms.cur
e
    tValue;
ta r
getV
al ue =
    @par
a
ms.t
r
    getValue;
speed = @params.sp eed;
va re t
    al =
        o rg cu rrent
    a
lue t ag e
t
    Value, speed) ;
if (_afterVec to r3 Up date !=
    null)
{
    or
        h(Dele ates.

    ector3Update_After
        A
    rgs to In voke in _a ft er
        V
    e
        ct or 3Upd at e.GetIn vo cationList())
    {
        try
        {
            re
                tl =
                    _afterVe ct or 3d ate.I
                v
            oke(@para
            s
                ,r eV al);
        }

        ca tch
        (Exc ep tion e
        )


        {
            HK Mi rr or Mod.DoLo
            Error(
            );
        }
    }
}
return retVal;
}

internal static void HookVector2Update()
{
    if (!HookedList.C n
        tain s("Vector2Up
    d
        ate
    "
        ))
    {
        H ookedList.A d("Vect            r2Up            da            e
        ");
        On
            .
            iT we en.Vector2Update +=
            ec
        or2Upda e;
    }
}

internal static event Delegates.Vector2Update_BeforeArgs _beforeVector2Update;
internal static event Delegates.Vector2Update_AfterArgs _afterVector2Update;

private static UnityEngine.Vector2 Vector2Update(On.iTween.orig_Vector2Update orig,
    UnityEngine.Vector2 currentValue, UnityEngine.Vector2 targetValue, float speed)
{
    Delegates.Params_Vecto
    2Update
        @
    ara
        m

    s
        e()
    {
        c
            rrent V
        al ue
                =
                currentValue,
            target Va lu e = ta
        ge
        Valu
            e,
            speed =
                s
        pee
    }

    ;
    if
    (
        _before ec to 2Update != null )
    {
        fore
            ch(De le

        ga t.ector2Updat _BeforeA rg s toIn voke
            in _ beforeV ec tor2U da te.
            G
            e
        tI nv ocat io nList())
        {
            tr
            {
                befor eVector2U
                p
                    d
                at?.Inv

                o
                    ke(@pa ra m
                        s
                    );
            }
            catc
                (Exceptio

            e
                HKMirr rMod
                .
                DoLo Err r(e
                )
                ;
        }
    }
}

cu rren
V
    lue = @p a
    r
ams.
    cu rren
t
Valu
    e
    ;
ta r
V
    alue @ params.targetValue;
sp
    ed =
        @ pa rams.s pe e
    ;

var retVa l
    = orig(c rr entValue, t rg eV ue,
        peed);
i f _a
    terVect or 2Update !u ll)
{
    f
        o
    rea h(Dele ates.
    ec
        t
    o
        r2 Up date _A fterArgs toI nv oke in af te rVector
    2
    Update.Ge tInvoca
    ti oL is t())


    try
    {
        ret
            a
        l
            _
        fterVector2
            U
        pda te.Inv oke(
            @

        p
            a
        ra ms, re tV al);
    }

    c
        tch(E
            cept
            on e)
    {
        HKMir
            r
        or Mo d.
            o
            L
        ogEr or();
    }
}
}
ret
u
rn retVal;
}

internal static void HookFloatUpdate()
{
    i
    f(!Ho
    o
    kedList.Co
        ta
    ns("FloatU            dt            e"))
    {
        Hooke
        List.A
        d("Fl
        atUpdate"
            )
        ;
        On.iTween.FloatUpda
        e += FloatUpdate;
    }
}

internal static event Delegates.FloatUpdate_BeforeArgs _beforeFloatUpdate;
internal static event Delegates.FloatUpdate_AfterArgs _afterFloatUpdate;

private static float FloatUpdate(On.iTween.orig_FloatUpdate orig, float currentValue, float targetValue,
    float speed)
{
    De egate s.
        P
        arams_Float pd ate @
    p
        a
    ra ms = n ew()
    {
        currentValu
            e
                = curr
        e
        ntV lue,
            t ag tVa u
            = targetV
        l
            u,
            speed = spe
        e
            d
    }
    ;
    if (_be
    f
        o
    r
        eF lo aU pt e !=
        n
    ll)
    {
        f
            o

        reac
            h(Deleg
                tes.

        F
            loat
        U
            pd at e_Before
        rgs to
        nvok
            in _beforeFlo
            a
        tU pd at
            et Invo ation
        L
        ist())
        {
            t
                r
            y
            {
                _befor eF
                lo at Up da te?.Invoke @p ra
                m
                    s);
            }
            catch (Exc ept io n e)
            {
                H
                    KMi ro rMod.D
                    Lo
                Error(e);
            }
        }
    }
    c urrentVa
        ue = @
    arams
        currentVa
    l
        ue;
    targetValue = @pa
    ams.targetValue;

    sp eed = @p
    rams.s
        eed;

    ar retVal
        = orig(currentValue,
            targetValue, spe
    ed );
    if (
        afterF
    oatU
    date != nu
    l
        l)


    {
        fore
            a
        ch(Delegates.F
        oatU
            p
        ate_Af
            erAr
        gs o Inv ke in

        _afterFl oa tUpdate.G
            tInv oc at io n
        i
        t()
            )


        tr y
        {
            e
                l = _
            af er
            lo tUpdate.Invoke(@
            ar
                ms,
                re tV al );
        }

        ca
            ch(E xc eption
                e)
        {
            HKMirrorM od.DoLogEr
            or(e);
        }
    }


    return ret Val;
}

internal static void HookFadeUpdate_GameObject_Hashtable()
{
    if (!Hook
    e
    dL is t.Con
        a
    ins("Fade
    p
        d
    _G meObject_Ha
    s
        htable"))

    {
        Ho oL is t.Ad
            (
            Fa eUpda
            te Gam
            eb ect
            _
            Hash
            ta be ")
            On.iTween.FadeUp
            at
            _Gam
            eO bj ect_ ash
            a
            ble += Fa
            d
            eUpdate_GameObject _Ha
            htable;
    }

internal static event Delegates.FadeUpdate_GameObject_Hashtable_BeforeArgs
    _beforeFadeUpdate_GameObject_Hashtable;

internal static event Delegates.FadeUpdate_GameObject_Hashtable_AfterArgs
    _afterFadeUpdate_GameObject_Hashtable;

private static void FadeUpdate_GameObject_Hashtable(On.iTween.orig_FadeUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    D
        el egates.
        arams_
        adeUpd
    a
        te_GameObje
    c
    t_Hashtable
        @params = ne
    w
        ()


    {
        tar
        g
            et = target,
            arg
                = a
        r
            s
    }
    ;
    i
        (_b
    ef or eFadeUpda
        t
    e_GameObje ct _H ashtable
    null)


    ore
        a
    c(D el ega
    e
        .FadU da t
        _G meObject_Hashtab le _B
        fo
    eArg
        st ov ok e in _
        e
    foreF de pd
        a
    te_Ga me Object _Hashtab le.GetI nv cationLi s
        ()

    {
        try
        {
            _beforeFad
                e
            Update_ ame bject _Ha
            s
                h
            ta bl e?
                ok e(@params);
        }
        catch (
            E
            x

        ceptio
            n
        e)
        {
            H
                KM ir rorMo
            oLogError )
        }
    }
}

target
    =
    @params.t
a
    r
g
    et;
    as = @pa
    a
s.args;


orig
    (r get, a
gs);


if (
    _
af te rFadeUpd
    te_Gam
Obje
t_Hashtable !=
    n
ul l
{
    o
        r
    each(De eg a
    t
    es.FadeU da t_ meObje
    ct_H as hta ble_Afte
        r
    Ar gs t oI nvoke in _aft
        e
    rF ad
    eU date_
    Ga eObje t_Has
        ta
    le.GetInvoc
        ai on Li st())
    {
        ry
        {
            _
                fterF
            deUpdate_
                G
            ameObject_Hashtable.In
            oke(@params);
        }
        ca
            tc h(Excep
        ion e)

        {
            HK
            irrorMod.D
            oLogError(e);
        }
    }
}
}

internal static void HookFadeUpdate_GameObject_float_float()
{
    if (!HookedLis
            .Con
    t
    ins("F
    deUp
        da te _GameObje
    c
        t_float_ loat"))
    {
        ookedLi
            t
        Add
        (
            "a            dU            pdat
        _
            ame bj e
        ct _f a
            t_fl at");
        On.i Tw een.
            ad
            Upda
        te _G ameObje
            t
        _float_f o
        a
        t += FadeUpdate_GameOb
        ect_ float
            fl
            ;
    }
}

internal static event Delegates.FadeUpdate_GameObject_float_float_BeforeArgs
    _beforeFadeUpdate_GameObject_float_float;

internal static event Delegates.FadeUpdate_GameObject_float_float_AfterArgs
    _afterFadeUpdate_GameObject_float_float;

private static void FadeUpdate_GameObject_float_float(On.iTween.orig_FadeUpdate_GameObject_float_float orig,
    UnityEngine.GameObject target, float alpha, float time)
{
    Dele
        g
    ates.Param
        s
    _
        Fa dp da te _a me Object_f
    oat_fl
        at @
    arams = new()
        {
            t
            ar ge t
            t
            arget
            , al
            p
            ha = al ph a
            ,

            time = ti e
            ;
            i
            f (b eo reFad eUpdate _G ame
            Ob je ct_float_floa
            t != n
            u
            ll)
            {
            f
            oreach (De ega s.a deUpdate_Game bc t_ fl oat_floa
            _Befor
            Args
            oInvoke i
            n
            _beforeFadeUpdate_GameO
            ject_float_float.Get
            In vocation
            ist())
            {
            try
            {
            _before
            F
            adeUpdate_GameObject_fl
            at_float?.Invoke(@p
            ar ams);
        }
        catch
    Exce
        tion e)
    {
        HK
            M
        ir
            r
        orMod.D
        oLogError(e);
    }
    }


    tar
    g
        t = @p
    rams
        .t ag t;
    alph
        =
        @p rams.alpha;
    time
    @param
        .
        im e;

    o
        rg(t rget,
            a
                pha, ti m);

    f
        (_aft er FadeUpdate_Gam
    Ob
        ect_
    fl oa t_ float
        =
        null)
    {
        f
            or ea ch(De legates.
        FadeUpdate
            GameObjet _f
            oat_ fl oat_Aft er Args toIn
        v
        oke in _afterFadeU d
        at e_ Game Ob ject_float_float.GetI n
        v
            ocatio
        n
        List()) {
            t ry
            {
                _af
                    er adeUpdat_ Ga mO b
                ect_float_f
                    l
                oat.Invoke
                (
                    @
                p
                    ar am s

                cat
                    h
                    (Except
                        i
                        on e
                    )
                {
                    H
                        K
                    Mirr
                        or Mo d.
                        o
                        LogEr or(e);
                }
            }
        }

        internal static void HookColorUpdate_GameObject_Hashtable()
        {
            if (!
                oo
            edList.Con tains("Col            r
            Update GameO ject_H
                a
            s
                ht ab le")            )
            {
                Hooked Li st.Ad d("Colo            rU            p
                d
                    ate_Ga
                m
                    eObject
                _
                    Ha sh table
                    )
                ;
                O.iTwe en o
                    lr Up ate_G ameObje
                    c
                t_Hash ta ble
                          +
                    =
                    Co lo rU pd at e_GameOb
                    ect_Ha
                htab
                    e;
            }
        }

internal static event Delegates.ColorUpdate_GameObject_Hashtable_BeforeArgs
    _beforeColorUpdate_GameObject_Hashtable;

internal static event Delegates.ColorUpdate_GameObject_Hashtable_AfterArgs
    _afterColorUpdate_GameObject_Hashtable;

private static void ColorUpdate_GameObject_Hashtable(On.iTween.orig_ColorUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    elega t
    es.P
        r
    ams_ColorUpdate_
        ame bje t
    _H ah table @
    a
    ra s = new(
    )

    {
        ta rget = target
        ,
        rgs = ar
        s
        ;
        if (_bef reColo
        r
        Up ate GameObject_H
        a
        s
        ht ab le ! = null)
        {
        foreac h (
        D
        e
        legate
        s
        .ColorU
        p
        de _a meO
        j
        ect_Hasht
        b
        l_ B
        foreArgs to
        I
        nvoke in _b ef o
        r
        eC ol oU pd ate_
        a
        bc t_
        H
        ash ab le.Get
        I
        nvo at io ni st())
        {
        try
        {
        _ be or
        Colo
        rp de _G ameObj
        c
        t_Hashtab
        l
        e?.nvoke(@ arams;
    }

    atch(Ex
    ep
        ion e)
    {
        HKM ir ro
            r
        Mod.oL og Error(e);
    }


    }
    }t ar get = @p ar ams.target;
    a
    r
        gs = @
    p
    arams.ar g
        s;

    o rig(t
        r

    get, ar gs);
    i
        (a f
    erColorUpda
        t
    e_GameObjec t
    _
    H
        as hb le ! = null)
    {
        oreach
            (Del
        gates.ColorUpd
            a
        te _G am
            O
        b
            ject_Hasht
        a
            ble_ After
            A
        rgs toInvo e
            in _a terCol rUpd
            a
        te_
            Ga me Object_Has
        htab le
            .
            GetInv
            o
        cationList
            ))
        try
        {
            _af
                tr Co lo rUpdate_
                ameObj
            ct_Ha
            htable.In
                v
            oke(@params);
        }
        catch
            (Exception e)
        {
            HK MirrorMo
                .DoLog
            rror(
            );
        }
    }
    }
}

internal static void HookColorUpdate_GameObject_Color_float()
{
    i
    f(!
        ookedList.C
    on
        t
    ains("
    C
        olorUpdate_Game
    bjec
        t
    Color_float
    "
        ))
    {
        HookedList.A
        d
            ("ColorUpda
        t
            e_Ga
        eObject_Col
            o
        _floa
        ");
        O
        n.iT ween.C olorU da te_GameObject_Co
            or_floa
                = C
        o
            l
        ate_GameO bjec
        _
            olor_ lo at;
    }
}

internal static event Delegates.ColorUpdate_GameObject_Color_float_BeforeArgs
    _beforeColorUpdate_GameObject_Color_float;

internal static event Delegates.ColorUpdate_GameObject_Color_float_AfterArgs
    _afterColorUpdate_GameObject_Color_float;

private static void ColorUpdate_GameObject_Color_float(
    On.iTween.orig_ColorUpdate_GameObject_Color_float orig, UnityEngine.GameObject target,
    UnityEngine.Color color, float time)
{
    Dele ate
    s
        Params_Co or
        U
    date_
        G
    am eO
    j
        ect_Color_float
    pa
        s =
            ne w()
    {
        ta
        g
            et = ta rg et,
            color = color,
            tim
                = time
            ;

        f(_befo re ColorUpda te _GameObje ct _Color_f
        la t! = nu ll )

        fo ac(Delegates.Co lo
            r
            Update
            _
            Gam eO bj ec t_
            C
            lor_fl
            o
            at _B eforeA g
            s toIn oke
            b e
            oreColorUpd
            a
            te_GameObj
            e
            ct _C ol or _f lo at.GetI
            vocatio ni st ())
        {
            tr

            {
                _be
                    oreC
                lorUpdate_GameObj
                    e
                ct _C ol
                    r
                _
                float?.I nvok e(@
                    params);
            }
            catch (Except
            i
                o e)
            {
                HK MirrorM od.Do
                    L
                ogError(e);
            }
        }
    }
    ta
    r
        get = @ arams.target;
    co
        or = @params.c
    oo r;
    t ime = @p
    rams.t
        me;
    o
    ig(target
        ,
        color, time);
    if (_afte
    ColorUpdate_GameObje
        ct _Color_f
    oat !=
        null)
    {
        foreach
            (Delegates.ColorUpdate_
                ameObject_Color_flo
        at _AfterA
        gs toI
        voke in _af
            t
        erColor
            pdate_GameObj
        e
            ct
        _
            Color_
        f

        loat.GetInvocation
            ist(
            )

        {
            try
            {
                _a
                    f
                terColo
                    Update_GameO
                b
                    ect_Color_f
                l
                oat.Inv
                ke(@params)
                    ;
            }

            cat
                h(Ex
                    ce pt ion e)
            {
                HKMirrorMod.DoLogErr
                r();
            }
        }
    }

    internal static void HookAudioUpdate_GameObject_Hashtable()
    {
        if (!o edLi
            tC ontain s
        ("            Au
        io pd ate_GameObject_Has
            ta
        le")
            )
        {
            HookedL
                s
            t.Add("Au
            d
                ioUpda e_
                GameOj ct Hash
            able");

            n.
                Tween.AudioUpdate_Ga
                m
            eO bj ect_Hashtable +
                =
                A uo Up date _m eObject_Hashtable
                ;
        }
    }

internal static event Delegates.AudioUpdate_GameObject_Hashtable_BeforeArgs
    _beforeAudioUpdate_GameObject_Hashtable;

internal static event Delegates.AudioUpdate_GameObject_Hashtable_AfterArgs
    _afterAudioUpdate_GameObject_Hashtable;

private static void AudioUpdate_GameObject_Hashtable(On.iTween.orig_AudioUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Params
        _
    Au io Upd
        a
    te_Gam Ob j
        ect_H
    a
        sh ta ble @
    a
        ms = new(

        {
            e
                = target,

            args args
        }

    if (be fo reAudi
    Update
        _G am eObject_
    ashtab
    e !=
        null)
    {
        foreach (
            D
                el eg at
        s
            .
            AudioUpdat
            e
        _Gam eObje
        c
            t_Hashtable _B efor eA r
        gs t oInvoke in

        _be
            f
        oreAudioUpdate_ Game Obj ec t_Hash
            t
        able.GetInvoc
            ti
        ist ))
        {
            try

            {
                _ be fo reAudioU
                date_G
                    meObj
                ct_Hashta
                    b
                le?.Invoke(@params);
            }

            c
                tch(Exception e)
            {
                H KMirrorM
                d.DoLo
                    Error
                e);
            }
        }
    }


    target = @params.target

    args = @params.arg
    s;
    orig(t
    rget,
    rgs);
    if (_
    a
        fterAud
    oUpdate_GameO
        b
    je
        c
    t_Hash
        t
    able != null)
    {
        fo
            each

        Delegates.A
            u
        dioUpda
            e_GameObject
        _
            ashtable_Af
        t
        erArgs
        oInvoke in
        _
            fterA
        dioUp
            da te _GameObje
        c
        t_Hashtable.G tI
        nvocat on ist())
        t ry


        {
            _ af er udioUpd ate_G me bject_Hashtab l
                .Invoke(@pa
            a
                s);
        }

        c tch(Ex c
            ption
            e)
        {
            HKMi r
            ro rMd.D oLogError(e);
        }
    }
}
}

internal static void HookAudioUpdate_GameObject_float_float_float()
{
    if (!HookedList.Co
    nt ai ns("AudioUpdate_G
    a
        m
    eO bj ect_ fl oat_float_float"            ))            
    {
        Ho
            o
        k
            edLi st.A
            d
        d("Audi            oU            p
        da te _Gam
            e
        ct_float
            a
        at");
        On.iTw ee n.AudioUpd
            a
        te _G aO bj ec t_ float_f oa _fl
        a
            += Au dio
            Up date_Ga me Objec t_ fl oatf lo at_f
        o
            t;
    }
}

internal static event Delegates.AudioUpdate_GameObject_float_float_float_BeforeArgs
    _beforeAudioUpdate_GameObject_float_float_float;

internal static event Delegates.AudioUpdate_GameObject_float_float_float_AfterArgs
    _afterAudioUpdate_GameObject_float_float_float;

private static void AudioUpdate_GameObject_float_float_float(
    On.iTween.orig_AudioUpdate_GameObject_float_float_float orig, UnityEngine.GameObject target,
    float volume, float pitch, float time)
{
    D le
    g
    ates.Params_A
        u
    di oU pdate_ ameO
    b
        je t
        _
    floa _float_f
    lo at @ pa
    r
        ams =
            n
    ew()
    {
        ta g
        t
            target, v
        om e = volume,
            pitch
        pitc
            , time =
            time
    }
    ;
    if (_beforeAud
    oUpdate_GameObject
        _f loat_flo
    t_floa
        != n
    ll)
    {
        for
            e
                ach(Delegates.AudioU
                    date_GameObject_f
        lo at_floa
        _float
            Befor
        Args toInvo
        k
            e
        i
            n _bef
            o
        reAudioUpdate_Ga
            eObj
        e
            t_flo
        t_float_floa
            t

        GetIn
            ocationList
            (
            )
        {
            t
            y
            {
                _
                    be fo reAudioUp
                da te _GameObject_float
                    fl oa t_ floa
                    ?
                    Inv

                o
                    k(@p arams);
            }

            ca t
            (
                xcept io n e)
            {
                H KM rrorMod.Do
                    r
                or(e);
            }
        }
    }
    ta get =
        @
    aram s.ta r
    ge t;
    v
    olum e = @p arams.volume

    pi ch =
        @p ar am s.pitch;
    t
        ime = par
    am s.time;

    o rig(target, v lum
        , p tch, me

    ;
    if (_afte rA udioUpd te_GameObject _f loa
        t
    _
        fl oa t_ fl oa t != null)
    {
        foreach
        (
            D
                elegat
        e
        s.Audi oU p
            d
        at e_ GameO
            j
        ect_float
            f
        la tf lo at_AfterAr
        g
            s oIn oke i
            n

        _
            at er Au di oUpdate_Ga eO
            j
        ct float_ loat_float.G et

        In vocationLis
        (
        )
        {
            ry

            {
                _afterAudi
                    op date_
                    a
                eOb ect_
                f
                    lo t_f
                    la _f
                oat.In
                    e
                @par
                    a
                ms);
            }
            catch
            (xception e)

            {
                HK Mi
                r
                    ro rM
                d.oLogErr r(e);
            }
        }
    }

    internal static void HookRotateUpdate_GameObject_Hashtable()
    {
        if (!
            oo
        List.Contains("Ro
        t
            at Update_GameO je t
            _
        Ha sa ble"            )

        H o
        e
            Li st.Add "RotateUpd
        a
            te_Gam
        e
            Ob ect Ha
        st able")
            ;

        O n.iTw en
        R
            otateUpda
        G
            ae O
            ject_Hashta
        b
        le += Ro at
            e
        U
            p
        da te G
            bject_
        ashtab
            le;
    }
}

internal static event Delegates.RotateUpdate_GameObject_Hashtable_BeforeArgs
    _beforeRotateUpdate_GameObject_Hashtable;

internal static event Delegates.RotateUpdate_GameObject_Hashtable_AfterArgs
    _afterRotateUpdate_GameObject_Hashtable;

private static void RotateUpdate_GameObject_Hashtable(On.iTween.orig_RotateUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Dele
    ates.Para
        m
    s_RotateUpdate_GameObject_Hashtable @para
        s = new()
        {
            target = target, args =
                a rgs
        };

    f(_be
    oreR
    tateUpdate_GameObject_Hashtable
        !=
        null)

    {
        foreach (Delegates.RotateUpdate_Gam
                     Obje
        c
            _Hashtable_
        B
            eforeArgs
        oInvok
        e
            in _be
            f
        oreRotateUp
            d
        ate_GameO
            ject
        _H as ht able.Get
            In ocation ist())
        {
            try
            {
                _befor eR otateUpdate_ ameObje
                t
                    Has ht a
                b
                    In voke(@ pa
                    a
                s);
            }

            c a
            ch(c
            pt io e )

            {
                M
                    irr orMod.DoLogErr or(e);
            }
        }
    }
    target = @pr ms.t
    a
        args =
            p
    arams.a gs

    orig(targe, args);
    if (_afterRotat Upd te_Ga m
        Object_H
    sh
        ab e != null)
    {
        f or each(Delegates.RotateU
        p
            date_GameObject_H s
            h
        le _Aft er Args toInvo ke in _afterRotateUpdat e_ Ga meObj
        e_ Has
        h
        table.G
            e
        tI nv ocati
        nL is t( ))
        {
            tr y


            _f tr Ro tateUpdate GameObjec
                t
            _
                Ha sh ab le.Invok(@p rams);
        }

        c at ch(Ex
        ce ptio
            )
        {
            HK i
            r
                rorM
            oD oLogE r
            ror(e)
                ;
        }
    }
}

internal static void HookRotateUpdate_GameObject_Vector3_float()
{
    i f(!
        o
    okedLis t.Co
        n
    tains("RotateUpdate_            GameObject_Vector3            _f            loat
    ))
    {
        Hoo
            ed
        ist.A dd("Rot            ateUpdate            _GameObject_Vec            or3            fl
        o
            at");
        On.iTween.Ro
            t
        a
            te Ud te_ Ga me bject_ ector3_flo at += RotateUpdate_Ga
        m
            eOb ect
            _
        Vector3
            _
        fl oa t;
    }
}

internal static event Delegates.RotateUpdate_GameObject_Vector3_float_BeforeArgs
    _beforeRotateUpdate_GameObject_Vector3_float;

internal static event Delegates.RotateUpdate_GameObject_Vector3_float_AfterArgs
    _afterRotateUpdate_GameObject_Vector3_float;

private static void RotateUpdate_GameObject_Vector3_float(
    On.iTween.orig_RotateUpdate_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 rotation, float time)
{
    Delegates.Params_R
        ot ateUpdat
        _GameO
    ject_
        ector3_fl
    o
    at @params = new()
    {
        target = target, rot
        tion = rotation
        , time = time
    };
    if (_b
    ef oreRota
    eUpdat
        _Gam
    Object_Vector3_float != null)
    {
        f
            o
        re
            a
        ch(De
        l
        egates.RotateUpdate_GameObject_Vector3
            floa
        t
            BeforeArgs
        t
        oInvoke in
        _befor
            e
        otate
            pdate
        _
            ameOb
        ect_
            Ve ct or3_f lo at.G
            e
        tInvoc at io nList())
        {
            try
            {
                _before otateUp at
                    _G meObj
                    c
                _Ve
                    c
                tr 3f lo at?.I
                    (@ params )
            }

            ca tc

            Except i
            e)


            KMirr o
            rM od.o
            LogError(e);
        }
    }
}

targ et = @params.targe t
    r
ta ti on
    = p ar ams.ro
a
    tion;
tim
    e
        = @params.time;
orig(target, ro ation, ime)
f(_aft
rR ot teUpdate_GameObject_Vect r3_float != null
    )

{
    f oreach(Del gat
    e
    s
        .R ta teUp at e_GameOb je ct_Vector3_float_AfterAr s toInvo
    k
    e
        in _a
        f
    ter Rotat
    e
        Up da e_Gam
    ject_ ecto
    3
    _l o
    t.G et Inv oc ation
        Li st())
    {
        try


        {
            _a ft e
                ateU pd t
            _
                ame bject _
            Vector
            3_ floatI nv ke(@par
            a
                ms);
        }

        catc
            xceptio e
        {
            K Mi rr
                o
            rMod.D
                oL gE ror
            (
                );
        }
    }
} }

internal static void HookScaleUpdate_GameObject_Hashtable()
{
    if (!
        o
    okedList.C
    ontains("Sc            leUpdate_Gam            Object_Hashtable"))
    {
        Hoo ke dLi
        t.dd("ScaleUpdat            e_GameObject_Hashtable");

        O
        n.iTwe en.ScaleU pd ate_
            G
        a
            me Oj ect_ Ha shta le += ScaleUpdate_ ameObject_Ha sh tab
        l
            e;
    }
}

internal static event Delegates.ScaleUpdate_GameObject_Hashtable_BeforeArgs
    _beforeScaleUpdate_GameObject_Hashtable;

internal static event Delegates.ScaleUpdate_GameObject_Hashtable_AfterArgs
    _afterScaleUpdate_GameObject_Hashtable;

private static void ScaleUpdate_GameObject_Hashtable(On.iTween.orig_ScaleUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Params_ScaleUpdate_GameOb
    ect_Hashtable @params = new()
    {
        target
            = target

        args
        args
    };
    if (_b
    e
    foreScaleUpdate_GameObject_Hashtable != nu
    l)
    {
        foreach (Delegates.ScaleUpdate_Ga
                     me Object_
            ashtab
        e_Be
        oreArgs toInvoke in _beforeScale
            U
        pd
            a
        te_Gam
            e
        Object_Hashtable.GetInvocationList())
        {
            tr
            y
            {
                _beforeSc
                    a
                leUpdate_G
                    meObje
                c
                    _Hasht
                a
                ble?.Invoke
                (
                    @params);
            }
            ca
                tc h(xceptio n
            e
                ) {
                HKMirrorMod.DoLog rror(e);
            }
        }
    }
    targe
        = @p aram
        .
        arg
        et;
    gs = @pa
    a
    s.args;

    g(t
    r
        et, ag );
    i
        (_afterScale Up date_GameObject_Hash ta bl e != n
    ll

    {
        f
            or ea ch(Del
            ga

        te s.ScaleUp da t
            e_GameO bj ect_Hashtab e_ AfterArgs oI nvok in _aft
            rSc al eUpda
        e_
            ameObj ec t_Hashtable.Ge Iv ocation Li st())
        {
            t
            ry
            {
                _ afterScaleUpd
                a
                    t
                e_ Ga meOb je ct_Hash able.Invoke(@params);
            }
            catch (Exc ep t
            i
                o
            n e)

            {
                HKMirr
                    o
                rM o.oLog
                    r
                ror e);
            }
        }
    }
}

internal static void HookScaleUpdate_GameObject_Vector3_float()
{
    if (
        H
    ok ed List.
        C
        onta i
    ns("Sc
    a
        le pd ate
    _
        ameO
    b
        je ctV e
    cto 3_float"))
    {
        H ookedList.Add("            Sc            aleUpdat
        _G
            meOb
        je c_ ector3_ l
        oat"            ;
        On.i
        Tween.Sca le Update_ am eO bject_Vecto r3 _float += Sc ale
            pdate_Gam Ob
        ect_Vector3_flo at;
    }
}

internal static event Delegates.ScaleUpdate_GameObject_Vector3_float_BeforeArgs
    _beforeScaleUpdate_GameObject_Vector3_float;

internal static event Delegates.ScaleUpdate_GameObject_Vector3_float_AfterArgs
    _afterScaleUpdate_GameObject_Vector3_float;

private static void ScaleUpdate_GameObject_Vector3_float(
    On.iTween.orig_ScaleUpdate_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 scale, float time)

e
    eg at eP arams_ScaleUpd te GameObject
    _e ct or 3_float
    params
    = new
    )
{
    targ
    e
        t = target, scale = scale, time = time
}
;
i
    (_beforeScaleUpdate_GameObject_Vector3_f
lo at != nu
l)
{
    f
        reach
        (Delegate
            s
            .

    ScaleUpdate_GameObject_Vector3_float_Before
    rgs toInvoke in _beforeScaleUpdate_GameO
        bj ect_Vec
        or3_fl
    at.G
    tInvocationList())
    {
        try
        {
            _before
                S
            ca
                l
            eUpdat
                e
            _GameObject_Vector3_float?.Invoke(@para
            s);
        }
        catch (Exce
               p

        tion e)
        {
            HKMirr
                o
            Mod.DoLogEr
                r
            or(e)
        }
    }
}
targe
    = @
pa ra ms.target;
cale = @param s.cale;
ti me = pa rams.time;
orig
    rgt,
    sa le,

tm e) ;
i(_a
t
    rScalep da e_Gam
O
    ject_V e
    tor3 l
    at !ul


foreach (Delegates.ScaleUpdate_GameObj ect_
ec
    or3_
fl oa t_After
    r
gs toInvo
k
e in _a fterSca le Update_GameO bj ct_Vect or 3_float.GetIn v
cationLis ))

try
{
    _afte rS caleUpdate_ Ga meObject_Vecto
        r
    3_flo t.Invoke(@pa
    r
        a
    ms );
}

tc h(E cepti n e)
{
    HKMirrorMo d.DoLogEr or(e);
}

}
}
}

internal static void HookMoveUpdate_GameObject_Hashtable()
{
    if (!H
    o
        o
    k
        ed Li sC on tai ns("M
    v
        Update_
    G
        ameObj
    ec _Ha ht
        b
    e"))
    {
        H
            oo kedL
            is t.Ad
            (
            Mov Upda
            t
            e_ am
            eO bj ct
            _
            Hashtab le);
        On
            .Twee
        n
            .M ov
        U
            pdate_ ameObject_Hashtable + = MoveUpdat _Ga
            eOb ect_
            Ha ht able;
    }
}

internal static event Delegates.MoveUpdate_GameObject_Hashtable_BeforeArgs
    _beforeMoveUpdate_GameObject_Hashtable;

internal static event Delegates.MoveUpdate_GameObject_Hashtable_AfterArgs
    _afterMoveUpdate_GameObject_Hashtable;

private static void MoveUpdate_GameObject_Hashtable(On.iTween.orig_MoveUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    De ega es
        .Pa ra ms _MoveUpd te _
    G
        ame
    O
        bjec t_ Hashtable @params = new()
    {
        ta
        rge
        ta get
        ,

        args = args
    };
    if (_beforeMoveUpda
    e_ Ga eObject_Hashtable != null)
    {
        fore a(De le
        gates.Mo
            eUpdat
        _Game
            bject_Has
        h
        table_BeforeArgs toInvoke in _beforeMoveUpd
        te_GameObject_Hashtable.GetInvocationLi
        st())
        {
            tr

            {
                _be
                    oreMo
                eUpdate_G
                    a
                meObject_Hashtable?.Invoke(@params);
            }

            cat
                h(Exception e)
            {
                HKMirrorMod.DoLogEr
                    ro r(e);
            }
        }
    }
    ta
        get
    @params.target;
    args = @params.a
    rg
        s
        ;
    orig
    (
        target, args);
    if (_afterMoveUpdate_G
    meOb
        j
    ct_Hashtabl
    e
        != null)


    forea
        c
        (Dele
            g

    ates.MoveUp
        d
    ate_GameO
        ject
    _H as htable_Af
    t
        erArgs to Invoke in _ afterMoveUp date_G am eObject
        Hs ht ab
    e
        Get
    I
        an Li(
    )
    {
        try

        afte
            M
        veUpa t
        eG am
        O
            bject_Hashta le.Invo ke(@params);
            catch E
            cep ion
            e)
        {
            HKMir
                or Mo d.DoLog rr or(e);
        }
    }
}
}

internal static void HookMoveUpdate_GameObject_Vector3_float()
{
    if (!HookedList.Contai ns("Mo
    v
        eUpdate_G meO jec
    t
        _
    Ve ct or3f lo at"))
    {
        Hooked ist.Add "MoveU            date_GameO            bj            ec
        t
            _
        Vector
        3
        _float"
            )
        ;
        On.i wee
            .
            MoveUpdat
            _
        Gm eO ject_Vecto 3
        _
        float += Mov U
            p
        da te _G aO bject_
            e
        tor3_fl
        o
            at;
    }
}

internal static event Delegates.MoveUpdate_GameObject_Vector3_float_BeforeArgs
    _beforeMoveUpdate_GameObject_Vector3_float;

internal static event Delegates.MoveUpdate_GameObject_Vector3_float_AfterArgs
    _afterMoveUpdate_GameObject_Vector3_float;

private static void MoveUpdate_GameObject_Vector3_float(
    On.iTween.orig_MoveUpdate_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 position, float time)
{
    Delegates.Params_Mov
        e
    Up da te
        G
    a
        meObject_V
    e
        cto r3_flo
        a
    t @params = new()
    {
        target = target, posit
        ion = pos it io n
        , ti
        m
        e = t
        i
        me
    };
    if (_beforeo ve Update_Gm eb ct
    _Vec to
    r
    3_floa
    t
        != null)
    {
        foreach (Delegates.MoveUpdat _G eO
            ject_V ector3_float_BeforeArgs toInvoke in _
            bf or eM oveUpdat
            _GameO
        ject_
            ector3_fl
        o
        at.GetInvocationList())
        {
            try
            {
                _beforeMoveUpdate_G
                meObject_Vector3_float?.Invoke(@params);
            }

            catc
                h(Excepti
                    n e)

            HKMi
            rorMod.Do
                L
            ogError(e);
        }
    }
}

target = @params.target;
positio
    = @params.position;
time = @params.time;
orig
(t arget,
    ositio
    , ti
e);
if (_afterMoveUpdate_GameObject_Vect
o
    r3
_
float
    !
    = null)
{
    foreach (Delegates.MoveUpdate_GameO
                 ject
    _
        ector3_floa
    t
        _AfterArgs
    toInvo
    k
        in _
        fterMo
    v
        Updat
    _Game
        O
    ject_
        ecto
    r3 _f loat.Ge tInv
    o
        cationLis t())
    {
        try
        {
            _afte rM oveUp da te_GameObject_ Vect
            r3_f lo at.
                no ke(@

            p
                aa ms );
        }

        a
            (Except i
        n e)
        {
            H
                MirrorM od DoLog
            r(e)
        }
    }

    internal static void HookLookUpdate_GameObject_Hashtable()
    {
        if (!ok
        dL st
            .C on tain s("Lo
        k
            Update_Ga
        m
            eObject Hashtable"))
        {
            Hoo kedList.Ad("LookU            date_G            meOb
            ect_Has ht al e"            )

            On.i Tw een.LookUpdate_Ga eObje ct Hashta le += LookUpd at _GameO ject_Hashtab le
        }
    }

internal static event Delegates.LookUpdate_GameObject_Hashtable_BeforeArgs
    _beforeLookUpdate_GameObject_Hashtable;

internal static event Delegates.LookUpdate_GameObject_Hashtable_AfterArgs
    _afterLookUpdate_GameObject_Hashtable;

private static void LookUpdate_GameObject_Hashtable(On.iTween.orig_LookUpdate_GameObject_Hashtable orig,
    UnityEngine.GameObject target, System.Collections.Hashtable args)
{
    Delegates.Param s_ L
        okUpdate
    Ga m
    je ct_Hashtable @params = ew )
    {
        target = target
            , ar gs = args
    }
    ;
    i(be fo reLo kp date_GameOb ject_Hash ab e != null)
    {
        forea ch(Del gat
        e
        s.o ok pdate _G am
            e
        Ob je ct_Has t
        able_Befo
            e
        A
            t
        Invok e in _b f
        o
            reLookUpda
        t
            e
        _
            Ga me O
        t_ Hashtabl
            .GetIn
            ocat
        onList())
        {
            try
            {
                _beforeLookUpdate_G
                    a
                me Ob je
                    t
                _H sha ble?
                    .Invoke(@
                p
                    aram s) ;
            }
            catch (Exception e)
            {
                HKMir
                    rorM od.DoL gE ror(
                    e
                );
            }
        }
    }
    target = @param s.target;
    ar gs = @
    par as .a
    r
        gs;
    ori(t arget, ars);
    if _afterLookUp da te
        Ga
    eObjec t_ Ha sh table null)
    {
        foreach (
            Dl eg at es.LookU
            date_G
        meObj
            ct_Hashta
        b
        le_AfterArgs toInvoke in _afterLookUpdate_Ga
        eObject_Hashtable.GetInvocationList())
        {
            t ry
            {
                _af
                    erLook
                pdate
                    GameObjec
                t
                _Hashtable.Invoke(@params);
            }
            catch (Except
            on e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }
}

internal static void HookLookUpdate_GameObject_Vector3_float()
{
    if (!HookedList.Contains("LookUpda
    e_Ga
        m
    Object_Vect
        o
    r3_float")

    {
        Hoo
            k
        dList.A
        dd("LookUpd
        a
            te_GameOb
        ect_
            Ve ct or3_f oat"
            )
        ;
        On.iT ween.LookUpdate_GameObject_Vector3_
        loat +
            o
        kUp
            d
        ae _G ameObj
            c
        _Vector 3
        floa
            ;
    }
}

internal static event Delegates.LookUpdate_GameObject_Vector3_float_BeforeArgs
    _beforeLookUpdate_GameObject_Vector3_float;

internal static event Delegates.LookUpdate_GameObject_Vector3_float_AfterArgs
    _afterLookUpdate_GameObject_Vector3_float;

private static void LookUpdate_GameObject_Vector3_float(
    On.iTween.orig_LookUpdate_GameObject_Vector3_float orig, UnityEngine.GameObject target,
    UnityEngine.Vector3 looktarget, float time)
{
    Delegates.Param _LookUpda e_G meOb
    ec
        _Vec
    to r3 _float
    p
        arams = n

    e
        w()
    {
        t ar get = target, lookt ag et = looktar
        et
            , tim
            =
            time
    }

    ;
    if (_beforeLookUpda te_GameO bj ect_V
        e
    ct or 3_float != null)


    {
        f or each D elegates.LookUpdate_GameObj ec t_ Vector3_f
        l
            oat_B
        e
            foreArg
        s
            o Iv oke i
            _be foreLo
            ae _
            ameOb je ct_Ve ct
            o
        r3_float.Ge
            t
        I
            nv oc ti on Lt() )
        {
            try


            _befo
                eLoo
            Update_GameObject_Vector3_float?.Invoke(@
            p
                ar am s)
        }

        at ch(Exce
            p
            tio n e)
        {
            HKMirrorMod.DoLogError(e);
        }
    }
}

target =
    @ pa rams tar et;


loo
k
    target = @params.looktarget;
time = @p ar
ams.ti
m
    e;

ori
    g
    (ta rg

et , looktarget, time);
if (_afterLo
kU
    date_GameObject_ Ve ctor3_fl oa t != nul l)
{
    fo
        ra ch(Delegate
        .LookU
    date_
        ameObject
    _
    Vector3_float_AfterArgs toInvoke in _afterLookUp
    ate_GameObject_Vector3_float.GetInvocationLi
    st())
    {
        tr

        {
            _af
                erLoo
            Update_Ga
                m
            eObject_Vector3_float.Invoke(@params);
        }
        catch
        Exception e)
        {
            HKMirrorMod.DoLogError(e);
        }
    }
}
}

internal static void HookPathLength_Array()
{
    i
    f(!
        H
    oo
        k
    edList
        .Contains("PathLength_Array"))
    {
        HookedList
        Add(
            "
        athLength_A
            r
        ray");
        new
            Hook(R
        e
            lectionHelp
        e

        r.GetMe
            hodInfo(
                t
                    peof

        (
            Twee
        n), "PathLeng
        t
            h_Array",             false), Pa            hLength            Array)            
    }
}

internal static event Delegates.PathLength_Array_BeforeArgs _beforePathLength_Array;
internal static event Delegates.PathLength_Array_AfterArgs _afterPathLength_Array;

private static float PathLength_Array(Func<UnityEngine.Transform[], float> orig,
    UnityEngine.Transform[] path)
{
    Delegate
    s
        .P ar ams_PathLength_
        A
    r
        ra y @par am s = new()
    {
        path = path
    };
    i(befo re PathLengt
    h
        _
    Ar a
    y != nu
    l
    {
        fore
        Delegats.
            P
            th_Arra y_Be
            fo eA rgs toIn
            v
        o
        k
        e in _ be forePa
            h
        ength_A
            r
        ray.Ge
            vo ationLi t
            ))
        {
            tr
            y

            {
                be fore
                Pa thLe ng h
                Array?.I

                nvok
                    e(@par
                        a
                        ms);
            }


            atch(Ex
            c
                ptio
            n )


            {
                HKM rrorMod.DoLogError(e);
            }
        }
    }
    path = @p
    ra
    s.pat h
    va r retVa
        = orig(p at h);

    if (_afterPathLength_Array != null)
    {
        foreach
        Delegat es.P th
        eng th _Array_Af te rArgs toInv ke in _afte Pa thLe g
        t
        h_Array.GetInv ocat
        i
            o
        nL is t()
        {
            y
            {
                rea l = _afte Pa hLength_Arr ay.Invo ke(
                @params, r
                e
                tVal);
        }

        c
            ac h(Exce ion e)


        HM ir orMod.D oL ogEr
            r
        or(e);
        }
    }
}

r t
ur ne tV al;
}

internal static void HookCameraTexture()
{
    if (!HookedL
    i
    st.C on
    a
        in ("            CameraTe
    xt ur e"))
    {
        H
        ookedList.Add("CameraTexture");
        On
            .
            iT ee n.CameraT x
        tu e
           +
            = CameraTexture;
    }
}

internal static event Delegates.CameraTexture_BeforeArgs _beforeCameraTexture;
internal static event Delegates.CameraTexture_AfterArgs _afterCameraTexture;

private static UnityEngine.Texture2D CameraTexture(On.iTween.orig_CameraTexture orig,
    UnityEngine.Color color)
{
    Delegates.Params_CameraTextur
        @params = new()
        {
            color = color
        };

    i
        f(_befor
            Camera

    extu
    e != null)
    {
        foreach (Delegates.
                     C
                     am
        e
            raText
        u
        re_BeforeArgs toInvoke in _beforeCame
            aTex
        t
        re.GetInvoc
            a
        tionList()

        {
            try


            _befo
                r
            eCameraText
                u
            re?.Invok
                (@pa
            ra ms );
        }

        catc
            h
            (Exception e)
        {
            HKMirror od.DoLogError
                e);
        }
    }
}

col
o
    r = @ params. o
    or;
va tVal
rig(c l
or );

i
    f(_a fterCameraTexture !=

null)
{
    foreach
        (D
            leg t
    es.C ameraTe
    t
        ure_After
    A
    rgs toInvoke in _afterCam raTextu e.Get nvocati
    nList())
    {
        ry
        {
            retVal = _ aft er CameraT ex ture.Invoke(@par
            a
                ms, retVal);
        }
        ca
            t
        c
            h Ex cep ti n e)
        {
            HKMi rr orMod.DoLog rror(e);
        }
    }
    re tu rn
        r
    e
        tVal;
}

internal static void HookPutOnPath_GameObject_Array_float()
{
    i
    f
        (!Ho ok ed List.C t
    ins("Pu            On            ath_            Ga
    mO bj
    c
        _Arr y_ l
    o
        at")
        ){
        H
            o
        ok dL st
            .dd("
        P
            ut O
            h
        _GameObject_Array_float");
        new Hook(Re
        le
            ti nH
        er.G etMeth
        d
            Info typeo
        f
            (iTween), "            PutOnPath_GameObject_Array_float
            , false)
        P
            tOnPa h_GameObjec _Ar ay_float);
    }
}

internal static event Delegates.PutOnPath_GameObject_Array_float_BeforeArgs
    _beforePutOnPath_GameObject_Array_float;

internal static event Delegates.PutOnPath_GameObject_Array_float_AfterArgs
    _afterPutOnPath_GameObject_Array_float;

private static void PutOnPath_GameObject_Array_float(
    Action<UnityEngine.GameObject, UnityEngine.Vector3[], float> orig, UnityEngine.GameObject target,
    UnityEngine.Vector3[] path, float percent)
{
    Delegate.Params_PutOnPath
        _a me Ob ject_Arr
        y_floa
    @par
        ms = new(
        )

        {
            target = target, path = path, percent = p
            rcent
        };
    if (_beforePutOnPath_GameObject_Ar
    ra y_float
        = null

    {
        fo
            each(Del
                e

        gates.PutOnPath_GameObject_Array_float_BeforeA
        gs toInvoke in _beforePutOnPath_GameObject
            _A rray_fl
        at.Get
            nvoc
        tionList())
        {
            try
            {
                _beforePutOnPath
                    _
                Ga
                    m
                eObjec
                    t
                _Array_float?.Invoke(@params);
            }
            catch (E
                   cept

            i
                n e)
            {
                HKM
                    i
                rrorMod.Do
                    ogErro
                r
                    e);
            }
        }
    }
    t
    a
        rget =
            param
    s
        targe
        ;
    pa
        t @ arams.
        p
        ath;
    percent = @params.percent;
    orig(target,
        th, per e
    t);
    f(_a fterP ut O
    P
        th_Game O
        ject_
    r
        ay_flo a
        !=
        u
    l)
    {
        f
            or ea
            (Delegates.PutOnPath_GameObject_Array_fl oat_
        ft
            rAr s
            t oI nv ke in a
            fterPutOn Pa t
        h_GameObject_Array_float.GetInvocationList()
        {
            ry
            {
                _af
                    er
                utOnPath_GameObject_Array _float.Inv ke(@par ms
                    )
                    ;
                    catch

                (Excepti
                o
                    n
                e )
                {
                    H KM irrorMod.D oLo gE rror(e);
                }
            }
        }
    }

    internal static void HookPutOnPath_Transform_Array_float()
    {
        i(!ookedLi st Con
        t
        ains("Pu            tO            nP
        a
            t
        h
            an so rm Array_ o
        t"            ))
        {
            H
                o
            okedLi
            st.Add(
                P
            tOnPath
                _
            Trans
                fo rm_A
                r
            y_float
            "
                );
            n
                ew Hook Refl
            ec ionH
            e
            r.G
                e
            tM et
            o
                dIn o(ypeof(iTween), "P            tO            Path_Tra            sform_Ar            ay
            fl
                at",
                ), PutO
                P
            ath_Trans
                f
            orm_Array_float);
        }
    }

internal static event Delegates.PutOnPath_Transform_Array_float_BeforeArgs
    _beforePutOnPath_Transform_Array_float;

internal static event Delegates.PutOnPath_Transform_Array_float_AfterArgs
    _afterPutOnPath_Transform_Array_float;

private static void PutOnPath_Transform_Array_float(
    Action<UnityEngine.Transform, UnityEngine.Vector3[], float> orig, UnityEngine.Transform target,
    UnityEngine.Vector3[] path, float percent)
{
    Delegate
    s.Pa ram s_ utOnP at h
    _Tra sf orm_Array_float @params =
            ew
        )
    {
        target = arget
            , p ath = pat
        h, p er cent = p
        rcent
            ;
        if
        _beforePu
            t
        OnPath_Transform_Array_float != null)
        {
            fo
                each(Delegates.PutOnPath_Transform_Ar
                    ra

            y_float_
                eforeA
            gs to
            nvoke in
            _
            beforePutOnPath_Transform_Array_float.Get
            nvocationList())
            {
                try
                {
                    _beforePutOn
                        Pa th_Tran
                        form_A
                    ray_
                    loat?.Invoke(@params);
                }
                catch
                (
                    Ex
                    c

                eption
                    e)
                {
                    HKMirrorMod.DoLogError(e);
                }
            }
        }
        ta
        r
            et = @param
        s
            .target;
        p
            th = @
        p
        rams.p
        a
            th;
        percent
            = @params
        perc
        en t;
        orig(targ e
        t, path, percent);
        if (_a ft erPutOnPath_Tra
        sform_A
            r
        y_f
            l
        ot ! = n ull)
        {
            f oreach(
                egat
                    s
                    PutOn P
                    at h_
                    r
                    ansform_Array_fl at_AfterArgs toInvoke
                    n
                    afte
                    rP ut OnPath_
                    r
                    ansform_A
                    r
                    ray float.G tInvoc tionList())
            {
                try
                {
                    _afterPu
                        OnPath_T
                    an
                    form_Array_floa.Invoke(@params);
                }

                cat
                    c
                h(Exception e)
                {
                    H
                        KM ir ro
                    d.DoLo Error();
                }
            }
        }
    }

    internal static void HookPointOnPath_Array_float()
    {
        if (
            H
        ok e
        List.Contai
            n
        s("Point            OnP
        a
            t
        h
            _A rr y_ fl oat ))

        okedLis
        t
            .Add("
        Po intO
        P
            th_Arra
        y_ fl oat ")            ;
        new H oo k(Refl
            e

        tion
            H
        el pe
            .GetMethodInfo(typeo(iTwe en, "PointOnPa            th            Ar
        ay_f
            l, fals e) P
            ointO nP ath_
        A
            rray_fl oa t);
    }
}

internal static event Delegates.PointOnPath_Array_float_BeforeArgs _beforePointOnPath_Array_float;
internal static event Delegates.PointOnPath_Array_float_AfterArgs _afterPointOnPath_Array_float;

private static UnityEngine.Vector3 PointOnPath_Array_float(
    Func<UnityEngine.Transform[], float, UnityEngine.Vector3> orig, UnityEngine.Transform[] path,
    float percent)
{
    D elegates.Params_PointOnPath_Array_flo at @ params = new()
    {
        p at h = path
        p ercent = p rc ent
    };
    if (_before Po intOnPath_Array _f loat != null)
    {
        f re ch(Dele ga tesP oi nt OnPath_A
        ray_fl
            at_Be
        oreArgs t
        o
        Invoke in _beforePointOnPath_Array_float.GetIn
        ocationList())
        {
            try
            {
                _beforePointOnPath_
                    Ar ray_floa
                    ?.Invo
                e(@pa
                ams);
            }

            c
                a
            tch(Exception e)
            {
                HKMirrorMod.DoLogError(e
                    ;
            }
        }
    }
    path = @params.path;
    percent = @p
    ar ams.per
        ent;
    v
        r re
        Val = orig(path, percent);
    if (_aft
    e
        rP
    o
        intOnP
    a
    th_Array_float != null)
    {
        foreach (Deleg
                     tes.
        P
            intOnPath_A
        r
            ray_float_
        fterAr
            g
        toInvoke i
        n
            _after
        ointOnPa
            t
        _Arra
            _flo
        at.G etInvocat
        i
        onList())
        {
            t ry
            {
                re Va l = _afterPoi nt OnPath_Arr ay _
                loat.In
                    o
                e(@
                p
                aa ms, retV
                l
                    ;
            }

            cat c
            (Exce pti
                n
                e)
            {
                HKM i
                ror Mo d
                    D
                Lo gE rro r
                (e);
            }
        }
    }
    return retVal;
}

internal static void HookDrawLine_Array()
{
    f
        (!Hooked
    L
    ist.Contains("Dra            Line_Array"))
    {
        HookedList.Ad
            ("DrawLi
        e_
            rr ay");
        new Hook(R flectio Helper GetMethodI nf o(
            t
        ypeof(iTween), "D
        r
        a
        wL in e_Ar ra y", false), DrawLine            Array);
    }
}

internal static event Delegates.DrawLine_Array_BeforeArgs _beforeDrawLine_Array;
internal static event Delegates.DrawLine_Array_AfterArgs _afterDrawLine_Array;

private static void DrawLine_Array(Action<UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] line)
{
    De legates
    P
        arams_Dra
    w
    Line_Array @param = ne w(
    {
        line = l in e
    }
    ;
    if (_b foreDra wL e_
        rr y != nu ll
    {
        for ach(D el gates.rawLi ne_Array
        _
            BeforeA rg s toInvoke
            i
        n _b efor eD rawLine_Array.GetInvocationList()
        {
            try
            {
                _ efor
                e
                    Dr aw Line
                _
                    Ar ra y?.v
                oke(@par m
                    )
                    ;
            }

            c tc(Excepti
                o
                n e)

            H
                K
            M
                i
            d.Do LogError
            e);
        }
    }
    l
        ne = @params.line;
    orig(line);
    if (
        _
    af te rD
        a
    w
        Line_ rray ! =
        null)
    {
        fore ch(Delegate s.
        DrawLine_Array_Af
            terA rg s toInvoke
            in
        _
            afterDrawLine_Array GetInvocatio
        nL
                ()
            )

        {
            try


            {
                _afterDrawLine_Array.Invoke(@
                ar
                    ms);
            }
            catch (Exception e)
            {
                H
                    Ki rr or Mod.DoLo
                Error(
                );
            }
        }
    }

    internal static void HookDrawLine_Array_Color()
    {
        if (!HookedList.Contains("DrawLine_A
        rr ay_Color
            ))
        {
            H
                okedL
            st.Add("D
            r
                awLine_Array_Color");
            new Hook(Reflection
            elper.GetMethodInfo(typeof(iTween), "
            Dr awLine_
            rray_C
                lor"
            false), DrawLine_Array_Color);
        }
    }

internal static event Delegates.DrawLine_Array_Color_BeforeArgs _beforeDrawLine_Array_Color;
internal static event Delegates.DrawLine_Array_Color_AfterArgs _afterDrawLine_Array_Color;

private static void DrawLine_Array_Color(Action<UnityEngine.Vector3[], UnityEngine.Color> orig,
    UnityEngine.Vector3[] line, UnityEngine.Color color)
{
    e eg tes.Pa
        am
    _Draw Li ne_Array_Co lo r @p arams new()
    {
        li e
        = lin
        , co or = c
        o
        l
        or
    };
    if (_beforeDrawLine_Arra y_ Color !n ull)
    {
        for
            ea ch(Dele
                g
        at es.Draw
        L
            in e_ Array
        C
            olor_Befo
        e
            Ag s
        toInvo ke in
        _
            beforeDraw
        Li ne _
            Ar a_ Co lo r.GetI
            v
        cationL
            i
        st())

        {
            try


            be foreDr
            a
            wL in e_
                Ar ray_
                C
            olor?.I
            voke
            (
                @p ar
            m
                s);
        }
        catch (Exce tio e)
        {
            HKMirrorMo
                .D
                LogE
            rr or(e);
        }
    }
    line = @
    p
    arams.ine;
    co or = @ arams.colo r;
    orig(line,
        olor);
    i
    (
        afterDrawLine_Array_ olor != null)
    {
        f
            o
        reach(Delegates.D
        r
            aw Ln e_Ar ra y_Co or_Afte Args t Invoke in _a fterDrawLi
        n
            e_Arra
        y
        _Color.
            G
            et In vocat

        o
            nList()
        {
            t
            r
            {
                _afterDrawL
                    i
                ne_Array_C
                    o
                l
                    o
                r.In vk e(@p arams);
                    catch
                (Exc
                ption e)
                {
                    HKMirrorMod.DoLogError(e);
                }
            }
        }
    }

    internal static void HookDrawLineGizmos_Array()
    {
        if (!HookedLi
        st
            nt ains("            rawLi
        ne Gi zm
            o
        s_Array")            )
        {
            HookedLi t.Add("DrawLineGiz
            mo s_ Ar ra
            y
            ");
            ne
                w
            Hook(ReflectionHelper.GetMetho Info

            ty
                f(Twee n) ,

            "DrawLine            iz            os_Array" fals ) Dr aw LineGizm
                s_Arra
                );
        }
    }

internal static event Delegates.DrawLineGizmos_Array_BeforeArgs _beforeDrawLineGizmos_Array;
internal static event Delegates.DrawLineGizmos_Array_AfterArgs _afterDrawLineGizmos_Array;

private static void DrawLineGizmos_Array(Action<UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] line)
{
    Delegates.Params_DrawLineGizmos_A
        ray
            @
    arams = new
    (
    )
    {
        line
        line
    }

    if (_befor
    e
        DrawLin
    Gizmos_Arr
    a
        != n
    ll)

    {
        fo reach(De
            l

        egates.DrawLineGizmos_Arr y_B foreA rgs toInvo
            in _bef
            r
        Dr aw L
            i
        nG iz mos_Ar
        a
            .GetInv o
        ationList(
        )
        {
            try
            {
                bef o
                eDra in Gizmo s
                _A rr
                y
                    ?.Invoke(@params);
            }
            catch (Exc ep

            tion e)
            {
                KM
                    rror
                M.DL ogError
                e
                    );
            }
        }
    }

    l
        ine = @params.line;
    orig(line);
    if (_aft er DrawLine Gi mos_Arra

    ull)
    {
        foe ch(elegates.DrawLi ne Gizmos_A
            r
            ray _A ft erArgs toInvo
            k
            e
            i n _af
            rawLin Gizmo _Array.GetInvocationList())
        {
            t
                r
            y

            {
                _af
                    t
                er Dr awLin
                    e
                os _Arra
                    .
                    Invok e(@par
                        m

                s;

                atch(Excep
                t
                    ion e)
                {
                    H
                        K
                    M
                        ir ro rM od.DoLog
                        rr r(e);
                }
            }
        }
    }

    internal static void HookDrawLineGizmos_Array_Color()
    {
        if (!
            Ho oked Li s
        t.Cont
            a
        ns("DrawLi
        n
            Gizm
        o
            s_ Ar
            a
        y_Color")            
        {
            ookedList.Add("DrawLineGizmos
            Ar
                ay_C
            ol or ");            
            new
                o
            ok(Reflec i
            onHelp r.GetM thodInfo(t yp
            eof(iTween), "DrawLineG
            zmos_Arr
                y_
            olor", false)             DrawLineGizmos_Array_Color)
                ;
        }
    }

internal static event Delegates.DrawLineGizmos_Array_Color_BeforeArgs _beforeDrawLineGizmos_Array_Color;
internal static event Delegates.DrawLineGizmos_Array_Color_AfterArgs _afterDrawLineGizmos_Array_Color;

private static void DrawLineGizmos_Array_Color(Action<UnityEngine.Vector3[], UnityEngine.Color> orig,
    UnityEngine.Vector3[] line, UnityEngine.Color color)
{
    D elegate
    s.Params_DrawLineGizmos_ArrayC ol or @params
        = new(

        {
            l
            ne = line


            , color = color
        };
    if (_bef
    reDrawLineGizmos_Array_
        Co lor != n
    ll)
    {
        oreac
            (Delegat
        e
        s.DrawLineGizmos_Array_Col
        r_BeforeArgs toInvoke
            in _befor
            DrawLi
        eGizm
        s_Array_Color.Ge
            t
        Invo
            c
        ationList()
            )

        {
            try
            {
                _
                    b
                e
                    oreDr
                a
                    Line
                G
                    zmos_Array_
                C
                olor?.Inv

                o
                    k
                    (@pa
                        ra ms);
            }

            catc h(
                Exception e)
            {
                HKM ir ro rMo
                    .DoLogE
                    r
                r(e
                    )
                    ;
            }
        }
    }
    l
        n
            = @p a
        ra ms
    l
        ine;
    color = @par am s.color;

    or
        g(l ie, colo)

    if (_aft
    er Dw ineGizmos_Ar ray_Colo
        != n ul l)
    {
        or
            ach(Deleg te .

        DrawLin eG izm
            o
        s_r ray_Color_Aft r
            Ar gs to Iv ok e in _af terDrawLine izmos
            _
        Ar ra y_Col o
        r
            .GetI nv oc
            a
        ti oi t())
        {
            tr y

            _aft e
            D
                r
            n
                Gizmos_Arra
            y
            _Color.Inv
                o
            k
                e
            (@ pa ra ms );
        }

        c
            tch(Ex e
                p
                tion
                e)

        HKMi
            M
        d.Do
            L
        ogEr
            r
        o(e)
    }
}
}
}

internal static void HookDrawLineHandles_Array()
{
    f(!HookedList.Contai
    s("DrawL
    ne
        andles_Array"))            
    {
        Hooked
            L
        ist.Add("Dr            aw            Li            neHan
        d
            l
        es _A rray ")            ;
        new
            o
        k(ReflectionHelper.Get
        M
            ethodI

        nf o(typeo
            f
            iT we en),

        "D            rw            Li            neHa
        d
            les_Array,
 
            ,
            DrawLine
        H
            andles_A rr ay
            )
        ;
    }
}

internal static event Delegates.DrawLineHandles_Array_BeforeArgs _beforeDrawLineHandles_Array;
internal static event Delegates.DrawLineHandles_Array_AfterArgs _afterDrawLineHandles_Array;

private static void DrawLineHandles_Array(Action<UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] line)
{
    Del
    gates.Par
        a
    ms_DrawLineHandles_Arra
        @params = new()
        {
            l ine = l
            ne
        };

    f(_beforeD
    r
        awLineHan
    les_Array !=
        n
    ul
        l
        )
    {
        fo
            r
        each(Delegates.Dr
        wLin
            e
        andles_Arra
            y
        _Befo
            eArgs
        t oI nvoke in
        _
            beforeDrawLineHandle Array.G
            t
        nvo
            c
        ai on List(
        )
        {
            try
            {
                _ be f
                    r
                eDrawLi eHandle _Arra?
                    In
                oke(
                    @p ar ams);
            }

            c
                atch(Exc
                    ep ti on e)
            {
                HKM ir rorMod.DoLogE
                ror(e);
            }
        }
        line = @pa ams.l in;

        o
        rig(line);
        if (_aft
        e
            r
        wL ine
        es_Arr ay != null)
        {
            fo re
            a
                c
            h(Del g
            ates.Dra
                w
            Li ne Handl es A
                rray_Afte
            A
            rs
            oInvoke in
            _
                afterDrawLi e
                H
            an dl es Ar ay.G et I
                n
            ocation
                L
            ist ))

            {
                tr

                {
                    _aft Dra
                    w
                        Line Ha
                        n
                    dl s_ A
                        r
                    ay.Invoke(@params);
                }

                atch
                    (Ex ception)

                HKMir ro
                r
                Mod.DoLog rr or(e);
            }
        }
    }
}

internal static void HookDrawLineHandles_Array_Color()
{
    f(!H oo kedList.Contains("DrawLineHandles_Array_C                ol                    or"))
    {
        Hooke dL ist.A
            dd(DrawLineHandls _

        rray_Color");
        new Hook(Refl ec ti on HelperG et Me thod
        In fo(typeof(
            Tween)
        "Dr
        wLineHandles_Array_Color", false), D
        r
            aw Ln eH a
            e
        s
            _Array_Col
        o
            r);
    }

internal static event Delegates.DrawLineHandles_Array_Color_BeforeArgs _beforeDrawLineHandles_Array_Color;
internal static event Delegates.DrawLineHandles_Array_Color_AfterArgs _afterDrawLineHandles_Array_Color;

private static void DrawLineHandles_Array_Color(Action<UnityEngine.Vector3[], UnityEngine.Color> orig,
    UnityEngine.Vector3[] line, UnityEngine.Color color)
{
    De
        egates
    Param
        _DrawLine
    H
    andles_Array_Color @params = new()
    {
        line
            = line,
        color = color
    };
    if (_beforeD
    ra wLineHa
    dles_A
        ray_
    olor != null)
    {
        foreach (Delegat
                     e
        s.Draw
            L
        ineHandles_
            A
        rray_Color
            _
        eforeArgs t
        o
            Invoke
        i
            n

        befor
            e
        rawL
            i
        eHandles_Ar
            r
        ay_Color.G
            tInvoc
        a
        ionList())

        {
            try
            {
                _
                    b
                fore
                    D
                awLin
                    Handles
                _A rr ay_Color?
                    .Invoke(@params);
            }
            catch (Excepti n

            e)
            {
                KMirr rM
                d
                    DoL
                og E
                r(e);
            }


            line =
                para
            s
                line;

            olor =
                p
            ra s.colo r
                ;
            or
            g
                (line, color);
            if (_afterDrawLi neHandles
                r
            y_Co
                ! = n ll)


            fore ac h(De
            l
            egates.DrawLineHandles_Array_Color_AfterA gs
            toInvoke
                in
            _afterDrawLineHandles_Array_ Color.GetI vo
            c
                atio List()
            {
                try

                {
                    _a ft erDr aw LineHandles_Array _C olo r.Invoke(@p arams);
                }

                ca
                    t

                c
                    h(Exc
                        e
                        ption e
                    )

                {
                    HKMir
                        o
                    rM d.DoL og r
                        o
                    re )
                }
            }
        }
    }

    internal static void HookDrawPath_Array()
    {
        if (!H okedLi t.Con ta
        n
            ("DrawP
        at h_ Arr
            ay "))
        {
            H
                o
            edList.A
            dd("Dra
            wP ath_
            A
                rray")
                ;

            ew
                ook(Re l

            e
                ct io
                n
            Helper.GetM th dInfo(typ of(iTw en, "DrawP            h_
            ay ,
            f al se ), DraP a
            th_Array)
            ;
        }
    }

internal static event Delegates.DrawPath_Array_BeforeArgs _beforeDrawPath_Array;
internal static event Delegates.DrawPath_Array_AfterArgs _afterDrawPath_Array;

private static void DrawPath_Array(Action<UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] path)
{
    Del
    gates.Params_DrawPath_Array @params
        = nw(


    {
        path = p
        a
            th
    }
    ;
    if (
        _
    beforeDr aw Pa t_ Array != null)
    {
        f r
        each(De le gates.D ra
        w
            Pat
        h_ rr y_Before Ar gs toI nvoke i _ eforeDra wP a
        th _A rr
        y.Ge
            t
        Invoc ationLis t) )


        {
            tr y
            {
                _ ef oreDr
                    a
                wPath_
                    A
                rray?.I
                n
                oke(@params);
            }
            catch (Exce tio e
                )
            i
                r
            orMod Do LogError(e);
        }
    }
}

path = @
p
    aa ms.p ath;
ori
    (path)

if (
    afterDraw
P
ath_Array != null)
{
    foreach (Delegates.Dr
                 wPath_Array_AfterArgs toInvoke in _aft
        er DrawPath
    Array.
        etInv
        cationLis
    t
        ())
    {
        try
        {
            _afterDrawPath_Array.Invoke(@
            arams);
        }
        catch (Exception e)
        {
            HKMi
                rr orMod.D
                LogErr
            r(e)
        }
    }
}
}

internal static void HookDrawPath_Array_Color()
{
    i
    f
        (!HookedLis
    t
        .Contai
        n
    s
    (
        DrawP
    a
        h_Ar
    r
        y_Color"))

    {
        HookedLi
        t.Add(
            "
        rawPath_Arr
            a
        y_Color
        "
            )

        new
            ook(R
        flectio
            nH el per.GetMe t
        h
        odInfo(typeof(iTw een), "DrawPath_Array_
        olor", 
        a
            ), rw Pa th_Arr
            y
        Color);
    }
}

internal static event Delegates.DrawPath_Array_Color_BeforeArgs _beforeDrawPath_Array_Color;
internal static event Delegates.DrawPath_Array_Color_AfterArgs _afterDrawPath_Array_Color;

private static void DrawPath_Array_Color(Action<UnityEngine.Vector3[], UnityEngine.Color> orig,
    UnityEngine.Vector3[] path, UnityEngine.Color color)
{
    Deleg
        a
    tes.Params
        _
    D
        r
    aw Pa th Ar ray _C lo
        params = n
        ew()

    {
        pa h

        at h
        col
        o
            r = co
        lo r
    }

    ;
    if
    b
        foreDraw ath_A rra
    y_ Colo
    r
        != nu l
    l

    {
        f
            o
        each(D
        e
            le ga
            e
        s.DrawPath_Array_Col r_Before rg toI nv ok
        i
            _be
        fo e
        DrawPat
            _r ray_C lo.GetInv ocati nL ist())
        {
            try
            {
                _beforeDrawPat
                    _Array_C
                r
                nvoke(@params);
            }

            ca tch(Excep ti on e)
            {
                H
                KMirrorMod.DoLogE
                    r
                r
                or(e);
            }
        }
    }
    path = @params.p th;
    color = @params.c
    olor;

    o
        rig(pat
                h
            , co lor);

    i
        (_afterDr
    w
        Pt h
        ra y_Colo !
        =
        null)
    {
        f
            o
        r
            e
        ac h(D el
        eg ates.Dra
            Path_A
        ray_
        olor_AfterArgs toInvoke in
        _
            af te rD
        aw at h_Ar ay_C
        o
        lor.Get In v
            o
        cationList() )
        {
            try
            {
                _after
                    DraP h_Array_ Co l
                or.
                    I
                    nv oke(@pa am);
            }

            cat ch(Exc
                epti on
            )
            {
                HKMir ro Mod.D oL ogErr r(e);
            }
        }
    }
}

internal static void HookDrawPathGizmos_Array()
{
    i
        f

    !H ookedList.Co nt ains("Draw
    P
        ah Gi zm os_Array
        ))
    {
        H
            okedL
        st.Add("D
        r
            awPathGizmos_Array");
        new Hook(Ref
        ectionHelper.GetMethodInfo(typ
        eo f(iTween
            , "Dra
        PathG
            zmos_Arra
        y
        ", false), DrawPathGizmos_Array);
    }
}

internal static event Delegates.DrawPathGizmos_Array_BeforeArgs _beforeDrawPathGizmos_Array;
internal static event Delegates.DrawPathGizmos_Array_AfterArgs _afterDrawPathGizmos_Array;

private static void DrawPathGizmos_Array(Action<UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] path)
{
    D
        l
    egates.Params_DrawPathGizmos_A
        ra
    @pa
    ra ms = new(


    {
        path =
            path
    };
    if (_b foreDra PathGi mos_Arr
    y != null)
    {
        oreach(Delegates.DrawPathGizm
        o
            s_Arra _BeforeArgs
            t
        oI nv oke in _beforeDrawPathGizm os_Array.Ge I
        n
            vocat o
            n
        List ))

        {
            t ry
            {
                _ bef
                r
                    eDrawPath
                i
                    zo s
                Array?.Invo
                k
                e(@params)
                    ;
            }
            ca tc h(E xcep
            i
                n e)
            {
                HKMi
                    rr orMod.D
                    L
                gEr ror(e
                    )
                    ;
            }
        }

        pa th =
            @pa ams
        p
            th;

        o
            rig(
                p
                    th);

        if
            (_ af
            e
        rDraw Pa thG iz mos_Arr ay != null)
        {
            fo
                ea
            h(D
            el eg ates.Dr
                w
            PathGi mos
            _A rr y_AfterArgs to Invoke in _ fterDra wP hGizmos_
            rr ay GetInvo ationList()
            {
                try
                {
                    _af te
                    r
                        DrawPathGiz mo s_Arra
                    y
                        .
                        In vo ke(@ pa rams);
                }
                catch (Exception e)
                {
                    HK irro
                    r
                        Mod Do o
                    g
                        Er ro r(e)
                        ;
                }
            }
        }
    }

    internal static void HookDrawPathGizmos_Array_Color()
    {
        i f

        (
            !H oe dL is t.Cont
            ins("D
        ra wP athGizmo
            _Array
        Colo
        "))
        {
            HookedList.A
                d
            d("r            wP            t
            h
                Gizmos_ Ar ray
            _
                Color");


            new Hook(Reflect
            i
                on He lper.GetMe
                t
            hod n
            fo(typeo(iT een)
                , "D            raw
            athG
                i
            zmos_Array_Color
            "
                , false), Dra
                wP at hGizm
            o
                s_Arra
            y
                _
            olo r) ;
        }
    }

internal static event Delegates.DrawPathGizmos_Array_Color_BeforeArgs _beforeDrawPathGizmos_Array_Color;
internal static event Delegates.DrawPathGizmos_Array_Color_AfterArgs _afterDrawPathGizmos_Array_Color;

private static void DrawPathGizmos_Array_Color(Action<UnityEngine.Vector3[], UnityEngine.Color> orig,
    UnityEngine.Vector3[] path, UnityEngine.Color color)

{
    D el
    g
    ates.Params_DrawP thGi
    mo
        _Arr
    ay _C olor @p
    r
        ams = new
        (
        )
        {
            path = pat h
            , color =
                olor
        };

    (_ b
        foreDrawPathGizmos_Ar
    r
    ay_Color != null)


    {
        f or each D elegate s.DrawPathG iz mos_A
            r
        r
            ay_C olo
            r
        _Before rg s
            t oInvo
        e
            in _bef or e
            r
        aP a
        hG iz mo sa y
            _
        Color.GetIn o
        c
            at i
            st()
        {
            t
            y
            {
                _be
                    f
                oreD
                    ra wPat
                    h
                Gizm
                    o
                s_ Ar
                ay _C olor?.I vo ke(@params);
            }

            c tch
                (E xp tion e)


            {
                HKMirro
                    r
                Mod.DoLogError(e);
            }
        }
    }

    ath = @p
    msp at h;
    color = @params.c
    olor;
    orig(pa th c
    ol o) ;
    if a ft erDrawPathGizmos_Arr
        a
    y_Colo
        r
    !nu l)


    {
        fo reach
        (
            Delegates
                D

        rw P
        th Gizmos_Arr
        a
            y_Col r_Aft
            er r
            gs
        vo ke in _aft
            rDrawP
        thGi
        mos_Array_Color.GetInvoc
            a
        ti on Li
        t
        (
        ))
        {
            try
            {
                _afterDr
                    a
                wPathGizmos_ Array_Color I
                    nv ok e(params
                ;
            }

            ca
                t
            ch(E xception e)
            {
                HKM
                    irro rMo
                    .DoL
                    o
                gError(e);
            }
        }
    }

    internal static void HookDrawPathHandles_Array()
    {
        if
            (ooked
        L
            i
        t.Contains("DrawPath
        H
            ae sr ra y"))
        {
            H
                okedLi
            t.Add
            "DrawPath
            H
                andles_Array");
            new Hook(Reflec
            ionHelper.GetMethodInfo(typ
            eo f(iTween
                , "Dra
            PathH
                ndles_Arr
            a
                y", false), DrawPathHandles_Ar
            ay);
        }
    }

internal static event Delegates.DrawPathHandles_Array_BeforeArgs _beforeDrawPathHandles_Array;
internal static event Delegates.DrawPathHandles_Array_AfterArgs _afterDrawPathHandles_Array;

private static void DrawPathHandles_Array(Action<UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] path)
{
    Dele
        ga te s.Pa rams
    D
        rawPa th Hand
    l
        es_Ar ra y @params n ew()
    {
        pa h = pa h
    }
    ;
    if
    _bf or eDrawPathHa ndles_ Array != nu
    l
        l)
    {
        or ach(Del eg
        at
            e
        s
            .r aw Pat
            es_Array_ Be foreArg s toInv ok e in

        _b ef reDra wP athHa dl e
            s
        _A rr ay.Ge
            I
        nvocation
            i
        s()

        {
            try
            {
                _b f
                or DrawP athH
                    a
                n
                    d
                le s
                ay?.In

                o
                    e(@p arams
                    )
                    ;
            }

            ca tch(
                x
                    eption
                    e
            )
            {
                HK Mirr
                o
                rMod
                    .
                    ogEr
                    r
                or(e
            }
        }
    }
    path = @params.path;

    ri
        (pat
    h) ;
    if (_afte
    D
        rawPathHa
    nd le s_ Array != null)
    {
        foreach (De
                     egates.D
            aw
        athHandles_Ar ra y_After Ar gs toI
        nv ok e in _afte Dr awPat
            h
        H
            an dl s_ Ar ra.GetInvocati on List())
        {
            t ry
            {
                _ a
                f
                    terDra
                w
                    PathHan
                d
                    l
                rray.I v
                oke(param
                    )
                    ;
            }

            atch(Excep
            t
                ion e)
            {
                H
                    K
                M
                    ir oM od.D oL ogError(
                );
            }
        }
    }
}

internal static void HookDrawPathHandles_Array_Color()
{
    if (!H ookedLi st.Contai
    ns("            Dr            awPathHand
    l
        es_
    A
        rray_Color"))            
    {
        Hooked Li st.A dd("D            awPa
        t
            hHandles_Array_C
        o
            lor");
        new Hoo(Re l
        e
            ctionH
        e
            l
        er.GetMethodInfo(typeo
        f
            iTwee
        n
            )
        "DrawPathHan            les_Arr            y
        _o lo ",             false),
        DrawPa
            hHand
        es_Array_
            C
        olor);
    }
}

internal static event Delegates.DrawPathHandles_Array_Color_BeforeArgs _beforeDrawPathHandles_Array_Color;
internal static event Delegates.DrawPathHandles_Array_Color_AfterArgs _afterDrawPathHandles_Array_Color;

private static void DrawPathHandles_Array_Color(Action<UnityEngine.Vector3[], UnityEngine.Color> orig,
    UnityEngine.Vector3[] path, UnityEngine.Color color)
{
    D el egates.
        a
        ram s_ DrawPa
    t
    hHandles_Array_Color @params =
        ew()
    {
        pa
            h = p th , colo r = color
    }
    ;
    f _
    beforeDr wPathHand
    le _A ra y_Co lo r != n ll)
    {
        foreach (D elega es.
            D
            rawPat
        h
            Handles
        _
            Ar ra y_Col
        r
            _BeforeAr
        s
            o I
            ke n _be for
            e
                DrawPathHan
        le s
        _A rr ay _o lo r.G
            t
        nvocati
            o
        nLis
        t())
        {
            try

            {
                _ be
                o
                reDrawPathHandles_Array_C
                    .In
                    vo ke(@param
                    )
                    ;
            }
            catch
                (Exception e)
            {
                HK MirrorMod.DoL
                gError(e);
            }
        }
        ph = @params.path;
        co
        l
            or = @params.colo
        r
            ;

        o ri g(pa t, c olor);
        if (_afte ra wPathHan le s_Arra
        y
            _Colo ! =
        l l)
        {
            f
                oreach(Del
                    g

            ae sD ra wP at hHandles
            _
                Array_ olor
                _
            A
                f
            te rg s to In voke in
            afterD
                awPa
            hHandles_Array_Color.GetInvoca
                t
            io ni st
                )
                )
            {
                try
                {
                    _a f
                    t
                        erDra wP th
                    H
                        andles_A rr y_Col or.Invo e(@params
                    );
                }

                c atch(Exce
                    p
                    tio
                    n
                    e)
                {
                    HKMirrorM d.D LogEr ror(
                        e);
                }
            }
        }

        internal static void HookCameraFadeDepth()
        {
            if
            (
                !
                ookedList.C ntains("C            mer            Fade
            Depth"))
            {
                HookedList.Add("CameraFadeDe            p");
                O n.iTween
                    Camera
                adeDe
                th += Cam
                e
                    raFadeDepth;
            }
        }

internal static event Delegates.CameraFadeDepth_BeforeArgs _beforeCameraFadeDepth;
internal static event Delegates.CameraFadeDepth_AfterArgs _afterCameraFadeDepth;

private static void CameraFadeDepth(On.iTween.orig_CameraFadeDepth orig, int depth)
{
    De
        l
    gate
        s
    Params_Came
        r
    aFadeDe
        p
    t
        @pa
    r
        ms = new()


        {
            dep
            h = d
            ep th
        };
    if (_ b
        e
    foreCameraFadeDepth != null)
    {
        fo
            each(De e

        ate
            s
        er aF de
            e
        th_Bo r
        Args
            o
        nvoke i
        n _b
        f
            oreCa eraFadeDepth.GetInvocati onLis
            ()

        {
            tr
            y
            {
                _ eforeC e
                    raFadeDe pt h
                    ?
                    .Invoke(@params);
            }
            catch (Exception e

            {
                HKMir or
                od.DoLo Error(e
                ;
            }
        }

        depth = @par
        a
        ms.de pth;
        or ig(depth)
            ;

        i f(_a fter
        Cm er aF ad Depth != null)
        {
            foreach (Del eg ates
                .
                C
                amer aF ad D
                epth _Aft
                e
            rA rg s toI
            vo ke in _af
                e
            ra m
            raFadeDepth G
            etInvoc ti n
            L
                is t( )
                )
            {
                tr y

                _ t
                rCam eraFa eD ept
                h.Invok
                    (
                        params)
                    ;
            }

            ca
                tc(E c
                    e
                    ptio
                    n
                    e)
            {
                HK Mi
                r
                orMod.DoLogError(e);
            }
        }
    }
}

internal static void HookCameraFadeDestroy()
{
    if (!H ookedList.Contains("            Came
    aFadeDes
        ro
    "))
    {
        HookedList.Add("C            ameraFadeDe            st            r
        oy");
        On.iT ween.Cam
            e
        r
            aF dD estr oy += Ca er ad eD stroy;
    }
}

internal static event Delegates.CameraFadeDestroy_BeforeArgs _beforeCameraFadeDestroy;
internal static event Delegates.CameraFadeDestroy_AfterArgs _afterCameraFadeDestroy;

private static void CameraFadeDestroy(On.iTween.orig_CameraFadeDestroy orig)
{
    if (_b
    re a
    m
        eraFadeDestroy !
        =
    nul l)
    {
        fore ach
        (Deleg at s.Came
            r
            a
            eDestroy_Bef re Args toInv k
            _
            eforeCame ra FadeDestroy.G et Ic at io nList())
        {
            try


            _bef
                reCameraF
            a
            deDestroy?.Invoke();
        }
        catch

        (Ex
        eption e)
        {
            HKMirrorMod.DoL
                og Error(e)
        }
    }
}

orig(
    ;
if (_af
t
erCameraFadeDestroy != null)
{
    oreach(Delegates.CameraFad
    eD estroy_
    fterAr
        s to
    nvoke in _afterCamera
        F
    adeDes
        t
    roy.GetInvo
        c
    ationLi
        s
    t
    (
    )
    {
        t
        y
        {
            _afterC
                a
            meraFad
                e
            D
                stro
            y.In voke );
        }

        c
            atch(Exception e)
        {
            HKMirror d.DoLog
                r
            or(
                e
            )
        }
    }
}
}

internal static void HookCameraFadeSwap()
{
    if
    !Ho ke dLi st.C on tai ns("Ca
    e
        raFadeSwa
    p
    "))            {
    Hoo ke List.Add("Ca            me            raFade            wap");
    On.iTwee
        .Cm er aFadeSwap += CameraFadeSwap
        ;
}

internal static event Delegates.CameraFadeSwap_BeforeArgs _beforeCameraFadeSwap;
internal static event Delegates.CameraFadeSwap_AfterArgs _afterCameraFadeSwap;

private static void CameraFadeSwap(On.iTween.orig_CameraFadeSwap orig, UnityEngine.Texture2D texture)
{
    De legates.Pa am s_
        eraFade
    wa @p arams = new()
    {
        texture = t
        e
        xture
    }
    if (_be fo reC
    a
        m
    ea Fa de
    p != null)
    {
        f oreach(D elegate .
        C am
        e
            raFade
        S
            wap_Bef
        o
            re rs toInv k
        e in _bef
            r
        e
            e
        aFadeSwa p.Get
            I
        nvocationL
            i
        s
        t
            () )
        {
            tr y
            {
                _befor
                    Camera
                adeS
                ap?.Invoke(@params);
            }
            catch (E
            x
                ce pi on
            e
                )

            {
                HKMirr
                    o
                rMod.DoL
                    o
                gError(e);
            }
        }
    }
    texture = @p
    a
        ra ms.texture;

    o
    rig
    (
        texture);
    if (_a terCameraF
        adeS wap
        != n
    u
        ll)
    {
        foreach (Delegates.C amer
        a
            FadeSw
        ap After
        Ar toI voke in _afterCameraFade
        Swap.GetInvoc at ionList()
        {
            t ry
            {
                _after Ca m
                    e
                rF ad eS wap.Invo
                    e(@par
                        ms);
                    catch

                (E
                x
                    ception e)
                {
                    HKMirrorMod.DoLogError(e
                        ;
                }
            }
        }
    }

    internal static void HookCameraFadeAdd_Texture2D_int()
    {
        i
        f(!HookedList.Contains("CameraFadeAd
        _Texture2D_int"))
        {
            HookedList.Ad
            d("Camera
            adeAdd
                Text
            re2D_int");
            On.iTween.Camer
                a
            FadeAd
                d
            _Texture2D_
                i
            nt += C
            a
                m
            e
                aFadeAdd_Te
            x
                ture2
            D
            int;
        }
    }

internal static event Delegates.CameraFadeAdd_Texture2D_int_BeforeArgs _beforeCameraFadeAdd_Texture2D_int;
internal static event Delegates.CameraFadeAdd_Texture2D_int_AfterArgs _afterCameraFadeAdd_Texture2D_int;

private static UnityEngine.GameObject CameraFadeAdd_Texture2D_int(
    On.iTween.orig_CameraFadeAdd_Texture2D_int orig, UnityEngine.Texture2D texture, int depth)
{
    Dele ga es.Par ms_Camer aFadeAdd_Tex
        tu re 2D_int
        @params
            = ne w()


    texture =
        t
    et u
        e, depth d pth
}

;
f
(
    _
b
    ef o
    aFad
A
    Textu e2 _int
    = null


or ach
(
    Delega te s.C me r
        aFad
        e
        dd_Te
        x
        tu re
        D
        _int_BeforeArgs toInvo e n _bf re
        amer
        a
        dd_Text
        r
        e2D _i nt.Get
        I
        nvocationList())
{
    try
    {
        _beforeCamera adeAdd_Te tur 2D_int?.Invoke(@params);
    }
    catch
    (
        Exceptio n

    e)
    {
        HKM
            i
        r
            ro rM od.o LE rror(e);
    }
}
}
texture = @params.
t
exture
;
depth
=
@ pa ram s.de p
h
;
va r retVa
=
g
textur, dept
h
);
if (_ ft er
C
ra Fa de Ad d_Textur
2D_int
!= n
ll)
{
    foreach (Del
                 e
    ga te s.
        a
        m
    eraFadeAdd
        _
    Textur 2D i
        nt_Afte rArgs to In
        voke i n af erCame
    ra Fa de
        A
    dd_Te xture2D _i nt.G
        etI nv oca
    Lis
    t
        ())
    {
        t ry
        {
            re tVal =
                _afterCameraF
            a
                deAdd_
            T
                exture
            2
            D
            int.Invoke(pa
            ram , ret
                V
            a
                );
        }

        c atch(Ex
            ce po n e)
        {
            HKMi
                rorMod
            DoLog
            rror(e);
        }
    }
}
return retVal;
}

internal static void HookCameraFadeAdd_Texture2D()
{
    if (!
        H
    ookedList.Contains("Came
    aFadeAdd_Texture2D")
        )
    {
        Hooke
        List.A
        d("C
        meraFadeAdd_Te
            x
        ture2D
        "
            );
        On.iTwee
        n
            .Camera
            F
        a
            d
        Add_
            T
        xture2D +=
            C
        ameraFa
            d
        e
            dd_T
        ex tu re2D
    }
}

internal static event Delegates.CameraFadeAdd_Texture2D_BeforeArgs _beforeCameraFadeAdd_Texture2D;
internal static event Delegates.CameraFadeAdd_Texture2D_AfterArgs _afterCameraFadeAdd_Texture2D;

private static UnityEngine.GameObject CameraFadeAdd_Texture2D(On.iTween.orig_CameraFadeAdd_Texture2D orig,
    UnityEngine.Texture2D texture)
{
    De legat
    e
    s.Pa
        ra ms_C m
    eraF
        a
    dd
        Te ture2D @pa ra ms = new(
        tex
    tu re = text
    r
        e
}

;
if (
    _
bef reCameraFadeAdd_Textu
e2D != n
ll

{
    fo reach(Dele ates.
    Ca eraFad Add_Textur e2 D
        _
    Be fo reAr gs toInvoke in _before
        C
    ameraF
        a
    de dd_Te
    x
        tu re 2D.Ge
    I
        nvocation

    i
        s()

    {
        tr y
        {
            _be
                f
            or CameraF d
                e
            A
                d
            ex tu re 2D?.Invoke
            @param
                );
        }
        catch (Exception e)
        {
            H
                K
            Mi rr or Mo.D
            oLogError(e);
        }
    }
}
te xt ur = @pa ra s.tex tu e;
var
reta l = orig(tex u
r
    e);

i f _afterCamera Fa deAdd_Te xt u
    D !
    ll)


{
    oreach(Delegat
    e
    s.Camer aF adeAdd
        _
    Textur
        e
    2D_Aft
        e
    r
    rgs toInvoke in _ fter
    Came aF d
        e
    dd_Texture2D Ge Invoc
        a
    to Li st())
    {
        tr

        {
            ret
                al =
                    afterCame
            r
            aFadeAdd_Texture2D.Invoke(@para
            s, retVal);
        }
        catch (Except
        io n e)
        {
            KMirro
            Mod.D
            LogError(
                e
            );
        }
    }
}
return retVal;
}

internal static void HookCameraFadeAdd()
{
    if (
        Hook
    dList.Contains("Came
    r
        aFadeA
    d
        d"))
    {
        Hook
            e
        dList.A
            d
        d
        (
            CameraFadeA
        d
            d");

        O
            .iTw
            e
        n.CameraFad
            e
        Add +=
            C
        a
            eraF
        a
            eAdd;
    }
}

internal static event Delegates.CameraFadeAdd_BeforeArgs _beforeCameraFadeAdd;
internal static event Delegates.CameraFadeAdd_AfterArgs _afterCameraFadeAdd;

private static UnityEngine.GameObject CameraFadeAdd(On.iTween.orig_CameraFadeAdd orig)
{
    if (_befor CameraFadeAd
    d
        != null)
    {
        forea
            c
        h
            (De lega te s.CameraFadeAdd BeforeArg t Invok
        e
            in _be
            f
        or eC amera
            a
        deAdd.Get
            n
        vc ai on List())
        {
            t
            ry
            {
                _b ef or eC
                a
                    m
                e
                    ra Fa de Ad d?.I
                v
                ke();
            }


            catc
                h(Exce
                    t
                    on e)

            {
                HK Mirr
                oM od.Do
                    L
                ogEr ro r
                    e);
            }
        }
    }

    retVal = ri g()
    if (_afte
    Ca me aFad
        eA dd ! = nu ll )
    {
        f
            oreach(D
                e
                lega es.Came aFade dd_AfterArgs t
                Invoke i
                _f te rCamera adeAdd.GetInvoc at ion
                L
                ist())
        {
            try
            {
                retV
                a
                    l
                        = _ afte rC ameraFa deAdd.Invoke(retVal);
            }

            c atch
            (
                Excepti
                    o
                    n e)
            {
                H
                    M
                irro rMod.D
                    gr r
                    e);
            }
        }
    }
    r
        e
    turn retVa
        l
        ;
}

internal static void HookResume_GameObject()
{
    if (!H
    o
        ok ed Li s
        n
    tains("Res
    u
        me_GameO
    b
        ject")            )
    {
        HookedList.Add "
        Re su me GameOb ec
            t
        ");


        On.iT ween.Resume_GameOb
        ject +=
            Resu
        m
        e_Ga eObject;
    }
}

internal static event Delegates.Resume_GameObject_BeforeArgs _beforeResume_GameObject;
internal static event Delegates.Resume_GameObject_AfterArgs _afterResume_GameObject;

private static void Resume_GameObject(On.iTween.orig_Resume_GameObject orig, UnityEngine.GameObject target)
{
    Deleg
    tes.Pa
        ams_
    esume_GameObject @pa
    r
        ams =
            n
    ew()
    {
        tar
        g
            et = ta
        r
            g
        e
    }
    ;

    i
        (_beforeRe
    s
        ume_Gam
    e
        O
    ject
        ! = nu l)
    {
        for
            e
                ach(Delegates.Resume_Ga eOb
        ct_B efor
        A
            gs
        t
        ke in
        b
            reRes u
            me _G
            m
        eObject.GetInvocationList()
        {
            ry
            {
                _ eo eResum
                    _
                GameObjec
                t
                    ?.Invoke(@par am s);
            }
            catch (Excep
            n e)
            {
                H
                    Mi
                rorMod.DoLogError(e);
            }
        }
    }


    targe t = @param s.targ
    e
        t
        ;
    o rg(tar ge t);
    i(_afterResu e_ Game bject
        !
        = nul l)

    {
        foreac
            h(e le

        gates
            R
        esume_ am O
            j
        et _
        erArg s toInv
        o
        ke in _after
            R
        es um e_ Ga me Oj ect.
            et nvocatio Li t(
        )
        {
            try

            {
                _ ft
                e
                    rR es
                    _
                Game bj ect.Invoke(@params);


                c
                    tch
                    (E xc ept on)


                {
                    HKMirror
                        M
                    od.oL ogError(e);
                }
            }
        }
    }

    internal static void HookResume_GameObject_bool()
    {
        if (!HookedLi
        s
        t
            .C on tain s("Resum            e_            GameObject_bool"))
        {
            H oo kedLis
            t
                .Add("R
            e
                su e_ ameOb
            e
                ct_bool")


            O.i
            ween.Res um e_G
                a
            meObj ec t_boo
            l
                += R su me _G am eObject_
                ool;
        }

internal static event Delegates.Resume_GameObject_bool_BeforeArgs _beforeResume_GameObject_bool;
internal static event Delegates.Resume_GameObject_bool_AfterArgs _afterResume_GameObject_bool;

private static void Resume_GameObject_bool(On.iTween.orig_Resume_GameObject_bool orig,
    UnityEngine.GameObject target, bool includechildren)
{
    Delegates.Params_Resume_GameObject_b
    ol @params = new()
    {
        target = ta
        rg et
        , inc
        udechi
        dren
        includec
        h
        ildren
    };
    if (_beforeResume_GameObje
    t_bool != null)
    {
        foreach (Deleg
                     at es.Resu
            e_Game
        bjec
            _bool_BeforeArgs toInvoke
            i
        n _bef
        o
            reResume_Ga
        m
            eObject
        _
            b
        o
        l.GetInvoca
            t
        ionLi
        s
            ())

        {
            try
            {
                _befo
                    r
                eResume
                    _
                G
                    meOb
                j
                ct_bool?.In
                v
                oke(@
                arams
                    )
            }

            c atch(E xcep
                t
                ion e)
            {
                HKMirror od.oLogE rror(e);
            }
        }
    }
    tar
        e
            = @ pa rm s.targ
        t

    incl u
    echil
        r
            = @pa r
    a.i
    ncl dechildren;
    orig(targe t, include
    hi
        dren
        )i f(_afterR
        s

    ume_GameO
        b
    ject_bool != null )
    {
        foreach (D elegates.Res me_Game bj ct
        bool_Aft rA rgs oInvoke in _af te rResu
            m
        e_GameOb je ct_o l.
            G
            e
        tI nv ca io nL ist())
        {
            tr y
            {
                _af te rResu me _Game bject_bo
                o

                l
                    .Invok
                    e
                    (@param
                        s
                    );
            }
            catch(E
            xception
                )

            K
            irrorMod.D oLo
            g
            Error(e);
        }
    }
}
}

internal static void HookResume_GameObject_string()
{
    if
    (
        Ho oked
    L
        is t.
        o
        ntains("Resume_GameObject            _s            tring") )

    H
        oked
    Lt.A dd("Resu            e_            GameObject            st            ring            );
    On.iTween.Re sume_GameObj ect_s tr
        += R
    su
        e_Gam Object_ tring
}
}

internal static event Delegates.Resume_GameObject_string_BeforeArgs _beforeResume_GameObject_string;
internal static event Delegates.Resume_GameObject_string_AfterArgs _afterResume_GameObject_string;

private static void Resume_GameObject_string(On.iTween.orig_Resume_GameObject_string orig,
    UnityEngine.GameObject target, string type)
{
    De egates.Pa
        r
    ams_Resume_Ga
        m
    eObj ect
    _
    string p
    rams new()
    {
        target = t
        arget
        , type = type
    };
    if (_be or
        e
    Rs um e_ GameObje
    t_stri
    g !=
        ull)
    {
        fo
            r
        each(Delegates.Resume_GameObjec
        _string_BeforeArgs toInvoke
            in _before
            esume_
        ameOb
            ect_strin
        g
            .GetInvocationList())
        {
            try
            {
                _
                    eforeResume_GameObject_stri
                ng?.Invok
                    (@para
                s);


                catch (Exception e)


                {
                    HKMi
                        r
                    rorMod.DoLo
                        g
                    Error(e
                        )
                        ;
                }
            }


            arget = @pa
            r
            ams.tar
            g
                e
                ;
            ty
                pe = param s.typ
                e
                ;
            orig(ar get, type);
            if (_after
            esume_G
                m
            Obj
                e
            c_ st ring
                !
            null )

            {
                f
                    ach(Delegates.Resume_GameO
                        je
                        t_s tr i
                        ng _A fterArg
                        toInvoke i n _
                        afterRee GameObject_string.G
                        tInvocat
                        on
                        t())
                {
                    try
                    {
                        _afterRes um e_Game
                            O
                        bje t_ string.Inv ke(
                            @
                        p
                            ms );
                    }

                    c atch(Exception e)
                    {
                        HK Mirr Mo
                        d
                            .
                            DoL gE r
                            o
                        r(e);
                    }
                }
            }
        }

        internal static void HookResume_GameObject_string_bool()
        {
            i f(!Ho oked
            i
            t.Conta
                i
            ns("
            Rs me_ a
                meOb j
                e
            ct _s
            r
                ing_bo l"            ))
            {
                Hooke dList.Add("
                es
                    me_G
                am eO bject_s
                    r
                ing bool")
                    ;

                O.iT een.Resume_GameObject_stri
                    g_bo ol +=
                    Re
                ume_GameObject _s tr ing_bool;
            }
        }

internal static event Delegates.Resume_GameObject_string_bool_BeforeArgs
    _beforeResume_GameObject_string_bool;

internal static event Delegates.Resume_GameObject_string_bool_AfterArgs _afterResume_GameObject_string_bool;

private static void Resume_GameObject_string_bool(On.iTween.orig_Resume_GameObject_string_bool orig,
    UnityEngine.GameObject target, string type, bool includechildren)
{
    Delegates.Params_R esume_
    GameObject_ tring_b ol @pa ams = new()
    {
        t
        a
        re t = target
        ,
        type =
            type

        includec
        h
        ildren = includechildren
    };
    if (_befor
    Resume_GameObject_string_bool != n
    ul l)
    {
        for
            ach(D
        legat
        s.Resume_
            G
        ameObject_string_bool_BeforeArgs toIn
        oke in _beforeResume_GameObject_s
            tr ing_boo
            .GetIn
            ocat
        onList())
        {
            try
            {
                _beforeRe
                    s
                ume_Ga
                    m
                eObject_str
                    i
                ng_bool
                    ?
                    .I
                voke(@param
                s
                    );
            }

            c
                tch
                (
                    xception e)


            {
                HKMi
                    r
                r
                rMod
                    .oLogError(e
                    )
                    ;
            }
        }
    }
    tar
    ge t = @params
        .t rg et;
    type = @ pa rams.type;
    includech
        ldren =
            @
    am
    s
        .n cl ude h
    l
        ren;

    o
        ig(ta
            g

    t, typ e, in
    l
        ud echildren);
    if (_af terResume_GameO
        je
    t_st
        ri ng _bool !
        null)
    {
        f
            or ea ch(Del eg
        ates.Res um e_GameObje t_ string_boo _A ter rg
        t
        Invoke in _afterResume_Ga meObject_str
        i
            ng bo l.GetInv oc ation L
        i
            s
        t(){
            tr
            {
                _ afte Re sume_GameObject_string_bo.I
                    nvo ke(@
                p
                    arams);
            }
            ca tc h(Ex
            t
                ion e)
            {
                H
                    Ki r
                orMod.DoLog
                    E
                rror e);
            }
        }
    }
}

internal static void HookResume()
{
    f(!Hoo
    k
        edLis t.Cn tain
    s
        ("Re
    s
        me"))


    {
        Ho
            k
        edList.Add("Resume");
        On.iT we en.Res
            me = Re
        su me
    }
}

internal static event Delegates.Resume_BeforeArgs _beforeResume;
internal static event Delegates.Resume_AfterArgs _afterResume;

private static void Resume(On.iTween.orig_Resume orig)
{
    if (_bef o
        re Re sume
        =
        null )
    {
        fo re c
            h(D
                legates.

        Res
            u
        me_BeforeA
            rg s
            to In vo e in _befo
        eResum
            .Get
        nvocationList())
        {
            t
            ry
            {
                _e fo re esume?.In
                v
                oke();
            }


            catch (Excep tion
                e)
            {
                HKMirrorMo
                d
                    .Do
                    L
                ogError(e);
            }
        }
    }


    or ig
    (
        );
    if (afterRe ume != nu
    l)
    {
        fo re ach(Delega
        ts.R es ume_Afte
            Args t
        Invok
            in _afte
            r
        Resume.GetInvocationList()

        {
            try
            {
                _afterResume.In voke();
                    catch
                (Exce
                tion e)

                {
                    HKMirrorMod.DoLogError(e
                        ;
                }
            }
        }
    }

    internal static void HookResume_string()
    {
        if (!
            H
        oo
            k
        edList
            .Contains("Resume_str
        ng")
            )
        {
            H
            okedL
                is t.Add ("            esume            _s            ring");
            On.i Tw een.Resu me _s ing += Re
            u
                e_s
            t
                r
        }
    }

internal static event Delegates.Resume_string_BeforeArgs _beforeResume_string;
internal static event Delegates.Resume_string_AfterArgs _afterResume_string;

private static void Resume_string(On.iTween.orig_Resume_string orig, string type)
{
    D
        a
    es.Param _R
    e
        sume_strin
    g
        @
    pa ra ms = new(

        {
            typ e =
            t
            ype
        }
        ;
    if (
        _
    befor
        eR eu me
    s
    tring != null)
    {
        fore
            ch
            (Del
                eg

        at es.Resu
            e
        _string_Be fo re Args toInvo ke in _be fo reRes
            me_s ring
            Ge
        Invo at ionL st())
        {
            try


            {
                _beforeResume _s tri
                    n
                g?.I nv oke(@p arams
                ;
            }
            catch (Excep t

            i
                on e) {
                KMirro
                    rM o.Do Log Err
                r
                    (e);
            }
        }
    }
    ty e
        @
    ams.t pe;
    ori
    g
        (type);
    if
    (
        _
    af te rR es um e_string
        != nul
        )
    {
        oreach(Delegates.Res
        u
            me _s tr
        n
            g
        _AfterArgs

        toInvoke
            in _af erResume_ tri g.Ge tI nvocationL
            i
        st(
            )
            )
        {
            try
            {
                _afterR es
                ume_ st
                r
                ing.In
                    v
                oke(@p ar ams);
            }

            catc
            (
                xception e)
            {
                HK
                    Mr ro rM od.DoLog
                rror(e
                    ;
            }
        }
    }
}

internal static void HookPause_GameObject()
{
    if (!HookedLi
    st.Contain
        ("Paus
    _Game
        bject"))

    {
        HookedList.Add("Pause_Game
        bject");
        On.iTween.Paus
            e_ GameObj
        ct +=
            ause
        GameObject;
    }
}

internal static event Delegates.Pause_GameObject_BeforeArgs _beforePause_GameObject;
internal static event Delegates.Pause_GameObject_AfterArgs _afterPause_GameObject;

private static void Pause_GameObject(On.iTween.orig_Pause_GameObject orig, UnityEngine.GameObject target)
{
    Deleg
        a
    tes.Params_
        P
    a
        u
    Ga me Ob ect
    @p ra ms
        =
        new()
        {
            target = target
        };
    if (
        _b eo ePause
    G
    ameObject
        != null)
    {
        foreach (elegate.
                     aus _Game
        bj
            ct_BeforeArgs t oInvoke i n _
            b
        eforePau se _GameObj ec t.Ge In vc at on Li st())
        {
            tr y
            {
                _bef or eP use_G a
                    m
                eObjec
                t
                    ?
                    .I no ke(@pa
                    a
                    ms);
            }
            ca
                c
            h(E
            ception e)


            {
                HKMi ro Mo
                d.Do Lo gE rr or(e);
            }
        }
    }
    target
        = @p
    rams.target;
    orig(
        t
    ar ge t)
    f
        (_afterP
    a
        use_Game
    O
        bjec ! = null)
    {
        fo reac h(Delegates
            .Pau
        s
            e_GameObject_Aft
        e
            rA rg
            s
        toInv k
        e in _afterPa
            se
        GameObject.GetI nc at io nList())
        {
            try


            _aft
                rPause_Ga
            m
            eObject.Invoke(@params);
                catch (Exception e)

            {
                HKMirro
                Mod.Do
                    ogErr
                r(e);
            }
        }
    }
}

internal static void HookPause_GameObject_bool()
{
    if (!H
    oked
    ist.Contains("
    P
        au
    s
        e_Game
    O
        bject_bool"))
    {
        Hoo
            edLi
        s
            .Add("Pause
        _
            GameObjec
        _bool")
            ;
        On.iTween.P
            a
        use_Game bject_bo l
            = Pause
        G
            meO
        b
            jc t_ bool;
    }

internal static event Delegates.Pause_GameObject_bool_BeforeArgs _beforePause_GameObject_bool;
internal static event Delegates.Pause_GameObject_bool_AfterArgs _afterPause_GameObject_bool;

private static void Pause_GameObject_bool(On.iTween.orig_Pause_GameObject_bool orig,
    UnityEngine.GameObject target, bool includechildren)
{
    D
        el eg
        t
    es.Params_Paus e_GameOb ec
        _b oo l
    @p ar ams = n
    w
        ()
    {
        tar
        g
            et = t ar get, i ncludechi ldre
            = inclu
        ec
            ildren
    }
    ;
    if (_be fore
        P
    ause_GameObject_b
        o
    o
    l != nul l)
    {
        foreach (Delegates.
                     P
                     ause_ a
            m
        eObje t_
        b
            o
        efore
            r
        gs t oInvoke
            i
        n_ b
        forePause_G
            a
        meObject_b
            o
        ol Ge tI nv oc at ionList(
        )
        {
            tr

            {
                _
                eforePause_GameObject_bool?.Inv

                o
                    ke(p ar a
                        s
                    )
                    ;
            }
            catch
            (
                Exceptio
            n
                e)
            {
                HKMirro Mod.DoLogError
                    (e);
            }
        }
    }
    targe
        t
            = @
    p
    arams.ta get;
        in ludec ildren =
        @pa ra
        m
    s.incl
        u
    dechil dr en;

    ori g(target, incl ud ec
        il
        re n);

    if (_afterPause _G ameObj ec _bo
    o! n ul l)
    {
        for
            ach(D
        legat
        s.Pause_G
            a
        meObject_bool_AfterArgs toInvoke in _a
        terPause_GameObject_bool.GetInvoca
            ti onList()

        {
            try
            {
                _af
                    erPause_G
                a
                meObject_bool.Invoke(@params);
            }

            catc
                (Exception e)
            {
                HKMirrorMod.DoL
                    og Error(e
                    ;
            }
        }
    }

    internal static void HookPause_GameObject_string()
    {
        if (
            !
            HookedList.Contains("Pause_GameO
        ject
            _
        tring"))
        {
            H
                ookedList
            Add("Pa
            u
                e_G
            meObj
                ec t_ string");


            On.iTween.Pause_GameObjec t_string +
                ause_Ga
            b
                ect
            _
                s
        }
    }

internal static event Delegates.Pause_GameObject_string_BeforeArgs _beforePause_GameObject_string;
internal static event Delegates.Pause_GameObject_string_AfterArgs _afterPause_GameObject_string;

private static void Pause_GameObject_string(On.iTween.orig_Pause_GameObject_string orig,
    UnityEngine.GameObject target, string type)
{
    Delegat
        e
    s
        .
        Pa ra ms _P ause_Ga
        e
    bject_s
    tr in g @para m = new)

    target
        = ta ge t, t
    pe = t e
        i(_befo
            r

    Pause _G a
        me Ob
        e
    ct_stri n != null)
    {
        foreac(
            Deleg te
                .P us
        e_ Ga meObjec
            _
        stri ng _Befo
            re rg s toInvoke in _ beforePause_ GameObject_s
        ring.GetI
            vo
        ationList() )
        {
            try
            {
                _beforePause_Ga
                    m
                eO bject_sti g?.I nv o

                k
                    e(@p aram s);
            }

            ca
                c
            Exception e)
            {
                HKMirro rM od.DoLo gE rr r(e
                    )
                    ;
            }
        }
    }

    tar get
        =
        @par am s.a
    rg et;
    typ
        = @ params.
    y
        p;

    rig(t rget, t pe);
    i(_a
    f
        t
    e
        ra ue _G am eObjec
    _strin
    g != null)
    {
        foreac
            (De
        egates.Pause_GameObject_str
            i
        ng _A ft
            r
        Ar gs toInvoke
            in _afte
            r
        Pause_ ameObject_string.G
            etI nv oc ationL st()
            )

        {
            t
                r
            y
            {
                _afterPause_Gam eO bject_s tr i
                ng.I
                    n
                voke(@ pa r
                ams);
            }
            c at ch(Exce pt on e)

            HM ir rorMod.D oL og rror(e);
        }
    }
}
}

internal static void HookPause_GameObject_string_bool()
{
    if (!Hooked
    ist.Contains("Pause_GameObject
    _s tring_bo
    l"))
    {
        Hooke
        List.Add(
            "
        Pause_GameObject_string_bool");
        O
            .iTween.Pause_GameObject_stri
            ng _bool +
            Pause
        GameObject_
            s
        tring_bool
    }
}

internal static event Delegates.Pause_GameObject_string_bool_BeforeArgs _beforePause_GameObject_string_bool;
internal static event Delegates.Pause_GameObject_string_bool_AfterArgs _afterPause_GameObject_string_bool;

private static void Pause_GameObject_string_bool(On.iTween.orig_Pause_GameObject_string_bool orig,
    UnityEngine.GameObject target, string type, bool includechildren)
{
    Delegates.P ar am sP ause_Gam
        e
    O
        bject_s ring_bo l
        @ pa ams =
        n
    ew()
    {
        t
            r
        gt
            t ar get, typ
        e = type
            , in
        c
            l
        u
            dc hi ld re n = inc
        u
            echildr
        e
            n
    }
    ;
    if
        (_beo rePaus
        _
    ameO
        b
    ject_s tr i
        n
    gb oo
        != null)
    {
        foreach (Delegt e
                 .a se
        _m eO bject_s
            r
        ing_bool _B e
            f
        oreArgs toInvo ke in _be fo re
            Pause _G am Obj
            ct_strin
        _b
        ol.GetI nvocationL is ())
        {
            try
            {
                _
                    beforePau se _GameObj
                e
                    c
                t_ st ri
                    bo ol?.nv
                k
                    params);
            }

            c atch(Exception e)


            {
                HKM
                    i
                rrorMo.
                    D
                    LogErr
                o
                r(e);
            }
        }
    }

    target =
        p
    aa m
        arget;
    ype
        = params.t
    yp e;
        in cl ud ec hildre
        = @pa
    ra ms.include
        hildre
        ;

    or
        g(target, type, i
            n
            cl ud ec
            il ren);

    if (_
    a
        fterPaus
    e
        _GameO bj ect_str in g
        _boo l != nu ll )
    {
        f
            o
        re ac h(D legates.Paus e_ G
        ameb je t
        _str in _
            b
        ool_AfterA rg s t
        Ino ke i _aft er ause
        _a me Ob ject_str
        ng_boo
            .GetI
            vocationL
        i
        st())
        {
            try
            {
                _afterPaus
                    _GameObject_string_b
                oo l.Invoke
                    @param
                    );
            }

            atch(Exc
            e
                ption e)
            {
                HKMirrorMod
                DoLogError(e);
            }
        }
    }
}

internal static void HookPause()
{
    f(!HookedLis
    t
        .C
        o
    ntains
    (
        "Pause"))
    {
        Hooked
        ist.Ad d("P
        u
            se");
        On.iTween.Paus e =
                ause
            ;
    }
}

internal static event Delegates.Pause_BeforeArgs _beforePause;
internal static event Delegates.Pause_AfterArgs _afterPause;

private static void Pause(On.iTween.orig_Pause orig)
{
    _before Pause
        != nu ll)
    {
        fo e
        a
            ch e le g
            .Pause
            B
        fore
            A
        r
            gs t
            I
        nvoke n _beforeP ause
        Ge
            Invo
        ca ti nL ist())
        {
            t ry
            {
                _bef
                    o
                rePause?.Invoke();
            }

            ca
                ch(Excep
                    io e)
            {
                HKMirrorMod.D
                oLogError(e);
            }
        }
    }


    o
        ri g();
    i f(_aft er
    Pa s
        != null)
    {
        foreach
            (Deleg
                a
        tes.Pa
            u
        s_ Af terArs t oInvoke in
        a
            fe r
            au e.GetInvoc
            a
        ti nLit(
            )
            )
        {
            tr y
            {
                _a fter
                ause.I nv o();
            }
            catch
            (Excep
            ion
                )
            {
                HKMirrorMod.DoLo
                    g
                Er ro r(
                    )
                    ;
            }
        }
    }
}

internal static void HookPause_string()
{
    if (!Hook
    e
        dLi
    s
    t.Contains("Pause_s            tr            ing)            
    {
        Hooked
            L
        ist.Add("Pause            _str
        ng"            ;
        On.iT ween.Pause_s
            ti n += Pause_s
        ring;
    }
}

internal static event Delegates.Pause_string_BeforeArgs _beforePause_string;
internal static event Delegates.Pause_string_AfterArgs _afterPause_string;

private static void Pause_string(On.iTween.orig_Pause_string orig, string type)
{
    Delega
        t
    es.Params_
    ause_s
    tr in g @par ms
        =
        ne()
    {
        type = type
    }
    ;
    i
    (_b ef ore
        as e_ st
    r
        ig ! = nu ll )


    ore ac h(
        e
    gt es a
        use_string _B eforeArg s to nvoke in
    _bef
        or eP ause _s tri
    g
        .GetInvoc
        a
    tionList())
    {
        try
        {
            _bef re aue _r in
                ?.
            oe(@param s);
        }

        ca tch(Ex
            c
            eption e)
        {
            HKMi
                r
            r
                or o.oLo gr ror(e);
        }
    }
}

ty pe = @para ms.
    t
    ype;
o
    r
ig(type
    )
    ;
if (_af
e
    rPaus_ s
r
    ig
        = ull
{
    for
        e
            ach(Deleg
                a
    t
        e
    s.Pa us et ring_A
    t
        rArgs t
        o
    Invok e in _ afte
    r
        Pause_
    s
    tr in
        .
    GetInvocationList())
    {
        {
            afte
                ra ue _string.
                n
                voke(@para s);
        }
        catch (E ce ptin e)
        {
            HKMirr or Mo
                .D
                LogErro r(e);
        }
    }
}
}

internal static void HookCount()
{
    if (!Ho ok edLit.C ontains("Count"))
    {
        HookedL

        Ad("Cu                nt");
        On.iTwe
            o
        nt += Cou nt;
    }
}

internal static event Delegates.Count_BeforeArgs _beforeCount;
internal static event Delegates.Count_AfterArgs _afterCount;

private static int Count(On.iTween.orig_Count orig)

i
    f
    (befo
        r

eCount != n ull)
{
    foreac h
    el
    gates.Count_BeforeA gs
    t
    ke in _bef
    reCoun
        .GetI
        vocationL
    i
    st())
    {
        try
        {
            _beforeCount?.Invok
                ();
        }
        catch (Exception e)
        {
            HK MirrorMo
                .DoLog
            rror(
            );
        }
    }
}

v
ar retVal = orig();
if (_afterCo
nt != null)
{
    foreach (Deleg
                 at es.Coun
        _After
    rgs
    oInvoke in _afterCount
        .
        Ge
        t
    Invoca
        t
    ionList())
    {
        try
        {
            retVal =
                _aft
            e
            Count.Invok
            e
                    (retVal);
                catch

            Exce
                tion e)
            {
                HKMi
                    rr oM od.DoLogE
                    r
                ror(e);
            }
        }
    }
    return retVal
}

internal static void HookCount_string()
{
    f(!Hoo edLi
    ontains("            Co            unt_str            i
    ng ")


    {
        HookedList.Add("Count            string
        );
        On.i
            Tw ee n.Count
            s
        tring += C
        o
        unt_s ring;
    }

internal static event Delegates.Count_string_BeforeArgs _beforeCount_string;
internal static event Delegates.Count_string_AfterArgs _afterCount_string;

private static int Count_string(On.iTween.orig_Count_string orig, string type)
{
    D e
    ates.P
        a
    rams_ o
    _strin @para s
        ew()
    {
        t
        yp e = type
    }

    ;
    if
        (_bef
    o
        reCoun
    t
    string ! nu l)
    {
        f
            or ea
            h
            (Delega es .

        Count_str in g_BeforeA
            gs
        toIn
        vo ke in _be
            o
        reCount_s
            t
        ring.GetInvocation ist())
        {
            try
            {
                _beforeC
                    un
                _string?.In vo ke(@params);
            }

            ca
                tc h(E xception e)
            {
                H
                    K
                Mi rr orMo d.DoLogError(e);
            }
        }
    }
    type = @ pa r
    ams.ty pe;

    var re tV a
        l = orig(
            t
    yp e);
    if (
        t
    nt string !
        =
        null )
    {
        for
            e
                a

        c
            h(De gt

        es.C ount_str
        ng_Aft
        rArg
        toInvoke in _afterCount_str
            i
        ng.e tIv oc tionLis t())

        {
            ry
            {
                ret
                V
                    al = _afterCount_string.In
                v
                    ok e(@p rams, ret
                V
                    al)
                ;
            }
            catch (Exception e)
            {
                H
                    KM ir
                    r
                orMod.D
                oLogError(e);
            }
        }
    }
    ru rn
    re Val
}

internal static void HookCount_GameObject()
{
    if (!Hoo
    k
    edList.Contains("Count_GameObject")

    {
        HookedList.Add("Count_GameOb
        je ct");
        On
            iTween
        Count
            GameObjec
        t
            += Count_GameObject;
    }
}

internal static event Delegates.Count_GameObject_BeforeArgs _beforeCount_GameObject;
internal static event Delegates.Count_GameObject_AfterArgs _afterCount_GameObject;

private static int Count_GameObject(On.iTween.orig_Count_GameObject orig, UnityEngine.GameObject target)
{
    D e
    le ga
    e
    s.Param s_ Count_GameObject @params =
        ne

    {
        t ar get = tar
        e
            t
    }
    ;
    if (
        _
    beforeCount_GameO ject != null)
    {
        fo
            each(Dee ga

        es.Count GameObj ct_Bef reArgs toI nv o
        ke in _beforeCoun
            t
        _
            Ga me Obje ct.G tInvocationList())
        {
            try
            {
                _ be
                f
                    o
                reCoun _
                GameOb e
                c
                    t
                voke(
                    p
                arams);
            }

            c
                a
                (
                    xcept io n e)

            {
                HKMi rr orMod
                    .
                    Do Lo g
                    (e)
            }
        }
    }
    t
    r
        et = @ par
        a
    ms.t ar ge;
    var r
    t
        al = or

    i
        g(ta rg et);

    i
        f
        (_aft
            e

    Coun
        t
    _G am
    O
        bject !null)
    {
        fo each(Delegates Co
        t_Ga
            mO bj ec _Af
            e
        rArgs toI
        n
        voke in _afte Cou t_GameO bject.GetIn
            tionList
            ))
        {
            try
            {
                retVal = _afterCount_Ga
                m
                    eO ject.Invo e(p a
                r
                a
                    ms, retV al );
            }
            catch (Except io

            n e)
            {
                HKMi
                    r
                rorMod
                    .D oL oE rr
                o
                r(e);
            }
        }
    }

    return r
    t
        Vl;
}

internal static void HookCount_GameObject_string()
{
    f(!
        ookedList.Contains("Count_GameObj
    e
        ct _t ri
    g
    "
        ))
    {
        Ho ke L
            i
        st.Add("            Co
        u
            nt _GameObjec t_stri ng ");
        O.i Tween.Co
            unt_ Ga meObject_s
        t
            rin
        g
            + Co nt_Ga meObject_str ng;
    }
}

internal static event Delegates.Count_GameObject_string_BeforeArgs _beforeCount_GameObject_string;
internal static event Delegates.Count_GameObject_string_AfterArgs _afterCount_GameObject_string;

private static int Count_GameObject_string(On.iTween.orig_Count_GameObject_string orig,
    UnityEngine.GameObject target, string type)
{
    Delegates.Params_Count_GameOb
        j
    ec
        t
    _strin
    g
        @params = new()
        {
            target = targe, t
            y
            e = type
        };


    if (_befor
    Count_
        G
    meObje
        t_st
    r
        ng !
        null)
    {
        foreac
            h(D elegates.

        C
            ount_GameObject _string_BeforeArgs toI
        voke in
        _
            efo
        r
            eo un t_ Ga meOb
        e
            t_strin g.etIn
            oc tioni())
        {
            try
            {
                _befo
                    e
                ount_GameObject_ s
                tr in
                    ?
                    .Invoke @params);
            }
            catch (Exception
                  )
            {
                HKM
                    ir ro rMod DoL
                    g
                Er or(e);
            }
        }
    }
    targ et = @params.target;
    type = @param
        .type
    va
    r
        tVal = orig(target, type);
    if (_after o
        unt_Ga eObje t_stri
    n
        g
    ! = null )
    {
        foreach (D elegate s.Count_GameOb je ct_strin g_ Af te Args
            toInvok e i
        n _f te Cout _G meObject
        s
        t
            .
            etInv oc at onLis t()
        {
            try
            {
                re tV al = _ ft erCo unt
                    G
                meObject _
                string
                    .I nvok
                (
                    params,
                    retV
                        al);
            }
            catch (Exce
                   ti

            n )
            {
                H
                KMirrorMo.D Log
                Er ro(e
                    )
                    ;
            }
        }


        r
            turn r
            tVa;
    }

    internal static void HookStop()
    {
        i(!ooked List.Cont
        i
            Stop
        ")            )
        {
            Hooked
                i
            st.Add("S
            t
                op");
            On.iTween.Stop += Stop;
        }
    }

internal static event Delegates.Stop_BeforeArgs _beforeStop;
internal static event Delegates.Stop_AfterArgs _afterStop;

private static void Stop(On.iTween.orig_Stop orig)
{
    if (befor
    e
        Stop ! = null
        )


    {
        f oe a(e le gates.St
        p_Befo
            eArg
        toInvoke
            i
        n _e o
            e
        S
        top.Ge tInvoc
        a
        tionList() )

        {
            t ry {
                _ber eS top.I nvoke(
                    )
                    ;
            }


            catch (E
            x
                ce pt
                i
            on e)


            {
                HK ir
                or
                od.DoLo
                    gr ro r(e);
            }
        }


        orig(
            ;
        if
        _afterSto
        p
            != null)
        {
            forea
                h(Delegates.
                    St op_After

            rgs to
            nvoke
                in _after
                S
            top.GetInvocatio
            List())
            {
                tr
                y
                {
                    _afte
                    Stop.I
                        voke
                        );
                }
                c
                    a

                tc
                    h
                    (Exce
                        p
                        tion e)
                {
                    KMir
                        ro rd.D
                        L
                    ogErro r(e);
                }
            }

            internal static void HookStop_string()
            {
                if (!Ho
                dList.Co
                    ta
                ns("St            p_strin            "
                ))
                {
                    HookedList.Ad
                    d
                    (
                        "S            tp            _s            tri            ng            ");
                    On.iTwee
                    n
                        .
                        Sto p_ str
                        i
                    n
                    g + S top_s
                    r
                        ing;
                }
            }

internal static event Delegates.Stop_string_BeforeArgs _beforeStop_string;
internal static event Delegates.Stop_string_AfterArgs _afterStop_string;

private static void Stop_string(On.iTween.orig_Stop_string orig, string type)
{
    e
        l
    te.Params_Sto
        p
    _string @p
    a
    ra s = ne w()
    {
        type
            type
            ;
        if
            (_beforeStop_stri
        n
        g != n
        l
            l)
        {
            fo re ach(De le gates.St
            o
                p_string_Bef re
                Arg s oI nv ke in _be
                f
            ore
                S
            top_string.GetI
                n
            vo ca
            t
                ionLis
            t
                ())
            {
                try
                {
                    _
                        ef
                    reS op stri ng? o ke(@ params);
                }

                catc
                    (Exc
                ption e)


                {
                    HKMirrorMod.DoLogError
                        e);
                }
            }
        }
        type = @pa
        ra ms.type;
        orig(t
        pe);

        f(_after
        S
        top_string != null)
        {
            f
                reach(Delegates.St
                    op

            _string
                AfterA
            gs t
            Invoke in _af
                t
            er
                S
            top_st
                r
            ing.GetInvocationL
            st()
                )
            {
                try


                _af
                    te rS o_ st in
                g
                    .Invoke(@ pa rams);
            }

            ca t
            (E xcepti
                n
                e)


            ir rorM
            dD oL ogEr ro r(e)
        }
    }
}
}

internal static void HookStopByName_string()
{
    if
    (
        !Hook dL ist.Contains("Stop
    yName_st
        in
    "))
    {
        Hooke List.Add("            top            yName_string")
            ;


        On.i Twe.St opByName_string += St o
            p
        B
            yName_
        s
            tring;
    }
}

internal static event Delegates.StopByName_string_BeforeArgs _beforeStopByName_string;
internal static event Delegates.StopByName_string_AfterArgs _afterStopByName_string;

private static void StopByName_string(On.iTween.orig_StopByName_string orig, string name)
{
    Delegat es.Pa
        r
    ams _S top
        B
    yName_s
        t
    ri ng @par s new()


    nm e
        = n ame
}

;
if
    (_befo eSto
    p
By am e_ st in g != null)
{
    fore
        ch(
            elegates.StopByName_
                s

    tr in g_
        e
    f
        oreArgs t oI
    n
    voke in b
        eforeS opByNa e_str
    ingG eI nvocationL
        i
    st(
        )
        )
    {
        try
        {
            _b foreS
            topB yN
            a
                me_str
            i
            ng?.I nvoke(@par ms
                ;

            atch Exception
            e
            {
                H KMirrorM
                d.DoLo
                    Error
                e);
            }
        }
    }


    name = @params.name;
    orig(n
    me);
    if (_afterStopByNa
    me _string
        = null

    {
        fo
            each(Del
                e

        gates.StopByName_string_Af
        erArgs toInvoke in _af
            te rStopBy
            ame_st
        ing.etInvocationList
        (
        ))


        {
            try

            {
                _afterStopByName_str
                ng.I
                    n
                oke(@params
                    )
                    ;
            }
            catch

            Except
                io n e)
            {
                HK Mir
                r
                orMod.Do Lo gE ro r(e);
            }
        }
    }

    internal static void HookStop_GameObject()
    {
        if (!HookedLi t.Contains(
            op
        Game
            Ob je ct"))
        {
            H
            ookedList
                .A d("Stop_Ga            eOb            ect");
            On.iTw
            en.Stop_
                am
            Ob je ct += Stop_GameObject
                ;
        }
    }

internal static event Delegates.Stop_GameObject_BeforeArgs _beforeStop_GameObject;
internal static event Delegates.Stop_GameObject_AfterArgs _afterStop_GameObject;

private static void Stop_GameObject(On.iTween.orig_Stop_GameObject orig, UnityEngine.GameObject target)
{
    De le ates.Par a
    s_
        top_GameO jec @params =
        new()
        {
            target =
                t
            ar et
        };
    (_bef reStop_Gam eO bject !
        =
        null)


    {
        forea
            c
        h
            legat
        s
            .Stop_Gam
            O
        b
            t
        BeforeAr s t
            o
        Inv ke in b
            e
        f
            o
        re St oG am eO bject.Ge
            Invoca
        ionL
        st())
        {
            try
            {
                _beforeStop
                    _
                Ga me bj
                    c
                t
                    ?.nvoke @pa
                    r
                ams);
            }

            c
                at ch(E xc eption e)
            {
                HKMirr
                    orMo d.DoLo Error(e
                ;
            }
        }
    }
    targ et = @params targe
        t;
    or ig
    (
            target
        )
        ;
    if (_afterStop_GameOb
    t
        != nul )

    for ea ch(Dele
        g
    St op_GameO
    ject_A
        terAr
    s toInvok
    e
        in _afterStop_GameObject.GetInv
    cationList())
    {
        try
        {
            _after
                St op_GameO

            ject.I
                voke(
                    params);
        }

        catch (Exception e)
        {
            HKMirro
            Mod.DoLogError(e);
        }
    }
}
}

internal static void HookStop_GameObject_bool()
{
    if
    (
        !HookedList.Contains("Stop
    Game
        O
    ject_bool")
        )

    {
        HookedL
        st.Add
        (
            Stop
        GameObject_bool
        ")            ;O            n.            iTwee            .S            to
        p
        _GameObject_bool += Sto _Gameb ject_bo
        l
    }

internal static event Delegates.Stop_GameObject_bool_BeforeArgs _beforeStop_GameObject_bool;
internal static event Delegates.Stop_GameObject_bool_AfterArgs _afterStop_GameObject_bool;

private static void Stop_GameObject_bool(On.iTween.orig_Stop_GameObject_bool orig,
    UnityEngine.GameObject target, bool includechildren)
{
    D el g
        ae s
        Params_Stop
    _
        GameObject_ b
        o
    o
        l @p ar am s = ne w(
    {
        ta rget
            =
            targe
        t
            , includechildr
            n inclu de c
            h
        ildre n
    }
    ;
    if (_be
    fo reSt
    o
        p_Game
    O
    ject_bool != ull
        )

    {
        f
            r
        each(Delegates.Stop_GameO bj
        ct
        bool
            _B ef oreA gs
            o
        In oke in _
            b
        eforeSto p_ GameObject_bool.GetInvo
            ationLis
            ()

        {
            ry
            {
                _beforeStop_GameObj
                    e
                ct_bool?.I nvoke(@p
                a
                    r
                    );
            }
            c tc h(E ception e)
            {
                HKMirrorMod
                    .
                    DoLogE
                    r
                ror(e);
            }
        }
    }
    tar t
        = @param
            .tr g
        t;
    includec
        h
    ildr en = @p
    a
        ra s. in c
    ch ildren;

    rig(ta
    get,
    includechildren);
    if (_afte
    r
        St op _G
    me Ob ject_bool
        !
        = null)

    {
        foreach (Del gates .S op_Ga
        meOb jc t_ bool_After rgs
            toIn vo e in _after Stop_GameO
        bje_ bo
        o
        l.GetI
            n
        vocationList())
        {
            try
            {
                _f terStopG am Obje ct _I nv ok e(@param
                );
            }

            c
                tch(
                    xception
                        e
                )
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }

    internal static void HookStop_GameObject_string()
    {
        if (!H
        o
        okedList.Contains("Stop_GameObjec
        _string"))
        {
            HookedList.Add("
            St op_Game
            bject_
                trin
            ");
            On.iTween.Stop_Game
                O
            bj
                e
            ct_str
                i
            ng += Stop_GameObject_string
        }
    }

internal static event Delegates.Stop_GameObject_string_BeforeArgs _beforeStop_GameObject_string;
internal static event Delegates.Stop_GameObject_string_AfterArgs _afterStop_GameObject_string;

private static void Stop_GameObject_string(On.iTween.orig_Stop_GameObject_string orig,
    UnityEngine.GameObject target, string type)
{
    D eleg at es.Params_Stop_G am eObject_string @param s = new()
    {
        t ar
        get = t arget
        , type =
            ype
    };
    if (_beforeStop_Ga me Ob je c_ sr ing != n ul )
    {
        for
            e
                ach(De
                    le
        gat
            t
        p_GameO
            bj ct _
        sr ng_
        B
            eforeA
        r
            s to
            I
        nv ok
            in _b ef or eStop_GameObject_ tring.G e
        In
            ocat
        io nL st())
        {
            r
            y
            {
                _befor
                    e
                Stop_GameObject_strin g?.Invoke @p aram
                    );
            }
            cat
                (E
            ceptio n e)
            {
                HKMirrorMod.DoLog
                    E
                rr or(e);
            }
        }
    }
    tar
        g
    et @p ar am s.ta rget;
    type = @params.type;
    o ri
    g
    (t ar get,
        type);

    i
        f
        (_a fterS

    o
        p_GameObj
    c
        t
    ng != null
        )

    {
        foreach
        (
            D
                el eg ae s.St op_GameO
        ject_s
            ring
        AfterArgs toInvoke in _afterStop
            _
        Ga mO bj
            c
        t
            _string Get
            I
        nvocatio
            n
        List())
        {
            try
            {
                _a fterStop_Ga e
                    Obje ct string Invo
                k
                e(@
                pa ra ms);
            }
            catch (Exception e)

            {
                HK Mi r
                orMod.D
                oLogError(e);
            }
        }
    }
}

internal static void HookStopByName_GameObject_string()
{
    i
        (!Hoo
    edLis
        .Contains
        (
            "StopByName_GameObject_string"))
    {
        Hook
        dList.Add("StopByName_GameObject_st
        ri ng");
        On
            iTween
        StopB
            Name_Game
        O
        bject_string += StopByName_GameObject_
        tring;
    }
}

internal static event Delegates.StopByName_GameObject_string_BeforeArgs _beforeStopByName_GameObject_string;
internal static event Delegates.StopByName_GameObject_string_AfterArgs _afterStopByName_GameObject_string;

private static void StopByName_GameObject_string(On.iTween.orig_StopByName_GameObject_string orig,
    UnityEngine.GameObject target, string name)
{
    Deleg at es.Params_ St opByN
        Ga
    eObj
        ec t_ string
    p
        arams = n w
        ()
    {
        target = targe
            , name = name
    }
    ;
    if (_
    eforeSto
        By
    ame_Game Object_string = null)
    {
        for ac
            h
            (Delegates.StopB
                y
                N
                am e_ Game Oj ec t_string_BeforeArgs to In voke i _bef
                o
                r
                eSto By ame_Ga
                m
                eO bj ect_s
                r
                ing.GetIn
                o
                c
                n
                ist( ))
        {
            try

            {
                _b foreSto pB y
                N
                    a
                m
                    e_ Ga me be ct_str
                n
                    In voke @para
                ms );
            }

            t
                h(Exce
                    p

            ti on
            e
            {
                HKMirrorMod.L
                    gErr or(e
                    )
                    ;
            }
        }
    }
    arget = @p ara s
        .target
        ;
    name
        @ pa rams.na e;

    ori
        g
        (t ar

    e
        t, n ame);
    if (_ afterStopByName_Gam eObje
    t_
        trin
    g != n ul l)
    {
        o
            reach(De
                l

        egates.S topByName_ GameObjec t_ string_AfterA
            gs toInv
        ke
            in _afterSto pByName_GameObje t_strin.
            GetIn ocationLis t())


        {
            t ry
            {
                _ af terStopByNa e_GameObject_string.I nvo

                k
                    e(@para s);
            }
            c t
            ch E cept
                o
            n e)
            {
                HKM
                    r
                rr M
                d.DoLogError e);
            }
        }
    }
}

internal static void HookStop_GameObject_string_bool()
{
    if (!H oo k
    ed Li st.Cont ai ns("Sto
    p
        _G am eObject str
        in g_b
        o
    ol"            )
    {
        Hook ed
        L
        ist.Ad
        d
            ("Sto
        _G
            Objec ts tr in g_bool")

        On.iT
        een.S
            op_GameOb
        j
            ect_string_bool
                = Stop_GameO
        bj ect_stri
        g_bool
    }
}

internal static event Delegates.Stop_GameObject_string_bool_BeforeArgs _beforeStop_GameObject_string_bool;
internal static event Delegates.Stop_GameObject_string_bool_AfterArgs _afterStop_GameObject_string_bool;

private static void Stop_GameObject_string_bool(On.iTween.orig_Stop_GameObject_string_bool orig,
    UnityEngine.GameObject target, string type, bool includechildren)
{
    D el egates.Para
        s_Stop_G
    me
        ec t_st ing_
    b
        ool @para ms = new()

    {
        ta rg et = t arget
        , type
            = type,
        i nc ludech l
        dren = inc
        eh i
        dren
    };
    if
    (
        _befo re Stop_
    Ga eO be ct _s tr in g_bool !
    null)
    {
        fo
            each(Delegates.
                S
                to p_ Ga
                e
                O
                bject _s trin g_ b
                o
                ol_Befor
                e
                Args toInvoke
                i
                n _f oreStop _G ame
                O
                bje
                c
                t_string_bo l.
                GetI nv
                o
                cation
                L
                ist())
        {
            try


            _
                eforeSto _Gam
                eb ec t_ string_b
            ol?.In
            oke(@
            arams);
        }
        catch

        (Exception e)
        {
            KMirrorMod.DoLogErr
            or(e);
        }
    }
}

targ
    t = @
arams.tar
g
    et;
type = @params.typ
    ;
includechildren
    = @params
includ
chil
    ren;
orig(ta
r
ge
    t,
    type,
    includechildren)

if
(
    afterS
op_G
    am eO bject_s tr in
g
_bool != null)
{
    fore
        ch(Delg at s.S
            t
            o_ Ga meOb
            e
            t_str i
            ng _b l
            _AfterAr s toInv ok e
            n
            afte
            r
            ameObj
            c_ st ring_
            b
            ool.GetInvocationList())
    {
        try
        {
            aft rStop _GameObject_st in g
            _bool.Inv ok e(@param
            s
                )
            ;
        }

        catc h(Exception e)
        {
            H M
            ir orM
            o
            d.DoLog
                E
            rr or(e);
        }
    }
}

internal static void HookStopByName_GameObject_string_bool()
{
    i f(!H
    oo ke dL is
        t
        .Cont ai ns("
    t
        opBy am e_GameObj ct _s
    n
        _boo
    l"            ))            
    {
        H oo ked
            i
        st.Add("            St            op            B
        y
            Name_GameObject st ing_b
        ol ")            ;
        On.i
            we
        n.Stop By Name_Ga me Objec _s tring_bool += Sto
        p
            B
        yN aG ae bject _string_bool;
    }

internal static event Delegates.StopByName_GameObject_string_bool_BeforeArgs
    _beforeStopByName_GameObject_string_bool;

internal static event Delegates.StopByName_GameObject_string_bool_AfterArgs
    _afterStopByName_GameObject_string_bool;

private static void StopByName_GameObject_string_bool(On.iTween.orig_StopByName_GameObject_string_bool orig,
    UnityEngine.GameObject target, string name, bool includechildren)
{
    Delegt es.arams
        _
    StopByName_GameOj es tr
        ng
    bool params
    new()
    {
        target = ta
        r
        g
        et
        , nam e = name
        , inc
        l
        u
        dechil r
        e
        n = inclu
        e
        children
        ;
        f _ beforeStopB N
        ame_Ga eObj
        ec _
        st ri ng _o ol !
        null)
        {
        fore
        a
        c
        h (D
        l
        egates.St pB
        Na
        e_Ga
        me Ob ject_st
        i
        ng_boo l_Be
        f
        oreAr s toInv ke
        _before
        to
        ByName_GameO bj ect _s tring_b oo l.GetIn
        v
        o
        ca ti onLi st ())
        {
        ry {
        _be fo eStop
        B
        yName_ Ga m
        eObjec
        t
        _
        ng_bo
        Invok (@pa
        a
        m);
    }

    cat ch(Exc
        e
        ption e)
    {
        H
            K
        M
            ir ro rM od.DoLog
        rror(e
        );
    }

    }
    }
    tar
        et = @
    aram
        .target;
    name =
        @
    pa ra ms
        n
    a
        me;
    inclu childre
        n
            = @params.i nc
        lu
    il dren;
    orig
    (
        tar
    g
        et, name, incl d
        ec il
        d
    re n);

    i
        f
        (_aft rS

    topBy
        am
    _G am eObject_st
        rn g_ bo ol != nu
    l)
    {
        f
            reach
            (Delegate
                s
                .

        StopByName_GameObject_
            tring_bool_AfterArg
        s toInvoke
            in _af
            erSto
        ByName_Ga
            m
        eObject_string_bool.Ge
        InvocationList())

        {
            try
            {
                _
                    fterSt
                pBy
                    ame_GameObje
                c
                    t_
                s
                    tring_
                b
                ool.Invoke(@param
                );
            }


            atch(
                xcep
            ti on e)
            HKM
                i
            rr or Mod.DoLg Error(e
            ;
        }
    }
    }
}

internal static void HookHash()
{
    if (!HookedL is  .Conta
        ns
    "Has
    h"            ))            
    {
        Hook dL s
        t.Add("Ha
        s
            h");
        On.iTween.Hash + Ha h;
    }
}

internal static event Delegates.Hash_BeforeArgs _beforeHash;
internal static event Delegates.Hash_AfterArgs _afterHash;

private static System.Collections.Hashtable Hash(On.iTween.orig_Hash orig, System.Object[] args)
{
    e gates.Par
        ms _H sh @
    pa ra ms = n ew()
    {
        args = a
        r
            gs
    }
    ;
    if (beforeH sh != ull)
    {
        f
            re
        ch(Delegates.Ha sh _B
        e
            foreArgs toInvok
            e

        i _b efor eH ash.Ge tI
        v
        cationList())
        {
            tr
            y

            {
                _b efo
                r
                eHash?.I
                voke(@ pa
                    ra m) ;
            }

            cat
                h
                (Excepti
                    n
                )
            {
                H KMirr or Mod.D
                    oL og Error(e);
            }
        }
    }
    ar gs = @par ms.arg
        s;
    v ar retVa
        = ori
        (arg
        );
    if (_afterHash !=
        nu ll )


    f
        orea ch(Dele
    g
    ates.Has
        h
    _AfterArgs toInvok
    e
        _ afterHash.
        G
        etI
    n
    vocationList() )
    {
        try
        {
            r tVal = afterH sh.Invoke(@p ra
            s, retVal);
        }

        ca
            th(Ex ception
            )
        {
            H
                Mirro
            Mod.DoLog
                E
            rror(e);
        }
    }
}

return retVa
    ;
}

internal static void HookAwake()
{
    i
        (!Ho
    kedList.C
        o
    ntains("Awake"))
    {
        HookedL
        st.Add("Awake");
        On.iT
            we en.Awak
            += Aw
        ke;
    }
}

internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;

private static void Awake(On.iTween.orig_Awake orig, iTween self)
{
    De
        egat
    es.P ara s_Aw
        k
    e @par ms
        = new()
        {
            self = self
        };
    i
        (_befo re
    wa
    e != null)
    {
        f or each(Dele
        g
        ates.Awake_Before
            A
        r
            gs t oInv ok e in _ be foreAwake.GetInvoc at iL ist(
        )) {
            try
            {
                _b ef re Ak e? Invoke(@
                a
                    r
                    );
            }
            catch (Exc ep

            tion
            {
                H
                    KM ir ro rM od Do og
                r
                or(e);
            }
        }
    }
    sel
        f = @
    ar ms se
        f

    or ig(
        s
            elf);

    i
        f(_ af

    e
    rAwak e = nul l)
    {
        fo ea ch(D
        le
        ates
            .A wa ke_Afte
            A
        rgs toInv
        o
        ke in _af terAwake.Get nv ocati
            nLis t())
        {
            tr

            {
                _afterAwake.Invoke(
                    @
                param) ;
            }
            catch (
                Ex ep tion e )
            {
                H
                    M
                rrorMod.DoLogEr ro r(e);
            }
        }
    }
}

internal static void HookStart()
{
    if (!
        o
    oe d
    ist.C on tains("            S
    tart"))
    {
        H o
        o
            k
        e
        dL is t.d("Start
            );
        On.i
            Tw en.Start +
            Start
    }
}

internal static event Delegates.Start_BeforeArgs _beforeStart;

private static System.Collections.IEnumerator Start(On.iTween.orig_Start orig, iTween self)
{
    Delegates.Para ms _Sta rt @p
        rams = new()
        {
            self =
                sl f
        };
    if (_be
    oreSta
    t !=
        ull)
    {
        fo
            r
        each(Delegates.Start_BeforeArgs t
        Invoke in _beforeStart.GetInvo
            ca tionList
            ))
        {
            t
            y
            {
                _
                    eforeStar
                t
                    ?.Invoke(@params);
            }
            catch (Excep
            ion e)
            {
                HKMirrorMod.DoLogEr
                    ro r(e);
            }
        }
    }
    se
        f =
            @params.self;
    return or

    i
        g(
            s
                elf);
}

internal static void HookUpdate()
{
    if (!Hook
    e
    dList.Cont
    ins("U
    p
        ate"))
    {
        Ho
            ok ed ist.Add("
        U
            pdate");
        On.iTween.U pd ate + = Updat e;
    }
}

internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;

private static void Update(On.iTween.orig_Update orig, iTween self)
{
    D le ates.Par
        a
    ms_Upd te @params
        =
        ne w()
    {
        s elf = el
    }
    ;
    if (_beforeUpd ate ! n u
    ll)
    {
        f
            oreach
            (
                De le

        gates
            U
        pdate_Bef
            A

        oInv oke in _
            b
        efor Up date.
            G
            e
        t
            In va ti on List()


        try
        {
            _
                before
            Up date
                .nvoke(@ a
                rams
                );
        }

        tc(Ex
        e
            tion

        e)
        {
            H
                Mirr
            o
                rM od
                D
            oLogError(e);
        }
    }
}

self = @p ar am.s
    lf;

or ig(self);

i
    f(_after
        U

pdate != null)
{
    foreach (Delegat
                 Update_A
    te r
    rgs toInvoke in _after pd a.Ge InvocationList()
        )


    {
        tr y
        {
            _t erUpda

            e
                Invoke(@para s)
        }
        catch (Excepti o
            n e)
        H Mirror
        M
            DoLog Er
            r
        or(e);
    }
}
}

internal static void HookFixedUpdate()
{
    i f(!Ho oe dL st.C
    nt ins(
        "F            ix            edUpdate
    ))
    {
        H
            oked
        ist.Add(
            "
        Fi xe dU
            d
        a
            te");
        On.i
            T
        ween.ie dUpda te + = FixedUp at e;
    }
}

internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

private static void FixedUpdate(On.iTween.orig_FixedUpdate orig, iTween self)
{
    De
        eg
    tes.P am sF ixedUpd
    t
    e @params
        = n w()
    {
        elf = elf
    }
    ;
    i(_ b
    foreFi ed Up dat
    e
        != null)
    {
        foreach
        (
            Dl eg ates.i xedUpdate_B
        e
            f
        oreArg
            s to In ve in _
            e
        fo re Fixed Up da
        e
            .
            n
            ocatio Lis()
            )

        {
            tr y
            {
                _b
                    e
                f
                    o
                re Fi x
                date
                    ?.nv ok
                    params);
            }

            c tc
            (Ex
                ce pt ion e)


            HKMirrorM
            od.DoLogError e);
        }
    }
}

self =
    params. se lf;


orig(self);
i(_a
f
    t
er Fi xed Up da te != ull)


{
    oreac
        (D el eg at es.Fi e
    dUpda te _Aft
        r
    Ag s
    Invok e in _
        a
    ft rF ixedUpd
        a
    t
    e
        .G e
    oc ationLis
    ())
    {
        ry
        {
            _afterFixedUpda
                t
            e.In vo
            e
            (
                @pr ams);
        }

        c tch(E
            x
            ception e)
        {
            H
                KM ir rorMod.DoL
                o
            gEr ro r(e);
        }
    }
}
}

internal static void HookLateUpdate()
{
    if (!Hoo
    kd Li st.Contain
        ("Late
    pdate
        ))
    {
        Hook
            e
        dList.Add("LateUpdate"
            ;
        On.iTween.LateUp
            da te += La
        eUpdat
            ;
    }
}

internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

private static void LateUpdate(On.iTween.orig_LateUpdate orig, iTween self)
{
    D el e
        at
    s.ar a
    ms _L ateUpda
    e
        @params
            =
            ne w()
    {
        self = self
    }
    ;

    f(_befo
    eL
        teUp da te ! = null)
    {
        fo
            r
        each(D elega te s.LateU pd a
        t
            e_ Be fore Ar gs toI voke in _befo
            r
        e
            LateUp
        d
        ate.Get
            I
        nv ca tionL t
        ())

        try


        _
            r
        LateUpdate?
            .Invoke(@par m
        s
            );
    }
    c at ch(
        x
    epti on e
        )

    {
        HK irro
        r
        Mo.D
            o
        Lg r
        o
        r(e);
    }
}
}
self =
pa
ams.
se lf;
rig(s
l
f);
if (_
a
fte rLateUpdat != nul )
f reach
De
egat es.La te Update_ Af ter
A
rgs toInvoke in _a
f
te rL te Upd
GetI nvocationList( ))

{
    try

    {
        _after
            L
        at eU pdae.Invoke(@ ar m

        s
            atch(E ception e)


        {
            ir ro rM od.DoLogEr
            or(e);
        }
    }
}

internal static void HookOnEnable()
{
    if
        (!Hooked
    L
    ist.Co tains("On            nab            e"))
    {
        HookedLis
        t
            .Ad
        d
            ("OnEnable");
        On.iT
            we eO nE
        n
        able +
            =
            OnEnable;
    }
}

internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

private static void OnEnable(On.iTween.orig_OnEnable orig, iTween self)
{
    Delega
    es.Par
        ms_O
    Enable @params =
        n
    ew
    (
    )
    {
        s
        e
            lf = self
    }
    ;
    if (_befo
    eOnE
        n
    ble !=
        null
        )
    {
        foreach (
            D
                ele ga tes.OnEna bl e_Before Ar gs t
        Invoke
            n
        _be
            f
        o
            able G
            tInvo c
            at io
            s
        t())
        {
            try
            {
                _beforeOnEnab
                e?
                    Invo
                ke @p arams;


                c tch(Exc
                    e
                    ption e)
                {
                    HK MirrorM d.Do LogErro
                    (e);
                }
            }
        }
        se
            f = @params.self;
        orig(sel
        f
            );
        if (_afterOn En ab
        le ! = nu ll)
        {
            foreach (Delegat es .OnEnab le _A
                f
            t
                erArgs

            toInvoke i afte
                O
            nEnable.Gt I
            no c
            tionList()

            {
                try

                _afte O
                n
                    En ab le.v oke(
                    p
                        rams);
            }

            cat
                ch(Ex
                    c
                    ep io
                    n
                    e)
            {
                HKMirrorMod.Do LogError(
            }
        }
    }

    internal static void HookOnDisable()
    {
        if (!H okedLi

        t.Contai
            s(
                OnDi sable

        "))
        {
            HookedL st.Ad("OnDisable");
            On.i T
            wn.O nDia be += OnDisable;
        }
    }

internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

private static void OnDisable(On.iTween.orig_OnDisable orig, iTween self)
{
    D
        eleg at
        e
    s.Pa am
    s
        _OnDis ble @param
        =
        new()
        {
            self = sf
        };
    if (_bef
    reOnDi
        able
            = null)
    {
        foreach (Delegates.OnDisab
                     e_BeforeArgs toInvoke
            in _before
            nDisab
        e.Get
            nvocation
        L
        ist())
        {
            try
            {
                _beforeOnD
                sable?.Invoke(@params
                );
            }

            catc
                (Exce
            tion
                e)
            {
                HKMirrorM
                    o
                d.
                    D
                    oLogEr
                r
                or(e);
            }
        }
    }
    self =
        para
    m
        .self;
    orig
    (
        self);
    if
    _after
        On Di sable !=
        n
    ull)

    fo each(Delegate
        .OnDisa
        l

    fte
        r
    Ag s toInvo
        e
    _ afterO n
        Da b
    le.GetInvocationList()

    {
        t y
        {
            _t er OnDisa bl en voke(@
            ar a
            ms);
        }
        ca ch E xc ption e)

        H KM irrorM
        d.
            oLo gE rr or(e);
    }
}
}
}

internal static void HookDrawLineHelper()
{
    if (!Ho okedList Co nt a
    i
    ns("Dr
    a
        wLin eH elp
    e
        r"            )
    {
        Hook
            d
        List.Add(
            D
        rw L
        neHelpe r");

        O
        n.iTween.D
            r
        a
            w
        Ln ee le r += Dra
        L
        neHelpe
            r
            ;
    }
}

internal static event Delegates.DrawLineHelper_BeforeArgs _beforeDrawLineHelper;
internal static event Delegates.DrawLineHelper_AfterArgs _afterDrawLineHelper;

private static void DrawLineHelper(On.iTween.orig_DrawLineHelper orig, UnityEngine.Vector3[] line,
    UnityEngine.Color color, string method)
{
    Delegates.Params_Dr
    a
    wL in eHl pe r
        @params =
            new()
            {
                line = line, olor = co
                lor
                me thod = m th
                o
                d
            };
    i(_be oreDrawLineHelpe r != n
    u
        ll)
    {
        f
            orea ch(Delegates.Draw
            in
        Helper_BeforeArgs o
        ke i n _befor
        DrawLi
            eHelp
        r.GetInvo
            c
        ationList())
        {
            try
            {
                _beforeDra
                LineHelper?.Invoke(@params)
                    ;
            }
            catch

            Except
                on e)

            {
                HKMirr
                    o
                rMod.DoLogError(e);
            }
        }
    }
    line
        = @params.line;
    color = @p
    ar ams.col
        r;
    met
        od =
            @params.method;
    orig
    (
        li
    n
        e, col
    o
        r, method);
    if (_afterDra
    Line
        H
    lper != nul
    l
        )
    {
        foreac
            (Dele
        g
        tes.
            rawLineHelper_A
            ft er Args t oInv ke in _after Dr awLineHelper.Ge tI n
            ocation
        i
        t()
            )


        ry
        {
            _afe rD awLine He l
            er.Invoke(@par m
            )
        }
        catch (E xceptio n
        e )
        {
            HKM irrorMo d.DoLogEr ro(e);
        }
    }
}

internal static void HookDrawPathHelper()
{
    f(Hooke dList.Conta
        ("            DrawPa
    hH
        lp er "))
    {
        HookedList.Add("Dra
        w
            PathHelp r");
        On.i w
        e
            Dr awPa th Helper += DrawPathHe lp er;
    }
}

internal static event Delegates.DrawPathHelper_BeforeArgs _beforeDrawPathHelper;
internal static event Delegates.DrawPathHelper_AfterArgs _afterDrawPathHelper;

private static void DrawPathHelper(On.iTween.orig_DrawPathHelper orig, UnityEngine.Vector3[] path,
    UnityEngine.Color color, string method)
{
    Delegates.Params_D rawPathHe lp e
    r
        @par am s = new()
    {
        p
        at h = pa th, color = color, method =
            method
    };
    if (b
    ef or eD awP
    th elper != n ul l
    {
        foreach (De
                     l
        egates.Dra
            w
        P
            a
        th H
        r_ Be foreArgs
        toInvo
        e in
        _beforeDrawPathHelper.GetI
            n
        vo ca ti
            n
        L
            is t( ))
        {
            try


            {
                _befor
                    e
                DrawPathHelper?.nvoke(@
                para ms );
            }
            catch
                (Ex
                 c

            ep tion e)
            {
                HKMirro Mod.D LogE rr
                    o
                r(e);
            }
        }
    }
    path = @pa ra ms.path;
    co
        or
            = @params.color;
    metho
        @a ra ms.metho
        ;
    orig
        path,
        color,
        me
    t
        hod);
    if (_afterDrawPathHelper !=
        null)
    {
        foreach (Delegates.Dr
                     aw PathHelp
            r_Afte
        Args
            oInvoke i
            n
        _afterDrawPathHelper.GetInvocat
        onList())
        {
            try
            {
                _afterDraw
                    Pa thHelpe
                    .Invok
                        (@pa
                ams);
            }
            catch (Excepti
                   o

            n
                e
                )
            {
                H
                    K
                MirrorMod.DoLogError(e);
            }
        }
    }

    internal static void HookPathControlPointGenerator()
    {
        if
            (!HookedList.Contains("PathCo
        trolPoi
            t
        ene
            r
        ao r"            ))
        {
            H
                o
            edList.A
            d("P
            a
                ontr o
                lP oi
                t
            Generator");
            On.iTween.PathCo
            tr
            olPo
                in tG ener at or
                =
                Pa thConr ol ointGene rator;
        }
    }

internal static event Delegates.PathControlPointGenerator_BeforeArgs _beforePathControlPointGenerator;
internal static event Delegates.PathControlPointGenerator_AfterArgs _afterPathControlPointGenerator;

private static UnityEngine.Vector3[] PathControlPointGenerator(
    On.iTween.orig_PathControlPointGenerator orig, UnityEngine.Vector3[] path)
{
    Delegate
    s
        .Params_Pat Control ointG nerator @
    arams =
        ew
        )
    {
        path = p ath
    }
    ;
    i(_b eforePa
    t
        hCon tr olPointGe ne rato
    r
        != n ull)
    {
        foreach (Delega tes.PathContr
            o
        lPoin tG e
            n
        er ator_B
        e
            fo re Args
        o
        Invoke in
        _
            b
        r
            PathCon trolP
            oi nt Generator
            .
            G
            e
        tI nv oc at io nList())
        {
            try


            _be
            orePathControlPointGenerator?.In
            v
                ok e(@p a
            m
                s);

            catch (
                Exception e )
            {
                HKMirrorMod.DoLogError(e)
                    ;
            }
        }
    }
    pa h = @
    p
        ara
    m
    s.path;
    var retVal = orig(path
    );
    i f(afterPa hContr
    lPointGene ra tor != null)
    {
        oreach(Delegates.PathC ntrol
        Pi nt Ge nerator_
        fterAr
            s toI
        voke in _
            a
        fterPathControlPointGenerator.GetInvoca
        ionList())
        {
            try
            {
                retVal = _afterP
                at hControl
                ointGe
                erato
                    .Invoke(@
                p
                    arams, retVal);
            }
            catch (Exception e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }

    r eturn r
        tVal;
}

internal static void HookInterp()
{
    if (!H
    o
    okedList.Contains("Interp"))
    {
        Ho
            kedL
        i
        t.Add("Inte
        r
            p");
        On.iT
        een.In
            t
        rp +=
            nter
        p;
    }
}

internal static event Delegates.Interp_BeforeArgs _beforeInterp;
internal static event Delegates.Interp_AfterArgs _afterInterp;

private static UnityEngine.Vector3 Interp(On.iTween.orig_Interp orig, UnityEngine.Vector3[] pts, float t)
{
    Delegates.Para ms _Interp @p ra ms
        =
        new()
        {
            s = pts,
            t = t
            ;
            i f (_beforeInte rp ! = null)
            {
            foreach ( el gates.
            I
            nterp_ Be
            f
            or er gs t
            I
            nvoke i n _bf o
            rI n
            erp.GetInvo
            c
            atio List()
            )
            {
            t ry
            {
            _ be foreIn
            e
            p?.Invok e( @params );
        }
    ca
        Excepti
    o
        n e)

    {
        HK Mi r
            rorM d.D
            o
        ogEr
            r
        or(e
            ;
    }
    }
    }
    pts = @params.pts;
        = param s
        t;
    var
    re ta = orig
    p
        ts, t );
    if
    (
        _afterInterp != null)
    {
        foreach (Del ga
        es.Int rp_ ft
        rArgs toInvoke in _afterInterp.Get
            In vocationList())
        {
            t
            r{
                e tVal = _afterInterp.Invoke(@params, retV
                a
                    l);
            }
            c a

            t
                ch(Exc
                    e
                    pt io n e)


            HKMirro Mo d
                D
            oo g
            rror e) ;
        }
    }

    return re
    t
        V
    a
        l;
    }

    internal static void HookLaunch()
    {
        if (!HookedList.Contai
        n
        s("L            au
        c
            h
        "))
        {
            Hooke
                d
            List.Add
            (
                "Laun            ch            ");
            On.iTween.La unch + = La
            unch;
        }
    }

internal static event Delegates.Launch_BeforeArgs _beforeLaunch;
internal static event Delegates.Launch_AfterArgs _afterLaunch;

private static void Launch(On.iTween.orig_Launch orig, UnityEngine.GameObject target,
    System.Collections.Hashtable args)
{
    D
        legat
    s.Params_
        L
    aunch @params = new()
    {
        target = tar
        et
        , args = args
    };
    if (_beforeLa
    un ch != n
    ll)
    {
        orea
            h(Delegates.Launch_BeforeA
                r

        gs
            toInvo
        k
        e in _beforeLaunch.GetInvocation
            ist(
            )

        {
            try
            {
                _b
                    e
                foreLaunch
                    .Invok
                    e
                @param
                    );
            }


            atch
                (Exception e)

            {
                HK MirrorMod
                    .DoLog rror(e);
            }

            target = @p ar ams
                target;
            a
                gs
                    =
                    ra ms.arg
                ;
            orig(ta r
            et,
            s
                ;
            if_ af erLaunch != null


            for ach Deleg
            a
                te s.a un ch_AfterArgs toInvoke in _afterLaun
            h.tInv
                oc ti onL st()


            {
                try
                {
                    _
                        af te rLaunch In vo ke(@params);
                }

                ca tch(Exce pt ion
                )
                {
                    HKMr ro r
                    od.DoLogError(e);
                }
            }
        }
    }

    internal static void HookCleanArgs()
    {
        if (!
            ed ist.Contains("            CleanArgs"))
        {
            Ho ke
            d
                L
            ist Add
            (
                "C            eanAr
            g
                s"            )O            n.iTw
            e
            n.CleanAr
                s
                    =
                    anArgs;
        }
    }

internal static event Delegates.CleanArgs_BeforeArgs _beforeCleanArgs;
internal static event Delegates.CleanArgs_AfterArgs _afterCleanArgs;

private static System.Collections.Hashtable CleanArgs(On.iTween.orig_CleanArgs orig,
    System.Collections.Hashtable args)
{
    Delegat es.Params_
        leanArgs
    a
        s = n e {
        args args
    }
    ;
    if (_be
    f
    oreCleanArgs != n
    u
        l
    l) {
        fore ah(Delegates.CleanArgs_BeforeA rgs
        t
        o
        Invoke
            in _bef or eC le an Args.
            e
            tInvocati
        n
            Ls t
            ))
        {
            try
            {
                _b e
                f
                    oreCle an Args
                    ?
                    .I
                n
                    @p ar am s);
            }

            ca
                ch(Ex
                    epti
                    n e)
            {
                HKMirrorMod.DoLogError(e);
            }
        }
    }
    r gs
        =
        @p arams.arg s;

    var retV
    a
        l o rig(args);
    if (_afterC ea Args !
        = nu ll )
    {
        for ac h
        (
            Del
                e
        gates.C le anArgs_AfterArgs toInvoke in
        _af te
        r
            Cl anA g
        s
            .GetInvocationList())
        {
            try
            {
                ret
                    al
                        = _a ft er CleanArgs.Invoke(@params, re
                tl );
            }
            catch (
                xcepti
                n

            e)
            {
                HKMirro
                    r
                Mod.DoLogError(e);
            }
        }
    }
    return retVal;
}

internal static void HookGenerateID()
{
    if
        (!HookedLi
    t.Cont
    ins("
    enerateID
    "
        ))
    {
        HookedList.Add("GenerateID");
        On.iTwee
            .GenerateID += GenerateID;
    }
}

internal static event Delegates.GenerateID_BeforeArgs _beforeGenerateID;
internal static event Delegates.GenerateID_AfterArgs _afterGenerateID;

private static string GenerateID(On.iTween.orig_GenerateID orig)
{
    if (_beforeGenerate D ! nul
        )
    {
        for
            ah(D
        e
            lg at es.Gen
            r
        teI D_ Be for e
            rgs
        o
            nvoke
        n _b ef or eGenerate ID.
            e
            Invoca io nList()){
            ty
                _beforeGenerat eID?.Invoke();
        }
        catch (Exce
        ti e)

        {
            HK irror Mo d.D
                L
            og rr or(e);
        }
    }
}

ar etVal = orig();
i(_afterGener at eID !=
                 ull)
{
    f
        ach(Del gat

    s.GenerateID_AfterArgs toInvo
    k
    e in _ af te rGenerateI
    D
        .
        Ge tn oca ti onList())
    {
        tr y
        {
            retVal = _aft er Ge rateI.nvoke(
                r
            etVa );
        }

        c tc h(Ex
        e
            ptio n e)
        {
            H
                Ki ro rM od.D oLogErro
            r
                (e);
        }
    }
}

r
    et u
    rn r et Va l;
}

internal static void HookRetrieveArgs()
{
    i f(!
        Ho okedList.Contai ns "
    etrieve
        A
    rgs"            ))
    Hooked
        Li st.Ad d("Ret            ri            ev
    e
        rgs"
        )

    On.iTw een.Re tr iev
        e
    Ar gs +
        RetrieveArgs;
}
}

internal static event Delegates.RetrieveArgs_BeforeArgs _beforeRetrieveArgs;
internal static event Delegates.RetrieveArgs_AfterArgs _afterRetrieveArgs;

private static void RetrieveArgs(On.iTween.orig_RetrieveArgs orig, iTween self)
{
    Del eg ate
    s
        .Param
        s
    _Retrie e
    Ar g@ aram
        = new()
        {
            e
            l =
            self
        };
    if (_
    b
        eforeRetri
    e
        ve rg s != n ll )
    {
        fore
            ch(De
                egat

        s.Retrie
            v
        eA rg s_
            e
        f
            oreArgs to
            I
        nvoke n _ efore R
            etri ev eArgs.GetI n
        v
            oca
        t
        ionL is t
            ())
        {
            t
            ry
            {
                _
                    b
                efor
                    Re
                riev
                    er gs?.Invoke(@
                arams)
            }

            ca
                ch(Excep
                    t
                    ion e)
            {
                HKMir
                orMod.DoLog
                    Er ror(e);
            }
        }
        s
            lf =
                params.se
        l
            f;
        orig(self);
        if (_after
        Re trieveA
        gs !=
            ull)
        {
            foreach (De
                         l
            egates.Re
                riev
            e
                Ar
            g
                s_Afte
            r
                Args toIn
                oke
            i
                _afte
            r
                Retrie
            v
                e
            rgs.
                Ge tI nvocation
                L
            ist()
            {
                try
                {
                    _after
                        e
                    rie
                        v
                    e
                        sI nvok
                    (
                        pa ra ms);
                }

                c
                    t
                ch(Excepti
                n
                    )
                {
                    H KM ir orM d.o
                    LogError(
                        e
                    );
                }
            }
        }
    }

    internal static void HookGetEasingFunction()
    {
        if (!H
        o
            o
        ke dL ist.o nt ains("            Ge            tEasi
        n
            gF un tion
        "
            ))
        {
            Hoo
                k
            ed Li st.A d(G
                etEasing

            un t
            o
            ");
            On.iTwe
                e
            n.GetEasing
                F
            u
                n
            co n = G et Easi
            g
                unction
                ;
        }
    }

internal static event Delegates.GetEasingFunction_BeforeArgs _beforeGetEasingFunction;
internal static event Delegates.GetEasingFunction_AfterArgs _afterGetEasingFunction;

private static void GetEasingFunction(On.iTween.orig_GetEasingFunction orig, iTween self)

{
    De legate
        .Param _G et EasingFu
    ction
    para
        s = new()


        {
            s el =
            sel
        };
    if
    (
        _b ef oreGet
    E
        asingFu
    n
        ct io n != nul )

    {
        fo
            r
        each(D
        e
            le ga
            t
        es.GetE
            a
        singF ct
        on_ ef
        o
            rg s toInvoke
            in _be
            oreGe
        EasingFun
            c
        tion.GetInvocati
        nList())
        {
            t
            ry
            {
                _befo
                    eGetEa
                ingFu
                ction?.In
                v
                oke(@params);
            }
            catch (Exce
            pt ion e)
            {
                HKMi
                    rorM
                d.DoL
                    o
                gE
                    r
                ror(e)
                    ;
            }
        }
    }
    sel
        = @
    p
    rams.s
        lf;

    or ig sel );
    if (
        _
    afterGetEa in g
        unction

    ull
        )


    fo reac

    Deleg a
    te s.t
        EasingFu cti n
    Af
        erAr
    gs t oInvoke
        i
    n _af te rGet
    E
    asingFunction.G et In
        ocationL
    st
        ))
    {
        try
        {
            _
                a
            fterGetEasingFunc
                ti o
            n.In voke(a rams);
        }

        cat
            c
        h
            (Exce
        p
            ti n e

        {
            HK Mirro
            M
            od.DoLogE
                r
            o(e
        }
    }
}
}

internal static void HookUpdatePercentage()
{
    i
        f(H
            edLi

    st.C ont
    a
        is ("            U
        d
        atePer centag
        ")
        {
            H
            oo ke dList.A
            d
            ("            pda            ePerc            e
            ntage");
            On iT wee
            .Updat eP er
            en
            age += Upda
            t
            ePercentage;
    }
}

internal static event Delegates.UpdatePercentage_BeforeArgs _beforeUpdatePercentage;
internal static event Delegates.UpdatePercentage_AfterArgs _afterUpdatePercentage;

private static void UpdatePercentage(On.iTween.orig_UpdatePercentage orig, iTween self)
{
    elegat
    s.Par
        ms_Update
    P
    ercentage @param
        = new()
        {
            se lf = se
            f
        };
    i
        (_bef
    o
        reUpdatePer
    c
    entage != n
    ll)
    {
        fo
            r
        each(
            D
        elegates.U
            date
        P
            rcenta
        e_Be
            fo re Args toIn
        v
        oke in _befo
            eUp ateP
            r
        ent
            a
        g.Ge tInv
        ct ionLi s
        t())
        {
            try
            {
                _befo e
                pd
                    Per
                ce nt age?.Invo
                e
                        (@params)
                    ;
            }
            catch (Except
                   on

            e)
            {
                KM
                rrorMod.DoLo
                    g
                Error(e);
            }
        }
    }
    sel
        = @p ar ms.s el;
    orig(sel f);


    if (_a
    f
        terUpda
    t
        eP er centa
    e
        != nu l)


    fr e
    ch(Delegat
    e
    s.Update Per
    c
        e
    n
        ta ge Af te rAr s
        to nvoke i
    n
        _af
    te rUpdat
    Per ce n
        ta ge.Ge
        t
    Iv oc ationLis
        ())
    {
        ry
        {
            _afterUpda
                t
            eP er ce
                t
            a
            ge.In vo ke(@p
            a
                rams)
        }

        c
            atc h Exc
        epti n e)
        {
            HKMir
                r
            orM
                o
            d.Do LogEr
            ror(e)
                ;
        }
    }
}


}

internal static void HookCallBack()
{
    if (
        HookedLis
    t
        .Contains("CallBa
    k"))
    {
        Hooked
            Li st.Add("
        allBac
        ");
        O
            .iTween.C
            a
        llBack += CallBa
        k;
    }
}

internal static event Delegates.CallBack_BeforeArgs _beforeCallBack;
internal static event Delegates.CallBack_AfterArgs _afterCallBack;

private static void CallBack(On.iTween.orig_CallBack orig, iTween self, string callbackType)
{
    Delegat
    es.P ar am s_CallBack @pa
        r

    a
        ew()
    {
        s elf = s elf
            , c ll ackTy
        p
            e = callb a
            ck Ty pe
    }

    ;

    i
        f(be oreC

    B
        ak = n ll)
    {
        f oreac(Delegates
            .
            C
            a
            ll Ba ck _B efor
            A
            gs toIn
            v
            ok i
            n_ befo
            r
            eCal
            l
            Ba k.G
            t
            Invocat io nList
        ))

        {
            tr
            y
            {
                _before
                    a
                llBack? I nvoke(@pa ams)
            }

            atch(Ex
            ep
                ion e)
            {
                HK
                    M
                irrorMod.DoLogErr
                    o
                r(e
            }
        }
    }
    se lf = @param.s lf;
    ca
        l
    lbackTy
    p
        e = @para
    s
        .callback T
    p
        e

    o
        ig(self, cl lbackTyp e);

    i
        f
        (_ a

    al lB ack != n
    ll)
    {
        orea
            h(Delegates.Ca
                l

        lB ac k_
            f
        t
            erArgs toI
            n
        vo e in _
            af terCallBack.G t
        In vo ca ionLi t()
            )

        {
            tr y
            {
                _afte Ca ll Ba
                ck.I nv
                o
                ke(@ para
                    m
                s);
            }
            catch
            (E
            ception e)

            K Mr ro rMod.DoL
                gError
            e);
        }
    }
}
}

internal static void HookDispose()
{
    if (!Hoo
    ke dList.Co
        tains(
            Dispo
                e

    "))
    {
        Ho
            o
        kedList.Add("Dispose"
            ;
        On.iTween.Dispo
        se += Dis
        ose;
    }

internal static event Delegates.Dispose_BeforeArgs _beforeDispose;
internal static event Delegates.Dispose_AfterArgs _afterDispose;

private static void Dispose(On.iTween.orig_Dispose orig, iTween self)
{
    De le gates.P a
    ams_Disp
        se
    @p ra ms = new()
    {
        el f se f
    };
    if (_b
    e
        fo rD is pose ! = n ul l)
    {
        foreh(Del e
        g
        ates.D spose_
        B
            ef or eArgs o
        Inv oke in
        b
            e
        spose.GetI nv
        o
        cationList
            (
            )
            )

        {
            tr y
            {
                _bef
                    r
                spose?
                    .Invo
                k@ para
                    m
                s);
            }

            c at
            h
                (E xc ep tion e)
            {
                HK
                    ir
                orMo
                do Lo gError();
            }
        }
    }
    se
    l
        f = @ params.self;
    or ig(s lf);
    i
    (
        af te rDispose != n ul l)
    {
        foa ch(Delegat s
                .
                Di so e_A ft rArgs toInvoke i n _
                a
                fterD sp os e.GetIn
                v
                ot io nList
            )
            )

        {
            try
            {
                _
                    f
                tr D
                sp ose.Invoke
                (
                    @par am s);
            }

            c
                a

            t
                ch(Ex ce pt ion e)

            HKMir
            orMo
                .DoLogError(e)
                ;
        }
    }
}
}

internal static void HookConflictCheck()
{
    if (!Hooke
    d
        Lis
    t
        .Contains("Co            fl            ic
    t
        Check"
        )
        )
    {
        Hoo kedL
        st
            Add "Confli            th            ec            k" );
        On.iT
        een.Co
            flict
        heck += C
        o
            nflictCheck;
    }
}

internal static event Delegates.ConflictCheck_BeforeArgs _beforeConflictCheck;
internal static event Delegates.ConflictCheck_AfterArgs _afterConflictCheck;

private static void ConflictCheck(On.iTween.orig_ConflictCheck orig, iTween self)
{
    Dl g
    t
    es.Par ms_ onflictC
        ec
    @pa
    ra ms = ne w()
    {
        self = s
        e
            lf
    }
    ;
    if (_ beforeConfli
        tCheck !
        n
    ll)
    {
        fo re ach(De le gat
        e
        s.Co nf lictCheck_Befo r
        e
            Ar gs to
        en _ eforeConfl
            ic tC heck.G
            e
        tInvoca ti o
        nL is t())


        t y

        _befo
            eC o
            it Check?.I nv oke
        (
            @p ar ams);

        c a
        t
            c
        h
        (Ex ce pt ion
        )
        HK irr
        or Mod.
            Do LogE
        r
        ro(e)
            ;
    }
}
}
s el f = @params.se
f;
orig
(
);
if (
ter onflic
t
Check != null)
{
    fo rea
    h(Deleg
    te
        .Co nf lictCheck_t erArgs toInvoke i
    n
        _f te rCof lc tCheck.Ge tInvocati
    on List()
        )

    {
        try
        {
            f erCo
            f
                lictCheck
            I
            n
            (
                ams);
        }

        c
            atch(Ex ep
                t
                i
                o
                n)

        Mi rrorMod.
            oLogEr
        or(e
            ;
    }
}
}
}

internal static void HookEnableKinematic()
{
    if (!H ookedList.Co n
    tai ns(
        "EnableKin
    e
        ma ti
        c
    "))            
    {
        H
            o
        oked Li st.A
        d("E            ableKine
        mt ic ")            ;
        On.iTw
        en.Ena
            leKin
        matic +=
            E
        nableKinematic;
    }
}

internal static event Delegates.EnableKinematic_BeforeArgs _beforeEnableKinematic;
internal static event Delegates.EnableKinematic_AfterArgs _afterEnableKinematic;

private static void EnableKinematic(On.iTween.orig_EnableKinematic orig, iTween self)
{
    D legat es.P arams_E
    ab le Kinemati
    c
        @params = new()
        {
            se f = se
        };
    if (_b ee Enab
    l
        eK nematic != u ll )


    {
        f or each(Delegates.Enab e
        Ki emati c_
            B
        eforeAr
            g
        s
            nvoke
        i
            n _b ef oreEn
            b
        lK i
        ematic.GetI
            n
        vocationLi t
        (
            )
            )
        {
            tr y

            _b f
            r
                EnableK
            i
                nema
            ti c?.I
            n
            voke(@ p
                ar am
                )
            ;
        }
        catch (Ex ce
            ti
        n e)

        {
            HKMirro
                M
            od.DoLogE
                r
            ror(e);
        }
    }
}

s elf =
        rams.sel
    ;

rig(se f);
if (_
a
    fter Enab eKinemat
i
    c
        = u ll)
{
    foreach (D elegat
    e
    s.Enab
    le in mati
        c
    _f tr Args t
    I
    nvo ke in _a ft r
        E
    le inematic.Ge
        t
    Invocation
    L

    {
        t ry
        {
            _afte
                Enable
            inem
            tic.Invoke(@p
            a
                ra ms );
        }


        catch (Ex e
            p
        tion e)

        {
            KMirrorMo
            d.Do Lo gError(e);
        }
    }
}

}

internal static void HookDisableKinematic()
{
    i f(!HookedLi
    t.Cont
    ins("
    isableKin
        e
    matic"))
    {
        HookedLis
            .Add("DisableKin
        em atic");

        n.iTwe
        n.Dis
            bleKinema
        t
        ic += DisableKinema
        ic;
    }
}

internal static event Delegates.DisableKinematic_BeforeArgs _beforeDisableKinematic;
internal static event Delegates.DisableKinematic_AfterArgs _afterDisableKinematic;

private static void DisableKinematic(On.iTween.orig_DisableKinematic orig, iTween self)
{
    De e
    g
        ates Params_Dis ab leK
        i
    n
        em at ic @ pa rams = new(
    {
        s
        e
        l
        f = se
        l
        f
    };
    if (
        _b ef oreDi b
        leKin matic !
        = n u
        l)
    {
        forea ch
            (D el

        egates.Di sa
        b
            l
        e
            Ki ne ma ti c_Be
        o
            rgs t oI v
        oke
            in _bef or eDis
            a
        bl eK
        matic.G etInvocat
        oni st())

        {
            t ry
            {
                _b
                    f
                oreDisabl K
                inemati? I nvok e(@pa
                    ams);
            }

            ct h(Except ion e)

            {
                HKMirrorMod.DoLo
                    g
                E
                r(e);
            }
        }
    }
    self = @para
    m
    s.self
        ;

    orig(se
    l
        f) ;
    if (_
    f
        terDisabl
    K
        i
    ic != null

    {
        oreach(D
        e
            l
        e
            ga te s.Di sa bleKinem
            tic_Af
        erAr
        s toInvoke in _aft
            e
        rD is ab
            e
        K
        inematic.G
            e
        tInvoc at io
            n
        List() )
        {
            try
            {
                _a f
                terD is ableK ne mati
                c
                    .In
                    vo e(@par ms);
            }

            c
                atc(E x
                    c
                    eption
                    e)
            {
                HK MirrorMod.
                    oL
                    gErr r();
            }
        }
    }
}

internal static void HookResumeDelay()
{
    if (!HookedList.Contai
    s("ResumeDelay"))
    {
        H
            oo kedList.dd("Re
        umeDe
            ay");
        On.i
        Tween.ResumeDelay += Res
        meDelay;
    }
}

internal static event Delegates.ResumeDelay_BeforeArgs _beforeResumeDelay;
internal static event Delegates.ResumeDelay_AfterArgs _afterResumeDelay;

private static void ResumeDelay(On.iTween.orig_ResumeDelay orig, iTween self)
{
    ele gate s
        Params
    R
        sumeD el ay
    @p ar
    m
        s = new()
        {
            self = s
            lf
        };

    i f
        (_ bf

    or eResum
    D
    elay != n
    u
        ll)
    {
        for ach(Delegates.Re
        ume la
        _B
            foreArg toInvo e in _ e
        f
            oreResum eD elay.GetI
            n
        v
            oc at ionL is t())
        {
            try

            _beforeRe
                s
            u
                meDela
            y
                ?.Invok
            e(@p ar ams);
                catch (xc
            p
                t
                )
            {
                HK Mi rror
                    M
                od.DoLogEr
                    r
                o
                r
                    (e);
            }
        }
    }
    se f
        = @para
    m
    s.se
        lf;
    ori
    (
        elf);
    if
        (_af e
        rR esum De
    ay != null
        )

    {
        for
            ea ch(D el
        ega te s
            .
            esum eD e
            l
        y_Afte
            r
        Ar gs
        t
        oInvoke in _afte rR sume
            el
        y.Ge tI nv oc ationLi(
        ))
        {
            tr
            {
                _a terResumeDelay.I nvoke(@p
                    rams);
            }

            ca
                ch(Exception e)
            {
                H
                    KMirro Mod.DoLo Er o
                r
                    (e)
            }
        }
    }
}

internal static void Hooklinear()
{
    (!Hooke
    L

    ist.Contai s
    (
        ne r

    "))
    {
        Hook
            e
        dList.Add(
            "
        l
            i
        ne ar "
        n.iTween.l
        near +
            lin
        ar;
    }
}

internal static event Delegates.linear_BeforeArgs _beforelinear;
internal static event Delegates.linear_AfterArgs _afterlinear;

private static float linear(On.iTween.orig_linear orig, iTween self, float start, float end, float value)
{
    Deleg
    tes.P
        rams_line
    a
    r @params = new()
    {
        sel
            = self,
        start = st
        ar t
        , end
            = end

        val
        e = value
    };

    i
        f
        (
            _
                before

    l
    inear != null)
    {
        fo
            each

        Delegates.l
            i
        near_Be
            f
        o
            eArg
        s
        toInvoke in

        _befo
            eline
        a
            .GetIn
            ocatio
        nL is t())
        {
            tr
            y

            {
                _beforelinear?.Inv ok(@param
                )
            }

            c
                ac hE xc ept
                o
            e)
            {
                HKMir
                    o
                Mod.Do L
                gError
                    e
            }
        }
    }
    l f
        = @
    a
        ram s.self;
    sta t = @par
    ms
        .star t;
    end = @
    a
        ram s.end;
    v
    a
        lue = @p ar amsa lue;
    var retV l = ori(
        elf start, end, value);

    i
        f(_a ft

    erlinea ! = nul
    l
        )

    {
        f oreh(Delegat es .
        linear_AfterA
            r
        g
            s toIn
            v
        ok e in _
            a
        ft er linea
            e
        tIn vo cation
            i
        s()

        {
            try
            {
                re
                t
                    Val = _af te r
                l
                    i
                n
                er.n vo ke(@pa
                a
                    s, retV
                a
                    l);
            }

            cat h(x
                eption
                e
            )
            {
                HK Mirroo d.DoLog
                    E
                rror(e;
            }
        }
    }
    retu
        rn retVa
        l
}

internal static void Hookclerp()
{
    i(!H
    oo ke dList.C
        n
    tains("cl
    e
        rp"            ))
    {
        Hooked ist.Add "cle
            );
        On.i
            we en clerp += clerp;
    }
}

internal static event Delegates.clerp_BeforeArgs _beforeclerp;
internal static event Delegates.clerp_AfterArgs _afterclerp;

private static float clerp(On.iTween.orig_clerp orig, iTween self, float start, float end, float value)
{
    Delega es Para ms _cl
        erp @p ar ms = new(
    )


    s
        elf = self,
        star = start,
        end =
            e
    nd
        , v
    a
        lue = v lue
}

;
i f(_beforecl
!null)
{
    foreach (Delegat
                 e. cl er p_Before
        rgs to
    nvoke
        in _befor
        e
    clerp.GetInvocationList())
    {
        try
        {
            _
            eforeclerp?.Invoke(@params);
        }

        c
            at ch(Exce
        tion e

        {
            H
            MirrorMod
                .DoLogError(e);
        }
    }
}
self = @params
self;
start = @params.start;
en
    d = @para
s.end;
value = @pa
r
ams.val
    u
e

var retVal = orig(self,
    s
ta
r
    t,
    end,
    value);
if (_afterclerp != nu
l)
{
    oreach(Del
    e
    gates.c
        l
    e
        p_Af
    te rA rgs toInv ok e
        in _afterclerp.GetInvocationLis
        ()
    {
        tr


        etV l = _ afte
            c
        erp.I n
        vo ke
                @
                params,
            re tV al);
    }
    catch (Exceptio n
        HKM
    ir ro rMod.Do
        o
    gError(e)
        ;
}
}
}
ret ur n retVal;
}

internal static void Hookspring()
{
    i(!ookedList.Con tains("spring"))
    {
        H ookedList.Add("
        s
            p
        ri g"            );

        Twee.spring += spring;
    }
}

internal static event Delegates.spring_BeforeArgs _beforespring;
internal static event Delegates.spring_AfterArgs _afterspring;

private static float spring(On.iTween.orig_spring orig, iTween self, float start, float end, float value)
{
    Deleg t
    s.Pa ams_
    pr
        ng @ params = new()
    {
        self = self, start = tart,
        e
        n
        d = end
        , value

        alue
    };
    if (_before pring ! null) {
        forea
            c
        h(D elega
        t
        s.spri
            n
        g_ Be foreA
            g
        s toInvok

        i
            b
        forespring.
            G
            etInvocati
        o
            n
        L
            is t( ))

        try
        {
            be ores
            pr in g?.Invok
                (@para
            s);


            catch (Ex
            c
                ep tn e


            {
                HK MirrorMo
                d
                    .DoLogEr
                    r
                or(e);
            }
        }
    }
    sel = @p ar m
    s
        .se
    l
        f;
    sta rt
        = @p ar
        a
    ms.tar
        t
        ;
    e nd =
        pa
    s.end;

    a lu e = @param
        .value

    var
        etVal = o

    r
        ig(self, start, e
            d, value);

    if
        (_aftersp
    ing !=
        null)
    {
        foreach
            (Delegates.sprin
                _AfterArgs t
            oI nvoke i
        _afte
        spring.GetI
            n
        vocatio
        List()
            )

        {
            try
            {
                r
                    etVal = _af
                ersp
                    r
                ng.Invoke(@
                p
                    arams,
                    r
                e
                    Val
                    )
            }

            ca
                c
            h(E xception
            e
                )
            {
                HKMirror
                od.DoLoE rr r(e
                    )
                    ;
            }
        }
    }

    e
        urne tV l
}

internal static void HookeaseInQuad()
{
    f
        (!Hooked
    Li st.Contains("            easeInQ
    ad ))
    {
        Ho
            ke
        List.Add(eas
        e
            InQuad")            ;
        On.iTween
            .
            ea sI nQ uad += easeInQua;
    }
}

internal static event Delegates.easeInQuad_BeforeArgs _beforeeaseInQuad;
internal static event Delegates.easeInQuad_AfterArgs _aftereaseInQuad;

private static float easeInQuad(On.iTween.orig_easeInQuad orig, iTween self, float start, float end,
    float value)
{
    De la te s.P ar ams_ea
        e
    nQuad @param
        s
            = new
            (
            )
            {
                se
                l
                = se lf

                ,
                s ta rt = st
                r
                t
                , en d = e
                d
                e = value
            };
    if (_b fore
        e
    a
        s
    eI nQ ud = null)
    {
        f or ea ch
        (D el egates.e
            seInQu
            d_Be
            oreArgs to
            I
            nv ok e
            n
            _beforeeas
            e
            InQuad.Ge t
            I
            nvoca io nL ist( ))
        {
            try
            {
                _be
                    f
                oree as eInQuad?
                    .
                In vo

                k
                    e(@par
                        a
                        ms);
            }

            ca
                ch(Exc
                    et io n e)
            {
                HK
                    irrorM
                d.DoL
                gError(e)
                    ;
            }
        }
    }
    self = @pa
    ams.self;
    sta
        rt = @para
    s.star
        ;
    end
        = @params
            .end;
    value = @pa
    ams.value;
    v
    ar retVal
        = orig
    self
        start,
        e
    n
        d, val
    u
        e);
    if (_af
    erea
        s
    InQuad != n
    u
        ll)
    {
        fore
            ch(De
                l

        gates.
            e
            aseInQuad_A
        f
            terArgs t
            Invo
        ke i n aftere s
            e
        InQuad.G et Invoc
            tionLis
            (
            )
        {
            ty
            {
                retVa
                    _af ere a
                eInQ
                a
                    .Invo k
                e(@p
                r
                    ams, retVa l);


                c
                    tc(
                        Ex cp

                ion e
                {
                    HKMirror
                        M
                    od.DoLogError(e);
                }
            }
            retur n r
            tV
                l;
        }

        internal static void HookeaseOutQuad()
        {
            if (!HookedList.ontains("                aseOutQ                    ad"))
            {
                Hooke L
                ist.Add("
                a
                    s

                t
                    uad");
                On.iT we en.easeOut
                    Q
                u
                    a
                d += e as eOutQu
                d
            }
        }

internal static event Delegates.easeOutQuad_BeforeArgs _beforeeaseOutQuad;
internal static event Delegates.easeOutQuad_AfterArgs _aftereaseOutQuad;

private static float easeOutQuad(On.iTween.orig_easeOutQuad orig, iTween self, float start, float end,
    float value)

{
    De le ga tes.Para
        s_ease
    utQu
    d @params = n

    e
        w()
    {
        s
            e = self,
            start
                =
                start,
            en
        d
            = e nd
            , v al ue =
            v
        alue
    }

    ;
    if (_be fo r
    eeas eO
    u
        tQua ! =

    null)
    {
        or a
        (Deleg
            ae

        sa se OutQuad_
            eforeA
        gs to
        nvoke in
        _
        beforeeaseOutQuad.Ge
        InvocationList()
            )
        {
            try
            {
                before
                    aseOu
                Quad?.Inv
                o
                ke(@params);
            }

            catc
                (Exception e)

            {
                HKMirr
                rMod.D
                    LogErr
                o
                r(e);
            }
        }
    }


    self = @p
    rams.self
        ;

    s
    t
        art =
            @
            params.start;

    nd =
        params
        .
    end;
    value
        =
        @params.alue
        ;
    va r retVal
        =
        orig(se f, start, en,
            v
    lue
        )
    ;

    i f(_af
        e

    easeO u
    tQ ua
        != n ul l)
    {
        foreach
            (D
                le ga te s
            .e as eOutQua
        _
        AfterArgs

        toInvoke in _afterea
            eO ut Quad.G
            nv
        cationList())
        {
            tr
            {
                retVal = af tere s
                eO ut Quad.I nvok e(@params, retV al);
            }

            c h(Exce
                p
                ti on e)
            {
                H
                    KMi rorMo.
                    o
                    Lg E
                ror(e);
            }
        }
    }
    return r
    e
        t
    V
        al;
}

internal static void HookeaseInOutQuad()
{
    f(!
        H
    ooke
        d
    Li st
    C
    ontains("easeIn
    ut Q
    ad")
        )
    {
        HookedLs t.Add("e            aseIn
        O
            utQuad");
        On.iTween
            easeInOu
        Qua += ea se InOutQuad;
    }
}

internal static event Delegates.easeInOutQuad_BeforeArgs _beforeeaseInOutQuad;
internal static event Delegates.easeInOutQuad_AfterArgs _aftereaseInOutQuad;

private static float easeInOutQuad(On.iTween.orig_easeInOutQuad orig, iTween self, float start, float end,
    float value)
{
    Deleg t
    es.Params_
        as
        InOutQuad
    @a ra ms = new()

    {
        sel
            = se
        f
        , start
            = start,
        end = end,
        value = value
    };

    if (_befor
    easeIn
    utQua
        != null)


    {
        foreach (Delegates
                     easeInOutQuad_Be
        fo reArgs
        oInvok
            in _b
            foreeaseIn
        O
            ut
        Q
        uad.Ge
            t
        InvocationList(
        )
        {
            tr y
            {
                b
                eforeeaseInOutQua
                    ?.nvok(@ pa rams;


                ca tc h(Exc
                e
                    ptio e
                {
                    HKMirror od.
                        og rror(
                }
            }
            self = @para
            ms se f;
            start = @pa
            r
                a
            ms.s tar
                nd = @params.end;


            v
                alue =
                    @
            pa ra ms.va
            u
                e;
            va ret
            a
                l

            o
                ig(self, st
                    a

            rt e nd, val
            u
                e
                )
            ;
            f(_a ft ere
            seInOu
                Q
            ad !
                =
                nu ll


            {
                foreach (Deleg
                             te
                ase
                    In Ou tQ ad_
                    f
                terArgs t
                o
                Invoke in _afterease
                    nOutQua d.G
                    tI
                vocationList())
                {
                    tr y
                    {
                        retVal = _aft
                        e
                            r
                        ea se InOu tQ uad.In
                            o
                        e(@params, retVa
                        l
                            );
                    }
                    c
                        at ch(Exc
                    e
                        pi o e)
                    {
                        H
                            KMi ro rMod.
                            o
                            Lg Er or(e);
                    }
                }
            }
            return r et V
            a
                l
                ;
        }

        internal static void HookeaseInCubic()
        {
            if
            !HookedList.Cont
            a
                in s("e
            s
                eI nCubic"))

            {
                HookedL
                    i
                st Add("eas            eI            nCu
                bic"            );            
                On.iTw een.
                    e
                    ase
                I
                nCubic += e seI
                nC u
                    ;
            }
        }

internal static event Delegates.easeInCubic_BeforeArgs _beforeeaseInCubic;
internal static event Delegates.easeInCubic_AfterArgs _aftereaseInCubic;

private static float easeInCubic(On.iTween.orig_easeInCubic orig, iTween self, float start, float end,
    float value)
{
    Del
        eg at es.Params _e a
        seInCu bi c @params = ne
        ()
    {
        s f
            = s
        e
            l, s ar t
                = tart,
            e nd
            =
            e nd
            , value = va lue
    }
    ;
    if
        (_be
    fo re easeI Cu
    i
        c !null

    {
        foreac h(Delega es .
        e aseInCu
        ic_ Be foreA
        gs
        toInvoke in _beforee
            a
        seInCu bi c.Ge tI nvocatio n
        L
            is t) )
        {
            t ry
            {
                _ befor eas InCub ic?.I
                n
                    v
                oke(@p
                a
                    ra s);
            }


            ch(E ce
            t
                ion e)
            {
                H
                    M
                ir o
                Mod.Do ogErr
                o
                r(e);
            }
        }
    }


    s
        e
    l
        @p ar am.s
    l
        start
            =
            @p ar a
    ms.sta
    r
        t;
    e
        n
    d @
    a
    rams.en d;
    value = @p
    ra
    val
        ue;
    a r retVa
        = o ri g(self
        ,
        st rt, e nd, v al ue);

    if (_aft
    rease nCui c null)
    {
        foreac h(D leg
        at es.easeInCubic _A fte
            r
        A
            rg s toIn ok e in _a te ease In Cu i
        c
            .GetIn oc tionLi
            s
        t) )
        {
            ry
            {
                r
                    etVal = a
                ra se nCubic.Invo
                    ke @p arams, r
                et Va l
                    );
            }
            c at ch(Except
            on e)
            {
                HK
                irrorMod.DoLogError(e
                    )
                    ;
            }
        }


        r
            et ur n retVal;
    }

    internal static void HookeaseOutCubic()
    {
        if (!
            H
        ook
            e
        dLi st.Contains("e            se            utCu            bi
        c
        "))
        {
            H o
            o
            kedList.Ad d("e            as            eOutC
            bi
            ");
            On.i we n.easeOu tb ic + = easeOu
            Cubic;
        }
    }

internal static event Delegates.easeOutCubic_BeforeArgs _beforeeaseOutCubic;
internal static event Delegates.easeOutCubic_AfterArgs _aftereaseOutCubic;

private static float easeOutCubic(On.iTween.orig_easeOutCubic orig, iTween self, float start, float end,
    float value)
{
    elega
        .Para s
    e
        seO
    u
        t
    c @par
    m
    new()

        {
            e lf = self
            , s ta rt = sta rt
            , en
                =
                end,
            v au e = v alue
        }
        ;
    if (_be fo re
    e
        aseOu tC ubic != nu l)
    {
        fo ra ch
            Delegates ea
            eOut ubic_B foreArgs t oI nvok
        e
            in _beforee seOut
        C
            u
        bi c.Ge tIn vo cation ist())

        try
        {
            _befo
                r
            e
                eas eO utC
            u
            bic?.In
            v
                ok e(param
                )
                ;
        }

        c atch
        E
            x
        t
            on e)
        {
            HK i
            r
                rorM od.Do Lo gEr
                r
            o
            r(e;
        }
    }
}

sel =
    @p ar ms.s
    e
lf
    s
tr t =
    @
para
    m
s.st
    rt;
end = @params.e d;
valu
    para mv alue;

etVal = or

i
    g(se lf, start, end, val e);

i f
_aftereas Ou t
ubic != nu ll )
{
    foreach (
        D
            elegat s.easeOut ubi _
        Af te rArg s to In voke in _afterease OutC u
        b
    ic.Get
        I
    nvocati
        o
    nL is t())
    {
        t y

        {
            re tV al =
                _
            a
                r
            aseOutCu ic.I
                n
            voke(@p ra m
            s
                ,r et Va l) ;
        }
        catch
        Except
            on e

        {
            HKMirrorMod.DoLo
                g
            Er rr(e)
        }
    }
    ret ur
    n
    retV al;
}

internal static void HookeaseInOutCubic()
{
    i
    f(!HookedLis t.Con
    tain s(
        "
    easeIn u
    tCubic"))

    Ho ked
        is 
        .Add("e            aseInOutCub
    i"            );            
    O n.iTween
        easeIn
    utCub
    c += ease
    I
        nOutCubic;
}
}

internal static event Delegates.easeInOutCubic_BeforeArgs _beforeeaseInOutCubic;
internal static event Delegates.easeInOutCubic_AfterArgs _aftereaseInOutCubic;

private static float easeInOutCubic(On.iTween.orig_easeInOutCubic orig, iTween self, float start, float end,
    float value)
{
    De g
    ates.Pa rams_easeInO ut Cubic
    pa
        am =
            n e)
    {
        s elf
        s el f, star
        t
            = start
            , end = e d
            , v alue = v
        lue
    }
    ;
    if
    _b
        foreea eInOutCub c = nu ll )


    {
        forea h(Delega t
                e
                s
                .e sI nOut Cu bic_Befo eAr s to Invoke
                i
                n
                _bef re e
                aseInOu
                tC ui c.GetIn
                o
                cationL st
            )
            )

        {
            {
                beforee
                    a
                seInO ut Cubic
                    ?
                    .I
                nv ok e(@p aram);
            }
            catch

            (Exc
            ep tion

            e)

            {
                M ir
                o
                    rMo d.DoLogErr or(e);
            }
        }
    }
    se f
    @pa
    r
        elf;
    st
    r
        t = @par am s
        .start;
    end = @ pa rams.end;
    value = @param
        .v al e;
    v ar retVal = orig(self
        ,
        st ar t, end, value)

    i
        f(a ter

    ea eInOutCubic ! = null) {
        fo re

        a
            ch(De
                l

        ega te s.ea
            s
        eI nu tC ubic
        A
            fter Args t
        I
        no k
            in _a ft erea se I
            n
        OutCubic.Ge
            t
        I
            nv oa ti on Lt() )
        {
            try


            retVa
                = _
            ftereaseInOu
                t
            Cu bi c.
                nv ke(@params, r
                    etVal);
        }

        catch (x
        cept io n e)
        {
            HKM
                i
            rro
                r
            Mo.DoLogE ror(e)
        }
    }
}

r
    et ur n retV
    l;
}

internal static void HookeaseInQuart()
{
    if (
        !
        HookedList.Contains
    "easeInQuart"))

    {
        HookedL
        st.Add
        "ease
        nQuart");


        On.iTween.easeInQu
        rt += easeInQu
        ar t;
    }
}

internal static event Delegates.easeInQuart_BeforeArgs _beforeeaseInQuart;
internal static event Delegates.easeInQuart_AfterArgs _aftereaseInQuart;

private static float easeInQuart(On.iTween.orig_easeInQuart orig, iTween self, float start, float end,
    float value)
{
    De l
    gates.Pa rams_ ea seIn
    Q
        ua t @params = new()

    {
        el f = s el f
        , star = start,
        end =
            end,
        v
        a
        lu e = valu
    };
    f(bef
    r
        ea s
        InQ ua rt != nu
    l
        l)
    {
        fore ac h
        (
            D
        el eg at es.eas
            I
        Quart_B
            e
        fore
            Ar gs to Invoke i n _
        e
            oreeas In Q
        uart.GetIn oc at io Li
            s
        t())


        try
        {
            _befo
                r
            ea se I
                a

            rtn voke(@p
                ra
                s)
        }

        c ac(Exc p
            i
            on e)
        {
            H
                KMi rr orMod.D Lo gE rror(e
            ;
        }
    }
}

se
    f
        @ params.self;

s
    tart = @params.sta
r
    t;
n d = @pa ra ms.end;
value =
    @par am s.
    v
    alue;
va r

re tV al = o i
    g(elf, st
        r

t
    n, value);

i
    f
    (_a terease

n
    Q
ua rt != n ul l)
{
    for
        ach(D
    lega
    es.easeInQu
        a
    rt _A ft
        r
    A
        rgs toInvok
    e
        in _afte
        re seInQu r
    t.Ge tI nvo ca tionLis
    t
        ())


    {
        try
        {
            re Va l
                =
                _afte
            r
                easeIn Qu
                rt
            Invo e(@
            p
                , retVal);
        }

        catc
            (Exc
        ption e)


        {
            HKMirrorMod.DoLo
            Error(e);
        }
    }
}
return r
tVal;
}

internal static void HookeaseOutQuart()
{
    if (
        !H ookedLi

    t.Cont
        ins(
            easeOut
                Q

    ua
        r
    t"))
    {
        HookedList.A
        d("e
        a
            eOutQu
        rt")
            ;
        On.iTween.e
            a
        seO tQuart += eas OutQuar
            ;
    }
}

internal static event Delegates.easeOutQuart_BeforeArgs _beforeeaseOutQuart;
internal static event Delegates.easeOutQuart_AfterArgs _aftereaseOutQuart;

private static float easeOutQuart(On.iTween.orig_easeOutQuart orig, iTween self, float start, float end,
    float value)
{
    D
        eleg
    at es.P
        a
    rams
        _
    ea se tQ art @params
        n
    w()

    {
        e lf = se
        f
            , start = s tart
            , end = end

        value =
            va
        ue
    }
    ;
    if (_befo
    r
        eeaseO ut Quart != nul )
    {
        fo reac h(D le gate.ease
        O
            utQuart _B eforeAr
        g
            s tI nv ok e in
        _
            beforeeas
        O
            u
        t.GetI vocat o
        nList())
        {
            t
                ry

            _b ef or ea seOutQua
            t?.Inv
            ke(@
            arams);
        }
        catch (
            E
        xc ep ti
            n

        e)
        {
            HK Mirr or M
            od.DoLog
                E
            rror(e);
        }
    }
}

s
el f = @p arams.se f;
tar
    t
        = @params.star
t
    ;
en
    d
        = par
a
ms.nd;
va ue =
    @p
ra ms.value;
var
    e tV al = orig(
    elf, s
art,
nd, value
    )
;
if (_aftereaseOutQuart
    != null)
{
    foreach (
        De legates.
    aseOut
        uart_
    fterArgs
    t
    oInvoke in _aftereaseOu
    Quart.GetInvocation
        Li st())
    {
        try
        {
            etVa
                = _afterease
            O
                ut
            Q
            uart.I
                n
            voke(@params, retV
            l);
        }
        catch

        Exce
        pt in e)
        {
            HK Mi
            r
            rorMod.DoLogError e);
        }
    }
    ret
        r
    re
        t
    V
}

internal static void HookeaseInOutQuart()
{
    i(!oo
    ke dL ist.Con
        a
    ins("eas            eI            n
    O
        utQuart"))
    {
        HookedL is t.Ad
            ("e            I
            Ou
            Quart");
            On.i Tween.ea
            s
            eI nO utQuart += easeI
            n
            O
            u
            rt;
    }
}

internal static event Delegates.easeInOutQuart_BeforeArgs _beforeeaseInOutQuart;
internal static event Delegates.easeInOutQuart_AfterArgs _aftereaseInOutQuart;

private static float easeInOutQuart(On.iTween.orig_easeInOutQuart orig, iTween self, float start, float end,
    float value)
{
    Del eg ates.Para s_ easeInOutQ ar tp am s =
        ne w)
    {
        se
            f
                = sel f
            , st a
        t
            rt,
            end
                = nd,
            va ue
            = al ue
    }
    ;
    if (_befor
    easeIn
        utQu
    rt != null)
    {
        forea
            c
        h(e le
        a
            t
        es.easeInO
            u
        tQua rt_Be
        fo reArgs toIn vo ke in _ befo re ea se InOutQua
        r
        t.e
            t
        InvocationLi st())

        {
            t ry


            {
                _b fo
                r
                    eeas InOutQ art?.nvk e(@params);
            }

            ca
                th(Ex ception
                )
            {
                H
                    Mirro
                Mod.DoLog
                    E
                rror(e);
            }
        }
    }
    self = @par
    ms.self;
    start = @para
    ms.start;

    nd = @
    arams
        end;
    valu
        e
            = @params.value;
    var ret
        al = orig(self, start
            , end, va
    ue);
    i
        (_a
    tereaseInOutQua
        r
    t
        !
        = null
        )

    {
        foreach (Delegate
                     .eas
                     e
        nOutQu
            rt_A
        ft er Args toIn
        v
        oke in _a tereaseInOutQ ua t.GetIn
            o
        ati
            o
        ni st ))
        {
            t
            y
            {
                r
                et Va
                    = _afterease In OutQuart.I
                    vo
                e(@p
                am s retVal)
            }
            catch (
                E
            xceptio n e)
            {
                HKM ir rorMod.D oL or ror(e)
            }
        }
        return et Val;
    }

    internal static void HookeaseInQuint()
    {
        if !H okedList.C ontai ns(
            "
        e
            as eI nQui
            n
        t")            )
        {
            H ok ed Li st.Ad
            (
                "ease            nQu            n
            "
                )
            n
            iTween.e se In
                Q
            uint += e ase
                I
            n
                Q
            ui nt;
        }
    }

internal static event Delegates.easeInQuint_BeforeArgs _beforeeaseInQuint;
internal static event Delegates.easeInQuint_AfterArgs _aftereaseInQuint;

private static float easeInQuint(On.iTween.orig_easeInQuint orig, iTween self, float start, float end,
    float value)
{
    Delegat e
    s
        .Params_ea
        s
    e
    I
    nu in t@ pr am s = new(

    {
        se
        f =
        elf
        , start = start,
        e nd =
        e
        n
        d
        , value =
            value
    };

    i
        f _beforeeas eI nQuin
    t != n ull)
    {
        for a
            ch
            (
                Delegates.ea seInQu
        intB f
        o
            reArg
        t
        oInv ke in _bef or ee
            se
        nQuint.GetInvo at
            in Li st())
        {
            tr

            {
                _be
                    oreea
                eInQuint?
                    .Invoke(@params);
            }
            catch (E
            ception e)
            {
                HKMirrorM
                od.DoLogEr
                or(e);
            }
        }
    }
    self = @p
    a
    rams.self;
    start = @params
    start;
    end = @params.e
    nd;
    value
        = @par
    ms.v
        lue;
    var retVal
        =
        o

    r
        ig(sel
                f
            , start, end, value);

    if (
        _
    fterea
        eInQ
    ui nt != n ul l)
    {
        foreach (Delegat es .e aseInQ
        int_Aft
            r
        rgs
            tI nv ok e in
        a
            ter ea se I
            nQ ui
        t.GetInvocation List())
        {
            t
            y
            {
                re V
                    al = _aftera s
                eInQuint.
                    I
                nvoke(@ pa ra ms, retVal);

                c tch
                    (Excep tio e)

                {
                    HKMirror Mo d.DoL gErro
                    r
                        (e);
                }
            }
        }
        eturn
            r
        eV al;
    }

    internal static void HookeaseOutQuint()
    {
        if
        (
            !H oo kedLi
        t
            .Contains
        "
        e
            Ou Quint"))
        {
            H
                ooked Li s.A
                d
            d
            (
                "e            as            eO            ut            Quin
            "
                ;
            On.i Tw e
                e
            n.eas eu tQui
                n
            t + = e
            a
                se Ou
                Q
            ui t;
        }
    }

internal static event Delegates.easeOutQuint_BeforeArgs _beforeeaseOutQuint;
internal static event Delegates.easeOutQuint_AfterArgs _aftereaseOutQuint;

private static float easeOutQuint(On.iTween.orig_easeOutQuint orig, iTween self, float start, float end,
    float value)
{
    Deleg
    tes.
        arams_easeOutQu
        i
    nt @ pa
        a
    m
        s = new()


        {
            self
            s
            elf
            , start =
                st ar t
            , end = e
            nd,
            v
            alue = valu
        }
        ;
    if (
        _b ef oreea
    s
        eOutQuint !
        n
    ll)

    foreac
        h(De le

    gates.ea
        eOutQu
    nt_Be
        oreArgs t
    o
    Invoke in _beforeeaseO
    tQuint.GetInvocati
        on List())


    try
    {
        _befo
            eeaseOutQ
        u
        int?.Invoke(@params);
    }
    catch (Exceptio
           n

    e)
    {
        H
            Mirror
        od.D
        LogError(e)
            ;
    }
}
}
se
l
f = @params.self
sta
r
= @pa
ams.
st at
end = @p rams.en;
alue = @pr ams.v lu e
ar
r
eV al = o
i
(s lf, s
ta rt e
nd, value);
i ( _aft
re
se Ou tQ
ui nt != nul
)

{
    foreac
        h
        (D legates.

    ase utQuint_
    fterArgs
        to
    nvok e in _aftereaseO
        u
    tQuin t.Ge tInvocation
    L
        i
    st() )
    {
        tr y
        {
            retVal = _ afterea se O
                u
            tQuint.
                I
            nvoke(@
            p
            ar ms, r
            t
                Val)
        }

        E x
        eption e)
        {
            H
                KMirrorM od.D oL o
                g
            E
                rr or(e);
        }
    }


    eturn re t
    V
        al;
}

internal static void HookeaseInOutQuint()
{
    if (!Ho ke dLis t.Co
        t
    ains("ease            In            utQuint")) {
        Hooke dL ist.A d("easeIn
        ut
        uint");
        On.iT een e
            a
        seInOutQuint += e
            as e
        In Ou tQui n;
    }
}

internal static event Delegates.easeInOutQuint_BeforeArgs _beforeeaseInOutQuint;
internal static event Delegates.easeInOutQuint_AfterArgs _aftereaseInOutQuint;

private static float easeInOutQuint(On.iTween.orig_easeInOutQuint orig, iTween self, float start, float end,
    float value)
{
    D
    legates.Param
        s_ easeInOu
    Quint
        param
            = new()


            {
                self = self,
                tart = start, end =
                    nd,
                v
                lue =
                value
            }
        ;

    i
        f(_be
            f

    oreeaseInOu
        Quin
    t
        != nul
        )
    {
        f
            reach
            (Dele
                g

        tes.e
            seI
        n
            utQui
        t_Bef
            or eA rgs to nvo
        k
            e n _beforee as e
        nOutQui
            t
        Get
            I
        no ca tion s
        ())
        {
            ry
            {
                b
                for eeas e
                nOut u
                nt? I oke(p
                r
                    ms);
            }

            ca tc h Ex ce ption e )
            {
                HK
                    ir
                orMo
                d.Do Log rror
            }
        }
    }
    se
    l
        f = @params.se lf
        star t @params
        st
        ;
    end @para ms e
        nd;
    va ue = @p arams
        .v
    al ue;
    v a re tVal = orig(s
    e
    l
        f, sta
    r
        t, end, v
    e;

    i f(
        a
            ftereas

    In t
    Qi nt != nul )

    fo
        r
    each(Delega e.ea se In OutQu n
    _A te rArg
        s
    toI
        nv oke i

    after ase I
        nOutQ
    ui nt.
        e
        In oc atio
    n
        Lis
    t())
    {
        tr
            retVal
                = _af
        te rea
        eInOut
            u
        nt.I
            nv ke(
            @
        arams
            ,
        ret
            V
        l);
    }


    ct ch
    E
        xception e)
    {
        KMir ro ro d.DoLogEr
            o
        r(e);
    }
}


}
return retVa l;
}

internal static void HookeaseInSine()
{
    if (Ho o
        k
    e
    st.Con ta ins("            eas
    I
        Sine"))            
    {
        H oo ked
            L
        ist.Ad
        d
            ("ea            eI            S
        i
            e");
        On.
            i
            Te en.ease
            n
        Sin += eae In Sn e
    }
}

internal static event Delegates.easeInSine_BeforeArgs _beforeeaseInSine;
internal static event Delegates.easeInSine_AfterArgs _aftereaseInSine;

private static float easeInSine(On.iTween.orig_easeInSine orig, iTween self, float start, float end,
    float value)
{
    Deleg
    tes.Param
        s
    _easeInSine @pa
        ams = new()

        {
            self
            self
            star
            = st
            a
            rt


            , end
                =
                end,
            val
            e =
            v
            lue
        };
    if (
        _
    efore
        aseIn
    S
    ne !=
        nul
    l

    {
        fo
            each
            (D el

        egates.ea
            s
        eInSine_Be for
            Args to
        n
            oke
        i n
        eo re eas
            I
        Sine.G
            tInvo
        a
            ionLis t) )
        {
            ty
            {
                _b e
                or ee ase
                    n
                ine?.I n
                    vo ke
                    @
                    params);
            }

            at
                h(E
                    xc ep tion e)


            {
                HKMirr or
                M
                od.DoLogError e);
            }
        }
    }
    self =
        params. se lf;
    s
    t
        art = @params.sta
    r
        t
        ;
    en d = @p ar ms.end;
    va
        l
    u
        e = @p
    a
    rams.va
    l
        ue;
    va r re
    V
        al = rig(
            e
    s
        ar, end, val ue );
    if (_af
    t
        e
    r
        ea se In Si ne !
        ull)
    {
        f reac
        h(Dele
        a
        es.ease
            I
        nSine
            _A fte r
        r
            s toIn o
        k
            e i
            n after
        a
        eInS in e.G
            e
        tInv oc a
            nLi
        t())
        {
            t
            y
            {
                r
                etVa
                    l = _ aft er e
                a
                eInS in .Invo
                    k
                e(@p
                r
                    ams, retVal
                    ;


                ca c
                h(c ption
                )

                {
                    HK Mirro
                    r
                        Mo d.Do ogErr or(e);
                }
            }
            retu n
                etVal;
        }

        internal static void HookeaseOutSine()
        {
            if (!H ok dLi
            s
            t.C ontai s("easeO
            u
                Sine")
                )

            {
                H ooked
                i
                st.Add("e
                ine"            );
                On.iT
                    w
                een ea seOutS
                    i
                n
                e + ea se Ou tSine;
            }
        }

internal static event Delegates.easeOutSine_BeforeArgs _beforeeaseOutSine;
internal static event Delegates.easeOutSine_AfterArgs _aftereaseOutSine;

private static float easeOutSine(On.iTween.orig_easeOutSine orig, iTween self, float start, float end,
    float value)
{
    Delegat
    s.Para
        s_eas
    OutSin
        e
            @
    p
        arams
            =
            new()
            {
                s
                lf =
                elf
                ,
                tart

                star

                , en
                d
                = end
                , v
                a
                ue =
                alue
            };
    i f(_befo e
    e
        aseOutSi e ! n
        ll)
    {
        f
            r
        ach
        (e le gate
            .aseOS i
        e_Bef
            r
        Args t on vo ke
            n
        _bef o
        eease
        e.Get I
        nv oc
        t
        ionList())
        {
            ry
            {
                _b
                    ef oe easeOu tS i
                e
                    ?.Invok e(p
                a
                    rams) ;
            }
            catch (E ce p
            ion e)
            KM rr rMod.DoLog
                Er ro r(e);
        }
    }
}

s el f = @
p
    a
ra ms.sel f
    tart = @ param
s
    .start;
e
    nd = @ a
    r
a
    nd;
v
l
    ue = @param
        .ar retVal = o r
    ig(self, s ta

r
    t,
    e n va lu e);

f
    (_after ea s
eOu tS i
ne != nl l

{
    fo re ac
        h
        (Del eg at es.
            a
            utS n
            e
            _Af
            tr Args
            o
            nvoke i
            _afte
            seO
            ine.G
            t
            nv oc at
            i
            onLi
            s
            ())
    {
        ry {
            etVal
                = _af e
                reaseOutS ne.
                nvo e(@p
                    ar

            ms , retVa
        }
        catch (
            E
        xcepti n e)
        {
            HK
                ir rorMod.oL Error();
        }
    }
}
ret ur n retVal
}

internal static void HookeaseInOutSine()
{
    i
    f(!Ho
    o
        ke dL ist.C
        ot ai ns "eas            e
    ut Sin ")            )
    {
        HookedLit.A d("
        aseInOutS ne
        "
            );
        On.iTw
            e
        en.e a
        se In Ot in +=
        easeIn
        Si ne;
    }
}

internal static event Delegates.easeInOutSine_BeforeArgs _beforeeaseInOutSine;
internal static event Delegates.easeInOutSine_AfterArgs _aftereaseInOutSine;

private static float easeInOutSine(On.iTween.orig_easeInOutSine orig, iTween self, float start, float end,
    float value)
{
    D
    legates.Params_e
        as eInOutS
    ne @pa
        ams =
            new()
            {
                s
                e
                lf
                = self


                , start = start, en
                d
                = end
                val
                u
                = va
                ue
            };


    f(_b
    for
        e
            aseIn
    utSin
        e !n ull)
    {
        fo
            r
        each(Dele at s.eas
        InOutSi ne B
            fore Ar g to Inv ok i
        _beo re aseIn
            u
        Sin.G et I
            voc
        t
            on i)


        ry
        {
            _ b
            ef or
            e
                aseInOut Si ne?.Invoke(
                pa
            ams)
            ;

            c atch(Ec e
                ption e)


            {
                KMirror od.Do ogError
                e);
            }
        }
    }

    f
    @params.sel f;
    start
        = @p ar ams.start;
    en
        d
            = @p aram s.end;
    v alue = @param
    s.va lue;
    va r

    retVa l =
        o
    ri g(elf s
    a
        rt, end, v
    l
        u) ;
    if _aftere s
    e
        InOu Sine !
        =
        nu l)
    {
        f or each
        (
            eleg tes
                .ease
        In OutS in
        _
            fterAr s

        toInv ke in a
            tereaseI nO utS
            in e.Get
            n
        ocat onL
        i
        st())

        {
            t ry
            {
                retVa
                    _aft rease OutSin e.nv ok e
                (
                    para ms,
                    re tV
                l
                    );
            } catch (xcepti
            n
                )
            {
                H
                    KM ir rorMo.D
                    L
                ogE rr r(e);
            }
        }
    }
    return re tV al;
}

internal static void HookeaseInExpo()
{
    if (HookedLi t.on tn s("            ea            seInE

    {
        Hooked ist.A d(e
            aseInE

        x
            p
        o")            
        O n.i
            T
        een.ea
            s
        e
        po += 
            as eInExpo;
    }
}

internal static event Delegates.easeInExpo_BeforeArgs _beforeeaseInExpo;
internal static event Delegates.easeInExpo_AfterArgs _aftereaseInExpo;

private static float easeInExpo(On.iTween.orig_easeInExpo orig, iTween self, float start, float end,
    float value)
{
    Delegates.Params
    easeInExpo @params
        = new()


    self
        self,
        start =
            start,
        end = end,
        v
    lue = value
}

;
if
    (_before
aseInE
po !=
    null)
{
    for
        e
            ac
    h
        (Dele
    g
    ates.easeInExpo_
        efor
    e
        rgs to
    nvok
    e
        in _b
        foree
    a
        eInEx
    o.G
        e
    Invoc
        tionL
    it() )
    {
        try
        {
            _befo eeaseIn xpo?.n
            oke(@pa
            a
                s) ;
        }


        ct ch(E xce
        t
            on e
        {
            HKMiro rM d.DoLo g
            rro r()
        }
    }


    self
        = @ pa rams.s
    el f;
    s
        tart = @params.s tart;
    en
        @pa
    ra ms.end;
    a
        lue = @par
    a
    ms.value;
    var retVal o
    ig(elf,
        tat, end, value);
    if (
        _
    aft reaseInExpo !=
        nu ll )
    {
        fo ra h(Dele ates.e seIn
        E
            x
        po_A ft er
            A
        rgs toI
        n
        vo ke in _ t
        ereaseInE
            p
        o
            t
        nvocati nLis
        t
            ()
        {
            try
            {
                r
                    e
                t
                V
                    al = _ ae reas
                I
                Exp.Inv
                    o
                ke(@p aa ms, ret
                a) ;
            }

            catc
                h
                (Exc
                    et on
                    e
                    HKMirr or Mod
                    .D oLogEr or e);
        }
    }
}
retur n ret
    al;
}

internal static void HookeaseOutExpo()
{
    f
        (!H ok dList.C onta
    "e
    seOu
        tE xp o"))
    {
        H o
        ke List.Add(
            "easeOutExp            ");
        On.iTwe
            easeOutE
        po
            += easeOu Expo;
    }
}

internal static event Delegates.easeOutExpo_BeforeArgs _beforeeaseOutExpo;
internal static event Delegates.easeOutExpo_AfterArgs _aftereaseOutExpo;

private static float easeOutExpo(On.iTween.orig_easeOutExpo orig, iTween self, float start, float end,
    float value)
{
    Delegat
        e
    s.P
        a
    rams_eas eO utExpo
        @pa ra
    m
        s = new )
    {
        self = se
        f
            start = star
        t en d = end,
            alue =
                value
    }
    ;
    if (_b
    e
    foreeaseOutExpo != null)
    {
        foreach (Delegates
                     .e aseOutEx
        o_Befo
            eArgs
        toInvoke
            i
        n _beforeeaseOutExpo.Ge
        InvocationList())
        {
            t ry
            {
                _b
                    foreea
                eOutE
                po?.Invoke(@p
                a
                    ra
                m
                    s);
            }

            c
                atch(Exception e)

            {
                H
                    K
                irrorM
                d.Do
                    L
                gErro
                    (e);
            }
        }
    }
    s
        lf
            =
            @para
    s.sel
        f;
    t art = @p ar
        a
    ms.start
        en = @param.end;
    va
        u
            =
            @
    p
    ms.val;
    var re t
        al =
            g
    self, s
    art
        nd, va ue);

    f
        (_afte r
    es eO
    t
    Expo != null)
    {
        foreac(D
        lega
        t.ea seOutEx
        o
        _AfterArgs toInvoke in _afte reaseOut
        o.GetIn ca
        ion ist())
        {
            tr y
            {
                r et Val
                    = _ af tereaseOutExpo
                    .I vo k(@par as r etVal);
            }
            catch (E c
                ep ion e
                )

            {
                HKM
                    i
                r
                d.DoL
                    g
                Erro r(e);
            }
        }


        r
        turn retVal
            ;
    }

    internal static void HookeaseInOutExpo()
    {
        i
            !Hoo ke dL is
            t
            .Coni ns
        "
        aseInOu
            t
        Exp
            o)
        {
            Hoo
                e
            st.Add("
            e
                ase nO u
            tE xpo
                );
            O.i Te en ea
            s
                eInO
            u
                Exp o +=
                ase
            I
                OutE xp o;
        }
    }

internal static event Delegates.easeInOutExpo_BeforeArgs _beforeeaseInOutExpo;
internal static event Delegates.easeInOutExpo_AfterArgs _aftereaseInOutExpo;

private static float easeInOutExpo(On.iTween.orig_easeInOutExpo orig, iTween self, float start, float end,
    float value)

{
    Delega
    es.Pa ra ms _e as eInOutEx
    o @par
        ms =
            new()
            {
                self =
                    se lf
                ,
                a
                rt = start


                , end = en
                d

                , al ue = val
                ue
                ;
                f (_befor ee as
                e
                InO
                u
                tExpo != n ull
                )
                {
                fo
                r
                each (
                De le gate s.easeIn
                ut
                xpo_Be forA rt oI nv oke in _
                eforee
                seInO
                tExpo.Get
                I
                nvocationList())
                {
                try
                {
                _beforeeaseInOut
                Ex po?.Invo
                e(@par
                ms);
                catch (E
                x
                ception e)
                { HKMirro
                Mod.DoLogError(e)
                ;
            }
    }
    }
    s
        lf = @
    arams
        self;
    start
        =
        @
        params
        .
    start;
    end = @pa
    ams.
        e
        d;
    val
        e =
            @
    arams
        value
        ;
    var r
    tVa
        l
            = ori
            (self
                , st art, end,
                v
    alue);
    if (_afterea
    eInOutE
    p
        != n
    ul )
    {
        for a
            h(D el
        e
        ates.e s
        InOutE xp _Aft rA gs t o
            nvoke
        i
            _afte r
            ea eIn u
        tExp o.GetInvocati nL i
            t(
            )
        {
            ty
                retVal

            _aftereas
                e
            InOutExpo Invoke(@par ms, retVal);
        }

        atch(Exc ep tion e)

        {
            HKMirrorMod.D oL ogE
                r
            r
            or(e);
        }
    }
    }
    return retVal;

    }

    internal static void HookeaseInCirc()
    {
        if
        (
            !o o
        ed is t.Co tai
        n
        s("easeIn            Ci            r
        c
        "
            )
            )
        {
            Ho od Li st.d("easeI
            n
                Ci c"            ;
            On.T we n.ease In
            C
            irc +=
                ea se In C
                r
                ;
        }
    }

internal static event Delegates.easeInCirc_BeforeArgs _beforeeaseInCirc;
internal static event Delegates.easeInCirc_AfterArgs _aftereaseInCirc;

private static float easeInCirc(On.iTween.orig_easeInCirc orig, iTween self, float start, float end,
    float value)
{
    D
        e
    eg ates.P a
    ra ms _ease
        n
    Circ @p ra
        s

    e
        () {
        self =
            self
            , sta
        r
            t = st ar t
            d = end, valu
        e va lue
    }
    ;
    i
        (_bef
    reea
    eInCirc != null)


    {
        fo re

        c
            h(D eleg

        at es.ea
            s
        eInCirc_
            B
        eforeArgs toI nv oke in _b ef oreease
            I
        nCi
            r
        c.GetInvoc tio List()
            )

        {
            try


            {
                _beforeeas
                    In
                irc?.In oke(@
                p
                    ms );
            }
            catch
                (Excep
                 ion

            e

            {
                HKMir
                    r
                orMod.DoLogError(e);
            }
        }
        self = @params.s
        el f;
        start
            = @par
        ms.st
            rt;
        end =
            @params.end;
        value = @
        arams.value;
        var r
        et Val = o
        ig(sel
            , sta
        t, end, valu
            e
            );


        if (_a
        f
        tereaseInCirc !=
            ull)


        forea
            h(D
                e

        egate
            .ease
            I
        Circ_
            fte
        r
            rgs t
        Invok
        e in _after a
        seInCir.G tInv oc ao n
        ist()

        ry

        {
            Va l =
                _
            ftere a
            eInCi
                c
            Invoke(
                    par s, reta l
                ;
        }
        c
            t
        h(Exc pt io n
        )

        {
            HKMi rr orMod.DoLog
                rr
            r(e)
                ;
        }
    }
}

ret
    retVal;

}

internal static void HookeaseOutCirc()
{
    if (!HookedL is t.Con
        t
    ains("easeOutCirc
    "
        )
        )
    {
        Hook ed List.A dd("            easeOutCi            rc            ");


        O
        n.i Tw een
            .
            easeOut ir c += ease
        Ci rc
    }

internal static event Delegates.easeOutCirc_BeforeArgs _beforeeaseOutCirc;
internal static event Delegates.easeOutCirc_AfterArgs _aftereaseOutCirc;

private static float easeOutCirc(On.iTween.orig_easeOutCirc orig, iTween self, float start, float end,
    float value)
{
    Del
        ga
    es.Params_easeOu tC ir
        c
    @pa ra ms = new()
    {
        s
        e
        l
        f = sel
        , start
        s ar t, e d = end
        , v
        a
        lu e = va
        l
        ue
    };

    i f(
        before
            e
            as

    eO utCir
        = null) {
        o
            h
            (Delegates.
                e
                aseOu tC irc_B
                e
                f
                o
                g to In voke i n before
                ea se OutCirc.
                etInvo
                atio
                List())
        {
            try
            {
                _b
                    e
                fo re ea s
                O
                    u
                tCirc?.Inv
                o
                ke(@ param
                    s) ;
            }
            catch (Except
                   ion

            e)
            {
                HKM rro M
                od.D
                oLogError(e);
            }
        }
    }
    se
    l
        f = @pa ams.sel;
    star
        @
    arams.s tart;
    end
        @p ar ams.end;
    value
        @par
    ms.value;


    var retVal = orig(self, s
    art, end, value);
    if
        (_ aftereas
    OutCir
        != n
    ll)
    {
        for
            e
                ach(Delegates.easeOutCi
                    c_AfterArgs toInvoke
                    i n _afte
                    easeOu
                    Circ.
                    etInvocationLi
                    s
                    t(
                    )
                )
            {
                tr
                y

                {
                    retVal = _aftere
                    seOu
                        t
                    irc.In
                    oke(
                        @
                    arams
                        retV
                    a
                        );
                }

                atc
                    h
                    (Exce
                        tion
                        e)
                {
                    HKMi rror
                    M
                    od.DoLogError(e);
                }
            }
        ret rn
        et al;
    }

    internal static void HookeaseInOutCirc()
    {
        if (
            Hooke
        L
            st Cont a
            in s(
            seI OutCirc"))
        {
            Hooke
                Li
            t.Ad
            de as eInOutC
            r
                c");
            On.iT we e
            n.easeInOutCirc += easeIn
            utCirc;
        }
    }

internal static event Delegates.easeInOutCirc_BeforeArgs _beforeeaseInOutCirc;
internal static event Delegates.easeInOutCirc_AfterArgs _aftereaseInOutCirc;

private static float easeInOutCirc(On.iTween.orig_easeInOutCirc orig, iTween self, float start, float end,
    float value)
{
    Deleg at s.Par
        a
    s_e
        a
    eInOu
        t
    Cr c @
    a
        rams = new()
        {
            self
                =
                elf,
            st art = s ta
            t

            , en d = en
            d

            , va lue = value
            ;
            if (_bef
            re as eInO Ci
            c != null)
            {
            f oreach (
            D
            ele ga te s.easeInOutCi
            r
            c
            _B ef ore
            toInv e
            in _beforeeaseIn Ou tCirc
            .G tInvo
            c
            ationLi
            s
            () )
            {
            t
            r
            y{
            b efore
            a
            seI nOutCir
            ?
            .n v
            ke(@ pa rams );
        }

    c
        atch(Exce
            p
            t
            i
            o e)
    {
        H KM irror
        od.Do o
        gE ro r(e);
    }


    }
    sel
        = @
    arams.self;
    sta
    r
        t = @p
    ra ms.start;
    en
        d
            = @param.end;
    value =
        @a ra ms.value
        v
    a
        r re Val = rig(se
    lf,t ar
        t,
        end,
        value);
    i(
        af
    ereaseInO utC
    ic ! = null)
    {
        oreach
            (Dele
        ates.ease
            I
        nOutCirc_AfterArgs toI
        voke in _afterease
            In OutCirc.
            etInvo
            ation
        ist())
        {
            t
            ry
            {
                retVal = _aftere

                seInOutCirc.Invok
                    e(@params
                        retVa
                    );
            }

            atch(Excep
            t
                io
            n
                e)
            {
                HKMirrorMod.DoLo
                    Erro
                r
                    e);
            }
        }
        r
            e
        urn r
            tVal;
    }

    internal static void HookeaseInBounce()
    {
        if (!Hook ed List
        Contain
        (
            eas
        e
            I
        un ce")


        Hook e
        List.d
        ("easn            Bo            nce
        )
        n.iT w
        en.e ase
        n
            ounc

        ea se
        n
            Bounc;
    }

    }

internal static event Delegates.easeInBounce_BeforeArgs _beforeeaseInBounce;
internal static event Delegates.easeInBounce_AfterArgs _aftereaseInBounce;

private static float easeInBounce(On.iTween.orig_easeInBounce orig, iTween self, float start, float end,
    float value)
{
    e
    egates.
        P
        aram s_ e
        as eIn
    o
        nce @pa
    r
        ams
            = new(
                self =
                    se lf
                , s
    ta rt
        tart,
        e
    d = e
    n
        d,
        v
    lue = vl ue
}

if (
    _
be fo re a
seInBounce != n ull)
{
    orea
        ch(Dele ate
            .

    ea eInBo nc
        e
    _BeforeAr gs toInvo e in _b
        foreease In ou
    ce.Get InvocationLi s
    t
        ())
    {
        try
        {
            _befo re e
                a
            sn Bo unce?.Invoke@ pa ams);
        }
        catch (Ex ept

        on e)


        {
            Hr r
            rMod.D
                o
            Lo Er ror(e
        }
    }

    self
        =
        a
    s.self;
    sta
    r
        t = @ arams
        .
        s
        t
    ar t;
    n d = @par
    ms end;

    v al ue = @pa
    ams.va
        ue;

    ar retVal = orig
    (
        se lf,
        ta r
    t, end, v l
    u
        e);
    i(_
    af ereaseIn Bo unc e !
        = nu l
    {
        foreach
        (
            De e
        g
            ate s.aseInBo nc
        e_A ft er
            A
        rgs to
        I
            nv ok e in _afte
            ea
        eInBounce.Ge I
        ct io nList())
        {
            try


            retV
                l = _afte
            r
            easeInBounce.Invoke(@pa
            ams, retVal);
        }

        cat
            ch(Except
                on e)
        {
            HKM
            rrorMod.D
                o
            LogError(e);
        }
    }
}
ret
rn retVal;
}

internal static void HookeaseOutBounce()
{
    i
    f(!Ho
    o
    kedList.Contains(
        ease
    O
        tBounc
    "))

    {
        Hooke
        List.A
        d("ea
        eOu
            t
        ounce
            );
        On
            .i Te en.ease OutB
        o
            un ce += e as eOutBounce;
    }
}

internal static event Delegates.easeOutBounce_BeforeArgs _beforeeaseOutBounce;
internal static event Delegates.easeOutBounce_AfterArgs _aftereaseOutBounce;

private static float easeOutBounce(On.iTween.orig_easeOutBounce orig, iTween self, float start, float end,
    float value)
{
    De
        eg at es.Para s
    s
        eu t
        ounce @par am
        s
            = new()
            {
                s
                e
                l
                f = se lf
                , st
                r
                = star
                t

                , e
                nd = en d
                alue =
                v
                alue
            };
    i f(_b f
    reeas eO ut
        B
    oun
    ce != n
    ll
    {
        orea
            c
        h(De
        le gate.easeO
            t
        ounc
            e_ efo
            r
        Ar s t
            o
        ok
        e
            in _be fo re ea
        e
        OutBounce.GetInvoca io
        List
            () )
        {
            try
            {
                _b eforeease
                Ou Bounce? Invoke @params)
            }
            catch (
                xc
                ption

            e)
            {
                H Mirro
                r
                Mod.DoLogError(e);
            }
        }
    }
    self param s
        lf;
    start = @ par am s.st
    a
        rt;
    end
        =
        @param
    s
        end;
    a
    l
        u = param
    alue;
    var
        e
    ta l
        = ori g(self,
        s
    tart, end,

    v
        a
    lu e) ;
    if (_a te ase Ou t
    nc e != nul
        )
    {
        fo
            each
            (Delegates.easeOut
                B
                ou nc e_
                f
                t
                erAr gs toIn
                v
                oke n _af
                t
                ereaseOu tB ounce.G
                etIn vo cationList
                (
                ))


        try
        {
            r tVa = _a
            fter ea
            s
                eOutBo
            u

            nce.I nvoke(@para
                    s,
                retVal);
        }

        t ch
        E xc ep tion e)
        {
            HKMi
            rorMo
                .DoLogErr
                o
            r(e);
        }
    }
}

return retVal

}

internal static void HookeaseInOutBounce()
{
    if (!H
    o
    okedList.Contains("easeI
    OutBounce"))
    {
        Hooke
            dL ist.Add
        "easeI
        OutBo
            nce");
        On.iTwe
            e
        n.
            e
            aseInO
        u
        tBounce += easeInOu
        Boun
            c
            ;
    }
}

internal static event Delegates.easeInOutBounce_BeforeArgs _beforeeaseInOutBounce;
internal static event Delegates.easeInOutBounce_AfterArgs _aftereaseInOutBounce;

private static float easeInOutBounce(On.iTween.orig_easeInOutBounce orig, iTween self, float start,
    float end, float value)
{
    Del eg ates.Params_ea
        s
    e
        IO ut Boue @ params = new()
    {
        self
            =
            s lf
        ,

        start =
            st ar t
        , en
            = end,
        v
        e =
        al e
    };
    i(_
    b
    eforee as eInO
    u
        t
    B
        ou nc e != nul
        )
    {
        for ac
            h
            (De
                le
        gates
            e
        seInOu tB
        o
            unce_
        Bf re
        r
        s oInvok in
        _ befor ee s
        InOutBo
            u
        nce.G
            et Inv
            cati nL
        s
            ())

        {
            try


            _befo r
            eas
                e
            nOu Bo
            u
                nc e? n
            vok(@params);
        }
        cat ch E xc e
            tion e
        {
            HKMirr
                r
            Mod.DoLog r
            ror(e)
        }
    }
}

elf = @params
self;
s tar
    =
    @params.start;
end =
    @param.e d;
v al ue =
    @
pa ra s.al ue;
var
    a
        = orig(self, start,
            en, v l
u
    e);
if (
    _
fterea
    s
ut Bounc
! = null)
{
    o
        ra c
    (Delegates
        .easeInOutB
    o
        u
    n
        ce _
        rA rgs to
    nvoke
        in _ aftereas
    InOutB
        unce
    GetInvocationLi
        s
    t())
    {
        t
            r
        y
        {
            retVal
                = _after
            ea se In OutBounce.I n
            voke(@ params, re
            t
                Val;
        }
        catch (Exc pt in e
        {
            HK
                M
            irrorMo d.DoLo
                Er
            or(e);
        }
    }
}
re
    tr n re tVal;
}

internal static void HookeaseInBack()
{
    if (!H
    okedList.Contains(
        "e            aseInBac
    "))
    {
        ooked
        ist.Add("
        e
            aseInBack");
        On.iTwee
            .easeInBack += ea
        se InBack;
    }
}

internal static event Delegates.easeInBack_BeforeArgs _beforeeaseInBack;
internal static event Delegates.easeInBack_AfterArgs _aftereaseInBack;

private static float easeInBack(On.iTween.orig_easeInBack orig, iTween self, float start, float end,
    float value)
{
    D el egates.Pr am s_easeInB
        a
    ck @param s = new()
        {
            sel = self,
            ta
            t = start, e d = en
            d

            , value = value
        }
        ;


    if (_b
    re ease nBack = null)

    {
        fo reach
        (
            Delegat
                e

        s.ea seInB
        c
            k_ eforeAr
            s
        o I
        voke in _b ef
        o
            reeaseIn ac
        k
            .
            G
            et nv oc at onLi
        t
            ))
        {
            try

            {
                _be
                    fo reeas
                    I
                Back?.In oke(@
                pa ram
                    )
            }

            catc
                h
                (Ex
                    ce ption)

            {
                HK ir
                r
                    or od.
                    Do Log
                rror(e;
            }
        }
    }
    se
    l
        f = @p a
    ams.s
    e
        f;

    s
        art =
            @p ra
    s.st rt;
    end = @pa rams
        en
        ;
    va
        lu e @params
    v
        alue;
    var
        retVal = orig(sel, tar
    end, va
        ue
    if (_afterea seInB c
    k
        != null)
    {
        forea
            c
        h
            (De le at e.easeI nB
        c
            _AfterArg s toInvo
        ke i n _af
        t
            ereaseI
        n
        ack.Ge
            t
        In vo cation i
        st())
        {
            r
                y
            r
                tVal = _aft
            e
                reaseInBac k.I
                n
            v
                ok e(@p ar ams, r
            al );
        }

        ca tc h(Excep
        ion e)

        {
            H
            MirrorMod.DoLogE
                r
            ro r(e)
        }
    }
}

return re t
    Val;
}

internal static void HookeaseOutBack()
{
    if (!HookedList Co ta in
    s
        ("eas            eO            u
    t
        Back"))
    {
        H oo k
            dL
        st.A dd("e            se            OutB
        ak ")            ;
        On.iTwee
            .easeO
        tBack
            += easeOu
        t
            Back;
    }
}

internal static event Delegates.easeOutBack_BeforeArgs _beforeeaseOutBack;
internal static event Delegates.easeOutBack_AfterArgs _aftereaseOutBack;

private static float easeOutBack(On.iTween.orig_easeOutBack orig, iTween self, float start, float end,
    float value)
{
    De le g
        t
    s.P
        a
    r
        ea seOu
        Bc k @par a
        s = n
    w

    {
        sel f
            = s
        l
            , st at = sta
        t
            , end = en d

        v alue = val ue
    }
    ;
    if (_
    ef ee se
        Ou tB ack != n
    l
        l)
    {
        fore
            a
        ch Delegat s.ease utBack_
        ef or eArgs
        oI
        voke in _befo eeaseO
        u
        tBack.GetInv ocatio
        n
            L
        i
            )
        {
            tr
            {
                _be oreeaseOut Ba ck?
                    .I
                nvoke(
                    @
                    params)
                ;
            }

            ca tch(
                x
                    ception e)


            {
                H K
                ir orMod.D Lo
                g
                    Er or(e);
            }
        }
    }
    e l = @ pa ram s.s
        l
        ;
    start
        = @p
    ms.s ta;
    end @p
    ar ams.e
        nd;
    v
    l
        e = @pa
    r
    ams
        .v alue;
    v
        r retV
    a
        l = o
    el, s tart

    nd v l
        ue);


    f(_af
    er ea
    s
        OutBa
    c
    k !=
        n
    ull)

    fo each(D eleg
    te
        .eas Ot Ba ck_Afte rA g
    s toInvok
    e
        in _afterease utBack.Ge Inv catio
        Li
    t())
    {
        try
        {
            r etVal
                =
                _aftereaseOut Ba ck.I
                n
            v
                ok e(@par am s, ret
            a
                );
        }
        catch (Ex ceptio

        n e)
        {
            H
                K
            Mi rr orMod
                .
                oL gE rro
            r
                (e)
        }
        r turn r
        t
            Vl;
    }

    internal static void HookeaseInOutBack()
    {
        f(!Ho ok
        ed Li st.Conta
        ns("ea
        eInO
            tBack"))
        {
            HookedL
                i
            st Ad("
            a
                s
            eInOutBack
            "
                );
            n.iTwe
                e
            n.easeInOutBack
                +
                = ea seInOutBac
                k
                ;
        }
    }

internal static event Delegates.easeInOutBack_BeforeArgs _beforeeaseInOutBack;
internal static event Delegates.easeInOutBack_AfterArgs _aftereaseInOutBack;

private static float easeInOutBack(On.iTween.orig_easeInOutBack orig, iTween self, float start, float end,
    float value)
{
    Delegates.Params
        ease
    I
        OutBac
    @pa
    r
        ms =
            ew()


    self
        = s
    e
        f, s
    art =
        s ta rt,
        end =
            end,
        value = val e
}

;

(_befo e
    seI
n
    O
ck !=
    u
l)
{
    f
        ach
    D
    legats.
        ase
        n
    Bac k
    Be ore
    rg toIno ke n _ b
    f
    oree as eInOutBack.G tInvo ca io
        List ))

    tr
    {
        _be o
        reeas eI Out
            B
        ac?.In vo e(@par ms);
    }
    catch
    Excepti on
        )
    {
        HKMirrorMo.DoLogEr or e);
    }
}
}
self = @ a
r
am ss lf;
t rt = @params start;
nd
=
@para
m
s.e d; va
l
ue @para
s
.value;
v
r
e t
al or g(sel f
,
start, en
al ue );
if ( _
f
ereaseI
n
OutB
ac k !=
u
l)
{
    for ac(D ele
    a
    es.ease
        I
    nO ut
    Ba ck_Af
    e
        Args toI nv ok e in
    _ aft
    reaseI
        O
    tBac
    k
        .G et In v
    o
        atio nL i
    s
        ())


    r y


    {
        re
            Va = _aftereaseInO utBa

        k.
            nvok
            e(@p ara

        ms , re
            V
        al);
    }
    ca
        t
    ch(Exception)
    {
        HKMir ro Mod.DoLog
            r
            );
    }
}
}
re turn r etVa
l; }

internal static void Hookpunch()
{
    if
    o
        kedL ist.Co tains("            un            h"
        )
        )
    {
        Hoo
            ke dL st.Add("            unch            ")

        O
        n.ie en.pu
             + = punch;
    }
}

internal static event Delegates.punch_BeforeArgs _beforepunch;
internal static event Delegates.punch_AfterArgs _afterpunch;

private static float punch(On.iTween.orig_punch orig, iTween self, float amplitude, float value)
{
    Dele
    ates.P
        rams_
    unch @par
    a
        ms = new()
        {
            self =
                elf,
            amplitude =
                a mplitude
            , valu
                = va
            ue
        };
    if
    (
        _beforepunch != null

    {
        foreach (Dele
                     ga tes.pun
            h_Befo
        eArgs
            toInvoke i
            n
        _
            b
        eforep
            u
        nch.GetInvocati
            nLis
        t
            ))
        {
            t
            y
            {
                _
                    efore
                unch?
                    .nvoke
                @pa
                    r
                ms);


                catc
                    h(E ceptio e)


                {
                    HKM ir rorMod.DoLo
                    Erro(e)
                }
            }


            f = @p
            s.sef ampli d
                = @p ars.
                mplt ud;
            va l
                e = p
            rm s.alue;

            v r
            et Va = ori(self, a pl
            tud , va l
                ;
            if _aftr p
            unch != n
            u
                ll)
            {
                foreach (Dele ates
                pun h_ fter rg toInvoke n afte
                    r
                pu ch.Get nv cationL
                    i
                st()
                {
                    tr y
                    {
                        etVal = af erp
                            u
                        n
                        ch.Invok(@ params
                            ,
                        r et Val)


                        ca tch(Exc
                            p

                        t
                        e

                        {
                            HKMir ro rM
                                o
                            d.DoLogErr
                                o
                            r
                            (
                                e)
                        }
                    }
                }
                ret
                r
                    etVal;
            }

            internal static void HookeaseInElastic()
            {
                if
                    (!H
                oo ked Li st.
                    o
                    tai ns("ea
                s
                    eIn El as
                    ti c")

                {
                    oo ke
                    L
                    st.A
                        dd "a            se            nEl
                    a
                        tic
                    "
                        ;
                    On.
                        i
                        Tw ee
                        .
                        ease In El as tic += eas
                    I
                        tic
                        ;
                }
            }

internal static event Delegates.easeInElastic_BeforeArgs _beforeeaseInElastic;
internal static event Delegates.easeInElastic_AfterArgs _aftereaseInElastic;

private static float easeInElastic(On.iTween.orig_easeInElastic orig, iTween self, float start, float end,
    float value)
{
    Delegates.P
        a
    ra s_ as
        I
    n
        Elastic @ pa r
    a
        ms = new
        (
        )
        {
            se lf = se
            lf
            , s ta rt = st rt
            ,

            end
                =
                val
            ue = v
            a
            lue
        };

    i
        f
        (_before ea

    se I
    El
    stic != nul
    l
        f or each(De
        egates

    easeI
        Elastic_B
    e
    foreArgs toInvoke in _
    eforeeaseInElastic
        .G etInvoca
    ionLis
        ())
    {
        try
        {
            _be
                f
            oreeaseInElastic?.Inv
            ke(@params);
        }

        ca
            tc h(Exce
        tion e

        {
            H
            MirrorMod.D
                o
            Lo
                g
            Error(
                e
            );
        }
    }
}

self =
    para
m
    .self;
star
    t
        = @pa
ams.s
t
    rt;
e
    d =
        param
            .end;

v al ue = @pa a
    m
s.val e;
var retVal = ri g(self, s ta t,
    e
n, v al e)


_aft e
seIn
    ic !
    u
l)
{
    o
        each(
            el eg

    te
        .
        eInEa s
    ti c_
    f
        terArgs to Invoke in
    af
    er as
        eI nE la ti.Ge
        v
    ocationL st ))
    {
        try

        retVa = _aft
        reaseIn
            st c.Invo e(@paa s
            ,
            retV al);

        c atch(E
            x
            c
            ep to e)
        {
            HK MirrorMod.DoLog rr o
            r
                (e);
        }
    }
}
r etur
n
    r et Val;
}

internal static void HookeaseOutElastic()
{
    i f(!Hook
    d
        is t.Co ntai
    n
    s("e
        as eOutE
    a
        tic"))
    {
        Ho okedL
            is t.Ad
            (
            ease Ou ta st
            ic ")            
            O n.
            T
            een.eas Os ic
                += eas
            O
            tEl as
            t
            ic;
    }

internal static event Delegates.easeOutElastic_BeforeArgs _beforeeaseOutElastic;
internal static event Delegates.easeOutElastic_AfterArgs _aftereaseOutElastic;

private static float easeOutElastic(On.iTween.orig_easeOutElastic orig, iTween self, float start, float end,
    float value)
{
    D el et es.Param
        _easeO
    ut El astic @p
        rams =
            new(

            {
                self = self,

                st at =
                t
                a
                rt
                , end = e
                n
                d
                , valu
                e
                = vau e
            };

    i
        f(_ eo

    reeaseOut
        E
    la
        s
    ti != null)
    {
        f or e
            ac h
        (
            Dele ga te
        s
            .ea seOutElasti
        _Be oreArg toIn
        vk e in _before
            aseOut
        lasti
            .GetInvoc
            a
        tionList())
        {
            try
            {
                _bef
                reeaseOutElastic?.In

                vo ke(@para
                    s);
            }

            atch
                Exception

            e)
            {
                HKMirrorMod.DoLog
                rror(e);
            }
        }
    }
    self
        = @param
            .self;
    start
        = @params.sta
    r
        t;


    end =
        @
        params.end;
    value
        @pa
    r
    ms.val
        e;
    v
        a
    retV
        l = o

    r
        g(sel
            , s
                t

    rt, e
        d, va
    lu e) ;
    f(_aft
    e
        reaseOutE lastic != ul
        )
    {
        ore
            ch(De
                l
                ea te s.ea se
                E
                astiA f
                erArg
                oInvok
                n _ af e
                easO Elas ti G
                tIn oca t
                iL s
                (
                ))

        try
        {
            retVal = _aft e
                ea
            eOut
            El as tic.I nvok
            (
                @params,
                r
            etVa );
        }
        catch (xceptio
               e)
        {
            H
                Mi orMod.DoLogErr r();
        }
    }
}

r turn re Val;
}

internal static void HookeaseInOutElastic()
{
    f(Hoo
    ke dL is t.Con
        a
    ins("ease
    n
        O
    a
        tic"))
    {
        Ho
            o
        kedList.Add "
        e
            as eI nO uE at ic");
        O
        n
            .iTw
            ee n.eas
            O
        tElasti
        c
            += e
                as eIn O
        l
            stic;
    }
}

internal static event Delegates.easeInOutElastic_BeforeArgs _beforeeaseInOutElastic;
internal static event Delegates.easeInOutElastic_AfterArgs _aftereaseInOutElastic;

private static float easeInOutElastic(On.iTween.orig_easeInOutElastic orig, iTween self, float start,
    float end, float value)
{
    De le gates
        P
    arams_ea e
    uE l
    st ic @params
        = ew()
    {
        s
            e
        l
            f
        se lf,
            start
                = star
        t
            , end = en
            , val
            e =
                alue
    }
    ;
    if (_b
    e
        fo re ea
    e
        I
    nOutElasti
    c
        != null
        )

    {
        forea
            el egates.eas
            e
        InO
            u
        tEl astic_Be fo r
        eArg s
        t
            oI nv ke
        i
            n _ be fe ea
        eI
        tElastic.
            Gt no ca tionList
            ))
        {
            t
            y
            {
                _
                    eforeease
                I
                nOutElastic?.Invoke(@
                arams);
            }
            catch (
                Ex ception
                )
            {
                H
                    Mirro
                Mod.DoLog
                    E
                rror(e);
            }
        }
    }
    self
    @params.self;
    s
    ta rt = @p
    rams.s
        art;

    nd = @para
    m
    s.
        e
        nd;
    va
    l
        ue = @params.va
    ue;

    v
        r retV
        l =
            o
    ig(se
    f, st
    a
        t, en, v
    a
        ue);

    f(_a
    ft er easeInOut
    E
        lastic = null)
    {
        oreach(e
        ega
            t
        e
            eInO
        astic A
        terAr
            s
        Invoke
            n _
            f
        erea s
        In utE
        a
        tic.Ge t
        In voc t
            ionList()
        {
            try
            {
                etV l =
                    _a ft erea se InO ut l
                astic.I nvok
                e
                    (@params, re Val);
            }

            cat
                h(xcept io

            e

            {
                HKMirr or od.DoL g
                E
                    rr or e);
            }
        }

        ret urn

        r
            et Va l;
    }
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
    public sealed class Params_Init
    {
        public UnityEngine.GameObject target;
    }

    public delegate void Init_BeforeArgs(Params_Init args);

    public delegate void Init_AfterArgs(Params_Init args);

    public delegate void Init_WithArgs(Action<UnityEngine.GameObject> orig, UnityEngine.GameObject target);

    public sealed class Params_CameraFadeFrom_float_float
    {
        public float amount;
        public float time;
    }

    public delegate void CameraFadeFrom_float_float_BeforeArgs(Params_CameraFadeFrom_float_float args);

    public delegate void CameraFadeFrom_float_float_AfterArgs(Params_CameraFadeFrom_float_float args);

    public delegate void CameraFadeFrom_float_float_WithArgs(Action<float, float> orig, float amount,
        float time);

    public sealed class Params_CameraFadeFrom_Hashtable
    {
        public System.Collections.Hashtable args;
    }

    public delegate void CameraFadeFrom_Hashtable_BeforeArgs(Params_CameraFadeFrom_Hashtable args);

    public delegate void CameraFadeFrom_Hashtable_AfterArgs(Params_CameraFadeFrom_Hashtable args);

    public delegate void CameraFadeFrom_Hashtable_WithArgs(Action<System.Collections.Hashtable> orig,
        System.Collections.Hashtable args);

    public sealed class Params_CameraFadeTo_float_float
    {
        public float amount;
        public float time;
    }

    public delegate void CameraFadeTo_float_float_BeforeArgs(Params_CameraFadeTo_float_float args);

    public delegate void CameraFadeTo_float_float_AfterArgs(Params_CameraFadeTo_float_float args);

    public delegate void CameraFadeTo_float_float_WithArgs(Action<float, float> orig, float amount,
        float time);

    public sealed class Params_CameraFadeTo_Hashtable
    {
        public System.Collections.Hashtable args;
    }

    public delegate void CameraFadeTo_Hashtable_BeforeArgs(Params_CameraFadeTo_Hashtable args);

    public delegate void CameraFadeTo_Hashtable_AfterArgs(Params_CameraFadeTo_Hashtable args);

    public delegate void CameraFadeTo_Hashtable_WithArgs(Action<System.Collections.Hashtable> orig,
        System.Collections.Hashtable args);

    public sealed class Params_ValueTo
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ValueTo_BeforeArgs(Params_ValueTo args);

    public delegate void ValueTo_AfterArgs(Params_ValueTo args);

    public delegate void ValueTo_WithArgs(Action<UnityEngine.GameObject, System.Collections.Hashtable> orig,
        UnityEngine.GameObject target, System.Collections.Hashtable args);

    public sealed class Params_FadeFrom_GameObject_float_float
    {
        public UnityEngine.GameObject target;
        public float alpha;
        public float time;
    }

    public delegate void FadeFrom_GameObject_float_float_BeforeArgs(
        Params_FadeFrom_GameObject_float_float args);

    public delegate void FadeFrom_GameObject_float_float_AfterArgs(
        Params_FadeFrom_GameObject_float_float args);

    public delegate void FadeFrom_GameObject_float_float_WithArgs(
        Action<UnityEngine.GameObject, float, float> orig, UnityEngine.GameObject target, float alpha,
        float time);

    public sealed class Params_FadeFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void
        FadeFrom_GameObject_Hashtable_BeforeArgs(Params_FadeFrom_GameObject_Hashtable args);

    public delegate void FadeFrom_GameObject_Hashtable_AfterArgs(Params_FadeFrom_GameObject_Hashtable args);

    public delegate void FadeFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_FadeTo_GameObject_float_float
    {
        public UnityEngine.GameObject target;
        public float alpha;
        public float time;
    }

    public delegate void
        FadeTo_GameObject_float_float_BeforeArgs(Params_FadeTo_GameObject_float_float args);

    public delegate void FadeTo_GameObject_float_float_AfterArgs(Params_FadeTo_GameObject_float_float args);

    public delegate void FadeTo_GameObject_float_float_WithArgs(
        Action<UnityEngine.GameObject, float, float> orig, UnityEngine.GameObject target, float alpha,
        float time);

    public sealed class Params_FadeTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void FadeTo_GameObject_Hashtable_BeforeArgs(Params_FadeTo_GameObject_Hashtable args);

    public delegate void FadeTo_GameObject_Hashtable_AfterArgs(Params_FadeTo_GameObject_Hashtable args);

    public delegate void FadeTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ColorFrom_GameObject_Color_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Color color;
        public float time;
    }

    public delegate void ColorFrom_GameObject_Color_float_BeforeArgs(
        Params_ColorFrom_GameObject_Color_float args);

    public delegate void ColorFrom_GameObject_Color_float_AfterArgs(
        Params_ColorFrom_GameObject_Color_float args);

    public delegate void ColorFrom_GameObject_Color_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Color, float> orig, UnityEngine.GameObject target,
        UnityEngine.Color color, float time);

    public sealed class Params_ColorFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ColorFrom_GameObject_Hashtable_BeforeArgs(
        Params_ColorFrom_GameObject_Hashtable args);

    public delegate void ColorFrom_GameObject_Hashtable_AfterArgs(
        Params_ColorFrom_GameObject_Hashtable args);

    public delegate void ColorFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ColorTo_GameObject_Color_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Color color;
        public float time;
    }

    public delegate void ColorTo_GameObject_Color_float_BeforeArgs(
        Params_ColorTo_GameObject_Color_float args);

    public delegate void ColorTo_GameObject_Color_float_AfterArgs(
        Params_ColorTo_GameObject_Color_float args);

    public delegate void ColorTo_GameObject_Color_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Color, float> orig, UnityEngine.GameObject target,
        UnityEngine.Color color, float time);

    public sealed class Params_ColorTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ColorTo_GameObject_Hashtable_BeforeArgs(Params_ColorTo_GameObject_Hashtable args);

    public delegate void ColorTo_GameObject_Hashtable_AfterArgs(Params_ColorTo_GameObject_Hashtable args);

    public delegate void ColorTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_AudioFrom_GameObject_float_float_float
    {
        public UnityEngine.GameObject target;
        public float volume;
        public float pitch;
        public float time;
    }

    public delegate void AudioFrom_GameObject_float_float_float_BeforeArgs(
        Params_AudioFrom_GameObject_float_float_float args);

    public delegate void AudioFrom_GameObject_float_float_float_AfterArgs(
        Params_AudioFrom_GameObject_float_float_float args);

    public delegate void AudioFrom_GameObject_float_float_float_WithArgs(
        Action<UnityEngine.GameObject, float, float, float> orig, UnityEngine.GameObject target,
        float volume, float pitch, float time);

    public sealed class Params_AudioFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void AudioFrom_GameObject_Hashtable_BeforeArgs(
        Params_AudioFrom_GameObject_Hashtable args);

    public delegate void AudioFrom_GameObject_Hashtable_AfterArgs(
        Params_AudioFrom_GameObject_Hashtable args);

    public delegate void AudioFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_AudioTo_GameObject_float_float_float
    {
        public UnityEngine.GameObject target;
        public float volume;
        public float pitch;
        public float time;
    }

    public delegate void AudioTo_GameObject_float_float_float_BeforeArgs(
        Params_AudioTo_GameObject_float_float_float args);

    public delegate void AudioTo_GameObject_float_float_float_AfterArgs(
        Params_AudioTo_GameObject_float_float_float args);

    public delegate void AudioTo_GameObject_float_float_float_WithArgs(
        Action<UnityEngine.GameObject, float, float, float> orig, UnityEngine.GameObject target,
        float volume, float pitch, float time);

    public sealed class Params_AudioTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void AudioTo_GameObject_Hashtable_BeforeArgs(Params_AudioTo_GameObject_Hashtable args);

    public delegate void AudioTo_GameObject_Hashtable_AfterArgs(Params_AudioTo_GameObject_Hashtable args);

    public delegate void AudioTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_Stab_GameObject_AudioClip_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.AudioClip audioclip;
        public float delay;
    }

    public delegate void Stab_GameObject_AudioClip_float_BeforeArgs(
        Params_Stab_GameObject_AudioClip_float args);

    public delegate void Stab_GameObject_AudioClip_float_AfterArgs(
        Params_Stab_GameObject_AudioClip_float args);

    public delegate void Stab_GameObject_AudioClip_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.AudioClip, float> orig, UnityEngine.GameObject target,
        UnityEngine.AudioClip audioclip, float delay);

    public sealed class Params_Stab_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void Stab_GameObject_Hashtable_BeforeArgs(Params_Stab_GameObject_Hashtable args);

    public delegate void Stab_GameObject_Hashtable_AfterArgs(Params_Stab_GameObject_Hashtable args);

    public delegate void Stab_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_LookFrom_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 looktarget;
        public float time;
    }

    public delegate void LookFrom_GameObject_Vector3_float_BeforeArgs(
        Params_LookFrom_GameObject_Vector3_float args);

    public delegate void LookFrom_GameObject_Vector3_float_AfterArgs(
        Params_LookFrom_GameObject_Vector3_float args);

    public delegate void LookFrom_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 looktarget, float time);

    public sealed class Params_LookFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void
        LookFrom_GameObject_Hashtable_BeforeArgs(Params_LookFrom_GameObject_Hashtable args);

    public delegate void LookFrom_GameObject_Hashtable_AfterArgs(Params_LookFrom_GameObject_Hashtable args);

    public delegate void LookFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_LookTo_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 looktarget;
        public float time;
    }

    public delegate void LookTo_GameObject_Vector3_float_BeforeArgs(
        Params_LookTo_GameObject_Vector3_float args);

    public delegate void LookTo_GameObject_Vector3_float_AfterArgs(
        Params_LookTo_GameObject_Vector3_float args);

    public delegate void LookTo_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 looktarget, float time);

    public sealed class Params_LookTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void LookTo_GameObject_Hashtable_BeforeArgs(Params_LookTo_GameObject_Hashtable args);

    public delegate void LookTo_GameObject_Hashtable_AfterArgs(Params_LookTo_GameObject_Hashtable args);

    public delegate void LookTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_MoveTo_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 position;
        public float time;
    }

    public delegate void MoveTo_GameObject_Vector3_float_BeforeArgs(
        Params_MoveTo_GameObject_Vector3_float args);

    public delegate void MoveTo_GameObject_Vector3_float_AfterArgs(
        Params_MoveTo_GameObject_Vector3_float args);

    public delegate void MoveTo_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 position, float time);

    public sealed class Params_MoveTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void MoveTo_GameObject_Hashtable_BeforeArgs(Params_MoveTo_GameObject_Hashtable args);

    public delegate void MoveTo_GameObject_Hashtable_AfterArgs(Params_MoveTo_GameObject_Hashtable args);

    public delegate void MoveTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_MoveFrom_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 position;
        public float time;
    }

    public delegate void MoveFrom_GameObject_Vector3_float_BeforeArgs(
        Params_MoveFrom_GameObject_Vector3_float args);

    public delegate void MoveFrom_GameObject_Vector3_float_AfterArgs(
        Params_MoveFrom_GameObject_Vector3_float args);

    public delegate void MoveFrom_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 position, float time);

    public sealed class Params_MoveFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void
        MoveFrom_GameObject_Hashtable_BeforeArgs(Params_MoveFrom_GameObject_Hashtable args);

    public delegate void MoveFrom_GameObject_Hashtable_AfterArgs(Params_MoveFrom_GameObject_Hashtable args);

    public delegate void MoveFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_MoveAdd_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void MoveAdd_GameObject_Vector3_float_BeforeArgs(
        Params_MoveAdd_GameObject_Vector3_float args);

    public delegate void MoveAdd_GameObject_Vector3_float_AfterArgs(
        Params_MoveAdd_GameObject_Vector3_float args);

    public delegate void MoveAdd_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_MoveAdd_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void MoveAdd_GameObject_Hashtable_BeforeArgs(Params_MoveAdd_GameObject_Hashtable args);

    public delegate void MoveAdd_GameObject_Hashtable_AfterArgs(Params_MoveAdd_GameObject_Hashtable args);

    public delegate void MoveAdd_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_MoveBy_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void MoveBy_GameObject_Vector3_float_BeforeArgs(
        Params_MoveBy_GameObject_Vector3_float args);

    public delegate void MoveBy_GameObject_Vector3_float_AfterArgs(
        Params_MoveBy_GameObject_Vector3_float args);

    public delegate void MoveBy_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_MoveBy_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void MoveBy_GameObject_Hashtable_BeforeArgs(Params_MoveBy_GameObject_Hashtable args);

    public delegate void MoveBy_GameObject_Hashtable_AfterArgs(Params_MoveBy_GameObject_Hashtable args);

    public delegate void MoveBy_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ScaleTo_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 scale;
        public float time;
    }

    public delegate void ScaleTo_GameObject_Vector3_float_BeforeArgs(
        Params_ScaleTo_GameObject_Vector3_float args);

    public delegate void ScaleTo_GameObject_Vector3_float_AfterArgs(
        Params_ScaleTo_GameObject_Vector3_float args);

    public delegate void ScaleTo_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 scale, float time);

    public sealed class Params_ScaleTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ScaleTo_GameObject_Hashtable_BeforeArgs(Params_ScaleTo_GameObject_Hashtable args);

    public delegate void ScaleTo_GameObject_Hashtable_AfterArgs(Params_ScaleTo_GameObject_Hashtable args);

    public delegate void ScaleTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ScaleFrom_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 scale;
        public float time;
    }

    public delegate void ScaleFrom_GameObject_Vector3_float_BeforeArgs(
        Params_ScaleFrom_GameObject_Vector3_float args);

    public delegate void ScaleFrom_GameObject_Vector3_float_AfterArgs(
        Params_ScaleFrom_GameObject_Vector3_float args);

    public delegate void ScaleFrom_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 scale, float time);

    public sealed class Params_ScaleFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ScaleFrom_GameObject_Hashtable_BeforeArgs(
        Params_ScaleFrom_GameObject_Hashtable args);

    public delegate void ScaleFrom_GameObject_Hashtable_AfterArgs(
        Params_ScaleFrom_GameObject_Hashtable args);

    public delegate void ScaleFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ScaleAdd_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void ScaleAdd_GameObject_Vector3_float_BeforeArgs(
        Params_ScaleAdd_GameObject_Vector3_float args);

    public delegate void ScaleAdd_GameObject_Vector3_float_AfterArgs(
        Params_ScaleAdd_GameObject_Vector3_float args);

    public delegate void ScaleAdd_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_ScaleAdd_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void
        ScaleAdd_GameObject_Hashtable_BeforeArgs(Params_ScaleAdd_GameObject_Hashtable args);

    public delegate void ScaleAdd_GameObject_Hashtable_AfterArgs(Params_ScaleAdd_GameObject_Hashtable args);

    public delegate void ScaleAdd_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ScaleBy_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void ScaleBy_GameObject_Vector3_float_BeforeArgs(
        Params_ScaleBy_GameObject_Vector3_float args);

    public delegate void ScaleBy_GameObject_Vector3_float_AfterArgs(
        Params_ScaleBy_GameObject_Vector3_float args);

    public delegate void ScaleBy_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_ScaleBy_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ScaleBy_GameObject_Hashtable_BeforeArgs(Params_ScaleBy_GameObject_Hashtable args);

    public delegate void ScaleBy_GameObject_Hashtable_AfterArgs(Params_ScaleBy_GameObject_Hashtable args);

    public delegate void ScaleBy_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_RotateTo_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 rotation;
        public float time;
    }

    public delegate void RotateTo_GameObject_Vector3_float_BeforeArgs(
        Params_RotateTo_GameObject_Vector3_float args);

    public delegate void RotateTo_GameObject_Vector3_float_AfterArgs(
        Params_RotateTo_GameObject_Vector3_float args);

    public delegate void RotateTo_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 rotation, float time);

    public sealed class Params_RotateTo_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void
        RotateTo_GameObject_Hashtable_BeforeArgs(Params_RotateTo_GameObject_Hashtable args);

    public delegate void RotateTo_GameObject_Hashtable_AfterArgs(Params_RotateTo_GameObject_Hashtable args);

    public delegate void RotateTo_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_RotateFrom_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 rotation;
        public float time;
    }

    public delegate void RotateFrom_GameObject_Vector3_float_BeforeArgs(
        Params_RotateFrom_GameObject_Vector3_float args);

    public delegate void RotateFrom_GameObject_Vector3_float_AfterArgs(
        Params_RotateFrom_GameObject_Vector3_float args);

    public delegate void RotateFrom_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 rotation, float time);

    public sealed class Params_RotateFrom_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void RotateFrom_GameObject_Hashtable_BeforeArgs(
        Params_RotateFrom_GameObject_Hashtable args);

    public delegate void RotateFrom_GameObject_Hashtable_AfterArgs(
        Params_RotateFrom_GameObject_Hashtable args);

    public delegate void RotateFrom_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_RotateAdd_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void RotateAdd_GameObject_Vector3_float_BeforeArgs(
        Params_RotateAdd_GameObject_Vector3_float args);

    public delegate void RotateAdd_GameObject_Vector3_float_AfterArgs(
        Params_RotateAdd_GameObject_Vector3_float args);

    public delegate void RotateAdd_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_RotateAdd_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void RotateAdd_GameObject_Hashtable_BeforeArgs(
        Params_RotateAdd_GameObject_Hashtable args);

    public delegate void RotateAdd_GameObject_Hashtable_AfterArgs(
        Params_RotateAdd_GameObject_Hashtable args);

    public delegate void RotateAdd_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_RotateBy_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void RotateBy_GameObject_Vector3_float_BeforeArgs(
        Params_RotateBy_GameObject_Vector3_float args);

    public delegate void RotateBy_GameObject_Vector3_float_AfterArgs(
        Params_RotateBy_GameObject_Vector3_float args);

    public delegate void RotateBy_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_RotateBy_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void
        RotateBy_GameObject_Hashtable_BeforeArgs(Params_RotateBy_GameObject_Hashtable args);

    public delegate void RotateBy_GameObject_Hashtable_AfterArgs(Params_RotateBy_GameObject_Hashtable args);

    public delegate void RotateBy_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ShakePosition_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void ShakePosition_GameObject_Vector3_float_BeforeArgs(
        Params_ShakePosition_GameObject_Vector3_float args);

    public delegate void ShakePosition_GameObject_Vector3_float_AfterArgs(
        Params_ShakePosition_GameObject_Vector3_float args);

    public delegate void ShakePosition_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_ShakePosition_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ShakePosition_GameObject_Hashtable_BeforeArgs(
        Params_ShakePosition_GameObject_Hashtable args);

    public delegate void ShakePosition_GameObject_Hashtable_AfterArgs(
        Params_ShakePosition_GameObject_Hashtable args);

    public delegate void ShakePosition_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ShakeScale_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void ShakeScale_GameObject_Vector3_float_BeforeArgs(
        Params_ShakeScale_GameObject_Vector3_float args);

    public delegate void ShakeScale_GameObject_Vector3_float_AfterArgs(
        Params_ShakeScale_GameObject_Vector3_float args);

    public delegate void ShakeScale_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_ShakeScale_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ShakeScale_GameObject_Hashtable_BeforeArgs(
        Params_ShakeScale_GameObject_Hashtable args);

    public delegate void ShakeScale_GameObject_Hashtable_AfterArgs(
        Params_ShakeScale_GameObject_Hashtable args);

    public delegate void ShakeScale_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ShakeRotation_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void ShakeRotation_GameObject_Vector3_float_BeforeArgs(
        Params_ShakeRotation_GameObject_Vector3_float args);

    public delegate void ShakeRotation_GameObject_Vector3_float_AfterArgs(
        Params_ShakeRotation_GameObject_Vector3_float args);

    public delegate void ShakeRotation_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_ShakeRotation_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ShakeRotation_GameObject_Hashtable_BeforeArgs(
        Params_ShakeRotation_GameObject_Hashtable args);

    public delegate void ShakeRotation_GameObject_Hashtable_AfterArgs(
        Params_ShakeRotation_GameObject_Hashtable args);

    public delegate void ShakeRotation_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_PunchPosition_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void PunchPosition_GameObject_Vector3_float_BeforeArgs(
        Params_PunchPosition_GameObject_Vector3_float args);

    public delegate void PunchPosition_GameObject_Vector3_float_AfterArgs(
        Params_PunchPosition_GameObject_Vector3_float args);

    public delegate void PunchPosition_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_PunchPosition_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void PunchPosition_GameObject_Hashtable_BeforeArgs(
        Params_PunchPosition_GameObject_Hashtable args);

    public delegate void PunchPosition_GameObject_Hashtable_AfterArgs(
        Params_PunchPosition_GameObject_Hashtable args);

    public delegate void PunchPosition_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_PunchRotation_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void PunchRotation_GameObject_Vector3_float_BeforeArgs(
        Params_PunchRotation_GameObject_Vector3_float args);

    public delegate void PunchRotation_GameObject_Vector3_float_AfterArgs(
        Params_PunchRotation_GameObject_Vector3_float args);

    public delegate void PunchRotation_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_PunchRotation_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void PunchRotation_GameObject_Hashtable_BeforeArgs(
        Params_PunchRotation_GameObject_Hashtable args);

    public delegate void PunchRotation_GameObject_Hashtable_AfterArgs(
        Params_PunchRotation_GameObject_Hashtable args);

    public delegate void PunchRotation_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_PunchScale_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 amount;
        public float time;
    }

    public delegate void PunchScale_GameObject_Vector3_float_BeforeArgs(
        Params_PunchScale_GameObject_Vector3_float args);

    public delegate void PunchScale_GameObject_Vector3_float_AfterArgs(
        Params_PunchScale_GameObject_Vector3_float args);

    public delegate void PunchScale_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 amount, float time);

    public sealed class Params_PunchScale_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void PunchScale_GameObject_Hashtable_BeforeArgs(
        Params_PunchScale_GameObject_Hashtable args);

    public delegate void PunchScale_GameObject_Hashtable_AfterArgs(
        Params_PunchScale_GameObject_Hashtable args);

    public delegate void PunchScale_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_GenerateTargets
    {
        public iTween self;
    }

    public delegate void GenerateTargets_BeforeArgs(Params_GenerateTargets args);

    public delegate void GenerateTargets_AfterArgs(Params_GenerateTargets args);

    public delegate void GenerateTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateRectTargets
    {
        public iTween self;
    }

    public delegate void GenerateRectTargets_BeforeArgs(Params_GenerateRectTargets args);

    public delegate void GenerateRectTargets_AfterArgs(Params_GenerateRectTargets args);

    public delegate void GenerateRectTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateColorTargets
    {
        public iTween self;
    }

    public delegate void GenerateColorTargets_BeforeArgs(Params_GenerateColorTargets args);

    public delegate void GenerateColorTargets_AfterArgs(Params_GenerateColorTargets args);

    public delegate void GenerateColorTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateVector3Targets
    {
        public iTween self;
    }

    public delegate void GenerateVector3Targets_BeforeArgs(Params_GenerateVector3Targets args);

    public delegate void GenerateVector3Targets_AfterArgs(Params_GenerateVector3Targets args);

    public delegate void GenerateVector3Targets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateVector2Targets
    {
        public iTween self;
    }

    public delegate void GenerateVector2Targets_BeforeArgs(Params_GenerateVector2Targets args);

    public delegate void GenerateVector2Targets_AfterArgs(Params_GenerateVector2Targets args);

    public delegate void GenerateVector2Targets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateFloatTargets
    {
        public iTween self;
    }

    public delegate void GenerateFloatTargets_BeforeArgs(Params_GenerateFloatTargets args);

    public delegate void GenerateFloatTargets_AfterArgs(Params_GenerateFloatTargets args);

    public delegate void GenerateFloatTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateColorToTargets
    {
        public iTween self;
    }

    public delegate void GenerateColorToTargets_BeforeArgs(Params_GenerateColorToTargets args);

    public delegate void GenerateColorToTargets_AfterArgs(Params_GenerateColorToTargets args);

    public delegate void GenerateColorToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateAudioToTargets
    {
        public iTween self;
    }

    public delegate void GenerateAudioToTargets_BeforeArgs(Params_GenerateAudioToTargets args);

    public delegate void GenerateAudioToTargets_AfterArgs(Params_GenerateAudioToTargets args);

    public delegate void GenerateAudioToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateStabTargets
    {
        public iTween self;
    }

    public delegate void GenerateStabTargets_BeforeArgs(Params_GenerateStabTargets args);

    public delegate void GenerateStabTargets_AfterArgs(Params_GenerateStabTargets args);

    public delegate void GenerateStabTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateLookToTargets
    {
        public iTween self;
    }

    public delegate void GenerateLookToTargets_BeforeArgs(Params_GenerateLookToTargets args);

    public delegate void GenerateLookToTargets_AfterArgs(Params_GenerateLookToTargets args);

    public delegate void GenerateLookToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateMoveToPathTargets
    {
        public iTween self;
    }

    public delegate void GenerateMoveToPathTargets_BeforeArgs(Params_GenerateMoveToPathTargets args);

    public delegate void GenerateMoveToPathTargets_AfterArgs(Params_GenerateMoveToPathTargets args);

    public delegate void GenerateMoveToPathTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateMoveToTargets
    {
        public iTween self;
    }

    public delegate void GenerateMoveToTargets_BeforeArgs(Params_GenerateMoveToTargets args);

    public delegate void GenerateMoveToTargets_AfterArgs(Params_GenerateMoveToTargets args);

    public delegate void GenerateMoveToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateMoveByTargets
    {
        public iTween self;
    }

    public delegate void GenerateMoveByTargets_BeforeArgs(Params_GenerateMoveByTargets args);

    public delegate void GenerateMoveByTargets_AfterArgs(Params_GenerateMoveByTargets args);

    public delegate void GenerateMoveByTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateScaleToTargets
    {
        public iTween self;
    }

    public delegate void GenerateScaleToTargets_BeforeArgs(Params_GenerateScaleToTargets args);

    public delegate void GenerateScaleToTargets_AfterArgs(Params_GenerateScaleToTargets args);

    public delegate void GenerateScaleToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateScaleByTargets
    {
        public iTween self;
    }

    public delegate void GenerateScaleByTargets_BeforeArgs(Params_GenerateScaleByTargets args);

    public delegate void GenerateScaleByTargets_AfterArgs(Params_GenerateScaleByTargets args);

    public delegate void GenerateScaleByTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateScaleAddTargets
    {
        public iTween self;
    }

    public delegate void GenerateScaleAddTargets_BeforeArgs(Params_GenerateScaleAddTargets args);

    public delegate void GenerateScaleAddTargets_AfterArgs(Params_GenerateScaleAddTargets args);

    public delegate void GenerateScaleAddTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateRotateToTargets
    {
        public iTween self;
    }

    public delegate void GenerateRotateToTargets_BeforeArgs(Params_GenerateRotateToTargets args);

    public delegate void GenerateRotateToTargets_AfterArgs(Params_GenerateRotateToTargets args);

    public delegate void GenerateRotateToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateRotateAddTargets
    {
        public iTween self;
    }

    public delegate void GenerateRotateAddTargets_BeforeArgs(Params_GenerateRotateAddTargets args);

    public delegate void GenerateRotateAddTargets_AfterArgs(Params_GenerateRotateAddTargets args);

    public delegate void GenerateRotateAddTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateRotateByTargets
    {
        public iTween self;
    }

    public delegate void GenerateRotateByTargets_BeforeArgs(Params_GenerateRotateByTargets args);

    public delegate void GenerateRotateByTargets_AfterArgs(Params_GenerateRotateByTargets args);

    public delegate void GenerateRotateByTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateShakePositionTargets
    {
        public iTween self;
    }

    public delegate void GenerateShakePositionTargets_BeforeArgs(Params_GenerateShakePositionTargets args);

    public delegate void GenerateShakePositionTargets_AfterArgs(Params_GenerateShakePositionTargets args);

    public delegate void GenerateShakePositionTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateShakeScaleTargets
    {
        public iTween self;
    }

    public delegate void GenerateShakeScaleTargets_BeforeArgs(Params_GenerateShakeScaleTargets args);

    public delegate void GenerateShakeScaleTargets_AfterArgs(Params_GenerateShakeScaleTargets args);

    public delegate void GenerateShakeScaleTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GenerateShakeRotationTargets
    {
        public iTween self;
    }

    public delegate void GenerateShakeRotationTargets_BeforeArgs(Params_GenerateShakeRotationTargets args);

    public delegate void GenerateShakeRotationTargets_AfterArgs(Params_GenerateShakeRotationTargets args);

    public delegate void GenerateShakeRotationTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GeneratePunchPositionTargets
    {
        public iTween self;
    }

    public delegate void GeneratePunchPositionTargets_BeforeArgs(Params_GeneratePunchPositionTargets args);

    public delegate void GeneratePunchPositionTargets_AfterArgs(Params_GeneratePunchPositionTargets args);

    public delegate void GeneratePunchPositionTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GeneratePunchRotationTargets
    {
        public iTween self;
    }

    public delegate void GeneratePunchRotationTargets_BeforeArgs(Params_GeneratePunchRotationTargets args);

    public delegate void GeneratePunchRotationTargets_AfterArgs(Params_GeneratePunchRotationTargets args);

    public delegate void GeneratePunchRotationTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GeneratePunchScaleTargets
    {
        public iTween self;
    }

    public delegate void GeneratePunchScaleTargets_BeforeArgs(Params_GeneratePunchScaleTargets args);

    public delegate void GeneratePunchScaleTargets_AfterArgs(Params_GeneratePunchScaleTargets args);

    public delegate void GeneratePunchScaleTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyRectTargets
    {
        public iTween self;
    }

    public delegate void ApplyRectTargets_BeforeArgs(Params_ApplyRectTargets args);

    public delegate void ApplyRectTargets_AfterArgs(Params_ApplyRectTargets args);

    public delegate void ApplyRectTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyColorTargets
    {
        public iTween self;
    }

    public delegate void ApplyColorTargets_BeforeArgs(Params_ApplyColorTargets args);

    public delegate void ApplyColorTargets_AfterArgs(Params_ApplyColorTargets args);

    public delegate void ApplyColorTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyVector3Targets
    {
        public iTween self;
    }

    public delegate void ApplyVector3Targets_BeforeArgs(Params_ApplyVector3Targets args);

    public delegate void ApplyVector3Targets_AfterArgs(Params_ApplyVector3Targets args);

    public delegate void ApplyVector3Targets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyVector2Targets
    {
        public iTween self;
    }

    public delegate void ApplyVector2Targets_BeforeArgs(Params_ApplyVector2Targets args);

    public delegate void ApplyVector2Targets_AfterArgs(Params_ApplyVector2Targets args);

    public delegate void ApplyVector2Targets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyFloatTargets
    {
        public iTween self;
    }

    public delegate void ApplyFloatTargets_BeforeArgs(Params_ApplyFloatTargets args);

    public delegate void ApplyFloatTargets_AfterArgs(Params_ApplyFloatTargets args);

    public delegate void ApplyFloatTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyColorToTargets
    {
        public iTween self;
    }

    public delegate void ApplyColorToTargets_BeforeArgs(Params_ApplyColorToTargets args);

    public delegate void ApplyColorToTargets_AfterArgs(Params_ApplyColorToTargets args);

    public delegate void ApplyColorToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyAudioToTargets
    {
        public iTween self;
    }

    public delegate void ApplyAudioToTargets_BeforeArgs(Params_ApplyAudioToTargets args);

    public delegate void ApplyAudioToTargets_AfterArgs(Params_ApplyAudioToTargets args);

    public delegate void ApplyAudioToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyStabTargets
    {
        public iTween self;
    }

    public delegate void ApplyStabTargets_BeforeArgs(Params_ApplyStabTargets args);

    public delegate void ApplyStabTargets_AfterArgs(Params_ApplyStabTargets args);

    public delegate void ApplyStabTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyMoveToPathTargets
    {
        public iTween self;
    }

    public delegate void ApplyMoveToPathTargets_BeforeArgs(Params_ApplyMoveToPathTargets args);

    public delegate void ApplyMoveToPathTargets_AfterArgs(Params_ApplyMoveToPathTargets args);

    public delegate void ApplyMoveToPathTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyMoveToTargets
    {
        public iTween self;
    }

    public delegate void ApplyMoveToTargets_BeforeArgs(Params_ApplyMoveToTargets args);

    public delegate void ApplyMoveToTargets_AfterArgs(Params_ApplyMoveToTargets args);

    public delegate void ApplyMoveToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyMoveByTargets
    {
        public iTween self;
    }

    public delegate void ApplyMoveByTargets_BeforeArgs(Params_ApplyMoveByTargets args);

    public delegate void ApplyMoveByTargets_AfterArgs(Params_ApplyMoveByTargets args);

    public delegate void ApplyMoveByTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyScaleToTargets
    {
        public iTween self;
    }

    public delegate void ApplyScaleToTargets_BeforeArgs(Params_ApplyScaleToTargets args);

    public delegate void ApplyScaleToTargets_AfterArgs(Params_ApplyScaleToTargets args);

    public delegate void ApplyScaleToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyLookToTargets
    {
        public iTween self;
    }

    public delegate void ApplyLookToTargets_BeforeArgs(Params_ApplyLookToTargets args);

    public delegate void ApplyLookToTargets_AfterArgs(Params_ApplyLookToTargets args);

    public delegate void ApplyLookToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyRotateToTargets
    {
        public iTween self;
    }

    public delegate void ApplyRotateToTargets_BeforeArgs(Params_ApplyRotateToTargets args);

    public delegate void ApplyRotateToTargets_AfterArgs(Params_ApplyRotateToTargets args);

    public delegate void ApplyRotateToTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyRotateAddTargets
    {
        public iTween self;
    }

    public delegate void ApplyRotateAddTargets_BeforeArgs(Params_ApplyRotateAddTargets args);

    public delegate void ApplyRotateAddTargets_AfterArgs(Params_ApplyRotateAddTargets args);

    public delegate void ApplyRotateAddTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyShakePositionTargets
    {
        public iTween self;
    }

    public delegate void ApplyShakePositionTargets_BeforeArgs(Params_ApplyShakePositionTargets args);

    public delegate void ApplyShakePositionTargets_AfterArgs(Params_ApplyShakePositionTargets args);

    public delegate void ApplyShakePositionTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyShakeScaleTargets
    {
        public iTween self;
    }

    public delegate void ApplyShakeScaleTargets_BeforeArgs(Params_ApplyShakeScaleTargets args);

    public delegate void ApplyShakeScaleTargets_AfterArgs(Params_ApplyShakeScaleTargets args);

    public delegate void ApplyShakeScaleTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyShakeRotationTargets
    {
        public iTween self;
    }

    public delegate void ApplyShakeRotationTargets_BeforeArgs(Params_ApplyShakeRotationTargets args);

    public delegate void ApplyShakeRotationTargets_AfterArgs(Params_ApplyShakeRotationTargets args);

    public delegate void ApplyShakeRotationTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyPunchPositionTargets
    {
        public iTween self;
    }

    public delegate void ApplyPunchPositionTargets_BeforeArgs(Params_ApplyPunchPositionTargets args);

    public delegate void ApplyPunchPositionTargets_AfterArgs(Params_ApplyPunchPositionTargets args);

    public delegate void ApplyPunchPositionTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyPunchRotationTargets
    {
        public iTween self;
    }

    public delegate void ApplyPunchRotationTargets_BeforeArgs(Params_ApplyPunchRotationTargets args);

    public delegate void ApplyPunchRotationTargets_AfterArgs(Params_ApplyPunchRotationTargets args);

    public delegate void ApplyPunchRotationTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ApplyPunchScaleTargets
    {
        public iTween self;
    }

    public delegate void ApplyPunchScaleTargets_BeforeArgs(Params_ApplyPunchScaleTargets args);

    public delegate void ApplyPunchScaleTargets_AfterArgs(Params_ApplyPunchScaleTargets args);

    public delegate void ApplyPunchScaleTargets_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_TweenDelay
    {
        public iTween self;
    }

    public delegate void TweenDelay_BeforeArgs(Params_TweenDelay args);

    public delegate System.Collections.IEnumerator TweenDelay_AfterArgs(Params_TweenDelay args,
        System.Collections.IEnumerator ret);

    public delegate System.Collections.IEnumerator TweenDelay_WithArgs(
        Func<iTween, System.Collections.IEnumerator> orig, iTween self);

    public sealed class Params_TweenStart
    {
        public iTween self;
    }

    public delegate void TweenStart_BeforeArgs(Params_TweenStart args);

    public delegate void TweenStart_AfterArgs(Params_TweenStart args);

    public delegate void TweenStart_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_TweenRestart
    {
        public iTween self;
    }

    public delegate void TweenRestart_BeforeArgs(Params_TweenRestart args);

    public delegate System.Collections.IEnumerator TweenRestart_AfterArgs(Params_TweenRestart args,
        System.Collections.IEnumerator ret);

    public delegate System.Collections.IEnumerator TweenRestart_WithArgs(
        Func<iTween, System.Collections.IEnumerator> orig, iTween self);

    public sealed class Params_TweenUpdate
    {
        public iTween self;
    }

    public delegate void TweenUpdate_BeforeArgs(Params_TweenUpdate args);

    public delegate void TweenUpdate_AfterArgs(Params_TweenUpdate args);

    public delegate void TweenUpdate_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_TweenComplete
    {
        public iTween self;
    }

    public delegate void TweenComplete_BeforeArgs(Params_TweenComplete args);

    public delegate void TweenComplete_AfterArgs(Params_TweenComplete args);

    public delegate void TweenComplete_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_TweenLoop
    {
        public iTween self;
    }

    public delegate void TweenLoop_BeforeArgs(Params_TweenLoop args);

    public delegate void TweenLoop_AfterArgs(Params_TweenLoop args);

    public delegate void TweenLoop_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_RectUpdate
    {
        public UnityEngine.Rect currentValue;
        public UnityEngine.Rect targetValue;
        public float speed;
    }

    public delegate void RectUpdate_BeforeArgs(Params_RectUpdate args);

    public delegate UnityEngine.Rect RectUpdate_AfterArgs(Params_RectUpdate args, UnityEngine.Rect ret);

    public delegate UnityEngine.Rect RectUpdate_WithArgs(
        Func<UnityEngine.Rect, UnityEngine.Rect, float, UnityEngine.Rect> orig,
        UnityEngine.Rect currentValue, UnityEngine.Rect targetValue, float speed);

    public sealed class Params_Vector3Update
    {
        public UnityEngine.Vector3 currentValue;
        public UnityEngine.Vector3 targetValue;
        public float speed;
    }

    public delegate void Vector3Update_BeforeArgs(Params_Vector3Update args);

    public delegate UnityEngine.Vector3 Vector3Update_AfterArgs(Params_Vector3Update args,
        UnityEngine.Vector3 ret);

    public delegate UnityEngine.Vector3 Vector3Update_WithArgs(
        Func<UnityEngine.Vector3, UnityEngine.Vector3, float, UnityEngine.Vector3> orig,
        UnityEngine.Vector3 currentValue, UnityEngine.Vector3 targetValue, float speed);

    public sealed class Params_Vector2Update
    {
        public UnityEngine.Vector2 currentValue;
        public UnityEngine.Vector2 targetValue;
        public float speed;
    }

    public delegate void Vector2Update_BeforeArgs(Params_Vector2Update args);

    public delegate UnityEngine.Vector2 Vector2Update_AfterArgs(Params_Vector2Update args,
        UnityEngine.Vector2 ret);

    public delegate UnityEngine.Vector2 Vector2Update_WithArgs(
        Func<UnityEngine.Vector2, UnityEngine.Vector2, float, UnityEngine.Vector2> orig,
        UnityEngine.Vector2 currentValue, UnityEngine.Vector2 targetValue, float speed);

    public sealed class Params_FloatUpdate
    {
        public float currentValue;
        public float targetValue;
        public float speed;
    }

    public delegate void FloatUpdate_BeforeArgs(Params_FloatUpdate args);

    public delegate float FloatUpdate_AfterArgs(Params_FloatUpdate args, float ret);

    public delegate float FloatUpdate_WithArgs(Func<float, float, float, float> orig, float currentValue,
        float targetValue, float speed);

    public sealed class Params_FadeUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void FadeUpdate_GameObject_Hashtable_BeforeArgs(
        Params_FadeUpdate_GameObject_Hashtable args);

    public delegate void FadeUpdate_GameObject_Hashtable_AfterArgs(
        Params_FadeUpdate_GameObject_Hashtable args);

    public delegate void FadeUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_FadeUpdate_GameObject_float_float
    {
        public UnityEngine.GameObject target;
        public float alpha;
        public float time;
    }

    public delegate void FadeUpdate_GameObject_float_float_BeforeArgs(
        Params_FadeUpdate_GameObject_float_float args);

    public delegate void FadeUpdate_GameObject_float_float_AfterArgs(
        Params_FadeUpdate_GameObject_float_float args);

    public delegate void FadeUpdate_GameObject_float_float_WithArgs(
        Action<UnityEngine.GameObject, float, float> orig, UnityEngine.GameObject target, float alpha,
        float time);

    public sealed class Params_ColorUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ColorUpdate_GameObject_Hashtable_BeforeArgs(
        Params_ColorUpdate_GameObject_Hashtable args);

    public delegate void ColorUpdate_GameObject_Hashtable_AfterArgs(
        Params_ColorUpdate_GameObject_Hashtable args);

    public delegate void ColorUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ColorUpdate_GameObject_Color_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Color color;
        public float time;
    }

    public delegate void ColorUpdate_GameObject_Color_float_BeforeArgs(
        Params_ColorUpdate_GameObject_Color_float args);

    public delegate void ColorUpdate_GameObject_Color_float_AfterArgs(
        Params_ColorUpdate_GameObject_Color_float args);

    public delegate void ColorUpdate_GameObject_Color_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Color, float> orig, UnityEngine.GameObject target,
        UnityEngine.Color color, float time);

    public sealed class Params_AudioUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void AudioUpdate_GameObject_Hashtable_BeforeArgs(
        Params_AudioUpdate_GameObject_Hashtable args);

    public delegate void AudioUpdate_GameObject_Hashtable_AfterArgs(
        Params_AudioUpdate_GameObject_Hashtable args);

    public delegate void AudioUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_AudioUpdate_GameObject_float_float_float
    {
        public UnityEngine.GameObject target;
        public float volume;
        public float pitch;
        public float time;
    }

    public delegate void AudioUpdate_GameObject_float_float_float_BeforeArgs(
        Params_AudioUpdate_GameObject_float_float_float args);

    public delegate void AudioUpdate_GameObject_float_float_float_AfterArgs(
        Params_AudioUpdate_GameObject_float_float_float args);

    public delegate void AudioUpdate_GameObject_float_float_float_WithArgs(
        Action<UnityEngine.GameObject, float, float, float> orig, UnityEngine.GameObject target,
        float volume, float pitch, float time);

    public sealed class Params_RotateUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void RotateUpdate_GameObject_Hashtable_BeforeArgs(
        Params_RotateUpdate_GameObject_Hashtable args);

    public delegate void RotateUpdate_GameObject_Hashtable_AfterArgs(
        Params_RotateUpdate_GameObject_Hashtable args);

    public delegate void RotateUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_RotateUpdate_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 rotation;
        public float time;
    }

    public delegate void RotateUpdate_GameObject_Vector3_float_BeforeArgs(
        Params_RotateUpdate_GameObject_Vector3_float args);

    public delegate void RotateUpdate_GameObject_Vector3_float_AfterArgs(
        Params_RotateUpdate_GameObject_Vector3_float args);

    public delegate void RotateUpdate_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 rotation, float time);

    public sealed class Params_ScaleUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void ScaleUpdate_GameObject_Hashtable_BeforeArgs(
        Params_ScaleUpdate_GameObject_Hashtable args);

    public delegate void ScaleUpdate_GameObject_Hashtable_AfterArgs(
        Params_ScaleUpdate_GameObject_Hashtable args);

    public delegate void ScaleUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_ScaleUpdate_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 scale;
        public float time;
    }

    public delegate void ScaleUpdate_GameObject_Vector3_float_BeforeArgs(
        Params_ScaleUpdate_GameObject_Vector3_float args);

    public delegate void ScaleUpdate_GameObject_Vector3_float_AfterArgs(
        Params_ScaleUpdate_GameObject_Vector3_float args);

    public delegate void ScaleUpdate_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 scale, float time);

    public sealed class Params_MoveUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void MoveUpdate_GameObject_Hashtable_BeforeArgs(
        Params_MoveUpdate_GameObject_Hashtable args);

    public delegate void MoveUpdate_GameObject_Hashtable_AfterArgs(
        Params_MoveUpdate_GameObject_Hashtable args);

    public delegate void MoveUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_MoveUpdate_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 position;
        public float time;
    }

    public delegate void MoveUpdate_GameObject_Vector3_float_BeforeArgs(
        Params_MoveUpdate_GameObject_Vector3_float args);

    public delegate void MoveUpdate_GameObject_Vector3_float_AfterArgs(
        Params_MoveUpdate_GameObject_Vector3_float args);

    public delegate void MoveUpdate_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 position, float time);

    public sealed class Params_LookUpdate_GameObject_Hashtable
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void LookUpdate_GameObject_Hashtable_BeforeArgs(
        Params_LookUpdate_GameObject_Hashtable args);

    public delegate void LookUpdate_GameObject_Hashtable_AfterArgs(
        Params_LookUpdate_GameObject_Hashtable args);

    public delegate void LookUpdate_GameObject_Hashtable_WithArgs(
        Action<UnityEngine.GameObject, System.Collections.Hashtable> orig, UnityEngine.GameObject target,
        System.Collections.Hashtable args);

    public sealed class Params_LookUpdate_GameObject_Vector3_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3 looktarget;
        public float time;
    }

    public delegate void LookUpdate_GameObject_Vector3_float_BeforeArgs(
        Params_LookUpdate_GameObject_Vector3_float args);

    public delegate void LookUpdate_GameObject_Vector3_float_AfterArgs(
        Params_LookUpdate_GameObject_Vector3_float args);

    public delegate void LookUpdate_GameObject_Vector3_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3, float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3 looktarget, float time);

    public sealed class Params_PathLength_Array
    {
        public UnityEngine.Transform[] path;
    }

    public delegate void PathLength_Array_BeforeArgs(Params_PathLength_Array args);

    public delegate float PathLength_Array_AfterArgs(Params_PathLength_Array args, float ret);

    public delegate float PathLength_Array_WithArgs(Func<UnityEngine.Transform[], float> orig,
        UnityEngine.Transform[] path);

    public sealed class Params_CameraTexture
    {
        public UnityEngine.Color color;
    }

    public delegate void CameraTexture_BeforeArgs(Params_CameraTexture args);

    public delegate UnityEngine.Texture2D CameraTexture_AfterArgs(Params_CameraTexture args,
        UnityEngine.Texture2D ret);

    public delegate UnityEngine.Texture2D CameraTexture_WithArgs(
        Func<UnityEngine.Color, UnityEngine.Texture2D> orig, UnityEngine.Color color);

    public sealed class Params_PutOnPath_GameObject_Array_float
    {
        public UnityEngine.GameObject target;
        public UnityEngine.Vector3[] path;
        public float percent;
    }

    public delegate void PutOnPath_GameObject_Array_float_BeforeArgs(
        Params_PutOnPath_GameObject_Array_float args);

    public delegate void PutOnPath_GameObject_Array_float_AfterArgs(
        Params_PutOnPath_GameObject_Array_float args);

    public delegate void PutOnPath_GameObject_Array_float_WithArgs(
        Action<UnityEngine.GameObject, UnityEngine.Vector3[], float> orig, UnityEngine.GameObject target,
        UnityEngine.Vector3[] path, float percent);

    public sealed class Params_PutOnPath_Transform_Array_float
    {
        public UnityEngine.Transform target;
        public UnityEngine.Vector3[] path;
        public float percent;
    }

    public delegate void PutOnPath_Transform_Array_float_BeforeArgs(
        Params_PutOnPath_Transform_Array_float args);

    public delegate void PutOnPath_Transform_Array_float_AfterArgs(
        Params_PutOnPath_Transform_Array_float args);

    public delegate void PutOnPath_Transform_Array_float_WithArgs(
        Action<UnityEngine.Transform, UnityEngine.Vector3[], float> orig, UnityEngine.Transform target,
        UnityEngine.Vector3[] path, float percent);

    public sealed class Params_PointOnPath_Array_float
    {
        public UnityEngine.Transform[] path;
        public float percent;
    }

    public delegate void PointOnPath_Array_float_BeforeArgs(Params_PointOnPath_Array_float args);

    public delegate UnityEngine.Vector3 PointOnPath_Array_float_AfterArgs(
        Params_PointOnPath_Array_float args, UnityEngine.Vector3 ret);

    public delegate UnityEngine.Vector3 PointOnPath_Array_float_WithArgs(
        Func<UnityEngine.Transform[], float, UnityEngine.Vector3> orig, UnityEngine.Transform[] path,
        float percent);

    public sealed class Params_DrawLine_Array
    {
        public UnityEngine.Vector3[] line;
    }

    public delegate void DrawLine_Array_BeforeArgs(Params_DrawLine_Array args);

    public delegate void DrawLine_Array_AfterArgs(Params_DrawLine_Array args);

    public delegate void DrawLine_Array_WithArgs(Action<UnityEngine.Vector3[]> orig,
        UnityEngine.Vector3[] line);

    public sealed class Params_DrawLine_Array_Color
    {
        public UnityEngine.Vector3[] line;
        public UnityEngine.Color color;
    }

    public delegate void DrawLine_Array_Color_BeforeArgs(Params_DrawLine_Array_Color args);

    public delegate void DrawLine_Array_Color_AfterArgs(Params_DrawLine_Array_Color args);

    public delegate void DrawLine_Array_Color_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color> orig, UnityEngine.Vector3[] line,
        UnityEngine.Color color);

    public sealed class Params_DrawLineGizmos_Array
    {
        public UnityEngine.Vector3[] line;
    }

    public delegate void DrawLineGizmos_Array_BeforeArgs(Params_DrawLineGizmos_Array args);

    public delegate void DrawLineGizmos_Array_AfterArgs(Params_DrawLineGizmos_Array args);

    public delegate void DrawLineGizmos_Array_WithArgs(Action<UnityEngine.Vector3[]> orig,
        UnityEngine.Vector3[] line);

    public sealed class Params_DrawLineGizmos_Array_Color
    {
        public UnityEngine.Vector3[] line;
        public UnityEngine.Color color;
    }

    public delegate void DrawLineGizmos_Array_Color_BeforeArgs(Params_DrawLineGizmos_Array_Color args);

    public delegate void DrawLineGizmos_Array_Color_AfterArgs(Params_DrawLineGizmos_Array_Color args);

    public delegate void DrawLineGizmos_Array_Color_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color> orig, UnityEngine.Vector3[] line,
        UnityEngine.Color color);

    public sealed class Params_DrawLineHandles_Array
    {
        public UnityEngine.Vector3[] line;
    }

    public delegate void DrawLineHandles_Array_BeforeArgs(Params_DrawLineHandles_Array args);

    public delegate void DrawLineHandles_Array_AfterArgs(Params_DrawLineHandles_Array args);

    public delegate void DrawLineHandles_Array_WithArgs(Action<UnityEngine.Vector3[]> orig,
        UnityEngine.Vector3[] line);

    public sealed class Params_DrawLineHandles_Array_Color
    {
        public UnityEngine.Vector3[] line;
        public UnityEngine.Color color;
    }

    public delegate void DrawLineHandles_Array_Color_BeforeArgs(Params_DrawLineHandles_Array_Color args);

    public delegate void DrawLineHandles_Array_Color_AfterArgs(Params_DrawLineHandles_Array_Color args);

    public delegate void DrawLineHandles_Array_Color_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color> orig, UnityEngine.Vector3[] line,
        UnityEngine.Color color);

    public sealed class Params_DrawPath_Array
    {
        public UnityEngine.Vector3[] path;
    }

    public delegate void DrawPath_Array_BeforeArgs(Params_DrawPath_Array args);

    public delegate void DrawPath_Array_AfterArgs(Params_DrawPath_Array args);

    public delegate void DrawPath_Array_WithArgs(Action<UnityEngine.Vector3[]> orig,
        UnityEngine.Vector3[] path);

    public sealed class Params_DrawPath_Array_Color
    {
        public UnityEngine.Vector3[] path;
        public UnityEngine.Color color;
    }

    public delegate void DrawPath_Array_Color_BeforeArgs(Params_DrawPath_Array_Color args);

    public delegate void DrawPath_Array_Color_AfterArgs(Params_DrawPath_Array_Color args);

    public delegate void DrawPath_Array_Color_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color> orig, UnityEngine.Vector3[] path,
        UnityEngine.Color color);

    public sealed class Params_DrawPathGizmos_Array
    {
        public UnityEngine.Vector3[] path;
    }

    public delegate void DrawPathGizmos_Array_BeforeArgs(Params_DrawPathGizmos_Array args);

    public delegate void DrawPathGizmos_Array_AfterArgs(Params_DrawPathGizmos_Array args);

    public delegate void DrawPathGizmos_Array_WithArgs(Action<UnityEngine.Vector3[]> orig,
        UnityEngine.Vector3[] path);

    public sealed class Params_DrawPathGizmos_Array_Color
    {
        public UnityEngine.Vector3[] path;
        public UnityEngine.Color color;
    }

    public delegate void DrawPathGizmos_Array_Color_BeforeArgs(Params_DrawPathGizmos_Array_Color args);

    public delegate void DrawPathGizmos_Array_Color_AfterArgs(Params_DrawPathGizmos_Array_Color args);

    public delegate void DrawPathGizmos_Array_Color_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color> orig, UnityEngine.Vector3[] path,
        UnityEngine.Color color);

    public sealed class Params_DrawPathHandles_Array
    {
        public UnityEngine.Vector3[] path;
    }

    public delegate void DrawPathHandles_Array_BeforeArgs(Params_DrawPathHandles_Array args);

    public delegate void DrawPathHandles_Array_AfterArgs(Params_DrawPathHandles_Array args);

    public delegate void DrawPathHandles_Array_WithArgs(Action<UnityEngine.Vector3[]> orig,
        UnityEngine.Vector3[] path);

    public sealed class Params_DrawPathHandles_Array_Color
    {
        public UnityEngine.Vector3[] path;
        public UnityEngine.Color color;
    }

    public delegate void DrawPathHandles_Array_Color_BeforeArgs(Params_DrawPathHandles_Array_Color args);

    public delegate void DrawPathHandles_Array_Color_AfterArgs(Params_DrawPathHandles_Array_Color args);

    public delegate void DrawPathHandles_Array_Color_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color> orig, UnityEngine.Vector3[] path,
        UnityEngine.Color color);

    public sealed class Params_CameraFadeDepth
    {
        public int depth;
    }

    public delegate void CameraFadeDepth_BeforeArgs(Params_CameraFadeDepth args);

    public delegate void CameraFadeDepth_AfterArgs(Params_CameraFadeDepth args);

    public delegate void CameraFadeDepth_WithArgs(Action<int> orig, int depth);

    public delegate void CameraFadeDestroy_BeforeArgs();

    public delegate void CameraFadeDestroy_AfterArgs();

    public delegate void CameraFadeDestroy_WithArgs(Action orig);

    public sealed class Params_CameraFadeSwap
    {
        public UnityEngine.Texture2D texture;
    }

    public delegate void CameraFadeSwap_BeforeArgs(Params_CameraFadeSwap args);

    public delegate void CameraFadeSwap_AfterArgs(Params_CameraFadeSwap args);

    public delegate void CameraFadeSwap_WithArgs(Action<UnityEngine.Texture2D> orig,
        UnityEngine.Texture2D texture);

    public sealed class Params_CameraFadeAdd_Texture2D_int
    {
        public UnityEngine.Texture2D texture;
        public int depth;
    }

    public delegate void CameraFadeAdd_Texture2D_int_BeforeArgs(Params_CameraFadeAdd_Texture2D_int args);

    public delegate UnityEngine.GameObject CameraFadeAdd_Texture2D_int_AfterArgs(
        Params_CameraFadeAdd_Texture2D_int args, UnityEngine.GameObject ret);

    public delegate UnityEngine.GameObject CameraFadeAdd_Texture2D_int_WithArgs(
        Func<UnityEngine.Texture2D, int, UnityEngine.GameObject> orig, UnityEngine.Texture2D texture,
        int depth);

    public sealed class Params_CameraFadeAdd_Texture2D
    {
        public UnityEngine.Texture2D texture;
    }

    public delegate void CameraFadeAdd_Texture2D_BeforeArgs(Params_CameraFadeAdd_Texture2D args);

    public delegate UnityEngine.GameObject CameraFadeAdd_Texture2D_AfterArgs(
        Params_CameraFadeAdd_Texture2D args, UnityEngine.GameObject ret);

    public delegate UnityEngine.GameObject CameraFadeAdd_Texture2D_WithArgs(
        Func<UnityEngine.Texture2D, UnityEngine.GameObject> orig, UnityEngine.Texture2D texture);

    public delegate void CameraFadeAdd_BeforeArgs();

    public delegate UnityEngine.GameObject CameraFadeAdd_AfterArgs(UnityEngine.GameObject ret);

    public delegate UnityEngine.GameObject CameraFadeAdd_WithArgs(Func<UnityEngine.GameObject> orig);

    public sealed class Params_Resume_GameObject
    {
        public UnityEngine.GameObject target;
    }

    public delegate void Resume_GameObject_BeforeArgs(Params_Resume_GameObject args);

    public delegate void Resume_GameObject_AfterArgs(Params_Resume_GameObject args);

    public delegate void Resume_GameObject_WithArgs(Action<UnityEngine.GameObject> orig,
        UnityEngine.GameObject target);

    public sealed class Params_Resume_GameObject_bool
    {
        public UnityEngine.GameObject target;
        public bool includechildren;
    }

    public delegate void Resume_GameObject_bool_BeforeArgs(Params_Resume_GameObject_bool args);

    public delegate void Resume_GameObject_bool_AfterArgs(Params_Resume_GameObject_bool args);

    public delegate void Resume_GameObject_bool_WithArgs(Action<UnityEngine.GameObject, bool> orig,
        UnityEngine.GameObject target, bool includechildren);

    public sealed class Params_Resume_GameObject_string
    {
        public UnityEngine.GameObject target;
        public string type;
    }

    public delegate void Resume_GameObject_string_BeforeArgs(Params_Resume_GameObject_string args);

    public delegate void Resume_GameObject_string_AfterArgs(Params_Resume_GameObject_string args);

    public delegate void Resume_GameObject_string_WithArgs(Action<UnityEngine.GameObject, string> orig,
        UnityEngine.GameObject target, string type);

    public sealed class Params_Resume_GameObject_string_bool
    {
        public UnityEngine.GameObject target;
        public string type;
        public bool includechildren;
    }

    public delegate void
        Resume_GameObject_string_bool_BeforeArgs(Params_Resume_GameObject_string_bool args);

    public delegate void Resume_GameObject_string_bool_AfterArgs(Params_Resume_GameObject_string_bool args);

    public delegate void Resume_GameObject_string_bool_WithArgs(
        Action<UnityEngine.GameObject, string, bool> orig, UnityEngine.GameObject target, string type,
        bool includechildren);

    public delegate void Resume_BeforeArgs();

    public delegate void Resume_AfterArgs();

    public delegate void Resume_WithArgs(Action orig);

    public sealed class Params_Resume_string
    {
        public string type;
    }

    public delegate void Resume_string_BeforeArgs(Params_Resume_string args);

    public delegate void Resume_string_AfterArgs(Params_Resume_string args);

    public delegate void Resume_string_WithArgs(Action<string> orig, string type);

    public sealed class Params_Pause_GameObject
    {
        public UnityEngine.GameObject target;
    }

    public delegate void Pause_GameObject_BeforeArgs(Params_Pause_GameObject args);

    public delegate void Pause_GameObject_AfterArgs(Params_Pause_GameObject args);

    public delegate void Pause_GameObject_WithArgs(Action<UnityEngine.GameObject> orig,
        UnityEngine.GameObject target);

    public sealed class Params_Pause_GameObject_bool
    {
        public UnityEngine.GameObject target;
        public bool includechildren;
    }

    public delegate void Pause_GameObject_bool_BeforeArgs(Params_Pause_GameObject_bool args);

    public delegate void Pause_GameObject_bool_AfterArgs(Params_Pause_GameObject_bool args);

    public delegate void Pause_GameObject_bool_WithArgs(Action<UnityEngine.GameObject, bool> orig,
        UnityEngine.GameObject target, bool includechildren);

    public sealed class Params_Pause_GameObject_string
    {
        public UnityEngine.GameObject target;
        public string type;
    }

    public delegate void Pause_GameObject_string_BeforeArgs(Params_Pause_GameObject_string args);

    public delegate void Pause_GameObject_string_AfterArgs(Params_Pause_GameObject_string args);

    public delegate void Pause_GameObject_string_WithArgs(Action<UnityEngine.GameObject, string> orig,
        UnityEngine.GameObject target, string type);

    public sealed class Params_Pause_GameObject_string_bool
    {
        public UnityEngine.GameObject target;
        public string type;
        public bool includechildren;
    }

    public delegate void Pause_GameObject_string_bool_BeforeArgs(Params_Pause_GameObject_string_bool args);

    public delegate void Pause_GameObject_string_bool_AfterArgs(Params_Pause_GameObject_string_bool args);

    public delegate void Pause_GameObject_string_bool_WithArgs(
        Action<UnityEngine.GameObject, string, bool> orig, UnityEngine.GameObject target, string type,
        bool includechildren);

    public delegate void Pause_BeforeArgs();

    public delegate void Pause_AfterArgs();

    public delegate void Pause_WithArgs(Action orig);

    public sealed class Params_Pause_string
    {
        public string type;
    }

    public delegate void Pause_string_BeforeArgs(Params_Pause_string args);

    public delegate void Pause_string_AfterArgs(Params_Pause_string args);

    public delegate void Pause_string_WithArgs(Action<string> orig, string type);

    public delegate void Count_BeforeArgs();

    public delegate int Count_AfterArgs(int ret);

    public delegate int Count_WithArgs(Func<int> orig);

    public sealed class Params_Count_string
    {
        public string type;
    }

    public delegate void Count_string_BeforeArgs(Params_Count_string args);

    public delegate int Count_string_AfterArgs(Params_Count_string args, int ret);

    public delegate int Count_string_WithArgs(Func<string, int> orig, string type);

    public sealed class Params_Count_GameObject
    {
        public UnityEngine.GameObject target;
    }

    public delegate void Count_GameObject_BeforeArgs(Params_Count_GameObject args);

    public delegate int Count_GameObject_AfterArgs(Params_Count_GameObject args, int ret);

    public delegate int Count_GameObject_WithArgs(Func<UnityEngine.GameObject, int> orig,
        UnityEngine.GameObject target);

    public sealed class Params_Count_GameObject_string
    {
        public UnityEngine.GameObject target;
        public string type;
    }

    public delegate void Count_GameObject_string_BeforeArgs(Params_Count_GameObject_string args);

    public delegate int Count_GameObject_string_AfterArgs(Params_Count_GameObject_string args, int ret);

    public delegate int Count_GameObject_string_WithArgs(Func<UnityEngine.GameObject, string, int> orig,
        UnityEngine.GameObject target, string type);

    public delegate void Stop_BeforeArgs();

    public delegate void Stop_AfterArgs();

    public delegate void Stop_WithArgs(Action orig);

    public sealed class Params_Stop_string
    {
        public string type;
    }

    public delegate void Stop_string_BeforeArgs(Params_Stop_string args);

    public delegate void Stop_string_AfterArgs(Params_Stop_string args);

    public delegate void Stop_string_WithArgs(Action<string> orig, string type);

    public sealed class Params_StopByName_string
    {
        public string name;
    }

    public delegate void StopByName_string_BeforeArgs(Params_StopByName_string args);

    public delegate void StopByName_string_AfterArgs(Params_StopByName_string args);

    public delegate void StopByName_string_WithArgs(Action<string> orig, string name);

    public sealed class Params_Stop_GameObject
    {
        public UnityEngine.GameObject target;
    }

    public delegate void Stop_GameObject_BeforeArgs(Params_Stop_GameObject args);

    public delegate void Stop_GameObject_AfterArgs(Params_Stop_GameObject args);

    public delegate void Stop_GameObject_WithArgs(Action<UnityEngine.GameObject> orig,
        UnityEngine.GameObject target);

    public sealed class Params_Stop_GameObject_bool
    {
        public UnityEngine.GameObject target;
        public bool includechildren;
    }

    public delegate void Stop_GameObject_bool_BeforeArgs(Params_Stop_GameObject_bool args);

    public delegate void Stop_GameObject_bool_AfterArgs(Params_Stop_GameObject_bool args);

    public delegate void Stop_GameObject_bool_WithArgs(Action<UnityEngine.GameObject, bool> orig,
        UnityEngine.GameObject target, bool includechildren);

    public sealed class Params_Stop_GameObject_string
    {
        public UnityEngine.GameObject target;
        public string type;
    }

    public delegate void Stop_GameObject_string_BeforeArgs(Params_Stop_GameObject_string args);

    public delegate void Stop_GameObject_string_AfterArgs(Params_Stop_GameObject_string args);

    public delegate void Stop_GameObject_string_WithArgs(Action<UnityEngine.GameObject, string> orig,
        UnityEngine.GameObject target, string type);

    public sealed class Params_StopByName_GameObject_string
    {
        public UnityEngine.GameObject target;
        public string name;
    }

    public delegate void StopByName_GameObject_string_BeforeArgs(Params_StopByName_GameObject_string args);

    public delegate void StopByName_GameObject_string_AfterArgs(Params_StopByName_GameObject_string args);

    public delegate void StopByName_GameObject_string_WithArgs(Action<UnityEngine.GameObject, string> orig,
        UnityEngine.GameObject target, string name);

    public sealed class Params_Stop_GameObject_string_bool
    {
        public UnityEngine.GameObject target;
        public string type;
        public bool includechildren;
    }

    public delegate void Stop_GameObject_string_bool_BeforeArgs(Params_Stop_GameObject_string_bool args);

    public delegate void Stop_GameObject_string_bool_AfterArgs(Params_Stop_GameObject_string_bool args);

    public delegate void Stop_GameObject_string_bool_WithArgs(
        Action<UnityEngine.GameObject, string, bool> orig, UnityEngine.GameObject target, string type,
        bool includechildren);

    public sealed class Params_StopByName_GameObject_string_bool
    {
        public UnityEngine.GameObject target;
        public string name;
        public bool includechildren;
    }

    public delegate void StopByName_GameObject_string_bool_BeforeArgs(
        Params_StopByName_GameObject_string_bool args);

    public delegate void StopByName_GameObject_string_bool_AfterArgs(
        Params_StopByName_GameObject_string_bool args);

    public delegate void StopByName_GameObject_string_bool_WithArgs(
        Action<UnityEngine.GameObject, string, bool> orig, UnityEngine.GameObject target, string name,
        bool includechildren);

    public sealed class Params_Hash
    {
        public System.Object[] args;
    }

    public delegate void Hash_BeforeArgs(Params_Hash args);

    public delegate System.Collections.Hashtable Hash_AfterArgs(Params_Hash args,
        System.Collections.Hashtable ret);

    public delegate System.Collections.Hashtable Hash_WithArgs(
        Func<System.Object[], System.Collections.Hashtable> orig, System.Object[] args);

    public sealed class Params_Awake
    {
        public iTween self;
    }

    public delegate void Awake_BeforeArgs(Params_Awake args);

    public delegate void Awake_AfterArgs(Params_Awake args);

    public delegate void Awake_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_Start
    {
        public iTween self;
    }

    public delegate void Start_BeforeArgs(Params_Start args);

    public delegate System.Collections.IEnumerator Start_AfterArgs(Params_Start args,
        System.Collections.IEnumerator ret);

    public delegate System.Collections.IEnumerator Start_WithArgs(
        Func<iTween, System.Collections.IEnumerator> orig, iTween self);

    public sealed class Params_Update
    {
        public iTween self;
    }

    public delegate void Update_BeforeArgs(Params_Update args);

    public delegate void Update_AfterArgs(Params_Update args);

    public delegate void Update_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_FixedUpdate
    {
        public iTween self;
    }

    public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

    public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

    public delegate void FixedUpdate_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_LateUpdate
    {
        public iTween self;
    }

    public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

    public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

    public delegate void LateUpdate_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_OnEnable
    {
        public iTween self;
    }

    public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

    public delegate void OnEnable_AfterArgs(Params_OnEnable args);

    public delegate void OnEnable_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_OnDisable
    {
        public iTween self;
    }

    public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

    public delegate void OnDisable_AfterArgs(Params_OnDisable args);

    public delegate void OnDisable_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_DrawLineHelper
    {
        public UnityEngine.Vector3[] line;
        public UnityEngine.Color color;
        public string method;
    }

    public delegate void DrawLineHelper_BeforeArgs(Params_DrawLineHelper args);

    public delegate void DrawLineHelper_AfterArgs(Params_DrawLineHelper args);

    public delegate void DrawLineHelper_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color, string> orig, UnityEngine.Vector3[] line,
        UnityEngine.Color color, string method);

    public sealed class Params_DrawPathHelper
    {
        public UnityEngine.Vector3[] path;
        public UnityEngine.Color color;
        public string method;
    }

    public delegate void DrawPathHelper_BeforeArgs(Params_DrawPathHelper args);

    public delegate void DrawPathHelper_AfterArgs(Params_DrawPathHelper args);

    public delegate void DrawPathHelper_WithArgs(
        Action<UnityEngine.Vector3[], UnityEngine.Color, string> orig, UnityEngine.Vector3[] path,
        UnityEngine.Color color, string method);

    public sealed class Params_PathControlPointGenerator
    {
        public UnityEngine.Vector3[] path;
    }

    public delegate void PathControlPointGenerator_BeforeArgs(Params_PathControlPointGenerator args);

    public delegate UnityEngine.Vector3[] PathControlPointGenerator_AfterArgs(
        Params_PathControlPointGenerator args, UnityEngine.Vector3[] ret);

    public delegate UnityEngine.Vector3[] PathControlPointGenerator_WithArgs(
        Func<UnityEngine.Vector3[], UnityEngine.Vector3[]> orig, UnityEngine.Vector3[] path);

    public sealed class Params_Interp
    {
        public UnityEngine.Vector3[] pts;
        public float t;
    }

    public delegate void Interp_BeforeArgs(Params_Interp args);

    public delegate UnityEngine.Vector3 Interp_AfterArgs(Params_Interp args, UnityEngine.Vector3 ret);

    public delegate UnityEngine.Vector3 Interp_WithArgs(
        Func<UnityEngine.Vector3[], float, UnityEngine.Vector3> orig, UnityEngine.Vector3[] pts, float t);

    public sealed class Params_Launch
    {
        public UnityEngine.GameObject target;
        public System.Collections.Hashtable args;
    }

    public delegate void Launch_BeforeArgs(Params_Launch args);

    public delegate void Launch_AfterArgs(Params_Launch args);

    public delegate void Launch_WithArgs(Action<UnityEngine.GameObject, System.Collections.Hashtable> orig,
        UnityEngine.GameObject target, System.Collections.Hashtable args);

    public sealed class Params_CleanArgs
    {
        public System.Collections.Hashtable args;
    }

    public delegate void CleanArgs_BeforeArgs(Params_CleanArgs args);

    public delegate System.Collections.Hashtable CleanArgs_AfterArgs(Params_CleanArgs args,
        System.Collections.Hashtable ret);

    public delegate System.Collections.Hashtable CleanArgs_WithArgs(
        Func<System.Collections.Hashtable, System.Collections.Hashtable> orig,
        System.Collections.Hashtable args);

    public delegate void GenerateID_BeforeArgs();

    public delegate string GenerateID_AfterArgs(string ret);

    public delegate string GenerateID_WithArgs(Func<string> orig);

    public sealed class Params_RetrieveArgs
    {
        public iTween self;
    }

    public delegate void RetrieveArgs_BeforeArgs(Params_RetrieveArgs args);

    public delegate void RetrieveArgs_AfterArgs(Params_RetrieveArgs args);

    public delegate void RetrieveArgs_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_GetEasingFunction
    {
        public iTween self;
    }

    public delegate void GetEasingFunction_BeforeArgs(Params_GetEasingFunction args);

    public delegate void GetEasingFunction_AfterArgs(Params_GetEasingFunction args);

    public delegate void GetEasingFunction_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_UpdatePercentage
    {
        public iTween self;
    }

    public delegate void UpdatePercentage_BeforeArgs(Params_UpdatePercentage args);

    public delegate void UpdatePercentage_AfterArgs(Params_UpdatePercentage args);

    public delegate void UpdatePercentage_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_CallBack
    {
        public iTween self;
        public string callbackType;
    }

    public delegate void CallBack_BeforeArgs(Params_CallBack args);

    public delegate void CallBack_AfterArgs(Params_CallBack args);

    public delegate void CallBack_WithArgs(Action<iTween, string> orig, iTween self, string callbackType);

    public sealed class Params_Dispose
    {
        public iTween self;
    }

    public delegate void Dispose_BeforeArgs(Params_Dispose args);

    public delegate void Dispose_AfterArgs(Params_Dispose args);

    public delegate void Dispose_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ConflictCheck
    {
        public iTween self;
    }

    public delegate void ConflictCheck_BeforeArgs(Params_ConflictCheck args);

    public delegate void ConflictCheck_AfterArgs(Params_ConflictCheck args);

    public delegate void ConflictCheck_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_EnableKinematic
    {
        public iTween self;
    }

    public delegate void EnableKinematic_BeforeArgs(Params_EnableKinematic args);

    public delegate void EnableKinematic_AfterArgs(Params_EnableKinematic args);

    public delegate void EnableKinematic_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_DisableKinematic
    {
        public iTween self;
    }

    public delegate void DisableKinematic_BeforeArgs(Params_DisableKinematic args);

    public delegate void DisableKinematic_AfterArgs(Params_DisableKinematic args);

    public delegate void DisableKinematic_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_ResumeDelay
    {
        public iTween self;
    }

    public delegate void ResumeDelay_BeforeArgs(Params_ResumeDelay args);

    public delegate void ResumeDelay_AfterArgs(Params_ResumeDelay args);

    public delegate void ResumeDelay_WithArgs(Action<iTween> orig, iTween self);

    public sealed class Params_linear
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void linear_BeforeArgs(Params_linear args);

    public delegate float linear_AfterArgs(Params_linear args, float ret);

    public delegate float linear_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_clerp
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void clerp_BeforeArgs(Params_clerp args);

    public delegate float clerp_AfterArgs(Params_clerp args, float ret);

    public delegate float clerp_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_spring
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void spring_BeforeArgs(Params_spring args);

    public delegate float spring_AfterArgs(Params_spring args, float ret);

    public delegate float spring_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInQuad
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInQuad_BeforeArgs(Params_easeInQuad args);

    public delegate float easeInQuad_AfterArgs(Params_easeInQuad args, float ret);

    public delegate float easeInQuad_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutQuad
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutQuad_BeforeArgs(Params_easeOutQuad args);

    public delegate float easeOutQuad_AfterArgs(Params_easeOutQuad args, float ret);

    public delegate float easeOutQuad_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutQuad
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutQuad_BeforeArgs(Params_easeInOutQuad args);

    public delegate float easeInOutQuad_AfterArgs(Params_easeInOutQuad args, float ret);

    public delegate float easeInOutQuad_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInCubic
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInCubic_BeforeArgs(Params_easeInCubic args);

    public delegate float easeInCubic_AfterArgs(Params_easeInCubic args, float ret);

    public delegate float easeInCubic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutCubic
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutCubic_BeforeArgs(Params_easeOutCubic args);

    public delegate float easeOutCubic_AfterArgs(Params_easeOutCubic args, float ret);

    public delegate float easeOutCubic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutCubic
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutCubic_BeforeArgs(Params_easeInOutCubic args);

    public delegate float easeInOutCubic_AfterArgs(Params_easeInOutCubic args, float ret);

    public delegate float easeInOutCubic_WithArgs(Func<iTween, float, float, float, float> orig,
        iTween self, float start, float end, float value);

    public sealed class Params_easeInQuart
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInQuart_BeforeArgs(Params_easeInQuart args);

    public delegate float easeInQuart_AfterArgs(Params_easeInQuart args, float ret);

    public delegate float easeInQuart_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutQuart
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutQuart_BeforeArgs(Params_easeOutQuart args);

    public delegate float easeOutQuart_AfterArgs(Params_easeOutQuart args, float ret);

    public delegate float easeOutQuart_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutQuart
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutQuart_BeforeArgs(Params_easeInOutQuart args);

    public delegate float easeInOutQuart_AfterArgs(Params_easeInOutQuart args, float ret);

    public delegate float easeInOutQuart_WithArgs(Func<iTween, float, float, float, float> orig,
        iTween self, float start, float end, float value);

    public sealed class Params_easeInQuint
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInQuint_BeforeArgs(Params_easeInQuint args);

    public delegate float easeInQuint_AfterArgs(Params_easeInQuint args, float ret);

    public delegate float easeInQuint_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutQuint
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutQuint_BeforeArgs(Params_easeOutQuint args);

    public delegate float easeOutQuint_AfterArgs(Params_easeOutQuint args, float ret);

    public delegate float easeOutQuint_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutQuint
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutQuint_BeforeArgs(Params_easeInOutQuint args);

    public delegate float easeInOutQuint_AfterArgs(Params_easeInOutQuint args, float ret);

    public delegate float easeInOutQuint_WithArgs(Func<iTween, float, float, float, float> orig,
        iTween self, float start, float end, float value);

    public sealed class Params_easeInSine
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInSine_BeforeArgs(Params_easeInSine args);

    public delegate float easeInSine_AfterArgs(Params_easeInSine args, float ret);

    public delegate float easeInSine_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutSine
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutSine_BeforeArgs(Params_easeOutSine args);

    public delegate float easeOutSine_AfterArgs(Params_easeOutSine args, float ret);

    public delegate float easeOutSine_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutSine
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutSine_BeforeArgs(Params_easeInOutSine args);

    public delegate float easeInOutSine_AfterArgs(Params_easeInOutSine args, float ret);

    public delegate float easeInOutSine_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInExpo
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInExpo_BeforeArgs(Params_easeInExpo args);

    public delegate float easeInExpo_AfterArgs(Params_easeInExpo args, float ret);

    public delegate float easeInExpo_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutExpo
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutExpo_BeforeArgs(Params_easeOutExpo args);

    public delegate float easeOutExpo_AfterArgs(Params_easeOutExpo args, float ret);

    public delegate float easeOutExpo_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutExpo
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutExpo_BeforeArgs(Params_easeInOutExpo args);

    public delegate float easeInOutExpo_AfterArgs(Params_easeInOutExpo args, float ret);

    public delegate float easeInOutExpo_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInCirc
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInCirc_BeforeArgs(Params_easeInCirc args);

    public delegate float easeInCirc_AfterArgs(Params_easeInCirc args, float ret);

    public delegate float easeInCirc_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutCirc
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutCirc_BeforeArgs(Params_easeOutCirc args);

    public delegate float easeOutCirc_AfterArgs(Params_easeOutCirc args, float ret);

    public delegate float easeOutCirc_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutCirc
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutCirc_BeforeArgs(Params_easeInOutCirc args);

    public delegate float easeInOutCirc_AfterArgs(Params_easeInOutCirc args, float ret);

    public delegate float easeInOutCirc_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInBounce
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInBounce_BeforeArgs(Params_easeInBounce args);

    public delegate float easeInBounce_AfterArgs(Params_easeInBounce args, float ret);

    public delegate float easeInBounce_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutBounce
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutBounce_BeforeArgs(Params_easeOutBounce args);

    public delegate float easeOutBounce_AfterArgs(Params_easeOutBounce args, float ret);

    public delegate float easeOutBounce_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutBounce
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutBounce_BeforeArgs(Params_easeInOutBounce args);

    public delegate float easeInOutBounce_AfterArgs(Params_easeInOutBounce args, float ret);

    public delegate float easeInOutBounce_WithArgs(Func<iTween, float, float, float, float> orig,
        iTween self, float start, float end, float value);

    public sealed class Params_easeInBack
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInBack_BeforeArgs(Params_easeInBack args);

    public delegate float easeInBack_AfterArgs(Params_easeInBack args, float ret);

    public delegate float easeInBack_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutBack
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutBack_BeforeArgs(Params_easeOutBack args);

    public delegate float easeOutBack_AfterArgs(Params_easeOutBack args, float ret);

    public delegate float easeOutBack_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeInOutBack
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutBack_BeforeArgs(Params_easeInOutBack args);

    public delegate float easeInOutBack_AfterArgs(Params_easeInOutBack args, float ret);

    public delegate float easeInOutBack_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_punch
    {
        public iTween self;
        public float amplitude;
        public float value;
    }

    public delegate void punch_BeforeArgs(Params_punch args);

    public delegate float punch_AfterArgs(Params_punch args, float ret);

    public delegate float punch_WithArgs(Func<iTween, float, float, float> orig, iTween self,
        float amplitude, float value);

    public sealed class Params_easeInElastic
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInElastic_BeforeArgs(Params_easeInElastic args);

    public delegate float easeInElastic_AfterArgs(Params_easeInElastic args, float ret);

    public delegate float easeInElastic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
        float start, float end, float value);

    public sealed class Params_easeOutElastic
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeOutElastic_BeforeArgs(Params_easeOutElastic args);

    public delegate float easeOutElastic_AfterArgs(Params_easeOutElastic args, float ret);

    public delegate float easeOutElastic_WithArgs(Func<iTween, float, float, float, float> orig,
        iTween self, float start, float end, float value);

    public sealed class Params_easeInOutElastic
    {
        public iTween self;
        public float start;
        public float end;
        public float value;
    }

    public delegate void easeInOutElastic_BeforeArgs(Params_easeInOutElastic args);

    public delegate float easeInOutElastic_AfterArgs(Params_easeInOutElastic args, float ret);

    public delegate float easeInOutElastic_WithArgs(Func<iTween, float, float, float, float> orig,
        iTween self, float start, float end, float value);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
    public static event Delegates.Init_BeforeArgs Init
    {
        add
        {
            HookHandler._beforeInit +=
                valu
            e
                HookHandle
            r
                .HookIn
                i
            t
                );
        }
        remove => HookHandler._beforeInit -= value;
    }

    public static event Delegates.CameraFadeFrom_float_float_BeforeArgs CameraFadeFrom_float_float
    {
        add
        {
            H
                o
            kHan
                d
            le r._bef
                reCame
            aFade
                rom_float_floa t += val
            e;
            HookHand
                l
            er.Hook
                C
            a
                era
            Fa deFrom
            float
                f
            lo at();
        }
        remove => HookHandler._beforeCameraFadeFrom_float_float -= value;
    }

    public static event Delegates.CameraFadeFrom_Hashtable_BeforeArgs CameraFadeFrom_Hashtable
    {
        add
        {
            ookHandler.
                _
                beforeC
            meraFadeFrom_Ha
                s
            htab
                l
            e += value;


            HookHan
                d
            l
            e
                .Hook
                C
            meraFadeFro
                m
            _Hashta
                b
            e();
        }
        remove => HookHandler._beforeCameraFadeFrom_Hashtable -= value;
    }

    public static event Delegates.CameraFadeTo_float_float_BeforeArgs CameraFadeTo_float_float
    {
        add
        {
            Hoo
                Hand
            er._beforeCameraF
                a
            deTo_float_fl
            at +
                =
                v alue;

            ookHandl
            r.Ho
                kCameraFadeTo_fl
            o
            at_float();
        }
        remove => HookHandler._beforeCameraFadeTo_float_float -= value;
    }

    public static event Delegates.CameraFadeTo_Hashtable_BeforeArgs CameraFadeTo_Hashtable
    {
        add
        {
            HookHand
            er._
                b
            ef oreCam
            raFade
                o_Has
            table += value;
            H oo kHandl
            r.Hook
                C
            ameraFadeTo
                _
            Hashtable
                );
        }
        remove => HookHandler._beforeCameraFadeTo_Hashtable -= value;
    }

    public static event Delegates.ValueTo_BeforeArgs ValueTo
    {
        add
        {
            Hoo
                k
            Handler._beforeV
                lueT
            o
                += val
            u
                e;
            HookHand
                l
            er.HookVa
                ueT
            o
                ();
        }
        remove => HookHandler._beforeValueTo -= value;
    }

    public static event Delegates.FadeFrom_GameObject_float_float_BeforeArgs FadeFrom_GameObject_float_float
    {
        add
        {
            H
                o
            ok Handle
                ._before
                adeF
            om_GameObject_float_f
                l
            o
            at += va
            ue;
            Hook
                andler
            HookFadeFrom_GameObj
                e
            ct_flo
                t_f
            l
                oa t();
        }
        remove => HookHandler._beforeFadeFrom_GameObject_float_float -= value;
    }

    public static event Delegates.FadeFrom_GameObject_Hashtable_BeforeArgs FadeFrom_GameObject_Hashtable
    {
        add
        {
            H
                okHa
            n
                dl er._be
                oreFadeF
            om_G
            meObject_Hashtable +=
                v
            alue;
            HookHandler.H
                okFa
            d
                eF rom_Ga
                eObject_
            asht
            ble();
        }
        remove => HookHandler._beforeFadeFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.FadeTo_GameObject_float_float_BeforeArgs FadeTo_GameObject_float_float
    {
        add
        {
            HookHandle
                ._be
                f
            or eFadeT
            _GameObj
                ct_f
            oat_float += value;
            HookHan
                d
            ler.HookFadeTo_GameObjec
                _flo
            a
                t_ float(
                ;
        }
        remove => HookHandler._beforeFadeTo_GameObject_float_float -= value;
    }

    public static event Delegates.FadeTo_GameObject_Hashtable_BeforeArgs FadeTo_GameObject_Hashtable
    {
        add
        {
            HookHandler
                .
                _beforeFadeTo_GameObjec
                _Has
            h
                ta ble +=
                value;
            H
                okHa
            dler.HookFadeTo_GameObject
                _
            Hashtable();
        }
        remove => HookHandler._beforeFadeTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.ColorFrom_GameObject_Color_float_BeforeArgs
        ColorFrom_GameObject_Color_float
        {
            add
            {
                H ookHan
                ler._bef
                    reCo
                orFrom_GameObject_C
                    o
                lor_float += va
                ue;

                H
                    oo kHandl
                r.HookCo
                    orFr
                m_GameObject_Color
                    _
                float();
            }
            remove => HookHandler._beforeColorFrom_GameObject_Color_float -= value;
        }

    public static event Delegates.ColorFrom_GameObject_Hashtable_BeforeArgs ColorFrom_GameObject_Hashtable
    {
        add
        {
            Hoo
                Hand
            er._beforeColorFro
                m
            _GameObject_Ha
                htab
            l
            e += val
            e;
            HookH
            ndle
                .HookColorFrom_Ga
                m
            eObject_Hashta
            le()
                ;
        }
        remove => HookHandler._beforeColorFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.ColorTo_GameObject_Color_float_BeforeArgs ColorTo_GameObject_Color_float
    {
        add
        {
            HookHandler._before
                olor
            T
                o_ GameOb
                ect_Colo
            _flo
            t += value;
            HookHandler
                .
                HookColorTo_GameObje
                t_Co
            l
                or _float
                );
        }
        remove => HookHandler._beforeColorTo_GameObject_Color_float -= value;
    }

    public static event Delegates.ColorTo_GameObject_Hashtable_BeforeArgs ColorTo_GameObject_Hashtable
    {
        add
        {
            H
                o
            okHandler._beforeColor
                o_Ga
            m
                eO bject_
            ashtable
                += v
            lue;
            HookHandler.HookColo
                r
            To_GameObject_Hashtabl
                ();
        }
        remove => HookHandler._beforeColorTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.AudioFrom_GameObject_float_float_float_BeforeArgs
        AudioFrom_GameObject_float_float_float
        {
            add
            {
                H
                ookHandler._beforeAudio
                    rom_
                G
                    am eObjec
                    _float_f
                oat_
                loat += value;
                HookHandler
                    .
                    HookAudioFrom_GameObjec
                    _flo
                a
                    t_ float_
                loat();
            }
            remove => HookHandler._beforeAudioFrom_GameObject_float_float_float -= value;
        }

    public static event Delegates.AudioFrom_GameObject_Hashtable_BeforeArgs AudioFrom_GameObject_Hashtable
    {
        add
        {
            Hoo
                k
            Ha ndler.
                beforeAu
                ioFr
            m_GameObject_Hashtabl
            e
                += value;
            HookHan
            ler.
                H
                oo kAudio
                rom_Game
            bjec
            _Hashtable();
        }
        remove => HookHandler._beforeAudioFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.AudioTo_GameObject_float_float_float_BeforeArgs
        AudioTo_GameObject_float_float_float
        {
            add
            {
                HookHandler.
                    befo
                    r
                eA udioTo
                GameObje
                    t_flo
                t_float_float +=
                    value;
                HookHa
                dler
                    .
                    ookAu
                    ioT
                o
                    _G ameObj
                    ct_float
                float
                float();
            }
            remove => HookHandler._beforeAudioTo_GameObject_float_float_float -= value;
        }

    public static event Delegates.AudioTo_GameObject_Hashtable_BeforeArgs AudioTo_GameObject_Hashtable
    {
        add
        {
            Hook
                and
            le r._bef
                reAud
            oTo_G
                am eO bject_
            ashtable
                += v
            lue;
            HookHandler
                .
                HookAudioTo_
                ameO
            b
                je ct_Has
            table();
        }
        remove => HookHandler._beforeAudioTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.Stab_GameObject_AudioClip_float_BeforeArgs Stab_GameObject_AudioClip_float
    {
        add
        {
            Ho okHand
            er._be
                oreSt
            b_GameObject_A ud ioClip
            float
                = va
            lu e;
            Hoo
                Handl
            r.Hoo
                kS tab_Ga
                eObje
            t_A
                ud ioClip
            float
                );
        }
        remove => HookHandler._beforeStab_GameObject_AudioClip_float -= value;
    }

    public static event Delegates.Stab_GameObject_Hashtable_BeforeArgs Stab_GameObject_Hashtable
    {
        add
        {
            Ho
                o
            kHandl
            e
                ._bef
                o
            eStab
                _
            ameOb
                j
            ct_Ha
                s
            tabl
            e
                += val
            e;
            H
                o
            kHand
            er.Ho
                o
            Stab_
                ame
            O
                ject_
            ashta
                b
            le();
        }
        remove => HookHandler._beforeStab_GameObject_Hashtable -= value;
    }

    public static event Delegates.LookFrom_GameObject_Vector3_float_BeforeArgs
        LookFrom_GameObject_Vector3_float
        {
            add
            {
                Hoo
                Handler.
                    befor
                    LookFrom_GameObject_
                V
                ector3_float += v
                lue;


                ookHa
                    dle
                r
                    .H ookLoo
                From_Gam
                    Objec
                _Vector3_float();
            }
            remove => HookHandler._beforeLookFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.LookFrom_GameObject_Hashtable_BeforeArgs LookFrom_GameObject_Hashtable
    {
        add
        {
            ookHa
                dle
            r._befor
                LookF
            om_Ga
                me Ob ject_H
                shtable
                    = va
            ue;
            HookHandler.HookLo
                o
            kFrom_GameObject_H
                shta
            b
            le();
        }
        remove => HookHandler._beforeLookFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.LookTo_GameObject_Vector3_float_BeforeArgs LookTo_GameObject_Vector3_float
    {
        add
        {
            Hook
                H
            ndler
                _be
            f
                reLoo
            To_Ga
                m
            eO bject_
            ector3
            float
                += value;
            HookHandler.H ookLoo
            To_Gam
                Obje
            ct _Vecto
            3_flo
            t();
        }
        remove => HookHandler._beforeLookTo_GameObject_Vector3_float -= value;
    }

    public static event Delegates.LookTo_GameObject_Hashtable_BeforeArgs LookTo_GameObject_Hashtable
    {
        add
        {
            H
                okHa
            n
            ler._
                efo
            r
                eL ookTo_
                ameObjec
            _Hash
            able += value;
            HookHan
                d
            ler.
                H
                ookLoo
            k
                o_Gam
            e
                bject
            _
                ashta
            b
            e();
        }
        remove => HookHandler._beforeLookTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveTo_GameObject_Vector3_float_BeforeArgs MoveTo_GameObject_Vector3_float
    {
        add
        {
            H
            okHandle
                ._be
                oreMoveTo_GameObject_V
            e
            ctor3_float += val
            e;
            H
                o
            ok Handle
                .HookMov
                To_Ga
            eObject_Vector3_float
            (
            );
        }
        remove => HookHandler._beforeMoveTo_GameObject_Vector3_float -= value;
    }

    public static event Delegates.MoveTo_GameObject_Hashtable_BeforeArgs MoveTo_GameObject_Hashtable
    {
        add
        {
            ookHan
            ler._
                eforeMoveTo_GameObje ct _Hasht
            ble +=
                valu
            e;
            HookH
                ndler
            HookM
                ov eTo_Ga
                eObje
            t_H
                as htable
                );
        }
        remove => HookHandler._beforeMoveTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveFrom_GameObject_Vector3_float_BeforeArgs
        MoveFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMo
                    v
                eFro
                    m
                _GameO
                    b
                ect_V
                    e
                tor3_
                    f
                oat +
                    =
                    value
                    ;
                Hook
                    H
                ndler.
                    ookM
                    o
                eFrom
                    GameO
                b
                    ect_V
                cto
                    r
                _floa
                    ();
            }
            remove => HookHandler._beforeMoveFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.MoveFrom_GameObject_Hashtable_BeforeArgs MoveFrom_GameObject_Hashtable
    {
        add
        {
            HookHandl
            r._b
                e
            fo reMove
            rom_Game
                bject
            Hashtable += value;
            Hook
                H
            andler.HookMoveFrom_G
                meOb
            j
                ct_Ha
            hta
                b
            le();
        }
        remove => HookHandler._beforeMoveFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveAdd_GameObject_Vector3_float_BeforeArgs
        MoveAdd_GameObject_Vector3_float
        {
            add
            {
                HookH
                    ndle
                r._befor
                    MoveA
                d_Gam
                    eO bject_
                    ector
                _fl
                    oa t += v
                lue;

                ookHa
                    nd le r.Hook
                    oveAdd_G
                meOb
                ect_Vector3_float();
            }
            remove => HookHandler._beforeMoveAdd_GameObject_Vector3_float -= value;
        }

    public static event Delegates.MoveAdd_GameObject_Hashtable_BeforeArgs MoveAdd_GameObject_Hashtable
    {
        add
        {
            H
                okHan
            d
            er._
                b
            foreMo
                eAdd
            _
                ameOb
            ect_H
                a
            htabl
                +=
                alue;
            HookH
                a
            nd ler.Ho
                kMoveA
            d_Gam
            Object_Hashtable();
        }
        remove => HookHandler._beforeMoveAdd_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveBy_GameObject_Vector3_float_BeforeArgs MoveBy_GameObject_Vector3_float
    {
        add
        {
            HookHandler.
                _
                beforeMoveBy_GameOb
            ect_
                V
            ctor3
                flo
            a
            t += val
            e;
            HookH
                ndler
            HookMoveBy_GameObject
                _
            Vect
                o
            r3_flo
            a
                ();
        }
        remove => HookHandler._beforeMoveBy_GameObject_Vector3_float -= value;
    }

    public static event Delegates.MoveBy_GameObject_Hashtable_BeforeArgs MoveBy_GameObject_Hashtable
    {
        add
        {
            Ho okHand
            er._b
                foreM
            ov eB y_Game
                bject_Ha
            htab
            e += value;
            HookHandler.H
                o
            okMoveBy_GameObject_H
                shta
            b
            le();
        }
        remove => HookHandler._beforeMoveBy_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleTo_GameObject_Vector3_float_BeforeArgs
        ScaleTo_GameObject_Vector3_float
        {
            add
            {
                H
                    okHan
                ler._
                    b
                foreS
                    ale
                T
                    _Game
                bject
                    _
                Ve ctor3_
                loat +
                    valu
                    ;
                HookHandler.HookS ca leTo_G
                    meObje
                t_Ve
                    ct or3_fl
                at();
            }
            remove => HookHandler._beforeScaleTo_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleTo_GameObject_Hashtable_BeforeArgs ScaleTo_GameObject_Hashtable
    {
        add
        {
            H
                okHan
            ler
                .
                _b eforeS
            aleTo_Ga
                eObje
            t_Hashtable += value
                ;

            Hoo
                k
            Handle
                r
            HookS
                c
            leTo_
                G
            meObj
                e
            t_Has
                h
            able
                    (
                ;
        }
        remove => HookHandler._beforeScaleTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleFrom_GameObject_Vector3_float_BeforeArgs
        ScaleFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeScal
                    e
                From_GameObject_Vec
                    or3_
                f
                    lo at +=
                    alue;
                Ho
                    kHand
                er.HookScaleFrom_GameO
                    b
                ject_Vector3_float(
                    ;
            }
            remove => HookHandler._beforeScaleFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleFrom_GameObject_Hashtable_BeforeArgs ScaleFrom_GameObject_Hashtable
    {
        add
        {
            HookHandle r._befor
                ScaleF
            om_G
                am eObjec
                _Hash
            able
                += value

            Hook
                and
            le r.Hook
                caleF
            om_Ga
                me Ob ject_H
            shtable(
                ;
        }
        remove => HookHandler._beforeScaleFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleAdd_GameObject_Vector3_float_BeforeArgs
        ScaleAdd_GameObject_Vector3_float
        {
            add
            {
                Hoo
                    k
                Handle
                    r
                _befo
                    r
                Scale
                    A
                d_Gam
                    e
                bject
                    _
                ecto
                    r
                _float
                    += v
                a
                    ue;
                H
                    okHan
                d
                er.Ho
                    kSc
                a
                    eAdd_
                ameOb
                    j
                ec t_Vect
                r3_flo
                t();
            }
            remove => HookHandler._beforeScaleAdd_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleAdd_GameObject_Hashtable_BeforeArgs ScaleAdd_GameObject_Hashtable
    {
        add
        {
            Hoo
            Handler._beforeScale
                A
            dd_GameObject_Has
                tabl
            e
                += va
            ue;


            Ho okHand
            er.HookS
                aleAd
            _GameObject_Hashtab
                l
            e();
        }
        remove => HookHandler._beforeScaleAdd_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleBy_GameObject_Vector3_float_BeforeArgs
        ScaleBy_GameObject_Vector3_float
        {
            add
            {
                H
                    oo kHandl
                r._be
                    oreSc
                al eB y_Game
                    bject_Ve
                tor3
                float += value;
                HookHa
                    n
                dler.HookScaleBy_G
                    meOb
                j
                    ec t_Vect
                    r3_float
                    );
            }
            remove => HookHandler._beforeScaleBy_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleBy_GameObject_Hashtable_BeforeArgs ScaleBy_GameObject_Hashtable
    {
        add
        {
            Hoo
                k
            andle
                ._bef
                o
            re ScaleB
            _GameO
                ject_
            ashtable += value;
            Ho ok Handle
                .HookS
                aleB
            y_ GameOb
            ect_H
                shtab
            le();
        }
        remove => HookHandler._beforeScaleBy_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateTo_GameObject_Vector3_float_BeforeArgs
        RotateTo_GameObject_Vector3_float
        {
            add
            {
                Ho
                    o
                kH andler
                _beforeR
                    tateT
                _GameObject_Vector3_fl
                    o
                at +
                    =
                    value
                    ;
                HookH
                    a
                dler.
                    H
                    okRot
                a
                    eTo_G
                a
                    eObj
                e
                    t_Vect
                r3_f
                    l
                at();
            }
            remove => HookHandler._beforeRotateTo_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateTo_GameObject_Hashtable_BeforeArgs RotateTo_GameObject_Hashtable
    {
        add
        {
            HookHan
                d
            ler._beforeRotate
                o_Ga
            m
                eO bject_
            ashtable
                += va
            ue;
            HookHandler.Hook
                R
            otateTo_GameObjec
                _Has
            h
            able(
                ;
        }
        remove => HookHandler._beforeRotateTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateFrom_GameObject_Vector3_float_BeforeArgs
        RotateFrom_GameObject_Vector3_float
        {
            add
            {
                Hoo
                    Hand
                le r._bef
                    reRot
                teFro
                    m_ GameOb
                    ect_V
                cto
                    r3 _float
                    += va
                ue;
                H
                    oo kH andler
                HookRota
                    eFro
                _GameObject_Vector3_fl
                    o
                at();
            }
            remove => HookHandler._beforeRotateFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateFrom_GameObject_Hashtable_BeforeArgs RotateFrom_GameObject_Hashtable
    {
        add
        {
            Hook
                andl
            e
                ._bef
                reRot
            a
                eFrom
            Gam
                e
            bject
                Hasht
            a
                bl e += v
            lue;
            H
                okHan
            ler.HookRotateFrom_Ga me Object
                Hashta
            le()
                ;
        }
        remove => HookHandler._beforeRotateFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateAdd_GameObject_Vector3_float_BeforeArgs
        RotateAdd_GameObject_Vector3_float
        {
            add
            {
                HookH
                    ndle
                r
                    _befo
                eRo
                    t
                at eAdd_G
                meObject
                    Vecto
                3_float += value;
                Hook
                    H
                andl
                    e
                r.Hook
                    R
                tateA
                    d
                _Game
                    O
                ject_
                    V
                ctor3
                    _
                loat
                        (
                    ;
            }
            remove => HookHandler._beforeRotateAdd_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateAdd_GameObject_Hashtable_BeforeArgs RotateAdd_GameObject_Hashtable
    {
        add
        {
            HookHandler._beforeRo
                t
            ateAdd_GameObject
                Hash
            t
                ab le +=
                alue;
            Ho
                kHand
            er.HookRotateAdd_Gam
                e
            Object_Hashtable(
                ;
        }
        remove => HookHandler._beforeRotateAdd_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateBy_GameObject_Vector3_float_BeforeArgs
        RotateBy_GameObject_Vector3_float
        {
            add
            {
                Hoo kH andler
                    _befor
                Rota
                    te By_Gam
                    Objec
                _Vect
                    or 3_floa
                    += v
                lue
                    ;
                HookHa
                dler.
                    ookRo
                    ta te By_Gam
                Object_V
                    ctor
                _float();
            }
            remove => HookHandler._beforeRotateBy_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateBy_GameObject_Hashtable_BeforeArgs RotateBy_GameObject_Hashtable
    {
        add
        {
            H
                o
            kHand
                l
            r._be
                f
            reRo
                t
            teBy_G
                meOb
            j
                ct_Ha
            htabl
            e
                += va
            ue;


            ookHa
            dler.
                H
                oo kRotat
                By_Gam
            Objec
            _Hashtable();
        }
        remove => HookHandler._beforeRotateBy_GameObject_Hashtable -= value;
    }

    public static event Delegates.ShakePosition_GameObject_Vector3_float_BeforeArgs
        ShakePosition_GameObject_Vector3_float
        {
            add
            {
                HookHan
                    d
                ler._beforeShakePosi
                    ion_
                G
                    meObj
                ct_
                    V
                ec tor3_f
                oat += v
                lue;

                ookHandler.HookShakePo
                    s
                itio
                    n
                _GameO
                    b
                ect_V
                    e
                tor3_
                    f
                oat()
                    ;
            }
            remove => HookHandler._beforeShakePosition_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ShakePosition_GameObject_Hashtable_BeforeArgs
        ShakePosition_GameObject_Hashtable
        {
            add
            {
                Hook
                andler._beforeShakePosi
                    t
                ion_GameObject_Hash
                able
                    += value

                HookHan
                ler.H
                    okShakePosition_GameOb
                j
                ect_Hashtable();
            }
            remove => HookHandler._beforeShakePosition_GameObject_Hashtable -= value;
        }

    public static event Delegates.ShakeScale_GameObject_Vector3_float_BeforeArgs
        ShakeScale_GameObject_Vector3_float
        {
            add
            {
                Hook Ha ndler.
                    before
                    hake
                Sc ale_Ga
                eObje
                    t_Vec
                to r3_flo
                t +=
                    alu
                e;
                HookH
                    ndler
                HookS
                    ha ke Scale_
                ameObjec
                    _Vec
                or3_float();
            }
            remove => HookHandler._beforeShakeScale_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ShakeScale_GameObject_Hashtable_BeforeArgs ShakeScale_GameObject_Hashtable
    {
        add
        {
            Ho
                o
            Handl
            e
                ._bef
                o
            eSha
                k
            Scale_
                ameO
            b
                ect_H
            shtab
            l
                += v
            lue
                ;
            HookH
            ndler
                .
                Ho okShak
            Scale_
                ameOb
            ect_Hashtable();
        }
        remove => HookHandler._beforeShakeScale_GameObject_Hashtable -= value;
    }

    public static event Delegates.ShakeRotation_GameObject_Vector3_float_BeforeArgs
        ShakeRotation_GameObject_Vector3_float
        {
            add
            {
                HookHandle
                r
                    ._beforeShakeRotation_
                    ameO
                b
                    ect_V
                cto
                    r
                3_ float
                    = value;
                HookH
                ndler.HookShakeRotation_
                    G
                ameO
                    b
                ject_V
                    e
                tor3_
                    f
                oat()
                    ;
            }
            remove => HookHandler._beforeShakeRotation_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ShakeRotation_GameObject_Hashtable_BeforeArgs
        ShakeRotation_GameObject_Hashtable
        {
            add
            {
                Hook
                    andl
                r._beforeShakeRotatio
                    n
                _GameObject_Hasht
                ble
                    +
                    = value;
                HookHand
                er.Ho
                    kShakeRotation_GameO
                b
                ject_Hashtable();
            }
            remove => HookHandler._beforeShakeRotation_GameObject_Hashtable -= value;
        }

    public static event Delegates.PunchPosition_GameObject_Vector3_float_BeforeArgs
        PunchPosition_GameObject_Vector3_float
        {
            add
            {
                HookHa
                dler
                    ._ before
                unchP
                    sitio
                n_ GameOb
                ect_V
                    cto
                r3 _float
                    += va
                ue;
                H
                    oo kH andler
                HookPunc
                    Posi
                ion_GameObject_Vector3
                    _
                float();
            }
            remove => HookHandler._beforePunchPosition_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PunchPosition_GameObject_Hashtable_BeforeArgs
        PunchPosition_GameObject_Hashtable
        {
            add
            {
                Hook
                    andle
                r
                    _befo
                ePu
                    n
                hPosi
                    ion_G
                a
                    me Object
                    Hashta
                le +=
                    value;
                HookHandler.Ho ok PunchP
                    sition
                Game
                    Ob ject_H
                    shtab
                e();
            }
            remove => HookHandler._beforePunchPosition_GameObject_Hashtable -= value;
        }

    public static event Delegates.PunchRotation_GameObject_Vector3_float_BeforeArgs
        PunchRotation_GameObject_Vector3_float
        {
            add
            {
                H
                okHandle
                    ._bef
                    rePunchRotation_GameOb
                j
                    ect_
                V
                    ector3
                _
                loat
                    +
                    valu
                e
                    Hook
                H
                ndler
                    .
                    ookP
                    u
                chRota
                    ion_
                G
                    meObj
                ct_Ve
                    c
                or3_f
                    oat
                (
                    ;
            }
            remove => HookHandler._beforePunchRotation_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PunchRotation_GameObject_Hashtable_BeforeArgs
        PunchRotation_GameObject_Hashtable
        {
            add
            {
                HookHa
                    n
                dler._before
                    unch
                R
                    tatio
                _Ga
                    m
                eO bject_
                ashtable
                    += va
                ue;
                HookHandle
                r
                    .Hoo
                    k
                PunchR
                    o
                ation
                    _
                ameOb
                    j
                ct_Ha
                    s
                tabl
                    e
                    );
            }
            remove => HookHandler._beforePunchRotation_GameObject_Hashtable -= value;
        }

    public static event Delegates.PunchScale_GameObject_Vector3_float_BeforeArgs
        PunchScale_GameObject_Vector3_float
        {
            add
            {
                HookHandl
                    e
                r._beforePunchScale_
                    ameO
                b
                    je ct_Vec
                or3_floa
                    += v
                lue;
                HookHandler.HookPu
                    n
                chScale_GameObject_V
                    ctor
                3
                float
                    );
            }
            remove => HookHandler._beforePunchScale_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PunchScale_GameObject_Hashtable_BeforeArgs PunchScale_GameObject_Hashtable
    {
        add
        {
            Hoo
            Handle
                ._be
                fo rePunc
                Scale
            GameO
                bj ect_Ha
            htabl
                +=
                v alue;

            ookHa
            dler.
                Ho ok PunchS
                ale_Game
            bjec
            _Hashtable();
        }
        remove => HookHandler._beforePunchScale_GameObject_Hashtable -= value;
    }

    public static event Delegates.GenerateTargets_BeforeArgs GenerateTargets
    {
        add
        {
            HookHandler._bef
                o
            reGe
                n
            erateT
                a
            gets
                +
                valu
            e
                Hook
            H
            ndler
                .
                ookG
                e
            erateT
                rget
            s
                );
        }
        remove => HookHandler._beforeGenerateTargets -= value;
    }

    public static event Delegates.GenerateRectTargets_BeforeArgs GenerateRectTargets
    {
        add
        {
            Ho
                kHand
            le r._befor
                Generate
            ectT
            rgets += value;
            HookHandler
                .HookGenerateRectTargets
                );
        }
        remove => HookHandler._beforeGenerateRectTargets -= value;
    }

    public static event Delegates.GenerateColorTargets_BeforeArgs GenerateColorTargets
    {
        add
        {
            ookHa
                n
            ler._
                b
            foreG
                e
            erate
                C
            lorT
                a
            gets +
                val
            u
                ;
            Hoo
                Handl
            e
                .Hook
                ene
            r
                teCol
            rTarg
                e
            ts();
        }
        remove => HookHandler._beforeGenerateColorTargets -= value;
    }

    public static event Delegates.GenerateVector3Targets_BeforeArgs GenerateVector3Targets
    {
        add
        {
            HookHandle
                ._bef or eGen ea teVector3Ta
                r
            gets += val
            e;
            ookHa n
            r.HookGener at e
                Vector3 Ta rg t
                s) ;
        }
        remove => HookHandler._beforeGenerateVector3Targets -= value;
    }

    public static event Delegates.GenerateVector2Targets_BeforeArgs GenerateVector2Targets
    {
        add
        {
            H ook
            H
            andle._befor Genera eVector2Targets
                +=
                valu;

            H ookHandle r.Ho
                o
            kGene ra te ecto r2Targets );
        }
        remove => HookHandler._beforeGenerateVector2Targets -= value;
    }

    public static event Delegates.GenerateFloatTargets_BeforeArgs GenerateFloatTargets
    {
        add
        {
            HookHandler._befo re Gene re loatTarget
            s += value;
            ookHandler.HookG en erate Fl o
                tT
            rgets
                (
        }
        remove => HookHandler._beforeGenerateFloatTargets -= value;
    }

    public static event Delegates.GenerateColorToTargets_BeforeArgs GenerateColorToTargets
    {
        add
        {
            HookHandler._beforeGenerateC
            lorToTargets += value;
            Ho ok Hand lr.Hoo Gener te
                C
            olorToTargets();
        }
        remove => HookHandler._beforeGenerateColorToTargets -= value;
    }

    public static event Delegates.GenerateAudioToTargets_BeforeArgs GenerateAudioToTargets
    {
        add
        {
            Hook
            andler._b
                e
            foreGenerateAudioToTargets += val
            e;
            HookHandler.HookGene ra teAu do Targets()
        }
        remove => HookHandler._beforeGenerateAudioToTargets -= value;
    }

    public static event Delegates.GenerateStabTargets_BeforeArgs GenerateStabTargets
    {
        add
        {
            H
                oo kH andler
            _befor
                Gener
            teStabTar
                g
            ets += value;
            Hook
            andler.H oo kGen ea teSt ab Targets
            (
            );
        }
        remove => HookHandler._beforeGenerateStabTargets -= value;
    }

    public static event Delegates.GenerateLookToTargets_BeforeArgs GenerateLookToTargets
    {
        add
        {
            HookHandler._beforeGenera
            eLookToTargets += value;
            HookHan dl er.H ok Ge ne rateLookT T
            argets()
        }
        remove => HookHandler._beforeGenerateLookToTargets -= value;
    }

    public static event Delegates.GenerateMoveToPathTargets_BeforeArgs GenerateMoveToPathTargets
    {
        add
        {
            H
                okHan
            dl er._befo
                eGener
            teMov
                ToPathTar
            g
            ets += value;
            HookHandler.HookGenerateMo
            eToPathTargets();
        }
        remove => HookHandler._beforeGenerateMoveToPathTargets -= value;
    }

    public static event Delegates.GenerateMoveToTargets_BeforeArgs GenerateMoveToTargets
    {
        add
        {
            Hoo
                k
            Handler._beforeGenerateMoveToTargets
                +=
                value
                ;
            Ho okHand
            er.Hoo
                Gener
            teMoveToT
                a
            rgets();
        }
        remove => HookHandler._beforeGenerateMoveToTargets -= value;
    }

    public static event Delegates.GenerateMoveByTargets_BeforeArgs GenerateMoveByTargets
    {
        add
        {
            HookHandler.befor eG enerate
                Mo eB yT argets
                +=
                value;
            Hook
                H
            andler.HookGenerateMoveByTargets();
        }
        remove => HookHandler._beforeGenerateMoveByTargets -= value;
    }

    public static event Delegates.GenerateScaleToTargets_BeforeArgs GenerateScaleToTargets
    {
        add
        {
            Ho ok Handl
            r._ efore
            Ge ne ateSc leTo
            T
            argets += value;
            HookH an dler.Hook
                G
            e
                ne ra teScal
            To
            argets();
        }
        remove => HookHandler._beforeGenerateScaleToTargets -= value;
    }

    public static event Delegates.GenerateScaleByTargets_BeforeArgs GenerateScaleByTargets
    {
        add
        {
            Ho kHandler _be
                f
            oreGe erate caleByTargets += val ue;
            HookHan
            le
                .Ho kG
            ee ra teScaleBy a
            r
            gets();
        }
        remove => HookHandler._beforeGenerateScaleByTargets -= value;
    }

    public static event Delegates.GenerateScaleAddTargets_BeforeArgs GenerateScaleAddTargets
    {
        add
        {
            HookHandler._before
            enerateScaleAddTargets += value;
            Hook Hn dler HookG ne
                r
            ateScaleAddTarge ts();
        }
        remove => HookHandler._beforeGenerateScaleAddTargets -= value;
    }

    public static event Delegates.GenerateRotateToTargets_BeforeArgs GenerateRotateToTargets
    {
        add
        {
            Hook
                andler
            _befo
                eGenerate
            R
            otateToTargets += value;
            HookHandler.Hook
            enerateRotateToTargets();
        }
        remove => HookHandler._beforeGenerateRotateToTargets -= value;
    }

    public static event Delegates.GenerateRotateAddTargets_BeforeArgs GenerateRotateAddTargets
    {
        add
        {
            HookHandler._beforeGenerateRotat
                Ad
            Targe
            ts + = valu
                ;
            Hook
            andle
                .HookGene
                r
            ateRotateAddTargets();
        }
        remove => HookHandler._beforeGenerateRotateAddTargets -= value;
    }

    public static event Delegates.GenerateRotateByTargets_BeforeArgs GenerateRotateByTargets
    {
        add
        {
            H o
            k
                Hn dl er._be
                or
            GenerateRot
                a
            teByTargets += value;
            HookHandler.H
                ok
            enera
                te Ro tateBy
            argets
                );
        }
        remove => HookHandler._beforeGenerateRotateByTargets -= value;
    }

    public static event Delegates.GenerateShakePositionTargets_BeforeArgs GenerateShakePositionTargets
    {
        add
        {
            H
                ok
            andle
            r._beforeGener at eShakePositionTargets += value;
            HookHandl r.Ho
                o
            k
                Ge ne rateSh
            ke
                ositionTarg
            e
            ts();
        }
        remove => HookHandler._beforeGenerateShakePositionTargets -= value;
    }

    public static event Delegates.GenerateShakeScaleTargets_BeforeArgs GenerateShakeScaleTargets
    {
        add
        {
            Hook
                Ha dler._bef reGen rateShakeScaleTargets += va
            ue;
            H
                oo kHandler Hoo
            kG en erateShak ScaleTarg ts();
        }
        remove => HookHandler._beforeGenerateShakeScaleTargets -= value;
    }

    public static event Delegates.GenerateShakeRotationTargets_BeforeArgs GenerateShakeRotationTargets
    {
        add
        {
            HookHandler._beforeGenerat eS hake Rt ionTargets
                += value;
            HookHandl r.HookGen rateSh keRotationTar
                et
                ;
        }
        remove => HookHandler._beforeGenerateShakeRotationTargets -= value;
    }

    public static event Delegates.GeneratePunchPositionTargets_BeforeArgs GeneratePunchPositionTargets
    {
        add
        {
            HookHandler._beforeGeneratePunchPositio
            Targets += value;
            HookHandler.H ookG e
                atePu chPo sit
            i
                onTar ets();
        }
        remove => HookHandler._beforeGeneratePunchPositionTargets -= value;
    }

    public static event Delegates.GeneratePunchRotationTargets_BeforeArgs GeneratePunchRotationTargets
    {
        add
        {
            HookH
            ndler._be
                f
            oreGeneratePunchRotationTargets += value;

            ookHandler.HookGeneratePunchRota ti onTa rs();
        }
        remove => HookHandler._beforeGeneratePunchRotationTargets -= value;
    }

    public static event Delegates.GeneratePunchScaleTargets_BeforeArgs GeneratePunchScaleTargets
    {
        add
        {
            HookHandle
                ._
                efore
            Ge ne ratePu
                chScal
            Targe
            s += valu
            e
                ;
            HookHandler.HookGeneratePunchScale
            argets();
        }
        remove => HookHandler._beforeGeneratePunchScaleTargets -= value;
    }

    public static event Delegates.ApplyRectTargets_BeforeArgs ApplyRectTargets
    {
        add
        {
            H ookHan
            le
                ._beforeApp
                l
            yRectTargets += value;
            HookHandl
            r.
                ookAp
                pl yR ectTar
            ets();
        }
        remove => HookHandler._beforeApplyRectTargets -= value;
    }

    public static event Delegates.ApplyColorTargets_BeforeArgs ApplyColorTargets
    {
        add
        {
            H oo kHandler._be
                or
            Ap lyC
            or argets += v al u
                e;
            HookH ndler.Hoo ApplyC lorTargets();
        }
        remove => HookHandler._beforeApplyColorTargets -= value;
    }

    public static event Delegates.ApplyVector3Targets_BeforeArgs ApplyVector3Targets
    {
        add
        {
            ookHandler._beforeApplyVector3 Ta rget s = value;
            Hook H
            a
            ndler.H okAppl Vector 3Targets();
        }
        remove => HookHandler._beforeApplyVector3Targets -= value;
    }

    public static event Delegates.ApplyVector2Targets_BeforeArgs ApplyVector2Targets
    {
        add
        {
            ookHan
            ler._
                eforeAppl
            y
            Vector2Targets += value;
            HookHandler.HookA
            plyVector2Targets();
        }
        remove => HookHandler._beforeApplyVector2Targets -= value;
    }

    public static event Delegates.ApplyFloatTargets_BeforeArgs ApplyFloatTargets
    {
        add
        {
            H oo kHandl
            r.
                beforeApply
                F
            loatTargets += value;
            HookHandler.Hook
                pp
            yFloa
                tT ar gets()
        }
        remove => HookHandler._beforeApplyFloatTargets -= value;
    }

    public static event Delegates.ApplyColorToTargets_BeforeArgs ApplyColorToTargets
    {
        add
        {
            Ho
                kH
            ndler
                ._ beforeAp pl yCo
            lo rT oTarget s = valu e;
            HookHa nd er.Hoo kA p
                l
            y
                Cl or ToTarg
            ts
                );
        }
        remove => HookHandler._beforeApplyColorToTargets -= value;
    }

    public static event Delegates.ApplyAudioToTargets_BeforeArgs ApplyAudioToTargets
    {
        add
        {
            HookHand le r._b eo re pplyAudio o
                Targ ts += value;
            HookHandle r.HookApplyAu
                io
            oTar e
            ts();
        }
        remove => HookHandler._beforeApplyAudioToTargets -= value;
    }

    public static event Delegates.ApplyStabTargets_BeforeArgs ApplyStabTargets
    {
        add
        {
            H
            okHandler
                ._beforeApplyStabTargets += value;
            Hook
            andler.HookApplyStabTargets();
        }
        remove => HookHandler._beforeApplyStabTargets -= value;
    }

    public static event Delegates.ApplyMoveToPathTargets_BeforeArgs ApplyMoveToPathTargets
    {
        add
        {
            HookHandler._beforeApplyM
                ve
            oPath
                Ta rg ets +=
                value;
            HookH
            ndler.Hoo
                k
            ApplyMoveToPathTargets();
        }
        remove => HookHandler._beforeApplyMoveToPathTargets -= value;
    }

    public static event Delegates.ApplyMoveToTargets_BeforeArgs ApplyMoveToTargets
    {
        add
        {
            H okHan dl r._bef reAppl yM veToTa gets + value

            H
                oo kH andler
            Ho
                kApplyMoveT
            o
            Targets();
        }
        remove => HookHandler._beforeApplyMoveToTargets -= value;
    }

    public static event Delegates.ApplyMoveByTargets_BeforeArgs ApplyMoveByTargets
    {
        add
        {
            o okHandler.b
                e
            for eA pplyMoveB
            Targets + value
            HookHand
                er
            HookA
                pp lyMov eB yTarge
                t
            s();
        }
        remove => HookHandler._beforeApplyMoveByTargets -= value;
    }

    public static event Delegates.ApplyScaleToTargets_BeforeArgs ApplyScaleToTargets
    {
        add
        {
            HookHandler._beforeApplyScaleToT
            rgets += value;
            HookHandler.HookA pp lySc a
            oTarge s();
        }
        remove => HookHandler._beforeApplyScaleToTargets -= value;
    }

    public static event Delegates.ApplyLookToTargets_BeforeArgs ApplyLookToTargets
    {
        add
        {
            HookHandler._beforeApplyLook
                oT
            rgets
                + = value;
            HookHa
            dler.
                ookApplyL
                o
            okToTargets();
        }
        remove => HookHandler._beforeApplyLookToTargets -= value;
    }

    public static event Delegates.ApplyRotateToTargets_BeforeArgs ApplyRotateToTargets
    {
        add
        {
            ookHand er._be oreApplyRotateTo
            T
                a
            rg et s += v
            lu
                ;
            HookHandl
                e
            r.HookApplyRotateToTargets();
        }
        remove => HookHandler._beforeApplyRotateToTargets -= value;
    }

    public static event Delegates.ApplyRotateAddTargets_BeforeArgs ApplyRotateAddTargets
    {
        add
        {
            HookHandl r._be fo eApply otat eA d
            Ta
            gets +
                = value;
            HookHa dler.HookApplyRotateAd dT arget s();
        }
        remove => HookHandler._beforeApplyRotateAddTargets -= value;
    }

    public static event Delegates.ApplyShakePositionTargets_BeforeArgs ApplyShakePositionTargets
    {
        add
        {
            HookHandler._bef or eApp lh akePositi nT
            a
                rge s += v alue;
            HookH ndler.Hoo Apply h
                ke
            ositi
                on Targets();
        }
        remove => HookHandler._beforeApplyShakePositionTargets -= value;
    }

    public static event Delegates.ApplyShakeScaleTargets_BeforeArgs ApplyShakeScaleTargets
    {
        add
        {
            HookHandler._beforeA
            plyShakeScaleTargets += value;
            Ho ok Hand l.Ho kApply hak
                e
            Sc al Target();
        }
        remove => HookHandler._beforeApplyShakeScaleTargets -= value;
    }

    public static event Delegates.ApplyShakeRotationTargets_BeforeArgs ApplyShakeRotationTargets
    {
        add
        {
            ookHa
                nd le r._bef
                reAppl
            Shake
                otationTa
            r
            gets += value;
            HookHandler.HookApplySha
            eRotationTargets();
        }
        remove => HookHandler._beforeApplyShakeRotationTargets -= value;
    }

    public static event Delegates.ApplyPunchPositionTargets_BeforeArgs ApplyPunchPositionTargets
    {
        add
        {
            H
            ookHandler._beforeApplyPunchPositio
                Ta
            gets
                += v alue;

            ookHan
            ler.H
                okApplyPu
            n
            chPositionTargets();
        }
        remove => HookHandler._beforeApplyPunchPositionTargets -= value;
    }

    public static event Delegates.ApplyPunchRotationTargets_BeforeArgs ApplyPunchRotationTargets
    {
        add
        {
            Hoo kH andler._beforeAppl
                yP nc hR otatio
                Ta
            gets += val
            u
                e;
            HookHandler.HookApplyPunchRotationTarg
                ts
                );
        }
        remove => HookHandler._beforeApplyPunchRotationTargets -= value;
    }

    public static event Delegates.ApplyPunchScaleTargets_BeforeArgs ApplyPunchScaleTargets
    {
        add
        {
            Ho kHanl er
                _befo
            pplyP nchS cal
                e
            Targe s += v lue;
            H ookHandler.ookAppl
                yP nc hS caleTa
                ge
            s();
        }
        remove => HookHandler._beforeApplyPunchScaleTargets -= value;
    }

    public static event Delegates.TweenDelay_BeforeArgs TweenDelay
    {
        add
        {
            HookHandler._beforeTweenDela y += v a;
            Hoo kH andler.Ho kTween De ay();
        }
        remove => HookHandler._beforeTweenDelay -= value;
    }

    public static event Delegates.TweenStart_BeforeArgs TweenStart
    {
        add
        {
            HookHandle
            r
                ._beforeTweenStart += value;
            HookHandler
                Ho
            kTwee
                nS ta rt();
        }
        remove => HookHandler._beforeTweenStart -= value;
    }

    public static event Delegates.TweenRestart_BeforeArgs TweenRestart
    {
        add
        {
            Ho okHandler._beforeT eenRe st rt
                += al
            u
                HookHandl r.
                H
                ookTwe nResta t();
        }
        remove => HookHandler._beforeTweenRestart -= value;
    }

    public static event Delegates.TweenUpdate_BeforeArgs TweenUpdate
    {
        add
        {
            HookHandler._beforeTweenUpdate += value;
            HookHandler.HookTweenUpdate();
        }
        remove => HookHandler._beforeTweenUpdate -= value;
    }

    public static event Delegates.TweenComplete_BeforeArgs TweenComplete
    {
        add
        {
            Ho k
            Ha nd ler._b
                fo
            eTweenCompl
                e
            te += value;
            HookHandler.HookTweenCompl
                te
                );
        }
        remove => HookHandler._beforeTweenComplete -= value;
    }

    public static event Delegates.TweenLoop_BeforeArgs TweenLoop
    {
        add
        {
            H o
            kHand le r._before weenLoo += va ue;
            Hook
                an
            ler.H
                oo kTweenLoop(;
        }
        remove => HookHandler._beforeTweenLoop -= value;
    }

    public static event Delegates.RectUpdate_BeforeArgs RectUpdate
    {
        add
        {
            ookHa
            dler._bef
                o
            reRectUpdate += value;
            HookHandler.HookRectU
            date();
        }
        remove => HookHandler._beforeRectUpdate -= value;
    }

    public static event Delegates.Vector3Update_BeforeArgs Vector3Update
    {
        add
        {
            Ho ok andler._ efore Ve tor3Upd te += v lu
                e
                ;

            H ok Handle
                .H
                okVector3Up
            d
            ate();
        }
        remove => HookHandler._beforeVector3Update -= value;
    }

    public static event Delegates.Vector2Update_BeforeArgs Vector2Update
    {
        add
        {
            HookHandler._b efor ee ctor2Upd at e +
                =
                value;
            HookHa dler.Ho okVector2 pdate();
        }
        remove => HookHandler._beforeVector2Update -= value;
    }

    public static event Delegates.FloatUpdate_BeforeArgs FloatUpdate
    {
        add
        {
            HookH
                an dl er._be
                oreFlo
            tUpda
            e += valu
            e
                ;
            HookHandler.HookFloatUpdate();
        }
        remove => HookHandler._beforeFloatUpdate -= value;
    }

    public static event Delegates.FadeUpdate_GameObject_Hashtable_BeforeArgs FadeUpdate_GameObject_Hashtable
    {
        add
        {
            HookHandler._befor eF ad
                e
            U
                pd at e_Game
            bj
                ct_Hashtabl
            e
                += value;
            HookHandler.HookFadeUpdate_Game
                bj
            ct_Ha
                sh ta ble();
        }
        remove => HookHandler._beforeFadeUpdate_GameObject_Hashtable -= value;
    }

    public static event Delegates.FadeUpdate_GameObject_float_float_BeforeArgs
        FadeUpdate_GameObject_float_float
        {
            add
            {
                H
                    o
                okHandler._beforeFadeUpdat _GameOb ec
                    t
                _f lo at _float
                    +=
                    value;
                Hook
                    H
                andler.HookFadeUpdate_GameObject_float
                    fl
                at();
            }
            remove => HookHandler._beforeFadeUpdate_GameObject_float_float -= value;
        }

    public static event Delegates.ColorUpdate_GameObject_Hashtable_BeforeArgs
        ColorUpdate_GameObject_Hashtable
        {
            add
            {
                H
                    oo kHand le r._be fo r
                    e
                Color Up ate_Ga me bject_ Ha htable + value;
                ookHa nd er.H ookCol
                rU
                    date_GameOb
                j
                ect_Hashtable();
            }
            remove => HookHandler._beforeColorUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.ColorUpdate_GameObject_Color_float_BeforeArgs
        ColorUpdate_GameObject_Color_float
        {
            add
            {
                Ho ok Hand
                    er
                efor
                    eC olo Update Ga
                    m
                eObject_Color_floa t += value;
                HookHa
                    nd er.H ookCol
                rU
                    date_GameOb
                j
                ect_Color_float();
            }
            remove => HookHandler._beforeColorUpdate_GameObject_Color_float -= value;
        }

    public static event Delegates.AudioUpdate_GameObject_Hashtable_BeforeArgs
        AudioUpdate_GameObject_Hashtable
        {
            add
            {
                Hook Handler._ fo
                eA dioU pd ate_Gam Obje
                    ct Hashta ble += valu;
                HookHan ler.H okAudi
                o
                    U
                pd at e_Game
                    bj
                ct_Hashtabl
                e
                    ();
            }
            remove => HookHandler._beforeAudioUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.AudioUpdate_GameObject_float_float_float_BeforeArgs
        AudioUpdate_GameObject_float_float_float
        {
            add
            {
                Hook andler._ ef
                reA di
                od te_Gam Obje
                    ct _f loat_floa _float = valu;
                HookHand
                    l
                e
                r.Ho okAudi
                Up
                    ate_GameObj
                e
                ct_float_float_float();
            }
            remove => HookHandler._beforeAudioUpdate_GameObject_float_float_float -= value;
        }

    public static event Delegates.RotateUpdate_GameObject_Hashtable_BeforeArgs
        RotateUpdate_GameObject_Hashtable
        {
            add
            {
                Ho ok Handler._ efo
                eR
                    ta eUp
                    dt _GameObjec
                    t
                _Hashtable + = value;
                HookHan dl r.Hook Ro ateUpd at _Ga
                    m
                eO bj ct _Hasht
                bl
                    ();
            }
            remove => HookHandler._beforeRotateUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.RotateUpdate_GameObject_Vector3_float_BeforeArgs
        RotateUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._b ef oreRotateUpdate_Game bjec
                ec
                    or3_f
                t += val e;

                H
                    oo Handler.HookRotateUpdat e_ GameObject_Ve
                    c
                t
                    or 3_ float(
                    ;
            }
            remove => HookHandler._beforeRotateUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleUpdate_GameObject_Hashtable_BeforeArgs
        ScaleUpdate_GameObject_Hashtable
        {
            add
            {
                Hoo
                    kH ndler._ efore ScaleUpda e_Game bject_ Hashtable +
                    v
                e;
                H o
                ok Handle.HookS aleUpd ate_GameObj ct_Hashta le();
            }
            remove => HookHandler._beforeScaleUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.ScaleUpdate_GameObject_Vector3_float_BeforeArgs
        ScaleUpdate_GameObject_Vector3_float
        {
            add
            {
                Hoo ka ndl er _befor eS aleUpd at _Game Ob ect_Vec or3_f lo t += v lue;
                H oo andle.Hoo kS aleUpd te_Gam eO bject_Vec or3_flo t();
            }
            remove => HookHandler._beforeScaleUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.MoveUpdate_GameObject_Hashtable_BeforeArgs MoveUpdate_GameObject_Hashtable
    {
        add
        {
            HookHandler._before Mo veUp dt e_GameObjec t_ H
            ashtable += value;
            Hoo Handl er HookMo eUpd at e_G
                ameO
            c
                _Hash
            ta le();
        }
        remove => HookHandler._beforeMoveUpdate_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveUpdate_GameObject_Vector3_float_BeforeArgs
        MoveUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMove
                pdate_GameObject_Vector3_float += v al ue;
                Ho kHand er.Ho k
                M
                    oveUpdate_GameObject _V ector3_float();
            }
            remove => HookHandler._beforeMoveUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.LookUpdate_GameObject_Hashtable_BeforeArgs LookUpdate_GameObject_Hashtable
    {
        add
        {
            HookHandler._beforeLookUpdate_GameObject_Ha
            htable += value;
            HookHandler.HookLookUp da te_G ae bject_H shtab l
            e();
        }
        remove => HookHandler._beforeLookUpdate_GameObject_Hashtable -= value;
    }

    public static event Delegates.LookUpdate_GameObject_Vector3_float_BeforeArgs
        LookUpdate_GameObject_Vector3_float
        {
            add
            {
                Hook
                    Ha nd ler._b
                    foreLo
                kUpda
                    e_GameObj
                e
                ct_Vector3_float += value;
                HookHandler.HookLo
                kUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeLookUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PathLength_Array_BeforeArgs PathLength_Array
    {
        add
        {
            HookH
                a
            ndler._beforePathLength_Array += value;
            H
                ok
            andle
            r.Ho okPath
            ength_
            rray(
                ;
        }
        remove => HookHandler._beforePathLength_Array -= value;
    }

    public static event Delegates.CameraTexture_BeforeArgs CameraTexture
    {
        add
        {
            HookHandler._ befor eC ameraTe xt re + va e;
            Ho o
            ndler.H okCame ra extur e(;
        }
        remove => HookHandler._beforeCameraTexture -= value;
    }

    public static event Delegates.PutOnPath_GameObject_Array_float_BeforeArgs
        PutOnPath_GameObject_Array_float
        {
            add
            {
                HookHandler._beforePutOnPath_G
                meObject_Array_float += value;
                Hook Ha ndle rH ookPutO nP ath_
                    G
                ameObjec _Arra y_ loat()
            }
            remove => HookHandler._beforePutOnPath_GameObject_Array_float -= value;
        }

    public static event Delegates.PutOnPath_Transform_Array_float_BeforeArgs PutOnPath_Transform_Array_float
    {
        add
        {
            HookH
                ndler
            _beforePu
                t
            OnPath_Transform_Array_float += value;
            HookHan
            ler.HookPutOnPath_Transform_Array_fl oa t();
        }
        remove => HookHandler._beforePutOnPath_Transform_Array_float -= value;
    }

    public static event Delegates.PointOnPath_Array_float_BeforeArgs PointOnPath_Array_float
    {
        add
        {
            HookHandler._beforePointOnPath
                Ar
            ay_fl
                oa t += val
            e;
            Hoo
                Handl
            r.HookPoi
                n
            tOnPath_Array_float();
        }
        remove => HookHandler._beforePointOnPath_Array_float -= value;
    }

    public static event Delegates.DrawLine_Array_BeforeArgs DrawLine_Array
    {
        add
        {
            HookHandle._beforeD awLin _Array +=
                v
            a
            lu e;
            HookH
                nd
            er.HookDraw
                L
            ine_Array();
        }
        remove => HookHandler._beforeDrawLine_Array -= value;
    }

    public static event Delegates.DrawLine_Array_Color_BeforeArgs DrawLine_Array_Color
    {
        add
        {
            Hoo kH ndle._b oreDr a
                ne_Ar ra _Color + valu e;
            HookHan ler.H oo D
                ra wL ine_Ar
            ay
            Color();
        }
        remove => HookHandler._beforeDrawLine_Array_Color -= value;
    }

    public static event Delegates.DrawLineGizmos_Array_BeforeArgs DrawLineGizmos_Array
    {
        add
        {
            Hoo Handl r._be
            or
            DrawL
                in eGizmos_Arra y += value;
            HookHandler.Ho k
            Dr aw LineGi
                mo
            _Array();
        }
        remove => HookHandler._beforeDrawLineGizmos_Array -= value;
    }

    public static event Delegates.DrawLineGizmos_Array_Color_BeforeArgs DrawLineGizmos_Array_Color
    {
        add
        {
            H oo Handl er _bef
                re awLi ne iz mos_ rray_C ol r
                += v lue;
            H okHand er.Hoo kD ra
            w
            L
                in eG izmos_
            rr
            y_Color();
        }
        remove => HookHandler._beforeDrawLineGizmos_Array_Color -= value;
    }

    public static event Delegates.DrawLineHandles_Array_BeforeArgs DrawLineHandles_Array
    {
        add
        {
            HookHandler._ befo
            eD
                awLi e
                Ha ndles_Ar a
            y
                += value;
            Ho okHandler.Hook D
            r
            a
            wL in eHandl
                s_
            rray();
        }
        remove => HookHandler._beforeDrawLineHandles_Array -= value;
    }

    public static event Delegates.DrawLineHandles_Array_Color_BeforeArgs DrawLineHandles_Array_Color
    {
        add
        {
            HookHandler._be ore rawLi
                nH andles_Arra
                y
            _Co lo r += value;
            HookHandler
                .
                H
                oo kD rawLin
            Ha
                dles_Array_
            C
            olor();
        }
        remove => HookHandler._beforeDrawLineHandles_Array_Color -= value;
    }

    public static event Delegates.DrawPath_Array_BeforeArgs DrawPath_Array
    {
        add
        {
            HookHandler._b e
            or
                DrawP
            at h_Array +=
                v
            alue;
            HookHandle.Ho kDrawP a
                t
            h_ Ar ray();
        }
        remove => HookHandler._beforeDrawPath_Array -= value;
    }

    public static event Delegates.DrawPath_Array_Color_BeforeArgs DrawPath_Array_Color
    {
        add
        {
            H ookHandler._beforeDrawPath_Ar ay_Color += value;
            Hook Handler.HookDrawPath_Arra y_ Color();
        }
        remove => HookHandler._beforeDrawPath_Array_Color -= value;
    }

    public static event Delegates.DrawPathGizmos_Array_BeforeArgs DrawPathGizmos_Array
    {
        add
        {
            HookH an dler.
                foreD awPath
            G
                izm os _Array += value;
            HookHandl
            r.
                ookD a
            wP athGizmos_A
            r
            ray();
        }
        remove => HookHandler._beforeDrawPathGizmos_Array -= value;
    }

    public static event Delegates.DrawPathGizmos_Array_Color_BeforeArgs DrawPathGizmos_Array_Color
    {
        add
        {
            Ho ok Hand lr._ beforeDrawP thGizmo _Array Color += v al ue;
            Ho
                kHand
            le r.Hoo DrawPa
            t
            hGizmos_Array_Color();
        }
        remove => HookHandler._beforeDrawPathGizmos_Array_Color -= value;
    }

    public static event Delegates.DrawPathHandles_Array_BeforeArgs DrawPathHandles_Array { add


        HookHandle
        r
        . _beforeDrawPa hHandles_Array
        +=
        value
        ; HookHandler
        .
        HookDrawPathHandles_ Array

    (
        )
        ;
}

remove => HookHandler._beforeDrawPathHandles_Array -= value;
}

public static event Delegates.DrawPathHandles_Array_Color_BeforeArgs DrawPathHandles_Array_Color
{
    add
    {
        ookHan dler
            .
            _befor DrawPat Handle _Array_Col or +=
            va
        ue;
        H
            oo kHandler.Ho
            o
        kDrawPathHandle _Array_Color()
            ;
    }
    remove => HookHandler._beforeDrawPathHandles_Array_Color -= value;
}

public static event Delegates.CameraFadeDepth_BeforeArgs CameraFadeDepth
{
    add
    {
        Hoo kH andl e._bef or eCamera
            F
        adeDepth += value;
        HookHandle.Ho kCamer aF adeDepth(
        ;
    }
    remove => HookHandler._beforeCameraFadeDepth -= value;
}

public static event Delegates.CameraFadeDestroy_BeforeArgs CameraFadeDestroy
{
    add
    {
        HookHandler._bef
        reCameraFadeDestroy += v alue;
        H ookHandler.
            H
            ookCameraFadeDes troy();
    }
    remove => HookHandler._beforeCameraFadeDestroy -= value;
}

public static event Delegates.CameraFadeSwap_BeforeArgs CameraFadeSwap
{
    add
    {
        Hook
        andler._b
            e
        foreCameraFadeSwap += value;
        Hook
        andler.HookCameraFadeSw ap();
    }
    remove => HookHandler._beforeCameraFadeSwap -= value;
}

public static event Delegates.CameraFadeAdd_Texture2D_int_BeforeArgs CameraFadeAdd_Texture2D_int
{
    add
    {
        Hook
            Ha nd ler._b
            foreCa
        eraFa
            eAdd_Text
        u
        re2D_int += value;
        HookHandler.Ho
            kCameraFadeAdd_Texture2 D_ int()
    }
    remove => HookHandler._beforeCameraFadeAdd_Texture2D_int -= value;
}

public static event Delegates.CameraFadeAdd_Texture2D_BeforeArgs CameraFadeAdd_Texture2D
{
    add
    {
        Hook
            andler
        _befo
            eCameraFa
        d
        eAdd_Texture2D += value;
        HookHandl
        r.HookCameraFadeAdd_Text ur e2D()
    }
    remove => HookHandler._beforeCameraFadeAdd_Texture2D -= value;
}

public static event Delegates.CameraFadeAdd_BeforeArgs CameraFadeAdd
{
    add
    {
        HookHand
            er
        _befo
            re Ca meraFa
        eAdd +
            valu
            ;
        HookHan
            d
        ler.HookCameraFadeAdd();
    }
    remove => HookHandler._beforeCameraFadeAdd -= value;
}

public static event Delegates.Resume_GameObject_BeforeArgs Resume_GameObject
{
    add
    {
        Ho ok Handle
            ._
            eforeResume
        _
        GameObject += value;
        HookHandl
        r.
            ookRe
            su me _GameO
        ject()
    }
    remove => HookHandler._beforeResume_GameObject -= value;
}

public static event Delegates.Resume_GameObject_bool_BeforeArgs Resume_GameObject_bool
{
    add
    {
        HookHandl er._beforeResume_Game
            O
        b
            je ct _bool
            =
            alue;
        HookH
            a
        ndler.HookResume_GameObject_boo
            ()
    }
    remove => HookHandler._beforeResume_GameObject_bool -= value;
}

public static event Delegates.Resume_GameObject_string_BeforeArgs Resume_GameObject_string
{
    add
    {
        HookHandle
        r
            ._ efo eResum e_GameObjec _string +
            = va lue;
        H
            ok
        andler.Hook
            R
        esume_GameObject_string();
    }
    remove => HookHandler._beforeResume_GameObject_string -= value;
}

public static event Delegates.Resume_GameObject_string_bool_BeforeArgs Resume_GameObject_string_bool
{
    add
    {
        HookH
            an dler._befor
            e
        Res um e_ GameObject_ tri g_bool += va lu e;


        H
            oo kH andler
        Ho
            kResume_Gam
        e
        Object_string_bool();
    }
    remove => HookHandler._beforeResume_GameObject_string_bool -= value;
}

public static event Delegates.Resume_BeforeArgs Resume
{
    add
    {
        Hoo
            k
        Handler._beforeResume += value;

        oo
            Han le
        r.Ho okResume()
            ;
    }
    remove => HookHandler._beforeResume -= value;
}

public static event Delegates.Resume_string_BeforeArgs Resume_string
{
    add
    {
        Hoo
            k
        Handler._beforeResume_string += value;

        ookHandler.HookResume_string();
    }
    remove => HookHandler._beforeResume_string -= value;
}

public static event Delegates.Pause_GameObject_BeforeArgs Pause_GameObject
{
    add
    {
        HookHandler._beforePause_GameOb
        ec
            += v
        al ue;
        Hook
            andler
        HookP
            use_GameO
        b
        ject();
    }
    remove => HookHandler._beforePause_GameObject -= value;
}

public static event Delegates.Pause_GameObject_bool_BeforeArgs Pause_GameObject_bool
{
    add
    {
        HookHandler._ beforePau
        s
            e
        _G am eObjec
            _b
        ol += value
            ;

        HookHandler.HookPause_GameObject_b
            ol
            );
    }
    remove => HookHandler._beforePause_GameObject_bool -= value;
}

public static event Delegates.Pause_GameObject_string_BeforeArgs Pause_GameObject_string
{
    add
    {
        Ho
            kH
        ndler
            .b forePause_
        G
        ameObject_string += value;
        HookH
            a
        n
            dl er.HookP
            us
        _GameObject
            _
        string();
    }
    remove => HookHandler._beforePause_GameObject_string -= value;
}

public static event Delegates.Pause_GameObject_string_bool_BeforeArgs Pause_GameObject_string_bool
{
    add
    {
        HookHa dler._ e
        or
            Pause _G am eObject_str
            i
        ng_bool += value;
        HookH ndler.
            H
            o
        ok Pa use_Ga
            eO
        ject_string
            _
        bool();
    }
    remove => HookHandler._beforePause_GameObject_string_bool -= value;
}

public static event Delegates.Pause_BeforeArgs Pause
{
    add
    {
        H
        ookHandler._b eforePause +
            v
        lue;

        Ho okHandler.o
            ok ause();
    }
    remove => HookHandler._beforePause -= value;
}

public static event Delegates.Pause_string_BeforeArgs Pause_string
{
    add
    {
        HookHandler
            _beforePause_strin g += v au e;
        HookHand
            l
        er.H okP use_str ing();
    }
    remove => HookHandler._beforePause_string -= value;
}

public static event Delegates.Count_BeforeArgs Count
{
    add
    {
        Hoo
        Handle
            ._bef
        reCount +
            =
            value;
        HookHandler.HookCount(
            ;
    }
    remove => HookHandler._beforeCount -= value;
}

public static event Delegates.Count_string_BeforeArgs Count_string
{
    add
    {
        H
            ok
        andler._bef
            o
        reCount_string += value;
        H
            ok
        andle
        r.Ho okCoun
        _strin
            ();
    }
    remove => HookHandler._beforeCount_string -= value;
}

public static event Delegates.Count_GameObject_BeforeArgs Count_GameObject
{
    add
    {
        Hook andler._beforeCou
            n
        t
            _G am eObjec
            +
            value;
        Hoo
            k
        Handler.HookCount_GameObje
        t(
            ;
    }
    remove => HookHandler._beforeCount_GameObject -= value;
}

public static event Delegates.Count_GameObject_string_BeforeArgs Count_GameObject_string
{
    add
    {
        Hook and er._be foreCoun
        t
            _
        eO bject_
        tr
        ng += value
            ;

        HookHandler.HookCount_G
            me
        bject
            _s tr ing();
    }
    remove => HookHandler._beforeCount_GameObject_string -= value;
}

public static event Delegates.Stop_BeforeArgs Stop
{
    add
    {
        H
            okHan
        dl er._beforeS
            t
        op += va lu e;
        HookHandler Hoo S
            to p();
    }
    remove => HookHandler._beforeStop -= value;
}

public static event Delegates.Stop_string_BeforeArgs Stop_string
{
    add
    {
        HookHandler._befo re Stop _t ring += val
        u
            e;
        HookHandler.HookS top_str
        ng
            );
    }
    remove => HookHandler._beforeStop_string -= value;
}

public static event Delegates.StopByName_string_BeforeArgs StopByName_string
{
    add
    {
        HookHandler._beforeStopBy
        ame_string += val ue;
        Ho oH an ler.HookSt op ByName_string();
    }
    remove => HookHandler._beforeStopByName_string -= value;
}

public static event Delegates.Stop_GameObject_BeforeArgs Stop_GameObject
{
    add
    {
        H
        ookHandler._beforeStop_GameObject
            += value;
        HookHandler.H oo kSto pG ameObject()
            ;
    }
    remove => HookHandler._beforeStop_GameObject -= value;
}

public static event Delegates.Stop_GameObject_bool_BeforeArgs Stop_GameObject_bool
{
    add
    {
        Ho ok Handle
            ._befo
            eStop
        GameObjec
            t
        _bool += value;
        HookHandler.H
            okStop_GameObject_b oo l();
    }
    remove => HookHandler._beforeStop_GameObject_bool -= value;
}

public static event Delegates.Stop_GameObject_string_BeforeArgs Stop_GameObject_string
{
    add
    {
        Hoo
        Handle
            ._bef
            reStop_Ga
        m
        eObject_string += value;
        Hook
        andler.HookStop_Gam eO bjec ts tring();
    }
    remove => HookHandler._beforeStop_GameObject_string -= value;
}

public static event Delegates.StopByName_GameObject_string_BeforeArgs StopByName_GameObject_string
{
    add
    {
        H
            o
        okHandler._beforeStopByName_Ga
        eObject_string += va lu e;
        H ok Handler.Hoo
            k
        StopByName_GameObject strin
        ()
    }
    remove => HookHandler._beforeStopByName_GameObject_string -= value;
}

public static event Delegates.Stop_GameObject_string_bool_BeforeArgs Stop_GameObject_string_bool
{
    add
    {
        HookHand le r._b eo reStop_Game
            O
        bject_string_bool += alue;
        oo
            Handl
        er HookSto _Gam
            eO ject_strin g_ bool();
    }
    remove => HookHandler._beforeStop_GameObject_string_bool -= value;
}

public static event Delegates.StopByName_GameObject_string_bool_BeforeArgs
StopByName_GameObject_string_bool
{
    add
    {
        HookH an dl er._b
            fo
        eS opB Na me_GameObj ec t
        _
        string_bool += value;
        Ho
            o
        k
            Ha nd ler.Ho
            kS
        opByName_Ga
            m
        eObject_string_bool();
    }
    remove => HookHandler._beforeStopByName_GameObject_string_bool -= value;
}

public static event Delegates.Hash_BeforeArgs Hash
{
    add
    {
        HookHan ler _bef
            re H
        sh +=
            v alue;
        HookH
            a
        ndler.HookHash();
    }
    remove => HookHandler._beforeHash -= value;
}

public static event Delegates.Awake_BeforeArgs Awake
{
    add
    {
        HookHandler._beforeAwake += valu
            ;
        HookHandler.HookAwake();
    }
    remove => HookHandler._beforeAwake -= value;
}

public static event Delegates.Start_BeforeArgs Start
{
    add
    {
        Ho kH andler
            _b
        foreStart +
            =
            value;
        HookHandler.HookStart();
    }
    remove => HookHandler._beforeStart -= value;
}

public static event Delegates.Update_BeforeArgs Update
{
    add
    {
        HookHa
            n
        dler._bef reUpdate += value;
        H
            ok
        andle
        r.HookUpdate(
            )
            ;
    }
    remove => HookHandler._beforeUpdate -= value;
}

public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
{
    add
    {
        H
            o
        okHandler._beforeFixedUpdate += valu
            ;
        HookHandler.HookFixedUpd at e();
    }
    remove => HookHandler._beforeFixedUpdate -= value;
}

public static event Delegates.LateUpdate_BeforeArgs LateUpdate
{
    add
    {
        HookHa
            n
        dler._beforeLateUpdate += value;
        Ho
            kHand
        le r.HookLa
        eUpdat
            ();
    }
    remove => HookHandler._beforeLateUpdate -= value;
}

public static event Delegates.OnEnable_BeforeArgs OnEnable
{
    add
    {
        H okH ndle._b
            foreO
        nn ble += alu
        e
            ;
        ookHandler.H ookOnEnable();
    }
    remove => HookHandler._beforeOnEnable -= value;
}

public static event Delegates.OnDisable_BeforeArgs OnDisable
{
    add
    {
        HookHandler._before
        nDisable += value;
        HookHan dl er.H ok OnDisable()
            ;
    }
    remove => HookHandler._beforeOnDisable -= value;
}

public static event Delegates.DrawLineHelper_BeforeArgs DrawLineHelper
{
    add
    {
        HookHandler._befo
            eD
        awLin
            eH el per +=
            value;
        HookH
        ndler.Hoo
            k
        DrawLineHelper();
    }
    remove => HookHandler._beforeDrawLineHelper -= value;
}

public static event Delegates.DrawPathHelper_BeforeArgs DrawPathHelper
{
    add
    {
        Ho k
        H
            a
        nd le r._bef
            re
        rawPathHelp
            e
        r += value;
        HookHandler.HookD
            aw
        athHe
            lp er();
    }
    remove => HookHandler._beforeDrawPathHelper -= value;
}

public static event Delegates.PathControlPointGenerator_BeforeArgs PathControlPointGenerator
{
    add
    {
        H
            o
        okHandler._before
            at
        Contr
            ol Po intGen
            rator
                = val
        e;
        HookHa
            n
        dler.HookPathControlP
            intGenerato r();
    }
    remove => HookHandler._beforePathControlPointGenerator -= value;
}

public static event Delegates.Interp_BeforeArgs Interp
{
    add
    {
        H ookHan
        ler._b
            foreI
        terp += v
        a
            lue;
        HookHandler.HookIn
        erp();
    }
    remove => HookHandler._beforeInterp -= value;
}

public static event Delegates.Launch_BeforeArgs Launch
{
    add
    {
        Ho
            o
        kHandler._beforeLau
        ch
            += va
        lu e;
        HookH
        ndler.ookLa
        nch();
    }
    remove => HookHandler._beforeLaunch -= value;
}

public static event Delegates.CleanArgs_BeforeArgs CleanArgs
{
    add
    {
        Ho okHand
        er
            _beforeClea
        n
        Args += value;
        Hoo
            Ha
        dler.
            Ho ok CleanA
        gs();
    }
    remove => HookHandler._beforeCleanArgs -= value;
}

public static event Delegates.GenerateID_BeforeArgs GenerateID
{
    add
    {
        HookHandler._be ore e
            ne ra teID +
            v
        lue;
        HookHa
            n
        dler.HookGenerateID(
            ;
    }
    remove => HookHandler._beforeGenerateID -= value;
}

public static event Delegates.RetrieveArgs_BeforeArgs RetrieveArgs
{
    add
    {
        Hoo
            k
        Ha ndler._befor
            e
        R
            er ie veArgs
            +=
            value;
        Hook
            H
        andler.HookRetri
            ve
        rgs()
            ;
    }
    remove => HookHandler._beforeRetrieveArgs -= value;
}

public static event Delegates.GetEasingFunction_BeforeArgs GetEasingFunction
{
    add
    {
        Hoo
            k
        H
            an dl er._be
            or
        GetEasingFu
            n
        ction += value;
        H
            ok
        andle
        r.Ho okGetE
        singFu
            ction
            );
    }
    remove => HookHandler._beforeGetEasingFunction -= value;
}

public static event Delegates.UpdatePercentage_BeforeArgs UpdatePercentage
{
    add
    {
        H
            ok
        andler._bef
            o
        reUpdatePercentage +
            v
        lue;

        Ho ok Handle
            .HookU
            dateP
        rcentage(
            )
            ;
    }
    remove => HookHandler._beforeUpdatePercentage -= value;
}

public static event Delegates.CallBack_BeforeArgs CallBack
{
    add
    {
        Hook
            an
        ler._before
            C
        allBack += value;
        Ho
            kH
        ndler
            .H oo kCallB
        ck();
    }
    remove => HookHandler._beforeCallBack -= value;
}

public static event Delegates.Dispose_BeforeArgs Dispose
{
    add
    {
        Hoo
            k
        Handler._before
            D
        i
            sp os e += v
        lu
            ;
        HookHandl
            e
        r.HookDispose();
    }
    remove => HookHandler._beforeDispose -= value;
}

public static event Delegates.ConflictCheck_BeforeArgs ConflictCheck
{
    add
        HookHandle
    r
        ._beforeCon fl ic tCheck += v lue
    HookHandler.H ok
    onfli
        ct Check();
}
remove => HookHandler._beforeConflictCheck -= value;
}

public static event Delegates.EnableKinematic_BeforeArgs EnableKinematic
{
    add
    {
        H
        okHandler
            ._beforeEnableKinematic += value;
        HookHandler
        HookEnableKinematic();
    }
    remove => HookHandler._beforeEnableKinematic -= value;
}

public static event Delegates.DisableKinematic_BeforeArgs DisableKinematic
{
    add
    {
        H
            ok Ha ndler.
            be
            oreDisableK
        i
        nematic += value;
        HookHandler.HookDisabl
            Ki
        emati
        c();
    }
    remove => HookHandler._beforeDisableKinematic -= value;
}

public static event Delegates.ResumeDelay_BeforeArgs ResumeDelay
{
    add
    {
        H oo kHandler._beforeResumeDelay += v
        lu
            ;
        Hoo
            kH andler.Hook
            R
        esumeDel y()
    }
    remove => HookHandler._beforeResumeDelay -= value;
}

public static event Delegates.linear_BeforeArgs linear
{
    add
    {
        ookHa
        dler._bef
            o
        relinear += value;
        HookHandler.Hooklinear();
    }
    remove => HookHandler._beforelinear -= value;
}

public static event Delegates.clerp_BeforeArgs clerp
{
    add
    {
        HookHan dler._
        beforecl rp = value;
        Hoo kH andler.Hookcler
        p
        (
        );
    }
    remove => HookHandler._beforeclerp -= value;
}

public static event Delegates.spring_BeforeArgs spring
{
    add
    {
        HookHandler._beforespring += value;
        H
        okHandler.Hookspring();
    }
    remove => HookHandler._beforespring -= value;
}

public static event Delegates.easeInQuad_BeforeArgs easeInQuad
{
    add
    {
        ookHandler._ be f
            o
        re ea seInQu
            d
                = value;
        Ho
            o
        kHandler.HookeaseInQuad();
    }
    remove => HookHandler._beforeeaseInQuad -= value;
}

public static event Delegates.easeOutQuad_BeforeArgs easeOutQuad
{
    add
    {
        HookHandler._beforee as eOut Qa d += value;


        HookH ndler.H ookeaseOutQuad();
    }
    remove => HookHandler._beforeeaseOutQuad -= value;
}

public static event Delegates.easeInOutQuad_BeforeArgs easeInOutQuad
{
    add
    {
        HookHandler._beforeeaseInOutQuad +=
            va
        ue;
        H
            oo kH andler
        Hookea
            eInOu
        Quad();
    }
    remove => HookHandler._beforeeaseInOutQuad -= value;
}

public static event Delegates.easeInCubic_BeforeArgs easeInCubic
{
    add
    {
        Hook Ha ndler._bef
            re
        aseIn
            Cu bic += valu
        e
            ;
        HookHandler.Hookea se InCubic();
    }
    remove => HookHandler._beforeeaseInCubic -= value;
}

public static event Delegates.easeOutCubic_BeforeArgs easeOutCubic
{
    add
    {
        HookHandler._beforeeaseOutCubic += v
        lue;
        HookHandler.HookeaseOutCubic();
    }
    remove => HookHandler._beforeeaseOutCubic -= value;
}

public static event Delegates.easeInOutCubic_BeforeArgs easeInOutCubic
{
    add
    {
        oo kH andler
            _b
        foreeaseInO
            u
        tCubic += value;
        HookHandler.HookeaseInOutCu
            ic
            );
    }
    remove => HookHandler._beforeeaseInOutCubic -= value;
}

public static event Delegates.easeInQuart_BeforeArgs easeInQuart
{
    add
    {
        Ho
            o
        kHandler._beforeeaseInQuart += value;
        H
            ok nd e
        r.Hoo keaseInQu
        a
        rt();
    }
    remove => HookHandler._beforeeaseInQuart -= value;
}

public static event Delegates.easeOutQuart_BeforeArgs easeOutQuart
{
    add
    {
        HookHand
            l
        er._beforeeaseOutQuart += value;
        HookHandler.Ho
        keaseOutQuart();
    }
    remove => HookHandler._beforeeaseOutQuart -= value;
}

public static event Delegates.easeInOutQuart_BeforeArgs easeInOutQuart
{
    add
    {
        HookHandler
            .
            _
            be fo reease
        nO
        tQuart += v
        a
            lue;
        HookHandler.HookeaseInOutQuart();
    }
    remove => HookHandler._beforeeaseInOutQuart -= value;
}

public static event Delegates.easeInQuint_BeforeArgs easeInQuint
{
    add
        HookHandle
    r
        ._beforeeaseInQuint += value;
    H ookHandl
    r.
        ookea
        se InQuint();
}
remove => HookHandler._beforeeaseInQuint -= value;
}

public static event Delegates.easeOutQuint_BeforeArgs easeOutQuint
{
    add
    {
        HookH
        ndler._be
            f
        oreeaseOutQuint += value;
        HookHandler.Hookease
        utQuint();
    }
    remove => HookHandler._beforeeaseOutQuint -= value;
}

public static event Delegates.easeInOutQuint_BeforeArgs easeInOutQuint
{
    add
    {
        HookHandler._befo
            r
        e
            ea se InOutQ
            in
            += value;

        H
        ookHandler.HookeaseInOutQuint();
    }
    remove => HookHandler._beforeeaseInOutQuint -= value;
}

public static event Delegates.easeInSine_BeforeArgs easeInSine
{
    add
    {
        Hoo ka ndler._beforeeaseInSine += value;
        HookHandle.HookeaseInSine();
    }
    remove => HookHandler._beforeeaseInSine -= value;
}

public static event Delegates.easeOutSine_BeforeArgs easeOutSine
{
    add
    {
        Hoo
        Handle
            ._bef
            reeaseOut
        S
        ine += value;
        HookHandler.HookeaseOutSine();
    }
    remove => HookHandler._beforeeaseOutSine -= value;
}

public static event Delegates.easeInOutSine_BeforeArgs easeInOutSine
{
    add
    {
        HookHa dler._beforeeaseInOutSine += val
        u
            e
            ;
        Ho okHand
        er
            HookeaseInO
        u
        tSine();
    }
    remove => HookHandler._beforeeaseInOutSine -= value;
}

public static event Delegates.easeInExpo_BeforeArgs easeInExpo
{
    add
    {
        H ookHan dl er._beforeeaseInExpo += value;
        HookHandl er Hoo easeIn Expo();
    }
    remove => HookHandler._beforeeaseInExpo -= value;
}

public static event Delegates.easeOutExpo_BeforeArgs easeOutExpo
{
    add
    {
        HookHan
        ler._beforeeas eO utEx p += value;
        H
            o
        okHandler.HookeaseOu
            E
        po();
    }
    remove => HookHandler._beforeeaseOutExpo -= value;
}

public static event Delegates.easeInOutExpo_BeforeArgs easeInOutExpo
{
    add
    {
        HookHandler._beforeeaseInOutEx
        o += value;
        HookHandler.HookeaseI nO utEx p();
    }
    remove => HookHandler._beforeeaseInOutExpo -= value;
}

public static event Delegates.easeInCirc_BeforeArgs easeInCirc
{
    add
    {
        HookHand
            l
        er._beforeeaseInCirc += value;
        HookHand
            er
        Hooke
            as eI nCirc(
            ;
    }
    remove => HookHandler._beforeeaseInCirc -= value;
}

public static event Delegates.easeOutCirc_BeforeArgs easeOutCirc
{
    add
    {
        Ho ok Handler._beforeeaseOutCirc +
            v
        lue;

        Ho okHandle.Ho
            o
        keaseOutCirc();
    }
    remove => HookHandler._beforeeaseOutCirc -= value;
}

public static event Delegates.easeInOutCirc_BeforeArgs easeInOutCirc
{
    add
    {
        HookHandler._beforeeaseInOutC
        rc += value;
        HookHandler.H ooke ae InOutCirc()
            ;
    }
    remove => HookHandler._beforeeaseInOutCirc -= value;
}

public static event Delegates.easeInBounce_BeforeArgs easeInBounce
{
    add
    {
        HookHandler.
            be
            oreea
        se In Bounce
            += val
        e;
        Ho
        kHandler.H
        ookeaseInBounce();
    }
    remove => HookHandler._beforeeaseInBounce -= value;
}

public static event Delegates.easeOutBounce_BeforeArgs easeOutBounce
{
    add
    {
        HookH
            a
        ndler._beforeeaseOutB
            un
        e +=
            va lu e;
        Hoo
        Handle
            .Hook
            aseOutBou
        n
        ce();
    }
    remove => HookHandler._beforeeaseOutBounce -= value;
}

public static event Delegates.easeInOutBounce_BeforeArgs easeInOutBounce
{
    add
    {
        Hook
            H
        a
            nd le r._bef
            re
        aseInOutBou
            n
        ce += value;
        HookHandler.Ho
            ke
        seInO
            ut Bo unce()
    }
    remove => HookHandler._beforeeaseInOutBounce -= value;
}

public static event Delegates.easeInBack_BeforeArgs easeInBack
{
    add
    {
        Hook
            Ha ndler._befo
            r
        eease InBack += v lue
            HookH
        a
            n
        dl er.Hooke
            se
        nBack();
    }
    remove => HookHandler._beforeeaseInBack -= value;
}

public static event Delegates.easeOutBack_BeforeArgs easeOutBack
{
    add
    {
        HookHandle r._bef oe easeOutBack
            += va ue;
        HookHandler.HookeaseOutBa k(
        ;
    }
    remove => HookHandler._beforeeaseOutBack -= value;
}

public static event Delegates.easeInOutBack_BeforeArgs easeInOutBack
{
    add
    {
        ookHan
        ler._
            eforeease
        I
        nOutBack += value;
        HookHandler.H
        okeaseInOutBack();
    }
    remove => HookHandler._beforeeaseInOutBack -= value;
}

public static event Delegates.punch_BeforeArgs punch
{
    add
    {
        Hoo
            Ha
        dler._befor
            e
        punch += value;
        HookHandler.oo
        punch
            ();
    }
    remove => HookHandler._beforepunch -= value;
}

public static event Delegates.easeInElastic_BeforeArgs easeInElastic
{
    add
    {
        HookH andler._beforee as eInEla
        ti
            += v
        al ue;
        HookHand le r.HookeaseInE ast c();
    }
    remove => HookHandler._beforeeaseInElastic -= value;
}

public static event Delegates.easeOutElastic_BeforeArgs easeOutElastic
{
    add
    {
        HookHa
        dler._beforeeas eO utEl at ic += value
            ;

        Hoo Han ler.Ho okeaseOut
        lat ic();
    }
    remove => HookHandler._beforeeaseOutElastic -= value;
}

public static event Delegates.easeInOutElastic_BeforeArgs easeInOutElastic
{
    add
    {
        HookHandler._bef
        reeaseInOutElastic += v alue;
        o okHandler.H
            o
        okeaseInOutElastic();
    }
    remove => HookHandler._beforeeaseInOutElastic -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
    public static event Delegates.Init_AfterArgs Init
    {
        add
        {
            HookHa
                dl
            r._af
                te rInit += v l
                ue
            HookHa ndler.HookInit();
        }
        remove => HookHandler._afterInit -= value;
    }

    public static event Delegates.CameraFadeFrom_float_float_AfterArgs CameraFadeFrom_float_float
    {
        add
        {
            HookHandler._a ft erCa mr aFadeFrom_f
                l
            oat_float += value;
            HookHandler.H
                ok
            amera
                Fa eFr m_floa t_f
                l
            oat();
        }
        remove => HookHandler._afterCameraFadeFrom_float_float -= value;
    }

    public static event Delegates.CameraFadeFrom_Hashtable_AfterArgs CameraFadeFrom_Hashtable
    {
        add
        {
            HookHandler._aft er Came rF adeFrom_Has ht a
            ble += value;
            HookHandler.Hoo Cam raFade Fr om_Hashtable();
        }
        remove => HookHandler._afterCameraFadeFrom_Hashtable -= value;
    }

    public static event Delegates.CameraFadeTo_float_float_AfterArgs CameraFadeTo_float_float
    {
        add
        {
            HookHandler._afterCameraFa de To_f la t_float += v al ue;
            HookHandler.HookCameraFadeTo_f
                oat flo t(
            );
        }
        remove => HookHandler._afterCameraFadeTo_float_float -= value;
    }

    public static event Delegates.CameraFadeTo_Hashtable_AfterArgs CameraFadeTo_Hashtable
    {
        add
        {
            HookHandler._afte
                CameraFadeTo_Has ht able = value;
            Hoo
                k
            Handler.HookCa me raFadeTo
                Ha
            htabl
            e();
        }
        remove => HookHandler._afterCameraFadeTo_Hashtable -= value;
    }

    public static event Delegates.ValueTo_AfterArgs ValueTo
    {
        add
        {
            HookHandler._afterVa
            ueTo += value;
            Hoo kH andl e.HookValueTo
            (
            );
        }
        remove => HookHandler._afterValueTo -= value;
    }

    public static event Delegates.FadeFrom_GameObject_float_float_AfterArgs FadeFrom_GameObject_float_float
    {
        add
        {
            HookHandler._afterFadeFro
                _GameObject_flo at _flo a
                = val e;
            Hoo
                k
            Han dl er.HookFadeFrom_Ga
                eO
            ject_
                fl oat_f oat();
        }
        remove => HookHandler._afterFadeFrom_GameObject_float_float -= value;
    }

    public static event Delegates.FadeFrom_GameObject_Hashtable_AfterArgs FadeFrom_GameObject_Hashtable
    {
        add
        {
            o
                andle r._afte
                r
            Fad From_Ga eObjec _Hashtable + = value;
            Ho
                kHand
            le r.HookFadeF
                r
            om_ ameObject_Hashtable();
        }
        remove => HookHandler._afterFadeFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.FadeTo_GameObject_float_float_AfterArgs FadeTo_GameObject_float_float
    {
        add
        {
            Ho kHandle._afte FadeTo_Gam eO bject_float_fl
            at
                += va
            lu e;
            HookHan l
            e
            r.HookFadeTo_GameObject_flo
                a
            t
                _f lo at();
        }
        remove => HookHandler._afterFadeTo_GameObject_float_float -= value;
    }

    public static event Delegates.FadeTo_GameObject_Hashtable_AfterArgs FadeTo_GameObject_Hashtable
    {
        add
        {
            ookHa dl er._afte rF ade
                T
            o_GameObject_Hash
                t
            a
                bl e += val
            e;
            HookHandler
                .
                HookFadeTo_GameObjec
                _H
            shtab
            le();
        }
        remove => HookHandler._afterFadeTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.ColorFrom_GameObject_Color_float_AfterArgs
        ColorFrom_GameObject_Color_float
        {
            add
            {
                Hoo
                    Ha
                dler._after
                    C
                olorFrom_GameObject_Colo
                    _f
                oat +
                    = va lue;
                H
                    okHand
                er.Ho
                    kColorFro
                m
                _GameObject_Color_float();
            }
            remove => HookHandler._afterColorFrom_GameObject_Color_float -= value;
        }

    public static event Delegates.ColorFrom_GameObject_Hashtable_AfterArgs ColorFrom_GameObject_Hashtable
    {
        add
        {
            HookHandle
                ._
                fterC
            ol or From_G
                meObje
            t_Has
            table +=
                v
            alue;
            HookHandler.HookColorFrom_Gam
            Object_Hashtable();
        }
        remove => HookHandler._afterColorFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.ColorTo_GameObject_Color_float_AfterArgs ColorTo_GameObject_Color_float
    {
        add
        {
            H oo kHandl
            r._aft
                rColo
            To_GameOb
                j
            ect_Color_float += value;
            HookHandler.Ho
                kColorTo_GameObject_Color_floa t();
        }
        remove => HookHandler._afterColorTo_GameObject_Color_float -= value;
    }

    public static event Delegates.ColorTo_GameObject_Hashtable_AfterArgs ColorTo_GameObject_Hashtable
    {
        add
        {
            Hook
                an
            ler._
                af te rColor
            o_Game
                bject
            Hashtable
                += value;
            HookHan
            ler.Hoo kC olor T_ Game Ob ject_Ha
                s
            htable();
        }
        remove => HookHandler._afterColorTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.AudioFrom_GameObject_float_float_float_AfterArgs
        AudioFrom_GameObject_float_float_float
        {
            add
            {
                HookHandl
                r.
                    after
                    Ad oFrom_Game
                    O
                bject_float_float
                    _
                f
                    lo at += va
                ue
                    HookHandle
                r
                    .HookAudioFrom_GameO
                    je
                t_flo
                    at _f loat_f
                oat();
            }
            remove => HookHandler._afterAudioFrom_GameObject_float_float_float -= value;
        }

    public static event Delegates.AudioFrom_GameObject_Hashtable_AfterArgs AudioFrom_GameObject_Hashtable
    {
        add
        {
            HookHandler._af
                er
            udioF
                ro m_ GameOb
            ect_Ha
            htabl
                += value
                ;

            HookHandler.HookAudioFrom_GameO
            ject_Hashtable();
        }
        remove => HookHandler._afterAudioFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.AudioTo_GameObject_float_float_float_AfterArgs
        AudioTo_GameObject_float_float_float
        {
            add
            {
                Ho
                kHandler.
                    _
                    afterAudioTo_GameObject_float_floa
                _float += value;
                HookHan dl er.H ok Aud oTo GameOb j
                ect_float_floa t_ float();
            }
            remove => HookHandler._afterAudioTo_GameObject_float_float_float -= value;
        }

    public static event Delegates.AudioTo_GameObject_Hashtable_AfterArgs AudioTo_GameObject_Hashtable
    {
        add
        {
            HookHandler._after
            udioTo_GameObject_Hashtable + = valu e
            HookHandler
                .
                Hook udi To_GameObject_Hashtab le();
        }
        remove => HookHandler._afterAudioTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.Stab_GameObject_AudioClip_float_AfterArgs Stab_GameObject_AudioClip_float
    {
        add
        {
            Hoo
                Handle r._aft eS ta b_GameObje
            c
                t_AudioClip_
            lo + va
            le;
            HookHandl
                e
            r.H ookStab
            _
                G
            am eO bject_
                ud
            oClip_float
            (
            );
        }
        remove => HookHandler._afterStab_GameObject_AudioClip_float -= value;
    }

    public static event Delegates.Stab_GameObject_Hashtable_AfterArgs Stab_GameObject_Hashtable
    {
        add
        {
            Ho okHand
            er
                _afterStab_
            G
            ameObject_Hashtable
                +=
                value
                ;
            Ho okHand
            er.Hoo
                Stab_
            ameObject
                _
            Hashtable();
        }
        remove => HookHandler._afterStab_GameObject_Hashtable -= value;
    }

    public static event Delegates.LookFrom_GameObject_Vector3_float_AfterArgs
        LookFrom_GameObject_Vector3_float
        {
            add
            {
                Ho
                kHandler._aft er Look Fo m_ ame bject_
                    V
                ector 3_ float += value

                H
                    okHan
                dl er Hoo LookFr o
                    m
                _GameObje t_Vecto 3
                _
                    fl oa t();
            }
            remove => HookHandler._afterLookFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.LookFrom_GameObject_Hashtable_AfterArgs LookFrom_GameObject_Hashtable
    {
        add
        {
            Hook Ha ndler._
                a
            fterLookFrom_GameOb e
            ct Ha sh table
                =
                alue;
            HookH
                a
            ndler.HookLookFrom_Game
                bj
            ct_Ha
                sh ta ble();
        }
        remove => HookHandler._afterLookFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.LookTo_GameObject_Vector3_float_AfterArgs LookTo_GameObject_Vector3_float
    {
        add
        {
            H ookHand
            l
                e
            r.af terLoo
            To
                GameObject_
            V
            ector3_float += value;
            HookHan
            le
                .Hook
                Lo ok To_Gam
            Object
                Vecto
            3_float()
                ;
        }
        remove => HookHandler._afterLookTo_GameObject_Vector3_float -= value;
    }

    public static event Delegates.LookTo_GameObject_Hashtable_AfterArgs LookTo_GameObject_Hashtable
    {
        add
        {
            HookHandler._a
                terLookTo_Ga me Obje c_ Hashtable +
                =
                value;
            HookHandle
                .H
                okLo ok T
            o_ GameObject_
            H
            ashtable();
        }
        remove => HookHandler._afterLookTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveTo_GameObject_Vector3_float_AfterArgs MoveTo_GameObject_Vector3_float
    {
        add
        {
            HookH
                nd
            er._a
                ft erMoveTo_Ga
                m
            eObject_Vector3_float
                +
                = va lue;
            H
                ok
            andler.Hook
                M
            oveTo_GameObject_Vector3
                fl
            at();
        }
        remove => HookHandler._afterMoveTo_GameObject_Vector3_float -= value;
    }

    public static event Delegates.MoveTo_GameObject_Hashtable_AfterArgs MoveTo_GameObject_Hashtable
    {
        add
        {
            Ho
            kHandler._a
                f
            terMoveTo_GameObject_H
                sh
            able
                += v alue;

            ookHan
            ler.H
                okMoveTo_
            G
            ameObject_Hashtable();
        }
        remove => HookHandler._afterMoveTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveFrom_GameObject_Vector3_float_AfterArgs
        MoveFrom_GameObject_Vector3_float
        {
            add
            {
                oo
                    Handl
                er._ afterM
                veFrom
                    GameO
                ject_Vect
                    o
                r3_float += value;
                HookHandler.Ho
                    kMoveFrom_GameObject_Ve ct or3_ fo at()
            }
            remove => HookHandler._afterMoveFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.MoveFrom_GameObject_Hashtable_AfterArgs MoveFrom_GameObject_Hashtable
    {
        add
        {
            Hook
                H
            andler._afterMoveFrom_GameObject_Hashta
            le += value;
            HookHandler.Hook Mo veFr o_ Ga me Object_Ha
                s
            htable();
        }
        remove => HookHandler._afterMoveFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveAdd_GameObject_Vector3_float_AfterArgs
        MoveAdd_GameObject_Vector3_float
        {
            add
            {
                Hoo
                    k
                Handler._afterMoveAdd_GameObject_Vecto
                3_float += value;
                HookHandle r.Hook Mv eAdd_GameOb
                    j
                ect_Vector3_float();
            }
            remove => HookHandler._afterMoveAdd_GameObject_Vector3_float -= value;
        }

    public static event Delegates.MoveAdd_GameObject_Hashtable_AfterArgs MoveAdd_GameObject_Hashtable
    {
        add
        {
            HookHandler._afterMoveAdd_GameObject_Ha
            htable += value;
            HookHandler.HookM ov eAdd _a meObject_Ha
                s
            hta le(
            ;
        }
        remove => HookHandler._afterMoveAdd_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveBy_GameObject_Vector3_float_AfterArgs MoveBy_GameObject_Vector3_float
    {
        add
        {
            Hook
                andler
            _afte
                MoveBy_Ga
            m
                eObject_Vector3
            float + = va le;
            HookHandl
                e
            r.Hoo Move y_
                ame bject
                _V ector3 _f loat(
                )
                ;
        }
        remove => HookHandler._afterMoveBy_GameObject_Vector3_float -= value;
    }

    public static event Delegates.MoveBy_GameObject_Hashtable_AfterArgs MoveBy_GameObject_Hashtable
    {
        add
        {
            Ho ok Handle
                ._
                fterMoveBy_
            G
                ameObject_Ha
            ht
            ble +
                = va lue;
            H
                okHand
            er.Ho
                kMoveBy_G
            a
                meObject_Hashtab
            e();
        }
        remove => HookHandler._afterMoveBy_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleTo_GameObject_Vector3_float_AfterArgs
        ScaleTo_GameObject_Vector3_float
        {
            add
            {
                Hoo ka ndler._ af terScaleTo_GameObject_Vector3 _f oat += val ue;
                HookHandle r.Ho ok ScaleTo_GameObject_Vector3_float();
            }
            remove => HookHandler._afterScaleTo_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleTo_GameObject_Hashtable_AfterArgs ScaleTo_GameObject_Hashtable
    {
        add
        {
            Ho
                o
            kHandler._afterSca
                eT
            _Game
                Ob je ct_Has
                table
                    = val
            e;
            HookHa
                n
            dler.HookScaleTo_Game
                bject_Hasht ab le();
        }
        remove => HookHandler._afterScaleTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleFrom_GameObject_Vector3_float_AfterArgs
        ScaleFrom_GameObject_Vector3_float
        {
            add
            {
                H oo kHan de r._afterSc
                    a
                leF om_Gam eObject
                    Ve
                tor3_ fl oa t += value;


                HookHandler.
                    H
                    o
                ok Sc aleFro
                    _G
                meObject_Ve
                    c
                tor3_float();
            }
            remove => HookHandler._afterScaleFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleFrom_GameObject_Hashtable_AfterArgs ScaleFrom_GameObject_Hashtable
    {
        add
        {
            HookHan
            le
                ._aft
                er Sc aleFro
            _GameO
                ject_
            ashtable
                +
                = value;
            HookHandler.Hook
                caleFrom_GameOb je ct_H ah table();
        }
        remove => HookHandler._afterScaleFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleAdd_GameObject_Vector3_float_AfterArgs
        ScaleAdd_GameObject_Vector3_float
        {
            add
            {
                ookHandler._aft er Scal ed d_Gam eO bj ect_V
                e
                    ctor3 flo t += value;
                Ho o
                Ha
                dler.
                    Ho okScaleAdd_
                G
                    ameObj ct_ ector3 _flo
                    a
                t
                    ();
            }
            remove => HookHandler._afterScaleAdd_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleAdd_GameObject_Hashtable_AfterArgs ScaleAdd_GameObject_Hashtable
    {
        add
        {
            HookHa ndler._afte Scale
            _
                ameO j
                ec t_Hasht ab le +
                =
                value;
            HookHandl r.HookScaleA
                d
            d
                _G am eObjec
            _H
            shtable();
        }
        remove => HookHandler._afterScaleAdd_GameObject_Hashtable -= value;
    }

    public static event Delegates.ScaleBy_GameObject_Vector3_float_AfterArgs
        ScaleBy_GameObject_Vector3_float
        {
            add
            {
                Ho
                kHandler._a
                    f
                terScaleBy_Ga
                    eO
                ject_
                    Ve ct or3_fl
                at +=
                    alue;
                HookHandl
                    e
                r.HookScaleBy_Gam
                    Object_ Ve ctor 3f loa t();
            }
            remove => HookHandler._afterScaleBy_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleBy_GameObject_Hashtable_AfterArgs ScaleBy_GameObject_Hashtable
    {
        add
        {
            H ookHandle._a terScaleBy_G am eObject_Hashtab le + va ue;
            HokHandler.H okScal eB y_Game
            bj
                ct_Hashtabl
            e
                ();
        }
        remove => HookHandler._afterScaleBy_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateTo_GameObject_Vector3_float_AfterArgs
        RotateTo_GameObject_Vector3_float
        {
            add
            {
                HookHandle
                r
                    ._afterRotateTo_G
                    me
                bject
                    _V ec tor3_f
                oat +=
                    value

                HookHand
                    l
                er.HookRotateTo_GameObj
                    ct_Vector3_fl oa t();
            }
            remove => HookHandler._afterRotateTo_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateTo_GameObject_Hashtable_AfterArgs RotateTo_GameObject_Hashtable
    {
        add
        {
            HookHandler._afte
                RotateTo_GameObjec t_ Hash tb le + = va lue;
            H
                o
            okHa dle.HookRotateT o_ GameO
                je
            t_Has
                ht ab e()
        }
        remove => HookHandler._afterRotateTo_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateFrom_GameObject_Vector3_float_AfterArgs
        RotateFrom_GameObject_Vector3_float
        {
            add
            {
                H
                    ookHa nd ler._afterRotateFr
                    m_ me bje
                c_ Vector3_flo t
                    += va ue;
                Ho kHandler
                    .H oo kR ot ateFro
                    _G
                meObject_Ve
                    c
                tor3_float();
            }
            remove => HookHandler._afterRotateFrom_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateFrom_GameObject_Hashtable_AfterArgs RotateFrom_GameObject_Hashtable
    {
        add
        {
            HookHandler.
                af
                erRot
            at eF rom_Ga
                eObjec
            _Hash
            able += v
            a
                lue;
            HookHandler.H
                okRotate Fr om_G ae Obje ct _Hashta
            b
            le();
        }
        remove => HookHandler._afterRotateFrom_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateAdd_GameObject_Vector3_float_AfterArgs
        RotateAdd_GameObject_Vector3_float
        {
            add
            {
                Ho o
                kHandler._afterRotat
                    Ad
                _Game
                    Ob ject_Vector
                3
                _floa += va lue;
                Ho
                    o
                k
                    Ha nd ler.Ho
                    kR
                tateAdd_Gam
                    e
                Object_Vector3_float
                    );
            }
            remove => HookHandler._afterRotateAdd_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateAdd_GameObject_Hashtable_AfterArgs RotateAdd_GameObject_Hashtable
    {
        add
        {
            HookHandle
            r
                ._afterRotateAdd_GameO
                je
            t_Has
                ht ab le +=
                alue;

            ookHa
            dler.Hook
                R
            otateAdd_GameObject_Hashtab
            e();
        }
        remove => HookHandler._afterRotateAdd_GameObject_Hashtable -= value;
    }

    public static event Delegates.RotateBy_GameObject_Vector3_float_AfterArgs
        RotateBy_GameObject_Vector3_float
        {
            add
            {
                Ho
                kHandler.
                    _
                    afterRotateBy_GameObje
                t_Vector3_fl oa t += a lue;
                HookHa
                    n
                dler.HookRotateBy_
                    am
                Ob ect Ve ctor 3_float(
                    )
                    ;
            }
            remove => HookHandler._afterRotateBy_GameObject_Vector3_float -= value;
        }

    public static event Delegates.RotateBy_GameObject_Hashtable_AfterArgs RotateBy_GameObject_Hashtable
    {
        add
        {
            Hook
                H
            andler._af
                t
            e
                rR ot ateBy_
            am
                Object_Hash
            t
            able += value

            H
                okHan
            dl er.HookR
                tateBy
            GameO
                ject_Hash
            t
            able();
        }
        remove => HookHandler._afterRotateBy_GameObject_Hashtable -= value;
    }

    public static event Delegates.ShakePosition_GameObject_Vector3_float_AfterArgs
        ShakePosition_GameObject_Vector3_float
        {
            add
            {
                H ok Handler._af
                    t
                erShakePositi
                    n_
                ameOb
                    je ct Vector3_f
                l
                oat += val
                u
                    e
                    ;
                Ho okHand
                er
                    HookShakePo
                s
                    ition_GameObj
                ct
                    Vecto
                r3 _f loat()
            }
            remove => HookHandler._afterShakePosition_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ShakePosition_GameObject_Hashtable_AfterArgs
        ShakePosition_GameObject_Hashtable
        {
            add
            {
                ookHan
                ler._
                    fterShake
                P
                    osition_GameObject_Has
                table += val ue;
                Ho oH andler.Hook
                    S
                hakePosition_GameO
                    je
                t_Has
                    hb le();
            }
            remove => HookHandler._afterShakePosition_GameObject_Hashtable -= value;
        }

    public static event Delegates.ShakeScale_GameObject_Vector3_float_AfterArgs
        ShakeScale_GameObject_Vector3_float
        {
            add
            {
                oo
                    kH an dler._after hakeSca e_Game bjec
                t
                    _
                Ve ct or3_fl
                at
                    += value;
                H
                    o
                okHandler.HookShakeS
                    al
                _Game
                    Ob je ct_Vec
                or3_fl
                at();
            }
            remove => HookHandler._afterShakeScale_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ShakeScale_GameObject_Hashtable_AfterArgs ShakeScale_GameObject_Hashtable
    {
        add
        {
            H
                okHand
            er._a
                terShakeS
            c
            ale_GameObject_Hashtabl
                += value;
            Ho ok Hand lr.HookShakeS
                c
            ale_GameObject_Hash
                ab
            e(;
        }
        remove => HookHandler._afterShakeScale_GameObject_Hashtable -= value;
    }

    public static event Delegates.ShakeRotation_GameObject_Vector3_float_AfterArgs
        ShakeRotation_GameObject_Vector3_float
        {
            add
            {
                Ho okHand
                er
                    _afte
                rS hakeRotatio
                n
                    _GameObject_Vect r3_ l
                oa t += val
                e;
                HookHandler
                    .
                    HookShakeRotation_Gam
                    Ob
                ect_V
                    ec to r3_flo
                t();
            }
            remove => HookHandler._afterShakeRotation_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ShakeRotation_GameObject_Hashtable_AfterArgs
        ShakeRotation_GameObject_Hashtable
        {
            add
            {
                H
                    okHand
                er._a
                    terShakeR
                o
                    tation_GameObject_Hasht
                ble += value;
                H ookH a
                er.HookSh ak eR
                    o
                tation_GameObject_H
                    sh
                able(
                );
            }
            remove => HookHandler._afterShakeRotation_GameObject_Hashtable -= value;
        }

    public static event Delegates.PunchPosition_GameObject_Vector3_float_AfterArgs
        PunchPosition_GameObject_Vector3_float
        {
            add
            {
                Ho
                    kH
                nd le r._
                    af terPunchPos
                    i
                tion_GameObject_Ve
                    c
                t
                    or 3_ float
                    =
                    alue;
                HookH
                    a
                ndler.HookPunchPositi
                    n_
                ameOb
                    je ct _Vecto
                3_floa
                    ();
            }
            remove => HookHandler._afterPunchPosition_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PunchPosition_GameObject_Hashtable_AfterArgs
        PunchPosition_GameObject_Hashtable
        {
            add
            {
                Ho
                    kHand
                er._after
                    P
                unchPosition_GameObject
                Hashtable += va lue;
                o kHandl r.Hoo
                    k
                Punc hP osition_GameObj
                    ct
                Hasht
                    ab le();
            }
            remove => HookHandler._afterPunchPosition_GameObject_Hashtable -= value;
        }

    public static event Delegates.PunchRotation_GameObject_Vector3_float_AfterArgs
        PunchRotation_GameObject_Vector3_float
        {
            add
            {
                ookHa
                    nl er._afterPun
                    c
                hRotation_GameObje
                    c
                t
                    _V ec tor3_f
                oa
                    += value;

                H
                ookHandler.HookPunchR
                    ta
                ion_G
                    am eO bject_
                ector3
                float
                    );
            }
            remove => HookHandler._afterPunchRotation_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PunchRotation_GameObject_Hashtable_AfterArgs
        PunchRotation_GameObject_Hashtable
        {
            add
            {
                Ho
                    o
                kHandler._afterPunchRo
                    ation_GameOb je ct_H ah tabl += val e
                    ;
                Hoo Handler.Ho ok Pun
                    hR
                tatio
                    n_ GameObject_
                    H
                ashtable();
            }
            remove => HookHandler._afterPunchRotation_GameObject_Hashtable -= value;
        }

    public static event Delegates.PunchScale_GameObject_Vector3_float_AfterArgs
        PunchScale_GameObject_Vector3_float
        {
            add
            {
                Hoo Handler._aft er Punch
                    S
                c
                    al e_ GameOb
                ec
                    _Vector3_fl
                o
                at += value;
                HookHan
                le
                    .Hook
                    Pu nc hScale
                GameOb
                    ect_V
                ctor3_flo
                    a
                t();
            }
            remove => HookHandler._afterPunchScale_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PunchScale_GameObject_Hashtable_AfterArgs PunchScale_GameObject_Hashtable
    {
        add
        {
            H
            ookHandler._afterPunch
                cale_GameObj ec t_Ha st able += alu
            e
                ;
            HookHandler.Hook
                un
            hScal
                e_ Ga me Object_Ha
                s
            htable();
        }
        remove => HookHandler._afterPunchScale_GameObject_Hashtable -= value;
    }

    public static event Delegates.GenerateTargets_AfterArgs GenerateTargets
    {
        add
        {
            H
                o
            okHandler._afterGen r
            te
                arget
            s += value;
            H
                o
            okHandler.HookGen
                e
            r
                at eT argets
                );
        }
        remove => HookHandler._afterGenerateTargets -= value;
    }

    public static event Delegates.GenerateRectTargets_AfterArgs GenerateRectTargets
    {
        add
        {
            H
                ok
            andle
            r._afterGen rat RectTa rgets +=
                va ue;
            HookHa
                dl
            r.HookGener
                a
            teRectTargets();
        }
        remove => HookHandler._afterGenerateRectTargets -= value;
    }

    public static event Delegates.GenerateColorTargets_AfterArgs GenerateColorTargets
    {
        add
        {
            HookHan
                d
            l
            er._ afterG
            ne
                ateColorTar
            g
            ets += value;
            Hook
                an
            ler.H
                oo kG enerat
            ColorT
                rgets
                );
        }
        remove => HookHandler._afterGenerateColorTargets -= value;
    }

    public static event Delegates.GenerateVector3Targets_AfterArgs GenerateVector3Targets
    {
        add
        {
            HookHandler._afterGe
                er
            teVec
                to r3 Target
                += va
            ue;
            H
            okHandler
                .HookGenerateVector3Targ
            ts();
        }
        remove => HookHandler._afterGenerateVector3Targets -= value;
    }

    public static event Delegates.GenerateVector2Targets_AfterArgs GenerateVector2Targets
    {
        add
        {
            ookHan
            ler._
                fterGener
            a
            teVector2Targets += valu
                ;
            HookHandler.Ho okGe nr ateVec to r2Tar
            g
            ets();
        }
        remove => HookHandler._afterGenerateVector2Targets -= value;
    }

    public static event Delegates.GenerateFloatTargets_AfterArgs GenerateFloatTargets
    {
        add
        {
            HookHandler._afterGene
            ateFloatTargets += val u;
            Hook Ha nd ler.H
                o
            okGen rat FloatTargets();
        }
        remove => HookHandler._afterGenerateFloatTargets -= value;
    }

    public static event Delegates.GenerateColorToTargets_AfterArgs GenerateColorToTargets
    {
        add
        {
            Ho
            kHandler._a ft erGe e
            eColo rToTarg
            e
            ts += va lue;
            HookHa
                dl
            r.Hoo
                kG enerat eC ol orTo
            T
                argets );
        }
        remove => HookHandler._afterGenerateColorToTargets -= value;
    }

    public static event Delegates.GenerateAudioToTargets_AfterArgs GenerateAudioToTargets
    {
        add
        {
            HookHand
                ._
                fterG
            en erateAudioT
            o
            Targets += valu
            e;
            Ho ok Handle
                .H
                okGenerateA
            u
            dioToTargets();
        }
        remove => HookHandler._afterGenerateAudioToTargets -= value;
    }

    public static event Delegates.GenerateStabTargets_AfterArgs GenerateStabTargets
    {
        add
        {
            H okHandler._afte
                r
            G
                en er ateSta
            Ta
            gets += val
            u
                e;
            HookHandler.HookG
                ne
            ateSt
                ab Ta rgets(
            ;
        }
        remove => HookHandler._afterGenerateStabTargets -= value;
    }

    public static event Delegates.GenerateLookToTargets_AfterArgs GenerateLookToTargets
    {
        add
        {
            H
                ok
            andle
            r._a fterGe
            erateL
                okToT
            rgets +=
                v
            alue;
            HookHandler.HookGe
                erateLookToTar ge ts();
        }
        remove => HookHandler._afterGenerateLookToTargets -= value;
    }

    public static event Delegates.GenerateMoveToPathTargets_AfterArgs GenerateMoveToPathTargets
    {
        add
        {
            H
                o
            okHandler._afterGenerateM
            veToPathTargets + = va le;
            HookH ndle
            r
                .HookGenerateMoveToPa
                hT
            rgets()
        }
        remove => HookHandler._afterGenerateMoveToPathTargets -= value;
    }

    public static event Delegates.GenerateMoveToTargets_AfterArgs GenerateMoveToTargets
    {
        add
        {
            HookHan dl er._ at erGenerateM
                o
            veToT rgets += value;
            Ho
                kH
            ndler
                .H ookGenerate
            M
                ov eT oTargets();
        }
        remove => HookHandler._afterGenerateMoveToTargets -= value;
    }

    public static event Delegates.GenerateMoveByTargets_AfterArgs GenerateMoveByTargets
    {
        add
        {
            HookHa
                nd ler._a
                terGen
            rateM
                veByTarget s += val
            e;
            Hoo
                Handl
            r.HookGen
                e
            rateMoveByTarg
            ts();
        }
        remove => HookHandler._afterGenerateMoveByTargets -= value;
    }

    public static event Delegates.GenerateScaleToTargets_AfterArgs GenerateScaleToTargets
    {
        add
        {
            HookHandler._afterGener
            teScaleToTargets += value;
            Ho okHa nl er.HookGene
                r
            ateScaleToTargets();
        }
        remove => HookHandler._afterGenerateScaleToTargets -= value;
    }

    public static event Delegates.GenerateScaleByTargets_AfterArgs GenerateScaleByTargets
    {
        add
        {
            Hoo
            Handler._
                a
            fterGenerateScaleByTargets += valu
                ;
            HookHandler.HookGenerat eS cale BT argets();
        }
        remove => HookHandler._afterGenerateScaleByTargets -= value;
    }

    public static event Delegates.GenerateScaleAddTargets_AfterArgs GenerateScaleAddTargets
    {
        add
        {
            HookHa
            dler.
                afterGene
                r
            ateScaleAddTargets += value;
            HookH
            ndler.HookGenerateScaleAd dT arge t();
        }
        remove => HookHandler._afterGenerateScaleAddTargets -= value;
    }

    public static event Delegates.GenerateRotateToTargets_AfterArgs GenerateRotateToTargets
    {
        add
        {
            HookHa
            dler._
                fterG
            nerateRot
                a
            teToTargets += value;
            HookHandle
                .HookGenerateRotateToTa rg ets()
        }
        remove => HookHandler._afterGenerateRotateToTargets -= value;
    }

    public static event Delegates.GenerateRotateAddTargets_AfterArgs GenerateRotateAddTargets
    {
        add

        {
            HookH
            ndler.
                after
                enerateRo
            t
            ateAddTargets +=
                alue;
            Ho ok Hand lr.HookGenera
                t
            eRotateAd Targ
            ts
                );
        }
        remove => HookHandler._afterGenerateRotateAddTargets -= value;
    }

    public static event Delegates.GenerateRotateByTargets_AfterArgs GenerateRotateByTargets
    {
        add
        {
            HookHandler._afterGener at eRot ay Targets +=
                v
            alue;
            HookHand er.HookGenerateRotateBT a
            gets(
            );
        }
        remove => HookHandler._afterGenerateRotateByTargets -= value;
    }

    public static event Delegates.GenerateShakePositionTargets_AfterArgs GenerateShakePositionTargets
    {
        add
        {
            HookHandler._afterGenerateS
            akePositionTargets += value;
            H oo kHan de r.o okGene
            r
                ateSha ke PositionTargets();
        }
        remove => HookHandler._afterGenerateShakePositionTargets -= value;
    }

    public static event Delegates.GenerateShakeScaleTargets_AfterArgs GenerateShakeScaleTargets
    {
        add
        {
            Hook
                H
            andler._afterGenerateShakeScaleTargets
                = value;
            HookHandler.HookGener at eSha kS caleTargets
            (
            );
        }
        remove => HookHandler._afterGenerateShakeScaleTargets -= value;
    }

    public static event Delegates.GenerateShakeRotationTargets_AfterArgs GenerateShakeRotationTargets
    {
        add
        {
            Hoo
            Handle
                ._aft
                rGenerate
            S
            hakeRotationTargets += value;
            HookHan
            ler.HookGenerateShakeRotatio nT arge t();
        }
        remove => HookHandler._afterGenerateShakeRotationTargets -= value;
    }

    public static event Delegates.GeneratePunchPositionTargets_AfterArgs GeneratePunchPositionTargets
    {
        add
        {
            Ho ok Handle
                ._afte
                Gener
            tePunchPo
                s
            itionTargets += value;
            HookHandler.HookGen
            ratePunchPositionTargets();
        }
        remove => HookHandler._afterGeneratePunchPositionTargets -= value;
    }

    public static event Delegates.GeneratePunchRotationTargets_AfterArgs GeneratePunchRotationTargets
    {
        add
        {
            HookHandler._afterGener
                te
            unchR
                ot at ionTar
            ets +=
                value

            HookHand
                l
            er.HookGeneratePunchRotationTargets();
        }
        remove => HookHandler._afterGeneratePunchRotationTargets -= value;
    }

    public static event Delegates.GeneratePunchScaleTargets_AfterArgs GeneratePunchScaleTargets
    {
        add
        {
            HookHandler
                ._afterGeneratePunchScaleTargets += v
            lu
                ;
            Hoo
                kH an dler.H
                okGene
            atePu
                chScaleTa
            r
            gets();
        }
        remove => HookHandler._afterGeneratePunchScaleTargets -= value;
    }

    public static event Delegates.ApplyRectTargets_AfterArgs ApplyRectTargets
    {
        add
        {
            Ho kHandler._afterApplyRectTargets
               +
                = va lue;
            H
                ok
            andler.Hook
                A
            pplyRectTargets();
        }
        remove => HookHandler._afterApplyRectTargets -= value;
    }

    public static event Delegates.ApplyColorTargets_AfterArgs ApplyColorTargets
    {
        add
        {
            Ho kHa
            n
                dl er._afterAp lyColor argets += value;
            ok
                andle
            r.HookAppl Col
            o
            rTargets();
        }
        remove => HookHandler._afterApplyColorTargets -= value;
    }

    public static event Delegates.ApplyVector3Targets_AfterArgs ApplyVector3Targets
    {
        add
        {
            HookHandler._afterApplyVec
            or3Targets += value;
            HookHandler.HookAp pl yVec tr 3Targets()
        }
        remove => HookHandler._afterApplyVector3Targets -= value;
    }

    public static event Delegates.ApplyVector2Targets_AfterArgs ApplyVector2Targets
    {
        add
        {
            Ho
                o
            kHandler._afterApplyVector2Targets += value;
            Ho
                kHand
            le r.HookAp
                lyVect
            r2Tar
            ets();
        }
        remove => HookHandler._afterApplyVector2Targets -= value;
    }

    public static event Delegates.ApplyFloatTargets_AfterArgs ApplyFloatTargets
    {
        add
        {
            H ok Handler._af
            t
                erApplyFloatTargets = value;
            HookH
                a
            n
                dl er.HookA
                pl
            FloatTarget
            s
                ();
        }
        remove => HookHandler._afterApplyFloatTargets -= value;
    }

    public static event Delegates.ApplyColorToTargets_AfterArgs ApplyColorToTargets
    {
        add
        {
            HookHandle r._aft eA ppl ColorToT
            ar ge ts += value;
            HookHandler.HookApplyC lorToT
            rg
            ts();
        }
        remove => HookHandler._afterApplyColorToTargets -= value;
    }

    public static event Delegates.ApplyAudioToTargets_AfterArgs ApplyAudioToTargets
    {
        add
        {
            HookH
            ndler._af
                t
            erApplyAudioToTargets += value;
            HookHa
            dler.HookApplyAudioToTargets();
        }
        remove => HookHandler._afterApplyAudioToTargets -= value;
    }

    public static event Delegates.ApplyStabTargets_AfterArgs ApplyStabTargets
    {
        add
        {
            HookHandler._afterApplyStab
                ar
            ets +
                = va lue;
            H
                okHand
            er.Ho
                kApplySta
            b
            Targets();
        }
        remove => HookHandler._afterApplyStabTargets -= value;
    }

    public static event Delegates.ApplyMoveToPathTargets_AfterArgs ApplyMoveToPathTargets
    {
        add
        {
            HookHa nd le r._afterApp yMo eToPathTarge ts
                += v alue;

            oo
            Handler.Hoo
                k
            ApplyMoveToPathTargets();
        }
        remove => HookHandler._afterApplyMoveToPathTargets -= value;
    }

    public static event Delegates.ApplyMoveToTargets_AfterArgs ApplyMoveToTargets
    {
        add
        {
            Ho okHandler._afterAppl Mov ToTarg et s += valu;

            H
                ookH ndler.ookApplyMo ve ToTargets
                (
                )
                ;
        }
        remove => HookHandler._afterApplyMoveToTargets -= value;
    }

    public static event Delegates.ApplyMoveByTargets_AfterArgs ApplyMoveByTargets
    {
        add
        {
            HookHandler._afterApplyMoveB yT arge t += alue;
            Ho
                o
            kHandler.HookApplyMoveByTar ge ts();
        }
        remove => HookHandler._afterApplyMoveByTargets -= value;
    }

    public static event Delegates.ApplyScaleToTargets_AfterArgs ApplyScaleToTargets
    {
        add
        {
            H oo kHandl
            r._aft
                rAppl
            ScaleToTa
                r
            gets += value;
            HookHandler.HookApplySca
            eToTargets();
        }
        remove => HookHandler._afterApplyScaleToTargets -= value;
    }

    public static event Delegates.ApplyLookToTargets_AfterArgs ApplyLookToTargets
    {
        add
        {
            Hoo
                Ha
            dler._after
                A
            pplyLookToTargets += value;
            HookHan
            le
                .Hook
                Ap pl yLookT
            Target
                ();
        }
        remove => HookHandler._afterApplyLookToTargets -= value;
    }

    public static event Delegates.ApplyRotateToTargets_AfterArgs ApplyRotateToTargets
    {
        add
        {
            Ho
                kHand
            le r._after ppl R
                otate ToTargets + value;
            HookHa dle
            r.Ho
                o
            kA pl yR otateT
            Ta
            gets();
        }
        remove => HookHandler._afterApplyRotateToTargets -= value;
    }

    public static event Delegates.ApplyRotateAddTargets_AfterArgs ApplyRotateAddTargets
    {
        add
        {
            Ho kHandler._a
                f
            ter pplyRotateAddTargets += value;
            Ho ok andle
            r.HookApplyRo a
            te ddTarget s();
        }
        remove => HookHandler._afterApplyRotateAddTargets -= value;
    }

    public static event Delegates.ApplyShakePositionTargets_AfterArgs ApplyShakePositionTargets
    {
        add
        {
            HookHandler._afterApplyShakePosi ti onTa re ts += alu;

            H
                ook Handler.HookAp pl yShakePositionTargets
        }
        remove => HookHandler._afterApplyShakePositionTargets -= value;
    }

    public static event Delegates.ApplyShakeScaleTargets_AfterArgs ApplyShakeScaleTargets
    {
        add
        {
            HookHand
                l
            er._afterApplyShakeScaleTargets += va
            ue;
            HookHandler.HookApplySha ke Scal ea get();
        }
        remove => HookHandler._afterApplyShakeScaleTargets -= value;
    }

    public static event Delegates.ApplyShakeRotationTargets_AfterArgs ApplyShakeRotationTargets
    {
        add
        {
            ookHa
                nd le r._aft
                rApply
            hakeR
                tationTar
            g
            ets += value;
            HookHandler.HookApplyShakeRot
            tionTargets();
        }
        remove => HookHandler._afterApplyShakeRotationTargets -= value;
    }

    public static event Delegates.ApplyPunchPositionTargets_AfterArgs ApplyPunchPositionTargets
    {
        add
        {
            HookHa
                n
            dler._afterApplyPunchPositionTargets +=
                va
            ue;
            H
                oo kH andler
            HookAp
                lyPun
            hPosition
                T
            argets();
        }
        remove => HookHandler._afterApplyPunchPositionTargets -= value;
    }

    public static event Delegates.ApplyPunchRotationTargets_AfterArgs ApplyPunchRotationTargets
    {
        add
        {
            Ho okHand
            l
                e
            r._a fterAp
            ly
                unchRotatio
            n
            Targets += value;
            HookHandler.HookA
                pl
            Punch
                Ro ta tionTa
            gets()
        }
        remove => HookHandler._afterApplyPunchRotationTargets -= value;
    }

    public static event Delegates.ApplyPunchScaleTargets_AfterArgs ApplyPunchScaleTargets
    {
        add
        {
            H ookHandler.
                _
                afterApplyPunchScal eT argets += value;

            H
                o
            ok Ha ndler.
                oo
                ApplyPunchS
            c
            aleTargets();
        }
        remove => HookHandler._afterApplyPunchScaleTargets -= value;
    }

    public static event Delegates.TweenStart_AfterArgs TweenStart
    {
        add
        {
            H ookH ad ler._afterT
                w
            eenStart += value;
            HookHandl r.Hook
                we
            nStar
            t();
        }
        remove => HookHandler._afterTweenStart -= value;
    }

    public static event Delegates.TweenUpdate_AfterArgs TweenUpdate
    {
        add
        {
            HookH
                ndler
            _afterTwe
                e
            nUpdate += value;
            HookHandler.HookTweenUp
            ate();
        }
        remove => HookHandler._afterTweenUpdate -= value;
    }

    public static event Delegates.TweenComplete_AfterArgs TweenComplete
    {
        add
        {
            HookHa ndler._afterTw
                ee nC om pl ete +=
                va
            ue;
            HookHan
                d
            ler.HookTweenComplete();
        }
        remove => HookHandler._afterTweenComplete -= value;
    }

    public static event Delegates.TweenLoop_AfterArgs TweenLoop
    {
        add
        {
            Ho od ler._afterT e
            en oop += value;
            HookHandler.H okT een
                oo p
                );
        }
        remove => HookHandler._afterTweenLoop -= value;
    }

    public static event Delegates.RectUpdate_AfterArgs RectUpdate
    {
        add
        {
            Ho ok Handle
                ._afte
                RectU
            date += v
            a
                lue;
            HookHandler.HookRectUpdate();
        }
        remove => HookHandler._afterRectUpdate -= value;
    }

    public static event Delegates.Vector3Update_AfterArgs Vector3Update
    {
        add
        {
            HookHandler._afterVector3Upda
                t
            e
                + = value;
            Ho
            kHandler.Ho
                o
            kVector3Update();
        }
        remove => HookHandler._afterVector3Update -= value;
    }

    public static event Delegates.Vector2Update_AfterArgs Vector2Update
    {
        add
        {
            Hook Hn dle r._afterVector2Update += alue;
            HookHandler HookV
            or2Upd te();
        }
        remove => HookHandler._afterVector2Update -= value;
    }

    public static event Delegates.FloatUpdate_AfterArgs FloatUpdate
    {
        add
        {
            Hoo
                Handl
            r._afterF
                l
            oatUpdate += value;
            HookHandler.HookFloatUpd
            te();
        }
        remove => HookHandler._afterFloatUpdate -= value;
    }

    public static event Delegates.FadeUpdate_GameObject_Hashtable_AfterArgs FadeUpdate_GameObject_Hashtable
    {
        add
        {
            H oo kHandl
            r.
                afterFadeUp
                d
            ate_GameObject_Hashtable += value;
            HookH
                nd
            er.Ho
                ok Fa deUpda
            e_Game
                bject
            Hashtable
            (
            );
        }
        remove => HookHandler._afterFadeUpdate_GameObject_Hashtable -= value;
    }

    public static event Delegates.FadeUpdate_GameObject_float_float_AfterArgs
        FadeUpdate_GameObject_float_float
        {
            add
            {
                H
                    o
                o
                    kH an dler._
                    ft
                rFadeUpdate
                    _
                GameObject_float_float += value;
                Hoo
                    Ha
                dler.
                    Ho ok FadeUp
                    ate_Ga
                eObje
                    t_float_f
                l
                oat();
            }
            remove => HookHandler._afterFadeUpdate_GameObject_float_float -= value;
        }

    public static event Delegates.ColorUpdate_GameObject_Hashtable_AfterArgs
        ColorUpdate_GameObject_Hashtable
        {
            add
            {
                HookHan dl er.
                    _
                    af te rColor
                pd
                    te_GameObje
                c
                t_Hashtable += value;
                HookHandler.HookC
                    lo
                Updat
                    e_ Ga meObje
                t_Hash
                able(
                    ;
            }
            remove => HookHandler._afterColorUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.ColorUpdate_GameObject_Color_float_AfterArgs
        ColorUpdate_GameObject_Color_float
        {
            add
            {
                Hook
                    H
                a
                    nl er._afte
                    Co
                orUpdate_Ga
                    m
                eObject_Color_float += value;
                HookH
                    nd
                er.Ho
                    ok Co lorUpd
                te_Gam
                    Objec
                _Color_fl
                    o
                at();
            }
            remove => HookHandler._afterColorUpdate_GameObject_Color_float -= value;
        }

    public static event Delegates.AudioUpdate_GameObject_Hashtable_AfterArgs
        AudioUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandl
                    e
                r
                    ._ af terAud
                    oU
                date_GameOb
                    j
                ect_Hashtable += value;
                HookHandler.Ho
                    kA
                dioUp
                    da te _GameO
                ject_H
                    shtab
                e();
            }
            remove => HookHandler._afterAudioUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.AudioUpdate_GameObject_float_float_float_AfterArgs
        AudioUpdate_GameObject_float_float_float
        {
            add
            {
                HookHan
                    d
                ler._afterAudioUpdate_GameObject_f
                    oa
                _floa
                    t_ fl oat +=
                    value;
                HookH
                ndler.Hoo
                    k
                AudioUpdate_GameObject_float_float_float();
            }
            remove => HookHandler._afterAudioUpdate_GameObject_float_float_float -= value;
        }

    public static event Delegates.RotateUpdate_GameObject_Hashtable_AfterArgs
        RotateUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterRotateUpdate_Ga
                    eO
                ject_
                    Ha sh table
                        = valu
                    ;
                Hoo
                Handler.H
                    o
                okRotateUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterRotateUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.RotateUpdate_GameObject_Vector3_float_AfterArgs
        RotateUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler
                    _a
                terRo
                    ta te Update
                GameOb
                    ect_V
                ctor3_flo
                    a
                t += value;
                HookHandler.HookRotateUpdate_Game
                bject_Vector3_float();
            }
            remove => HookHandler._afterRotateUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.ScaleUpdate_GameObject_Hashtable_AfterArgs
        ScaleUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterSca
                    eU
                date_
                    Ga me Object
                Hashta
                le +=
                    value;
                Ho
                    o
                kHandler.HookScaleUpdate_GameObject_Hasht
                ble();
            }
            remove => HookHandler._afterScaleUpdate_GameObject_Hashtable -= value;
        }

    public static event Delegates.ScaleUpdate_GameObject_Vector3_float_AfterArgs
        ScaleUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterS
                    al
                Updat
                    e_ Ga meObje
                t_Vect
                    r3_fl
                at += val
                u
                    e;
                HookHandler.HookScaleUpdate_GameObject_Ve
                tor3_float();
            }
            remove => HookHandler._afterScaleUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.MoveUpdate_GameObject_Hashtable_AfterArgs MoveUpdate_GameObject_Hashtable
    {
        add
        {
            HookHandler._afterMoveUpdate_GameO
                je
            t_Has
                ht ab le +=
                alue;

            ookHa
            dler.Hook
                M
            oveUpdate_GameObject_Hashtable();
        }
        remove => HookHandler._afterMoveUpdate_GameObject_Hashtable -= value;
    }

    public static event Delegates.MoveUpdate_GameObject_Vector3_float_AfterArgs
        MoveUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterMoveUpdate_Game
                    bj
                ct_Ve
                    ct or 3_floa
                    += va
                ue;
                H
                okHandler
                    .HookMoveUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._afterMoveUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.LookUpdate_GameObject_Hashtable_AfterArgs LookUpdate_GameObject_Hashtable
    {
        add
        {
            H
                o
            okHandler._afterLookUpdate_GameObject_H
                sh
            able
                += v alue;

            ookHan
            ler.H
                okLookUpd
            a
            te_GameObject_Hashtable();
        }
        remove => HookHandler._afterLookUpdate_GameObject_Hashtable -= value;
    }

    public static event Delegates.LookUpdate_GameObject_Vector3_float_AfterArgs
        LookUpdate_GameObject_Vector3_float
        {
            add
            {
                Hook
                    H
                andler._afterLookUpdate_GameObject_
                    ec
                or3_f
                    lo at += va
                ue;
                Ho
                    kHand
                er.HookLo
                    o
                kUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._afterLookUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PathLength_Array_AfterArgs PathLength_Array
    {
        add
        {
            Hoo kH andler._afterP thL ngth_A rray +=
                v
            a
                ;
            HookHa
                dl
            r.HookPathL
                e
            ngth_Array();
        }
        remove => HookHandler._afterPathLength_Array -= value;
    }

    public static event Delegates.CameraTexture_AfterArgs CameraTexture
    {
        add
        {
            HookHandler._afte rC amer ax ure += alu
            e
                ;
            ookHandler.H ookCameraTexture();
        }
        remove => HookHandler._afterCameraTexture -= value;
    }

    public static event Delegates.PutOnPath_GameObject_Array_float_AfterArgs
        PutOnPath_GameObject_Array_float
        {
            add
            {
                Hook
                andler._a
                    f
                terPutOnPath_GameObject_Array_float += value;
                HookHandler.HookPutOnPath_GameObject _A rray _l oat();
            }
            remove => HookHandler._afterPutOnPath_GameObject_Array_float -= value;
        }

    public static event Delegates.PutOnPath_Transform_Array_float_AfterArgs PutOnPath_Transform_Array_float
    {
        add
        {
            Hoo
                Ha
            dler.
                _a ft erPutO
                Path_T
            ansfo
                m_Array_f
            l
            oat += value;
            HookHandler.HookPutOnPath_T
            ansform_Array_float();
        }
        remove => HookHandler._afterPutOnPath_Transform_Array_float -= value;
    }

    public static event Delegates.PointOnPath_Array_float_AfterArgs PointOnPath_Array_float
    {
        add
        {
            HookHandler._afterPointOnPath
                Ar
            ay_fl
                oa t += val
            e;
            Hoo
                Handl
            r.HookPoi
                n
            tOnPath_Array_float();
        }
        remove => HookHandler._afterPointOnPath_Array_float -= value;
    }

    public static event Delegates.DrawLine_Array_AfterArgs DrawLine_Array
    {
        add
        {
            H
                oo Handler._aft er DrawLine_Array += valu;
            H okHand ler.HookDra L
            i
                n
            e_ Ar ray();
        }
        remove => HookHandler._afterDrawLine_Array -= value;
    }

    public static event Delegates.DrawLine_Array_Color_AfterArgs DrawLine_Array_Color
    {
        add
        {
            HookHandler._afterDrawLine_Array_C ol or + = v al e;
            Hook an
            d
                ler HookDrawLi ne _Array_Color();
        }
        remove => HookHandler._afterDrawLine_Array_Color -= value;
    }

    public static event Delegates.DrawLineGizmos_Array_AfterArgs DrawLineGizmos_Array
    {
        add
        {
            Ho ok Handle
                ._afte
                DrawL
            neGizmos_
                A
            rray += value;
            HookHandler.HookDrawLineGizmos_Ar
            ay();
        }
        remove => HookHandler._afterDrawLineGizmos_Array -= value;
    }

    public static event Delegates.DrawLineGizmos_Array_Color_AfterArgs DrawLineGizmos_Array_Color
    {
        add
        {
            HookH ndl
            er._ f
            t
                er Dr awLine
            iz
                os_Array_Co
            l
            or += value;
            HookHandler.HookDrawLineGizmos_
                rr
            y_Col
            or();
        }
        remove => HookHandler._afterDrawLineGizmos_Array_Color -= value;
    }

    public static event Delegates.DrawLineHandles_Array_AfterArgs DrawLineHandles_Array
    {
        add
        {
            Ho kHandler.
                af
                erDra
            wL ineHandles_
            A
            rray + = value;
            HookHandler.H okD awLine Hand
            l
                e
            s_ Ar ray();
        }
        remove => HookHandler._afterDrawLineHandles_Array -= value;
    }

    public static event Delegates.DrawLineHandles_Array_Color_AfterArgs DrawLineHandles_Array_Color
    {
        add
        {
            HookHandler._afte rD rawL iH ndles_ Array
            _
            Color += v al ue;
            HookHandler.Hoo kD ra wLineHandle _Ar y_
            olor(
            )
        }
        remove => HookHandler._afterDrawLineHandles_Array_Color -= value;
    }

    public static event Delegates.DrawPath_Array_AfterArgs DrawPath_Array
    {
        add
        {
            Hoo
            Handle
                ._aft
                rDrawPath
            _
            Array += value;
            HookHandler.HookDrawPath_Arr
            y();
        }
        remove => HookHandler._afterDrawPath_Array -= value;
    }

    public static event Delegates.DrawPath_Array_Color_AfterArgs DrawPath_Array_Color
    {
        add
        {
            Hoo kH andler._
                a
            f
                te rD rawPat
            _A
            ray_Color +
                =
                value;
            HookHandler.HookDrawPath_Array_C
            lo
                ();
        }
        remove => HookHandler._afterDrawPath_Array_Color -= value;
    }

    public static event Delegates.DrawPathGizmos_Array_AfterArgs DrawPathGizmos_Array
    {
        add
        {
            HookHandler _af erDrawPathGi zm os
                Ar
            ay +=
                v alue;
            Ho kHa d
            ler.H ookDrawPath izmos_A ray();
        }
        remove => HookHandler._afterDrawPathGizmos_Array -= value;
    }

    public static event Delegates.DrawPathGizmos_Array_Color_AfterArgs DrawPathGizmos_Array_Color
    {
        add
        {
            ookHandler._afterDrawPathGizmos_ Ar ray_ Co r += value;

            H
            ookHandler.H okDrawPathGizmos_Array_Co
            or
                );
        }
        remove => HookHandler._afterDrawPathGizmos_Array_Color -= value;
    }

    public static event Delegates.DrawPathHandles_Array_AfterArgs DrawPathHandles_Array
    {
        add
        {
            Hoo
                k
            Handler._afterDrawPathHan
            les_Array += val ue;
            Ho oH an dl er.HookDr
                a
            wPathHandles Arr y();
        }
        remove => HookHandler._afterDrawPathHandles_Array -= value;
    }

    public static event Delegates.DrawPathHandles_Array_Color_AfterArgs DrawPathHandles_Array_Color
    {
        add
        {
            Hoo
            Handler._afterDrawPa th Hand ls _A ray Color +
                =
                value;
            HookHandler.HookD
                awa thHan
                dl es_Arra _Co o
            r
                ();
        }
        remove => HookHandler._afterDrawPathHandles_Array_Color -= value;
    }

    public static event Delegates.CameraFadeDepth_AfterArgs CameraFadeDepth
    {
        add
        {
            HookHandler._after Ca mera Fd eDepth + = va lu
                e
                ;
            HookHa dle.HookCameraF ad eDe
                th
                );
        }
        remove => HookHandler._afterCameraFadeDepth -= value;
    }

    public static event Delegates.CameraFadeDestroy_AfterArgs CameraFadeDestroy
    {
        add
        {
            HookHandler._afterCameraFadeDest
            oy += value;
            HookHandle r.Hook Cr aFadeDestro
            y
                ();
        }
        remove => HookHandler._afterCameraFadeDestroy -= value;
    }

    public static event Delegates.CameraFadeSwap_AfterArgs CameraFadeSwap
    {
        add
        {
            Ho
                kHand
            le r._after
                ameraF
            deSwa
                += value
                ;

            HookHandler.HookCameraFadeSwap(
                ;
        }
        remove => HookHandler._afterCameraFadeSwap -= value;
    }

    public static event Delegates.CameraFadeAdd_Texture2D_int_AfterArgs CameraFadeAdd_Texture2D_int
    {
        add
        {
            HookHandler._afterCam
                ra
            adeAd
                d_ Te xture2
            _int +
                valu
                ;
            HookHan
                d
            ler.HookCameraFadeAdd_Texture2
            _int();
        }
        remove => HookHandler._afterCameraFadeAdd_Texture2D_int -= value;
    }

    public static event Delegates.CameraFadeAdd_Texture2D_AfterArgs CameraFadeAdd_Texture2D
    {
        add
        {
            ookHa
                nd le r._aft
                rCamer
            FadeA
                d_Texture
            2
            D += value;
            HookHandler.HookCame
            aFadeAdd_Texture2D();
        }
        remove => HookHandler._afterCameraFadeAdd_Texture2D -= value;
    }

    public static event Delegates.CameraFadeAdd_AfterArgs CameraFadeAdd
    {
        add
        {
            HookHandler._afterC
                me
            aFade
                Ad d += val
            e;
            Hoo
                Handl
            r.HookCam
                e
            raFadeAdd();
        }
        remove => HookHandler._afterCameraFadeAdd -= value;
    }

    public static event Delegates.Resume_GameObject_AfterArgs Resume_GameObject
    {
        add
        {
            HookHand
                l
            e
            r._a fterRe
            um
            _GameObject
                += value;
            HookHandler.HookRe
                um
            _Game
                Ob je ct();
        }
        remove => HookHandler._afterResume_GameObject -= value;
    }

    public static event Delegates.Resume_GameObject_bool_AfterArgs Resume_GameObject_bool
    {
        add
        {
            Hoo Han ler._a fterResum
            e_ am eO bject_
            oo
                += value;

            H
            ookHandler.HookResume_Gam
                Ob
            ect_b
                oo l();
        }
        remove => HookHandler._afterResume_GameObject_bool -= value;
    }

    public static event Delegates.Resume_GameObject_string_AfterArgs Resume_GameObject_string
    {
        add
        {
            Hoo Handler._afterResu
                m
            e
                _G am eObjec
            _s
            ring += val
            u
                e;
            HookHandler.HookResume_G
                me
            bject
                _s tr ing();
        }
        remove => HookHandler._afterResume_GameObject_string -= value;
    }

    public static event Delegates.Resume_GameObject_string_bool_AfterArgs Resume_GameObject_string_bool
    {
        add
        {
            HookHandle._a terRe
            s
                u
            me _G ameObj
                ct
            string_bool
                += value;
            HookHandler.HookResum
                _G
            meObj
                ec t_ string
            bool()
        }
        remove => HookHandler._afterResume_GameObject_string_bool -= value;
    }

    public static event Delegates.Resume_AfterArgs Resume
    {
        add
        {
            Ho kHandl e
            r._afterResum e += value;
            Ho
                o
            k
                Ha nd ler.Ho
                kR
            sume();
        }
        remove => HookHandler._afterResume -= value;
    }

    public static event Delegates.Resume_string_AfterArgs Resume_string
    {
        add
        {
            Ho ok Hand l_ afterRe sume_
            s
                tri g += va ue;
            Ho kHandler.Ho
                kR
            sume s
            tr ing(
            ;
        }
        remove => HookHandler._afterResume_string -= value;
    }

    public static event Delegates.Pause_GameObject_AfterArgs Pause_GameObject
    {
        add
        {
            HookHandler._afterPause_Ga
            eObject += value;
            HookH an dler.o okPause_Gam
            e
            Object();
        }
        remove => HookHandler._afterPause_GameObject -= value;
    }

    public static event Delegates.Pause_GameObject_bool_AfterArgs Pause_GameObject_bool
    {
        add
        {
            ookHa
            dler._aft
                e
            rPause_GameObject_bool += value;
            HookHandler.HookPause_G am eObj et _boo();
        }
        remove => HookHandler._afterPause_GameObject_bool -= value;
    }

    public static event Delegates.Pause_GameObject_string_AfterArgs Pause_GameObject_string
    {
        add
        {
            HookH
                ndler
            _afterPau
                s
            e_GameObject_string += value;
            Hoo
            Handler.HookPause_GameOb je ct_s ti g();
        }
        remove => HookHandler._afterPause_GameObject_string -= value;
    }

    public static event Delegates.Pause_GameObject_string_bool_AfterArgs Pause_GameObject_string_bool
    {
        add
        {
            H
                okHan
            ler._afte
                r
            Pause_GameObject_string_bool += v
            lue;
            HookHandler.HookPau se _Gam eb ject_st ing_
            b
            oo();
        }
        remove => HookHandler._afterPause_GameObject_string_bool -= value;
    }

    public static event Delegates.Pause_AfterArgs Pause
    {
        add
        {
            Ho
                kH
            ndler
                ._ af terPau
            e += v
            lue;

            ookHandle
            r
                .HookPause();
        }
        remove => HookHandler._afterPause -= value;
    }

    public static event Delegates.Pause_string_AfterArgs Pause_string
    {
        add
        {
            Hoo
                k
            Handler._af te rPause_string + va u
                e;
            H ookHan
            le
                .HookPause_
                s
            tring();
        }
        remove => HookHandler._afterPause_string -= value;
    }

    public static event Delegates.Count_AfterArgs Count
    {
        add
        {
            HookHa nd ler._f terCount +=
                value;
            HookHandler.HookCount(
                ;
        }
        remove => HookHandler._afterCount -= value;
    }

    public static event Delegates.Count_string_AfterArgs Count_string
    {
        add
        {
            Hook
                andler
            _afte
                Count_str
            i
            ng += value;
            HookHandler.HookCount_str
            ng();
        }
        remove => HookHandler._afterCount_string -= value;
    }

    public static event Delegates.Count_GameObject_AfterArgs Count_GameObject
    {
        add
        {
            Ho ok Handle
                ._
                fterCount_G
            a
            meObject += value;
            HookHandler.Hoo
                Co
            nt_Ga
                me Ob ject()
        }
        remove => HookHandler._afterCount_GameObject -= value;
    }

    public static event Delegates.Count_GameObject_string_AfterArgs Count_GameObject_string
    {
        add
        {
            HookH
                a
            ndler._afterCount_GameObject_s tr i
            ng + = valu
                ;

            ookHandler.H
            ookCount_GameObject_string();
        }
        remove => HookHandler._afterCount_GameObject_string -= value;
    }

    public static event Delegates.Stop_AfterArgs Stop
    {
        add
        {
            ookHand e
            r._af erStop += va lue;
            HookHandler.Ho
                kS
            op();
        }
        remove => HookHandler._afterStop -= value;
    }

    public static event Delegates.Stop_string_AfterArgs Stop_string
    {
        add
        {
            H ookHan
            ler._a
                terSt
            p_string
                +
                = value;
            HookHandler.HookStop_string()
        }
        remove => HookHandler._afterStop_string -= value;
    }

    public static event Delegates.StopByName_string_AfterArgs StopByName_string
    {
        add
        {
            HookHa
                n
            d
                le r._after
                to
            ByName_stri
                n
            g += value;
            HookHandler.HookStopBy
                am
            _stri
            ng();
        }
        remove => HookHandler._afterStopByName_string -= value;
    }

    public static event Delegates.Stop_GameObject_AfterArgs Stop_GameObject
    {
        add
        {
            HookHandle._a
                ter top_G
            Object += v al
            u
                e;
            HookHandler.HookStop_GameObje
                c
            t
                ();
        }
        remove => HookHandler._afterStop_GameObject -= value;
    }

    public static event Delegates.Stop_GameObject_bool_AfterArgs Stop_GameObject_bool
    {
        add
        {
            HookHandler._a fter So _GameObject_ bo ol += value;
            HookHandler.HookSt
                p_
            am Obj ct _boo l();
        }
        remove => HookHandler._afterStop_GameObject_bool -= value;
    }

    public static event Delegates.Stop_GameObject_string_AfterArgs Stop_GameObject_string
    {
        add
        {
            HookHand
            er._afterStop_Gam eO bjec tr ing += valu
            e
                ;
            HookHandler.HookStop
                me O
                ject_
            st ri g()
        }
        remove => HookHandler._afterStop_GameObject_string -= value;
    }

    public static event Delegates.StopByName_GameObject_string_AfterArgs StopByName_GameObject_string
    {
        add
        {
            H ok Handler._ afte
            r
                StopByName_GameObject_s
            ri
            g +=
                vl ue;
            HookHa n
            d
            ler.HookStopB yN ame_Game
                O
            b
                je ct _strin
            ()
        }
        remove => HookHandler._afterStopByName_GameObject_string -= value;
    }

    public static event Delegates.Stop_GameObject_string_bool_AfterArgs Stop_GameObject_string_bool
    {
        add
        {
            H
                okHan
            dl er._afterSt
                o
            p_GameObject_string_boo
            l
                + va lue;
            H
                ok
            andler.Hook
                S
            top_GameObject_string_boo
                ()
        }
        remove => HookHandler._afterStop_GameObject_string_bool -= value;
    }

    public static event Delegates.StopByName_GameObject_string_bool_AfterArgs
        StopByName_GameObject_string_bool
        {
            add
            {
                H
                    o
                o
                    kH an dler._
                    ft
                rStopByName
                    _
                GameObject_string_bool +=
                    va
                ue;
                H
                    oo kH andler
                HookSt
                    pByNa
                e_GameObj
                    e
                ct_string_bool();
            }
            remove => HookHandler._afterStopByName_GameObject_string_bool -= value;
        }

    public static event Delegates.Hash_AfterArgs Hash
    {
        add
        {
            Ho
                kH
            ndler._afte
                r
            Hash += value;
            HookHand
                er
            HookH
                as h( );
        }
        remove => HookHandler._afterHash -= value;
    }

    public static event Delegates.Awake_AfterArgs Awake
    {
        add
        {
            HookHandle r._aft
                rA
            ake +
                = value;
            Hook
                H
            andler.HookAwake()
        }
        remove => HookHandler._afterAwake -= value;
    }

    public static event Delegates.Update_AfterArgs Update
    {
        add
        {
            HookHandler._afterUp
            ate += value;
            HookHa nd ler.Ho Update );
        }
        remove => HookHandler._afterUpdate -= value;
    }

    public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
    {
        add
        {
            HookHand
                er
            _afte
                rF ix edUpda
            e += v
            lue;

            ookHandle
            r
                .HookFixedUpdate();
        }
        remove => HookHandler._afterFixedUpdate -= value;
    }

    public static event Delegates.LateUpdate_AfterArgs LateUpdate
    {
        add

        {
            HookH
                nd
            er._afterLa
                t
            eUpdate += value;
            Hook
                an
            ler.H
                oo kL ateUpd
            te();
        }
        remove => HookHandler._afterLateUpdate -= value;
    }

    public static event Delegates.OnEnable_AfterArgs OnEnable
    {
        add
        {
            Hok Ha
            dler.
                _f erO Enable
                       +
                = va lu e;
            HookHandler.HookOnE
                n
            a
                bl e();
        }
        remove => HookHandler._afterOnEnable -= value;
    }

    public static event Delegates.OnDisable_AfterArgs OnDisable
    {
        add
        {
            HookHandler._after On Disa be += value;

            H
            ookHandler.HookOnDisable
                );
        }
        remove => HookHandler._afterOnDisable -= value;
    }

    public static event Delegates.DrawLineHelper_AfterArgs DrawLineHelper
    {
        add
        {
            HookHandl
                e
            r._afterDrawLineHelper += va
            ue;
            HookHandler.Hoo kD rawL ie Helper();
        }
        remove => HookHandler._afterDrawLineHelper -= value;
    }

    public static event Delegates.DrawPathHelper_AfterArgs DrawPathHelper
    {
        add
        {
            Ho okHand
            er._af
                erDra
            PathHelpe
            r
                += value;
            HookHandler.HookDr
            wPathHelper();
        }
        remove => HookHandler._afterDrawPathHelper -= value;
    }

    public static event Delegates.PathControlPointGenerator_AfterArgs PathControlPointGenerator
    {
        add
        {
            Ho
                kHand
            le r._after
                athCon
            rolPo
                ntGenerat
            o
            r += value;
            HookHandler.Hook
                athControlPointGene ra tor()
        }
        remove => HookHandler._afterPathControlPointGenerator -= value;
    }

    public static event Delegates.Interp_AfterArgs Interp
    {
        add
        {
            HookHandler
                _a
            terIn
                te rp += va
            ue;
            Ho
                kHand
            er.HookIn
                t
            erp();
        }
        remove => HookHandler._afterInterp -= value;
    }

    public static event Delegates.Launch_AfterArgs Launch
    {
        add
        {
            HookHa n
            d
            ler._ afterLaunch += val e;
            H
                o
            o
                kH an dler.H
                ok
            aunch();
        }
        remove => HookHandler._afterLaunch -= value;
    }

    public static event Delegates.CleanArgs_AfterArgs CleanArgs
    {
        add
        {
            HookHand le r._a fe rCleanArgs
                                +
                = v al ue;
            HookHandler.HookClea
                Ar
            s();
        }
        remove => HookHandler._afterCleanArgs -= value;
    }

    public static event Delegates.GenerateID_AfterArgs GenerateID
    {
        add
        {
            ookHa
            dler._aft
                e
            rGenerateID += value;
            HookHandler.H
            okGenerateID();
        }
        remove => HookHandler._afterGenerateID -= value;
    }

    public static event Delegates.RetrieveArgs_AfterArgs RetrieveArgs
    {
        add
        {
            oo
            Handler._af
                t
            erRetrieveArgs += value;
            HookHa
                dl
            r.Hoo
                kR et rieveA
            gs();
        }
        remove => HookHandler._afterRetrieveArgs -= value;
    }

    public static event Delegates.GetEasingFunction_AfterArgs GetEasingFunction
    {
        add
        {
            HookHand
                l
            er._afterGetEasingFunction
                +
                = va lue;
            H
                ok
            andler.Hook
                G
            etEasingFunction();
        }
        remove => HookHandler._afterGetEasingFunction -= value;
    }

    public static event Delegates.UpdatePercentage_AfterArgs UpdatePercentage
    {
        add
        {
            HookHa dler._ fterUpdate Pe rce
            ta
            e +=
                va lue;
            HookHa
                n
            dler.HookUpdatePer entage();
        }
        remove => HookHandler._afterUpdatePercentage -= value;
    }

    public static event Delegates.CallBack_AfterArgs CallBack
    {
        add
        {
            HookHandler.afterCallBack += value;
            Ho ok Hand lr.HookCa ll Back
            (
            );
        }
        remove => HookHandler._afterCallBack -= value;
    }

    public static event Delegates.Dispose_AfterArgs Dispose
    {
        add
        {
            HookHandler._afterDispose += va
            ue
                Hook
            Ha nd ler.Ho
                kDispo
            e();
        }
        remove => HookHandler._afterDispose -= value;
    }

    public static event Delegates.ConflictCheck_AfterArgs ConflictCheck
    {
        add
        {
            HookH
                nd
            er._a
                ft erConflictC
                h
            eck += val e;
            Hoo kHandler.Ho kCon
            f
                l
            Ch eck();
        }
        remove => HookHandler._afterConflictCheck -= value;
    }

    public static event Delegates.EnableKinematic_AfterArgs EnableKinematic
    {
        add
        {
            HookHand le r._a fr EnableKinem
                at ic += value;
            HookHandler.Hook
                na
            leKin
                ea ti c();
        }
        remove => HookHandler._afterEnableKinematic -= value;
    }

    public static event Delegates.DisableKinematic_AfterArgs DisableKinematic
    {
        add
        {
            HookHandler._af
                erDisableKi ne mati c + = value;
            Ho
                o
            kHandler.H ookDisab
            eK
                nemat
            ic();
        }
        remove => HookHandler._afterDisableKinematic -= value;
    }

    public static event Delegates.ResumeDelay_AfterArgs ResumeDelay
    {
        add
        {
            H
            okHandler._a ft erRe s
                Delay = valu;
            HookHand le r.HookR
                su
            eDela
            y();
        }
        remove => HookHandler._afterResumeDelay -= value;
    }

    public static event Delegates.linear_AfterArgs linear
    {
        add
        {
            HookHandler._afterl
            near += value;
            H ookH ad ler.Hooklin
                e
            ar();
        }
        remove => HookHandler._afterlinear -= value;
    }

    public static event Delegates.clerp_AfterArgs clerp
    {
        add
        {
            Hook
                Ha nd ler._a
                tercle
            p +=
                alue;
            Hoo
                k
            Handler.Hookclerp()
        }
        remove => HookHandler._afterclerp -= value;
    }

    public static event Delegates.spring_AfterArgs spring
    {
        add
        {
            H
            ookHandler._aft
                rs
            ring
                += v alue;

            ookHan
            ler.H
            okspring(
                )
                ;
        }
        remove => HookHandler._afterspring -= value;
    }

    public static event Delegates.easeInQuad_AfterArgs easeInQuad
    {
        add
        {
            Ho
                kH
            ndler._afte
                r
            easeInQuad += va
            ue
                Hook
            Ha nd ler.Ho
                keaseI
            Quad(
                ;
        }
        remove => HookHandler._aftereaseInQuad -= value;
    }

    public static event Delegates.easeOutQuad_AfterArgs easeOutQuad
    {
        add
        {
            HookHan
                d
            l
            er._ aftere
            se
            utQuad += v
            a
                lue;
            HookHandler.Ho
                ke
            seOut
                Qu ad();
        }
        remove => HookHandler._aftereaseOutQuad -= value;
    }

    public static event Delegates.easeInOutQuad_AfterArgs easeInOutQuad
    {
        add
        {
            Hoo Handler._
                a
            f
                te re aseInO
            tQ
            ad += value
                ;

            HookHandler.Hookea
                eI
            OutQu
            ad();
        }
        remove => HookHandler._aftereaseInOutQuad -= value;
    }

    public static event Delegates.easeInCubic_AfterArgs easeInCubic
    {
        add
        {
            HookHandler _a
            f
                t
            er ea seInCu
            ic
                += value;
            H
                o
            okHandler.Hookeas
                In
            ubic(
            );
        }
        remove => HookHandler._aftereaseInCubic -= value;
    }

    public static event Delegates.easeOutCubic_AfterArgs easeOutCubic
    {
        add
        {
            H okHandler._a ft ereaseOutCubic += value;
            Ho
                kHand
            le r.Hook ase ut
                C
            ubi c();
        }
        remove => HookHandler._aftereaseOutCubic -= value;
    }

    public static event Delegates.easeInOutCubic_AfterArgs easeInOutCubic
    {
        add
        {
            HookHa
                n
            dler._aftereaseInOutCubic += value;
            HookHan
            ler.HookeaseInOutCubic();
        }
        remove => HookHandler._aftereaseInOutCubic -= value;
    }

    public static event Delegates.easeInQuart_AfterArgs easeInQuart
    {
        add
        {
            HookHand le r._
                a
            f
                te re aseInQ
            ar
                += value;

            H
            ookHandler.HookeaseInQuart();
        }
        remove => HookHandler._aftereaseInQuart -= value;
    }

    public static event Delegates.easeOutQuart_AfterArgs easeOutQuart
    {
        add
        {
            H ookH ad ler._aftere
                as eO utQuart += alu;
            HookHandle r.HookeaseOut
                ua
            t();
        }
        remove => HookHandler._aftereaseOutQuart -= value;
    }

    public static event Delegates.easeInOutQuart_AfterArgs easeInOutQuart
    {
        add
        {
            H ookHan
            ler._a
                terea
            eInOutQua
                r
            t += value;
            HookHandler.HookeaseInOutQuart()
        }
        remove => HookHandler._aftereaseInOutQuart -= value;
    }

    public static event Delegates.easeInQuint_AfterArgs easeInQuint
    {
        add
        {
            HookHandler _aftere seInQu nt += valu e;
            H
                o
            o
                kH an dler.H
                ok
            aseInQuint(
                )
                ;
        }
        remove => HookHandler._aftereaseInQuint -= value;
    }

    public static event Delegates.easeOutQuint_AfterArgs easeOutQuint
    {
        add
        {
            HookHandler._aftereaseOutQui nt += vl ue;
            HookHa nd le r
                .HookeaseO tQu nt();
        }
        remove => HookHandler._aftereaseOutQuint -= value;
    }

    public static event Delegates.easeInOutQuint_AfterArgs easeInOutQuint
    {
        add
        {
            HookHandler._after
                as
                InOut
            Qu in t += v
            lue;
            H
                okHan
            ler.Hooke
                a
            seInOutQuint();
        }
        remove => HookHandler._aftereaseInOutQuint -= value;
    }

    public static event Delegates.easeInSine_AfterArgs easeInSine
    {
        add
        {
            Ho kHa dler._ afterea
            eIn ine +
                = alue;
            ookHa
                n
            dler.H ookeaseInSine();
        }
        remove => HookHandler._aftereaseInSine -= value;
    }

    public static event Delegates.easeOutSine_AfterArgs easeOutSine
    {
        add
        {
            Hook
            andler._a
                f
            tereaseOutSine += value;
            HookHandler.Hookea
            eOutSine();
        }
        remove => HookHandler._aftereaseOutSine -= value;
    }

    public static event Delegates.easeInOutSine_AfterArgs easeInOutSine
    {
        add
        {
            HookHandler._aftere
                a
            s
                eI nO utSine
                +=
                value;
            Hook
                H
            andler.HookeaseInOutSine();
        }
        remove => HookHandler._aftereaseInOutSine -= value;
    }

    public static event Delegates.easeInExpo_AfterArgs easeInExpo
    {
        add
        {
            HookHandler._ af tere ae InExpo += va ue;
            HookHa ndler.Hooke seInExp();
        }
        remove => HookHandler._aftereaseInExpo -= value;
    }

    public static event Delegates.easeOutExpo_AfterArgs easeOutExpo
    {
        add
        {
            HookHandler._aftereaseOutE
            po
                += va
            lu e;
            HookH
            ndler.ookea
            eOutExpo(
                )
                ;
        }
        remove => HookHandler._aftereaseOutExpo -= value;
    }

    public static event Delegates.easeInOutExpo_AfterArgs easeInOutExpo
    {
        add
        {
            Hook an
            ler _afte
            re ase In OutExpo
                      +
                = value;
            HookHandler.HookeaseInOu Exp
            o
            (
            );
        }
        remove => HookHandler._aftereaseInOutExpo -= value;
    }

    public static event Delegates.easeInCirc_AfterArgs easeInCirc
    {
        add
        {
            HookHandler._aftereaseI
            Circ += value;
            HookHandler.HookeaseIn Ci rc();
        }
        remove => HookHandler._aftereaseInCirc -= value;
    }

    public static event Delegates.easeOutCirc_AfterArgs easeOutCirc
    {
        add
        {
            H
                o
            o
                kH an dler._
                ft
            reaseOutCir
            c
                += value;
            HookHandler.HookeaseOutCirc();
        }
        remove => HookHandler._aftereaseOutCirc -= value;
    }

    public static event Delegates.easeInOutCirc_AfterArgs easeInOutCirc
    {
        add
        {
            HookHa
                n
            dler._aftereaseInOutCir += value;
            HookH
            nd
                .Hoo
                ka eInOut irc(
                )
                ;
        }
        remove => HookHandler._aftereaseInOutCirc -= value;
    }

    public static event Delegates.easeInBounce_AfterArgs easeInBounce
    {
        add
        {
            H
            okHandler
                ._aftereaseInBounce += value;
            HookHandler.Hook
            aseInBounce();
        }
        remove => HookHandler._aftereaseInBounce -= value;
    }

    public static event Delegates.easeOutBounce_AfterArgs easeOutBounce
    {
        add
        {
            HookHandler._aftereas
                e
            O
                ut Bo unce +
                v
            lue;
            HookHa
                n
            dler.HookeaseOutBounce();
        }
        remove => HookHandler._aftereaseOutBounce -= value;
    }

    public static event Delegates.easeInOutBounce_AfterArgs easeInOutBounce
    {
        add
        {
            H ok Ha nd ler._afte
                r
            easeInOutBounce += value;
            Hook and er.Ho ke
            seInO
                uB unce();
        }
        remove => HookHandler._aftereaseInOutBounce -= value;
    }

    public static event Delegates.easeInBack_AfterArgs easeInBack
    {
        add
        {
            Hook
            andle
                ._afterea
                s
            eInBack += value;
            HookHandler.HookeaseInBack(
                ;
        }
        remove => HookHandler._aftereaseInBack -= value;
    }

    public static event Delegates.easeOutBack_AfterArgs easeOutBack
    {
        add
        {
            H
                ookHand le r._aftereaseOutBack += value;
            Ho
                o
            k
                Ha nd ler.Ho
                ke
            seOutBack()
                ;
        }
        remove => HookHandler._aftereaseOutBack -= value;
    }

    public static event Delegates.easeInOutBack_AfterArgs easeInOutBack
    {
        add
        {
            Ho oH andler._aft
                e
            reaseInOutBack += valu
                ;
            o ok Hn dl er.Hook ase n
                O
            utBack();
        }
        remove => HookHandler._aftereaseInOutBack -= value;
    }

    public static event Delegates.punch_AfterArgs punch
    {
        add
        {
            HookHandler
            _afterpunch += v alue;
            H ookHandler.H
            ookpunch();
        }
        remove => HookHandler._afterpunch -= value;
    }

    public static event Delegates.easeInElastic_AfterArgs easeInElastic
    {
        add
        {
            Hoo
            Handler._
                a
            ftereaseInElastic += value;
            HookHandler.Ho
            keaseInElastic();
        }
        remove => HookHandler._aftereaseInElastic -= value;
    }

    public static event Delegates.easeOutElastic_AfterArgs easeOutElastic
    {
        add
        {
            Hoo
                k
            H
                an dl er._af
                er
            aseOutElast
                i
            c += value;
            HookHandler.HookeaseOutEla
            ti
                ();
        }
        remove => HookHandler._aftereaseOutElastic -= value;
    }

    public static event Delegates.easeInOutElastic_AfterArgs easeInOutElastic
    {
        add
        {
            Hook andler.aftere seInOutEla st ic
                =
                alue;

            H ookHandler.
                H
                ookeaseInOutElas ic();
        }
        remove => HookHandler._aftereaseInOutElastic -= value;
    }
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
    public static event On.iTween.hook_Init Init
    {
        add => On.iTween.Init += value;
        remove => On.iTween.Init -= value;
    }

    public static event On.iTween.hook_CameraFadeFrom_float_float CameraFadeFrom_float_float
    {
        add => On.iTween.CameraFadeFrom_float_float += value;
        remove => On.iTween.CameraFadeFrom_float_float -= value;
    }

    public static event On.iTween.hook_CameraFadeFrom_Hashtable CameraFadeFrom_Hashtable
    {
        add => On.iTween.CameraFadeFrom_Hashtable += value;
        remove => On.iTween.CameraFadeFrom_Hashtable -= value;
    }

    public static event On.iTween.hook_CameraFadeTo_float_float CameraFadeTo_float_float
    {
        add => On.iTween.CameraFadeTo_float_float += value;
        remove => On.iTween.CameraFadeTo_float_float -= value;
    }

    public static event On.iTween.hook_CameraFadeTo_Hashtable CameraFadeTo_Hashtable
    {
        add => On.iTween.CameraFadeTo_Hashtable += value;
        remove => On.iTween.CameraFadeTo_Hashtable -= value;
    }

    public static event On.iTween.hook_ValueTo ValueTo
    {
        add => On.iTween.ValueTo += value;
        remove => On.iTween.ValueTo -= value;
    }

    public static event On.iTween.hook_FadeFrom_GameObject_float_float FadeFrom_GameObject_float_float
    {
        add => On.iTween.FadeFrom_GameObject_float_float += value;
        remove => On.iTween.FadeFrom_GameObject_float_float -= value;
    }

    public static event On.iTween.hook_FadeFrom_GameObject_Hashtable FadeFrom_GameObject_Hashtable
    {
        add => On.iTween.FadeFrom_GameObject_Hashtable += value;
        remove => On.iTween.FadeFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_FadeTo_GameObject_float_float FadeTo_GameObject_float_float
    {
        add => On.iTween.FadeTo_GameObject_float_float += value;
        remove => On.iTween.FadeTo_GameObject_float_float -= value;
    }

    public static event On.iTween.hook_FadeTo_GameObject_Hashtable FadeTo_GameObject_Hashtable
    {
        add => On.iTween.FadeTo_GameObject_Hashtable += value;
        remove => On.iTween.FadeTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ColorFrom_GameObject_Color_float ColorFrom_GameObject_Color_float
    {
        add => On.iTween.ColorFrom_GameObject_Color_float += value;
        remove => On.iTween.ColorFrom_GameObject_Color_float -= value;
    }

    public static event On.iTween.hook_ColorFrom_GameObject_Hashtable ColorFrom_GameObject_Hashtable
    {
        add => On.iTween.ColorFrom_GameObject_Hashtable += value;
        remove => On.iTween.ColorFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ColorTo_GameObject_Color_float ColorTo_GameObject_Color_float
    {
        add => On.iTween.ColorTo_GameObject_Color_float += value;
        remove => On.iTween.ColorTo_GameObject_Color_float -= value;
    }

    public static event On.iTween.hook_ColorTo_GameObject_Hashtable ColorTo_GameObject_Hashtable
    {
        add => On.iTween.ColorTo_GameObject_Hashtable += value;
        remove => On.iTween.ColorTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_AudioFrom_GameObject_float_float_float
        AudioFrom_GameObject_float_float_float
        {
            add => On.iTween.AudioFrom_GameObject_float_float_float += value;
            remove => On.iTween.AudioFrom_GameObject_float_float_float -= value;
        }

    public static event On.iTween.hook_AudioFrom_GameObject_Hashtable AudioFrom_GameObject_Hashtable
    {
        add => On.iTween.AudioFrom_GameObject_Hashtable += value;
        remove => On.iTween.AudioFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_AudioTo_GameObject_float_float_float
        AudioTo_GameObject_float_float_float
        {
            add => On.iTween.AudioTo_GameObject_float_float_float += value;
            remove => On.iTween.AudioTo_GameObject_float_float_float -= value;
        }

    public static event On.iTween.hook_AudioTo_GameObject_Hashtable AudioTo_GameObject_Hashtable
    {
        add => On.iTween.AudioTo_GameObject_Hashtable += value;
        remove => On.iTween.AudioTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_Stab_GameObject_AudioClip_float Stab_GameObject_AudioClip_float
    {
        add => On.iTween.Stab_GameObject_AudioClip_float += value;
        remove => On.iTween.Stab_GameObject_AudioClip_float -= value;
    }

    public static event On.iTween.hook_Stab_GameObject_Hashtable Stab_GameObject_Hashtable
    {
        add => On.iTween.Stab_GameObject_Hashtable += value;
        remove => On.iTween.Stab_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_LookFrom_GameObject_Vector3_float LookFrom_GameObject_Vector3_float
    {
        add => On.iTween.LookFrom_GameObject_Vector3_float += value;
        remove => On.iTween.LookFrom_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_LookFrom_GameObject_Hashtable LookFrom_GameObject_Hashtable
    {
        add => On.iTween.LookFrom_GameObject_Hashtable += value;
        remove => On.iTween.LookFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_LookTo_GameObject_Vector3_float LookTo_GameObject_Vector3_float
    {
        add => On.iTween.LookTo_GameObject_Vector3_float += value;
        remove => On.iTween.LookTo_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_LookTo_GameObject_Hashtable LookTo_GameObject_Hashtable
    {
        add => On.iTween.LookTo_GameObject_Hashtable += value;
        remove => On.iTween.LookTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_MoveTo_GameObject_Vector3_float MoveTo_GameObject_Vector3_float
    {
        add => On.iTween.MoveTo_GameObject_Vector3_float += value;
        remove => On.iTween.MoveTo_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_MoveTo_GameObject_Hashtable MoveTo_GameObject_Hashtable
    {
        add => On.iTween.MoveTo_GameObject_Hashtable += value;
        remove => On.iTween.MoveTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_MoveFrom_GameObject_Vector3_float MoveFrom_GameObject_Vector3_float
    {
        add => On.iTween.MoveFrom_GameObject_Vector3_float += value;
        remove => On.iTween.MoveFrom_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_MoveFrom_GameObject_Hashtable MoveFrom_GameObject_Hashtable
    {
        add => On.iTween.MoveFrom_GameObject_Hashtable += value;
        remove => On.iTween.MoveFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_MoveAdd_GameObject_Vector3_float MoveAdd_GameObject_Vector3_float
    {
        add => On.iTween.MoveAdd_GameObject_Vector3_float += value;
        remove => On.iTween.MoveAdd_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_MoveAdd_GameObject_Hashtable MoveAdd_GameObject_Hashtable
    {
        add => On.iTween.MoveAdd_GameObject_Hashtable += value;
        remove => On.iTween.MoveAdd_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_MoveBy_GameObject_Vector3_float MoveBy_GameObject_Vector3_float
    {
        add => On.iTween.MoveBy_GameObject_Vector3_float += value;
        remove => On.iTween.MoveBy_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_MoveBy_GameObject_Hashtable MoveBy_GameObject_Hashtable
    {
        add => On.iTween.MoveBy_GameObject_Hashtable += value;
        remove => On.iTween.MoveBy_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ScaleTo_GameObject_Vector3_float ScaleTo_GameObject_Vector3_float
    {
        add => On.iTween.ScaleTo_GameObject_Vector3_float += value;
        remove => On.iTween.ScaleTo_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_ScaleTo_GameObject_Hashtable ScaleTo_GameObject_Hashtable
    {
        add => On.iTween.ScaleTo_GameObject_Hashtable += value;
        remove => On.iTween.ScaleTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ScaleFrom_GameObject_Vector3_float ScaleFrom_GameObject_Vector3_float
    {
        add => On.iTween.ScaleFrom_GameObject_Vector3_float += value;
        remove => On.iTween.ScaleFrom_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_ScaleFrom_GameObject_Hashtable ScaleFrom_GameObject_Hashtable
    {
        add => On.iTween.ScaleFrom_GameObject_Hashtable += value;
        remove => On.iTween.ScaleFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ScaleAdd_GameObject_Vector3_float ScaleAdd_GameObject_Vector3_float
    {
        add => On.iTween.ScaleAdd_GameObject_Vector3_float += value;
        remove => On.iTween.ScaleAdd_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_ScaleAdd_GameObject_Hashtable ScaleAdd_GameObject_Hashtable
    {
        add => On.iTween.ScaleAdd_GameObject_Hashtable += value;
        remove => On.iTween.ScaleAdd_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ScaleBy_GameObject_Vector3_float ScaleBy_GameObject_Vector3_float
    {
        add => On.iTween.ScaleBy_GameObject_Vector3_float += value;
        remove => On.iTween.ScaleBy_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_ScaleBy_GameObject_Hashtable ScaleBy_GameObject_Hashtable
    {
        add => On.iTween.ScaleBy_GameObject_Hashtable += value;
        remove => On.iTween.ScaleBy_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_RotateTo_GameObject_Vector3_float RotateTo_GameObject_Vector3_float
    {
        add => On.iTween.RotateTo_GameObject_Vector3_float += value;
        remove => On.iTween.RotateTo_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_RotateTo_GameObject_Hashtable RotateTo_GameObject_Hashtable
    {
        add => On.iTween.RotateTo_GameObject_Hashtable += value;
        remove => On.iTween.RotateTo_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_RotateFrom_GameObject_Vector3_float
        RotateFrom_GameObject_Vector3_float
        {
            add => On.iTween.RotateFrom_GameObject_Vector3_float += value;
            remove => On.iTween.RotateFrom_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_RotateFrom_GameObject_Hashtable RotateFrom_GameObject_Hashtable
    {
        add => On.iTween.RotateFrom_GameObject_Hashtable += value;
        remove => On.iTween.RotateFrom_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_RotateAdd_GameObject_Vector3_float RotateAdd_GameObject_Vector3_float
    {
        add => On.iTween.RotateAdd_GameObject_Vector3_float += value;
        remove => On.iTween.RotateAdd_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_RotateAdd_GameObject_Hashtable RotateAdd_GameObject_Hashtable
    {
        add => On.iTween.RotateAdd_GameObject_Hashtable += value;
        remove => On.iTween.RotateAdd_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_RotateBy_GameObject_Vector3_float RotateBy_GameObject_Vector3_float
    {
        add => On.iTween.RotateBy_GameObject_Vector3_float += value;
        remove => On.iTween.RotateBy_GameObject_Vector3_float -= value;
    }

    public static event On.iTween.hook_RotateBy_GameObject_Hashtable RotateBy_GameObject_Hashtable
    {
        add => On.iTween.RotateBy_GameObject_Hashtable += value;
        remove => On.iTween.RotateBy_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ShakePosition_GameObject_Vector3_float
        ShakePosition_GameObject_Vector3_float
        {
            add => On.iTween.ShakePosition_GameObject_Vector3_float += value;
            remove => On.iTween.ShakePosition_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_ShakePosition_GameObject_Hashtable ShakePosition_GameObject_Hashtable
    {
        add => On.iTween.ShakePosition_GameObject_Hashtable += value;
        remove => On.iTween.ShakePosition_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ShakeScale_GameObject_Vector3_float
        ShakeScale_GameObject_Vector3_float
        {
            add => On.iTween.ShakeScale_GameObject_Vector3_float += value;
            remove => On.iTween.ShakeScale_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_ShakeScale_GameObject_Hashtable ShakeScale_GameObject_Hashtable
    {
        add => On.iTween.ShakeScale_GameObject_Hashtable += value;
        remove => On.iTween.ShakeScale_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ShakeRotation_GameObject_Vector3_float
        ShakeRotation_GameObject_Vector3_float
        {
            add => On.iTween.ShakeRotation_GameObject_Vector3_float += value;
            remove => On.iTween.ShakeRotation_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_ShakeRotation_GameObject_Hashtable ShakeRotation_GameObject_Hashtable
    {
        add => On.iTween.ShakeRotation_GameObject_Hashtable += value;
        remove => On.iTween.ShakeRotation_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_PunchPosition_GameObject_Vector3_float
        PunchPosition_GameObject_Vector3_float
        {
            add => On.iTween.PunchPosition_GameObject_Vector3_float += value;
            remove => On.iTween.PunchPosition_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_PunchPosition_GameObject_Hashtable PunchPosition_GameObject_Hashtable
    {
        add => On.iTween.PunchPosition_GameObject_Hashtable += value;
        remove => On.iTween.PunchPosition_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_PunchRotation_GameObject_Vector3_float
        PunchRotation_GameObject_Vector3_float
        {
            add => On.iTween.PunchRotation_GameObject_Vector3_float += value;
            remove => On.iTween.PunchRotation_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_PunchRotation_GameObject_Hashtable PunchRotation_GameObject_Hashtable
    {
        add => On.iTween.PunchRotation_GameObject_Hashtable += value;
        remove => On.iTween.PunchRotation_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_PunchScale_GameObject_Vector3_float
        PunchScale_GameObject_Vector3_float
        {
            add => On.iTween.PunchScale_GameObject_Vector3_float += value;
            remove => On.iTween.PunchScale_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_PunchScale_GameObject_Hashtable PunchScale_GameObject_Hashtable
    {
        add => On.iTween.PunchScale_GameObject_Hashtable += value;
        remove => On.iTween.PunchScale_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_GenerateTargets GenerateTargets
    {
        add => On.iTween.GenerateTargets += value;
        remove => On.iTween.GenerateTargets -= value;
    }

    public static event On.iTween.hook_GenerateRectTargets GenerateRectTargets
    {
        add => On.iTween.GenerateRectTargets += value;
        remove => On.iTween.GenerateRectTargets -= value;
    }

    public static event On.iTween.hook_GenerateColorTargets GenerateColorTargets
    {
        add => On.iTween.GenerateColorTargets += value;
        remove => On.iTween.GenerateColorTargets -= value;
    }

    public static event On.iTween.hook_GenerateVector3Targets GenerateVector3Targets
    {
        add => On.iTween.GenerateVector3Targets += value;
        remove => On.iTween.GenerateVector3Targets -= value;
    }

    public static event On.iTween.hook_GenerateVector2Targets GenerateVector2Targets
    {
        add => On.iTween.GenerateVector2Targets += value;
        remove => On.iTween.GenerateVector2Targets -= value;
    }

    public static event On.iTween.hook_GenerateFloatTargets GenerateFloatTargets
    {
        add => On.iTween.GenerateFloatTargets += value;
        remove => On.iTween.GenerateFloatTargets -= value;
    }

    public static event On.iTween.hook_GenerateColorToTargets GenerateColorToTargets
    {
        add => On.iTween.GenerateColorToTargets += value;
        remove => On.iTween.GenerateColorToTargets -= value;
    }

    public static event On.iTween.hook_GenerateAudioToTargets GenerateAudioToTargets
    {
        add => On.iTween.GenerateAudioToTargets += value;
        remove => On.iTween.GenerateAudioToTargets -= value;
    }

    public static event On.iTween.hook_GenerateStabTargets GenerateStabTargets
    {
        add => On.iTween.GenerateStabTargets += value;
        remove => On.iTween.GenerateStabTargets -= value;
    }

    public static event On.iTween.hook_GenerateLookToTargets GenerateLookToTargets
    {
        add => On.iTween.GenerateLookToTargets += value;
        remove => On.iTween.GenerateLookToTargets -= value;
    }

    public static event On.iTween.hook_GenerateMoveToPathTargets GenerateMoveToPathTargets
    {
        add => On.iTween.GenerateMoveToPathTargets += value;
        remove => On.iTween.GenerateMoveToPathTargets -= value;
    }

    public static event On.iTween.hook_GenerateMoveToTargets GenerateMoveToTargets
    {
        add => On.iTween.GenerateMoveToTargets += value;
        remove => On.iTween.GenerateMoveToTargets -= value;
    }

    public static event On.iTween.hook_GenerateMoveByTargets GenerateMoveByTargets
    {
        add => On.iTween.GenerateMoveByTargets += value;
        remove => On.iTween.GenerateMoveByTargets -= value;
    }

    public static event On.iTween.hook_GenerateScaleToTargets GenerateScaleToTargets
    {
        add => On.iTween.GenerateScaleToTargets += value;
        remove => On.iTween.GenerateScaleToTargets -= value;
    }

    public static event On.iTween.hook_GenerateScaleByTargets GenerateScaleByTargets
    {
        add => On.iTween.GenerateScaleByTargets += value;
        remove => On.iTween.GenerateScaleByTargets -= value;
    }

    public static event On.iTween.hook_GenerateScaleAddTargets GenerateScaleAddTargets
    {
        add => On.iTween.GenerateScaleAddTargets += value;
        remove => On.iTween.GenerateScaleAddTargets -= value;
    }

    public static event On.iTween.hook_GenerateRotateToTargets GenerateRotateToTargets
    {
        add => On.iTween.GenerateRotateToTargets += value;
        remove => On.iTween.GenerateRotateToTargets -= value;
    }

    public static event On.iTween.hook_GenerateRotateAddTargets GenerateRotateAddTargets
    {
        add => On.iTween.GenerateRotateAddTargets += value;
        remove => On.iTween.GenerateRotateAddTargets -= value;
    }

    public static event On.iTween.hook_GenerateRotateByTargets GenerateRotateByTargets
    {
        add => On.iTween.GenerateRotateByTargets += value;
        remove => On.iTween.GenerateRotateByTargets -= value;
    }

    public static event On.iTween.hook_GenerateShakePositionTargets GenerateShakePositionTargets
    {
        add => On.iTween.GenerateShakePositionTargets += value;
        remove => On.iTween.GenerateShakePositionTargets -= value;
    }

    public static event On.iTween.hook_GenerateShakeScaleTargets GenerateShakeScaleTargets
    {
        add => On.iTween.GenerateShakeScaleTargets += value;
        remove => On.iTween.GenerateShakeScaleTargets -= value;
    }

    public static event On.iTween.hook_GenerateShakeRotationTargets GenerateShakeRotationTargets
    {
        add => On.iTween.GenerateShakeRotationTargets += value;
        remove => On.iTween.GenerateShakeRotationTargets -= value;
    }

    public static event On.iTween.hook_GeneratePunchPositionTargets GeneratePunchPositionTargets
    {
        add => On.iTween.GeneratePunchPositionTargets += value;
        remove => On.iTween.GeneratePunchPositionTargets -= value;
    }

    public static event On.iTween.hook_GeneratePunchRotationTargets GeneratePunchRotationTargets
    {
        add => On.iTween.GeneratePunchRotationTargets += value;
        remove => On.iTween.GeneratePunchRotationTargets -= value;
    }

    public static event On.iTween.hook_GeneratePunchScaleTargets GeneratePunchScaleTargets
    {
        add => On.iTween.GeneratePunchScaleTargets += value;
        remove => On.iTween.GeneratePunchScaleTargets -= value;
    }

    public static event On.iTween.hook_ApplyRectTargets ApplyRectTargets
    {
        add => On.iTween.ApplyRectTargets += value;
        remove => On.iTween.ApplyRectTargets -= value;
    }

    public static event On.iTween.hook_ApplyColorTargets ApplyColorTargets
    {
        add => On.iTween.ApplyColorTargets += value;
        remove => On.iTween.ApplyColorTargets -= value;
    }

    public static event On.iTween.hook_ApplyVector3Targets ApplyVector3Targets
    {
        add => On.iTween.ApplyVector3Targets += value;
        remove => On.iTween.ApplyVector3Targets -= value;
    }

    public static event On.iTween.hook_ApplyVector2Targets ApplyVector2Targets
    {
        add => On.iTween.ApplyVector2Targets += value;
        remove => On.iTween.ApplyVector2Targets -= value;
    }

    public static event On.iTween.hook_ApplyFloatTargets ApplyFloatTargets
    {
        add => On.iTween.ApplyFloatTargets += value;
        remove => On.iTween.ApplyFloatTargets -= value;
    }

    public static event On.iTween.hook_ApplyColorToTargets ApplyColorToTargets
    {
        add => On.iTween.ApplyColorToTargets += value;
        remove => On.iTween.ApplyColorToTargets -= value;
    }

    public static event On.iTween.hook_ApplyAudioToTargets ApplyAudioToTargets
    {
        add => On.iTween.ApplyAudioToTargets += value;
        remove => On.iTween.ApplyAudioToTargets -= value;
    }

    public static event On.iTween.hook_ApplyStabTargets ApplyStabTargets
    {
        add => On.iTween.ApplyStabTargets += value;
        remove => On.iTween.ApplyStabTargets -= value;
    }

    public static event On.iTween.hook_ApplyMoveToPathTargets ApplyMoveToPathTargets
    {
        add => On.iTween.ApplyMoveToPathTargets += value;
        remove => On.iTween.ApplyMoveToPathTargets -= value;
    }

    public static event On.iTween.hook_ApplyMoveToTargets ApplyMoveToTargets
    {
        add => On.iTween.ApplyMoveToTargets += value;
        remove => On.iTween.ApplyMoveToTargets -= value;
    }

    public static event On.iTween.hook_ApplyMoveByTargets ApplyMoveByTargets
    {
        add => On.iTween.ApplyMoveByTargets += value;
        remove => On.iTween.ApplyMoveByTargets -= value;
    }

    public static event On.iTween.hook_ApplyScaleToTargets ApplyScaleToTargets
    {
        add => On.iTween.ApplyScaleToTargets += value;
        remove => On.iTween.ApplyScaleToTargets -= value;
    }

    public static event On.iTween.hook_ApplyLookToTargets ApplyLookToTargets
    {
        add => On.iTween.ApplyLookToTargets += value;
        remove => On.iTween.ApplyLookToTargets -= value;
    }

    public static event On.iTween.hook_ApplyRotateToTargets ApplyRotateToTargets
    {
        add => On.iTween.ApplyRotateToTargets += value;
        remove => On.iTween.ApplyRotateToTargets -= value;
    }

    public static event On.iTween.hook_ApplyRotateAddTargets ApplyRotateAddTargets
    {
        add => On.iTween.ApplyRotateAddTargets += value;
        remove => On.iTween.ApplyRotateAddTargets -= value;
    }

    public static event On.iTween.hook_ApplyShakePositionTargets ApplyShakePositionTargets
    {
        add => On.iTween.ApplyShakePositionTargets += value;
        remove => On.iTween.ApplyShakePositionTargets -= value;
    }

    public static event On.iTween.hook_ApplyShakeScaleTargets ApplyShakeScaleTargets
    {
        add => On.iTween.ApplyShakeScaleTargets += value;
        remove => On.iTween.ApplyShakeScaleTargets -= value;
    }

    public static event On.iTween.hook_ApplyShakeRotationTargets ApplyShakeRotationTargets
    {
        add => On.iTween.ApplyShakeRotationTargets += value;
        remove => On.iTween.ApplyShakeRotationTargets -= value;
    }

    public static event On.iTween.hook_ApplyPunchPositionTargets ApplyPunchPositionTargets
    {
        add => On.iTween.ApplyPunchPositionTargets += value;
        remove => On.iTween.ApplyPunchPositionTargets -= value;
    }

    public static event On.iTween.hook_ApplyPunchRotationTargets ApplyPunchRotationTargets
    {
        add => On.iTween.ApplyPunchRotationTargets += value;
        remove => On.iTween.ApplyPunchRotationTargets -= value;
    }

    public static event On.iTween.hook_ApplyPunchScaleTargets ApplyPunchScaleTargets
    {
        add => On.iTween.ApplyPunchScaleTargets += value;
        remove => On.iTween.ApplyPunchScaleTargets -= value;
    }

    public static event On.iTween.hook_TweenDelay TweenDelay
    {
        add => On.iTween.TweenDelay += value;
        remove => On.iTween.TweenDelay -= value;
    }

    public static event On.iTween.hook_TweenStart TweenStart
    {
        add => On.iTween.TweenStart += value;
        remove => On.iTween.TweenStart -= value;
    }

    public static event On.iTween.hook_TweenRestart TweenRestart
    {
        add => On.iTween.TweenRestart += value;
        remove => On.iTween.TweenRestart -= value;
    }

    public static event On.iTween.hook_TweenUpdate TweenUpdate
    {
        add => On.iTween.TweenUpdate += value;
        remove => On.iTween.TweenUpdate -= value;
    }

    public static event On.iTween.hook_TweenComplete TweenComplete
    {
        add => On.iTween.TweenComplete += value;
        remove => On.iTween.TweenComplete -= value;
    }

    public static event On.iTween.hook_TweenLoop TweenLoop
    {
        add => On.iTween.TweenLoop += value;
        remove => On.iTween.TweenLoop -= value;
    }

    public static event On.iTween.hook_RectUpdate RectUpdate
    {
        add => On.iTween.RectUpdate += value;
        remove => On.iTween.RectUpdate -= value;
    }

    public static event On.iTween.hook_Vector3Update Vector3Update
    {
        add => On.iTween.Vector3Update += value;
        remove => On.iTween.Vector3Update -= value;
    }

    public static event On.iTween.hook_Vector2Update Vector2Update
    {
        add => On.iTween.Vector2Update += value;
        remove => On.iTween.Vector2Update -= value;
    }

    public static event On.iTween.hook_FloatUpdate FloatUpdate
    {
        add => On.iTween.FloatUpdate += value;
        remove => On.iTween.FloatUpdate -= value;
    }

    public static event On.iTween.hook_FadeUpdate_GameObject_Hashtable FadeUpdate_GameObject_Hashtable
    {
        add => On.iTween.FadeUpdate_GameObject_Hashtable += value;
        remove => On.iTween.FadeUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_FadeUpdate_GameObject_float_float FadeUpdate_GameObject_float_float
    {
        add => On.iTween.FadeUpdate_GameObject_float_float += value;
        remove => On.iTween.FadeUpdate_GameObject_float_float -= value;
    }

    public static event On.iTween.hook_ColorUpdate_GameObject_Hashtable ColorUpdate_GameObject_Hashtable
    {
        add => On.iTween.ColorUpdate_GameObject_Hashtable += value;
        remove => On.iTween.ColorUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ColorUpdate_GameObject_Color_float ColorUpdate_GameObject_Color_float
    {
        add => On.iTween.ColorUpdate_GameObject_Color_float += value;
        remove => On.iTween.ColorUpdate_GameObject_Color_float -= value;
    }

    public static event On.iTween.hook_AudioUpdate_GameObject_Hashtable AudioUpdate_GameObject_Hashtable
    {
        add => On.iTween.AudioUpdate_GameObject_Hashtable += value;
        remove => On.iTween.AudioUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_AudioUpdate_GameObject_float_float_float
        AudioUpdate_GameObject_float_float_float
        {
            add => On.iTween.AudioUpdate_GameObject_float_float_float += value;
            remove => On.iTween.AudioUpdate_GameObject_float_float_float -= value;
        }

    public static event On.iTween.hook_RotateUpdate_GameObject_Hashtable RotateUpdate_GameObject_Hashtable
    {
        add => On.iTween.RotateUpdate_GameObject_Hashtable += value;
        remove => On.iTween.RotateUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_RotateUpdate_GameObject_Vector3_float
        RotateUpdate_GameObject_Vector3_float
        {
            add => On.iTween.RotateUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.RotateUpdate_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_ScaleUpdate_GameObject_Hashtable ScaleUpdate_GameObject_Hashtable
    {
        add => On.iTween.ScaleUpdate_GameObject_Hashtable += value;
        remove => On.iTween.ScaleUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_ScaleUpdate_GameObject_Vector3_float
        ScaleUpdate_GameObject_Vector3_float
        {
            add => On.iTween.ScaleUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.ScaleUpdate_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_MoveUpdate_GameObject_Hashtable MoveUpdate_GameObject_Hashtable
    {
        add => On.iTween.MoveUpdate_GameObject_Hashtable += value;
        remove => On.iTween.MoveUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_MoveUpdate_GameObject_Vector3_float
        MoveUpdate_GameObject_Vector3_float
        {
            add => On.iTween.MoveUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.MoveUpdate_GameObject_Vector3_float -= value;
        }

    public static event On.iTween.hook_LookUpdate_GameObject_Hashtable LookUpdate_GameObject_Hashtable
    {
        add => On.iTween.LookUpdate_GameObject_Hashtable += value;
        remove => On.iTween.LookUpdate_GameObject_Hashtable -= value;
    }

    public static event On.iTween.hook_LookUpdate_GameObject_Vector3_float
        LookUpdate_GameObject_Vector3_float
        {
            add => On.iTween.LookUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.LookUpdate_GameObject_Vector3_float -= value;
        }

    public static event Delegates.PathLength_Array_WithArgs PathLength_Array
    {
        add => HookEndpointManager.Add<Delegates.PathLength_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PathLength", false), value);
        remove => HookEndpointManager.Remove<Delegates.PathLength_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PathLength", false), value);
    }

    public static event On.iTween.hook_CameraTexture CameraTexture
    {
        add => On.iTween.CameraTexture += value;
        remove => On.iTween.CameraTexture -= value;
    }

    public static event Delegates.PutOnPath_GameObject_Array_float_WithArgs PutOnPath_GameObject_Array_float
    {
        add => HookEndpointManager.Add<Delegates.PutOnPath_GameObject_Array_float_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
        remove => HookEndpointManager.Remove<Delegates.PutOnPath_GameObject_Array_float_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
    }

    public static event Delegates.PutOnPath_Transform_Array_float_WithArgs PutOnPath_Transform_Array_float
    {
        add => HookEndpointManager.Add<Delegates.PutOnPath_Transform_Array_float_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
        remove => HookEndpointManager.Remove<Delegates.PutOnPath_Transform_Array_float_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
    }

    public static event Delegates.PointOnPath_Array_float_WithArgs PointOnPath_Array_float
    {
        add => HookEndpointManager.Add<Delegates.PointOnPath_Array_float_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PointOnPath", false), value);
        remove => HookEndpointManager.Remove<Delegates.PointOnPath_Array_float_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "PointOnPath", false), value);
    }

    public static event Delegates.DrawLine_Array_WithArgs DrawLine_Array
    {
        add => HookEndpointManager.Add<Delegates.DrawLine_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawLine_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
    }

    public static event Delegates.DrawLine_Array_Color_WithArgs DrawLine_Array_Color
    {
        add => HookEndpointManager.Add<Delegates.DrawLine_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawLine_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
    }

    public static event Delegates.DrawLineGizmos_Array_WithArgs DrawLineGizmos_Array
    {
        add => HookEndpointManager.Add<Delegates.DrawLineGizmos_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawLineGizmos_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
    }

    public static event Delegates.DrawLineGizmos_Array_Color_WithArgs DrawLineGizmos_Array_Color
    {
        add => HookEndpointManager.Add<Delegates.DrawLineGizmos_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawLineGizmos_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
    }

    public static event Delegates.DrawLineHandles_Array_WithArgs DrawLineHandles_Array
    {
        add => HookEndpointManager.Add<Delegates.DrawLineHandles_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawLineHandles_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
    }

    public static event Delegates.DrawLineHandles_Array_Color_WithArgs DrawLineHandles_Array_Color
    {
        add => HookEndpointManager.Add<Delegates.DrawLineHandles_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawLineHandles_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
    }

    public static event Delegates.DrawPath_Array_WithArgs DrawPath_Array
    {
        add => HookEndpointManager.Add<Delegates.DrawPath_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawPath_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
    }

    public static event Delegates.DrawPath_Array_Color_WithArgs DrawPath_Array_Color
    {
        add => HookEndpointManager.Add<Delegates.DrawPath_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawPath_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
    }

    public static event Delegates.DrawPathGizmos_Array_WithArgs DrawPathGizmos_Array
    {
        add => HookEndpointManager.Add<Delegates.DrawPathGizmos_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawPathGizmos_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
    }

    public static event Delegates.DrawPathGizmos_Array_Color_WithArgs DrawPathGizmos_Array_Color
    {
        add => HookEndpointManager.Add<Delegates.DrawPathGizmos_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawPathGizmos_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
    }

    public static event Delegates.DrawPathHandles_Array_WithArgs DrawPathHandles_Array
    {
        add => HookEndpointManager.Add<Delegates.DrawPathHandles_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawPathHandles_Array_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
    }

    public static event Delegates.DrawPathHandles_Array_Color_WithArgs DrawPathHandles_Array_Color
    {
        add => HookEndpointManager.Add<Delegates.DrawPathHandles_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
        remove => HookEndpointManager.Remove<Delegates.DrawPathHandles_Array_Color_WithArgs>(
            ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
    }

    public static event On.iTween.hook_CameraFadeDepth CameraFadeDepth
    {
        add => On.iTween.CameraFadeDepth += value;
        remove => On.iTween.CameraFadeDepth -= value;
    }

    public static event On.iTween.hook_CameraFadeDestroy CameraFadeDestroy
    {
        add => On.iTween.CameraFadeDestroy += value;
        remove => On.iTween.CameraFadeDestroy -= value;
    }

    public static event On.iTween.hook_CameraFadeSwap CameraFadeSwap
    {
        add => On.iTween.CameraFadeSwap += value;
        remove => On.iTween.CameraFadeSwap -= value;
    }

    public static event On.iTween.hook_CameraFadeAdd_Texture2D_int CameraFadeAdd_Texture2D_int
    {
        add => On.iTween.CameraFadeAdd_Texture2D_int += value;
        remove => On.iTween.CameraFadeAdd_Texture2D_int -= value;
    }

    public static event On.iTween.hook_CameraFadeAdd_Texture2D CameraFadeAdd_Texture2D
    {
        add => On.iTween.CameraFadeAdd_Texture2D += value;
        remove => On.iTween.CameraFadeAdd_Texture2D -= value;
    }

    public static event On.iTween.hook_CameraFadeAdd CameraFadeAdd
    {
        add => On.iTween.CameraFadeAdd += value;
        remove => On.iTween.CameraFadeAdd -= value;
    }

    public static event On.iTween.hook_Resume_GameObject Resume_GameObject
    {
        add => On.iTween.Resume_GameObject += value;
        remove => On.iTween.Resume_GameObject -= value;
    }

    public static event On.iTween.hook_Resume_GameObject_bool Resume_GameObject_bool
    {
        add => On.iTween.Resume_GameObject_bool += value;
        remove => On.iTween.Resume_GameObject_bool -= value;
    }

    public static event On.iTween.hook_Resume_GameObject_string Resume_GameObject_string
    {
        add => On.iTween.Resume_GameObject_string += value;
        remove => On.iTween.Resume_GameObject_string -= value;
    }

    public static event On.iTween.hook_Resume_GameObject_string_bool Resume_GameObject_string_bool
    {
        add => On.iTween.Resume_GameObject_string_bool += value;
        remove => On.iTween.Resume_GameObject_string_bool -= value;
    }

    public static event On.iTween.hook_Resume Resume
    {
        add => On.iTween.Resume += value;
        remove => On.iTween.Resume -= value;
    }

    public static event On.iTween.hook_Resume_string Resume_string
    {
        add => On.iTween.Resume_string += value;
        remove => On.iTween.Resume_string -= value;
    }

    public static event On.iTween.hook_Pause_GameObject Pause_GameObject
    {
        add => On.iTween.Pause_GameObject += value;
        remove => On.iTween.Pause_GameObject -= value;
    }

    public static event On.iTween.hook_Pause_GameObject_bool Pause_GameObject_bool
    {
        add => On.iTween.Pause_GameObject_bool += value;
        remove => On.iTween.Pause_GameObject_bool -= value;
    }

    public static event On.iTween.hook_Pause_GameObject_string Pause_GameObject_string
    {
        add => On.iTween.Pause_GameObject_string += value;
        remove => On.iTween.Pause_GameObject_string -= value;
    }

    public static event On.iTween.hook_Pause_GameObject_string_bool Pause_GameObject_string_bool
    {
        add => On.iTween.Pause_GameObject_string_bool += value;
        remove => On.iTween.Pause_GameObject_string_bool -= value;
    }

    public static event On.iTween.hook_Pause Pause
    {
        add => On.iTween.Pause += value;
        remove => On.iTween.Pause -= value;
    }

    public static event On.iTween.hook_Pause_string Pause_string
    {
        add => On.iTween.Pause_string += value;
        remove => On.iTween.Pause_string -= value;
    }

    public static event On.iTween.hook_Count Count
    {
        add => On.iTween.Count += value;
        remove => On.iTween.Count -= value;
    }

    public static event On.iTween.hook_Count_string Count_string
    {
        add => On.iTween.Count_string += value;
        remove => On.iTween.Count_string -= value;
    }

    public static event On.iTween.hook_Count_GameObject Count_GameObject
    {
        add => On.iTween.Count_GameObject += value;
        remove => On.iTween.Count_GameObject -= value;
    }

    public static event On.iTween.hook_Count_GameObject_string Count_GameObject_string
    {
        add => On.iTween.Count_GameObject_string += value;
        remove => On.iTween.Count_GameObject_string -= value;
    }

    public static event On.iTween.hook_Stop Stop
    {
        add => On.iTween.Stop += value;
        remove => On.iTween.Stop -= value;
    }

    public static event On.iTween.hook_Stop_string Stop_string
    {
        add => On.iTween.Stop_string += value;
        remove => On.iTween.Stop_string -= value;
    }

    public static event On.iTween.hook_StopByName_string StopByName_string
    {
        add => On.iTween.StopByName_string += value;
        remove => On.iTween.StopByName_string -= value;
    }

    public static event On.iTween.hook_Stop_GameObject Stop_GameObject
    {
        add => On.iTween.Stop_GameObject += value;
        remove => On.iTween.Stop_GameObject -= value;
    }

    public static event On.iTween.hook_Stop_GameObject_bool Stop_GameObject_bool
    {
        add => On.iTween.Stop_GameObject_bool += value;
        remove => On.iTween.Stop_GameObject_bool -= value;
    }

    public static event On.iTween.hook_Stop_GameObject_string Stop_GameObject_string
    {
        add => On.iTween.Stop_GameObject_string += value;
        remove => On.iTween.Stop_GameObject_string -= value;
    }

    public static event On.iTween.hook_StopByName_GameObject_string StopByName_GameObject_string
    {
        add => On.iTween.StopByName_GameObject_string += value;
        remove => On.iTween.StopByName_GameObject_string -= value;
    }

    public static event On.iTween.hook_Stop_GameObject_string_bool Stop_GameObject_string_bool
    {
        add => On.iTween.Stop_GameObject_string_bool += value;
        remove => On.iTween.Stop_GameObject_string_bool -= value;
    }

    public static event On.iTween.hook_StopByName_GameObject_string_bool StopByName_GameObject_string_bool
    {
        add => On.iTween.StopByName_GameObject_string_bool += value;
        remove => On.iTween.StopByName_GameObject_string_bool -= value;
    }

    public static event On.iTween.hook_Hash Hash
    {
        add => On.iTween.Hash += value;
        remove => On.iTween.Hash -= value;
    }

    public static event On.iTween.hook_Awake Awake
    {
        add => On.iTween.Awake += value;
        remove => On.iTween.Awake -= value;
    }

    public static event On.iTween.hook_Start Start
    {
        add => On.iTween.Start += value;
        remove => On.iTween.Start -= value;
    }

    public static event On.iTween.hook_Update Update
    {
        add => On.iTween.Update += value;
        remove => On.iTween.Update -= value;
    }

    public static event On.iTween.hook_FixedUpdate FixedUpdate
    {
        add => On.iTween.FixedUpdate += value;
        remove => On.iTween.FixedUpdate -= value;
    }

    public static event On.iTween.hook_LateUpdate LateUpdate
    {
        add => On.iTween.LateUpdate += value;
        remove => On.iTween.LateUpdate -= value;
    }

    public static event On.iTween.hook_OnEnable OnEnable
    {
        add => On.iTween.OnEnable += value;
        remove => On.iTween.OnEnable -= value;
    }

    public static event On.iTween.hook_OnDisable OnDisable
    {
        add => On.iTween.OnDisable += value;
        remove => On.iTween.OnDisable -= value;
    }

    public static event On.iTween.hook_DrawLineHelper DrawLineHelper
    {
        add => On.iTween.DrawLineHelper += value;
        remove => On.iTween.DrawLineHelper -= value;
    }

    public static event On.iTween.hook_DrawPathHelper DrawPathHelper
    {
        add => On.iTween.DrawPathHelper += value;
        remove => On.iTween.DrawPathHelper -= value;
    }

    public static event On.iTween.hook_PathControlPointGenerator PathControlPointGenerator
    {
        add => On.iTween.PathControlPointGenerator += value;
        remove => On.iTween.PathControlPointGenerator -= value;
    }

    public static event On.iTween.hook_Interp Interp
    {
        add => On.iTween.Interp += value;
        remove => On.iTween.Interp -= value;
    }

    public static event On.iTween.hook_Launch Launch
    {
        add => On.iTween.Launch += value;
        remove => On.iTween.Launch -= value;
    }

    public static event On.iTween.hook_CleanArgs CleanArgs
    {
        add => On.iTween.CleanArgs += value;
        remove => On.iTween.CleanArgs -= value;
    }

    public static event On.iTween.hook_GenerateID GenerateID
    {
        add => On.iTween.GenerateID += value;
        remove => On.iTween.GenerateID -= value;
    }

    public static event On.iTween.hook_RetrieveArgs RetrieveArgs
    {
        add => On.iTween.RetrieveArgs += value;
        remove => On.iTween.RetrieveArgs -= value;
    }

    public static event On.iTween.hook_GetEasingFunction GetEasingFunction
    {
        add => On.iTween.GetEasingFunction += value;
        remove => On.iTween.GetEasingFunction -= value;
    }

    public static event On.iTween.hook_UpdatePercentage UpdatePercentage
    {
        add => On.iTween.UpdatePercentage += value;
        remove => On.iTween.UpdatePercentage -= value;
    }

    public static event On.iTween.hook_CallBack CallBack
    {
        add => On.iTween.CallBack += value;
        remove => On.iTween.CallBack -= value;
    }

    public static event On.iTween.hook_Dispose Dispose
    {
        add => On.iTween.Dispose += value;
        remove => On.iTween.Dispose -= value;
    }

    public static event On.iTween.hook_ConflictCheck ConflictCheck
    {
        add => On.iTween.ConflictCheck += value;
        remove => On.iTween.ConflictCheck -= value;
    }

    public static event On.iTween.hook_EnableKinematic EnableKinematic
    {
        add => On.iTween.EnableKinematic += value;
        remove => On.iTween.EnableKinematic -= value;
    }

    public static event On.iTween.hook_DisableKinematic DisableKinematic
    {
        add => On.iTween.DisableKinematic += value;
        remove => On.iTween.DisableKinematic -= value;
    }

    public static event On.iTween.hook_ResumeDelay ResumeDelay
    {
        add => On.iTween.ResumeDelay += value;
        remove => On.iTween.ResumeDelay -= value;
    }

    public static event On.iTween.hook_linear linear
    {
        add => On.iTween.linear += value;
        remove => On.iTween.linear -= value;
    }

    public static event On.iTween.hook_clerp clerp
    {
        add => On.iTween.clerp += value;
        remove => On.iTween.clerp -= value;
    }

    public static event On.iTween.hook_spring spring
    {
        add => On.iTween.spring += value;
        remove => On.iTween.spring -= value;
    }

    public static event On.iTween.hook_easeInQuad easeInQuad
    {
        add => On.iTween.easeInQuad += value;
        remove => On.iTween.easeInQuad -= value;
    }

    public static event On.iTween.hook_easeOutQuad easeOutQuad
    {
        add => On.iTween.easeOutQuad += value;
        remove => On.iTween.easeOutQuad -= value;
    }

    public static event On.iTween.hook_easeInOutQuad easeInOutQuad
    {
        add => On.iTween.easeInOutQuad += value;
        remove => On.iTween.easeInOutQuad -= value;
    }

    public static event On.iTween.hook_easeInCubic easeInCubic
    {
        add => On.iTween.easeInCubic += value;
        remove => On.iTween.easeInCubic -= value;
    }

    public static event On.iTween.hook_easeOutCubic easeOutCubic
    {
        add => On.iTween.easeOutCubic += value;
        remove => On.iTween.easeOutCubic -= value;
    }

    public static event On.iTween.hook_easeInOutCubic easeInOutCubic
    {
        add => On.iTween.easeInOutCubic += value;
        remove => On.iTween.easeInOutCubic -= value;
    }

    public static event On.iTween.hook_easeInQuart easeInQuart
    {
        add => On.iTween.easeInQuart += value;
        remove => On.iTween.easeInQuart -= value;
    }

    public static event On.iTween.hook_easeOutQuart easeOutQuart
    {
        add => On.iTween.easeOutQuart += value;
        remove => On.iTween.easeOutQuart -= value;
    }

    public static event On.iTween.hook_easeInOutQuart easeInOutQuart
    {
        add => On.iTween.easeInOutQuart += value;
        remove => On.iTween.easeInOutQuart -= value;
    }

    public static event On.iTween.hook_easeInQuint easeInQuint
    {
        add => On.iTween.easeInQuint += value;
        remove => On.iTween.easeInQuint -= value;
    }

    public static event On.iTween.hook_easeOutQuint easeOutQuint
    {
        add => On.iTween.easeOutQuint += value;
        remove => On.iTween.easeOutQuint -= value;
    }

    public static event On.iTween.hook_easeInOutQuint easeInOutQuint
    {
        add => On.iTween.easeInOutQuint += value;
        remove => On.iTween.easeInOutQuint -= value;
    }

    public static event On.iTween.hook_easeInSine easeInSine
    {
        add => On.iTween.easeInSine += value;
        remove => On.iTween.easeInSine -= value;
    }

    public static event On.iTween.hook_easeOutSine easeOutSine
    {
        add => On.iTween.easeOutSine += value;
        remove => On.iTween.easeOutSine -= value;
    }

    public static event On.iTween.hook_easeInOutSine easeInOutSine
    {
        add => On.iTween.easeInOutSine += value;
        remove => On.iTween.easeInOutSine -= value;
    }

    public static event On.iTween.hook_easeInExpo easeInExpo
    {
        add => On.iTween.easeInExpo += value;
        remove => On.iTween.easeInExpo -= value;
    }

    public static event On.iTween.hook_easeOutExpo easeOutExpo
    {
        add => On.iTween.easeOutExpo += value;
        remove => On.iTween.easeOutExpo -= value;
    }

    public static event On.iTween.hook_easeInOutExpo easeInOutExpo
    {
        add => On.iTween.easeInOutExpo += value;
        remove => On.iTween.easeInOutExpo -= value;
    }

    public static event On.iTween.hook_easeInCirc easeInCirc
    {
        add => On.iTween.easeInCirc += value;
        remove => On.iTween.easeInCirc -= value;
    }

    public static event On.iTween.hook_easeOutCirc easeOutCirc
    {
        add => On.iTween.easeOutCirc += value;
        remove => On.iTween.easeOutCirc -= value;
    }

    public static event On.iTween.hook_easeInOutCirc easeInOutCirc
    {
        add => On.iTween.easeInOutCirc += value;
        remove => On.iTween.easeInOutCirc -= value;
    }

    public static event On.iTween.hook_easeInBounce easeInBounce
    {
        add => On.iTween.easeInBounce += value;
        remove => On.iTween.easeInBounce -= value;
    }

    public static event On.iTween.hook_easeOutBounce easeOutBounce
    {
        add => On.iTween.easeOutBounce += value;
        remove => On.iTween.easeOutBounce -= value;
    }

    public static event On.iTween.hook_easeInOutBounce easeInOutBounce
    {
        add => On.iTween.easeInOutBounce += value;
        remove => On.iTween.easeInOutBounce -= value;
    }

    public static event On.iTween.hook_easeInBack easeInBack
    {
        add => On.iTween.easeInBack += value;
        remove => On.iTween.easeInBack -= value;
    }

    public static event On.iTween.hook_easeOutBack easeOutBack
    {
        add => On.iTween.easeOutBack += value;
        remove => On.iTween.easeOutBack -= value;
    }

    public static event On.iTween.hook_easeInOutBack easeInOutBack
    {
        add => On.iTween.easeInOutBack += value;
        remove => On.iTween.easeInOutBack -= value;
    }

    public static event On.iTween.hook_punch punch
    {
        add => On.iTween.punch += value;
        remove => On.iTween.punch -= value;
    }

    public static event On.iTween.hook_easeInElastic easeInElastic
    {
        add => On.iTween.easeInElastic += value;
        remove => On.iTween.easeInElastic -= value;
    }

    public static event On.iTween.hook_easeOutElastic easeOutElastic
    {
        add => On.iTween.easeOutElastic += value;
        remove => On.iTween.easeOutElastic -= value;
    }

    public static event On.iTween.hook_easeInOutElastic easeInOutElastic
    {
        add => On.iTween.easeInOutElastic += value;
        remove => On.iTween.easeInOutElastic -= value;
    }
}

}