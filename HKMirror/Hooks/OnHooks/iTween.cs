using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for iTween class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OniTween
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.iTween.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.iTween.orig_Init orig, GameObject target)
        {
            Delegates.Params_Init @params = new()
            {
                target = target
            };
            if (_beforeInit != null)
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                    try
                    {
                        _beforeInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            orig(target);
            if (_afterInit != null)
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                    try
                    {
                        _afterInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeFrom_float_float()
        {
            if (!HookedList.Contains("CameraFadeFrom_float_float"))
            {
                HookedList.Add("CameraFadeFrom_float_float");
                On.iTween.CameraFadeFrom_float_float += CameraFadeFrom_float_float;
            }
        }

        internal static event Delegates.CameraFadeFrom_float_float_BeforeArgs _beforeCameraFadeFrom_float_float;
        internal static event Delegates.CameraFadeFrom_float_float_AfterArgs _afterCameraFadeFrom_float_float;

        private static void CameraFadeFrom_float_float(On.iTween.orig_CameraFadeFrom_float_float orig, float amount,
            float time)
        {
            Delegates.Params_CameraFadeFrom_float_float @params = new()
            {
                amount = amount, time = time
            };
            if (_beforeCameraFadeFrom_float_float != null)
                foreach (Delegates.CameraFadeFrom_float_float_BeforeArgs toInvoke in _beforeCameraFadeFrom_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeCameraFadeFrom_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            amount = @params.amount;
            time = @params.time;
            orig(amount, time);
            if (_afterCameraFadeFrom_float_float != null)
                foreach (Delegates.CameraFadeFrom_float_float_AfterArgs toInvoke in _afterCameraFadeFrom_float_float
                             .GetInvocationList())
                    try
                    {
                        _afterCameraFadeFrom_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeFrom_Hashtable()
        {
            if (!HookedList.Contains("CameraFadeFrom_Hashtable"))
            {
                HookedList.Add("CameraFadeFrom_Hashtable");
                On.iTween.CameraFadeFrom_Hashtable += CameraFadeFrom_Hashtable;
            }
        }

        internal static event Delegates.CameraFadeFrom_Hashtable_BeforeArgs _beforeCameraFadeFrom_Hashtable;
        internal static event Delegates.CameraFadeFrom_Hashtable_AfterArgs _afterCameraFadeFrom_Hashtable;

        private static void CameraFadeFrom_Hashtable(On.iTween.orig_CameraFadeFrom_Hashtable orig, Hashtable args)
        {
            Delegates.Params_CameraFadeFrom_Hashtable @params = new()
            {
                args = args
            };
            if (_beforeCameraFadeFrom_Hashtable != null)
                foreach (Delegates.CameraFadeFrom_Hashtable_BeforeArgs toInvoke in _beforeCameraFadeFrom_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeCameraFadeFrom_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            args = @params.args;
            orig(args);
            if (_afterCameraFadeFrom_Hashtable != null)
                foreach (Delegates.CameraFadeFrom_Hashtable_AfterArgs toInvoke in _afterCameraFadeFrom_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterCameraFadeFrom_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeTo_float_float()
        {
            if (!HookedList.Contains("CameraFadeTo_float_float"))
            {
                HookedList.Add("CameraFadeTo_float_float");
                On.iTween.CameraFadeTo_float_float += CameraFadeTo_float_float;
            }
        }

        internal static event Delegates.CameraFadeTo_float_float_BeforeArgs _beforeCameraFadeTo_float_float;
        internal static event Delegates.CameraFadeTo_float_float_AfterArgs _afterCameraFadeTo_float_float;

        private static void CameraFadeTo_float_float(On.iTween.orig_CameraFadeTo_float_float orig, float amount,
            float time)
        {
            Delegates.Params_CameraFadeTo_float_float @params = new()
            {
                amount = amount, time = time
            };
            if (_beforeCameraFadeTo_float_float != null)
                foreach (Delegates.CameraFadeTo_float_float_BeforeArgs toInvoke in _beforeCameraFadeTo_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeCameraFadeTo_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            amount = @params.amount;
            time = @params.time;
            orig(amount, time);
            if (_afterCameraFadeTo_float_float != null)
                foreach (Delegates.CameraFadeTo_float_float_AfterArgs toInvoke in _afterCameraFadeTo_float_float
                             .GetInvocationList())
                    try
                    {
                        _afterCameraFadeTo_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeTo_Hashtable()
        {
            if (!HookedList.Contains("CameraFadeTo_Hashtable"))
            {
                HookedList.Add("CameraFadeTo_Hashtable");
                On.iTween.CameraFadeTo_Hashtable += CameraFadeTo_Hashtable;
            }
        }

        internal static event Delegates.CameraFadeTo_Hashtable_BeforeArgs _beforeCameraFadeTo_Hashtable;
        internal static event Delegates.CameraFadeTo_Hashtable_AfterArgs _afterCameraFadeTo_Hashtable;

        private static void CameraFadeTo_Hashtable(On.iTween.orig_CameraFadeTo_Hashtable orig, Hashtable args)
        {
            Delegates.Params_CameraFadeTo_Hashtable @params = new()
            {
                args = args
            };
            if (_beforeCameraFadeTo_Hashtable != null)
                foreach (Delegates.CameraFadeTo_Hashtable_BeforeArgs toInvoke in _beforeCameraFadeTo_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeCameraFadeTo_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            args = @params.args;
            orig(args);
            if (_afterCameraFadeTo_Hashtable != null)
                foreach (Delegates.CameraFadeTo_Hashtable_AfterArgs toInvoke in _afterCameraFadeTo_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterCameraFadeTo_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookValueTo()
        {
            if (!HookedList.Contains("ValueTo"))
            {
                HookedList.Add("ValueTo");
                On.iTween.ValueTo += ValueTo;
            }
        }

        internal static event Delegates.ValueTo_BeforeArgs _beforeValueTo;
        internal static event Delegates.ValueTo_AfterArgs _afterValueTo;

        private static void ValueTo(On.iTween.orig_ValueTo orig, GameObject target, Hashtable args)
        {
            Delegates.Params_ValueTo @params = new()
            {
                target = target, args = args
            };
            if (_beforeValueTo != null)
                foreach (Delegates.ValueTo_BeforeArgs toInvoke in _beforeValueTo.GetInvocationList())
                    try
                    {
                        _beforeValueTo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterValueTo != null)
                foreach (Delegates.ValueTo_AfterArgs toInvoke in _afterValueTo.GetInvocationList())
                    try
                    {
                        _afterValueTo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeFrom_GameObject_float_float()
        {
            if (!HookedList.Contains("FadeFrom_GameObject_float_float"))
            {
                HookedList.Add("FadeFrom_GameObject_float_float");
                On.iTween.FadeFrom_GameObject_float_float += FadeFrom_GameObject_float_float;
            }
        }

        internal static event Delegates.FadeFrom_GameObject_float_float_BeforeArgs
            _beforeFadeFrom_GameObject_float_float;

        internal static event Delegates.FadeFrom_GameObject_float_float_AfterArgs _afterFadeFrom_GameObject_float_float;

        private static void FadeFrom_GameObject_float_float(On.iTween.orig_FadeFrom_GameObject_float_float orig,
            GameObject target, float alpha, float time)
        {
            Delegates.Params_FadeFrom_GameObject_float_float @params = new()
            {
                target = target, alpha = alpha, time = time
            };
            if (_beforeFadeFrom_GameObject_float_float != null)
                foreach (Delegates.FadeFrom_GameObject_float_float_BeforeArgs toInvoke in
                         _beforeFadeFrom_GameObject_float_float.GetInvocationList())
                    try
                    {
                        _beforeFadeFrom_GameObject_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            alpha = @params.alpha;
            time = @params.time;
            orig(target, alpha, time);
            if (_afterFadeFrom_GameObject_float_float != null)
                foreach (Delegates.FadeFrom_GameObject_float_float_AfterArgs toInvoke in
                         _afterFadeFrom_GameObject_float_float.GetInvocationList())
                    try
                    {
                        _afterFadeFrom_GameObject_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("FadeFrom_GameObject_Hashtable"))
            {
                HookedList.Add("FadeFrom_GameObject_Hashtable");
                On.iTween.FadeFrom_GameObject_Hashtable += FadeFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.FadeFrom_GameObject_Hashtable_BeforeArgs _beforeFadeFrom_GameObject_Hashtable;
        internal static event Delegates.FadeFrom_GameObject_Hashtable_AfterArgs _afterFadeFrom_GameObject_Hashtable;

        private static void FadeFrom_GameObject_Hashtable(On.iTween.orig_FadeFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_FadeFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeFadeFrom_GameObject_Hashtable != null)
                foreach (Delegates.FadeFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeFadeFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeFadeFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterFadeFrom_GameObject_Hashtable != null)
                foreach (Delegates.FadeFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterFadeFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterFadeFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeTo_GameObject_float_float()
        {
            if (!HookedList.Contains("FadeTo_GameObject_float_float"))
            {
                HookedList.Add("FadeTo_GameObject_float_float");
                On.iTween.FadeTo_GameObject_float_float += FadeTo_GameObject_float_float;
            }
        }

        internal static event Delegates.FadeTo_GameObject_float_float_BeforeArgs _beforeFadeTo_GameObject_float_float;
        internal static event Delegates.FadeTo_GameObject_float_float_AfterArgs _afterFadeTo_GameObject_float_float;

        private static void FadeTo_GameObject_float_float(On.iTween.orig_FadeTo_GameObject_float_float orig,
            GameObject target, float alpha, float time)
        {
            Delegates.Params_FadeTo_GameObject_float_float @params = new()
            {
                target = target, alpha = alpha, time = time
            };
            if (_beforeFadeTo_GameObject_float_float != null)
                foreach (Delegates.FadeTo_GameObject_float_float_BeforeArgs toInvoke in
                         _beforeFadeTo_GameObject_float_float.GetInvocationList())
                    try
                    {
                        _beforeFadeTo_GameObject_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            alpha = @params.alpha;
            time = @params.time;
            orig(target, alpha, time);
            if (_afterFadeTo_GameObject_float_float != null)
                foreach (Delegates.FadeTo_GameObject_float_float_AfterArgs toInvoke in
                         _afterFadeTo_GameObject_float_float.GetInvocationList())
                    try
                    {
                        _afterFadeTo_GameObject_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("FadeTo_GameObject_Hashtable"))
            {
                HookedList.Add("FadeTo_GameObject_Hashtable");
                On.iTween.FadeTo_GameObject_Hashtable += FadeTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.FadeTo_GameObject_Hashtable_BeforeArgs _beforeFadeTo_GameObject_Hashtable;
        internal static event Delegates.FadeTo_GameObject_Hashtable_AfterArgs _afterFadeTo_GameObject_Hashtable;

        private static void FadeTo_GameObject_Hashtable(On.iTween.orig_FadeTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_FadeTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeFadeTo_GameObject_Hashtable != null)
                foreach (Delegates.FadeTo_GameObject_Hashtable_BeforeArgs toInvoke in _beforeFadeTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeFadeTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterFadeTo_GameObject_Hashtable != null)
                foreach (Delegates.FadeTo_GameObject_Hashtable_AfterArgs toInvoke in _afterFadeTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterFadeTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookColorFrom_GameObject_Color_float()
        {
            if (!HookedList.Contains("ColorFrom_GameObject_Color_float"))
            {
                HookedList.Add("ColorFrom_GameObject_Color_float");
                On.iTween.ColorFrom_GameObject_Color_float += ColorFrom_GameObject_Color_float;
            }
        }

        internal static event Delegates.ColorFrom_GameObject_Color_float_BeforeArgs
            _beforeColorFrom_GameObject_Color_float;

        internal static event Delegates.ColorFrom_GameObject_Color_float_AfterArgs
            _afterColorFrom_GameObject_Color_float;

        private static void ColorFrom_GameObject_Color_float(On.iTween.orig_ColorFrom_GameObject_Color_float orig,
            GameObject target, Color color, float time)
        {
            Delegates.Params_ColorFrom_GameObject_Color_float @params = new()
            {
                target = target, color = color, time = time
            };
            if (_beforeColorFrom_GameObject_Color_float != null)
                foreach (Delegates.ColorFrom_GameObject_Color_float_BeforeArgs toInvoke in
                         _beforeColorFrom_GameObject_Color_float.GetInvocationList())
                    try
                    {
                        _beforeColorFrom_GameObject_Color_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            color = @params.color;
            time = @params.time;
            orig(target, color, time);
            if (_afterColorFrom_GameObject_Color_float != null)
                foreach (Delegates.ColorFrom_GameObject_Color_float_AfterArgs toInvoke in
                         _afterColorFrom_GameObject_Color_float.GetInvocationList())
                    try
                    {
                        _afterColorFrom_GameObject_Color_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookColorFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ColorFrom_GameObject_Hashtable"))
            {
                HookedList.Add("ColorFrom_GameObject_Hashtable");
                On.iTween.ColorFrom_GameObject_Hashtable += ColorFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ColorFrom_GameObject_Hashtable_BeforeArgs _beforeColorFrom_GameObject_Hashtable;
        internal static event Delegates.ColorFrom_GameObject_Hashtable_AfterArgs _afterColorFrom_GameObject_Hashtable;

        private static void ColorFrom_GameObject_Hashtable(On.iTween.orig_ColorFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ColorFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeColorFrom_GameObject_Hashtable != null)
                foreach (Delegates.ColorFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeColorFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeColorFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterColorFrom_GameObject_Hashtable != null)
                foreach (Delegates.ColorFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterColorFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterColorFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookColorTo_GameObject_Color_float()
        {
            if (!HookedList.Contains("ColorTo_GameObject_Color_float"))
            {
                HookedList.Add("ColorTo_GameObject_Color_float");
                On.iTween.ColorTo_GameObject_Color_float += ColorTo_GameObject_Color_float;
            }
        }

        internal static event Delegates.ColorTo_GameObject_Color_float_BeforeArgs _beforeColorTo_GameObject_Color_float;
        internal static event Delegates.ColorTo_GameObject_Color_float_AfterArgs _afterColorTo_GameObject_Color_float;

        private static void ColorTo_GameObject_Color_float(On.iTween.orig_ColorTo_GameObject_Color_float orig,
            GameObject target, Color color, float time)
        {
            Delegates.Params_ColorTo_GameObject_Color_float @params = new()
            {
                target = target, color = color, time = time
            };
            if (_beforeColorTo_GameObject_Color_float != null)
                foreach (Delegates.ColorTo_GameObject_Color_float_BeforeArgs toInvoke in
                         _beforeColorTo_GameObject_Color_float.GetInvocationList())
                    try
                    {
                        _beforeColorTo_GameObject_Color_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            color = @params.color;
            time = @params.time;
            orig(target, color, time);
            if (_afterColorTo_GameObject_Color_float != null)
                foreach (Delegates.ColorTo_GameObject_Color_float_AfterArgs toInvoke in
                         _afterColorTo_GameObject_Color_float.GetInvocationList())
                    try
                    {
                        _afterColorTo_GameObject_Color_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookColorTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ColorTo_GameObject_Hashtable"))
            {
                HookedList.Add("ColorTo_GameObject_Hashtable");
                On.iTween.ColorTo_GameObject_Hashtable += ColorTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ColorTo_GameObject_Hashtable_BeforeArgs _beforeColorTo_GameObject_Hashtable;
        internal static event Delegates.ColorTo_GameObject_Hashtable_AfterArgs _afterColorTo_GameObject_Hashtable;

        private static void ColorTo_GameObject_Hashtable(On.iTween.orig_ColorTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ColorTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeColorTo_GameObject_Hashtable != null)
                foreach (Delegates.ColorTo_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeColorTo_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeColorTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterColorTo_GameObject_Hashtable != null)
                foreach (Delegates.ColorTo_GameObject_Hashtable_AfterArgs toInvoke in _afterColorTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterColorTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAudioFrom_GameObject_float_float_float()
        {
            if (!HookedList.Contains("AudioFrom_GameObject_float_float_float"))
            {
                HookedList.Add("AudioFrom_GameObject_float_float_float");
                On.iTween.AudioFrom_GameObject_float_float_float += AudioFrom_GameObject_float_float_float;
            }
        }

        internal static event Delegates.AudioFrom_GameObject_float_float_float_BeforeArgs
            _beforeAudioFrom_GameObject_float_float_float;

        internal static event Delegates.AudioFrom_GameObject_float_float_float_AfterArgs
            _afterAudioFrom_GameObject_float_float_float;

        private static void AudioFrom_GameObject_float_float_float(
            On.iTween.orig_AudioFrom_GameObject_float_float_float orig, GameObject target, float volume, float pitch,
            float time)
        {
            Delegates.Params_AudioFrom_GameObject_float_float_float @params = new()
            {
                target = target, volume = volume, pitch = pitch, time = time
            };
            if (_beforeAudioFrom_GameObject_float_float_float != null)
                foreach (Delegates.AudioFrom_GameObject_float_float_float_BeforeArgs toInvoke in
                         _beforeAudioFrom_GameObject_float_float_float.GetInvocationList())
                    try
                    {
                        _beforeAudioFrom_GameObject_float_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            volume = @params.volume;
            pitch = @params.pitch;
            time = @params.time;
            orig(target, volume, pitch, time);
            if (_afterAudioFrom_GameObject_float_float_float != null)
                foreach (Delegates.AudioFrom_GameObject_float_float_float_AfterArgs toInvoke in
                         _afterAudioFrom_GameObject_float_float_float.GetInvocationList())
                    try
                    {
                        _afterAudioFrom_GameObject_float_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAudioFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("AudioFrom_GameObject_Hashtable"))
            {
                HookedList.Add("AudioFrom_GameObject_Hashtable");
                On.iTween.AudioFrom_GameObject_Hashtable += AudioFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.AudioFrom_GameObject_Hashtable_BeforeArgs _beforeAudioFrom_GameObject_Hashtable;
        internal static event Delegates.AudioFrom_GameObject_Hashtable_AfterArgs _afterAudioFrom_GameObject_Hashtable;

        private static void AudioFrom_GameObject_Hashtable(On.iTween.orig_AudioFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_AudioFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeAudioFrom_GameObject_Hashtable != null)
                foreach (Delegates.AudioFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeAudioFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeAudioFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterAudioFrom_GameObject_Hashtable != null)
                foreach (Delegates.AudioFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterAudioFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterAudioFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAudioTo_GameObject_float_float_float()
        {
            if (!HookedList.Contains("AudioTo_GameObject_float_float_float"))
            {
                HookedList.Add("AudioTo_GameObject_float_float_float");
                On.iTween.AudioTo_GameObject_float_float_float += AudioTo_GameObject_float_float_float;
            }
        }

        internal static event Delegates.AudioTo_GameObject_float_float_float_BeforeArgs
            _beforeAudioTo_GameObject_float_float_float;

        internal static event Delegates.AudioTo_GameObject_float_float_float_AfterArgs
            _afterAudioTo_GameObject_float_float_float;

        private static void AudioTo_GameObject_float_float_float(
            On.iTween.orig_AudioTo_GameObject_float_float_float orig, GameObject target, float volume, float pitch,
            float time)
        {
            Delegates.Params_AudioTo_GameObject_float_float_float @params = new()
            {
                target = target, volume = volume, pitch = pitch, time = time
            };
            if (_beforeAudioTo_GameObject_float_float_float != null)
                foreach (Delegates.AudioTo_GameObject_float_float_float_BeforeArgs toInvoke in
                         _beforeAudioTo_GameObject_float_float_float.GetInvocationList())
                    try
                    {
                        _beforeAudioTo_GameObject_float_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            volume = @params.volume;
            pitch = @params.pitch;
            time = @params.time;
            orig(target, volume, pitch, time);
            if (_afterAudioTo_GameObject_float_float_float != null)
                foreach (Delegates.AudioTo_GameObject_float_float_float_AfterArgs toInvoke in
                         _afterAudioTo_GameObject_float_float_float.GetInvocationList())
                    try
                    {
                        _afterAudioTo_GameObject_float_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAudioTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("AudioTo_GameObject_Hashtable"))
            {
                HookedList.Add("AudioTo_GameObject_Hashtable");
                On.iTween.AudioTo_GameObject_Hashtable += AudioTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.AudioTo_GameObject_Hashtable_BeforeArgs _beforeAudioTo_GameObject_Hashtable;
        internal static event Delegates.AudioTo_GameObject_Hashtable_AfterArgs _afterAudioTo_GameObject_Hashtable;

        private static void AudioTo_GameObject_Hashtable(On.iTween.orig_AudioTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_AudioTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeAudioTo_GameObject_Hashtable != null)
                foreach (Delegates.AudioTo_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeAudioTo_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeAudioTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterAudioTo_GameObject_Hashtable != null)
                foreach (Delegates.AudioTo_GameObject_Hashtable_AfterArgs toInvoke in _afterAudioTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterAudioTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStab_GameObject_AudioClip_float()
        {
            if (!HookedList.Contains("Stab_GameObject_AudioClip_float"))
            {
                HookedList.Add("Stab_GameObject_AudioClip_float");
                On.iTween.Stab_GameObject_AudioClip_float += Stab_GameObject_AudioClip_float;
            }
        }

        internal static event Delegates.Stab_GameObject_AudioClip_float_BeforeArgs
            _beforeStab_GameObject_AudioClip_float;

        internal static event Delegates.Stab_GameObject_AudioClip_float_AfterArgs _afterStab_GameObject_AudioClip_float;

        private static void Stab_GameObject_AudioClip_float(On.iTween.orig_Stab_GameObject_AudioClip_float orig,
            GameObject target, AudioClip audioclip, float delay)
        {
            Delegates.Params_Stab_GameObject_AudioClip_float @params = new()
            {
                target = target, audioclip = audioclip, delay = delay
            };
            if (_beforeStab_GameObject_AudioClip_float != null)
                foreach (Delegates.Stab_GameObject_AudioClip_float_BeforeArgs toInvoke in
                         _beforeStab_GameObject_AudioClip_float.GetInvocationList())
                    try
                    {
                        _beforeStab_GameObject_AudioClip_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            audioclip = @params.audioclip;
            delay = @params.delay;
            orig(target, audioclip, delay);
            if (_afterStab_GameObject_AudioClip_float != null)
                foreach (Delegates.Stab_GameObject_AudioClip_float_AfterArgs toInvoke in
                         _afterStab_GameObject_AudioClip_float.GetInvocationList())
                    try
                    {
                        _afterStab_GameObject_AudioClip_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStab_GameObject_Hashtable()
        {
            if (!HookedList.Contains("Stab_GameObject_Hashtable"))
            {
                HookedList.Add("Stab_GameObject_Hashtable");
                On.iTween.Stab_GameObject_Hashtable += Stab_GameObject_Hashtable;
            }
        }

        internal static event Delegates.Stab_GameObject_Hashtable_BeforeArgs _beforeStab_GameObject_Hashtable;
        internal static event Delegates.Stab_GameObject_Hashtable_AfterArgs _afterStab_GameObject_Hashtable;

        private static void Stab_GameObject_Hashtable(On.iTween.orig_Stab_GameObject_Hashtable orig, GameObject target,
            Hashtable args)
        {
            Delegates.Params_Stab_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeStab_GameObject_Hashtable != null)
                foreach (Delegates.Stab_GameObject_Hashtable_BeforeArgs toInvoke in _beforeStab_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeStab_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterStab_GameObject_Hashtable != null)
                foreach (Delegates.Stab_GameObject_Hashtable_AfterArgs toInvoke in _afterStab_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterStab_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookFrom_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("LookFrom_GameObject_Vector3_float"))
            {
                HookedList.Add("LookFrom_GameObject_Vector3_float");
                On.iTween.LookFrom_GameObject_Vector3_float += LookFrom_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.LookFrom_GameObject_Vector3_float_BeforeArgs
            _beforeLookFrom_GameObject_Vector3_float;

        internal static event Delegates.LookFrom_GameObject_Vector3_float_AfterArgs
            _afterLookFrom_GameObject_Vector3_float;

        private static void LookFrom_GameObject_Vector3_float(On.iTween.orig_LookFrom_GameObject_Vector3_float orig,
            GameObject target, Vector3 looktarget, float time)
        {
            Delegates.Params_LookFrom_GameObject_Vector3_float @params = new()
            {
                target = target, looktarget = looktarget, time = time
            };
            if (_beforeLookFrom_GameObject_Vector3_float != null)
                foreach (Delegates.LookFrom_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeLookFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeLookFrom_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            looktarget = @params.looktarget;
            time = @params.time;
            orig(target, looktarget, time);
            if (_afterLookFrom_GameObject_Vector3_float != null)
                foreach (Delegates.LookFrom_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterLookFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterLookFrom_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("LookFrom_GameObject_Hashtable"))
            {
                HookedList.Add("LookFrom_GameObject_Hashtable");
                On.iTween.LookFrom_GameObject_Hashtable += LookFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.LookFrom_GameObject_Hashtable_BeforeArgs _beforeLookFrom_GameObject_Hashtable;
        internal static event Delegates.LookFrom_GameObject_Hashtable_AfterArgs _afterLookFrom_GameObject_Hashtable;

        private static void LookFrom_GameObject_Hashtable(On.iTween.orig_LookFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_LookFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeLookFrom_GameObject_Hashtable != null)
                foreach (Delegates.LookFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeLookFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeLookFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterLookFrom_GameObject_Hashtable != null)
                foreach (Delegates.LookFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterLookFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterLookFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookTo_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("LookTo_GameObject_Vector3_float"))
            {
                HookedList.Add("LookTo_GameObject_Vector3_float");
                On.iTween.LookTo_GameObject_Vector3_float += LookTo_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.LookTo_GameObject_Vector3_float_BeforeArgs
            _beforeLookTo_GameObject_Vector3_float;

        internal static event Delegates.LookTo_GameObject_Vector3_float_AfterArgs _afterLookTo_GameObject_Vector3_float;

        private static void LookTo_GameObject_Vector3_float(On.iTween.orig_LookTo_GameObject_Vector3_float orig,
            GameObject target, Vector3 looktarget, float time)
        {
            Delegates.Params_LookTo_GameObject_Vector3_float @params = new()
            {
                target = target, looktarget = looktarget, time = time
            };
            if (_beforeLookTo_GameObject_Vector3_float != null)
                foreach (Delegates.LookTo_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeLookTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeLookTo_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            looktarget = @params.looktarget;
            time = @params.time;
            orig(target, looktarget, time);
            if (_afterLookTo_GameObject_Vector3_float != null)
                foreach (Delegates.LookTo_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterLookTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterLookTo_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("LookTo_GameObject_Hashtable"))
            {
                HookedList.Add("LookTo_GameObject_Hashtable");
                On.iTween.LookTo_GameObject_Hashtable += LookTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.LookTo_GameObject_Hashtable_BeforeArgs _beforeLookTo_GameObject_Hashtable;
        internal static event Delegates.LookTo_GameObject_Hashtable_AfterArgs _afterLookTo_GameObject_Hashtable;

        private static void LookTo_GameObject_Hashtable(On.iTween.orig_LookTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_LookTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeLookTo_GameObject_Hashtable != null)
                foreach (Delegates.LookTo_GameObject_Hashtable_BeforeArgs toInvoke in _beforeLookTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeLookTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterLookTo_GameObject_Hashtable != null)
                foreach (Delegates.LookTo_GameObject_Hashtable_AfterArgs toInvoke in _afterLookTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterLookTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveTo_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("MoveTo_GameObject_Vector3_float"))
            {
                HookedList.Add("MoveTo_GameObject_Vector3_float");
                On.iTween.MoveTo_GameObject_Vector3_float += MoveTo_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.MoveTo_GameObject_Vector3_float_BeforeArgs
            _beforeMoveTo_GameObject_Vector3_float;

        internal static event Delegates.MoveTo_GameObject_Vector3_float_AfterArgs _afterMoveTo_GameObject_Vector3_float;

        private static void MoveTo_GameObject_Vector3_float(On.iTween.orig_MoveTo_GameObject_Vector3_float orig,
            GameObject target, Vector3 position, float time)
        {
            Delegates.Params_MoveTo_GameObject_Vector3_float @params = new()
            {
                target = target, position = position, time = time
            };
            if (_beforeMoveTo_GameObject_Vector3_float != null)
                foreach (Delegates.MoveTo_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeMoveTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeMoveTo_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            position = @params.position;
            time = @params.time;
            orig(target, position, time);
            if (_afterMoveTo_GameObject_Vector3_float != null)
                foreach (Delegates.MoveTo_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterMoveTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterMoveTo_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("MoveTo_GameObject_Hashtable"))
            {
                HookedList.Add("MoveTo_GameObject_Hashtable");
                On.iTween.MoveTo_GameObject_Hashtable += MoveTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.MoveTo_GameObject_Hashtable_BeforeArgs _beforeMoveTo_GameObject_Hashtable;
        internal static event Delegates.MoveTo_GameObject_Hashtable_AfterArgs _afterMoveTo_GameObject_Hashtable;

        private static void MoveTo_GameObject_Hashtable(On.iTween.orig_MoveTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_MoveTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeMoveTo_GameObject_Hashtable != null)
                foreach (Delegates.MoveTo_GameObject_Hashtable_BeforeArgs toInvoke in _beforeMoveTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeMoveTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterMoveTo_GameObject_Hashtable != null)
                foreach (Delegates.MoveTo_GameObject_Hashtable_AfterArgs toInvoke in _afterMoveTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterMoveTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveFrom_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("MoveFrom_GameObject_Vector3_float"))
            {
                HookedList.Add("MoveFrom_GameObject_Vector3_float");
                On.iTween.MoveFrom_GameObject_Vector3_float += MoveFrom_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.MoveFrom_GameObject_Vector3_float_BeforeArgs
            _beforeMoveFrom_GameObject_Vector3_float;

        internal static event Delegates.MoveFrom_GameObject_Vector3_float_AfterArgs
            _afterMoveFrom_GameObject_Vector3_float;

        private static void MoveFrom_GameObject_Vector3_float(On.iTween.orig_MoveFrom_GameObject_Vector3_float orig,
            GameObject target, Vector3 position, float time)
        {
            Delegates.Params_MoveFrom_GameObject_Vector3_float @params = new()
            {
                target = target, position = position, time = time
            };
            if (_beforeMoveFrom_GameObject_Vector3_float != null)
                foreach (Delegates.MoveFrom_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeMoveFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeMoveFrom_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            position = @params.position;
            time = @params.time;
            orig(target, position, time);
            if (_afterMoveFrom_GameObject_Vector3_float != null)
                foreach (Delegates.MoveFrom_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterMoveFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterMoveFrom_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("MoveFrom_GameObject_Hashtable"))
            {
                HookedList.Add("MoveFrom_GameObject_Hashtable");
                On.iTween.MoveFrom_GameObject_Hashtable += MoveFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.MoveFrom_GameObject_Hashtable_BeforeArgs _beforeMoveFrom_GameObject_Hashtable;
        internal static event Delegates.MoveFrom_GameObject_Hashtable_AfterArgs _afterMoveFrom_GameObject_Hashtable;

        private static void MoveFrom_GameObject_Hashtable(On.iTween.orig_MoveFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_MoveFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeMoveFrom_GameObject_Hashtable != null)
                foreach (Delegates.MoveFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeMoveFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeMoveFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterMoveFrom_GameObject_Hashtable != null)
                foreach (Delegates.MoveFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterMoveFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterMoveFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveAdd_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("MoveAdd_GameObject_Vector3_float"))
            {
                HookedList.Add("MoveAdd_GameObject_Vector3_float");
                On.iTween.MoveAdd_GameObject_Vector3_float += MoveAdd_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.MoveAdd_GameObject_Vector3_float_BeforeArgs
            _beforeMoveAdd_GameObject_Vector3_float;

        internal static event Delegates.MoveAdd_GameObject_Vector3_float_AfterArgs
            _afterMoveAdd_GameObject_Vector3_float;

        private static void MoveAdd_GameObject_Vector3_float(On.iTween.orig_MoveAdd_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_MoveAdd_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeMoveAdd_GameObject_Vector3_float != null)
                foreach (Delegates.MoveAdd_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeMoveAdd_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeMoveAdd_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterMoveAdd_GameObject_Vector3_float != null)
                foreach (Delegates.MoveAdd_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterMoveAdd_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterMoveAdd_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveAdd_GameObject_Hashtable()
        {
            if (!HookedList.Contains("MoveAdd_GameObject_Hashtable"))
            {
                HookedList.Add("MoveAdd_GameObject_Hashtable");
                On.iTween.MoveAdd_GameObject_Hashtable += MoveAdd_GameObject_Hashtable;
            }
        }

        internal static event Delegates.MoveAdd_GameObject_Hashtable_BeforeArgs _beforeMoveAdd_GameObject_Hashtable;
        internal static event Delegates.MoveAdd_GameObject_Hashtable_AfterArgs _afterMoveAdd_GameObject_Hashtable;

        private static void MoveAdd_GameObject_Hashtable(On.iTween.orig_MoveAdd_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_MoveAdd_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeMoveAdd_GameObject_Hashtable != null)
                foreach (Delegates.MoveAdd_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeMoveAdd_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeMoveAdd_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterMoveAdd_GameObject_Hashtable != null)
                foreach (Delegates.MoveAdd_GameObject_Hashtable_AfterArgs toInvoke in _afterMoveAdd_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterMoveAdd_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveBy_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("MoveBy_GameObject_Vector3_float"))
            {
                HookedList.Add("MoveBy_GameObject_Vector3_float");
                On.iTween.MoveBy_GameObject_Vector3_float += MoveBy_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.MoveBy_GameObject_Vector3_float_BeforeArgs
            _beforeMoveBy_GameObject_Vector3_float;

        internal static event Delegates.MoveBy_GameObject_Vector3_float_AfterArgs _afterMoveBy_GameObject_Vector3_float;

        private static void MoveBy_GameObject_Vector3_float(On.iTween.orig_MoveBy_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_MoveBy_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeMoveBy_GameObject_Vector3_float != null)
                foreach (Delegates.MoveBy_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeMoveBy_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeMoveBy_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterMoveBy_GameObject_Vector3_float != null)
                foreach (Delegates.MoveBy_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterMoveBy_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterMoveBy_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveBy_GameObject_Hashtable()
        {
            if (!HookedList.Contains("MoveBy_GameObject_Hashtable"))
            {
                HookedList.Add("MoveBy_GameObject_Hashtable");
                On.iTween.MoveBy_GameObject_Hashtable += MoveBy_GameObject_Hashtable;
            }
        }

        internal static event Delegates.MoveBy_GameObject_Hashtable_BeforeArgs _beforeMoveBy_GameObject_Hashtable;
        internal static event Delegates.MoveBy_GameObject_Hashtable_AfterArgs _afterMoveBy_GameObject_Hashtable;

        private static void MoveBy_GameObject_Hashtable(On.iTween.orig_MoveBy_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_MoveBy_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeMoveBy_GameObject_Hashtable != null)
                foreach (Delegates.MoveBy_GameObject_Hashtable_BeforeArgs toInvoke in _beforeMoveBy_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _beforeMoveBy_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterMoveBy_GameObject_Hashtable != null)
                foreach (Delegates.MoveBy_GameObject_Hashtable_AfterArgs toInvoke in _afterMoveBy_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterMoveBy_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleTo_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ScaleTo_GameObject_Vector3_float"))
            {
                HookedList.Add("ScaleTo_GameObject_Vector3_float");
                On.iTween.ScaleTo_GameObject_Vector3_float += ScaleTo_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ScaleTo_GameObject_Vector3_float_BeforeArgs
            _beforeScaleTo_GameObject_Vector3_float;

        internal static event Delegates.ScaleTo_GameObject_Vector3_float_AfterArgs
            _afterScaleTo_GameObject_Vector3_float;

        private static void ScaleTo_GameObject_Vector3_float(On.iTween.orig_ScaleTo_GameObject_Vector3_float orig,
            GameObject target, Vector3 scale, float time)
        {
            Delegates.Params_ScaleTo_GameObject_Vector3_float @params = new()
            {
                target = target, scale = scale, time = time
            };
            if (_beforeScaleTo_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleTo_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeScaleTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeScaleTo_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            scale = @params.scale;
            time = @params.time;
            orig(target, scale, time);
            if (_afterScaleTo_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleTo_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterScaleTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterScaleTo_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ScaleTo_GameObject_Hashtable"))
            {
                HookedList.Add("ScaleTo_GameObject_Hashtable");
                On.iTween.ScaleTo_GameObject_Hashtable += ScaleTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ScaleTo_GameObject_Hashtable_BeforeArgs _beforeScaleTo_GameObject_Hashtable;
        internal static event Delegates.ScaleTo_GameObject_Hashtable_AfterArgs _afterScaleTo_GameObject_Hashtable;

        private static void ScaleTo_GameObject_Hashtable(On.iTween.orig_ScaleTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ScaleTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeScaleTo_GameObject_Hashtable != null)
                foreach (Delegates.ScaleTo_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeScaleTo_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeScaleTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterScaleTo_GameObject_Hashtable != null)
                foreach (Delegates.ScaleTo_GameObject_Hashtable_AfterArgs toInvoke in _afterScaleTo_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterScaleTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleFrom_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ScaleFrom_GameObject_Vector3_float"))
            {
                HookedList.Add("ScaleFrom_GameObject_Vector3_float");
                On.iTween.ScaleFrom_GameObject_Vector3_float += ScaleFrom_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ScaleFrom_GameObject_Vector3_float_BeforeArgs
            _beforeScaleFrom_GameObject_Vector3_float;

        internal static event Delegates.ScaleFrom_GameObject_Vector3_float_AfterArgs
            _afterScaleFrom_GameObject_Vector3_float;

        private static void ScaleFrom_GameObject_Vector3_float(On.iTween.orig_ScaleFrom_GameObject_Vector3_float orig,
            GameObject target, Vector3 scale, float time)
        {
            Delegates.Params_ScaleFrom_GameObject_Vector3_float @params = new()
            {
                target = target, scale = scale, time = time
            };
            if (_beforeScaleFrom_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleFrom_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeScaleFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeScaleFrom_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            scale = @params.scale;
            time = @params.time;
            orig(target, scale, time);
            if (_afterScaleFrom_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleFrom_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterScaleFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterScaleFrom_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ScaleFrom_GameObject_Hashtable"))
            {
                HookedList.Add("ScaleFrom_GameObject_Hashtable");
                On.iTween.ScaleFrom_GameObject_Hashtable += ScaleFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ScaleFrom_GameObject_Hashtable_BeforeArgs _beforeScaleFrom_GameObject_Hashtable;
        internal static event Delegates.ScaleFrom_GameObject_Hashtable_AfterArgs _afterScaleFrom_GameObject_Hashtable;

        private static void ScaleFrom_GameObject_Hashtable(On.iTween.orig_ScaleFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ScaleFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeScaleFrom_GameObject_Hashtable != null)
                foreach (Delegates.ScaleFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeScaleFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeScaleFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterScaleFrom_GameObject_Hashtable != null)
                foreach (Delegates.ScaleFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterScaleFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterScaleFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleAdd_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ScaleAdd_GameObject_Vector3_float"))
            {
                HookedList.Add("ScaleAdd_GameObject_Vector3_float");
                On.iTween.ScaleAdd_GameObject_Vector3_float += ScaleAdd_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ScaleAdd_GameObject_Vector3_float_BeforeArgs
            _beforeScaleAdd_GameObject_Vector3_float;

        internal static event Delegates.ScaleAdd_GameObject_Vector3_float_AfterArgs
            _afterScaleAdd_GameObject_Vector3_float;

        private static void ScaleAdd_GameObject_Vector3_float(On.iTween.orig_ScaleAdd_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_ScaleAdd_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeScaleAdd_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleAdd_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeScaleAdd_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeScaleAdd_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterScaleAdd_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleAdd_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterScaleAdd_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterScaleAdd_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleAdd_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ScaleAdd_GameObject_Hashtable"))
            {
                HookedList.Add("ScaleAdd_GameObject_Hashtable");
                On.iTween.ScaleAdd_GameObject_Hashtable += ScaleAdd_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ScaleAdd_GameObject_Hashtable_BeforeArgs _beforeScaleAdd_GameObject_Hashtable;
        internal static event Delegates.ScaleAdd_GameObject_Hashtable_AfterArgs _afterScaleAdd_GameObject_Hashtable;

        private static void ScaleAdd_GameObject_Hashtable(On.iTween.orig_ScaleAdd_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ScaleAdd_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeScaleAdd_GameObject_Hashtable != null)
                foreach (Delegates.ScaleAdd_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeScaleAdd_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeScaleAdd_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterScaleAdd_GameObject_Hashtable != null)
                foreach (Delegates.ScaleAdd_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterScaleAdd_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterScaleAdd_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleBy_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ScaleBy_GameObject_Vector3_float"))
            {
                HookedList.Add("ScaleBy_GameObject_Vector3_float");
                On.iTween.ScaleBy_GameObject_Vector3_float += ScaleBy_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ScaleBy_GameObject_Vector3_float_BeforeArgs
            _beforeScaleBy_GameObject_Vector3_float;

        internal static event Delegates.ScaleBy_GameObject_Vector3_float_AfterArgs
            _afterScaleBy_GameObject_Vector3_float;

        private static void ScaleBy_GameObject_Vector3_float(On.iTween.orig_ScaleBy_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_ScaleBy_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeScaleBy_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleBy_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeScaleBy_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeScaleBy_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterScaleBy_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleBy_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterScaleBy_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterScaleBy_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleBy_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ScaleBy_GameObject_Hashtable"))
            {
                HookedList.Add("ScaleBy_GameObject_Hashtable");
                On.iTween.ScaleBy_GameObject_Hashtable += ScaleBy_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ScaleBy_GameObject_Hashtable_BeforeArgs _beforeScaleBy_GameObject_Hashtable;
        internal static event Delegates.ScaleBy_GameObject_Hashtable_AfterArgs _afterScaleBy_GameObject_Hashtable;

        private static void ScaleBy_GameObject_Hashtable(On.iTween.orig_ScaleBy_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ScaleBy_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeScaleBy_GameObject_Hashtable != null)
                foreach (Delegates.ScaleBy_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeScaleBy_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeScaleBy_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterScaleBy_GameObject_Hashtable != null)
                foreach (Delegates.ScaleBy_GameObject_Hashtable_AfterArgs toInvoke in _afterScaleBy_GameObject_Hashtable
                             .GetInvocationList())
                    try
                    {
                        _afterScaleBy_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateTo_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("RotateTo_GameObject_Vector3_float"))
            {
                HookedList.Add("RotateTo_GameObject_Vector3_float");
                On.iTween.RotateTo_GameObject_Vector3_float += RotateTo_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.RotateTo_GameObject_Vector3_float_BeforeArgs
            _beforeRotateTo_GameObject_Vector3_float;

        internal static event Delegates.RotateTo_GameObject_Vector3_float_AfterArgs
            _afterRotateTo_GameObject_Vector3_float;

        private static void RotateTo_GameObject_Vector3_float(On.iTween.orig_RotateTo_GameObject_Vector3_float orig,
            GameObject target, Vector3 rotation, float time)
        {
            Delegates.Params_RotateTo_GameObject_Vector3_float @params = new()
            {
                target = target, rotation = rotation, time = time
            };
            if (_beforeRotateTo_GameObject_Vector3_float != null)
                foreach (Delegates.RotateTo_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeRotateTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeRotateTo_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            rotation = @params.rotation;
            time = @params.time;
            orig(target, rotation, time);
            if (_afterRotateTo_GameObject_Vector3_float != null)
                foreach (Delegates.RotateTo_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterRotateTo_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterRotateTo_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateTo_GameObject_Hashtable()
        {
            if (!HookedList.Contains("RotateTo_GameObject_Hashtable"))
            {
                HookedList.Add("RotateTo_GameObject_Hashtable");
                On.iTween.RotateTo_GameObject_Hashtable += RotateTo_GameObject_Hashtable;
            }
        }

        internal static event Delegates.RotateTo_GameObject_Hashtable_BeforeArgs _beforeRotateTo_GameObject_Hashtable;
        internal static event Delegates.RotateTo_GameObject_Hashtable_AfterArgs _afterRotateTo_GameObject_Hashtable;

        private static void RotateTo_GameObject_Hashtable(On.iTween.orig_RotateTo_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_RotateTo_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeRotateTo_GameObject_Hashtable != null)
                foreach (Delegates.RotateTo_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeRotateTo_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeRotateTo_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterRotateTo_GameObject_Hashtable != null)
                foreach (Delegates.RotateTo_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterRotateTo_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterRotateTo_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateFrom_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("RotateFrom_GameObject_Vector3_float"))
            {
                HookedList.Add("RotateFrom_GameObject_Vector3_float");
                On.iTween.RotateFrom_GameObject_Vector3_float += RotateFrom_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.RotateFrom_GameObject_Vector3_float_BeforeArgs
            _beforeRotateFrom_GameObject_Vector3_float;

        internal static event Delegates.RotateFrom_GameObject_Vector3_float_AfterArgs
            _afterRotateFrom_GameObject_Vector3_float;

        private static void RotateFrom_GameObject_Vector3_float(On.iTween.orig_RotateFrom_GameObject_Vector3_float orig,
            GameObject target, Vector3 rotation, float time)
        {
            Delegates.Params_RotateFrom_GameObject_Vector3_float @params = new()
            {
                target = target, rotation = rotation, time = time
            };
            if (_beforeRotateFrom_GameObject_Vector3_float != null)
                foreach (Delegates.RotateFrom_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeRotateFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeRotateFrom_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            rotation = @params.rotation;
            time = @params.time;
            orig(target, rotation, time);
            if (_afterRotateFrom_GameObject_Vector3_float != null)
                foreach (Delegates.RotateFrom_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterRotateFrom_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterRotateFrom_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateFrom_GameObject_Hashtable()
        {
            if (!HookedList.Contains("RotateFrom_GameObject_Hashtable"))
            {
                HookedList.Add("RotateFrom_GameObject_Hashtable");
                On.iTween.RotateFrom_GameObject_Hashtable += RotateFrom_GameObject_Hashtable;
            }
        }

        internal static event Delegates.RotateFrom_GameObject_Hashtable_BeforeArgs
            _beforeRotateFrom_GameObject_Hashtable;

        internal static event Delegates.RotateFrom_GameObject_Hashtable_AfterArgs _afterRotateFrom_GameObject_Hashtable;

        private static void RotateFrom_GameObject_Hashtable(On.iTween.orig_RotateFrom_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_RotateFrom_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeRotateFrom_GameObject_Hashtable != null)
                foreach (Delegates.RotateFrom_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeRotateFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeRotateFrom_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterRotateFrom_GameObject_Hashtable != null)
                foreach (Delegates.RotateFrom_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterRotateFrom_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterRotateFrom_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateAdd_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("RotateAdd_GameObject_Vector3_float"))
            {
                HookedList.Add("RotateAdd_GameObject_Vector3_float");
                On.iTween.RotateAdd_GameObject_Vector3_float += RotateAdd_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.RotateAdd_GameObject_Vector3_float_BeforeArgs
            _beforeRotateAdd_GameObject_Vector3_float;

        internal static event Delegates.RotateAdd_GameObject_Vector3_float_AfterArgs
            _afterRotateAdd_GameObject_Vector3_float;

        private static void RotateAdd_GameObject_Vector3_float(On.iTween.orig_RotateAdd_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_RotateAdd_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeRotateAdd_GameObject_Vector3_float != null)
                foreach (Delegates.RotateAdd_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeRotateAdd_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeRotateAdd_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterRotateAdd_GameObject_Vector3_float != null)
                foreach (Delegates.RotateAdd_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterRotateAdd_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterRotateAdd_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateAdd_GameObject_Hashtable()
        {
            if (!HookedList.Contains("RotateAdd_GameObject_Hashtable"))
            {
                HookedList.Add("RotateAdd_GameObject_Hashtable");
                On.iTween.RotateAdd_GameObject_Hashtable += RotateAdd_GameObject_Hashtable;
            }
        }

        internal static event Delegates.RotateAdd_GameObject_Hashtable_BeforeArgs _beforeRotateAdd_GameObject_Hashtable;
        internal static event Delegates.RotateAdd_GameObject_Hashtable_AfterArgs _afterRotateAdd_GameObject_Hashtable;

        private static void RotateAdd_GameObject_Hashtable(On.iTween.orig_RotateAdd_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_RotateAdd_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeRotateAdd_GameObject_Hashtable != null)
                foreach (Delegates.RotateAdd_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeRotateAdd_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeRotateAdd_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterRotateAdd_GameObject_Hashtable != null)
                foreach (Delegates.RotateAdd_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterRotateAdd_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterRotateAdd_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateBy_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("RotateBy_GameObject_Vector3_float"))
            {
                HookedList.Add("RotateBy_GameObject_Vector3_float");
                On.iTween.RotateBy_GameObject_Vector3_float += RotateBy_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.RotateBy_GameObject_Vector3_float_BeforeArgs
            _beforeRotateBy_GameObject_Vector3_float;

        internal static event Delegates.RotateBy_GameObject_Vector3_float_AfterArgs
            _afterRotateBy_GameObject_Vector3_float;

        private static void RotateBy_GameObject_Vector3_float(On.iTween.orig_RotateBy_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_RotateBy_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeRotateBy_GameObject_Vector3_float != null)
                foreach (Delegates.RotateBy_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeRotateBy_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeRotateBy_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterRotateBy_GameObject_Vector3_float != null)
                foreach (Delegates.RotateBy_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterRotateBy_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterRotateBy_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateBy_GameObject_Hashtable()
        {
            if (!HookedList.Contains("RotateBy_GameObject_Hashtable"))
            {
                HookedList.Add("RotateBy_GameObject_Hashtable");
                On.iTween.RotateBy_GameObject_Hashtable += RotateBy_GameObject_Hashtable;
            }
        }

        internal static event Delegates.RotateBy_GameObject_Hashtable_BeforeArgs _beforeRotateBy_GameObject_Hashtable;
        internal static event Delegates.RotateBy_GameObject_Hashtable_AfterArgs _afterRotateBy_GameObject_Hashtable;

        private static void RotateBy_GameObject_Hashtable(On.iTween.orig_RotateBy_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_RotateBy_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeRotateBy_GameObject_Hashtable != null)
                foreach (Delegates.RotateBy_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeRotateBy_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeRotateBy_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterRotateBy_GameObject_Hashtable != null)
                foreach (Delegates.RotateBy_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterRotateBy_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterRotateBy_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShakePosition_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ShakePosition_GameObject_Vector3_float"))
            {
                HookedList.Add("ShakePosition_GameObject_Vector3_float");
                On.iTween.ShakePosition_GameObject_Vector3_float += ShakePosition_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ShakePosition_GameObject_Vector3_float_BeforeArgs
            _beforeShakePosition_GameObject_Vector3_float;

        internal static event Delegates.ShakePosition_GameObject_Vector3_float_AfterArgs
            _afterShakePosition_GameObject_Vector3_float;

        private static void ShakePosition_GameObject_Vector3_float(
            On.iTween.orig_ShakePosition_GameObject_Vector3_float orig, GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_ShakePosition_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeShakePosition_GameObject_Vector3_float != null)
                foreach (Delegates.ShakePosition_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeShakePosition_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeShakePosition_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterShakePosition_GameObject_Vector3_float != null)
                foreach (Delegates.ShakePosition_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterShakePosition_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterShakePosition_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShakePosition_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ShakePosition_GameObject_Hashtable"))
            {
                HookedList.Add("ShakePosition_GameObject_Hashtable");
                On.iTween.ShakePosition_GameObject_Hashtable += ShakePosition_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ShakePosition_GameObject_Hashtable_BeforeArgs
            _beforeShakePosition_GameObject_Hashtable;

        internal static event Delegates.ShakePosition_GameObject_Hashtable_AfterArgs
            _afterShakePosition_GameObject_Hashtable;

        private static void ShakePosition_GameObject_Hashtable(On.iTween.orig_ShakePosition_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ShakePosition_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeShakePosition_GameObject_Hashtable != null)
                foreach (Delegates.ShakePosition_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeShakePosition_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeShakePosition_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterShakePosition_GameObject_Hashtable != null)
                foreach (Delegates.ShakePosition_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterShakePosition_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterShakePosition_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShakeScale_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ShakeScale_GameObject_Vector3_float"))
            {
                HookedList.Add("ShakeScale_GameObject_Vector3_float");
                On.iTween.ShakeScale_GameObject_Vector3_float += ShakeScale_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ShakeScale_GameObject_Vector3_float_BeforeArgs
            _beforeShakeScale_GameObject_Vector3_float;

        internal static event Delegates.ShakeScale_GameObject_Vector3_float_AfterArgs
            _afterShakeScale_GameObject_Vector3_float;

        private static void ShakeScale_GameObject_Vector3_float(On.iTween.orig_ShakeScale_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_ShakeScale_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeShakeScale_GameObject_Vector3_float != null)
                foreach (Delegates.ShakeScale_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeShakeScale_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeShakeScale_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterShakeScale_GameObject_Vector3_float != null)
                foreach (Delegates.ShakeScale_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterShakeScale_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterShakeScale_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShakeScale_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ShakeScale_GameObject_Hashtable"))
            {
                HookedList.Add("ShakeScale_GameObject_Hashtable");
                On.iTween.ShakeScale_GameObject_Hashtable += ShakeScale_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ShakeScale_GameObject_Hashtable_BeforeArgs
            _beforeShakeScale_GameObject_Hashtable;

        internal static event Delegates.ShakeScale_GameObject_Hashtable_AfterArgs _afterShakeScale_GameObject_Hashtable;

        private static void ShakeScale_GameObject_Hashtable(On.iTween.orig_ShakeScale_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ShakeScale_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeShakeScale_GameObject_Hashtable != null)
                foreach (Delegates.ShakeScale_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeShakeScale_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeShakeScale_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterShakeScale_GameObject_Hashtable != null)
                foreach (Delegates.ShakeScale_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterShakeScale_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterShakeScale_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShakeRotation_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ShakeRotation_GameObject_Vector3_float"))
            {
                HookedList.Add("ShakeRotation_GameObject_Vector3_float");
                On.iTween.ShakeRotation_GameObject_Vector3_float += ShakeRotation_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ShakeRotation_GameObject_Vector3_float_BeforeArgs
            _beforeShakeRotation_GameObject_Vector3_float;

        internal static event Delegates.ShakeRotation_GameObject_Vector3_float_AfterArgs
            _afterShakeRotation_GameObject_Vector3_float;

        private static void ShakeRotation_GameObject_Vector3_float(
            On.iTween.orig_ShakeRotation_GameObject_Vector3_float orig, GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_ShakeRotation_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforeShakeRotation_GameObject_Vector3_float != null)
                foreach (Delegates.ShakeRotation_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeShakeRotation_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeShakeRotation_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterShakeRotation_GameObject_Vector3_float != null)
                foreach (Delegates.ShakeRotation_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterShakeRotation_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterShakeRotation_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShakeRotation_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ShakeRotation_GameObject_Hashtable"))
            {
                HookedList.Add("ShakeRotation_GameObject_Hashtable");
                On.iTween.ShakeRotation_GameObject_Hashtable += ShakeRotation_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ShakeRotation_GameObject_Hashtable_BeforeArgs
            _beforeShakeRotation_GameObject_Hashtable;

        internal static event Delegates.ShakeRotation_GameObject_Hashtable_AfterArgs
            _afterShakeRotation_GameObject_Hashtable;

        private static void ShakeRotation_GameObject_Hashtable(On.iTween.orig_ShakeRotation_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ShakeRotation_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeShakeRotation_GameObject_Hashtable != null)
                foreach (Delegates.ShakeRotation_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeShakeRotation_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeShakeRotation_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterShakeRotation_GameObject_Hashtable != null)
                foreach (Delegates.ShakeRotation_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterShakeRotation_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterShakeRotation_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPunchPosition_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("PunchPosition_GameObject_Vector3_float"))
            {
                HookedList.Add("PunchPosition_GameObject_Vector3_float");
                On.iTween.PunchPosition_GameObject_Vector3_float += PunchPosition_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.PunchPosition_GameObject_Vector3_float_BeforeArgs
            _beforePunchPosition_GameObject_Vector3_float;

        internal static event Delegates.PunchPosition_GameObject_Vector3_float_AfterArgs
            _afterPunchPosition_GameObject_Vector3_float;

        private static void PunchPosition_GameObject_Vector3_float(
            On.iTween.orig_PunchPosition_GameObject_Vector3_float orig, GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_PunchPosition_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforePunchPosition_GameObject_Vector3_float != null)
                foreach (Delegates.PunchPosition_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforePunchPosition_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforePunchPosition_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterPunchPosition_GameObject_Vector3_float != null)
                foreach (Delegates.PunchPosition_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterPunchPosition_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterPunchPosition_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPunchPosition_GameObject_Hashtable()
        {
            if (!HookedList.Contains("PunchPosition_GameObject_Hashtable"))
            {
                HookedList.Add("PunchPosition_GameObject_Hashtable");
                On.iTween.PunchPosition_GameObject_Hashtable += PunchPosition_GameObject_Hashtable;
            }
        }

        internal static event Delegates.PunchPosition_GameObject_Hashtable_BeforeArgs
            _beforePunchPosition_GameObject_Hashtable;

        internal static event Delegates.PunchPosition_GameObject_Hashtable_AfterArgs
            _afterPunchPosition_GameObject_Hashtable;

        private static void PunchPosition_GameObject_Hashtable(On.iTween.orig_PunchPosition_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_PunchPosition_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforePunchPosition_GameObject_Hashtable != null)
                foreach (Delegates.PunchPosition_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforePunchPosition_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforePunchPosition_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterPunchPosition_GameObject_Hashtable != null)
                foreach (Delegates.PunchPosition_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterPunchPosition_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterPunchPosition_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPunchRotation_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("PunchRotation_GameObject_Vector3_float"))
            {
                HookedList.Add("PunchRotation_GameObject_Vector3_float");
                On.iTween.PunchRotation_GameObject_Vector3_float += PunchRotation_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.PunchRotation_GameObject_Vector3_float_BeforeArgs
            _beforePunchRotation_GameObject_Vector3_float;

        internal static event Delegates.PunchRotation_GameObject_Vector3_float_AfterArgs
            _afterPunchRotation_GameObject_Vector3_float;

        private static void PunchRotation_GameObject_Vector3_float(
            On.iTween.orig_PunchRotation_GameObject_Vector3_float orig, GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_PunchRotation_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforePunchRotation_GameObject_Vector3_float != null)
                foreach (Delegates.PunchRotation_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforePunchRotation_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforePunchRotation_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterPunchRotation_GameObject_Vector3_float != null)
                foreach (Delegates.PunchRotation_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterPunchRotation_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterPunchRotation_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPunchRotation_GameObject_Hashtable()
        {
            if (!HookedList.Contains("PunchRotation_GameObject_Hashtable"))
            {
                HookedList.Add("PunchRotation_GameObject_Hashtable");
                On.iTween.PunchRotation_GameObject_Hashtable += PunchRotation_GameObject_Hashtable;
            }
        }

        internal static event Delegates.PunchRotation_GameObject_Hashtable_BeforeArgs
            _beforePunchRotation_GameObject_Hashtable;

        internal static event Delegates.PunchRotation_GameObject_Hashtable_AfterArgs
            _afterPunchRotation_GameObject_Hashtable;

        private static void PunchRotation_GameObject_Hashtable(On.iTween.orig_PunchRotation_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_PunchRotation_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforePunchRotation_GameObject_Hashtable != null)
                foreach (Delegates.PunchRotation_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforePunchRotation_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforePunchRotation_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterPunchRotation_GameObject_Hashtable != null)
                foreach (Delegates.PunchRotation_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterPunchRotation_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterPunchRotation_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPunchScale_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("PunchScale_GameObject_Vector3_float"))
            {
                HookedList.Add("PunchScale_GameObject_Vector3_float");
                On.iTween.PunchScale_GameObject_Vector3_float += PunchScale_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.PunchScale_GameObject_Vector3_float_BeforeArgs
            _beforePunchScale_GameObject_Vector3_float;

        internal static event Delegates.PunchScale_GameObject_Vector3_float_AfterArgs
            _afterPunchScale_GameObject_Vector3_float;

        private static void PunchScale_GameObject_Vector3_float(On.iTween.orig_PunchScale_GameObject_Vector3_float orig,
            GameObject target, Vector3 amount, float time)
        {
            Delegates.Params_PunchScale_GameObject_Vector3_float @params = new()
            {
                target = target, amount = amount, time = time
            };
            if (_beforePunchScale_GameObject_Vector3_float != null)
                foreach (Delegates.PunchScale_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforePunchScale_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforePunchScale_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            amount = @params.amount;
            time = @params.time;
            orig(target, amount, time);
            if (_afterPunchScale_GameObject_Vector3_float != null)
                foreach (Delegates.PunchScale_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterPunchScale_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterPunchScale_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPunchScale_GameObject_Hashtable()
        {
            if (!HookedList.Contains("PunchScale_GameObject_Hashtable"))
            {
                HookedList.Add("PunchScale_GameObject_Hashtable");
                On.iTween.PunchScale_GameObject_Hashtable += PunchScale_GameObject_Hashtable;
            }
        }

        internal static event Delegates.PunchScale_GameObject_Hashtable_BeforeArgs
            _beforePunchScale_GameObject_Hashtable;

        internal static event Delegates.PunchScale_GameObject_Hashtable_AfterArgs _afterPunchScale_GameObject_Hashtable;

        private static void PunchScale_GameObject_Hashtable(On.iTween.orig_PunchScale_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_PunchScale_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforePunchScale_GameObject_Hashtable != null)
                foreach (Delegates.PunchScale_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforePunchScale_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforePunchScale_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterPunchScale_GameObject_Hashtable != null)
                foreach (Delegates.PunchScale_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterPunchScale_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterPunchScale_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateTargets()
        {
            if (!HookedList.Contains("GenerateTargets"))
            {
                HookedList.Add("GenerateTargets");
                On.iTween.GenerateTargets += GenerateTargets;
            }
        }

        internal static event Delegates.GenerateTargets_BeforeArgs _beforeGenerateTargets;
        internal static event Delegates.GenerateTargets_AfterArgs _afterGenerateTargets;

        private static void GenerateTargets(On.iTween.orig_GenerateTargets orig, iTween self)
        {
            Delegates.Params_GenerateTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateTargets != null)
                foreach (Delegates.GenerateTargets_BeforeArgs toInvoke in _beforeGenerateTargets.GetInvocationList())
                    try
                    {
                        _beforeGenerateTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateTargets != null)
                foreach (Delegates.GenerateTargets_AfterArgs toInvoke in _afterGenerateTargets.GetInvocationList())
                    try
                    {
                        _afterGenerateTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateRectTargets()
        {
            if (!HookedList.Contains("GenerateRectTargets"))
            {
                HookedList.Add("GenerateRectTargets");
                On.iTween.GenerateRectTargets += GenerateRectTargets;
            }
        }

        internal static event Delegates.GenerateRectTargets_BeforeArgs _beforeGenerateRectTargets;
        internal static event Delegates.GenerateRectTargets_AfterArgs _afterGenerateRectTargets;

        private static void GenerateRectTargets(On.iTween.orig_GenerateRectTargets orig, iTween self)
        {
            Delegates.Params_GenerateRectTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateRectTargets != null)
                foreach (Delegates.GenerateRectTargets_BeforeArgs toInvoke in _beforeGenerateRectTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateRectTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateRectTargets != null)
                foreach (Delegates.GenerateRectTargets_AfterArgs toInvoke in
                         _afterGenerateRectTargets.GetInvocationList())
                    try
                    {
                        _afterGenerateRectTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateColorTargets()
        {
            if (!HookedList.Contains("GenerateColorTargets"))
            {
                HookedList.Add("GenerateColorTargets");
                On.iTween.GenerateColorTargets += GenerateColorTargets;
            }
        }

        internal static event Delegates.GenerateColorTargets_BeforeArgs _beforeGenerateColorTargets;
        internal static event Delegates.GenerateColorTargets_AfterArgs _afterGenerateColorTargets;

        private static void GenerateColorTargets(On.iTween.orig_GenerateColorTargets orig, iTween self)
        {
            Delegates.Params_GenerateColorTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateColorTargets != null)
                foreach (Delegates.GenerateColorTargets_BeforeArgs toInvoke in _beforeGenerateColorTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateColorTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateColorTargets != null)
                foreach (Delegates.GenerateColorTargets_AfterArgs toInvoke in _afterGenerateColorTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateColorTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateVector3Targets()
        {
            if (!HookedList.Contains("GenerateVector3Targets"))
            {
                HookedList.Add("GenerateVector3Targets");
                On.iTween.GenerateVector3Targets += GenerateVector3Targets;
            }
        }

        internal static event Delegates.GenerateVector3Targets_BeforeArgs _beforeGenerateVector3Targets;
        internal static event Delegates.GenerateVector3Targets_AfterArgs _afterGenerateVector3Targets;

        private static void GenerateVector3Targets(On.iTween.orig_GenerateVector3Targets orig, iTween self)
        {
            Delegates.Params_GenerateVector3Targets @params = new()
            {
                self = self
            };
            if (_beforeGenerateVector3Targets != null)
                foreach (Delegates.GenerateVector3Targets_BeforeArgs toInvoke in _beforeGenerateVector3Targets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateVector3Targets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateVector3Targets != null)
                foreach (Delegates.GenerateVector3Targets_AfterArgs toInvoke in _afterGenerateVector3Targets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateVector3Targets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateVector2Targets()
        {
            if (!HookedList.Contains("GenerateVector2Targets"))
            {
                HookedList.Add("GenerateVector2Targets");
                On.iTween.GenerateVector2Targets += GenerateVector2Targets;
            }
        }

        internal static event Delegates.GenerateVector2Targets_BeforeArgs _beforeGenerateVector2Targets;
        internal static event Delegates.GenerateVector2Targets_AfterArgs _afterGenerateVector2Targets;

        private static void GenerateVector2Targets(On.iTween.orig_GenerateVector2Targets orig, iTween self)
        {
            Delegates.Params_GenerateVector2Targets @params = new()
            {
                self = self
            };
            if (_beforeGenerateVector2Targets != null)
                foreach (Delegates.GenerateVector2Targets_BeforeArgs toInvoke in _beforeGenerateVector2Targets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateVector2Targets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateVector2Targets != null)
                foreach (Delegates.GenerateVector2Targets_AfterArgs toInvoke in _afterGenerateVector2Targets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateVector2Targets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateFloatTargets()
        {
            if (!HookedList.Contains("GenerateFloatTargets"))
            {
                HookedList.Add("GenerateFloatTargets");
                On.iTween.GenerateFloatTargets += GenerateFloatTargets;
            }
        }

        internal static event Delegates.GenerateFloatTargets_BeforeArgs _beforeGenerateFloatTargets;
        internal static event Delegates.GenerateFloatTargets_AfterArgs _afterGenerateFloatTargets;

        private static void GenerateFloatTargets(On.iTween.orig_GenerateFloatTargets orig, iTween self)
        {
            Delegates.Params_GenerateFloatTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateFloatTargets != null)
                foreach (Delegates.GenerateFloatTargets_BeforeArgs toInvoke in _beforeGenerateFloatTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateFloatTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateFloatTargets != null)
                foreach (Delegates.GenerateFloatTargets_AfterArgs toInvoke in _afterGenerateFloatTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateFloatTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateColorToTargets()
        {
            if (!HookedList.Contains("GenerateColorToTargets"))
            {
                HookedList.Add("GenerateColorToTargets");
                On.iTween.GenerateColorToTargets += GenerateColorToTargets;
            }
        }

        internal static event Delegates.GenerateColorToTargets_BeforeArgs _beforeGenerateColorToTargets;
        internal static event Delegates.GenerateColorToTargets_AfterArgs _afterGenerateColorToTargets;

        private static void GenerateColorToTargets(On.iTween.orig_GenerateColorToTargets orig, iTween self)
        {
            Delegates.Params_GenerateColorToTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateColorToTargets != null)
                foreach (Delegates.GenerateColorToTargets_BeforeArgs toInvoke in _beforeGenerateColorToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateColorToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateColorToTargets != null)
                foreach (Delegates.GenerateColorToTargets_AfterArgs toInvoke in _afterGenerateColorToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateColorToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateAudioToTargets()
        {
            if (!HookedList.Contains("GenerateAudioToTargets"))
            {
                HookedList.Add("GenerateAudioToTargets");
                On.iTween.GenerateAudioToTargets += GenerateAudioToTargets;
            }
        }

        internal static event Delegates.GenerateAudioToTargets_BeforeArgs _beforeGenerateAudioToTargets;
        internal static event Delegates.GenerateAudioToTargets_AfterArgs _afterGenerateAudioToTargets;

        private static void GenerateAudioToTargets(On.iTween.orig_GenerateAudioToTargets orig, iTween self)
        {
            Delegates.Params_GenerateAudioToTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateAudioToTargets != null)
                foreach (Delegates.GenerateAudioToTargets_BeforeArgs toInvoke in _beforeGenerateAudioToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateAudioToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateAudioToTargets != null)
                foreach (Delegates.GenerateAudioToTargets_AfterArgs toInvoke in _afterGenerateAudioToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateAudioToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateStabTargets()
        {
            if (!HookedList.Contains("GenerateStabTargets"))
            {
                HookedList.Add("GenerateStabTargets");
                On.iTween.GenerateStabTargets += GenerateStabTargets;
            }
        }

        internal static event Delegates.GenerateStabTargets_BeforeArgs _beforeGenerateStabTargets;
        internal static event Delegates.GenerateStabTargets_AfterArgs _afterGenerateStabTargets;

        private static void GenerateStabTargets(On.iTween.orig_GenerateStabTargets orig, iTween self)
        {
            Delegates.Params_GenerateStabTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateStabTargets != null)
                foreach (Delegates.GenerateStabTargets_BeforeArgs toInvoke in _beforeGenerateStabTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateStabTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateStabTargets != null)
                foreach (Delegates.GenerateStabTargets_AfterArgs toInvoke in
                         _afterGenerateStabTargets.GetInvocationList())
                    try
                    {
                        _afterGenerateStabTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateLookToTargets()
        {
            if (!HookedList.Contains("GenerateLookToTargets"))
            {
                HookedList.Add("GenerateLookToTargets");
                On.iTween.GenerateLookToTargets += GenerateLookToTargets;
            }
        }

        internal static event Delegates.GenerateLookToTargets_BeforeArgs _beforeGenerateLookToTargets;
        internal static event Delegates.GenerateLookToTargets_AfterArgs _afterGenerateLookToTargets;

        private static void GenerateLookToTargets(On.iTween.orig_GenerateLookToTargets orig, iTween self)
        {
            Delegates.Params_GenerateLookToTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateLookToTargets != null)
                foreach (Delegates.GenerateLookToTargets_BeforeArgs toInvoke in _beforeGenerateLookToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateLookToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateLookToTargets != null)
                foreach (Delegates.GenerateLookToTargets_AfterArgs toInvoke in _afterGenerateLookToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateLookToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateMoveToPathTargets()
        {
            if (!HookedList.Contains("GenerateMoveToPathTargets"))
            {
                HookedList.Add("GenerateMoveToPathTargets");
                On.iTween.GenerateMoveToPathTargets += GenerateMoveToPathTargets;
            }
        }

        internal static event Delegates.GenerateMoveToPathTargets_BeforeArgs _beforeGenerateMoveToPathTargets;
        internal static event Delegates.GenerateMoveToPathTargets_AfterArgs _afterGenerateMoveToPathTargets;

        private static void GenerateMoveToPathTargets(On.iTween.orig_GenerateMoveToPathTargets orig, iTween self)
        {
            Delegates.Params_GenerateMoveToPathTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateMoveToPathTargets != null)
                foreach (Delegates.GenerateMoveToPathTargets_BeforeArgs toInvoke in _beforeGenerateMoveToPathTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateMoveToPathTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateMoveToPathTargets != null)
                foreach (Delegates.GenerateMoveToPathTargets_AfterArgs toInvoke in _afterGenerateMoveToPathTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateMoveToPathTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateMoveToTargets()
        {
            if (!HookedList.Contains("GenerateMoveToTargets"))
            {
                HookedList.Add("GenerateMoveToTargets");
                On.iTween.GenerateMoveToTargets += GenerateMoveToTargets;
            }
        }

        internal static event Delegates.GenerateMoveToTargets_BeforeArgs _beforeGenerateMoveToTargets;
        internal static event Delegates.GenerateMoveToTargets_AfterArgs _afterGenerateMoveToTargets;

        private static void GenerateMoveToTargets(On.iTween.orig_GenerateMoveToTargets orig, iTween self)
        {
            Delegates.Params_GenerateMoveToTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateMoveToTargets != null)
                foreach (Delegates.GenerateMoveToTargets_BeforeArgs toInvoke in _beforeGenerateMoveToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateMoveToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateMoveToTargets != null)
                foreach (Delegates.GenerateMoveToTargets_AfterArgs toInvoke in _afterGenerateMoveToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateMoveToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateMoveByTargets()
        {
            if (!HookedList.Contains("GenerateMoveByTargets"))
            {
                HookedList.Add("GenerateMoveByTargets");
                On.iTween.GenerateMoveByTargets += GenerateMoveByTargets;
            }
        }

        internal static event Delegates.GenerateMoveByTargets_BeforeArgs _beforeGenerateMoveByTargets;
        internal static event Delegates.GenerateMoveByTargets_AfterArgs _afterGenerateMoveByTargets;

        private static void GenerateMoveByTargets(On.iTween.orig_GenerateMoveByTargets orig, iTween self)
        {
            Delegates.Params_GenerateMoveByTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateMoveByTargets != null)
                foreach (Delegates.GenerateMoveByTargets_BeforeArgs toInvoke in _beforeGenerateMoveByTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateMoveByTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateMoveByTargets != null)
                foreach (Delegates.GenerateMoveByTargets_AfterArgs toInvoke in _afterGenerateMoveByTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateMoveByTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateScaleToTargets()
        {
            if (!HookedList.Contains("GenerateScaleToTargets"))
            {
                HookedList.Add("GenerateScaleToTargets");
                On.iTween.GenerateScaleToTargets += GenerateScaleToTargets;
            }
        }

        internal static event Delegates.GenerateScaleToTargets_BeforeArgs _beforeGenerateScaleToTargets;
        internal static event Delegates.GenerateScaleToTargets_AfterArgs _afterGenerateScaleToTargets;

        private static void GenerateScaleToTargets(On.iTween.orig_GenerateScaleToTargets orig, iTween self)
        {
            Delegates.Params_GenerateScaleToTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateScaleToTargets != null)
                foreach (Delegates.GenerateScaleToTargets_BeforeArgs toInvoke in _beforeGenerateScaleToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateScaleToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateScaleToTargets != null)
                foreach (Delegates.GenerateScaleToTargets_AfterArgs toInvoke in _afterGenerateScaleToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateScaleToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateScaleByTargets()
        {
            if (!HookedList.Contains("GenerateScaleByTargets"))
            {
                HookedList.Add("GenerateScaleByTargets");
                On.iTween.GenerateScaleByTargets += GenerateScaleByTargets;
            }
        }

        internal static event Delegates.GenerateScaleByTargets_BeforeArgs _beforeGenerateScaleByTargets;
        internal static event Delegates.GenerateScaleByTargets_AfterArgs _afterGenerateScaleByTargets;

        private static void GenerateScaleByTargets(On.iTween.orig_GenerateScaleByTargets orig, iTween self)
        {
            Delegates.Params_GenerateScaleByTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateScaleByTargets != null)
                foreach (Delegates.GenerateScaleByTargets_BeforeArgs toInvoke in _beforeGenerateScaleByTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateScaleByTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateScaleByTargets != null)
                foreach (Delegates.GenerateScaleByTargets_AfterArgs toInvoke in _afterGenerateScaleByTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateScaleByTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateScaleAddTargets()
        {
            if (!HookedList.Contains("GenerateScaleAddTargets"))
            {
                HookedList.Add("GenerateScaleAddTargets");
                On.iTween.GenerateScaleAddTargets += GenerateScaleAddTargets;
            }
        }

        internal static event Delegates.GenerateScaleAddTargets_BeforeArgs _beforeGenerateScaleAddTargets;
        internal static event Delegates.GenerateScaleAddTargets_AfterArgs _afterGenerateScaleAddTargets;

        private static void GenerateScaleAddTargets(On.iTween.orig_GenerateScaleAddTargets orig, iTween self)
        {
            Delegates.Params_GenerateScaleAddTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateScaleAddTargets != null)
                foreach (Delegates.GenerateScaleAddTargets_BeforeArgs toInvoke in _beforeGenerateScaleAddTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateScaleAddTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateScaleAddTargets != null)
                foreach (Delegates.GenerateScaleAddTargets_AfterArgs toInvoke in _afterGenerateScaleAddTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateScaleAddTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateRotateToTargets()
        {
            if (!HookedList.Contains("GenerateRotateToTargets"))
            {
                HookedList.Add("GenerateRotateToTargets");
                On.iTween.GenerateRotateToTargets += GenerateRotateToTargets;
            }
        }

        internal static event Delegates.GenerateRotateToTargets_BeforeArgs _beforeGenerateRotateToTargets;
        internal static event Delegates.GenerateRotateToTargets_AfterArgs _afterGenerateRotateToTargets;

        private static void GenerateRotateToTargets(On.iTween.orig_GenerateRotateToTargets orig, iTween self)
        {
            Delegates.Params_GenerateRotateToTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateRotateToTargets != null)
                foreach (Delegates.GenerateRotateToTargets_BeforeArgs toInvoke in _beforeGenerateRotateToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateRotateToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateRotateToTargets != null)
                foreach (Delegates.GenerateRotateToTargets_AfterArgs toInvoke in _afterGenerateRotateToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateRotateToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateRotateAddTargets()
        {
            if (!HookedList.Contains("GenerateRotateAddTargets"))
            {
                HookedList.Add("GenerateRotateAddTargets");
                On.iTween.GenerateRotateAddTargets += GenerateRotateAddTargets;
            }
        }

        internal static event Delegates.GenerateRotateAddTargets_BeforeArgs _beforeGenerateRotateAddTargets;
        internal static event Delegates.GenerateRotateAddTargets_AfterArgs _afterGenerateRotateAddTargets;

        private static void GenerateRotateAddTargets(On.iTween.orig_GenerateRotateAddTargets orig, iTween self)
        {
            Delegates.Params_GenerateRotateAddTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateRotateAddTargets != null)
                foreach (Delegates.GenerateRotateAddTargets_BeforeArgs toInvoke in _beforeGenerateRotateAddTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateRotateAddTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateRotateAddTargets != null)
                foreach (Delegates.GenerateRotateAddTargets_AfterArgs toInvoke in _afterGenerateRotateAddTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateRotateAddTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateRotateByTargets()
        {
            if (!HookedList.Contains("GenerateRotateByTargets"))
            {
                HookedList.Add("GenerateRotateByTargets");
                On.iTween.GenerateRotateByTargets += GenerateRotateByTargets;
            }
        }

        internal static event Delegates.GenerateRotateByTargets_BeforeArgs _beforeGenerateRotateByTargets;
        internal static event Delegates.GenerateRotateByTargets_AfterArgs _afterGenerateRotateByTargets;

        private static void GenerateRotateByTargets(On.iTween.orig_GenerateRotateByTargets orig, iTween self)
        {
            Delegates.Params_GenerateRotateByTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateRotateByTargets != null)
                foreach (Delegates.GenerateRotateByTargets_BeforeArgs toInvoke in _beforeGenerateRotateByTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateRotateByTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateRotateByTargets != null)
                foreach (Delegates.GenerateRotateByTargets_AfterArgs toInvoke in _afterGenerateRotateByTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateRotateByTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateShakePositionTargets()
        {
            if (!HookedList.Contains("GenerateShakePositionTargets"))
            {
                HookedList.Add("GenerateShakePositionTargets");
                On.iTween.GenerateShakePositionTargets += GenerateShakePositionTargets;
            }
        }

        internal static event Delegates.GenerateShakePositionTargets_BeforeArgs _beforeGenerateShakePositionTargets;
        internal static event Delegates.GenerateShakePositionTargets_AfterArgs _afterGenerateShakePositionTargets;

        private static void GenerateShakePositionTargets(On.iTween.orig_GenerateShakePositionTargets orig, iTween self)
        {
            Delegates.Params_GenerateShakePositionTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateShakePositionTargets != null)
                foreach (Delegates.GenerateShakePositionTargets_BeforeArgs toInvoke in
                         _beforeGenerateShakePositionTargets.GetInvocationList())
                    try
                    {
                        _beforeGenerateShakePositionTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateShakePositionTargets != null)
                foreach (Delegates.GenerateShakePositionTargets_AfterArgs toInvoke in _afterGenerateShakePositionTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateShakePositionTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateShakeScaleTargets()
        {
            if (!HookedList.Contains("GenerateShakeScaleTargets"))
            {
                HookedList.Add("GenerateShakeScaleTargets");
                On.iTween.GenerateShakeScaleTargets += GenerateShakeScaleTargets;
            }
        }

        internal static event Delegates.GenerateShakeScaleTargets_BeforeArgs _beforeGenerateShakeScaleTargets;
        internal static event Delegates.GenerateShakeScaleTargets_AfterArgs _afterGenerateShakeScaleTargets;

        private static void GenerateShakeScaleTargets(On.iTween.orig_GenerateShakeScaleTargets orig, iTween self)
        {
            Delegates.Params_GenerateShakeScaleTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateShakeScaleTargets != null)
                foreach (Delegates.GenerateShakeScaleTargets_BeforeArgs toInvoke in _beforeGenerateShakeScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGenerateShakeScaleTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateShakeScaleTargets != null)
                foreach (Delegates.GenerateShakeScaleTargets_AfterArgs toInvoke in _afterGenerateShakeScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateShakeScaleTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGenerateShakeRotationTargets()
        {
            if (!HookedList.Contains("GenerateShakeRotationTargets"))
            {
                HookedList.Add("GenerateShakeRotationTargets");
                On.iTween.GenerateShakeRotationTargets += GenerateShakeRotationTargets;
            }
        }

        internal static event Delegates.GenerateShakeRotationTargets_BeforeArgs _beforeGenerateShakeRotationTargets;
        internal static event Delegates.GenerateShakeRotationTargets_AfterArgs _afterGenerateShakeRotationTargets;

        private static void GenerateShakeRotationTargets(On.iTween.orig_GenerateShakeRotationTargets orig, iTween self)
        {
            Delegates.Params_GenerateShakeRotationTargets @params = new()
            {
                self = self
            };
            if (_beforeGenerateShakeRotationTargets != null)
                foreach (Delegates.GenerateShakeRotationTargets_BeforeArgs toInvoke in
                         _beforeGenerateShakeRotationTargets.GetInvocationList())
                    try
                    {
                        _beforeGenerateShakeRotationTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGenerateShakeRotationTargets != null)
                foreach (Delegates.GenerateShakeRotationTargets_AfterArgs toInvoke in _afterGenerateShakeRotationTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGenerateShakeRotationTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGeneratePunchPositionTargets()
        {
            if (!HookedList.Contains("GeneratePunchPositionTargets"))
            {
                HookedList.Add("GeneratePunchPositionTargets");
                On.iTween.GeneratePunchPositionTargets += GeneratePunchPositionTargets;
            }
        }

        internal static event Delegates.GeneratePunchPositionTargets_BeforeArgs _beforeGeneratePunchPositionTargets;
        internal static event Delegates.GeneratePunchPositionTargets_AfterArgs _afterGeneratePunchPositionTargets;

        private static void GeneratePunchPositionTargets(On.iTween.orig_GeneratePunchPositionTargets orig, iTween self)
        {
            Delegates.Params_GeneratePunchPositionTargets @params = new()
            {
                self = self
            };
            if (_beforeGeneratePunchPositionTargets != null)
                foreach (Delegates.GeneratePunchPositionTargets_BeforeArgs toInvoke in
                         _beforeGeneratePunchPositionTargets.GetInvocationList())
                    try
                    {
                        _beforeGeneratePunchPositionTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGeneratePunchPositionTargets != null)
                foreach (Delegates.GeneratePunchPositionTargets_AfterArgs toInvoke in _afterGeneratePunchPositionTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGeneratePunchPositionTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGeneratePunchRotationTargets()
        {
            if (!HookedList.Contains("GeneratePunchRotationTargets"))
            {
                HookedList.Add("GeneratePunchRotationTargets");
                On.iTween.GeneratePunchRotationTargets += GeneratePunchRotationTargets;
            }
        }

        internal static event Delegates.GeneratePunchRotationTargets_BeforeArgs _beforeGeneratePunchRotationTargets;
        internal static event Delegates.GeneratePunchRotationTargets_AfterArgs _afterGeneratePunchRotationTargets;

        private static void GeneratePunchRotationTargets(On.iTween.orig_GeneratePunchRotationTargets orig, iTween self)
        {
            Delegates.Params_GeneratePunchRotationTargets @params = new()
            {
                self = self
            };
            if (_beforeGeneratePunchRotationTargets != null)
                foreach (Delegates.GeneratePunchRotationTargets_BeforeArgs toInvoke in
                         _beforeGeneratePunchRotationTargets.GetInvocationList())
                    try
                    {
                        _beforeGeneratePunchRotationTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGeneratePunchRotationTargets != null)
                foreach (Delegates.GeneratePunchRotationTargets_AfterArgs toInvoke in _afterGeneratePunchRotationTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGeneratePunchRotationTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGeneratePunchScaleTargets()
        {
            if (!HookedList.Contains("GeneratePunchScaleTargets"))
            {
                HookedList.Add("GeneratePunchScaleTargets");
                On.iTween.GeneratePunchScaleTargets += GeneratePunchScaleTargets;
            }
        }

        internal static event Delegates.GeneratePunchScaleTargets_BeforeArgs _beforeGeneratePunchScaleTargets;
        internal static event Delegates.GeneratePunchScaleTargets_AfterArgs _afterGeneratePunchScaleTargets;

        private static void GeneratePunchScaleTargets(On.iTween.orig_GeneratePunchScaleTargets orig, iTween self)
        {
            Delegates.Params_GeneratePunchScaleTargets @params = new()
            {
                self = self
            };
            if (_beforeGeneratePunchScaleTargets != null)
                foreach (Delegates.GeneratePunchScaleTargets_BeforeArgs toInvoke in _beforeGeneratePunchScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeGeneratePunchScaleTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGeneratePunchScaleTargets != null)
                foreach (Delegates.GeneratePunchScaleTargets_AfterArgs toInvoke in _afterGeneratePunchScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _afterGeneratePunchScaleTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyRectTargets()
        {
            if (!HookedList.Contains("ApplyRectTargets"))
            {
                HookedList.Add("ApplyRectTargets");
                On.iTween.ApplyRectTargets += ApplyRectTargets;
            }
        }

        internal static event Delegates.ApplyRectTargets_BeforeArgs _beforeApplyRectTargets;
        internal static event Delegates.ApplyRectTargets_AfterArgs _afterApplyRectTargets;

        private static void ApplyRectTargets(On.iTween.orig_ApplyRectTargets orig, iTween self)
        {
            Delegates.Params_ApplyRectTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyRectTargets != null)
                foreach (Delegates.ApplyRectTargets_BeforeArgs toInvoke in _beforeApplyRectTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyRectTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyRectTargets != null)
                foreach (Delegates.ApplyRectTargets_AfterArgs toInvoke in _afterApplyRectTargets.GetInvocationList())
                    try
                    {
                        _afterApplyRectTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyColorTargets()
        {
            if (!HookedList.Contains("ApplyColorTargets"))
            {
                HookedList.Add("ApplyColorTargets");
                On.iTween.ApplyColorTargets += ApplyColorTargets;
            }
        }

        internal static event Delegates.ApplyColorTargets_BeforeArgs _beforeApplyColorTargets;
        internal static event Delegates.ApplyColorTargets_AfterArgs _afterApplyColorTargets;

        private static void ApplyColorTargets(On.iTween.orig_ApplyColorTargets orig, iTween self)
        {
            Delegates.Params_ApplyColorTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyColorTargets != null)
                foreach (Delegates.ApplyColorTargets_BeforeArgs toInvoke in
                         _beforeApplyColorTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyColorTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyColorTargets != null)
                foreach (Delegates.ApplyColorTargets_AfterArgs toInvoke in _afterApplyColorTargets.GetInvocationList())
                    try
                    {
                        _afterApplyColorTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyVector3Targets()
        {
            if (!HookedList.Contains("ApplyVector3Targets"))
            {
                HookedList.Add("ApplyVector3Targets");
                On.iTween.ApplyVector3Targets += ApplyVector3Targets;
            }
        }

        internal static event Delegates.ApplyVector3Targets_BeforeArgs _beforeApplyVector3Targets;
        internal static event Delegates.ApplyVector3Targets_AfterArgs _afterApplyVector3Targets;

        private static void ApplyVector3Targets(On.iTween.orig_ApplyVector3Targets orig, iTween self)
        {
            Delegates.Params_ApplyVector3Targets @params = new()
            {
                self = self
            };
            if (_beforeApplyVector3Targets != null)
                foreach (Delegates.ApplyVector3Targets_BeforeArgs toInvoke in _beforeApplyVector3Targets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyVector3Targets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyVector3Targets != null)
                foreach (Delegates.ApplyVector3Targets_AfterArgs toInvoke in
                         _afterApplyVector3Targets.GetInvocationList())
                    try
                    {
                        _afterApplyVector3Targets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyVector2Targets()
        {
            if (!HookedList.Contains("ApplyVector2Targets"))
            {
                HookedList.Add("ApplyVector2Targets");
                On.iTween.ApplyVector2Targets += ApplyVector2Targets;
            }
        }

        internal static event Delegates.ApplyVector2Targets_BeforeArgs _beforeApplyVector2Targets;
        internal static event Delegates.ApplyVector2Targets_AfterArgs _afterApplyVector2Targets;

        private static void ApplyVector2Targets(On.iTween.orig_ApplyVector2Targets orig, iTween self)
        {
            Delegates.Params_ApplyVector2Targets @params = new()
            {
                self = self
            };
            if (_beforeApplyVector2Targets != null)
                foreach (Delegates.ApplyVector2Targets_BeforeArgs toInvoke in _beforeApplyVector2Targets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyVector2Targets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyVector2Targets != null)
                foreach (Delegates.ApplyVector2Targets_AfterArgs toInvoke in
                         _afterApplyVector2Targets.GetInvocationList())
                    try
                    {
                        _afterApplyVector2Targets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyFloatTargets()
        {
            if (!HookedList.Contains("ApplyFloatTargets"))
            {
                HookedList.Add("ApplyFloatTargets");
                On.iTween.ApplyFloatTargets += ApplyFloatTargets;
            }
        }

        internal static event Delegates.ApplyFloatTargets_BeforeArgs _beforeApplyFloatTargets;
        internal static event Delegates.ApplyFloatTargets_AfterArgs _afterApplyFloatTargets;

        private static void ApplyFloatTargets(On.iTween.orig_ApplyFloatTargets orig, iTween self)
        {
            Delegates.Params_ApplyFloatTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyFloatTargets != null)
                foreach (Delegates.ApplyFloatTargets_BeforeArgs toInvoke in
                         _beforeApplyFloatTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyFloatTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyFloatTargets != null)
                foreach (Delegates.ApplyFloatTargets_AfterArgs toInvoke in _afterApplyFloatTargets.GetInvocationList())
                    try
                    {
                        _afterApplyFloatTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyColorToTargets()
        {
            if (!HookedList.Contains("ApplyColorToTargets"))
            {
                HookedList.Add("ApplyColorToTargets");
                On.iTween.ApplyColorToTargets += ApplyColorToTargets;
            }
        }

        internal static event Delegates.ApplyColorToTargets_BeforeArgs _beforeApplyColorToTargets;
        internal static event Delegates.ApplyColorToTargets_AfterArgs _afterApplyColorToTargets;

        private static void ApplyColorToTargets(On.iTween.orig_ApplyColorToTargets orig, iTween self)
        {
            Delegates.Params_ApplyColorToTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyColorToTargets != null)
                foreach (Delegates.ApplyColorToTargets_BeforeArgs toInvoke in _beforeApplyColorToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyColorToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyColorToTargets != null)
                foreach (Delegates.ApplyColorToTargets_AfterArgs toInvoke in
                         _afterApplyColorToTargets.GetInvocationList())
                    try
                    {
                        _afterApplyColorToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyAudioToTargets()
        {
            if (!HookedList.Contains("ApplyAudioToTargets"))
            {
                HookedList.Add("ApplyAudioToTargets");
                On.iTween.ApplyAudioToTargets += ApplyAudioToTargets;
            }
        }

        internal static event Delegates.ApplyAudioToTargets_BeforeArgs _beforeApplyAudioToTargets;
        internal static event Delegates.ApplyAudioToTargets_AfterArgs _afterApplyAudioToTargets;

        private static void ApplyAudioToTargets(On.iTween.orig_ApplyAudioToTargets orig, iTween self)
        {
            Delegates.Params_ApplyAudioToTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyAudioToTargets != null)
                foreach (Delegates.ApplyAudioToTargets_BeforeArgs toInvoke in _beforeApplyAudioToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyAudioToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyAudioToTargets != null)
                foreach (Delegates.ApplyAudioToTargets_AfterArgs toInvoke in
                         _afterApplyAudioToTargets.GetInvocationList())
                    try
                    {
                        _afterApplyAudioToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyStabTargets()
        {
            if (!HookedList.Contains("ApplyStabTargets"))
            {
                HookedList.Add("ApplyStabTargets");
                On.iTween.ApplyStabTargets += ApplyStabTargets;
            }
        }

        internal static event Delegates.ApplyStabTargets_BeforeArgs _beforeApplyStabTargets;
        internal static event Delegates.ApplyStabTargets_AfterArgs _afterApplyStabTargets;

        private static void ApplyStabTargets(On.iTween.orig_ApplyStabTargets orig, iTween self)
        {
            Delegates.Params_ApplyStabTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyStabTargets != null)
                foreach (Delegates.ApplyStabTargets_BeforeArgs toInvoke in _beforeApplyStabTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyStabTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyStabTargets != null)
                foreach (Delegates.ApplyStabTargets_AfterArgs toInvoke in _afterApplyStabTargets.GetInvocationList())
                    try
                    {
                        _afterApplyStabTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyMoveToPathTargets()
        {
            if (!HookedList.Contains("ApplyMoveToPathTargets"))
            {
                HookedList.Add("ApplyMoveToPathTargets");
                On.iTween.ApplyMoveToPathTargets += ApplyMoveToPathTargets;
            }
        }

        internal static event Delegates.ApplyMoveToPathTargets_BeforeArgs _beforeApplyMoveToPathTargets;
        internal static event Delegates.ApplyMoveToPathTargets_AfterArgs _afterApplyMoveToPathTargets;

        private static void ApplyMoveToPathTargets(On.iTween.orig_ApplyMoveToPathTargets orig, iTween self)
        {
            Delegates.Params_ApplyMoveToPathTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyMoveToPathTargets != null)
                foreach (Delegates.ApplyMoveToPathTargets_BeforeArgs toInvoke in _beforeApplyMoveToPathTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyMoveToPathTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyMoveToPathTargets != null)
                foreach (Delegates.ApplyMoveToPathTargets_AfterArgs toInvoke in _afterApplyMoveToPathTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyMoveToPathTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyMoveToTargets()
        {
            if (!HookedList.Contains("ApplyMoveToTargets"))
            {
                HookedList.Add("ApplyMoveToTargets");
                On.iTween.ApplyMoveToTargets += ApplyMoveToTargets;
            }
        }

        internal static event Delegates.ApplyMoveToTargets_BeforeArgs _beforeApplyMoveToTargets;
        internal static event Delegates.ApplyMoveToTargets_AfterArgs _afterApplyMoveToTargets;

        private static void ApplyMoveToTargets(On.iTween.orig_ApplyMoveToTargets orig, iTween self)
        {
            Delegates.Params_ApplyMoveToTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyMoveToTargets != null)
                foreach (Delegates.ApplyMoveToTargets_BeforeArgs toInvoke in
                         _beforeApplyMoveToTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyMoveToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyMoveToTargets != null)
                foreach (Delegates.ApplyMoveToTargets_AfterArgs toInvoke in
                         _afterApplyMoveToTargets.GetInvocationList())
                    try
                    {
                        _afterApplyMoveToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyMoveByTargets()
        {
            if (!HookedList.Contains("ApplyMoveByTargets"))
            {
                HookedList.Add("ApplyMoveByTargets");
                On.iTween.ApplyMoveByTargets += ApplyMoveByTargets;
            }
        }

        internal static event Delegates.ApplyMoveByTargets_BeforeArgs _beforeApplyMoveByTargets;
        internal static event Delegates.ApplyMoveByTargets_AfterArgs _afterApplyMoveByTargets;

        private static void ApplyMoveByTargets(On.iTween.orig_ApplyMoveByTargets orig, iTween self)
        {
            Delegates.Params_ApplyMoveByTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyMoveByTargets != null)
                foreach (Delegates.ApplyMoveByTargets_BeforeArgs toInvoke in
                         _beforeApplyMoveByTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyMoveByTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyMoveByTargets != null)
                foreach (Delegates.ApplyMoveByTargets_AfterArgs toInvoke in
                         _afterApplyMoveByTargets.GetInvocationList())
                    try
                    {
                        _afterApplyMoveByTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyScaleToTargets()
        {
            if (!HookedList.Contains("ApplyScaleToTargets"))
            {
                HookedList.Add("ApplyScaleToTargets");
                On.iTween.ApplyScaleToTargets += ApplyScaleToTargets;
            }
        }

        internal static event Delegates.ApplyScaleToTargets_BeforeArgs _beforeApplyScaleToTargets;
        internal static event Delegates.ApplyScaleToTargets_AfterArgs _afterApplyScaleToTargets;

        private static void ApplyScaleToTargets(On.iTween.orig_ApplyScaleToTargets orig, iTween self)
        {
            Delegates.Params_ApplyScaleToTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyScaleToTargets != null)
                foreach (Delegates.ApplyScaleToTargets_BeforeArgs toInvoke in _beforeApplyScaleToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyScaleToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyScaleToTargets != null)
                foreach (Delegates.ApplyScaleToTargets_AfterArgs toInvoke in
                         _afterApplyScaleToTargets.GetInvocationList())
                    try
                    {
                        _afterApplyScaleToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyLookToTargets()
        {
            if (!HookedList.Contains("ApplyLookToTargets"))
            {
                HookedList.Add("ApplyLookToTargets");
                On.iTween.ApplyLookToTargets += ApplyLookToTargets;
            }
        }

        internal static event Delegates.ApplyLookToTargets_BeforeArgs _beforeApplyLookToTargets;
        internal static event Delegates.ApplyLookToTargets_AfterArgs _afterApplyLookToTargets;

        private static void ApplyLookToTargets(On.iTween.orig_ApplyLookToTargets orig, iTween self)
        {
            Delegates.Params_ApplyLookToTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyLookToTargets != null)
                foreach (Delegates.ApplyLookToTargets_BeforeArgs toInvoke in
                         _beforeApplyLookToTargets.GetInvocationList())
                    try
                    {
                        _beforeApplyLookToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyLookToTargets != null)
                foreach (Delegates.ApplyLookToTargets_AfterArgs toInvoke in
                         _afterApplyLookToTargets.GetInvocationList())
                    try
                    {
                        _afterApplyLookToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyRotateToTargets()
        {
            if (!HookedList.Contains("ApplyRotateToTargets"))
            {
                HookedList.Add("ApplyRotateToTargets");
                On.iTween.ApplyRotateToTargets += ApplyRotateToTargets;
            }
        }

        internal static event Delegates.ApplyRotateToTargets_BeforeArgs _beforeApplyRotateToTargets;
        internal static event Delegates.ApplyRotateToTargets_AfterArgs _afterApplyRotateToTargets;

        private static void ApplyRotateToTargets(On.iTween.orig_ApplyRotateToTargets orig, iTween self)
        {
            Delegates.Params_ApplyRotateToTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyRotateToTargets != null)
                foreach (Delegates.ApplyRotateToTargets_BeforeArgs toInvoke in _beforeApplyRotateToTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyRotateToTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyRotateToTargets != null)
                foreach (Delegates.ApplyRotateToTargets_AfterArgs toInvoke in _afterApplyRotateToTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyRotateToTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyRotateAddTargets()
        {
            if (!HookedList.Contains("ApplyRotateAddTargets"))
            {
                HookedList.Add("ApplyRotateAddTargets");
                On.iTween.ApplyRotateAddTargets += ApplyRotateAddTargets;
            }
        }

        internal static event Delegates.ApplyRotateAddTargets_BeforeArgs _beforeApplyRotateAddTargets;
        internal static event Delegates.ApplyRotateAddTargets_AfterArgs _afterApplyRotateAddTargets;

        private static void ApplyRotateAddTargets(On.iTween.orig_ApplyRotateAddTargets orig, iTween self)
        {
            Delegates.Params_ApplyRotateAddTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyRotateAddTargets != null)
                foreach (Delegates.ApplyRotateAddTargets_BeforeArgs toInvoke in _beforeApplyRotateAddTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyRotateAddTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyRotateAddTargets != null)
                foreach (Delegates.ApplyRotateAddTargets_AfterArgs toInvoke in _afterApplyRotateAddTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyRotateAddTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyShakePositionTargets()
        {
            if (!HookedList.Contains("ApplyShakePositionTargets"))
            {
                HookedList.Add("ApplyShakePositionTargets");
                On.iTween.ApplyShakePositionTargets += ApplyShakePositionTargets;
            }
        }

        internal static event Delegates.ApplyShakePositionTargets_BeforeArgs _beforeApplyShakePositionTargets;
        internal static event Delegates.ApplyShakePositionTargets_AfterArgs _afterApplyShakePositionTargets;

        private static void ApplyShakePositionTargets(On.iTween.orig_ApplyShakePositionTargets orig, iTween self)
        {
            Delegates.Params_ApplyShakePositionTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyShakePositionTargets != null)
                foreach (Delegates.ApplyShakePositionTargets_BeforeArgs toInvoke in _beforeApplyShakePositionTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyShakePositionTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyShakePositionTargets != null)
                foreach (Delegates.ApplyShakePositionTargets_AfterArgs toInvoke in _afterApplyShakePositionTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyShakePositionTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyShakeScaleTargets()
        {
            if (!HookedList.Contains("ApplyShakeScaleTargets"))
            {
                HookedList.Add("ApplyShakeScaleTargets");
                On.iTween.ApplyShakeScaleTargets += ApplyShakeScaleTargets;
            }
        }

        internal static event Delegates.ApplyShakeScaleTargets_BeforeArgs _beforeApplyShakeScaleTargets;
        internal static event Delegates.ApplyShakeScaleTargets_AfterArgs _afterApplyShakeScaleTargets;

        private static void ApplyShakeScaleTargets(On.iTween.orig_ApplyShakeScaleTargets orig, iTween self)
        {
            Delegates.Params_ApplyShakeScaleTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyShakeScaleTargets != null)
                foreach (Delegates.ApplyShakeScaleTargets_BeforeArgs toInvoke in _beforeApplyShakeScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyShakeScaleTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyShakeScaleTargets != null)
                foreach (Delegates.ApplyShakeScaleTargets_AfterArgs toInvoke in _afterApplyShakeScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyShakeScaleTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyShakeRotationTargets()
        {
            if (!HookedList.Contains("ApplyShakeRotationTargets"))
            {
                HookedList.Add("ApplyShakeRotationTargets");
                On.iTween.ApplyShakeRotationTargets += ApplyShakeRotationTargets;
            }
        }

        internal static event Delegates.ApplyShakeRotationTargets_BeforeArgs _beforeApplyShakeRotationTargets;
        internal static event Delegates.ApplyShakeRotationTargets_AfterArgs _afterApplyShakeRotationTargets;

        private static void ApplyShakeRotationTargets(On.iTween.orig_ApplyShakeRotationTargets orig, iTween self)
        {
            Delegates.Params_ApplyShakeRotationTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyShakeRotationTargets != null)
                foreach (Delegates.ApplyShakeRotationTargets_BeforeArgs toInvoke in _beforeApplyShakeRotationTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyShakeRotationTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyShakeRotationTargets != null)
                foreach (Delegates.ApplyShakeRotationTargets_AfterArgs toInvoke in _afterApplyShakeRotationTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyShakeRotationTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyPunchPositionTargets()
        {
            if (!HookedList.Contains("ApplyPunchPositionTargets"))
            {
                HookedList.Add("ApplyPunchPositionTargets");
                On.iTween.ApplyPunchPositionTargets += ApplyPunchPositionTargets;
            }
        }

        internal static event Delegates.ApplyPunchPositionTargets_BeforeArgs _beforeApplyPunchPositionTargets;
        internal static event Delegates.ApplyPunchPositionTargets_AfterArgs _afterApplyPunchPositionTargets;

        private static void ApplyPunchPositionTargets(On.iTween.orig_ApplyPunchPositionTargets orig, iTween self)
        {
            Delegates.Params_ApplyPunchPositionTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyPunchPositionTargets != null)
                foreach (Delegates.ApplyPunchPositionTargets_BeforeArgs toInvoke in _beforeApplyPunchPositionTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyPunchPositionTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyPunchPositionTargets != null)
                foreach (Delegates.ApplyPunchPositionTargets_AfterArgs toInvoke in _afterApplyPunchPositionTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyPunchPositionTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyPunchRotationTargets()
        {
            if (!HookedList.Contains("ApplyPunchRotationTargets"))
            {
                HookedList.Add("ApplyPunchRotationTargets");
                On.iTween.ApplyPunchRotationTargets += ApplyPunchRotationTargets;
            }
        }

        internal static event Delegates.ApplyPunchRotationTargets_BeforeArgs _beforeApplyPunchRotationTargets;
        internal static event Delegates.ApplyPunchRotationTargets_AfterArgs _afterApplyPunchRotationTargets;

        private static void ApplyPunchRotationTargets(On.iTween.orig_ApplyPunchRotationTargets orig, iTween self)
        {
            Delegates.Params_ApplyPunchRotationTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyPunchRotationTargets != null)
                foreach (Delegates.ApplyPunchRotationTargets_BeforeArgs toInvoke in _beforeApplyPunchRotationTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyPunchRotationTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyPunchRotationTargets != null)
                foreach (Delegates.ApplyPunchRotationTargets_AfterArgs toInvoke in _afterApplyPunchRotationTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyPunchRotationTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookApplyPunchScaleTargets()
        {
            if (!HookedList.Contains("ApplyPunchScaleTargets"))
            {
                HookedList.Add("ApplyPunchScaleTargets");
                On.iTween.ApplyPunchScaleTargets += ApplyPunchScaleTargets;
            }
        }

        internal static event Delegates.ApplyPunchScaleTargets_BeforeArgs _beforeApplyPunchScaleTargets;
        internal static event Delegates.ApplyPunchScaleTargets_AfterArgs _afterApplyPunchScaleTargets;

        private static void ApplyPunchScaleTargets(On.iTween.orig_ApplyPunchScaleTargets orig, iTween self)
        {
            Delegates.Params_ApplyPunchScaleTargets @params = new()
            {
                self = self
            };
            if (_beforeApplyPunchScaleTargets != null)
                foreach (Delegates.ApplyPunchScaleTargets_BeforeArgs toInvoke in _beforeApplyPunchScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _beforeApplyPunchScaleTargets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterApplyPunchScaleTargets != null)
                foreach (Delegates.ApplyPunchScaleTargets_AfterArgs toInvoke in _afterApplyPunchScaleTargets
                             .GetInvocationList())
                    try
                    {
                        _afterApplyPunchScaleTargets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTweenDelay()
        {
            if (!HookedList.Contains("TweenDelay"))
            {
                HookedList.Add("TweenDelay");
                On.iTween.TweenDelay += TweenDelay;
            }
        }

        internal static event Delegates.TweenDelay_BeforeArgs _beforeTweenDelay;

        private static IEnumerator TweenDelay(On.iTween.orig_TweenDelay orig, iTween self)
        {
            Delegates.Params_TweenDelay @params = new()
            {
                self = self
            };
            if (_beforeTweenDelay != null)
                foreach (Delegates.TweenDelay_BeforeArgs toInvoke in _beforeTweenDelay.GetInvocationList())
                    try
                    {
                        _beforeTweenDelay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookTweenStart()
        {
            if (!HookedList.Contains("TweenStart"))
            {
                HookedList.Add("TweenStart");
                On.iTween.TweenStart += TweenStart;
            }
        }

        internal static event Delegates.TweenStart_BeforeArgs _beforeTweenStart;
        internal static event Delegates.TweenStart_AfterArgs _afterTweenStart;

        private static void TweenStart(On.iTween.orig_TweenStart orig, iTween self)
        {
            Delegates.Params_TweenStart @params = new()
            {
                self = self
            };
            if (_beforeTweenStart != null)
                foreach (Delegates.TweenStart_BeforeArgs toInvoke in _beforeTweenStart.GetInvocationList())
                    try
                    {
                        _beforeTweenStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterTweenStart != null)
                foreach (Delegates.TweenStart_AfterArgs toInvoke in _afterTweenStart.GetInvocationList())
                    try
                    {
                        _afterTweenStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTweenRestart()
        {
            if (!HookedList.Contains("TweenRestart"))
            {
                HookedList.Add("TweenRestart");
                On.iTween.TweenRestart += TweenRestart;
            }
        }

        internal static event Delegates.TweenRestart_BeforeArgs _beforeTweenRestart;

        private static IEnumerator TweenRestart(On.iTween.orig_TweenRestart orig, iTween self)
        {
            Delegates.Params_TweenRestart @params = new()
            {
                self = self
            };
            if (_beforeTweenRestart != null)
                foreach (Delegates.TweenRestart_BeforeArgs toInvoke in _beforeTweenRestart.GetInvocationList())
                    try
                    {
                        _beforeTweenRestart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookTweenUpdate()
        {
            if (!HookedList.Contains("TweenUpdate"))
            {
                HookedList.Add("TweenUpdate");
                On.iTween.TweenUpdate += TweenUpdate;
            }
        }

        internal static event Delegates.TweenUpdate_BeforeArgs _beforeTweenUpdate;
        internal static event Delegates.TweenUpdate_AfterArgs _afterTweenUpdate;

        private static void TweenUpdate(On.iTween.orig_TweenUpdate orig, iTween self)
        {
            Delegates.Params_TweenUpdate @params = new()
            {
                self = self
            };
            if (_beforeTweenUpdate != null)
                foreach (Delegates.TweenUpdate_BeforeArgs toInvoke in _beforeTweenUpdate.GetInvocationList())
                    try
                    {
                        _beforeTweenUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterTweenUpdate != null)
                foreach (Delegates.TweenUpdate_AfterArgs toInvoke in _afterTweenUpdate.GetInvocationList())
                    try
                    {
                        _afterTweenUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTweenComplete()
        {
            if (!HookedList.Contains("TweenComplete"))
            {
                HookedList.Add("TweenComplete");
                On.iTween.TweenComplete += TweenComplete;
            }
        }

        internal static event Delegates.TweenComplete_BeforeArgs _beforeTweenComplete;
        internal static event Delegates.TweenComplete_AfterArgs _afterTweenComplete;

        private static void TweenComplete(On.iTween.orig_TweenComplete orig, iTween self)
        {
            Delegates.Params_TweenComplete @params = new()
            {
                self = self
            };
            if (_beforeTweenComplete != null)
                foreach (Delegates.TweenComplete_BeforeArgs toInvoke in _beforeTweenComplete.GetInvocationList())
                    try
                    {
                        _beforeTweenComplete?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterTweenComplete != null)
                foreach (Delegates.TweenComplete_AfterArgs toInvoke in _afterTweenComplete.GetInvocationList())
                    try
                    {
                        _afterTweenComplete.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTweenLoop()
        {
            if (!HookedList.Contains("TweenLoop"))
            {
                HookedList.Add("TweenLoop");
                On.iTween.TweenLoop += TweenLoop;
            }
        }

        internal static event Delegates.TweenLoop_BeforeArgs _beforeTweenLoop;
        internal static event Delegates.TweenLoop_AfterArgs _afterTweenLoop;

        private static void TweenLoop(On.iTween.orig_TweenLoop orig, iTween self)
        {
            Delegates.Params_TweenLoop @params = new()
            {
                self = self
            };
            if (_beforeTweenLoop != null)
                foreach (Delegates.TweenLoop_BeforeArgs toInvoke in _beforeTweenLoop.GetInvocationList())
                    try
                    {
                        _beforeTweenLoop?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterTweenLoop != null)
                foreach (Delegates.TweenLoop_AfterArgs toInvoke in _afterTweenLoop.GetInvocationList())
                    try
                    {
                        _afterTweenLoop.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRectUpdate()
        {
            if (!HookedList.Contains("RectUpdate"))
            {
                HookedList.Add("RectUpdate");
                On.iTween.RectUpdate += RectUpdate;
            }
        }

        internal static event Delegates.RectUpdate_BeforeArgs _beforeRectUpdate;
        internal static event Delegates.RectUpdate_AfterArgs _afterRectUpdate;

        private static Rect RectUpdate(On.iTween.orig_RectUpdate orig, Rect currentValue, Rect targetValue, float speed)
        {
            Delegates.Params_RectUpdate @params = new()
            {
                currentValue = currentValue, targetValue = targetValue, speed = speed
            };
            if (_beforeRectUpdate != null)
                foreach (Delegates.RectUpdate_BeforeArgs toInvoke in _beforeRectUpdate.GetInvocationList())
                    try
                    {
                        _beforeRectUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            currentValue = @params.currentValue;
            targetValue = @params.targetValue;
            speed = @params.speed;
            var retVal = orig(currentValue, targetValue, speed);
            if (_afterRectUpdate != null)
                foreach (Delegates.RectUpdate_AfterArgs toInvoke in _afterRectUpdate.GetInvocationList())
                    try
                    {
                        retVal = _afterRectUpdate.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookVector3Update()
        {
            if (!HookedList.Contains("Vector3Update"))
            {
                HookedList.Add("Vector3Update");
                On.iTween.Vector3Update += Vector3Update;
            }
        }

        internal static event Delegates.Vector3Update_BeforeArgs _beforeVector3Update;
        internal static event Delegates.Vector3Update_AfterArgs _afterVector3Update;

        private static Vector3 Vector3Update(On.iTween.orig_Vector3Update orig, Vector3 currentValue,
            Vector3 targetValue, float speed)
        {
            Delegates.Params_Vector3Update @params = new()
            {
                currentValue = currentValue, targetValue = targetValue, speed = speed
            };
            if (_beforeVector3Update != null)
                foreach (Delegates.Vector3Update_BeforeArgs toInvoke in _beforeVector3Update.GetInvocationList())
                    try
                    {
                        _beforeVector3Update?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            currentValue = @params.currentValue;
            targetValue = @params.targetValue;
            speed = @params.speed;
            var retVal = orig(currentValue, targetValue, speed);
            if (_afterVector3Update != null)
                foreach (Delegates.Vector3Update_AfterArgs toInvoke in _afterVector3Update.GetInvocationList())
                    try
                    {
                        retVal = _afterVector3Update.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookVector2Update()
        {
            if (!HookedList.Contains("Vector2Update"))
            {
                HookedList.Add("Vector2Update");
                On.iTween.Vector2Update += Vector2Update;
            }
        }

        internal static event Delegates.Vector2Update_BeforeArgs _beforeVector2Update;
        internal static event Delegates.Vector2Update_AfterArgs _afterVector2Update;

        private static Vector2 Vector2Update(On.iTween.orig_Vector2Update orig, Vector2 currentValue,
            Vector2 targetValue, float speed)
        {
            Delegates.Params_Vector2Update @params = new()
            {
                currentValue = currentValue, targetValue = targetValue, speed = speed
            };
            if (_beforeVector2Update != null)
                foreach (Delegates.Vector2Update_BeforeArgs toInvoke in _beforeVector2Update.GetInvocationList())
                    try
                    {
                        _beforeVector2Update?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            currentValue = @params.currentValue;
            targetValue = @params.targetValue;
            speed = @params.speed;
            var retVal = orig(currentValue, targetValue, speed);
            if (_afterVector2Update != null)
                foreach (Delegates.Vector2Update_AfterArgs toInvoke in _afterVector2Update.GetInvocationList())
                    try
                    {
                        retVal = _afterVector2Update.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFloatUpdate()
        {
            if (!HookedList.Contains("FloatUpdate"))
            {
                HookedList.Add("FloatUpdate");
                On.iTween.FloatUpdate += FloatUpdate;
            }
        }

        internal static event Delegates.FloatUpdate_BeforeArgs _beforeFloatUpdate;
        internal static event Delegates.FloatUpdate_AfterArgs _afterFloatUpdate;

        private static float FloatUpdate(On.iTween.orig_FloatUpdate orig, float currentValue, float targetValue,
            float speed)
        {
            Delegates.Params_FloatUpdate @params = new()
            {
                currentValue = currentValue, targetValue = targetValue, speed = speed
            };
            if (_beforeFloatUpdate != null)
                foreach (Delegates.FloatUpdate_BeforeArgs toInvoke in _beforeFloatUpdate.GetInvocationList())
                    try
                    {
                        _beforeFloatUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            currentValue = @params.currentValue;
            targetValue = @params.targetValue;
            speed = @params.speed;
            var retVal = orig(currentValue, targetValue, speed);
            if (_afterFloatUpdate != null)
                foreach (Delegates.FloatUpdate_AfterArgs toInvoke in _afterFloatUpdate.GetInvocationList())
                    try
                    {
                        retVal = _afterFloatUpdate.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFadeUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("FadeUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("FadeUpdate_GameObject_Hashtable");
                On.iTween.FadeUpdate_GameObject_Hashtable += FadeUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.FadeUpdate_GameObject_Hashtable_BeforeArgs
            _beforeFadeUpdate_GameObject_Hashtable;

        internal static event Delegates.FadeUpdate_GameObject_Hashtable_AfterArgs _afterFadeUpdate_GameObject_Hashtable;

        private static void FadeUpdate_GameObject_Hashtable(On.iTween.orig_FadeUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_FadeUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeFadeUpdate_GameObject_Hashtable != null)
                foreach (Delegates.FadeUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeFadeUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeFadeUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterFadeUpdate_GameObject_Hashtable != null)
                foreach (Delegates.FadeUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterFadeUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterFadeUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFadeUpdate_GameObject_float_float()
        {
            if (!HookedList.Contains("FadeUpdate_GameObject_float_float"))
            {
                HookedList.Add("FadeUpdate_GameObject_float_float");
                On.iTween.FadeUpdate_GameObject_float_float += FadeUpdate_GameObject_float_float;
            }
        }

        internal static event Delegates.FadeUpdate_GameObject_float_float_BeforeArgs
            _beforeFadeUpdate_GameObject_float_float;

        internal static event Delegates.FadeUpdate_GameObject_float_float_AfterArgs
            _afterFadeUpdate_GameObject_float_float;

        private static void FadeUpdate_GameObject_float_float(On.iTween.orig_FadeUpdate_GameObject_float_float orig,
            GameObject target, float alpha, float time)
        {
            Delegates.Params_FadeUpdate_GameObject_float_float @params = new()
            {
                target = target, alpha = alpha, time = time
            };
            if (_beforeFadeUpdate_GameObject_float_float != null)
                foreach (Delegates.FadeUpdate_GameObject_float_float_BeforeArgs toInvoke in
                         _beforeFadeUpdate_GameObject_float_float.GetInvocationList())
                    try
                    {
                        _beforeFadeUpdate_GameObject_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            alpha = @params.alpha;
            time = @params.time;
            orig(target, alpha, time);
            if (_afterFadeUpdate_GameObject_float_float != null)
                foreach (Delegates.FadeUpdate_GameObject_float_float_AfterArgs toInvoke in
                         _afterFadeUpdate_GameObject_float_float.GetInvocationList())
                    try
                    {
                        _afterFadeUpdate_GameObject_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookColorUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ColorUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("ColorUpdate_GameObject_Hashtable");
                On.iTween.ColorUpdate_GameObject_Hashtable += ColorUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ColorUpdate_GameObject_Hashtable_BeforeArgs
            _beforeColorUpdate_GameObject_Hashtable;

        internal static event Delegates.ColorUpdate_GameObject_Hashtable_AfterArgs
            _afterColorUpdate_GameObject_Hashtable;

        private static void ColorUpdate_GameObject_Hashtable(On.iTween.orig_ColorUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ColorUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeColorUpdate_GameObject_Hashtable != null)
                foreach (Delegates.ColorUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeColorUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeColorUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterColorUpdate_GameObject_Hashtable != null)
                foreach (Delegates.ColorUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterColorUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterColorUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookColorUpdate_GameObject_Color_float()
        {
            if (!HookedList.Contains("ColorUpdate_GameObject_Color_float"))
            {
                HookedList.Add("ColorUpdate_GameObject_Color_float");
                On.iTween.ColorUpdate_GameObject_Color_float += ColorUpdate_GameObject_Color_float;
            }
        }

        internal static event Delegates.ColorUpdate_GameObject_Color_float_BeforeArgs
            _beforeColorUpdate_GameObject_Color_float;

        internal static event Delegates.ColorUpdate_GameObject_Color_float_AfterArgs
            _afterColorUpdate_GameObject_Color_float;

        private static void ColorUpdate_GameObject_Color_float(On.iTween.orig_ColorUpdate_GameObject_Color_float orig,
            GameObject target, Color color, float time)
        {
            Delegates.Params_ColorUpdate_GameObject_Color_float @params = new()
            {
                target = target, color = color, time = time
            };
            if (_beforeColorUpdate_GameObject_Color_float != null)
                foreach (Delegates.ColorUpdate_GameObject_Color_float_BeforeArgs toInvoke in
                         _beforeColorUpdate_GameObject_Color_float.GetInvocationList())
                    try
                    {
                        _beforeColorUpdate_GameObject_Color_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            color = @params.color;
            time = @params.time;
            orig(target, color, time);
            if (_afterColorUpdate_GameObject_Color_float != null)
                foreach (Delegates.ColorUpdate_GameObject_Color_float_AfterArgs toInvoke in
                         _afterColorUpdate_GameObject_Color_float.GetInvocationList())
                    try
                    {
                        _afterColorUpdate_GameObject_Color_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAudioUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("AudioUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("AudioUpdate_GameObject_Hashtable");
                On.iTween.AudioUpdate_GameObject_Hashtable += AudioUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.AudioUpdate_GameObject_Hashtable_BeforeArgs
            _beforeAudioUpdate_GameObject_Hashtable;

        internal static event Delegates.AudioUpdate_GameObject_Hashtable_AfterArgs
            _afterAudioUpdate_GameObject_Hashtable;

        private static void AudioUpdate_GameObject_Hashtable(On.iTween.orig_AudioUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_AudioUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeAudioUpdate_GameObject_Hashtable != null)
                foreach (Delegates.AudioUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeAudioUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeAudioUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterAudioUpdate_GameObject_Hashtable != null)
                foreach (Delegates.AudioUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterAudioUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterAudioUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAudioUpdate_GameObject_float_float_float()
        {
            if (!HookedList.Contains("AudioUpdate_GameObject_float_float_float"))
            {
                HookedList.Add("AudioUpdate_GameObject_float_float_float");
                On.iTween.AudioUpdate_GameObject_float_float_float += AudioUpdate_GameObject_float_float_float;
            }
        }

        internal static event Delegates.AudioUpdate_GameObject_float_float_float_BeforeArgs
            _beforeAudioUpdate_GameObject_float_float_float;

        internal static event Delegates.AudioUpdate_GameObject_float_float_float_AfterArgs
            _afterAudioUpdate_GameObject_float_float_float;

        private static void AudioUpdate_GameObject_float_float_float(
            On.iTween.orig_AudioUpdate_GameObject_float_float_float orig, GameObject target, float volume, float pitch,
            float time)
        {
            Delegates.Params_AudioUpdate_GameObject_float_float_float @params = new()
            {
                target = target, volume = volume, pitch = pitch, time = time
            };
            if (_beforeAudioUpdate_GameObject_float_float_float != null)
                foreach (Delegates.AudioUpdate_GameObject_float_float_float_BeforeArgs toInvoke in
                         _beforeAudioUpdate_GameObject_float_float_float.GetInvocationList())
                    try
                    {
                        _beforeAudioUpdate_GameObject_float_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            volume = @params.volume;
            pitch = @params.pitch;
            time = @params.time;
            orig(target, volume, pitch, time);
            if (_afterAudioUpdate_GameObject_float_float_float != null)
                foreach (Delegates.AudioUpdate_GameObject_float_float_float_AfterArgs toInvoke in
                         _afterAudioUpdate_GameObject_float_float_float.GetInvocationList())
                    try
                    {
                        _afterAudioUpdate_GameObject_float_float_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("RotateUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("RotateUpdate_GameObject_Hashtable");
                On.iTween.RotateUpdate_GameObject_Hashtable += RotateUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.RotateUpdate_GameObject_Hashtable_BeforeArgs
            _beforeRotateUpdate_GameObject_Hashtable;

        internal static event Delegates.RotateUpdate_GameObject_Hashtable_AfterArgs
            _afterRotateUpdate_GameObject_Hashtable;

        private static void RotateUpdate_GameObject_Hashtable(On.iTween.orig_RotateUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_RotateUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeRotateUpdate_GameObject_Hashtable != null)
                foreach (Delegates.RotateUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeRotateUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeRotateUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterRotateUpdate_GameObject_Hashtable != null)
                foreach (Delegates.RotateUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterRotateUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterRotateUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRotateUpdate_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("RotateUpdate_GameObject_Vector3_float"))
            {
                HookedList.Add("RotateUpdate_GameObject_Vector3_float");
                On.iTween.RotateUpdate_GameObject_Vector3_float += RotateUpdate_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.RotateUpdate_GameObject_Vector3_float_BeforeArgs
            _beforeRotateUpdate_GameObject_Vector3_float;

        internal static event Delegates.RotateUpdate_GameObject_Vector3_float_AfterArgs
            _afterRotateUpdate_GameObject_Vector3_float;

        private static void RotateUpdate_GameObject_Vector3_float(
            On.iTween.orig_RotateUpdate_GameObject_Vector3_float orig, GameObject target, Vector3 rotation, float time)
        {
            Delegates.Params_RotateUpdate_GameObject_Vector3_float @params = new()
            {
                target = target, rotation = rotation, time = time
            };
            if (_beforeRotateUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.RotateUpdate_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeRotateUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeRotateUpdate_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            rotation = @params.rotation;
            time = @params.time;
            orig(target, rotation, time);
            if (_afterRotateUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.RotateUpdate_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterRotateUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterRotateUpdate_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("ScaleUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("ScaleUpdate_GameObject_Hashtable");
                On.iTween.ScaleUpdate_GameObject_Hashtable += ScaleUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.ScaleUpdate_GameObject_Hashtable_BeforeArgs
            _beforeScaleUpdate_GameObject_Hashtable;

        internal static event Delegates.ScaleUpdate_GameObject_Hashtable_AfterArgs
            _afterScaleUpdate_GameObject_Hashtable;

        private static void ScaleUpdate_GameObject_Hashtable(On.iTween.orig_ScaleUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_ScaleUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeScaleUpdate_GameObject_Hashtable != null)
                foreach (Delegates.ScaleUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeScaleUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeScaleUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterScaleUpdate_GameObject_Hashtable != null)
                foreach (Delegates.ScaleUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterScaleUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterScaleUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScaleUpdate_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("ScaleUpdate_GameObject_Vector3_float"))
            {
                HookedList.Add("ScaleUpdate_GameObject_Vector3_float");
                On.iTween.ScaleUpdate_GameObject_Vector3_float += ScaleUpdate_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.ScaleUpdate_GameObject_Vector3_float_BeforeArgs
            _beforeScaleUpdate_GameObject_Vector3_float;

        internal static event Delegates.ScaleUpdate_GameObject_Vector3_float_AfterArgs
            _afterScaleUpdate_GameObject_Vector3_float;

        private static void ScaleUpdate_GameObject_Vector3_float(
            On.iTween.orig_ScaleUpdate_GameObject_Vector3_float orig, GameObject target, Vector3 scale, float time)
        {
            Delegates.Params_ScaleUpdate_GameObject_Vector3_float @params = new()
            {
                target = target, scale = scale, time = time
            };
            if (_beforeScaleUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleUpdate_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeScaleUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeScaleUpdate_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            scale = @params.scale;
            time = @params.time;
            orig(target, scale, time);
            if (_afterScaleUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.ScaleUpdate_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterScaleUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterScaleUpdate_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("MoveUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("MoveUpdate_GameObject_Hashtable");
                On.iTween.MoveUpdate_GameObject_Hashtable += MoveUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.MoveUpdate_GameObject_Hashtable_BeforeArgs
            _beforeMoveUpdate_GameObject_Hashtable;

        internal static event Delegates.MoveUpdate_GameObject_Hashtable_AfterArgs _afterMoveUpdate_GameObject_Hashtable;

        private static void MoveUpdate_GameObject_Hashtable(On.iTween.orig_MoveUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_MoveUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeMoveUpdate_GameObject_Hashtable != null)
                foreach (Delegates.MoveUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeMoveUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeMoveUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterMoveUpdate_GameObject_Hashtable != null)
                foreach (Delegates.MoveUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterMoveUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterMoveUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveUpdate_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("MoveUpdate_GameObject_Vector3_float"))
            {
                HookedList.Add("MoveUpdate_GameObject_Vector3_float");
                On.iTween.MoveUpdate_GameObject_Vector3_float += MoveUpdate_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.MoveUpdate_GameObject_Vector3_float_BeforeArgs
            _beforeMoveUpdate_GameObject_Vector3_float;

        internal static event Delegates.MoveUpdate_GameObject_Vector3_float_AfterArgs
            _afterMoveUpdate_GameObject_Vector3_float;

        private static void MoveUpdate_GameObject_Vector3_float(On.iTween.orig_MoveUpdate_GameObject_Vector3_float orig,
            GameObject target, Vector3 position, float time)
        {
            Delegates.Params_MoveUpdate_GameObject_Vector3_float @params = new()
            {
                target = target, position = position, time = time
            };
            if (_beforeMoveUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.MoveUpdate_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeMoveUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeMoveUpdate_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            position = @params.position;
            time = @params.time;
            orig(target, position, time);
            if (_afterMoveUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.MoveUpdate_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterMoveUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterMoveUpdate_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookUpdate_GameObject_Hashtable()
        {
            if (!HookedList.Contains("LookUpdate_GameObject_Hashtable"))
            {
                HookedList.Add("LookUpdate_GameObject_Hashtable");
                On.iTween.LookUpdate_GameObject_Hashtable += LookUpdate_GameObject_Hashtable;
            }
        }

        internal static event Delegates.LookUpdate_GameObject_Hashtable_BeforeArgs
            _beforeLookUpdate_GameObject_Hashtable;

        internal static event Delegates.LookUpdate_GameObject_Hashtable_AfterArgs _afterLookUpdate_GameObject_Hashtable;

        private static void LookUpdate_GameObject_Hashtable(On.iTween.orig_LookUpdate_GameObject_Hashtable orig,
            GameObject target, Hashtable args)
        {
            Delegates.Params_LookUpdate_GameObject_Hashtable @params = new()
            {
                target = target, args = args
            };
            if (_beforeLookUpdate_GameObject_Hashtable != null)
                foreach (Delegates.LookUpdate_GameObject_Hashtable_BeforeArgs toInvoke in
                         _beforeLookUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _beforeLookUpdate_GameObject_Hashtable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterLookUpdate_GameObject_Hashtable != null)
                foreach (Delegates.LookUpdate_GameObject_Hashtable_AfterArgs toInvoke in
                         _afterLookUpdate_GameObject_Hashtable.GetInvocationList())
                    try
                    {
                        _afterLookUpdate_GameObject_Hashtable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookUpdate_GameObject_Vector3_float()
        {
            if (!HookedList.Contains("LookUpdate_GameObject_Vector3_float"))
            {
                HookedList.Add("LookUpdate_GameObject_Vector3_float");
                On.iTween.LookUpdate_GameObject_Vector3_float += LookUpdate_GameObject_Vector3_float;
            }
        }

        internal static event Delegates.LookUpdate_GameObject_Vector3_float_BeforeArgs
            _beforeLookUpdate_GameObject_Vector3_float;

        internal static event Delegates.LookUpdate_GameObject_Vector3_float_AfterArgs
            _afterLookUpdate_GameObject_Vector3_float;

        private static void LookUpdate_GameObject_Vector3_float(On.iTween.orig_LookUpdate_GameObject_Vector3_float orig,
            GameObject target, Vector3 looktarget, float time)
        {
            Delegates.Params_LookUpdate_GameObject_Vector3_float @params = new()
            {
                target = target, looktarget = looktarget, time = time
            };
            if (_beforeLookUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.LookUpdate_GameObject_Vector3_float_BeforeArgs toInvoke in
                         _beforeLookUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _beforeLookUpdate_GameObject_Vector3_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            looktarget = @params.looktarget;
            time = @params.time;
            orig(target, looktarget, time);
            if (_afterLookUpdate_GameObject_Vector3_float != null)
                foreach (Delegates.LookUpdate_GameObject_Vector3_float_AfterArgs toInvoke in
                         _afterLookUpdate_GameObject_Vector3_float.GetInvocationList())
                    try
                    {
                        _afterLookUpdate_GameObject_Vector3_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPathLength_Array()
        {
            if (!HookedList.Contains("PathLength_Array"))
            {
                HookedList.Add("PathLength_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "PathLength_Array", false), PathLength_Array);
            }
        }

        internal static event Delegates.PathLength_Array_BeforeArgs _beforePathLength_Array;
        internal static event Delegates.PathLength_Array_AfterArgs _afterPathLength_Array;

        private static float PathLength_Array(Func<Transform[], float> orig, Transform[] path)
        {
            Delegates.Params_PathLength_Array @params = new()
            {
                path = path
            };
            if (_beforePathLength_Array != null)
                foreach (Delegates.PathLength_Array_BeforeArgs toInvoke in _beforePathLength_Array.GetInvocationList())
                    try
                    {
                        _beforePathLength_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            var retVal = orig(path);
            if (_afterPathLength_Array != null)
                foreach (Delegates.PathLength_Array_AfterArgs toInvoke in _afterPathLength_Array.GetInvocationList())
                    try
                    {
                        retVal = _afterPathLength_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCameraTexture()
        {
            if (!HookedList.Contains("CameraTexture"))
            {
                HookedList.Add("CameraTexture");
                On.iTween.CameraTexture += CameraTexture;
            }
        }

        internal static event Delegates.CameraTexture_BeforeArgs _beforeCameraTexture;
        internal static event Delegates.CameraTexture_AfterArgs _afterCameraTexture;

        private static Texture2D CameraTexture(On.iTween.orig_CameraTexture orig, Color color)
        {
            Delegates.Params_CameraTexture @params = new()
            {
                color = color
            };
            if (_beforeCameraTexture != null)
                foreach (Delegates.CameraTexture_BeforeArgs toInvoke in _beforeCameraTexture.GetInvocationList())
                    try
                    {
                        _beforeCameraTexture?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            color = @params.color;
            var retVal = orig(color);
            if (_afterCameraTexture != null)
                foreach (Delegates.CameraTexture_AfterArgs toInvoke in _afterCameraTexture.GetInvocationList())
                    try
                    {
                        retVal = _afterCameraTexture.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPutOnPath_GameObject_Array_float()
        {
            if (!HookedList.Contains("PutOnPath_GameObject_Array_float"))
            {
                HookedList.Add("PutOnPath_GameObject_Array_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath_GameObject_Array_float", false),
                    PutOnPath_GameObject_Array_float);
            }
        }

        internal static event Delegates.PutOnPath_GameObject_Array_float_BeforeArgs
            _beforePutOnPath_GameObject_Array_float;

        internal static event Delegates.PutOnPath_GameObject_Array_float_AfterArgs
            _afterPutOnPath_GameObject_Array_float;

        private static void PutOnPath_GameObject_Array_float(Action<GameObject, Vector3[], float> orig,
            GameObject target, Vector3[] path, float percent)
        {
            Delegates.Params_PutOnPath_GameObject_Array_float @params = new()
            {
                target = target, path = path, percent = percent
            };
            if (_beforePutOnPath_GameObject_Array_float != null)
                foreach (Delegates.PutOnPath_GameObject_Array_float_BeforeArgs toInvoke in
                         _beforePutOnPath_GameObject_Array_float.GetInvocationList())
                    try
                    {
                        _beforePutOnPath_GameObject_Array_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            path = @params.path;
            percent = @params.percent;
            orig(target, path, percent);
            if (_afterPutOnPath_GameObject_Array_float != null)
                foreach (Delegates.PutOnPath_GameObject_Array_float_AfterArgs toInvoke in
                         _afterPutOnPath_GameObject_Array_float.GetInvocationList())
                    try
                    {
                        _afterPutOnPath_GameObject_Array_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPutOnPath_Transform_Array_float()
        {
            if (!HookedList.Contains("PutOnPath_Transform_Array_float"))
            {
                HookedList.Add("PutOnPath_Transform_Array_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath_Transform_Array_float", false),
                    PutOnPath_Transform_Array_float);
            }
        }

        internal static event Delegates.PutOnPath_Transform_Array_float_BeforeArgs
            _beforePutOnPath_Transform_Array_float;

        internal static event Delegates.PutOnPath_Transform_Array_float_AfterArgs _afterPutOnPath_Transform_Array_float;

        private static void PutOnPath_Transform_Array_float(Action<Transform, Vector3[], float> orig, Transform target,
            Vector3[] path, float percent)
        {
            Delegates.Params_PutOnPath_Transform_Array_float @params = new()
            {
                target = target, path = path, percent = percent
            };
            if (_beforePutOnPath_Transform_Array_float != null)
                foreach (Delegates.PutOnPath_Transform_Array_float_BeforeArgs toInvoke in
                         _beforePutOnPath_Transform_Array_float.GetInvocationList())
                    try
                    {
                        _beforePutOnPath_Transform_Array_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            path = @params.path;
            percent = @params.percent;
            orig(target, path, percent);
            if (_afterPutOnPath_Transform_Array_float != null)
                foreach (Delegates.PutOnPath_Transform_Array_float_AfterArgs toInvoke in
                         _afterPutOnPath_Transform_Array_float.GetInvocationList())
                    try
                    {
                        _afterPutOnPath_Transform_Array_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPointOnPath_Array_float()
        {
            if (!HookedList.Contains("PointOnPath_Array_float"))
            {
                HookedList.Add("PointOnPath_Array_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "PointOnPath_Array_float", false),
                    PointOnPath_Array_float);
            }
        }

        internal static event Delegates.PointOnPath_Array_float_BeforeArgs _beforePointOnPath_Array_float;
        internal static event Delegates.PointOnPath_Array_float_AfterArgs _afterPointOnPath_Array_float;

        private static Vector3 PointOnPath_Array_float(Func<Transform[], float, Vector3> orig, Transform[] path,
            float percent)
        {
            Delegates.Params_PointOnPath_Array_float @params = new()
            {
                path = path, percent = percent
            };
            if (_beforePointOnPath_Array_float != null)
                foreach (Delegates.PointOnPath_Array_float_BeforeArgs toInvoke in _beforePointOnPath_Array_float
                             .GetInvocationList())
                    try
                    {
                        _beforePointOnPath_Array_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            percent = @params.percent;
            var retVal = orig(path, percent);
            if (_afterPointOnPath_Array_float != null)
                foreach (Delegates.PointOnPath_Array_float_AfterArgs toInvoke in _afterPointOnPath_Array_float
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterPointOnPath_Array_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDrawLine_Array()
        {
            if (!HookedList.Contains("DrawLine_Array"))
            {
                HookedList.Add("DrawLine_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine_Array", false), DrawLine_Array);
            }
        }

        internal static event Delegates.DrawLine_Array_BeforeArgs _beforeDrawLine_Array;
        internal static event Delegates.DrawLine_Array_AfterArgs _afterDrawLine_Array;

        private static void DrawLine_Array(Action<Vector3[]> orig, Vector3[] line)
        {
            Delegates.Params_DrawLine_Array @params = new()
            {
                line = line
            };
            if (_beforeDrawLine_Array != null)
                foreach (Delegates.DrawLine_Array_BeforeArgs toInvoke in _beforeDrawLine_Array.GetInvocationList())
                    try
                    {
                        _beforeDrawLine_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            orig(line);
            if (_afterDrawLine_Array != null)
                foreach (Delegates.DrawLine_Array_AfterArgs toInvoke in _afterDrawLine_Array.GetInvocationList())
                    try
                    {
                        _afterDrawLine_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawLine_Array_Color()
        {
            if (!HookedList.Contains("DrawLine_Array_Color"))
            {
                HookedList.Add("DrawLine_Array_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine_Array_Color", false),
                    DrawLine_Array_Color);
            }
        }

        internal static event Delegates.DrawLine_Array_Color_BeforeArgs _beforeDrawLine_Array_Color;
        internal static event Delegates.DrawLine_Array_Color_AfterArgs _afterDrawLine_Array_Color;

        private static void DrawLine_Array_Color(Action<Vector3[], Color> orig, Vector3[] line, Color color)
        {
            Delegates.Params_DrawLine_Array_Color @params = new()
            {
                line = line, color = color
            };
            if (_beforeDrawLine_Array_Color != null)
                foreach (Delegates.DrawLine_Array_Color_BeforeArgs toInvoke in _beforeDrawLine_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawLine_Array_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            color = @params.color;
            orig(line, color);
            if (_afterDrawLine_Array_Color != null)
                foreach (Delegates.DrawLine_Array_Color_AfterArgs toInvoke in _afterDrawLine_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawLine_Array_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawLineGizmos_Array()
        {
            if (!HookedList.Contains("DrawLineGizmos_Array"))
            {
                HookedList.Add("DrawLineGizmos_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos_Array", false),
                    DrawLineGizmos_Array);
            }
        }

        internal static event Delegates.DrawLineGizmos_Array_BeforeArgs _beforeDrawLineGizmos_Array;
        internal static event Delegates.DrawLineGizmos_Array_AfterArgs _afterDrawLineGizmos_Array;

        private static void DrawLineGizmos_Array(Action<Vector3[]> orig, Vector3[] line)
        {
            Delegates.Params_DrawLineGizmos_Array @params = new()
            {
                line = line
            };
            if (_beforeDrawLineGizmos_Array != null)
                foreach (Delegates.DrawLineGizmos_Array_BeforeArgs toInvoke in _beforeDrawLineGizmos_Array
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawLineGizmos_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            orig(line);
            if (_afterDrawLineGizmos_Array != null)
                foreach (Delegates.DrawLineGizmos_Array_AfterArgs toInvoke in _afterDrawLineGizmos_Array
                             .GetInvocationList())
                    try
                    {
                        _afterDrawLineGizmos_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawLineGizmos_Array_Color()
        {
            if (!HookedList.Contains("DrawLineGizmos_Array_Color"))
            {
                HookedList.Add("DrawLineGizmos_Array_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos_Array_Color", false),
                    DrawLineGizmos_Array_Color);
            }
        }

        internal static event Delegates.DrawLineGizmos_Array_Color_BeforeArgs _beforeDrawLineGizmos_Array_Color;
        internal static event Delegates.DrawLineGizmos_Array_Color_AfterArgs _afterDrawLineGizmos_Array_Color;

        private static void DrawLineGizmos_Array_Color(Action<Vector3[], Color> orig, Vector3[] line, Color color)
        {
            Delegates.Params_DrawLineGizmos_Array_Color @params = new()
            {
                line = line, color = color
            };
            if (_beforeDrawLineGizmos_Array_Color != null)
                foreach (Delegates.DrawLineGizmos_Array_Color_BeforeArgs toInvoke in _beforeDrawLineGizmos_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawLineGizmos_Array_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            color = @params.color;
            orig(line, color);
            if (_afterDrawLineGizmos_Array_Color != null)
                foreach (Delegates.DrawLineGizmos_Array_Color_AfterArgs toInvoke in _afterDrawLineGizmos_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawLineGizmos_Array_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawLineHandles_Array()
        {
            if (!HookedList.Contains("DrawLineHandles_Array"))
            {
                HookedList.Add("DrawLineHandles_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles_Array", false),
                    DrawLineHandles_Array);
            }
        }

        internal static event Delegates.DrawLineHandles_Array_BeforeArgs _beforeDrawLineHandles_Array;
        internal static event Delegates.DrawLineHandles_Array_AfterArgs _afterDrawLineHandles_Array;

        private static void DrawLineHandles_Array(Action<Vector3[]> orig, Vector3[] line)
        {
            Delegates.Params_DrawLineHandles_Array @params = new()
            {
                line = line
            };
            if (_beforeDrawLineHandles_Array != null)
                foreach (Delegates.DrawLineHandles_Array_BeforeArgs toInvoke in _beforeDrawLineHandles_Array
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawLineHandles_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            orig(line);
            if (_afterDrawLineHandles_Array != null)
                foreach (Delegates.DrawLineHandles_Array_AfterArgs toInvoke in _afterDrawLineHandles_Array
                             .GetInvocationList())
                    try
                    {
                        _afterDrawLineHandles_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawLineHandles_Array_Color()
        {
            if (!HookedList.Contains("DrawLineHandles_Array_Color"))
            {
                HookedList.Add("DrawLineHandles_Array_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles_Array_Color", false),
                    DrawLineHandles_Array_Color);
            }
        }

        internal static event Delegates.DrawLineHandles_Array_Color_BeforeArgs _beforeDrawLineHandles_Array_Color;
        internal static event Delegates.DrawLineHandles_Array_Color_AfterArgs _afterDrawLineHandles_Array_Color;

        private static void DrawLineHandles_Array_Color(Action<Vector3[], Color> orig, Vector3[] line, Color color)
        {
            Delegates.Params_DrawLineHandles_Array_Color @params = new()
            {
                line = line, color = color
            };
            if (_beforeDrawLineHandles_Array_Color != null)
                foreach (Delegates.DrawLineHandles_Array_Color_BeforeArgs toInvoke in _beforeDrawLineHandles_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawLineHandles_Array_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            color = @params.color;
            orig(line, color);
            if (_afterDrawLineHandles_Array_Color != null)
                foreach (Delegates.DrawLineHandles_Array_Color_AfterArgs toInvoke in _afterDrawLineHandles_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawLineHandles_Array_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPath_Array()
        {
            if (!HookedList.Contains("DrawPath_Array"))
            {
                HookedList.Add("DrawPath_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath_Array", false), DrawPath_Array);
            }
        }

        internal static event Delegates.DrawPath_Array_BeforeArgs _beforeDrawPath_Array;
        internal static event Delegates.DrawPath_Array_AfterArgs _afterDrawPath_Array;

        private static void DrawPath_Array(Action<Vector3[]> orig, Vector3[] path)
        {
            Delegates.Params_DrawPath_Array @params = new()
            {
                path = path
            };
            if (_beforeDrawPath_Array != null)
                foreach (Delegates.DrawPath_Array_BeforeArgs toInvoke in _beforeDrawPath_Array.GetInvocationList())
                    try
                    {
                        _beforeDrawPath_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            orig(path);
            if (_afterDrawPath_Array != null)
                foreach (Delegates.DrawPath_Array_AfterArgs toInvoke in _afterDrawPath_Array.GetInvocationList())
                    try
                    {
                        _afterDrawPath_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPath_Array_Color()
        {
            if (!HookedList.Contains("DrawPath_Array_Color"))
            {
                HookedList.Add("DrawPath_Array_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath_Array_Color", false),
                    DrawPath_Array_Color);
            }
        }

        internal static event Delegates.DrawPath_Array_Color_BeforeArgs _beforeDrawPath_Array_Color;
        internal static event Delegates.DrawPath_Array_Color_AfterArgs _afterDrawPath_Array_Color;

        private static void DrawPath_Array_Color(Action<Vector3[], Color> orig, Vector3[] path, Color color)
        {
            Delegates.Params_DrawPath_Array_Color @params = new()
            {
                path = path, color = color
            };
            if (_beforeDrawPath_Array_Color != null)
                foreach (Delegates.DrawPath_Array_Color_BeforeArgs toInvoke in _beforeDrawPath_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawPath_Array_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            color = @params.color;
            orig(path, color);
            if (_afterDrawPath_Array_Color != null)
                foreach (Delegates.DrawPath_Array_Color_AfterArgs toInvoke in _afterDrawPath_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawPath_Array_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPathGizmos_Array()
        {
            if (!HookedList.Contains("DrawPathGizmos_Array"))
            {
                HookedList.Add("DrawPathGizmos_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos_Array", false),
                    DrawPathGizmos_Array);
            }
        }

        internal static event Delegates.DrawPathGizmos_Array_BeforeArgs _beforeDrawPathGizmos_Array;
        internal static event Delegates.DrawPathGizmos_Array_AfterArgs _afterDrawPathGizmos_Array;

        private static void DrawPathGizmos_Array(Action<Vector3[]> orig, Vector3[] path)
        {
            Delegates.Params_DrawPathGizmos_Array @params = new()
            {
                path = path
            };
            if (_beforeDrawPathGizmos_Array != null)
                foreach (Delegates.DrawPathGizmos_Array_BeforeArgs toInvoke in _beforeDrawPathGizmos_Array
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawPathGizmos_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            orig(path);
            if (_afterDrawPathGizmos_Array != null)
                foreach (Delegates.DrawPathGizmos_Array_AfterArgs toInvoke in _afterDrawPathGizmos_Array
                             .GetInvocationList())
                    try
                    {
                        _afterDrawPathGizmos_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPathGizmos_Array_Color()
        {
            if (!HookedList.Contains("DrawPathGizmos_Array_Color"))
            {
                HookedList.Add("DrawPathGizmos_Array_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos_Array_Color", false),
                    DrawPathGizmos_Array_Color);
            }
        }

        internal static event Delegates.DrawPathGizmos_Array_Color_BeforeArgs _beforeDrawPathGizmos_Array_Color;
        internal static event Delegates.DrawPathGizmos_Array_Color_AfterArgs _afterDrawPathGizmos_Array_Color;

        private static void DrawPathGizmos_Array_Color(Action<Vector3[], Color> orig, Vector3[] path, Color color)
        {
            Delegates.Params_DrawPathGizmos_Array_Color @params = new()
            {
                path = path, color = color
            };
            if (_beforeDrawPathGizmos_Array_Color != null)
                foreach (Delegates.DrawPathGizmos_Array_Color_BeforeArgs toInvoke in _beforeDrawPathGizmos_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawPathGizmos_Array_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            color = @params.color;
            orig(path, color);
            if (_afterDrawPathGizmos_Array_Color != null)
                foreach (Delegates.DrawPathGizmos_Array_Color_AfterArgs toInvoke in _afterDrawPathGizmos_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawPathGizmos_Array_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPathHandles_Array()
        {
            if (!HookedList.Contains("DrawPathHandles_Array"))
            {
                HookedList.Add("DrawPathHandles_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles_Array", false),
                    DrawPathHandles_Array);
            }
        }

        internal static event Delegates.DrawPathHandles_Array_BeforeArgs _beforeDrawPathHandles_Array;
        internal static event Delegates.DrawPathHandles_Array_AfterArgs _afterDrawPathHandles_Array;

        private static void DrawPathHandles_Array(Action<Vector3[]> orig, Vector3[] path)
        {
            Delegates.Params_DrawPathHandles_Array @params = new()
            {
                path = path
            };
            if (_beforeDrawPathHandles_Array != null)
                foreach (Delegates.DrawPathHandles_Array_BeforeArgs toInvoke in _beforeDrawPathHandles_Array
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawPathHandles_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            orig(path);
            if (_afterDrawPathHandles_Array != null)
                foreach (Delegates.DrawPathHandles_Array_AfterArgs toInvoke in _afterDrawPathHandles_Array
                             .GetInvocationList())
                    try
                    {
                        _afterDrawPathHandles_Array.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPathHandles_Array_Color()
        {
            if (!HookedList.Contains("DrawPathHandles_Array_Color"))
            {
                HookedList.Add("DrawPathHandles_Array_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles_Array_Color", false),
                    DrawPathHandles_Array_Color);
            }
        }

        internal static event Delegates.DrawPathHandles_Array_Color_BeforeArgs _beforeDrawPathHandles_Array_Color;
        internal static event Delegates.DrawPathHandles_Array_Color_AfterArgs _afterDrawPathHandles_Array_Color;

        private static void DrawPathHandles_Array_Color(Action<Vector3[], Color> orig, Vector3[] path, Color color)
        {
            Delegates.Params_DrawPathHandles_Array_Color @params = new()
            {
                path = path, color = color
            };
            if (_beforeDrawPathHandles_Array_Color != null)
                foreach (Delegates.DrawPathHandles_Array_Color_BeforeArgs toInvoke in _beforeDrawPathHandles_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawPathHandles_Array_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            color = @params.color;
            orig(path, color);
            if (_afterDrawPathHandles_Array_Color != null)
                foreach (Delegates.DrawPathHandles_Array_Color_AfterArgs toInvoke in _afterDrawPathHandles_Array_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawPathHandles_Array_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeDepth()
        {
            if (!HookedList.Contains("CameraFadeDepth"))
            {
                HookedList.Add("CameraFadeDepth");
                On.iTween.CameraFadeDepth += CameraFadeDepth;
            }
        }

        internal static event Delegates.CameraFadeDepth_BeforeArgs _beforeCameraFadeDepth;
        internal static event Delegates.CameraFadeDepth_AfterArgs _afterCameraFadeDepth;

        private static void CameraFadeDepth(On.iTween.orig_CameraFadeDepth orig, int depth)
        {
            Delegates.Params_CameraFadeDepth @params = new()
            {
                depth = depth
            };
            if (_beforeCameraFadeDepth != null)
                foreach (Delegates.CameraFadeDepth_BeforeArgs toInvoke in _beforeCameraFadeDepth.GetInvocationList())
                    try
                    {
                        _beforeCameraFadeDepth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            depth = @params.depth;
            orig(depth);
            if (_afterCameraFadeDepth != null)
                foreach (Delegates.CameraFadeDepth_AfterArgs toInvoke in _afterCameraFadeDepth.GetInvocationList())
                    try
                    {
                        _afterCameraFadeDepth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeDestroy()
        {
            if (!HookedList.Contains("CameraFadeDestroy"))
            {
                HookedList.Add("CameraFadeDestroy");
                On.iTween.CameraFadeDestroy += CameraFadeDestroy;
            }
        }

        internal static event Delegates.CameraFadeDestroy_BeforeArgs _beforeCameraFadeDestroy;
        internal static event Delegates.CameraFadeDestroy_AfterArgs _afterCameraFadeDestroy;

        private static void CameraFadeDestroy(On.iTween.orig_CameraFadeDestroy orig)
        {
            if (_beforeCameraFadeDestroy != null)
                foreach (Delegates.CameraFadeDestroy_BeforeArgs toInvoke in
                         _beforeCameraFadeDestroy.GetInvocationList())
                    try
                    {
                        _beforeCameraFadeDestroy?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterCameraFadeDestroy != null)
                foreach (Delegates.CameraFadeDestroy_AfterArgs toInvoke in _afterCameraFadeDestroy.GetInvocationList())
                    try
                    {
                        _afterCameraFadeDestroy.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeSwap()
        {
            if (!HookedList.Contains("CameraFadeSwap"))
            {
                HookedList.Add("CameraFadeSwap");
                On.iTween.CameraFadeSwap += CameraFadeSwap;
            }
        }

        internal static event Delegates.CameraFadeSwap_BeforeArgs _beforeCameraFadeSwap;
        internal static event Delegates.CameraFadeSwap_AfterArgs _afterCameraFadeSwap;

        private static void CameraFadeSwap(On.iTween.orig_CameraFadeSwap orig, Texture2D texture)
        {
            Delegates.Params_CameraFadeSwap @params = new()
            {
                texture = texture
            };
            if (_beforeCameraFadeSwap != null)
                foreach (Delegates.CameraFadeSwap_BeforeArgs toInvoke in _beforeCameraFadeSwap.GetInvocationList())
                    try
                    {
                        _beforeCameraFadeSwap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            texture = @params.texture;
            orig(texture);
            if (_afterCameraFadeSwap != null)
                foreach (Delegates.CameraFadeSwap_AfterArgs toInvoke in _afterCameraFadeSwap.GetInvocationList())
                    try
                    {
                        _afterCameraFadeSwap.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCameraFadeAdd_Texture2D_int()
        {
            if (!HookedList.Contains("CameraFadeAdd_Texture2D_int"))
            {
                HookedList.Add("CameraFadeAdd_Texture2D_int");
                On.iTween.CameraFadeAdd_Texture2D_int += CameraFadeAdd_Texture2D_int;
            }
        }

        internal static event Delegates.CameraFadeAdd_Texture2D_int_BeforeArgs _beforeCameraFadeAdd_Texture2D_int;
        internal static event Delegates.CameraFadeAdd_Texture2D_int_AfterArgs _afterCameraFadeAdd_Texture2D_int;

        private static GameObject CameraFadeAdd_Texture2D_int(On.iTween.orig_CameraFadeAdd_Texture2D_int orig,
            Texture2D texture, int depth)
        {
            Delegates.Params_CameraFadeAdd_Texture2D_int @params = new()
            {
                texture = texture, depth = depth
            };
            if (_beforeCameraFadeAdd_Texture2D_int != null)
                foreach (Delegates.CameraFadeAdd_Texture2D_int_BeforeArgs toInvoke in _beforeCameraFadeAdd_Texture2D_int
                             .GetInvocationList())
                    try
                    {
                        _beforeCameraFadeAdd_Texture2D_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            texture = @params.texture;
            depth = @params.depth;
            var retVal = orig(texture, depth);
            if (_afterCameraFadeAdd_Texture2D_int != null)
                foreach (Delegates.CameraFadeAdd_Texture2D_int_AfterArgs toInvoke in _afterCameraFadeAdd_Texture2D_int
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCameraFadeAdd_Texture2D_int.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCameraFadeAdd_Texture2D()
        {
            if (!HookedList.Contains("CameraFadeAdd_Texture2D"))
            {
                HookedList.Add("CameraFadeAdd_Texture2D");
                On.iTween.CameraFadeAdd_Texture2D += CameraFadeAdd_Texture2D;
            }
        }

        internal static event Delegates.CameraFadeAdd_Texture2D_BeforeArgs _beforeCameraFadeAdd_Texture2D;
        internal static event Delegates.CameraFadeAdd_Texture2D_AfterArgs _afterCameraFadeAdd_Texture2D;

        private static GameObject CameraFadeAdd_Texture2D(On.iTween.orig_CameraFadeAdd_Texture2D orig,
            Texture2D texture)
        {
            Delegates.Params_CameraFadeAdd_Texture2D @params = new()
            {
                texture = texture
            };
            if (_beforeCameraFadeAdd_Texture2D != null)
                foreach (Delegates.CameraFadeAdd_Texture2D_BeforeArgs toInvoke in _beforeCameraFadeAdd_Texture2D
                             .GetInvocationList())
                    try
                    {
                        _beforeCameraFadeAdd_Texture2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            texture = @params.texture;
            var retVal = orig(texture);
            if (_afterCameraFadeAdd_Texture2D != null)
                foreach (Delegates.CameraFadeAdd_Texture2D_AfterArgs toInvoke in _afterCameraFadeAdd_Texture2D
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCameraFadeAdd_Texture2D.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCameraFadeAdd()
        {
            if (!HookedList.Contains("CameraFadeAdd"))
            {
                HookedList.Add("CameraFadeAdd");
                On.iTween.CameraFadeAdd += CameraFadeAdd;
            }
        }

        internal static event Delegates.CameraFadeAdd_BeforeArgs _beforeCameraFadeAdd;
        internal static event Delegates.CameraFadeAdd_AfterArgs _afterCameraFadeAdd;

        private static GameObject CameraFadeAdd(On.iTween.orig_CameraFadeAdd orig)
        {
            if (_beforeCameraFadeAdd != null)
                foreach (Delegates.CameraFadeAdd_BeforeArgs toInvoke in _beforeCameraFadeAdd.GetInvocationList())
                    try
                    {
                        _beforeCameraFadeAdd?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterCameraFadeAdd != null)
                foreach (Delegates.CameraFadeAdd_AfterArgs toInvoke in _afterCameraFadeAdd.GetInvocationList())
                    try
                    {
                        retVal = _afterCameraFadeAdd.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookResume_GameObject()
        {
            if (!HookedList.Contains("Resume_GameObject"))
            {
                HookedList.Add("Resume_GameObject");
                On.iTween.Resume_GameObject += Resume_GameObject;
            }
        }

        internal static event Delegates.Resume_GameObject_BeforeArgs _beforeResume_GameObject;
        internal static event Delegates.Resume_GameObject_AfterArgs _afterResume_GameObject;

        private static void Resume_GameObject(On.iTween.orig_Resume_GameObject orig, GameObject target)
        {
            Delegates.Params_Resume_GameObject @params = new()
            {
                target = target
            };
            if (_beforeResume_GameObject != null)
                foreach (Delegates.Resume_GameObject_BeforeArgs toInvoke in
                         _beforeResume_GameObject.GetInvocationList())
                    try
                    {
                        _beforeResume_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            orig(target);
            if (_afterResume_GameObject != null)
                foreach (Delegates.Resume_GameObject_AfterArgs toInvoke in _afterResume_GameObject.GetInvocationList())
                    try
                    {
                        _afterResume_GameObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResume_GameObject_bool()
        {
            if (!HookedList.Contains("Resume_GameObject_bool"))
            {
                HookedList.Add("Resume_GameObject_bool");
                On.iTween.Resume_GameObject_bool += Resume_GameObject_bool;
            }
        }

        internal static event Delegates.Resume_GameObject_bool_BeforeArgs _beforeResume_GameObject_bool;
        internal static event Delegates.Resume_GameObject_bool_AfterArgs _afterResume_GameObject_bool;

        private static void Resume_GameObject_bool(On.iTween.orig_Resume_GameObject_bool orig, GameObject target,
            bool includechildren)
        {
            Delegates.Params_Resume_GameObject_bool @params = new()
            {
                target = target, includechildren = includechildren
            };
            if (_beforeResume_GameObject_bool != null)
                foreach (Delegates.Resume_GameObject_bool_BeforeArgs toInvoke in _beforeResume_GameObject_bool
                             .GetInvocationList())
                    try
                    {
                        _beforeResume_GameObject_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            includechildren = @params.includechildren;
            orig(target, includechildren);
            if (_afterResume_GameObject_bool != null)
                foreach (Delegates.Resume_GameObject_bool_AfterArgs toInvoke in _afterResume_GameObject_bool
                             .GetInvocationList())
                    try
                    {
                        _afterResume_GameObject_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResume_GameObject_string()
        {
            if (!HookedList.Contains("Resume_GameObject_string"))
            {
                HookedList.Add("Resume_GameObject_string");
                On.iTween.Resume_GameObject_string += Resume_GameObject_string;
            }
        }

        internal static event Delegates.Resume_GameObject_string_BeforeArgs _beforeResume_GameObject_string;
        internal static event Delegates.Resume_GameObject_string_AfterArgs _afterResume_GameObject_string;

        private static void Resume_GameObject_string(On.iTween.orig_Resume_GameObject_string orig, GameObject target,
            string type)
        {
            Delegates.Params_Resume_GameObject_string @params = new()
            {
                target = target, type = type
            };
            if (_beforeResume_GameObject_string != null)
                foreach (Delegates.Resume_GameObject_string_BeforeArgs toInvoke in _beforeResume_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _beforeResume_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            orig(target, type);
            if (_afterResume_GameObject_string != null)
                foreach (Delegates.Resume_GameObject_string_AfterArgs toInvoke in _afterResume_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _afterResume_GameObject_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResume_GameObject_string_bool()
        {
            if (!HookedList.Contains("Resume_GameObject_string_bool"))
            {
                HookedList.Add("Resume_GameObject_string_bool");
                On.iTween.Resume_GameObject_string_bool += Resume_GameObject_string_bool;
            }
        }

        internal static event Delegates.Resume_GameObject_string_bool_BeforeArgs _beforeResume_GameObject_string_bool;
        internal static event Delegates.Resume_GameObject_string_bool_AfterArgs _afterResume_GameObject_string_bool;

        private static void Resume_GameObject_string_bool(On.iTween.orig_Resume_GameObject_string_bool orig,
            GameObject target, string type, bool includechildren)
        {
            Delegates.Params_Resume_GameObject_string_bool @params = new()
            {
                target = target, type = type, includechildren = includechildren
            };
            if (_beforeResume_GameObject_string_bool != null)
                foreach (Delegates.Resume_GameObject_string_bool_BeforeArgs toInvoke in
                         _beforeResume_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _beforeResume_GameObject_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            includechildren = @params.includechildren;
            orig(target, type, includechildren);
            if (_afterResume_GameObject_string_bool != null)
                foreach (Delegates.Resume_GameObject_string_bool_AfterArgs toInvoke in
                         _afterResume_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _afterResume_GameObject_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResume()
        {
            if (!HookedList.Contains("Resume"))
            {
                HookedList.Add("Resume");
                On.iTween.Resume += Resume;
            }
        }

        internal static event Delegates.Resume_BeforeArgs _beforeResume;
        internal static event Delegates.Resume_AfterArgs _afterResume;

        private static void Resume(On.iTween.orig_Resume orig)
        {
            if (_beforeResume != null)
                foreach (Delegates.Resume_BeforeArgs toInvoke in _beforeResume.GetInvocationList())
                    try
                    {
                        _beforeResume?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterResume != null)
                foreach (Delegates.Resume_AfterArgs toInvoke in _afterResume.GetInvocationList())
                    try
                    {
                        _afterResume.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResume_string()
        {
            if (!HookedList.Contains("Resume_string"))
            {
                HookedList.Add("Resume_string");
                On.iTween.Resume_string += Resume_string;
            }
        }

        internal static event Delegates.Resume_string_BeforeArgs _beforeResume_string;
        internal static event Delegates.Resume_string_AfterArgs _afterResume_string;

        private static void Resume_string(On.iTween.orig_Resume_string orig, string type)
        {
            Delegates.Params_Resume_string @params = new()
            {
                type = type
            };
            if (_beforeResume_string != null)
                foreach (Delegates.Resume_string_BeforeArgs toInvoke in _beforeResume_string.GetInvocationList())
                    try
                    {
                        _beforeResume_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            type = @params.type;
            orig(type);
            if (_afterResume_string != null)
                foreach (Delegates.Resume_string_AfterArgs toInvoke in _afterResume_string.GetInvocationList())
                    try
                    {
                        _afterResume_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPause_GameObject()
        {
            if (!HookedList.Contains("Pause_GameObject"))
            {
                HookedList.Add("Pause_GameObject");
                On.iTween.Pause_GameObject += Pause_GameObject;
            }
        }

        internal static event Delegates.Pause_GameObject_BeforeArgs _beforePause_GameObject;
        internal static event Delegates.Pause_GameObject_AfterArgs _afterPause_GameObject;

        private static void Pause_GameObject(On.iTween.orig_Pause_GameObject orig, GameObject target)
        {
            Delegates.Params_Pause_GameObject @params = new()
            {
                target = target
            };
            if (_beforePause_GameObject != null)
                foreach (Delegates.Pause_GameObject_BeforeArgs toInvoke in _beforePause_GameObject.GetInvocationList())
                    try
                    {
                        _beforePause_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            orig(target);
            if (_afterPause_GameObject != null)
                foreach (Delegates.Pause_GameObject_AfterArgs toInvoke in _afterPause_GameObject.GetInvocationList())
                    try
                    {
                        _afterPause_GameObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPause_GameObject_bool()
        {
            if (!HookedList.Contains("Pause_GameObject_bool"))
            {
                HookedList.Add("Pause_GameObject_bool");
                On.iTween.Pause_GameObject_bool += Pause_GameObject_bool;
            }
        }

        internal static event Delegates.Pause_GameObject_bool_BeforeArgs _beforePause_GameObject_bool;
        internal static event Delegates.Pause_GameObject_bool_AfterArgs _afterPause_GameObject_bool;

        private static void Pause_GameObject_bool(On.iTween.orig_Pause_GameObject_bool orig, GameObject target,
            bool includechildren)
        {
            Delegates.Params_Pause_GameObject_bool @params = new()
            {
                target = target, includechildren = includechildren
            };
            if (_beforePause_GameObject_bool != null)
                foreach (Delegates.Pause_GameObject_bool_BeforeArgs toInvoke in _beforePause_GameObject_bool
                             .GetInvocationList())
                    try
                    {
                        _beforePause_GameObject_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            includechildren = @params.includechildren;
            orig(target, includechildren);
            if (_afterPause_GameObject_bool != null)
                foreach (Delegates.Pause_GameObject_bool_AfterArgs toInvoke in _afterPause_GameObject_bool
                             .GetInvocationList())
                    try
                    {
                        _afterPause_GameObject_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPause_GameObject_string()
        {
            if (!HookedList.Contains("Pause_GameObject_string"))
            {
                HookedList.Add("Pause_GameObject_string");
                On.iTween.Pause_GameObject_string += Pause_GameObject_string;
            }
        }

        internal static event Delegates.Pause_GameObject_string_BeforeArgs _beforePause_GameObject_string;
        internal static event Delegates.Pause_GameObject_string_AfterArgs _afterPause_GameObject_string;

        private static void Pause_GameObject_string(On.iTween.orig_Pause_GameObject_string orig, GameObject target,
            string type)
        {
            Delegates.Params_Pause_GameObject_string @params = new()
            {
                target = target, type = type
            };
            if (_beforePause_GameObject_string != null)
                foreach (Delegates.Pause_GameObject_string_BeforeArgs toInvoke in _beforePause_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _beforePause_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            orig(target, type);
            if (_afterPause_GameObject_string != null)
                foreach (Delegates.Pause_GameObject_string_AfterArgs toInvoke in _afterPause_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _afterPause_GameObject_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPause_GameObject_string_bool()
        {
            if (!HookedList.Contains("Pause_GameObject_string_bool"))
            {
                HookedList.Add("Pause_GameObject_string_bool");
                On.iTween.Pause_GameObject_string_bool += Pause_GameObject_string_bool;
            }
        }

        internal static event Delegates.Pause_GameObject_string_bool_BeforeArgs _beforePause_GameObject_string_bool;
        internal static event Delegates.Pause_GameObject_string_bool_AfterArgs _afterPause_GameObject_string_bool;

        private static void Pause_GameObject_string_bool(On.iTween.orig_Pause_GameObject_string_bool orig,
            GameObject target, string type, bool includechildren)
        {
            Delegates.Params_Pause_GameObject_string_bool @params = new()
            {
                target = target, type = type, includechildren = includechildren
            };
            if (_beforePause_GameObject_string_bool != null)
                foreach (Delegates.Pause_GameObject_string_bool_BeforeArgs toInvoke in
                         _beforePause_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _beforePause_GameObject_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            includechildren = @params.includechildren;
            orig(target, type, includechildren);
            if (_afterPause_GameObject_string_bool != null)
                foreach (Delegates.Pause_GameObject_string_bool_AfterArgs toInvoke in _afterPause_GameObject_string_bool
                             .GetInvocationList())
                    try
                    {
                        _afterPause_GameObject_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPause()
        {
            if (!HookedList.Contains("Pause"))
            {
                HookedList.Add("Pause");
                On.iTween.Pause += Pause;
            }
        }

        internal static event Delegates.Pause_BeforeArgs _beforePause;
        internal static event Delegates.Pause_AfterArgs _afterPause;

        private static void Pause(On.iTween.orig_Pause orig)
        {
            if (_beforePause != null)
                foreach (Delegates.Pause_BeforeArgs toInvoke in _beforePause.GetInvocationList())
                    try
                    {
                        _beforePause?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterPause != null)
                foreach (Delegates.Pause_AfterArgs toInvoke in _afterPause.GetInvocationList())
                    try
                    {
                        _afterPause.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPause_string()
        {
            if (!HookedList.Contains("Pause_string"))
            {
                HookedList.Add("Pause_string");
                On.iTween.Pause_string += Pause_string;
            }
        }

        internal static event Delegates.Pause_string_BeforeArgs _beforePause_string;
        internal static event Delegates.Pause_string_AfterArgs _afterPause_string;

        private static void Pause_string(On.iTween.orig_Pause_string orig, string type)
        {
            Delegates.Params_Pause_string @params = new()
            {
                type = type
            };
            if (_beforePause_string != null)
                foreach (Delegates.Pause_string_BeforeArgs toInvoke in _beforePause_string.GetInvocationList())
                    try
                    {
                        _beforePause_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            type = @params.type;
            orig(type);
            if (_afterPause_string != null)
                foreach (Delegates.Pause_string_AfterArgs toInvoke in _afterPause_string.GetInvocationList())
                    try
                    {
                        _afterPause_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCount()
        {
            if (!HookedList.Contains("Count"))
            {
                HookedList.Add("Count");
                On.iTween.Count += Count;
            }
        }

        internal static event Delegates.Count_BeforeArgs _beforeCount;
        internal static event Delegates.Count_AfterArgs _afterCount;

        private static int Count(On.iTween.orig_Count orig)
        {
            if (_beforeCount != null)
                foreach (Delegates.Count_BeforeArgs toInvoke in _beforeCount.GetInvocationList())
                    try
                    {
                        _beforeCount?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterCount != null)
                foreach (Delegates.Count_AfterArgs toInvoke in _afterCount.GetInvocationList())
                    try
                    {
                        retVal = _afterCount.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCount_string()
        {
            if (!HookedList.Contains("Count_string"))
            {
                HookedList.Add("Count_string");
                On.iTween.Count_string += Count_string;
            }
        }

        internal static event Delegates.Count_string_BeforeArgs _beforeCount_string;
        internal static event Delegates.Count_string_AfterArgs _afterCount_string;

        private static int Count_string(On.iTween.orig_Count_string orig, string type)
        {
            Delegates.Params_Count_string @params = new()
            {
                type = type
            };
            if (_beforeCount_string != null)
                foreach (Delegates.Count_string_BeforeArgs toInvoke in _beforeCount_string.GetInvocationList())
                    try
                    {
                        _beforeCount_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            type = @params.type;
            var retVal = orig(type);
            if (_afterCount_string != null)
                foreach (Delegates.Count_string_AfterArgs toInvoke in _afterCount_string.GetInvocationList())
                    try
                    {
                        retVal = _afterCount_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCount_GameObject()
        {
            if (!HookedList.Contains("Count_GameObject"))
            {
                HookedList.Add("Count_GameObject");
                On.iTween.Count_GameObject += Count_GameObject;
            }
        }

        internal static event Delegates.Count_GameObject_BeforeArgs _beforeCount_GameObject;
        internal static event Delegates.Count_GameObject_AfterArgs _afterCount_GameObject;

        private static int Count_GameObject(On.iTween.orig_Count_GameObject orig, GameObject target)
        {
            Delegates.Params_Count_GameObject @params = new()
            {
                target = target
            };
            if (_beforeCount_GameObject != null)
                foreach (Delegates.Count_GameObject_BeforeArgs toInvoke in _beforeCount_GameObject.GetInvocationList())
                    try
                    {
                        _beforeCount_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            var retVal = orig(target);
            if (_afterCount_GameObject != null)
                foreach (Delegates.Count_GameObject_AfterArgs toInvoke in _afterCount_GameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterCount_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCount_GameObject_string()
        {
            if (!HookedList.Contains("Count_GameObject_string"))
            {
                HookedList.Add("Count_GameObject_string");
                On.iTween.Count_GameObject_string += Count_GameObject_string;
            }
        }

        internal static event Delegates.Count_GameObject_string_BeforeArgs _beforeCount_GameObject_string;
        internal static event Delegates.Count_GameObject_string_AfterArgs _afterCount_GameObject_string;

        private static int Count_GameObject_string(On.iTween.orig_Count_GameObject_string orig, GameObject target,
            string type)
        {
            Delegates.Params_Count_GameObject_string @params = new()
            {
                target = target, type = type
            };
            if (_beforeCount_GameObject_string != null)
                foreach (Delegates.Count_GameObject_string_BeforeArgs toInvoke in _beforeCount_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _beforeCount_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            var retVal = orig(target, type);
            if (_afterCount_GameObject_string != null)
                foreach (Delegates.Count_GameObject_string_AfterArgs toInvoke in _afterCount_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCount_GameObject_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookStop()
        {
            if (!HookedList.Contains("Stop"))
            {
                HookedList.Add("Stop");
                On.iTween.Stop += Stop;
            }
        }

        internal static event Delegates.Stop_BeforeArgs _beforeStop;
        internal static event Delegates.Stop_AfterArgs _afterStop;

        private static void Stop(On.iTween.orig_Stop orig)
        {
            if (_beforeStop != null)
                foreach (Delegates.Stop_BeforeArgs toInvoke in _beforeStop.GetInvocationList())
                    try
                    {
                        _beforeStop?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterStop != null)
                foreach (Delegates.Stop_AfterArgs toInvoke in _afterStop.GetInvocationList())
                    try
                    {
                        _afterStop.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStop_string()
        {
            if (!HookedList.Contains("Stop_string"))
            {
                HookedList.Add("Stop_string");
                On.iTween.Stop_string += Stop_string;
            }
        }

        internal static event Delegates.Stop_string_BeforeArgs _beforeStop_string;
        internal static event Delegates.Stop_string_AfterArgs _afterStop_string;

        private static void Stop_string(On.iTween.orig_Stop_string orig, string type)
        {
            Delegates.Params_Stop_string @params = new()
            {
                type = type
            };
            if (_beforeStop_string != null)
                foreach (Delegates.Stop_string_BeforeArgs toInvoke in _beforeStop_string.GetInvocationList())
                    try
                    {
                        _beforeStop_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            type = @params.type;
            orig(type);
            if (_afterStop_string != null)
                foreach (Delegates.Stop_string_AfterArgs toInvoke in _afterStop_string.GetInvocationList())
                    try
                    {
                        _afterStop_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStopByName_string()
        {
            if (!HookedList.Contains("StopByName_string"))
            {
                HookedList.Add("StopByName_string");
                On.iTween.StopByName_string += StopByName_string;
            }
        }

        internal static event Delegates.StopByName_string_BeforeArgs _beforeStopByName_string;
        internal static event Delegates.StopByName_string_AfterArgs _afterStopByName_string;

        private static void StopByName_string(On.iTween.orig_StopByName_string orig, string name)
        {
            Delegates.Params_StopByName_string @params = new()
            {
                name = name
            };
            if (_beforeStopByName_string != null)
                foreach (Delegates.StopByName_string_BeforeArgs toInvoke in
                         _beforeStopByName_string.GetInvocationList())
                    try
                    {
                        _beforeStopByName_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            name = @params.name;
            orig(name);
            if (_afterStopByName_string != null)
                foreach (Delegates.StopByName_string_AfterArgs toInvoke in _afterStopByName_string.GetInvocationList())
                    try
                    {
                        _afterStopByName_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStop_GameObject()
        {
            if (!HookedList.Contains("Stop_GameObject"))
            {
                HookedList.Add("Stop_GameObject");
                On.iTween.Stop_GameObject += Stop_GameObject;
            }
        }

        internal static event Delegates.Stop_GameObject_BeforeArgs _beforeStop_GameObject;
        internal static event Delegates.Stop_GameObject_AfterArgs _afterStop_GameObject;

        private static void Stop_GameObject(On.iTween.orig_Stop_GameObject orig, GameObject target)
        {
            Delegates.Params_Stop_GameObject @params = new()
            {
                target = target
            };
            if (_beforeStop_GameObject != null)
                foreach (Delegates.Stop_GameObject_BeforeArgs toInvoke in _beforeStop_GameObject.GetInvocationList())
                    try
                    {
                        _beforeStop_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            orig(target);
            if (_afterStop_GameObject != null)
                foreach (Delegates.Stop_GameObject_AfterArgs toInvoke in _afterStop_GameObject.GetInvocationList())
                    try
                    {
                        _afterStop_GameObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStop_GameObject_bool()
        {
            if (!HookedList.Contains("Stop_GameObject_bool"))
            {
                HookedList.Add("Stop_GameObject_bool");
                On.iTween.Stop_GameObject_bool += Stop_GameObject_bool;
            }
        }

        internal static event Delegates.Stop_GameObject_bool_BeforeArgs _beforeStop_GameObject_bool;
        internal static event Delegates.Stop_GameObject_bool_AfterArgs _afterStop_GameObject_bool;

        private static void Stop_GameObject_bool(On.iTween.orig_Stop_GameObject_bool orig, GameObject target,
            bool includechildren)
        {
            Delegates.Params_Stop_GameObject_bool @params = new()
            {
                target = target, includechildren = includechildren
            };
            if (_beforeStop_GameObject_bool != null)
                foreach (Delegates.Stop_GameObject_bool_BeforeArgs toInvoke in _beforeStop_GameObject_bool
                             .GetInvocationList())
                    try
                    {
                        _beforeStop_GameObject_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            includechildren = @params.includechildren;
            orig(target, includechildren);
            if (_afterStop_GameObject_bool != null)
                foreach (Delegates.Stop_GameObject_bool_AfterArgs toInvoke in _afterStop_GameObject_bool
                             .GetInvocationList())
                    try
                    {
                        _afterStop_GameObject_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStop_GameObject_string()
        {
            if (!HookedList.Contains("Stop_GameObject_string"))
            {
                HookedList.Add("Stop_GameObject_string");
                On.iTween.Stop_GameObject_string += Stop_GameObject_string;
            }
        }

        internal static event Delegates.Stop_GameObject_string_BeforeArgs _beforeStop_GameObject_string;
        internal static event Delegates.Stop_GameObject_string_AfterArgs _afterStop_GameObject_string;

        private static void Stop_GameObject_string(On.iTween.orig_Stop_GameObject_string orig, GameObject target,
            string type)
        {
            Delegates.Params_Stop_GameObject_string @params = new()
            {
                target = target, type = type
            };
            if (_beforeStop_GameObject_string != null)
                foreach (Delegates.Stop_GameObject_string_BeforeArgs toInvoke in _beforeStop_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _beforeStop_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            orig(target, type);
            if (_afterStop_GameObject_string != null)
                foreach (Delegates.Stop_GameObject_string_AfterArgs toInvoke in _afterStop_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _afterStop_GameObject_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStopByName_GameObject_string()
        {
            if (!HookedList.Contains("StopByName_GameObject_string"))
            {
                HookedList.Add("StopByName_GameObject_string");
                On.iTween.StopByName_GameObject_string += StopByName_GameObject_string;
            }
        }

        internal static event Delegates.StopByName_GameObject_string_BeforeArgs _beforeStopByName_GameObject_string;
        internal static event Delegates.StopByName_GameObject_string_AfterArgs _afterStopByName_GameObject_string;

        private static void StopByName_GameObject_string(On.iTween.orig_StopByName_GameObject_string orig,
            GameObject target, string name)
        {
            Delegates.Params_StopByName_GameObject_string @params = new()
            {
                target = target, name = name
            };
            if (_beforeStopByName_GameObject_string != null)
                foreach (Delegates.StopByName_GameObject_string_BeforeArgs toInvoke in
                         _beforeStopByName_GameObject_string.GetInvocationList())
                    try
                    {
                        _beforeStopByName_GameObject_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            name = @params.name;
            orig(target, name);
            if (_afterStopByName_GameObject_string != null)
                foreach (Delegates.StopByName_GameObject_string_AfterArgs toInvoke in _afterStopByName_GameObject_string
                             .GetInvocationList())
                    try
                    {
                        _afterStopByName_GameObject_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStop_GameObject_string_bool()
        {
            if (!HookedList.Contains("Stop_GameObject_string_bool"))
            {
                HookedList.Add("Stop_GameObject_string_bool");
                On.iTween.Stop_GameObject_string_bool += Stop_GameObject_string_bool;
            }
        }

        internal static event Delegates.Stop_GameObject_string_bool_BeforeArgs _beforeStop_GameObject_string_bool;
        internal static event Delegates.Stop_GameObject_string_bool_AfterArgs _afterStop_GameObject_string_bool;

        private static void Stop_GameObject_string_bool(On.iTween.orig_Stop_GameObject_string_bool orig,
            GameObject target, string type, bool includechildren)
        {
            Delegates.Params_Stop_GameObject_string_bool @params = new()
            {
                target = target, type = type, includechildren = includechildren
            };
            if (_beforeStop_GameObject_string_bool != null)
                foreach (Delegates.Stop_GameObject_string_bool_BeforeArgs toInvoke in _beforeStop_GameObject_string_bool
                             .GetInvocationList())
                    try
                    {
                        _beforeStop_GameObject_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            type = @params.type;
            includechildren = @params.includechildren;
            orig(target, type, includechildren);
            if (_afterStop_GameObject_string_bool != null)
                foreach (Delegates.Stop_GameObject_string_bool_AfterArgs toInvoke in _afterStop_GameObject_string_bool
                             .GetInvocationList())
                    try
                    {
                        _afterStop_GameObject_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStopByName_GameObject_string_bool()
        {
            if (!HookedList.Contains("StopByName_GameObject_string_bool"))
            {
                HookedList.Add("StopByName_GameObject_string_bool");
                On.iTween.StopByName_GameObject_string_bool += StopByName_GameObject_string_bool;
            }
        }

        internal static event Delegates.StopByName_GameObject_string_bool_BeforeArgs
            _beforeStopByName_GameObject_string_bool;

        internal static event Delegates.StopByName_GameObject_string_bool_AfterArgs
            _afterStopByName_GameObject_string_bool;

        private static void StopByName_GameObject_string_bool(On.iTween.orig_StopByName_GameObject_string_bool orig,
            GameObject target, string name, bool includechildren)
        {
            Delegates.Params_StopByName_GameObject_string_bool @params = new()
            {
                target = target, name = name, includechildren = includechildren
            };
            if (_beforeStopByName_GameObject_string_bool != null)
                foreach (Delegates.StopByName_GameObject_string_bool_BeforeArgs toInvoke in
                         _beforeStopByName_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _beforeStopByName_GameObject_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            name = @params.name;
            includechildren = @params.includechildren;
            orig(target, name, includechildren);
            if (_afterStopByName_GameObject_string_bool != null)
                foreach (Delegates.StopByName_GameObject_string_bool_AfterArgs toInvoke in
                         _afterStopByName_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _afterStopByName_GameObject_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHash()
        {
            if (!HookedList.Contains("Hash"))
            {
                HookedList.Add("Hash");
                On.iTween.Hash += Hash;
            }
        }

        internal static event Delegates.Hash_BeforeArgs _beforeHash;
        internal static event Delegates.Hash_AfterArgs _afterHash;

        private static Hashtable Hash(On.iTween.orig_Hash orig, object[] args)
        {
            Delegates.Params_Hash @params = new()
            {
                args = args
            };
            if (_beforeHash != null)
                foreach (Delegates.Hash_BeforeArgs toInvoke in _beforeHash.GetInvocationList())
                    try
                    {
                        _beforeHash?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            args = @params.args;
            var retVal = orig(args);
            if (_afterHash != null)
                foreach (Delegates.Hash_AfterArgs toInvoke in _afterHash.GetInvocationList())
                    try
                    {
                        retVal = _afterHash.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.iTween.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.iTween.orig_Awake orig, iTween self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.iTween.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;

        private static IEnumerator Start(On.iTween.orig_Start orig, iTween self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.iTween.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.iTween.orig_Update orig, iTween self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.iTween.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.iTween.orig_FixedUpdate orig, iTween self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.iTween.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

        private static void LateUpdate(On.iTween.orig_LateUpdate orig, iTween self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            if (_beforeLateUpdate != null)
                foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
                    try
                    {
                        _beforeLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null)
                foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
                    try
                    {
                        _afterLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.iTween.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.iTween.orig_OnEnable orig, iTween self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.iTween.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.iTween.orig_OnDisable orig, iTween self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawLineHelper()
        {
            if (!HookedList.Contains("DrawLineHelper"))
            {
                HookedList.Add("DrawLineHelper");
                On.iTween.DrawLineHelper += DrawLineHelper;
            }
        }

        internal static event Delegates.DrawLineHelper_BeforeArgs _beforeDrawLineHelper;
        internal static event Delegates.DrawLineHelper_AfterArgs _afterDrawLineHelper;

        private static void DrawLineHelper(On.iTween.orig_DrawLineHelper orig, Vector3[] line, Color color,
            string method)
        {
            Delegates.Params_DrawLineHelper @params = new()
            {
                line = line, color = color, method = method
            };
            if (_beforeDrawLineHelper != null)
                foreach (Delegates.DrawLineHelper_BeforeArgs toInvoke in _beforeDrawLineHelper.GetInvocationList())
                    try
                    {
                        _beforeDrawLineHelper?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            line = @params.line;
            color = @params.color;
            method = @params.method;
            orig(line, color, method);
            if (_afterDrawLineHelper != null)
                foreach (Delegates.DrawLineHelper_AfterArgs toInvoke in _afterDrawLineHelper.GetInvocationList())
                    try
                    {
                        _afterDrawLineHelper.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawPathHelper()
        {
            if (!HookedList.Contains("DrawPathHelper"))
            {
                HookedList.Add("DrawPathHelper");
                On.iTween.DrawPathHelper += DrawPathHelper;
            }
        }

        internal static event Delegates.DrawPathHelper_BeforeArgs _beforeDrawPathHelper;
        internal static event Delegates.DrawPathHelper_AfterArgs _afterDrawPathHelper;

        private static void DrawPathHelper(On.iTween.orig_DrawPathHelper orig, Vector3[] path, Color color,
            string method)
        {
            Delegates.Params_DrawPathHelper @params = new()
            {
                path = path, color = color, method = method
            };
            if (_beforeDrawPathHelper != null)
                foreach (Delegates.DrawPathHelper_BeforeArgs toInvoke in _beforeDrawPathHelper.GetInvocationList())
                    try
                    {
                        _beforeDrawPathHelper?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            color = @params.color;
            method = @params.method;
            orig(path, color, method);
            if (_afterDrawPathHelper != null)
                foreach (Delegates.DrawPathHelper_AfterArgs toInvoke in _afterDrawPathHelper.GetInvocationList())
                    try
                    {
                        _afterDrawPathHelper.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPathControlPointGenerator()
        {
            if (!HookedList.Contains("PathControlPointGenerator"))
            {
                HookedList.Add("PathControlPointGenerator");
                On.iTween.PathControlPointGenerator += PathControlPointGenerator;
            }
        }

        internal static event Delegates.PathControlPointGenerator_BeforeArgs _beforePathControlPointGenerator;
        internal static event Delegates.PathControlPointGenerator_AfterArgs _afterPathControlPointGenerator;

        private static Vector3[] PathControlPointGenerator(On.iTween.orig_PathControlPointGenerator orig,
            Vector3[] path)
        {
            Delegates.Params_PathControlPointGenerator @params = new()
            {
                path = path
            };
            if (_beforePathControlPointGenerator != null)
                foreach (Delegates.PathControlPointGenerator_BeforeArgs toInvoke in _beforePathControlPointGenerator
                             .GetInvocationList())
                    try
                    {
                        _beforePathControlPointGenerator?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            var retVal = orig(path);
            if (_afterPathControlPointGenerator != null)
                foreach (Delegates.PathControlPointGenerator_AfterArgs toInvoke in _afterPathControlPointGenerator
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterPathControlPointGenerator.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookInterp()
        {
            if (!HookedList.Contains("Interp"))
            {
                HookedList.Add("Interp");
                On.iTween.Interp += Interp;
            }
        }

        internal static event Delegates.Interp_BeforeArgs _beforeInterp;
        internal static event Delegates.Interp_AfterArgs _afterInterp;

        private static Vector3 Interp(On.iTween.orig_Interp orig, Vector3[] pts, float t)
        {
            Delegates.Params_Interp @params = new()
            {
                pts = pts, t = t
            };
            if (_beforeInterp != null)
                foreach (Delegates.Interp_BeforeArgs toInvoke in _beforeInterp.GetInvocationList())
                    try
                    {
                        _beforeInterp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pts = @params.pts;
            t = @params.t;
            var retVal = orig(pts, t);
            if (_afterInterp != null)
                foreach (Delegates.Interp_AfterArgs toInvoke in _afterInterp.GetInvocationList())
                    try
                    {
                        retVal = _afterInterp.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLaunch()
        {
            if (!HookedList.Contains("Launch"))
            {
                HookedList.Add("Launch");
                On.iTween.Launch += Launch;
            }
        }

        internal static event Delegates.Launch_BeforeArgs _beforeLaunch;
        internal static event Delegates.Launch_AfterArgs _afterLaunch;

        private static void Launch(On.iTween.orig_Launch orig, GameObject target, Hashtable args)
        {
            Delegates.Params_Launch @params = new()
            {
                target = target, args = args
            };
            if (_beforeLaunch != null)
                foreach (Delegates.Launch_BeforeArgs toInvoke in _beforeLaunch.GetInvocationList())
                    try
                    {
                        _beforeLaunch?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            args = @params.args;
            orig(target, args);
            if (_afterLaunch != null)
                foreach (Delegates.Launch_AfterArgs toInvoke in _afterLaunch.GetInvocationList())
                    try
                    {
                        _afterLaunch.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCleanArgs()
        {
            if (!HookedList.Contains("CleanArgs"))
            {
                HookedList.Add("CleanArgs");
                On.iTween.CleanArgs += CleanArgs;
            }
        }

        internal static event Delegates.CleanArgs_BeforeArgs _beforeCleanArgs;
        internal static event Delegates.CleanArgs_AfterArgs _afterCleanArgs;

        private static Hashtable CleanArgs(On.iTween.orig_CleanArgs orig, Hashtable args)
        {
            Delegates.Params_CleanArgs @params = new()
            {
                args = args
            };
            if (_beforeCleanArgs != null)
                foreach (Delegates.CleanArgs_BeforeArgs toInvoke in _beforeCleanArgs.GetInvocationList())
                    try
                    {
                        _beforeCleanArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            args = @params.args;
            var retVal = orig(args);
            if (_afterCleanArgs != null)
                foreach (Delegates.CleanArgs_AfterArgs toInvoke in _afterCleanArgs.GetInvocationList())
                    try
                    {
                        retVal = _afterCleanArgs.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGenerateID()
        {
            if (!HookedList.Contains("GenerateID"))
            {
                HookedList.Add("GenerateID");
                On.iTween.GenerateID += GenerateID;
            }
        }

        internal static event Delegates.GenerateID_BeforeArgs _beforeGenerateID;
        internal static event Delegates.GenerateID_AfterArgs _afterGenerateID;

        private static string GenerateID(On.iTween.orig_GenerateID orig)
        {
            if (_beforeGenerateID != null)
                foreach (Delegates.GenerateID_BeforeArgs toInvoke in _beforeGenerateID.GetInvocationList())
                    try
                    {
                        _beforeGenerateID?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGenerateID != null)
                foreach (Delegates.GenerateID_AfterArgs toInvoke in _afterGenerateID.GetInvocationList())
                    try
                    {
                        retVal = _afterGenerateID.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRetrieveArgs()
        {
            if (!HookedList.Contains("RetrieveArgs"))
            {
                HookedList.Add("RetrieveArgs");
                On.iTween.RetrieveArgs += RetrieveArgs;
            }
        }

        internal static event Delegates.RetrieveArgs_BeforeArgs _beforeRetrieveArgs;
        internal static event Delegates.RetrieveArgs_AfterArgs _afterRetrieveArgs;

        private static void RetrieveArgs(On.iTween.orig_RetrieveArgs orig, iTween self)
        {
            Delegates.Params_RetrieveArgs @params = new()
            {
                self = self
            };
            if (_beforeRetrieveArgs != null)
                foreach (Delegates.RetrieveArgs_BeforeArgs toInvoke in _beforeRetrieveArgs.GetInvocationList())
                    try
                    {
                        _beforeRetrieveArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRetrieveArgs != null)
                foreach (Delegates.RetrieveArgs_AfterArgs toInvoke in _afterRetrieveArgs.GetInvocationList())
                    try
                    {
                        _afterRetrieveArgs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetEasingFunction()
        {
            if (!HookedList.Contains("GetEasingFunction"))
            {
                HookedList.Add("GetEasingFunction");
                On.iTween.GetEasingFunction += GetEasingFunction;
            }
        }

        internal static event Delegates.GetEasingFunction_BeforeArgs _beforeGetEasingFunction;
        internal static event Delegates.GetEasingFunction_AfterArgs _afterGetEasingFunction;

        private static void GetEasingFunction(On.iTween.orig_GetEasingFunction orig, iTween self)
        {
            Delegates.Params_GetEasingFunction @params = new()
            {
                self = self
            };
            if (_beforeGetEasingFunction != null)
                foreach (Delegates.GetEasingFunction_BeforeArgs toInvoke in
                         _beforeGetEasingFunction.GetInvocationList())
                    try
                    {
                        _beforeGetEasingFunction?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGetEasingFunction != null)
                foreach (Delegates.GetEasingFunction_AfterArgs toInvoke in _afterGetEasingFunction.GetInvocationList())
                    try
                    {
                        _afterGetEasingFunction.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdatePercentage()
        {
            if (!HookedList.Contains("UpdatePercentage"))
            {
                HookedList.Add("UpdatePercentage");
                On.iTween.UpdatePercentage += UpdatePercentage;
            }
        }

        internal static event Delegates.UpdatePercentage_BeforeArgs _beforeUpdatePercentage;
        internal static event Delegates.UpdatePercentage_AfterArgs _afterUpdatePercentage;

        private static void UpdatePercentage(On.iTween.orig_UpdatePercentage orig, iTween self)
        {
            Delegates.Params_UpdatePercentage @params = new()
            {
                self = self
            };
            if (_beforeUpdatePercentage != null)
                foreach (Delegates.UpdatePercentage_BeforeArgs toInvoke in _beforeUpdatePercentage.GetInvocationList())
                    try
                    {
                        _beforeUpdatePercentage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdatePercentage != null)
                foreach (Delegates.UpdatePercentage_AfterArgs toInvoke in _afterUpdatePercentage.GetInvocationList())
                    try
                    {
                        _afterUpdatePercentage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCallBack()
        {
            if (!HookedList.Contains("CallBack"))
            {
                HookedList.Add("CallBack");
                On.iTween.CallBack += CallBack;
            }
        }

        internal static event Delegates.CallBack_BeforeArgs _beforeCallBack;
        internal static event Delegates.CallBack_AfterArgs _afterCallBack;

        private static void CallBack(On.iTween.orig_CallBack orig, iTween self, string callbackType)
        {
            Delegates.Params_CallBack @params = new()
            {
                self = self, callbackType = callbackType
            };
            if (_beforeCallBack != null)
                foreach (Delegates.CallBack_BeforeArgs toInvoke in _beforeCallBack.GetInvocationList())
                    try
                    {
                        _beforeCallBack?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            callbackType = @params.callbackType;
            orig(self, callbackType);
            if (_afterCallBack != null)
                foreach (Delegates.CallBack_AfterArgs toInvoke in _afterCallBack.GetInvocationList())
                    try
                    {
                        _afterCallBack.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDispose()
        {
            if (!HookedList.Contains("Dispose"))
            {
                HookedList.Add("Dispose");
                On.iTween.Dispose += Dispose;
            }
        }

        internal static event Delegates.Dispose_BeforeArgs _beforeDispose;
        internal static event Delegates.Dispose_AfterArgs _afterDispose;

        private static void Dispose(On.iTween.orig_Dispose orig, iTween self)
        {
            Delegates.Params_Dispose @params = new()
            {
                self = self
            };
            if (_beforeDispose != null)
                foreach (Delegates.Dispose_BeforeArgs toInvoke in _beforeDispose.GetInvocationList())
                    try
                    {
                        _beforeDispose?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDispose != null)
                foreach (Delegates.Dispose_AfterArgs toInvoke in _afterDispose.GetInvocationList())
                    try
                    {
                        _afterDispose.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookConflictCheck()
        {
            if (!HookedList.Contains("ConflictCheck"))
            {
                HookedList.Add("ConflictCheck");
                On.iTween.ConflictCheck += ConflictCheck;
            }
        }

        internal static event Delegates.ConflictCheck_BeforeArgs _beforeConflictCheck;
        internal static event Delegates.ConflictCheck_AfterArgs _afterConflictCheck;

        private static void ConflictCheck(On.iTween.orig_ConflictCheck orig, iTween self)
        {
            Delegates.Params_ConflictCheck @params = new()
            {
                self = self
            };
            if (_beforeConflictCheck != null)
                foreach (Delegates.ConflictCheck_BeforeArgs toInvoke in _beforeConflictCheck.GetInvocationList())
                    try
                    {
                        _beforeConflictCheck?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterConflictCheck != null)
                foreach (Delegates.ConflictCheck_AfterArgs toInvoke in _afterConflictCheck.GetInvocationList())
                    try
                    {
                        _afterConflictCheck.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEnableKinematic()
        {
            if (!HookedList.Contains("EnableKinematic"))
            {
                HookedList.Add("EnableKinematic");
                On.iTween.EnableKinematic += EnableKinematic;
            }
        }

        internal static event Delegates.EnableKinematic_BeforeArgs _beforeEnableKinematic;
        internal static event Delegates.EnableKinematic_AfterArgs _afterEnableKinematic;

        private static void EnableKinematic(On.iTween.orig_EnableKinematic orig, iTween self)
        {
            Delegates.Params_EnableKinematic @params = new()
            {
                self = self
            };
            if (_beforeEnableKinematic != null)
                foreach (Delegates.EnableKinematic_BeforeArgs toInvoke in _beforeEnableKinematic.GetInvocationList())
                    try
                    {
                        _beforeEnableKinematic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEnableKinematic != null)
                foreach (Delegates.EnableKinematic_AfterArgs toInvoke in _afterEnableKinematic.GetInvocationList())
                    try
                    {
                        _afterEnableKinematic.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDisableKinematic()
        {
            if (!HookedList.Contains("DisableKinematic"))
            {
                HookedList.Add("DisableKinematic");
                On.iTween.DisableKinematic += DisableKinematic;
            }
        }

        internal static event Delegates.DisableKinematic_BeforeArgs _beforeDisableKinematic;
        internal static event Delegates.DisableKinematic_AfterArgs _afterDisableKinematic;

        private static void DisableKinematic(On.iTween.orig_DisableKinematic orig, iTween self)
        {
            Delegates.Params_DisableKinematic @params = new()
            {
                self = self
            };
            if (_beforeDisableKinematic != null)
                foreach (Delegates.DisableKinematic_BeforeArgs toInvoke in _beforeDisableKinematic.GetInvocationList())
                    try
                    {
                        _beforeDisableKinematic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDisableKinematic != null)
                foreach (Delegates.DisableKinematic_AfterArgs toInvoke in _afterDisableKinematic.GetInvocationList())
                    try
                    {
                        _afterDisableKinematic.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResumeDelay()
        {
            if (!HookedList.Contains("ResumeDelay"))
            {
                HookedList.Add("ResumeDelay");
                On.iTween.ResumeDelay += ResumeDelay;
            }
        }

        internal static event Delegates.ResumeDelay_BeforeArgs _beforeResumeDelay;
        internal static event Delegates.ResumeDelay_AfterArgs _afterResumeDelay;

        private static void ResumeDelay(On.iTween.orig_ResumeDelay orig, iTween self)
        {
            Delegates.Params_ResumeDelay @params = new()
            {
                self = self
            };
            if (_beforeResumeDelay != null)
                foreach (Delegates.ResumeDelay_BeforeArgs toInvoke in _beforeResumeDelay.GetInvocationList())
                    try
                    {
                        _beforeResumeDelay?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResumeDelay != null)
                foreach (Delegates.ResumeDelay_AfterArgs toInvoke in _afterResumeDelay.GetInvocationList())
                    try
                    {
                        _afterResumeDelay.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hooklinear()
        {
            if (!HookedList.Contains("linear"))
            {
                HookedList.Add("linear");
                On.iTween.linear += linear;
            }
        }

        internal static event Delegates.linear_BeforeArgs _beforelinear;
        internal static event Delegates.linear_AfterArgs _afterlinear;

        private static float linear(On.iTween.orig_linear orig, iTween self, float start, float end, float value)
        {
            Delegates.Params_linear @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforelinear != null)
                foreach (Delegates.linear_BeforeArgs toInvoke in _beforelinear.GetInvocationList())
                    try
                    {
                        _beforelinear?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_afterlinear != null)
                foreach (Delegates.linear_AfterArgs toInvoke in _afterlinear.GetInvocationList())
                    try
                    {
                        retVal = _afterlinear.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookclerp()
        {
            if (!HookedList.Contains("clerp"))
            {
                HookedList.Add("clerp");
                On.iTween.clerp += clerp;
            }
        }

        internal static event Delegates.clerp_BeforeArgs _beforeclerp;
        internal static event Delegates.clerp_AfterArgs _afterclerp;

        private static float clerp(On.iTween.orig_clerp orig, iTween self, float start, float end, float value)
        {
            Delegates.Params_clerp @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeclerp != null)
                foreach (Delegates.clerp_BeforeArgs toInvoke in _beforeclerp.GetInvocationList())
                    try
                    {
                        _beforeclerp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_afterclerp != null)
                foreach (Delegates.clerp_AfterArgs toInvoke in _afterclerp.GetInvocationList())
                    try
                    {
                        retVal = _afterclerp.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookspring()
        {
            if (!HookedList.Contains("spring"))
            {
                HookedList.Add("spring");
                On.iTween.spring += spring;
            }
        }

        internal static event Delegates.spring_BeforeArgs _beforespring;
        internal static event Delegates.spring_AfterArgs _afterspring;

        private static float spring(On.iTween.orig_spring orig, iTween self, float start, float end, float value)
        {
            Delegates.Params_spring @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforespring != null)
                foreach (Delegates.spring_BeforeArgs toInvoke in _beforespring.GetInvocationList())
                    try
                    {
                        _beforespring?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_afterspring != null)
                foreach (Delegates.spring_AfterArgs toInvoke in _afterspring.GetInvocationList())
                    try
                    {
                        retVal = _afterspring.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInQuad()
        {
            if (!HookedList.Contains("easeInQuad"))
            {
                HookedList.Add("easeInQuad");
                On.iTween.easeInQuad += easeInQuad;
            }
        }

        internal static event Delegates.easeInQuad_BeforeArgs _beforeeaseInQuad;
        internal static event Delegates.easeInQuad_AfterArgs _aftereaseInQuad;

        private static float easeInQuad(On.iTween.orig_easeInQuad orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInQuad @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInQuad != null)
                foreach (Delegates.easeInQuad_BeforeArgs toInvoke in _beforeeaseInQuad.GetInvocationList())
                    try
                    {
                        _beforeeaseInQuad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInQuad != null)
                foreach (Delegates.easeInQuad_AfterArgs toInvoke in _aftereaseInQuad.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInQuad.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutQuad()
        {
            if (!HookedList.Contains("easeOutQuad"))
            {
                HookedList.Add("easeOutQuad");
                On.iTween.easeOutQuad += easeOutQuad;
            }
        }

        internal static event Delegates.easeOutQuad_BeforeArgs _beforeeaseOutQuad;
        internal static event Delegates.easeOutQuad_AfterArgs _aftereaseOutQuad;

        private static float easeOutQuad(On.iTween.orig_easeOutQuad orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutQuad @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutQuad != null)
                foreach (Delegates.easeOutQuad_BeforeArgs toInvoke in _beforeeaseOutQuad.GetInvocationList())
                    try
                    {
                        _beforeeaseOutQuad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutQuad != null)
                foreach (Delegates.easeOutQuad_AfterArgs toInvoke in _aftereaseOutQuad.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutQuad.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutQuad()
        {
            if (!HookedList.Contains("easeInOutQuad"))
            {
                HookedList.Add("easeInOutQuad");
                On.iTween.easeInOutQuad += easeInOutQuad;
            }
        }

        internal static event Delegates.easeInOutQuad_BeforeArgs _beforeeaseInOutQuad;
        internal static event Delegates.easeInOutQuad_AfterArgs _aftereaseInOutQuad;

        private static float easeInOutQuad(On.iTween.orig_easeInOutQuad orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutQuad @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutQuad != null)
                foreach (Delegates.easeInOutQuad_BeforeArgs toInvoke in _beforeeaseInOutQuad.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutQuad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutQuad != null)
                foreach (Delegates.easeInOutQuad_AfterArgs toInvoke in _aftereaseInOutQuad.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutQuad.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInCubic()
        {
            if (!HookedList.Contains("easeInCubic"))
            {
                HookedList.Add("easeInCubic");
                On.iTween.easeInCubic += easeInCubic;
            }
        }

        internal static event Delegates.easeInCubic_BeforeArgs _beforeeaseInCubic;
        internal static event Delegates.easeInCubic_AfterArgs _aftereaseInCubic;

        private static float easeInCubic(On.iTween.orig_easeInCubic orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInCubic @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInCubic != null)
                foreach (Delegates.easeInCubic_BeforeArgs toInvoke in _beforeeaseInCubic.GetInvocationList())
                    try
                    {
                        _beforeeaseInCubic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInCubic != null)
                foreach (Delegates.easeInCubic_AfterArgs toInvoke in _aftereaseInCubic.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInCubic.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutCubic()
        {
            if (!HookedList.Contains("easeOutCubic"))
            {
                HookedList.Add("easeOutCubic");
                On.iTween.easeOutCubic += easeOutCubic;
            }
        }

        internal static event Delegates.easeOutCubic_BeforeArgs _beforeeaseOutCubic;
        internal static event Delegates.easeOutCubic_AfterArgs _aftereaseOutCubic;

        private static float easeOutCubic(On.iTween.orig_easeOutCubic orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutCubic @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutCubic != null)
                foreach (Delegates.easeOutCubic_BeforeArgs toInvoke in _beforeeaseOutCubic.GetInvocationList())
                    try
                    {
                        _beforeeaseOutCubic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutCubic != null)
                foreach (Delegates.easeOutCubic_AfterArgs toInvoke in _aftereaseOutCubic.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutCubic.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutCubic()
        {
            if (!HookedList.Contains("easeInOutCubic"))
            {
                HookedList.Add("easeInOutCubic");
                On.iTween.easeInOutCubic += easeInOutCubic;
            }
        }

        internal static event Delegates.easeInOutCubic_BeforeArgs _beforeeaseInOutCubic;
        internal static event Delegates.easeInOutCubic_AfterArgs _aftereaseInOutCubic;

        private static float easeInOutCubic(On.iTween.orig_easeInOutCubic orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutCubic @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutCubic != null)
                foreach (Delegates.easeInOutCubic_BeforeArgs toInvoke in _beforeeaseInOutCubic.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutCubic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutCubic != null)
                foreach (Delegates.easeInOutCubic_AfterArgs toInvoke in _aftereaseInOutCubic.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutCubic.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInQuart()
        {
            if (!HookedList.Contains("easeInQuart"))
            {
                HookedList.Add("easeInQuart");
                On.iTween.easeInQuart += easeInQuart;
            }
        }

        internal static event Delegates.easeInQuart_BeforeArgs _beforeeaseInQuart;
        internal static event Delegates.easeInQuart_AfterArgs _aftereaseInQuart;

        private static float easeInQuart(On.iTween.orig_easeInQuart orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInQuart @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInQuart != null)
                foreach (Delegates.easeInQuart_BeforeArgs toInvoke in _beforeeaseInQuart.GetInvocationList())
                    try
                    {
                        _beforeeaseInQuart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInQuart != null)
                foreach (Delegates.easeInQuart_AfterArgs toInvoke in _aftereaseInQuart.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInQuart.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutQuart()
        {
            if (!HookedList.Contains("easeOutQuart"))
            {
                HookedList.Add("easeOutQuart");
                On.iTween.easeOutQuart += easeOutQuart;
            }
        }

        internal static event Delegates.easeOutQuart_BeforeArgs _beforeeaseOutQuart;
        internal static event Delegates.easeOutQuart_AfterArgs _aftereaseOutQuart;

        private static float easeOutQuart(On.iTween.orig_easeOutQuart orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutQuart @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutQuart != null)
                foreach (Delegates.easeOutQuart_BeforeArgs toInvoke in _beforeeaseOutQuart.GetInvocationList())
                    try
                    {
                        _beforeeaseOutQuart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutQuart != null)
                foreach (Delegates.easeOutQuart_AfterArgs toInvoke in _aftereaseOutQuart.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutQuart.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutQuart()
        {
            if (!HookedList.Contains("easeInOutQuart"))
            {
                HookedList.Add("easeInOutQuart");
                On.iTween.easeInOutQuart += easeInOutQuart;
            }
        }

        internal static event Delegates.easeInOutQuart_BeforeArgs _beforeeaseInOutQuart;
        internal static event Delegates.easeInOutQuart_AfterArgs _aftereaseInOutQuart;

        private static float easeInOutQuart(On.iTween.orig_easeInOutQuart orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutQuart @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutQuart != null)
                foreach (Delegates.easeInOutQuart_BeforeArgs toInvoke in _beforeeaseInOutQuart.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutQuart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutQuart != null)
                foreach (Delegates.easeInOutQuart_AfterArgs toInvoke in _aftereaseInOutQuart.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutQuart.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInQuint()
        {
            if (!HookedList.Contains("easeInQuint"))
            {
                HookedList.Add("easeInQuint");
                On.iTween.easeInQuint += easeInQuint;
            }
        }

        internal static event Delegates.easeInQuint_BeforeArgs _beforeeaseInQuint;
        internal static event Delegates.easeInQuint_AfterArgs _aftereaseInQuint;

        private static float easeInQuint(On.iTween.orig_easeInQuint orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInQuint @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInQuint != null)
                foreach (Delegates.easeInQuint_BeforeArgs toInvoke in _beforeeaseInQuint.GetInvocationList())
                    try
                    {
                        _beforeeaseInQuint?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInQuint != null)
                foreach (Delegates.easeInQuint_AfterArgs toInvoke in _aftereaseInQuint.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInQuint.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutQuint()
        {
            if (!HookedList.Contains("easeOutQuint"))
            {
                HookedList.Add("easeOutQuint");
                On.iTween.easeOutQuint += easeOutQuint;
            }
        }

        internal static event Delegates.easeOutQuint_BeforeArgs _beforeeaseOutQuint;
        internal static event Delegates.easeOutQuint_AfterArgs _aftereaseOutQuint;

        private static float easeOutQuint(On.iTween.orig_easeOutQuint orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutQuint @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutQuint != null)
                foreach (Delegates.easeOutQuint_BeforeArgs toInvoke in _beforeeaseOutQuint.GetInvocationList())
                    try
                    {
                        _beforeeaseOutQuint?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutQuint != null)
                foreach (Delegates.easeOutQuint_AfterArgs toInvoke in _aftereaseOutQuint.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutQuint.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutQuint()
        {
            if (!HookedList.Contains("easeInOutQuint"))
            {
                HookedList.Add("easeInOutQuint");
                On.iTween.easeInOutQuint += easeInOutQuint;
            }
        }

        internal static event Delegates.easeInOutQuint_BeforeArgs _beforeeaseInOutQuint;
        internal static event Delegates.easeInOutQuint_AfterArgs _aftereaseInOutQuint;

        private static float easeInOutQuint(On.iTween.orig_easeInOutQuint orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutQuint @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutQuint != null)
                foreach (Delegates.easeInOutQuint_BeforeArgs toInvoke in _beforeeaseInOutQuint.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutQuint?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutQuint != null)
                foreach (Delegates.easeInOutQuint_AfterArgs toInvoke in _aftereaseInOutQuint.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutQuint.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInSine()
        {
            if (!HookedList.Contains("easeInSine"))
            {
                HookedList.Add("easeInSine");
                On.iTween.easeInSine += easeInSine;
            }
        }

        internal static event Delegates.easeInSine_BeforeArgs _beforeeaseInSine;
        internal static event Delegates.easeInSine_AfterArgs _aftereaseInSine;

        private static float easeInSine(On.iTween.orig_easeInSine orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInSine @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInSine != null)
                foreach (Delegates.easeInSine_BeforeArgs toInvoke in _beforeeaseInSine.GetInvocationList())
                    try
                    {
                        _beforeeaseInSine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInSine != null)
                foreach (Delegates.easeInSine_AfterArgs toInvoke in _aftereaseInSine.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInSine.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutSine()
        {
            if (!HookedList.Contains("easeOutSine"))
            {
                HookedList.Add("easeOutSine");
                On.iTween.easeOutSine += easeOutSine;
            }
        }

        internal static event Delegates.easeOutSine_BeforeArgs _beforeeaseOutSine;
        internal static event Delegates.easeOutSine_AfterArgs _aftereaseOutSine;

        private static float easeOutSine(On.iTween.orig_easeOutSine orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutSine @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutSine != null)
                foreach (Delegates.easeOutSine_BeforeArgs toInvoke in _beforeeaseOutSine.GetInvocationList())
                    try
                    {
                        _beforeeaseOutSine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutSine != null)
                foreach (Delegates.easeOutSine_AfterArgs toInvoke in _aftereaseOutSine.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutSine.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutSine()
        {
            if (!HookedList.Contains("easeInOutSine"))
            {
                HookedList.Add("easeInOutSine");
                On.iTween.easeInOutSine += easeInOutSine;
            }
        }

        internal static event Delegates.easeInOutSine_BeforeArgs _beforeeaseInOutSine;
        internal static event Delegates.easeInOutSine_AfterArgs _aftereaseInOutSine;

        private static float easeInOutSine(On.iTween.orig_easeInOutSine orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutSine @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutSine != null)
                foreach (Delegates.easeInOutSine_BeforeArgs toInvoke in _beforeeaseInOutSine.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutSine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutSine != null)
                foreach (Delegates.easeInOutSine_AfterArgs toInvoke in _aftereaseInOutSine.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutSine.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInExpo()
        {
            if (!HookedList.Contains("easeInExpo"))
            {
                HookedList.Add("easeInExpo");
                On.iTween.easeInExpo += easeInExpo;
            }
        }

        internal static event Delegates.easeInExpo_BeforeArgs _beforeeaseInExpo;
        internal static event Delegates.easeInExpo_AfterArgs _aftereaseInExpo;

        private static float easeInExpo(On.iTween.orig_easeInExpo orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInExpo @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInExpo != null)
                foreach (Delegates.easeInExpo_BeforeArgs toInvoke in _beforeeaseInExpo.GetInvocationList())
                    try
                    {
                        _beforeeaseInExpo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInExpo != null)
                foreach (Delegates.easeInExpo_AfterArgs toInvoke in _aftereaseInExpo.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInExpo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutExpo()
        {
            if (!HookedList.Contains("easeOutExpo"))
            {
                HookedList.Add("easeOutExpo");
                On.iTween.easeOutExpo += easeOutExpo;
            }
        }

        internal static event Delegates.easeOutExpo_BeforeArgs _beforeeaseOutExpo;
        internal static event Delegates.easeOutExpo_AfterArgs _aftereaseOutExpo;

        private static float easeOutExpo(On.iTween.orig_easeOutExpo orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutExpo @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutExpo != null)
                foreach (Delegates.easeOutExpo_BeforeArgs toInvoke in _beforeeaseOutExpo.GetInvocationList())
                    try
                    {
                        _beforeeaseOutExpo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutExpo != null)
                foreach (Delegates.easeOutExpo_AfterArgs toInvoke in _aftereaseOutExpo.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutExpo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutExpo()
        {
            if (!HookedList.Contains("easeInOutExpo"))
            {
                HookedList.Add("easeInOutExpo");
                On.iTween.easeInOutExpo += easeInOutExpo;
            }
        }

        internal static event Delegates.easeInOutExpo_BeforeArgs _beforeeaseInOutExpo;
        internal static event Delegates.easeInOutExpo_AfterArgs _aftereaseInOutExpo;

        private static float easeInOutExpo(On.iTween.orig_easeInOutExpo orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutExpo @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutExpo != null)
                foreach (Delegates.easeInOutExpo_BeforeArgs toInvoke in _beforeeaseInOutExpo.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutExpo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutExpo != null)
                foreach (Delegates.easeInOutExpo_AfterArgs toInvoke in _aftereaseInOutExpo.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutExpo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInCirc()
        {
            if (!HookedList.Contains("easeInCirc"))
            {
                HookedList.Add("easeInCirc");
                On.iTween.easeInCirc += easeInCirc;
            }
        }

        internal static event Delegates.easeInCirc_BeforeArgs _beforeeaseInCirc;
        internal static event Delegates.easeInCirc_AfterArgs _aftereaseInCirc;

        private static float easeInCirc(On.iTween.orig_easeInCirc orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInCirc @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInCirc != null)
                foreach (Delegates.easeInCirc_BeforeArgs toInvoke in _beforeeaseInCirc.GetInvocationList())
                    try
                    {
                        _beforeeaseInCirc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInCirc != null)
                foreach (Delegates.easeInCirc_AfterArgs toInvoke in _aftereaseInCirc.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInCirc.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutCirc()
        {
            if (!HookedList.Contains("easeOutCirc"))
            {
                HookedList.Add("easeOutCirc");
                On.iTween.easeOutCirc += easeOutCirc;
            }
        }

        internal static event Delegates.easeOutCirc_BeforeArgs _beforeeaseOutCirc;
        internal static event Delegates.easeOutCirc_AfterArgs _aftereaseOutCirc;

        private static float easeOutCirc(On.iTween.orig_easeOutCirc orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutCirc @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutCirc != null)
                foreach (Delegates.easeOutCirc_BeforeArgs toInvoke in _beforeeaseOutCirc.GetInvocationList())
                    try
                    {
                        _beforeeaseOutCirc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutCirc != null)
                foreach (Delegates.easeOutCirc_AfterArgs toInvoke in _aftereaseOutCirc.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutCirc.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutCirc()
        {
            if (!HookedList.Contains("easeInOutCirc"))
            {
                HookedList.Add("easeInOutCirc");
                On.iTween.easeInOutCirc += easeInOutCirc;
            }
        }

        internal static event Delegates.easeInOutCirc_BeforeArgs _beforeeaseInOutCirc;
        internal static event Delegates.easeInOutCirc_AfterArgs _aftereaseInOutCirc;

        private static float easeInOutCirc(On.iTween.orig_easeInOutCirc orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutCirc @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutCirc != null)
                foreach (Delegates.easeInOutCirc_BeforeArgs toInvoke in _beforeeaseInOutCirc.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutCirc?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutCirc != null)
                foreach (Delegates.easeInOutCirc_AfterArgs toInvoke in _aftereaseInOutCirc.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutCirc.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInBounce()
        {
            if (!HookedList.Contains("easeInBounce"))
            {
                HookedList.Add("easeInBounce");
                On.iTween.easeInBounce += easeInBounce;
            }
        }

        internal static event Delegates.easeInBounce_BeforeArgs _beforeeaseInBounce;
        internal static event Delegates.easeInBounce_AfterArgs _aftereaseInBounce;

        private static float easeInBounce(On.iTween.orig_easeInBounce orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInBounce @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInBounce != null)
                foreach (Delegates.easeInBounce_BeforeArgs toInvoke in _beforeeaseInBounce.GetInvocationList())
                    try
                    {
                        _beforeeaseInBounce?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInBounce != null)
                foreach (Delegates.easeInBounce_AfterArgs toInvoke in _aftereaseInBounce.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInBounce.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutBounce()
        {
            if (!HookedList.Contains("easeOutBounce"))
            {
                HookedList.Add("easeOutBounce");
                On.iTween.easeOutBounce += easeOutBounce;
            }
        }

        internal static event Delegates.easeOutBounce_BeforeArgs _beforeeaseOutBounce;
        internal static event Delegates.easeOutBounce_AfterArgs _aftereaseOutBounce;

        private static float easeOutBounce(On.iTween.orig_easeOutBounce orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutBounce @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutBounce != null)
                foreach (Delegates.easeOutBounce_BeforeArgs toInvoke in _beforeeaseOutBounce.GetInvocationList())
                    try
                    {
                        _beforeeaseOutBounce?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutBounce != null)
                foreach (Delegates.easeOutBounce_AfterArgs toInvoke in _aftereaseOutBounce.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutBounce.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutBounce()
        {
            if (!HookedList.Contains("easeInOutBounce"))
            {
                HookedList.Add("easeInOutBounce");
                On.iTween.easeInOutBounce += easeInOutBounce;
            }
        }

        internal static event Delegates.easeInOutBounce_BeforeArgs _beforeeaseInOutBounce;
        internal static event Delegates.easeInOutBounce_AfterArgs _aftereaseInOutBounce;

        private static float easeInOutBounce(On.iTween.orig_easeInOutBounce orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutBounce @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutBounce != null)
                foreach (Delegates.easeInOutBounce_BeforeArgs toInvoke in _beforeeaseInOutBounce.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutBounce?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutBounce != null)
                foreach (Delegates.easeInOutBounce_AfterArgs toInvoke in _aftereaseInOutBounce.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutBounce.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInBack()
        {
            if (!HookedList.Contains("easeInBack"))
            {
                HookedList.Add("easeInBack");
                On.iTween.easeInBack += easeInBack;
            }
        }

        internal static event Delegates.easeInBack_BeforeArgs _beforeeaseInBack;
        internal static event Delegates.easeInBack_AfterArgs _aftereaseInBack;

        private static float easeInBack(On.iTween.orig_easeInBack orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInBack @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInBack != null)
                foreach (Delegates.easeInBack_BeforeArgs toInvoke in _beforeeaseInBack.GetInvocationList())
                    try
                    {
                        _beforeeaseInBack?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInBack != null)
                foreach (Delegates.easeInBack_AfterArgs toInvoke in _aftereaseInBack.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInBack.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutBack()
        {
            if (!HookedList.Contains("easeOutBack"))
            {
                HookedList.Add("easeOutBack");
                On.iTween.easeOutBack += easeOutBack;
            }
        }

        internal static event Delegates.easeOutBack_BeforeArgs _beforeeaseOutBack;
        internal static event Delegates.easeOutBack_AfterArgs _aftereaseOutBack;

        private static float easeOutBack(On.iTween.orig_easeOutBack orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutBack @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutBack != null)
                foreach (Delegates.easeOutBack_BeforeArgs toInvoke in _beforeeaseOutBack.GetInvocationList())
                    try
                    {
                        _beforeeaseOutBack?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutBack != null)
                foreach (Delegates.easeOutBack_AfterArgs toInvoke in _aftereaseOutBack.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutBack.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutBack()
        {
            if (!HookedList.Contains("easeInOutBack"))
            {
                HookedList.Add("easeInOutBack");
                On.iTween.easeInOutBack += easeInOutBack;
            }
        }

        internal static event Delegates.easeInOutBack_BeforeArgs _beforeeaseInOutBack;
        internal static event Delegates.easeInOutBack_AfterArgs _aftereaseInOutBack;

        private static float easeInOutBack(On.iTween.orig_easeInOutBack orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutBack @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutBack != null)
                foreach (Delegates.easeInOutBack_BeforeArgs toInvoke in _beforeeaseInOutBack.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutBack?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutBack != null)
                foreach (Delegates.easeInOutBack_AfterArgs toInvoke in _aftereaseInOutBack.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutBack.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookpunch()
        {
            if (!HookedList.Contains("punch"))
            {
                HookedList.Add("punch");
                On.iTween.punch += punch;
            }
        }

        internal static event Delegates.punch_BeforeArgs _beforepunch;
        internal static event Delegates.punch_AfterArgs _afterpunch;

        private static float punch(On.iTween.orig_punch orig, iTween self, float amplitude, float value)
        {
            Delegates.Params_punch @params = new()
            {
                self = self, amplitude = amplitude, value = value
            };
            if (_beforepunch != null)
                foreach (Delegates.punch_BeforeArgs toInvoke in _beforepunch.GetInvocationList())
                    try
                    {
                        _beforepunch?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amplitude = @params.amplitude;
            value = @params.value;
            var retVal = orig(self, amplitude, value);
            if (_afterpunch != null)
                foreach (Delegates.punch_AfterArgs toInvoke in _afterpunch.GetInvocationList())
                    try
                    {
                        retVal = _afterpunch.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInElastic()
        {
            if (!HookedList.Contains("easeInElastic"))
            {
                HookedList.Add("easeInElastic");
                On.iTween.easeInElastic += easeInElastic;
            }
        }

        internal static event Delegates.easeInElastic_BeforeArgs _beforeeaseInElastic;
        internal static event Delegates.easeInElastic_AfterArgs _aftereaseInElastic;

        private static float easeInElastic(On.iTween.orig_easeInElastic orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInElastic @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInElastic != null)
                foreach (Delegates.easeInElastic_BeforeArgs toInvoke in _beforeeaseInElastic.GetInvocationList())
                    try
                    {
                        _beforeeaseInElastic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInElastic != null)
                foreach (Delegates.easeInElastic_AfterArgs toInvoke in _aftereaseInElastic.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInElastic.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseOutElastic()
        {
            if (!HookedList.Contains("easeOutElastic"))
            {
                HookedList.Add("easeOutElastic");
                On.iTween.easeOutElastic += easeOutElastic;
            }
        }

        internal static event Delegates.easeOutElastic_BeforeArgs _beforeeaseOutElastic;
        internal static event Delegates.easeOutElastic_AfterArgs _aftereaseOutElastic;

        private static float easeOutElastic(On.iTween.orig_easeOutElastic orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeOutElastic @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseOutElastic != null)
                foreach (Delegates.easeOutElastic_BeforeArgs toInvoke in _beforeeaseOutElastic.GetInvocationList())
                    try
                    {
                        _beforeeaseOutElastic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseOutElastic != null)
                foreach (Delegates.easeOutElastic_AfterArgs toInvoke in _aftereaseOutElastic.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseOutElastic.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookeaseInOutElastic()
        {
            if (!HookedList.Contains("easeInOutElastic"))
            {
                HookedList.Add("easeInOutElastic");
                On.iTween.easeInOutElastic += easeInOutElastic;
            }
        }

        internal static event Delegates.easeInOutElastic_BeforeArgs _beforeeaseInOutElastic;
        internal static event Delegates.easeInOutElastic_AfterArgs _aftereaseInOutElastic;

        private static float easeInOutElastic(On.iTween.orig_easeInOutElastic orig, iTween self, float start, float end,
            float value)
        {
            Delegates.Params_easeInOutElastic @params = new()
            {
                self = self, start = start, end = end, value = value
            };
            if (_beforeeaseInOutElastic != null)
                foreach (Delegates.easeInOutElastic_BeforeArgs toInvoke in _beforeeaseInOutElastic.GetInvocationList())
                    try
                    {
                        _beforeeaseInOutElastic?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            start = @params.start;
            end = @params.end;
            value = @params.value;
            var retVal = orig(self, start, end, value);
            if (_aftereaseInOutElastic != null)
                foreach (Delegates.easeInOutElastic_AfterArgs toInvoke in _aftereaseInOutElastic.GetInvocationList())
                    try
                    {
                        retVal = _aftereaseInOutElastic.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyAudioToTargets_AfterArgs(Params_ApplyAudioToTargets args);

        public delegate void ApplyAudioToTargets_BeforeArgs(Params_ApplyAudioToTargets args);

        public delegate void ApplyAudioToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyColorTargets_AfterArgs(Params_ApplyColorTargets args);

        public delegate void ApplyColorTargets_BeforeArgs(Params_ApplyColorTargets args);

        public delegate void ApplyColorTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyColorToTargets_AfterArgs(Params_ApplyColorToTargets args);

        public delegate void ApplyColorToTargets_BeforeArgs(Params_ApplyColorToTargets args);

        public delegate void ApplyColorToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyFloatTargets_AfterArgs(Params_ApplyFloatTargets args);

        public delegate void ApplyFloatTargets_BeforeArgs(Params_ApplyFloatTargets args);

        public delegate void ApplyFloatTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyLookToTargets_AfterArgs(Params_ApplyLookToTargets args);

        public delegate void ApplyLookToTargets_BeforeArgs(Params_ApplyLookToTargets args);

        public delegate void ApplyLookToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyMoveByTargets_AfterArgs(Params_ApplyMoveByTargets args);

        public delegate void ApplyMoveByTargets_BeforeArgs(Params_ApplyMoveByTargets args);

        public delegate void ApplyMoveByTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyMoveToPathTargets_AfterArgs(Params_ApplyMoveToPathTargets args);

        public delegate void ApplyMoveToPathTargets_BeforeArgs(Params_ApplyMoveToPathTargets args);

        public delegate void ApplyMoveToPathTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyMoveToTargets_AfterArgs(Params_ApplyMoveToTargets args);

        public delegate void ApplyMoveToTargets_BeforeArgs(Params_ApplyMoveToTargets args);

        public delegate void ApplyMoveToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyPunchPositionTargets_AfterArgs(Params_ApplyPunchPositionTargets args);

        public delegate void ApplyPunchPositionTargets_BeforeArgs(Params_ApplyPunchPositionTargets args);

        public delegate void ApplyPunchPositionTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyPunchRotationTargets_AfterArgs(Params_ApplyPunchRotationTargets args);

        public delegate void ApplyPunchRotationTargets_BeforeArgs(Params_ApplyPunchRotationTargets args);

        public delegate void ApplyPunchRotationTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyPunchScaleTargets_AfterArgs(Params_ApplyPunchScaleTargets args);

        public delegate void ApplyPunchScaleTargets_BeforeArgs(Params_ApplyPunchScaleTargets args);

        public delegate void ApplyPunchScaleTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyRectTargets_AfterArgs(Params_ApplyRectTargets args);

        public delegate void ApplyRectTargets_BeforeArgs(Params_ApplyRectTargets args);

        public delegate void ApplyRectTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyRotateAddTargets_AfterArgs(Params_ApplyRotateAddTargets args);

        public delegate void ApplyRotateAddTargets_BeforeArgs(Params_ApplyRotateAddTargets args);

        public delegate void ApplyRotateAddTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyRotateToTargets_AfterArgs(Params_ApplyRotateToTargets args);

        public delegate void ApplyRotateToTargets_BeforeArgs(Params_ApplyRotateToTargets args);

        public delegate void ApplyRotateToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyScaleToTargets_AfterArgs(Params_ApplyScaleToTargets args);

        public delegate void ApplyScaleToTargets_BeforeArgs(Params_ApplyScaleToTargets args);

        public delegate void ApplyScaleToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyShakePositionTargets_AfterArgs(Params_ApplyShakePositionTargets args);

        public delegate void ApplyShakePositionTargets_BeforeArgs(Params_ApplyShakePositionTargets args);

        public delegate void ApplyShakePositionTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyShakeRotationTargets_AfterArgs(Params_ApplyShakeRotationTargets args);

        public delegate void ApplyShakeRotationTargets_BeforeArgs(Params_ApplyShakeRotationTargets args);

        public delegate void ApplyShakeRotationTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyShakeScaleTargets_AfterArgs(Params_ApplyShakeScaleTargets args);

        public delegate void ApplyShakeScaleTargets_BeforeArgs(Params_ApplyShakeScaleTargets args);

        public delegate void ApplyShakeScaleTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyStabTargets_AfterArgs(Params_ApplyStabTargets args);

        public delegate void ApplyStabTargets_BeforeArgs(Params_ApplyStabTargets args);

        public delegate void ApplyStabTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyVector2Targets_AfterArgs(Params_ApplyVector2Targets args);

        public delegate void ApplyVector2Targets_BeforeArgs(Params_ApplyVector2Targets args);

        public delegate void ApplyVector2Targets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ApplyVector3Targets_AfterArgs(Params_ApplyVector3Targets args);

        public delegate void ApplyVector3Targets_BeforeArgs(Params_ApplyVector3Targets args);

        public delegate void ApplyVector3Targets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void AudioFrom_GameObject_float_float_float_AfterArgs(
            Params_AudioFrom_GameObject_float_float_float args);

        public delegate void AudioFrom_GameObject_float_float_float_BeforeArgs(
            Params_AudioFrom_GameObject_float_float_float args);

        public delegate void AudioFrom_GameObject_float_float_float_WithArgs(
            Action<GameObject, float, float, float> orig, GameObject target, float volume, float pitch, float time);

        public delegate void AudioFrom_GameObject_Hashtable_AfterArgs(Params_AudioFrom_GameObject_Hashtable args);

        public delegate void AudioFrom_GameObject_Hashtable_BeforeArgs(Params_AudioFrom_GameObject_Hashtable args);

        public delegate void AudioFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void AudioTo_GameObject_float_float_float_AfterArgs(
            Params_AudioTo_GameObject_float_float_float args);

        public delegate void AudioTo_GameObject_float_float_float_BeforeArgs(
            Params_AudioTo_GameObject_float_float_float args);

        public delegate void AudioTo_GameObject_float_float_float_WithArgs(Action<GameObject, float, float, float> orig,
            GameObject target, float volume, float pitch, float time);

        public delegate void AudioTo_GameObject_Hashtable_AfterArgs(Params_AudioTo_GameObject_Hashtable args);

        public delegate void AudioTo_GameObject_Hashtable_BeforeArgs(Params_AudioTo_GameObject_Hashtable args);

        public delegate void AudioTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void AudioUpdate_GameObject_float_float_float_AfterArgs(
            Params_AudioUpdate_GameObject_float_float_float args);

        public delegate void AudioUpdate_GameObject_float_float_float_BeforeArgs(
            Params_AudioUpdate_GameObject_float_float_float args);

        public delegate void AudioUpdate_GameObject_float_float_float_WithArgs(
            Action<GameObject, float, float, float> orig, GameObject target, float volume, float pitch, float time);

        public delegate void AudioUpdate_GameObject_Hashtable_AfterArgs(Params_AudioUpdate_GameObject_Hashtable args);

        public delegate void AudioUpdate_GameObject_Hashtable_BeforeArgs(Params_AudioUpdate_GameObject_Hashtable args);

        public delegate void AudioUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<iTween> orig, iTween self);

        public delegate void CallBack_AfterArgs(Params_CallBack args);

        public delegate void CallBack_BeforeArgs(Params_CallBack args);

        public delegate void CallBack_WithArgs(Action<iTween, string> orig, iTween self, string callbackType);

        public delegate GameObject CameraFadeAdd_AfterArgs(GameObject ret);

        public delegate void CameraFadeAdd_BeforeArgs();

        public delegate GameObject CameraFadeAdd_Texture2D_AfterArgs(Params_CameraFadeAdd_Texture2D args,
            GameObject ret);

        public delegate void CameraFadeAdd_Texture2D_BeforeArgs(Params_CameraFadeAdd_Texture2D args);

        public delegate GameObject CameraFadeAdd_Texture2D_int_AfterArgs(Params_CameraFadeAdd_Texture2D_int args,
            GameObject ret);

        public delegate void CameraFadeAdd_Texture2D_int_BeforeArgs(Params_CameraFadeAdd_Texture2D_int args);

        public delegate GameObject CameraFadeAdd_Texture2D_int_WithArgs(Func<Texture2D, int, GameObject> orig,
            Texture2D texture, int depth);

        public delegate GameObject
            CameraFadeAdd_Texture2D_WithArgs(Func<Texture2D, GameObject> orig, Texture2D texture);

        public delegate GameObject CameraFadeAdd_WithArgs(Func<GameObject> orig);

        public delegate void CameraFadeDepth_AfterArgs(Params_CameraFadeDepth args);

        public delegate void CameraFadeDepth_BeforeArgs(Params_CameraFadeDepth args);

        public delegate void CameraFadeDepth_WithArgs(Action<int> orig, int depth);

        public delegate void CameraFadeDestroy_AfterArgs();

        public delegate void CameraFadeDestroy_BeforeArgs();

        public delegate void CameraFadeDestroy_WithArgs(Action orig);

        public delegate void CameraFadeFrom_float_float_AfterArgs(Params_CameraFadeFrom_float_float args);

        public delegate void CameraFadeFrom_float_float_BeforeArgs(Params_CameraFadeFrom_float_float args);

        public delegate void CameraFadeFrom_float_float_WithArgs(Action<float, float> orig, float amount, float time);

        public delegate void CameraFadeFrom_Hashtable_AfterArgs(Params_CameraFadeFrom_Hashtable args);

        public delegate void CameraFadeFrom_Hashtable_BeforeArgs(Params_CameraFadeFrom_Hashtable args);

        public delegate void CameraFadeFrom_Hashtable_WithArgs(Action<Hashtable> orig, Hashtable args);

        public delegate void CameraFadeSwap_AfterArgs(Params_CameraFadeSwap args);

        public delegate void CameraFadeSwap_BeforeArgs(Params_CameraFadeSwap args);

        public delegate void CameraFadeSwap_WithArgs(Action<Texture2D> orig, Texture2D texture);

        public delegate void CameraFadeTo_float_float_AfterArgs(Params_CameraFadeTo_float_float args);

        public delegate void CameraFadeTo_float_float_BeforeArgs(Params_CameraFadeTo_float_float args);

        public delegate void CameraFadeTo_float_float_WithArgs(Action<float, float> orig, float amount, float time);

        public delegate void CameraFadeTo_Hashtable_AfterArgs(Params_CameraFadeTo_Hashtable args);

        public delegate void CameraFadeTo_Hashtable_BeforeArgs(Params_CameraFadeTo_Hashtable args);

        public delegate void CameraFadeTo_Hashtable_WithArgs(Action<Hashtable> orig, Hashtable args);

        public delegate Texture2D CameraTexture_AfterArgs(Params_CameraTexture args, Texture2D ret);

        public delegate void CameraTexture_BeforeArgs(Params_CameraTexture args);

        public delegate Texture2D CameraTexture_WithArgs(Func<Color, Texture2D> orig, Color color);

        public delegate Hashtable CleanArgs_AfterArgs(Params_CleanArgs args, Hashtable ret);

        public delegate void CleanArgs_BeforeArgs(Params_CleanArgs args);

        public delegate Hashtable CleanArgs_WithArgs(Func<Hashtable, Hashtable> orig, Hashtable args);

        public delegate float clerp_AfterArgs(Params_clerp args, float ret);

        public delegate void clerp_BeforeArgs(Params_clerp args);

        public delegate float clerp_WithArgs(Func<iTween, float, float, float, float> orig, iTween self, float start,
            float end, float value);

        public delegate void ColorFrom_GameObject_Color_float_AfterArgs(Params_ColorFrom_GameObject_Color_float args);

        public delegate void ColorFrom_GameObject_Color_float_BeforeArgs(Params_ColorFrom_GameObject_Color_float args);

        public delegate void ColorFrom_GameObject_Color_float_WithArgs(Action<GameObject, Color, float> orig,
            GameObject target, Color color, float time);

        public delegate void ColorFrom_GameObject_Hashtable_AfterArgs(Params_ColorFrom_GameObject_Hashtable args);

        public delegate void ColorFrom_GameObject_Hashtable_BeforeArgs(Params_ColorFrom_GameObject_Hashtable args);

        public delegate void ColorFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ColorTo_GameObject_Color_float_AfterArgs(Params_ColorTo_GameObject_Color_float args);

        public delegate void ColorTo_GameObject_Color_float_BeforeArgs(Params_ColorTo_GameObject_Color_float args);

        public delegate void ColorTo_GameObject_Color_float_WithArgs(Action<GameObject, Color, float> orig,
            GameObject target, Color color, float time);

        public delegate void ColorTo_GameObject_Hashtable_AfterArgs(Params_ColorTo_GameObject_Hashtable args);

        public delegate void ColorTo_GameObject_Hashtable_BeforeArgs(Params_ColorTo_GameObject_Hashtable args);

        public delegate void ColorTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ColorUpdate_GameObject_Color_float_AfterArgs(
            Params_ColorUpdate_GameObject_Color_float args);

        public delegate void ColorUpdate_GameObject_Color_float_BeforeArgs(
            Params_ColorUpdate_GameObject_Color_float args);

        public delegate void ColorUpdate_GameObject_Color_float_WithArgs(Action<GameObject, Color, float> orig,
            GameObject target, Color color, float time);

        public delegate void ColorUpdate_GameObject_Hashtable_AfterArgs(Params_ColorUpdate_GameObject_Hashtable args);

        public delegate void ColorUpdate_GameObject_Hashtable_BeforeArgs(Params_ColorUpdate_GameObject_Hashtable args);

        public delegate void ColorUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ConflictCheck_AfterArgs(Params_ConflictCheck args);

        public delegate void ConflictCheck_BeforeArgs(Params_ConflictCheck args);

        public delegate void ConflictCheck_WithArgs(Action<iTween> orig, iTween self);

        public delegate int Count_AfterArgs(int ret);

        public delegate void Count_BeforeArgs();

        public delegate int Count_GameObject_AfterArgs(Params_Count_GameObject args, int ret);

        public delegate void Count_GameObject_BeforeArgs(Params_Count_GameObject args);

        public delegate int Count_GameObject_string_AfterArgs(Params_Count_GameObject_string args, int ret);

        public delegate void Count_GameObject_string_BeforeArgs(Params_Count_GameObject_string args);

        public delegate int Count_GameObject_string_WithArgs(Func<GameObject, string, int> orig, GameObject target,
            string type);

        public delegate int Count_GameObject_WithArgs(Func<GameObject, int> orig, GameObject target);

        public delegate int Count_string_AfterArgs(Params_Count_string args, int ret);

        public delegate void Count_string_BeforeArgs(Params_Count_string args);

        public delegate int Count_string_WithArgs(Func<string, int> orig, string type);

        public delegate int Count_WithArgs(Func<int> orig);

        public delegate void DisableKinematic_AfterArgs(Params_DisableKinematic args);

        public delegate void DisableKinematic_BeforeArgs(Params_DisableKinematic args);

        public delegate void DisableKinematic_WithArgs(Action<iTween> orig, iTween self);

        public delegate void Dispose_AfterArgs(Params_Dispose args);

        public delegate void Dispose_BeforeArgs(Params_Dispose args);

        public delegate void Dispose_WithArgs(Action<iTween> orig, iTween self);

        public delegate void DrawLine_Array_AfterArgs(Params_DrawLine_Array args);

        public delegate void DrawLine_Array_BeforeArgs(Params_DrawLine_Array args);

        public delegate void DrawLine_Array_Color_AfterArgs(Params_DrawLine_Array_Color args);

        public delegate void DrawLine_Array_Color_BeforeArgs(Params_DrawLine_Array_Color args);

        public delegate void DrawLine_Array_Color_WithArgs(Action<Vector3[], Color> orig, Vector3[] line, Color color);

        public delegate void DrawLine_Array_WithArgs(Action<Vector3[]> orig, Vector3[] line);

        public delegate void DrawLineGizmos_Array_AfterArgs(Params_DrawLineGizmos_Array args);

        public delegate void DrawLineGizmos_Array_BeforeArgs(Params_DrawLineGizmos_Array args);

        public delegate void DrawLineGizmos_Array_Color_AfterArgs(Params_DrawLineGizmos_Array_Color args);

        public delegate void DrawLineGizmos_Array_Color_BeforeArgs(Params_DrawLineGizmos_Array_Color args);

        public delegate void DrawLineGizmos_Array_Color_WithArgs(Action<Vector3[], Color> orig, Vector3[] line,
            Color color);

        public delegate void DrawLineGizmos_Array_WithArgs(Action<Vector3[]> orig, Vector3[] line);

        public delegate void DrawLineHandles_Array_AfterArgs(Params_DrawLineHandles_Array args);

        public delegate void DrawLineHandles_Array_BeforeArgs(Params_DrawLineHandles_Array args);

        public delegate void DrawLineHandles_Array_Color_AfterArgs(Params_DrawLineHandles_Array_Color args);

        public delegate void DrawLineHandles_Array_Color_BeforeArgs(Params_DrawLineHandles_Array_Color args);

        public delegate void DrawLineHandles_Array_Color_WithArgs(Action<Vector3[], Color> orig, Vector3[] line,
            Color color);

        public delegate void DrawLineHandles_Array_WithArgs(Action<Vector3[]> orig, Vector3[] line);

        public delegate void DrawLineHelper_AfterArgs(Params_DrawLineHelper args);

        public delegate void DrawLineHelper_BeforeArgs(Params_DrawLineHelper args);

        public delegate void DrawLineHelper_WithArgs(Action<Vector3[], Color, string> orig, Vector3[] line, Color color,
            string method);

        public delegate void DrawPath_Array_AfterArgs(Params_DrawPath_Array args);

        public delegate void DrawPath_Array_BeforeArgs(Params_DrawPath_Array args);

        public delegate void DrawPath_Array_Color_AfterArgs(Params_DrawPath_Array_Color args);

        public delegate void DrawPath_Array_Color_BeforeArgs(Params_DrawPath_Array_Color args);

        public delegate void DrawPath_Array_Color_WithArgs(Action<Vector3[], Color> orig, Vector3[] path, Color color);

        public delegate void DrawPath_Array_WithArgs(Action<Vector3[]> orig, Vector3[] path);

        public delegate void DrawPathGizmos_Array_AfterArgs(Params_DrawPathGizmos_Array args);

        public delegate void DrawPathGizmos_Array_BeforeArgs(Params_DrawPathGizmos_Array args);

        public delegate void DrawPathGizmos_Array_Color_AfterArgs(Params_DrawPathGizmos_Array_Color args);

        public delegate void DrawPathGizmos_Array_Color_BeforeArgs(Params_DrawPathGizmos_Array_Color args);

        public delegate void DrawPathGizmos_Array_Color_WithArgs(Action<Vector3[], Color> orig, Vector3[] path,
            Color color);

        public delegate void DrawPathGizmos_Array_WithArgs(Action<Vector3[]> orig, Vector3[] path);

        public delegate void DrawPathHandles_Array_AfterArgs(Params_DrawPathHandles_Array args);

        public delegate void DrawPathHandles_Array_BeforeArgs(Params_DrawPathHandles_Array args);

        public delegate void DrawPathHandles_Array_Color_AfterArgs(Params_DrawPathHandles_Array_Color args);

        public delegate void DrawPathHandles_Array_Color_BeforeArgs(Params_DrawPathHandles_Array_Color args);

        public delegate void DrawPathHandles_Array_Color_WithArgs(Action<Vector3[], Color> orig, Vector3[] path,
            Color color);

        public delegate void DrawPathHandles_Array_WithArgs(Action<Vector3[]> orig, Vector3[] path);

        public delegate void DrawPathHelper_AfterArgs(Params_DrawPathHelper args);

        public delegate void DrawPathHelper_BeforeArgs(Params_DrawPathHelper args);

        public delegate void DrawPathHelper_WithArgs(Action<Vector3[], Color, string> orig, Vector3[] path, Color color,
            string method);

        public delegate float easeInBack_AfterArgs(Params_easeInBack args, float ret);

        public delegate void easeInBack_BeforeArgs(Params_easeInBack args);

        public delegate float easeInBack_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInBounce_AfterArgs(Params_easeInBounce args, float ret);

        public delegate void easeInBounce_BeforeArgs(Params_easeInBounce args);

        public delegate float easeInBounce_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInCirc_AfterArgs(Params_easeInCirc args, float ret);

        public delegate void easeInCirc_BeforeArgs(Params_easeInCirc args);

        public delegate float easeInCirc_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInCubic_AfterArgs(Params_easeInCubic args, float ret);

        public delegate void easeInCubic_BeforeArgs(Params_easeInCubic args);

        public delegate float easeInCubic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInElastic_AfterArgs(Params_easeInElastic args, float ret);

        public delegate void easeInElastic_BeforeArgs(Params_easeInElastic args);

        public delegate float easeInElastic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInExpo_AfterArgs(Params_easeInExpo args, float ret);

        public delegate void easeInExpo_BeforeArgs(Params_easeInExpo args);

        public delegate float easeInExpo_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutBack_AfterArgs(Params_easeInOutBack args, float ret);

        public delegate void easeInOutBack_BeforeArgs(Params_easeInOutBack args);

        public delegate float easeInOutBack_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutBounce_AfterArgs(Params_easeInOutBounce args, float ret);

        public delegate void easeInOutBounce_BeforeArgs(Params_easeInOutBounce args);

        public delegate float easeInOutBounce_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutCirc_AfterArgs(Params_easeInOutCirc args, float ret);

        public delegate void easeInOutCirc_BeforeArgs(Params_easeInOutCirc args);

        public delegate float easeInOutCirc_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutCubic_AfterArgs(Params_easeInOutCubic args, float ret);

        public delegate void easeInOutCubic_BeforeArgs(Params_easeInOutCubic args);

        public delegate float easeInOutCubic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutElastic_AfterArgs(Params_easeInOutElastic args, float ret);

        public delegate void easeInOutElastic_BeforeArgs(Params_easeInOutElastic args);

        public delegate float easeInOutElastic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutExpo_AfterArgs(Params_easeInOutExpo args, float ret);

        public delegate void easeInOutExpo_BeforeArgs(Params_easeInOutExpo args);

        public delegate float easeInOutExpo_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutQuad_AfterArgs(Params_easeInOutQuad args, float ret);

        public delegate void easeInOutQuad_BeforeArgs(Params_easeInOutQuad args);

        public delegate float easeInOutQuad_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutQuart_AfterArgs(Params_easeInOutQuart args, float ret);

        public delegate void easeInOutQuart_BeforeArgs(Params_easeInOutQuart args);

        public delegate float easeInOutQuart_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutQuint_AfterArgs(Params_easeInOutQuint args, float ret);

        public delegate void easeInOutQuint_BeforeArgs(Params_easeInOutQuint args);

        public delegate float easeInOutQuint_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInOutSine_AfterArgs(Params_easeInOutSine args, float ret);

        public delegate void easeInOutSine_BeforeArgs(Params_easeInOutSine args);

        public delegate float easeInOutSine_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInQuad_AfterArgs(Params_easeInQuad args, float ret);

        public delegate void easeInQuad_BeforeArgs(Params_easeInQuad args);

        public delegate float easeInQuad_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInQuart_AfterArgs(Params_easeInQuart args, float ret);

        public delegate void easeInQuart_BeforeArgs(Params_easeInQuart args);

        public delegate float easeInQuart_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInQuint_AfterArgs(Params_easeInQuint args, float ret);

        public delegate void easeInQuint_BeforeArgs(Params_easeInQuint args);

        public delegate float easeInQuint_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeInSine_AfterArgs(Params_easeInSine args, float ret);

        public delegate void easeInSine_BeforeArgs(Params_easeInSine args);

        public delegate float easeInSine_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutBack_AfterArgs(Params_easeOutBack args, float ret);

        public delegate void easeOutBack_BeforeArgs(Params_easeOutBack args);

        public delegate float easeOutBack_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutBounce_AfterArgs(Params_easeOutBounce args, float ret);

        public delegate void easeOutBounce_BeforeArgs(Params_easeOutBounce args);

        public delegate float easeOutBounce_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutCirc_AfterArgs(Params_easeOutCirc args, float ret);

        public delegate void easeOutCirc_BeforeArgs(Params_easeOutCirc args);

        public delegate float easeOutCirc_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutCubic_AfterArgs(Params_easeOutCubic args, float ret);

        public delegate void easeOutCubic_BeforeArgs(Params_easeOutCubic args);

        public delegate float easeOutCubic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutElastic_AfterArgs(Params_easeOutElastic args, float ret);

        public delegate void easeOutElastic_BeforeArgs(Params_easeOutElastic args);

        public delegate float easeOutElastic_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutExpo_AfterArgs(Params_easeOutExpo args, float ret);

        public delegate void easeOutExpo_BeforeArgs(Params_easeOutExpo args);

        public delegate float easeOutExpo_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutQuad_AfterArgs(Params_easeOutQuad args, float ret);

        public delegate void easeOutQuad_BeforeArgs(Params_easeOutQuad args);

        public delegate float easeOutQuad_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutQuart_AfterArgs(Params_easeOutQuart args, float ret);

        public delegate void easeOutQuart_BeforeArgs(Params_easeOutQuart args);

        public delegate float easeOutQuart_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutQuint_AfterArgs(Params_easeOutQuint args, float ret);

        public delegate void easeOutQuint_BeforeArgs(Params_easeOutQuint args);

        public delegate float easeOutQuint_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate float easeOutSine_AfterArgs(Params_easeOutSine args, float ret);

        public delegate void easeOutSine_BeforeArgs(Params_easeOutSine args);

        public delegate float easeOutSine_WithArgs(Func<iTween, float, float, float, float> orig, iTween self,
            float start, float end, float value);

        public delegate void EnableKinematic_AfterArgs(Params_EnableKinematic args);

        public delegate void EnableKinematic_BeforeArgs(Params_EnableKinematic args);

        public delegate void EnableKinematic_WithArgs(Action<iTween> orig, iTween self);

        public delegate void FadeFrom_GameObject_float_float_AfterArgs(Params_FadeFrom_GameObject_float_float args);

        public delegate void FadeFrom_GameObject_float_float_BeforeArgs(Params_FadeFrom_GameObject_float_float args);

        public delegate void FadeFrom_GameObject_float_float_WithArgs(Action<GameObject, float, float> orig,
            GameObject target, float alpha, float time);

        public delegate void FadeFrom_GameObject_Hashtable_AfterArgs(Params_FadeFrom_GameObject_Hashtable args);

        public delegate void FadeFrom_GameObject_Hashtable_BeforeArgs(Params_FadeFrom_GameObject_Hashtable args);

        public delegate void FadeFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void FadeTo_GameObject_float_float_AfterArgs(Params_FadeTo_GameObject_float_float args);

        public delegate void FadeTo_GameObject_float_float_BeforeArgs(Params_FadeTo_GameObject_float_float args);

        public delegate void FadeTo_GameObject_float_float_WithArgs(Action<GameObject, float, float> orig,
            GameObject target, float alpha, float time);

        public delegate void FadeTo_GameObject_Hashtable_AfterArgs(Params_FadeTo_GameObject_Hashtable args);

        public delegate void FadeTo_GameObject_Hashtable_BeforeArgs(Params_FadeTo_GameObject_Hashtable args);

        public delegate void FadeTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig, GameObject target,
            Hashtable args);

        public delegate void FadeUpdate_GameObject_float_float_AfterArgs(Params_FadeUpdate_GameObject_float_float args);

        public delegate void
            FadeUpdate_GameObject_float_float_BeforeArgs(Params_FadeUpdate_GameObject_float_float args);

        public delegate void FadeUpdate_GameObject_float_float_WithArgs(Action<GameObject, float, float> orig,
            GameObject target, float alpha, float time);

        public delegate void FadeUpdate_GameObject_Hashtable_AfterArgs(Params_FadeUpdate_GameObject_Hashtable args);

        public delegate void FadeUpdate_GameObject_Hashtable_BeforeArgs(Params_FadeUpdate_GameObject_Hashtable args);

        public delegate void FadeUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<iTween> orig, iTween self);

        public delegate float FloatUpdate_AfterArgs(Params_FloatUpdate args, float ret);

        public delegate void FloatUpdate_BeforeArgs(Params_FloatUpdate args);

        public delegate float FloatUpdate_WithArgs(Func<float, float, float, float> orig, float currentValue,
            float targetValue, float speed);

        public delegate void GenerateAudioToTargets_AfterArgs(Params_GenerateAudioToTargets args);

        public delegate void GenerateAudioToTargets_BeforeArgs(Params_GenerateAudioToTargets args);

        public delegate void GenerateAudioToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateColorTargets_AfterArgs(Params_GenerateColorTargets args);

        public delegate void GenerateColorTargets_BeforeArgs(Params_GenerateColorTargets args);

        public delegate void GenerateColorTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateColorToTargets_AfterArgs(Params_GenerateColorToTargets args);

        public delegate void GenerateColorToTargets_BeforeArgs(Params_GenerateColorToTargets args);

        public delegate void GenerateColorToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateFloatTargets_AfterArgs(Params_GenerateFloatTargets args);

        public delegate void GenerateFloatTargets_BeforeArgs(Params_GenerateFloatTargets args);

        public delegate void GenerateFloatTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate string GenerateID_AfterArgs(string ret);

        public delegate void GenerateID_BeforeArgs();

        public delegate string GenerateID_WithArgs(Func<string> orig);

        public delegate void GenerateLookToTargets_AfterArgs(Params_GenerateLookToTargets args);

        public delegate void GenerateLookToTargets_BeforeArgs(Params_GenerateLookToTargets args);

        public delegate void GenerateLookToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateMoveByTargets_AfterArgs(Params_GenerateMoveByTargets args);

        public delegate void GenerateMoveByTargets_BeforeArgs(Params_GenerateMoveByTargets args);

        public delegate void GenerateMoveByTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateMoveToPathTargets_AfterArgs(Params_GenerateMoveToPathTargets args);

        public delegate void GenerateMoveToPathTargets_BeforeArgs(Params_GenerateMoveToPathTargets args);

        public delegate void GenerateMoveToPathTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateMoveToTargets_AfterArgs(Params_GenerateMoveToTargets args);

        public delegate void GenerateMoveToTargets_BeforeArgs(Params_GenerateMoveToTargets args);

        public delegate void GenerateMoveToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GeneratePunchPositionTargets_AfterArgs(Params_GeneratePunchPositionTargets args);

        public delegate void GeneratePunchPositionTargets_BeforeArgs(Params_GeneratePunchPositionTargets args);

        public delegate void GeneratePunchPositionTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GeneratePunchRotationTargets_AfterArgs(Params_GeneratePunchRotationTargets args);

        public delegate void GeneratePunchRotationTargets_BeforeArgs(Params_GeneratePunchRotationTargets args);

        public delegate void GeneratePunchRotationTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GeneratePunchScaleTargets_AfterArgs(Params_GeneratePunchScaleTargets args);

        public delegate void GeneratePunchScaleTargets_BeforeArgs(Params_GeneratePunchScaleTargets args);

        public delegate void GeneratePunchScaleTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateRectTargets_AfterArgs(Params_GenerateRectTargets args);

        public delegate void GenerateRectTargets_BeforeArgs(Params_GenerateRectTargets args);

        public delegate void GenerateRectTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateRotateAddTargets_AfterArgs(Params_GenerateRotateAddTargets args);

        public delegate void GenerateRotateAddTargets_BeforeArgs(Params_GenerateRotateAddTargets args);

        public delegate void GenerateRotateAddTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateRotateByTargets_AfterArgs(Params_GenerateRotateByTargets args);

        public delegate void GenerateRotateByTargets_BeforeArgs(Params_GenerateRotateByTargets args);

        public delegate void GenerateRotateByTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateRotateToTargets_AfterArgs(Params_GenerateRotateToTargets args);

        public delegate void GenerateRotateToTargets_BeforeArgs(Params_GenerateRotateToTargets args);

        public delegate void GenerateRotateToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateScaleAddTargets_AfterArgs(Params_GenerateScaleAddTargets args);

        public delegate void GenerateScaleAddTargets_BeforeArgs(Params_GenerateScaleAddTargets args);

        public delegate void GenerateScaleAddTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateScaleByTargets_AfterArgs(Params_GenerateScaleByTargets args);

        public delegate void GenerateScaleByTargets_BeforeArgs(Params_GenerateScaleByTargets args);

        public delegate void GenerateScaleByTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateScaleToTargets_AfterArgs(Params_GenerateScaleToTargets args);

        public delegate void GenerateScaleToTargets_BeforeArgs(Params_GenerateScaleToTargets args);

        public delegate void GenerateScaleToTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateShakePositionTargets_AfterArgs(Params_GenerateShakePositionTargets args);

        public delegate void GenerateShakePositionTargets_BeforeArgs(Params_GenerateShakePositionTargets args);

        public delegate void GenerateShakePositionTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateShakeRotationTargets_AfterArgs(Params_GenerateShakeRotationTargets args);

        public delegate void GenerateShakeRotationTargets_BeforeArgs(Params_GenerateShakeRotationTargets args);

        public delegate void GenerateShakeRotationTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateShakeScaleTargets_AfterArgs(Params_GenerateShakeScaleTargets args);

        public delegate void GenerateShakeScaleTargets_BeforeArgs(Params_GenerateShakeScaleTargets args);

        public delegate void GenerateShakeScaleTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateStabTargets_AfterArgs(Params_GenerateStabTargets args);

        public delegate void GenerateStabTargets_BeforeArgs(Params_GenerateStabTargets args);

        public delegate void GenerateStabTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateTargets_AfterArgs(Params_GenerateTargets args);

        public delegate void GenerateTargets_BeforeArgs(Params_GenerateTargets args);

        public delegate void GenerateTargets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateVector2Targets_AfterArgs(Params_GenerateVector2Targets args);

        public delegate void GenerateVector2Targets_BeforeArgs(Params_GenerateVector2Targets args);

        public delegate void GenerateVector2Targets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GenerateVector3Targets_AfterArgs(Params_GenerateVector3Targets args);

        public delegate void GenerateVector3Targets_BeforeArgs(Params_GenerateVector3Targets args);

        public delegate void GenerateVector3Targets_WithArgs(Action<iTween> orig, iTween self);

        public delegate void GetEasingFunction_AfterArgs(Params_GetEasingFunction args);

        public delegate void GetEasingFunction_BeforeArgs(Params_GetEasingFunction args);

        public delegate void GetEasingFunction_WithArgs(Action<iTween> orig, iTween self);

        public delegate Hashtable Hash_AfterArgs(Params_Hash args, Hashtable ret);

        public delegate void Hash_BeforeArgs(Params_Hash args);

        public delegate Hashtable Hash_WithArgs(Func<object[], Hashtable> orig, object[] args);

        public delegate void Init_AfterArgs(Params_Init args);

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_WithArgs(Action<GameObject> orig, GameObject target);

        public delegate Vector3 Interp_AfterArgs(Params_Interp args, Vector3 ret);

        public delegate void Interp_BeforeArgs(Params_Interp args);

        public delegate Vector3 Interp_WithArgs(Func<Vector3[], float, Vector3> orig, Vector3[] pts, float t);

        public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_WithArgs(Action<iTween> orig, iTween self);

        public delegate void Launch_AfterArgs(Params_Launch args);

        public delegate void Launch_BeforeArgs(Params_Launch args);

        public delegate void Launch_WithArgs(Action<GameObject, Hashtable> orig, GameObject target, Hashtable args);

        public delegate float linear_AfterArgs(Params_linear args, float ret);

        public delegate void linear_BeforeArgs(Params_linear args);

        public delegate float linear_WithArgs(Func<iTween, float, float, float, float> orig, iTween self, float start,
            float end, float value);

        public delegate void LookFrom_GameObject_Hashtable_AfterArgs(Params_LookFrom_GameObject_Hashtable args);

        public delegate void LookFrom_GameObject_Hashtable_BeforeArgs(Params_LookFrom_GameObject_Hashtable args);

        public delegate void LookFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void LookFrom_GameObject_Vector3_float_AfterArgs(Params_LookFrom_GameObject_Vector3_float args);

        public delegate void
            LookFrom_GameObject_Vector3_float_BeforeArgs(Params_LookFrom_GameObject_Vector3_float args);

        public delegate void LookFrom_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 looktarget, float time);

        public delegate void LookTo_GameObject_Hashtable_AfterArgs(Params_LookTo_GameObject_Hashtable args);

        public delegate void LookTo_GameObject_Hashtable_BeforeArgs(Params_LookTo_GameObject_Hashtable args);

        public delegate void LookTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig, GameObject target,
            Hashtable args);

        public delegate void LookTo_GameObject_Vector3_float_AfterArgs(Params_LookTo_GameObject_Vector3_float args);

        public delegate void LookTo_GameObject_Vector3_float_BeforeArgs(Params_LookTo_GameObject_Vector3_float args);

        public delegate void LookTo_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 looktarget, float time);

        public delegate void LookUpdate_GameObject_Hashtable_AfterArgs(Params_LookUpdate_GameObject_Hashtable args);

        public delegate void LookUpdate_GameObject_Hashtable_BeforeArgs(Params_LookUpdate_GameObject_Hashtable args);

        public delegate void LookUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void LookUpdate_GameObject_Vector3_float_AfterArgs(
            Params_LookUpdate_GameObject_Vector3_float args);

        public delegate void LookUpdate_GameObject_Vector3_float_BeforeArgs(
            Params_LookUpdate_GameObject_Vector3_float args);

        public delegate void LookUpdate_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 looktarget, float time);

        public delegate void MoveAdd_GameObject_Hashtable_AfterArgs(Params_MoveAdd_GameObject_Hashtable args);

        public delegate void MoveAdd_GameObject_Hashtable_BeforeArgs(Params_MoveAdd_GameObject_Hashtable args);

        public delegate void MoveAdd_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void MoveAdd_GameObject_Vector3_float_AfterArgs(Params_MoveAdd_GameObject_Vector3_float args);

        public delegate void MoveAdd_GameObject_Vector3_float_BeforeArgs(Params_MoveAdd_GameObject_Vector3_float args);

        public delegate void MoveAdd_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void MoveBy_GameObject_Hashtable_AfterArgs(Params_MoveBy_GameObject_Hashtable args);

        public delegate void MoveBy_GameObject_Hashtable_BeforeArgs(Params_MoveBy_GameObject_Hashtable args);

        public delegate void MoveBy_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig, GameObject target,
            Hashtable args);

        public delegate void MoveBy_GameObject_Vector3_float_AfterArgs(Params_MoveBy_GameObject_Vector3_float args);

        public delegate void MoveBy_GameObject_Vector3_float_BeforeArgs(Params_MoveBy_GameObject_Vector3_float args);

        public delegate void MoveBy_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void MoveFrom_GameObject_Hashtable_AfterArgs(Params_MoveFrom_GameObject_Hashtable args);

        public delegate void MoveFrom_GameObject_Hashtable_BeforeArgs(Params_MoveFrom_GameObject_Hashtable args);

        public delegate void MoveFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void MoveFrom_GameObject_Vector3_float_AfterArgs(Params_MoveFrom_GameObject_Vector3_float args);

        public delegate void
            MoveFrom_GameObject_Vector3_float_BeforeArgs(Params_MoveFrom_GameObject_Vector3_float args);

        public delegate void MoveFrom_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 position, float time);

        public delegate void MoveTo_GameObject_Hashtable_AfterArgs(Params_MoveTo_GameObject_Hashtable args);

        public delegate void MoveTo_GameObject_Hashtable_BeforeArgs(Params_MoveTo_GameObject_Hashtable args);

        public delegate void MoveTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig, GameObject target,
            Hashtable args);

        public delegate void MoveTo_GameObject_Vector3_float_AfterArgs(Params_MoveTo_GameObject_Vector3_float args);

        public delegate void MoveTo_GameObject_Vector3_float_BeforeArgs(Params_MoveTo_GameObject_Vector3_float args);

        public delegate void MoveTo_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 position, float time);

        public delegate void MoveUpdate_GameObject_Hashtable_AfterArgs(Params_MoveUpdate_GameObject_Hashtable args);

        public delegate void MoveUpdate_GameObject_Hashtable_BeforeArgs(Params_MoveUpdate_GameObject_Hashtable args);

        public delegate void MoveUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void MoveUpdate_GameObject_Vector3_float_AfterArgs(
            Params_MoveUpdate_GameObject_Vector3_float args);

        public delegate void MoveUpdate_GameObject_Vector3_float_BeforeArgs(
            Params_MoveUpdate_GameObject_Vector3_float args);

        public delegate void MoveUpdate_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 position, float time);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<iTween> orig, iTween self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<iTween> orig, iTween self);

        public delegate Vector3[] PathControlPointGenerator_AfterArgs(Params_PathControlPointGenerator args,
            Vector3[] ret);

        public delegate void PathControlPointGenerator_BeforeArgs(Params_PathControlPointGenerator args);

        public delegate Vector3[] PathControlPointGenerator_WithArgs(Func<Vector3[], Vector3[]> orig, Vector3[] path);

        public delegate float PathLength_Array_AfterArgs(Params_PathLength_Array args, float ret);

        public delegate void PathLength_Array_BeforeArgs(Params_PathLength_Array args);

        public delegate float PathLength_Array_WithArgs(Func<Transform[], float> orig, Transform[] path);

        public delegate void Pause_AfterArgs();

        public delegate void Pause_BeforeArgs();

        public delegate void Pause_GameObject_AfterArgs(Params_Pause_GameObject args);

        public delegate void Pause_GameObject_BeforeArgs(Params_Pause_GameObject args);

        public delegate void Pause_GameObject_bool_AfterArgs(Params_Pause_GameObject_bool args);

        public delegate void Pause_GameObject_bool_BeforeArgs(Params_Pause_GameObject_bool args);

        public delegate void Pause_GameObject_bool_WithArgs(Action<GameObject, bool> orig, GameObject target,
            bool includechildren);

        public delegate void Pause_GameObject_string_AfterArgs(Params_Pause_GameObject_string args);

        public delegate void Pause_GameObject_string_BeforeArgs(Params_Pause_GameObject_string args);

        public delegate void Pause_GameObject_string_bool_AfterArgs(Params_Pause_GameObject_string_bool args);

        public delegate void Pause_GameObject_string_bool_BeforeArgs(Params_Pause_GameObject_string_bool args);

        public delegate void Pause_GameObject_string_bool_WithArgs(Action<GameObject, string, bool> orig,
            GameObject target, string type, bool includechildren);

        public delegate void Pause_GameObject_string_WithArgs(Action<GameObject, string> orig, GameObject target,
            string type);

        public delegate void Pause_GameObject_WithArgs(Action<GameObject> orig, GameObject target);

        public delegate void Pause_string_AfterArgs(Params_Pause_string args);

        public delegate void Pause_string_BeforeArgs(Params_Pause_string args);

        public delegate void Pause_string_WithArgs(Action<string> orig, string type);

        public delegate void Pause_WithArgs(Action orig);

        public delegate Vector3 PointOnPath_Array_float_AfterArgs(Params_PointOnPath_Array_float args, Vector3 ret);

        public delegate void PointOnPath_Array_float_BeforeArgs(Params_PointOnPath_Array_float args);

        public delegate Vector3 PointOnPath_Array_float_WithArgs(Func<Transform[], float, Vector3> orig,
            Transform[] path, float percent);

        public delegate float punch_AfterArgs(Params_punch args, float ret);

        public delegate void punch_BeforeArgs(Params_punch args);

        public delegate float punch_WithArgs(Func<iTween, float, float, float> orig, iTween self, float amplitude,
            float value);

        public delegate void PunchPosition_GameObject_Hashtable_AfterArgs(
            Params_PunchPosition_GameObject_Hashtable args);

        public delegate void PunchPosition_GameObject_Hashtable_BeforeArgs(
            Params_PunchPosition_GameObject_Hashtable args);

        public delegate void PunchPosition_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void PunchPosition_GameObject_Vector3_float_AfterArgs(
            Params_PunchPosition_GameObject_Vector3_float args);

        public delegate void PunchPosition_GameObject_Vector3_float_BeforeArgs(
            Params_PunchPosition_GameObject_Vector3_float args);

        public delegate void PunchPosition_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void PunchRotation_GameObject_Hashtable_AfterArgs(
            Params_PunchRotation_GameObject_Hashtable args);

        public delegate void PunchRotation_GameObject_Hashtable_BeforeArgs(
            Params_PunchRotation_GameObject_Hashtable args);

        public delegate void PunchRotation_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void PunchRotation_GameObject_Vector3_float_AfterArgs(
            Params_PunchRotation_GameObject_Vector3_float args);

        public delegate void PunchRotation_GameObject_Vector3_float_BeforeArgs(
            Params_PunchRotation_GameObject_Vector3_float args);

        public delegate void PunchRotation_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void PunchScale_GameObject_Hashtable_AfterArgs(Params_PunchScale_GameObject_Hashtable args);

        public delegate void PunchScale_GameObject_Hashtable_BeforeArgs(Params_PunchScale_GameObject_Hashtable args);

        public delegate void PunchScale_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void PunchScale_GameObject_Vector3_float_AfterArgs(
            Params_PunchScale_GameObject_Vector3_float args);

        public delegate void PunchScale_GameObject_Vector3_float_BeforeArgs(
            Params_PunchScale_GameObject_Vector3_float args);

        public delegate void PunchScale_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void PutOnPath_GameObject_Array_float_AfterArgs(Params_PutOnPath_GameObject_Array_float args);

        public delegate void PutOnPath_GameObject_Array_float_BeforeArgs(Params_PutOnPath_GameObject_Array_float args);

        public delegate void PutOnPath_GameObject_Array_float_WithArgs(Action<GameObject, Vector3[], float> orig,
            GameObject target, Vector3[] path, float percent);

        public delegate void PutOnPath_Transform_Array_float_AfterArgs(Params_PutOnPath_Transform_Array_float args);

        public delegate void PutOnPath_Transform_Array_float_BeforeArgs(Params_PutOnPath_Transform_Array_float args);

        public delegate void PutOnPath_Transform_Array_float_WithArgs(Action<Transform, Vector3[], float> orig,
            Transform target, Vector3[] path, float percent);

        public delegate Rect RectUpdate_AfterArgs(Params_RectUpdate args, Rect ret);

        public delegate void RectUpdate_BeforeArgs(Params_RectUpdate args);

        public delegate Rect RectUpdate_WithArgs(Func<Rect, Rect, float, Rect> orig, Rect currentValue,
            Rect targetValue, float speed);

        public delegate void Resume_AfterArgs();

        public delegate void Resume_BeforeArgs();

        public delegate void Resume_GameObject_AfterArgs(Params_Resume_GameObject args);

        public delegate void Resume_GameObject_BeforeArgs(Params_Resume_GameObject args);

        public delegate void Resume_GameObject_bool_AfterArgs(Params_Resume_GameObject_bool args);

        public delegate void Resume_GameObject_bool_BeforeArgs(Params_Resume_GameObject_bool args);

        public delegate void Resume_GameObject_bool_WithArgs(Action<GameObject, bool> orig, GameObject target,
            bool includechildren);

        public delegate void Resume_GameObject_string_AfterArgs(Params_Resume_GameObject_string args);

        public delegate void Resume_GameObject_string_BeforeArgs(Params_Resume_GameObject_string args);

        public delegate void Resume_GameObject_string_bool_AfterArgs(Params_Resume_GameObject_string_bool args);

        public delegate void Resume_GameObject_string_bool_BeforeArgs(Params_Resume_GameObject_string_bool args);

        public delegate void Resume_GameObject_string_bool_WithArgs(Action<GameObject, string, bool> orig,
            GameObject target, string type, bool includechildren);

        public delegate void Resume_GameObject_string_WithArgs(Action<GameObject, string> orig, GameObject target,
            string type);

        public delegate void Resume_GameObject_WithArgs(Action<GameObject> orig, GameObject target);

        public delegate void Resume_string_AfterArgs(Params_Resume_string args);

        public delegate void Resume_string_BeforeArgs(Params_Resume_string args);

        public delegate void Resume_string_WithArgs(Action<string> orig, string type);

        public delegate void Resume_WithArgs(Action orig);

        public delegate void ResumeDelay_AfterArgs(Params_ResumeDelay args);

        public delegate void ResumeDelay_BeforeArgs(Params_ResumeDelay args);

        public delegate void ResumeDelay_WithArgs(Action<iTween> orig, iTween self);

        public delegate void RetrieveArgs_AfterArgs(Params_RetrieveArgs args);

        public delegate void RetrieveArgs_BeforeArgs(Params_RetrieveArgs args);

        public delegate void RetrieveArgs_WithArgs(Action<iTween> orig, iTween self);

        public delegate void RotateAdd_GameObject_Hashtable_AfterArgs(Params_RotateAdd_GameObject_Hashtable args);

        public delegate void RotateAdd_GameObject_Hashtable_BeforeArgs(Params_RotateAdd_GameObject_Hashtable args);

        public delegate void RotateAdd_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void RotateAdd_GameObject_Vector3_float_AfterArgs(
            Params_RotateAdd_GameObject_Vector3_float args);

        public delegate void RotateAdd_GameObject_Vector3_float_BeforeArgs(
            Params_RotateAdd_GameObject_Vector3_float args);

        public delegate void RotateAdd_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void RotateBy_GameObject_Hashtable_AfterArgs(Params_RotateBy_GameObject_Hashtable args);

        public delegate void RotateBy_GameObject_Hashtable_BeforeArgs(Params_RotateBy_GameObject_Hashtable args);

        public delegate void RotateBy_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void RotateBy_GameObject_Vector3_float_AfterArgs(Params_RotateBy_GameObject_Vector3_float args);

        public delegate void
            RotateBy_GameObject_Vector3_float_BeforeArgs(Params_RotateBy_GameObject_Vector3_float args);

        public delegate void RotateBy_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void RotateFrom_GameObject_Hashtable_AfterArgs(Params_RotateFrom_GameObject_Hashtable args);

        public delegate void RotateFrom_GameObject_Hashtable_BeforeArgs(Params_RotateFrom_GameObject_Hashtable args);

        public delegate void RotateFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void RotateFrom_GameObject_Vector3_float_AfterArgs(
            Params_RotateFrom_GameObject_Vector3_float args);

        public delegate void RotateFrom_GameObject_Vector3_float_BeforeArgs(
            Params_RotateFrom_GameObject_Vector3_float args);

        public delegate void RotateFrom_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 rotation, float time);

        public delegate void RotateTo_GameObject_Hashtable_AfterArgs(Params_RotateTo_GameObject_Hashtable args);

        public delegate void RotateTo_GameObject_Hashtable_BeforeArgs(Params_RotateTo_GameObject_Hashtable args);

        public delegate void RotateTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void RotateTo_GameObject_Vector3_float_AfterArgs(Params_RotateTo_GameObject_Vector3_float args);

        public delegate void
            RotateTo_GameObject_Vector3_float_BeforeArgs(Params_RotateTo_GameObject_Vector3_float args);

        public delegate void RotateTo_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 rotation, float time);

        public delegate void RotateUpdate_GameObject_Hashtable_AfterArgs(Params_RotateUpdate_GameObject_Hashtable args);

        public delegate void
            RotateUpdate_GameObject_Hashtable_BeforeArgs(Params_RotateUpdate_GameObject_Hashtable args);

        public delegate void RotateUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void RotateUpdate_GameObject_Vector3_float_AfterArgs(
            Params_RotateUpdate_GameObject_Vector3_float args);

        public delegate void RotateUpdate_GameObject_Vector3_float_BeforeArgs(
            Params_RotateUpdate_GameObject_Vector3_float args);

        public delegate void RotateUpdate_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 rotation, float time);

        public delegate void ScaleAdd_GameObject_Hashtable_AfterArgs(Params_ScaleAdd_GameObject_Hashtable args);

        public delegate void ScaleAdd_GameObject_Hashtable_BeforeArgs(Params_ScaleAdd_GameObject_Hashtable args);

        public delegate void ScaleAdd_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ScaleAdd_GameObject_Vector3_float_AfterArgs(Params_ScaleAdd_GameObject_Vector3_float args);

        public delegate void
            ScaleAdd_GameObject_Vector3_float_BeforeArgs(Params_ScaleAdd_GameObject_Vector3_float args);

        public delegate void ScaleAdd_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void ScaleBy_GameObject_Hashtable_AfterArgs(Params_ScaleBy_GameObject_Hashtable args);

        public delegate void ScaleBy_GameObject_Hashtable_BeforeArgs(Params_ScaleBy_GameObject_Hashtable args);

        public delegate void ScaleBy_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ScaleBy_GameObject_Vector3_float_AfterArgs(Params_ScaleBy_GameObject_Vector3_float args);

        public delegate void ScaleBy_GameObject_Vector3_float_BeforeArgs(Params_ScaleBy_GameObject_Vector3_float args);

        public delegate void ScaleBy_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void ScaleFrom_GameObject_Hashtable_AfterArgs(Params_ScaleFrom_GameObject_Hashtable args);

        public delegate void ScaleFrom_GameObject_Hashtable_BeforeArgs(Params_ScaleFrom_GameObject_Hashtable args);

        public delegate void ScaleFrom_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ScaleFrom_GameObject_Vector3_float_AfterArgs(
            Params_ScaleFrom_GameObject_Vector3_float args);

        public delegate void ScaleFrom_GameObject_Vector3_float_BeforeArgs(
            Params_ScaleFrom_GameObject_Vector3_float args);

        public delegate void ScaleFrom_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 scale, float time);

        public delegate void ScaleTo_GameObject_Hashtable_AfterArgs(Params_ScaleTo_GameObject_Hashtable args);

        public delegate void ScaleTo_GameObject_Hashtable_BeforeArgs(Params_ScaleTo_GameObject_Hashtable args);

        public delegate void ScaleTo_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ScaleTo_GameObject_Vector3_float_AfterArgs(Params_ScaleTo_GameObject_Vector3_float args);

        public delegate void ScaleTo_GameObject_Vector3_float_BeforeArgs(Params_ScaleTo_GameObject_Vector3_float args);

        public delegate void ScaleTo_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 scale, float time);

        public delegate void ScaleUpdate_GameObject_Hashtable_AfterArgs(Params_ScaleUpdate_GameObject_Hashtable args);

        public delegate void ScaleUpdate_GameObject_Hashtable_BeforeArgs(Params_ScaleUpdate_GameObject_Hashtable args);

        public delegate void ScaleUpdate_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ScaleUpdate_GameObject_Vector3_float_AfterArgs(
            Params_ScaleUpdate_GameObject_Vector3_float args);

        public delegate void ScaleUpdate_GameObject_Vector3_float_BeforeArgs(
            Params_ScaleUpdate_GameObject_Vector3_float args);

        public delegate void ScaleUpdate_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 scale, float time);

        public delegate void ShakePosition_GameObject_Hashtable_AfterArgs(
            Params_ShakePosition_GameObject_Hashtable args);

        public delegate void ShakePosition_GameObject_Hashtable_BeforeArgs(
            Params_ShakePosition_GameObject_Hashtable args);

        public delegate void ShakePosition_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ShakePosition_GameObject_Vector3_float_AfterArgs(
            Params_ShakePosition_GameObject_Vector3_float args);

        public delegate void ShakePosition_GameObject_Vector3_float_BeforeArgs(
            Params_ShakePosition_GameObject_Vector3_float args);

        public delegate void ShakePosition_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void ShakeRotation_GameObject_Hashtable_AfterArgs(
            Params_ShakeRotation_GameObject_Hashtable args);

        public delegate void ShakeRotation_GameObject_Hashtable_BeforeArgs(
            Params_ShakeRotation_GameObject_Hashtable args);

        public delegate void ShakeRotation_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ShakeRotation_GameObject_Vector3_float_AfterArgs(
            Params_ShakeRotation_GameObject_Vector3_float args);

        public delegate void ShakeRotation_GameObject_Vector3_float_BeforeArgs(
            Params_ShakeRotation_GameObject_Vector3_float args);

        public delegate void ShakeRotation_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate void ShakeScale_GameObject_Hashtable_AfterArgs(Params_ShakeScale_GameObject_Hashtable args);

        public delegate void ShakeScale_GameObject_Hashtable_BeforeArgs(Params_ShakeScale_GameObject_Hashtable args);

        public delegate void ShakeScale_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig,
            GameObject target, Hashtable args);

        public delegate void ShakeScale_GameObject_Vector3_float_AfterArgs(
            Params_ShakeScale_GameObject_Vector3_float args);

        public delegate void ShakeScale_GameObject_Vector3_float_BeforeArgs(
            Params_ShakeScale_GameObject_Vector3_float args);

        public delegate void ShakeScale_GameObject_Vector3_float_WithArgs(Action<GameObject, Vector3, float> orig,
            GameObject target, Vector3 amount, float time);

        public delegate float spring_AfterArgs(Params_spring args, float ret);

        public delegate void spring_BeforeArgs(Params_spring args);

        public delegate float spring_WithArgs(Func<iTween, float, float, float, float> orig, iTween self, float start,
            float end, float value);

        public delegate void Stab_GameObject_AudioClip_float_AfterArgs(Params_Stab_GameObject_AudioClip_float args);

        public delegate void Stab_GameObject_AudioClip_float_BeforeArgs(Params_Stab_GameObject_AudioClip_float args);

        public delegate void Stab_GameObject_AudioClip_float_WithArgs(Action<GameObject, AudioClip, float> orig,
            GameObject target, AudioClip audioclip, float delay);

        public delegate void Stab_GameObject_Hashtable_AfterArgs(Params_Stab_GameObject_Hashtable args);

        public delegate void Stab_GameObject_Hashtable_BeforeArgs(Params_Stab_GameObject_Hashtable args);

        public delegate void Stab_GameObject_Hashtable_WithArgs(Action<GameObject, Hashtable> orig, GameObject target,
            Hashtable args);

        public delegate IEnumerator Start_AfterArgs(Params_Start args, IEnumerator ret);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate IEnumerator Start_WithArgs(Func<iTween, IEnumerator> orig, iTween self);

        public delegate void Stop_AfterArgs();

        public delegate void Stop_BeforeArgs();

        public delegate void Stop_GameObject_AfterArgs(Params_Stop_GameObject args);

        public delegate void Stop_GameObject_BeforeArgs(Params_Stop_GameObject args);

        public delegate void Stop_GameObject_bool_AfterArgs(Params_Stop_GameObject_bool args);

        public delegate void Stop_GameObject_bool_BeforeArgs(Params_Stop_GameObject_bool args);

        public delegate void Stop_GameObject_bool_WithArgs(Action<GameObject, bool> orig, GameObject target,
            bool includechildren);

        public delegate void Stop_GameObject_string_AfterArgs(Params_Stop_GameObject_string args);

        public delegate void Stop_GameObject_string_BeforeArgs(Params_Stop_GameObject_string args);

        public delegate void Stop_GameObject_string_bool_AfterArgs(Params_Stop_GameObject_string_bool args);

        public delegate void Stop_GameObject_string_bool_BeforeArgs(Params_Stop_GameObject_string_bool args);

        public delegate void Stop_GameObject_string_bool_WithArgs(Action<GameObject, string, bool> orig,
            GameObject target, string type, bool includechildren);

        public delegate void Stop_GameObject_string_WithArgs(Action<GameObject, string> orig, GameObject target,
            string type);

        public delegate void Stop_GameObject_WithArgs(Action<GameObject> orig, GameObject target);

        public delegate void Stop_string_AfterArgs(Params_Stop_string args);

        public delegate void Stop_string_BeforeArgs(Params_Stop_string args);

        public delegate void Stop_string_WithArgs(Action<string> orig, string type);

        public delegate void Stop_WithArgs(Action orig);

        public delegate void StopByName_GameObject_string_AfterArgs(Params_StopByName_GameObject_string args);

        public delegate void StopByName_GameObject_string_BeforeArgs(Params_StopByName_GameObject_string args);

        public delegate void StopByName_GameObject_string_bool_AfterArgs(Params_StopByName_GameObject_string_bool args);

        public delegate void
            StopByName_GameObject_string_bool_BeforeArgs(Params_StopByName_GameObject_string_bool args);

        public delegate void StopByName_GameObject_string_bool_WithArgs(Action<GameObject, string, bool> orig,
            GameObject target, string name, bool includechildren);

        public delegate void StopByName_GameObject_string_WithArgs(Action<GameObject, string> orig, GameObject target,
            string name);

        public delegate void StopByName_string_AfterArgs(Params_StopByName_string args);

        public delegate void StopByName_string_BeforeArgs(Params_StopByName_string args);

        public delegate void StopByName_string_WithArgs(Action<string> orig, string name);

        public delegate void TweenComplete_AfterArgs(Params_TweenComplete args);

        public delegate void TweenComplete_BeforeArgs(Params_TweenComplete args);

        public delegate void TweenComplete_WithArgs(Action<iTween> orig, iTween self);

        public delegate IEnumerator TweenDelay_AfterArgs(Params_TweenDelay args, IEnumerator ret);

        public delegate void TweenDelay_BeforeArgs(Params_TweenDelay args);

        public delegate IEnumerator TweenDelay_WithArgs(Func<iTween, IEnumerator> orig, iTween self);

        public delegate void TweenLoop_AfterArgs(Params_TweenLoop args);

        public delegate void TweenLoop_BeforeArgs(Params_TweenLoop args);

        public delegate void TweenLoop_WithArgs(Action<iTween> orig, iTween self);

        public delegate IEnumerator TweenRestart_AfterArgs(Params_TweenRestart args, IEnumerator ret);

        public delegate void TweenRestart_BeforeArgs(Params_TweenRestart args);

        public delegate IEnumerator TweenRestart_WithArgs(Func<iTween, IEnumerator> orig, iTween self);

        public delegate void TweenStart_AfterArgs(Params_TweenStart args);

        public delegate void TweenStart_BeforeArgs(Params_TweenStart args);

        public delegate void TweenStart_WithArgs(Action<iTween> orig, iTween self);

        public delegate void TweenUpdate_AfterArgs(Params_TweenUpdate args);

        public delegate void TweenUpdate_BeforeArgs(Params_TweenUpdate args);

        public delegate void TweenUpdate_WithArgs(Action<iTween> orig, iTween self);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<iTween> orig, iTween self);

        public delegate void UpdatePercentage_AfterArgs(Params_UpdatePercentage args);

        public delegate void UpdatePercentage_BeforeArgs(Params_UpdatePercentage args);

        public delegate void UpdatePercentage_WithArgs(Action<iTween> orig, iTween self);

        public delegate void ValueTo_AfterArgs(Params_ValueTo args);

        public delegate void ValueTo_BeforeArgs(Params_ValueTo args);

        public delegate void ValueTo_WithArgs(Action<GameObject, Hashtable> orig, GameObject target, Hashtable args);

        public delegate Vector2 Vector2Update_AfterArgs(Params_Vector2Update args, Vector2 ret);

        public delegate void Vector2Update_BeforeArgs(Params_Vector2Update args);

        public delegate Vector2 Vector2Update_WithArgs(Func<Vector2, Vector2, float, Vector2> orig,
            Vector2 currentValue, Vector2 targetValue, float speed);

        public delegate Vector3 Vector3Update_AfterArgs(Params_Vector3Update args, Vector3 ret);

        public delegate void Vector3Update_BeforeArgs(Params_Vector3Update args);

        public delegate Vector3 Vector3Update_WithArgs(Func<Vector3, Vector3, float, Vector3> orig,
            Vector3 currentValue, Vector3 targetValue, float speed);

        public sealed class Params_Init
        {
            public GameObject target;
        }

        public sealed class Params_CameraFadeFrom_float_float
        {
            public float amount;
            public float time;
        }

        public sealed class Params_CameraFadeFrom_Hashtable
        {
            public Hashtable args;
        }

        public sealed class Params_CameraFadeTo_float_float
        {
            public float amount;
            public float time;
        }

        public sealed class Params_CameraFadeTo_Hashtable
        {
            public Hashtable args;
        }

        public sealed class Params_ValueTo
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_FadeFrom_GameObject_float_float
        {
            public float alpha;
            public GameObject target;
            public float time;
        }

        public sealed class Params_FadeFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_FadeTo_GameObject_float_float
        {
            public float alpha;
            public GameObject target;
            public float time;
        }

        public sealed class Params_FadeTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ColorFrom_GameObject_Color_float
        {
            public Color color;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ColorFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ColorTo_GameObject_Color_float
        {
            public Color color;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ColorTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_AudioFrom_GameObject_float_float_float
        {
            public float pitch;
            public GameObject target;
            public float time;
            public float volume;
        }

        public sealed class Params_AudioFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_AudioTo_GameObject_float_float_float
        {
            public float pitch;
            public GameObject target;
            public float time;
            public float volume;
        }

        public sealed class Params_AudioTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_Stab_GameObject_AudioClip_float
        {
            public AudioClip audioclip;
            public float delay;
            public GameObject target;
        }

        public sealed class Params_Stab_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_LookFrom_GameObject_Vector3_float
        {
            public Vector3 looktarget;
            public GameObject target;
            public float time;
        }

        public sealed class Params_LookFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_LookTo_GameObject_Vector3_float
        {
            public Vector3 looktarget;
            public GameObject target;
            public float time;
        }

        public sealed class Params_LookTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_MoveTo_GameObject_Vector3_float
        {
            public Vector3 position;
            public GameObject target;
            public float time;
        }

        public sealed class Params_MoveTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_MoveFrom_GameObject_Vector3_float
        {
            public Vector3 position;
            public GameObject target;
            public float time;
        }

        public sealed class Params_MoveFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_MoveAdd_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_MoveAdd_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_MoveBy_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_MoveBy_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ScaleTo_GameObject_Vector3_float
        {
            public Vector3 scale;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ScaleTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ScaleFrom_GameObject_Vector3_float
        {
            public Vector3 scale;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ScaleFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ScaleAdd_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ScaleAdd_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ScaleBy_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ScaleBy_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_RotateTo_GameObject_Vector3_float
        {
            public Vector3 rotation;
            public GameObject target;
            public float time;
        }

        public sealed class Params_RotateTo_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_RotateFrom_GameObject_Vector3_float
        {
            public Vector3 rotation;
            public GameObject target;
            public float time;
        }

        public sealed class Params_RotateFrom_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_RotateAdd_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_RotateAdd_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_RotateBy_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_RotateBy_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ShakePosition_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ShakePosition_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ShakeScale_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ShakeScale_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ShakeRotation_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ShakeRotation_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_PunchPosition_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_PunchPosition_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_PunchRotation_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_PunchRotation_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_PunchScale_GameObject_Vector3_float
        {
            public Vector3 amount;
            public GameObject target;
            public float time;
        }

        public sealed class Params_PunchScale_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_GenerateTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateRectTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateColorTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateVector3Targets
        {
            public iTween self;
        }

        public sealed class Params_GenerateVector2Targets
        {
            public iTween self;
        }

        public sealed class Params_GenerateFloatTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateColorToTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateAudioToTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateStabTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateLookToTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateMoveToPathTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateMoveToTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateMoveByTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateScaleToTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateScaleByTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateScaleAddTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateRotateToTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateRotateAddTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateRotateByTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateShakePositionTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateShakeScaleTargets
        {
            public iTween self;
        }

        public sealed class Params_GenerateShakeRotationTargets
        {
            public iTween self;
        }

        public sealed class Params_GeneratePunchPositionTargets
        {
            public iTween self;
        }

        public sealed class Params_GeneratePunchRotationTargets
        {
            public iTween self;
        }

        public sealed class Params_GeneratePunchScaleTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyRectTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyColorTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyVector3Targets
        {
            public iTween self;
        }

        public sealed class Params_ApplyVector2Targets
        {
            public iTween self;
        }

        public sealed class Params_ApplyFloatTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyColorToTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyAudioToTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyStabTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyMoveToPathTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyMoveToTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyMoveByTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyScaleToTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyLookToTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyRotateToTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyRotateAddTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyShakePositionTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyShakeScaleTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyShakeRotationTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyPunchPositionTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyPunchRotationTargets
        {
            public iTween self;
        }

        public sealed class Params_ApplyPunchScaleTargets
        {
            public iTween self;
        }

        public sealed class Params_TweenDelay
        {
            public iTween self;
        }

        public sealed class Params_TweenStart
        {
            public iTween self;
        }

        public sealed class Params_TweenRestart
        {
            public iTween self;
        }

        public sealed class Params_TweenUpdate
        {
            public iTween self;
        }

        public sealed class Params_TweenComplete
        {
            public iTween self;
        }

        public sealed class Params_TweenLoop
        {
            public iTween self;
        }

        public sealed class Params_RectUpdate
        {
            public Rect currentValue;
            public float speed;
            public Rect targetValue;
        }

        public sealed class Params_Vector3Update
        {
            public Vector3 currentValue;
            public float speed;
            public Vector3 targetValue;
        }

        public sealed class Params_Vector2Update
        {
            public Vector2 currentValue;
            public float speed;
            public Vector2 targetValue;
        }

        public sealed class Params_FloatUpdate
        {
            public float currentValue;
            public float speed;
            public float targetValue;
        }

        public sealed class Params_FadeUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_FadeUpdate_GameObject_float_float
        {
            public float alpha;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ColorUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ColorUpdate_GameObject_Color_float
        {
            public Color color;
            public GameObject target;
            public float time;
        }

        public sealed class Params_AudioUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_AudioUpdate_GameObject_float_float_float
        {
            public float pitch;
            public GameObject target;
            public float time;
            public float volume;
        }

        public sealed class Params_RotateUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_RotateUpdate_GameObject_Vector3_float
        {
            public Vector3 rotation;
            public GameObject target;
            public float time;
        }

        public sealed class Params_ScaleUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_ScaleUpdate_GameObject_Vector3_float
        {
            public Vector3 scale;
            public GameObject target;
            public float time;
        }

        public sealed class Params_MoveUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_MoveUpdate_GameObject_Vector3_float
        {
            public Vector3 position;
            public GameObject target;
            public float time;
        }

        public sealed class Params_LookUpdate_GameObject_Hashtable
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_LookUpdate_GameObject_Vector3_float
        {
            public Vector3 looktarget;
            public GameObject target;
            public float time;
        }

        public sealed class Params_PathLength_Array
        {
            public Transform[] path;
        }

        public sealed class Params_CameraTexture
        {
            public Color color;
        }

        public sealed class Params_PutOnPath_GameObject_Array_float
        {
            public Vector3[] path;
            public float percent;
            public GameObject target;
        }

        public sealed class Params_PutOnPath_Transform_Array_float
        {
            public Vector3[] path;
            public float percent;
            public Transform target;
        }

        public sealed class Params_PointOnPath_Array_float
        {
            public Transform[] path;
            public float percent;
        }

        public sealed class Params_DrawLine_Array
        {
            public Vector3[] line;
        }

        public sealed class Params_DrawLine_Array_Color
        {
            public Color color;
            public Vector3[] line;
        }

        public sealed class Params_DrawLineGizmos_Array
        {
            public Vector3[] line;
        }

        public sealed class Params_DrawLineGizmos_Array_Color
        {
            public Color color;
            public Vector3[] line;
        }

        public sealed class Params_DrawLineHandles_Array
        {
            public Vector3[] line;
        }

        public sealed class Params_DrawLineHandles_Array_Color
        {
            public Color color;
            public Vector3[] line;
        }

        public sealed class Params_DrawPath_Array
        {
            public Vector3[] path;
        }

        public sealed class Params_DrawPath_Array_Color
        {
            public Color color;
            public Vector3[] path;
        }

        public sealed class Params_DrawPathGizmos_Array
        {
            public Vector3[] path;
        }

        public sealed class Params_DrawPathGizmos_Array_Color
        {
            public Color color;
            public Vector3[] path;
        }

        public sealed class Params_DrawPathHandles_Array
        {
            public Vector3[] path;
        }

        public sealed class Params_DrawPathHandles_Array_Color
        {
            public Color color;
            public Vector3[] path;
        }

        public sealed class Params_CameraFadeDepth
        {
            public int depth;
        }

        public sealed class Params_CameraFadeSwap
        {
            public Texture2D texture;
        }

        public sealed class Params_CameraFadeAdd_Texture2D_int
        {
            public int depth;
            public Texture2D texture;
        }

        public sealed class Params_CameraFadeAdd_Texture2D
        {
            public Texture2D texture;
        }

        public sealed class Params_Resume_GameObject
        {
            public GameObject target;
        }

        public sealed class Params_Resume_GameObject_bool
        {
            public bool includechildren;
            public GameObject target;
        }

        public sealed class Params_Resume_GameObject_string
        {
            public GameObject target;
            public string type;
        }

        public sealed class Params_Resume_GameObject_string_bool
        {
            public bool includechildren;
            public GameObject target;
            public string type;
        }

        public sealed class Params_Resume_string
        {
            public string type;
        }

        public sealed class Params_Pause_GameObject
        {
            public GameObject target;
        }

        public sealed class Params_Pause_GameObject_bool
        {
            public bool includechildren;
            public GameObject target;
        }

        public sealed class Params_Pause_GameObject_string
        {
            public GameObject target;
            public string type;
        }

        public sealed class Params_Pause_GameObject_string_bool
        {
            public bool includechildren;
            public GameObject target;
            public string type;
        }

        public sealed class Params_Pause_string
        {
            public string type;
        }

        public sealed class Params_Count_string
        {
            public string type;
        }

        public sealed class Params_Count_GameObject
        {
            public GameObject target;
        }

        public sealed class Params_Count_GameObject_string
        {
            public GameObject target;
            public string type;
        }

        public sealed class Params_Stop_string
        {
            public string type;
        }

        public sealed class Params_StopByName_string
        {
            public string name;
        }

        public sealed class Params_Stop_GameObject
        {
            public GameObject target;
        }

        public sealed class Params_Stop_GameObject_bool
        {
            public bool includechildren;
            public GameObject target;
        }

        public sealed class Params_Stop_GameObject_string
        {
            public GameObject target;
            public string type;
        }

        public sealed class Params_StopByName_GameObject_string
        {
            public string name;
            public GameObject target;
        }

        public sealed class Params_Stop_GameObject_string_bool
        {
            public bool includechildren;
            public GameObject target;
            public string type;
        }

        public sealed class Params_StopByName_GameObject_string_bool
        {
            public bool includechildren;
            public string name;
            public GameObject target;
        }

        public sealed class Params_Hash
        {
            public object[] args;
        }

        public sealed class Params_Awake
        {
            public iTween self;
        }

        public sealed class Params_Start
        {
            public iTween self;
        }

        public sealed class Params_Update
        {
            public iTween self;
        }

        public sealed class Params_FixedUpdate
        {
            public iTween self;
        }

        public sealed class Params_LateUpdate
        {
            public iTween self;
        }

        public sealed class Params_OnEnable
        {
            public iTween self;
        }

        public sealed class Params_OnDisable
        {
            public iTween self;
        }

        public sealed class Params_DrawLineHelper
        {
            public Color color;
            public Vector3[] line;
            public string method;
        }

        public sealed class Params_DrawPathHelper
        {
            public Color color;
            public string method;
            public Vector3[] path;
        }

        public sealed class Params_PathControlPointGenerator
        {
            public Vector3[] path;
        }

        public sealed class Params_Interp
        {
            public Vector3[] pts;
            public float t;
        }

        public sealed class Params_Launch
        {
            public Hashtable args;
            public GameObject target;
        }

        public sealed class Params_CleanArgs
        {
            public Hashtable args;
        }

        public sealed class Params_RetrieveArgs
        {
            public iTween self;
        }

        public sealed class Params_GetEasingFunction
        {
            public iTween self;
        }

        public sealed class Params_UpdatePercentage
        {
            public iTween self;
        }

        public sealed class Params_CallBack
        {
            public string callbackType;
            public iTween self;
        }

        public sealed class Params_Dispose
        {
            public iTween self;
        }

        public sealed class Params_ConflictCheck
        {
            public iTween self;
        }

        public sealed class Params_EnableKinematic
        {
            public iTween self;
        }

        public sealed class Params_DisableKinematic
        {
            public iTween self;
        }

        public sealed class Params_ResumeDelay
        {
            public iTween self;
        }

        public sealed class Params_linear
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_clerp
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_spring
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInQuad
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutQuad
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutQuad
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInCubic
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutCubic
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutCubic
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInQuart
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutQuart
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutQuart
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInQuint
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutQuint
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutQuint
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInSine
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutSine
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutSine
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInExpo
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutExpo
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutExpo
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInCirc
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutCirc
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutCirc
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInBounce
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutBounce
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutBounce
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInBack
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutBack
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutBack
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_punch
        {
            public float amplitude;
            public iTween self;
            public float value;
        }

        public sealed class Params_easeInElastic
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeOutElastic
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }

        public sealed class Params_easeInOutElastic
        {
            public float end;
            public iTween self;
            public float start;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.CameraFadeFrom_float_float_BeforeArgs CameraFadeFrom_float_float
        {
            add
            {
                HookHandler._beforeCameraFadeFrom_float_float += value;
                HookHandler.HookCameraFadeFrom_float_float();
            }
            remove => HookHandler._beforeCameraFadeFrom_float_float -= value;
        }

        public static event Delegates.CameraFadeFrom_Hashtable_BeforeArgs CameraFadeFrom_Hashtable
        {
            add
            {
                HookHandler._beforeCameraFadeFrom_Hashtable += value;
                HookHandler.HookCameraFadeFrom_Hashtable();
            }
            remove => HookHandler._beforeCameraFadeFrom_Hashtable -= value;
        }

        public static event Delegates.CameraFadeTo_float_float_BeforeArgs CameraFadeTo_float_float
        {
            add
            {
                HookHandler._beforeCameraFadeTo_float_float += value;
                HookHandler.HookCameraFadeTo_float_float();
            }
            remove => HookHandler._beforeCameraFadeTo_float_float -= value;
        }

        public static event Delegates.CameraFadeTo_Hashtable_BeforeArgs CameraFadeTo_Hashtable
        {
            add
            {
                HookHandler._beforeCameraFadeTo_Hashtable += value;
                HookHandler.HookCameraFadeTo_Hashtable();
            }
            remove => HookHandler._beforeCameraFadeTo_Hashtable -= value;
        }

        public static event Delegates.ValueTo_BeforeArgs ValueTo
        {
            add
            {
                HookHandler._beforeValueTo += value;
                HookHandler.HookValueTo();
            }
            remove => HookHandler._beforeValueTo -= value;
        }

        public static event Delegates.FadeFrom_GameObject_float_float_BeforeArgs FadeFrom_GameObject_float_float
        {
            add
            {
                HookHandler._beforeFadeFrom_GameObject_float_float += value;
                HookHandler.HookFadeFrom_GameObject_float_float();
            }
            remove => HookHandler._beforeFadeFrom_GameObject_float_float -= value;
        }

        public static event Delegates.FadeFrom_GameObject_Hashtable_BeforeArgs FadeFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeFadeFrom_GameObject_Hashtable += value;
                HookHandler.HookFadeFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeFadeFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.FadeTo_GameObject_float_float_BeforeArgs FadeTo_GameObject_float_float
        {
            add
            {
                HookHandler._beforeFadeTo_GameObject_float_float += value;
                HookHandler.HookFadeTo_GameObject_float_float();
            }
            remove => HookHandler._beforeFadeTo_GameObject_float_float -= value;
        }

        public static event Delegates.FadeTo_GameObject_Hashtable_BeforeArgs FadeTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeFadeTo_GameObject_Hashtable += value;
                HookHandler.HookFadeTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeFadeTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.ColorFrom_GameObject_Color_float_BeforeArgs ColorFrom_GameObject_Color_float
        {
            add
            {
                HookHandler._beforeColorFrom_GameObject_Color_float += value;
                HookHandler.HookColorFrom_GameObject_Color_float();
            }
            remove => HookHandler._beforeColorFrom_GameObject_Color_float -= value;
        }

        public static event Delegates.ColorFrom_GameObject_Hashtable_BeforeArgs ColorFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeColorFrom_GameObject_Hashtable += value;
                HookHandler.HookColorFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeColorFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.ColorTo_GameObject_Color_float_BeforeArgs ColorTo_GameObject_Color_float
        {
            add
            {
                HookHandler._beforeColorTo_GameObject_Color_float += value;
                HookHandler.HookColorTo_GameObject_Color_float();
            }
            remove => HookHandler._beforeColorTo_GameObject_Color_float -= value;
        }

        public static event Delegates.ColorTo_GameObject_Hashtable_BeforeArgs ColorTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeColorTo_GameObject_Hashtable += value;
                HookHandler.HookColorTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeColorTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.AudioFrom_GameObject_float_float_float_BeforeArgs
            AudioFrom_GameObject_float_float_float
            {
                add
                {
                    HookHandler._beforeAudioFrom_GameObject_float_float_float += value;
                    HookHandler.HookAudioFrom_GameObject_float_float_float();
                }
                remove => HookHandler._beforeAudioFrom_GameObject_float_float_float -= value;
            }

        public static event Delegates.AudioFrom_GameObject_Hashtable_BeforeArgs AudioFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeAudioFrom_GameObject_Hashtable += value;
                HookHandler.HookAudioFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeAudioFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.AudioTo_GameObject_float_float_float_BeforeArgs
            AudioTo_GameObject_float_float_float
            {
                add
                {
                    HookHandler._beforeAudioTo_GameObject_float_float_float += value;
                    HookHandler.HookAudioTo_GameObject_float_float_float();
                }
                remove => HookHandler._beforeAudioTo_GameObject_float_float_float -= value;
            }

        public static event Delegates.AudioTo_GameObject_Hashtable_BeforeArgs AudioTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeAudioTo_GameObject_Hashtable += value;
                HookHandler.HookAudioTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeAudioTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.Stab_GameObject_AudioClip_float_BeforeArgs Stab_GameObject_AudioClip_float
        {
            add
            {
                HookHandler._beforeStab_GameObject_AudioClip_float += value;
                HookHandler.HookStab_GameObject_AudioClip_float();
            }
            remove => HookHandler._beforeStab_GameObject_AudioClip_float -= value;
        }

        public static event Delegates.Stab_GameObject_Hashtable_BeforeArgs Stab_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeStab_GameObject_Hashtable += value;
                HookHandler.HookStab_GameObject_Hashtable();
            }
            remove => HookHandler._beforeStab_GameObject_Hashtable -= value;
        }

        public static event Delegates.LookFrom_GameObject_Vector3_float_BeforeArgs LookFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeLookFrom_GameObject_Vector3_float += value;
                HookHandler.HookLookFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeLookFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.LookFrom_GameObject_Hashtable_BeforeArgs LookFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeLookFrom_GameObject_Hashtable += value;
                HookHandler.HookLookFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeLookFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.LookTo_GameObject_Vector3_float_BeforeArgs LookTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeLookTo_GameObject_Vector3_float += value;
                HookHandler.HookLookTo_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeLookTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.LookTo_GameObject_Hashtable_BeforeArgs LookTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeLookTo_GameObject_Hashtable += value;
                HookHandler.HookLookTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeLookTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveTo_GameObject_Vector3_float_BeforeArgs MoveTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMoveTo_GameObject_Vector3_float += value;
                HookHandler.HookMoveTo_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeMoveTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveTo_GameObject_Hashtable_BeforeArgs MoveTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeMoveTo_GameObject_Hashtable += value;
                HookHandler.HookMoveTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeMoveTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveFrom_GameObject_Vector3_float_BeforeArgs MoveFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMoveFrom_GameObject_Vector3_float += value;
                HookHandler.HookMoveFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeMoveFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveFrom_GameObject_Hashtable_BeforeArgs MoveFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeMoveFrom_GameObject_Hashtable += value;
                HookHandler.HookMoveFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeMoveFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveAdd_GameObject_Vector3_float_BeforeArgs MoveAdd_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMoveAdd_GameObject_Vector3_float += value;
                HookHandler.HookMoveAdd_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeMoveAdd_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveAdd_GameObject_Hashtable_BeforeArgs MoveAdd_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeMoveAdd_GameObject_Hashtable += value;
                HookHandler.HookMoveAdd_GameObject_Hashtable();
            }
            remove => HookHandler._beforeMoveAdd_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveBy_GameObject_Vector3_float_BeforeArgs MoveBy_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMoveBy_GameObject_Vector3_float += value;
                HookHandler.HookMoveBy_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeMoveBy_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveBy_GameObject_Hashtable_BeforeArgs MoveBy_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeMoveBy_GameObject_Hashtable += value;
                HookHandler.HookMoveBy_GameObject_Hashtable();
            }
            remove => HookHandler._beforeMoveBy_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleTo_GameObject_Vector3_float_BeforeArgs ScaleTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeScaleTo_GameObject_Vector3_float += value;
                HookHandler.HookScaleTo_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeScaleTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleTo_GameObject_Hashtable_BeforeArgs ScaleTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeScaleTo_GameObject_Hashtable += value;
                HookHandler.HookScaleTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeScaleTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleFrom_GameObject_Vector3_float_BeforeArgs ScaleFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeScaleFrom_GameObject_Vector3_float += value;
                HookHandler.HookScaleFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeScaleFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleFrom_GameObject_Hashtable_BeforeArgs ScaleFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeScaleFrom_GameObject_Hashtable += value;
                HookHandler.HookScaleFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeScaleFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleAdd_GameObject_Vector3_float_BeforeArgs ScaleAdd_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeScaleAdd_GameObject_Vector3_float += value;
                HookHandler.HookScaleAdd_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeScaleAdd_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleAdd_GameObject_Hashtable_BeforeArgs ScaleAdd_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeScaleAdd_GameObject_Hashtable += value;
                HookHandler.HookScaleAdd_GameObject_Hashtable();
            }
            remove => HookHandler._beforeScaleAdd_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleBy_GameObject_Vector3_float_BeforeArgs ScaleBy_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeScaleBy_GameObject_Vector3_float += value;
                HookHandler.HookScaleBy_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeScaleBy_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleBy_GameObject_Hashtable_BeforeArgs ScaleBy_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeScaleBy_GameObject_Hashtable += value;
                HookHandler.HookScaleBy_GameObject_Hashtable();
            }
            remove => HookHandler._beforeScaleBy_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateTo_GameObject_Vector3_float_BeforeArgs RotateTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeRotateTo_GameObject_Vector3_float += value;
                HookHandler.HookRotateTo_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeRotateTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateTo_GameObject_Hashtable_BeforeArgs RotateTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeRotateTo_GameObject_Hashtable += value;
                HookHandler.HookRotateTo_GameObject_Hashtable();
            }
            remove => HookHandler._beforeRotateTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateFrom_GameObject_Vector3_float_BeforeArgs RotateFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeRotateFrom_GameObject_Vector3_float += value;
                HookHandler.HookRotateFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeRotateFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateFrom_GameObject_Hashtable_BeforeArgs RotateFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeRotateFrom_GameObject_Hashtable += value;
                HookHandler.HookRotateFrom_GameObject_Hashtable();
            }
            remove => HookHandler._beforeRotateFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateAdd_GameObject_Vector3_float_BeforeArgs RotateAdd_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeRotateAdd_GameObject_Vector3_float += value;
                HookHandler.HookRotateAdd_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeRotateAdd_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateAdd_GameObject_Hashtable_BeforeArgs RotateAdd_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeRotateAdd_GameObject_Hashtable += value;
                HookHandler.HookRotateAdd_GameObject_Hashtable();
            }
            remove => HookHandler._beforeRotateAdd_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateBy_GameObject_Vector3_float_BeforeArgs RotateBy_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeRotateBy_GameObject_Vector3_float += value;
                HookHandler.HookRotateBy_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeRotateBy_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateBy_GameObject_Hashtable_BeforeArgs RotateBy_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeRotateBy_GameObject_Hashtable += value;
                HookHandler.HookRotateBy_GameObject_Hashtable();
            }
            remove => HookHandler._beforeRotateBy_GameObject_Hashtable -= value;
        }

        public static event Delegates.ShakePosition_GameObject_Vector3_float_BeforeArgs
            ShakePosition_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._beforeShakePosition_GameObject_Vector3_float += value;
                    HookHandler.HookShakePosition_GameObject_Vector3_float();
                }
                remove => HookHandler._beforeShakePosition_GameObject_Vector3_float -= value;
            }

        public static event Delegates.ShakePosition_GameObject_Hashtable_BeforeArgs ShakePosition_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeShakePosition_GameObject_Hashtable += value;
                HookHandler.HookShakePosition_GameObject_Hashtable();
            }
            remove => HookHandler._beforeShakePosition_GameObject_Hashtable -= value;
        }

        public static event Delegates.ShakeScale_GameObject_Vector3_float_BeforeArgs ShakeScale_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeShakeScale_GameObject_Vector3_float += value;
                HookHandler.HookShakeScale_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeShakeScale_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ShakeScale_GameObject_Hashtable_BeforeArgs ShakeScale_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeShakeScale_GameObject_Hashtable += value;
                HookHandler.HookShakeScale_GameObject_Hashtable();
            }
            remove => HookHandler._beforeShakeScale_GameObject_Hashtable -= value;
        }

        public static event Delegates.ShakeRotation_GameObject_Vector3_float_BeforeArgs
            ShakeRotation_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._beforeShakeRotation_GameObject_Vector3_float += value;
                    HookHandler.HookShakeRotation_GameObject_Vector3_float();
                }
                remove => HookHandler._beforeShakeRotation_GameObject_Vector3_float -= value;
            }

        public static event Delegates.ShakeRotation_GameObject_Hashtable_BeforeArgs ShakeRotation_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeShakeRotation_GameObject_Hashtable += value;
                HookHandler.HookShakeRotation_GameObject_Hashtable();
            }
            remove => HookHandler._beforeShakeRotation_GameObject_Hashtable -= value;
        }

        public static event Delegates.PunchPosition_GameObject_Vector3_float_BeforeArgs
            PunchPosition_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._beforePunchPosition_GameObject_Vector3_float += value;
                    HookHandler.HookPunchPosition_GameObject_Vector3_float();
                }
                remove => HookHandler._beforePunchPosition_GameObject_Vector3_float -= value;
            }

        public static event Delegates.PunchPosition_GameObject_Hashtable_BeforeArgs PunchPosition_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforePunchPosition_GameObject_Hashtable += value;
                HookHandler.HookPunchPosition_GameObject_Hashtable();
            }
            remove => HookHandler._beforePunchPosition_GameObject_Hashtable -= value;
        }

        public static event Delegates.PunchRotation_GameObject_Vector3_float_BeforeArgs
            PunchRotation_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._beforePunchRotation_GameObject_Vector3_float += value;
                    HookHandler.HookPunchRotation_GameObject_Vector3_float();
                }
                remove => HookHandler._beforePunchRotation_GameObject_Vector3_float -= value;
            }

        public static event Delegates.PunchRotation_GameObject_Hashtable_BeforeArgs PunchRotation_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforePunchRotation_GameObject_Hashtable += value;
                HookHandler.HookPunchRotation_GameObject_Hashtable();
            }
            remove => HookHandler._beforePunchRotation_GameObject_Hashtable -= value;
        }

        public static event Delegates.PunchScale_GameObject_Vector3_float_BeforeArgs PunchScale_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforePunchScale_GameObject_Vector3_float += value;
                HookHandler.HookPunchScale_GameObject_Vector3_float();
            }
            remove => HookHandler._beforePunchScale_GameObject_Vector3_float -= value;
        }

        public static event Delegates.PunchScale_GameObject_Hashtable_BeforeArgs PunchScale_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforePunchScale_GameObject_Hashtable += value;
                HookHandler.HookPunchScale_GameObject_Hashtable();
            }
            remove => HookHandler._beforePunchScale_GameObject_Hashtable -= value;
        }

        public static event Delegates.GenerateTargets_BeforeArgs GenerateTargets
        {
            add
            {
                HookHandler._beforeGenerateTargets += value;
                HookHandler.HookGenerateTargets();
            }
            remove => HookHandler._beforeGenerateTargets -= value;
        }

        public static event Delegates.GenerateRectTargets_BeforeArgs GenerateRectTargets
        {
            add
            {
                HookHandler._beforeGenerateRectTargets += value;
                HookHandler.HookGenerateRectTargets();
            }
            remove => HookHandler._beforeGenerateRectTargets -= value;
        }

        public static event Delegates.GenerateColorTargets_BeforeArgs GenerateColorTargets
        {
            add
            {
                HookHandler._beforeGenerateColorTargets += value;
                HookHandler.HookGenerateColorTargets();
            }
            remove => HookHandler._beforeGenerateColorTargets -= value;
        }

        public static event Delegates.GenerateVector3Targets_BeforeArgs GenerateVector3Targets
        {
            add
            {
                HookHandler._beforeGenerateVector3Targets += value;
                HookHandler.HookGenerateVector3Targets();
            }
            remove => HookHandler._beforeGenerateVector3Targets -= value;
        }

        public static event Delegates.GenerateVector2Targets_BeforeArgs GenerateVector2Targets
        {
            add
            {
                HookHandler._beforeGenerateVector2Targets += value;
                HookHandler.HookGenerateVector2Targets();
            }
            remove => HookHandler._beforeGenerateVector2Targets -= value;
        }

        public static event Delegates.GenerateFloatTargets_BeforeArgs GenerateFloatTargets
        {
            add
            {
                HookHandler._beforeGenerateFloatTargets += value;
                HookHandler.HookGenerateFloatTargets();
            }
            remove => HookHandler._beforeGenerateFloatTargets -= value;
        }

        public static event Delegates.GenerateColorToTargets_BeforeArgs GenerateColorToTargets
        {
            add
            {
                HookHandler._beforeGenerateColorToTargets += value;
                HookHandler.HookGenerateColorToTargets();
            }
            remove => HookHandler._beforeGenerateColorToTargets -= value;
        }

        public static event Delegates.GenerateAudioToTargets_BeforeArgs GenerateAudioToTargets
        {
            add
            {
                HookHandler._beforeGenerateAudioToTargets += value;
                HookHandler.HookGenerateAudioToTargets();
            }
            remove => HookHandler._beforeGenerateAudioToTargets -= value;
        }

        public static event Delegates.GenerateStabTargets_BeforeArgs GenerateStabTargets
        {
            add
            {
                HookHandler._beforeGenerateStabTargets += value;
                HookHandler.HookGenerateStabTargets();
            }
            remove => HookHandler._beforeGenerateStabTargets -= value;
        }

        public static event Delegates.GenerateLookToTargets_BeforeArgs GenerateLookToTargets
        {
            add
            {
                HookHandler._beforeGenerateLookToTargets += value;
                HookHandler.HookGenerateLookToTargets();
            }
            remove => HookHandler._beforeGenerateLookToTargets -= value;
        }

        public static event Delegates.GenerateMoveToPathTargets_BeforeArgs GenerateMoveToPathTargets
        {
            add
            {
                HookHandler._beforeGenerateMoveToPathTargets += value;
                HookHandler.HookGenerateMoveToPathTargets();
            }
            remove => HookHandler._beforeGenerateMoveToPathTargets -= value;
        }

        public static event Delegates.GenerateMoveToTargets_BeforeArgs GenerateMoveToTargets
        {
            add
            {
                HookHandler._beforeGenerateMoveToTargets += value;
                HookHandler.HookGenerateMoveToTargets();
            }
            remove => HookHandler._beforeGenerateMoveToTargets -= value;
        }

        public static event Delegates.GenerateMoveByTargets_BeforeArgs GenerateMoveByTargets
        {
            add
            {
                HookHandler._beforeGenerateMoveByTargets += value;
                HookHandler.HookGenerateMoveByTargets();
            }
            remove => HookHandler._beforeGenerateMoveByTargets -= value;
        }

        public static event Delegates.GenerateScaleToTargets_BeforeArgs GenerateScaleToTargets
        {
            add
            {
                HookHandler._beforeGenerateScaleToTargets += value;
                HookHandler.HookGenerateScaleToTargets();
            }
            remove => HookHandler._beforeGenerateScaleToTargets -= value;
        }

        public static event Delegates.GenerateScaleByTargets_BeforeArgs GenerateScaleByTargets
        {
            add
            {
                HookHandler._beforeGenerateScaleByTargets += value;
                HookHandler.HookGenerateScaleByTargets();
            }
            remove => HookHandler._beforeGenerateScaleByTargets -= value;
        }

        public static event Delegates.GenerateScaleAddTargets_BeforeArgs GenerateScaleAddTargets
        {
            add
            {
                HookHandler._beforeGenerateScaleAddTargets += value;
                HookHandler.HookGenerateScaleAddTargets();
            }
            remove => HookHandler._beforeGenerateScaleAddTargets -= value;
        }

        public static event Delegates.GenerateRotateToTargets_BeforeArgs GenerateRotateToTargets
        {
            add
            {
                HookHandler._beforeGenerateRotateToTargets += value;
                HookHandler.HookGenerateRotateToTargets();
            }
            remove => HookHandler._beforeGenerateRotateToTargets -= value;
        }

        public static event Delegates.GenerateRotateAddTargets_BeforeArgs GenerateRotateAddTargets
        {
            add
            {
                HookHandler._beforeGenerateRotateAddTargets += value;
                HookHandler.HookGenerateRotateAddTargets();
            }
            remove => HookHandler._beforeGenerateRotateAddTargets -= value;
        }

        public static event Delegates.GenerateRotateByTargets_BeforeArgs GenerateRotateByTargets
        {
            add
            {
                HookHandler._beforeGenerateRotateByTargets += value;
                HookHandler.HookGenerateRotateByTargets();
            }
            remove => HookHandler._beforeGenerateRotateByTargets -= value;
        }

        public static event Delegates.GenerateShakePositionTargets_BeforeArgs GenerateShakePositionTargets
        {
            add
            {
                HookHandler._beforeGenerateShakePositionTargets += value;
                HookHandler.HookGenerateShakePositionTargets();
            }
            remove => HookHandler._beforeGenerateShakePositionTargets -= value;
        }

        public static event Delegates.GenerateShakeScaleTargets_BeforeArgs GenerateShakeScaleTargets
        {
            add
            {
                HookHandler._beforeGenerateShakeScaleTargets += value;
                HookHandler.HookGenerateShakeScaleTargets();
            }
            remove => HookHandler._beforeGenerateShakeScaleTargets -= value;
        }

        public static event Delegates.GenerateShakeRotationTargets_BeforeArgs GenerateShakeRotationTargets
        {
            add
            {
                HookHandler._beforeGenerateShakeRotationTargets += value;
                HookHandler.HookGenerateShakeRotationTargets();
            }
            remove => HookHandler._beforeGenerateShakeRotationTargets -= value;
        }

        public static event Delegates.GeneratePunchPositionTargets_BeforeArgs GeneratePunchPositionTargets
        {
            add
            {
                HookHandler._beforeGeneratePunchPositionTargets += value;
                HookHandler.HookGeneratePunchPositionTargets();
            }
            remove => HookHandler._beforeGeneratePunchPositionTargets -= value;
        }

        public static event Delegates.GeneratePunchRotationTargets_BeforeArgs GeneratePunchRotationTargets
        {
            add
            {
                HookHandler._beforeGeneratePunchRotationTargets += value;
                HookHandler.HookGeneratePunchRotationTargets();
            }
            remove => HookHandler._beforeGeneratePunchRotationTargets -= value;
        }

        public static event Delegates.GeneratePunchScaleTargets_BeforeArgs GeneratePunchScaleTargets
        {
            add
            {
                HookHandler._beforeGeneratePunchScaleTargets += value;
                HookHandler.HookGeneratePunchScaleTargets();
            }
            remove => HookHandler._beforeGeneratePunchScaleTargets -= value;
        }

        public static event Delegates.ApplyRectTargets_BeforeArgs ApplyRectTargets
        {
            add
            {
                HookHandler._beforeApplyRectTargets += value;
                HookHandler.HookApplyRectTargets();
            }
            remove => HookHandler._beforeApplyRectTargets -= value;
        }

        public static event Delegates.ApplyColorTargets_BeforeArgs ApplyColorTargets
        {
            add
            {
                HookHandler._beforeApplyColorTargets += value;
                HookHandler.HookApplyColorTargets();
            }
            remove => HookHandler._beforeApplyColorTargets -= value;
        }

        public static event Delegates.ApplyVector3Targets_BeforeArgs ApplyVector3Targets
        {
            add
            {
                HookHandler._beforeApplyVector3Targets += value;
                HookHandler.HookApplyVector3Targets();
            }
            remove => HookHandler._beforeApplyVector3Targets -= value;
        }

        public static event Delegates.ApplyVector2Targets_BeforeArgs ApplyVector2Targets
        {
            add
            {
                HookHandler._beforeApplyVector2Targets += value;
                HookHandler.HookApplyVector2Targets();
            }
            remove => HookHandler._beforeApplyVector2Targets -= value;
        }

        public static event Delegates.ApplyFloatTargets_BeforeArgs ApplyFloatTargets
        {
            add
            {
                HookHandler._beforeApplyFloatTargets += value;
                HookHandler.HookApplyFloatTargets();
            }
            remove => HookHandler._beforeApplyFloatTargets -= value;
        }

        public static event Delegates.ApplyColorToTargets_BeforeArgs ApplyColorToTargets
        {
            add
            {
                HookHandler._beforeApplyColorToTargets += value;
                HookHandler.HookApplyColorToTargets();
            }
            remove => HookHandler._beforeApplyColorToTargets -= value;
        }

        public static event Delegates.ApplyAudioToTargets_BeforeArgs ApplyAudioToTargets
        {
            add
            {
                HookHandler._beforeApplyAudioToTargets += value;
                HookHandler.HookApplyAudioToTargets();
            }
            remove => HookHandler._beforeApplyAudioToTargets -= value;
        }

        public static event Delegates.ApplyStabTargets_BeforeArgs ApplyStabTargets
        {
            add
            {
                HookHandler._beforeApplyStabTargets += value;
                HookHandler.HookApplyStabTargets();
            }
            remove => HookHandler._beforeApplyStabTargets -= value;
        }

        public static event Delegates.ApplyMoveToPathTargets_BeforeArgs ApplyMoveToPathTargets
        {
            add
            {
                HookHandler._beforeApplyMoveToPathTargets += value;
                HookHandler.HookApplyMoveToPathTargets();
            }
            remove => HookHandler._beforeApplyMoveToPathTargets -= value;
        }

        public static event Delegates.ApplyMoveToTargets_BeforeArgs ApplyMoveToTargets
        {
            add
            {
                HookHandler._beforeApplyMoveToTargets += value;
                HookHandler.HookApplyMoveToTargets();
            }
            remove => HookHandler._beforeApplyMoveToTargets -= value;
        }

        public static event Delegates.ApplyMoveByTargets_BeforeArgs ApplyMoveByTargets
        {
            add
            {
                HookHandler._beforeApplyMoveByTargets += value;
                HookHandler.HookApplyMoveByTargets();
            }
            remove => HookHandler._beforeApplyMoveByTargets -= value;
        }

        public static event Delegates.ApplyScaleToTargets_BeforeArgs ApplyScaleToTargets
        {
            add
            {
                HookHandler._beforeApplyScaleToTargets += value;
                HookHandler.HookApplyScaleToTargets();
            }
            remove => HookHandler._beforeApplyScaleToTargets -= value;
        }

        public static event Delegates.ApplyLookToTargets_BeforeArgs ApplyLookToTargets
        {
            add
            {
                HookHandler._beforeApplyLookToTargets += value;
                HookHandler.HookApplyLookToTargets();
            }
            remove => HookHandler._beforeApplyLookToTargets -= value;
        }

        public static event Delegates.ApplyRotateToTargets_BeforeArgs ApplyRotateToTargets
        {
            add
            {
                HookHandler._beforeApplyRotateToTargets += value;
                HookHandler.HookApplyRotateToTargets();
            }
            remove => HookHandler._beforeApplyRotateToTargets -= value;
        }

        public static event Delegates.ApplyRotateAddTargets_BeforeArgs ApplyRotateAddTargets
        {
            add
            {
                HookHandler._beforeApplyRotateAddTargets += value;
                HookHandler.HookApplyRotateAddTargets();
            }
            remove => HookHandler._beforeApplyRotateAddTargets -= value;
        }

        public static event Delegates.ApplyShakePositionTargets_BeforeArgs ApplyShakePositionTargets
        {
            add
            {
                HookHandler._beforeApplyShakePositionTargets += value;
                HookHandler.HookApplyShakePositionTargets();
            }
            remove => HookHandler._beforeApplyShakePositionTargets -= value;
        }

        public static event Delegates.ApplyShakeScaleTargets_BeforeArgs ApplyShakeScaleTargets
        {
            add
            {
                HookHandler._beforeApplyShakeScaleTargets += value;
                HookHandler.HookApplyShakeScaleTargets();
            }
            remove => HookHandler._beforeApplyShakeScaleTargets -= value;
        }

        public static event Delegates.ApplyShakeRotationTargets_BeforeArgs ApplyShakeRotationTargets
        {
            add
            {
                HookHandler._beforeApplyShakeRotationTargets += value;
                HookHandler.HookApplyShakeRotationTargets();
            }
            remove => HookHandler._beforeApplyShakeRotationTargets -= value;
        }

        public static event Delegates.ApplyPunchPositionTargets_BeforeArgs ApplyPunchPositionTargets
        {
            add
            {
                HookHandler._beforeApplyPunchPositionTargets += value;
                HookHandler.HookApplyPunchPositionTargets();
            }
            remove => HookHandler._beforeApplyPunchPositionTargets -= value;
        }

        public static event Delegates.ApplyPunchRotationTargets_BeforeArgs ApplyPunchRotationTargets
        {
            add
            {
                HookHandler._beforeApplyPunchRotationTargets += value;
                HookHandler.HookApplyPunchRotationTargets();
            }
            remove => HookHandler._beforeApplyPunchRotationTargets -= value;
        }

        public static event Delegates.ApplyPunchScaleTargets_BeforeArgs ApplyPunchScaleTargets
        {
            add
            {
                HookHandler._beforeApplyPunchScaleTargets += value;
                HookHandler.HookApplyPunchScaleTargets();
            }
            remove => HookHandler._beforeApplyPunchScaleTargets -= value;
        }

        public static event Delegates.TweenDelay_BeforeArgs TweenDelay
        {
            add
            {
                HookHandler._beforeTweenDelay += value;
                HookHandler.HookTweenDelay();
            }
            remove => HookHandler._beforeTweenDelay -= value;
        }

        public static event Delegates.TweenStart_BeforeArgs TweenStart
        {
            add
            {
                HookHandler._beforeTweenStart += value;
                HookHandler.HookTweenStart();
            }
            remove => HookHandler._beforeTweenStart -= value;
        }

        public static event Delegates.TweenRestart_BeforeArgs TweenRestart
        {
            add
            {
                HookHandler._beforeTweenRestart += value;
                HookHandler.HookTweenRestart();
            }
            remove => HookHandler._beforeTweenRestart -= value;
        }

        public static event Delegates.TweenUpdate_BeforeArgs TweenUpdate
        {
            add
            {
                HookHandler._beforeTweenUpdate += value;
                HookHandler.HookTweenUpdate();
            }
            remove => HookHandler._beforeTweenUpdate -= value;
        }

        public static event Delegates.TweenComplete_BeforeArgs TweenComplete
        {
            add
            {
                HookHandler._beforeTweenComplete += value;
                HookHandler.HookTweenComplete();
            }
            remove => HookHandler._beforeTweenComplete -= value;
        }

        public static event Delegates.TweenLoop_BeforeArgs TweenLoop
        {
            add
            {
                HookHandler._beforeTweenLoop += value;
                HookHandler.HookTweenLoop();
            }
            remove => HookHandler._beforeTweenLoop -= value;
        }

        public static event Delegates.RectUpdate_BeforeArgs RectUpdate
        {
            add
            {
                HookHandler._beforeRectUpdate += value;
                HookHandler.HookRectUpdate();
            }
            remove => HookHandler._beforeRectUpdate -= value;
        }

        public static event Delegates.Vector3Update_BeforeArgs Vector3Update
        {
            add
            {
                HookHandler._beforeVector3Update += value;
                HookHandler.HookVector3Update();
            }
            remove => HookHandler._beforeVector3Update -= value;
        }

        public static event Delegates.Vector2Update_BeforeArgs Vector2Update
        {
            add
            {
                HookHandler._beforeVector2Update += value;
                HookHandler.HookVector2Update();
            }
            remove => HookHandler._beforeVector2Update -= value;
        }

        public static event Delegates.FloatUpdate_BeforeArgs FloatUpdate
        {
            add
            {
                HookHandler._beforeFloatUpdate += value;
                HookHandler.HookFloatUpdate();
            }
            remove => HookHandler._beforeFloatUpdate -= value;
        }

        public static event Delegates.FadeUpdate_GameObject_Hashtable_BeforeArgs FadeUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeFadeUpdate_GameObject_Hashtable += value;
                HookHandler.HookFadeUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeFadeUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.FadeUpdate_GameObject_float_float_BeforeArgs FadeUpdate_GameObject_float_float
        {
            add
            {
                HookHandler._beforeFadeUpdate_GameObject_float_float += value;
                HookHandler.HookFadeUpdate_GameObject_float_float();
            }
            remove => HookHandler._beforeFadeUpdate_GameObject_float_float -= value;
        }

        public static event Delegates.ColorUpdate_GameObject_Hashtable_BeforeArgs ColorUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeColorUpdate_GameObject_Hashtable += value;
                HookHandler.HookColorUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeColorUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.ColorUpdate_GameObject_Color_float_BeforeArgs ColorUpdate_GameObject_Color_float
        {
            add
            {
                HookHandler._beforeColorUpdate_GameObject_Color_float += value;
                HookHandler.HookColorUpdate_GameObject_Color_float();
            }
            remove => HookHandler._beforeColorUpdate_GameObject_Color_float -= value;
        }

        public static event Delegates.AudioUpdate_GameObject_Hashtable_BeforeArgs AudioUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeAudioUpdate_GameObject_Hashtable += value;
                HookHandler.HookAudioUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeAudioUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.AudioUpdate_GameObject_float_float_float_BeforeArgs
            AudioUpdate_GameObject_float_float_float
            {
                add
                {
                    HookHandler._beforeAudioUpdate_GameObject_float_float_float += value;
                    HookHandler.HookAudioUpdate_GameObject_float_float_float();
                }
                remove => HookHandler._beforeAudioUpdate_GameObject_float_float_float -= value;
            }

        public static event Delegates.RotateUpdate_GameObject_Hashtable_BeforeArgs RotateUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeRotateUpdate_GameObject_Hashtable += value;
                HookHandler.HookRotateUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeRotateUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateUpdate_GameObject_Vector3_float_BeforeArgs
            RotateUpdate_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._beforeRotateUpdate_GameObject_Vector3_float += value;
                    HookHandler.HookRotateUpdate_GameObject_Vector3_float();
                }
                remove => HookHandler._beforeRotateUpdate_GameObject_Vector3_float -= value;
            }

        public static event Delegates.ScaleUpdate_GameObject_Hashtable_BeforeArgs ScaleUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeScaleUpdate_GameObject_Hashtable += value;
                HookHandler.HookScaleUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeScaleUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleUpdate_GameObject_Vector3_float_BeforeArgs
            ScaleUpdate_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._beforeScaleUpdate_GameObject_Vector3_float += value;
                    HookHandler.HookScaleUpdate_GameObject_Vector3_float();
                }
                remove => HookHandler._beforeScaleUpdate_GameObject_Vector3_float -= value;
            }

        public static event Delegates.MoveUpdate_GameObject_Hashtable_BeforeArgs MoveUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeMoveUpdate_GameObject_Hashtable += value;
                HookHandler.HookMoveUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeMoveUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveUpdate_GameObject_Vector3_float_BeforeArgs MoveUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeMoveUpdate_GameObject_Vector3_float += value;
                HookHandler.HookMoveUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeMoveUpdate_GameObject_Vector3_float -= value;
        }

        public static event Delegates.LookUpdate_GameObject_Hashtable_BeforeArgs LookUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._beforeLookUpdate_GameObject_Hashtable += value;
                HookHandler.HookLookUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._beforeLookUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.LookUpdate_GameObject_Vector3_float_BeforeArgs LookUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._beforeLookUpdate_GameObject_Vector3_float += value;
                HookHandler.HookLookUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._beforeLookUpdate_GameObject_Vector3_float -= value;
        }

        public static event Delegates.PathLength_Array_BeforeArgs PathLength_Array
        {
            add
            {
                HookHandler._beforePathLength_Array += value;
                HookHandler.HookPathLength_Array();
            }
            remove => HookHandler._beforePathLength_Array -= value;
        }

        public static event Delegates.CameraTexture_BeforeArgs CameraTexture
        {
            add
            {
                HookHandler._beforeCameraTexture += value;
                HookHandler.HookCameraTexture();
            }
            remove => HookHandler._beforeCameraTexture -= value;
        }

        public static event Delegates.PutOnPath_GameObject_Array_float_BeforeArgs PutOnPath_GameObject_Array_float
        {
            add
            {
                HookHandler._beforePutOnPath_GameObject_Array_float += value;
                HookHandler.HookPutOnPath_GameObject_Array_float();
            }
            remove => HookHandler._beforePutOnPath_GameObject_Array_float -= value;
        }

        public static event Delegates.PutOnPath_Transform_Array_float_BeforeArgs PutOnPath_Transform_Array_float
        {
            add
            {
                HookHandler._beforePutOnPath_Transform_Array_float += value;
                HookHandler.HookPutOnPath_Transform_Array_float();
            }
            remove => HookHandler._beforePutOnPath_Transform_Array_float -= value;
        }

        public static event Delegates.PointOnPath_Array_float_BeforeArgs PointOnPath_Array_float
        {
            add
            {
                HookHandler._beforePointOnPath_Array_float += value;
                HookHandler.HookPointOnPath_Array_float();
            }
            remove => HookHandler._beforePointOnPath_Array_float -= value;
        }

        public static event Delegates.DrawLine_Array_BeforeArgs DrawLine_Array
        {
            add
            {
                HookHandler._beforeDrawLine_Array += value;
                HookHandler.HookDrawLine_Array();
            }
            remove => HookHandler._beforeDrawLine_Array -= value;
        }

        public static event Delegates.DrawLine_Array_Color_BeforeArgs DrawLine_Array_Color
        {
            add
            {
                HookHandler._beforeDrawLine_Array_Color += value;
                HookHandler.HookDrawLine_Array_Color();
            }
            remove => HookHandler._beforeDrawLine_Array_Color -= value;
        }

        public static event Delegates.DrawLineGizmos_Array_BeforeArgs DrawLineGizmos_Array
        {
            add
            {
                HookHandler._beforeDrawLineGizmos_Array += value;
                HookHandler.HookDrawLineGizmos_Array();
            }
            remove => HookHandler._beforeDrawLineGizmos_Array -= value;
        }

        public static event Delegates.DrawLineGizmos_Array_Color_BeforeArgs DrawLineGizmos_Array_Color
        {
            add
            {
                HookHandler._beforeDrawLineGizmos_Array_Color += value;
                HookHandler.HookDrawLineGizmos_Array_Color();
            }
            remove => HookHandler._beforeDrawLineGizmos_Array_Color -= value;
        }

        public static event Delegates.DrawLineHandles_Array_BeforeArgs DrawLineHandles_Array
        {
            add
            {
                HookHandler._beforeDrawLineHandles_Array += value;
                HookHandler.HookDrawLineHandles_Array();
            }
            remove => HookHandler._beforeDrawLineHandles_Array -= value;
        }

        public static event Delegates.DrawLineHandles_Array_Color_BeforeArgs DrawLineHandles_Array_Color
        {
            add
            {
                HookHandler._beforeDrawLineHandles_Array_Color += value;
                HookHandler.HookDrawLineHandles_Array_Color();
            }
            remove => HookHandler._beforeDrawLineHandles_Array_Color -= value;
        }

        public static event Delegates.DrawPath_Array_BeforeArgs DrawPath_Array
        {
            add
            {
                HookHandler._beforeDrawPath_Array += value;
                HookHandler.HookDrawPath_Array();
            }
            remove => HookHandler._beforeDrawPath_Array -= value;
        }

        public static event Delegates.DrawPath_Array_Color_BeforeArgs DrawPath_Array_Color
        {
            add
            {
                HookHandler._beforeDrawPath_Array_Color += value;
                HookHandler.HookDrawPath_Array_Color();
            }
            remove => HookHandler._beforeDrawPath_Array_Color -= value;
        }

        public static event Delegates.DrawPathGizmos_Array_BeforeArgs DrawPathGizmos_Array
        {
            add
            {
                HookHandler._beforeDrawPathGizmos_Array += value;
                HookHandler.HookDrawPathGizmos_Array();
            }
            remove => HookHandler._beforeDrawPathGizmos_Array -= value;
        }

        public static event Delegates.DrawPathGizmos_Array_Color_BeforeArgs DrawPathGizmos_Array_Color
        {
            add
            {
                HookHandler._beforeDrawPathGizmos_Array_Color += value;
                HookHandler.HookDrawPathGizmos_Array_Color();
            }
            remove => HookHandler._beforeDrawPathGizmos_Array_Color -= value;
        }

        public static event Delegates.DrawPathHandles_Array_BeforeArgs DrawPathHandles_Array
        {
            add
            {
                HookHandler._beforeDrawPathHandles_Array += value;
                HookHandler.HookDrawPathHandles_Array();
            }
            remove => HookHandler._beforeDrawPathHandles_Array -= value;
        }

        public static event Delegates.DrawPathHandles_Array_Color_BeforeArgs DrawPathHandles_Array_Color
        {
            add
            {
                HookHandler._beforeDrawPathHandles_Array_Color += value;
                HookHandler.HookDrawPathHandles_Array_Color();
            }
            remove => HookHandler._beforeDrawPathHandles_Array_Color -= value;
        }

        public static event Delegates.CameraFadeDepth_BeforeArgs CameraFadeDepth
        {
            add
            {
                HookHandler._beforeCameraFadeDepth += value;
                HookHandler.HookCameraFadeDepth();
            }
            remove => HookHandler._beforeCameraFadeDepth -= value;
        }

        public static event Delegates.CameraFadeDestroy_BeforeArgs CameraFadeDestroy
        {
            add
            {
                HookHandler._beforeCameraFadeDestroy += value;
                HookHandler.HookCameraFadeDestroy();
            }
            remove => HookHandler._beforeCameraFadeDestroy -= value;
        }

        public static event Delegates.CameraFadeSwap_BeforeArgs CameraFadeSwap
        {
            add
            {
                HookHandler._beforeCameraFadeSwap += value;
                HookHandler.HookCameraFadeSwap();
            }
            remove => HookHandler._beforeCameraFadeSwap -= value;
        }

        public static event Delegates.CameraFadeAdd_Texture2D_int_BeforeArgs CameraFadeAdd_Texture2D_int
        {
            add
            {
                HookHandler._beforeCameraFadeAdd_Texture2D_int += value;
                HookHandler.HookCameraFadeAdd_Texture2D_int();
            }
            remove => HookHandler._beforeCameraFadeAdd_Texture2D_int -= value;
        }

        public static event Delegates.CameraFadeAdd_Texture2D_BeforeArgs CameraFadeAdd_Texture2D
        {
            add
            {
                HookHandler._beforeCameraFadeAdd_Texture2D += value;
                HookHandler.HookCameraFadeAdd_Texture2D();
            }
            remove => HookHandler._beforeCameraFadeAdd_Texture2D -= value;
        }

        public static event Delegates.CameraFadeAdd_BeforeArgs CameraFadeAdd
        {
            add
            {
                HookHandler._beforeCameraFadeAdd += value;
                HookHandler.HookCameraFadeAdd();
            }
            remove => HookHandler._beforeCameraFadeAdd -= value;
        }

        public static event Delegates.Resume_GameObject_BeforeArgs Resume_GameObject
        {
            add
            {
                HookHandler._beforeResume_GameObject += value;
                HookHandler.HookResume_GameObject();
            }
            remove => HookHandler._beforeResume_GameObject -= value;
        }

        public static event Delegates.Resume_GameObject_bool_BeforeArgs Resume_GameObject_bool
        {
            add
            {
                HookHandler._beforeResume_GameObject_bool += value;
                HookHandler.HookResume_GameObject_bool();
            }
            remove => HookHandler._beforeResume_GameObject_bool -= value;
        }

        public static event Delegates.Resume_GameObject_string_BeforeArgs Resume_GameObject_string
        {
            add
            {
                HookHandler._beforeResume_GameObject_string += value;
                HookHandler.HookResume_GameObject_string();
            }
            remove => HookHandler._beforeResume_GameObject_string -= value;
        }

        public static event Delegates.Resume_GameObject_string_bool_BeforeArgs Resume_GameObject_string_bool
        {
            add
            {
                HookHandler._beforeResume_GameObject_string_bool += value;
                HookHandler.HookResume_GameObject_string_bool();
            }
            remove => HookHandler._beforeResume_GameObject_string_bool -= value;
        }

        public static event Delegates.Resume_BeforeArgs Resume
        {
            add
            {
                HookHandler._beforeResume += value;
                HookHandler.HookResume();
            }
            remove => HookHandler._beforeResume -= value;
        }

        public static event Delegates.Resume_string_BeforeArgs Resume_string
        {
            add
            {
                HookHandler._beforeResume_string += value;
                HookHandler.HookResume_string();
            }
            remove => HookHandler._beforeResume_string -= value;
        }

        public static event Delegates.Pause_GameObject_BeforeArgs Pause_GameObject
        {
            add
            {
                HookHandler._beforePause_GameObject += value;
                HookHandler.HookPause_GameObject();
            }
            remove => HookHandler._beforePause_GameObject -= value;
        }

        public static event Delegates.Pause_GameObject_bool_BeforeArgs Pause_GameObject_bool
        {
            add
            {
                HookHandler._beforePause_GameObject_bool += value;
                HookHandler.HookPause_GameObject_bool();
            }
            remove => HookHandler._beforePause_GameObject_bool -= value;
        }

        public static event Delegates.Pause_GameObject_string_BeforeArgs Pause_GameObject_string
        {
            add
            {
                HookHandler._beforePause_GameObject_string += value;
                HookHandler.HookPause_GameObject_string();
            }
            remove => HookHandler._beforePause_GameObject_string -= value;
        }

        public static event Delegates.Pause_GameObject_string_bool_BeforeArgs Pause_GameObject_string_bool
        {
            add
            {
                HookHandler._beforePause_GameObject_string_bool += value;
                HookHandler.HookPause_GameObject_string_bool();
            }
            remove => HookHandler._beforePause_GameObject_string_bool -= value;
        }

        public static event Delegates.Pause_BeforeArgs Pause
        {
            add
            {
                HookHandler._beforePause += value;
                HookHandler.HookPause();
            }
            remove => HookHandler._beforePause -= value;
        }

        public static event Delegates.Pause_string_BeforeArgs Pause_string
        {
            add
            {
                HookHandler._beforePause_string += value;
                HookHandler.HookPause_string();
            }
            remove => HookHandler._beforePause_string -= value;
        }

        public static event Delegates.Count_BeforeArgs Count
        {
            add
            {
                HookHandler._beforeCount += value;
                HookHandler.HookCount();
            }
            remove => HookHandler._beforeCount -= value;
        }

        public static event Delegates.Count_string_BeforeArgs Count_string
        {
            add
            {
                HookHandler._beforeCount_string += value;
                HookHandler.HookCount_string();
            }
            remove => HookHandler._beforeCount_string -= value;
        }

        public static event Delegates.Count_GameObject_BeforeArgs Count_GameObject
        {
            add
            {
                HookHandler._beforeCount_GameObject += value;
                HookHandler.HookCount_GameObject();
            }
            remove => HookHandler._beforeCount_GameObject -= value;
        }

        public static event Delegates.Count_GameObject_string_BeforeArgs Count_GameObject_string
        {
            add
            {
                HookHandler._beforeCount_GameObject_string += value;
                HookHandler.HookCount_GameObject_string();
            }
            remove => HookHandler._beforeCount_GameObject_string -= value;
        }

        public static event Delegates.Stop_BeforeArgs Stop
        {
            add
            {
                HookHandler._beforeStop += value;
                HookHandler.HookStop();
            }
            remove => HookHandler._beforeStop -= value;
        }

        public static event Delegates.Stop_string_BeforeArgs Stop_string
        {
            add
            {
                HookHandler._beforeStop_string += value;
                HookHandler.HookStop_string();
            }
            remove => HookHandler._beforeStop_string -= value;
        }

        public static event Delegates.StopByName_string_BeforeArgs StopByName_string
        {
            add
            {
                HookHandler._beforeStopByName_string += value;
                HookHandler.HookStopByName_string();
            }
            remove => HookHandler._beforeStopByName_string -= value;
        }

        public static event Delegates.Stop_GameObject_BeforeArgs Stop_GameObject
        {
            add
            {
                HookHandler._beforeStop_GameObject += value;
                HookHandler.HookStop_GameObject();
            }
            remove => HookHandler._beforeStop_GameObject -= value;
        }

        public static event Delegates.Stop_GameObject_bool_BeforeArgs Stop_GameObject_bool
        {
            add
            {
                HookHandler._beforeStop_GameObject_bool += value;
                HookHandler.HookStop_GameObject_bool();
            }
            remove => HookHandler._beforeStop_GameObject_bool -= value;
        }

        public static event Delegates.Stop_GameObject_string_BeforeArgs Stop_GameObject_string
        {
            add
            {
                HookHandler._beforeStop_GameObject_string += value;
                HookHandler.HookStop_GameObject_string();
            }
            remove => HookHandler._beforeStop_GameObject_string -= value;
        }

        public static event Delegates.StopByName_GameObject_string_BeforeArgs StopByName_GameObject_string
        {
            add
            {
                HookHandler._beforeStopByName_GameObject_string += value;
                HookHandler.HookStopByName_GameObject_string();
            }
            remove => HookHandler._beforeStopByName_GameObject_string -= value;
        }

        public static event Delegates.Stop_GameObject_string_bool_BeforeArgs Stop_GameObject_string_bool
        {
            add
            {
                HookHandler._beforeStop_GameObject_string_bool += value;
                HookHandler.HookStop_GameObject_string_bool();
            }
            remove => HookHandler._beforeStop_GameObject_string_bool -= value;
        }

        public static event Delegates.StopByName_GameObject_string_bool_BeforeArgs StopByName_GameObject_string_bool
        {
            add
            {
                HookHandler._beforeStopByName_GameObject_string_bool += value;
                HookHandler.HookStopByName_GameObject_string_bool();
            }
            remove => HookHandler._beforeStopByName_GameObject_string_bool -= value;
        }

        public static event Delegates.Hash_BeforeArgs Hash
        {
            add
            {
                HookHandler._beforeHash += value;
                HookHandler.HookHash();
            }
            remove => HookHandler._beforeHash -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.DrawLineHelper_BeforeArgs DrawLineHelper
        {
            add
            {
                HookHandler._beforeDrawLineHelper += value;
                HookHandler.HookDrawLineHelper();
            }
            remove => HookHandler._beforeDrawLineHelper -= value;
        }

        public static event Delegates.DrawPathHelper_BeforeArgs DrawPathHelper
        {
            add
            {
                HookHandler._beforeDrawPathHelper += value;
                HookHandler.HookDrawPathHelper();
            }
            remove => HookHandler._beforeDrawPathHelper -= value;
        }

        public static event Delegates.PathControlPointGenerator_BeforeArgs PathControlPointGenerator
        {
            add
            {
                HookHandler._beforePathControlPointGenerator += value;
                HookHandler.HookPathControlPointGenerator();
            }
            remove => HookHandler._beforePathControlPointGenerator -= value;
        }

        public static event Delegates.Interp_BeforeArgs Interp
        {
            add
            {
                HookHandler._beforeInterp += value;
                HookHandler.HookInterp();
            }
            remove => HookHandler._beforeInterp -= value;
        }

        public static event Delegates.Launch_BeforeArgs Launch
        {
            add
            {
                HookHandler._beforeLaunch += value;
                HookHandler.HookLaunch();
            }
            remove => HookHandler._beforeLaunch -= value;
        }

        public static event Delegates.CleanArgs_BeforeArgs CleanArgs
        {
            add
            {
                HookHandler._beforeCleanArgs += value;
                HookHandler.HookCleanArgs();
            }
            remove => HookHandler._beforeCleanArgs -= value;
        }

        public static event Delegates.GenerateID_BeforeArgs GenerateID
        {
            add
            {
                HookHandler._beforeGenerateID += value;
                HookHandler.HookGenerateID();
            }
            remove => HookHandler._beforeGenerateID -= value;
        }

        public static event Delegates.RetrieveArgs_BeforeArgs RetrieveArgs
        {
            add
            {
                HookHandler._beforeRetrieveArgs += value;
                HookHandler.HookRetrieveArgs();
            }
            remove => HookHandler._beforeRetrieveArgs -= value;
        }

        public static event Delegates.GetEasingFunction_BeforeArgs GetEasingFunction
        {
            add
            {
                HookHandler._beforeGetEasingFunction += value;
                HookHandler.HookGetEasingFunction();
            }
            remove => HookHandler._beforeGetEasingFunction -= value;
        }

        public static event Delegates.UpdatePercentage_BeforeArgs UpdatePercentage
        {
            add
            {
                HookHandler._beforeUpdatePercentage += value;
                HookHandler.HookUpdatePercentage();
            }
            remove => HookHandler._beforeUpdatePercentage -= value;
        }

        public static event Delegates.CallBack_BeforeArgs CallBack
        {
            add
            {
                HookHandler._beforeCallBack += value;
                HookHandler.HookCallBack();
            }
            remove => HookHandler._beforeCallBack -= value;
        }

        public static event Delegates.Dispose_BeforeArgs Dispose
        {
            add
            {
                HookHandler._beforeDispose += value;
                HookHandler.HookDispose();
            }
            remove => HookHandler._beforeDispose -= value;
        }

        public static event Delegates.ConflictCheck_BeforeArgs ConflictCheck
        {
            add
            {
                HookHandler._beforeConflictCheck += value;
                HookHandler.HookConflictCheck();
            }
            remove => HookHandler._beforeConflictCheck -= value;
        }

        public static event Delegates.EnableKinematic_BeforeArgs EnableKinematic
        {
            add
            {
                HookHandler._beforeEnableKinematic += value;
                HookHandler.HookEnableKinematic();
            }
            remove => HookHandler._beforeEnableKinematic -= value;
        }

        public static event Delegates.DisableKinematic_BeforeArgs DisableKinematic
        {
            add
            {
                HookHandler._beforeDisableKinematic += value;
                HookHandler.HookDisableKinematic();
            }
            remove => HookHandler._beforeDisableKinematic -= value;
        }

        public static event Delegates.ResumeDelay_BeforeArgs ResumeDelay
        {
            add
            {
                HookHandler._beforeResumeDelay += value;
                HookHandler.HookResumeDelay();
            }
            remove => HookHandler._beforeResumeDelay -= value;
        }

        public static event Delegates.linear_BeforeArgs linear
        {
            add
            {
                HookHandler._beforelinear += value;
                HookHandler.Hooklinear();
            }
            remove => HookHandler._beforelinear -= value;
        }

        public static event Delegates.clerp_BeforeArgs clerp
        {
            add
            {
                HookHandler._beforeclerp += value;
                HookHandler.Hookclerp();
            }
            remove => HookHandler._beforeclerp -= value;
        }

        public static event Delegates.spring_BeforeArgs spring
        {
            add
            {
                HookHandler._beforespring += value;
                HookHandler.Hookspring();
            }
            remove => HookHandler._beforespring -= value;
        }

        public static event Delegates.easeInQuad_BeforeArgs easeInQuad
        {
            add
            {
                HookHandler._beforeeaseInQuad += value;
                HookHandler.HookeaseInQuad();
            }
            remove => HookHandler._beforeeaseInQuad -= value;
        }

        public static event Delegates.easeOutQuad_BeforeArgs easeOutQuad
        {
            add
            {
                HookHandler._beforeeaseOutQuad += value;
                HookHandler.HookeaseOutQuad();
            }
            remove => HookHandler._beforeeaseOutQuad -= value;
        }

        public static event Delegates.easeInOutQuad_BeforeArgs easeInOutQuad
        {
            add
            {
                HookHandler._beforeeaseInOutQuad += value;
                HookHandler.HookeaseInOutQuad();
            }
            remove => HookHandler._beforeeaseInOutQuad -= value;
        }

        public static event Delegates.easeInCubic_BeforeArgs easeInCubic
        {
            add
            {
                HookHandler._beforeeaseInCubic += value;
                HookHandler.HookeaseInCubic();
            }
            remove => HookHandler._beforeeaseInCubic -= value;
        }

        public static event Delegates.easeOutCubic_BeforeArgs easeOutCubic
        {
            add
            {
                HookHandler._beforeeaseOutCubic += value;
                HookHandler.HookeaseOutCubic();
            }
            remove => HookHandler._beforeeaseOutCubic -= value;
        }

        public static event Delegates.easeInOutCubic_BeforeArgs easeInOutCubic
        {
            add
            {
                HookHandler._beforeeaseInOutCubic += value;
                HookHandler.HookeaseInOutCubic();
            }
            remove => HookHandler._beforeeaseInOutCubic -= value;
        }

        public static event Delegates.easeInQuart_BeforeArgs easeInQuart
        {
            add
            {
                HookHandler._beforeeaseInQuart += value;
                HookHandler.HookeaseInQuart();
            }
            remove => HookHandler._beforeeaseInQuart -= value;
        }

        public static event Delegates.easeOutQuart_BeforeArgs easeOutQuart
        {
            add
            {
                HookHandler._beforeeaseOutQuart += value;
                HookHandler.HookeaseOutQuart();
            }
            remove => HookHandler._beforeeaseOutQuart -= value;
        }

        public static event Delegates.easeInOutQuart_BeforeArgs easeInOutQuart
        {
            add
            {
                HookHandler._beforeeaseInOutQuart += value;
                HookHandler.HookeaseInOutQuart();
            }
            remove => HookHandler._beforeeaseInOutQuart -= value;
        }

        public static event Delegates.easeInQuint_BeforeArgs easeInQuint
        {
            add
            {
                HookHandler._beforeeaseInQuint += value;
                HookHandler.HookeaseInQuint();
            }
            remove => HookHandler._beforeeaseInQuint -= value;
        }

        public static event Delegates.easeOutQuint_BeforeArgs easeOutQuint
        {
            add
            {
                HookHandler._beforeeaseOutQuint += value;
                HookHandler.HookeaseOutQuint();
            }
            remove => HookHandler._beforeeaseOutQuint -= value;
        }

        public static event Delegates.easeInOutQuint_BeforeArgs easeInOutQuint
        {
            add
            {
                HookHandler._beforeeaseInOutQuint += value;
                HookHandler.HookeaseInOutQuint();
            }
            remove => HookHandler._beforeeaseInOutQuint -= value;
        }

        public static event Delegates.easeInSine_BeforeArgs easeInSine
        {
            add
            {
                HookHandler._beforeeaseInSine += value;
                HookHandler.HookeaseInSine();
            }
            remove => HookHandler._beforeeaseInSine -= value;
        }

        public static event Delegates.easeOutSine_BeforeArgs easeOutSine
        {
            add
            {
                HookHandler._beforeeaseOutSine += value;
                HookHandler.HookeaseOutSine();
            }
            remove => HookHandler._beforeeaseOutSine -= value;
        }

        public static event Delegates.easeInOutSine_BeforeArgs easeInOutSine
        {
            add
            {
                HookHandler._beforeeaseInOutSine += value;
                HookHandler.HookeaseInOutSine();
            }
            remove => HookHandler._beforeeaseInOutSine -= value;
        }

        public static event Delegates.easeInExpo_BeforeArgs easeInExpo
        {
            add
            {
                HookHandler._beforeeaseInExpo += value;
                HookHandler.HookeaseInExpo();
            }
            remove => HookHandler._beforeeaseInExpo -= value;
        }

        public static event Delegates.easeOutExpo_BeforeArgs easeOutExpo
        {
            add
            {
                HookHandler._beforeeaseOutExpo += value;
                HookHandler.HookeaseOutExpo();
            }
            remove => HookHandler._beforeeaseOutExpo -= value;
        }

        public static event Delegates.easeInOutExpo_BeforeArgs easeInOutExpo
        {
            add
            {
                HookHandler._beforeeaseInOutExpo += value;
                HookHandler.HookeaseInOutExpo();
            }
            remove => HookHandler._beforeeaseInOutExpo -= value;
        }

        public static event Delegates.easeInCirc_BeforeArgs easeInCirc
        {
            add
            {
                HookHandler._beforeeaseInCirc += value;
                HookHandler.HookeaseInCirc();
            }
            remove => HookHandler._beforeeaseInCirc -= value;
        }

        public static event Delegates.easeOutCirc_BeforeArgs easeOutCirc
        {
            add
            {
                HookHandler._beforeeaseOutCirc += value;
                HookHandler.HookeaseOutCirc();
            }
            remove => HookHandler._beforeeaseOutCirc -= value;
        }

        public static event Delegates.easeInOutCirc_BeforeArgs easeInOutCirc
        {
            add
            {
                HookHandler._beforeeaseInOutCirc += value;
                HookHandler.HookeaseInOutCirc();
            }
            remove => HookHandler._beforeeaseInOutCirc -= value;
        }

        public static event Delegates.easeInBounce_BeforeArgs easeInBounce
        {
            add
            {
                HookHandler._beforeeaseInBounce += value;
                HookHandler.HookeaseInBounce();
            }
            remove => HookHandler._beforeeaseInBounce -= value;
        }

        public static event Delegates.easeOutBounce_BeforeArgs easeOutBounce
        {
            add
            {
                HookHandler._beforeeaseOutBounce += value;
                HookHandler.HookeaseOutBounce();
            }
            remove => HookHandler._beforeeaseOutBounce -= value;
        }

        public static event Delegates.easeInOutBounce_BeforeArgs easeInOutBounce
        {
            add
            {
                HookHandler._beforeeaseInOutBounce += value;
                HookHandler.HookeaseInOutBounce();
            }
            remove => HookHandler._beforeeaseInOutBounce -= value;
        }

        public static event Delegates.easeInBack_BeforeArgs easeInBack
        {
            add
            {
                HookHandler._beforeeaseInBack += value;
                HookHandler.HookeaseInBack();
            }
            remove => HookHandler._beforeeaseInBack -= value;
        }

        public static event Delegates.easeOutBack_BeforeArgs easeOutBack
        {
            add
            {
                HookHandler._beforeeaseOutBack += value;
                HookHandler.HookeaseOutBack();
            }
            remove => HookHandler._beforeeaseOutBack -= value;
        }

        public static event Delegates.easeInOutBack_BeforeArgs easeInOutBack
        {
            add
            {
                HookHandler._beforeeaseInOutBack += value;
                HookHandler.HookeaseInOutBack();
            }
            remove => HookHandler._beforeeaseInOutBack -= value;
        }

        public static event Delegates.punch_BeforeArgs punch
        {
            add
            {
                HookHandler._beforepunch += value;
                HookHandler.Hookpunch();
            }
            remove => HookHandler._beforepunch -= value;
        }

        public static event Delegates.easeInElastic_BeforeArgs easeInElastic
        {
            add
            {
                HookHandler._beforeeaseInElastic += value;
                HookHandler.HookeaseInElastic();
            }
            remove => HookHandler._beforeeaseInElastic -= value;
        }

        public static event Delegates.easeOutElastic_BeforeArgs easeOutElastic
        {
            add
            {
                HookHandler._beforeeaseOutElastic += value;
                HookHandler.HookeaseOutElastic();
            }
            remove => HookHandler._beforeeaseOutElastic -= value;
        }

        public static event Delegates.easeInOutElastic_BeforeArgs easeInOutElastic
        {
            add
            {
                HookHandler._beforeeaseInOutElastic += value;
                HookHandler.HookeaseInOutElastic();
            }
            remove => HookHandler._beforeeaseInOutElastic -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.CameraFadeFrom_float_float_AfterArgs CameraFadeFrom_float_float
        {
            add
            {
                HookHandler._afterCameraFadeFrom_float_float += value;
                HookHandler.HookCameraFadeFrom_float_float();
            }
            remove => HookHandler._afterCameraFadeFrom_float_float -= value;
        }

        public static event Delegates.CameraFadeFrom_Hashtable_AfterArgs CameraFadeFrom_Hashtable
        {
            add
            {
                HookHandler._afterCameraFadeFrom_Hashtable += value;
                HookHandler.HookCameraFadeFrom_Hashtable();
            }
            remove => HookHandler._afterCameraFadeFrom_Hashtable -= value;
        }

        public static event Delegates.CameraFadeTo_float_float_AfterArgs CameraFadeTo_float_float
        {
            add
            {
                HookHandler._afterCameraFadeTo_float_float += value;
                HookHandler.HookCameraFadeTo_float_float();
            }
            remove => HookHandler._afterCameraFadeTo_float_float -= value;
        }

        public static event Delegates.CameraFadeTo_Hashtable_AfterArgs CameraFadeTo_Hashtable
        {
            add
            {
                HookHandler._afterCameraFadeTo_Hashtable += value;
                HookHandler.HookCameraFadeTo_Hashtable();
            }
            remove => HookHandler._afterCameraFadeTo_Hashtable -= value;
        }

        public static event Delegates.ValueTo_AfterArgs ValueTo
        {
            add
            {
                HookHandler._afterValueTo += value;
                HookHandler.HookValueTo();
            }
            remove => HookHandler._afterValueTo -= value;
        }

        public static event Delegates.FadeFrom_GameObject_float_float_AfterArgs FadeFrom_GameObject_float_float
        {
            add
            {
                HookHandler._afterFadeFrom_GameObject_float_float += value;
                HookHandler.HookFadeFrom_GameObject_float_float();
            }
            remove => HookHandler._afterFadeFrom_GameObject_float_float -= value;
        }

        public static event Delegates.FadeFrom_GameObject_Hashtable_AfterArgs FadeFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterFadeFrom_GameObject_Hashtable += value;
                HookHandler.HookFadeFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterFadeFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.FadeTo_GameObject_float_float_AfterArgs FadeTo_GameObject_float_float
        {
            add
            {
                HookHandler._afterFadeTo_GameObject_float_float += value;
                HookHandler.HookFadeTo_GameObject_float_float();
            }
            remove => HookHandler._afterFadeTo_GameObject_float_float -= value;
        }

        public static event Delegates.FadeTo_GameObject_Hashtable_AfterArgs FadeTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterFadeTo_GameObject_Hashtable += value;
                HookHandler.HookFadeTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterFadeTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.ColorFrom_GameObject_Color_float_AfterArgs ColorFrom_GameObject_Color_float
        {
            add
            {
                HookHandler._afterColorFrom_GameObject_Color_float += value;
                HookHandler.HookColorFrom_GameObject_Color_float();
            }
            remove => HookHandler._afterColorFrom_GameObject_Color_float -= value;
        }

        public static event Delegates.ColorFrom_GameObject_Hashtable_AfterArgs ColorFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterColorFrom_GameObject_Hashtable += value;
                HookHandler.HookColorFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterColorFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.ColorTo_GameObject_Color_float_AfterArgs ColorTo_GameObject_Color_float
        {
            add
            {
                HookHandler._afterColorTo_GameObject_Color_float += value;
                HookHandler.HookColorTo_GameObject_Color_float();
            }
            remove => HookHandler._afterColorTo_GameObject_Color_float -= value;
        }

        public static event Delegates.ColorTo_GameObject_Hashtable_AfterArgs ColorTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterColorTo_GameObject_Hashtable += value;
                HookHandler.HookColorTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterColorTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.AudioFrom_GameObject_float_float_float_AfterArgs
            AudioFrom_GameObject_float_float_float
            {
                add
                {
                    HookHandler._afterAudioFrom_GameObject_float_float_float += value;
                    HookHandler.HookAudioFrom_GameObject_float_float_float();
                }
                remove => HookHandler._afterAudioFrom_GameObject_float_float_float -= value;
            }

        public static event Delegates.AudioFrom_GameObject_Hashtable_AfterArgs AudioFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterAudioFrom_GameObject_Hashtable += value;
                HookHandler.HookAudioFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterAudioFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.AudioTo_GameObject_float_float_float_AfterArgs
            AudioTo_GameObject_float_float_float
            {
                add
                {
                    HookHandler._afterAudioTo_GameObject_float_float_float += value;
                    HookHandler.HookAudioTo_GameObject_float_float_float();
                }
                remove => HookHandler._afterAudioTo_GameObject_float_float_float -= value;
            }

        public static event Delegates.AudioTo_GameObject_Hashtable_AfterArgs AudioTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterAudioTo_GameObject_Hashtable += value;
                HookHandler.HookAudioTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterAudioTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.Stab_GameObject_AudioClip_float_AfterArgs Stab_GameObject_AudioClip_float
        {
            add
            {
                HookHandler._afterStab_GameObject_AudioClip_float += value;
                HookHandler.HookStab_GameObject_AudioClip_float();
            }
            remove => HookHandler._afterStab_GameObject_AudioClip_float -= value;
        }

        public static event Delegates.Stab_GameObject_Hashtable_AfterArgs Stab_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterStab_GameObject_Hashtable += value;
                HookHandler.HookStab_GameObject_Hashtable();
            }
            remove => HookHandler._afterStab_GameObject_Hashtable -= value;
        }

        public static event Delegates.LookFrom_GameObject_Vector3_float_AfterArgs LookFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterLookFrom_GameObject_Vector3_float += value;
                HookHandler.HookLookFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._afterLookFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.LookFrom_GameObject_Hashtable_AfterArgs LookFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterLookFrom_GameObject_Hashtable += value;
                HookHandler.HookLookFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterLookFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.LookTo_GameObject_Vector3_float_AfterArgs LookTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterLookTo_GameObject_Vector3_float += value;
                HookHandler.HookLookTo_GameObject_Vector3_float();
            }
            remove => HookHandler._afterLookTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.LookTo_GameObject_Hashtable_AfterArgs LookTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterLookTo_GameObject_Hashtable += value;
                HookHandler.HookLookTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterLookTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveTo_GameObject_Vector3_float_AfterArgs MoveTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterMoveTo_GameObject_Vector3_float += value;
                HookHandler.HookMoveTo_GameObject_Vector3_float();
            }
            remove => HookHandler._afterMoveTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveTo_GameObject_Hashtable_AfterArgs MoveTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterMoveTo_GameObject_Hashtable += value;
                HookHandler.HookMoveTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterMoveTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveFrom_GameObject_Vector3_float_AfterArgs MoveFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterMoveFrom_GameObject_Vector3_float += value;
                HookHandler.HookMoveFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._afterMoveFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveFrom_GameObject_Hashtable_AfterArgs MoveFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterMoveFrom_GameObject_Hashtable += value;
                HookHandler.HookMoveFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterMoveFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveAdd_GameObject_Vector3_float_AfterArgs MoveAdd_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterMoveAdd_GameObject_Vector3_float += value;
                HookHandler.HookMoveAdd_GameObject_Vector3_float();
            }
            remove => HookHandler._afterMoveAdd_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveAdd_GameObject_Hashtable_AfterArgs MoveAdd_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterMoveAdd_GameObject_Hashtable += value;
                HookHandler.HookMoveAdd_GameObject_Hashtable();
            }
            remove => HookHandler._afterMoveAdd_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveBy_GameObject_Vector3_float_AfterArgs MoveBy_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterMoveBy_GameObject_Vector3_float += value;
                HookHandler.HookMoveBy_GameObject_Vector3_float();
            }
            remove => HookHandler._afterMoveBy_GameObject_Vector3_float -= value;
        }

        public static event Delegates.MoveBy_GameObject_Hashtable_AfterArgs MoveBy_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterMoveBy_GameObject_Hashtable += value;
                HookHandler.HookMoveBy_GameObject_Hashtable();
            }
            remove => HookHandler._afterMoveBy_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleTo_GameObject_Vector3_float_AfterArgs ScaleTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterScaleTo_GameObject_Vector3_float += value;
                HookHandler.HookScaleTo_GameObject_Vector3_float();
            }
            remove => HookHandler._afterScaleTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleTo_GameObject_Hashtable_AfterArgs ScaleTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterScaleTo_GameObject_Hashtable += value;
                HookHandler.HookScaleTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterScaleTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleFrom_GameObject_Vector3_float_AfterArgs ScaleFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterScaleFrom_GameObject_Vector3_float += value;
                HookHandler.HookScaleFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._afterScaleFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleFrom_GameObject_Hashtable_AfterArgs ScaleFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterScaleFrom_GameObject_Hashtable += value;
                HookHandler.HookScaleFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterScaleFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleAdd_GameObject_Vector3_float_AfterArgs ScaleAdd_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterScaleAdd_GameObject_Vector3_float += value;
                HookHandler.HookScaleAdd_GameObject_Vector3_float();
            }
            remove => HookHandler._afterScaleAdd_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleAdd_GameObject_Hashtable_AfterArgs ScaleAdd_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterScaleAdd_GameObject_Hashtable += value;
                HookHandler.HookScaleAdd_GameObject_Hashtable();
            }
            remove => HookHandler._afterScaleAdd_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleBy_GameObject_Vector3_float_AfterArgs ScaleBy_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterScaleBy_GameObject_Vector3_float += value;
                HookHandler.HookScaleBy_GameObject_Vector3_float();
            }
            remove => HookHandler._afterScaleBy_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ScaleBy_GameObject_Hashtable_AfterArgs ScaleBy_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterScaleBy_GameObject_Hashtable += value;
                HookHandler.HookScaleBy_GameObject_Hashtable();
            }
            remove => HookHandler._afterScaleBy_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateTo_GameObject_Vector3_float_AfterArgs RotateTo_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterRotateTo_GameObject_Vector3_float += value;
                HookHandler.HookRotateTo_GameObject_Vector3_float();
            }
            remove => HookHandler._afterRotateTo_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateTo_GameObject_Hashtable_AfterArgs RotateTo_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterRotateTo_GameObject_Hashtable += value;
                HookHandler.HookRotateTo_GameObject_Hashtable();
            }
            remove => HookHandler._afterRotateTo_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateFrom_GameObject_Vector3_float_AfterArgs RotateFrom_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterRotateFrom_GameObject_Vector3_float += value;
                HookHandler.HookRotateFrom_GameObject_Vector3_float();
            }
            remove => HookHandler._afterRotateFrom_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateFrom_GameObject_Hashtable_AfterArgs RotateFrom_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterRotateFrom_GameObject_Hashtable += value;
                HookHandler.HookRotateFrom_GameObject_Hashtable();
            }
            remove => HookHandler._afterRotateFrom_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateAdd_GameObject_Vector3_float_AfterArgs RotateAdd_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterRotateAdd_GameObject_Vector3_float += value;
                HookHandler.HookRotateAdd_GameObject_Vector3_float();
            }
            remove => HookHandler._afterRotateAdd_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateAdd_GameObject_Hashtable_AfterArgs RotateAdd_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterRotateAdd_GameObject_Hashtable += value;
                HookHandler.HookRotateAdd_GameObject_Hashtable();
            }
            remove => HookHandler._afterRotateAdd_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateBy_GameObject_Vector3_float_AfterArgs RotateBy_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterRotateBy_GameObject_Vector3_float += value;
                HookHandler.HookRotateBy_GameObject_Vector3_float();
            }
            remove => HookHandler._afterRotateBy_GameObject_Vector3_float -= value;
        }

        public static event Delegates.RotateBy_GameObject_Hashtable_AfterArgs RotateBy_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterRotateBy_GameObject_Hashtable += value;
                HookHandler.HookRotateBy_GameObject_Hashtable();
            }
            remove => HookHandler._afterRotateBy_GameObject_Hashtable -= value;
        }

        public static event Delegates.ShakePosition_GameObject_Vector3_float_AfterArgs
            ShakePosition_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._afterShakePosition_GameObject_Vector3_float += value;
                    HookHandler.HookShakePosition_GameObject_Vector3_float();
                }
                remove => HookHandler._afterShakePosition_GameObject_Vector3_float -= value;
            }

        public static event Delegates.ShakePosition_GameObject_Hashtable_AfterArgs ShakePosition_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterShakePosition_GameObject_Hashtable += value;
                HookHandler.HookShakePosition_GameObject_Hashtable();
            }
            remove => HookHandler._afterShakePosition_GameObject_Hashtable -= value;
        }

        public static event Delegates.ShakeScale_GameObject_Vector3_float_AfterArgs ShakeScale_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterShakeScale_GameObject_Vector3_float += value;
                HookHandler.HookShakeScale_GameObject_Vector3_float();
            }
            remove => HookHandler._afterShakeScale_GameObject_Vector3_float -= value;
        }

        public static event Delegates.ShakeScale_GameObject_Hashtable_AfterArgs ShakeScale_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterShakeScale_GameObject_Hashtable += value;
                HookHandler.HookShakeScale_GameObject_Hashtable();
            }
            remove => HookHandler._afterShakeScale_GameObject_Hashtable -= value;
        }

        public static event Delegates.ShakeRotation_GameObject_Vector3_float_AfterArgs
            ShakeRotation_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._afterShakeRotation_GameObject_Vector3_float += value;
                    HookHandler.HookShakeRotation_GameObject_Vector3_float();
                }
                remove => HookHandler._afterShakeRotation_GameObject_Vector3_float -= value;
            }

        public static event Delegates.ShakeRotation_GameObject_Hashtable_AfterArgs ShakeRotation_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterShakeRotation_GameObject_Hashtable += value;
                HookHandler.HookShakeRotation_GameObject_Hashtable();
            }
            remove => HookHandler._afterShakeRotation_GameObject_Hashtable -= value;
        }

        public static event Delegates.PunchPosition_GameObject_Vector3_float_AfterArgs
            PunchPosition_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._afterPunchPosition_GameObject_Vector3_float += value;
                    HookHandler.HookPunchPosition_GameObject_Vector3_float();
                }
                remove => HookHandler._afterPunchPosition_GameObject_Vector3_float -= value;
            }

        public static event Delegates.PunchPosition_GameObject_Hashtable_AfterArgs PunchPosition_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterPunchPosition_GameObject_Hashtable += value;
                HookHandler.HookPunchPosition_GameObject_Hashtable();
            }
            remove => HookHandler._afterPunchPosition_GameObject_Hashtable -= value;
        }

        public static event Delegates.PunchRotation_GameObject_Vector3_float_AfterArgs
            PunchRotation_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._afterPunchRotation_GameObject_Vector3_float += value;
                    HookHandler.HookPunchRotation_GameObject_Vector3_float();
                }
                remove => HookHandler._afterPunchRotation_GameObject_Vector3_float -= value;
            }

        public static event Delegates.PunchRotation_GameObject_Hashtable_AfterArgs PunchRotation_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterPunchRotation_GameObject_Hashtable += value;
                HookHandler.HookPunchRotation_GameObject_Hashtable();
            }
            remove => HookHandler._afterPunchRotation_GameObject_Hashtable -= value;
        }

        public static event Delegates.PunchScale_GameObject_Vector3_float_AfterArgs PunchScale_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterPunchScale_GameObject_Vector3_float += value;
                HookHandler.HookPunchScale_GameObject_Vector3_float();
            }
            remove => HookHandler._afterPunchScale_GameObject_Vector3_float -= value;
        }

        public static event Delegates.PunchScale_GameObject_Hashtable_AfterArgs PunchScale_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterPunchScale_GameObject_Hashtable += value;
                HookHandler.HookPunchScale_GameObject_Hashtable();
            }
            remove => HookHandler._afterPunchScale_GameObject_Hashtable -= value;
        }

        public static event Delegates.GenerateTargets_AfterArgs GenerateTargets
        {
            add
            {
                HookHandler._afterGenerateTargets += value;
                HookHandler.HookGenerateTargets();
            }
            remove => HookHandler._afterGenerateTargets -= value;
        }

        public static event Delegates.GenerateRectTargets_AfterArgs GenerateRectTargets
        {
            add
            {
                HookHandler._afterGenerateRectTargets += value;
                HookHandler.HookGenerateRectTargets();
            }
            remove => HookHandler._afterGenerateRectTargets -= value;
        }

        public static event Delegates.GenerateColorTargets_AfterArgs GenerateColorTargets
        {
            add
            {
                HookHandler._afterGenerateColorTargets += value;
                HookHandler.HookGenerateColorTargets();
            }
            remove => HookHandler._afterGenerateColorTargets -= value;
        }

        public static event Delegates.GenerateVector3Targets_AfterArgs GenerateVector3Targets
        {
            add
            {
                HookHandler._afterGenerateVector3Targets += value;
                HookHandler.HookGenerateVector3Targets();
            }
            remove => HookHandler._afterGenerateVector3Targets -= value;
        }

        public static event Delegates.GenerateVector2Targets_AfterArgs GenerateVector2Targets
        {
            add
            {
                HookHandler._afterGenerateVector2Targets += value;
                HookHandler.HookGenerateVector2Targets();
            }
            remove => HookHandler._afterGenerateVector2Targets -= value;
        }

        public static event Delegates.GenerateFloatTargets_AfterArgs GenerateFloatTargets
        {
            add
            {
                HookHandler._afterGenerateFloatTargets += value;
                HookHandler.HookGenerateFloatTargets();
            }
            remove => HookHandler._afterGenerateFloatTargets -= value;
        }

        public static event Delegates.GenerateColorToTargets_AfterArgs GenerateColorToTargets
        {
            add
            {
                HookHandler._afterGenerateColorToTargets += value;
                HookHandler.HookGenerateColorToTargets();
            }
            remove => HookHandler._afterGenerateColorToTargets -= value;
        }

        public static event Delegates.GenerateAudioToTargets_AfterArgs GenerateAudioToTargets
        {
            add
            {
                HookHandler._afterGenerateAudioToTargets += value;
                HookHandler.HookGenerateAudioToTargets();
            }
            remove => HookHandler._afterGenerateAudioToTargets -= value;
        }

        public static event Delegates.GenerateStabTargets_AfterArgs GenerateStabTargets
        {
            add
            {
                HookHandler._afterGenerateStabTargets += value;
                HookHandler.HookGenerateStabTargets();
            }
            remove => HookHandler._afterGenerateStabTargets -= value;
        }

        public static event Delegates.GenerateLookToTargets_AfterArgs GenerateLookToTargets
        {
            add
            {
                HookHandler._afterGenerateLookToTargets += value;
                HookHandler.HookGenerateLookToTargets();
            }
            remove => HookHandler._afterGenerateLookToTargets -= value;
        }

        public static event Delegates.GenerateMoveToPathTargets_AfterArgs GenerateMoveToPathTargets
        {
            add
            {
                HookHandler._afterGenerateMoveToPathTargets += value;
                HookHandler.HookGenerateMoveToPathTargets();
            }
            remove => HookHandler._afterGenerateMoveToPathTargets -= value;
        }

        public static event Delegates.GenerateMoveToTargets_AfterArgs GenerateMoveToTargets
        {
            add
            {
                HookHandler._afterGenerateMoveToTargets += value;
                HookHandler.HookGenerateMoveToTargets();
            }
            remove => HookHandler._afterGenerateMoveToTargets -= value;
        }

        public static event Delegates.GenerateMoveByTargets_AfterArgs GenerateMoveByTargets
        {
            add
            {
                HookHandler._afterGenerateMoveByTargets += value;
                HookHandler.HookGenerateMoveByTargets();
            }
            remove => HookHandler._afterGenerateMoveByTargets -= value;
        }

        public static event Delegates.GenerateScaleToTargets_AfterArgs GenerateScaleToTargets
        {
            add
            {
                HookHandler._afterGenerateScaleToTargets += value;
                HookHandler.HookGenerateScaleToTargets();
            }
            remove => HookHandler._afterGenerateScaleToTargets -= value;
        }

        public static event Delegates.GenerateScaleByTargets_AfterArgs GenerateScaleByTargets
        {
            add
            {
                HookHandler._afterGenerateScaleByTargets += value;
                HookHandler.HookGenerateScaleByTargets();
            }
            remove => HookHandler._afterGenerateScaleByTargets -= value;
        }

        public static event Delegates.GenerateScaleAddTargets_AfterArgs GenerateScaleAddTargets
        {
            add
            {
                HookHandler._afterGenerateScaleAddTargets += value;
                HookHandler.HookGenerateScaleAddTargets();
            }
            remove => HookHandler._afterGenerateScaleAddTargets -= value;
        }

        public static event Delegates.GenerateRotateToTargets_AfterArgs GenerateRotateToTargets
        {
            add
            {
                HookHandler._afterGenerateRotateToTargets += value;
                HookHandler.HookGenerateRotateToTargets();
            }
            remove => HookHandler._afterGenerateRotateToTargets -= value;
        }

        public static event Delegates.GenerateRotateAddTargets_AfterArgs GenerateRotateAddTargets
        {
            add
            {
                HookHandler._afterGenerateRotateAddTargets += value;
                HookHandler.HookGenerateRotateAddTargets();
            }
            remove => HookHandler._afterGenerateRotateAddTargets -= value;
        }

        public static event Delegates.GenerateRotateByTargets_AfterArgs GenerateRotateByTargets
        {
            add
            {
                HookHandler._afterGenerateRotateByTargets += value;
                HookHandler.HookGenerateRotateByTargets();
            }
            remove => HookHandler._afterGenerateRotateByTargets -= value;
        }

        public static event Delegates.GenerateShakePositionTargets_AfterArgs GenerateShakePositionTargets
        {
            add
            {
                HookHandler._afterGenerateShakePositionTargets += value;
                HookHandler.HookGenerateShakePositionTargets();
            }
            remove => HookHandler._afterGenerateShakePositionTargets -= value;
        }

        public static event Delegates.GenerateShakeScaleTargets_AfterArgs GenerateShakeScaleTargets
        {
            add
            {
                HookHandler._afterGenerateShakeScaleTargets += value;
                HookHandler.HookGenerateShakeScaleTargets();
            }
            remove => HookHandler._afterGenerateShakeScaleTargets -= value;
        }

        public static event Delegates.GenerateShakeRotationTargets_AfterArgs GenerateShakeRotationTargets
        {
            add
            {
                HookHandler._afterGenerateShakeRotationTargets += value;
                HookHandler.HookGenerateShakeRotationTargets();
            }
            remove => HookHandler._afterGenerateShakeRotationTargets -= value;
        }

        public static event Delegates.GeneratePunchPositionTargets_AfterArgs GeneratePunchPositionTargets
        {
            add
            {
                HookHandler._afterGeneratePunchPositionTargets += value;
                HookHandler.HookGeneratePunchPositionTargets();
            }
            remove => HookHandler._afterGeneratePunchPositionTargets -= value;
        }

        public static event Delegates.GeneratePunchRotationTargets_AfterArgs GeneratePunchRotationTargets
        {
            add
            {
                HookHandler._afterGeneratePunchRotationTargets += value;
                HookHandler.HookGeneratePunchRotationTargets();
            }
            remove => HookHandler._afterGeneratePunchRotationTargets -= value;
        }

        public static event Delegates.GeneratePunchScaleTargets_AfterArgs GeneratePunchScaleTargets
        {
            add
            {
                HookHandler._afterGeneratePunchScaleTargets += value;
                HookHandler.HookGeneratePunchScaleTargets();
            }
            remove => HookHandler._afterGeneratePunchScaleTargets -= value;
        }

        public static event Delegates.ApplyRectTargets_AfterArgs ApplyRectTargets
        {
            add
            {
                HookHandler._afterApplyRectTargets += value;
                HookHandler.HookApplyRectTargets();
            }
            remove => HookHandler._afterApplyRectTargets -= value;
        }

        public static event Delegates.ApplyColorTargets_AfterArgs ApplyColorTargets
        {
            add
            {
                HookHandler._afterApplyColorTargets += value;
                HookHandler.HookApplyColorTargets();
            }
            remove => HookHandler._afterApplyColorTargets -= value;
        }

        public static event Delegates.ApplyVector3Targets_AfterArgs ApplyVector3Targets
        {
            add
            {
                HookHandler._afterApplyVector3Targets += value;
                HookHandler.HookApplyVector3Targets();
            }
            remove => HookHandler._afterApplyVector3Targets -= value;
        }

        public static event Delegates.ApplyVector2Targets_AfterArgs ApplyVector2Targets
        {
            add
            {
                HookHandler._afterApplyVector2Targets += value;
                HookHandler.HookApplyVector2Targets();
            }
            remove => HookHandler._afterApplyVector2Targets -= value;
        }

        public static event Delegates.ApplyFloatTargets_AfterArgs ApplyFloatTargets
        {
            add
            {
                HookHandler._afterApplyFloatTargets += value;
                HookHandler.HookApplyFloatTargets();
            }
            remove => HookHandler._afterApplyFloatTargets -= value;
        }

        public static event Delegates.ApplyColorToTargets_AfterArgs ApplyColorToTargets
        {
            add
            {
                HookHandler._afterApplyColorToTargets += value;
                HookHandler.HookApplyColorToTargets();
            }
            remove => HookHandler._afterApplyColorToTargets -= value;
        }

        public static event Delegates.ApplyAudioToTargets_AfterArgs ApplyAudioToTargets
        {
            add
            {
                HookHandler._afterApplyAudioToTargets += value;
                HookHandler.HookApplyAudioToTargets();
            }
            remove => HookHandler._afterApplyAudioToTargets -= value;
        }

        public static event Delegates.ApplyStabTargets_AfterArgs ApplyStabTargets
        {
            add
            {
                HookHandler._afterApplyStabTargets += value;
                HookHandler.HookApplyStabTargets();
            }
            remove => HookHandler._afterApplyStabTargets -= value;
        }

        public static event Delegates.ApplyMoveToPathTargets_AfterArgs ApplyMoveToPathTargets
        {
            add
            {
                HookHandler._afterApplyMoveToPathTargets += value;
                HookHandler.HookApplyMoveToPathTargets();
            }
            remove => HookHandler._afterApplyMoveToPathTargets -= value;
        }

        public static event Delegates.ApplyMoveToTargets_AfterArgs ApplyMoveToTargets
        {
            add
            {
                HookHandler._afterApplyMoveToTargets += value;
                HookHandler.HookApplyMoveToTargets();
            }
            remove => HookHandler._afterApplyMoveToTargets -= value;
        }

        public static event Delegates.ApplyMoveByTargets_AfterArgs ApplyMoveByTargets
        {
            add
            {
                HookHandler._afterApplyMoveByTargets += value;
                HookHandler.HookApplyMoveByTargets();
            }
            remove => HookHandler._afterApplyMoveByTargets -= value;
        }

        public static event Delegates.ApplyScaleToTargets_AfterArgs ApplyScaleToTargets
        {
            add
            {
                HookHandler._afterApplyScaleToTargets += value;
                HookHandler.HookApplyScaleToTargets();
            }
            remove => HookHandler._afterApplyScaleToTargets -= value;
        }

        public static event Delegates.ApplyLookToTargets_AfterArgs ApplyLookToTargets
        {
            add
            {
                HookHandler._afterApplyLookToTargets += value;
                HookHandler.HookApplyLookToTargets();
            }
            remove => HookHandler._afterApplyLookToTargets -= value;
        }

        public static event Delegates.ApplyRotateToTargets_AfterArgs ApplyRotateToTargets
        {
            add
            {
                HookHandler._afterApplyRotateToTargets += value;
                HookHandler.HookApplyRotateToTargets();
            }
            remove => HookHandler._afterApplyRotateToTargets -= value;
        }

        public static event Delegates.ApplyRotateAddTargets_AfterArgs ApplyRotateAddTargets
        {
            add
            {
                HookHandler._afterApplyRotateAddTargets += value;
                HookHandler.HookApplyRotateAddTargets();
            }
            remove => HookHandler._afterApplyRotateAddTargets -= value;
        }

        public static event Delegates.ApplyShakePositionTargets_AfterArgs ApplyShakePositionTargets
        {
            add
            {
                HookHandler._afterApplyShakePositionTargets += value;
                HookHandler.HookApplyShakePositionTargets();
            }
            remove => HookHandler._afterApplyShakePositionTargets -= value;
        }

        public static event Delegates.ApplyShakeScaleTargets_AfterArgs ApplyShakeScaleTargets
        {
            add
            {
                HookHandler._afterApplyShakeScaleTargets += value;
                HookHandler.HookApplyShakeScaleTargets();
            }
            remove => HookHandler._afterApplyShakeScaleTargets -= value;
        }

        public static event Delegates.ApplyShakeRotationTargets_AfterArgs ApplyShakeRotationTargets
        {
            add
            {
                HookHandler._afterApplyShakeRotationTargets += value;
                HookHandler.HookApplyShakeRotationTargets();
            }
            remove => HookHandler._afterApplyShakeRotationTargets -= value;
        }

        public static event Delegates.ApplyPunchPositionTargets_AfterArgs ApplyPunchPositionTargets
        {
            add
            {
                HookHandler._afterApplyPunchPositionTargets += value;
                HookHandler.HookApplyPunchPositionTargets();
            }
            remove => HookHandler._afterApplyPunchPositionTargets -= value;
        }

        public static event Delegates.ApplyPunchRotationTargets_AfterArgs ApplyPunchRotationTargets
        {
            add
            {
                HookHandler._afterApplyPunchRotationTargets += value;
                HookHandler.HookApplyPunchRotationTargets();
            }
            remove => HookHandler._afterApplyPunchRotationTargets -= value;
        }

        public static event Delegates.ApplyPunchScaleTargets_AfterArgs ApplyPunchScaleTargets
        {
            add
            {
                HookHandler._afterApplyPunchScaleTargets += value;
                HookHandler.HookApplyPunchScaleTargets();
            }
            remove => HookHandler._afterApplyPunchScaleTargets -= value;
        }

        public static event Delegates.TweenStart_AfterArgs TweenStart
        {
            add
            {
                HookHandler._afterTweenStart += value;
                HookHandler.HookTweenStart();
            }
            remove => HookHandler._afterTweenStart -= value;
        }

        public static event Delegates.TweenUpdate_AfterArgs TweenUpdate
        {
            add
            {
                HookHandler._afterTweenUpdate += value;
                HookHandler.HookTweenUpdate();
            }
            remove => HookHandler._afterTweenUpdate -= value;
        }

        public static event Delegates.TweenComplete_AfterArgs TweenComplete
        {
            add
            {
                HookHandler._afterTweenComplete += value;
                HookHandler.HookTweenComplete();
            }
            remove => HookHandler._afterTweenComplete -= value;
        }

        public static event Delegates.TweenLoop_AfterArgs TweenLoop
        {
            add
            {
                HookHandler._afterTweenLoop += value;
                HookHandler.HookTweenLoop();
            }
            remove => HookHandler._afterTweenLoop -= value;
        }

        public static event Delegates.RectUpdate_AfterArgs RectUpdate
        {
            add
            {
                HookHandler._afterRectUpdate += value;
                HookHandler.HookRectUpdate();
            }
            remove => HookHandler._afterRectUpdate -= value;
        }

        public static event Delegates.Vector3Update_AfterArgs Vector3Update
        {
            add
            {
                HookHandler._afterVector3Update += value;
                HookHandler.HookVector3Update();
            }
            remove => HookHandler._afterVector3Update -= value;
        }

        public static event Delegates.Vector2Update_AfterArgs Vector2Update
        {
            add
            {
                HookHandler._afterVector2Update += value;
                HookHandler.HookVector2Update();
            }
            remove => HookHandler._afterVector2Update -= value;
        }

        public static event Delegates.FloatUpdate_AfterArgs FloatUpdate
        {
            add
            {
                HookHandler._afterFloatUpdate += value;
                HookHandler.HookFloatUpdate();
            }
            remove => HookHandler._afterFloatUpdate -= value;
        }

        public static event Delegates.FadeUpdate_GameObject_Hashtable_AfterArgs FadeUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterFadeUpdate_GameObject_Hashtable += value;
                HookHandler.HookFadeUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterFadeUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.FadeUpdate_GameObject_float_float_AfterArgs FadeUpdate_GameObject_float_float
        {
            add
            {
                HookHandler._afterFadeUpdate_GameObject_float_float += value;
                HookHandler.HookFadeUpdate_GameObject_float_float();
            }
            remove => HookHandler._afterFadeUpdate_GameObject_float_float -= value;
        }

        public static event Delegates.ColorUpdate_GameObject_Hashtable_AfterArgs ColorUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterColorUpdate_GameObject_Hashtable += value;
                HookHandler.HookColorUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterColorUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.ColorUpdate_GameObject_Color_float_AfterArgs ColorUpdate_GameObject_Color_float
        {
            add
            {
                HookHandler._afterColorUpdate_GameObject_Color_float += value;
                HookHandler.HookColorUpdate_GameObject_Color_float();
            }
            remove => HookHandler._afterColorUpdate_GameObject_Color_float -= value;
        }

        public static event Delegates.AudioUpdate_GameObject_Hashtable_AfterArgs AudioUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterAudioUpdate_GameObject_Hashtable += value;
                HookHandler.HookAudioUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterAudioUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.AudioUpdate_GameObject_float_float_float_AfterArgs
            AudioUpdate_GameObject_float_float_float
            {
                add
                {
                    HookHandler._afterAudioUpdate_GameObject_float_float_float += value;
                    HookHandler.HookAudioUpdate_GameObject_float_float_float();
                }
                remove => HookHandler._afterAudioUpdate_GameObject_float_float_float -= value;
            }

        public static event Delegates.RotateUpdate_GameObject_Hashtable_AfterArgs RotateUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterRotateUpdate_GameObject_Hashtable += value;
                HookHandler.HookRotateUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterRotateUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.RotateUpdate_GameObject_Vector3_float_AfterArgs
            RotateUpdate_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._afterRotateUpdate_GameObject_Vector3_float += value;
                    HookHandler.HookRotateUpdate_GameObject_Vector3_float();
                }
                remove => HookHandler._afterRotateUpdate_GameObject_Vector3_float -= value;
            }

        public static event Delegates.ScaleUpdate_GameObject_Hashtable_AfterArgs ScaleUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterScaleUpdate_GameObject_Hashtable += value;
                HookHandler.HookScaleUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterScaleUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.ScaleUpdate_GameObject_Vector3_float_AfterArgs
            ScaleUpdate_GameObject_Vector3_float
            {
                add
                {
                    HookHandler._afterScaleUpdate_GameObject_Vector3_float += value;
                    HookHandler.HookScaleUpdate_GameObject_Vector3_float();
                }
                remove => HookHandler._afterScaleUpdate_GameObject_Vector3_float -= value;
            }

        public static event Delegates.MoveUpdate_GameObject_Hashtable_AfterArgs MoveUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterMoveUpdate_GameObject_Hashtable += value;
                HookHandler.HookMoveUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterMoveUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.MoveUpdate_GameObject_Vector3_float_AfterArgs MoveUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterMoveUpdate_GameObject_Vector3_float += value;
                HookHandler.HookMoveUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._afterMoveUpdate_GameObject_Vector3_float -= value;
        }

        public static event Delegates.LookUpdate_GameObject_Hashtable_AfterArgs LookUpdate_GameObject_Hashtable
        {
            add
            {
                HookHandler._afterLookUpdate_GameObject_Hashtable += value;
                HookHandler.HookLookUpdate_GameObject_Hashtable();
            }
            remove => HookHandler._afterLookUpdate_GameObject_Hashtable -= value;
        }

        public static event Delegates.LookUpdate_GameObject_Vector3_float_AfterArgs LookUpdate_GameObject_Vector3_float
        {
            add
            {
                HookHandler._afterLookUpdate_GameObject_Vector3_float += value;
                HookHandler.HookLookUpdate_GameObject_Vector3_float();
            }
            remove => HookHandler._afterLookUpdate_GameObject_Vector3_float -= value;
        }

        public static event Delegates.PathLength_Array_AfterArgs PathLength_Array
        {
            add
            {
                HookHandler._afterPathLength_Array += value;
                HookHandler.HookPathLength_Array();
            }
            remove => HookHandler._afterPathLength_Array -= value;
        }

        public static event Delegates.CameraTexture_AfterArgs CameraTexture
        {
            add
            {
                HookHandler._afterCameraTexture += value;
                HookHandler.HookCameraTexture();
            }
            remove => HookHandler._afterCameraTexture -= value;
        }

        public static event Delegates.PutOnPath_GameObject_Array_float_AfterArgs PutOnPath_GameObject_Array_float
        {
            add
            {
                HookHandler._afterPutOnPath_GameObject_Array_float += value;
                HookHandler.HookPutOnPath_GameObject_Array_float();
            }
            remove => HookHandler._afterPutOnPath_GameObject_Array_float -= value;
        }

        public static event Delegates.PutOnPath_Transform_Array_float_AfterArgs PutOnPath_Transform_Array_float
        {
            add
            {
                HookHandler._afterPutOnPath_Transform_Array_float += value;
                HookHandler.HookPutOnPath_Transform_Array_float();
            }
            remove => HookHandler._afterPutOnPath_Transform_Array_float -= value;
        }

        public static event Delegates.PointOnPath_Array_float_AfterArgs PointOnPath_Array_float
        {
            add
            {
                HookHandler._afterPointOnPath_Array_float += value;
                HookHandler.HookPointOnPath_Array_float();
            }
            remove => HookHandler._afterPointOnPath_Array_float -= value;
        }

        public static event Delegates.DrawLine_Array_AfterArgs DrawLine_Array
        {
            add
            {
                HookHandler._afterDrawLine_Array += value;
                HookHandler.HookDrawLine_Array();
            }
            remove => HookHandler._afterDrawLine_Array -= value;
        }

        public static event Delegates.DrawLine_Array_Color_AfterArgs DrawLine_Array_Color
        {
            add
            {
                HookHandler._afterDrawLine_Array_Color += value;
                HookHandler.HookDrawLine_Array_Color();
            }
            remove => HookHandler._afterDrawLine_Array_Color -= value;
        }

        public static event Delegates.DrawLineGizmos_Array_AfterArgs DrawLineGizmos_Array
        {
            add
            {
                HookHandler._afterDrawLineGizmos_Array += value;
                HookHandler.HookDrawLineGizmos_Array();
            }
            remove => HookHandler._afterDrawLineGizmos_Array -= value;
        }

        public static event Delegates.DrawLineGizmos_Array_Color_AfterArgs DrawLineGizmos_Array_Color
        {
            add
            {
                HookHandler._afterDrawLineGizmos_Array_Color += value;
                HookHandler.HookDrawLineGizmos_Array_Color();
            }
            remove => HookHandler._afterDrawLineGizmos_Array_Color -= value;
        }

        public static event Delegates.DrawLineHandles_Array_AfterArgs DrawLineHandles_Array
        {
            add
            {
                HookHandler._afterDrawLineHandles_Array += value;
                HookHandler.HookDrawLineHandles_Array();
            }
            remove => HookHandler._afterDrawLineHandles_Array -= value;
        }

        public static event Delegates.DrawLineHandles_Array_Color_AfterArgs DrawLineHandles_Array_Color
        {
            add
            {
                HookHandler._afterDrawLineHandles_Array_Color += value;
                HookHandler.HookDrawLineHandles_Array_Color();
            }
            remove => HookHandler._afterDrawLineHandles_Array_Color -= value;
        }

        public static event Delegates.DrawPath_Array_AfterArgs DrawPath_Array
        {
            add
            {
                HookHandler._afterDrawPath_Array += value;
                HookHandler.HookDrawPath_Array();
            }
            remove => HookHandler._afterDrawPath_Array -= value;
        }

        public static event Delegates.DrawPath_Array_Color_AfterArgs DrawPath_Array_Color
        {
            add
            {
                HookHandler._afterDrawPath_Array_Color += value;
                HookHandler.HookDrawPath_Array_Color();
            }
            remove => HookHandler._afterDrawPath_Array_Color -= value;
        }

        public static event Delegates.DrawPathGizmos_Array_AfterArgs DrawPathGizmos_Array
        {
            add
            {
                HookHandler._afterDrawPathGizmos_Array += value;
                HookHandler.HookDrawPathGizmos_Array();
            }
            remove => HookHandler._afterDrawPathGizmos_Array -= value;
        }

        public static event Delegates.DrawPathGizmos_Array_Color_AfterArgs DrawPathGizmos_Array_Color
        {
            add
            {
                HookHandler._afterDrawPathGizmos_Array_Color += value;
                HookHandler.HookDrawPathGizmos_Array_Color();
            }
            remove => HookHandler._afterDrawPathGizmos_Array_Color -= value;
        }

        public static event Delegates.DrawPathHandles_Array_AfterArgs DrawPathHandles_Array
        {
            add
            {
                HookHandler._afterDrawPathHandles_Array += value;
                HookHandler.HookDrawPathHandles_Array();
            }
            remove => HookHandler._afterDrawPathHandles_Array -= value;
        }

        public static event Delegates.DrawPathHandles_Array_Color_AfterArgs DrawPathHandles_Array_Color
        {
            add
            {
                HookHandler._afterDrawPathHandles_Array_Color += value;
                HookHandler.HookDrawPathHandles_Array_Color();
            }
            remove => HookHandler._afterDrawPathHandles_Array_Color -= value;
        }

        public static event Delegates.CameraFadeDepth_AfterArgs CameraFadeDepth
        {
            add
            {
                HookHandler._afterCameraFadeDepth += value;
                HookHandler.HookCameraFadeDepth();
            }
            remove => HookHandler._afterCameraFadeDepth -= value;
        }

        public static event Delegates.CameraFadeDestroy_AfterArgs CameraFadeDestroy
        {
            add
            {
                HookHandler._afterCameraFadeDestroy += value;
                HookHandler.HookCameraFadeDestroy();
            }
            remove => HookHandler._afterCameraFadeDestroy -= value;
        }

        public static event Delegates.CameraFadeSwap_AfterArgs CameraFadeSwap
        {
            add
            {
                HookHandler._afterCameraFadeSwap += value;
                HookHandler.HookCameraFadeSwap();
            }
            remove => HookHandler._afterCameraFadeSwap -= value;
        }

        public static event Delegates.CameraFadeAdd_Texture2D_int_AfterArgs CameraFadeAdd_Texture2D_int
        {
            add
            {
                HookHandler._afterCameraFadeAdd_Texture2D_int += value;
                HookHandler.HookCameraFadeAdd_Texture2D_int();
            }
            remove => HookHandler._afterCameraFadeAdd_Texture2D_int -= value;
        }

        public static event Delegates.CameraFadeAdd_Texture2D_AfterArgs CameraFadeAdd_Texture2D
        {
            add
            {
                HookHandler._afterCameraFadeAdd_Texture2D += value;
                HookHandler.HookCameraFadeAdd_Texture2D();
            }
            remove => HookHandler._afterCameraFadeAdd_Texture2D -= value;
        }

        public static event Delegates.CameraFadeAdd_AfterArgs CameraFadeAdd
        {
            add
            {
                HookHandler._afterCameraFadeAdd += value;
                HookHandler.HookCameraFadeAdd();
            }
            remove => HookHandler._afterCameraFadeAdd -= value;
        }

        public static event Delegates.Resume_GameObject_AfterArgs Resume_GameObject
        {
            add
            {
                HookHandler._afterResume_GameObject += value;
                HookHandler.HookResume_GameObject();
            }
            remove => HookHandler._afterResume_GameObject -= value;
        }

        public static event Delegates.Resume_GameObject_bool_AfterArgs Resume_GameObject_bool
        {
            add
            {
                HookHandler._afterResume_GameObject_bool += value;
                HookHandler.HookResume_GameObject_bool();
            }
            remove => HookHandler._afterResume_GameObject_bool -= value;
        }

        public static event Delegates.Resume_GameObject_string_AfterArgs Resume_GameObject_string
        {
            add
            {
                HookHandler._afterResume_GameObject_string += value;
                HookHandler.HookResume_GameObject_string();
            }
            remove => HookHandler._afterResume_GameObject_string -= value;
        }

        public static event Delegates.Resume_GameObject_string_bool_AfterArgs Resume_GameObject_string_bool
        {
            add
            {
                HookHandler._afterResume_GameObject_string_bool += value;
                HookHandler.HookResume_GameObject_string_bool();
            }
            remove => HookHandler._afterResume_GameObject_string_bool -= value;
        }

        public static event Delegates.Resume_AfterArgs Resume
        {
            add
            {
                HookHandler._afterResume += value;
                HookHandler.HookResume();
            }
            remove => HookHandler._afterResume -= value;
        }

        public static event Delegates.Resume_string_AfterArgs Resume_string
        {
            add
            {
                HookHandler._afterResume_string += value;
                HookHandler.HookResume_string();
            }
            remove => HookHandler._afterResume_string -= value;
        }

        public static event Delegates.Pause_GameObject_AfterArgs Pause_GameObject
        {
            add
            {
                HookHandler._afterPause_GameObject += value;
                HookHandler.HookPause_GameObject();
            }
            remove => HookHandler._afterPause_GameObject -= value;
        }

        public static event Delegates.Pause_GameObject_bool_AfterArgs Pause_GameObject_bool
        {
            add
            {
                HookHandler._afterPause_GameObject_bool += value;
                HookHandler.HookPause_GameObject_bool();
            }
            remove => HookHandler._afterPause_GameObject_bool -= value;
        }

        public static event Delegates.Pause_GameObject_string_AfterArgs Pause_GameObject_string
        {
            add
            {
                HookHandler._afterPause_GameObject_string += value;
                HookHandler.HookPause_GameObject_string();
            }
            remove => HookHandler._afterPause_GameObject_string -= value;
        }

        public static event Delegates.Pause_GameObject_string_bool_AfterArgs Pause_GameObject_string_bool
        {
            add
            {
                HookHandler._afterPause_GameObject_string_bool += value;
                HookHandler.HookPause_GameObject_string_bool();
            }
            remove => HookHandler._afterPause_GameObject_string_bool -= value;
        }

        public static event Delegates.Pause_AfterArgs Pause
        {
            add
            {
                HookHandler._afterPause += value;
                HookHandler.HookPause();
            }
            remove => HookHandler._afterPause -= value;
        }

        public static event Delegates.Pause_string_AfterArgs Pause_string
        {
            add
            {
                HookHandler._afterPause_string += value;
                HookHandler.HookPause_string();
            }
            remove => HookHandler._afterPause_string -= value;
        }

        public static event Delegates.Count_AfterArgs Count
        {
            add
            {
                HookHandler._afterCount += value;
                HookHandler.HookCount();
            }
            remove => HookHandler._afterCount -= value;
        }

        public static event Delegates.Count_string_AfterArgs Count_string
        {
            add
            {
                HookHandler._afterCount_string += value;
                HookHandler.HookCount_string();
            }
            remove => HookHandler._afterCount_string -= value;
        }

        public static event Delegates.Count_GameObject_AfterArgs Count_GameObject
        {
            add
            {
                HookHandler._afterCount_GameObject += value;
                HookHandler.HookCount_GameObject();
            }
            remove => HookHandler._afterCount_GameObject -= value;
        }

        public static event Delegates.Count_GameObject_string_AfterArgs Count_GameObject_string
        {
            add
            {
                HookHandler._afterCount_GameObject_string += value;
                HookHandler.HookCount_GameObject_string();
            }
            remove => HookHandler._afterCount_GameObject_string -= value;
        }

        public static event Delegates.Stop_AfterArgs Stop
        {
            add
            {
                HookHandler._afterStop += value;
                HookHandler.HookStop();
            }
            remove => HookHandler._afterStop -= value;
        }

        public static event Delegates.Stop_string_AfterArgs Stop_string
        {
            add
            {
                HookHandler._afterStop_string += value;
                HookHandler.HookStop_string();
            }
            remove => HookHandler._afterStop_string -= value;
        }

        public static event Delegates.StopByName_string_AfterArgs StopByName_string
        {
            add
            {
                HookHandler._afterStopByName_string += value;
                HookHandler.HookStopByName_string();
            }
            remove => HookHandler._afterStopByName_string -= value;
        }

        public static event Delegates.Stop_GameObject_AfterArgs Stop_GameObject
        {
            add
            {
                HookHandler._afterStop_GameObject += value;
                HookHandler.HookStop_GameObject();
            }
            remove => HookHandler._afterStop_GameObject -= value;
        }

        public static event Delegates.Stop_GameObject_bool_AfterArgs Stop_GameObject_bool
        {
            add
            {
                HookHandler._afterStop_GameObject_bool += value;
                HookHandler.HookStop_GameObject_bool();
            }
            remove => HookHandler._afterStop_GameObject_bool -= value;
        }

        public static event Delegates.Stop_GameObject_string_AfterArgs Stop_GameObject_string
        {
            add
            {
                HookHandler._afterStop_GameObject_string += value;
                HookHandler.HookStop_GameObject_string();
            }
            remove => HookHandler._afterStop_GameObject_string -= value;
        }

        public static event Delegates.StopByName_GameObject_string_AfterArgs StopByName_GameObject_string
        {
            add
            {
                HookHandler._afterStopByName_GameObject_string += value;
                HookHandler.HookStopByName_GameObject_string();
            }
            remove => HookHandler._afterStopByName_GameObject_string -= value;
        }

        public static event Delegates.Stop_GameObject_string_bool_AfterArgs Stop_GameObject_string_bool
        {
            add
            {
                HookHandler._afterStop_GameObject_string_bool += value;
                HookHandler.HookStop_GameObject_string_bool();
            }
            remove => HookHandler._afterStop_GameObject_string_bool -= value;
        }

        public static event Delegates.StopByName_GameObject_string_bool_AfterArgs StopByName_GameObject_string_bool
        {
            add
            {
                HookHandler._afterStopByName_GameObject_string_bool += value;
                HookHandler.HookStopByName_GameObject_string_bool();
            }
            remove => HookHandler._afterStopByName_GameObject_string_bool -= value;
        }

        public static event Delegates.Hash_AfterArgs Hash
        {
            add
            {
                HookHandler._afterHash += value;
                HookHandler.HookHash();
            }
            remove => HookHandler._afterHash -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.LateUpdate_AfterArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.DrawLineHelper_AfterArgs DrawLineHelper
        {
            add
            {
                HookHandler._afterDrawLineHelper += value;
                HookHandler.HookDrawLineHelper();
            }
            remove => HookHandler._afterDrawLineHelper -= value;
        }

        public static event Delegates.DrawPathHelper_AfterArgs DrawPathHelper
        {
            add
            {
                HookHandler._afterDrawPathHelper += value;
                HookHandler.HookDrawPathHelper();
            }
            remove => HookHandler._afterDrawPathHelper -= value;
        }

        public static event Delegates.PathControlPointGenerator_AfterArgs PathControlPointGenerator
        {
            add
            {
                HookHandler._afterPathControlPointGenerator += value;
                HookHandler.HookPathControlPointGenerator();
            }
            remove => HookHandler._afterPathControlPointGenerator -= value;
        }

        public static event Delegates.Interp_AfterArgs Interp
        {
            add
            {
                HookHandler._afterInterp += value;
                HookHandler.HookInterp();
            }
            remove => HookHandler._afterInterp -= value;
        }

        public static event Delegates.Launch_AfterArgs Launch
        {
            add
            {
                HookHandler._afterLaunch += value;
                HookHandler.HookLaunch();
            }
            remove => HookHandler._afterLaunch -= value;
        }

        public static event Delegates.CleanArgs_AfterArgs CleanArgs
        {
            add
            {
                HookHandler._afterCleanArgs += value;
                HookHandler.HookCleanArgs();
            }
            remove => HookHandler._afterCleanArgs -= value;
        }

        public static event Delegates.GenerateID_AfterArgs GenerateID
        {
            add
            {
                HookHandler._afterGenerateID += value;
                HookHandler.HookGenerateID();
            }
            remove => HookHandler._afterGenerateID -= value;
        }

        public static event Delegates.RetrieveArgs_AfterArgs RetrieveArgs
        {
            add
            {
                HookHandler._afterRetrieveArgs += value;
                HookHandler.HookRetrieveArgs();
            }
            remove => HookHandler._afterRetrieveArgs -= value;
        }

        public static event Delegates.GetEasingFunction_AfterArgs GetEasingFunction
        {
            add
            {
                HookHandler._afterGetEasingFunction += value;
                HookHandler.HookGetEasingFunction();
            }
            remove => HookHandler._afterGetEasingFunction -= value;
        }

        public static event Delegates.UpdatePercentage_AfterArgs UpdatePercentage
        {
            add
            {
                HookHandler._afterUpdatePercentage += value;
                HookHandler.HookUpdatePercentage();
            }
            remove => HookHandler._afterUpdatePercentage -= value;
        }

        public static event Delegates.CallBack_AfterArgs CallBack
        {
            add
            {
                HookHandler._afterCallBack += value;
                HookHandler.HookCallBack();
            }
            remove => HookHandler._afterCallBack -= value;
        }

        public static event Delegates.Dispose_AfterArgs Dispose
        {
            add
            {
                HookHandler._afterDispose += value;
                HookHandler.HookDispose();
            }
            remove => HookHandler._afterDispose -= value;
        }

        public static event Delegates.ConflictCheck_AfterArgs ConflictCheck
        {
            add
            {
                HookHandler._afterConflictCheck += value;
                HookHandler.HookConflictCheck();
            }
            remove => HookHandler._afterConflictCheck -= value;
        }

        public static event Delegates.EnableKinematic_AfterArgs EnableKinematic
        {
            add
            {
                HookHandler._afterEnableKinematic += value;
                HookHandler.HookEnableKinematic();
            }
            remove => HookHandler._afterEnableKinematic -= value;
        }

        public static event Delegates.DisableKinematic_AfterArgs DisableKinematic
        {
            add
            {
                HookHandler._afterDisableKinematic += value;
                HookHandler.HookDisableKinematic();
            }
            remove => HookHandler._afterDisableKinematic -= value;
        }

        public static event Delegates.ResumeDelay_AfterArgs ResumeDelay
        {
            add
            {
                HookHandler._afterResumeDelay += value;
                HookHandler.HookResumeDelay();
            }
            remove => HookHandler._afterResumeDelay -= value;
        }

        public static event Delegates.linear_AfterArgs linear
        {
            add
            {
                HookHandler._afterlinear += value;
                HookHandler.Hooklinear();
            }
            remove => HookHandler._afterlinear -= value;
        }

        public static event Delegates.clerp_AfterArgs clerp
        {
            add
            {
                HookHandler._afterclerp += value;
                HookHandler.Hookclerp();
            }
            remove => HookHandler._afterclerp -= value;
        }

        public static event Delegates.spring_AfterArgs spring
        {
            add
            {
                HookHandler._afterspring += value;
                HookHandler.Hookspring();
            }
            remove => HookHandler._afterspring -= value;
        }

        public static event Delegates.easeInQuad_AfterArgs easeInQuad
        {
            add
            {
                HookHandler._aftereaseInQuad += value;
                HookHandler.HookeaseInQuad();
            }
            remove => HookHandler._aftereaseInQuad -= value;
        }

        public static event Delegates.easeOutQuad_AfterArgs easeOutQuad
        {
            add
            {
                HookHandler._aftereaseOutQuad += value;
                HookHandler.HookeaseOutQuad();
            }
            remove => HookHandler._aftereaseOutQuad -= value;
        }

        public static event Delegates.easeInOutQuad_AfterArgs easeInOutQuad
        {
            add
            {
                HookHandler._aftereaseInOutQuad += value;
                HookHandler.HookeaseInOutQuad();
            }
            remove => HookHandler._aftereaseInOutQuad -= value;
        }

        public static event Delegates.easeInCubic_AfterArgs easeInCubic
        {
            add
            {
                HookHandler._aftereaseInCubic += value;
                HookHandler.HookeaseInCubic();
            }
            remove => HookHandler._aftereaseInCubic -= value;
        }

        public static event Delegates.easeOutCubic_AfterArgs easeOutCubic
        {
            add
            {
                HookHandler._aftereaseOutCubic += value;
                HookHandler.HookeaseOutCubic();
            }
            remove => HookHandler._aftereaseOutCubic -= value;
        }

        public static event Delegates.easeInOutCubic_AfterArgs easeInOutCubic
        {
            add
            {
                HookHandler._aftereaseInOutCubic += value;
                HookHandler.HookeaseInOutCubic();
            }
            remove => HookHandler._aftereaseInOutCubic -= value;
        }

        public static event Delegates.easeInQuart_AfterArgs easeInQuart
        {
            add
            {
                HookHandler._aftereaseInQuart += value;
                HookHandler.HookeaseInQuart();
            }
            remove => HookHandler._aftereaseInQuart -= value;
        }

        public static event Delegates.easeOutQuart_AfterArgs easeOutQuart
        {
            add
            {
                HookHandler._aftereaseOutQuart += value;
                HookHandler.HookeaseOutQuart();
            }
            remove => HookHandler._aftereaseOutQuart -= value;
        }

        public static event Delegates.easeInOutQuart_AfterArgs easeInOutQuart
        {
            add
            {
                HookHandler._aftereaseInOutQuart += value;
                HookHandler.HookeaseInOutQuart();
            }
            remove => HookHandler._aftereaseInOutQuart -= value;
        }

        public static event Delegates.easeInQuint_AfterArgs easeInQuint
        {
            add
            {
                HookHandler._aftereaseInQuint += value;
                HookHandler.HookeaseInQuint();
            }
            remove => HookHandler._aftereaseInQuint -= value;
        }

        public static event Delegates.easeOutQuint_AfterArgs easeOutQuint
        {
            add
            {
                HookHandler._aftereaseOutQuint += value;
                HookHandler.HookeaseOutQuint();
            }
            remove => HookHandler._aftereaseOutQuint -= value;
        }

        public static event Delegates.easeInOutQuint_AfterArgs easeInOutQuint
        {
            add
            {
                HookHandler._aftereaseInOutQuint += value;
                HookHandler.HookeaseInOutQuint();
            }
            remove => HookHandler._aftereaseInOutQuint -= value;
        }

        public static event Delegates.easeInSine_AfterArgs easeInSine
        {
            add
            {
                HookHandler._aftereaseInSine += value;
                HookHandler.HookeaseInSine();
            }
            remove => HookHandler._aftereaseInSine -= value;
        }

        public static event Delegates.easeOutSine_AfterArgs easeOutSine
        {
            add
            {
                HookHandler._aftereaseOutSine += value;
                HookHandler.HookeaseOutSine();
            }
            remove => HookHandler._aftereaseOutSine -= value;
        }

        public static event Delegates.easeInOutSine_AfterArgs easeInOutSine
        {
            add
            {
                HookHandler._aftereaseInOutSine += value;
                HookHandler.HookeaseInOutSine();
            }
            remove => HookHandler._aftereaseInOutSine -= value;
        }

        public static event Delegates.easeInExpo_AfterArgs easeInExpo
        {
            add
            {
                HookHandler._aftereaseInExpo += value;
                HookHandler.HookeaseInExpo();
            }
            remove => HookHandler._aftereaseInExpo -= value;
        }

        public static event Delegates.easeOutExpo_AfterArgs easeOutExpo
        {
            add
            {
                HookHandler._aftereaseOutExpo += value;
                HookHandler.HookeaseOutExpo();
            }
            remove => HookHandler._aftereaseOutExpo -= value;
        }

        public static event Delegates.easeInOutExpo_AfterArgs easeInOutExpo
        {
            add
            {
                HookHandler._aftereaseInOutExpo += value;
                HookHandler.HookeaseInOutExpo();
            }
            remove => HookHandler._aftereaseInOutExpo -= value;
        }

        public static event Delegates.easeInCirc_AfterArgs easeInCirc
        {
            add
            {
                HookHandler._aftereaseInCirc += value;
                HookHandler.HookeaseInCirc();
            }
            remove => HookHandler._aftereaseInCirc -= value;
        }

        public static event Delegates.easeOutCirc_AfterArgs easeOutCirc
        {
            add
            {
                HookHandler._aftereaseOutCirc += value;
                HookHandler.HookeaseOutCirc();
            }
            remove => HookHandler._aftereaseOutCirc -= value;
        }

        public static event Delegates.easeInOutCirc_AfterArgs easeInOutCirc
        {
            add
            {
                HookHandler._aftereaseInOutCirc += value;
                HookHandler.HookeaseInOutCirc();
            }
            remove => HookHandler._aftereaseInOutCirc -= value;
        }

        public static event Delegates.easeInBounce_AfterArgs easeInBounce
        {
            add
            {
                HookHandler._aftereaseInBounce += value;
                HookHandler.HookeaseInBounce();
            }
            remove => HookHandler._aftereaseInBounce -= value;
        }

        public static event Delegates.easeOutBounce_AfterArgs easeOutBounce
        {
            add
            {
                HookHandler._aftereaseOutBounce += value;
                HookHandler.HookeaseOutBounce();
            }
            remove => HookHandler._aftereaseOutBounce -= value;
        }

        public static event Delegates.easeInOutBounce_AfterArgs easeInOutBounce
        {
            add
            {
                HookHandler._aftereaseInOutBounce += value;
                HookHandler.HookeaseInOutBounce();
            }
            remove => HookHandler._aftereaseInOutBounce -= value;
        }

        public static event Delegates.easeInBack_AfterArgs easeInBack
        {
            add
            {
                HookHandler._aftereaseInBack += value;
                HookHandler.HookeaseInBack();
            }
            remove => HookHandler._aftereaseInBack -= value;
        }

        public static event Delegates.easeOutBack_AfterArgs easeOutBack
        {
            add
            {
                HookHandler._aftereaseOutBack += value;
                HookHandler.HookeaseOutBack();
            }
            remove => HookHandler._aftereaseOutBack -= value;
        }

        public static event Delegates.easeInOutBack_AfterArgs easeInOutBack
        {
            add
            {
                HookHandler._aftereaseInOutBack += value;
                HookHandler.HookeaseInOutBack();
            }
            remove => HookHandler._aftereaseInOutBack -= value;
        }

        public static event Delegates.punch_AfterArgs punch
        {
            add
            {
                HookHandler._afterpunch += value;
                HookHandler.Hookpunch();
            }
            remove => HookHandler._afterpunch -= value;
        }

        public static event Delegates.easeInElastic_AfterArgs easeInElastic
        {
            add
            {
                HookHandler._aftereaseInElastic += value;
                HookHandler.HookeaseInElastic();
            }
            remove => HookHandler._aftereaseInElastic -= value;
        }

        public static event Delegates.easeOutElastic_AfterArgs easeOutElastic
        {
            add
            {
                HookHandler._aftereaseOutElastic += value;
                HookHandler.HookeaseOutElastic();
            }
            remove => HookHandler._aftereaseOutElastic -= value;
        }

        public static event Delegates.easeInOutElastic_AfterArgs easeInOutElastic
        {
            add
            {
                HookHandler._aftereaseInOutElastic += value;
                HookHandler.HookeaseInOutElastic();
            }
            remove => HookHandler._aftereaseInOutElastic -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.iTween.hook_Init Init
        {
            add => On.iTween.Init += value;
            remove => On.iTween.Init -= value;
        }

        public static event On.iTween.hook_CameraFadeFrom_float_float CameraFadeFrom_float_float
        {
            add => On.iTween.CameraFadeFrom_float_float += value;
            remove => On.iTween.CameraFadeFrom_float_float -= value;
        }

        public static event On.iTween.hook_CameraFadeFrom_Hashtable CameraFadeFrom_Hashtable
        {
            add => On.iTween.CameraFadeFrom_Hashtable += value;
            remove => On.iTween.CameraFadeFrom_Hashtable -= value;
        }

        public static event On.iTween.hook_CameraFadeTo_float_float CameraFadeTo_float_float
        {
            add => On.iTween.CameraFadeTo_float_float += value;
            remove => On.iTween.CameraFadeTo_float_float -= value;
        }

        public static event On.iTween.hook_CameraFadeTo_Hashtable CameraFadeTo_Hashtable
        {
            add => On.iTween.CameraFadeTo_Hashtable += value;
            remove => On.iTween.CameraFadeTo_Hashtable -= value;
        }

        public static event On.iTween.hook_ValueTo ValueTo
        {
            add => On.iTween.ValueTo += value;
            remove => On.iTween.ValueTo -= value;
        }

        public static event On.iTween.hook_FadeFrom_GameObject_float_float FadeFrom_GameObject_float_float
        {
            add => On.iTween.FadeFrom_GameObject_float_float += value;
            remove => On.iTween.FadeFrom_GameObject_float_float -= value;
        }

        public static event On.iTween.hook_FadeFrom_GameObject_Hashtable FadeFrom_GameObject_Hashtable
        {
            add => On.iTween.FadeFrom_GameObject_Hashtable += value;
            remove => On.iTween.FadeFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_FadeTo_GameObject_float_float FadeTo_GameObject_float_float
        {
            add => On.iTween.FadeTo_GameObject_float_float += value;
            remove => On.iTween.FadeTo_GameObject_float_float -= value;
        }

        public static event On.iTween.hook_FadeTo_GameObject_Hashtable FadeTo_GameObject_Hashtable
        {
            add => On.iTween.FadeTo_GameObject_Hashtable += value;
            remove => On.iTween.FadeTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ColorFrom_GameObject_Color_float ColorFrom_GameObject_Color_float
        {
            add => On.iTween.ColorFrom_GameObject_Color_float += value;
            remove => On.iTween.ColorFrom_GameObject_Color_float -= value;
        }

        public static event On.iTween.hook_ColorFrom_GameObject_Hashtable ColorFrom_GameObject_Hashtable
        {
            add => On.iTween.ColorFrom_GameObject_Hashtable += value;
            remove => On.iTween.ColorFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ColorTo_GameObject_Color_float ColorTo_GameObject_Color_float
        {
            add => On.iTween.ColorTo_GameObject_Color_float += value;
            remove => On.iTween.ColorTo_GameObject_Color_float -= value;
        }

        public static event On.iTween.hook_ColorTo_GameObject_Hashtable ColorTo_GameObject_Hashtable
        {
            add => On.iTween.ColorTo_GameObject_Hashtable += value;
            remove => On.iTween.ColorTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_AudioFrom_GameObject_float_float_float AudioFrom_GameObject_float_float_float
        {
            add => On.iTween.AudioFrom_GameObject_float_float_float += value;
            remove => On.iTween.AudioFrom_GameObject_float_float_float -= value;
        }

        public static event On.iTween.hook_AudioFrom_GameObject_Hashtable AudioFrom_GameObject_Hashtable
        {
            add => On.iTween.AudioFrom_GameObject_Hashtable += value;
            remove => On.iTween.AudioFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_AudioTo_GameObject_float_float_float AudioTo_GameObject_float_float_float
        {
            add => On.iTween.AudioTo_GameObject_float_float_float += value;
            remove => On.iTween.AudioTo_GameObject_float_float_float -= value;
        }

        public static event On.iTween.hook_AudioTo_GameObject_Hashtable AudioTo_GameObject_Hashtable
        {
            add => On.iTween.AudioTo_GameObject_Hashtable += value;
            remove => On.iTween.AudioTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_Stab_GameObject_AudioClip_float Stab_GameObject_AudioClip_float
        {
            add => On.iTween.Stab_GameObject_AudioClip_float += value;
            remove => On.iTween.Stab_GameObject_AudioClip_float -= value;
        }

        public static event On.iTween.hook_Stab_GameObject_Hashtable Stab_GameObject_Hashtable
        {
            add => On.iTween.Stab_GameObject_Hashtable += value;
            remove => On.iTween.Stab_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_LookFrom_GameObject_Vector3_float LookFrom_GameObject_Vector3_float
        {
            add => On.iTween.LookFrom_GameObject_Vector3_float += value;
            remove => On.iTween.LookFrom_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_LookFrom_GameObject_Hashtable LookFrom_GameObject_Hashtable
        {
            add => On.iTween.LookFrom_GameObject_Hashtable += value;
            remove => On.iTween.LookFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_LookTo_GameObject_Vector3_float LookTo_GameObject_Vector3_float
        {
            add => On.iTween.LookTo_GameObject_Vector3_float += value;
            remove => On.iTween.LookTo_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_LookTo_GameObject_Hashtable LookTo_GameObject_Hashtable
        {
            add => On.iTween.LookTo_GameObject_Hashtable += value;
            remove => On.iTween.LookTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_MoveTo_GameObject_Vector3_float MoveTo_GameObject_Vector3_float
        {
            add => On.iTween.MoveTo_GameObject_Vector3_float += value;
            remove => On.iTween.MoveTo_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_MoveTo_GameObject_Hashtable MoveTo_GameObject_Hashtable
        {
            add => On.iTween.MoveTo_GameObject_Hashtable += value;
            remove => On.iTween.MoveTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_MoveFrom_GameObject_Vector3_float MoveFrom_GameObject_Vector3_float
        {
            add => On.iTween.MoveFrom_GameObject_Vector3_float += value;
            remove => On.iTween.MoveFrom_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_MoveFrom_GameObject_Hashtable MoveFrom_GameObject_Hashtable
        {
            add => On.iTween.MoveFrom_GameObject_Hashtable += value;
            remove => On.iTween.MoveFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_MoveAdd_GameObject_Vector3_float MoveAdd_GameObject_Vector3_float
        {
            add => On.iTween.MoveAdd_GameObject_Vector3_float += value;
            remove => On.iTween.MoveAdd_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_MoveAdd_GameObject_Hashtable MoveAdd_GameObject_Hashtable
        {
            add => On.iTween.MoveAdd_GameObject_Hashtable += value;
            remove => On.iTween.MoveAdd_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_MoveBy_GameObject_Vector3_float MoveBy_GameObject_Vector3_float
        {
            add => On.iTween.MoveBy_GameObject_Vector3_float += value;
            remove => On.iTween.MoveBy_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_MoveBy_GameObject_Hashtable MoveBy_GameObject_Hashtable
        {
            add => On.iTween.MoveBy_GameObject_Hashtable += value;
            remove => On.iTween.MoveBy_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ScaleTo_GameObject_Vector3_float ScaleTo_GameObject_Vector3_float
        {
            add => On.iTween.ScaleTo_GameObject_Vector3_float += value;
            remove => On.iTween.ScaleTo_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ScaleTo_GameObject_Hashtable ScaleTo_GameObject_Hashtable
        {
            add => On.iTween.ScaleTo_GameObject_Hashtable += value;
            remove => On.iTween.ScaleTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ScaleFrom_GameObject_Vector3_float ScaleFrom_GameObject_Vector3_float
        {
            add => On.iTween.ScaleFrom_GameObject_Vector3_float += value;
            remove => On.iTween.ScaleFrom_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ScaleFrom_GameObject_Hashtable ScaleFrom_GameObject_Hashtable
        {
            add => On.iTween.ScaleFrom_GameObject_Hashtable += value;
            remove => On.iTween.ScaleFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ScaleAdd_GameObject_Vector3_float ScaleAdd_GameObject_Vector3_float
        {
            add => On.iTween.ScaleAdd_GameObject_Vector3_float += value;
            remove => On.iTween.ScaleAdd_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ScaleAdd_GameObject_Hashtable ScaleAdd_GameObject_Hashtable
        {
            add => On.iTween.ScaleAdd_GameObject_Hashtable += value;
            remove => On.iTween.ScaleAdd_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ScaleBy_GameObject_Vector3_float ScaleBy_GameObject_Vector3_float
        {
            add => On.iTween.ScaleBy_GameObject_Vector3_float += value;
            remove => On.iTween.ScaleBy_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ScaleBy_GameObject_Hashtable ScaleBy_GameObject_Hashtable
        {
            add => On.iTween.ScaleBy_GameObject_Hashtable += value;
            remove => On.iTween.ScaleBy_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_RotateTo_GameObject_Vector3_float RotateTo_GameObject_Vector3_float
        {
            add => On.iTween.RotateTo_GameObject_Vector3_float += value;
            remove => On.iTween.RotateTo_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_RotateTo_GameObject_Hashtable RotateTo_GameObject_Hashtable
        {
            add => On.iTween.RotateTo_GameObject_Hashtable += value;
            remove => On.iTween.RotateTo_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_RotateFrom_GameObject_Vector3_float RotateFrom_GameObject_Vector3_float
        {
            add => On.iTween.RotateFrom_GameObject_Vector3_float += value;
            remove => On.iTween.RotateFrom_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_RotateFrom_GameObject_Hashtable RotateFrom_GameObject_Hashtable
        {
            add => On.iTween.RotateFrom_GameObject_Hashtable += value;
            remove => On.iTween.RotateFrom_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_RotateAdd_GameObject_Vector3_float RotateAdd_GameObject_Vector3_float
        {
            add => On.iTween.RotateAdd_GameObject_Vector3_float += value;
            remove => On.iTween.RotateAdd_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_RotateAdd_GameObject_Hashtable RotateAdd_GameObject_Hashtable
        {
            add => On.iTween.RotateAdd_GameObject_Hashtable += value;
            remove => On.iTween.RotateAdd_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_RotateBy_GameObject_Vector3_float RotateBy_GameObject_Vector3_float
        {
            add => On.iTween.RotateBy_GameObject_Vector3_float += value;
            remove => On.iTween.RotateBy_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_RotateBy_GameObject_Hashtable RotateBy_GameObject_Hashtable
        {
            add => On.iTween.RotateBy_GameObject_Hashtable += value;
            remove => On.iTween.RotateBy_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ShakePosition_GameObject_Vector3_float ShakePosition_GameObject_Vector3_float
        {
            add => On.iTween.ShakePosition_GameObject_Vector3_float += value;
            remove => On.iTween.ShakePosition_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ShakePosition_GameObject_Hashtable ShakePosition_GameObject_Hashtable
        {
            add => On.iTween.ShakePosition_GameObject_Hashtable += value;
            remove => On.iTween.ShakePosition_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ShakeScale_GameObject_Vector3_float ShakeScale_GameObject_Vector3_float
        {
            add => On.iTween.ShakeScale_GameObject_Vector3_float += value;
            remove => On.iTween.ShakeScale_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ShakeScale_GameObject_Hashtable ShakeScale_GameObject_Hashtable
        {
            add => On.iTween.ShakeScale_GameObject_Hashtable += value;
            remove => On.iTween.ShakeScale_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ShakeRotation_GameObject_Vector3_float ShakeRotation_GameObject_Vector3_float
        {
            add => On.iTween.ShakeRotation_GameObject_Vector3_float += value;
            remove => On.iTween.ShakeRotation_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ShakeRotation_GameObject_Hashtable ShakeRotation_GameObject_Hashtable
        {
            add => On.iTween.ShakeRotation_GameObject_Hashtable += value;
            remove => On.iTween.ShakeRotation_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_PunchPosition_GameObject_Vector3_float PunchPosition_GameObject_Vector3_float
        {
            add => On.iTween.PunchPosition_GameObject_Vector3_float += value;
            remove => On.iTween.PunchPosition_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_PunchPosition_GameObject_Hashtable PunchPosition_GameObject_Hashtable
        {
            add => On.iTween.PunchPosition_GameObject_Hashtable += value;
            remove => On.iTween.PunchPosition_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_PunchRotation_GameObject_Vector3_float PunchRotation_GameObject_Vector3_float
        {
            add => On.iTween.PunchRotation_GameObject_Vector3_float += value;
            remove => On.iTween.PunchRotation_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_PunchRotation_GameObject_Hashtable PunchRotation_GameObject_Hashtable
        {
            add => On.iTween.PunchRotation_GameObject_Hashtable += value;
            remove => On.iTween.PunchRotation_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_PunchScale_GameObject_Vector3_float PunchScale_GameObject_Vector3_float
        {
            add => On.iTween.PunchScale_GameObject_Vector3_float += value;
            remove => On.iTween.PunchScale_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_PunchScale_GameObject_Hashtable PunchScale_GameObject_Hashtable
        {
            add => On.iTween.PunchScale_GameObject_Hashtable += value;
            remove => On.iTween.PunchScale_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_GenerateTargets GenerateTargets
        {
            add => On.iTween.GenerateTargets += value;
            remove => On.iTween.GenerateTargets -= value;
        }

        public static event On.iTween.hook_GenerateRectTargets GenerateRectTargets
        {
            add => On.iTween.GenerateRectTargets += value;
            remove => On.iTween.GenerateRectTargets -= value;
        }

        public static event On.iTween.hook_GenerateColorTargets GenerateColorTargets
        {
            add => On.iTween.GenerateColorTargets += value;
            remove => On.iTween.GenerateColorTargets -= value;
        }

        public static event On.iTween.hook_GenerateVector3Targets GenerateVector3Targets
        {
            add => On.iTween.GenerateVector3Targets += value;
            remove => On.iTween.GenerateVector3Targets -= value;
        }

        public static event On.iTween.hook_GenerateVector2Targets GenerateVector2Targets
        {
            add => On.iTween.GenerateVector2Targets += value;
            remove => On.iTween.GenerateVector2Targets -= value;
        }

        public static event On.iTween.hook_GenerateFloatTargets GenerateFloatTargets
        {
            add => On.iTween.GenerateFloatTargets += value;
            remove => On.iTween.GenerateFloatTargets -= value;
        }

        public static event On.iTween.hook_GenerateColorToTargets GenerateColorToTargets
        {
            add => On.iTween.GenerateColorToTargets += value;
            remove => On.iTween.GenerateColorToTargets -= value;
        }

        public static event On.iTween.hook_GenerateAudioToTargets GenerateAudioToTargets
        {
            add => On.iTween.GenerateAudioToTargets += value;
            remove => On.iTween.GenerateAudioToTargets -= value;
        }

        public static event On.iTween.hook_GenerateStabTargets GenerateStabTargets
        {
            add => On.iTween.GenerateStabTargets += value;
            remove => On.iTween.GenerateStabTargets -= value;
        }

        public static event On.iTween.hook_GenerateLookToTargets GenerateLookToTargets
        {
            add => On.iTween.GenerateLookToTargets += value;
            remove => On.iTween.GenerateLookToTargets -= value;
        }

        public static event On.iTween.hook_GenerateMoveToPathTargets GenerateMoveToPathTargets
        {
            add => On.iTween.GenerateMoveToPathTargets += value;
            remove => On.iTween.GenerateMoveToPathTargets -= value;
        }

        public static event On.iTween.hook_GenerateMoveToTargets GenerateMoveToTargets
        {
            add => On.iTween.GenerateMoveToTargets += value;
            remove => On.iTween.GenerateMoveToTargets -= value;
        }

        public static event On.iTween.hook_GenerateMoveByTargets GenerateMoveByTargets
        {
            add => On.iTween.GenerateMoveByTargets += value;
            remove => On.iTween.GenerateMoveByTargets -= value;
        }

        public static event On.iTween.hook_GenerateScaleToTargets GenerateScaleToTargets
        {
            add => On.iTween.GenerateScaleToTargets += value;
            remove => On.iTween.GenerateScaleToTargets -= value;
        }

        public static event On.iTween.hook_GenerateScaleByTargets GenerateScaleByTargets
        {
            add => On.iTween.GenerateScaleByTargets += value;
            remove => On.iTween.GenerateScaleByTargets -= value;
        }

        public static event On.iTween.hook_GenerateScaleAddTargets GenerateScaleAddTargets
        {
            add => On.iTween.GenerateScaleAddTargets += value;
            remove => On.iTween.GenerateScaleAddTargets -= value;
        }

        public static event On.iTween.hook_GenerateRotateToTargets GenerateRotateToTargets
        {
            add => On.iTween.GenerateRotateToTargets += value;
            remove => On.iTween.GenerateRotateToTargets -= value;
        }

        public static event On.iTween.hook_GenerateRotateAddTargets GenerateRotateAddTargets
        {
            add => On.iTween.GenerateRotateAddTargets += value;
            remove => On.iTween.GenerateRotateAddTargets -= value;
        }

        public static event On.iTween.hook_GenerateRotateByTargets GenerateRotateByTargets
        {
            add => On.iTween.GenerateRotateByTargets += value;
            remove => On.iTween.GenerateRotateByTargets -= value;
        }

        public static event On.iTween.hook_GenerateShakePositionTargets GenerateShakePositionTargets
        {
            add => On.iTween.GenerateShakePositionTargets += value;
            remove => On.iTween.GenerateShakePositionTargets -= value;
        }

        public static event On.iTween.hook_GenerateShakeScaleTargets GenerateShakeScaleTargets
        {
            add => On.iTween.GenerateShakeScaleTargets += value;
            remove => On.iTween.GenerateShakeScaleTargets -= value;
        }

        public static event On.iTween.hook_GenerateShakeRotationTargets GenerateShakeRotationTargets
        {
            add => On.iTween.GenerateShakeRotationTargets += value;
            remove => On.iTween.GenerateShakeRotationTargets -= value;
        }

        public static event On.iTween.hook_GeneratePunchPositionTargets GeneratePunchPositionTargets
        {
            add => On.iTween.GeneratePunchPositionTargets += value;
            remove => On.iTween.GeneratePunchPositionTargets -= value;
        }

        public static event On.iTween.hook_GeneratePunchRotationTargets GeneratePunchRotationTargets
        {
            add => On.iTween.GeneratePunchRotationTargets += value;
            remove => On.iTween.GeneratePunchRotationTargets -= value;
        }

        public static event On.iTween.hook_GeneratePunchScaleTargets GeneratePunchScaleTargets
        {
            add => On.iTween.GeneratePunchScaleTargets += value;
            remove => On.iTween.GeneratePunchScaleTargets -= value;
        }

        public static event On.iTween.hook_ApplyRectTargets ApplyRectTargets
        {
            add => On.iTween.ApplyRectTargets += value;
            remove => On.iTween.ApplyRectTargets -= value;
        }

        public static event On.iTween.hook_ApplyColorTargets ApplyColorTargets
        {
            add => On.iTween.ApplyColorTargets += value;
            remove => On.iTween.ApplyColorTargets -= value;
        }

        public static event On.iTween.hook_ApplyVector3Targets ApplyVector3Targets
        {
            add => On.iTween.ApplyVector3Targets += value;
            remove => On.iTween.ApplyVector3Targets -= value;
        }

        public static event On.iTween.hook_ApplyVector2Targets ApplyVector2Targets
        {
            add => On.iTween.ApplyVector2Targets += value;
            remove => On.iTween.ApplyVector2Targets -= value;
        }

        public static event On.iTween.hook_ApplyFloatTargets ApplyFloatTargets
        {
            add => On.iTween.ApplyFloatTargets += value;
            remove => On.iTween.ApplyFloatTargets -= value;
        }

        public static event On.iTween.hook_ApplyColorToTargets ApplyColorToTargets
        {
            add => On.iTween.ApplyColorToTargets += value;
            remove => On.iTween.ApplyColorToTargets -= value;
        }

        public static event On.iTween.hook_ApplyAudioToTargets ApplyAudioToTargets
        {
            add => On.iTween.ApplyAudioToTargets += value;
            remove => On.iTween.ApplyAudioToTargets -= value;
        }

        public static event On.iTween.hook_ApplyStabTargets ApplyStabTargets
        {
            add => On.iTween.ApplyStabTargets += value;
            remove => On.iTween.ApplyStabTargets -= value;
        }

        public static event On.iTween.hook_ApplyMoveToPathTargets ApplyMoveToPathTargets
        {
            add => On.iTween.ApplyMoveToPathTargets += value;
            remove => On.iTween.ApplyMoveToPathTargets -= value;
        }

        public static event On.iTween.hook_ApplyMoveToTargets ApplyMoveToTargets
        {
            add => On.iTween.ApplyMoveToTargets += value;
            remove => On.iTween.ApplyMoveToTargets -= value;
        }

        public static event On.iTween.hook_ApplyMoveByTargets ApplyMoveByTargets
        {
            add => On.iTween.ApplyMoveByTargets += value;
            remove => On.iTween.ApplyMoveByTargets -= value;
        }

        public static event On.iTween.hook_ApplyScaleToTargets ApplyScaleToTargets
        {
            add => On.iTween.ApplyScaleToTargets += value;
            remove => On.iTween.ApplyScaleToTargets -= value;
        }

        public static event On.iTween.hook_ApplyLookToTargets ApplyLookToTargets
        {
            add => On.iTween.ApplyLookToTargets += value;
            remove => On.iTween.ApplyLookToTargets -= value;
        }

        public static event On.iTween.hook_ApplyRotateToTargets ApplyRotateToTargets
        {
            add => On.iTween.ApplyRotateToTargets += value;
            remove => On.iTween.ApplyRotateToTargets -= value;
        }

        public static event On.iTween.hook_ApplyRotateAddTargets ApplyRotateAddTargets
        {
            add => On.iTween.ApplyRotateAddTargets += value;
            remove => On.iTween.ApplyRotateAddTargets -= value;
        }

        public static event On.iTween.hook_ApplyShakePositionTargets ApplyShakePositionTargets
        {
            add => On.iTween.ApplyShakePositionTargets += value;
            remove => On.iTween.ApplyShakePositionTargets -= value;
        }

        public static event On.iTween.hook_ApplyShakeScaleTargets ApplyShakeScaleTargets
        {
            add => On.iTween.ApplyShakeScaleTargets += value;
            remove => On.iTween.ApplyShakeScaleTargets -= value;
        }

        public static event On.iTween.hook_ApplyShakeRotationTargets ApplyShakeRotationTargets
        {
            add => On.iTween.ApplyShakeRotationTargets += value;
            remove => On.iTween.ApplyShakeRotationTargets -= value;
        }

        public static event On.iTween.hook_ApplyPunchPositionTargets ApplyPunchPositionTargets
        {
            add => On.iTween.ApplyPunchPositionTargets += value;
            remove => On.iTween.ApplyPunchPositionTargets -= value;
        }

        public static event On.iTween.hook_ApplyPunchRotationTargets ApplyPunchRotationTargets
        {
            add => On.iTween.ApplyPunchRotationTargets += value;
            remove => On.iTween.ApplyPunchRotationTargets -= value;
        }

        public static event On.iTween.hook_ApplyPunchScaleTargets ApplyPunchScaleTargets
        {
            add => On.iTween.ApplyPunchScaleTargets += value;
            remove => On.iTween.ApplyPunchScaleTargets -= value;
        }

        public static event On.iTween.hook_TweenDelay TweenDelay
        {
            add => On.iTween.TweenDelay += value;
            remove => On.iTween.TweenDelay -= value;
        }

        public static event On.iTween.hook_TweenStart TweenStart
        {
            add => On.iTween.TweenStart += value;
            remove => On.iTween.TweenStart -= value;
        }

        public static event On.iTween.hook_TweenRestart TweenRestart
        {
            add => On.iTween.TweenRestart += value;
            remove => On.iTween.TweenRestart -= value;
        }

        public static event On.iTween.hook_TweenUpdate TweenUpdate
        {
            add => On.iTween.TweenUpdate += value;
            remove => On.iTween.TweenUpdate -= value;
        }

        public static event On.iTween.hook_TweenComplete TweenComplete
        {
            add => On.iTween.TweenComplete += value;
            remove => On.iTween.TweenComplete -= value;
        }

        public static event On.iTween.hook_TweenLoop TweenLoop
        {
            add => On.iTween.TweenLoop += value;
            remove => On.iTween.TweenLoop -= value;
        }

        public static event On.iTween.hook_RectUpdate RectUpdate
        {
            add => On.iTween.RectUpdate += value;
            remove => On.iTween.RectUpdate -= value;
        }

        public static event On.iTween.hook_Vector3Update Vector3Update
        {
            add => On.iTween.Vector3Update += value;
            remove => On.iTween.Vector3Update -= value;
        }

        public static event On.iTween.hook_Vector2Update Vector2Update
        {
            add => On.iTween.Vector2Update += value;
            remove => On.iTween.Vector2Update -= value;
        }

        public static event On.iTween.hook_FloatUpdate FloatUpdate
        {
            add => On.iTween.FloatUpdate += value;
            remove => On.iTween.FloatUpdate -= value;
        }

        public static event On.iTween.hook_FadeUpdate_GameObject_Hashtable FadeUpdate_GameObject_Hashtable
        {
            add => On.iTween.FadeUpdate_GameObject_Hashtable += value;
            remove => On.iTween.FadeUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_FadeUpdate_GameObject_float_float FadeUpdate_GameObject_float_float
        {
            add => On.iTween.FadeUpdate_GameObject_float_float += value;
            remove => On.iTween.FadeUpdate_GameObject_float_float -= value;
        }

        public static event On.iTween.hook_ColorUpdate_GameObject_Hashtable ColorUpdate_GameObject_Hashtable
        {
            add => On.iTween.ColorUpdate_GameObject_Hashtable += value;
            remove => On.iTween.ColorUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ColorUpdate_GameObject_Color_float ColorUpdate_GameObject_Color_float
        {
            add => On.iTween.ColorUpdate_GameObject_Color_float += value;
            remove => On.iTween.ColorUpdate_GameObject_Color_float -= value;
        }

        public static event On.iTween.hook_AudioUpdate_GameObject_Hashtable AudioUpdate_GameObject_Hashtable
        {
            add => On.iTween.AudioUpdate_GameObject_Hashtable += value;
            remove => On.iTween.AudioUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_AudioUpdate_GameObject_float_float_float
            AudioUpdate_GameObject_float_float_float
            {
                add => On.iTween.AudioUpdate_GameObject_float_float_float += value;
                remove => On.iTween.AudioUpdate_GameObject_float_float_float -= value;
            }

        public static event On.iTween.hook_RotateUpdate_GameObject_Hashtable RotateUpdate_GameObject_Hashtable
        {
            add => On.iTween.RotateUpdate_GameObject_Hashtable += value;
            remove => On.iTween.RotateUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_RotateUpdate_GameObject_Vector3_float RotateUpdate_GameObject_Vector3_float
        {
            add => On.iTween.RotateUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.RotateUpdate_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_ScaleUpdate_GameObject_Hashtable ScaleUpdate_GameObject_Hashtable
        {
            add => On.iTween.ScaleUpdate_GameObject_Hashtable += value;
            remove => On.iTween.ScaleUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_ScaleUpdate_GameObject_Vector3_float ScaleUpdate_GameObject_Vector3_float
        {
            add => On.iTween.ScaleUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.ScaleUpdate_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_MoveUpdate_GameObject_Hashtable MoveUpdate_GameObject_Hashtable
        {
            add => On.iTween.MoveUpdate_GameObject_Hashtable += value;
            remove => On.iTween.MoveUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_MoveUpdate_GameObject_Vector3_float MoveUpdate_GameObject_Vector3_float
        {
            add => On.iTween.MoveUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.MoveUpdate_GameObject_Vector3_float -= value;
        }

        public static event On.iTween.hook_LookUpdate_GameObject_Hashtable LookUpdate_GameObject_Hashtable
        {
            add => On.iTween.LookUpdate_GameObject_Hashtable += value;
            remove => On.iTween.LookUpdate_GameObject_Hashtable -= value;
        }

        public static event On.iTween.hook_LookUpdate_GameObject_Vector3_float LookUpdate_GameObject_Vector3_float
        {
            add => On.iTween.LookUpdate_GameObject_Vector3_float += value;
            remove => On.iTween.LookUpdate_GameObject_Vector3_float -= value;
        }

        public static event Delegates.PathLength_Array_WithArgs PathLength_Array
        {
            add => HookEndpointManager.Add<Delegates.PathLength_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PathLength", false), value);
            remove => HookEndpointManager.Remove<Delegates.PathLength_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PathLength", false), value);
        }

        public static event On.iTween.hook_CameraTexture CameraTexture
        {
            add => On.iTween.CameraTexture += value;
            remove => On.iTween.CameraTexture -= value;
        }

        public static event Delegates.PutOnPath_GameObject_Array_float_WithArgs PutOnPath_GameObject_Array_float
        {
            add => HookEndpointManager.Add<Delegates.PutOnPath_GameObject_Array_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.PutOnPath_GameObject_Array_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
        }

        public static event Delegates.PutOnPath_Transform_Array_float_WithArgs PutOnPath_Transform_Array_float
        {
            add => HookEndpointManager.Add<Delegates.PutOnPath_Transform_Array_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.PutOnPath_Transform_Array_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PutOnPath", false), value);
        }

        public static event Delegates.PointOnPath_Array_float_WithArgs PointOnPath_Array_float
        {
            add => HookEndpointManager.Add<Delegates.PointOnPath_Array_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PointOnPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.PointOnPath_Array_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "PointOnPath", false), value);
        }

        public static event Delegates.DrawLine_Array_WithArgs DrawLine_Array
        {
            add => HookEndpointManager.Add<Delegates.DrawLine_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawLine_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
        }

        public static event Delegates.DrawLine_Array_Color_WithArgs DrawLine_Array_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawLine_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawLine_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLine", false), value);
        }

        public static event Delegates.DrawLineGizmos_Array_WithArgs DrawLineGizmos_Array
        {
            add => HookEndpointManager.Add<Delegates.DrawLineGizmos_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawLineGizmos_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
        }

        public static event Delegates.DrawLineGizmos_Array_Color_WithArgs DrawLineGizmos_Array_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawLineGizmos_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawLineGizmos_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineGizmos", false), value);
        }

        public static event Delegates.DrawLineHandles_Array_WithArgs DrawLineHandles_Array
        {
            add => HookEndpointManager.Add<Delegates.DrawLineHandles_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawLineHandles_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
        }

        public static event Delegates.DrawLineHandles_Array_Color_WithArgs DrawLineHandles_Array_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawLineHandles_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawLineHandles_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawLineHandles", false), value);
        }

        public static event Delegates.DrawPath_Array_WithArgs DrawPath_Array
        {
            add => HookEndpointManager.Add<Delegates.DrawPath_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawPath_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
        }

        public static event Delegates.DrawPath_Array_Color_WithArgs DrawPath_Array_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawPath_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawPath_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPath", false), value);
        }

        public static event Delegates.DrawPathGizmos_Array_WithArgs DrawPathGizmos_Array
        {
            add => HookEndpointManager.Add<Delegates.DrawPathGizmos_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawPathGizmos_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
        }

        public static event Delegates.DrawPathGizmos_Array_Color_WithArgs DrawPathGizmos_Array_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawPathGizmos_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawPathGizmos_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathGizmos", false), value);
        }

        public static event Delegates.DrawPathHandles_Array_WithArgs DrawPathHandles_Array
        {
            add => HookEndpointManager.Add<Delegates.DrawPathHandles_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawPathHandles_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
        }

        public static event Delegates.DrawPathHandles_Array_Color_WithArgs DrawPathHandles_Array_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawPathHandles_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawPathHandles_Array_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(iTween), "DrawPathHandles", false), value);
        }

        public static event On.iTween.hook_CameraFadeDepth CameraFadeDepth
        {
            add => On.iTween.CameraFadeDepth += value;
            remove => On.iTween.CameraFadeDepth -= value;
        }

        public static event On.iTween.hook_CameraFadeDestroy CameraFadeDestroy
        {
            add => On.iTween.CameraFadeDestroy += value;
            remove => On.iTween.CameraFadeDestroy -= value;
        }

        public static event On.iTween.hook_CameraFadeSwap CameraFadeSwap
        {
            add => On.iTween.CameraFadeSwap += value;
            remove => On.iTween.CameraFadeSwap -= value;
        }

        public static event On.iTween.hook_CameraFadeAdd_Texture2D_int CameraFadeAdd_Texture2D_int
        {
            add => On.iTween.CameraFadeAdd_Texture2D_int += value;
            remove => On.iTween.CameraFadeAdd_Texture2D_int -= value;
        }

        public static event On.iTween.hook_CameraFadeAdd_Texture2D CameraFadeAdd_Texture2D
        {
            add => On.iTween.CameraFadeAdd_Texture2D += value;
            remove => On.iTween.CameraFadeAdd_Texture2D -= value;
        }

        public static event On.iTween.hook_CameraFadeAdd CameraFadeAdd
        {
            add => On.iTween.CameraFadeAdd += value;
            remove => On.iTween.CameraFadeAdd -= value;
        }

        public static event On.iTween.hook_Resume_GameObject Resume_GameObject
        {
            add => On.iTween.Resume_GameObject += value;
            remove => On.iTween.Resume_GameObject -= value;
        }

        public static event On.iTween.hook_Resume_GameObject_bool Resume_GameObject_bool
        {
            add => On.iTween.Resume_GameObject_bool += value;
            remove => On.iTween.Resume_GameObject_bool -= value;
        }

        public static event On.iTween.hook_Resume_GameObject_string Resume_GameObject_string
        {
            add => On.iTween.Resume_GameObject_string += value;
            remove => On.iTween.Resume_GameObject_string -= value;
        }

        public static event On.iTween.hook_Resume_GameObject_string_bool Resume_GameObject_string_bool
        {
            add => On.iTween.Resume_GameObject_string_bool += value;
            remove => On.iTween.Resume_GameObject_string_bool -= value;
        }

        public static event On.iTween.hook_Resume Resume
        {
            add => On.iTween.Resume += value;
            remove => On.iTween.Resume -= value;
        }

        public static event On.iTween.hook_Resume_string Resume_string
        {
            add => On.iTween.Resume_string += value;
            remove => On.iTween.Resume_string -= value;
        }

        public static event On.iTween.hook_Pause_GameObject Pause_GameObject
        {
            add => On.iTween.Pause_GameObject += value;
            remove => On.iTween.Pause_GameObject -= value;
        }

        public static event On.iTween.hook_Pause_GameObject_bool Pause_GameObject_bool
        {
            add => On.iTween.Pause_GameObject_bool += value;
            remove => On.iTween.Pause_GameObject_bool -= value;
        }

        public static event On.iTween.hook_Pause_GameObject_string Pause_GameObject_string
        {
            add => On.iTween.Pause_GameObject_string += value;
            remove => On.iTween.Pause_GameObject_string -= value;
        }

        public static event On.iTween.hook_Pause_GameObject_string_bool Pause_GameObject_string_bool
        {
            add => On.iTween.Pause_GameObject_string_bool += value;
            remove => On.iTween.Pause_GameObject_string_bool -= value;
        }

        public static event On.iTween.hook_Pause Pause
        {
            add => On.iTween.Pause += value;
            remove => On.iTween.Pause -= value;
        }

        public static event On.iTween.hook_Pause_string Pause_string
        {
            add => On.iTween.Pause_string += value;
            remove => On.iTween.Pause_string -= value;
        }

        public static event On.iTween.hook_Count Count
        {
            add => On.iTween.Count += value;
            remove => On.iTween.Count -= value;
        }

        public static event On.iTween.hook_Count_string Count_string
        {
            add => On.iTween.Count_string += value;
            remove => On.iTween.Count_string -= value;
        }

        public static event On.iTween.hook_Count_GameObject Count_GameObject
        {
            add => On.iTween.Count_GameObject += value;
            remove => On.iTween.Count_GameObject -= value;
        }

        public static event On.iTween.hook_Count_GameObject_string Count_GameObject_string
        {
            add => On.iTween.Count_GameObject_string += value;
            remove => On.iTween.Count_GameObject_string -= value;
        }

        public static event On.iTween.hook_Stop Stop
        {
            add => On.iTween.Stop += value;
            remove => On.iTween.Stop -= value;
        }

        public static event On.iTween.hook_Stop_string Stop_string
        {
            add => On.iTween.Stop_string += value;
            remove => On.iTween.Stop_string -= value;
        }

        public static event On.iTween.hook_StopByName_string StopByName_string
        {
            add => On.iTween.StopByName_string += value;
            remove => On.iTween.StopByName_string -= value;
        }

        public static event On.iTween.hook_Stop_GameObject Stop_GameObject
        {
            add => On.iTween.Stop_GameObject += value;
            remove => On.iTween.Stop_GameObject -= value;
        }

        public static event On.iTween.hook_Stop_GameObject_bool Stop_GameObject_bool
        {
            add => On.iTween.Stop_GameObject_bool += value;
            remove => On.iTween.Stop_GameObject_bool -= value;
        }

        public static event On.iTween.hook_Stop_GameObject_string Stop_GameObject_string
        {
            add => On.iTween.Stop_GameObject_string += value;
            remove => On.iTween.Stop_GameObject_string -= value;
        }

        public static event On.iTween.hook_StopByName_GameObject_string StopByName_GameObject_string
        {
            add => On.iTween.StopByName_GameObject_string += value;
            remove => On.iTween.StopByName_GameObject_string -= value;
        }

        public static event On.iTween.hook_Stop_GameObject_string_bool Stop_GameObject_string_bool
        {
            add => On.iTween.Stop_GameObject_string_bool += value;
            remove => On.iTween.Stop_GameObject_string_bool -= value;
        }

        public static event On.iTween.hook_StopByName_GameObject_string_bool StopByName_GameObject_string_bool
        {
            add => On.iTween.StopByName_GameObject_string_bool += value;
            remove => On.iTween.StopByName_GameObject_string_bool -= value;
        }

        public static event On.iTween.hook_Hash Hash
        {
            add => On.iTween.Hash += value;
            remove => On.iTween.Hash -= value;
        }

        public static event On.iTween.hook_Awake Awake
        {
            add => On.iTween.Awake += value;
            remove => On.iTween.Awake -= value;
        }

        public static event On.iTween.hook_Start Start
        {
            add => On.iTween.Start += value;
            remove => On.iTween.Start -= value;
        }

        public static event On.iTween.hook_Update Update
        {
            add => On.iTween.Update += value;
            remove => On.iTween.Update -= value;
        }

        public static event On.iTween.hook_FixedUpdate FixedUpdate
        {
            add => On.iTween.FixedUpdate += value;
            remove => On.iTween.FixedUpdate -= value;
        }

        public static event On.iTween.hook_LateUpdate LateUpdate
        {
            add => On.iTween.LateUpdate += value;
            remove => On.iTween.LateUpdate -= value;
        }

        public static event On.iTween.hook_OnEnable OnEnable
        {
            add => On.iTween.OnEnable += value;
            remove => On.iTween.OnEnable -= value;
        }

        public static event On.iTween.hook_OnDisable OnDisable
        {
            add => On.iTween.OnDisable += value;
            remove => On.iTween.OnDisable -= value;
        }

        public static event On.iTween.hook_DrawLineHelper DrawLineHelper
        {
            add => On.iTween.DrawLineHelper += value;
            remove => On.iTween.DrawLineHelper -= value;
        }

        public static event On.iTween.hook_DrawPathHelper DrawPathHelper
        {
            add => On.iTween.DrawPathHelper += value;
            remove => On.iTween.DrawPathHelper -= value;
        }

        public static event On.iTween.hook_PathControlPointGenerator PathControlPointGenerator
        {
            add => On.iTween.PathControlPointGenerator += value;
            remove => On.iTween.PathControlPointGenerator -= value;
        }

        public static event On.iTween.hook_Interp Interp
        {
            add => On.iTween.Interp += value;
            remove => On.iTween.Interp -= value;
        }

        public static event On.iTween.hook_Launch Launch
        {
            add => On.iTween.Launch += value;
            remove => On.iTween.Launch -= value;
        }

        public static event On.iTween.hook_CleanArgs CleanArgs
        {
            add => On.iTween.CleanArgs += value;
            remove => On.iTween.CleanArgs -= value;
        }

        public static event On.iTween.hook_GenerateID GenerateID
        {
            add => On.iTween.GenerateID += value;
            remove => On.iTween.GenerateID -= value;
        }

        public static event On.iTween.hook_RetrieveArgs RetrieveArgs
        {
            add => On.iTween.RetrieveArgs += value;
            remove => On.iTween.RetrieveArgs -= value;
        }

        public static event On.iTween.hook_GetEasingFunction GetEasingFunction
        {
            add => On.iTween.GetEasingFunction += value;
            remove => On.iTween.GetEasingFunction -= value;
        }

        public static event On.iTween.hook_UpdatePercentage UpdatePercentage
        {
            add => On.iTween.UpdatePercentage += value;
            remove => On.iTween.UpdatePercentage -= value;
        }

        public static event On.iTween.hook_CallBack CallBack
        {
            add => On.iTween.CallBack += value;
            remove => On.iTween.CallBack -= value;
        }

        public static event On.iTween.hook_Dispose Dispose
        {
            add => On.iTween.Dispose += value;
            remove => On.iTween.Dispose -= value;
        }

        public static event On.iTween.hook_ConflictCheck ConflictCheck
        {
            add => On.iTween.ConflictCheck += value;
            remove => On.iTween.ConflictCheck -= value;
        }

        public static event On.iTween.hook_EnableKinematic EnableKinematic
        {
            add => On.iTween.EnableKinematic += value;
            remove => On.iTween.EnableKinematic -= value;
        }

        public static event On.iTween.hook_DisableKinematic DisableKinematic
        {
            add => On.iTween.DisableKinematic += value;
            remove => On.iTween.DisableKinematic -= value;
        }

        public static event On.iTween.hook_ResumeDelay ResumeDelay
        {
            add => On.iTween.ResumeDelay += value;
            remove => On.iTween.ResumeDelay -= value;
        }

        public static event On.iTween.hook_linear linear
        {
            add => On.iTween.linear += value;
            remove => On.iTween.linear -= value;
        }

        public static event On.iTween.hook_clerp clerp
        {
            add => On.iTween.clerp += value;
            remove => On.iTween.clerp -= value;
        }

        public static event On.iTween.hook_spring spring
        {
            add => On.iTween.spring += value;
            remove => On.iTween.spring -= value;
        }

        public static event On.iTween.hook_easeInQuad easeInQuad
        {
            add => On.iTween.easeInQuad += value;
            remove => On.iTween.easeInQuad -= value;
        }

        public static event On.iTween.hook_easeOutQuad easeOutQuad
        {
            add => On.iTween.easeOutQuad += value;
            remove => On.iTween.easeOutQuad -= value;
        }

        public static event On.iTween.hook_easeInOutQuad easeInOutQuad
        {
            add => On.iTween.easeInOutQuad += value;
            remove => On.iTween.easeInOutQuad -= value;
        }

        public static event On.iTween.hook_easeInCubic easeInCubic
        {
            add => On.iTween.easeInCubic += value;
            remove => On.iTween.easeInCubic -= value;
        }

        public static event On.iTween.hook_easeOutCubic easeOutCubic
        {
            add => On.iTween.easeOutCubic += value;
            remove => On.iTween.easeOutCubic -= value;
        }

        public static event On.iTween.hook_easeInOutCubic easeInOutCubic
        {
            add => On.iTween.easeInOutCubic += value;
            remove => On.iTween.easeInOutCubic -= value;
        }

        public static event On.iTween.hook_easeInQuart easeInQuart
        {
            add => On.iTween.easeInQuart += value;
            remove => On.iTween.easeInQuart -= value;
        }

        public static event On.iTween.hook_easeOutQuart easeOutQuart
        {
            add => On.iTween.easeOutQuart += value;
            remove => On.iTween.easeOutQuart -= value;
        }

        public static event On.iTween.hook_easeInOutQuart easeInOutQuart
        {
            add => On.iTween.easeInOutQuart += value;
            remove => On.iTween.easeInOutQuart -= value;
        }

        public static event On.iTween.hook_easeInQuint easeInQuint
        {
            add => On.iTween.easeInQuint += value;
            remove => On.iTween.easeInQuint -= value;
        }

        public static event On.iTween.hook_easeOutQuint easeOutQuint
        {
            add => On.iTween.easeOutQuint += value;
            remove => On.iTween.easeOutQuint -= value;
        }

        public static event On.iTween.hook_easeInOutQuint easeInOutQuint
        {
            add => On.iTween.easeInOutQuint += value;
            remove => On.iTween.easeInOutQuint -= value;
        }

        public static event On.iTween.hook_easeInSine easeInSine
        {
            add => On.iTween.easeInSine += value;
            remove => On.iTween.easeInSine -= value;
        }

        public static event On.iTween.hook_easeOutSine easeOutSine
        {
            add => On.iTween.easeOutSine += value;
            remove => On.iTween.easeOutSine -= value;
        }

        public static event On.iTween.hook_easeInOutSine easeInOutSine
        {
            add => On.iTween.easeInOutSine += value;
            remove => On.iTween.easeInOutSine -= value;
        }

        public static event On.iTween.hook_easeInExpo easeInExpo
        {
            add => On.iTween.easeInExpo += value;
            remove => On.iTween.easeInExpo -= value;
        }

        public static event On.iTween.hook_easeOutExpo easeOutExpo
        {
            add => On.iTween.easeOutExpo += value;
            remove => On.iTween.easeOutExpo -= value;
        }

        public static event On.iTween.hook_easeInOutExpo easeInOutExpo
        {
            add => On.iTween.easeInOutExpo += value;
            remove => On.iTween.easeInOutExpo -= value;
        }

        public static event On.iTween.hook_easeInCirc easeInCirc
        {
            add => On.iTween.easeInCirc += value;
            remove => On.iTween.easeInCirc -= value;
        }

        public static event On.iTween.hook_easeOutCirc easeOutCirc
        {
            add => On.iTween.easeOutCirc += value;
            remove => On.iTween.easeOutCirc -= value;
        }

        public static event On.iTween.hook_easeInOutCirc easeInOutCirc
        {
            add => On.iTween.easeInOutCirc += value;
            remove => On.iTween.easeInOutCirc -= value;
        }

        public static event On.iTween.hook_easeInBounce easeInBounce
        {
            add => On.iTween.easeInBounce += value;
            remove => On.iTween.easeInBounce -= value;
        }

        public static event On.iTween.hook_easeOutBounce easeOutBounce
        {
            add => On.iTween.easeOutBounce += value;
            remove => On.iTween.easeOutBounce -= value;
        }

        public static event On.iTween.hook_easeInOutBounce easeInOutBounce
        {
            add => On.iTween.easeInOutBounce += value;
            remove => On.iTween.easeInOutBounce -= value;
        }

        public static event On.iTween.hook_easeInBack easeInBack
        {
            add => On.iTween.easeInBack += value;
            remove => On.iTween.easeInBack -= value;
        }

        public static event On.iTween.hook_easeOutBack easeOutBack
        {
            add => On.iTween.easeOutBack += value;
            remove => On.iTween.easeOutBack -= value;
        }

        public static event On.iTween.hook_easeInOutBack easeInOutBack
        {
            add => On.iTween.easeInOutBack += value;
            remove => On.iTween.easeInOutBack -= value;
        }

        public static event On.iTween.hook_punch punch
        {
            add => On.iTween.punch += value;
            remove => On.iTween.punch -= value;
        }

        public static event On.iTween.hook_easeInElastic easeInElastic
        {
            add => On.iTween.easeInElastic += value;
            remove => On.iTween.easeInElastic -= value;
        }

        public static event On.iTween.hook_easeOutElastic easeOutElastic
        {
            add => On.iTween.easeOutElastic += value;
            remove => On.iTween.easeOutElastic -= value;
        }

        public static event On.iTween.hook_easeInOutElastic easeInOutElastic
        {
            add => On.iTween.easeInOutElastic += value;
            remove => On.iTween.easeInOutElastic -= value;
        }
    }
}