using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuSelectable class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuSelectable
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_DontPlaySelectSound()
        {
            if (!HookedList.Contains("get_DontPlaySelectSound"))
            {
                HookedList.Add("get_DontPlaySelectSound");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "get_DontPlaySelectSound"),
                    get_DontPlaySelectSound);
            }
        }

        internal static event Delegates.get_DontPlaySelectSound_BeforeArgs _beforeget_DontPlaySelectSound;
        internal static event Delegates.get_DontPlaySelectSound_AfterArgs _afterget_DontPlaySelectSound;

        private static bool get_DontPlaySelectSound(Func<MenuSelectable, bool> orig, MenuSelectable self)
        {
            Delegates.Params_get_DontPlaySelectSound @params = new()
            {
                self = self
            };
            if (_beforeget_DontPlaySelectSound != null)
                foreach (Delegates.get_DontPlaySelectSound_BeforeArgs toInvoke in _beforeget_DontPlaySelectSound
                             .GetInvocationList())
                    try
                    {
                        _beforeget_DontPlaySelectSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DontPlaySelectSound != null)
                foreach (Delegates.get_DontPlaySelectSound_AfterArgs toInvoke in _afterget_DontPlaySelectSound
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_DontPlaySelectSound.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_DontPlaySelectSound()
        {
            if (!HookedList.Contains("set_DontPlaySelectSound"))
            {
                HookedList.Add("set_DontPlaySelectSound");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "set_DontPlaySelectSound"),
                    set_DontPlaySelectSound);
            }
        }

        internal static event Delegates.set_DontPlaySelectSound_BeforeArgs _beforeset_DontPlaySelectSound;
        internal static event Delegates.set_DontPlaySelectSound_AfterArgs _afterset_DontPlaySelectSound;

        private static void set_DontPlaySelectSound(Action<MenuSelectable, bool> orig, MenuSelectable self, bool value)
        {
            Delegates.Params_set_DontPlaySelectSound @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_DontPlaySelectSound != null)
                foreach (Delegates.set_DontPlaySelectSound_BeforeArgs toInvoke in _beforeset_DontPlaySelectSound
                             .GetInvocationList())
                    try
                    {
                        _beforeset_DontPlaySelectSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DontPlaySelectSound != null)
                foreach (Delegates.set_DontPlaySelectSound_AfterArgs toInvoke in _afterset_DontPlaySelectSound
                             .GetInvocationList())
                    try
                    {
                        _afterset_DontPlaySelectSound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnSelect"), OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_AfterArgs _afterOnSelect;

        private static void OnSelect(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSelect != null)
                foreach (Delegates.OnSelect_BeforeArgs toInvoke in _beforeOnSelect.GetInvocationList())
                    try
                    {
                        _beforeOnSelect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null)
                foreach (Delegates.OnSelect_AfterArgs toInvoke in _afterOnSelect.GetInvocationList())
                    try
                    {
                        _afterOnSelect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDeselect()
        {
            if (!HookedList.Contains("OnDeselect"))
            {
                HookedList.Add("OnDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnDeselect"), OnDeselect);
            }
        }

        internal static event Delegates.OnDeselect_BeforeArgs _beforeOnDeselect;
        internal static event Delegates.OnDeselect_AfterArgs _afterOnDeselect;

        private static void OnDeselect(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData)
        {
            Delegates.Params_OnDeselect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnDeselect != null)
                foreach (Delegates.OnDeselect_BeforeArgs toInvoke in _beforeOnDeselect.GetInvocationList())
                    try
                    {
                        _beforeOnDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnDeselect != null)
                foreach (Delegates.OnDeselect_AfterArgs toInvoke in _afterOnDeselect.GetInvocationList())
                    try
                    {
                        _afterOnDeselect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookForceDeselect()
        {
            if (!HookedList.Contains("ForceDeselect"))
            {
                HookedList.Add("ForceDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "ForceDeselect"), ForceDeselect);
            }
        }

        internal static event Delegates.ForceDeselect_BeforeArgs _beforeForceDeselect;
        internal static event Delegates.ForceDeselect_AfterArgs _afterForceDeselect;

        private static void ForceDeselect(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_ForceDeselect @params = new()
            {
                self = self
            };
            if (_beforeForceDeselect != null)
                foreach (Delegates.ForceDeselect_BeforeArgs toInvoke in _beforeForceDeselect.GetInvocationList())
                    try
                    {
                        _beforeForceDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterForceDeselect != null)
                foreach (Delegates.ForceDeselect_AfterArgs toInvoke in _afterForceDeselect.GetInvocationList())
                    try
                    {
                        _afterForceDeselect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnCancel"), OnCancel);
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_AfterArgs _afterOnCancel;

        private static void OnCancel(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnCancel != null)
                foreach (Delegates.OnCancel_BeforeArgs toInvoke in _beforeOnCancel.GetInvocationList())
                    try
                    {
                        _beforeOnCancel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null)
                foreach (Delegates.OnCancel_AfterArgs toInvoke in _afterOnCancel.GetInvocationList())
                    try
                    {
                        _afterOnCancel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookValidateDeselect()
        {
            if (!HookedList.Contains("ValidateDeselect"))
            {
                HookedList.Add("ValidateDeselect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "ValidateDeselect"), ValidateDeselect);
            }
        }

        internal static event Delegates.ValidateDeselect_BeforeArgs _beforeValidateDeselect;

        private static IEnumerator ValidateDeselect(Func<MenuSelectable, IEnumerator> orig, MenuSelectable self)
        {
            Delegates.Params_ValidateDeselect @params = new()
            {
                self = self
            };
            if (_beforeValidateDeselect != null)
                foreach (Delegates.ValidateDeselect_BeforeArgs toInvoke in _beforeValidateDeselect.GetInvocationList())
                    try
                    {
                        _beforeValidateDeselect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookHookUpAudioPlayer()
        {
            if (!HookedList.Contains("HookUpAudioPlayer"))
            {
                HookedList.Add("HookUpAudioPlayer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "HookUpAudioPlayer"),
                    HookUpAudioPlayer);
            }
        }

        internal static event Delegates.HookUpAudioPlayer_BeforeArgs _beforeHookUpAudioPlayer;
        internal static event Delegates.HookUpAudioPlayer_AfterArgs _afterHookUpAudioPlayer;

        private static void HookUpAudioPlayer(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_HookUpAudioPlayer @params = new()
            {
                self = self
            };
            if (_beforeHookUpAudioPlayer != null)
                foreach (Delegates.HookUpAudioPlayer_BeforeArgs toInvoke in
                         _beforeHookUpAudioPlayer.GetInvocationList())
                    try
                    {
                        _beforeHookUpAudioPlayer?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterHookUpAudioPlayer != null)
                foreach (Delegates.HookUpAudioPlayer_AfterArgs toInvoke in _afterHookUpAudioPlayer.GetInvocationList())
                    try
                    {
                        _afterHookUpAudioPlayer.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlaySubmitSound()
        {
            if (!HookedList.Contains("PlaySubmitSound"))
            {
                HookedList.Add("PlaySubmitSound");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlaySubmitSound"), PlaySubmitSound);
            }
        }

        internal static event Delegates.PlaySubmitSound_BeforeArgs _beforePlaySubmitSound;
        internal static event Delegates.PlaySubmitSound_AfterArgs _afterPlaySubmitSound;

        private static void PlaySubmitSound(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_PlaySubmitSound @params = new()
            {
                self = self
            };
            if (_beforePlaySubmitSound != null)
                foreach (Delegates.PlaySubmitSound_BeforeArgs toInvoke in _beforePlaySubmitSound.GetInvocationList())
                    try
                    {
                        _beforePlaySubmitSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPlaySubmitSound != null)
                foreach (Delegates.PlaySubmitSound_AfterArgs toInvoke in _afterPlaySubmitSound.GetInvocationList())
                    try
                    {
                        _afterPlaySubmitSound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlayCancelSound()
        {
            if (!HookedList.Contains("PlayCancelSound"))
            {
                HookedList.Add("PlayCancelSound");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlayCancelSound"), PlayCancelSound);
            }
        }

        internal static event Delegates.PlayCancelSound_BeforeArgs _beforePlayCancelSound;
        internal static event Delegates.PlayCancelSound_AfterArgs _afterPlayCancelSound;

        private static void PlayCancelSound(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_PlayCancelSound @params = new()
            {
                self = self
            };
            if (_beforePlayCancelSound != null)
                foreach (Delegates.PlayCancelSound_BeforeArgs toInvoke in _beforePlayCancelSound.GetInvocationList())
                    try
                    {
                        _beforePlayCancelSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPlayCancelSound != null)
                foreach (Delegates.PlayCancelSound_AfterArgs toInvoke in _afterPlayCancelSound.GetInvocationList())
                    try
                    {
                        _afterPlayCancelSound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlaySelectSound()
        {
            if (!HookedList.Contains("PlaySelectSound"))
            {
                HookedList.Add("PlaySelectSound");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlaySelectSound"), PlaySelectSound);
            }
        }

        internal static event Delegates.PlaySelectSound_BeforeArgs _beforePlaySelectSound;
        internal static event Delegates.PlaySelectSound_AfterArgs _afterPlaySelectSound;

        private static void PlaySelectSound(Action<MenuSelectable> orig, MenuSelectable self)
        {
            Delegates.Params_PlaySelectSound @params = new()
            {
                self = self
            };
            if (_beforePlaySelectSound != null)
                foreach (Delegates.PlaySelectSound_BeforeArgs toInvoke in _beforePlaySelectSound.GetInvocationList())
                    try
                    {
                        _beforePlaySelectSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPlaySelectSound != null)
                foreach (Delegates.PlaySelectSound_AfterArgs toInvoke in _afterPlaySelectSound.GetInvocationList())
                    try
                    {
                        _afterPlaySelectSound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_customCancelAction()
        {
            if (!HookedList.Contains("get_customCancelAction"))
            {
                HookedList.Add("get_customCancelAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "get_customCancelAction"),
                    get_customCancelAction);
            }
        }

        internal static event Delegates.get_customCancelAction_BeforeArgs _beforeget_customCancelAction;
        internal static event Delegates.get_customCancelAction_AfterArgs _afterget_customCancelAction;

        private static Action<MenuSelectable> get_customCancelAction(Func<MenuSelectable, Action<MenuSelectable>> orig,
            MenuSelectable self)
        {
            Delegates.Params_get_customCancelAction @params = new()
            {
                self = self
            };
            if (_beforeget_customCancelAction != null)
                foreach (Delegates.get_customCancelAction_BeforeArgs toInvoke in _beforeget_customCancelAction
                             .GetInvocationList())
                    try
                    {
                        _beforeget_customCancelAction?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_customCancelAction != null)
                foreach (Delegates.get_customCancelAction_AfterArgs toInvoke in _afterget_customCancelAction
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_customCancelAction.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_customCancelAction()
        {
            if (!HookedList.Contains("set_customCancelAction"))
            {
                HookedList.Add("set_customCancelAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "set_customCancelAction"),
                    set_customCancelAction);
            }
        }

        internal static event Delegates.set_customCancelAction_BeforeArgs _beforeset_customCancelAction;
        internal static event Delegates.set_customCancelAction_AfterArgs _afterset_customCancelAction;

        private static void set_customCancelAction(Action<MenuSelectable, Action<MenuSelectable>> orig,
            MenuSelectable self, Action<MenuSelectable> value)
        {
            Delegates.Params_set_customCancelAction @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_customCancelAction != null)
                foreach (Delegates.set_customCancelAction_BeforeArgs toInvoke in _beforeset_customCancelAction
                             .GetInvocationList())
                    try
                    {
                        _beforeset_customCancelAction?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_customCancelAction != null)
                foreach (Delegates.set_customCancelAction_AfterArgs toInvoke in _afterset_customCancelAction
                             .GetInvocationList())
                    try
                    {
                        _afterset_customCancelAction.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_OnCancel()
        {
            if (!HookedList.Contains("orig_OnCancel"))
            {
                HookedList.Add("orig_OnCancel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "orig_OnCancel"), orig_OnCancel);
            }
        }

        internal static event Delegates.orig_OnCancel_BeforeArgs _beforeorig_OnCancel;
        internal static event Delegates.orig_OnCancel_AfterArgs _afterorig_OnCancel;

        private static void orig_OnCancel(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData)
        {
            Delegates.Params_orig_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeorig_OnCancel != null)
                foreach (Delegates.orig_OnCancel_BeforeArgs toInvoke in _beforeorig_OnCancel.GetInvocationList())
                    try
                    {
                        _beforeorig_OnCancel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterorig_OnCancel != null)
                foreach (Delegates.orig_OnCancel_AfterArgs toInvoke in _afterorig_OnCancel.GetInvocationList())
                    try
                    {
                        _afterorig_OnCancel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate void ForceDeselect_AfterArgs(Params_ForceDeselect args);

        public delegate void ForceDeselect_BeforeArgs(Params_ForceDeselect args);

        public delegate void ForceDeselect_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate Action<MenuSelectable> get_customCancelAction_AfterArgs(Params_get_customCancelAction args,
            Action<MenuSelectable> ret);

        public delegate void get_customCancelAction_BeforeArgs(Params_get_customCancelAction args);

        public delegate Action<MenuSelectable> get_customCancelAction_WithArgs(
            Func<MenuSelectable, Action<MenuSelectable>> orig, MenuSelectable self);

        public delegate bool get_DontPlaySelectSound_AfterArgs(Params_get_DontPlaySelectSound args, bool ret);

        public delegate void get_DontPlaySelectSound_BeforeArgs(Params_get_DontPlaySelectSound args);

        public delegate bool get_DontPlaySelectSound_WithArgs(Func<MenuSelectable, bool> orig, MenuSelectable self);

        public delegate void HookUpAudioPlayer_AfterArgs(Params_HookUpAudioPlayer args);

        public delegate void HookUpAudioPlayer_BeforeArgs(Params_HookUpAudioPlayer args);

        public delegate void HookUpAudioPlayer_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate void OnCancel_AfterArgs(Params_OnCancel args);

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_WithArgs(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData);

        public delegate void OnDeselect_AfterArgs(Params_OnDeselect args);

        public delegate void OnDeselect_BeforeArgs(Params_OnDeselect args);

        public delegate void OnDeselect_WithArgs(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData);

        public delegate void OnSelect_AfterArgs(Params_OnSelect args);

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_WithArgs(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData);

        public delegate void orig_OnCancel_AfterArgs(Params_orig_OnCancel args);

        public delegate void orig_OnCancel_BeforeArgs(Params_orig_OnCancel args);

        public delegate void orig_OnCancel_WithArgs(Action<MenuSelectable, BaseEventData> orig, MenuSelectable self,
            BaseEventData eventData);

        public delegate void PlayCancelSound_AfterArgs(Params_PlayCancelSound args);

        public delegate void PlayCancelSound_BeforeArgs(Params_PlayCancelSound args);

        public delegate void PlayCancelSound_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate void PlaySelectSound_AfterArgs(Params_PlaySelectSound args);

        public delegate void PlaySelectSound_BeforeArgs(Params_PlaySelectSound args);

        public delegate void PlaySelectSound_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate void PlaySubmitSound_AfterArgs(Params_PlaySubmitSound args);

        public delegate void PlaySubmitSound_BeforeArgs(Params_PlaySubmitSound args);

        public delegate void PlaySubmitSound_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate void set_customCancelAction_AfterArgs(Params_set_customCancelAction args);

        public delegate void set_customCancelAction_BeforeArgs(Params_set_customCancelAction args);

        public delegate void set_customCancelAction_WithArgs(Action<MenuSelectable, Action<MenuSelectable>> orig,
            MenuSelectable self, Action<MenuSelectable> value);

        public delegate void set_DontPlaySelectSound_AfterArgs(Params_set_DontPlaySelectSound args);

        public delegate void set_DontPlaySelectSound_BeforeArgs(Params_set_DontPlaySelectSound args);

        public delegate void set_DontPlaySelectSound_WithArgs(Action<MenuSelectable, bool> orig, MenuSelectable self,
            bool value);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<MenuSelectable> orig, MenuSelectable self);

        public delegate IEnumerator ValidateDeselect_AfterArgs(Params_ValidateDeselect args, IEnumerator ret);

        public delegate void ValidateDeselect_BeforeArgs(Params_ValidateDeselect args);

        public delegate IEnumerator ValidateDeselect_WithArgs(Func<MenuSelectable, IEnumerator> orig,
            MenuSelectable self);

        public sealed class Params_get_DontPlaySelectSound
        {
            public MenuSelectable self;
        }

        public sealed class Params_set_DontPlaySelectSound
        {
            public MenuSelectable self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public MenuSelectable self;
        }

        public sealed class Params_Start
        {
            public MenuSelectable self;
        }

        public sealed class Params_OnSelect
        {
            public BaseEventData eventData;
            public MenuSelectable self;
        }

        public sealed class Params_OnDeselect
        {
            public BaseEventData eventData;
            public MenuSelectable self;
        }

        public sealed class Params_ForceDeselect
        {
            public MenuSelectable self;
        }

        public sealed class Params_OnCancel
        {
            public BaseEventData eventData;
            public MenuSelectable self;
        }

        public sealed class Params_ValidateDeselect
        {
            public MenuSelectable self;
        }

        public sealed class Params_HookUpAudioPlayer
        {
            public MenuSelectable self;
        }

        public sealed class Params_PlaySubmitSound
        {
            public MenuSelectable self;
        }

        public sealed class Params_PlayCancelSound
        {
            public MenuSelectable self;
        }

        public sealed class Params_PlaySelectSound
        {
            public MenuSelectable self;
        }

        public sealed class Params_get_customCancelAction
        {
            public MenuSelectable self;
        }

        public sealed class Params_set_customCancelAction
        {
            public MenuSelectable self;
            public Action<MenuSelectable> value;
        }

        public sealed class Params_orig_OnCancel
        {
            public BaseEventData eventData;
            public MenuSelectable self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_DontPlaySelectSound_BeforeArgs get_DontPlaySelectSound
        {
            add
            {
                HookHandler._beforeget_DontPlaySelectSound += value;
                HookHandler.Hookget_DontPlaySelectSound();
            }
            remove => HookHandler._beforeget_DontPlaySelectSound -= value;
        }

        public static event Delegates.set_DontPlaySelectSound_BeforeArgs set_DontPlaySelectSound
        {
            add
            {
                HookHandler._beforeset_DontPlaySelectSound += value;
                HookHandler.Hookset_DontPlaySelectSound();
            }
            remove => HookHandler._beforeset_DontPlaySelectSound -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }

        public static event Delegates.OnDeselect_BeforeArgs OnDeselect
        {
            add
            {
                HookHandler._beforeOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._beforeOnDeselect -= value;
        }

        public static event Delegates.ForceDeselect_BeforeArgs ForceDeselect
        {
            add
            {
                HookHandler._beforeForceDeselect += value;
                HookHandler.HookForceDeselect();
            }
            remove => HookHandler._beforeForceDeselect -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.ValidateDeselect_BeforeArgs ValidateDeselect
        {
            add
            {
                HookHandler._beforeValidateDeselect += value;
                HookHandler.HookValidateDeselect();
            }
            remove => HookHandler._beforeValidateDeselect -= value;
        }

        public static event Delegates.HookUpAudioPlayer_BeforeArgs HookUpAudioPlayer
        {
            add
            {
                HookHandler._beforeHookUpAudioPlayer += value;
                HookHandler.HookHookUpAudioPlayer();
            }
            remove => HookHandler._beforeHookUpAudioPlayer -= value;
        }

        public static event Delegates.PlaySubmitSound_BeforeArgs PlaySubmitSound
        {
            add
            {
                HookHandler._beforePlaySubmitSound += value;
                HookHandler.HookPlaySubmitSound();
            }
            remove => HookHandler._beforePlaySubmitSound -= value;
        }

        public static event Delegates.PlayCancelSound_BeforeArgs PlayCancelSound
        {
            add
            {
                HookHandler._beforePlayCancelSound += value;
                HookHandler.HookPlayCancelSound();
            }
            remove => HookHandler._beforePlayCancelSound -= value;
        }

        public static event Delegates.PlaySelectSound_BeforeArgs PlaySelectSound
        {
            add
            {
                HookHandler._beforePlaySelectSound += value;
                HookHandler.HookPlaySelectSound();
            }
            remove => HookHandler._beforePlaySelectSound -= value;
        }

        public static event Delegates.get_customCancelAction_BeforeArgs get_customCancelAction
        {
            add
            {
                HookHandler._beforeget_customCancelAction += value;
                HookHandler.Hookget_customCancelAction();
            }
            remove => HookHandler._beforeget_customCancelAction -= value;
        }

        public static event Delegates.set_customCancelAction_BeforeArgs set_customCancelAction
        {
            add
            {
                HookHandler._beforeset_customCancelAction += value;
                HookHandler.Hookset_customCancelAction();
            }
            remove => HookHandler._beforeset_customCancelAction -= value;
        }

        public static event Delegates.orig_OnCancel_BeforeArgs orig_OnCancel
        {
            add
            {
                HookHandler._beforeorig_OnCancel += value;
                HookHandler.Hookorig_OnCancel();
            }
            remove => HookHandler._beforeorig_OnCancel -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_DontPlaySelectSound_AfterArgs get_DontPlaySelectSound
        {
            add
            {
                HookHandler._afterget_DontPlaySelectSound += value;
                HookHandler.Hookget_DontPlaySelectSound();
            }
            remove => HookHandler._afterget_DontPlaySelectSound -= value;
        }

        public static event Delegates.set_DontPlaySelectSound_AfterArgs set_DontPlaySelectSound
        {
            add
            {
                HookHandler._afterset_DontPlaySelectSound += value;
                HookHandler.Hookset_DontPlaySelectSound();
            }
            remove => HookHandler._afterset_DontPlaySelectSound -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnSelect_AfterArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }

        public static event Delegates.OnDeselect_AfterArgs OnDeselect
        {
            add
            {
                HookHandler._afterOnDeselect += value;
                HookHandler.HookOnDeselect();
            }
            remove => HookHandler._afterOnDeselect -= value;
        }

        public static event Delegates.ForceDeselect_AfterArgs ForceDeselect
        {
            add
            {
                HookHandler._afterForceDeselect += value;
                HookHandler.HookForceDeselect();
            }
            remove => HookHandler._afterForceDeselect -= value;
        }

        public static event Delegates.OnCancel_AfterArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.HookUpAudioPlayer_AfterArgs HookUpAudioPlayer
        {
            add
            {
                HookHandler._afterHookUpAudioPlayer += value;
                HookHandler.HookHookUpAudioPlayer();
            }
            remove => HookHandler._afterHookUpAudioPlayer -= value;
        }

        public static event Delegates.PlaySubmitSound_AfterArgs PlaySubmitSound
        {
            add
            {
                HookHandler._afterPlaySubmitSound += value;
                HookHandler.HookPlaySubmitSound();
            }
            remove => HookHandler._afterPlaySubmitSound -= value;
        }

        public static event Delegates.PlayCancelSound_AfterArgs PlayCancelSound
        {
            add
            {
                HookHandler._afterPlayCancelSound += value;
                HookHandler.HookPlayCancelSound();
            }
            remove => HookHandler._afterPlayCancelSound -= value;
        }

        public static event Delegates.PlaySelectSound_AfterArgs PlaySelectSound
        {
            add
            {
                HookHandler._afterPlaySelectSound += value;
                HookHandler.HookPlaySelectSound();
            }
            remove => HookHandler._afterPlaySelectSound -= value;
        }

        public static event Delegates.get_customCancelAction_AfterArgs get_customCancelAction
        {
            add
            {
                HookHandler._afterget_customCancelAction += value;
                HookHandler.Hookget_customCancelAction();
            }
            remove => HookHandler._afterget_customCancelAction -= value;
        }

        public static event Delegates.set_customCancelAction_AfterArgs set_customCancelAction
        {
            add
            {
                HookHandler._afterset_customCancelAction += value;
                HookHandler.Hookset_customCancelAction();
            }
            remove => HookHandler._afterset_customCancelAction -= value;
        }

        public static event Delegates.orig_OnCancel_AfterArgs orig_OnCancel
        {
            add
            {
                HookHandler._afterorig_OnCancel += value;
                HookHandler.Hookorig_OnCancel();
            }
            remove => HookHandler._afterorig_OnCancel -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_DontPlaySelectSound_WithArgs get_DontPlaySelectSound
        {
            add => HookEndpointManager.Add<Delegates.get_DontPlaySelectSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "get_DontPlaySelectSound"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DontPlaySelectSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "get_DontPlaySelectSound"), value);
        }

        public static event Delegates.set_DontPlaySelectSound_WithArgs set_DontPlaySelectSound
        {
            add => HookEndpointManager.Add<Delegates.set_DontPlaySelectSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "set_DontPlaySelectSound"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DontPlaySelectSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "set_DontPlaySelectSound"), value);
        }

        public static event Delegates.Awake_WithArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "Awake"), value);
        }

        public static event Delegates.Start_WithArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "Start"), value);
        }

        public static event Delegates.OnSelect_WithArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnSelect"), value);
        }

        public static event Delegates.OnDeselect_WithArgs OnDeselect
        {
            add => HookEndpointManager.Add<Delegates.OnDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnDeselect"), value);
        }

        public static event Delegates.ForceDeselect_WithArgs ForceDeselect
        {
            add => HookEndpointManager.Add<Delegates.ForceDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "ForceDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.ForceDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "ForceDeselect"), value);
        }

        public static event Delegates.OnCancel_WithArgs OnCancel
        {
            add => HookEndpointManager.Add<Delegates.OnCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnCancel"), value);
            remove => HookEndpointManager.Remove<Delegates.OnCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "OnCancel"), value);
        }

        public static event Delegates.ValidateDeselect_WithArgs ValidateDeselect
        {
            add => HookEndpointManager.Add<Delegates.ValidateDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "ValidateDeselect"), value);
            remove => HookEndpointManager.Remove<Delegates.ValidateDeselect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "ValidateDeselect"), value);
        }

        public static event Delegates.HookUpAudioPlayer_WithArgs HookUpAudioPlayer
        {
            add => HookEndpointManager.Add<Delegates.HookUpAudioPlayer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "HookUpAudioPlayer"), value);
            remove => HookEndpointManager.Remove<Delegates.HookUpAudioPlayer_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "HookUpAudioPlayer"), value);
        }

        public static event Delegates.PlaySubmitSound_WithArgs PlaySubmitSound
        {
            add => HookEndpointManager.Add<Delegates.PlaySubmitSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlaySubmitSound"), value);
            remove => HookEndpointManager.Remove<Delegates.PlaySubmitSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlaySubmitSound"), value);
        }

        public static event Delegates.PlayCancelSound_WithArgs PlayCancelSound
        {
            add => HookEndpointManager.Add<Delegates.PlayCancelSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlayCancelSound"), value);
            remove => HookEndpointManager.Remove<Delegates.PlayCancelSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlayCancelSound"), value);
        }

        public static event Delegates.PlaySelectSound_WithArgs PlaySelectSound
        {
            add => HookEndpointManager.Add<Delegates.PlaySelectSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlaySelectSound"), value);
            remove => HookEndpointManager.Remove<Delegates.PlaySelectSound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "PlaySelectSound"), value);
        }

        public static event Delegates.get_customCancelAction_WithArgs get_customCancelAction
        {
            add => HookEndpointManager.Add<Delegates.get_customCancelAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "get_customCancelAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_customCancelAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "get_customCancelAction"), value);
        }

        public static event Delegates.set_customCancelAction_WithArgs set_customCancelAction
        {
            add => HookEndpointManager.Add<Delegates.set_customCancelAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "set_customCancelAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_customCancelAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "set_customCancelAction"), value);
        }

        public static event Delegates.orig_OnCancel_WithArgs orig_OnCancel
        {
            add => HookEndpointManager.Add<Delegates.orig_OnCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "orig_OnCancel"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_OnCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectable), "orig_OnCancel"), value);
        }
    }
}