using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MouseBindingSource class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMouseBindingSource
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_Control()
        {
            if (!HookedList.Contains("get_Control"))
            {
                HookedList.Add("get_Control");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_Control", true),
                    get_Control);
            }
        }

        internal static event Delegates.get_Control_BeforeArgs _beforeget_Control;
        internal static event Delegates.get_Control_AfterArgs _afterget_Control;

        private static InControl.Mouse get_Control(Func<InControl.MouseBindingSource, InControl.Mouse> orig,
            InControl.MouseBindingSource self)
        {
            Delegates.Params_get_Control @params = new()
            {
                self = self
            };
            if (_beforeget_Control != null)
            {
                foreach (Delegates.get_Control_BeforeArgs toInvoke in _beforeget_Control.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Control?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Control != null)
            {
                foreach (Delegates.get_Control_AfterArgs toInvoke in _afterget_Control.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Control.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Control()
        {
            if (!HookedList.Contains("set_Control"))
            {
                HookedList.Add("set_Control");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "set_Control", true),
                    set_Control);
            }
        }

        internal static event Delegates.set_Control_BeforeArgs _beforeset_Control;
        internal static event Delegates.set_Control_AfterArgs _afterset_Control;

        private static void set_Control(Action<InControl.MouseBindingSource, InControl.Mouse> orig,
            InControl.MouseBindingSource self, InControl.Mouse value)
        {
            Delegates.Params_set_Control @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Control != null)
            {
                foreach (Delegates.set_Control_BeforeArgs toInvoke in _beforeset_Control.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Control?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Control != null)
            {
                foreach (Delegates.set_Control_AfterArgs toInvoke in _afterset_Control.GetInvocationList())
                {
                    try
                    {
                        _afterset_Control.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookButtonIsPressed()
        {
            if (!HookedList.Contains("ButtonIsPressed"))
            {
                HookedList.Add("ButtonIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "ButtonIsPressed", false),
                    ButtonIsPressed);
            }
        }

        internal static event Delegates.ButtonIsPressed_BeforeArgs _beforeButtonIsPressed;
        internal static event Delegates.ButtonIsPressed_AfterArgs _afterButtonIsPressed;

        private static bool ButtonIsPressed(Func<InControl.Mouse, bool> orig, InControl.Mouse control)
        {
            Delegates.Params_ButtonIsPressed @params = new()
            {
                control = control
            };
            if (_beforeButtonIsPressed != null)
            {
                foreach (Delegates.ButtonIsPressed_BeforeArgs toInvoke in _beforeButtonIsPressed.GetInvocationList())
                {
                    try
                    {
                        _beforeButtonIsPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            control = @params.control;
            var retVal = orig(control);
            if (_afterButtonIsPressed != null)
            {
                foreach (Delegates.ButtonIsPressed_AfterArgs toInvoke in _afterButtonIsPressed.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterButtonIsPressed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookNegativeScrollWheelIsActive()
        {
            if (!HookedList.Contains("NegativeScrollWheelIsActive"))
            {
                HookedList.Add("NegativeScrollWheelIsActive");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "NegativeScrollWheelIsActive",
                        false), NegativeScrollWheelIsActive);
            }
        }

        internal static event Delegates.NegativeScrollWheelIsActive_BeforeArgs _beforeNegativeScrollWheelIsActive;
        internal static event Delegates.NegativeScrollWheelIsActive_AfterArgs _afterNegativeScrollWheelIsActive;

        private static bool NegativeScrollWheelIsActive(Func<float, bool> orig, float threshold)
        {
            Delegates.Params_NegativeScrollWheelIsActive @params = new()
            {
                threshold = threshold
            };
            if (_beforeNegativeScrollWheelIsActive != null)
            {
                foreach (Delegates.NegativeScrollWheelIsActive_BeforeArgs toInvoke in _beforeNegativeScrollWheelIsActive
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeNegativeScrollWheelIsActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            threshold = @params.threshold;
            var retVal = orig(threshold);
            if (_afterNegativeScrollWheelIsActive != null)
            {
                foreach (Delegates.NegativeScrollWheelIsActive_AfterArgs toInvoke in _afterNegativeScrollWheelIsActive
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterNegativeScrollWheelIsActive.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookPositiveScrollWheelIsActive()
        {
            if (!HookedList.Contains("PositiveScrollWheelIsActive"))
            {
                HookedList.Add("PositiveScrollWheelIsActive");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "PositiveScrollWheelIsActive",
                        false), PositiveScrollWheelIsActive);
            }
        }

        internal static event Delegates.PositiveScrollWheelIsActive_BeforeArgs _beforePositiveScrollWheelIsActive;
        internal static event Delegates.PositiveScrollWheelIsActive_AfterArgs _afterPositiveScrollWheelIsActive;

        private static bool PositiveScrollWheelIsActive(Func<float, bool> orig, float threshold)
        {
            Delegates.Params_PositiveScrollWheelIsActive @params = new()
            {
                threshold = threshold
            };
            if (_beforePositiveScrollWheelIsActive != null)
            {
                foreach (Delegates.PositiveScrollWheelIsActive_BeforeArgs toInvoke in _beforePositiveScrollWheelIsActive
                             .GetInvocationList())
                {
                    try
                    {
                        _beforePositiveScrollWheelIsActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            threshold = @params.threshold;
            var retVal = orig(threshold);
            if (_afterPositiveScrollWheelIsActive != null)
            {
                foreach (Delegates.PositiveScrollWheelIsActive_AfterArgs toInvoke in _afterPositiveScrollWheelIsActive
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterPositiveScrollWheelIsActive.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetValue_Mouse()
        {
            if (!HookedList.Contains("GetValue_Mouse"))
            {
                HookedList.Add("GetValue_Mouse");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetValue_Mouse", false),
                    GetValue_Mouse);
            }
        }

        internal static event Delegates.GetValue_Mouse_BeforeArgs _beforeGetValue_Mouse;
        internal static event Delegates.GetValue_Mouse_AfterArgs _afterGetValue_Mouse;

        private static float GetValue_Mouse(Func<InControl.Mouse, float> orig, InControl.Mouse mouseControl)
        {
            Delegates.Params_GetValue_Mouse @params = new()
            {
                mouseControl = mouseControl
            };
            if (_beforeGetValue_Mouse != null)
            {
                foreach (Delegates.GetValue_Mouse_BeforeArgs toInvoke in _beforeGetValue_Mouse.GetInvocationList())
                {
                    try
                    {
                        _beforeGetValue_Mouse?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            mouseControl = @params.mouseControl;
            var retVal = orig(mouseControl);
            if (_afterGetValue_Mouse != null)
            {
                foreach (Delegates.GetValue_Mouse_AfterArgs toInvoke in _afterGetValue_Mouse.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetValue_Mouse.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetValue_InputDevice()
        {
            if (!HookedList.Contains("GetValue_InputDevice"))
            {
                HookedList.Add("GetValue_InputDevice");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetValue_InputDevice", true),
                    GetValue_InputDevice);
            }
        }

        internal static event Delegates.GetValue_InputDevice_BeforeArgs _beforeGetValue_InputDevice;
        internal static event Delegates.GetValue_InputDevice_AfterArgs _afterGetValue_InputDevice;

        private static float GetValue_InputDevice(Func<InControl.MouseBindingSource, InControl.InputDevice, float> orig,
            InControl.MouseBindingSource self, InControl.InputDevice inputDevice)
        {
            Delegates.Params_GetValue_InputDevice @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            if (_beforeGetValue_InputDevice != null)
            {
                foreach (Delegates.GetValue_InputDevice_BeforeArgs toInvoke in _beforeGetValue_InputDevice
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetValue_InputDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            inputDevice = @params.inputDevice;
            var retVal = orig(self, inputDevice);
            if (_afterGetValue_InputDevice != null)
            {
                foreach (Delegates.GetValue_InputDevice_AfterArgs toInvoke in _afterGetValue_InputDevice
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetValue_InputDevice.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetState()
        {
            if (!HookedList.Contains("GetState"))
            {
                HookedList.Add("GetState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetState", true),
                    GetState);
            }
        }

        internal static event Delegates.GetState_BeforeArgs _beforeGetState;
        internal static event Delegates.GetState_AfterArgs _afterGetState;

        private static bool GetState(Func<InControl.MouseBindingSource, InControl.InputDevice, bool> orig,
            InControl.MouseBindingSource self, InControl.InputDevice inputDevice)
        {
            Delegates.Params_GetState @params = new()
            {
                self = self, inputDevice = inputDevice
            };
            if (_beforeGetState != null)
            {
                foreach (Delegates.GetState_BeforeArgs toInvoke in _beforeGetState.GetInvocationList())
                {
                    try
                    {
                        _beforeGetState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            inputDevice = @params.inputDevice;
            var retVal = orig(self, inputDevice);
            if (_afterGetState != null)
            {
                foreach (Delegates.GetState_AfterArgs toInvoke in _afterGetState.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetState.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_Name()
        {
            if (!HookedList.Contains("get_Name"))
            {
                HookedList.Add("get_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_Name", true),
                    get_Name);
            }
        }

        internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
        internal static event Delegates.get_Name_AfterArgs _afterget_Name;

        private static string get_Name(Func<InControl.MouseBindingSource, string> orig,
            InControl.MouseBindingSource self)
        {
            Delegates.Params_get_Name @params = new()
            {
                self = self
            };
            if (_beforeget_Name != null)
            {
                foreach (Delegates.get_Name_BeforeArgs toInvoke in _beforeget_Name.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Name?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Name != null)
            {
                foreach (Delegates.get_Name_AfterArgs toInvoke in _afterget_Name.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Name.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_DeviceName()
        {
            if (!HookedList.Contains("get_DeviceName"))
            {
                HookedList.Add("get_DeviceName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceName", true),
                    get_DeviceName);
            }
        }

        internal static event Delegates.get_DeviceName_BeforeArgs _beforeget_DeviceName;
        internal static event Delegates.get_DeviceName_AfterArgs _afterget_DeviceName;

        private static string get_DeviceName(Func<InControl.MouseBindingSource, string> orig,
            InControl.MouseBindingSource self)
        {
            Delegates.Params_get_DeviceName @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceName != null)
            {
                foreach (Delegates.get_DeviceName_BeforeArgs toInvoke in _beforeget_DeviceName.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceName != null)
            {
                foreach (Delegates.get_DeviceName_AfterArgs toInvoke in _afterget_DeviceName.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_DeviceClass()
        {
            if (!HookedList.Contains("get_DeviceClass"))
            {
                HookedList.Add("get_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceClass", true),
                    get_DeviceClass);
            }
        }

        internal static event Delegates.get_DeviceClass_BeforeArgs _beforeget_DeviceClass;
        internal static event Delegates.get_DeviceClass_AfterArgs _afterget_DeviceClass;

        private static InControl.InputDeviceClass get_DeviceClass(
            Func<InControl.MouseBindingSource, InControl.InputDeviceClass> orig, InControl.MouseBindingSource self)
        {
            Delegates.Params_get_DeviceClass @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceClass != null)
            {
                foreach (Delegates.get_DeviceClass_BeforeArgs toInvoke in _beforeget_DeviceClass.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceClass?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceClass != null)
            {
                foreach (Delegates.get_DeviceClass_AfterArgs toInvoke in _afterget_DeviceClass.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceClass.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_DeviceStyle()
        {
            if (!HookedList.Contains("get_DeviceStyle"))
            {
                HookedList.Add("get_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceStyle", true),
                    get_DeviceStyle);
            }
        }

        internal static event Delegates.get_DeviceStyle_BeforeArgs _beforeget_DeviceStyle;
        internal static event Delegates.get_DeviceStyle_AfterArgs _afterget_DeviceStyle;

        private static InControl.InputDeviceStyle get_DeviceStyle(
            Func<InControl.MouseBindingSource, InControl.InputDeviceStyle> orig, InControl.MouseBindingSource self)
        {
            Delegates.Params_get_DeviceStyle @params = new()
            {
                self = self
            };
            if (_beforeget_DeviceStyle != null)
            {
                foreach (Delegates.get_DeviceStyle_BeforeArgs toInvoke in _beforeget_DeviceStyle.GetInvocationList())
                {
                    try
                    {
                        _beforeget_DeviceStyle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceStyle != null)
            {
                foreach (Delegates.get_DeviceStyle_AfterArgs toInvoke in _afterget_DeviceStyle.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_DeviceStyle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookEquals_BindingSource()
        {
            if (!HookedList.Contains("Equals_BindingSource"))
            {
                HookedList.Add("Equals_BindingSource");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Equals_BindingSource", true),
                    Equals_BindingSource);
            }
        }

        internal static event Delegates.Equals_BindingSource_BeforeArgs _beforeEquals_BindingSource;
        internal static event Delegates.Equals_BindingSource_AfterArgs _afterEquals_BindingSource;

        private static bool Equals_BindingSource(Func<InControl.MouseBindingSource, InControl.BindingSource, bool> orig,
            InControl.MouseBindingSource self, InControl.BindingSource other)
        {
            Delegates.Params_Equals_BindingSource @params = new()
            {
                self = self, other = other
            };
            if (_beforeEquals_BindingSource != null)
            {
                foreach (Delegates.Equals_BindingSource_BeforeArgs toInvoke in _beforeEquals_BindingSource
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeEquals_BindingSource?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            other = @params.other;
            var retVal = orig(self, other);
            if (_afterEquals_BindingSource != null)
            {
                foreach (Delegates.Equals_BindingSource_AfterArgs toInvoke in _afterEquals_BindingSource
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterEquals_BindingSource.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookEquals_Object()
        {
            if (!HookedList.Contains("Equals_Object"))
            {
                HookedList.Add("Equals_Object");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Equals_Object", true),
                    Equals_Object);
            }
        }

        internal static event Delegates.Equals_Object_BeforeArgs _beforeEquals_Object;
        internal static event Delegates.Equals_Object_AfterArgs _afterEquals_Object;

        private static bool Equals_Object(Func<InControl.MouseBindingSource, System.Object, bool> orig,
            InControl.MouseBindingSource self, System.Object other)
        {
            Delegates.Params_Equals_Object @params = new()
            {
                self = self, other = other
            };
            if (_beforeEquals_Object != null)
            {
                foreach (Delegates.Equals_Object_BeforeArgs toInvoke in _beforeEquals_Object.GetInvocationList())
                {
                    try
                    {
                        _beforeEquals_Object?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            other = @params.other;
            var retVal = orig(self, other);
            if (_afterEquals_Object != null)
            {
                foreach (Delegates.Equals_Object_AfterArgs toInvoke in _afterEquals_Object.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterEquals_Object.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_BindingSourceType()
        {
            if (!HookedList.Contains("get_BindingSourceType"))
            {
                HookedList.Add("get_BindingSourceType");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_BindingSourceType", true),
                    get_BindingSourceType);
            }
        }

        internal static event Delegates.get_BindingSourceType_BeforeArgs _beforeget_BindingSourceType;
        internal static event Delegates.get_BindingSourceType_AfterArgs _afterget_BindingSourceType;

        private static InControl.BindingSourceType get_BindingSourceType(
            Func<InControl.MouseBindingSource, InControl.BindingSourceType> orig, InControl.MouseBindingSource self)
        {
            Delegates.Params_get_BindingSourceType @params = new()
            {
                self = self
            };
            if (_beforeget_BindingSourceType != null)
            {
                foreach (Delegates.get_BindingSourceType_BeforeArgs toInvoke in _beforeget_BindingSourceType
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_BindingSourceType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BindingSourceType != null)
            {
                foreach (Delegates.get_BindingSourceType_AfterArgs toInvoke in _afterget_BindingSourceType
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_BindingSourceType.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSave()
        {
            if (!HookedList.Contains("Save"))
            {
                HookedList.Add("Save");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Save", true), Save);
            }
        }

        internal static event Delegates.Save_BeforeArgs _beforeSave;
        internal static event Delegates.Save_AfterArgs _afterSave;

        private static void Save(Action<InControl.MouseBindingSource, System.IO.BinaryWriter> orig,
            InControl.MouseBindingSource self, System.IO.BinaryWriter writer)
        {
            Delegates.Params_Save @params = new()
            {
                self = self, writer = writer
            };
            if (_beforeSave != null)
            {
                foreach (Delegates.Save_BeforeArgs toInvoke in _beforeSave.GetInvocationList())
                {
                    try
                    {
                        _beforeSave?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            writer = @params.writer;
            orig(self, writer);
            if (_afterSave != null)
            {
                foreach (Delegates.Save_AfterArgs toInvoke in _afterSave.GetInvocationList())
                {
                    try
                    {
                        _afterSave.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLoad()
        {
            if (!HookedList.Contains("Load"))
            {
                HookedList.Add("Load");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Load", true), Load);
            }
        }

        internal static event Delegates.Load_BeforeArgs _beforeLoad;
        internal static event Delegates.Load_AfterArgs _afterLoad;

        private static void Load(Action<InControl.MouseBindingSource, System.IO.BinaryReader, ushort> orig,
            InControl.MouseBindingSource self, System.IO.BinaryReader reader, ushort dataFormatVersion)
        {
            Delegates.Params_Load @params = new()
            {
                self = self, reader = reader, dataFormatVersion = dataFormatVersion
            };
            if (_beforeLoad != null)
            {
                foreach (Delegates.Load_BeforeArgs toInvoke in _beforeLoad.GetInvocationList())
                {
                    try
                    {
                        _beforeLoad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            reader = @params.reader;
            dataFormatVersion = @params.dataFormatVersion;
            orig(self, reader, dataFormatVersion);
            if (_afterLoad != null)
            {
                foreach (Delegates.Load_AfterArgs toInvoke in _afterLoad.GetInvocationList())
                {
                    try
                    {
                        _afterLoad.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_Control
        {
            public InControl.MouseBindingSource self;
        }

        public delegate void get_Control_BeforeArgs(Params_get_Control args);

        public delegate InControl.Mouse get_Control_AfterArgs(Params_get_Control args, InControl.Mouse ret);

        public delegate InControl.Mouse get_Control_WithArgs(Func<InControl.MouseBindingSource, InControl.Mouse> orig,
            InControl.MouseBindingSource self);

        public sealed class Params_set_Control
        {
            public InControl.MouseBindingSource self;
            public InControl.Mouse value;
        }

        public delegate void set_Control_BeforeArgs(Params_set_Control args);

        public delegate void set_Control_AfterArgs(Params_set_Control args);

        public delegate void set_Control_WithArgs(Action<InControl.MouseBindingSource, InControl.Mouse> orig,
            InControl.MouseBindingSource self, InControl.Mouse value);

        public sealed class Params_ButtonIsPressed
        {
            public InControl.Mouse control;
        }

        public delegate void ButtonIsPressed_BeforeArgs(Params_ButtonIsPressed args);

        public delegate bool ButtonIsPressed_AfterArgs(Params_ButtonIsPressed args, bool ret);

        public delegate bool ButtonIsPressed_WithArgs(Func<InControl.Mouse, bool> orig, InControl.Mouse control);

        public sealed class Params_NegativeScrollWheelIsActive
        {
            public float threshold;
        }

        public delegate void NegativeScrollWheelIsActive_BeforeArgs(Params_NegativeScrollWheelIsActive args);

        public delegate bool NegativeScrollWheelIsActive_AfterArgs(Params_NegativeScrollWheelIsActive args, bool ret);

        public delegate bool NegativeScrollWheelIsActive_WithArgs(Func<float, bool> orig, float threshold);

        public sealed class Params_PositiveScrollWheelIsActive
        {
            public float threshold;
        }

        public delegate void PositiveScrollWheelIsActive_BeforeArgs(Params_PositiveScrollWheelIsActive args);

        public delegate bool PositiveScrollWheelIsActive_AfterArgs(Params_PositiveScrollWheelIsActive args, bool ret);

        public delegate bool PositiveScrollWheelIsActive_WithArgs(Func<float, bool> orig, float threshold);

        public sealed class Params_GetValue_Mouse
        {
            public InControl.Mouse mouseControl;
        }

        public delegate void GetValue_Mouse_BeforeArgs(Params_GetValue_Mouse args);

        public delegate float GetValue_Mouse_AfterArgs(Params_GetValue_Mouse args, float ret);

        public delegate float GetValue_Mouse_WithArgs(Func<InControl.Mouse, float> orig, InControl.Mouse mouseControl);

        public sealed class Params_GetValue_InputDevice
        {
            public InControl.MouseBindingSource self;
            public InControl.InputDevice inputDevice;
        }

        public delegate void GetValue_InputDevice_BeforeArgs(Params_GetValue_InputDevice args);

        public delegate float GetValue_InputDevice_AfterArgs(Params_GetValue_InputDevice args, float ret);

        public delegate float GetValue_InputDevice_WithArgs(
            Func<InControl.MouseBindingSource, InControl.InputDevice, float> orig, InControl.MouseBindingSource self,
            InControl.InputDevice inputDevice);

        public sealed class Params_GetState
        {
            public InControl.MouseBindingSource self;
            public InControl.InputDevice inputDevice;
        }

        public delegate void GetState_BeforeArgs(Params_GetState args);

        public delegate bool GetState_AfterArgs(Params_GetState args, bool ret);

        public delegate bool GetState_WithArgs(Func<InControl.MouseBindingSource, InControl.InputDevice, bool> orig,
            InControl.MouseBindingSource self, InControl.InputDevice inputDevice);

        public sealed class Params_get_Name
        {
            public InControl.MouseBindingSource self;
        }

        public delegate void get_Name_BeforeArgs(Params_get_Name args);

        public delegate string get_Name_AfterArgs(Params_get_Name args, string ret);

        public delegate string get_Name_WithArgs(Func<InControl.MouseBindingSource, string> orig,
            InControl.MouseBindingSource self);

        public sealed class Params_get_DeviceName
        {
            public InControl.MouseBindingSource self;
        }

        public delegate void get_DeviceName_BeforeArgs(Params_get_DeviceName args);

        public delegate string get_DeviceName_AfterArgs(Params_get_DeviceName args, string ret);

        public delegate string get_DeviceName_WithArgs(Func<InControl.MouseBindingSource, string> orig,
            InControl.MouseBindingSource self);

        public sealed class Params_get_DeviceClass
        {
            public InControl.MouseBindingSource self;
        }

        public delegate void get_DeviceClass_BeforeArgs(Params_get_DeviceClass args);

        public delegate InControl.InputDeviceClass get_DeviceClass_AfterArgs(Params_get_DeviceClass args,
            InControl.InputDeviceClass ret);

        public delegate InControl.InputDeviceClass get_DeviceClass_WithArgs(
            Func<InControl.MouseBindingSource, InControl.InputDeviceClass> orig, InControl.MouseBindingSource self);

        public sealed class Params_get_DeviceStyle
        {
            public InControl.MouseBindingSource self;
        }

        public delegate void get_DeviceStyle_BeforeArgs(Params_get_DeviceStyle args);

        public delegate InControl.InputDeviceStyle get_DeviceStyle_AfterArgs(Params_get_DeviceStyle args,
            InControl.InputDeviceStyle ret);

        public delegate InControl.InputDeviceStyle get_DeviceStyle_WithArgs(
            Func<InControl.MouseBindingSource, InControl.InputDeviceStyle> orig, InControl.MouseBindingSource self);

        public sealed class Params_Equals_BindingSource
        {
            public InControl.MouseBindingSource self;
            public InControl.BindingSource other;
        }

        public delegate void Equals_BindingSource_BeforeArgs(Params_Equals_BindingSource args);

        public delegate bool Equals_BindingSource_AfterArgs(Params_Equals_BindingSource args, bool ret);

        public delegate bool Equals_BindingSource_WithArgs(
            Func<InControl.MouseBindingSource, InControl.BindingSource, bool> orig, InControl.MouseBindingSource self,
            InControl.BindingSource other);

        public sealed class Params_Equals_Object
        {
            public InControl.MouseBindingSource self;
            public System.Object other;
        }

        public delegate void Equals_Object_BeforeArgs(Params_Equals_Object args);

        public delegate bool Equals_Object_AfterArgs(Params_Equals_Object args, bool ret);

        public delegate bool Equals_Object_WithArgs(Func<InControl.MouseBindingSource, System.Object, bool> orig,
            InControl.MouseBindingSource self, System.Object other);

        public sealed class Params_get_BindingSourceType
        {
            public InControl.MouseBindingSource self;
        }

        public delegate void get_BindingSourceType_BeforeArgs(Params_get_BindingSourceType args);

        public delegate InControl.BindingSourceType get_BindingSourceType_AfterArgs(Params_get_BindingSourceType args,
            InControl.BindingSourceType ret);

        public delegate InControl.BindingSourceType get_BindingSourceType_WithArgs(
            Func<InControl.MouseBindingSource, InControl.BindingSourceType> orig, InControl.MouseBindingSource self);

        public sealed class Params_Save
        {
            public InControl.MouseBindingSource self;
            public System.IO.BinaryWriter writer;
        }

        public delegate void Save_BeforeArgs(Params_Save args);

        public delegate void Save_AfterArgs(Params_Save args);

        public delegate void Save_WithArgs(Action<InControl.MouseBindingSource, System.IO.BinaryWriter> orig,
            InControl.MouseBindingSource self, System.IO.BinaryWriter writer);

        public sealed class Params_Load
        {
            public InControl.MouseBindingSource self;
            public System.IO.BinaryReader reader;
            public ushort dataFormatVersion;
        }

        public delegate void Load_BeforeArgs(Params_Load args);

        public delegate void Load_AfterArgs(Params_Load args);

        public delegate void Load_WithArgs(Action<InControl.MouseBindingSource, System.IO.BinaryReader, ushort> orig,
            InControl.MouseBindingSource self, System.IO.BinaryReader reader, ushort dataFormatVersion);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Control_BeforeArgs get_Control
        {
            add
            {
                HookHandler._beforeget_Control += value;
                HookHandler.Hookget_Control();
            }
            remove => HookHandler._beforeget_Control -= value;
        }

        public static event Delegates.set_Control_BeforeArgs set_Control
        {
            add
            {
                HookHandler._beforeset_Control += value;
                HookHandler.Hookset_Control();
            }
            remove => HookHandler._beforeset_Control -= value;
        }

        public static event Delegates.ButtonIsPressed_BeforeArgs ButtonIsPressed
        {
            add
            {
                HookHandler._beforeButtonIsPressed += value;
                HookHandler.HookButtonIsPressed();
            }
            remove => HookHandler._beforeButtonIsPressed -= value;
        }

        public static event Delegates.NegativeScrollWheelIsActive_BeforeArgs NegativeScrollWheelIsActive
        {
            add
            {
                HookHandler._beforeNegativeScrollWheelIsActive += value;
                HookHandler.HookNegativeScrollWheelIsActive();
            }
            remove => HookHandler._beforeNegativeScrollWheelIsActive -= value;
        }

        public static event Delegates.PositiveScrollWheelIsActive_BeforeArgs PositiveScrollWheelIsActive
        {
            add
            {
                HookHandler._beforePositiveScrollWheelIsActive += value;
                HookHandler.HookPositiveScrollWheelIsActive();
            }
            remove => HookHandler._beforePositiveScrollWheelIsActive -= value;
        }

        public static event Delegates.GetValue_Mouse_BeforeArgs GetValue_Mouse
        {
            add
            {
                HookHandler._beforeGetValue_Mouse += value;
                HookHandler.HookGetValue_Mouse();
            }
            remove => HookHandler._beforeGetValue_Mouse -= value;
        }

        public static event Delegates.GetValue_InputDevice_BeforeArgs GetValue_InputDevice
        {
            add
            {
                HookHandler._beforeGetValue_InputDevice += value;
                HookHandler.HookGetValue_InputDevice();
            }
            remove => HookHandler._beforeGetValue_InputDevice -= value;
        }

        public static event Delegates.GetState_BeforeArgs GetState
        {
            add
            {
                HookHandler._beforeGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._beforeGetState -= value;
        }

        public static event Delegates.get_Name_BeforeArgs get_Name
        {
            add
            {
                HookHandler._beforeget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._beforeget_Name -= value;
        }

        public static event Delegates.get_DeviceName_BeforeArgs get_DeviceName
        {
            add
            {
                HookHandler._beforeget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._beforeget_DeviceName -= value;
        }

        public static event Delegates.get_DeviceClass_BeforeArgs get_DeviceClass
        {
            add
            {
                HookHandler._beforeget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._beforeget_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_BeforeArgs get_DeviceStyle
        {
            add
            {
                HookHandler._beforeget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._beforeget_DeviceStyle -= value;
        }

        public static event Delegates.Equals_BindingSource_BeforeArgs Equals_BindingSource
        {
            add
            {
                HookHandler._beforeEquals_BindingSource += value;
                HookHandler.HookEquals_BindingSource();
            }
            remove => HookHandler._beforeEquals_BindingSource -= value;
        }

        public static event Delegates.Equals_Object_BeforeArgs Equals_Object
        {
            add
            {
                HookHandler._beforeEquals_Object += value;
                HookHandler.HookEquals_Object();
            }
            remove => HookHandler._beforeEquals_Object -= value;
        }

        public static event Delegates.get_BindingSourceType_BeforeArgs get_BindingSourceType
        {
            add
            {
                HookHandler._beforeget_BindingSourceType += value;
                HookHandler.Hookget_BindingSourceType();
            }
            remove => HookHandler._beforeget_BindingSourceType -= value;
        }

        public static event Delegates.Save_BeforeArgs Save
        {
            add
            {
                HookHandler._beforeSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._beforeSave -= value;
        }

        public static event Delegates.Load_BeforeArgs Load
        {
            add
            {
                HookHandler._beforeLoad += value;
                HookHandler.HookLoad();
            }
            remove => HookHandler._beforeLoad -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Control_AfterArgs get_Control
        {
            add
            {
                HookHandler._afterget_Control += value;
                HookHandler.Hookget_Control();
            }
            remove => HookHandler._afterget_Control -= value;
        }

        public static event Delegates.set_Control_AfterArgs set_Control
        {
            add
            {
                HookHandler._afterset_Control += value;
                HookHandler.Hookset_Control();
            }
            remove => HookHandler._afterset_Control -= value;
        }

        public static event Delegates.ButtonIsPressed_AfterArgs ButtonIsPressed
        {
            add
            {
                HookHandler._afterButtonIsPressed += value;
                HookHandler.HookButtonIsPressed();
            }
            remove => HookHandler._afterButtonIsPressed -= value;
        }

        public static event Delegates.NegativeScrollWheelIsActive_AfterArgs NegativeScrollWheelIsActive
        {
            add
            {
                HookHandler._afterNegativeScrollWheelIsActive += value;
                HookHandler.HookNegativeScrollWheelIsActive();
            }
            remove => HookHandler._afterNegativeScrollWheelIsActive -= value;
        }

        public static event Delegates.PositiveScrollWheelIsActive_AfterArgs PositiveScrollWheelIsActive
        {
            add
            {
                HookHandler._afterPositiveScrollWheelIsActive += value;
                HookHandler.HookPositiveScrollWheelIsActive();
            }
            remove => HookHandler._afterPositiveScrollWheelIsActive -= value;
        }

        public static event Delegates.GetValue_Mouse_AfterArgs GetValue_Mouse
        {
            add
            {
                HookHandler._afterGetValue_Mouse += value;
                HookHandler.HookGetValue_Mouse();
            }
            remove => HookHandler._afterGetValue_Mouse -= value;
        }

        public static event Delegates.GetValue_InputDevice_AfterArgs GetValue_InputDevice
        {
            add
            {
                HookHandler._afterGetValue_InputDevice += value;
                HookHandler.HookGetValue_InputDevice();
            }
            remove => HookHandler._afterGetValue_InputDevice -= value;
        }

        public static event Delegates.GetState_AfterArgs GetState
        {
            add
            {
                HookHandler._afterGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._afterGetState -= value;
        }

        public static event Delegates.get_Name_AfterArgs get_Name
        {
            add
            {
                HookHandler._afterget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._afterget_Name -= value;
        }

        public static event Delegates.get_DeviceName_AfterArgs get_DeviceName
        {
            add
            {
                HookHandler._afterget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._afterget_DeviceName -= value;
        }

        public static event Delegates.get_DeviceClass_AfterArgs get_DeviceClass
        {
            add
            {
                HookHandler._afterget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._afterget_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_AfterArgs get_DeviceStyle
        {
            add
            {
                HookHandler._afterget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._afterget_DeviceStyle -= value;
        }

        public static event Delegates.Equals_BindingSource_AfterArgs Equals_BindingSource
        {
            add
            {
                HookHandler._afterEquals_BindingSource += value;
                HookHandler.HookEquals_BindingSource();
            }
            remove => HookHandler._afterEquals_BindingSource -= value;
        }

        public static event Delegates.Equals_Object_AfterArgs Equals_Object
        {
            add
            {
                HookHandler._afterEquals_Object += value;
                HookHandler.HookEquals_Object();
            }
            remove => HookHandler._afterEquals_Object -= value;
        }

        public static event Delegates.get_BindingSourceType_AfterArgs get_BindingSourceType
        {
            add
            {
                HookHandler._afterget_BindingSourceType += value;
                HookHandler.Hookget_BindingSourceType();
            }
            remove => HookHandler._afterget_BindingSourceType -= value;
        }

        public static event Delegates.Save_AfterArgs Save
        {
            add
            {
                HookHandler._afterSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._afterSave -= value;
        }

        public static event Delegates.Load_AfterArgs Load
        {
            add
            {
                HookHandler._afterLoad += value;
                HookHandler.HookLoad();
            }
            remove => HookHandler._afterLoad -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Control_WithArgs get_Control
        {
            add => HookEndpointManager.Add<Delegates.get_Control_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_Control", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Control_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_Control", true), value);
        }

        public static event Delegates.set_Control_WithArgs set_Control
        {
            add => HookEndpointManager.Add<Delegates.set_Control_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "set_Control", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Control_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "set_Control", true), value);
        }

        public static event Delegates.ButtonIsPressed_WithArgs ButtonIsPressed
        {
            add => HookEndpointManager.Add<Delegates.ButtonIsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "ButtonIsPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.ButtonIsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "ButtonIsPressed", false), value);
        }

        public static event Delegates.NegativeScrollWheelIsActive_WithArgs NegativeScrollWheelIsActive
        {
            add => HookEndpointManager.Add<Delegates.NegativeScrollWheelIsActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "NegativeScrollWheelIsActive",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.NegativeScrollWheelIsActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "NegativeScrollWheelIsActive",
                    false), value);
        }

        public static event Delegates.PositiveScrollWheelIsActive_WithArgs PositiveScrollWheelIsActive
        {
            add => HookEndpointManager.Add<Delegates.PositiveScrollWheelIsActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "PositiveScrollWheelIsActive",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.PositiveScrollWheelIsActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "PositiveScrollWheelIsActive",
                    false), value);
        }

        public static event Delegates.GetValue_Mouse_WithArgs GetValue_Mouse
        {
            add => HookEndpointManager.Add<Delegates.GetValue_Mouse_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetValue", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetValue_Mouse_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetValue", false), value);
        }

        public static event Delegates.GetValue_InputDevice_WithArgs GetValue_InputDevice
        {
            add => HookEndpointManager.Add<Delegates.GetValue_InputDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetValue_InputDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetValue", true), value);
        }

        public static event Delegates.GetState_WithArgs GetState
        {
            add => HookEndpointManager.Add<Delegates.GetState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetState", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "GetState", true), value);
        }

        public static event Delegates.get_Name_WithArgs get_Name
        {
            add => HookEndpointManager.Add<Delegates.get_Name_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_Name", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Name_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_Name", true), value);
        }

        public static event Delegates.get_DeviceName_WithArgs get_DeviceName
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceName", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceName", true), value);
        }

        public static event Delegates.get_DeviceClass_WithArgs get_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceClass_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceClass", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceClass_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceClass", true), value);
        }

        public static event Delegates.get_DeviceStyle_WithArgs get_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceStyle", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceStyle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_DeviceStyle", true), value);
        }

        public static event Delegates.Equals_BindingSource_WithArgs Equals_BindingSource
        {
            add => HookEndpointManager.Add<Delegates.Equals_BindingSource_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Equals", true), value);
            remove => HookEndpointManager.Remove<Delegates.Equals_BindingSource_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Equals", true), value);
        }

        public static event Delegates.Equals_Object_WithArgs Equals_Object
        {
            add => HookEndpointManager.Add<Delegates.Equals_Object_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Equals", true), value);
            remove => HookEndpointManager.Remove<Delegates.Equals_Object_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Equals", true), value);
        }

        public static event Delegates.get_BindingSourceType_WithArgs get_BindingSourceType
        {
            add => HookEndpointManager.Add<Delegates.get_BindingSourceType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_BindingSourceType", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_BindingSourceType_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "get_BindingSourceType", true),
                value);
        }

        public static event Delegates.Save_WithArgs Save
        {
            add => HookEndpointManager.Add<Delegates.Save_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Save", true), value);
            remove => HookEndpointManager.Remove<Delegates.Save_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Save", true), value);
        }

        public static event Delegates.Load_WithArgs Load
        {
            add => HookEndpointManager.Add<Delegates.Load_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Load", true), value);
            remove => HookEndpointManager.Remove<Delegates.Load_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.MouseBindingSource), "Load", true), value);
        }
    }
}