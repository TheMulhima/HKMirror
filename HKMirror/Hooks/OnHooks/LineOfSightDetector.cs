using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for LineOfSightDetector class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLineOfSightDetector
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_CanSeeHero()
        {
            if (!HookedList.Contains("get_CanSeeHero"))
            {
                HookedList.Add("get_CanSeeHero");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LineOfSightDetector), "get_CanSeeHero", true),
                    get_CanSeeHero);
            }
        }

        internal static event Delegates.get_CanSeeHero_BeforeArgs _beforeget_CanSeeHero;
        internal static event Delegates.get_CanSeeHero_AfterArgs _afterget_CanSeeHero;

        private static bool get_CanSeeHero(Func<LineOfSightDetector, bool> orig, LineOfSightDetector self)
        {
            Delegates.Params_get_CanSeeHero @params = new()
            {
                self = self
            };
            if (_beforeget_CanSeeHero != null)
            {
                foreach (Delegates.get_CanSeeHero_BeforeArgs toInvoke in _beforeget_CanSeeHero.GetInvocationList())
                {
                    try
                    {
                        _beforeget_CanSeeHero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CanSeeHero != null)
            {
                foreach (Delegates.get_CanSeeHero_AfterArgs toInvoke in _afterget_CanSeeHero.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_CanSeeHero.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.LineOfSightDetector.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.LineOfSightDetector.orig_Awake orig, LineOfSightDetector self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.LineOfSightDetector.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.LineOfSightDetector.orig_Update orig, LineOfSightDetector self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_CanSeeHero
        {
            public LineOfSightDetector self;
        }

        public delegate void get_CanSeeHero_BeforeArgs(Params_get_CanSeeHero args);

        public delegate bool get_CanSeeHero_AfterArgs(Params_get_CanSeeHero args, bool ret);

        public delegate bool get_CanSeeHero_WithArgs(Func<LineOfSightDetector, bool> orig, LineOfSightDetector self);

        public sealed class Params_Awake
        {
            public LineOfSightDetector self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<LineOfSightDetector> orig, LineOfSightDetector self);

        public sealed class Params_Update
        {
            public LineOfSightDetector self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<LineOfSightDetector> orig, LineOfSightDetector self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_CanSeeHero_BeforeArgs get_CanSeeHero
        {
            add
            {
                HookHandler._beforeget_CanSeeHero += value;
                HookHandler.Hookget_CanSeeHero();
            }
            remove => HookHandler._beforeget_CanSeeHero -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_CanSeeHero_AfterArgs get_CanSeeHero
        {
            add
            {
                HookHandler._afterget_CanSeeHero += value;
                HookHandler.Hookget_CanSeeHero();
            }
            remove => HookHandler._afterget_CanSeeHero -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_CanSeeHero_WithArgs get_CanSeeHero
        {
            add => HookEndpointManager.Add<Delegates.get_CanSeeHero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LineOfSightDetector), "get_CanSeeHero", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_CanSeeHero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LineOfSightDetector), "get_CanSeeHero", true), value);
        }

        public static event On.LineOfSightDetector.hook_Awake Awake
        {
            add => On.LineOfSightDetector.Awake += value;
            remove => On.LineOfSightDetector.Awake -= value;
        }

        public static event On.LineOfSightDetector.hook_Update Update
        {
            add => On.LineOfSightDetector.Update += value;
            remove => On.LineOfSightDetector.Update -= value;
        }
    }
}