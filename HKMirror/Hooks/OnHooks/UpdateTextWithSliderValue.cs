using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for UpdateTextWithSliderValue class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUpdateTextWithSliderValue
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.UpdateTextWithSliderValue.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.UpdateTextWithSliderValue.orig_Start orig,UpdateTextWithSliderValue self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateValue()
{
if (!HookedList.Contains("UpdateValue"))
{
HookedList.Add("UpdateValue");
On.UpdateTextWithSliderValue.UpdateValue += UpdateValue;

}
}
internal static event Delegates.UpdateValue_BeforeArgs _beforeUpdateValue;
internal static event Delegates.UpdateValue_AfterArgs _afterUpdateValue;
private static void UpdateValue(On.UpdateTextWithSliderValue.orig_UpdateValue orig,UpdateTextWithSliderValue self)
{
Delegates.Params_UpdateValue @params = new() 
{
self = self
};
if (_beforeUpdateValue != null)
{
foreach (Delegates.UpdateValue_BeforeArgs toInvoke in _beforeUpdateValue.GetInvocationList())
{
try
{
_beforeUpdateValue?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateValue != null)
{
foreach (Delegates.UpdateValue_AfterArgs toInvoke in _afterUpdateValue.GetInvocationList())
{
try
{
_afterUpdateValue.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public UpdateTextWithSliderValue self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<UpdateTextWithSliderValue> orig, UpdateTextWithSliderValue self);
public sealed class Params_UpdateValue
{
public UpdateTextWithSliderValue self;
}
public delegate void UpdateValue_BeforeArgs(Params_UpdateValue args);
public delegate void UpdateValue_AfterArgs(Params_UpdateValue args);
public delegate void UpdateValue_WithArgs (Action<UpdateTextWithSliderValue> orig, UpdateTextWithSliderValue self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.UpdateValue_BeforeArgs UpdateValue
{
add
{

HookHandler._beforeUpdateValue += value;
HookHandler.HookUpdateValue();
}
remove => HookHandler._beforeUpdateValue -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.UpdateValue_AfterArgs UpdateValue
{
add
{

HookHandler._afterUpdateValue += value;
HookHandler.HookUpdateValue();
}
remove => HookHandler._afterUpdateValue -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.UpdateTextWithSliderValue.hook_Start Start
{
add => On.UpdateTextWithSliderValue.Start += value;
remove => On.UpdateTextWithSliderValue.Start -= value;
}
public static event On.UpdateTextWithSliderValue.hook_UpdateValue UpdateValue
{
add => On.UpdateTextWithSliderValue.UpdateValue += value;
remove => On.UpdateTextWithSliderValue.UpdateValue -= value;
}
}

}
