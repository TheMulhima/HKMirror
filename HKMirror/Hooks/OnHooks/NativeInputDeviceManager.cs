using System.Collections.ObjectModel;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for NativeInputDeviceManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnNativeInputDeviceManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookDestroy()
        {
            if (!HookedList.Contains("Destroy"))
            {
                HookedList.Add("Destroy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Destroy"), Destroy);
            }
        }

        internal static event Delegates.Destroy_BeforeArgs _beforeDestroy;
        internal static event Delegates.Destroy_AfterArgs _afterDestroy;

        private static void Destroy(Action<NativeInputDeviceManager> orig, NativeInputDeviceManager self)
        {
            Delegates.Params_Destroy @params = new()
            {
                self = self
            };
            if (_beforeDestroy != null)
                foreach (Delegates.Destroy_BeforeArgs toInvoke in _beforeDestroy.GetInvocationList())
                    try
                    {
                        _beforeDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDestroy != null)
                foreach (Delegates.Destroy_AfterArgs toInvoke in _afterDestroy.GetInvocationList())
                    try
                    {
                        _afterDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action<NativeInputDeviceManager, ulong, float> orig, NativeInputDeviceManager self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_Update @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDetectDevice()
        {
            if (!HookedList.Contains("DetectDevice"))
            {
                HookedList.Add("DetectDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "DetectDevice"),
                    DetectDevice);
            }
        }

        internal static event Delegates.DetectDevice_BeforeArgs _beforeDetectDevice;
        internal static event Delegates.DetectDevice_AfterArgs _afterDetectDevice;

        private static void DetectDevice(Action<NativeInputDeviceManager, uint, InputDeviceInfo> orig,
            NativeInputDeviceManager self, uint deviceHandle, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_DetectDevice @params = new()
            {
                self = self, deviceHandle = deviceHandle, deviceInfo = deviceInfo
            };
            if (_beforeDetectDevice != null)
                foreach (Delegates.DetectDevice_BeforeArgs toInvoke in _beforeDetectDevice.GetInvocationList())
                    try
                    {
                        _beforeDetectDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            deviceHandle = @params.deviceHandle;
            deviceInfo = @params.deviceInfo;
            orig(self, deviceHandle, deviceInfo);
            if (_afterDetectDevice != null)
                foreach (Delegates.DetectDevice_AfterArgs toInvoke in _afterDetectDevice.GetInvocationList())
                    try
                    {
                        _afterDetectDevice.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAttachDevice()
        {
            if (!HookedList.Contains("AttachDevice"))
            {
                HookedList.Add("AttachDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AttachDevice"),
                    AttachDevice);
            }
        }

        internal static event Delegates.AttachDevice_BeforeArgs _beforeAttachDevice;
        internal static event Delegates.AttachDevice_AfterArgs _afterAttachDevice;

        private static void AttachDevice(Action<NativeInputDeviceManager, NativeInputDevice> orig,
            NativeInputDeviceManager self, NativeInputDevice device)
        {
            Delegates.Params_AttachDevice @params = new()
            {
                self = self, device = device
            };
            if (_beforeAttachDevice != null)
                foreach (Delegates.AttachDevice_BeforeArgs toInvoke in _beforeAttachDevice.GetInvocationList())
                    try
                    {
                        _beforeAttachDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            device = @params.device;
            orig(self, device);
            if (_afterAttachDevice != null)
                foreach (Delegates.AttachDevice_AfterArgs toInvoke in _afterAttachDevice.GetInvocationList())
                    try
                    {
                        _afterAttachDevice.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDetachDevice()
        {
            if (!HookedList.Contains("DetachDevice"))
            {
                HookedList.Add("DetachDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "DetachDevice"),
                    DetachDevice);
            }
        }

        internal static event Delegates.DetachDevice_BeforeArgs _beforeDetachDevice;
        internal static event Delegates.DetachDevice_AfterArgs _afterDetachDevice;

        private static void DetachDevice(Action<NativeInputDeviceManager, NativeInputDevice> orig,
            NativeInputDeviceManager self, NativeInputDevice device)
        {
            Delegates.Params_DetachDevice @params = new()
            {
                self = self, device = device
            };
            if (_beforeDetachDevice != null)
                foreach (Delegates.DetachDevice_BeforeArgs toInvoke in _beforeDetachDevice.GetInvocationList())
                    try
                    {
                        _beforeDetachDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            device = @params.device;
            orig(self, device);
            if (_afterDetachDevice != null)
                foreach (Delegates.DetachDevice_AfterArgs toInvoke in _afterDetachDevice.GetInvocationList())
                    try
                    {
                        _afterDetachDevice.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFindAttachedDevice()
        {
            if (!HookedList.Contains("FindAttachedDevice"))
            {
                HookedList.Add("FindAttachedDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "FindAttachedDevice"),
                    FindAttachedDevice);
            }
        }

        internal static event Delegates.FindAttachedDevice_BeforeArgs _beforeFindAttachedDevice;
        internal static event Delegates.FindAttachedDevice_AfterArgs _afterFindAttachedDevice;

        private static NativeInputDevice FindAttachedDevice(
            Func<NativeInputDeviceManager, uint, NativeInputDevice> orig, NativeInputDeviceManager self,
            uint deviceHandle)
        {
            Delegates.Params_FindAttachedDevice @params = new()
            {
                self = self, deviceHandle = deviceHandle
            };
            if (_beforeFindAttachedDevice != null)
                foreach (Delegates.FindAttachedDevice_BeforeArgs toInvoke in
                         _beforeFindAttachedDevice.GetInvocationList())
                    try
                    {
                        _beforeFindAttachedDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            deviceHandle = @params.deviceHandle;
            var retVal = orig(self, deviceHandle);
            if (_afterFindAttachedDevice != null)
                foreach (Delegates.FindAttachedDevice_AfterArgs toInvoke in
                         _afterFindAttachedDevice.GetInvocationList())
                    try
                    {
                        retVal = _afterFindAttachedDevice.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindDetachedDevice()
        {
            if (!HookedList.Contains("FindDetachedDevice"))
            {
                HookedList.Add("FindDetachedDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "FindDetachedDevice"),
                    FindDetachedDevice);
            }
        }

        internal static event Delegates.FindDetachedDevice_BeforeArgs _beforeFindDetachedDevice;
        internal static event Delegates.FindDetachedDevice_AfterArgs _afterFindDetachedDevice;

        private static NativeInputDevice FindDetachedDevice(
            Func<NativeInputDeviceManager, InputDeviceInfo, NativeInputDevice> orig, NativeInputDeviceManager self,
            InputDeviceInfo deviceInfo)
        {
            Delegates.Params_FindDetachedDevice @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeFindDetachedDevice != null)
                foreach (Delegates.FindDetachedDevice_BeforeArgs toInvoke in
                         _beforeFindDetachedDevice.GetInvocationList())
                    try
                    {
                        _beforeFindDetachedDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterFindDetachedDevice != null)
                foreach (Delegates.FindDetachedDevice_AfterArgs toInvoke in
                         _afterFindDetachedDevice.GetInvocationList())
                    try
                    {
                        retVal = _afterFindDetachedDevice.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSystemFindDetachedDevice()
        {
            if (!HookedList.Contains("SystemFindDetachedDevice"))
            {
                HookedList.Add("SystemFindDetachedDevice");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "SystemFindDetachedDevice", false),
                    SystemFindDetachedDevice);
            }
        }

        internal static event Delegates.SystemFindDetachedDevice_BeforeArgs _beforeSystemFindDetachedDevice;
        internal static event Delegates.SystemFindDetachedDevice_AfterArgs _afterSystemFindDetachedDevice;

        private static NativeInputDevice SystemFindDetachedDevice(
            Func<InputDeviceInfo, ReadOnlyCollection<NativeInputDevice>, NativeInputDevice> orig,
            InputDeviceInfo deviceInfo, ReadOnlyCollection<NativeInputDevice> detachedDevices)
        {
            Delegates.Params_SystemFindDetachedDevice @params = new()
            {
                deviceInfo = deviceInfo, detachedDevices = detachedDevices
            };
            if (_beforeSystemFindDetachedDevice != null)
                foreach (Delegates.SystemFindDetachedDevice_BeforeArgs toInvoke in _beforeSystemFindDetachedDevice
                             .GetInvocationList())
                    try
                    {
                        _beforeSystemFindDetachedDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            deviceInfo = @params.deviceInfo;
            detachedDevices = @params.detachedDevices;
            var retVal = orig(deviceInfo, detachedDevices);
            if (_afterSystemFindDetachedDevice != null)
                foreach (Delegates.SystemFindDetachedDevice_AfterArgs toInvoke in _afterSystemFindDetachedDevice
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterSystemFindDetachedDevice.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddSystemDeviceProfile()
        {
            if (!HookedList.Contains("AddSystemDeviceProfile"))
            {
                HookedList.Add("AddSystemDeviceProfile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AddSystemDeviceProfile"),
                    AddSystemDeviceProfile);
            }
        }

        internal static event Delegates.AddSystemDeviceProfile_BeforeArgs _beforeAddSystemDeviceProfile;
        internal static event Delegates.AddSystemDeviceProfile_AfterArgs _afterAddSystemDeviceProfile;

        private static void AddSystemDeviceProfile(Action<NativeInputDeviceManager, InputDeviceProfile> orig,
            NativeInputDeviceManager self, InputDeviceProfile deviceProfile)
        {
            Delegates.Params_AddSystemDeviceProfile @params = new()
            {
                self = self, deviceProfile = deviceProfile
            };
            if (_beforeAddSystemDeviceProfile != null)
                foreach (Delegates.AddSystemDeviceProfile_BeforeArgs toInvoke in _beforeAddSystemDeviceProfile
                             .GetInvocationList())
                    try
                    {
                        _beforeAddSystemDeviceProfile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            deviceProfile = @params.deviceProfile;
            orig(self, deviceProfile);
            if (_afterAddSystemDeviceProfile != null)
                foreach (Delegates.AddSystemDeviceProfile_AfterArgs toInvoke in _afterAddSystemDeviceProfile
                             .GetInvocationList())
                    try
                    {
                        _afterAddSystemDeviceProfile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddSystemDeviceProfiles()
        {
            if (!HookedList.Contains("AddSystemDeviceProfiles"))
            {
                HookedList.Add("AddSystemDeviceProfiles");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AddSystemDeviceProfiles"),
                    AddSystemDeviceProfiles);
            }
        }

        internal static event Delegates.AddSystemDeviceProfiles_BeforeArgs _beforeAddSystemDeviceProfiles;
        internal static event Delegates.AddSystemDeviceProfiles_AfterArgs _afterAddSystemDeviceProfiles;

        private static void AddSystemDeviceProfiles(Action<NativeInputDeviceManager> orig,
            NativeInputDeviceManager self)
        {
            Delegates.Params_AddSystemDeviceProfiles @params = new()
            {
                self = self
            };
            if (_beforeAddSystemDeviceProfiles != null)
                foreach (Delegates.AddSystemDeviceProfiles_BeforeArgs toInvoke in _beforeAddSystemDeviceProfiles
                             .GetInvocationList())
                    try
                    {
                        _beforeAddSystemDeviceProfiles?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddSystemDeviceProfiles != null)
                foreach (Delegates.AddSystemDeviceProfiles_AfterArgs toInvoke in _afterAddSystemDeviceProfiles
                             .GetInvocationList())
                    try
                    {
                        _afterAddSystemDeviceProfiles.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckPlatformSupport()
        {
            if (!HookedList.Contains("CheckPlatformSupport"))
            {
                HookedList.Add("CheckPlatformSupport");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "CheckPlatformSupport", false),
                    CheckPlatformSupport);
            }
        }

        internal static event Delegates.CheckPlatformSupport_BeforeArgs _beforeCheckPlatformSupport;
        internal static event Delegates.CheckPlatformSupport_AfterArgs _afterCheckPlatformSupport;

        private static bool CheckPlatformSupport(Func<ICollection<string>, bool> orig, ICollection<string> errors)
        {
            Delegates.Params_CheckPlatformSupport @params = new()
            {
                errors = errors
            };
            if (_beforeCheckPlatformSupport != null)
                foreach (Delegates.CheckPlatformSupport_BeforeArgs toInvoke in _beforeCheckPlatformSupport
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckPlatformSupport?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            errors = @params.errors;
            var retVal = orig(errors);
            if (_afterCheckPlatformSupport != null)
                foreach (Delegates.CheckPlatformSupport_AfterArgs toInvoke in _afterCheckPlatformSupport
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCheckPlatformSupport.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookEnable()
        {
            if (!HookedList.Contains("Enable"))
            {
                HookedList.Add("Enable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Enable", false), Enable);
            }
        }

        internal static event Delegates.Enable_BeforeArgs _beforeEnable;
        internal static event Delegates.Enable_AfterArgs _afterEnable;

        private static bool Enable(Func<bool> orig)
        {
            if (_beforeEnable != null)
                foreach (Delegates.Enable_BeforeArgs toInvoke in _beforeEnable.GetInvocationList())
                    try
                    {
                        _beforeEnable?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterEnable != null)
                foreach (Delegates.Enable_AfterArgs toInvoke in _afterEnable.GetInvocationList())
                    try
                    {
                        retVal = _afterEnable.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddSystemDeviceProfile_AfterArgs(Params_AddSystemDeviceProfile args);

        public delegate void AddSystemDeviceProfile_BeforeArgs(Params_AddSystemDeviceProfile args);

        public delegate void AddSystemDeviceProfile_WithArgs(Action<NativeInputDeviceManager, InputDeviceProfile> orig,
            NativeInputDeviceManager self, InputDeviceProfile deviceProfile);

        public delegate void AddSystemDeviceProfiles_AfterArgs(Params_AddSystemDeviceProfiles args);

        public delegate void AddSystemDeviceProfiles_BeforeArgs(Params_AddSystemDeviceProfiles args);

        public delegate void AddSystemDeviceProfiles_WithArgs(Action<NativeInputDeviceManager> orig,
            NativeInputDeviceManager self);

        public delegate void AttachDevice_AfterArgs(Params_AttachDevice args);

        public delegate void AttachDevice_BeforeArgs(Params_AttachDevice args);

        public delegate void AttachDevice_WithArgs(Action<NativeInputDeviceManager, NativeInputDevice> orig,
            NativeInputDeviceManager self, NativeInputDevice device);

        public delegate bool CheckPlatformSupport_AfterArgs(Params_CheckPlatformSupport args, bool ret);

        public delegate void CheckPlatformSupport_BeforeArgs(Params_CheckPlatformSupport args);

        public delegate bool CheckPlatformSupport_WithArgs(Func<ICollection<string>, bool> orig,
            ICollection<string> errors);

        public delegate void Destroy_AfterArgs(Params_Destroy args);

        public delegate void Destroy_BeforeArgs(Params_Destroy args);

        public delegate void Destroy_WithArgs(Action<NativeInputDeviceManager> orig, NativeInputDeviceManager self);

        public delegate void DetachDevice_AfterArgs(Params_DetachDevice args);

        public delegate void DetachDevice_BeforeArgs(Params_DetachDevice args);

        public delegate void DetachDevice_WithArgs(Action<NativeInputDeviceManager, NativeInputDevice> orig,
            NativeInputDeviceManager self, NativeInputDevice device);

        public delegate void DetectDevice_AfterArgs(Params_DetectDevice args);

        public delegate void DetectDevice_BeforeArgs(Params_DetectDevice args);

        public delegate void DetectDevice_WithArgs(Action<NativeInputDeviceManager, uint, InputDeviceInfo> orig,
            NativeInputDeviceManager self, uint deviceHandle, InputDeviceInfo deviceInfo);

        public delegate bool Enable_AfterArgs(bool ret);

        public delegate void Enable_BeforeArgs();

        public delegate bool Enable_WithArgs(Func<bool> orig);

        public delegate NativeInputDevice FindAttachedDevice_AfterArgs(Params_FindAttachedDevice args,
            NativeInputDevice ret);

        public delegate void FindAttachedDevice_BeforeArgs(Params_FindAttachedDevice args);

        public delegate NativeInputDevice FindAttachedDevice_WithArgs(
            Func<NativeInputDeviceManager, uint, NativeInputDevice> orig, NativeInputDeviceManager self,
            uint deviceHandle);

        public delegate NativeInputDevice FindDetachedDevice_AfterArgs(Params_FindDetachedDevice args,
            NativeInputDevice ret);

        public delegate void FindDetachedDevice_BeforeArgs(Params_FindDetachedDevice args);

        public delegate NativeInputDevice FindDetachedDevice_WithArgs(
            Func<NativeInputDeviceManager, InputDeviceInfo, NativeInputDevice> orig, NativeInputDeviceManager self,
            InputDeviceInfo deviceInfo);

        public delegate NativeInputDevice SystemFindDetachedDevice_AfterArgs(Params_SystemFindDetachedDevice args,
            NativeInputDevice ret);

        public delegate void SystemFindDetachedDevice_BeforeArgs(Params_SystemFindDetachedDevice args);

        public delegate NativeInputDevice SystemFindDetachedDevice_WithArgs(
            Func<InputDeviceInfo, ReadOnlyCollection<NativeInputDevice>, NativeInputDevice> orig,
            InputDeviceInfo deviceInfo, ReadOnlyCollection<NativeInputDevice> detachedDevices);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<NativeInputDeviceManager, ulong, float> orig,
            NativeInputDeviceManager self, ulong updateTick, float deltaTime);

        public sealed class Params_Destroy
        {
            public NativeInputDeviceManager self;
        }

        public sealed class Params_Update
        {
            public float deltaTime;
            public NativeInputDeviceManager self;
            public ulong updateTick;
        }

        public sealed class Params_DetectDevice
        {
            public uint deviceHandle;
            public InputDeviceInfo deviceInfo;
            public NativeInputDeviceManager self;
        }

        public sealed class Params_AttachDevice
        {
            public NativeInputDevice device;
            public NativeInputDeviceManager self;
        }

        public sealed class Params_DetachDevice
        {
            public NativeInputDevice device;
            public NativeInputDeviceManager self;
        }

        public sealed class Params_FindAttachedDevice
        {
            public uint deviceHandle;
            public NativeInputDeviceManager self;
        }

        public sealed class Params_FindDetachedDevice
        {
            public InputDeviceInfo deviceInfo;
            public NativeInputDeviceManager self;
        }

        public sealed class Params_SystemFindDetachedDevice
        {
            public ReadOnlyCollection<NativeInputDevice> detachedDevices;
            public InputDeviceInfo deviceInfo;
        }

        public sealed class Params_AddSystemDeviceProfile
        {
            public InputDeviceProfile deviceProfile;
            public NativeInputDeviceManager self;
        }

        public sealed class Params_AddSystemDeviceProfiles
        {
            public NativeInputDeviceManager self;
        }

        public sealed class Params_CheckPlatformSupport
        {
            public ICollection<string> errors;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Destroy_BeforeArgs Destroy
        {
            add
            {
                HookHandler._beforeDestroy += value;
                HookHandler.HookDestroy();
            }
            remove => HookHandler._beforeDestroy -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.DetectDevice_BeforeArgs DetectDevice
        {
            add
            {
                HookHandler._beforeDetectDevice += value;
                HookHandler.HookDetectDevice();
            }
            remove => HookHandler._beforeDetectDevice -= value;
        }

        public static event Delegates.AttachDevice_BeforeArgs AttachDevice
        {
            add
            {
                HookHandler._beforeAttachDevice += value;
                HookHandler.HookAttachDevice();
            }
            remove => HookHandler._beforeAttachDevice -= value;
        }

        public static event Delegates.DetachDevice_BeforeArgs DetachDevice
        {
            add
            {
                HookHandler._beforeDetachDevice += value;
                HookHandler.HookDetachDevice();
            }
            remove => HookHandler._beforeDetachDevice -= value;
        }

        public static event Delegates.FindAttachedDevice_BeforeArgs FindAttachedDevice
        {
            add
            {
                HookHandler._beforeFindAttachedDevice += value;
                HookHandler.HookFindAttachedDevice();
            }
            remove => HookHandler._beforeFindAttachedDevice -= value;
        }

        public static event Delegates.FindDetachedDevice_BeforeArgs FindDetachedDevice
        {
            add
            {
                HookHandler._beforeFindDetachedDevice += value;
                HookHandler.HookFindDetachedDevice();
            }
            remove => HookHandler._beforeFindDetachedDevice -= value;
        }

        public static event Delegates.SystemFindDetachedDevice_BeforeArgs SystemFindDetachedDevice
        {
            add
            {
                HookHandler._beforeSystemFindDetachedDevice += value;
                HookHandler.HookSystemFindDetachedDevice();
            }
            remove => HookHandler._beforeSystemFindDetachedDevice -= value;
        }

        public static event Delegates.AddSystemDeviceProfile_BeforeArgs AddSystemDeviceProfile
        {
            add
            {
                HookHandler._beforeAddSystemDeviceProfile += value;
                HookHandler.HookAddSystemDeviceProfile();
            }
            remove => HookHandler._beforeAddSystemDeviceProfile -= value;
        }

        public static event Delegates.AddSystemDeviceProfiles_BeforeArgs AddSystemDeviceProfiles
        {
            add
            {
                HookHandler._beforeAddSystemDeviceProfiles += value;
                HookHandler.HookAddSystemDeviceProfiles();
            }
            remove => HookHandler._beforeAddSystemDeviceProfiles -= value;
        }

        public static event Delegates.CheckPlatformSupport_BeforeArgs CheckPlatformSupport
        {
            add
            {
                HookHandler._beforeCheckPlatformSupport += value;
                HookHandler.HookCheckPlatformSupport();
            }
            remove => HookHandler._beforeCheckPlatformSupport -= value;
        }

        public static event Delegates.Enable_BeforeArgs Enable
        {
            add
            {
                HookHandler._beforeEnable += value;
                HookHandler.HookEnable();
            }
            remove => HookHandler._beforeEnable -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Destroy_AfterArgs Destroy
        {
            add
            {
                HookHandler._afterDestroy += value;
                HookHandler.HookDestroy();
            }
            remove => HookHandler._afterDestroy -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.DetectDevice_AfterArgs DetectDevice
        {
            add
            {
                HookHandler._afterDetectDevice += value;
                HookHandler.HookDetectDevice();
            }
            remove => HookHandler._afterDetectDevice -= value;
        }

        public static event Delegates.AttachDevice_AfterArgs AttachDevice
        {
            add
            {
                HookHandler._afterAttachDevice += value;
                HookHandler.HookAttachDevice();
            }
            remove => HookHandler._afterAttachDevice -= value;
        }

        public static event Delegates.DetachDevice_AfterArgs DetachDevice
        {
            add
            {
                HookHandler._afterDetachDevice += value;
                HookHandler.HookDetachDevice();
            }
            remove => HookHandler._afterDetachDevice -= value;
        }

        public static event Delegates.FindAttachedDevice_AfterArgs FindAttachedDevice
        {
            add
            {
                HookHandler._afterFindAttachedDevice += value;
                HookHandler.HookFindAttachedDevice();
            }
            remove => HookHandler._afterFindAttachedDevice -= value;
        }

        public static event Delegates.FindDetachedDevice_AfterArgs FindDetachedDevice
        {
            add
            {
                HookHandler._afterFindDetachedDevice += value;
                HookHandler.HookFindDetachedDevice();
            }
            remove => HookHandler._afterFindDetachedDevice -= value;
        }

        public static event Delegates.SystemFindDetachedDevice_AfterArgs SystemFindDetachedDevice
        {
            add
            {
                HookHandler._afterSystemFindDetachedDevice += value;
                HookHandler.HookSystemFindDetachedDevice();
            }
            remove => HookHandler._afterSystemFindDetachedDevice -= value;
        }

        public static event Delegates.AddSystemDeviceProfile_AfterArgs AddSystemDeviceProfile
        {
            add
            {
                HookHandler._afterAddSystemDeviceProfile += value;
                HookHandler.HookAddSystemDeviceProfile();
            }
            remove => HookHandler._afterAddSystemDeviceProfile -= value;
        }

        public static event Delegates.AddSystemDeviceProfiles_AfterArgs AddSystemDeviceProfiles
        {
            add
            {
                HookHandler._afterAddSystemDeviceProfiles += value;
                HookHandler.HookAddSystemDeviceProfiles();
            }
            remove => HookHandler._afterAddSystemDeviceProfiles -= value;
        }

        public static event Delegates.CheckPlatformSupport_AfterArgs CheckPlatformSupport
        {
            add
            {
                HookHandler._afterCheckPlatformSupport += value;
                HookHandler.HookCheckPlatformSupport();
            }
            remove => HookHandler._afterCheckPlatformSupport -= value;
        }

        public static event Delegates.Enable_AfterArgs Enable
        {
            add
            {
                HookHandler._afterEnable += value;
                HookHandler.HookEnable();
            }
            remove => HookHandler._afterEnable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Destroy_WithArgs Destroy
        {
            add => HookEndpointManager.Add<Delegates.Destroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Destroy"), value);
            remove => HookEndpointManager.Remove<Delegates.Destroy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Destroy"), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Update"), value);
        }

        public static event Delegates.DetectDevice_WithArgs DetectDevice
        {
            add => HookEndpointManager.Add<Delegates.DetectDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "DetectDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.DetectDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "DetectDevice"), value);
        }

        public static event Delegates.AttachDevice_WithArgs AttachDevice
        {
            add => HookEndpointManager.Add<Delegates.AttachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AttachDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.AttachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AttachDevice"), value);
        }

        public static event Delegates.DetachDevice_WithArgs DetachDevice
        {
            add => HookEndpointManager.Add<Delegates.DetachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "DetachDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.DetachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "DetachDevice"), value);
        }

        public static event Delegates.FindAttachedDevice_WithArgs FindAttachedDevice
        {
            add => HookEndpointManager.Add<Delegates.FindAttachedDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "FindAttachedDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.FindAttachedDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "FindAttachedDevice"), value);
        }

        public static event Delegates.FindDetachedDevice_WithArgs FindDetachedDevice
        {
            add => HookEndpointManager.Add<Delegates.FindDetachedDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "FindDetachedDevice"), value);
            remove => HookEndpointManager.Remove<Delegates.FindDetachedDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "FindDetachedDevice"), value);
        }

        public static event Delegates.SystemFindDetachedDevice_WithArgs SystemFindDetachedDevice
        {
            add => HookEndpointManager.Add<Delegates.SystemFindDetachedDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "SystemFindDetachedDevice", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.SystemFindDetachedDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "SystemFindDetachedDevice", false),
                value);
        }

        public static event Delegates.AddSystemDeviceProfile_WithArgs AddSystemDeviceProfile
        {
            add => HookEndpointManager.Add<Delegates.AddSystemDeviceProfile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AddSystemDeviceProfile"), value);
            remove => HookEndpointManager.Remove<Delegates.AddSystemDeviceProfile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AddSystemDeviceProfile"), value);
        }

        public static event Delegates.AddSystemDeviceProfiles_WithArgs AddSystemDeviceProfiles
        {
            add => HookEndpointManager.Add<Delegates.AddSystemDeviceProfiles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AddSystemDeviceProfiles"), value);
            remove => HookEndpointManager.Remove<Delegates.AddSystemDeviceProfiles_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "AddSystemDeviceProfiles"), value);
        }

        public static event Delegates.CheckPlatformSupport_WithArgs CheckPlatformSupport
        {
            add => HookEndpointManager.Add<Delegates.CheckPlatformSupport_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "CheckPlatformSupport", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckPlatformSupport_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "CheckPlatformSupport", false), value);
        }

        public static event Delegates.Enable_WithArgs Enable
        {
            add => HookEndpointManager.Add<Delegates.Enable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Enable", false), value);
            remove => HookEndpointManager.Remove<Delegates.Enable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDeviceManager), "Enable", false), value);
        }
    }
}