namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossStatueExtraFlashEffect class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatueExtraFlashEffect
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossStatueExtraFlashEffect.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.BossStatueExtraFlashEffect.orig_Start orig, BossStatueExtraFlashEffect self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoAppear()
        {
            if (!HookedList.Contains("DoAppear"))
            {
                HookedList.Add("DoAppear");
                On.BossStatueExtraFlashEffect.DoAppear += DoAppear;
            }
        }

        internal static event Delegates.DoAppear_BeforeArgs _beforeDoAppear;
        internal static event Delegates.DoAppear_AfterArgs _afterDoAppear;

        private static void DoAppear(On.BossStatueExtraFlashEffect.orig_DoAppear orig, BossStatueExtraFlashEffect self)
        {
            Delegates.Params_DoAppear @params = new()
            {
                self = self
            };
            if (_beforeDoAppear != null)
                foreach (Delegates.DoAppear_BeforeArgs toInvoke in _beforeDoAppear.GetInvocationList())
                    try
                    {
                        _beforeDoAppear?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDoAppear != null)
                foreach (Delegates.DoAppear_AfterArgs toInvoke in _afterDoAppear.GetInvocationList())
                    try
                    {
                        _afterDoAppear.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAppearRoutine()
        {
            if (!HookedList.Contains("AppearRoutine"))
            {
                HookedList.Add("AppearRoutine");
                On.BossStatueExtraFlashEffect.AppearRoutine += AppearRoutine;
            }
        }

        internal static event Delegates.AppearRoutine_BeforeArgs _beforeAppearRoutine;

        private static IEnumerator AppearRoutine(On.BossStatueExtraFlashEffect.orig_AppearRoutine orig,
            BossStatueExtraFlashEffect self, GameObject toggle)
        {
            Delegates.Params_AppearRoutine @params = new()
            {
                self = self, toggle = toggle
            };
            if (_beforeAppearRoutine != null)
                foreach (Delegates.AppearRoutine_BeforeArgs toInvoke in _beforeAppearRoutine.GetInvocationList())
                    try
                    {
                        _beforeAppearRoutine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            toggle = @params.toggle;
            return orig(self, toggle);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate IEnumerator AppearRoutine_AfterArgs(Params_AppearRoutine args, IEnumerator ret);

        public delegate void AppearRoutine_BeforeArgs(Params_AppearRoutine args);

        public delegate IEnumerator AppearRoutine_WithArgs(
            Func<BossStatueExtraFlashEffect, GameObject, IEnumerator> orig, BossStatueExtraFlashEffect self,
            GameObject toggle);

        public delegate void DoAppear_AfterArgs(Params_DoAppear args);

        public delegate void DoAppear_BeforeArgs(Params_DoAppear args);

        public delegate void DoAppear_WithArgs(Action<BossStatueExtraFlashEffect> orig,
            BossStatueExtraFlashEffect self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<BossStatueExtraFlashEffect> orig, BossStatueExtraFlashEffect self);

        public sealed class Params_Start
        {
            public BossStatueExtraFlashEffect self;
        }

        public sealed class Params_DoAppear
        {
            public BossStatueExtraFlashEffect self;
        }

        public sealed class Params_AppearRoutine
        {
            public BossStatueExtraFlashEffect self;
            public GameObject toggle;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.DoAppear_BeforeArgs DoAppear
        {
            add
            {
                HookHandler._beforeDoAppear += value;
                HookHandler.HookDoAppear();
            }
            remove => HookHandler._beforeDoAppear -= value;
        }

        public static event Delegates.AppearRoutine_BeforeArgs AppearRoutine
        {
            add
            {
                HookHandler._beforeAppearRoutine += value;
                HookHandler.HookAppearRoutine();
            }
            remove => HookHandler._beforeAppearRoutine -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.DoAppear_AfterArgs DoAppear
        {
            add
            {
                HookHandler._afterDoAppear += value;
                HookHandler.HookDoAppear();
            }
            remove => HookHandler._afterDoAppear -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossStatueExtraFlashEffect.hook_Start Start
        {
            add => On.BossStatueExtraFlashEffect.Start += value;
            remove => On.BossStatueExtraFlashEffect.Start -= value;
        }

        public static event On.BossStatueExtraFlashEffect.hook_DoAppear DoAppear
        {
            add => On.BossStatueExtraFlashEffect.DoAppear += value;
            remove => On.BossStatueExtraFlashEffect.DoAppear -= value;
        }

        public static event On.BossStatueExtraFlashEffect.hook_AppearRoutine AppearRoutine
        {
            add => On.BossStatueExtraFlashEffect.AppearRoutine += value;
            remove => On.BossStatueExtraFlashEffect.AppearRoutine -= value;
        }
    }
}