using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for NonThunker class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnNonThunker
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookSetActive()
{
if (!HookedList.Contains("SetActive"))
{
HookedList.Add("SetActive");
On.NonThunker.SetActive += SetActive;

}
}
internal static event Delegates.SetActive_BeforeArgs _beforeSetActive;
internal static event Delegates.SetActive_AfterArgs _afterSetActive;
private static void SetActive(On.NonThunker.orig_SetActive orig,NonThunker self,  bool active)
{
Delegates.Params_SetActive @params = new() 
{
self = self
, active = active
};
if (_beforeSetActive != null)
{
foreach (Delegates.SetActive_BeforeArgs toInvoke in _beforeSetActive.GetInvocationList())
{
try
{
_beforeSetActive?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
active = @params.active;
orig(self, active);
if (_afterSetActive != null)
{
foreach (Delegates.SetActive_AfterArgs toInvoke in _afterSetActive.GetInvocationList())
{
try
{
_afterSetActive.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_SetActive
{
public NonThunker self;
public bool active;
}
public delegate void SetActive_BeforeArgs(Params_SetActive args);
public delegate void SetActive_AfterArgs(Params_SetActive args);
public delegate void SetActive_WithArgs (Action<NonThunker,  bool> orig, NonThunker self,  bool active);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.SetActive_BeforeArgs SetActive
{
add
{

HookHandler._beforeSetActive += value;
HookHandler.HookSetActive();
}
remove => HookHandler._beforeSetActive -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.SetActive_AfterArgs SetActive
{
add
{

HookHandler._afterSetActive += value;
HookHandler.HookSetActive();
}
remove => HookHandler._afterSetActive -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.NonThunker.hook_SetActive SetActive
{
add => On.NonThunker.SetActive += value;
remove => On.NonThunker.SetActive -= value;
}
}

}
