namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for NonThunker class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnNonThunker
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetActive()
        {
            if (!HookedList.Contains("SetActive"))
            {
                HookedList.Add("SetActive");
                On.NonThunker.SetActive += SetActive;
            }
        }

        internal static event Delegates.SetActive_BeforeArgs _beforeSetActive;
        internal static event Delegates.SetActive_NormalArgs _afterSetActive;

        private static void SetActive(On.NonThunker.orig_SetActive orig, NonThunker self, bool active)
        {
            Delegates.Params_SetActive @params = new()
            {
                self = self, active = active
            };
            _beforeSetActive?.Invoke(@params);
            self = @params.self;
            active = @params.active;
            orig(self, active);
            if (_afterSetActive != null) _afterSetActive.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void SetActive_BeforeArgs(Params_SetActive args);

        public delegate void SetActive_NormalArgs(Params_SetActive args);

        public sealed class Params_SetActive
        {
            public bool active;
            public NonThunker self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetActive_BeforeArgs SetActive
        {
            add
            {
                HookHandler._beforeSetActive += value;
                HookHandler.HookSetActive();
            }
            remove => HookHandler._beforeSetActive -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetActive_NormalArgs SetActive
        {
            add
            {
                HookHandler._afterSetActive += value;
                HookHandler.HookSetActive();
            }
            remove => HookHandler._afterSetActive -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.NonThunker.hook_SetActive SetActive
        {
            add => On.NonThunker.SetActive += value;
            remove => On.NonThunker.SetActive -= value;
        }
    }
}