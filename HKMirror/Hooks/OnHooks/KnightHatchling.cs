using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for KnightHatchling class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnKnightHatchling
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_IsGrounded()
        {
            if (!HookedList.Contains("get_IsGrounded"))
            {
                HookedList.Add("get_IsGrounded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "get_IsGrounded"), get_IsGrounded);
            }
        }

        internal static event Delegates.get_IsGrounded_BeforeArgs _beforeget_IsGrounded;
        internal static event Delegates.get_IsGrounded_AfterArgs _afterget_IsGrounded;

        private static bool get_IsGrounded(Func<KnightHatchling, bool> orig, KnightHatchling self)
        {
            Delegates.Params_get_IsGrounded @params = new()
            {
                self = self
            };
            if (_beforeget_IsGrounded != null)
                foreach (Delegates.get_IsGrounded_BeforeArgs toInvoke in _beforeget_IsGrounded.GetInvocationList())
                    try
                    {
                        _beforeget_IsGrounded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsGrounded != null)
                foreach (Delegates.get_IsGrounded_AfterArgs toInvoke in _afterget_IsGrounded.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsGrounded.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_CurrentState()
        {
            if (!HookedList.Contains("set_CurrentState"))
            {
                HookedList.Add("set_CurrentState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_CurrentState"), set_CurrentState);
            }
        }

        internal static event Delegates.set_CurrentState_BeforeArgs _beforeset_CurrentState;
        internal static event Delegates.set_CurrentState_AfterArgs _afterset_CurrentState;

        private static void set_CurrentState(Action<KnightHatchling, KnightHatchling.State> orig, KnightHatchling self,
            KnightHatchling.State value)
        {
            Delegates.Params_set_CurrentState @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_CurrentState != null)
                foreach (Delegates.set_CurrentState_BeforeArgs toInvoke in _beforeset_CurrentState.GetInvocationList())
                    try
                    {
                        _beforeset_CurrentState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_CurrentState != null)
                foreach (Delegates.set_CurrentState_AfterArgs toInvoke in _afterset_CurrentState.GetInvocationList())
                    try
                    {
                        _afterset_CurrentState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookset_LastFrameState()
        {
            if (!HookedList.Contains("set_LastFrameState"))
            {
                HookedList.Add("set_LastFrameState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_LastFrameState"),
                    set_LastFrameState);
            }
        }

        internal static event Delegates.set_LastFrameState_BeforeArgs _beforeset_LastFrameState;
        internal static event Delegates.set_LastFrameState_AfterArgs _afterset_LastFrameState;

        private static void set_LastFrameState(Action<KnightHatchling, KnightHatchling.State> orig,
            KnightHatchling self, KnightHatchling.State value)
        {
            Delegates.Params_set_LastFrameState @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_LastFrameState != null)
                foreach (Delegates.set_LastFrameState_BeforeArgs toInvoke in
                         _beforeset_LastFrameState.GetInvocationList())
                    try
                    {
                        _beforeset_LastFrameState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LastFrameState != null)
                foreach (Delegates.set_LastFrameState_AfterArgs toInvoke in
                         _afterset_LastFrameState.GetInvocationList())
                    try
                    {
                        _afterset_LastFrameState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookset_PreviousState()
        {
            if (!HookedList.Contains("set_PreviousState"))
            {
                HookedList.Add("set_PreviousState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_PreviousState"),
                    set_PreviousState);
            }
        }

        internal static event Delegates.set_PreviousState_BeforeArgs _beforeset_PreviousState;
        internal static event Delegates.set_PreviousState_AfterArgs _afterset_PreviousState;

        private static void set_PreviousState(Action<KnightHatchling, KnightHatchling.State> orig, KnightHatchling self,
            KnightHatchling.State value)
        {
            Delegates.Params_set_PreviousState @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_PreviousState != null)
                foreach (Delegates.set_PreviousState_BeforeArgs toInvoke in
                         _beforeset_PreviousState.GetInvocationList())
                    try
                    {
                        _beforeset_PreviousState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_PreviousState != null)
                foreach (Delegates.set_PreviousState_AfterArgs toInvoke in _afterset_PreviousState.GetInvocationList())
                    try
                    {
                        _afterset_PreviousState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.KnightHatchling.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.KnightHatchling.orig_Awake orig, KnightHatchling self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.KnightHatchling.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.KnightHatchling.orig_Start orig, KnightHatchling self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.KnightHatchling.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.KnightHatchling.orig_OnEnable orig, KnightHatchling self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.KnightHatchling.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.KnightHatchling.orig_OnDisable orig, KnightHatchling self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.KnightHatchling.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.KnightHatchling.orig_FixedUpdate orig, KnightHatchling self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSpawn()
        {
            if (!HookedList.Contains("Spawn"))
            {
                HookedList.Add("Spawn");
                On.KnightHatchling.Spawn += Spawn;
            }
        }

        internal static event Delegates.Spawn_BeforeArgs _beforeSpawn;

        private static IEnumerator Spawn(On.KnightHatchling.orig_Spawn orig, KnightHatchling self)
        {
            Delegates.Params_Spawn @params = new()
            {
                self = self
            };
            if (_beforeSpawn != null)
                foreach (Delegates.Spawn_BeforeArgs toInvoke in _beforeSpawn.GetInvocationList())
                    try
                    {
                        _beforeSpawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookGetHeroDistance()
        {
            if (!HookedList.Contains("GetHeroDistance"))
            {
                HookedList.Add("GetHeroDistance");
                On.KnightHatchling.GetHeroDistance += GetHeroDistance;
            }
        }

        internal static event Delegates.GetHeroDistance_BeforeArgs _beforeGetHeroDistance;
        internal static event Delegates.GetHeroDistance_AfterArgs _afterGetHeroDistance;

        private static float GetHeroDistance(On.KnightHatchling.orig_GetHeroDistance orig, KnightHatchling self)
        {
            Delegates.Params_GetHeroDistance @params = new()
            {
                self = self
            };
            if (_beforeGetHeroDistance != null)
                foreach (Delegates.GetHeroDistance_BeforeArgs toInvoke in _beforeGetHeroDistance.GetInvocationList())
                    try
                    {
                        _beforeGetHeroDistance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetHeroDistance != null)
                foreach (Delegates.GetHeroDistance_AfterArgs toInvoke in _afterGetHeroDistance.GetInvocationList())
                    try
                    {
                        retVal = _afterGetHeroDistance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTeleEnd()
        {
            if (!HookedList.Contains("TeleEnd"))
            {
                HookedList.Add("TeleEnd");
                On.KnightHatchling.TeleEnd += TeleEnd;
            }
        }

        internal static event Delegates.TeleEnd_BeforeArgs _beforeTeleEnd;

        private static IEnumerator TeleEnd(On.KnightHatchling.orig_TeleEnd orig, KnightHatchling self)
        {
            Delegates.Params_TeleEnd @params = new()
            {
                self = self
            };
            if (_beforeTeleEnd != null)
                foreach (Delegates.TeleEnd_BeforeArgs toInvoke in _beforeTeleEnd.GetInvocationList())
                    try
                    {
                        _beforeTeleEnd?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFsmHitLanded()
        {
            if (!HookedList.Contains("FsmHitLanded"))
            {
                HookedList.Add("FsmHitLanded");
                On.KnightHatchling.FsmHitLanded += FsmHitLanded;
            }
        }

        internal static event Delegates.FsmHitLanded_BeforeArgs _beforeFsmHitLanded;
        internal static event Delegates.FsmHitLanded_AfterArgs _afterFsmHitLanded;

        private static void FsmHitLanded(On.KnightHatchling.orig_FsmHitLanded orig, KnightHatchling self)
        {
            Delegates.Params_FsmHitLanded @params = new()
            {
                self = self
            };
            if (_beforeFsmHitLanded != null)
                foreach (Delegates.FsmHitLanded_BeforeArgs toInvoke in _beforeFsmHitLanded.GetInvocationList())
                    try
                    {
                        _beforeFsmHitLanded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmHitLanded != null)
                foreach (Delegates.FsmHitLanded_AfterArgs toInvoke in _afterFsmHitLanded.GetInvocationList())
                    try
                    {
                        _afterFsmHitLanded.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookExplode()
        {
            if (!HookedList.Contains("Explode"))
            {
                HookedList.Add("Explode");
                On.KnightHatchling.Explode += Explode;
            }
        }

        internal static event Delegates.Explode_BeforeArgs _beforeExplode;

        private static IEnumerator Explode(On.KnightHatchling.orig_Explode orig, KnightHatchling self)
        {
            Delegates.Params_Explode @params = new()
            {
                self = self
            };
            if (_beforeExplode != null)
                foreach (Delegates.Explode_BeforeArgs toInvoke in _beforeExplode.GetInvocationList())
                    try
                    {
                        _beforeExplode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFsmCharmsEnd()
        {
            if (!HookedList.Contains("FsmCharmsEnd"))
            {
                HookedList.Add("FsmCharmsEnd");
                On.KnightHatchling.FsmCharmsEnd += FsmCharmsEnd;
            }
        }

        internal static event Delegates.FsmCharmsEnd_BeforeArgs _beforeFsmCharmsEnd;
        internal static event Delegates.FsmCharmsEnd_AfterArgs _afterFsmCharmsEnd;

        private static void FsmCharmsEnd(On.KnightHatchling.orig_FsmCharmsEnd orig, KnightHatchling self)
        {
            Delegates.Params_FsmCharmsEnd @params = new()
            {
                self = self
            };
            if (_beforeFsmCharmsEnd != null)
                foreach (Delegates.FsmCharmsEnd_BeforeArgs toInvoke in _beforeFsmCharmsEnd.GetInvocationList())
                    try
                    {
                        _beforeFsmCharmsEnd?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmCharmsEnd != null)
                foreach (Delegates.FsmCharmsEnd_AfterArgs toInvoke in _afterFsmCharmsEnd.GetInvocationList())
                    try
                    {
                        _afterFsmCharmsEnd.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCharmsEnd()
        {
            if (!HookedList.Contains("CharmsEnd"))
            {
                HookedList.Add("CharmsEnd");
                On.KnightHatchling.CharmsEnd += CharmsEnd;
            }
        }

        internal static event Delegates.CharmsEnd_BeforeArgs _beforeCharmsEnd;

        private static IEnumerator CharmsEnd(On.KnightHatchling.orig_CharmsEnd orig, KnightHatchling self)
        {
            Delegates.Params_CharmsEnd @params = new()
            {
                self = self
            };
            if (_beforeCharmsEnd != null)
                foreach (Delegates.CharmsEnd_BeforeArgs toInvoke in _beforeCharmsEnd.GetInvocationList())
                    try
                    {
                        _beforeCharmsEnd?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFsmHazardReload()
        {
            if (!HookedList.Contains("FsmHazardReload"))
            {
                HookedList.Add("FsmHazardReload");
                On.KnightHatchling.FsmHazardReload += FsmHazardReload;
            }
        }

        internal static event Delegates.FsmHazardReload_BeforeArgs _beforeFsmHazardReload;
        internal static event Delegates.FsmHazardReload_AfterArgs _afterFsmHazardReload;

        private static void FsmHazardReload(On.KnightHatchling.orig_FsmHazardReload orig, KnightHatchling self)
        {
            Delegates.Params_FsmHazardReload @params = new()
            {
                self = self
            };
            if (_beforeFsmHazardReload != null)
                foreach (Delegates.FsmHazardReload_BeforeArgs toInvoke in _beforeFsmHazardReload.GetInvocationList())
                    try
                    {
                        _beforeFsmHazardReload?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmHazardReload != null)
                foreach (Delegates.FsmHazardReload_AfterArgs toInvoke in _afterFsmHazardReload.GetInvocationList())
                    try
                    {
                        _afterFsmHazardReload.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFsmBenchRestStart()
        {
            if (!HookedList.Contains("FsmBenchRestStart"))
            {
                HookedList.Add("FsmBenchRestStart");
                On.KnightHatchling.FsmBenchRestStart += FsmBenchRestStart;
            }
        }

        internal static event Delegates.FsmBenchRestStart_BeforeArgs _beforeFsmBenchRestStart;
        internal static event Delegates.FsmBenchRestStart_AfterArgs _afterFsmBenchRestStart;

        private static void FsmBenchRestStart(On.KnightHatchling.orig_FsmBenchRestStart orig, KnightHatchling self)
        {
            Delegates.Params_FsmBenchRestStart @params = new()
            {
                self = self
            };
            if (_beforeFsmBenchRestStart != null)
                foreach (Delegates.FsmBenchRestStart_BeforeArgs toInvoke in
                         _beforeFsmBenchRestStart.GetInvocationList())
                    try
                    {
                        _beforeFsmBenchRestStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmBenchRestStart != null)
                foreach (Delegates.FsmBenchRestStart_AfterArgs toInvoke in _afterFsmBenchRestStart.GetInvocationList())
                    try
                    {
                        _afterFsmBenchRestStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFsmBenchRestEnd()
        {
            if (!HookedList.Contains("FsmBenchRestEnd"))
            {
                HookedList.Add("FsmBenchRestEnd");
                On.KnightHatchling.FsmBenchRestEnd += FsmBenchRestEnd;
            }
        }

        internal static event Delegates.FsmBenchRestEnd_BeforeArgs _beforeFsmBenchRestEnd;
        internal static event Delegates.FsmBenchRestEnd_AfterArgs _afterFsmBenchRestEnd;

        private static void FsmBenchRestEnd(On.KnightHatchling.orig_FsmBenchRestEnd orig, KnightHatchling self)
        {
            Delegates.Params_FsmBenchRestEnd @params = new()
            {
                self = self
            };
            if (_beforeFsmBenchRestEnd != null)
                foreach (Delegates.FsmBenchRestEnd_BeforeArgs toInvoke in _beforeFsmBenchRestEnd.GetInvocationList())
                    try
                    {
                        _beforeFsmBenchRestEnd?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmBenchRestEnd != null)
                foreach (Delegates.FsmBenchRestEnd_AfterArgs toInvoke in _afterFsmBenchRestEnd.GetInvocationList())
                    try
                    {
                        _afterFsmBenchRestEnd.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookWakeUp()
        {
            if (!HookedList.Contains("WakeUp"))
            {
                HookedList.Add("WakeUp");
                On.KnightHatchling.WakeUp += WakeUp;
            }
        }

        internal static event Delegates.WakeUp_BeforeArgs _beforeWakeUp;

        private static IEnumerator WakeUp(On.KnightHatchling.orig_WakeUp orig, KnightHatchling self)
        {
            Delegates.Params_WakeUp @params = new()
            {
                self = self
            };
            if (_beforeWakeUp != null)
                foreach (Delegates.WakeUp_BeforeArgs toInvoke in _beforeWakeUp.GetInvocationList())
                    try
                    {
                        _beforeWakeUp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFsmQuickSpawn()
        {
            if (!HookedList.Contains("FsmQuickSpawn"))
            {
                HookedList.Add("FsmQuickSpawn");
                On.KnightHatchling.FsmQuickSpawn += FsmQuickSpawn;
            }
        }

        internal static event Delegates.FsmQuickSpawn_BeforeArgs _beforeFsmQuickSpawn;
        internal static event Delegates.FsmQuickSpawn_AfterArgs _afterFsmQuickSpawn;

        private static void FsmQuickSpawn(On.KnightHatchling.orig_FsmQuickSpawn orig, KnightHatchling self)
        {
            Delegates.Params_FsmQuickSpawn @params = new()
            {
                self = self
            };
            if (_beforeFsmQuickSpawn != null)
                foreach (Delegates.FsmQuickSpawn_BeforeArgs toInvoke in _beforeFsmQuickSpawn.GetInvocationList())
                    try
                    {
                        _beforeFsmQuickSpawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmQuickSpawn != null)
                foreach (Delegates.FsmQuickSpawn_AfterArgs toInvoke in _afterFsmQuickSpawn.GetInvocationList())
                    try
                    {
                        _afterFsmQuickSpawn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFsmDreamGateOut()
        {
            if (!HookedList.Contains("FsmDreamGateOut"))
            {
                HookedList.Add("FsmDreamGateOut");
                On.KnightHatchling.FsmDreamGateOut += FsmDreamGateOut;
            }
        }

        internal static event Delegates.FsmDreamGateOut_BeforeArgs _beforeFsmDreamGateOut;
        internal static event Delegates.FsmDreamGateOut_AfterArgs _afterFsmDreamGateOut;

        private static void FsmDreamGateOut(On.KnightHatchling.orig_FsmDreamGateOut orig, KnightHatchling self)
        {
            Delegates.Params_FsmDreamGateOut @params = new()
            {
                self = self
            };
            if (_beforeFsmDreamGateOut != null)
                foreach (Delegates.FsmDreamGateOut_BeforeArgs toInvoke in _beforeFsmDreamGateOut.GetInvocationList())
                    try
                    {
                        _beforeFsmDreamGateOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFsmDreamGateOut != null)
                foreach (Delegates.FsmDreamGateOut_AfterArgs toInvoke in _afterFsmDreamGateOut.GetInvocationList())
                    try
                    {
                        _afterFsmDreamGateOut.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDreamGateOut()
        {
            if (!HookedList.Contains("DreamGateOut"))
            {
                HookedList.Add("DreamGateOut");
                On.KnightHatchling.DreamGateOut += DreamGateOut;
            }
        }

        internal static event Delegates.DreamGateOut_BeforeArgs _beforeDreamGateOut;

        private static IEnumerator DreamGateOut(On.KnightHatchling.orig_DreamGateOut orig, KnightHatchling self)
        {
            Delegates.Params_DreamGateOut @params = new()
            {
                self = self
            };
            if (_beforeDreamGateOut != null)
                foreach (Delegates.DreamGateOut_BeforeArgs toInvoke in _beforeDreamGateOut.GetInvocationList())
                    try
                    {
                        _beforeDreamGateOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookDoFace()
        {
            if (!HookedList.Contains("DoFace"))
            {
                HookedList.Add("DoFace");
                On.KnightHatchling.DoFace += DoFace;
            }
        }

        internal static event Delegates.DoFace_BeforeArgs _beforeDoFace;
        internal static event Delegates.DoFace_AfterArgs _afterDoFace;

        private static void DoFace(On.KnightHatchling.orig_DoFace orig, KnightHatchling self, bool spriteFacesRight,
            bool playNewAnimation, string newAnimationClip, bool pauseBetweenTurns, float pauseTime)
        {
            Delegates.Params_DoFace @params = new()
            {
                self = self, spriteFacesRight = spriteFacesRight, playNewAnimation = playNewAnimation,
                newAnimationClip = newAnimationClip, pauseBetweenTurns = pauseBetweenTurns, pauseTime = pauseTime
            };
            if (_beforeDoFace != null)
                foreach (Delegates.DoFace_BeforeArgs toInvoke in _beforeDoFace.GetInvocationList())
                    try
                    {
                        _beforeDoFace?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spriteFacesRight = @params.spriteFacesRight;
            playNewAnimation = @params.playNewAnimation;
            newAnimationClip = @params.newAnimationClip;
            pauseBetweenTurns = @params.pauseBetweenTurns;
            pauseTime = @params.pauseTime;
            orig(self, spriteFacesRight, playNewAnimation, newAnimationClip, pauseBetweenTurns, pauseTime);
            if (_afterDoFace != null)
                foreach (Delegates.DoFace_AfterArgs toInvoke in _afterDoFace.GetInvocationList())
                    try
                    {
                        _afterDoFace.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoChase()
        {
            if (!HookedList.Contains("DoChase"))
            {
                HookedList.Add("DoChase");
                On.KnightHatchling.DoChase += DoChase;
            }
        }

        internal static event Delegates.DoChase_BeforeArgs _beforeDoChase;
        internal static event Delegates.DoChase_AfterArgs _afterDoChase;

        private static void DoChase(On.KnightHatchling.orig_DoChase orig, KnightHatchling self, Transform target,
            float distance, float speedMax, float accelerationForce, float targetRadius, float deceleration,
            Vector2 offset)
        {
            Delegates.Params_DoChase @params = new()
            {
                self = self, target = target, distance = distance, speedMax = speedMax,
                accelerationForce = accelerationForce, targetRadius = targetRadius, deceleration = deceleration,
                offset = offset
            };
            if (_beforeDoChase != null)
                foreach (Delegates.DoChase_BeforeArgs toInvoke in _beforeDoChase.GetInvocationList())
                    try
                    {
                        _beforeDoChase?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            target = @params.target;
            distance = @params.distance;
            speedMax = @params.speedMax;
            accelerationForce = @params.accelerationForce;
            targetRadius = @params.targetRadius;
            deceleration = @params.deceleration;
            offset = @params.offset;
            orig(self, target, distance, speedMax, accelerationForce, targetRadius, deceleration, offset);
            if (_afterDoChase != null)
                foreach (Delegates.DoChase_AfterArgs toInvoke in _afterDoChase.GetInvocationList())
                    try
                    {
                        _afterDoChase.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoBuzz()
        {
            if (!HookedList.Contains("DoBuzz"))
            {
                HookedList.Add("DoBuzz");
                On.KnightHatchling.DoBuzz += DoBuzz;
            }
        }

        internal static event Delegates.DoBuzz_BeforeArgs _beforeDoBuzz;
        internal static event Delegates.DoBuzz_AfterArgs _afterDoBuzz;

        private static void DoBuzz(On.KnightHatchling.orig_DoBuzz orig, KnightHatchling self, float waitMin,
            float waitMax, float speedMax, float accelerationMin, float accelerationMax, Vector2 roamingRange)
        {
            Delegates.Params_DoBuzz @params = new()
            {
                self = self, waitMin = waitMin, waitMax = waitMax, speedMax = speedMax,
                accelerationMin = accelerationMin, accelerationMax = accelerationMax, roamingRange = roamingRange
            };
            if (_beforeDoBuzz != null)
                foreach (Delegates.DoBuzz_BeforeArgs toInvoke in _beforeDoBuzz.GetInvocationList())
                    try
                    {
                        _beforeDoBuzz?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            waitMin = @params.waitMin;
            waitMax = @params.waitMax;
            speedMax = @params.speedMax;
            accelerationMin = @params.accelerationMin;
            accelerationMax = @params.accelerationMax;
            roamingRange = @params.roamingRange;
            orig(self, waitMin, waitMax, speedMax, accelerationMin, accelerationMax, roamingRange);
            if (_afterDoBuzz != null)
                foreach (Delegates.DoBuzz_AfterArgs toInvoke in _afterDoBuzz.GetInvocationList())
                    try
                    {
                        _afterDoBuzz.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoChaseSimple()
        {
            if (!HookedList.Contains("DoChaseSimple"))
            {
                HookedList.Add("DoChaseSimple");
                On.KnightHatchling.DoChaseSimple += DoChaseSimple;
            }
        }

        internal static event Delegates.DoChaseSimple_BeforeArgs _beforeDoChaseSimple;
        internal static event Delegates.DoChaseSimple_AfterArgs _afterDoChaseSimple;

        private static void DoChaseSimple(On.KnightHatchling.orig_DoChaseSimple orig, KnightHatchling self,
            Transform target, float speedMax, float accelerationForce, float offsetX, float offsetY)
        {
            Delegates.Params_DoChaseSimple @params = new()
            {
                self = self, target = target, speedMax = speedMax, accelerationForce = accelerationForce,
                offsetX = offsetX, offsetY = offsetY
            };
            if (_beforeDoChaseSimple != null)
                foreach (Delegates.DoChaseSimple_BeforeArgs toInvoke in _beforeDoChaseSimple.GetInvocationList())
                    try
                    {
                        _beforeDoChaseSimple?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            target = @params.target;
            speedMax = @params.speedMax;
            accelerationForce = @params.accelerationForce;
            offsetX = @params.offsetX;
            offsetY = @params.offsetY;
            orig(self, target, speedMax, accelerationForce, offsetX, offsetY);
            if (_afterDoChaseSimple != null)
                foreach (Delegates.DoChaseSimple_AfterArgs toInvoke in _afterDoChaseSimple.GetInvocationList())
                    try
                    {
                        _afterDoChaseSimple.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate IEnumerator CharmsEnd_AfterArgs(Params_CharmsEnd args, IEnumerator ret);

        public delegate void CharmsEnd_BeforeArgs(Params_CharmsEnd args);

        public delegate IEnumerator CharmsEnd_WithArgs(Func<KnightHatchling, IEnumerator> orig, KnightHatchling self);

        public delegate void DoBuzz_AfterArgs(Params_DoBuzz args);

        public delegate void DoBuzz_BeforeArgs(Params_DoBuzz args);

        public delegate void DoBuzz_WithArgs(Action<KnightHatchling, float, float, float, float, float, Vector2> orig,
            KnightHatchling self, float waitMin, float waitMax, float speedMax, float accelerationMin,
            float accelerationMax, Vector2 roamingRange);

        public delegate void DoChase_AfterArgs(Params_DoChase args);

        public delegate void DoChase_BeforeArgs(Params_DoChase args);

        public delegate void DoChase_WithArgs(
            Action<KnightHatchling, Transform, float, float, float, float, float, Vector2> orig, KnightHatchling self,
            Transform target, float distance, float speedMax, float accelerationForce, float targetRadius,
            float deceleration, Vector2 offset);

        public delegate void DoChaseSimple_AfterArgs(Params_DoChaseSimple args);

        public delegate void DoChaseSimple_BeforeArgs(Params_DoChaseSimple args);

        public delegate void DoChaseSimple_WithArgs(Action<KnightHatchling, Transform, float, float, float, float> orig,
            KnightHatchling self, Transform target, float speedMax, float accelerationForce, float offsetX,
            float offsetY);

        public delegate void DoFace_AfterArgs(Params_DoFace args);

        public delegate void DoFace_BeforeArgs(Params_DoFace args);

        public delegate void DoFace_WithArgs(Action<KnightHatchling, bool, bool, string, bool, float> orig,
            KnightHatchling self, bool spriteFacesRight, bool playNewAnimation, string newAnimationClip,
            bool pauseBetweenTurns, float pauseTime);

        public delegate IEnumerator DreamGateOut_AfterArgs(Params_DreamGateOut args, IEnumerator ret);

        public delegate void DreamGateOut_BeforeArgs(Params_DreamGateOut args);

        public delegate IEnumerator
            DreamGateOut_WithArgs(Func<KnightHatchling, IEnumerator> orig, KnightHatchling self);

        public delegate IEnumerator Explode_AfterArgs(Params_Explode args, IEnumerator ret);

        public delegate void Explode_BeforeArgs(Params_Explode args);

        public delegate IEnumerator Explode_WithArgs(Func<KnightHatchling, IEnumerator> orig, KnightHatchling self);

        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmBenchRestEnd_AfterArgs(Params_FsmBenchRestEnd args);

        public delegate void FsmBenchRestEnd_BeforeArgs(Params_FsmBenchRestEnd args);

        public delegate void FsmBenchRestEnd_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmBenchRestStart_AfterArgs(Params_FsmBenchRestStart args);

        public delegate void FsmBenchRestStart_BeforeArgs(Params_FsmBenchRestStart args);

        public delegate void FsmBenchRestStart_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmCharmsEnd_AfterArgs(Params_FsmCharmsEnd args);

        public delegate void FsmCharmsEnd_BeforeArgs(Params_FsmCharmsEnd args);

        public delegate void FsmCharmsEnd_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmDreamGateOut_AfterArgs(Params_FsmDreamGateOut args);

        public delegate void FsmDreamGateOut_BeforeArgs(Params_FsmDreamGateOut args);

        public delegate void FsmDreamGateOut_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmHazardReload_AfterArgs(Params_FsmHazardReload args);

        public delegate void FsmHazardReload_BeforeArgs(Params_FsmHazardReload args);

        public delegate void FsmHazardReload_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmHitLanded_AfterArgs(Params_FsmHitLanded args);

        public delegate void FsmHitLanded_BeforeArgs(Params_FsmHitLanded args);

        public delegate void FsmHitLanded_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void FsmQuickSpawn_AfterArgs(Params_FsmQuickSpawn args);

        public delegate void FsmQuickSpawn_BeforeArgs(Params_FsmQuickSpawn args);

        public delegate void FsmQuickSpawn_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate bool get_IsGrounded_AfterArgs(Params_get_IsGrounded args, bool ret);

        public delegate void get_IsGrounded_BeforeArgs(Params_get_IsGrounded args);

        public delegate bool get_IsGrounded_WithArgs(Func<KnightHatchling, bool> orig, KnightHatchling self);

        public delegate float GetHeroDistance_AfterArgs(Params_GetHeroDistance args, float ret);

        public delegate void GetHeroDistance_BeforeArgs(Params_GetHeroDistance args);

        public delegate float GetHeroDistance_WithArgs(Func<KnightHatchling, float> orig, KnightHatchling self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate void set_CurrentState_AfterArgs(Params_set_CurrentState args);

        public delegate void set_CurrentState_BeforeArgs(Params_set_CurrentState args);

        public delegate void set_CurrentState_WithArgs(Action<KnightHatchling, KnightHatchling.State> orig,
            KnightHatchling self, KnightHatchling.State value);

        public delegate void set_LastFrameState_AfterArgs(Params_set_LastFrameState args);

        public delegate void set_LastFrameState_BeforeArgs(Params_set_LastFrameState args);

        public delegate void set_LastFrameState_WithArgs(Action<KnightHatchling, KnightHatchling.State> orig,
            KnightHatchling self, KnightHatchling.State value);

        public delegate void set_PreviousState_AfterArgs(Params_set_PreviousState args);

        public delegate void set_PreviousState_BeforeArgs(Params_set_PreviousState args);

        public delegate void set_PreviousState_WithArgs(Action<KnightHatchling, KnightHatchling.State> orig,
            KnightHatchling self, KnightHatchling.State value);

        public delegate IEnumerator Spawn_AfterArgs(Params_Spawn args, IEnumerator ret);

        public delegate void Spawn_BeforeArgs(Params_Spawn args);

        public delegate IEnumerator Spawn_WithArgs(Func<KnightHatchling, IEnumerator> orig, KnightHatchling self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<KnightHatchling> orig, KnightHatchling self);

        public delegate IEnumerator TeleEnd_AfterArgs(Params_TeleEnd args, IEnumerator ret);

        public delegate void TeleEnd_BeforeArgs(Params_TeleEnd args);

        public delegate IEnumerator TeleEnd_WithArgs(Func<KnightHatchling, IEnumerator> orig, KnightHatchling self);

        public delegate IEnumerator WakeUp_AfterArgs(Params_WakeUp args, IEnumerator ret);

        public delegate void WakeUp_BeforeArgs(Params_WakeUp args);

        public delegate IEnumerator WakeUp_WithArgs(Func<KnightHatchling, IEnumerator> orig, KnightHatchling self);

        public sealed class Params_get_IsGrounded
        {
            public KnightHatchling self;
        }

        public sealed class Params_set_CurrentState
        {
            public KnightHatchling self;
            public KnightHatchling.State value;
        }

        public sealed class Params_set_LastFrameState
        {
            public KnightHatchling self;
            public KnightHatchling.State value;
        }

        public sealed class Params_set_PreviousState
        {
            public KnightHatchling self;
            public KnightHatchling.State value;
        }

        public sealed class Params_Awake
        {
            public KnightHatchling self;
        }

        public sealed class Params_Start
        {
            public KnightHatchling self;
        }

        public sealed class Params_OnEnable
        {
            public KnightHatchling self;
        }

        public sealed class Params_OnDisable
        {
            public KnightHatchling self;
        }

        public sealed class Params_FixedUpdate
        {
            public KnightHatchling self;
        }

        public sealed class Params_Spawn
        {
            public KnightHatchling self;
        }

        public sealed class Params_GetHeroDistance
        {
            public KnightHatchling self;
        }

        public sealed class Params_TeleEnd
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmHitLanded
        {
            public KnightHatchling self;
        }

        public sealed class Params_Explode
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmCharmsEnd
        {
            public KnightHatchling self;
        }

        public sealed class Params_CharmsEnd
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmHazardReload
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmBenchRestStart
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmBenchRestEnd
        {
            public KnightHatchling self;
        }

        public sealed class Params_WakeUp
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmQuickSpawn
        {
            public KnightHatchling self;
        }

        public sealed class Params_FsmDreamGateOut
        {
            public KnightHatchling self;
        }

        public sealed class Params_DreamGateOut
        {
            public KnightHatchling self;
        }

        public sealed class Params_DoFace
        {
            public string newAnimationClip;
            public bool pauseBetweenTurns;
            public float pauseTime;
            public bool playNewAnimation;
            public KnightHatchling self;
            public bool spriteFacesRight;
        }

        public sealed class Params_DoChase
        {
            public float accelerationForce;
            public float deceleration;
            public float distance;
            public Vector2 offset;
            public KnightHatchling self;
            public float speedMax;
            public Transform target;
            public float targetRadius;
        }

        public sealed class Params_DoBuzz
        {
            public float accelerationMax;
            public float accelerationMin;
            public Vector2 roamingRange;
            public KnightHatchling self;
            public float speedMax;
            public float waitMax;
            public float waitMin;
        }

        public sealed class Params_DoChaseSimple
        {
            public float accelerationForce;
            public float offsetX;
            public float offsetY;
            public KnightHatchling self;
            public float speedMax;
            public Transform target;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsGrounded_BeforeArgs get_IsGrounded
        {
            add
            {
                HookHandler._beforeget_IsGrounded += value;
                HookHandler.Hookget_IsGrounded();
            }
            remove => HookHandler._beforeget_IsGrounded -= value;
        }

        public static event Delegates.set_CurrentState_BeforeArgs set_CurrentState
        {
            add
            {
                HookHandler._beforeset_CurrentState += value;
                HookHandler.Hookset_CurrentState();
            }
            remove => HookHandler._beforeset_CurrentState -= value;
        }

        public static event Delegates.set_LastFrameState_BeforeArgs set_LastFrameState
        {
            add
            {
                HookHandler._beforeset_LastFrameState += value;
                HookHandler.Hookset_LastFrameState();
            }
            remove => HookHandler._beforeset_LastFrameState -= value;
        }

        public static event Delegates.set_PreviousState_BeforeArgs set_PreviousState
        {
            add
            {
                HookHandler._beforeset_PreviousState += value;
                HookHandler.Hookset_PreviousState();
            }
            remove => HookHandler._beforeset_PreviousState -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.Spawn_BeforeArgs Spawn
        {
            add
            {
                HookHandler._beforeSpawn += value;
                HookHandler.HookSpawn();
            }
            remove => HookHandler._beforeSpawn -= value;
        }

        public static event Delegates.GetHeroDistance_BeforeArgs GetHeroDistance
        {
            add
            {
                HookHandler._beforeGetHeroDistance += value;
                HookHandler.HookGetHeroDistance();
            }
            remove => HookHandler._beforeGetHeroDistance -= value;
        }

        public static event Delegates.TeleEnd_BeforeArgs TeleEnd
        {
            add
            {
                HookHandler._beforeTeleEnd += value;
                HookHandler.HookTeleEnd();
            }
            remove => HookHandler._beforeTeleEnd -= value;
        }

        public static event Delegates.FsmHitLanded_BeforeArgs FsmHitLanded
        {
            add
            {
                HookHandler._beforeFsmHitLanded += value;
                HookHandler.HookFsmHitLanded();
            }
            remove => HookHandler._beforeFsmHitLanded -= value;
        }

        public static event Delegates.Explode_BeforeArgs Explode
        {
            add
            {
                HookHandler._beforeExplode += value;
                HookHandler.HookExplode();
            }
            remove => HookHandler._beforeExplode -= value;
        }

        public static event Delegates.FsmCharmsEnd_BeforeArgs FsmCharmsEnd
        {
            add
            {
                HookHandler._beforeFsmCharmsEnd += value;
                HookHandler.HookFsmCharmsEnd();
            }
            remove => HookHandler._beforeFsmCharmsEnd -= value;
        }

        public static event Delegates.CharmsEnd_BeforeArgs CharmsEnd
        {
            add
            {
                HookHandler._beforeCharmsEnd += value;
                HookHandler.HookCharmsEnd();
            }
            remove => HookHandler._beforeCharmsEnd -= value;
        }

        public static event Delegates.FsmHazardReload_BeforeArgs FsmHazardReload
        {
            add
            {
                HookHandler._beforeFsmHazardReload += value;
                HookHandler.HookFsmHazardReload();
            }
            remove => HookHandler._beforeFsmHazardReload -= value;
        }

        public static event Delegates.FsmBenchRestStart_BeforeArgs FsmBenchRestStart
        {
            add
            {
                HookHandler._beforeFsmBenchRestStart += value;
                HookHandler.HookFsmBenchRestStart();
            }
            remove => HookHandler._beforeFsmBenchRestStart -= value;
        }

        public static event Delegates.FsmBenchRestEnd_BeforeArgs FsmBenchRestEnd
        {
            add
            {
                HookHandler._beforeFsmBenchRestEnd += value;
                HookHandler.HookFsmBenchRestEnd();
            }
            remove => HookHandler._beforeFsmBenchRestEnd -= value;
        }

        public static event Delegates.WakeUp_BeforeArgs WakeUp
        {
            add
            {
                HookHandler._beforeWakeUp += value;
                HookHandler.HookWakeUp();
            }
            remove => HookHandler._beforeWakeUp -= value;
        }

        public static event Delegates.FsmQuickSpawn_BeforeArgs FsmQuickSpawn
        {
            add
            {
                HookHandler._beforeFsmQuickSpawn += value;
                HookHandler.HookFsmQuickSpawn();
            }
            remove => HookHandler._beforeFsmQuickSpawn -= value;
        }

        public static event Delegates.FsmDreamGateOut_BeforeArgs FsmDreamGateOut
        {
            add
            {
                HookHandler._beforeFsmDreamGateOut += value;
                HookHandler.HookFsmDreamGateOut();
            }
            remove => HookHandler._beforeFsmDreamGateOut -= value;
        }

        public static event Delegates.DreamGateOut_BeforeArgs DreamGateOut
        {
            add
            {
                HookHandler._beforeDreamGateOut += value;
                HookHandler.HookDreamGateOut();
            }
            remove => HookHandler._beforeDreamGateOut -= value;
        }

        public static event Delegates.DoFace_BeforeArgs DoFace
        {
            add
            {
                HookHandler._beforeDoFace += value;
                HookHandler.HookDoFace();
            }
            remove => HookHandler._beforeDoFace -= value;
        }

        public static event Delegates.DoChase_BeforeArgs DoChase
        {
            add
            {
                HookHandler._beforeDoChase += value;
                HookHandler.HookDoChase();
            }
            remove => HookHandler._beforeDoChase -= value;
        }

        public static event Delegates.DoBuzz_BeforeArgs DoBuzz
        {
            add
            {
                HookHandler._beforeDoBuzz += value;
                HookHandler.HookDoBuzz();
            }
            remove => HookHandler._beforeDoBuzz -= value;
        }

        public static event Delegates.DoChaseSimple_BeforeArgs DoChaseSimple
        {
            add
            {
                HookHandler._beforeDoChaseSimple += value;
                HookHandler.HookDoChaseSimple();
            }
            remove => HookHandler._beforeDoChaseSimple -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsGrounded_AfterArgs get_IsGrounded
        {
            add
            {
                HookHandler._afterget_IsGrounded += value;
                HookHandler.Hookget_IsGrounded();
            }
            remove => HookHandler._afterget_IsGrounded -= value;
        }

        public static event Delegates.set_CurrentState_AfterArgs set_CurrentState
        {
            add
            {
                HookHandler._afterset_CurrentState += value;
                HookHandler.Hookset_CurrentState();
            }
            remove => HookHandler._afterset_CurrentState -= value;
        }

        public static event Delegates.set_LastFrameState_AfterArgs set_LastFrameState
        {
            add
            {
                HookHandler._afterset_LastFrameState += value;
                HookHandler.Hookset_LastFrameState();
            }
            remove => HookHandler._afterset_LastFrameState -= value;
        }

        public static event Delegates.set_PreviousState_AfterArgs set_PreviousState
        {
            add
            {
                HookHandler._afterset_PreviousState += value;
                HookHandler.Hookset_PreviousState();
            }
            remove => HookHandler._afterset_PreviousState -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.GetHeroDistance_AfterArgs GetHeroDistance
        {
            add
            {
                HookHandler._afterGetHeroDistance += value;
                HookHandler.HookGetHeroDistance();
            }
            remove => HookHandler._afterGetHeroDistance -= value;
        }

        public static event Delegates.FsmHitLanded_AfterArgs FsmHitLanded
        {
            add
            {
                HookHandler._afterFsmHitLanded += value;
                HookHandler.HookFsmHitLanded();
            }
            remove => HookHandler._afterFsmHitLanded -= value;
        }

        public static event Delegates.FsmCharmsEnd_AfterArgs FsmCharmsEnd
        {
            add
            {
                HookHandler._afterFsmCharmsEnd += value;
                HookHandler.HookFsmCharmsEnd();
            }
            remove => HookHandler._afterFsmCharmsEnd -= value;
        }

        public static event Delegates.FsmHazardReload_AfterArgs FsmHazardReload
        {
            add
            {
                HookHandler._afterFsmHazardReload += value;
                HookHandler.HookFsmHazardReload();
            }
            remove => HookHandler._afterFsmHazardReload -= value;
        }

        public static event Delegates.FsmBenchRestStart_AfterArgs FsmBenchRestStart
        {
            add
            {
                HookHandler._afterFsmBenchRestStart += value;
                HookHandler.HookFsmBenchRestStart();
            }
            remove => HookHandler._afterFsmBenchRestStart -= value;
        }

        public static event Delegates.FsmBenchRestEnd_AfterArgs FsmBenchRestEnd
        {
            add
            {
                HookHandler._afterFsmBenchRestEnd += value;
                HookHandler.HookFsmBenchRestEnd();
            }
            remove => HookHandler._afterFsmBenchRestEnd -= value;
        }

        public static event Delegates.FsmQuickSpawn_AfterArgs FsmQuickSpawn
        {
            add
            {
                HookHandler._afterFsmQuickSpawn += value;
                HookHandler.HookFsmQuickSpawn();
            }
            remove => HookHandler._afterFsmQuickSpawn -= value;
        }

        public static event Delegates.FsmDreamGateOut_AfterArgs FsmDreamGateOut
        {
            add
            {
                HookHandler._afterFsmDreamGateOut += value;
                HookHandler.HookFsmDreamGateOut();
            }
            remove => HookHandler._afterFsmDreamGateOut -= value;
        }

        public static event Delegates.DoFace_AfterArgs DoFace
        {
            add
            {
                HookHandler._afterDoFace += value;
                HookHandler.HookDoFace();
            }
            remove => HookHandler._afterDoFace -= value;
        }

        public static event Delegates.DoChase_AfterArgs DoChase
        {
            add
            {
                HookHandler._afterDoChase += value;
                HookHandler.HookDoChase();
            }
            remove => HookHandler._afterDoChase -= value;
        }

        public static event Delegates.DoBuzz_AfterArgs DoBuzz
        {
            add
            {
                HookHandler._afterDoBuzz += value;
                HookHandler.HookDoBuzz();
            }
            remove => HookHandler._afterDoBuzz -= value;
        }

        public static event Delegates.DoChaseSimple_AfterArgs DoChaseSimple
        {
            add
            {
                HookHandler._afterDoChaseSimple += value;
                HookHandler.HookDoChaseSimple();
            }
            remove => HookHandler._afterDoChaseSimple -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsGrounded_WithArgs get_IsGrounded
        {
            add => HookEndpointManager.Add<Delegates.get_IsGrounded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "get_IsGrounded"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsGrounded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "get_IsGrounded"), value);
        }

        public static event Delegates.set_CurrentState_WithArgs set_CurrentState
        {
            add => HookEndpointManager.Add<Delegates.set_CurrentState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_CurrentState"), value);
            remove => HookEndpointManager.Remove<Delegates.set_CurrentState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_CurrentState"), value);
        }

        public static event Delegates.set_LastFrameState_WithArgs set_LastFrameState
        {
            add => HookEndpointManager.Add<Delegates.set_LastFrameState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_LastFrameState"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LastFrameState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_LastFrameState"), value);
        }

        public static event Delegates.set_PreviousState_WithArgs set_PreviousState
        {
            add => HookEndpointManager.Add<Delegates.set_PreviousState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_PreviousState"), value);
            remove => HookEndpointManager.Remove<Delegates.set_PreviousState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(KnightHatchling), "set_PreviousState"), value);
        }

        public static event On.KnightHatchling.hook_Awake Awake
        {
            add => On.KnightHatchling.Awake += value;
            remove => On.KnightHatchling.Awake -= value;
        }

        public static event On.KnightHatchling.hook_Start Start
        {
            add => On.KnightHatchling.Start += value;
            remove => On.KnightHatchling.Start -= value;
        }

        public static event On.KnightHatchling.hook_OnEnable OnEnable
        {
            add => On.KnightHatchling.OnEnable += value;
            remove => On.KnightHatchling.OnEnable -= value;
        }

        public static event On.KnightHatchling.hook_OnDisable OnDisable
        {
            add => On.KnightHatchling.OnDisable += value;
            remove => On.KnightHatchling.OnDisable -= value;
        }

        public static event On.KnightHatchling.hook_FixedUpdate FixedUpdate
        {
            add => On.KnightHatchling.FixedUpdate += value;
            remove => On.KnightHatchling.FixedUpdate -= value;
        }

        public static event On.KnightHatchling.hook_Spawn Spawn
        {
            add => On.KnightHatchling.Spawn += value;
            remove => On.KnightHatchling.Spawn -= value;
        }

        public static event On.KnightHatchling.hook_GetHeroDistance GetHeroDistance
        {
            add => On.KnightHatchling.GetHeroDistance += value;
            remove => On.KnightHatchling.GetHeroDistance -= value;
        }

        public static event On.KnightHatchling.hook_TeleEnd TeleEnd
        {
            add => On.KnightHatchling.TeleEnd += value;
            remove => On.KnightHatchling.TeleEnd -= value;
        }

        public static event On.KnightHatchling.hook_FsmHitLanded FsmHitLanded
        {
            add => On.KnightHatchling.FsmHitLanded += value;
            remove => On.KnightHatchling.FsmHitLanded -= value;
        }

        public static event On.KnightHatchling.hook_Explode Explode
        {
            add => On.KnightHatchling.Explode += value;
            remove => On.KnightHatchling.Explode -= value;
        }

        public static event On.KnightHatchling.hook_FsmCharmsEnd FsmCharmsEnd
        {
            add => On.KnightHatchling.FsmCharmsEnd += value;
            remove => On.KnightHatchling.FsmCharmsEnd -= value;
        }

        public static event On.KnightHatchling.hook_CharmsEnd CharmsEnd
        {
            add => On.KnightHatchling.CharmsEnd += value;
            remove => On.KnightHatchling.CharmsEnd -= value;
        }

        public static event On.KnightHatchling.hook_FsmHazardReload FsmHazardReload
        {
            add => On.KnightHatchling.FsmHazardReload += value;
            remove => On.KnightHatchling.FsmHazardReload -= value;
        }

        public static event On.KnightHatchling.hook_FsmBenchRestStart FsmBenchRestStart
        {
            add => On.KnightHatchling.FsmBenchRestStart += value;
            remove => On.KnightHatchling.FsmBenchRestStart -= value;
        }

        public static event On.KnightHatchling.hook_FsmBenchRestEnd FsmBenchRestEnd
        {
            add => On.KnightHatchling.FsmBenchRestEnd += value;
            remove => On.KnightHatchling.FsmBenchRestEnd -= value;
        }

        public static event On.KnightHatchling.hook_WakeUp WakeUp
        {
            add => On.KnightHatchling.WakeUp += value;
            remove => On.KnightHatchling.WakeUp -= value;
        }

        public static event On.KnightHatchling.hook_FsmQuickSpawn FsmQuickSpawn
        {
            add => On.KnightHatchling.FsmQuickSpawn += value;
            remove => On.KnightHatchling.FsmQuickSpawn -= value;
        }

        public static event On.KnightHatchling.hook_FsmDreamGateOut FsmDreamGateOut
        {
            add => On.KnightHatchling.FsmDreamGateOut += value;
            remove => On.KnightHatchling.FsmDreamGateOut -= value;
        }

        public static event On.KnightHatchling.hook_DreamGateOut DreamGateOut
        {
            add => On.KnightHatchling.DreamGateOut += value;
            remove => On.KnightHatchling.DreamGateOut -= value;
        }

        public static event On.KnightHatchling.hook_DoFace DoFace
        {
            add => On.KnightHatchling.DoFace += value;
            remove => On.KnightHatchling.DoFace -= value;
        }

        public static event On.KnightHatchling.hook_DoChase DoChase
        {
            add => On.KnightHatchling.DoChase += value;
            remove => On.KnightHatchling.DoChase -= value;
        }

        public static event On.KnightHatchling.hook_DoBuzz DoBuzz
        {
            add => On.KnightHatchling.DoBuzz += value;
            remove => On.KnightHatchling.DoBuzz -= value;
        }

        public static event On.KnightHatchling.hook_DoChaseSimple DoChaseSimple
        {
            add => On.KnightHatchling.DoChaseSimple += value;
            remove => On.KnightHatchling.DoChaseSimple -= value;
        }
    }
}