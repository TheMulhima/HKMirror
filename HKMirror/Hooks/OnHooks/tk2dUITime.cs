using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUITime class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUITime
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_deltaTime()
        {
            if (!HookedList.Contains("get_deltaTime"))
            {
                HookedList.Add("get_deltaTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUITime), "get_deltaTime", false), get_deltaTime);
            }
        }

        internal static event Delegates.get_deltaTime_BeforeArgs _beforeget_deltaTime;
        internal static event Delegates.get_deltaTime_AfterArgs _afterget_deltaTime;

        private static float get_deltaTime(Func<float> orig)
        {
            if (_beforeget_deltaTime != null)
                foreach (Delegates.get_deltaTime_BeforeArgs toInvoke in _beforeget_deltaTime.GetInvocationList())
                    try
                    {
                        _beforeget_deltaTime?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_deltaTime != null)
                foreach (Delegates.get_deltaTime_AfterArgs toInvoke in _afterget_deltaTime.GetInvocationList())
                    try
                    {
                        retVal = _afterget_deltaTime.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.tk2dUITime.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.tk2dUITime.orig_Init orig)
        {
            if (_beforeInit != null)
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterInit != null)
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.tk2dUITime.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.tk2dUITime.orig_Update orig)
        {
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate float get_deltaTime_AfterArgs(float ret);

        public delegate void get_deltaTime_BeforeArgs();

        public delegate float get_deltaTime_WithArgs(Func<float> orig);

        public delegate void Init_AfterArgs();

        public delegate void Init_BeforeArgs();

        public delegate void Init_WithArgs(Action orig);

        public delegate void Update_AfterArgs();

        public delegate void Update_BeforeArgs();

        public delegate void Update_WithArgs(Action orig);
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_deltaTime_BeforeArgs get_deltaTime
        {
            add
            {
                HookHandler._beforeget_deltaTime += value;
                HookHandler.Hookget_deltaTime();
            }
            remove => HookHandler._beforeget_deltaTime -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_deltaTime_AfterArgs get_deltaTime
        {
            add
            {
                HookHandler._afterget_deltaTime += value;
                HookHandler.Hookget_deltaTime();
            }
            remove => HookHandler._afterget_deltaTime -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_deltaTime_WithArgs get_deltaTime
        {
            add => HookEndpointManager.Add<Delegates.get_deltaTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITime), "get_deltaTime", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_deltaTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUITime), "get_deltaTime", false), value);
        }

        public static event On.tk2dUITime.hook_Init Init
        {
            add => On.tk2dUITime.Init += value;
            remove => On.tk2dUITime.Init -= value;
        }

        public static event On.tk2dUITime.hook_Update Update
        {
            add => On.tk2dUITime.Update += value;
            remove => On.tk2dUITime.Update -= value;
        }
    }
}