using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_Dropdown class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_Dropdown
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_template()
        {
            if (!HookedList.Contains("get_template"))
            {
                HookedList.Add("get_template");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_template"), get_template);
            }
        }

        internal static event Delegates.get_template_BeforeArgs _beforeget_template;
        internal static event Delegates.get_template_NormalArgs _afterget_template;

        private static RectTransform get_template(Func<TMP_Dropdown, RectTransform> orig, TMP_Dropdown self)
        {
            Delegates.Params_get_template @params = new()
            {
                self = self
            };
            _beforeget_template?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_template != null) retVal = _afterget_template.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_template()
        {
            if (!HookedList.Contains("set_template"))
            {
                HookedList.Add("set_template");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_template"), set_template);
            }
        }

        internal static event Delegates.set_template_BeforeArgs _beforeset_template;
        internal static event Delegates.set_template_NormalArgs _afterset_template;

        private static void set_template(Action<TMP_Dropdown, RectTransform> orig, TMP_Dropdown self,
            RectTransform value)
        {
            Delegates.Params_set_template @params = new()
            {
                self = self, value = value
            };
            _beforeset_template?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_template != null) _afterset_template.Invoke(@params);
        }

        internal static void Hookget_captionText()
        {
            if (!HookedList.Contains("get_captionText"))
            {
                HookedList.Add("get_captionText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_captionText"), get_captionText);
            }
        }

        internal static event Delegates.get_captionText_BeforeArgs _beforeget_captionText;
        internal static event Delegates.get_captionText_NormalArgs _afterget_captionText;

        private static TMP_Text get_captionText(Func<TMP_Dropdown, TMP_Text> orig, TMP_Dropdown self)
        {
            Delegates.Params_get_captionText @params = new()
            {
                self = self
            };
            _beforeget_captionText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_captionText != null) retVal = _afterget_captionText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_captionText()
        {
            if (!HookedList.Contains("set_captionText"))
            {
                HookedList.Add("set_captionText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_captionText"), set_captionText);
            }
        }

        internal static event Delegates.set_captionText_BeforeArgs _beforeset_captionText;
        internal static event Delegates.set_captionText_NormalArgs _afterset_captionText;

        private static void set_captionText(Action<TMP_Dropdown, TMP_Text> orig, TMP_Dropdown self, TMP_Text value)
        {
            Delegates.Params_set_captionText @params = new()
            {
                self = self, value = value
            };
            _beforeset_captionText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_captionText != null) _afterset_captionText.Invoke(@params);
        }

        internal static void Hookget_captionImage()
        {
            if (!HookedList.Contains("get_captionImage"))
            {
                HookedList.Add("get_captionImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_captionImage"), get_captionImage);
            }
        }

        internal static event Delegates.get_captionImage_BeforeArgs _beforeget_captionImage;
        internal static event Delegates.get_captionImage_NormalArgs _afterget_captionImage;

        private static Image get_captionImage(Func<TMP_Dropdown, Image> orig, TMP_Dropdown self)
        {
            Delegates.Params_get_captionImage @params = new()
            {
                self = self
            };
            _beforeget_captionImage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_captionImage != null) retVal = _afterget_captionImage.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_captionImage()
        {
            if (!HookedList.Contains("set_captionImage"))
            {
                HookedList.Add("set_captionImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_captionImage"), set_captionImage);
            }
        }

        internal static event Delegates.set_captionImage_BeforeArgs _beforeset_captionImage;
        internal static event Delegates.set_captionImage_NormalArgs _afterset_captionImage;

        private static void set_captionImage(Action<TMP_Dropdown, Image> orig, TMP_Dropdown self, Image value)
        {
            Delegates.Params_set_captionImage @params = new()
            {
                self = self, value = value
            };
            _beforeset_captionImage?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_captionImage != null) _afterset_captionImage.Invoke(@params);
        }

        internal static void Hookget_itemText()
        {
            if (!HookedList.Contains("get_itemText"))
            {
                HookedList.Add("get_itemText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_itemText"), get_itemText);
            }
        }

        internal static event Delegates.get_itemText_BeforeArgs _beforeget_itemText;
        internal static event Delegates.get_itemText_NormalArgs _afterget_itemText;

        private static TMP_Text get_itemText(Func<TMP_Dropdown, TMP_Text> orig, TMP_Dropdown self)
        {
            Delegates.Params_get_itemText @params = new()
            {
                self = self
            };
            _beforeget_itemText?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_itemText != null) retVal = _afterget_itemText.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_itemText()
        {
            if (!HookedList.Contains("set_itemText"))
            {
                HookedList.Add("set_itemText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_itemText"), set_itemText);
            }
        }

        internal static event Delegates.set_itemText_BeforeArgs _beforeset_itemText;
        internal static event Delegates.set_itemText_NormalArgs _afterset_itemText;

        private static void set_itemText(Action<TMP_Dropdown, TMP_Text> orig, TMP_Dropdown self, TMP_Text value)
        {
            Delegates.Params_set_itemText @params = new()
            {
                self = self, value = value
            };
            _beforeset_itemText?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_itemText != null) _afterset_itemText.Invoke(@params);
        }

        internal static void Hookget_itemImage()
        {
            if (!HookedList.Contains("get_itemImage"))
            {
                HookedList.Add("get_itemImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_itemImage"), get_itemImage);
            }
        }

        internal static event Delegates.get_itemImage_BeforeArgs _beforeget_itemImage;
        internal static event Delegates.get_itemImage_NormalArgs _afterget_itemImage;

        private static Image get_itemImage(Func<TMP_Dropdown, Image> orig, TMP_Dropdown self)
        {
            Delegates.Params_get_itemImage @params = new()
            {
                self = self
            };
            _beforeget_itemImage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_itemImage != null) retVal = _afterget_itemImage.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_itemImage()
        {
            if (!HookedList.Contains("set_itemImage"))
            {
                HookedList.Add("set_itemImage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_itemImage"), set_itemImage);
            }
        }

        internal static event Delegates.set_itemImage_BeforeArgs _beforeset_itemImage;
        internal static event Delegates.set_itemImage_NormalArgs _afterset_itemImage;

        private static void set_itemImage(Action<TMP_Dropdown, Image> orig, TMP_Dropdown self, Image value)
        {
            Delegates.Params_set_itemImage @params = new()
            {
                self = self, value = value
            };
            _beforeset_itemImage?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_itemImage != null) _afterset_itemImage.Invoke(@params);
        }

        internal static void Hookget_options()
        {
            if (!HookedList.Contains("get_options"))
            {
                HookedList.Add("get_options");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_options"), get_options);
            }
        }

        internal static event Delegates.get_options_BeforeArgs _beforeget_options;
        internal static event Delegates.get_options_NormalArgs _afterget_options;

        private static List<TMP_Dropdown.OptionData> get_options(Func<TMP_Dropdown, List<TMP_Dropdown.OptionData>> orig,
            TMP_Dropdown self)
        {
            Delegates.Params_get_options @params = new()
            {
                self = self
            };
            _beforeget_options?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_options != null) retVal = _afterget_options.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_value()
        {
            if (!HookedList.Contains("get_value"))
            {
                HookedList.Add("get_value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_value"), get_value);
            }
        }

        internal static event Delegates.get_value_BeforeArgs _beforeget_value;
        internal static event Delegates.get_value_NormalArgs _afterget_value;

        private static int get_value(Func<TMP_Dropdown, int> orig, TMP_Dropdown self)
        {
            Delegates.Params_get_value @params = new()
            {
                self = self
            };
            _beforeget_value?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_value != null) retVal = _afterget_value.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_value()
        {
            if (!HookedList.Contains("set_value"))
            {
                HookedList.Add("set_value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_value"), set_value);
            }
        }

        internal static event Delegates.set_value_BeforeArgs _beforeset_value;
        internal static event Delegates.set_value_NormalArgs _afterset_value;

        private static void set_value(Action<TMP_Dropdown, int> orig, TMP_Dropdown self, int value)
        {
            Delegates.Params_set_value @params = new()
            {
                self = self, value = value
            };
            _beforeset_value?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_value != null) _afterset_value.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Awake"), Awake);
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(Action<TMP_Dropdown> orig, TMP_Dropdown self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookRefreshShownValue()
        {
            if (!HookedList.Contains("RefreshShownValue"))
            {
                HookedList.Add("RefreshShownValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "RefreshShownValue"), RefreshShownValue);
            }
        }

        internal static event Delegates.RefreshShownValue_BeforeArgs _beforeRefreshShownValue;
        internal static event Delegates.RefreshShownValue_NormalArgs _afterRefreshShownValue;

        private static void RefreshShownValue(Action<TMP_Dropdown> orig, TMP_Dropdown self)
        {
            Delegates.Params_RefreshShownValue @params = new()
            {
                self = self
            };
            _beforeRefreshShownValue?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshShownValue != null) _afterRefreshShownValue.Invoke(@params);
        }

        internal static void HookAddOptions_List()
        {
            if (!HookedList.Contains("AddOptions_List"))
            {
                HookedList.Add("AddOptions_List");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AddOptions_List"), AddOptions_List);
            }
        }

        internal static event Delegates.AddOptions_List_BeforeArgs _beforeAddOptions_List;
        internal static event Delegates.AddOptions_List_NormalArgs _afterAddOptions_List;

        private static void AddOptions_List(Action<TMP_Dropdown, List<string>> orig, TMP_Dropdown self,
            List<string> options)
        {
            Delegates.Params_AddOptions_List @params = new()
            {
                self = self, options = options
            };
            _beforeAddOptions_List?.Invoke(@params);
            self = @params.self;
            options = @params.options;
            orig(self, options);
            if (_afterAddOptions_List != null) _afterAddOptions_List.Invoke(@params);
        }

        internal static void HookAddOptions_Sprite()
        {
            if (!HookedList.Contains("AddOptions_Sprite"))
            {
                HookedList.Add("AddOptions_Sprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AddOptions_Sprite"), AddOptions_Sprite);
            }
        }

        internal static event Delegates.AddOptions_Sprite_BeforeArgs _beforeAddOptions_Sprite;
        internal static event Delegates.AddOptions_Sprite_NormalArgs _afterAddOptions_Sprite;

        private static void AddOptions_Sprite(Action<TMP_Dropdown, List<Sprite>> orig, TMP_Dropdown self,
            List<Sprite> options)
        {
            Delegates.Params_AddOptions_Sprite @params = new()
            {
                self = self, options = options
            };
            _beforeAddOptions_Sprite?.Invoke(@params);
            self = @params.self;
            options = @params.options;
            orig(self, options);
            if (_afterAddOptions_Sprite != null) _afterAddOptions_Sprite.Invoke(@params);
        }

        internal static void HookClearOptions()
        {
            if (!HookedList.Contains("ClearOptions"))
            {
                HookedList.Add("ClearOptions");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "ClearOptions"), ClearOptions);
            }
        }

        internal static event Delegates.ClearOptions_BeforeArgs _beforeClearOptions;
        internal static event Delegates.ClearOptions_NormalArgs _afterClearOptions;

        private static void ClearOptions(Action<TMP_Dropdown> orig, TMP_Dropdown self)
        {
            Delegates.Params_ClearOptions @params = new()
            {
                self = self
            };
            _beforeClearOptions?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearOptions != null) _afterClearOptions.Invoke(@params);
        }

        internal static void HookSetupTemplate()
        {
            if (!HookedList.Contains("SetupTemplate"))
            {
                HookedList.Add("SetupTemplate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "SetupTemplate"), SetupTemplate);
            }
        }

        internal static event Delegates.SetupTemplate_BeforeArgs _beforeSetupTemplate;
        internal static event Delegates.SetupTemplate_NormalArgs _afterSetupTemplate;

        private static void SetupTemplate(Action<TMP_Dropdown> orig, TMP_Dropdown self)
        {
            Delegates.Params_SetupTemplate @params = new()
            {
                self = self
            };
            _beforeSetupTemplate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupTemplate != null) _afterSetupTemplate.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<TMP_Dropdown, PointerEventData> orig, TMP_Dropdown self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(Action<TMP_Dropdown, BaseEventData> orig, TMP_Dropdown self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnCancel"), OnCancel);
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_NormalArgs _afterOnCancel;

        private static void OnCancel(Action<TMP_Dropdown, BaseEventData> orig, TMP_Dropdown self,
            BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnCancel?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null) _afterOnCancel.Invoke(@params);
        }

        internal static void HookShow()
        {
            if (!HookedList.Contains("Show"))
            {
                HookedList.Add("Show");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Show"), Show);
            }
        }

        internal static event Delegates.Show_BeforeArgs _beforeShow;
        internal static event Delegates.Show_NormalArgs _afterShow;

        private static void Show(Action<TMP_Dropdown> orig, TMP_Dropdown self)
        {
            Delegates.Params_Show @params = new()
            {
                self = self
            };
            _beforeShow?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShow != null) _afterShow.Invoke(@params);
        }

        internal static void HookCreateBlocker()
        {
            if (!HookedList.Contains("CreateBlocker"))
            {
                HookedList.Add("CreateBlocker");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "CreateBlocker"), CreateBlocker);
            }
        }

        internal static event Delegates.CreateBlocker_BeforeArgs _beforeCreateBlocker;
        internal static event Delegates.CreateBlocker_NormalArgs _afterCreateBlocker;

        private static GameObject CreateBlocker(Func<TMP_Dropdown, Canvas, GameObject> orig, TMP_Dropdown self,
            Canvas rootCanvas)
        {
            Delegates.Params_CreateBlocker @params = new()
            {
                self = self, rootCanvas = rootCanvas
            };
            _beforeCreateBlocker?.Invoke(@params);
            self = @params.self;
            rootCanvas = @params.rootCanvas;
            var retVal = orig(self, rootCanvas);
            if (_afterCreateBlocker != null) retVal = _afterCreateBlocker.Invoke(@params);
            return retVal;
        }

        internal static void HookDestroyBlocker()
        {
            if (!HookedList.Contains("DestroyBlocker"))
            {
                HookedList.Add("DestroyBlocker");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DestroyBlocker"), DestroyBlocker);
            }
        }

        internal static event Delegates.DestroyBlocker_BeforeArgs _beforeDestroyBlocker;
        internal static event Delegates.DestroyBlocker_NormalArgs _afterDestroyBlocker;

        private static void DestroyBlocker(Action<TMP_Dropdown, GameObject> orig, TMP_Dropdown self, GameObject blocker)
        {
            Delegates.Params_DestroyBlocker @params = new()
            {
                self = self, blocker = blocker
            };
            _beforeDestroyBlocker?.Invoke(@params);
            self = @params.self;
            blocker = @params.blocker;
            orig(self, blocker);
            if (_afterDestroyBlocker != null) _afterDestroyBlocker.Invoke(@params);
        }

        internal static void HookCreateDropdownList()
        {
            if (!HookedList.Contains("CreateDropdownList"))
            {
                HookedList.Add("CreateDropdownList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "CreateDropdownList"),
                    CreateDropdownList);
            }
        }

        internal static event Delegates.CreateDropdownList_BeforeArgs _beforeCreateDropdownList;
        internal static event Delegates.CreateDropdownList_NormalArgs _afterCreateDropdownList;

        private static GameObject CreateDropdownList(Func<TMP_Dropdown, GameObject, GameObject> orig, TMP_Dropdown self,
            GameObject template)
        {
            Delegates.Params_CreateDropdownList @params = new()
            {
                self = self, template = template
            };
            _beforeCreateDropdownList?.Invoke(@params);
            self = @params.self;
            template = @params.template;
            var retVal = orig(self, template);
            if (_afterCreateDropdownList != null) retVal = _afterCreateDropdownList.Invoke(@params);
            return retVal;
        }

        internal static void HookDestroyDropdownList()
        {
            if (!HookedList.Contains("DestroyDropdownList"))
            {
                HookedList.Add("DestroyDropdownList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DestroyDropdownList"),
                    DestroyDropdownList);
            }
        }

        internal static event Delegates.DestroyDropdownList_BeforeArgs _beforeDestroyDropdownList;
        internal static event Delegates.DestroyDropdownList_NormalArgs _afterDestroyDropdownList;

        private static void DestroyDropdownList(Action<TMP_Dropdown, GameObject> orig, TMP_Dropdown self,
            GameObject dropdownList)
        {
            Delegates.Params_DestroyDropdownList @params = new()
            {
                self = self, dropdownList = dropdownList
            };
            _beforeDestroyDropdownList?.Invoke(@params);
            self = @params.self;
            dropdownList = @params.dropdownList;
            orig(self, dropdownList);
            if (_afterDestroyDropdownList != null) _afterDestroyDropdownList.Invoke(@params);
        }

        internal static void HookAlphaFadeList_float_float()
        {
            if (!HookedList.Contains("AlphaFadeList_float_float"))
            {
                HookedList.Add("AlphaFadeList_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AlphaFadeList_float_float"),
                    AlphaFadeList_float_float);
            }
        }

        internal static event Delegates.AlphaFadeList_float_float_BeforeArgs _beforeAlphaFadeList_float_float;
        internal static event Delegates.AlphaFadeList_float_float_NormalArgs _afterAlphaFadeList_float_float;

        private static void AlphaFadeList_float_float(Action<TMP_Dropdown, float, float> orig, TMP_Dropdown self,
            float duration, float alpha)
        {
            Delegates.Params_AlphaFadeList_float_float @params = new()
            {
                self = self, duration = duration, alpha = alpha
            };
            _beforeAlphaFadeList_float_float?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            alpha = @params.alpha;
            orig(self, duration, alpha);
            if (_afterAlphaFadeList_float_float != null) _afterAlphaFadeList_float_float.Invoke(@params);
        }

        internal static void HookAlphaFadeList_float_float_float()
        {
            if (!HookedList.Contains("AlphaFadeList_float_float_float"))
            {
                HookedList.Add("AlphaFadeList_float_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AlphaFadeList_float_float_float"),
                    AlphaFadeList_float_float_float);
            }
        }

        internal static event Delegates.AlphaFadeList_float_float_float_BeforeArgs
            _beforeAlphaFadeList_float_float_float;

        internal static event Delegates.AlphaFadeList_float_float_float_NormalArgs
            _afterAlphaFadeList_float_float_float;

        private static void AlphaFadeList_float_float_float(Action<TMP_Dropdown, float, float, float> orig,
            TMP_Dropdown self, float duration, float start, float end)
        {
            Delegates.Params_AlphaFadeList_float_float_float @params = new()
            {
                self = self, duration = duration, start = start, end = end
            };
            _beforeAlphaFadeList_float_float_float?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            start = @params.start;
            end = @params.end;
            orig(self, duration, start, end);
            if (_afterAlphaFadeList_float_float_float != null) _afterAlphaFadeList_float_float_float.Invoke(@params);
        }

        internal static void HookSetAlpha()
        {
            if (!HookedList.Contains("SetAlpha"))
            {
                HookedList.Add("SetAlpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "SetAlpha"), SetAlpha);
            }
        }

        internal static event Delegates.SetAlpha_BeforeArgs _beforeSetAlpha;
        internal static event Delegates.SetAlpha_NormalArgs _afterSetAlpha;

        private static void SetAlpha(Action<TMP_Dropdown, float> orig, TMP_Dropdown self, float alpha)
        {
            Delegates.Params_SetAlpha @params = new()
            {
                self = self, alpha = alpha
            };
            _beforeSetAlpha?.Invoke(@params);
            self = @params.self;
            alpha = @params.alpha;
            orig(self, alpha);
            if (_afterSetAlpha != null) _afterSetAlpha.Invoke(@params);
        }

        internal static void HookHide()
        {
            if (!HookedList.Contains("Hide"))
            {
                HookedList.Add("Hide");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Hide"), Hide);
            }
        }

        internal static event Delegates.Hide_BeforeArgs _beforeHide;
        internal static event Delegates.Hide_NormalArgs _afterHide;

        private static void Hide(Action<TMP_Dropdown> orig, TMP_Dropdown self)
        {
            Delegates.Params_Hide @params = new()
            {
                self = self
            };
            _beforeHide?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHide != null) _afterHide.Invoke(@params);
        }

        internal static void HookDelayedDestroyDropdownList()
        {
            if (!HookedList.Contains("DelayedDestroyDropdownList"))
            {
                HookedList.Add("DelayedDestroyDropdownList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DelayedDestroyDropdownList"),
                    DelayedDestroyDropdownList);
            }
        }

        internal static event Delegates.DelayedDestroyDropdownList_BeforeArgs _beforeDelayedDestroyDropdownList;

        private static IEnumerator DelayedDestroyDropdownList(Func<TMP_Dropdown, float, IEnumerator> orig,
            TMP_Dropdown self, float delay)
        {
            Delegates.Params_DelayedDestroyDropdownList @params = new()
            {
                self = self, delay = delay
            };
            _beforeDelayedDestroyDropdownList?.Invoke(@params);
            self = @params.self;
            delay = @params.delay;
            return orig(self, delay);
        }

        internal static void HookOnSelectItem()
        {
            if (!HookedList.Contains("OnSelectItem"))
            {
                HookedList.Add("OnSelectItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnSelectItem"), OnSelectItem);
            }
        }

        internal static event Delegates.OnSelectItem_BeforeArgs _beforeOnSelectItem;
        internal static event Delegates.OnSelectItem_NormalArgs _afterOnSelectItem;

        private static void OnSelectItem(Action<TMP_Dropdown, Toggle> orig, TMP_Dropdown self, Toggle toggle)
        {
            Delegates.Params_OnSelectItem @params = new()
            {
                self = self, toggle = toggle
            };
            _beforeOnSelectItem?.Invoke(@params);
            self = @params.self;
            toggle = @params.toggle;
            orig(self, toggle);
            if (_afterOnSelectItem != null) _afterOnSelectItem.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddOptions_List_BeforeArgs(Params_AddOptions_List args);

        public delegate void AddOptions_List_NormalArgs(Params_AddOptions_List args);

        public delegate void AddOptions_Sprite_BeforeArgs(Params_AddOptions_Sprite args);

        public delegate void AddOptions_Sprite_NormalArgs(Params_AddOptions_Sprite args);

        public delegate void AlphaFadeList_float_float_BeforeArgs(Params_AlphaFadeList_float_float args);

        public delegate void AlphaFadeList_float_float_float_BeforeArgs(Params_AlphaFadeList_float_float_float args);

        public delegate void AlphaFadeList_float_float_float_NormalArgs(Params_AlphaFadeList_float_float_float args);

        public delegate void AlphaFadeList_float_float_NormalArgs(Params_AlphaFadeList_float_float args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void ClearOptions_BeforeArgs(Params_ClearOptions args);

        public delegate void ClearOptions_NormalArgs(Params_ClearOptions args);

        public delegate void CreateBlocker_BeforeArgs(Params_CreateBlocker args);

        public delegate GameObject CreateBlocker_NormalArgs(Params_CreateBlocker args);

        public delegate void CreateDropdownList_BeforeArgs(Params_CreateDropdownList args);

        public delegate GameObject CreateDropdownList_NormalArgs(Params_CreateDropdownList args);

        public delegate void DelayedDestroyDropdownList_BeforeArgs(Params_DelayedDestroyDropdownList args);

        public delegate IEnumerator DelayedDestroyDropdownList_NormalArgs(Params_DelayedDestroyDropdownList args);

        public delegate void DestroyBlocker_BeforeArgs(Params_DestroyBlocker args);

        public delegate void DestroyBlocker_NormalArgs(Params_DestroyBlocker args);

        public delegate void DestroyDropdownList_BeforeArgs(Params_DestroyDropdownList args);

        public delegate void DestroyDropdownList_NormalArgs(Params_DestroyDropdownList args);

        public delegate void get_captionImage_BeforeArgs(Params_get_captionImage args);

        public delegate Image get_captionImage_NormalArgs(Params_get_captionImage args);

        public delegate void get_captionText_BeforeArgs(Params_get_captionText args);

        public delegate TMP_Text get_captionText_NormalArgs(Params_get_captionText args);

        public delegate void get_itemImage_BeforeArgs(Params_get_itemImage args);

        public delegate Image get_itemImage_NormalArgs(Params_get_itemImage args);

        public delegate void get_itemText_BeforeArgs(Params_get_itemText args);

        public delegate TMP_Text get_itemText_NormalArgs(Params_get_itemText args);

        public delegate void get_options_BeforeArgs(Params_get_options args);

        public delegate List<TMP_Dropdown.OptionData> get_options_NormalArgs(Params_get_options args);

        public delegate void get_template_BeforeArgs(Params_get_template args);

        public delegate RectTransform get_template_NormalArgs(Params_get_template args);

        public delegate void get_value_BeforeArgs(Params_get_value args);

        public delegate int get_value_NormalArgs(Params_get_value args);

        public delegate void Hide_BeforeArgs(Params_Hide args);

        public delegate void Hide_NormalArgs(Params_Hide args);

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_NormalArgs(Params_OnCancel args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnSelectItem_BeforeArgs(Params_OnSelectItem args);

        public delegate void OnSelectItem_NormalArgs(Params_OnSelectItem args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void RefreshShownValue_BeforeArgs(Params_RefreshShownValue args);

        public delegate void RefreshShownValue_NormalArgs(Params_RefreshShownValue args);

        public delegate void set_captionImage_BeforeArgs(Params_set_captionImage args);

        public delegate void set_captionImage_NormalArgs(Params_set_captionImage args);

        public delegate void set_captionText_BeforeArgs(Params_set_captionText args);

        public delegate void set_captionText_NormalArgs(Params_set_captionText args);

        public delegate void set_itemImage_BeforeArgs(Params_set_itemImage args);

        public delegate void set_itemImage_NormalArgs(Params_set_itemImage args);

        public delegate void set_itemText_BeforeArgs(Params_set_itemText args);

        public delegate void set_itemText_NormalArgs(Params_set_itemText args);

        public delegate void set_template_BeforeArgs(Params_set_template args);

        public delegate void set_template_NormalArgs(Params_set_template args);

        public delegate void set_value_BeforeArgs(Params_set_value args);

        public delegate void set_value_NormalArgs(Params_set_value args);

        public delegate void SetAlpha_BeforeArgs(Params_SetAlpha args);

        public delegate void SetAlpha_NormalArgs(Params_SetAlpha args);

        public delegate void SetupTemplate_BeforeArgs(Params_SetupTemplate args);

        public delegate void SetupTemplate_NormalArgs(Params_SetupTemplate args);

        public delegate void Show_BeforeArgs(Params_Show args);

        public delegate void Show_NormalArgs(Params_Show args);

        public sealed class Params_get_template
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_set_template
        {
            public TMP_Dropdown self;
            public RectTransform value;
        }

        public sealed class Params_get_captionText
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_set_captionText
        {
            public TMP_Dropdown self;
            public TMP_Text value;
        }

        public sealed class Params_get_captionImage
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_set_captionImage
        {
            public TMP_Dropdown self;
            public Image value;
        }

        public sealed class Params_get_itemText
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_set_itemText
        {
            public TMP_Dropdown self;
            public TMP_Text value;
        }

        public sealed class Params_get_itemImage
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_set_itemImage
        {
            public TMP_Dropdown self;
            public Image value;
        }

        public sealed class Params_get_options
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_get_value
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_set_value
        {
            public TMP_Dropdown self;
            public int value;
        }

        public sealed class Params_Awake
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_RefreshShownValue
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_AddOptions_List
        {
            public List<string> options;
            public TMP_Dropdown self;
        }

        public sealed class Params_AddOptions_Sprite
        {
            public List<Sprite> options;
            public TMP_Dropdown self;
        }

        public sealed class Params_ClearOptions
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_SetupTemplate
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public TMP_Dropdown self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public TMP_Dropdown self;
        }

        public sealed class Params_OnCancel
        {
            public BaseEventData eventData;
            public TMP_Dropdown self;
        }

        public sealed class Params_Show
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_CreateBlocker
        {
            public Canvas rootCanvas;
            public TMP_Dropdown self;
        }

        public sealed class Params_DestroyBlocker
        {
            public GameObject blocker;
            public TMP_Dropdown self;
        }

        public sealed class Params_CreateDropdownList
        {
            public TMP_Dropdown self;
            public GameObject template;
        }

        public sealed class Params_DestroyDropdownList
        {
            public GameObject dropdownList;
            public TMP_Dropdown self;
        }

        public sealed class Params_AlphaFadeList_float_float
        {
            public float alpha;
            public float duration;
            public TMP_Dropdown self;
        }

        public sealed class Params_AlphaFadeList_float_float_float
        {
            public float duration;
            public float end;
            public TMP_Dropdown self;
            public float start;
        }

        public sealed class Params_SetAlpha
        {
            public float alpha;
            public TMP_Dropdown self;
        }

        public sealed class Params_Hide
        {
            public TMP_Dropdown self;
        }

        public sealed class Params_DelayedDestroyDropdownList
        {
            public float delay;
            public TMP_Dropdown self;
        }

        public sealed class Params_OnSelectItem
        {
            public TMP_Dropdown self;
            public Toggle toggle;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_template_BeforeArgs get_template
        {
            add
            {
                HookHandler._beforeget_template += value;
                HookHandler.Hookget_template();
            }
            remove => HookHandler._beforeget_template -= value;
        }

        public static event Delegates.set_template_BeforeArgs set_template
        {
            add
            {
                HookHandler._beforeset_template += value;
                HookHandler.Hookset_template();
            }
            remove => HookHandler._beforeset_template -= value;
        }

        public static event Delegates.get_captionText_BeforeArgs get_captionText
        {
            add
            {
                HookHandler._beforeget_captionText += value;
                HookHandler.Hookget_captionText();
            }
            remove => HookHandler._beforeget_captionText -= value;
        }

        public static event Delegates.set_captionText_BeforeArgs set_captionText
        {
            add
            {
                HookHandler._beforeset_captionText += value;
                HookHandler.Hookset_captionText();
            }
            remove => HookHandler._beforeset_captionText -= value;
        }

        public static event Delegates.get_captionImage_BeforeArgs get_captionImage
        {
            add
            {
                HookHandler._beforeget_captionImage += value;
                HookHandler.Hookget_captionImage();
            }
            remove => HookHandler._beforeget_captionImage -= value;
        }

        public static event Delegates.set_captionImage_BeforeArgs set_captionImage
        {
            add
            {
                HookHandler._beforeset_captionImage += value;
                HookHandler.Hookset_captionImage();
            }
            remove => HookHandler._beforeset_captionImage -= value;
        }

        public static event Delegates.get_itemText_BeforeArgs get_itemText
        {
            add
            {
                HookHandler._beforeget_itemText += value;
                HookHandler.Hookget_itemText();
            }
            remove => HookHandler._beforeget_itemText -= value;
        }

        public static event Delegates.set_itemText_BeforeArgs set_itemText
        {
            add
            {
                HookHandler._beforeset_itemText += value;
                HookHandler.Hookset_itemText();
            }
            remove => HookHandler._beforeset_itemText -= value;
        }

        public static event Delegates.get_itemImage_BeforeArgs get_itemImage
        {
            add
            {
                HookHandler._beforeget_itemImage += value;
                HookHandler.Hookget_itemImage();
            }
            remove => HookHandler._beforeget_itemImage -= value;
        }

        public static event Delegates.set_itemImage_BeforeArgs set_itemImage
        {
            add
            {
                HookHandler._beforeset_itemImage += value;
                HookHandler.Hookset_itemImage();
            }
            remove => HookHandler._beforeset_itemImage -= value;
        }

        public static event Delegates.get_options_BeforeArgs get_options
        {
            add
            {
                HookHandler._beforeget_options += value;
                HookHandler.Hookget_options();
            }
            remove => HookHandler._beforeget_options -= value;
        }

        public static event Delegates.get_value_BeforeArgs get_value
        {
            add
            {
                HookHandler._beforeget_value += value;
                HookHandler.Hookget_value();
            }
            remove => HookHandler._beforeget_value -= value;
        }

        public static event Delegates.set_value_BeforeArgs set_value
        {
            add
            {
                HookHandler._beforeset_value += value;
                HookHandler.Hookset_value();
            }
            remove => HookHandler._beforeset_value -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.RefreshShownValue_BeforeArgs RefreshShownValue
        {
            add
            {
                HookHandler._beforeRefreshShownValue += value;
                HookHandler.HookRefreshShownValue();
            }
            remove => HookHandler._beforeRefreshShownValue -= value;
        }

        public static event Delegates.AddOptions_List_BeforeArgs AddOptions_List
        {
            add
            {
                HookHandler._beforeAddOptions_List += value;
                HookHandler.HookAddOptions_List();
            }
            remove => HookHandler._beforeAddOptions_List -= value;
        }

        public static event Delegates.AddOptions_Sprite_BeforeArgs AddOptions_Sprite
        {
            add
            {
                HookHandler._beforeAddOptions_Sprite += value;
                HookHandler.HookAddOptions_Sprite();
            }
            remove => HookHandler._beforeAddOptions_Sprite -= value;
        }

        public static event Delegates.ClearOptions_BeforeArgs ClearOptions
        {
            add
            {
                HookHandler._beforeClearOptions += value;
                HookHandler.HookClearOptions();
            }
            remove => HookHandler._beforeClearOptions -= value;
        }

        public static event Delegates.SetupTemplate_BeforeArgs SetupTemplate
        {
            add
            {
                HookHandler._beforeSetupTemplate += value;
                HookHandler.HookSetupTemplate();
            }
            remove => HookHandler._beforeSetupTemplate -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.Show_BeforeArgs Show
        {
            add
            {
                HookHandler._beforeShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._beforeShow -= value;
        }

        public static event Delegates.CreateBlocker_BeforeArgs CreateBlocker
        {
            add
            {
                HookHandler._beforeCreateBlocker += value;
                HookHandler.HookCreateBlocker();
            }
            remove => HookHandler._beforeCreateBlocker -= value;
        }

        public static event Delegates.DestroyBlocker_BeforeArgs DestroyBlocker
        {
            add
            {
                HookHandler._beforeDestroyBlocker += value;
                HookHandler.HookDestroyBlocker();
            }
            remove => HookHandler._beforeDestroyBlocker -= value;
        }

        public static event Delegates.CreateDropdownList_BeforeArgs CreateDropdownList
        {
            add
            {
                HookHandler._beforeCreateDropdownList += value;
                HookHandler.HookCreateDropdownList();
            }
            remove => HookHandler._beforeCreateDropdownList -= value;
        }

        public static event Delegates.DestroyDropdownList_BeforeArgs DestroyDropdownList
        {
            add
            {
                HookHandler._beforeDestroyDropdownList += value;
                HookHandler.HookDestroyDropdownList();
            }
            remove => HookHandler._beforeDestroyDropdownList -= value;
        }

        public static event Delegates.AlphaFadeList_float_float_BeforeArgs AlphaFadeList_float_float
        {
            add
            {
                HookHandler._beforeAlphaFadeList_float_float += value;
                HookHandler.HookAlphaFadeList_float_float();
            }
            remove => HookHandler._beforeAlphaFadeList_float_float -= value;
        }

        public static event Delegates.AlphaFadeList_float_float_float_BeforeArgs AlphaFadeList_float_float_float
        {
            add
            {
                HookHandler._beforeAlphaFadeList_float_float_float += value;
                HookHandler.HookAlphaFadeList_float_float_float();
            }
            remove => HookHandler._beforeAlphaFadeList_float_float_float -= value;
        }

        public static event Delegates.SetAlpha_BeforeArgs SetAlpha
        {
            add
            {
                HookHandler._beforeSetAlpha += value;
                HookHandler.HookSetAlpha();
            }
            remove => HookHandler._beforeSetAlpha -= value;
        }

        public static event Delegates.Hide_BeforeArgs Hide
        {
            add
            {
                HookHandler._beforeHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._beforeHide -= value;
        }

        public static event Delegates.DelayedDestroyDropdownList_BeforeArgs DelayedDestroyDropdownList
        {
            add
            {
                HookHandler._beforeDelayedDestroyDropdownList += value;
                HookHandler.HookDelayedDestroyDropdownList();
            }
            remove => HookHandler._beforeDelayedDestroyDropdownList -= value;
        }

        public static event Delegates.OnSelectItem_BeforeArgs OnSelectItem
        {
            add
            {
                HookHandler._beforeOnSelectItem += value;
                HookHandler.HookOnSelectItem();
            }
            remove => HookHandler._beforeOnSelectItem -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_template_NormalArgs get_template
        {
            add
            {
                HookHandler._afterget_template += value;
                HookHandler.Hookget_template();
            }
            remove => HookHandler._afterget_template -= value;
        }

        public static event Delegates.set_template_NormalArgs set_template
        {
            add
            {
                HookHandler._afterset_template += value;
                HookHandler.Hookset_template();
            }
            remove => HookHandler._afterset_template -= value;
        }

        public static event Delegates.get_captionText_NormalArgs get_captionText
        {
            add
            {
                HookHandler._afterget_captionText += value;
                HookHandler.Hookget_captionText();
            }
            remove => HookHandler._afterget_captionText -= value;
        }

        public static event Delegates.set_captionText_NormalArgs set_captionText
        {
            add
            {
                HookHandler._afterset_captionText += value;
                HookHandler.Hookset_captionText();
            }
            remove => HookHandler._afterset_captionText -= value;
        }

        public static event Delegates.get_captionImage_NormalArgs get_captionImage
        {
            add
            {
                HookHandler._afterget_captionImage += value;
                HookHandler.Hookget_captionImage();
            }
            remove => HookHandler._afterget_captionImage -= value;
        }

        public static event Delegates.set_captionImage_NormalArgs set_captionImage
        {
            add
            {
                HookHandler._afterset_captionImage += value;
                HookHandler.Hookset_captionImage();
            }
            remove => HookHandler._afterset_captionImage -= value;
        }

        public static event Delegates.get_itemText_NormalArgs get_itemText
        {
            add
            {
                HookHandler._afterget_itemText += value;
                HookHandler.Hookget_itemText();
            }
            remove => HookHandler._afterget_itemText -= value;
        }

        public static event Delegates.set_itemText_NormalArgs set_itemText
        {
            add
            {
                HookHandler._afterset_itemText += value;
                HookHandler.Hookset_itemText();
            }
            remove => HookHandler._afterset_itemText -= value;
        }

        public static event Delegates.get_itemImage_NormalArgs get_itemImage
        {
            add
            {
                HookHandler._afterget_itemImage += value;
                HookHandler.Hookget_itemImage();
            }
            remove => HookHandler._afterget_itemImage -= value;
        }

        public static event Delegates.set_itemImage_NormalArgs set_itemImage
        {
            add
            {
                HookHandler._afterset_itemImage += value;
                HookHandler.Hookset_itemImage();
            }
            remove => HookHandler._afterset_itemImage -= value;
        }

        public static event Delegates.get_options_NormalArgs get_options
        {
            add
            {
                HookHandler._afterget_options += value;
                HookHandler.Hookget_options();
            }
            remove => HookHandler._afterget_options -= value;
        }

        public static event Delegates.get_value_NormalArgs get_value
        {
            add
            {
                HookHandler._afterget_value += value;
                HookHandler.Hookget_value();
            }
            remove => HookHandler._afterget_value -= value;
        }

        public static event Delegates.set_value_NormalArgs set_value
        {
            add
            {
                HookHandler._afterset_value += value;
                HookHandler.Hookset_value();
            }
            remove => HookHandler._afterset_value -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.RefreshShownValue_NormalArgs RefreshShownValue
        {
            add
            {
                HookHandler._afterRefreshShownValue += value;
                HookHandler.HookRefreshShownValue();
            }
            remove => HookHandler._afterRefreshShownValue -= value;
        }

        public static event Delegates.AddOptions_List_NormalArgs AddOptions_List
        {
            add
            {
                HookHandler._afterAddOptions_List += value;
                HookHandler.HookAddOptions_List();
            }
            remove => HookHandler._afterAddOptions_List -= value;
        }

        public static event Delegates.AddOptions_Sprite_NormalArgs AddOptions_Sprite
        {
            add
            {
                HookHandler._afterAddOptions_Sprite += value;
                HookHandler.HookAddOptions_Sprite();
            }
            remove => HookHandler._afterAddOptions_Sprite -= value;
        }

        public static event Delegates.ClearOptions_NormalArgs ClearOptions
        {
            add
            {
                HookHandler._afterClearOptions += value;
                HookHandler.HookClearOptions();
            }
            remove => HookHandler._afterClearOptions -= value;
        }

        public static event Delegates.SetupTemplate_NormalArgs SetupTemplate
        {
            add
            {
                HookHandler._afterSetupTemplate += value;
                HookHandler.HookSetupTemplate();
            }
            remove => HookHandler._afterSetupTemplate -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnCancel_NormalArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.Show_NormalArgs Show
        {
            add
            {
                HookHandler._afterShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._afterShow -= value;
        }

        public static event Delegates.CreateBlocker_NormalArgs CreateBlocker
        {
            add
            {
                HookHandler._afterCreateBlocker += value;
                HookHandler.HookCreateBlocker();
            }
            remove => HookHandler._afterCreateBlocker -= value;
        }

        public static event Delegates.DestroyBlocker_NormalArgs DestroyBlocker
        {
            add
            {
                HookHandler._afterDestroyBlocker += value;
                HookHandler.HookDestroyBlocker();
            }
            remove => HookHandler._afterDestroyBlocker -= value;
        }

        public static event Delegates.CreateDropdownList_NormalArgs CreateDropdownList
        {
            add
            {
                HookHandler._afterCreateDropdownList += value;
                HookHandler.HookCreateDropdownList();
            }
            remove => HookHandler._afterCreateDropdownList -= value;
        }

        public static event Delegates.DestroyDropdownList_NormalArgs DestroyDropdownList
        {
            add
            {
                HookHandler._afterDestroyDropdownList += value;
                HookHandler.HookDestroyDropdownList();
            }
            remove => HookHandler._afterDestroyDropdownList -= value;
        }

        public static event Delegates.AlphaFadeList_float_float_NormalArgs AlphaFadeList_float_float
        {
            add
            {
                HookHandler._afterAlphaFadeList_float_float += value;
                HookHandler.HookAlphaFadeList_float_float();
            }
            remove => HookHandler._afterAlphaFadeList_float_float -= value;
        }

        public static event Delegates.AlphaFadeList_float_float_float_NormalArgs AlphaFadeList_float_float_float
        {
            add
            {
                HookHandler._afterAlphaFadeList_float_float_float += value;
                HookHandler.HookAlphaFadeList_float_float_float();
            }
            remove => HookHandler._afterAlphaFadeList_float_float_float -= value;
        }

        public static event Delegates.SetAlpha_NormalArgs SetAlpha
        {
            add
            {
                HookHandler._afterSetAlpha += value;
                HookHandler.HookSetAlpha();
            }
            remove => HookHandler._afterSetAlpha -= value;
        }

        public static event Delegates.Hide_NormalArgs Hide
        {
            add
            {
                HookHandler._afterHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._afterHide -= value;
        }

        public static event Delegates.OnSelectItem_NormalArgs OnSelectItem
        {
            add
            {
                HookHandler._afterOnSelectItem += value;
                HookHandler.HookOnSelectItem();
            }
            remove => HookHandler._afterOnSelectItem -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_template_NormalArgs get_template
        {
            add => HookEndpointManager.Add<Delegates.get_template_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_template"), value);
            remove => HookEndpointManager.Remove<Delegates.get_template_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_template"), value);
        }

        public static event Delegates.set_template_NormalArgs set_template
        {
            add => HookEndpointManager.Add<Delegates.set_template_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_template"), value);
            remove => HookEndpointManager.Remove<Delegates.set_template_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_template"), value);
        }

        public static event Delegates.get_captionText_NormalArgs get_captionText
        {
            add => HookEndpointManager.Add<Delegates.get_captionText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_captionText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_captionText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_captionText"), value);
        }

        public static event Delegates.set_captionText_NormalArgs set_captionText
        {
            add => HookEndpointManager.Add<Delegates.set_captionText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_captionText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_captionText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_captionText"), value);
        }

        public static event Delegates.get_captionImage_NormalArgs get_captionImage
        {
            add => HookEndpointManager.Add<Delegates.get_captionImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_captionImage"), value);
            remove => HookEndpointManager.Remove<Delegates.get_captionImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_captionImage"), value);
        }

        public static event Delegates.set_captionImage_NormalArgs set_captionImage
        {
            add => HookEndpointManager.Add<Delegates.set_captionImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_captionImage"), value);
            remove => HookEndpointManager.Remove<Delegates.set_captionImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_captionImage"), value);
        }

        public static event Delegates.get_itemText_NormalArgs get_itemText
        {
            add => HookEndpointManager.Add<Delegates.get_itemText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_itemText"), value);
            remove => HookEndpointManager.Remove<Delegates.get_itemText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_itemText"), value);
        }

        public static event Delegates.set_itemText_NormalArgs set_itemText
        {
            add => HookEndpointManager.Add<Delegates.set_itemText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_itemText"), value);
            remove => HookEndpointManager.Remove<Delegates.set_itemText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_itemText"), value);
        }

        public static event Delegates.get_itemImage_NormalArgs get_itemImage
        {
            add => HookEndpointManager.Add<Delegates.get_itemImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_itemImage"), value);
            remove => HookEndpointManager.Remove<Delegates.get_itemImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_itemImage"), value);
        }

        public static event Delegates.set_itemImage_NormalArgs set_itemImage
        {
            add => HookEndpointManager.Add<Delegates.set_itemImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_itemImage"), value);
            remove => HookEndpointManager.Remove<Delegates.set_itemImage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_itemImage"), value);
        }

        public static event Delegates.get_options_NormalArgs get_options
        {
            add => HookEndpointManager.Add<Delegates.get_options_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_options"), value);
            remove => HookEndpointManager.Remove<Delegates.get_options_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_options"), value);
        }

        public static event Delegates.get_value_NormalArgs get_value
        {
            add => HookEndpointManager.Add<Delegates.get_value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_value"), value);
            remove => HookEndpointManager.Remove<Delegates.get_value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "get_value"), value);
        }

        public static event Delegates.set_value_NormalArgs set_value
        {
            add => HookEndpointManager.Add<Delegates.set_value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_value"), value);
            remove => HookEndpointManager.Remove<Delegates.set_value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "set_value"), value);
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add => HookEndpointManager.Add<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Awake"), value);
        }

        public static event Delegates.RefreshShownValue_NormalArgs RefreshShownValue
        {
            add => HookEndpointManager.Add<Delegates.RefreshShownValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "RefreshShownValue"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshShownValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "RefreshShownValue"), value);
        }

        public static event Delegates.AddOptions_List_NormalArgs AddOptions_List
        {
            add => HookEndpointManager.Add<Delegates.AddOptions_List_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AddOptions"), value);
            remove => HookEndpointManager.Remove<Delegates.AddOptions_List_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AddOptions"), value);
        }

        public static event Delegates.AddOptions_Sprite_NormalArgs AddOptions_Sprite
        {
            add => HookEndpointManager.Add<Delegates.AddOptions_Sprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AddOptions"), value);
            remove => HookEndpointManager.Remove<Delegates.AddOptions_Sprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AddOptions"), value);
        }

        public static event Delegates.ClearOptions_NormalArgs ClearOptions
        {
            add => HookEndpointManager.Add<Delegates.ClearOptions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "ClearOptions"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearOptions_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "ClearOptions"), value);
        }

        public static event Delegates.SetupTemplate_NormalArgs SetupTemplate
        {
            add => HookEndpointManager.Add<Delegates.SetupTemplate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "SetupTemplate"), value);
            remove => HookEndpointManager.Remove<Delegates.SetupTemplate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "SetupTemplate"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnPointerClick"), value);
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnSubmit"), value);
        }

        public static event Delegates.OnCancel_NormalArgs OnCancel
        {
            add => HookEndpointManager.Add<Delegates.OnCancel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnCancel"), value);
            remove => HookEndpointManager.Remove<Delegates.OnCancel_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnCancel"), value);
        }

        public static event Delegates.Show_NormalArgs Show
        {
            add => HookEndpointManager.Add<Delegates.Show_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Show"), value);
            remove => HookEndpointManager.Remove<Delegates.Show_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Show"), value);
        }

        public static event Delegates.CreateBlocker_NormalArgs CreateBlocker
        {
            add => HookEndpointManager.Add<Delegates.CreateBlocker_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "CreateBlocker"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateBlocker_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "CreateBlocker"), value);
        }

        public static event Delegates.DestroyBlocker_NormalArgs DestroyBlocker
        {
            add => HookEndpointManager.Add<Delegates.DestroyBlocker_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DestroyBlocker"), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyBlocker_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DestroyBlocker"), value);
        }

        public static event Delegates.CreateDropdownList_NormalArgs CreateDropdownList
        {
            add => HookEndpointManager.Add<Delegates.CreateDropdownList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "CreateDropdownList"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateDropdownList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "CreateDropdownList"), value);
        }

        public static event Delegates.DestroyDropdownList_NormalArgs DestroyDropdownList
        {
            add => HookEndpointManager.Add<Delegates.DestroyDropdownList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DestroyDropdownList"), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyDropdownList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DestroyDropdownList"), value);
        }

        public static event Delegates.AlphaFadeList_float_float_NormalArgs AlphaFadeList_float_float
        {
            add => HookEndpointManager.Add<Delegates.AlphaFadeList_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AlphaFadeList"), value);
            remove => HookEndpointManager.Remove<Delegates.AlphaFadeList_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AlphaFadeList"), value);
        }

        public static event Delegates.AlphaFadeList_float_float_float_NormalArgs AlphaFadeList_float_float_float
        {
            add => HookEndpointManager.Add<Delegates.AlphaFadeList_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AlphaFadeList"), value);
            remove => HookEndpointManager.Remove<Delegates.AlphaFadeList_float_float_float_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "AlphaFadeList"), value);
        }

        public static event Delegates.SetAlpha_NormalArgs SetAlpha
        {
            add => HookEndpointManager.Add<Delegates.SetAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "SetAlpha"), value);
            remove => HookEndpointManager.Remove<Delegates.SetAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "SetAlpha"), value);
        }

        public static event Delegates.Hide_NormalArgs Hide
        {
            add => HookEndpointManager.Add<Delegates.Hide_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Hide"), value);
            remove => HookEndpointManager.Remove<Delegates.Hide_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "Hide"), value);
        }

        public static event Delegates.DelayedDestroyDropdownList_NormalArgs DelayedDestroyDropdownList
        {
            add => HookEndpointManager.Add<Delegates.DelayedDestroyDropdownList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DelayedDestroyDropdownList"), value);
            remove => HookEndpointManager.Remove<Delegates.DelayedDestroyDropdownList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "DelayedDestroyDropdownList"), value);
        }

        public static event Delegates.OnSelectItem_NormalArgs OnSelectItem
        {
            add => HookEndpointManager.Add<Delegates.OnSelectItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnSelectItem"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelectItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Dropdown), "OnSelectItem"), value);
        }
    }
}