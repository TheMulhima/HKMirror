using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TestInputManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTestInputManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHandleInputUpdate()
        {
            if (!HookedList.Contains("HandleInputUpdate"))
            {
                HookedList.Add("HandleInputUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "HandleInputUpdate"),
                    HandleInputUpdate);
            }
        }

        internal static event Delegates.HandleInputUpdate_BeforeArgs _beforeHandleInputUpdate;
        internal static event Delegates.HandleInputUpdate_AfterArgs _afterHandleInputUpdate;

        private static void HandleInputUpdate(Action<TestInputManager, ulong, float> orig, TestInputManager self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_HandleInputUpdate @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeHandleInputUpdate != null)
                foreach (Delegates.HandleInputUpdate_BeforeArgs toInvoke in
                         _beforeHandleInputUpdate.GetInvocationList())
                    try
                    {
                        _beforeHandleInputUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterHandleInputUpdate != null)
                foreach (Delegates.HandleInputUpdate_AfterArgs toInvoke in _afterHandleInputUpdate.GetInvocationList())
                    try
                    {
                        _afterHandleInputUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckForPauseButton()
        {
            if (!HookedList.Contains("CheckForPauseButton"))
            {
                HookedList.Add("CheckForPauseButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "CheckForPauseButton"),
                    CheckForPauseButton);
            }
        }

        internal static event Delegates.CheckForPauseButton_BeforeArgs _beforeCheckForPauseButton;
        internal static event Delegates.CheckForPauseButton_AfterArgs _afterCheckForPauseButton;

        private static void CheckForPauseButton(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_CheckForPauseButton @params = new()
            {
                self = self
            };
            if (_beforeCheckForPauseButton != null)
                foreach (Delegates.CheckForPauseButton_BeforeArgs toInvoke in _beforeCheckForPauseButton
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckForPauseButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckForPauseButton != null)
                foreach (Delegates.CheckForPauseButton_AfterArgs toInvoke in
                         _afterCheckForPauseButton.GetInvocationList())
                    try
                    {
                        _afterCheckForPauseButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetColor()
        {
            if (!HookedList.Contains("SetColor"))
            {
                HookedList.Add("SetColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "SetColor"), SetColor);
            }
        }

        internal static event Delegates.SetColor_BeforeArgs _beforeSetColor;
        internal static event Delegates.SetColor_AfterArgs _afterSetColor;

        private static void SetColor(Action<TestInputManager, Color> orig, TestInputManager self, Color color)
        {
            Delegates.Params_SetColor @params = new()
            {
                self = self, color = color
            };
            if (_beforeSetColor != null)
                foreach (Delegates.SetColor_BeforeArgs toInvoke in _beforeSetColor.GetInvocationList())
                    try
                    {
                        _beforeSetColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterSetColor != null)
                foreach (Delegates.SetColor_AfterArgs toInvoke in _afterSetColor.GetInvocationList())
                    try
                    {
                        _afterSetColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnGUI"), OnGUI);
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;

        private static void OnGUI(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            if (_beforeOnGUI != null)
                foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
                    try
                    {
                        _beforeOnGUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnGUI != null)
                foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
                    try
                    {
                        _afterOnGUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawUnityInputDebugger()
        {
            if (!HookedList.Contains("DrawUnityInputDebugger"))
            {
                HookedList.Add("DrawUnityInputDebugger");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "DrawUnityInputDebugger"),
                    DrawUnityInputDebugger);
            }
        }

        internal static event Delegates.DrawUnityInputDebugger_BeforeArgs _beforeDrawUnityInputDebugger;
        internal static event Delegates.DrawUnityInputDebugger_AfterArgs _afterDrawUnityInputDebugger;

        private static void DrawUnityInputDebugger(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_DrawUnityInputDebugger @params = new()
            {
                self = self
            };
            if (_beforeDrawUnityInputDebugger != null)
                foreach (Delegates.DrawUnityInputDebugger_BeforeArgs toInvoke in _beforeDrawUnityInputDebugger
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawUnityInputDebugger?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterDrawUnityInputDebugger != null)
                foreach (Delegates.DrawUnityInputDebugger_AfterArgs toInvoke in _afterDrawUnityInputDebugger
                             .GetInvocationList())
                    try
                    {
                        _afterDrawUnityInputDebugger.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDrawGizmos()
        {
            if (!HookedList.Contains("OnDrawGizmos"))
            {
                HookedList.Add("OnDrawGizmos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnDrawGizmos"), OnDrawGizmos);
            }
        }

        internal static event Delegates.OnDrawGizmos_BeforeArgs _beforeOnDrawGizmos;
        internal static event Delegates.OnDrawGizmos_AfterArgs _afterOnDrawGizmos;

        private static void OnDrawGizmos(Action<TestInputManager> orig, TestInputManager self)
        {
            Delegates.Params_OnDrawGizmos @params = new()
            {
                self = self
            };
            if (_beforeOnDrawGizmos != null)
                foreach (Delegates.OnDrawGizmos_BeforeArgs toInvoke in _beforeOnDrawGizmos.GetInvocationList())
                    try
                    {
                        _beforeOnDrawGizmos?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDrawGizmos != null)
                foreach (Delegates.OnDrawGizmos_AfterArgs toInvoke in _afterOnDrawGizmos.GetInvocationList())
                    try
                    {
                        _afterOnDrawGizmos.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CheckForPauseButton_AfterArgs(Params_CheckForPauseButton args);

        public delegate void CheckForPauseButton_BeforeArgs(Params_CheckForPauseButton args);

        public delegate void CheckForPauseButton_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public delegate void DrawUnityInputDebugger_AfterArgs(Params_DrawUnityInputDebugger args);

        public delegate void DrawUnityInputDebugger_BeforeArgs(Params_DrawUnityInputDebugger args);

        public delegate void DrawUnityInputDebugger_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public delegate void HandleInputUpdate_AfterArgs(Params_HandleInputUpdate args);

        public delegate void HandleInputUpdate_BeforeArgs(Params_HandleInputUpdate args);

        public delegate void HandleInputUpdate_WithArgs(Action<TestInputManager, ulong, float> orig,
            TestInputManager self, ulong updateTick, float deltaTime);

        public delegate void OnDrawGizmos_AfterArgs(Params_OnDrawGizmos args);

        public delegate void OnDrawGizmos_BeforeArgs(Params_OnDrawGizmos args);

        public delegate void OnDrawGizmos_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public delegate void OnGUI_AfterArgs(Params_OnGUI args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public delegate void SetColor_AfterArgs(Params_SetColor args);

        public delegate void SetColor_BeforeArgs(Params_SetColor args);

        public delegate void SetColor_WithArgs(Action<TestInputManager, Color> orig, TestInputManager self,
            Color color);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<TestInputManager> orig, TestInputManager self);

        public sealed class Params_OnEnable
        {
            public TestInputManager self;
        }

        public sealed class Params_HandleInputUpdate
        {
            public float deltaTime;
            public TestInputManager self;
            public ulong updateTick;
        }

        public sealed class Params_Start
        {
            public TestInputManager self;
        }

        public sealed class Params_Update
        {
            public TestInputManager self;
        }

        public sealed class Params_CheckForPauseButton
        {
            public TestInputManager self;
        }

        public sealed class Params_SetColor
        {
            public Color color;
            public TestInputManager self;
        }

        public sealed class Params_OnGUI
        {
            public TestInputManager self;
        }

        public sealed class Params_DrawUnityInputDebugger
        {
            public TestInputManager self;
        }

        public sealed class Params_OnDrawGizmos
        {
            public TestInputManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.HandleInputUpdate_BeforeArgs HandleInputUpdate
        {
            add
            {
                HookHandler._beforeHandleInputUpdate += value;
                HookHandler.HookHandleInputUpdate();
            }
            remove => HookHandler._beforeHandleInputUpdate -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.CheckForPauseButton_BeforeArgs CheckForPauseButton
        {
            add
            {
                HookHandler._beforeCheckForPauseButton += value;
                HookHandler.HookCheckForPauseButton();
            }
            remove => HookHandler._beforeCheckForPauseButton -= value;
        }

        public static event Delegates.SetColor_BeforeArgs SetColor
        {
            add
            {
                HookHandler._beforeSetColor += value;
                HookHandler.HookSetColor();
            }
            remove => HookHandler._beforeSetColor -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.DrawUnityInputDebugger_BeforeArgs DrawUnityInputDebugger
        {
            add
            {
                HookHandler._beforeDrawUnityInputDebugger += value;
                HookHandler.HookDrawUnityInputDebugger();
            }
            remove => HookHandler._beforeDrawUnityInputDebugger -= value;
        }

        public static event Delegates.OnDrawGizmos_BeforeArgs OnDrawGizmos
        {
            add
            {
                HookHandler._beforeOnDrawGizmos += value;
                HookHandler.HookOnDrawGizmos();
            }
            remove => HookHandler._beforeOnDrawGizmos -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.HandleInputUpdate_AfterArgs HandleInputUpdate
        {
            add
            {
                HookHandler._afterHandleInputUpdate += value;
                HookHandler.HookHandleInputUpdate();
            }
            remove => HookHandler._afterHandleInputUpdate -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.CheckForPauseButton_AfterArgs CheckForPauseButton
        {
            add
            {
                HookHandler._afterCheckForPauseButton += value;
                HookHandler.HookCheckForPauseButton();
            }
            remove => HookHandler._afterCheckForPauseButton -= value;
        }

        public static event Delegates.SetColor_AfterArgs SetColor
        {
            add
            {
                HookHandler._afterSetColor += value;
                HookHandler.HookSetColor();
            }
            remove => HookHandler._afterSetColor -= value;
        }

        public static event Delegates.OnGUI_AfterArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.DrawUnityInputDebugger_AfterArgs DrawUnityInputDebugger
        {
            add
            {
                HookHandler._afterDrawUnityInputDebugger += value;
                HookHandler.HookDrawUnityInputDebugger();
            }
            remove => HookHandler._afterDrawUnityInputDebugger -= value;
        }

        public static event Delegates.OnDrawGizmos_AfterArgs OnDrawGizmos
        {
            add
            {
                HookHandler._afterOnDrawGizmos += value;
                HookHandler.HookOnDrawGizmos();
            }
            remove => HookHandler._afterOnDrawGizmos -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnEnable"), value);
        }

        public static event Delegates.HandleInputUpdate_WithArgs HandleInputUpdate
        {
            add => HookEndpointManager.Add<Delegates.HandleInputUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "HandleInputUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.HandleInputUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "HandleInputUpdate"), value);
        }

        public static event Delegates.Start_WithArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "Start"), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "Update"), value);
        }

        public static event Delegates.CheckForPauseButton_WithArgs CheckForPauseButton
        {
            add => HookEndpointManager.Add<Delegates.CheckForPauseButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "CheckForPauseButton"), value);
            remove => HookEndpointManager.Remove<Delegates.CheckForPauseButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "CheckForPauseButton"), value);
        }

        public static event Delegates.SetColor_WithArgs SetColor
        {
            add => HookEndpointManager.Add<Delegates.SetColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "SetColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "SetColor"), value);
        }

        public static event Delegates.OnGUI_WithArgs OnGUI
        {
            add => HookEndpointManager.Add<Delegates.OnGUI_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnGUI"), value);
            remove => HookEndpointManager.Remove<Delegates.OnGUI_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnGUI"), value);
        }

        public static event Delegates.DrawUnityInputDebugger_WithArgs DrawUnityInputDebugger
        {
            add => HookEndpointManager.Add<Delegates.DrawUnityInputDebugger_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "DrawUnityInputDebugger"), value);
            remove => HookEndpointManager.Remove<Delegates.DrawUnityInputDebugger_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "DrawUnityInputDebugger"), value);
        }

        public static event Delegates.OnDrawGizmos_WithArgs OnDrawGizmos
        {
            add => HookEndpointManager.Add<Delegates.OnDrawGizmos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnDrawGizmos"), value);
            remove => HookEndpointManager.Remove<Delegates.OnDrawGizmos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TestInputManager), "OnDrawGizmos"), value);
        }
    }
}