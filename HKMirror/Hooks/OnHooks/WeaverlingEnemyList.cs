namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for WeaverlingEnemyList class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnWeaverlingEnemyList
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.WeaverlingEnemyList.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.WeaverlingEnemyList.orig_OnEnable orig, WeaverlingEnemyList self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.WeaverlingEnemyList.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.WeaverlingEnemyList.orig_OnTriggerEnter2D orig,
            WeaverlingEnemyList self, Collider2D otherCollider)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, otherCollider = otherCollider
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            otherCollider = @params.otherCollider;
            orig(self, otherCollider);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookOnTriggerExit2D()
        {
            if (!HookedList.Contains("OnTriggerExit2D"))
            {
                HookedList.Add("OnTriggerExit2D");
                On.WeaverlingEnemyList.OnTriggerExit2D += OnTriggerExit2D;
            }
        }

        internal static event Delegates.OnTriggerExit2D_BeforeArgs _beforeOnTriggerExit2D;
        internal static event Delegates.OnTriggerExit2D_NormalArgs _afterOnTriggerExit2D;

        private static void OnTriggerExit2D(On.WeaverlingEnemyList.orig_OnTriggerExit2D orig, WeaverlingEnemyList self,
            Collider2D otherCollider)
        {
            Delegates.Params_OnTriggerExit2D @params = new()
            {
                self = self, otherCollider = otherCollider
            };
            _beforeOnTriggerExit2D?.Invoke(@params);
            self = @params.self;
            otherCollider = @params.otherCollider;
            orig(self, otherCollider);
            if (_afterOnTriggerExit2D != null) _afterOnTriggerExit2D.Invoke(@params);
        }

        internal static void HookGetTarget()
        {
            if (!HookedList.Contains("GetTarget"))
            {
                HookedList.Add("GetTarget");
                On.WeaverlingEnemyList.GetTarget += GetTarget;
            }
        }

        internal static event Delegates.GetTarget_BeforeArgs _beforeGetTarget;
        internal static event Delegates.GetTarget_NormalArgs _afterGetTarget;

        private static GameObject GetTarget(On.WeaverlingEnemyList.orig_GetTarget orig, WeaverlingEnemyList self)
        {
            Delegates.Params_GetTarget @params = new()
            {
                self = self
            };
            _beforeGetTarget?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTarget != null) retVal = _afterGetTarget.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetTarget_BeforeArgs(Params_GetTarget args);

        public delegate GameObject GetTarget_NormalArgs(Params_GetTarget args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerExit2D_BeforeArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_NormalArgs(Params_OnTriggerExit2D args);

        public sealed class Params_OnEnable
        {
            public WeaverlingEnemyList self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D otherCollider;
            public WeaverlingEnemyList self;
        }

        public sealed class Params_OnTriggerExit2D
        {
            public Collider2D otherCollider;
            public WeaverlingEnemyList self;
        }

        public sealed class Params_GetTarget
        {
            public WeaverlingEnemyList self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_BeforeArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._beforeOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._beforeOnTriggerExit2D -= value;
        }

        public static event Delegates.GetTarget_BeforeArgs GetTarget
        {
            add
            {
                HookHandler._beforeGetTarget += value;
                HookHandler.HookGetTarget();
            }
            remove => HookHandler._beforeGetTarget -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_NormalArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._afterOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._afterOnTriggerExit2D -= value;
        }

        public static event Delegates.GetTarget_NormalArgs GetTarget
        {
            add
            {
                HookHandler._afterGetTarget += value;
                HookHandler.HookGetTarget();
            }
            remove => HookHandler._afterGetTarget -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.WeaverlingEnemyList.hook_OnEnable OnEnable
        {
            add => On.WeaverlingEnemyList.OnEnable += value;
            remove => On.WeaverlingEnemyList.OnEnable -= value;
        }

        public static event On.WeaverlingEnemyList.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.WeaverlingEnemyList.OnTriggerEnter2D += value;
            remove => On.WeaverlingEnemyList.OnTriggerEnter2D -= value;
        }

        public static event On.WeaverlingEnemyList.hook_OnTriggerExit2D OnTriggerExit2D
        {
            add => On.WeaverlingEnemyList.OnTriggerExit2D += value;
            remove => On.WeaverlingEnemyList.OnTriggerExit2D -= value;
        }

        public static event On.WeaverlingEnemyList.hook_GetTarget GetTarget
        {
            add => On.WeaverlingEnemyList.GetTarget += value;
            remove => On.WeaverlingEnemyList.GetTarget -= value;
        }
    }
}