namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HeroAudioController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHeroAudioController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.HeroAudioController.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.HeroAudioController.orig_Awake orig, HeroAudioController self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookPlaySound()
        {
            if (!HookedList.Contains("PlaySound"))
            {
                HookedList.Add("PlaySound");
                On.HeroAudioController.PlaySound += PlaySound;
            }
        }

        internal static event Delegates.PlaySound_BeforeArgs _beforePlaySound;
        internal static event Delegates.PlaySound_NormalArgs _afterPlaySound;

        private static void PlaySound(On.HeroAudioController.orig_PlaySound orig, HeroAudioController self,
            HeroSounds soundEffect)
        {
            Delegates.Params_PlaySound @params = new()
            {
                self = self, soundEffect = soundEffect
            };
            _beforePlaySound?.Invoke(@params);
            self = @params.self;
            soundEffect = @params.soundEffect;
            orig(self, soundEffect);
            if (_afterPlaySound != null) _afterPlaySound.Invoke(@params);
        }

        internal static void HookStopSound()
        {
            if (!HookedList.Contains("StopSound"))
            {
                HookedList.Add("StopSound");
                On.HeroAudioController.StopSound += StopSound;
            }
        }

        internal static event Delegates.StopSound_BeforeArgs _beforeStopSound;
        internal static event Delegates.StopSound_NormalArgs _afterStopSound;

        private static void StopSound(On.HeroAudioController.orig_StopSound orig, HeroAudioController self,
            HeroSounds soundEffect)
        {
            Delegates.Params_StopSound @params = new()
            {
                self = self, soundEffect = soundEffect
            };
            _beforeStopSound?.Invoke(@params);
            self = @params.self;
            soundEffect = @params.soundEffect;
            orig(self, soundEffect);
            if (_afterStopSound != null) _afterStopSound.Invoke(@params);
        }

        internal static void HookStopAllSounds()
        {
            if (!HookedList.Contains("StopAllSounds"))
            {
                HookedList.Add("StopAllSounds");
                On.HeroAudioController.StopAllSounds += StopAllSounds;
            }
        }

        internal static event Delegates.StopAllSounds_BeforeArgs _beforeStopAllSounds;
        internal static event Delegates.StopAllSounds_NormalArgs _afterStopAllSounds;

        private static void StopAllSounds(On.HeroAudioController.orig_StopAllSounds orig, HeroAudioController self)
        {
            Delegates.Params_StopAllSounds @params = new()
            {
                self = self
            };
            _beforeStopAllSounds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopAllSounds != null) _afterStopAllSounds.Invoke(@params);
        }

        internal static void HookPauseAllSounds()
        {
            if (!HookedList.Contains("PauseAllSounds"))
            {
                HookedList.Add("PauseAllSounds");
                On.HeroAudioController.PauseAllSounds += PauseAllSounds;
            }
        }

        internal static event Delegates.PauseAllSounds_BeforeArgs _beforePauseAllSounds;
        internal static event Delegates.PauseAllSounds_NormalArgs _afterPauseAllSounds;

        private static void PauseAllSounds(On.HeroAudioController.orig_PauseAllSounds orig, HeroAudioController self)
        {
            Delegates.Params_PauseAllSounds @params = new()
            {
                self = self
            };
            _beforePauseAllSounds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPauseAllSounds != null) _afterPauseAllSounds.Invoke(@params);
        }

        internal static void HookUnPauseAllSounds()
        {
            if (!HookedList.Contains("UnPauseAllSounds"))
            {
                HookedList.Add("UnPauseAllSounds");
                On.HeroAudioController.UnPauseAllSounds += UnPauseAllSounds;
            }
        }

        internal static event Delegates.UnPauseAllSounds_BeforeArgs _beforeUnPauseAllSounds;
        internal static event Delegates.UnPauseAllSounds_NormalArgs _afterUnPauseAllSounds;

        private static void UnPauseAllSounds(On.HeroAudioController.orig_UnPauseAllSounds orig,
            HeroAudioController self)
        {
            Delegates.Params_UnPauseAllSounds @params = new()
            {
                self = self
            };
            _beforeUnPauseAllSounds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnPauseAllSounds != null) _afterUnPauseAllSounds.Invoke(@params);
        }

        internal static void HookRandomizePitch()
        {
            if (!HookedList.Contains("RandomizePitch"))
            {
                HookedList.Add("RandomizePitch");
                On.HeroAudioController.RandomizePitch += RandomizePitch;
            }
        }

        internal static event Delegates.RandomizePitch_BeforeArgs _beforeRandomizePitch;
        internal static event Delegates.RandomizePitch_NormalArgs _afterRandomizePitch;

        private static void RandomizePitch(On.HeroAudioController.orig_RandomizePitch orig, HeroAudioController self,
            AudioSource src, float minPitch, float maxPitch)
        {
            Delegates.Params_RandomizePitch @params = new()
            {
                self = self, src = src, minPitch = minPitch, maxPitch = maxPitch
            };
            _beforeRandomizePitch?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            minPitch = @params.minPitch;
            maxPitch = @params.maxPitch;
            orig(self, src, minPitch, maxPitch);
            if (_afterRandomizePitch != null) _afterRandomizePitch.Invoke(@params);
        }

        internal static void HookResetPitch()
        {
            if (!HookedList.Contains("ResetPitch"))
            {
                HookedList.Add("ResetPitch");
                On.HeroAudioController.ResetPitch += ResetPitch;
            }
        }

        internal static event Delegates.ResetPitch_BeforeArgs _beforeResetPitch;
        internal static event Delegates.ResetPitch_NormalArgs _afterResetPitch;

        private static void ResetPitch(On.HeroAudioController.orig_ResetPitch orig, HeroAudioController self,
            AudioSource src)
        {
            Delegates.Params_ResetPitch @params = new()
            {
                self = self, src = src
            };
            _beforeResetPitch?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            orig(self, src);
            if (_afterResetPitch != null) _afterResetPitch.Invoke(@params);
        }

        internal static void HookFadeInVolume()
        {
            if (!HookedList.Contains("FadeInVolume"))
            {
                HookedList.Add("FadeInVolume");
                On.HeroAudioController.FadeInVolume += FadeInVolume;
            }
        }

        internal static event Delegates.FadeInVolume_BeforeArgs _beforeFadeInVolume;

        private static IEnumerator FadeInVolume(On.HeroAudioController.orig_FadeInVolume orig, HeroAudioController self,
            AudioSource src, float duration)
        {
            Delegates.Params_FadeInVolume @params = new()
            {
                self = self, src = src, duration = duration
            };
            _beforeFadeInVolume?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            duration = @params.duration;
            return orig(self, src, duration);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void FadeInVolume_BeforeArgs(Params_FadeInVolume args);

        public delegate IEnumerator FadeInVolume_NormalArgs(Params_FadeInVolume args);

        public delegate void PauseAllSounds_BeforeArgs(Params_PauseAllSounds args);

        public delegate void PauseAllSounds_NormalArgs(Params_PauseAllSounds args);

        public delegate void PlaySound_BeforeArgs(Params_PlaySound args);

        public delegate void PlaySound_NormalArgs(Params_PlaySound args);

        public delegate void RandomizePitch_BeforeArgs(Params_RandomizePitch args);

        public delegate void RandomizePitch_NormalArgs(Params_RandomizePitch args);

        public delegate void ResetPitch_BeforeArgs(Params_ResetPitch args);

        public delegate void ResetPitch_NormalArgs(Params_ResetPitch args);

        public delegate void StopAllSounds_BeforeArgs(Params_StopAllSounds args);

        public delegate void StopAllSounds_NormalArgs(Params_StopAllSounds args);

        public delegate void StopSound_BeforeArgs(Params_StopSound args);

        public delegate void StopSound_NormalArgs(Params_StopSound args);

        public delegate void UnPauseAllSounds_BeforeArgs(Params_UnPauseAllSounds args);

        public delegate void UnPauseAllSounds_NormalArgs(Params_UnPauseAllSounds args);

        public sealed class Params_Awake
        {
            public HeroAudioController self;
        }

        public sealed class Params_PlaySound
        {
            public HeroAudioController self;
            public HeroSounds soundEffect;
        }

        public sealed class Params_StopSound
        {
            public HeroAudioController self;
            public HeroSounds soundEffect;
        }

        public sealed class Params_StopAllSounds
        {
            public HeroAudioController self;
        }

        public sealed class Params_PauseAllSounds
        {
            public HeroAudioController self;
        }

        public sealed class Params_UnPauseAllSounds
        {
            public HeroAudioController self;
        }

        public sealed class Params_RandomizePitch
        {
            public float maxPitch;
            public float minPitch;
            public HeroAudioController self;
            public AudioSource src;
        }

        public sealed class Params_ResetPitch
        {
            public HeroAudioController self;
            public AudioSource src;
        }

        public sealed class Params_FadeInVolume
        {
            public float duration;
            public HeroAudioController self;
            public AudioSource src;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.PlaySound_BeforeArgs PlaySound
        {
            add
            {
                HookHandler._beforePlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._beforePlaySound -= value;
        }

        public static event Delegates.StopSound_BeforeArgs StopSound
        {
            add
            {
                HookHandler._beforeStopSound += value;
                HookHandler.HookStopSound();
            }
            remove => HookHandler._beforeStopSound -= value;
        }

        public static event Delegates.StopAllSounds_BeforeArgs StopAllSounds
        {
            add
            {
                HookHandler._beforeStopAllSounds += value;
                HookHandler.HookStopAllSounds();
            }
            remove => HookHandler._beforeStopAllSounds -= value;
        }

        public static event Delegates.PauseAllSounds_BeforeArgs PauseAllSounds
        {
            add
            {
                HookHandler._beforePauseAllSounds += value;
                HookHandler.HookPauseAllSounds();
            }
            remove => HookHandler._beforePauseAllSounds -= value;
        }

        public static event Delegates.UnPauseAllSounds_BeforeArgs UnPauseAllSounds
        {
            add
            {
                HookHandler._beforeUnPauseAllSounds += value;
                HookHandler.HookUnPauseAllSounds();
            }
            remove => HookHandler._beforeUnPauseAllSounds -= value;
        }

        public static event Delegates.RandomizePitch_BeforeArgs RandomizePitch
        {
            add
            {
                HookHandler._beforeRandomizePitch += value;
                HookHandler.HookRandomizePitch();
            }
            remove => HookHandler._beforeRandomizePitch -= value;
        }

        public static event Delegates.ResetPitch_BeforeArgs ResetPitch
        {
            add
            {
                HookHandler._beforeResetPitch += value;
                HookHandler.HookResetPitch();
            }
            remove => HookHandler._beforeResetPitch -= value;
        }

        public static event Delegates.FadeInVolume_BeforeArgs FadeInVolume
        {
            add
            {
                HookHandler._beforeFadeInVolume += value;
                HookHandler.HookFadeInVolume();
            }
            remove => HookHandler._beforeFadeInVolume -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.PlaySound_NormalArgs PlaySound
        {
            add
            {
                HookHandler._afterPlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._afterPlaySound -= value;
        }

        public static event Delegates.StopSound_NormalArgs StopSound
        {
            add
            {
                HookHandler._afterStopSound += value;
                HookHandler.HookStopSound();
            }
            remove => HookHandler._afterStopSound -= value;
        }

        public static event Delegates.StopAllSounds_NormalArgs StopAllSounds
        {
            add
            {
                HookHandler._afterStopAllSounds += value;
                HookHandler.HookStopAllSounds();
            }
            remove => HookHandler._afterStopAllSounds -= value;
        }

        public static event Delegates.PauseAllSounds_NormalArgs PauseAllSounds
        {
            add
            {
                HookHandler._afterPauseAllSounds += value;
                HookHandler.HookPauseAllSounds();
            }
            remove => HookHandler._afterPauseAllSounds -= value;
        }

        public static event Delegates.UnPauseAllSounds_NormalArgs UnPauseAllSounds
        {
            add
            {
                HookHandler._afterUnPauseAllSounds += value;
                HookHandler.HookUnPauseAllSounds();
            }
            remove => HookHandler._afterUnPauseAllSounds -= value;
        }

        public static event Delegates.RandomizePitch_NormalArgs RandomizePitch
        {
            add
            {
                HookHandler._afterRandomizePitch += value;
                HookHandler.HookRandomizePitch();
            }
            remove => HookHandler._afterRandomizePitch -= value;
        }

        public static event Delegates.ResetPitch_NormalArgs ResetPitch
        {
            add
            {
                HookHandler._afterResetPitch += value;
                HookHandler.HookResetPitch();
            }
            remove => HookHandler._afterResetPitch -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.HeroAudioController.hook_Awake Awake
        {
            add => On.HeroAudioController.Awake += value;
            remove => On.HeroAudioController.Awake -= value;
        }

        public static event On.HeroAudioController.hook_PlaySound PlaySound
        {
            add => On.HeroAudioController.PlaySound += value;
            remove => On.HeroAudioController.PlaySound -= value;
        }

        public static event On.HeroAudioController.hook_StopSound StopSound
        {
            add => On.HeroAudioController.StopSound += value;
            remove => On.HeroAudioController.StopSound -= value;
        }

        public static event On.HeroAudioController.hook_StopAllSounds StopAllSounds
        {
            add => On.HeroAudioController.StopAllSounds += value;
            remove => On.HeroAudioController.StopAllSounds -= value;
        }

        public static event On.HeroAudioController.hook_PauseAllSounds PauseAllSounds
        {
            add => On.HeroAudioController.PauseAllSounds += value;
            remove => On.HeroAudioController.PauseAllSounds -= value;
        }

        public static event On.HeroAudioController.hook_UnPauseAllSounds UnPauseAllSounds
        {
            add => On.HeroAudioController.UnPauseAllSounds += value;
            remove => On.HeroAudioController.UnPauseAllSounds -= value;
        }

        public static event On.HeroAudioController.hook_RandomizePitch RandomizePitch
        {
            add => On.HeroAudioController.RandomizePitch += value;
            remove => On.HeroAudioController.RandomizePitch -= value;
        }

        public static event On.HeroAudioController.hook_ResetPitch ResetPitch
        {
            add => On.HeroAudioController.ResetPitch += value;
            remove => On.HeroAudioController.ResetPitch -= value;
        }

        public static event On.HeroAudioController.hook_FadeInVolume FadeInVolume
        {
            add => On.HeroAudioController.FadeInVolume += value;
            remove => On.HeroAudioController.FadeInVolume -= value;
        }
    }
}