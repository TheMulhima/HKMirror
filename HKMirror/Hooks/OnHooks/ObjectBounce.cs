using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ObjectBounce class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnObjectBounce
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ObjectBounce.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.ObjectBounce.orig_Start orig, ObjectBounce self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.ObjectBounce.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.ObjectBounce.orig_FixedUpdate orig, ObjectBounce self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
            {
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
            {
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.ObjectBounce.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.ObjectBounce.orig_Update orig, ObjectBounce self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.ObjectBounce.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_AfterArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.ObjectBounce.orig_OnCollisionEnter2D orig, ObjectBounce self,
            UnityEngine.Collision2D col)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, col = col
            };
            if (_beforeOnCollisionEnter2D != null)
            {
                foreach (Delegates.OnCollisionEnter2D_BeforeArgs toInvoke in
                         _beforeOnCollisionEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnCollisionEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            col = @params.col;
            orig(self, col);
            if (_afterOnCollisionEnter2D != null)
            {
                foreach (Delegates.OnCollisionEnter2D_AfterArgs toInvoke in
                         _afterOnCollisionEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnCollisionEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStopBounce()
        {
            if (!HookedList.Contains("StopBounce"))
            {
                HookedList.Add("StopBounce");
                On.ObjectBounce.StopBounce += StopBounce;
            }
        }

        internal static event Delegates.StopBounce_BeforeArgs _beforeStopBounce;
        internal static event Delegates.StopBounce_AfterArgs _afterStopBounce;

        private static void StopBounce(On.ObjectBounce.orig_StopBounce orig, ObjectBounce self)
        {
            Delegates.Params_StopBounce @params = new()
            {
                self = self
            };
            if (_beforeStopBounce != null)
            {
                foreach (Delegates.StopBounce_BeforeArgs toInvoke in _beforeStopBounce.GetInvocationList())
                {
                    try
                    {
                        _beforeStopBounce?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStopBounce != null)
            {
                foreach (Delegates.StopBounce_AfterArgs toInvoke in _afterStopBounce.GetInvocationList())
                {
                    try
                    {
                        _afterStopBounce.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStartBounce()
        {
            if (!HookedList.Contains("StartBounce"))
            {
                HookedList.Add("StartBounce");
                On.ObjectBounce.StartBounce += StartBounce;
            }
        }

        internal static event Delegates.StartBounce_BeforeArgs _beforeStartBounce;
        internal static event Delegates.StartBounce_AfterArgs _afterStartBounce;

        private static void StartBounce(On.ObjectBounce.orig_StartBounce orig, ObjectBounce self)
        {
            Delegates.Params_StartBounce @params = new()
            {
                self = self
            };
            if (_beforeStartBounce != null)
            {
                foreach (Delegates.StartBounce_BeforeArgs toInvoke in _beforeStartBounce.GetInvocationList())
                {
                    try
                    {
                        _beforeStartBounce?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStartBounce != null)
            {
                foreach (Delegates.StartBounce_AfterArgs toInvoke in _afterStartBounce.GetInvocationList())
                {
                    try
                    {
                        _afterStartBounce.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetBounceFactor()
        {
            if (!HookedList.Contains("SetBounceFactor"))
            {
                HookedList.Add("SetBounceFactor");
                On.ObjectBounce.SetBounceFactor += SetBounceFactor;
            }
        }

        internal static event Delegates.SetBounceFactor_BeforeArgs _beforeSetBounceFactor;
        internal static event Delegates.SetBounceFactor_AfterArgs _afterSetBounceFactor;

        private static void SetBounceFactor(On.ObjectBounce.orig_SetBounceFactor orig, ObjectBounce self, float value)
        {
            Delegates.Params_SetBounceFactor @params = new()
            {
                self = self, value = value
            };
            if (_beforeSetBounceFactor != null)
            {
                foreach (Delegates.SetBounceFactor_BeforeArgs toInvoke in _beforeSetBounceFactor.GetInvocationList())
                {
                    try
                    {
                        _beforeSetBounceFactor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetBounceFactor != null)
            {
                foreach (Delegates.SetBounceFactor_AfterArgs toInvoke in _afterSetBounceFactor.GetInvocationList())
                {
                    try
                    {
                        _afterSetBounceFactor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetBounceAnimation()
        {
            if (!HookedList.Contains("SetBounceAnimation"))
            {
                HookedList.Add("SetBounceAnimation");
                On.ObjectBounce.SetBounceAnimation += SetBounceAnimation;
            }
        }

        internal static event Delegates.SetBounceAnimation_BeforeArgs _beforeSetBounceAnimation;
        internal static event Delegates.SetBounceAnimation_AfterArgs _afterSetBounceAnimation;

        private static void SetBounceAnimation(On.ObjectBounce.orig_SetBounceAnimation orig, ObjectBounce self,
            bool set)
        {
            Delegates.Params_SetBounceAnimation @params = new()
            {
                self = self, set = set
            };
            if (_beforeSetBounceAnimation != null)
            {
                foreach (Delegates.SetBounceAnimation_BeforeArgs toInvoke in
                         _beforeSetBounceAnimation.GetInvocationList())
                {
                    try
                    {
                        _beforeSetBounceAnimation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            set = @params.set;
            orig(self, set);
            if (_afterSetBounceAnimation != null)
            {
                foreach (Delegates.SetBounceAnimation_AfterArgs toInvoke in
                         _afterSetBounceAnimation.GetInvocationList())
                {
                    try
                    {
                        _afterSetBounceAnimation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public ObjectBounce self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<ObjectBounce> orig, ObjectBounce self);

        public sealed class Params_FixedUpdate
        {
            public ObjectBounce self;
        }

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<ObjectBounce> orig, ObjectBounce self);

        public sealed class Params_Update
        {
            public ObjectBounce self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<ObjectBounce> orig, ObjectBounce self);

        public sealed class Params_OnCollisionEnter2D
        {
            public ObjectBounce self;
            public UnityEngine.Collision2D col;
        }

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_AfterArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_WithArgs(Action<ObjectBounce, UnityEngine.Collision2D> orig,
            ObjectBounce self, UnityEngine.Collision2D col);

        public sealed class Params_StopBounce
        {
            public ObjectBounce self;
        }

        public delegate void StopBounce_BeforeArgs(Params_StopBounce args);

        public delegate void StopBounce_AfterArgs(Params_StopBounce args);

        public delegate void StopBounce_WithArgs(Action<ObjectBounce> orig, ObjectBounce self);

        public sealed class Params_StartBounce
        {
            public ObjectBounce self;
        }

        public delegate void StartBounce_BeforeArgs(Params_StartBounce args);

        public delegate void StartBounce_AfterArgs(Params_StartBounce args);

        public delegate void StartBounce_WithArgs(Action<ObjectBounce> orig, ObjectBounce self);

        public sealed class Params_SetBounceFactor
        {
            public ObjectBounce self;
            public float value;
        }

        public delegate void SetBounceFactor_BeforeArgs(Params_SetBounceFactor args);

        public delegate void SetBounceFactor_AfterArgs(Params_SetBounceFactor args);

        public delegate void SetBounceFactor_WithArgs(Action<ObjectBounce, float> orig, ObjectBounce self, float value);

        public sealed class Params_SetBounceAnimation
        {
            public ObjectBounce self;
            public bool set;
        }

        public delegate void SetBounceAnimation_BeforeArgs(Params_SetBounceAnimation args);

        public delegate void SetBounceAnimation_AfterArgs(Params_SetBounceAnimation args);

        public delegate void SetBounceAnimation_WithArgs(Action<ObjectBounce, bool> orig, ObjectBounce self, bool set);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.StopBounce_BeforeArgs StopBounce
        {
            add
            {
                HookHandler._beforeStopBounce += value;
                HookHandler.HookStopBounce();
            }
            remove => HookHandler._beforeStopBounce -= value;
        }

        public static event Delegates.StartBounce_BeforeArgs StartBounce
        {
            add
            {
                HookHandler._beforeStartBounce += value;
                HookHandler.HookStartBounce();
            }
            remove => HookHandler._beforeStartBounce -= value;
        }

        public static event Delegates.SetBounceFactor_BeforeArgs SetBounceFactor
        {
            add
            {
                HookHandler._beforeSetBounceFactor += value;
                HookHandler.HookSetBounceFactor();
            }
            remove => HookHandler._beforeSetBounceFactor -= value;
        }

        public static event Delegates.SetBounceAnimation_BeforeArgs SetBounceAnimation
        {
            add
            {
                HookHandler._beforeSetBounceAnimation += value;
                HookHandler.HookSetBounceAnimation();
            }
            remove => HookHandler._beforeSetBounceAnimation -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.OnCollisionEnter2D_AfterArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.StopBounce_AfterArgs StopBounce
        {
            add
            {
                HookHandler._afterStopBounce += value;
                HookHandler.HookStopBounce();
            }
            remove => HookHandler._afterStopBounce -= value;
        }

        public static event Delegates.StartBounce_AfterArgs StartBounce
        {
            add
            {
                HookHandler._afterStartBounce += value;
                HookHandler.HookStartBounce();
            }
            remove => HookHandler._afterStartBounce -= value;
        }

        public static event Delegates.SetBounceFactor_AfterArgs SetBounceFactor
        {
            add
            {
                HookHandler._afterSetBounceFactor += value;
                HookHandler.HookSetBounceFactor();
            }
            remove => HookHandler._afterSetBounceFactor -= value;
        }

        public static event Delegates.SetBounceAnimation_AfterArgs SetBounceAnimation
        {
            add
            {
                HookHandler._afterSetBounceAnimation += value;
                HookHandler.HookSetBounceAnimation();
            }
            remove => HookHandler._afterSetBounceAnimation -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ObjectBounce.hook_Start Start
        {
            add => On.ObjectBounce.Start += value;
            remove => On.ObjectBounce.Start -= value;
        }

        public static event On.ObjectBounce.hook_FixedUpdate FixedUpdate
        {
            add => On.ObjectBounce.FixedUpdate += value;
            remove => On.ObjectBounce.FixedUpdate -= value;
        }

        public static event On.ObjectBounce.hook_Update Update
        {
            add => On.ObjectBounce.Update += value;
            remove => On.ObjectBounce.Update -= value;
        }

        public static event On.ObjectBounce.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.ObjectBounce.OnCollisionEnter2D += value;
            remove => On.ObjectBounce.OnCollisionEnter2D -= value;
        }

        public static event On.ObjectBounce.hook_StopBounce StopBounce
        {
            add => On.ObjectBounce.StopBounce += value;
            remove => On.ObjectBounce.StopBounce -= value;
        }

        public static event On.ObjectBounce.hook_StartBounce StartBounce
        {
            add => On.ObjectBounce.StartBounce += value;
            remove => On.ObjectBounce.StartBounce -= value;
        }

        public static event On.ObjectBounce.hook_SetBounceFactor SetBounceFactor
        {
            add => On.ObjectBounce.SetBounceFactor += value;
            remove => On.ObjectBounce.SetBounceFactor -= value;
        }

        public static event On.ObjectBounce.hook_SetBounceAnimation SetBounceAnimation
        {
            add => On.ObjectBounce.SetBounceAnimation += value;
            remove => On.ObjectBounce.SetBounceAnimation -= value;
        }
    }
}