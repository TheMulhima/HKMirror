using HutongGames.PlayMaker.AnimationEnums;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using LogLevel = HutongGames.PlayMaker.LogLevel;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ActionHelpers class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnActionHelpers
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_WhiteTexture()
        {
            if (!HookedList.Contains("get_WhiteTexture"))
            {
                HookedList.Add("get_WhiteTexture");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "get_WhiteTexture", false),
                    get_WhiteTexture);
            }
        }

        internal static event Delegates.get_WhiteTexture_BeforeArgs _beforeget_WhiteTexture;
        internal static event Delegates.get_WhiteTexture_AfterArgs _afterget_WhiteTexture;

        private static Texture2D get_WhiteTexture(Func<Texture2D> orig)
        {
            if (_beforeget_WhiteTexture != null)
                foreach (Delegates.get_WhiteTexture_BeforeArgs toInvoke in _beforeget_WhiteTexture.GetInvocationList())
                    try
                    {
                        _beforeget_WhiteTexture?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_WhiteTexture != null)
                foreach (Delegates.get_WhiteTexture_AfterArgs toInvoke in _afterget_WhiteTexture.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WhiteTexture.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookBlendColor()
        {
            if (!HookedList.Contains("BlendColor"))
            {
                HookedList.Add("BlendColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "BlendColor", false), BlendColor);
            }
        }

        internal static event Delegates.BlendColor_BeforeArgs _beforeBlendColor;
        internal static event Delegates.BlendColor_AfterArgs _afterBlendColor;

        private static Color BlendColor(Func<ColorBlendMode, Color, Color, Color> orig, ColorBlendMode blendMode,
            Color c1, Color c2)
        {
            Delegates.Params_BlendColor @params = new()
            {
                blendMode = blendMode, c1 = c1, c2 = c2
            };
            if (_beforeBlendColor != null)
                foreach (Delegates.BlendColor_BeforeArgs toInvoke in _beforeBlendColor.GetInvocationList())
                    try
                    {
                        _beforeBlendColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            blendMode = @params.blendMode;
            c1 = @params.c1;
            c2 = @params.c2;
            var retVal = orig(blendMode, c1, c2);
            if (_afterBlendColor != null)
                foreach (Delegates.BlendColor_AfterArgs toInvoke in _afterBlendColor.GetInvocationList())
                    try
                    {
                        retVal = _afterBlendColor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsVisible()
        {
            if (!HookedList.Contains("IsVisible"))
            {
                HookedList.Add("IsVisible");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsVisible", false), IsVisible);
            }
        }

        internal static event Delegates.IsVisible_BeforeArgs _beforeIsVisible;
        internal static event Delegates.IsVisible_AfterArgs _afterIsVisible;

        private static bool IsVisible(Func<GameObject, bool> orig, GameObject go)
        {
            Delegates.Params_IsVisible @params = new()
            {
                go = go
            };
            if (_beforeIsVisible != null)
                foreach (Delegates.IsVisible_BeforeArgs toInvoke in _beforeIsVisible.GetInvocationList())
                    try
                    {
                        _beforeIsVisible?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            var retVal = orig(go);
            if (_afterIsVisible != null)
                foreach (Delegates.IsVisible_AfterArgs toInvoke in _afterIsVisible.GetInvocationList())
                    try
                    {
                        retVal = _afterIsVisible.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetOwnerDefault()
        {
            if (!HookedList.Contains("GetOwnerDefault"))
            {
                HookedList.Add("GetOwnerDefault");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetOwnerDefault", false),
                    GetOwnerDefault);
            }
        }

        internal static event Delegates.GetOwnerDefault_BeforeArgs _beforeGetOwnerDefault;
        internal static event Delegates.GetOwnerDefault_AfterArgs _afterGetOwnerDefault;

        private static GameObject GetOwnerDefault(Func<FsmStateAction, FsmOwnerDefault, GameObject> orig,
            FsmStateAction action, FsmOwnerDefault ownerDefault)
        {
            Delegates.Params_GetOwnerDefault @params = new()
            {
                action = action, ownerDefault = ownerDefault
            };
            if (_beforeGetOwnerDefault != null)
                foreach (Delegates.GetOwnerDefault_BeforeArgs toInvoke in _beforeGetOwnerDefault.GetInvocationList())
                    try
                    {
                        _beforeGetOwnerDefault?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            ownerDefault = @params.ownerDefault;
            var retVal = orig(action, ownerDefault);
            if (_afterGetOwnerDefault != null)
                foreach (Delegates.GetOwnerDefault_AfterArgs toInvoke in _afterGetOwnerDefault.GetInvocationList())
                    try
                    {
                        retVal = _afterGetOwnerDefault.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetGameObjectFsm()
        {
            if (!HookedList.Contains("GetGameObjectFsm"))
            {
                HookedList.Add("GetGameObjectFsm");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetGameObjectFsm", false),
                    GetGameObjectFsm);
            }
        }

        internal static event Delegates.GetGameObjectFsm_BeforeArgs _beforeGetGameObjectFsm;
        internal static event Delegates.GetGameObjectFsm_AfterArgs _afterGetGameObjectFsm;

        private static PlayMakerFSM GetGameObjectFsm(Func<GameObject, string, PlayMakerFSM> orig, GameObject go,
            string fsmName)
        {
            Delegates.Params_GetGameObjectFsm @params = new()
            {
                go = go, fsmName = fsmName
            };
            if (_beforeGetGameObjectFsm != null)
                foreach (Delegates.GetGameObjectFsm_BeforeArgs toInvoke in _beforeGetGameObjectFsm.GetInvocationList())
                    try
                    {
                        _beforeGetGameObjectFsm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmName = @params.fsmName;
            var retVal = orig(go, fsmName);
            if (_afterGetGameObjectFsm != null)
                foreach (Delegates.GetGameObjectFsm_AfterArgs toInvoke in _afterGetGameObjectFsm.GetInvocationList())
                    try
                    {
                        retVal = _afterGetGameObjectFsm.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetRandomWeightedIndex()
        {
            if (!HookedList.Contains("GetRandomWeightedIndex"))
            {
                HookedList.Add("GetRandomWeightedIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetRandomWeightedIndex", false),
                    GetRandomWeightedIndex);
            }
        }

        internal static event Delegates.GetRandomWeightedIndex_BeforeArgs _beforeGetRandomWeightedIndex;
        internal static event Delegates.GetRandomWeightedIndex_AfterArgs _afterGetRandomWeightedIndex;

        private static int GetRandomWeightedIndex(Func<FsmFloat[], int> orig, FsmFloat[] weights)
        {
            Delegates.Params_GetRandomWeightedIndex @params = new()
            {
                weights = weights
            };
            if (_beforeGetRandomWeightedIndex != null)
                foreach (Delegates.GetRandomWeightedIndex_BeforeArgs toInvoke in _beforeGetRandomWeightedIndex
                             .GetInvocationList())
                    try
                    {
                        _beforeGetRandomWeightedIndex?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            weights = @params.weights;
            var retVal = orig(weights);
            if (_afterGetRandomWeightedIndex != null)
                foreach (Delegates.GetRandomWeightedIndex_AfterArgs toInvoke in _afterGetRandomWeightedIndex
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetRandomWeightedIndex.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddAnimationClip()
        {
            if (!HookedList.Contains("AddAnimationClip"))
            {
                HookedList.Add("AddAnimationClip");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AddAnimationClip", false),
                    AddAnimationClip);
            }
        }

        internal static event Delegates.AddAnimationClip_BeforeArgs _beforeAddAnimationClip;
        internal static event Delegates.AddAnimationClip_AfterArgs _afterAddAnimationClip;

        private static void AddAnimationClip(Action<GameObject, AnimationClip> orig, GameObject go,
            AnimationClip animClip)
        {
            Delegates.Params_AddAnimationClip @params = new()
            {
                go = go, animClip = animClip
            };
            if (_beforeAddAnimationClip != null)
                foreach (Delegates.AddAnimationClip_BeforeArgs toInvoke in _beforeAddAnimationClip.GetInvocationList())
                    try
                    {
                        _beforeAddAnimationClip?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            animClip = @params.animClip;
            orig(go, animClip);
            if (_afterAddAnimationClip != null)
                foreach (Delegates.AddAnimationClip_AfterArgs toInvoke in _afterAddAnimationClip.GetInvocationList())
                    try
                    {
                        _afterAddAnimationClip.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHasAnimationFinished()
        {
            if (!HookedList.Contains("HasAnimationFinished"))
            {
                HookedList.Add("HasAnimationFinished");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "HasAnimationFinished", false),
                    HasAnimationFinished);
            }
        }

        internal static event Delegates.HasAnimationFinished_BeforeArgs _beforeHasAnimationFinished;
        internal static event Delegates.HasAnimationFinished_AfterArgs _afterHasAnimationFinished;

        private static bool HasAnimationFinished(Func<AnimationState, float, float, bool> orig, AnimationState anim,
            float prevTime, float currentTime)
        {
            Delegates.Params_HasAnimationFinished @params = new()
            {
                anim = anim, prevTime = prevTime, currentTime = currentTime
            };
            if (_beforeHasAnimationFinished != null)
                foreach (Delegates.HasAnimationFinished_BeforeArgs toInvoke in _beforeHasAnimationFinished
                             .GetInvocationList())
                    try
                    {
                        _beforeHasAnimationFinished?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            anim = @params.anim;
            prevTime = @params.prevTime;
            currentTime = @params.currentTime;
            var retVal = orig(anim, prevTime, currentTime);
            if (_afterHasAnimationFinished != null)
                foreach (Delegates.HasAnimationFinished_AfterArgs toInvoke in _afterHasAnimationFinished
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterHasAnimationFinished.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPosition()
        {
            if (!HookedList.Contains("GetPosition"))
            {
                HookedList.Add("GetPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetPosition", false), GetPosition);
            }
        }

        internal static event Delegates.GetPosition_BeforeArgs _beforeGetPosition;
        internal static event Delegates.GetPosition_AfterArgs _afterGetPosition;

        private static Vector3 GetPosition(Func<FsmGameObject, FsmVector3, Vector3> orig, FsmGameObject fsmGameObject,
            FsmVector3 fsmVector3)
        {
            Delegates.Params_GetPosition @params = new()
            {
                fsmGameObject = fsmGameObject, fsmVector3 = fsmVector3
            };
            if (_beforeGetPosition != null)
                foreach (Delegates.GetPosition_BeforeArgs toInvoke in _beforeGetPosition.GetInvocationList())
                    try
                    {
                        _beforeGetPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsmGameObject = @params.fsmGameObject;
            fsmVector3 = @params.fsmVector3;
            var retVal = orig(fsmGameObject, fsmVector3);
            if (_afterGetPosition != null)
                foreach (Delegates.GetPosition_AfterArgs toInvoke in _afterGetPosition.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTargetRotation_RotationOptions_Transform_Transform_Vector3()
        {
            if (!HookedList.Contains("GetTargetRotation_RotationOptions_Transform_Transform_Vector3"))
            {
                HookedList.Add("GetTargetRotation_RotationOptions_Transform_Transform_Vector3");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "GetTargetRotation_RotationOptions_Transform_Transform_Vector3", false),
                    GetTargetRotation_RotationOptions_Transform_Transform_Vector3);
            }
        }

        internal static event Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_BeforeArgs
            _beforeGetTargetRotation_RotationOptions_Transform_Transform_Vector3;

        internal static event Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_AfterArgs
            _afterGetTargetRotation_RotationOptions_Transform_Transform_Vector3;

        private static Quaternion GetTargetRotation_RotationOptions_Transform_Transform_Vector3(
            Func<RotationOptions, Transform, Transform, Vector3, Quaternion> orig, RotationOptions option,
            Transform owner, Transform target, Vector3 rotation)
        {
            Delegates.Params_GetTargetRotation_RotationOptions_Transform_Transform_Vector3 @params = new()
            {
                option = option, owner = owner, target = target, rotation = rotation
            };
            if (_beforeGetTargetRotation_RotationOptions_Transform_Transform_Vector3 != null)
                foreach (Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_BeforeArgs toInvoke in
                         _beforeGetTargetRotation_RotationOptions_Transform_Transform_Vector3.GetInvocationList())
                    try
                    {
                        _beforeGetTargetRotation_RotationOptions_Transform_Transform_Vector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            owner = @params.owner;
            target = @params.target;
            rotation = @params.rotation;
            var retVal = orig(option, owner, target, rotation);
            if (_afterGetTargetRotation_RotationOptions_Transform_Transform_Vector3 != null)
                foreach (Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_AfterArgs toInvoke in
                         _afterGetTargetRotation_RotationOptions_Transform_Transform_Vector3.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTargetRotation_RotationOptions_Transform_Transform_Vector3.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion()
        {
            if (!HookedList.Contains("GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion"))
            {
                HookedList.Add("GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion", false),
                    GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion);
            }
        }

        internal static event
            Delegates.GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_BeforeArgs
            _beforeGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion;

        internal static event
            Delegates.GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_AfterArgs
            _afterGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion;

        private static bool GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion(
            Func<RotationOptions, Transform, FsmVector3, FsmGameObject, Quaternion, bool> orig, RotationOptions option,
            Transform owner, FsmVector3 rotation, FsmGameObject target, Quaternion targetRotation)
        {
            Delegates.Params_GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion @params =
                new()
                {
                    option = option, owner = owner, rotation = rotation, target = target,
                    targetRotation = targetRotation
                };
            if (_beforeGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion != null)
                foreach
                    (Delegates.
                         GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_BeforeArgs
                         toInvoke in
                     _beforeGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
                         .GetInvocationList())
                    try
                    {
                        _beforeGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion?.Invoke(
                            @params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            owner = @params.owner;
            rotation = @params.rotation;
            target = @params.target;
            targetRotation = @params.targetRotation;
            var retVal = orig(option, owner, rotation, target, targetRotation);
            if (_afterGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion != null)
                foreach
                    (Delegates.GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_AfterArgs
                         toInvoke in
                     _afterGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
                         .GetInvocationList())
                    try
                    {
                        retVal = _afterGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
                            .Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCanEditTargetRotation()
        {
            if (!HookedList.Contains("CanEditTargetRotation"))
            {
                HookedList.Add("CanEditTargetRotation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CanEditTargetRotation", false),
                    CanEditTargetRotation);
            }
        }

        internal static event Delegates.CanEditTargetRotation_BeforeArgs _beforeCanEditTargetRotation;
        internal static event Delegates.CanEditTargetRotation_AfterArgs _afterCanEditTargetRotation;

        private static bool CanEditTargetRotation(Func<RotationOptions, NamedVariable, FsmGameObject, bool> orig,
            RotationOptions option, NamedVariable rotation, FsmGameObject target)
        {
            Delegates.Params_CanEditTargetRotation @params = new()
            {
                option = option, rotation = rotation, target = target
            };
            if (_beforeCanEditTargetRotation != null)
                foreach (Delegates.CanEditTargetRotation_BeforeArgs toInvoke in _beforeCanEditTargetRotation
                             .GetInvocationList())
                    try
                    {
                        _beforeCanEditTargetRotation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            rotation = @params.rotation;
            target = @params.target;
            var retVal = orig(option, rotation, target);
            if (_afterCanEditTargetRotation != null)
                foreach (Delegates.CanEditTargetRotation_AfterArgs toInvoke in _afterCanEditTargetRotation
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCanEditTargetRotation.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTargetScale()
        {
            if (!HookedList.Contains("GetTargetScale"))
            {
                HookedList.Add("GetTargetScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetScale", false),
                    GetTargetScale);
            }
        }

        internal static event Delegates.GetTargetScale_BeforeArgs _beforeGetTargetScale;
        internal static event Delegates.GetTargetScale_AfterArgs _afterGetTargetScale;

        private static Vector3 GetTargetScale(Func<ScaleOptions, Transform, Transform, Vector3, Vector3> orig,
            ScaleOptions option, Transform owner, Transform target, Vector3 scale)
        {
            Delegates.Params_GetTargetScale @params = new()
            {
                option = option, owner = owner, target = target, scale = scale
            };
            if (_beforeGetTargetScale != null)
                foreach (Delegates.GetTargetScale_BeforeArgs toInvoke in _beforeGetTargetScale.GetInvocationList())
                    try
                    {
                        _beforeGetTargetScale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            owner = @params.owner;
            target = @params.target;
            scale = @params.scale;
            var retVal = orig(option, owner, target, scale);
            if (_afterGetTargetScale != null)
                foreach (Delegates.GetTargetScale_AfterArgs toInvoke in _afterGetTargetScale.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTargetScale.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3()
        {
            if (!HookedList.Contains("GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3"))
            {
                HookedList.Add("GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3", false),
                    GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3);
            }
        }

        internal static event
            Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_BeforeArgs
            _beforeGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3;

        internal static event
            Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_AfterArgs
            _afterGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3;

        private static bool GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3(
            Func<PositionOptions, Transform, FsmVector3, FsmGameObject, Vector3, bool> orig, PositionOptions option,
            Transform owner, FsmVector3 position, FsmGameObject target, Vector3 targetPosition)
        {
            Delegates.Params_GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 @params =
                new()
                {
                    option = option, owner = owner, position = position, target = target,
                    targetPosition = targetPosition
                };
            if (_beforeGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 != null)
                foreach
                    (Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_BeforeArgs
                         toInvoke in _beforeGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
                         .GetInvocationList())
                    try
                    {
                        _beforeGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3?.Invoke(
                            @params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            owner = @params.owner;
            position = @params.position;
            target = @params.target;
            targetPosition = @params.targetPosition;
            var retVal = orig(option, owner, position, target, targetPosition);
            if (_afterGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 != null)
                foreach
                    (Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_AfterArgs
                         toInvoke in _afterGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
                         .GetInvocationList())
                    try
                    {
                        retVal = _afterGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
                            .Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsValidTargetPosition()
        {
            if (!HookedList.Contains("IsValidTargetPosition"))
            {
                HookedList.Add("IsValidTargetPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsValidTargetPosition", false),
                    IsValidTargetPosition);
            }
        }

        internal static event Delegates.IsValidTargetPosition_BeforeArgs _beforeIsValidTargetPosition;
        internal static event Delegates.IsValidTargetPosition_AfterArgs _afterIsValidTargetPosition;

        private static bool IsValidTargetPosition(Func<PositionOptions, NamedVariable, FsmGameObject, bool> orig,
            PositionOptions option, NamedVariable position, FsmGameObject target)
        {
            Delegates.Params_IsValidTargetPosition @params = new()
            {
                option = option, position = position, target = target
            };
            if (_beforeIsValidTargetPosition != null)
                foreach (Delegates.IsValidTargetPosition_BeforeArgs toInvoke in _beforeIsValidTargetPosition
                             .GetInvocationList())
                    try
                    {
                        _beforeIsValidTargetPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            position = @params.position;
            target = @params.target;
            var retVal = orig(option, position, target);
            if (_afterIsValidTargetPosition != null)
                foreach (Delegates.IsValidTargetPosition_AfterArgs toInvoke in _afterIsValidTargetPosition
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterIsValidTargetPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCanEditTargetPosition()
        {
            if (!HookedList.Contains("CanEditTargetPosition"))
            {
                HookedList.Add("CanEditTargetPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CanEditTargetPosition", false),
                    CanEditTargetPosition);
            }
        }

        internal static event Delegates.CanEditTargetPosition_BeforeArgs _beforeCanEditTargetPosition;
        internal static event Delegates.CanEditTargetPosition_AfterArgs _afterCanEditTargetPosition;

        private static bool CanEditTargetPosition(Func<PositionOptions, NamedVariable, FsmGameObject, bool> orig,
            PositionOptions option, NamedVariable position, FsmGameObject target)
        {
            Delegates.Params_CanEditTargetPosition @params = new()
            {
                option = option, position = position, target = target
            };
            if (_beforeCanEditTargetPosition != null)
                foreach (Delegates.CanEditTargetPosition_BeforeArgs toInvoke in _beforeCanEditTargetPosition
                             .GetInvocationList())
                    try
                    {
                        _beforeCanEditTargetPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            position = @params.position;
            target = @params.target;
            var retVal = orig(option, position, target);
            if (_afterCanEditTargetPosition != null)
                foreach (Delegates.CanEditTargetPosition_AfterArgs toInvoke in _afterCanEditTargetPosition
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCanEditTargetPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetTargetPosition_PositionOptions_Transform_Transform_Vector3()
        {
            if (!HookedList.Contains("GetTargetPosition_PositionOptions_Transform_Transform_Vector3"))
            {
                HookedList.Add("GetTargetPosition_PositionOptions_Transform_Transform_Vector3");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "GetTargetPosition_PositionOptions_Transform_Transform_Vector3", false),
                    GetTargetPosition_PositionOptions_Transform_Transform_Vector3);
            }
        }

        internal static event Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_BeforeArgs
            _beforeGetTargetPosition_PositionOptions_Transform_Transform_Vector3;

        internal static event Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_AfterArgs
            _afterGetTargetPosition_PositionOptions_Transform_Transform_Vector3;

        private static Vector3 GetTargetPosition_PositionOptions_Transform_Transform_Vector3(
            Func<PositionOptions, Transform, Transform, Vector3, Vector3> orig, PositionOptions option, Transform owner,
            Transform target, Vector3 position)
        {
            Delegates.Params_GetTargetPosition_PositionOptions_Transform_Transform_Vector3 @params = new()
            {
                option = option, owner = owner, target = target, position = position
            };
            if (_beforeGetTargetPosition_PositionOptions_Transform_Transform_Vector3 != null)
                foreach (Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_BeforeArgs toInvoke in
                         _beforeGetTargetPosition_PositionOptions_Transform_Transform_Vector3.GetInvocationList())
                    try
                    {
                        _beforeGetTargetPosition_PositionOptions_Transform_Transform_Vector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            option = @params.option;
            owner = @params.owner;
            target = @params.target;
            position = @params.position;
            var retVal = orig(option, owner, target, position);
            if (_afterGetTargetPosition_PositionOptions_Transform_Transform_Vector3 != null)
                foreach (Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_AfterArgs toInvoke in
                         _afterGetTargetPosition_PositionOptions_Transform_Transform_Vector3.GetInvocationList())
                    try
                    {
                        retVal = _afterGetTargetPosition_PositionOptions_Transform_Transform_Vector3.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsMouseOver()
        {
            if (!HookedList.Contains("IsMouseOver"))
            {
                HookedList.Add("IsMouseOver");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsMouseOver", false), IsMouseOver);
            }
        }

        internal static event Delegates.IsMouseOver_BeforeArgs _beforeIsMouseOver;
        internal static event Delegates.IsMouseOver_AfterArgs _afterIsMouseOver;

        private static bool IsMouseOver(Func<GameObject, float, int, bool> orig, GameObject gameObject, float distance,
            int layerMask)
        {
            Delegates.Params_IsMouseOver @params = new()
            {
                gameObject = gameObject, distance = distance, layerMask = layerMask
            };
            if (_beforeIsMouseOver != null)
                foreach (Delegates.IsMouseOver_BeforeArgs toInvoke in _beforeIsMouseOver.GetInvocationList())
                    try
                    {
                        _beforeIsMouseOver?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            distance = @params.distance;
            layerMask = @params.layerMask;
            var retVal = orig(gameObject, distance, layerMask);
            if (_afterIsMouseOver != null)
                foreach (Delegates.IsMouseOver_AfterArgs toInvoke in _afterIsMouseOver.GetInvocationList())
                    try
                    {
                        retVal = _afterIsMouseOver.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMousePick()
        {
            if (!HookedList.Contains("MousePick"))
            {
                HookedList.Add("MousePick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "MousePick", false), MousePick);
            }
        }

        internal static event Delegates.MousePick_BeforeArgs _beforeMousePick;
        internal static event Delegates.MousePick_AfterArgs _afterMousePick;

        private static RaycastHit MousePick(Func<float, int, RaycastHit> orig, float distance, int layerMask)
        {
            Delegates.Params_MousePick @params = new()
            {
                distance = distance, layerMask = layerMask
            };
            if (_beforeMousePick != null)
                foreach (Delegates.MousePick_BeforeArgs toInvoke in _beforeMousePick.GetInvocationList())
                    try
                    {
                        _beforeMousePick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            distance = @params.distance;
            layerMask = @params.layerMask;
            var retVal = orig(distance, layerMask);
            if (_afterMousePick != null)
                foreach (Delegates.MousePick_AfterArgs toInvoke in _afterMousePick.GetInvocationList())
                    try
                    {
                        retVal = _afterMousePick.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMouseOver()
        {
            if (!HookedList.Contains("MouseOver"))
            {
                HookedList.Add("MouseOver");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "MouseOver", false), MouseOver);
            }
        }

        internal static event Delegates.MouseOver_BeforeArgs _beforeMouseOver;
        internal static event Delegates.MouseOver_AfterArgs _afterMouseOver;

        private static GameObject MouseOver(Func<float, int, GameObject> orig, float distance, int layerMask)
        {
            Delegates.Params_MouseOver @params = new()
            {
                distance = distance, layerMask = layerMask
            };
            if (_beforeMouseOver != null)
                foreach (Delegates.MouseOver_BeforeArgs toInvoke in _beforeMouseOver.GetInvocationList())
                    try
                    {
                        _beforeMouseOver?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            distance = @params.distance;
            layerMask = @params.layerMask;
            var retVal = orig(distance, layerMask);
            if (_afterMouseOver != null)
                foreach (Delegates.MouseOver_AfterArgs toInvoke in _afterMouseOver.GetInvocationList())
                    try
                    {
                        retVal = _afterMouseOver.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDoMousePick()
        {
            if (!HookedList.Contains("DoMousePick"))
            {
                HookedList.Add("DoMousePick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "DoMousePick", false), DoMousePick);
            }
        }

        internal static event Delegates.DoMousePick_BeforeArgs _beforeDoMousePick;
        internal static event Delegates.DoMousePick_AfterArgs _afterDoMousePick;

        private static void DoMousePick(Action<float, int> orig, float distance, int layerMask)
        {
            Delegates.Params_DoMousePick @params = new()
            {
                distance = distance, layerMask = layerMask
            };
            if (_beforeDoMousePick != null)
                foreach (Delegates.DoMousePick_BeforeArgs toInvoke in _beforeDoMousePick.GetInvocationList())
                    try
                    {
                        _beforeDoMousePick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            distance = @params.distance;
            layerMask = @params.layerMask;
            orig(distance, layerMask);
            if (_afterDoMousePick != null)
                foreach (Delegates.DoMousePick_AfterArgs toInvoke in _afterDoMousePick.GetInvocationList())
                    try
                    {
                        _afterDoMousePick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLayerArrayToLayerMask()
        {
            if (!HookedList.Contains("LayerArrayToLayerMask"))
            {
                HookedList.Add("LayerArrayToLayerMask");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LayerArrayToLayerMask", false),
                    LayerArrayToLayerMask);
            }
        }

        internal static event Delegates.LayerArrayToLayerMask_BeforeArgs _beforeLayerArrayToLayerMask;
        internal static event Delegates.LayerArrayToLayerMask_AfterArgs _afterLayerArrayToLayerMask;

        private static int LayerArrayToLayerMask(Func<FsmInt[], bool, int> orig, FsmInt[] layers, bool invert)
        {
            Delegates.Params_LayerArrayToLayerMask @params = new()
            {
                layers = layers, invert = invert
            };
            if (_beforeLayerArrayToLayerMask != null)
                foreach (Delegates.LayerArrayToLayerMask_BeforeArgs toInvoke in _beforeLayerArrayToLayerMask
                             .GetInvocationList())
                    try
                    {
                        _beforeLayerArrayToLayerMask?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            layers = @params.layers;
            invert = @params.invert;
            var retVal = orig(layers, invert);
            if (_afterLayerArrayToLayerMask != null)
                foreach (Delegates.LayerArrayToLayerMask_AfterArgs toInvoke in _afterLayerArrayToLayerMask
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterLayerArrayToLayerMask.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsLoopingWrapMode()
        {
            if (!HookedList.Contains("IsLoopingWrapMode"))
            {
                HookedList.Add("IsLoopingWrapMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsLoopingWrapMode", false),
                    IsLoopingWrapMode);
            }
        }

        internal static event Delegates.IsLoopingWrapMode_BeforeArgs _beforeIsLoopingWrapMode;
        internal static event Delegates.IsLoopingWrapMode_AfterArgs _afterIsLoopingWrapMode;

        private static bool IsLoopingWrapMode(Func<WrapMode, bool> orig, WrapMode wrapMode)
        {
            Delegates.Params_IsLoopingWrapMode @params = new()
            {
                wrapMode = wrapMode
            };
            if (_beforeIsLoopingWrapMode != null)
                foreach (Delegates.IsLoopingWrapMode_BeforeArgs toInvoke in
                         _beforeIsLoopingWrapMode.GetInvocationList())
                    try
                    {
                        _beforeIsLoopingWrapMode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            wrapMode = @params.wrapMode;
            var retVal = orig(wrapMode);
            if (_afterIsLoopingWrapMode != null)
                foreach (Delegates.IsLoopingWrapMode_AfterArgs toInvoke in _afterIsLoopingWrapMode.GetInvocationList())
                    try
                    {
                        retVal = _afterIsLoopingWrapMode.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckRayDistance()
        {
            if (!HookedList.Contains("CheckRayDistance"))
            {
                HookedList.Add("CheckRayDistance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckRayDistance", false),
                    CheckRayDistance);
            }
        }

        internal static event Delegates.CheckRayDistance_BeforeArgs _beforeCheckRayDistance;
        internal static event Delegates.CheckRayDistance_AfterArgs _afterCheckRayDistance;

        private static string CheckRayDistance(Func<float, string> orig, float rayDistance)
        {
            Delegates.Params_CheckRayDistance @params = new()
            {
                rayDistance = rayDistance
            };
            if (_beforeCheckRayDistance != null)
                foreach (Delegates.CheckRayDistance_BeforeArgs toInvoke in _beforeCheckRayDistance.GetInvocationList())
                    try
                    {
                        _beforeCheckRayDistance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rayDistance = @params.rayDistance;
            var retVal = orig(rayDistance);
            if (_afterCheckRayDistance != null)
                foreach (Delegates.CheckRayDistance_AfterArgs toInvoke in _afterCheckRayDistance.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckRayDistance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckForValidEvent()
        {
            if (!HookedList.Contains("CheckForValidEvent"))
            {
                HookedList.Add("CheckForValidEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckForValidEvent", false),
                    CheckForValidEvent);
            }
        }

        internal static event Delegates.CheckForValidEvent_BeforeArgs _beforeCheckForValidEvent;
        internal static event Delegates.CheckForValidEvent_AfterArgs _afterCheckForValidEvent;

        private static string CheckForValidEvent(Func<FsmState, string, string> orig, FsmState state, string eventName)
        {
            Delegates.Params_CheckForValidEvent @params = new()
            {
                state = state, eventName = eventName
            };
            if (_beforeCheckForValidEvent != null)
                foreach (Delegates.CheckForValidEvent_BeforeArgs toInvoke in
                         _beforeCheckForValidEvent.GetInvocationList())
                    try
                    {
                        _beforeCheckForValidEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            state = @params.state;
            eventName = @params.eventName;
            var retVal = orig(state, eventName);
            if (_afterCheckForValidEvent != null)
                foreach (Delegates.CheckForValidEvent_AfterArgs toInvoke in
                         _afterCheckForValidEvent.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckForValidEvent.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckPhysicsSetup_FsmOwnerDefault()
        {
            if (!HookedList.Contains("CheckPhysicsSetup_FsmOwnerDefault"))
            {
                HookedList.Add("CheckPhysicsSetup_FsmOwnerDefault");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysicsSetup_FsmOwnerDefault", false),
                    CheckPhysicsSetup_FsmOwnerDefault);
            }
        }

        internal static event Delegates.CheckPhysicsSetup_FsmOwnerDefault_BeforeArgs
            _beforeCheckPhysicsSetup_FsmOwnerDefault;

        internal static event Delegates.CheckPhysicsSetup_FsmOwnerDefault_AfterArgs
            _afterCheckPhysicsSetup_FsmOwnerDefault;

        private static string CheckPhysicsSetup_FsmOwnerDefault(Func<FsmOwnerDefault, string> orig,
            FsmOwnerDefault ownerDefault)
        {
            Delegates.Params_CheckPhysicsSetup_FsmOwnerDefault @params = new()
            {
                ownerDefault = ownerDefault
            };
            if (_beforeCheckPhysicsSetup_FsmOwnerDefault != null)
                foreach (Delegates.CheckPhysicsSetup_FsmOwnerDefault_BeforeArgs toInvoke in
                         _beforeCheckPhysicsSetup_FsmOwnerDefault.GetInvocationList())
                    try
                    {
                        _beforeCheckPhysicsSetup_FsmOwnerDefault?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            ownerDefault = @params.ownerDefault;
            var retVal = orig(ownerDefault);
            if (_afterCheckPhysicsSetup_FsmOwnerDefault != null)
                foreach (Delegates.CheckPhysicsSetup_FsmOwnerDefault_AfterArgs toInvoke in
                         _afterCheckPhysicsSetup_FsmOwnerDefault.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckPhysicsSetup_FsmOwnerDefault.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckOwnerPhysicsSetup()
        {
            if (!HookedList.Contains("CheckOwnerPhysicsSetup"))
            {
                HookedList.Add("CheckOwnerPhysicsSetup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckOwnerPhysicsSetup", false),
                    CheckOwnerPhysicsSetup);
            }
        }

        internal static event Delegates.CheckOwnerPhysicsSetup_BeforeArgs _beforeCheckOwnerPhysicsSetup;
        internal static event Delegates.CheckOwnerPhysicsSetup_AfterArgs _afterCheckOwnerPhysicsSetup;

        private static string CheckOwnerPhysicsSetup(Func<GameObject, string> orig, GameObject gameObject)
        {
            Delegates.Params_CheckOwnerPhysicsSetup @params = new()
            {
                gameObject = gameObject
            };
            if (_beforeCheckOwnerPhysicsSetup != null)
                foreach (Delegates.CheckOwnerPhysicsSetup_BeforeArgs toInvoke in _beforeCheckOwnerPhysicsSetup
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckOwnerPhysicsSetup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            var retVal = orig(gameObject);
            if (_afterCheckOwnerPhysicsSetup != null)
                foreach (Delegates.CheckOwnerPhysicsSetup_AfterArgs toInvoke in _afterCheckOwnerPhysicsSetup
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCheckOwnerPhysicsSetup.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckPhysicsSetup_GameObject()
        {
            if (!HookedList.Contains("CheckPhysicsSetup_GameObject"))
            {
                HookedList.Add("CheckPhysicsSetup_GameObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysicsSetup_GameObject", false),
                    CheckPhysicsSetup_GameObject);
            }
        }

        internal static event Delegates.CheckPhysicsSetup_GameObject_BeforeArgs _beforeCheckPhysicsSetup_GameObject;
        internal static event Delegates.CheckPhysicsSetup_GameObject_AfterArgs _afterCheckPhysicsSetup_GameObject;

        private static string CheckPhysicsSetup_GameObject(Func<GameObject, string> orig, GameObject gameObject)
        {
            Delegates.Params_CheckPhysicsSetup_GameObject @params = new()
            {
                gameObject = gameObject
            };
            if (_beforeCheckPhysicsSetup_GameObject != null)
                foreach (Delegates.CheckPhysicsSetup_GameObject_BeforeArgs toInvoke in
                         _beforeCheckPhysicsSetup_GameObject.GetInvocationList())
                    try
                    {
                        _beforeCheckPhysicsSetup_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            var retVal = orig(gameObject);
            if (_afterCheckPhysicsSetup_GameObject != null)
                foreach (Delegates.CheckPhysicsSetup_GameObject_AfterArgs toInvoke in _afterCheckPhysicsSetup_GameObject
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCheckPhysicsSetup_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckPhysics2dSetup_FsmOwnerDefault()
        {
            if (!HookedList.Contains("CheckPhysics2dSetup_FsmOwnerDefault"))
            {
                HookedList.Add("CheckPhysics2dSetup_FsmOwnerDefault");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysics2dSetup_FsmOwnerDefault", false),
                    CheckPhysics2dSetup_FsmOwnerDefault);
            }
        }

        internal static event Delegates.CheckPhysics2dSetup_FsmOwnerDefault_BeforeArgs
            _beforeCheckPhysics2dSetup_FsmOwnerDefault;

        internal static event Delegates.CheckPhysics2dSetup_FsmOwnerDefault_AfterArgs
            _afterCheckPhysics2dSetup_FsmOwnerDefault;

        private static string CheckPhysics2dSetup_FsmOwnerDefault(Func<FsmOwnerDefault, string> orig,
            FsmOwnerDefault ownerDefault)
        {
            Delegates.Params_CheckPhysics2dSetup_FsmOwnerDefault @params = new()
            {
                ownerDefault = ownerDefault
            };
            if (_beforeCheckPhysics2dSetup_FsmOwnerDefault != null)
                foreach (Delegates.CheckPhysics2dSetup_FsmOwnerDefault_BeforeArgs toInvoke in
                         _beforeCheckPhysics2dSetup_FsmOwnerDefault.GetInvocationList())
                    try
                    {
                        _beforeCheckPhysics2dSetup_FsmOwnerDefault?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            ownerDefault = @params.ownerDefault;
            var retVal = orig(ownerDefault);
            if (_afterCheckPhysics2dSetup_FsmOwnerDefault != null)
                foreach (Delegates.CheckPhysics2dSetup_FsmOwnerDefault_AfterArgs toInvoke in
                         _afterCheckPhysics2dSetup_FsmOwnerDefault.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckPhysics2dSetup_FsmOwnerDefault.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckOwnerPhysics2dSetup()
        {
            if (!HookedList.Contains("CheckOwnerPhysics2dSetup"))
            {
                HookedList.Add("CheckOwnerPhysics2dSetup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckOwnerPhysics2dSetup", false),
                    CheckOwnerPhysics2dSetup);
            }
        }

        internal static event Delegates.CheckOwnerPhysics2dSetup_BeforeArgs _beforeCheckOwnerPhysics2dSetup;
        internal static event Delegates.CheckOwnerPhysics2dSetup_AfterArgs _afterCheckOwnerPhysics2dSetup;

        private static string CheckOwnerPhysics2dSetup(Func<GameObject, string> orig, GameObject gameObject)
        {
            Delegates.Params_CheckOwnerPhysics2dSetup @params = new()
            {
                gameObject = gameObject
            };
            if (_beforeCheckOwnerPhysics2dSetup != null)
                foreach (Delegates.CheckOwnerPhysics2dSetup_BeforeArgs toInvoke in _beforeCheckOwnerPhysics2dSetup
                             .GetInvocationList())
                    try
                    {
                        _beforeCheckOwnerPhysics2dSetup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            var retVal = orig(gameObject);
            if (_afterCheckOwnerPhysics2dSetup != null)
                foreach (Delegates.CheckOwnerPhysics2dSetup_AfterArgs toInvoke in _afterCheckOwnerPhysics2dSetup
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCheckOwnerPhysics2dSetup.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckPhysics2dSetup_GameObject()
        {
            if (!HookedList.Contains("CheckPhysics2dSetup_GameObject"))
            {
                HookedList.Add("CheckPhysics2dSetup_GameObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysics2dSetup_GameObject", false),
                    CheckPhysics2dSetup_GameObject);
            }
        }

        internal static event Delegates.CheckPhysics2dSetup_GameObject_BeforeArgs _beforeCheckPhysics2dSetup_GameObject;
        internal static event Delegates.CheckPhysics2dSetup_GameObject_AfterArgs _afterCheckPhysics2dSetup_GameObject;

        private static string CheckPhysics2dSetup_GameObject(Func<GameObject, string> orig, GameObject gameObject)
        {
            Delegates.Params_CheckPhysics2dSetup_GameObject @params = new()
            {
                gameObject = gameObject
            };
            if (_beforeCheckPhysics2dSetup_GameObject != null)
                foreach (Delegates.CheckPhysics2dSetup_GameObject_BeforeArgs toInvoke in
                         _beforeCheckPhysics2dSetup_GameObject.GetInvocationList())
                    try
                    {
                        _beforeCheckPhysics2dSetup_GameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            var retVal = orig(gameObject);
            if (_afterCheckPhysics2dSetup_GameObject != null)
                foreach (Delegates.CheckPhysics2dSetup_GameObject_AfterArgs toInvoke in
                         _afterCheckPhysics2dSetup_GameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterCheckPhysics2dSetup_GameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDebugLog()
        {
            if (!HookedList.Contains("DebugLog"))
            {
                HookedList.Add("DebugLog");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "DebugLog", false), DebugLog);
            }
        }

        internal static event Delegates.DebugLog_BeforeArgs _beforeDebugLog;
        internal static event Delegates.DebugLog_AfterArgs _afterDebugLog;

        private static void DebugLog(Action<Fsm, LogLevel, string, bool> orig, Fsm fsm, LogLevel logLevel, string text,
            bool sendToUnityLog)
        {
            Delegates.Params_DebugLog @params = new()
            {
                fsm = fsm, logLevel = logLevel, text = text, sendToUnityLog = sendToUnityLog
            };
            if (_beforeDebugLog != null)
                foreach (Delegates.DebugLog_BeforeArgs toInvoke in _beforeDebugLog.GetInvocationList())
                    try
                    {
                        _beforeDebugLog?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            logLevel = @params.logLevel;
            text = @params.text;
            sendToUnityLog = @params.sendToUnityLog;
            orig(fsm, logLevel, text, sendToUnityLog);
            if (_afterDebugLog != null)
                foreach (Delegates.DebugLog_AfterArgs toInvoke in _afterDebugLog.GetInvocationList())
                    try
                    {
                        _afterDebugLog.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogError()
        {
            if (!HookedList.Contains("LogError"))
            {
                HookedList.Add("LogError");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LogError", false), LogError);
            }
        }

        internal static event Delegates.LogError_BeforeArgs _beforeLogError;
        internal static event Delegates.LogError_AfterArgs _afterLogError;

        private static void LogError(Action<string> orig, string text)
        {
            Delegates.Params_LogError @params = new()
            {
                text = text
            };
            if (_beforeLogError != null)
                foreach (Delegates.LogError_BeforeArgs toInvoke in _beforeLogError.GetInvocationList())
                    try
                    {
                        _beforeLogError?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            orig(text);
            if (_afterLogError != null)
                foreach (Delegates.LogError_AfterArgs toInvoke in _afterLogError.GetInvocationList())
                    try
                    {
                        _afterLogError.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogWarning()
        {
            if (!HookedList.Contains("LogWarning"))
            {
                HookedList.Add("LogWarning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LogWarning", false), LogWarning);
            }
        }

        internal static event Delegates.LogWarning_BeforeArgs _beforeLogWarning;
        internal static event Delegates.LogWarning_AfterArgs _afterLogWarning;

        private static void LogWarning(Action<string> orig, string text)
        {
            Delegates.Params_LogWarning @params = new()
            {
                text = text
            };
            if (_beforeLogWarning != null)
                foreach (Delegates.LogWarning_BeforeArgs toInvoke in _beforeLogWarning.GetInvocationList())
                    try
                    {
                        _beforeLogWarning?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            orig(text);
            if (_afterLogWarning != null)
                foreach (Delegates.LogWarning_AfterArgs toInvoke in _afterLogWarning.GetInvocationList())
                    try
                    {
                        _afterLogWarning.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFormatUnityLogString()
        {
            if (!HookedList.Contains("FormatUnityLogString"))
            {
                HookedList.Add("FormatUnityLogString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "FormatUnityLogString", false),
                    FormatUnityLogString);
            }
        }

        internal static event Delegates.FormatUnityLogString_BeforeArgs _beforeFormatUnityLogString;
        internal static event Delegates.FormatUnityLogString_AfterArgs _afterFormatUnityLogString;

        private static string FormatUnityLogString(Func<string, string> orig, string text)
        {
            Delegates.Params_FormatUnityLogString @params = new()
            {
                text = text
            };
            if (_beforeFormatUnityLogString != null)
                foreach (Delegates.FormatUnityLogString_BeforeArgs toInvoke in _beforeFormatUnityLogString
                             .GetInvocationList())
                    try
                    {
                        _beforeFormatUnityLogString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            text = @params.text;
            var retVal = orig(text);
            if (_afterFormatUnityLogString != null)
                foreach (Delegates.FormatUnityLogString_AfterArgs toInvoke in _afterFormatUnityLogString
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFormatUnityLogString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetValueLabel_INamedVariable()
        {
            if (!HookedList.Contains("GetValueLabel_INamedVariable"))
            {
                HookedList.Add("GetValueLabel_INamedVariable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetValueLabel_INamedVariable", false),
                    GetValueLabel_INamedVariable);
            }
        }

        internal static event Delegates.GetValueLabel_INamedVariable_BeforeArgs _beforeGetValueLabel_INamedVariable;
        internal static event Delegates.GetValueLabel_INamedVariable_AfterArgs _afterGetValueLabel_INamedVariable;

        private static string GetValueLabel_INamedVariable(Func<INamedVariable, string> orig, INamedVariable variable)
        {
            Delegates.Params_GetValueLabel_INamedVariable @params = new()
            {
                variable = variable
            };
            if (_beforeGetValueLabel_INamedVariable != null)
                foreach (Delegates.GetValueLabel_INamedVariable_BeforeArgs toInvoke in
                         _beforeGetValueLabel_INamedVariable.GetInvocationList())
                    try
                    {
                        _beforeGetValueLabel_INamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            variable = @params.variable;
            var retVal = orig(variable);
            if (_afterGetValueLabel_INamedVariable != null)
                foreach (Delegates.GetValueLabel_INamedVariable_AfterArgs toInvoke in _afterGetValueLabel_INamedVariable
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetValueLabel_INamedVariable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetValueLabel_Fsm_FsmOwnerDefault()
        {
            if (!HookedList.Contains("GetValueLabel_Fsm_FsmOwnerDefault"))
            {
                HookedList.Add("GetValueLabel_Fsm_FsmOwnerDefault");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetValueLabel_Fsm_FsmOwnerDefault", false),
                    GetValueLabel_Fsm_FsmOwnerDefault);
            }
        }

        internal static event Delegates.GetValueLabel_Fsm_FsmOwnerDefault_BeforeArgs
            _beforeGetValueLabel_Fsm_FsmOwnerDefault;

        internal static event Delegates.GetValueLabel_Fsm_FsmOwnerDefault_AfterArgs
            _afterGetValueLabel_Fsm_FsmOwnerDefault;

        private static string GetValueLabel_Fsm_FsmOwnerDefault(Func<Fsm, FsmOwnerDefault, string> orig, Fsm fsm,
            FsmOwnerDefault ownerDefault)
        {
            Delegates.Params_GetValueLabel_Fsm_FsmOwnerDefault @params = new()
            {
                fsm = fsm, ownerDefault = ownerDefault
            };
            if (_beforeGetValueLabel_Fsm_FsmOwnerDefault != null)
                foreach (Delegates.GetValueLabel_Fsm_FsmOwnerDefault_BeforeArgs toInvoke in
                         _beforeGetValueLabel_Fsm_FsmOwnerDefault.GetInvocationList())
                    try
                    {
                        _beforeGetValueLabel_Fsm_FsmOwnerDefault?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            ownerDefault = @params.ownerDefault;
            var retVal = orig(fsm, ownerDefault);
            if (_afterGetValueLabel_Fsm_FsmOwnerDefault != null)
                foreach (Delegates.GetValueLabel_Fsm_FsmOwnerDefault_AfterArgs toInvoke in
                         _afterGetValueLabel_Fsm_FsmOwnerDefault.GetInvocationList())
                    try
                    {
                        retVal = _afterGetValueLabel_Fsm_FsmOwnerDefault.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoName_FsmStateAction_Array()
        {
            if (!HookedList.Contains("AutoName_FsmStateAction_Array"))
            {
                HookedList.Add("AutoName_FsmStateAction_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoName_FsmStateAction_Array", false),
                    AutoName_FsmStateAction_Array);
            }
        }

        internal static event Delegates.AutoName_FsmStateAction_Array_BeforeArgs _beforeAutoName_FsmStateAction_Array;
        internal static event Delegates.AutoName_FsmStateAction_Array_AfterArgs _afterAutoName_FsmStateAction_Array;

        private static string AutoName_FsmStateAction_Array(Func<FsmStateAction, INamedVariable[], string> orig,
            FsmStateAction action, INamedVariable[] exposedFields)
        {
            Delegates.Params_AutoName_FsmStateAction_Array @params = new()
            {
                action = action, exposedFields = exposedFields
            };
            if (_beforeAutoName_FsmStateAction_Array != null)
                foreach (Delegates.AutoName_FsmStateAction_Array_BeforeArgs toInvoke in
                         _beforeAutoName_FsmStateAction_Array.GetInvocationList())
                    try
                    {
                        _beforeAutoName_FsmStateAction_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            exposedFields = @params.exposedFields;
            var retVal = orig(action, exposedFields);
            if (_afterAutoName_FsmStateAction_Array != null)
                foreach (Delegates.AutoName_FsmStateAction_Array_AfterArgs toInvoke in
                         _afterAutoName_FsmStateAction_Array.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoName_FsmStateAction_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoName_string_Array()
        {
            if (!HookedList.Contains("AutoName_string_Array"))
            {
                HookedList.Add("AutoName_string_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoName_string_Array", false),
                    AutoName_string_Array);
            }
        }

        internal static event Delegates.AutoName_string_Array_BeforeArgs _beforeAutoName_string_Array;
        internal static event Delegates.AutoName_string_Array_AfterArgs _afterAutoName_string_Array;

        private static string AutoName_string_Array(Func<string, INamedVariable[], string> orig, string actionName,
            INamedVariable[] exposedFields)
        {
            Delegates.Params_AutoName_string_Array @params = new()
            {
                actionName = actionName, exposedFields = exposedFields
            };
            if (_beforeAutoName_string_Array != null)
                foreach (Delegates.AutoName_string_Array_BeforeArgs toInvoke in _beforeAutoName_string_Array
                             .GetInvocationList())
                    try
                    {
                        _beforeAutoName_string_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            actionName = @params.actionName;
            exposedFields = @params.exposedFields;
            var retVal = orig(actionName, exposedFields);
            if (_afterAutoName_string_Array != null)
                foreach (Delegates.AutoName_string_Array_AfterArgs toInvoke in _afterAutoName_string_Array
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterAutoName_string_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameRange_FsmStateAction_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameRange_FsmStateAction_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameRange_FsmStateAction_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameRange_FsmStateAction_NamedVariable_NamedVariable", false),
                    AutoNameRange_FsmStateAction_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameRange_FsmStateAction_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameRange_FsmStateAction_NamedVariable_NamedVariable;

        private static string AutoNameRange_FsmStateAction_NamedVariable_NamedVariable(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action, NamedVariable min,
            NamedVariable max)
        {
            Delegates.Params_AutoNameRange_FsmStateAction_NamedVariable_NamedVariable @params = new()
            {
                action = action, min = min, max = max
            };
            if (_beforeAutoNameRange_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameRange_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameRange_FsmStateAction_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            min = @params.min;
            max = @params.max;
            var retVal = orig(action, min, max);
            if (_afterAutoNameRange_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameRange_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameRange_FsmStateAction_NamedVariable_NamedVariable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameRange_string_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameRange_string_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameRange_string_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameRange_string_NamedVariable_NamedVariable", false),
                    AutoNameRange_string_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameRange_string_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameRange_string_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameRange_string_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameRange_string_NamedVariable_NamedVariable;

        private static string AutoNameRange_string_NamedVariable_NamedVariable(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable min,
            NamedVariable max)
        {
            Delegates.Params_AutoNameRange_string_NamedVariable_NamedVariable @params = new()
            {
                actionName = actionName, min = min, max = max
            };
            if (_beforeAutoNameRange_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameRange_string_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameRange_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameRange_string_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            actionName = @params.actionName;
            min = @params.min;
            max = @params.max;
            var retVal = orig(actionName, min, max);
            if (_afterAutoNameRange_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameRange_string_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameRange_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameRange_string_NamedVariable_NamedVariable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable", false),
                    AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable;

        private static string AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action, NamedVariable var,
            NamedVariable value)
        {
            Delegates.Params_AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable @params = new()
            {
                action = action, var = var, value = value
            };
            if (_beforeAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            var = @params.var;
            value = @params.value;
            var retVal = orig(action, var, value);
            if (_afterAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable
                            .Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameSetVar_string_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameSetVar_string_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameSetVar_string_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameSetVar_string_NamedVariable_NamedVariable", false),
                    AutoNameSetVar_string_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameSetVar_string_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameSetVar_string_NamedVariable_NamedVariable;

        private static string AutoNameSetVar_string_NamedVariable_NamedVariable(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable var,
            NamedVariable value)
        {
            Delegates.Params_AutoNameSetVar_string_NamedVariable_NamedVariable @params = new()
            {
                actionName = actionName, var = var, value = value
            };
            if (_beforeAutoNameSetVar_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameSetVar_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameSetVar_string_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            actionName = @params.actionName;
            var = @params.var;
            value = @params.value;
            var retVal = orig(actionName, var, value);
            if (_afterAutoNameSetVar_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameSetVar_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameSetVar_string_NamedVariable_NamedVariable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable", false),
                    AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable;

        private static string AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action,
            NamedVariable fromVariable, NamedVariable toVariable)
        {
            Delegates.Params_AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable @params = new()
            {
                action = action, fromVariable = fromVariable, toVariable = toVariable
            };
            if (_beforeAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            fromVariable = @params.fromVariable;
            toVariable = @params.toVariable;
            var retVal = orig(action, fromVariable, toVariable);
            if (_afterAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameConvert_string_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameConvert_string_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameConvert_string_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameConvert_string_NamedVariable_NamedVariable", false),
                    AutoNameConvert_string_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameConvert_string_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameConvert_string_NamedVariable_NamedVariable;

        private static string AutoNameConvert_string_NamedVariable_NamedVariable(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable fromVariable,
            NamedVariable toVariable)
        {
            Delegates.Params_AutoNameConvert_string_NamedVariable_NamedVariable @params = new()
            {
                actionName = actionName, fromVariable = fromVariable, toVariable = toVariable
            };
            if (_beforeAutoNameConvert_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameConvert_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameConvert_string_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            actionName = @params.actionName;
            fromVariable = @params.fromVariable;
            toVariable = @params.toVariable;
            var retVal = orig(actionName, fromVariable, toVariable);
            if (_afterAutoNameConvert_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameConvert_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameConvert_string_NamedVariable_NamedVariable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable", false),
                    AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable;

        private static string AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action,
            NamedVariable property, NamedVariable store)
        {
            Delegates.Params_AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable @params = new()
            {
                action = action, property = property, store = store
            };
            if (_beforeAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            property = @params.property;
            store = @params.store;
            var retVal = orig(action, property, store);
            if (_afterAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAutoNameGetProperty_string_NamedVariable_NamedVariable()
        {
            if (!HookedList.Contains("AutoNameGetProperty_string_NamedVariable_NamedVariable"))
            {
                HookedList.Add("AutoNameGetProperty_string_NamedVariable_NamedVariable");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers),
                        "AutoNameGetProperty_string_NamedVariable_NamedVariable", false),
                    AutoNameGetProperty_string_NamedVariable_NamedVariable);
            }
        }

        internal static event Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_BeforeArgs
            _beforeAutoNameGetProperty_string_NamedVariable_NamedVariable;

        internal static event Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_AfterArgs
            _afterAutoNameGetProperty_string_NamedVariable_NamedVariable;

        private static string AutoNameGetProperty_string_NamedVariable_NamedVariable(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable property,
            NamedVariable store)
        {
            Delegates.Params_AutoNameGetProperty_string_NamedVariable_NamedVariable @params = new()
            {
                actionName = actionName, property = property, store = store
            };
            if (_beforeAutoNameGetProperty_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_BeforeArgs toInvoke in
                         _beforeAutoNameGetProperty_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        _beforeAutoNameGetProperty_string_NamedVariable_NamedVariable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            actionName = @params.actionName;
            property = @params.property;
            store = @params.store;
            var retVal = orig(actionName, property, store);
            if (_afterAutoNameGetProperty_string_NamedVariable_NamedVariable != null)
                foreach (Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_AfterArgs toInvoke in
                         _afterAutoNameGetProperty_string_NamedVariable_NamedVariable.GetInvocationList())
                    try
                    {
                        retVal = _afterAutoNameGetProperty_string_NamedVariable_NamedVariable.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookRuntimeError()
        {
            if (!HookedList.Contains("RuntimeError"))
            {
                HookedList.Add("RuntimeError");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "RuntimeError", false), RuntimeError);
            }
        }

        internal static event Delegates.RuntimeError_BeforeArgs _beforeRuntimeError;
        internal static event Delegates.RuntimeError_AfterArgs _afterRuntimeError;

        private static void RuntimeError(Action<FsmStateAction, string> orig, FsmStateAction action, string error)
        {
            Delegates.Params_RuntimeError @params = new()
            {
                action = action, error = error
            };
            if (_beforeRuntimeError != null)
                foreach (Delegates.RuntimeError_BeforeArgs toInvoke in _beforeRuntimeError.GetInvocationList())
                    try
                    {
                        _beforeRuntimeError?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            action = @params.action;
            error = @params.error;
            orig(action, error);
            if (_afterRuntimeError != null)
                foreach (Delegates.RuntimeError_AfterArgs toInvoke in _afterRuntimeError.GetInvocationList())
                    try
                    {
                        _afterRuntimeError.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddAnimationClip_AfterArgs(Params_AddAnimationClip args);

        public delegate void AddAnimationClip_BeforeArgs(Params_AddAnimationClip args);

        public delegate void AddAnimationClip_WithArgs(Action<GameObject, AnimationClip> orig, GameObject go,
            AnimationClip animClip);

        public delegate string AutoName_FsmStateAction_Array_AfterArgs(Params_AutoName_FsmStateAction_Array args,
            string ret);

        public delegate void AutoName_FsmStateAction_Array_BeforeArgs(Params_AutoName_FsmStateAction_Array args);

        public delegate string AutoName_FsmStateAction_Array_WithArgs(
            Func<FsmStateAction, INamedVariable[], string> orig, FsmStateAction action, INamedVariable[] exposedFields);

        public delegate string AutoName_string_Array_AfterArgs(Params_AutoName_string_Array args, string ret);

        public delegate void AutoName_string_Array_BeforeArgs(Params_AutoName_string_Array args);

        public delegate string AutoName_string_Array_WithArgs(Func<string, INamedVariable[], string> orig,
            string actionName, INamedVariable[] exposedFields);

        public delegate string AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable args);

        public delegate string AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_WithArgs(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action,
            NamedVariable fromVariable, NamedVariable toVariable);

        public delegate string AutoNameConvert_string_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameConvert_string_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameConvert_string_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameConvert_string_NamedVariable_NamedVariable args);

        public delegate string AutoNameConvert_string_NamedVariable_NamedVariable_WithArgs(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable fromVariable,
            NamedVariable toVariable);

        public delegate string AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable args);

        public delegate string AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_WithArgs(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action,
            NamedVariable property, NamedVariable store);

        public delegate string AutoNameGetProperty_string_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameGetProperty_string_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameGetProperty_string_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameGetProperty_string_NamedVariable_NamedVariable args);

        public delegate string AutoNameGetProperty_string_NamedVariable_NamedVariable_WithArgs(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable property,
            NamedVariable store);

        public delegate string AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameRange_FsmStateAction_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameRange_FsmStateAction_NamedVariable_NamedVariable args);

        public delegate string AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_WithArgs(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action, NamedVariable min,
            NamedVariable max);

        public delegate string AutoNameRange_string_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameRange_string_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameRange_string_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameRange_string_NamedVariable_NamedVariable args);

        public delegate string AutoNameRange_string_NamedVariable_NamedVariable_WithArgs(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable min,
            NamedVariable max);

        public delegate string AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable args);

        public delegate string AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_WithArgs(
            Func<FsmStateAction, NamedVariable, NamedVariable, string> orig, FsmStateAction action, NamedVariable var,
            NamedVariable value);

        public delegate string AutoNameSetVar_string_NamedVariable_NamedVariable_AfterArgs(
            Params_AutoNameSetVar_string_NamedVariable_NamedVariable args, string ret);

        public delegate void AutoNameSetVar_string_NamedVariable_NamedVariable_BeforeArgs(
            Params_AutoNameSetVar_string_NamedVariable_NamedVariable args);

        public delegate string AutoNameSetVar_string_NamedVariable_NamedVariable_WithArgs(
            Func<string, NamedVariable, NamedVariable, string> orig, string actionName, NamedVariable var,
            NamedVariable value);

        public delegate Color BlendColor_AfterArgs(Params_BlendColor args, Color ret);

        public delegate void BlendColor_BeforeArgs(Params_BlendColor args);

        public delegate Color BlendColor_WithArgs(Func<ColorBlendMode, Color, Color, Color> orig,
            ColorBlendMode blendMode, Color c1, Color c2);

        public delegate bool CanEditTargetPosition_AfterArgs(Params_CanEditTargetPosition args, bool ret);

        public delegate void CanEditTargetPosition_BeforeArgs(Params_CanEditTargetPosition args);

        public delegate bool CanEditTargetPosition_WithArgs(
            Func<PositionOptions, NamedVariable, FsmGameObject, bool> orig, PositionOptions option,
            NamedVariable position, FsmGameObject target);

        public delegate bool CanEditTargetRotation_AfterArgs(Params_CanEditTargetRotation args, bool ret);

        public delegate void CanEditTargetRotation_BeforeArgs(Params_CanEditTargetRotation args);

        public delegate bool CanEditTargetRotation_WithArgs(
            Func<RotationOptions, NamedVariable, FsmGameObject, bool> orig, RotationOptions option,
            NamedVariable rotation, FsmGameObject target);

        public delegate string CheckForValidEvent_AfterArgs(Params_CheckForValidEvent args, string ret);

        public delegate void CheckForValidEvent_BeforeArgs(Params_CheckForValidEvent args);

        public delegate string CheckForValidEvent_WithArgs(Func<FsmState, string, string> orig, FsmState state,
            string eventName);

        public delegate string CheckOwnerPhysics2dSetup_AfterArgs(Params_CheckOwnerPhysics2dSetup args, string ret);

        public delegate void CheckOwnerPhysics2dSetup_BeforeArgs(Params_CheckOwnerPhysics2dSetup args);

        public delegate string CheckOwnerPhysics2dSetup_WithArgs(Func<GameObject, string> orig, GameObject gameObject);

        public delegate string CheckOwnerPhysicsSetup_AfterArgs(Params_CheckOwnerPhysicsSetup args, string ret);

        public delegate void CheckOwnerPhysicsSetup_BeforeArgs(Params_CheckOwnerPhysicsSetup args);

        public delegate string CheckOwnerPhysicsSetup_WithArgs(Func<GameObject, string> orig, GameObject gameObject);

        public delegate string CheckPhysics2dSetup_FsmOwnerDefault_AfterArgs(
            Params_CheckPhysics2dSetup_FsmOwnerDefault args, string ret);

        public delegate void CheckPhysics2dSetup_FsmOwnerDefault_BeforeArgs(
            Params_CheckPhysics2dSetup_FsmOwnerDefault args);

        public delegate string CheckPhysics2dSetup_FsmOwnerDefault_WithArgs(Func<FsmOwnerDefault, string> orig,
            FsmOwnerDefault ownerDefault);

        public delegate string CheckPhysics2dSetup_GameObject_AfterArgs(Params_CheckPhysics2dSetup_GameObject args,
            string ret);

        public delegate void CheckPhysics2dSetup_GameObject_BeforeArgs(Params_CheckPhysics2dSetup_GameObject args);

        public delegate string CheckPhysics2dSetup_GameObject_WithArgs(Func<GameObject, string> orig,
            GameObject gameObject);

        public delegate string CheckPhysicsSetup_FsmOwnerDefault_AfterArgs(
            Params_CheckPhysicsSetup_FsmOwnerDefault args, string ret);

        public delegate void
            CheckPhysicsSetup_FsmOwnerDefault_BeforeArgs(Params_CheckPhysicsSetup_FsmOwnerDefault args);

        public delegate string CheckPhysicsSetup_FsmOwnerDefault_WithArgs(Func<FsmOwnerDefault, string> orig,
            FsmOwnerDefault ownerDefault);

        public delegate string CheckPhysicsSetup_GameObject_AfterArgs(Params_CheckPhysicsSetup_GameObject args,
            string ret);

        public delegate void CheckPhysicsSetup_GameObject_BeforeArgs(Params_CheckPhysicsSetup_GameObject args);

        public delegate string CheckPhysicsSetup_GameObject_WithArgs(Func<GameObject, string> orig,
            GameObject gameObject);

        public delegate string CheckRayDistance_AfterArgs(Params_CheckRayDistance args, string ret);

        public delegate void CheckRayDistance_BeforeArgs(Params_CheckRayDistance args);

        public delegate string CheckRayDistance_WithArgs(Func<float, string> orig, float rayDistance);

        public delegate void DebugLog_AfterArgs(Params_DebugLog args);

        public delegate void DebugLog_BeforeArgs(Params_DebugLog args);

        public delegate void DebugLog_WithArgs(Action<Fsm, LogLevel, string, bool> orig, Fsm fsm, LogLevel logLevel,
            string text, bool sendToUnityLog);

        public delegate void DoMousePick_AfterArgs(Params_DoMousePick args);

        public delegate void DoMousePick_BeforeArgs(Params_DoMousePick args);

        public delegate void DoMousePick_WithArgs(Action<float, int> orig, float distance, int layerMask);

        public delegate string FormatUnityLogString_AfterArgs(Params_FormatUnityLogString args, string ret);

        public delegate void FormatUnityLogString_BeforeArgs(Params_FormatUnityLogString args);

        public delegate string FormatUnityLogString_WithArgs(Func<string, string> orig, string text);

        public delegate Texture2D get_WhiteTexture_AfterArgs(Texture2D ret);

        public delegate void get_WhiteTexture_BeforeArgs();

        public delegate Texture2D get_WhiteTexture_WithArgs(Func<Texture2D> orig);

        public delegate PlayMakerFSM GetGameObjectFsm_AfterArgs(Params_GetGameObjectFsm args, PlayMakerFSM ret);

        public delegate void GetGameObjectFsm_BeforeArgs(Params_GetGameObjectFsm args);

        public delegate PlayMakerFSM GetGameObjectFsm_WithArgs(Func<GameObject, string, PlayMakerFSM> orig,
            GameObject go, string fsmName);

        public delegate GameObject GetOwnerDefault_AfterArgs(Params_GetOwnerDefault args, GameObject ret);

        public delegate void GetOwnerDefault_BeforeArgs(Params_GetOwnerDefault args);

        public delegate GameObject GetOwnerDefault_WithArgs(Func<FsmStateAction, FsmOwnerDefault, GameObject> orig,
            FsmStateAction action, FsmOwnerDefault ownerDefault);

        public delegate Vector3 GetPosition_AfterArgs(Params_GetPosition args, Vector3 ret);

        public delegate void GetPosition_BeforeArgs(Params_GetPosition args);

        public delegate Vector3 GetPosition_WithArgs(Func<FsmGameObject, FsmVector3, Vector3> orig,
            FsmGameObject fsmGameObject, FsmVector3 fsmVector3);

        public delegate int GetRandomWeightedIndex_AfterArgs(Params_GetRandomWeightedIndex args, int ret);

        public delegate void GetRandomWeightedIndex_BeforeArgs(Params_GetRandomWeightedIndex args);

        public delegate int GetRandomWeightedIndex_WithArgs(Func<FsmFloat[], int> orig, FsmFloat[] weights);

        public delegate bool GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_AfterArgs(
            Params_GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 args, bool ret);

        public delegate void GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_BeforeArgs(
            Params_GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 args);

        public delegate bool GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_WithArgs(
            Func<PositionOptions, Transform, FsmVector3, FsmGameObject, Vector3, bool> orig, PositionOptions option,
            Transform owner, FsmVector3 position, FsmGameObject target, Vector3 targetPosition);

        public delegate Vector3 GetTargetPosition_PositionOptions_Transform_Transform_Vector3_AfterArgs(
            Params_GetTargetPosition_PositionOptions_Transform_Transform_Vector3 args, Vector3 ret);

        public delegate void GetTargetPosition_PositionOptions_Transform_Transform_Vector3_BeforeArgs(
            Params_GetTargetPosition_PositionOptions_Transform_Transform_Vector3 args);

        public delegate Vector3 GetTargetPosition_PositionOptions_Transform_Transform_Vector3_WithArgs(
            Func<PositionOptions, Transform, Transform, Vector3, Vector3> orig, PositionOptions option, Transform owner,
            Transform target, Vector3 position);

        public delegate bool GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_AfterArgs(
            Params_GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion args, bool ret);

        public delegate void GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_BeforeArgs(
            Params_GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion args);

        public delegate bool GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_WithArgs(
            Func<RotationOptions, Transform, FsmVector3, FsmGameObject, Quaternion, bool> orig, RotationOptions option,
            Transform owner, FsmVector3 rotation, FsmGameObject target, Quaternion targetRotation);

        public delegate Quaternion GetTargetRotation_RotationOptions_Transform_Transform_Vector3_AfterArgs(
            Params_GetTargetRotation_RotationOptions_Transform_Transform_Vector3 args, Quaternion ret);

        public delegate void GetTargetRotation_RotationOptions_Transform_Transform_Vector3_BeforeArgs(
            Params_GetTargetRotation_RotationOptions_Transform_Transform_Vector3 args);

        public delegate Quaternion GetTargetRotation_RotationOptions_Transform_Transform_Vector3_WithArgs(
            Func<RotationOptions, Transform, Transform, Vector3, Quaternion> orig, RotationOptions option,
            Transform owner, Transform target, Vector3 rotation);

        public delegate Vector3 GetTargetScale_AfterArgs(Params_GetTargetScale args, Vector3 ret);

        public delegate void GetTargetScale_BeforeArgs(Params_GetTargetScale args);

        public delegate Vector3 GetTargetScale_WithArgs(Func<ScaleOptions, Transform, Transform, Vector3, Vector3> orig,
            ScaleOptions option, Transform owner, Transform target, Vector3 scale);

        public delegate string GetValueLabel_Fsm_FsmOwnerDefault_AfterArgs(
            Params_GetValueLabel_Fsm_FsmOwnerDefault args, string ret);

        public delegate void
            GetValueLabel_Fsm_FsmOwnerDefault_BeforeArgs(Params_GetValueLabel_Fsm_FsmOwnerDefault args);

        public delegate string GetValueLabel_Fsm_FsmOwnerDefault_WithArgs(Func<Fsm, FsmOwnerDefault, string> orig,
            Fsm fsm, FsmOwnerDefault ownerDefault);

        public delegate string GetValueLabel_INamedVariable_AfterArgs(Params_GetValueLabel_INamedVariable args,
            string ret);

        public delegate void GetValueLabel_INamedVariable_BeforeArgs(Params_GetValueLabel_INamedVariable args);

        public delegate string GetValueLabel_INamedVariable_WithArgs(Func<INamedVariable, string> orig,
            INamedVariable variable);

        public delegate bool HasAnimationFinished_AfterArgs(Params_HasAnimationFinished args, bool ret);

        public delegate void HasAnimationFinished_BeforeArgs(Params_HasAnimationFinished args);

        public delegate bool HasAnimationFinished_WithArgs(Func<AnimationState, float, float, bool> orig,
            AnimationState anim, float prevTime, float currentTime);

        public delegate bool IsLoopingWrapMode_AfterArgs(Params_IsLoopingWrapMode args, bool ret);

        public delegate void IsLoopingWrapMode_BeforeArgs(Params_IsLoopingWrapMode args);

        public delegate bool IsLoopingWrapMode_WithArgs(Func<WrapMode, bool> orig, WrapMode wrapMode);

        public delegate bool IsMouseOver_AfterArgs(Params_IsMouseOver args, bool ret);

        public delegate void IsMouseOver_BeforeArgs(Params_IsMouseOver args);

        public delegate bool IsMouseOver_WithArgs(Func<GameObject, float, int, bool> orig, GameObject gameObject,
            float distance, int layerMask);

        public delegate bool IsValidTargetPosition_AfterArgs(Params_IsValidTargetPosition args, bool ret);

        public delegate void IsValidTargetPosition_BeforeArgs(Params_IsValidTargetPosition args);

        public delegate bool IsValidTargetPosition_WithArgs(
            Func<PositionOptions, NamedVariable, FsmGameObject, bool> orig, PositionOptions option,
            NamedVariable position, FsmGameObject target);

        public delegate bool IsVisible_AfterArgs(Params_IsVisible args, bool ret);

        public delegate void IsVisible_BeforeArgs(Params_IsVisible args);

        public delegate bool IsVisible_WithArgs(Func<GameObject, bool> orig, GameObject go);

        public delegate int LayerArrayToLayerMask_AfterArgs(Params_LayerArrayToLayerMask args, int ret);

        public delegate void LayerArrayToLayerMask_BeforeArgs(Params_LayerArrayToLayerMask args);

        public delegate int
            LayerArrayToLayerMask_WithArgs(Func<FsmInt[], bool, int> orig, FsmInt[] layers, bool invert);

        public delegate void LogError_AfterArgs(Params_LogError args);

        public delegate void LogError_BeforeArgs(Params_LogError args);

        public delegate void LogError_WithArgs(Action<string> orig, string text);

        public delegate void LogWarning_AfterArgs(Params_LogWarning args);

        public delegate void LogWarning_BeforeArgs(Params_LogWarning args);

        public delegate void LogWarning_WithArgs(Action<string> orig, string text);

        public delegate GameObject MouseOver_AfterArgs(Params_MouseOver args, GameObject ret);

        public delegate void MouseOver_BeforeArgs(Params_MouseOver args);

        public delegate GameObject MouseOver_WithArgs(Func<float, int, GameObject> orig, float distance, int layerMask);

        public delegate RaycastHit MousePick_AfterArgs(Params_MousePick args, RaycastHit ret);

        public delegate void MousePick_BeforeArgs(Params_MousePick args);

        public delegate RaycastHit MousePick_WithArgs(Func<float, int, RaycastHit> orig, float distance, int layerMask);

        public delegate void RuntimeError_AfterArgs(Params_RuntimeError args);

        public delegate void RuntimeError_BeforeArgs(Params_RuntimeError args);

        public delegate void RuntimeError_WithArgs(Action<FsmStateAction, string> orig, FsmStateAction action,
            string error);

        public sealed class Params_BlendColor
        {
            public ColorBlendMode blendMode;
            public Color c1;
            public Color c2;
        }

        public sealed class Params_IsVisible
        {
            public GameObject go;
        }

        public sealed class Params_GetOwnerDefault
        {
            public FsmStateAction action;
            public FsmOwnerDefault ownerDefault;
        }

        public sealed class Params_GetGameObjectFsm
        {
            public string fsmName;
            public GameObject go;
        }

        public sealed class Params_GetRandomWeightedIndex
        {
            public FsmFloat[] weights;
        }

        public sealed class Params_AddAnimationClip
        {
            public AnimationClip animClip;
            public GameObject go;
        }

        public sealed class Params_HasAnimationFinished
        {
            public AnimationState anim;
            public float currentTime;
            public float prevTime;
        }

        public sealed class Params_GetPosition
        {
            public FsmGameObject fsmGameObject;
            public FsmVector3 fsmVector3;
        }

        public sealed class Params_GetTargetRotation_RotationOptions_Transform_Transform_Vector3
        {
            public RotationOptions option;
            public Transform owner;
            public Vector3 rotation;
            public Transform target;
        }

        public sealed class Params_GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
        {
            public RotationOptions option;
            public Transform owner;
            public FsmVector3 rotation;
            public FsmGameObject target;
            public Quaternion targetRotation;
        }

        public sealed class Params_CanEditTargetRotation
        {
            public RotationOptions option;
            public NamedVariable rotation;
            public FsmGameObject target;
        }

        public sealed class Params_GetTargetScale
        {
            public ScaleOptions option;
            public Transform owner;
            public Vector3 scale;
            public Transform target;
        }

        public sealed class Params_GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
        {
            public PositionOptions option;
            public Transform owner;
            public FsmVector3 position;
            public FsmGameObject target;
            public Vector3 targetPosition;
        }

        public sealed class Params_IsValidTargetPosition
        {
            public PositionOptions option;
            public NamedVariable position;
            public FsmGameObject target;
        }

        public sealed class Params_CanEditTargetPosition
        {
            public PositionOptions option;
            public NamedVariable position;
            public FsmGameObject target;
        }

        public sealed class Params_GetTargetPosition_PositionOptions_Transform_Transform_Vector3
        {
            public PositionOptions option;
            public Transform owner;
            public Vector3 position;
            public Transform target;
        }

        public sealed class Params_IsMouseOver
        {
            public float distance;
            public GameObject gameObject;
            public int layerMask;
        }

        public sealed class Params_MousePick
        {
            public float distance;
            public int layerMask;
        }

        public sealed class Params_MouseOver
        {
            public float distance;
            public int layerMask;
        }

        public sealed class Params_DoMousePick
        {
            public float distance;
            public int layerMask;
        }

        public sealed class Params_LayerArrayToLayerMask
        {
            public bool invert;
            public FsmInt[] layers;
        }

        public sealed class Params_IsLoopingWrapMode
        {
            public WrapMode wrapMode;
        }

        public sealed class Params_CheckRayDistance
        {
            public float rayDistance;
        }

        public sealed class Params_CheckForValidEvent
        {
            public string eventName;
            public FsmState state;
        }

        public sealed class Params_CheckPhysicsSetup_FsmOwnerDefault
        {
            public FsmOwnerDefault ownerDefault;
        }

        public sealed class Params_CheckOwnerPhysicsSetup
        {
            public GameObject gameObject;
        }

        public sealed class Params_CheckPhysicsSetup_GameObject
        {
            public GameObject gameObject;
        }

        public sealed class Params_CheckPhysics2dSetup_FsmOwnerDefault
        {
            public FsmOwnerDefault ownerDefault;
        }

        public sealed class Params_CheckOwnerPhysics2dSetup
        {
            public GameObject gameObject;
        }

        public sealed class Params_CheckPhysics2dSetup_GameObject
        {
            public GameObject gameObject;
        }

        public sealed class Params_DebugLog
        {
            public Fsm fsm;
            public LogLevel logLevel;
            public bool sendToUnityLog;
            public string text;
        }

        public sealed class Params_LogError
        {
            public string text;
        }

        public sealed class Params_LogWarning
        {
            public string text;
        }

        public sealed class Params_FormatUnityLogString
        {
            public string text;
        }

        public sealed class Params_GetValueLabel_INamedVariable
        {
            public INamedVariable variable;
        }

        public sealed class Params_GetValueLabel_Fsm_FsmOwnerDefault
        {
            public Fsm fsm;
            public FsmOwnerDefault ownerDefault;
        }

        public sealed class Params_AutoName_FsmStateAction_Array
        {
            public FsmStateAction action;
            public INamedVariable[] exposedFields;
        }

        public sealed class Params_AutoName_string_Array
        {
            public string actionName;
            public INamedVariable[] exposedFields;
        }

        public sealed class Params_AutoNameRange_FsmStateAction_NamedVariable_NamedVariable
        {
            public FsmStateAction action;
            public NamedVariable max;
            public NamedVariable min;
        }

        public sealed class Params_AutoNameRange_string_NamedVariable_NamedVariable
        {
            public string actionName;
            public NamedVariable max;
            public NamedVariable min;
        }

        public sealed class Params_AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable
        {
            public FsmStateAction action;
            public NamedVariable value;
            public NamedVariable var;
        }

        public sealed class Params_AutoNameSetVar_string_NamedVariable_NamedVariable
        {
            public string actionName;
            public NamedVariable value;
            public NamedVariable var;
        }

        public sealed class Params_AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable
        {
            public FsmStateAction action;
            public NamedVariable fromVariable;
            public NamedVariable toVariable;
        }

        public sealed class Params_AutoNameConvert_string_NamedVariable_NamedVariable
        {
            public string actionName;
            public NamedVariable fromVariable;
            public NamedVariable toVariable;
        }

        public sealed class Params_AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable
        {
            public FsmStateAction action;
            public NamedVariable property;
            public NamedVariable store;
        }

        public sealed class Params_AutoNameGetProperty_string_NamedVariable_NamedVariable
        {
            public string actionName;
            public NamedVariable property;
            public NamedVariable store;
        }

        public sealed class Params_RuntimeError
        {
            public FsmStateAction action;
            public string error;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_WhiteTexture_BeforeArgs get_WhiteTexture
        {
            add
            {
                HookHandler._beforeget_WhiteTexture += value;
                HookHandler.Hookget_WhiteTexture();
            }
            remove => HookHandler._beforeget_WhiteTexture -= value;
        }

        public static event Delegates.BlendColor_BeforeArgs BlendColor
        {
            add
            {
                HookHandler._beforeBlendColor += value;
                HookHandler.HookBlendColor();
            }
            remove => HookHandler._beforeBlendColor -= value;
        }

        public static event Delegates.IsVisible_BeforeArgs IsVisible
        {
            add
            {
                HookHandler._beforeIsVisible += value;
                HookHandler.HookIsVisible();
            }
            remove => HookHandler._beforeIsVisible -= value;
        }

        public static event Delegates.GetOwnerDefault_BeforeArgs GetOwnerDefault
        {
            add
            {
                HookHandler._beforeGetOwnerDefault += value;
                HookHandler.HookGetOwnerDefault();
            }
            remove => HookHandler._beforeGetOwnerDefault -= value;
        }

        public static event Delegates.GetGameObjectFsm_BeforeArgs GetGameObjectFsm
        {
            add
            {
                HookHandler._beforeGetGameObjectFsm += value;
                HookHandler.HookGetGameObjectFsm();
            }
            remove => HookHandler._beforeGetGameObjectFsm -= value;
        }

        public static event Delegates.GetRandomWeightedIndex_BeforeArgs GetRandomWeightedIndex
        {
            add
            {
                HookHandler._beforeGetRandomWeightedIndex += value;
                HookHandler.HookGetRandomWeightedIndex();
            }
            remove => HookHandler._beforeGetRandomWeightedIndex -= value;
        }

        public static event Delegates.AddAnimationClip_BeforeArgs AddAnimationClip
        {
            add
            {
                HookHandler._beforeAddAnimationClip += value;
                HookHandler.HookAddAnimationClip();
            }
            remove => HookHandler._beforeAddAnimationClip -= value;
        }

        public static event Delegates.HasAnimationFinished_BeforeArgs HasAnimationFinished
        {
            add
            {
                HookHandler._beforeHasAnimationFinished += value;
                HookHandler.HookHasAnimationFinished();
            }
            remove => HookHandler._beforeHasAnimationFinished -= value;
        }

        public static event Delegates.GetPosition_BeforeArgs GetPosition
        {
            add
            {
                HookHandler._beforeGetPosition += value;
                HookHandler.HookGetPosition();
            }
            remove => HookHandler._beforeGetPosition -= value;
        }

        public static event Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_BeforeArgs
            GetTargetRotation_RotationOptions_Transform_Transform_Vector3
            {
                add
                {
                    HookHandler._beforeGetTargetRotation_RotationOptions_Transform_Transform_Vector3 += value;
                    HookHandler.HookGetTargetRotation_RotationOptions_Transform_Transform_Vector3();
                }
                remove => HookHandler._beforeGetTargetRotation_RotationOptions_Transform_Transform_Vector3 -= value;
            }

        public static event
            Delegates.GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_BeforeArgs
            GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
            {
                add
                {
                    HookHandler
                            ._beforeGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion +=
                        value;
                    HookHandler.HookGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion();
                }
                remove => HookHandler
                    ._beforeGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion -= value;
            }

        public static event Delegates.CanEditTargetRotation_BeforeArgs CanEditTargetRotation
        {
            add
            {
                HookHandler._beforeCanEditTargetRotation += value;
                HookHandler.HookCanEditTargetRotation();
            }
            remove => HookHandler._beforeCanEditTargetRotation -= value;
        }

        public static event Delegates.GetTargetScale_BeforeArgs GetTargetScale
        {
            add
            {
                HookHandler._beforeGetTargetScale += value;
                HookHandler.HookGetTargetScale();
            }
            remove => HookHandler._beforeGetTargetScale -= value;
        }

        public static event
            Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_BeforeArgs
            GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
            {
                add
                {
                    HookHandler._beforeGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 +=
                        value;
                    HookHandler.HookGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3();
                }
                remove => HookHandler
                    ._beforeGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 -= value;
            }

        public static event Delegates.IsValidTargetPosition_BeforeArgs IsValidTargetPosition
        {
            add
            {
                HookHandler._beforeIsValidTargetPosition += value;
                HookHandler.HookIsValidTargetPosition();
            }
            remove => HookHandler._beforeIsValidTargetPosition -= value;
        }

        public static event Delegates.CanEditTargetPosition_BeforeArgs CanEditTargetPosition
        {
            add
            {
                HookHandler._beforeCanEditTargetPosition += value;
                HookHandler.HookCanEditTargetPosition();
            }
            remove => HookHandler._beforeCanEditTargetPosition -= value;
        }

        public static event Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_BeforeArgs
            GetTargetPosition_PositionOptions_Transform_Transform_Vector3
            {
                add
                {
                    HookHandler._beforeGetTargetPosition_PositionOptions_Transform_Transform_Vector3 += value;
                    HookHandler.HookGetTargetPosition_PositionOptions_Transform_Transform_Vector3();
                }
                remove => HookHandler._beforeGetTargetPosition_PositionOptions_Transform_Transform_Vector3 -= value;
            }

        public static event Delegates.IsMouseOver_BeforeArgs IsMouseOver
        {
            add
            {
                HookHandler._beforeIsMouseOver += value;
                HookHandler.HookIsMouseOver();
            }
            remove => HookHandler._beforeIsMouseOver -= value;
        }

        public static event Delegates.MousePick_BeforeArgs MousePick
        {
            add
            {
                HookHandler._beforeMousePick += value;
                HookHandler.HookMousePick();
            }
            remove => HookHandler._beforeMousePick -= value;
        }

        public static event Delegates.MouseOver_BeforeArgs MouseOver
        {
            add
            {
                HookHandler._beforeMouseOver += value;
                HookHandler.HookMouseOver();
            }
            remove => HookHandler._beforeMouseOver -= value;
        }

        public static event Delegates.DoMousePick_BeforeArgs DoMousePick
        {
            add
            {
                HookHandler._beforeDoMousePick += value;
                HookHandler.HookDoMousePick();
            }
            remove => HookHandler._beforeDoMousePick -= value;
        }

        public static event Delegates.LayerArrayToLayerMask_BeforeArgs LayerArrayToLayerMask
        {
            add
            {
                HookHandler._beforeLayerArrayToLayerMask += value;
                HookHandler.HookLayerArrayToLayerMask();
            }
            remove => HookHandler._beforeLayerArrayToLayerMask -= value;
        }

        public static event Delegates.IsLoopingWrapMode_BeforeArgs IsLoopingWrapMode
        {
            add
            {
                HookHandler._beforeIsLoopingWrapMode += value;
                HookHandler.HookIsLoopingWrapMode();
            }
            remove => HookHandler._beforeIsLoopingWrapMode -= value;
        }

        public static event Delegates.CheckRayDistance_BeforeArgs CheckRayDistance
        {
            add
            {
                HookHandler._beforeCheckRayDistance += value;
                HookHandler.HookCheckRayDistance();
            }
            remove => HookHandler._beforeCheckRayDistance -= value;
        }

        public static event Delegates.CheckForValidEvent_BeforeArgs CheckForValidEvent
        {
            add
            {
                HookHandler._beforeCheckForValidEvent += value;
                HookHandler.HookCheckForValidEvent();
            }
            remove => HookHandler._beforeCheckForValidEvent -= value;
        }

        public static event Delegates.CheckPhysicsSetup_FsmOwnerDefault_BeforeArgs CheckPhysicsSetup_FsmOwnerDefault
        {
            add
            {
                HookHandler._beforeCheckPhysicsSetup_FsmOwnerDefault += value;
                HookHandler.HookCheckPhysicsSetup_FsmOwnerDefault();
            }
            remove => HookHandler._beforeCheckPhysicsSetup_FsmOwnerDefault -= value;
        }

        public static event Delegates.CheckOwnerPhysicsSetup_BeforeArgs CheckOwnerPhysicsSetup
        {
            add
            {
                HookHandler._beforeCheckOwnerPhysicsSetup += value;
                HookHandler.HookCheckOwnerPhysicsSetup();
            }
            remove => HookHandler._beforeCheckOwnerPhysicsSetup -= value;
        }

        public static event Delegates.CheckPhysicsSetup_GameObject_BeforeArgs CheckPhysicsSetup_GameObject
        {
            add
            {
                HookHandler._beforeCheckPhysicsSetup_GameObject += value;
                HookHandler.HookCheckPhysicsSetup_GameObject();
            }
            remove => HookHandler._beforeCheckPhysicsSetup_GameObject -= value;
        }

        public static event Delegates.CheckPhysics2dSetup_FsmOwnerDefault_BeforeArgs CheckPhysics2dSetup_FsmOwnerDefault
        {
            add
            {
                HookHandler._beforeCheckPhysics2dSetup_FsmOwnerDefault += value;
                HookHandler.HookCheckPhysics2dSetup_FsmOwnerDefault();
            }
            remove => HookHandler._beforeCheckPhysics2dSetup_FsmOwnerDefault -= value;
        }

        public static event Delegates.CheckOwnerPhysics2dSetup_BeforeArgs CheckOwnerPhysics2dSetup
        {
            add
            {
                HookHandler._beforeCheckOwnerPhysics2dSetup += value;
                HookHandler.HookCheckOwnerPhysics2dSetup();
            }
            remove => HookHandler._beforeCheckOwnerPhysics2dSetup -= value;
        }

        public static event Delegates.CheckPhysics2dSetup_GameObject_BeforeArgs CheckPhysics2dSetup_GameObject
        {
            add
            {
                HookHandler._beforeCheckPhysics2dSetup_GameObject += value;
                HookHandler.HookCheckPhysics2dSetup_GameObject();
            }
            remove => HookHandler._beforeCheckPhysics2dSetup_GameObject -= value;
        }

        public static event Delegates.DebugLog_BeforeArgs DebugLog
        {
            add
            {
                HookHandler._beforeDebugLog += value;
                HookHandler.HookDebugLog();
            }
            remove => HookHandler._beforeDebugLog -= value;
        }

        public static event Delegates.LogError_BeforeArgs LogError
        {
            add
            {
                HookHandler._beforeLogError += value;
                HookHandler.HookLogError();
            }
            remove => HookHandler._beforeLogError -= value;
        }

        public static event Delegates.LogWarning_BeforeArgs LogWarning
        {
            add
            {
                HookHandler._beforeLogWarning += value;
                HookHandler.HookLogWarning();
            }
            remove => HookHandler._beforeLogWarning -= value;
        }

        public static event Delegates.FormatUnityLogString_BeforeArgs FormatUnityLogString
        {
            add
            {
                HookHandler._beforeFormatUnityLogString += value;
                HookHandler.HookFormatUnityLogString();
            }
            remove => HookHandler._beforeFormatUnityLogString -= value;
        }

        public static event Delegates.GetValueLabel_INamedVariable_BeforeArgs GetValueLabel_INamedVariable
        {
            add
            {
                HookHandler._beforeGetValueLabel_INamedVariable += value;
                HookHandler.HookGetValueLabel_INamedVariable();
            }
            remove => HookHandler._beforeGetValueLabel_INamedVariable -= value;
        }

        public static event Delegates.GetValueLabel_Fsm_FsmOwnerDefault_BeforeArgs GetValueLabel_Fsm_FsmOwnerDefault
        {
            add
            {
                HookHandler._beforeGetValueLabel_Fsm_FsmOwnerDefault += value;
                HookHandler.HookGetValueLabel_Fsm_FsmOwnerDefault();
            }
            remove => HookHandler._beforeGetValueLabel_Fsm_FsmOwnerDefault -= value;
        }

        public static event Delegates.AutoName_FsmStateAction_Array_BeforeArgs AutoName_FsmStateAction_Array
        {
            add
            {
                HookHandler._beforeAutoName_FsmStateAction_Array += value;
                HookHandler.HookAutoName_FsmStateAction_Array();
            }
            remove => HookHandler._beforeAutoName_FsmStateAction_Array -= value;
        }

        public static event Delegates.AutoName_string_Array_BeforeArgs AutoName_string_Array
        {
            add
            {
                HookHandler._beforeAutoName_string_Array += value;
                HookHandler.HookAutoName_string_Array();
            }
            remove => HookHandler._beforeAutoName_string_Array -= value;
        }

        public static event Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            AutoNameRange_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameRange_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameRange_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameRange_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameRange_string_NamedVariable_NamedVariable_BeforeArgs
            AutoNameRange_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameRange_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameRange_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameRange_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_BeforeArgs
            AutoNameSetVar_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameSetVar_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameSetVar_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameSetVar_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_BeforeArgs
            AutoNameConvert_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameConvert_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameConvert_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameConvert_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_BeforeArgs
            AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_BeforeArgs
            AutoNameGetProperty_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._beforeAutoNameGetProperty_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameGetProperty_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._beforeAutoNameGetProperty_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.RuntimeError_BeforeArgs RuntimeError
        {
            add
            {
                HookHandler._beforeRuntimeError += value;
                HookHandler.HookRuntimeError();
            }
            remove => HookHandler._beforeRuntimeError -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_WhiteTexture_AfterArgs get_WhiteTexture
        {
            add
            {
                HookHandler._afterget_WhiteTexture += value;
                HookHandler.Hookget_WhiteTexture();
            }
            remove => HookHandler._afterget_WhiteTexture -= value;
        }

        public static event Delegates.BlendColor_AfterArgs BlendColor
        {
            add
            {
                HookHandler._afterBlendColor += value;
                HookHandler.HookBlendColor();
            }
            remove => HookHandler._afterBlendColor -= value;
        }

        public static event Delegates.IsVisible_AfterArgs IsVisible
        {
            add
            {
                HookHandler._afterIsVisible += value;
                HookHandler.HookIsVisible();
            }
            remove => HookHandler._afterIsVisible -= value;
        }

        public static event Delegates.GetOwnerDefault_AfterArgs GetOwnerDefault
        {
            add
            {
                HookHandler._afterGetOwnerDefault += value;
                HookHandler.HookGetOwnerDefault();
            }
            remove => HookHandler._afterGetOwnerDefault -= value;
        }

        public static event Delegates.GetGameObjectFsm_AfterArgs GetGameObjectFsm
        {
            add
            {
                HookHandler._afterGetGameObjectFsm += value;
                HookHandler.HookGetGameObjectFsm();
            }
            remove => HookHandler._afterGetGameObjectFsm -= value;
        }

        public static event Delegates.GetRandomWeightedIndex_AfterArgs GetRandomWeightedIndex
        {
            add
            {
                HookHandler._afterGetRandomWeightedIndex += value;
                HookHandler.HookGetRandomWeightedIndex();
            }
            remove => HookHandler._afterGetRandomWeightedIndex -= value;
        }

        public static event Delegates.AddAnimationClip_AfterArgs AddAnimationClip
        {
            add
            {
                HookHandler._afterAddAnimationClip += value;
                HookHandler.HookAddAnimationClip();
            }
            remove => HookHandler._afterAddAnimationClip -= value;
        }

        public static event Delegates.HasAnimationFinished_AfterArgs HasAnimationFinished
        {
            add
            {
                HookHandler._afterHasAnimationFinished += value;
                HookHandler.HookHasAnimationFinished();
            }
            remove => HookHandler._afterHasAnimationFinished -= value;
        }

        public static event Delegates.GetPosition_AfterArgs GetPosition
        {
            add
            {
                HookHandler._afterGetPosition += value;
                HookHandler.HookGetPosition();
            }
            remove => HookHandler._afterGetPosition -= value;
        }

        public static event Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_AfterArgs
            GetTargetRotation_RotationOptions_Transform_Transform_Vector3
            {
                add
                {
                    HookHandler._afterGetTargetRotation_RotationOptions_Transform_Transform_Vector3 += value;
                    HookHandler.HookGetTargetRotation_RotationOptions_Transform_Transform_Vector3();
                }
                remove => HookHandler._afterGetTargetRotation_RotationOptions_Transform_Transform_Vector3 -= value;
            }

        public static event
            Delegates.GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_AfterArgs
            GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
            {
                add
                {
                    HookHandler._afterGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion +=
                        value;
                    HookHandler.HookGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion();
                }
                remove => HookHandler
                    ._afterGetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion -= value;
            }

        public static event Delegates.CanEditTargetRotation_AfterArgs CanEditTargetRotation
        {
            add
            {
                HookHandler._afterCanEditTargetRotation += value;
                HookHandler.HookCanEditTargetRotation();
            }
            remove => HookHandler._afterCanEditTargetRotation -= value;
        }

        public static event Delegates.GetTargetScale_AfterArgs GetTargetScale
        {
            add
            {
                HookHandler._afterGetTargetScale += value;
                HookHandler.HookGetTargetScale();
            }
            remove => HookHandler._afterGetTargetScale -= value;
        }

        public static event
            Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_AfterArgs
            GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
            {
                add
                {
                    HookHandler._afterGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 +=
                        value;
                    HookHandler.HookGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3();
                }
                remove =>
                    HookHandler._afterGetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3 -=
                        value;
            }

        public static event Delegates.IsValidTargetPosition_AfterArgs IsValidTargetPosition
        {
            add
            {
                HookHandler._afterIsValidTargetPosition += value;
                HookHandler.HookIsValidTargetPosition();
            }
            remove => HookHandler._afterIsValidTargetPosition -= value;
        }

        public static event Delegates.CanEditTargetPosition_AfterArgs CanEditTargetPosition
        {
            add
            {
                HookHandler._afterCanEditTargetPosition += value;
                HookHandler.HookCanEditTargetPosition();
            }
            remove => HookHandler._afterCanEditTargetPosition -= value;
        }

        public static event Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_AfterArgs
            GetTargetPosition_PositionOptions_Transform_Transform_Vector3
            {
                add
                {
                    HookHandler._afterGetTargetPosition_PositionOptions_Transform_Transform_Vector3 += value;
                    HookHandler.HookGetTargetPosition_PositionOptions_Transform_Transform_Vector3();
                }
                remove => HookHandler._afterGetTargetPosition_PositionOptions_Transform_Transform_Vector3 -= value;
            }

        public static event Delegates.IsMouseOver_AfterArgs IsMouseOver
        {
            add
            {
                HookHandler._afterIsMouseOver += value;
                HookHandler.HookIsMouseOver();
            }
            remove => HookHandler._afterIsMouseOver -= value;
        }

        public static event Delegates.MousePick_AfterArgs MousePick
        {
            add
            {
                HookHandler._afterMousePick += value;
                HookHandler.HookMousePick();
            }
            remove => HookHandler._afterMousePick -= value;
        }

        public static event Delegates.MouseOver_AfterArgs MouseOver
        {
            add
            {
                HookHandler._afterMouseOver += value;
                HookHandler.HookMouseOver();
            }
            remove => HookHandler._afterMouseOver -= value;
        }

        public static event Delegates.DoMousePick_AfterArgs DoMousePick
        {
            add
            {
                HookHandler._afterDoMousePick += value;
                HookHandler.HookDoMousePick();
            }
            remove => HookHandler._afterDoMousePick -= value;
        }

        public static event Delegates.LayerArrayToLayerMask_AfterArgs LayerArrayToLayerMask
        {
            add
            {
                HookHandler._afterLayerArrayToLayerMask += value;
                HookHandler.HookLayerArrayToLayerMask();
            }
            remove => HookHandler._afterLayerArrayToLayerMask -= value;
        }

        public static event Delegates.IsLoopingWrapMode_AfterArgs IsLoopingWrapMode
        {
            add
            {
                HookHandler._afterIsLoopingWrapMode += value;
                HookHandler.HookIsLoopingWrapMode();
            }
            remove => HookHandler._afterIsLoopingWrapMode -= value;
        }

        public static event Delegates.CheckRayDistance_AfterArgs CheckRayDistance
        {
            add
            {
                HookHandler._afterCheckRayDistance += value;
                HookHandler.HookCheckRayDistance();
            }
            remove => HookHandler._afterCheckRayDistance -= value;
        }

        public static event Delegates.CheckForValidEvent_AfterArgs CheckForValidEvent
        {
            add
            {
                HookHandler._afterCheckForValidEvent += value;
                HookHandler.HookCheckForValidEvent();
            }
            remove => HookHandler._afterCheckForValidEvent -= value;
        }

        public static event Delegates.CheckPhysicsSetup_FsmOwnerDefault_AfterArgs CheckPhysicsSetup_FsmOwnerDefault
        {
            add
            {
                HookHandler._afterCheckPhysicsSetup_FsmOwnerDefault += value;
                HookHandler.HookCheckPhysicsSetup_FsmOwnerDefault();
            }
            remove => HookHandler._afterCheckPhysicsSetup_FsmOwnerDefault -= value;
        }

        public static event Delegates.CheckOwnerPhysicsSetup_AfterArgs CheckOwnerPhysicsSetup
        {
            add
            {
                HookHandler._afterCheckOwnerPhysicsSetup += value;
                HookHandler.HookCheckOwnerPhysicsSetup();
            }
            remove => HookHandler._afterCheckOwnerPhysicsSetup -= value;
        }

        public static event Delegates.CheckPhysicsSetup_GameObject_AfterArgs CheckPhysicsSetup_GameObject
        {
            add
            {
                HookHandler._afterCheckPhysicsSetup_GameObject += value;
                HookHandler.HookCheckPhysicsSetup_GameObject();
            }
            remove => HookHandler._afterCheckPhysicsSetup_GameObject -= value;
        }

        public static event Delegates.CheckPhysics2dSetup_FsmOwnerDefault_AfterArgs CheckPhysics2dSetup_FsmOwnerDefault
        {
            add
            {
                HookHandler._afterCheckPhysics2dSetup_FsmOwnerDefault += value;
                HookHandler.HookCheckPhysics2dSetup_FsmOwnerDefault();
            }
            remove => HookHandler._afterCheckPhysics2dSetup_FsmOwnerDefault -= value;
        }

        public static event Delegates.CheckOwnerPhysics2dSetup_AfterArgs CheckOwnerPhysics2dSetup
        {
            add
            {
                HookHandler._afterCheckOwnerPhysics2dSetup += value;
                HookHandler.HookCheckOwnerPhysics2dSetup();
            }
            remove => HookHandler._afterCheckOwnerPhysics2dSetup -= value;
        }

        public static event Delegates.CheckPhysics2dSetup_GameObject_AfterArgs CheckPhysics2dSetup_GameObject
        {
            add
            {
                HookHandler._afterCheckPhysics2dSetup_GameObject += value;
                HookHandler.HookCheckPhysics2dSetup_GameObject();
            }
            remove => HookHandler._afterCheckPhysics2dSetup_GameObject -= value;
        }

        public static event Delegates.DebugLog_AfterArgs DebugLog
        {
            add
            {
                HookHandler._afterDebugLog += value;
                HookHandler.HookDebugLog();
            }
            remove => HookHandler._afterDebugLog -= value;
        }

        public static event Delegates.LogError_AfterArgs LogError
        {
            add
            {
                HookHandler._afterLogError += value;
                HookHandler.HookLogError();
            }
            remove => HookHandler._afterLogError -= value;
        }

        public static event Delegates.LogWarning_AfterArgs LogWarning
        {
            add
            {
                HookHandler._afterLogWarning += value;
                HookHandler.HookLogWarning();
            }
            remove => HookHandler._afterLogWarning -= value;
        }

        public static event Delegates.FormatUnityLogString_AfterArgs FormatUnityLogString
        {
            add
            {
                HookHandler._afterFormatUnityLogString += value;
                HookHandler.HookFormatUnityLogString();
            }
            remove => HookHandler._afterFormatUnityLogString -= value;
        }

        public static event Delegates.GetValueLabel_INamedVariable_AfterArgs GetValueLabel_INamedVariable
        {
            add
            {
                HookHandler._afterGetValueLabel_INamedVariable += value;
                HookHandler.HookGetValueLabel_INamedVariable();
            }
            remove => HookHandler._afterGetValueLabel_INamedVariable -= value;
        }

        public static event Delegates.GetValueLabel_Fsm_FsmOwnerDefault_AfterArgs GetValueLabel_Fsm_FsmOwnerDefault
        {
            add
            {
                HookHandler._afterGetValueLabel_Fsm_FsmOwnerDefault += value;
                HookHandler.HookGetValueLabel_Fsm_FsmOwnerDefault();
            }
            remove => HookHandler._afterGetValueLabel_Fsm_FsmOwnerDefault -= value;
        }

        public static event Delegates.AutoName_FsmStateAction_Array_AfterArgs AutoName_FsmStateAction_Array
        {
            add
            {
                HookHandler._afterAutoName_FsmStateAction_Array += value;
                HookHandler.HookAutoName_FsmStateAction_Array();
            }
            remove => HookHandler._afterAutoName_FsmStateAction_Array -= value;
        }

        public static event Delegates.AutoName_string_Array_AfterArgs AutoName_string_Array
        {
            add
            {
                HookHandler._afterAutoName_string_Array += value;
                HookHandler.HookAutoName_string_Array();
            }
            remove => HookHandler._afterAutoName_string_Array -= value;
        }

        public static event Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            AutoNameRange_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameRange_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameRange_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameRange_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameRange_string_NamedVariable_NamedVariable_AfterArgs
            AutoNameRange_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameRange_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameRange_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameRange_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_AfterArgs
            AutoNameSetVar_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameSetVar_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameSetVar_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameSetVar_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameConvert_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_AfterArgs
            AutoNameConvert_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameConvert_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameConvert_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameConvert_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_AfterArgs
            AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_AfterArgs
            AutoNameGetProperty_string_NamedVariable_NamedVariable
            {
                add
                {
                    HookHandler._afterAutoNameGetProperty_string_NamedVariable_NamedVariable += value;
                    HookHandler.HookAutoNameGetProperty_string_NamedVariable_NamedVariable();
                }
                remove => HookHandler._afterAutoNameGetProperty_string_NamedVariable_NamedVariable -= value;
            }

        public static event Delegates.RuntimeError_AfterArgs RuntimeError
        {
            add
            {
                HookHandler._afterRuntimeError += value;
                HookHandler.HookRuntimeError();
            }
            remove => HookHandler._afterRuntimeError -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_WhiteTexture_WithArgs get_WhiteTexture
        {
            add => HookEndpointManager.Add<Delegates.get_WhiteTexture_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "get_WhiteTexture", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_WhiteTexture_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "get_WhiteTexture", false), value);
        }

        public static event Delegates.BlendColor_WithArgs BlendColor
        {
            add => HookEndpointManager.Add<Delegates.BlendColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "BlendColor", false), value);
            remove => HookEndpointManager.Remove<Delegates.BlendColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "BlendColor", false), value);
        }

        public static event Delegates.IsVisible_WithArgs IsVisible
        {
            add => HookEndpointManager.Add<Delegates.IsVisible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsVisible", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsVisible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsVisible", false), value);
        }

        public static event Delegates.GetOwnerDefault_WithArgs GetOwnerDefault
        {
            add => HookEndpointManager.Add<Delegates.GetOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetOwnerDefault", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetOwnerDefault", false), value);
        }

        public static event Delegates.GetGameObjectFsm_WithArgs GetGameObjectFsm
        {
            add => HookEndpointManager.Add<Delegates.GetGameObjectFsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetGameObjectFsm", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetGameObjectFsm_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetGameObjectFsm", false), value);
        }

        public static event Delegates.GetRandomWeightedIndex_WithArgs GetRandomWeightedIndex
        {
            add => HookEndpointManager.Add<Delegates.GetRandomWeightedIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetRandomWeightedIndex", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetRandomWeightedIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetRandomWeightedIndex", false), value);
        }

        public static event Delegates.AddAnimationClip_WithArgs AddAnimationClip
        {
            add => HookEndpointManager.Add<Delegates.AddAnimationClip_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AddAnimationClip", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddAnimationClip_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AddAnimationClip", false), value);
        }

        public static event Delegates.HasAnimationFinished_WithArgs HasAnimationFinished
        {
            add => HookEndpointManager.Add<Delegates.HasAnimationFinished_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "HasAnimationFinished", false), value);
            remove => HookEndpointManager.Remove<Delegates.HasAnimationFinished_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "HasAnimationFinished", false), value);
        }

        public static event Delegates.GetPosition_WithArgs GetPosition
        {
            add => HookEndpointManager.Add<Delegates.GetPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetPosition", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetPosition", false), value);
        }

        public static event Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_WithArgs
            GetTargetRotation_RotationOptions_Transform_Transform_Vector3
            {
                add => HookEndpointManager
                    .Add<Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetRotation", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.GetTargetRotation_RotationOptions_Transform_Transform_Vector3_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetRotation", false), value);
            }

        public static event
            Delegates.GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_WithArgs
            GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion
            {
                add => HookEndpointManager
                    .Add<Delegates.
                        GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetRotation", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<
                            Delegates.
                            GetTargetRotation_RotationOptions_Transform_FsmVector3_FsmGameObject_Quaternion_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetRotation", false), value);
            }

        public static event Delegates.CanEditTargetRotation_WithArgs CanEditTargetRotation
        {
            add => HookEndpointManager.Add<Delegates.CanEditTargetRotation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CanEditTargetRotation", false), value);
            remove => HookEndpointManager.Remove<Delegates.CanEditTargetRotation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CanEditTargetRotation", false), value);
        }

        public static event Delegates.GetTargetScale_WithArgs GetTargetScale
        {
            add => HookEndpointManager.Add<Delegates.GetTargetScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetScale", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetTargetScale_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetScale", false), value);
        }

        public static event
            Delegates.GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_WithArgs
            GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3
            {
                add => HookEndpointManager
                    .Add<
                        Delegates.
                        GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetPosition", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<
                            Delegates.
                            GetTargetPosition_PositionOptions_Transform_FsmVector3_FsmGameObject_Vector3_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetPosition", false), value);
            }

        public static event Delegates.IsValidTargetPosition_WithArgs IsValidTargetPosition
        {
            add => HookEndpointManager.Add<Delegates.IsValidTargetPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsValidTargetPosition", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsValidTargetPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsValidTargetPosition", false), value);
        }

        public static event Delegates.CanEditTargetPosition_WithArgs CanEditTargetPosition
        {
            add => HookEndpointManager.Add<Delegates.CanEditTargetPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CanEditTargetPosition", false), value);
            remove => HookEndpointManager.Remove<Delegates.CanEditTargetPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CanEditTargetPosition", false), value);
        }

        public static event Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_WithArgs
            GetTargetPosition_PositionOptions_Transform_Transform_Vector3
            {
                add => HookEndpointManager
                    .Add<Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetPosition", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.GetTargetPosition_PositionOptions_Transform_Transform_Vector3_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetTargetPosition", false), value);
            }

        public static event Delegates.IsMouseOver_WithArgs IsMouseOver
        {
            add => HookEndpointManager.Add<Delegates.IsMouseOver_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsMouseOver", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsMouseOver_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsMouseOver", false), value);
        }

        public static event Delegates.MousePick_WithArgs MousePick
        {
            add => HookEndpointManager.Add<Delegates.MousePick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "MousePick", false), value);
            remove => HookEndpointManager.Remove<Delegates.MousePick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "MousePick", false), value);
        }

        public static event Delegates.MouseOver_WithArgs MouseOver
        {
            add => HookEndpointManager.Add<Delegates.MouseOver_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "MouseOver", false), value);
            remove => HookEndpointManager.Remove<Delegates.MouseOver_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "MouseOver", false), value);
        }

        public static event Delegates.DoMousePick_WithArgs DoMousePick
        {
            add => HookEndpointManager.Add<Delegates.DoMousePick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "DoMousePick", false), value);
            remove => HookEndpointManager.Remove<Delegates.DoMousePick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "DoMousePick", false), value);
        }

        public static event Delegates.LayerArrayToLayerMask_WithArgs LayerArrayToLayerMask
        {
            add => HookEndpointManager.Add<Delegates.LayerArrayToLayerMask_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LayerArrayToLayerMask", false), value);
            remove => HookEndpointManager.Remove<Delegates.LayerArrayToLayerMask_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LayerArrayToLayerMask", false), value);
        }

        public static event Delegates.IsLoopingWrapMode_WithArgs IsLoopingWrapMode
        {
            add => HookEndpointManager.Add<Delegates.IsLoopingWrapMode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsLoopingWrapMode", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsLoopingWrapMode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "IsLoopingWrapMode", false), value);
        }

        public static event Delegates.CheckRayDistance_WithArgs CheckRayDistance
        {
            add => HookEndpointManager.Add<Delegates.CheckRayDistance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckRayDistance", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckRayDistance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckRayDistance", false), value);
        }

        public static event Delegates.CheckForValidEvent_WithArgs CheckForValidEvent
        {
            add => HookEndpointManager.Add<Delegates.CheckForValidEvent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckForValidEvent", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckForValidEvent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckForValidEvent", false), value);
        }

        public static event Delegates.CheckPhysicsSetup_FsmOwnerDefault_WithArgs CheckPhysicsSetup_FsmOwnerDefault
        {
            add => HookEndpointManager.Add<Delegates.CheckPhysicsSetup_FsmOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysicsSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckPhysicsSetup_FsmOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysicsSetup", false), value);
        }

        public static event Delegates.CheckOwnerPhysicsSetup_WithArgs CheckOwnerPhysicsSetup
        {
            add => HookEndpointManager.Add<Delegates.CheckOwnerPhysicsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckOwnerPhysicsSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckOwnerPhysicsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckOwnerPhysicsSetup", false), value);
        }

        public static event Delegates.CheckPhysicsSetup_GameObject_WithArgs CheckPhysicsSetup_GameObject
        {
            add => HookEndpointManager.Add<Delegates.CheckPhysicsSetup_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysicsSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckPhysicsSetup_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysicsSetup", false), value);
        }

        public static event Delegates.CheckPhysics2dSetup_FsmOwnerDefault_WithArgs CheckPhysics2dSetup_FsmOwnerDefault
        {
            add => HookEndpointManager.Add<Delegates.CheckPhysics2dSetup_FsmOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysics2dSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckPhysics2dSetup_FsmOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysics2dSetup", false), value);
        }

        public static event Delegates.CheckOwnerPhysics2dSetup_WithArgs CheckOwnerPhysics2dSetup
        {
            add => HookEndpointManager.Add<Delegates.CheckOwnerPhysics2dSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckOwnerPhysics2dSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckOwnerPhysics2dSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckOwnerPhysics2dSetup", false), value);
        }

        public static event Delegates.CheckPhysics2dSetup_GameObject_WithArgs CheckPhysics2dSetup_GameObject
        {
            add => HookEndpointManager.Add<Delegates.CheckPhysics2dSetup_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysics2dSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CheckPhysics2dSetup_GameObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "CheckPhysics2dSetup", false), value);
        }

        public static event Delegates.DebugLog_WithArgs DebugLog
        {
            add => HookEndpointManager.Add<Delegates.DebugLog_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "DebugLog", false), value);
            remove => HookEndpointManager.Remove<Delegates.DebugLog_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "DebugLog", false), value);
        }

        public static event Delegates.LogError_WithArgs LogError
        {
            add => HookEndpointManager.Add<Delegates.LogError_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LogError", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogError_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LogError", false), value);
        }

        public static event Delegates.LogWarning_WithArgs LogWarning
        {
            add => HookEndpointManager.Add<Delegates.LogWarning_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LogWarning", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogWarning_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "LogWarning", false), value);
        }

        public static event Delegates.FormatUnityLogString_WithArgs FormatUnityLogString
        {
            add => HookEndpointManager.Add<Delegates.FormatUnityLogString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "FormatUnityLogString", false), value);
            remove => HookEndpointManager.Remove<Delegates.FormatUnityLogString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "FormatUnityLogString", false), value);
        }

        public static event Delegates.GetValueLabel_INamedVariable_WithArgs GetValueLabel_INamedVariable
        {
            add => HookEndpointManager.Add<Delegates.GetValueLabel_INamedVariable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetValueLabel", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetValueLabel_INamedVariable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetValueLabel", false), value);
        }

        public static event Delegates.GetValueLabel_Fsm_FsmOwnerDefault_WithArgs GetValueLabel_Fsm_FsmOwnerDefault
        {
            add => HookEndpointManager.Add<Delegates.GetValueLabel_Fsm_FsmOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetValueLabel", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetValueLabel_Fsm_FsmOwnerDefault_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "GetValueLabel", false), value);
        }

        public static event Delegates.AutoName_FsmStateAction_Array_WithArgs AutoName_FsmStateAction_Array
        {
            add => HookEndpointManager.Add<Delegates.AutoName_FsmStateAction_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoName", false), value);
            remove => HookEndpointManager.Remove<Delegates.AutoName_FsmStateAction_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoName", false), value);
        }

        public static event Delegates.AutoName_string_Array_WithArgs AutoName_string_Array
        {
            add => HookEndpointManager.Add<Delegates.AutoName_string_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoName", false), value);
            remove => HookEndpointManager.Remove<Delegates.AutoName_string_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoName", false), value);
        }

        public static event Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_WithArgs
            AutoNameRange_FsmStateAction_NamedVariable_NamedVariable
            {
                add => HookEndpointManager
                    .Add<Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameRange", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AutoNameRange_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameRange", false), value);
            }

        public static event Delegates.AutoNameRange_string_NamedVariable_NamedVariable_WithArgs
            AutoNameRange_string_NamedVariable_NamedVariable
            {
                add => HookEndpointManager.Add<Delegates.AutoNameRange_string_NamedVariable_NamedVariable_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameRange", false), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.AutoNameRange_string_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameRange", false), value);
            }

        public static event Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_WithArgs
            AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable
            {
                add => HookEndpointManager
                    .Add<Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameSetVar", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AutoNameSetVar_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameSetVar", false), value);
            }

        public static event Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_WithArgs
            AutoNameSetVar_string_NamedVariable_NamedVariable
            {
                add => HookEndpointManager.Add<Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameSetVar", false), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.AutoNameSetVar_string_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameSetVar", false), value);
            }

        public static event Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_WithArgs
            AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable
            {
                add => HookEndpointManager
                    .Add<Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameConvert", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AutoNameConvert_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameConvert", false), value);
            }

        public static event Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_WithArgs
            AutoNameConvert_string_NamedVariable_NamedVariable
            {
                add => HookEndpointManager.Add<Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameConvert", false), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.AutoNameConvert_string_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameConvert", false), value);
            }

        public static event Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_WithArgs
            AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable
            {
                add => HookEndpointManager
                    .Add<Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameGetProperty", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AutoNameGetProperty_FsmStateAction_NamedVariable_NamedVariable_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameGetProperty", false), value);
            }

        public static event Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_WithArgs
            AutoNameGetProperty_string_NamedVariable_NamedVariable
            {
                add => HookEndpointManager
                    .Add<Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameGetProperty", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AutoNameGetProperty_string_NamedVariable_NamedVariable_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "AutoNameGetProperty", false), value);
            }

        public static event Delegates.RuntimeError_WithArgs RuntimeError
        {
            add => HookEndpointManager.Add<Delegates.RuntimeError_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "RuntimeError", false), value);
            remove => HookEndpointManager.Remove<Delegates.RuntimeError_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActionHelpers), "RuntimeError", false), value);
        }
    }
}