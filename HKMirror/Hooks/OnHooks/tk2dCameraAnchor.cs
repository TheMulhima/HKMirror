using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dCameraAnchor class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dCameraAnchor
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_AnchorOffsetPixels()
        {
            if (!HookedList.Contains("get_AnchorOffsetPixels"))
            {
                HookedList.Add("get_AnchorOffsetPixels");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorOffsetPixels"),
                    get_AnchorOffsetPixels);
            }
        }

        internal static event Delegates.get_AnchorOffsetPixels_BeforeArgs _beforeget_AnchorOffsetPixels;
        internal static event Delegates.get_AnchorOffsetPixels_NormalArgs _afterget_AnchorOffsetPixels;

        private static Vector2 get_AnchorOffsetPixels(Func<tk2dCameraAnchor, Vector2> orig, tk2dCameraAnchor self)
        {
            Delegates.Params_get_AnchorOffsetPixels @params = new()
            {
                self = self
            };
            _beforeget_AnchorOffsetPixels?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnchorOffsetPixels != null) retVal = _afterget_AnchorOffsetPixels.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_AnchorOffsetPixels()
        {
            if (!HookedList.Contains("set_AnchorOffsetPixels"))
            {
                HookedList.Add("set_AnchorOffsetPixels");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorOffsetPixels"),
                    set_AnchorOffsetPixels);
            }
        }

        internal static event Delegates.set_AnchorOffsetPixels_BeforeArgs _beforeset_AnchorOffsetPixels;
        internal static event Delegates.set_AnchorOffsetPixels_NormalArgs _afterset_AnchorOffsetPixels;

        private static void set_AnchorOffsetPixels(Action<tk2dCameraAnchor, Vector2> orig, tk2dCameraAnchor self,
            Vector2 value)
        {
            Delegates.Params_set_AnchorOffsetPixels @params = new()
            {
                self = self, value = value
            };
            _beforeset_AnchorOffsetPixels?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AnchorOffsetPixels != null) _afterset_AnchorOffsetPixels.Invoke(@params);
        }

        internal static void Hookget_AnchorToNativeBounds()
        {
            if (!HookedList.Contains("get_AnchorToNativeBounds"))
            {
                HookedList.Add("get_AnchorToNativeBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorToNativeBounds"),
                    get_AnchorToNativeBounds);
            }
        }

        internal static event Delegates.get_AnchorToNativeBounds_BeforeArgs _beforeget_AnchorToNativeBounds;
        internal static event Delegates.get_AnchorToNativeBounds_NormalArgs _afterget_AnchorToNativeBounds;

        private static bool get_AnchorToNativeBounds(Func<tk2dCameraAnchor, bool> orig, tk2dCameraAnchor self)
        {
            Delegates.Params_get_AnchorToNativeBounds @params = new()
            {
                self = self
            };
            _beforeget_AnchorToNativeBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnchorToNativeBounds != null) retVal = _afterget_AnchorToNativeBounds.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_AnchorToNativeBounds()
        {
            if (!HookedList.Contains("set_AnchorToNativeBounds"))
            {
                HookedList.Add("set_AnchorToNativeBounds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorToNativeBounds"),
                    set_AnchorToNativeBounds);
            }
        }

        internal static event Delegates.set_AnchorToNativeBounds_BeforeArgs _beforeset_AnchorToNativeBounds;
        internal static event Delegates.set_AnchorToNativeBounds_NormalArgs _afterset_AnchorToNativeBounds;

        private static void set_AnchorToNativeBounds(Action<tk2dCameraAnchor, bool> orig, tk2dCameraAnchor self,
            bool value)
        {
            Delegates.Params_set_AnchorToNativeBounds @params = new()
            {
                self = self, value = value
            };
            _beforeset_AnchorToNativeBounds?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AnchorToNativeBounds != null) _afterset_AnchorToNativeBounds.Invoke(@params);
        }

        internal static void Hookget_AnchorCamera()
        {
            if (!HookedList.Contains("get_AnchorCamera"))
            {
                HookedList.Add("get_AnchorCamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorCamera"),
                    get_AnchorCamera);
            }
        }

        internal static event Delegates.get_AnchorCamera_BeforeArgs _beforeget_AnchorCamera;
        internal static event Delegates.get_AnchorCamera_NormalArgs _afterget_AnchorCamera;

        private static Camera get_AnchorCamera(Func<tk2dCameraAnchor, Camera> orig, tk2dCameraAnchor self)
        {
            Delegates.Params_get_AnchorCamera @params = new()
            {
                self = self
            };
            _beforeget_AnchorCamera?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnchorCamera != null) retVal = _afterget_AnchorCamera.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_AnchorCamera()
        {
            if (!HookedList.Contains("set_AnchorCamera"))
            {
                HookedList.Add("set_AnchorCamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorCamera"),
                    set_AnchorCamera);
            }
        }

        internal static event Delegates.set_AnchorCamera_BeforeArgs _beforeset_AnchorCamera;
        internal static event Delegates.set_AnchorCamera_NormalArgs _afterset_AnchorCamera;

        private static void set_AnchorCamera(Action<tk2dCameraAnchor, Camera> orig, tk2dCameraAnchor self, Camera value)
        {
            Delegates.Params_set_AnchorCamera @params = new()
            {
                self = self, value = value
            };
            _beforeset_AnchorCamera?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_AnchorCamera != null) _afterset_AnchorCamera.Invoke(@params);
        }

        internal static void Hookget_AnchorTk2dCamera()
        {
            if (!HookedList.Contains("get_AnchorTk2dCamera"))
            {
                HookedList.Add("get_AnchorTk2dCamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorTk2dCamera"),
                    get_AnchorTk2dCamera);
            }
        }

        internal static event Delegates.get_AnchorTk2dCamera_BeforeArgs _beforeget_AnchorTk2dCamera;
        internal static event Delegates.get_AnchorTk2dCamera_NormalArgs _afterget_AnchorTk2dCamera;

        private static tk2dCamera get_AnchorTk2dCamera(Func<tk2dCameraAnchor, tk2dCamera> orig, tk2dCameraAnchor self)
        {
            Delegates.Params_get_AnchorTk2dCamera @params = new()
            {
                self = self
            };
            _beforeget_AnchorTk2dCamera?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_AnchorTk2dCamera != null) retVal = _afterget_AnchorTk2dCamera.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_myTransform()
        {
            if (!HookedList.Contains("get_myTransform"))
            {
                HookedList.Add("get_myTransform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_myTransform"), get_myTransform);
            }
        }

        internal static event Delegates.get_myTransform_BeforeArgs _beforeget_myTransform;
        internal static event Delegates.get_myTransform_NormalArgs _afterget_myTransform;

        private static Transform get_myTransform(Func<tk2dCameraAnchor, Transform> orig, tk2dCameraAnchor self)
        {
            Delegates.Params_get_myTransform @params = new()
            {
                self = self
            };
            _beforeget_myTransform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_myTransform != null) retVal = _afterget_myTransform.Invoke(@params);
            return retVal;
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dCameraAnchor.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dCameraAnchor.orig_Start orig, tk2dCameraAnchor self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdateTransform()
        {
            if (!HookedList.Contains("UpdateTransform"))
            {
                HookedList.Add("UpdateTransform");
                On.tk2dCameraAnchor.UpdateTransform += UpdateTransform;
            }
        }

        internal static event Delegates.UpdateTransform_BeforeArgs _beforeUpdateTransform;
        internal static event Delegates.UpdateTransform_NormalArgs _afterUpdateTransform;

        private static void UpdateTransform(On.tk2dCameraAnchor.orig_UpdateTransform orig, tk2dCameraAnchor self)
        {
            Delegates.Params_UpdateTransform @params = new()
            {
                self = self
            };
            _beforeUpdateTransform?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateTransform != null) _afterUpdateTransform.Invoke(@params);
        }

        internal static void HookForceUpdateTransform()
        {
            if (!HookedList.Contains("ForceUpdateTransform"))
            {
                HookedList.Add("ForceUpdateTransform");
                On.tk2dCameraAnchor.ForceUpdateTransform += ForceUpdateTransform;
            }
        }

        internal static event Delegates.ForceUpdateTransform_BeforeArgs _beforeForceUpdateTransform;
        internal static event Delegates.ForceUpdateTransform_NormalArgs _afterForceUpdateTransform;

        private static void ForceUpdateTransform(On.tk2dCameraAnchor.orig_ForceUpdateTransform orig,
            tk2dCameraAnchor self)
        {
            Delegates.Params_ForceUpdateTransform @params = new()
            {
                self = self
            };
            _beforeForceUpdateTransform?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceUpdateTransform != null) _afterForceUpdateTransform.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.tk2dCameraAnchor.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.tk2dCameraAnchor.orig_LateUpdate orig, tk2dCameraAnchor self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ForceUpdateTransform_BeforeArgs(Params_ForceUpdateTransform args);

        public delegate void ForceUpdateTransform_NormalArgs(Params_ForceUpdateTransform args);

        public delegate void get_AnchorCamera_BeforeArgs(Params_get_AnchorCamera args);

        public delegate Camera get_AnchorCamera_NormalArgs(Params_get_AnchorCamera args);

        public delegate void get_AnchorOffsetPixels_BeforeArgs(Params_get_AnchorOffsetPixels args);

        public delegate Vector2 get_AnchorOffsetPixels_NormalArgs(Params_get_AnchorOffsetPixels args);

        public delegate void get_AnchorTk2dCamera_BeforeArgs(Params_get_AnchorTk2dCamera args);

        public delegate tk2dCamera get_AnchorTk2dCamera_NormalArgs(Params_get_AnchorTk2dCamera args);

        public delegate void get_AnchorToNativeBounds_BeforeArgs(Params_get_AnchorToNativeBounds args);

        public delegate bool get_AnchorToNativeBounds_NormalArgs(Params_get_AnchorToNativeBounds args);

        public delegate void get_myTransform_BeforeArgs(Params_get_myTransform args);

        public delegate Transform get_myTransform_NormalArgs(Params_get_myTransform args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void set_AnchorCamera_BeforeArgs(Params_set_AnchorCamera args);

        public delegate void set_AnchorCamera_NormalArgs(Params_set_AnchorCamera args);

        public delegate void set_AnchorOffsetPixels_BeforeArgs(Params_set_AnchorOffsetPixels args);

        public delegate void set_AnchorOffsetPixels_NormalArgs(Params_set_AnchorOffsetPixels args);

        public delegate void set_AnchorToNativeBounds_BeforeArgs(Params_set_AnchorToNativeBounds args);

        public delegate void set_AnchorToNativeBounds_NormalArgs(Params_set_AnchorToNativeBounds args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UpdateTransform_BeforeArgs(Params_UpdateTransform args);

        public delegate void UpdateTransform_NormalArgs(Params_UpdateTransform args);

        public sealed class Params_get_AnchorOffsetPixels
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_set_AnchorOffsetPixels
        {
            public tk2dCameraAnchor self;
            public Vector2 value;
        }

        public sealed class Params_get_AnchorToNativeBounds
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_set_AnchorToNativeBounds
        {
            public tk2dCameraAnchor self;
            public bool value;
        }

        public sealed class Params_get_AnchorCamera
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_set_AnchorCamera
        {
            public tk2dCameraAnchor self;
            public Camera value;
        }

        public sealed class Params_get_AnchorTk2dCamera
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_get_myTransform
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_Start
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_UpdateTransform
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_ForceUpdateTransform
        {
            public tk2dCameraAnchor self;
        }

        public sealed class Params_LateUpdate
        {
            public tk2dCameraAnchor self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_AnchorOffsetPixels_BeforeArgs get_AnchorOffsetPixels
        {
            add
            {
                HookHandler._beforeget_AnchorOffsetPixels += value;
                HookHandler.Hookget_AnchorOffsetPixels();
            }
            remove => HookHandler._beforeget_AnchorOffsetPixels -= value;
        }

        public static event Delegates.set_AnchorOffsetPixels_BeforeArgs set_AnchorOffsetPixels
        {
            add
            {
                HookHandler._beforeset_AnchorOffsetPixels += value;
                HookHandler.Hookset_AnchorOffsetPixels();
            }
            remove => HookHandler._beforeset_AnchorOffsetPixels -= value;
        }

        public static event Delegates.get_AnchorToNativeBounds_BeforeArgs get_AnchorToNativeBounds
        {
            add
            {
                HookHandler._beforeget_AnchorToNativeBounds += value;
                HookHandler.Hookget_AnchorToNativeBounds();
            }
            remove => HookHandler._beforeget_AnchorToNativeBounds -= value;
        }

        public static event Delegates.set_AnchorToNativeBounds_BeforeArgs set_AnchorToNativeBounds
        {
            add
            {
                HookHandler._beforeset_AnchorToNativeBounds += value;
                HookHandler.Hookset_AnchorToNativeBounds();
            }
            remove => HookHandler._beforeset_AnchorToNativeBounds -= value;
        }

        public static event Delegates.get_AnchorCamera_BeforeArgs get_AnchorCamera
        {
            add
            {
                HookHandler._beforeget_AnchorCamera += value;
                HookHandler.Hookget_AnchorCamera();
            }
            remove => HookHandler._beforeget_AnchorCamera -= value;
        }

        public static event Delegates.set_AnchorCamera_BeforeArgs set_AnchorCamera
        {
            add
            {
                HookHandler._beforeset_AnchorCamera += value;
                HookHandler.Hookset_AnchorCamera();
            }
            remove => HookHandler._beforeset_AnchorCamera -= value;
        }

        public static event Delegates.get_AnchorTk2dCamera_BeforeArgs get_AnchorTk2dCamera
        {
            add
            {
                HookHandler._beforeget_AnchorTk2dCamera += value;
                HookHandler.Hookget_AnchorTk2dCamera();
            }
            remove => HookHandler._beforeget_AnchorTk2dCamera -= value;
        }

        public static event Delegates.get_myTransform_BeforeArgs get_myTransform
        {
            add
            {
                HookHandler._beforeget_myTransform += value;
                HookHandler.Hookget_myTransform();
            }
            remove => HookHandler._beforeget_myTransform -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdateTransform_BeforeArgs UpdateTransform
        {
            add
            {
                HookHandler._beforeUpdateTransform += value;
                HookHandler.HookUpdateTransform();
            }
            remove => HookHandler._beforeUpdateTransform -= value;
        }

        public static event Delegates.ForceUpdateTransform_BeforeArgs ForceUpdateTransform
        {
            add
            {
                HookHandler._beforeForceUpdateTransform += value;
                HookHandler.HookForceUpdateTransform();
            }
            remove => HookHandler._beforeForceUpdateTransform -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_AnchorOffsetPixels_NormalArgs get_AnchorOffsetPixels
        {
            add
            {
                HookHandler._afterget_AnchorOffsetPixels += value;
                HookHandler.Hookget_AnchorOffsetPixels();
            }
            remove => HookHandler._afterget_AnchorOffsetPixels -= value;
        }

        public static event Delegates.set_AnchorOffsetPixels_NormalArgs set_AnchorOffsetPixels
        {
            add
            {
                HookHandler._afterset_AnchorOffsetPixels += value;
                HookHandler.Hookset_AnchorOffsetPixels();
            }
            remove => HookHandler._afterset_AnchorOffsetPixels -= value;
        }

        public static event Delegates.get_AnchorToNativeBounds_NormalArgs get_AnchorToNativeBounds
        {
            add
            {
                HookHandler._afterget_AnchorToNativeBounds += value;
                HookHandler.Hookget_AnchorToNativeBounds();
            }
            remove => HookHandler._afterget_AnchorToNativeBounds -= value;
        }

        public static event Delegates.set_AnchorToNativeBounds_NormalArgs set_AnchorToNativeBounds
        {
            add
            {
                HookHandler._afterset_AnchorToNativeBounds += value;
                HookHandler.Hookset_AnchorToNativeBounds();
            }
            remove => HookHandler._afterset_AnchorToNativeBounds -= value;
        }

        public static event Delegates.get_AnchorCamera_NormalArgs get_AnchorCamera
        {
            add
            {
                HookHandler._afterget_AnchorCamera += value;
                HookHandler.Hookget_AnchorCamera();
            }
            remove => HookHandler._afterget_AnchorCamera -= value;
        }

        public static event Delegates.set_AnchorCamera_NormalArgs set_AnchorCamera
        {
            add
            {
                HookHandler._afterset_AnchorCamera += value;
                HookHandler.Hookset_AnchorCamera();
            }
            remove => HookHandler._afterset_AnchorCamera -= value;
        }

        public static event Delegates.get_AnchorTk2dCamera_NormalArgs get_AnchorTk2dCamera
        {
            add
            {
                HookHandler._afterget_AnchorTk2dCamera += value;
                HookHandler.Hookget_AnchorTk2dCamera();
            }
            remove => HookHandler._afterget_AnchorTk2dCamera -= value;
        }

        public static event Delegates.get_myTransform_NormalArgs get_myTransform
        {
            add
            {
                HookHandler._afterget_myTransform += value;
                HookHandler.Hookget_myTransform();
            }
            remove => HookHandler._afterget_myTransform -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdateTransform_NormalArgs UpdateTransform
        {
            add
            {
                HookHandler._afterUpdateTransform += value;
                HookHandler.HookUpdateTransform();
            }
            remove => HookHandler._afterUpdateTransform -= value;
        }

        public static event Delegates.ForceUpdateTransform_NormalArgs ForceUpdateTransform
        {
            add
            {
                HookHandler._afterForceUpdateTransform += value;
                HookHandler.HookForceUpdateTransform();
            }
            remove => HookHandler._afterForceUpdateTransform -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_AnchorOffsetPixels_NormalArgs get_AnchorOffsetPixels
        {
            add => HookEndpointManager.Add<Delegates.get_AnchorOffsetPixels_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorOffsetPixels"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnchorOffsetPixels_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorOffsetPixels"), value);
        }

        public static event Delegates.set_AnchorOffsetPixels_NormalArgs set_AnchorOffsetPixels
        {
            add => HookEndpointManager.Add<Delegates.set_AnchorOffsetPixels_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorOffsetPixels"), value);
            remove => HookEndpointManager.Remove<Delegates.set_AnchorOffsetPixels_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorOffsetPixels"), value);
        }

        public static event Delegates.get_AnchorToNativeBounds_NormalArgs get_AnchorToNativeBounds
        {
            add => HookEndpointManager.Add<Delegates.get_AnchorToNativeBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorToNativeBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnchorToNativeBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorToNativeBounds"), value);
        }

        public static event Delegates.set_AnchorToNativeBounds_NormalArgs set_AnchorToNativeBounds
        {
            add => HookEndpointManager.Add<Delegates.set_AnchorToNativeBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorToNativeBounds"), value);
            remove => HookEndpointManager.Remove<Delegates.set_AnchorToNativeBounds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorToNativeBounds"), value);
        }

        public static event Delegates.get_AnchorCamera_NormalArgs get_AnchorCamera
        {
            add => HookEndpointManager.Add<Delegates.get_AnchorCamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorCamera"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnchorCamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorCamera"), value);
        }

        public static event Delegates.set_AnchorCamera_NormalArgs set_AnchorCamera
        {
            add => HookEndpointManager.Add<Delegates.set_AnchorCamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorCamera"), value);
            remove => HookEndpointManager.Remove<Delegates.set_AnchorCamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorCamera"), value);
        }

        public static event Delegates.get_AnchorTk2dCamera_NormalArgs get_AnchorTk2dCamera
        {
            add => HookEndpointManager.Add<Delegates.get_AnchorTk2dCamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorTk2dCamera"), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnchorTk2dCamera_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorTk2dCamera"), value);
        }

        public static event Delegates.get_myTransform_NormalArgs get_myTransform
        {
            add => HookEndpointManager.Add<Delegates.get_myTransform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_myTransform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_myTransform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_myTransform"), value);
        }

        public static event On.tk2dCameraAnchor.hook_Start Start
        {
            add => On.tk2dCameraAnchor.Start += value;
            remove => On.tk2dCameraAnchor.Start -= value;
        }

        public static event On.tk2dCameraAnchor.hook_UpdateTransform UpdateTransform
        {
            add => On.tk2dCameraAnchor.UpdateTransform += value;
            remove => On.tk2dCameraAnchor.UpdateTransform -= value;
        }

        public static event On.tk2dCameraAnchor.hook_ForceUpdateTransform ForceUpdateTransform
        {
            add => On.tk2dCameraAnchor.ForceUpdateTransform += value;
            remove => On.tk2dCameraAnchor.ForceUpdateTransform -= value;
        }

        public static event On.tk2dCameraAnchor.hook_LateUpdate LateUpdate
        {
            add => On.tk2dCameraAnchor.LateUpdate += value;
            remove => On.tk2dCameraAnchor.LateUpdate -= value;
        }
    }
}