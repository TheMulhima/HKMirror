using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dCameraAnchor class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dCameraAnchor
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookset_AnchorPoint()
{
if (!HookedList.Contains("set_AnchorPoint"))
{
HookedList.Add("set_AnchorPoint");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorPoint", true), set_AnchorPoint);

}
}
internal static event Delegates.set_AnchorPoint_BeforeArgs _beforeset_AnchorPoint;
internal static event Delegates.set_AnchorPoint_AfterArgs _afterset_AnchorPoint;
private static void set_AnchorPoint(Action<tk2dCameraAnchor,  tk2dBaseSprite.Anchor> orig, tk2dCameraAnchor self,  tk2dBaseSprite.Anchor value)
{
Delegates.Params_set_AnchorPoint @params = new() 
{
self = self
, value = value
};
if (_beforeset_AnchorPoint != null)
{
foreach (Delegates.set_AnchorPoint_BeforeArgs toInvoke in _beforeset_AnchorPoint.GetInvocationList())
{
try
{
_beforeset_AnchorPoint?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_AnchorPoint != null)
{
foreach (Delegates.set_AnchorPoint_AfterArgs toInvoke in _afterset_AnchorPoint.GetInvocationList())
{
try
{
_afterset_AnchorPoint.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_AnchorOffsetPixels()
{
if (!HookedList.Contains("get_AnchorOffsetPixels"))
{
HookedList.Add("get_AnchorOffsetPixels");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorOffsetPixels", true), get_AnchorOffsetPixels);

}
}
internal static event Delegates.get_AnchorOffsetPixels_BeforeArgs _beforeget_AnchorOffsetPixels;
internal static event Delegates.get_AnchorOffsetPixels_AfterArgs _afterget_AnchorOffsetPixels;
private static UnityEngine.Vector2 get_AnchorOffsetPixels(Func<tk2dCameraAnchor, UnityEngine.Vector2> orig, tk2dCameraAnchor self)
{
Delegates.Params_get_AnchorOffsetPixels @params = new() 
{
self = self
};
if (_beforeget_AnchorOffsetPixels != null)
{
foreach (Delegates.get_AnchorOffsetPixels_BeforeArgs toInvoke in _beforeget_AnchorOffsetPixels.GetInvocationList())
{
try
{
_beforeget_AnchorOffsetPixels?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AnchorOffsetPixels != null)
{
foreach (Delegates.get_AnchorOffsetPixels_AfterArgs toInvoke in _afterget_AnchorOffsetPixels.GetInvocationList())
{
try
{
retVal = _afterget_AnchorOffsetPixels.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_AnchorOffsetPixels()
{
if (!HookedList.Contains("set_AnchorOffsetPixels"))
{
HookedList.Add("set_AnchorOffsetPixels");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorOffsetPixels", true), set_AnchorOffsetPixels);

}
}
internal static event Delegates.set_AnchorOffsetPixels_BeforeArgs _beforeset_AnchorOffsetPixels;
internal static event Delegates.set_AnchorOffsetPixels_AfterArgs _afterset_AnchorOffsetPixels;
private static void set_AnchorOffsetPixels(Action<tk2dCameraAnchor,  UnityEngine.Vector2> orig, tk2dCameraAnchor self,  UnityEngine.Vector2 value)
{
Delegates.Params_set_AnchorOffsetPixels @params = new() 
{
self = self
, value = value
};
if (_beforeset_AnchorOffsetPixels != null)
{
foreach (Delegates.set_AnchorOffsetPixels_BeforeArgs toInvoke in _beforeset_AnchorOffsetPixels.GetInvocationList())
{
try
{
_beforeset_AnchorOffsetPixels?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_AnchorOffsetPixels != null)
{
foreach (Delegates.set_AnchorOffsetPixels_AfterArgs toInvoke in _afterset_AnchorOffsetPixels.GetInvocationList())
{
try
{
_afterset_AnchorOffsetPixels.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_AnchorToNativeBounds()
{
if (!HookedList.Contains("get_AnchorToNativeBounds"))
{
HookedList.Add("get_AnchorToNativeBounds");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorToNativeBounds", true), get_AnchorToNativeBounds);

}
}
internal static event Delegates.get_AnchorToNativeBounds_BeforeArgs _beforeget_AnchorToNativeBounds;
internal static event Delegates.get_AnchorToNativeBounds_AfterArgs _afterget_AnchorToNativeBounds;
private static bool get_AnchorToNativeBounds(Func<tk2dCameraAnchor, bool> orig, tk2dCameraAnchor self)
{
Delegates.Params_get_AnchorToNativeBounds @params = new() 
{
self = self
};
if (_beforeget_AnchorToNativeBounds != null)
{
foreach (Delegates.get_AnchorToNativeBounds_BeforeArgs toInvoke in _beforeget_AnchorToNativeBounds.GetInvocationList())
{
try
{
_beforeget_AnchorToNativeBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AnchorToNativeBounds != null)
{
foreach (Delegates.get_AnchorToNativeBounds_AfterArgs toInvoke in _afterget_AnchorToNativeBounds.GetInvocationList())
{
try
{
retVal = _afterget_AnchorToNativeBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_AnchorToNativeBounds()
{
if (!HookedList.Contains("set_AnchorToNativeBounds"))
{
HookedList.Add("set_AnchorToNativeBounds");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorToNativeBounds", true), set_AnchorToNativeBounds);

}
}
internal static event Delegates.set_AnchorToNativeBounds_BeforeArgs _beforeset_AnchorToNativeBounds;
internal static event Delegates.set_AnchorToNativeBounds_AfterArgs _afterset_AnchorToNativeBounds;
private static void set_AnchorToNativeBounds(Action<tk2dCameraAnchor,  bool> orig, tk2dCameraAnchor self,  bool value)
{
Delegates.Params_set_AnchorToNativeBounds @params = new() 
{
self = self
, value = value
};
if (_beforeset_AnchorToNativeBounds != null)
{
foreach (Delegates.set_AnchorToNativeBounds_BeforeArgs toInvoke in _beforeset_AnchorToNativeBounds.GetInvocationList())
{
try
{
_beforeset_AnchorToNativeBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_AnchorToNativeBounds != null)
{
foreach (Delegates.set_AnchorToNativeBounds_AfterArgs toInvoke in _afterset_AnchorToNativeBounds.GetInvocationList())
{
try
{
_afterset_AnchorToNativeBounds.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_AnchorCamera()
{
if (!HookedList.Contains("get_AnchorCamera"))
{
HookedList.Add("get_AnchorCamera");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorCamera", true), get_AnchorCamera);

}
}
internal static event Delegates.get_AnchorCamera_BeforeArgs _beforeget_AnchorCamera;
internal static event Delegates.get_AnchorCamera_AfterArgs _afterget_AnchorCamera;
private static UnityEngine.Camera get_AnchorCamera(Func<tk2dCameraAnchor, UnityEngine.Camera> orig, tk2dCameraAnchor self)
{
Delegates.Params_get_AnchorCamera @params = new() 
{
self = self
};
if (_beforeget_AnchorCamera != null)
{
foreach (Delegates.get_AnchorCamera_BeforeArgs toInvoke in _beforeget_AnchorCamera.GetInvocationList())
{
try
{
_beforeget_AnchorCamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AnchorCamera != null)
{
foreach (Delegates.get_AnchorCamera_AfterArgs toInvoke in _afterget_AnchorCamera.GetInvocationList())
{
try
{
retVal = _afterget_AnchorCamera.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_AnchorCamera()
{
if (!HookedList.Contains("set_AnchorCamera"))
{
HookedList.Add("set_AnchorCamera");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorCamera", true), set_AnchorCamera);

}
}
internal static event Delegates.set_AnchorCamera_BeforeArgs _beforeset_AnchorCamera;
internal static event Delegates.set_AnchorCamera_AfterArgs _afterset_AnchorCamera;
private static void set_AnchorCamera(Action<tk2dCameraAnchor,  UnityEngine.Camera> orig, tk2dCameraAnchor self,  UnityEngine.Camera value)
{
Delegates.Params_set_AnchorCamera @params = new() 
{
self = self
, value = value
};
if (_beforeset_AnchorCamera != null)
{
foreach (Delegates.set_AnchorCamera_BeforeArgs toInvoke in _beforeset_AnchorCamera.GetInvocationList())
{
try
{
_beforeset_AnchorCamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_AnchorCamera != null)
{
foreach (Delegates.set_AnchorCamera_AfterArgs toInvoke in _afterset_AnchorCamera.GetInvocationList())
{
try
{
_afterset_AnchorCamera.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_AnchorTk2dCamera()
{
if (!HookedList.Contains("get_AnchorTk2dCamera"))
{
HookedList.Add("get_AnchorTk2dCamera");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorTk2dCamera", true), get_AnchorTk2dCamera);

}
}
internal static event Delegates.get_AnchorTk2dCamera_BeforeArgs _beforeget_AnchorTk2dCamera;
internal static event Delegates.get_AnchorTk2dCamera_AfterArgs _afterget_AnchorTk2dCamera;
private static tk2dCamera get_AnchorTk2dCamera(Func<tk2dCameraAnchor, tk2dCamera> orig, tk2dCameraAnchor self)
{
Delegates.Params_get_AnchorTk2dCamera @params = new() 
{
self = self
};
if (_beforeget_AnchorTk2dCamera != null)
{
foreach (Delegates.get_AnchorTk2dCamera_BeforeArgs toInvoke in _beforeget_AnchorTk2dCamera.GetInvocationList())
{
try
{
_beforeget_AnchorTk2dCamera?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_AnchorTk2dCamera != null)
{
foreach (Delegates.get_AnchorTk2dCamera_AfterArgs toInvoke in _afterget_AnchorTk2dCamera.GetInvocationList())
{
try
{
retVal = _afterget_AnchorTk2dCamera.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_myTransform()
{
if (!HookedList.Contains("get_myTransform"))
{
HookedList.Add("get_myTransform");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_myTransform", true), get_myTransform);

}
}
internal static event Delegates.get_myTransform_BeforeArgs _beforeget_myTransform;
internal static event Delegates.get_myTransform_AfterArgs _afterget_myTransform;
private static UnityEngine.Transform get_myTransform(Func<tk2dCameraAnchor, UnityEngine.Transform> orig, tk2dCameraAnchor self)
{
Delegates.Params_get_myTransform @params = new() 
{
self = self
};
if (_beforeget_myTransform != null)
{
foreach (Delegates.get_myTransform_BeforeArgs toInvoke in _beforeget_myTransform.GetInvocationList())
{
try
{
_beforeget_myTransform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_myTransform != null)
{
foreach (Delegates.get_myTransform_AfterArgs toInvoke in _afterget_myTransform.GetInvocationList())
{
try
{
retVal = _afterget_myTransform.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.tk2dCameraAnchor.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.tk2dCameraAnchor.orig_Start orig,tk2dCameraAnchor self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateTransform()
{
if (!HookedList.Contains("UpdateTransform"))
{
HookedList.Add("UpdateTransform");
On.tk2dCameraAnchor.UpdateTransform += UpdateTransform;

}
}
internal static event Delegates.UpdateTransform_BeforeArgs _beforeUpdateTransform;
internal static event Delegates.UpdateTransform_AfterArgs _afterUpdateTransform;
private static void UpdateTransform(On.tk2dCameraAnchor.orig_UpdateTransform orig,tk2dCameraAnchor self)
{
Delegates.Params_UpdateTransform @params = new() 
{
self = self
};
if (_beforeUpdateTransform != null)
{
foreach (Delegates.UpdateTransform_BeforeArgs toInvoke in _beforeUpdateTransform.GetInvocationList())
{
try
{
_beforeUpdateTransform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateTransform != null)
{
foreach (Delegates.UpdateTransform_AfterArgs toInvoke in _afterUpdateTransform.GetInvocationList())
{
try
{
_afterUpdateTransform.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookForceUpdateTransform()
{
if (!HookedList.Contains("ForceUpdateTransform"))
{
HookedList.Add("ForceUpdateTransform");
On.tk2dCameraAnchor.ForceUpdateTransform += ForceUpdateTransform;

}
}
internal static event Delegates.ForceUpdateTransform_BeforeArgs _beforeForceUpdateTransform;
internal static event Delegates.ForceUpdateTransform_AfterArgs _afterForceUpdateTransform;
private static void ForceUpdateTransform(On.tk2dCameraAnchor.orig_ForceUpdateTransform orig,tk2dCameraAnchor self)
{
Delegates.Params_ForceUpdateTransform @params = new() 
{
self = self
};
if (_beforeForceUpdateTransform != null)
{
foreach (Delegates.ForceUpdateTransform_BeforeArgs toInvoke in _beforeForceUpdateTransform.GetInvocationList())
{
try
{
_beforeForceUpdateTransform?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterForceUpdateTransform != null)
{
foreach (Delegates.ForceUpdateTransform_AfterArgs toInvoke in _afterForceUpdateTransform.GetInvocationList())
{
try
{
_afterForceUpdateTransform.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLateUpdate()
{
if (!HookedList.Contains("LateUpdate"))
{
HookedList.Add("LateUpdate");
On.tk2dCameraAnchor.LateUpdate += LateUpdate;

}
}
internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;
private static void LateUpdate(On.tk2dCameraAnchor.orig_LateUpdate orig,tk2dCameraAnchor self)
{
Delegates.Params_LateUpdate @params = new() 
{
self = self
};
if (_beforeLateUpdate != null)
{
foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
{
try
{
_beforeLateUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLateUpdate != null)
{
foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
{
try
{
_afterLateUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_set_AnchorPoint
{
public tk2dCameraAnchor self;
public tk2dBaseSprite.Anchor value;
}
public delegate void set_AnchorPoint_BeforeArgs(Params_set_AnchorPoint args);
public delegate void set_AnchorPoint_AfterArgs(Params_set_AnchorPoint args);
public delegate void set_AnchorPoint_WithArgs (Action<tk2dCameraAnchor,  tk2dBaseSprite.Anchor> orig, tk2dCameraAnchor self,  tk2dBaseSprite.Anchor value);
public sealed class Params_get_AnchorOffsetPixels
{
public tk2dCameraAnchor self;
}
public delegate void get_AnchorOffsetPixels_BeforeArgs(Params_get_AnchorOffsetPixels args);
public delegate UnityEngine.Vector2 get_AnchorOffsetPixels_AfterArgs(Params_get_AnchorOffsetPixels args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_AnchorOffsetPixels_WithArgs (Func<tk2dCameraAnchor, UnityEngine.Vector2> orig, tk2dCameraAnchor self);
public sealed class Params_set_AnchorOffsetPixels
{
public tk2dCameraAnchor self;
public UnityEngine.Vector2 value;
}
public delegate void set_AnchorOffsetPixels_BeforeArgs(Params_set_AnchorOffsetPixels args);
public delegate void set_AnchorOffsetPixels_AfterArgs(Params_set_AnchorOffsetPixels args);
public delegate void set_AnchorOffsetPixels_WithArgs (Action<tk2dCameraAnchor,  UnityEngine.Vector2> orig, tk2dCameraAnchor self,  UnityEngine.Vector2 value);
public sealed class Params_get_AnchorToNativeBounds
{
public tk2dCameraAnchor self;
}
public delegate void get_AnchorToNativeBounds_BeforeArgs(Params_get_AnchorToNativeBounds args);
public delegate bool get_AnchorToNativeBounds_AfterArgs(Params_get_AnchorToNativeBounds args, bool ret);
public delegate bool get_AnchorToNativeBounds_WithArgs (Func<tk2dCameraAnchor, bool> orig, tk2dCameraAnchor self);
public sealed class Params_set_AnchorToNativeBounds
{
public tk2dCameraAnchor self;
public bool value;
}
public delegate void set_AnchorToNativeBounds_BeforeArgs(Params_set_AnchorToNativeBounds args);
public delegate void set_AnchorToNativeBounds_AfterArgs(Params_set_AnchorToNativeBounds args);
public delegate void set_AnchorToNativeBounds_WithArgs (Action<tk2dCameraAnchor,  bool> orig, tk2dCameraAnchor self,  bool value);
public sealed class Params_get_AnchorCamera
{
public tk2dCameraAnchor self;
}
public delegate void get_AnchorCamera_BeforeArgs(Params_get_AnchorCamera args);
public delegate UnityEngine.Camera get_AnchorCamera_AfterArgs(Params_get_AnchorCamera args, UnityEngine.Camera ret);
public delegate UnityEngine.Camera get_AnchorCamera_WithArgs (Func<tk2dCameraAnchor, UnityEngine.Camera> orig, tk2dCameraAnchor self);
public sealed class Params_set_AnchorCamera
{
public tk2dCameraAnchor self;
public UnityEngine.Camera value;
}
public delegate void set_AnchorCamera_BeforeArgs(Params_set_AnchorCamera args);
public delegate void set_AnchorCamera_AfterArgs(Params_set_AnchorCamera args);
public delegate void set_AnchorCamera_WithArgs (Action<tk2dCameraAnchor,  UnityEngine.Camera> orig, tk2dCameraAnchor self,  UnityEngine.Camera value);
public sealed class Params_get_AnchorTk2dCamera
{
public tk2dCameraAnchor self;
}
public delegate void get_AnchorTk2dCamera_BeforeArgs(Params_get_AnchorTk2dCamera args);
public delegate tk2dCamera get_AnchorTk2dCamera_AfterArgs(Params_get_AnchorTk2dCamera args, tk2dCamera ret);
public delegate tk2dCamera get_AnchorTk2dCamera_WithArgs (Func<tk2dCameraAnchor, tk2dCamera> orig, tk2dCameraAnchor self);
public sealed class Params_get_myTransform
{
public tk2dCameraAnchor self;
}
public delegate void get_myTransform_BeforeArgs(Params_get_myTransform args);
public delegate UnityEngine.Transform get_myTransform_AfterArgs(Params_get_myTransform args, UnityEngine.Transform ret);
public delegate UnityEngine.Transform get_myTransform_WithArgs (Func<tk2dCameraAnchor, UnityEngine.Transform> orig, tk2dCameraAnchor self);
public sealed class Params_Start
{
public tk2dCameraAnchor self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<tk2dCameraAnchor> orig, tk2dCameraAnchor self);
public sealed class Params_UpdateTransform
{
public tk2dCameraAnchor self;
}
public delegate void UpdateTransform_BeforeArgs(Params_UpdateTransform args);
public delegate void UpdateTransform_AfterArgs(Params_UpdateTransform args);
public delegate void UpdateTransform_WithArgs (Action<tk2dCameraAnchor> orig, tk2dCameraAnchor self);
public sealed class Params_ForceUpdateTransform
{
public tk2dCameraAnchor self;
}
public delegate void ForceUpdateTransform_BeforeArgs(Params_ForceUpdateTransform args);
public delegate void ForceUpdateTransform_AfterArgs(Params_ForceUpdateTransform args);
public delegate void ForceUpdateTransform_WithArgs (Action<tk2dCameraAnchor> orig, tk2dCameraAnchor self);
public sealed class Params_LateUpdate
{
public tk2dCameraAnchor self;
}
public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);
public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);
public delegate void LateUpdate_WithArgs (Action<tk2dCameraAnchor> orig, tk2dCameraAnchor self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.set_AnchorPoint_BeforeArgs set_AnchorPoint
{
add
{

HookHandler._beforeset_AnchorPoint += value;
HookHandler.Hookset_AnchorPoint();
}
remove => HookHandler._beforeset_AnchorPoint -= value;
}
public static event Delegates.get_AnchorOffsetPixels_BeforeArgs get_AnchorOffsetPixels
{
add
{

HookHandler._beforeget_AnchorOffsetPixels += value;
HookHandler.Hookget_AnchorOffsetPixels();
}
remove => HookHandler._beforeget_AnchorOffsetPixels -= value;
}
public static event Delegates.set_AnchorOffsetPixels_BeforeArgs set_AnchorOffsetPixels
{
add
{

HookHandler._beforeset_AnchorOffsetPixels += value;
HookHandler.Hookset_AnchorOffsetPixels();
}
remove => HookHandler._beforeset_AnchorOffsetPixels -= value;
}
public static event Delegates.get_AnchorToNativeBounds_BeforeArgs get_AnchorToNativeBounds
{
add
{

HookHandler._beforeget_AnchorToNativeBounds += value;
HookHandler.Hookget_AnchorToNativeBounds();
}
remove => HookHandler._beforeget_AnchorToNativeBounds -= value;
}
public static event Delegates.set_AnchorToNativeBounds_BeforeArgs set_AnchorToNativeBounds
{
add
{

HookHandler._beforeset_AnchorToNativeBounds += value;
HookHandler.Hookset_AnchorToNativeBounds();
}
remove => HookHandler._beforeset_AnchorToNativeBounds -= value;
}
public static event Delegates.get_AnchorCamera_BeforeArgs get_AnchorCamera
{
add
{

HookHandler._beforeget_AnchorCamera += value;
HookHandler.Hookget_AnchorCamera();
}
remove => HookHandler._beforeget_AnchorCamera -= value;
}
public static event Delegates.set_AnchorCamera_BeforeArgs set_AnchorCamera
{
add
{

HookHandler._beforeset_AnchorCamera += value;
HookHandler.Hookset_AnchorCamera();
}
remove => HookHandler._beforeset_AnchorCamera -= value;
}
public static event Delegates.get_AnchorTk2dCamera_BeforeArgs get_AnchorTk2dCamera
{
add
{

HookHandler._beforeget_AnchorTk2dCamera += value;
HookHandler.Hookget_AnchorTk2dCamera();
}
remove => HookHandler._beforeget_AnchorTk2dCamera -= value;
}
public static event Delegates.get_myTransform_BeforeArgs get_myTransform
{
add
{

HookHandler._beforeget_myTransform += value;
HookHandler.Hookget_myTransform();
}
remove => HookHandler._beforeget_myTransform -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.UpdateTransform_BeforeArgs UpdateTransform
{
add
{

HookHandler._beforeUpdateTransform += value;
HookHandler.HookUpdateTransform();
}
remove => HookHandler._beforeUpdateTransform -= value;
}
public static event Delegates.ForceUpdateTransform_BeforeArgs ForceUpdateTransform
{
add
{

HookHandler._beforeForceUpdateTransform += value;
HookHandler.HookForceUpdateTransform();
}
remove => HookHandler._beforeForceUpdateTransform -= value;
}
public static event Delegates.LateUpdate_BeforeArgs LateUpdate
{
add
{

HookHandler._beforeLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._beforeLateUpdate -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.set_AnchorPoint_AfterArgs set_AnchorPoint
{
add
{

HookHandler._afterset_AnchorPoint += value;
HookHandler.Hookset_AnchorPoint();
}
remove => HookHandler._afterset_AnchorPoint -= value;
}
public static event Delegates.get_AnchorOffsetPixels_AfterArgs get_AnchorOffsetPixels
{
add
{

HookHandler._afterget_AnchorOffsetPixels += value;
HookHandler.Hookget_AnchorOffsetPixels();
}
remove => HookHandler._afterget_AnchorOffsetPixels -= value;
}
public static event Delegates.set_AnchorOffsetPixels_AfterArgs set_AnchorOffsetPixels
{
add
{

HookHandler._afterset_AnchorOffsetPixels += value;
HookHandler.Hookset_AnchorOffsetPixels();
}
remove => HookHandler._afterset_AnchorOffsetPixels -= value;
}
public static event Delegates.get_AnchorToNativeBounds_AfterArgs get_AnchorToNativeBounds
{
add
{

HookHandler._afterget_AnchorToNativeBounds += value;
HookHandler.Hookget_AnchorToNativeBounds();
}
remove => HookHandler._afterget_AnchorToNativeBounds -= value;
}
public static event Delegates.set_AnchorToNativeBounds_AfterArgs set_AnchorToNativeBounds
{
add
{

HookHandler._afterset_AnchorToNativeBounds += value;
HookHandler.Hookset_AnchorToNativeBounds();
}
remove => HookHandler._afterset_AnchorToNativeBounds -= value;
}
public static event Delegates.get_AnchorCamera_AfterArgs get_AnchorCamera
{
add
{

HookHandler._afterget_AnchorCamera += value;
HookHandler.Hookget_AnchorCamera();
}
remove => HookHandler._afterget_AnchorCamera -= value;
}
public static event Delegates.set_AnchorCamera_AfterArgs set_AnchorCamera
{
add
{

HookHandler._afterset_AnchorCamera += value;
HookHandler.Hookset_AnchorCamera();
}
remove => HookHandler._afterset_AnchorCamera -= value;
}
public static event Delegates.get_AnchorTk2dCamera_AfterArgs get_AnchorTk2dCamera
{
add
{

HookHandler._afterget_AnchorTk2dCamera += value;
HookHandler.Hookget_AnchorTk2dCamera();
}
remove => HookHandler._afterget_AnchorTk2dCamera -= value;
}
public static event Delegates.get_myTransform_AfterArgs get_myTransform
{
add
{

HookHandler._afterget_myTransform += value;
HookHandler.Hookget_myTransform();
}
remove => HookHandler._afterget_myTransform -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.UpdateTransform_AfterArgs UpdateTransform
{
add
{

HookHandler._afterUpdateTransform += value;
HookHandler.HookUpdateTransform();
}
remove => HookHandler._afterUpdateTransform -= value;
}
public static event Delegates.ForceUpdateTransform_AfterArgs ForceUpdateTransform
{
add
{

HookHandler._afterForceUpdateTransform += value;
HookHandler.HookForceUpdateTransform();
}
remove => HookHandler._afterForceUpdateTransform -= value;
}
public static event Delegates.LateUpdate_AfterArgs LateUpdate
{
add
{

HookHandler._afterLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._afterLateUpdate -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.set_AnchorPoint_WithArgs set_AnchorPoint
{
add => HookEndpointManager.Add<Delegates.set_AnchorPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorPoint", true), value);
remove => HookEndpointManager.Remove<Delegates.set_AnchorPoint_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorPoint", true), value);
}
public static event Delegates.get_AnchorOffsetPixels_WithArgs get_AnchorOffsetPixels
{
add => HookEndpointManager.Add<Delegates.get_AnchorOffsetPixels_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorOffsetPixels", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AnchorOffsetPixels_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorOffsetPixels", true), value);
}
public static event Delegates.set_AnchorOffsetPixels_WithArgs set_AnchorOffsetPixels
{
add => HookEndpointManager.Add<Delegates.set_AnchorOffsetPixels_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorOffsetPixels", true), value);
remove => HookEndpointManager.Remove<Delegates.set_AnchorOffsetPixels_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorOffsetPixels", true), value);
}
public static event Delegates.get_AnchorToNativeBounds_WithArgs get_AnchorToNativeBounds
{
add => HookEndpointManager.Add<Delegates.get_AnchorToNativeBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorToNativeBounds", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AnchorToNativeBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorToNativeBounds", true), value);
}
public static event Delegates.set_AnchorToNativeBounds_WithArgs set_AnchorToNativeBounds
{
add => HookEndpointManager.Add<Delegates.set_AnchorToNativeBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorToNativeBounds", true), value);
remove => HookEndpointManager.Remove<Delegates.set_AnchorToNativeBounds_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorToNativeBounds", true), value);
}
public static event Delegates.get_AnchorCamera_WithArgs get_AnchorCamera
{
add => HookEndpointManager.Add<Delegates.get_AnchorCamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorCamera", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AnchorCamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorCamera", true), value);
}
public static event Delegates.set_AnchorCamera_WithArgs set_AnchorCamera
{
add => HookEndpointManager.Add<Delegates.set_AnchorCamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorCamera", true), value);
remove => HookEndpointManager.Remove<Delegates.set_AnchorCamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "set_AnchorCamera", true), value);
}
public static event Delegates.get_AnchorTk2dCamera_WithArgs get_AnchorTk2dCamera
{
add => HookEndpointManager.Add<Delegates.get_AnchorTk2dCamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorTk2dCamera", true), value);
remove => HookEndpointManager.Remove<Delegates.get_AnchorTk2dCamera_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_AnchorTk2dCamera", true), value);
}
public static event Delegates.get_myTransform_WithArgs get_myTransform
{
add => HookEndpointManager.Add<Delegates.get_myTransform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_myTransform", true), value);
remove => HookEndpointManager.Remove<Delegates.get_myTransform_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dCameraAnchor), "get_myTransform", true), value);
}
public static event On.tk2dCameraAnchor.hook_Start Start
{
add => On.tk2dCameraAnchor.Start += value;
remove => On.tk2dCameraAnchor.Start -= value;
}
public static event On.tk2dCameraAnchor.hook_UpdateTransform UpdateTransform
{
add => On.tk2dCameraAnchor.UpdateTransform += value;
remove => On.tk2dCameraAnchor.UpdateTransform -= value;
}
public static event On.tk2dCameraAnchor.hook_ForceUpdateTransform ForceUpdateTransform
{
add => On.tk2dCameraAnchor.ForceUpdateTransform += value;
remove => On.tk2dCameraAnchor.ForceUpdateTransform -= value;
}
public static event On.tk2dCameraAnchor.hook_LateUpdate LateUpdate
{
add => On.tk2dCameraAnchor.LateUpdate += value;
remove => On.tk2dCameraAnchor.LateUpdate -= value;
}
}

}
