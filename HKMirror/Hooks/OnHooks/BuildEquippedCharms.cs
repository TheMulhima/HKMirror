using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for BuildEquippedCharms class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBuildEquippedCharms
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.BuildEquippedCharms.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.BuildEquippedCharms.orig_Start orig,BuildEquippedCharms self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBuildCharmList()
{
if (!HookedList.Contains("BuildCharmList"))
{
HookedList.Add("BuildCharmList");
On.BuildEquippedCharms.BuildCharmList += BuildCharmList;

}
}
internal static event Delegates.BuildCharmList_BeforeArgs _beforeBuildCharmList;
internal static event Delegates.BuildCharmList_AfterArgs _afterBuildCharmList;
private static void BuildCharmList(On.BuildEquippedCharms.orig_BuildCharmList orig,BuildEquippedCharms self)
{
Delegates.Params_BuildCharmList @params = new() 
{
self = self
};
if (_beforeBuildCharmList != null)
{
foreach (Delegates.BuildCharmList_BeforeArgs toInvoke in _beforeBuildCharmList.GetInvocationList())
{
try
{
_beforeBuildCharmList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBuildCharmList != null)
{
foreach (Delegates.BuildCharmList_AfterArgs toInvoke in _afterBuildCharmList.GetInvocationList())
{
try
{
_afterBuildCharmList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateNotches()
{
if (!HookedList.Contains("UpdateNotches"))
{
HookedList.Add("UpdateNotches");
On.BuildEquippedCharms.UpdateNotches += UpdateNotches;

}
}
internal static event Delegates.UpdateNotches_BeforeArgs _beforeUpdateNotches;
internal static event Delegates.UpdateNotches_AfterArgs _afterUpdateNotches;
private static void UpdateNotches(On.BuildEquippedCharms.orig_UpdateNotches orig,BuildEquippedCharms self)
{
Delegates.Params_UpdateNotches @params = new() 
{
self = self
};
if (_beforeUpdateNotches != null)
{
foreach (Delegates.UpdateNotches_BeforeArgs toInvoke in _beforeUpdateNotches.GetInvocationList())
{
try
{
_beforeUpdateNotches?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateNotches != null)
{
foreach (Delegates.UpdateNotches_AfterArgs toInvoke in _afterUpdateNotches.GetInvocationList())
{
try
{
_afterUpdateNotches.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetObjectAt()
{
if (!HookedList.Contains("GetObjectAt"))
{
HookedList.Add("GetObjectAt");
On.BuildEquippedCharms.GetObjectAt += GetObjectAt;

}
}
internal static event Delegates.GetObjectAt_BeforeArgs _beforeGetObjectAt;
internal static event Delegates.GetObjectAt_AfterArgs _afterGetObjectAt;
private static UnityEngine.GameObject GetObjectAt(On.BuildEquippedCharms.orig_GetObjectAt orig,BuildEquippedCharms self,  int listNumber)
{
Delegates.Params_GetObjectAt @params = new() 
{
self = self
, listNumber = listNumber
};
if (_beforeGetObjectAt != null)
{
foreach (Delegates.GetObjectAt_BeforeArgs toInvoke in _beforeGetObjectAt.GetInvocationList())
{
try
{
_beforeGetObjectAt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
listNumber = @params.listNumber;
var retVal = orig(self, listNumber);
if (_afterGetObjectAt != null)
{
foreach (Delegates.GetObjectAt_AfterArgs toInvoke in _afterGetObjectAt.GetInvocationList())
{
try
{
retVal = _afterGetObjectAt.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetUICount()
{
if (!HookedList.Contains("GetUICount"))
{
HookedList.Add("GetUICount");
On.BuildEquippedCharms.GetUICount += GetUICount;

}
}
internal static event Delegates.GetUICount_BeforeArgs _beforeGetUICount;
internal static event Delegates.GetUICount_AfterArgs _afterGetUICount;
private static int GetUICount(On.BuildEquippedCharms.orig_GetUICount orig,BuildEquippedCharms self)
{
Delegates.Params_GetUICount @params = new() 
{
self = self
};
if (_beforeGetUICount != null)
{
foreach (Delegates.GetUICount_BeforeArgs toInvoke in _beforeGetUICount.GetInvocationList())
{
try
{
_beforeGetUICount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetUICount != null)
{
foreach (Delegates.GetUICount_AfterArgs toInvoke in _afterGetUICount.GetInvocationList())
{
try
{
retVal = _afterGetUICount.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetItemName()
{
if (!HookedList.Contains("GetItemName"))
{
HookedList.Add("GetItemName");
On.BuildEquippedCharms.GetItemName += GetItemName;

}
}
internal static event Delegates.GetItemName_BeforeArgs _beforeGetItemName;
internal static event Delegates.GetItemName_AfterArgs _afterGetItemName;
private static string GetItemName(On.BuildEquippedCharms.orig_GetItemName orig,BuildEquippedCharms self,  int itemNum)
{
Delegates.Params_GetItemName @params = new() 
{
self = self
, itemNum = itemNum
};
if (_beforeGetItemName != null)
{
foreach (Delegates.GetItemName_BeforeArgs toInvoke in _beforeGetItemName.GetInvocationList())
{
try
{
_beforeGetItemName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
itemNum = @params.itemNum;
var retVal = orig(self, itemNum);
if (_afterGetItemName != null)
{
foreach (Delegates.GetItemName_AfterArgs toInvoke in _afterGetItemName.GetInvocationList())
{
try
{
retVal = _afterGetItemName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public BuildEquippedCharms self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<BuildEquippedCharms> orig, BuildEquippedCharms self);
public sealed class Params_BuildCharmList
{
public BuildEquippedCharms self;
}
public delegate void BuildCharmList_BeforeArgs(Params_BuildCharmList args);
public delegate void BuildCharmList_AfterArgs(Params_BuildCharmList args);
public delegate void BuildCharmList_WithArgs (Action<BuildEquippedCharms> orig, BuildEquippedCharms self);
public sealed class Params_UpdateNotches
{
public BuildEquippedCharms self;
}
public delegate void UpdateNotches_BeforeArgs(Params_UpdateNotches args);
public delegate void UpdateNotches_AfterArgs(Params_UpdateNotches args);
public delegate void UpdateNotches_WithArgs (Action<BuildEquippedCharms> orig, BuildEquippedCharms self);
public sealed class Params_GetObjectAt
{
public BuildEquippedCharms self;
public int listNumber;
}
public delegate void GetObjectAt_BeforeArgs(Params_GetObjectAt args);
public delegate UnityEngine.GameObject GetObjectAt_AfterArgs(Params_GetObjectAt args, UnityEngine.GameObject ret);
public delegate UnityEngine.GameObject GetObjectAt_WithArgs (Func<BuildEquippedCharms,  int, UnityEngine.GameObject> orig, BuildEquippedCharms self,  int listNumber);
public sealed class Params_GetUICount
{
public BuildEquippedCharms self;
}
public delegate void GetUICount_BeforeArgs(Params_GetUICount args);
public delegate int GetUICount_AfterArgs(Params_GetUICount args, int ret);
public delegate int GetUICount_WithArgs (Func<BuildEquippedCharms, int> orig, BuildEquippedCharms self);
public sealed class Params_GetItemName
{
public BuildEquippedCharms self;
public int itemNum;
}
public delegate void GetItemName_BeforeArgs(Params_GetItemName args);
public delegate string GetItemName_AfterArgs(Params_GetItemName args, string ret);
public delegate string GetItemName_WithArgs (Func<BuildEquippedCharms,  int, string> orig, BuildEquippedCharms self,  int itemNum);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.BuildCharmList_BeforeArgs BuildCharmList
{
add
{

HookHandler._beforeBuildCharmList += value;
HookHandler.HookBuildCharmList();
}
remove => HookHandler._beforeBuildCharmList -= value;
}
public static event Delegates.UpdateNotches_BeforeArgs UpdateNotches
{
add
{

HookHandler._beforeUpdateNotches += value;
HookHandler.HookUpdateNotches();
}
remove => HookHandler._beforeUpdateNotches -= value;
}
public static event Delegates.GetObjectAt_BeforeArgs GetObjectAt
{
add
{

HookHandler._beforeGetObjectAt += value;
HookHandler.HookGetObjectAt();
}
remove => HookHandler._beforeGetObjectAt -= value;
}
public static event Delegates.GetUICount_BeforeArgs GetUICount
{
add
{

HookHandler._beforeGetUICount += value;
HookHandler.HookGetUICount();
}
remove => HookHandler._beforeGetUICount -= value;
}
public static event Delegates.GetItemName_BeforeArgs GetItemName
{
add
{

HookHandler._beforeGetItemName += value;
HookHandler.HookGetItemName();
}
remove => HookHandler._beforeGetItemName -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.BuildCharmList_AfterArgs BuildCharmList
{
add
{

HookHandler._afterBuildCharmList += value;
HookHandler.HookBuildCharmList();
}
remove => HookHandler._afterBuildCharmList -= value;
}
public static event Delegates.UpdateNotches_AfterArgs UpdateNotches
{
add
{

HookHandler._afterUpdateNotches += value;
HookHandler.HookUpdateNotches();
}
remove => HookHandler._afterUpdateNotches -= value;
}
public static event Delegates.GetObjectAt_AfterArgs GetObjectAt
{
add
{

HookHandler._afterGetObjectAt += value;
HookHandler.HookGetObjectAt();
}
remove => HookHandler._afterGetObjectAt -= value;
}
public static event Delegates.GetUICount_AfterArgs GetUICount
{
add
{

HookHandler._afterGetUICount += value;
HookHandler.HookGetUICount();
}
remove => HookHandler._afterGetUICount -= value;
}
public static event Delegates.GetItemName_AfterArgs GetItemName
{
add
{

HookHandler._afterGetItemName += value;
HookHandler.HookGetItemName();
}
remove => HookHandler._afterGetItemName -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.BuildEquippedCharms.hook_Start Start
{
add => On.BuildEquippedCharms.Start += value;
remove => On.BuildEquippedCharms.Start -= value;
}
public static event On.BuildEquippedCharms.hook_BuildCharmList BuildCharmList
{
add => On.BuildEquippedCharms.BuildCharmList += value;
remove => On.BuildEquippedCharms.BuildCharmList -= value;
}
public static event On.BuildEquippedCharms.hook_UpdateNotches UpdateNotches
{
add => On.BuildEquippedCharms.UpdateNotches += value;
remove => On.BuildEquippedCharms.UpdateNotches -= value;
}
public static event On.BuildEquippedCharms.hook_GetObjectAt GetObjectAt
{
add => On.BuildEquippedCharms.GetObjectAt += value;
remove => On.BuildEquippedCharms.GetObjectAt -= value;
}
public static event On.BuildEquippedCharms.hook_GetUICount GetUICount
{
add => On.BuildEquippedCharms.GetUICount += value;
remove => On.BuildEquippedCharms.GetUICount -= value;
}
public static event On.BuildEquippedCharms.hook_GetItemName GetItemName
{
add => On.BuildEquippedCharms.GetItemName += value;
remove => On.BuildEquippedCharms.GetItemName -= value;
}
}

}
