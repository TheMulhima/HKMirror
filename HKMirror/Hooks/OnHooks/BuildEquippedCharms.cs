namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BuildEquippedCharms class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBuildEquippedCharms
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BuildEquippedCharms.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BuildEquippedCharms.orig_Start orig, BuildEquippedCharms self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookBuildCharmList()
        {
            if (!HookedList.Contains("BuildCharmList"))
            {
                HookedList.Add("BuildCharmList");
                On.BuildEquippedCharms.BuildCharmList += BuildCharmList;
            }
        }

        internal static event Delegates.BuildCharmList_BeforeArgs _beforeBuildCharmList;
        internal static event Delegates.BuildCharmList_NormalArgs _afterBuildCharmList;

        private static void BuildCharmList(On.BuildEquippedCharms.orig_BuildCharmList orig, BuildEquippedCharms self)
        {
            Delegates.Params_BuildCharmList @params = new()
            {
                self = self
            };
            _beforeBuildCharmList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuildCharmList != null) _afterBuildCharmList.Invoke(@params);
        }

        internal static void HookUpdateNotches()
        {
            if (!HookedList.Contains("UpdateNotches"))
            {
                HookedList.Add("UpdateNotches");
                On.BuildEquippedCharms.UpdateNotches += UpdateNotches;
            }
        }

        internal static event Delegates.UpdateNotches_BeforeArgs _beforeUpdateNotches;
        internal static event Delegates.UpdateNotches_NormalArgs _afterUpdateNotches;

        private static void UpdateNotches(On.BuildEquippedCharms.orig_UpdateNotches orig, BuildEquippedCharms self)
        {
            Delegates.Params_UpdateNotches @params = new()
            {
                self = self
            };
            _beforeUpdateNotches?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateNotches != null) _afterUpdateNotches.Invoke(@params);
        }

        internal static void HookGetObjectAt()
        {
            if (!HookedList.Contains("GetObjectAt"))
            {
                HookedList.Add("GetObjectAt");
                On.BuildEquippedCharms.GetObjectAt += GetObjectAt;
            }
        }

        internal static event Delegates.GetObjectAt_BeforeArgs _beforeGetObjectAt;
        internal static event Delegates.GetObjectAt_NormalArgs _afterGetObjectAt;

        private static GameObject GetObjectAt(On.BuildEquippedCharms.orig_GetObjectAt orig, BuildEquippedCharms self,
            int listNumber)
        {
            Delegates.Params_GetObjectAt @params = new()
            {
                self = self, listNumber = listNumber
            };
            _beforeGetObjectAt?.Invoke(@params);
            self = @params.self;
            listNumber = @params.listNumber;
            var retVal = orig(self, listNumber);
            if (_afterGetObjectAt != null) retVal = _afterGetObjectAt.Invoke(@params);
            return retVal;
        }

        internal static void HookGetUICount()
        {
            if (!HookedList.Contains("GetUICount"))
            {
                HookedList.Add("GetUICount");
                On.BuildEquippedCharms.GetUICount += GetUICount;
            }
        }

        internal static event Delegates.GetUICount_BeforeArgs _beforeGetUICount;
        internal static event Delegates.GetUICount_NormalArgs _afterGetUICount;

        private static int GetUICount(On.BuildEquippedCharms.orig_GetUICount orig, BuildEquippedCharms self)
        {
            Delegates.Params_GetUICount @params = new()
            {
                self = self
            };
            _beforeGetUICount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetUICount != null) retVal = _afterGetUICount.Invoke(@params);
            return retVal;
        }

        internal static void HookGetItemName()
        {
            if (!HookedList.Contains("GetItemName"))
            {
                HookedList.Add("GetItemName");
                On.BuildEquippedCharms.GetItemName += GetItemName;
            }
        }

        internal static event Delegates.GetItemName_BeforeArgs _beforeGetItemName;
        internal static event Delegates.GetItemName_NormalArgs _afterGetItemName;

        private static string GetItemName(On.BuildEquippedCharms.orig_GetItemName orig, BuildEquippedCharms self,
            int itemNum)
        {
            Delegates.Params_GetItemName @params = new()
            {
                self = self, itemNum = itemNum
            };
            _beforeGetItemName?.Invoke(@params);
            self = @params.self;
            itemNum = @params.itemNum;
            var retVal = orig(self, itemNum);
            if (_afterGetItemName != null) retVal = _afterGetItemName.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BuildCharmList_BeforeArgs(Params_BuildCharmList args);

        public delegate void BuildCharmList_NormalArgs(Params_BuildCharmList args);

        public delegate void GetItemName_BeforeArgs(Params_GetItemName args);

        public delegate string GetItemName_NormalArgs(Params_GetItemName args);

        public delegate void GetObjectAt_BeforeArgs(Params_GetObjectAt args);

        public delegate GameObject GetObjectAt_NormalArgs(Params_GetObjectAt args);

        public delegate void GetUICount_BeforeArgs(Params_GetUICount args);

        public delegate int GetUICount_NormalArgs(Params_GetUICount args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UpdateNotches_BeforeArgs(Params_UpdateNotches args);

        public delegate void UpdateNotches_NormalArgs(Params_UpdateNotches args);

        public sealed class Params_Start
        {
            public BuildEquippedCharms self;
        }

        public sealed class Params_BuildCharmList
        {
            public BuildEquippedCharms self;
        }

        public sealed class Params_UpdateNotches
        {
            public BuildEquippedCharms self;
        }

        public sealed class Params_GetObjectAt
        {
            public int listNumber;
            public BuildEquippedCharms self;
        }

        public sealed class Params_GetUICount
        {
            public BuildEquippedCharms self;
        }

        public sealed class Params_GetItemName
        {
            public int itemNum;
            public BuildEquippedCharms self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.BuildCharmList_BeforeArgs BuildCharmList
        {
            add
            {
                HookHandler._beforeBuildCharmList += value;
                HookHandler.HookBuildCharmList();
            }
            remove => HookHandler._beforeBuildCharmList -= value;
        }

        public static event Delegates.UpdateNotches_BeforeArgs UpdateNotches
        {
            add
            {
                HookHandler._beforeUpdateNotches += value;
                HookHandler.HookUpdateNotches();
            }
            remove => HookHandler._beforeUpdateNotches -= value;
        }

        public static event Delegates.GetObjectAt_BeforeArgs GetObjectAt
        {
            add
            {
                HookHandler._beforeGetObjectAt += value;
                HookHandler.HookGetObjectAt();
            }
            remove => HookHandler._beforeGetObjectAt -= value;
        }

        public static event Delegates.GetUICount_BeforeArgs GetUICount
        {
            add
            {
                HookHandler._beforeGetUICount += value;
                HookHandler.HookGetUICount();
            }
            remove => HookHandler._beforeGetUICount -= value;
        }

        public static event Delegates.GetItemName_BeforeArgs GetItemName
        {
            add
            {
                HookHandler._beforeGetItemName += value;
                HookHandler.HookGetItemName();
            }
            remove => HookHandler._beforeGetItemName -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.BuildCharmList_NormalArgs BuildCharmList
        {
            add
            {
                HookHandler._afterBuildCharmList += value;
                HookHandler.HookBuildCharmList();
            }
            remove => HookHandler._afterBuildCharmList -= value;
        }

        public static event Delegates.UpdateNotches_NormalArgs UpdateNotches
        {
            add
            {
                HookHandler._afterUpdateNotches += value;
                HookHandler.HookUpdateNotches();
            }
            remove => HookHandler._afterUpdateNotches -= value;
        }

        public static event Delegates.GetObjectAt_NormalArgs GetObjectAt
        {
            add
            {
                HookHandler._afterGetObjectAt += value;
                HookHandler.HookGetObjectAt();
            }
            remove => HookHandler._afterGetObjectAt -= value;
        }

        public static event Delegates.GetUICount_NormalArgs GetUICount
        {
            add
            {
                HookHandler._afterGetUICount += value;
                HookHandler.HookGetUICount();
            }
            remove => HookHandler._afterGetUICount -= value;
        }

        public static event Delegates.GetItemName_NormalArgs GetItemName
        {
            add
            {
                HookHandler._afterGetItemName += value;
                HookHandler.HookGetItemName();
            }
            remove => HookHandler._afterGetItemName -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BuildEquippedCharms.hook_Start Start
        {
            add => On.BuildEquippedCharms.Start += value;
            remove => On.BuildEquippedCharms.Start -= value;
        }

        public static event On.BuildEquippedCharms.hook_BuildCharmList BuildCharmList
        {
            add => On.BuildEquippedCharms.BuildCharmList += value;
            remove => On.BuildEquippedCharms.BuildCharmList -= value;
        }

        public static event On.BuildEquippedCharms.hook_UpdateNotches UpdateNotches
        {
            add => On.BuildEquippedCharms.UpdateNotches += value;
            remove => On.BuildEquippedCharms.UpdateNotches -= value;
        }

        public static event On.BuildEquippedCharms.hook_GetObjectAt GetObjectAt
        {
            add => On.BuildEquippedCharms.GetObjectAt += value;
            remove => On.BuildEquippedCharms.GetObjectAt -= value;
        }

        public static event On.BuildEquippedCharms.hook_GetUICount GetUICount
        {
            add => On.BuildEquippedCharms.GetUICount += value;
            remove => On.BuildEquippedCharms.GetUICount -= value;
        }

        public static event On.BuildEquippedCharms.hook_GetItemName GetItemName
        {
            add => On.BuildEquippedCharms.GetItemName += value;
            remove => On.BuildEquippedCharms.GetItemName -= value;
        }
    }
}