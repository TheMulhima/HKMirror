using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ActivateGameObject class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnActivateGameObject
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<ActivateGameObject> orig, ActivateGameObject self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<ActivateGameObject> orig, ActivateGameObject self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<ActivateGameObject> orig, ActivateGameObject self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnExit"), OnExit);
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_NormalArgs _afterOnExit;

        private static void OnExit(Action<ActivateGameObject> orig, ActivateGameObject self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            _beforeOnExit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnExit != null) _afterOnExit.Invoke(@params);
        }

        internal static void HookDoActivateGameObject()
        {
            if (!HookedList.Contains("DoActivateGameObject"))
            {
                HookedList.Add("DoActivateGameObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "DoActivateGameObject"),
                    DoActivateGameObject);
            }
        }

        internal static event Delegates.DoActivateGameObject_BeforeArgs _beforeDoActivateGameObject;
        internal static event Delegates.DoActivateGameObject_NormalArgs _afterDoActivateGameObject;

        private static void DoActivateGameObject(Action<ActivateGameObject> orig, ActivateGameObject self)
        {
            Delegates.Params_DoActivateGameObject @params = new()
            {
                self = self
            };
            _beforeDoActivateGameObject?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoActivateGameObject != null) _afterDoActivateGameObject.Invoke(@params);
        }

        internal static void HookSetActiveRecursively()
        {
            if (!HookedList.Contains("SetActiveRecursively"))
            {
                HookedList.Add("SetActiveRecursively");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "SetActiveRecursively"),
                    SetActiveRecursively);
            }
        }

        internal static event Delegates.SetActiveRecursively_BeforeArgs _beforeSetActiveRecursively;
        internal static event Delegates.SetActiveRecursively_NormalArgs _afterSetActiveRecursively;

        private static void SetActiveRecursively(Action<ActivateGameObject, GameObject, bool> orig,
            ActivateGameObject self, GameObject go, bool state)
        {
            Delegates.Params_SetActiveRecursively @params = new()
            {
                self = self, go = go, state = state
            };
            _beforeSetActiveRecursively?.Invoke(@params);
            self = @params.self;
            go = @params.go;
            state = @params.state;
            orig(self, go, state);
            if (_afterSetActiveRecursively != null) _afterSetActiveRecursively.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoActivateGameObject_BeforeArgs(Params_DoActivateGameObject args);

        public delegate void DoActivateGameObject_NormalArgs(Params_DoActivateGameObject args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_NormalArgs(Params_OnExit args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SetActiveRecursively_BeforeArgs(Params_SetActiveRecursively args);

        public delegate void SetActiveRecursively_NormalArgs(Params_SetActiveRecursively args);

        public sealed class Params_Reset
        {
            public ActivateGameObject self;
        }

        public sealed class Params_OnEnter
        {
            public ActivateGameObject self;
        }

        public sealed class Params_OnUpdate
        {
            public ActivateGameObject self;
        }

        public sealed class Params_OnExit
        {
            public ActivateGameObject self;
        }

        public sealed class Params_DoActivateGameObject
        {
            public ActivateGameObject self;
        }

        public sealed class Params_SetActiveRecursively
        {
            public GameObject go;
            public ActivateGameObject self;
            public bool state;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.DoActivateGameObject_BeforeArgs DoActivateGameObject
        {
            add
            {
                HookHandler._beforeDoActivateGameObject += value;
                HookHandler.HookDoActivateGameObject();
            }
            remove => HookHandler._beforeDoActivateGameObject -= value;
        }

        public static event Delegates.SetActiveRecursively_BeforeArgs SetActiveRecursively
        {
            add
            {
                HookHandler._beforeSetActiveRecursively += value;
                HookHandler.HookSetActiveRecursively();
            }
            remove => HookHandler._beforeSetActiveRecursively -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.OnExit_NormalArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.DoActivateGameObject_NormalArgs DoActivateGameObject
        {
            add
            {
                HookHandler._afterDoActivateGameObject += value;
                HookHandler.HookDoActivateGameObject();
            }
            remove => HookHandler._afterDoActivateGameObject -= value;
        }

        public static event Delegates.SetActiveRecursively_NormalArgs SetActiveRecursively
        {
            add
            {
                HookHandler._afterSetActiveRecursively += value;
                HookHandler.HookSetActiveRecursively();
            }
            remove => HookHandler._afterSetActiveRecursively -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnUpdate"), value);
        }

        public static event Delegates.OnExit_NormalArgs OnExit
        {
            add => HookEndpointManager.Add<Delegates.OnExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnExit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnExit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "OnExit"), value);
        }

        public static event Delegates.DoActivateGameObject_NormalArgs DoActivateGameObject
        {
            add => HookEndpointManager.Add<Delegates.DoActivateGameObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "DoActivateGameObject"), value);
            remove => HookEndpointManager.Remove<Delegates.DoActivateGameObject_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "DoActivateGameObject"), value);
        }

        public static event Delegates.SetActiveRecursively_NormalArgs SetActiveRecursively
        {
            add => HookEndpointManager.Add<Delegates.SetActiveRecursively_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "SetActiveRecursively"), value);
            remove => HookEndpointManager.Remove<Delegates.SetActiveRecursively_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ActivateGameObject), "SetActiveRecursively"), value);
        }
    }
}