using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for AssetNamePickerAttribute class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAssetNamePickerAttribute
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_SearchFilter()
{
if (!HookedList.Contains("get_SearchFilter"))
{
HookedList.Add("get_SearchFilter");
new Hook(ReflectionHelper.GetMethodInfo(typeof(AssetNamePickerAttribute), "get_SearchFilter", true), get_SearchFilter);

}
}
internal static event Delegates.get_SearchFilter_BeforeArgs _beforeget_SearchFilter;
internal static event Delegates.get_SearchFilter_AfterArgs _afterget_SearchFilter;
private static string get_SearchFilter(Func<AssetNamePickerAttribute, string> orig, AssetNamePickerAttribute self)
{
Delegates.Params_get_SearchFilter @params = new() 
{
self = self
};
if (_beforeget_SearchFilter != null)
{
foreach (Delegates.get_SearchFilter_BeforeArgs toInvoke in _beforeget_SearchFilter.GetInvocationList())
{
try
{
_beforeget_SearchFilter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SearchFilter != null)
{
foreach (Delegates.get_SearchFilter_AfterArgs toInvoke in _afterget_SearchFilter.GetInvocationList())
{
try
{
retVal = _afterget_SearchFilter.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_SearchFilter
{
public AssetNamePickerAttribute self;
}
public delegate void get_SearchFilter_BeforeArgs(Params_get_SearchFilter args);
public delegate string get_SearchFilter_AfterArgs(Params_get_SearchFilter args, string ret);
public delegate string get_SearchFilter_WithArgs (Func<AssetNamePickerAttribute, string> orig, AssetNamePickerAttribute self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_SearchFilter_BeforeArgs get_SearchFilter
{
add
{

HookHandler._beforeget_SearchFilter += value;
HookHandler.Hookget_SearchFilter();
}
remove => HookHandler._beforeget_SearchFilter -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_SearchFilter_AfterArgs get_SearchFilter
{
add
{

HookHandler._afterget_SearchFilter += value;
HookHandler.Hookget_SearchFilter();
}
remove => HookHandler._afterget_SearchFilter -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_SearchFilter_WithArgs get_SearchFilter
{
add => HookEndpointManager.Add<Delegates.get_SearchFilter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(AssetNamePickerAttribute), "get_SearchFilter", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SearchFilter_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(AssetNamePickerAttribute), "get_SearchFilter", true), value);
}
}

}
