using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AssetNamePickerAttribute class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAssetNamePickerAttribute
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SearchFilter()
        {
            if (!HookedList.Contains("get_SearchFilter"))
            {
                HookedList.Add("get_SearchFilter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AssetNamePickerAttribute), "get_SearchFilter"),
                    get_SearchFilter);
            }
        }

        internal static event Delegates.get_SearchFilter_BeforeArgs _beforeget_SearchFilter;
        internal static event Delegates.get_SearchFilter_NormalArgs _afterget_SearchFilter;

        private static string get_SearchFilter(Func<AssetNamePickerAttribute, string> orig,
            AssetNamePickerAttribute self)
        {
            Delegates.Params_get_SearchFilter @params = new()
            {
                self = self
            };
            _beforeget_SearchFilter?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SearchFilter != null) retVal = _afterget_SearchFilter.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_SearchFilter_BeforeArgs(Params_get_SearchFilter args);

        public delegate string get_SearchFilter_NormalArgs(Params_get_SearchFilter args);

        public sealed class Params_get_SearchFilter
        {
            public AssetNamePickerAttribute self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SearchFilter_BeforeArgs get_SearchFilter
        {
            add
            {
                HookHandler._beforeget_SearchFilter += value;
                HookHandler.Hookget_SearchFilter();
            }
            remove => HookHandler._beforeget_SearchFilter -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SearchFilter_NormalArgs get_SearchFilter
        {
            add
            {
                HookHandler._afterget_SearchFilter += value;
                HookHandler.Hookget_SearchFilter();
            }
            remove => HookHandler._afterget_SearchFilter -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SearchFilter_NormalArgs get_SearchFilter
        {
            add => HookEndpointManager.Add<Delegates.get_SearchFilter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AssetNamePickerAttribute), "get_SearchFilter"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SearchFilter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AssetNamePickerAttribute), "get_SearchFilter"), value);
        }
    }
}