using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ArrayListGetNext class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnArrayListGetNext
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "Reset",
                        true), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "OnEnter",
                        true), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoGetNextItem()
        {
            if (!HookedList.Contains("DoGetNextItem"))
            {
                HookedList.Add("DoGetNextItem");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext),
                        "DoGetNextItem", true), DoGetNextItem);
            }
        }

        internal static event Delegates.DoGetNextItem_BeforeArgs _beforeDoGetNextItem;
        internal static event Delegates.DoGetNextItem_AfterArgs _afterDoGetNextItem;

        private static void DoGetNextItem(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self)
        {
            Delegates.Params_DoGetNextItem @params = new()
            {
                self = self
            };
            if (_beforeDoGetNextItem != null)
            {
                foreach (Delegates.DoGetNextItem_BeforeArgs toInvoke in _beforeDoGetNextItem.GetInvocationList())
                {
                    try
                    {
                        _beforeDoGetNextItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoGetNextItem != null)
            {
                foreach (Delegates.DoGetNextItem_AfterArgs toInvoke in _afterDoGetNextItem.GetInvocationList())
                {
                    try
                    {
                        _afterDoGetNextItem.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetItemAtIndex()
        {
            if (!HookedList.Contains("GetItemAtIndex"))
            {
                HookedList.Add("GetItemAtIndex");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext),
                        "GetItemAtIndex", true), GetItemAtIndex);
            }
        }

        internal static event Delegates.GetItemAtIndex_BeforeArgs _beforeGetItemAtIndex;
        internal static event Delegates.GetItemAtIndex_AfterArgs _afterGetItemAtIndex;

        private static void GetItemAtIndex(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self)
        {
            Delegates.Params_GetItemAtIndex @params = new()
            {
                self = self
            };
            if (_beforeGetItemAtIndex != null)
            {
                foreach (Delegates.GetItemAtIndex_BeforeArgs toInvoke in _beforeGetItemAtIndex.GetInvocationList())
                {
                    try
                    {
                        _beforeGetItemAtIndex?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterGetItemAtIndex != null)
            {
                foreach (Delegates.GetItemAtIndex_AfterArgs toInvoke in _afterGetItemAtIndex.GetInvocationList())
                {
                    try
                    {
                        _afterGetItemAtIndex.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.ArrayListGetNext self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.ArrayListGetNext self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self);

        public sealed class Params_DoGetNextItem
        {
            public HutongGames.PlayMaker.Actions.ArrayListGetNext self;
        }

        public delegate void DoGetNextItem_BeforeArgs(Params_DoGetNextItem args);

        public delegate void DoGetNextItem_AfterArgs(Params_DoGetNextItem args);

        public delegate void DoGetNextItem_WithArgs(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self);

        public sealed class Params_GetItemAtIndex
        {
            public HutongGames.PlayMaker.Actions.ArrayListGetNext self;
        }

        public delegate void GetItemAtIndex_BeforeArgs(Params_GetItemAtIndex args);

        public delegate void GetItemAtIndex_AfterArgs(Params_GetItemAtIndex args);

        public delegate void GetItemAtIndex_WithArgs(Action<HutongGames.PlayMaker.Actions.ArrayListGetNext> orig,
            HutongGames.PlayMaker.Actions.ArrayListGetNext self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoGetNextItem_BeforeArgs DoGetNextItem
        {
            add
            {
                HookHandler._beforeDoGetNextItem += value;
                HookHandler.HookDoGetNextItem();
            }
            remove => HookHandler._beforeDoGetNextItem -= value;
        }

        public static event Delegates.GetItemAtIndex_BeforeArgs GetItemAtIndex
        {
            add
            {
                HookHandler._beforeGetItemAtIndex += value;
                HookHandler.HookGetItemAtIndex();
            }
            remove => HookHandler._beforeGetItemAtIndex -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoGetNextItem_AfterArgs DoGetNextItem
        {
            add
            {
                HookHandler._afterDoGetNextItem += value;
                HookHandler.HookDoGetNextItem();
            }
            remove => HookHandler._afterDoGetNextItem -= value;
        }

        public static event Delegates.GetItemAtIndex_AfterArgs GetItemAtIndex
        {
            add
            {
                HookHandler._afterGetItemAtIndex += value;
                HookHandler.HookGetItemAtIndex();
            }
            remove => HookHandler._afterGetItemAtIndex -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "Reset", true),
                value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "OnEnter", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "OnEnter", true),
                value);
        }

        public static event Delegates.DoGetNextItem_WithArgs DoGetNextItem
        {
            add => HookEndpointManager.Add<Delegates.DoGetNextItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "DoGetNextItem",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoGetNextItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "DoGetNextItem",
                    true), value);
        }

        public static event Delegates.GetItemAtIndex_WithArgs GetItemAtIndex
        {
            add => HookEndpointManager.Add<Delegates.GetItemAtIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "GetItemAtIndex",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.GetItemAtIndex_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ArrayListGetNext), "GetItemAtIndex",
                    true), value);
        }
    }
}