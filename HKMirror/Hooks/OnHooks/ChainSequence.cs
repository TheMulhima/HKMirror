using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ChainSequence class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnChainSequence
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_CurrentSequence()
        {
            if (!HookedList.Contains("get_CurrentSequence"))
            {
                HookedList.Add("get_CurrentSequence");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_CurrentSequence"),
                    get_CurrentSequence);
            }
        }

        internal static event Delegates.get_CurrentSequence_BeforeArgs _beforeget_CurrentSequence;
        internal static event Delegates.get_CurrentSequence_NormalArgs _afterget_CurrentSequence;

        private static SkippableSequence get_CurrentSequence(Func<ChainSequence, SkippableSequence> orig,
            ChainSequence self)
        {
            Delegates.Params_get_CurrentSequence @params = new()
            {
                self = self
            };
            _beforeget_CurrentSequence?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CurrentSequence != null) retVal = _afterget_CurrentSequence.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsCurrentSkipped()
        {
            if (!HookedList.Contains("get_IsCurrentSkipped"))
            {
                HookedList.Add("get_IsCurrentSkipped");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsCurrentSkipped"),
                    get_IsCurrentSkipped);
            }
        }

        internal static event Delegates.get_IsCurrentSkipped_BeforeArgs _beforeget_IsCurrentSkipped;
        internal static event Delegates.get_IsCurrentSkipped_NormalArgs _afterget_IsCurrentSkipped;

        private static bool get_IsCurrentSkipped(Func<ChainSequence, bool> orig, ChainSequence self)
        {
            Delegates.Params_get_IsCurrentSkipped @params = new()
            {
                self = self
            };
            _beforeget_IsCurrentSkipped?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsCurrentSkipped != null) retVal = _afterget_IsCurrentSkipped.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsSkipped()
        {
            if (!HookedList.Contains("get_IsSkipped"))
            {
                HookedList.Add("get_IsSkipped");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsSkipped"), get_IsSkipped);
            }
        }

        internal static event Delegates.get_IsSkipped_BeforeArgs _beforeget_IsSkipped;
        internal static event Delegates.get_IsSkipped_NormalArgs _afterget_IsSkipped;

        private static bool get_IsSkipped(Func<ChainSequence, bool> orig, ChainSequence self)
        {
            Delegates.Params_get_IsSkipped @params = new()
            {
                self = self
            };
            _beforeget_IsSkipped?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSkipped != null) retVal = _afterget_IsSkipped.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ChainSequence.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.ChainSequence.orig_Awake orig, ChainSequence self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.ChainSequence.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.ChainSequence.orig_Update orig, ChainSequence self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookBegin()
        {
            if (!HookedList.Contains("Begin"))
            {
                HookedList.Add("Begin");
                On.ChainSequence.Begin += Begin;
            }
        }

        internal static event Delegates.Begin_BeforeArgs _beforeBegin;
        internal static event Delegates.Begin_NormalArgs _afterBegin;

        private static void Begin(On.ChainSequence.orig_Begin orig, ChainSequence self)
        {
            Delegates.Params_Begin @params = new()
            {
                self = self
            };
            _beforeBegin?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBegin != null) _afterBegin.Invoke(@params);
        }

        internal static void HookNext()
        {
            if (!HookedList.Contains("Next"))
            {
                HookedList.Add("Next");
                On.ChainSequence.Next += Next;
            }
        }

        internal static event Delegates.Next_BeforeArgs _beforeNext;
        internal static event Delegates.Next_NormalArgs _afterNext;

        private static void Next(On.ChainSequence.orig_Next orig, ChainSequence self)
        {
            Delegates.Params_Next @params = new()
            {
                self = self
            };
            _beforeNext?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterNext != null) _afterNext.Invoke(@params);
        }

        internal static void Hookget_IsPlaying()
        {
            if (!HookedList.Contains("get_IsPlaying"))
            {
                HookedList.Add("get_IsPlaying");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsPlaying"), get_IsPlaying);
            }
        }

        internal static event Delegates.get_IsPlaying_BeforeArgs _beforeget_IsPlaying;
        internal static event Delegates.get_IsPlaying_NormalArgs _afterget_IsPlaying;

        private static bool get_IsPlaying(Func<ChainSequence, bool> orig, ChainSequence self)
        {
            Delegates.Params_get_IsPlaying @params = new()
            {
                self = self
            };
            _beforeget_IsPlaying?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsPlaying != null) retVal = _afterget_IsPlaying.Invoke(@params);
            return retVal;
        }

        internal static void HookSkip()
        {
            if (!HookedList.Contains("Skip"))
            {
                HookedList.Add("Skip");
                On.ChainSequence.Skip += Skip;
            }
        }

        internal static event Delegates.Skip_BeforeArgs _beforeSkip;
        internal static event Delegates.Skip_NormalArgs _afterSkip;

        private static void Skip(On.ChainSequence.orig_Skip orig, ChainSequence self)
        {
            Delegates.Params_Skip @params = new()
            {
                self = self
            };
            _beforeSkip?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSkip != null) _afterSkip.Invoke(@params);
        }

        internal static void HookSkipSingle()
        {
            if (!HookedList.Contains("SkipSingle"))
            {
                HookedList.Add("SkipSingle");
                On.ChainSequence.SkipSingle += SkipSingle;
            }
        }

        internal static event Delegates.SkipSingle_BeforeArgs _beforeSkipSingle;
        internal static event Delegates.SkipSingle_NormalArgs _afterSkipSingle;

        private static void SkipSingle(On.ChainSequence.orig_SkipSingle orig, ChainSequence self)
        {
            Delegates.Params_SkipSingle @params = new()
            {
                self = self
            };
            _beforeSkipSingle?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSkipSingle != null) _afterSkipSingle.Invoke(@params);
        }

        internal static void Hookget_FadeByController()
        {
            if (!HookedList.Contains("get_FadeByController"))
            {
                HookedList.Add("get_FadeByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_FadeByController"),
                    get_FadeByController);
            }
        }

        internal static event Delegates.get_FadeByController_BeforeArgs _beforeget_FadeByController;
        internal static event Delegates.get_FadeByController_NormalArgs _afterget_FadeByController;

        private static float get_FadeByController(Func<ChainSequence, float> orig, ChainSequence self)
        {
            Delegates.Params_get_FadeByController @params = new()
            {
                self = self
            };
            _beforeget_FadeByController?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FadeByController != null) retVal = _afterget_FadeByController.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_FadeByController()
        {
            if (!HookedList.Contains("set_FadeByController"))
            {
                HookedList.Add("set_FadeByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "set_FadeByController"),
                    set_FadeByController);
            }
        }

        internal static event Delegates.set_FadeByController_BeforeArgs _beforeset_FadeByController;
        internal static event Delegates.set_FadeByController_NormalArgs _afterset_FadeByController;

        private static void set_FadeByController(Action<ChainSequence, float> orig, ChainSequence self, float value)
        {
            Delegates.Params_set_FadeByController @params = new()
            {
                self = self, value = value
            };
            _beforeset_FadeByController?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_FadeByController != null) _afterset_FadeByController.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Begin_BeforeArgs(Params_Begin args);

        public delegate void Begin_NormalArgs(Params_Begin args);

        public delegate void get_CurrentSequence_BeforeArgs(Params_get_CurrentSequence args);

        public delegate SkippableSequence get_CurrentSequence_NormalArgs(Params_get_CurrentSequence args);

        public delegate void get_FadeByController_BeforeArgs(Params_get_FadeByController args);

        public delegate float get_FadeByController_NormalArgs(Params_get_FadeByController args);

        public delegate void get_IsCurrentSkipped_BeforeArgs(Params_get_IsCurrentSkipped args);

        public delegate bool get_IsCurrentSkipped_NormalArgs(Params_get_IsCurrentSkipped args);

        public delegate void get_IsPlaying_BeforeArgs(Params_get_IsPlaying args);

        public delegate bool get_IsPlaying_NormalArgs(Params_get_IsPlaying args);

        public delegate void get_IsSkipped_BeforeArgs(Params_get_IsSkipped args);

        public delegate bool get_IsSkipped_NormalArgs(Params_get_IsSkipped args);

        public delegate void Next_BeforeArgs(Params_Next args);

        public delegate void Next_NormalArgs(Params_Next args);

        public delegate void set_FadeByController_BeforeArgs(Params_set_FadeByController args);

        public delegate void set_FadeByController_NormalArgs(Params_set_FadeByController args);

        public delegate void Skip_BeforeArgs(Params_Skip args);

        public delegate void Skip_NormalArgs(Params_Skip args);

        public delegate void SkipSingle_BeforeArgs(Params_SkipSingle args);

        public delegate void SkipSingle_NormalArgs(Params_SkipSingle args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_get_CurrentSequence
        {
            public ChainSequence self;
        }

        public sealed class Params_get_IsCurrentSkipped
        {
            public ChainSequence self;
        }

        public sealed class Params_get_IsSkipped
        {
            public ChainSequence self;
        }

        public sealed class Params_Awake
        {
            public ChainSequence self;
        }

        public sealed class Params_Update
        {
            public ChainSequence self;
        }

        public sealed class Params_Begin
        {
            public ChainSequence self;
        }

        public sealed class Params_Next
        {
            public ChainSequence self;
        }

        public sealed class Params_get_IsPlaying
        {
            public ChainSequence self;
        }

        public sealed class Params_Skip
        {
            public ChainSequence self;
        }

        public sealed class Params_SkipSingle
        {
            public ChainSequence self;
        }

        public sealed class Params_get_FadeByController
        {
            public ChainSequence self;
        }

        public sealed class Params_set_FadeByController
        {
            public ChainSequence self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_CurrentSequence_BeforeArgs get_CurrentSequence
        {
            add
            {
                HookHandler._beforeget_CurrentSequence += value;
                HookHandler.Hookget_CurrentSequence();
            }
            remove => HookHandler._beforeget_CurrentSequence -= value;
        }

        public static event Delegates.get_IsCurrentSkipped_BeforeArgs get_IsCurrentSkipped
        {
            add
            {
                HookHandler._beforeget_IsCurrentSkipped += value;
                HookHandler.Hookget_IsCurrentSkipped();
            }
            remove => HookHandler._beforeget_IsCurrentSkipped -= value;
        }

        public static event Delegates.get_IsSkipped_BeforeArgs get_IsSkipped
        {
            add
            {
                HookHandler._beforeget_IsSkipped += value;
                HookHandler.Hookget_IsSkipped();
            }
            remove => HookHandler._beforeget_IsSkipped -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Begin_BeforeArgs Begin
        {
            add
            {
                HookHandler._beforeBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._beforeBegin -= value;
        }

        public static event Delegates.Next_BeforeArgs Next
        {
            add
            {
                HookHandler._beforeNext += value;
                HookHandler.HookNext();
            }
            remove => HookHandler._beforeNext -= value;
        }

        public static event Delegates.get_IsPlaying_BeforeArgs get_IsPlaying
        {
            add
            {
                HookHandler._beforeget_IsPlaying += value;
                HookHandler.Hookget_IsPlaying();
            }
            remove => HookHandler._beforeget_IsPlaying -= value;
        }

        public static event Delegates.Skip_BeforeArgs Skip
        {
            add
            {
                HookHandler._beforeSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._beforeSkip -= value;
        }

        public static event Delegates.SkipSingle_BeforeArgs SkipSingle
        {
            add
            {
                HookHandler._beforeSkipSingle += value;
                HookHandler.HookSkipSingle();
            }
            remove => HookHandler._beforeSkipSingle -= value;
        }

        public static event Delegates.get_FadeByController_BeforeArgs get_FadeByController
        {
            add
            {
                HookHandler._beforeget_FadeByController += value;
                HookHandler.Hookget_FadeByController();
            }
            remove => HookHandler._beforeget_FadeByController -= value;
        }

        public static event Delegates.set_FadeByController_BeforeArgs set_FadeByController
        {
            add
            {
                HookHandler._beforeset_FadeByController += value;
                HookHandler.Hookset_FadeByController();
            }
            remove => HookHandler._beforeset_FadeByController -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_CurrentSequence_NormalArgs get_CurrentSequence
        {
            add
            {
                HookHandler._afterget_CurrentSequence += value;
                HookHandler.Hookget_CurrentSequence();
            }
            remove => HookHandler._afterget_CurrentSequence -= value;
        }

        public static event Delegates.get_IsCurrentSkipped_NormalArgs get_IsCurrentSkipped
        {
            add
            {
                HookHandler._afterget_IsCurrentSkipped += value;
                HookHandler.Hookget_IsCurrentSkipped();
            }
            remove => HookHandler._afterget_IsCurrentSkipped -= value;
        }

        public static event Delegates.get_IsSkipped_NormalArgs get_IsSkipped
        {
            add
            {
                HookHandler._afterget_IsSkipped += value;
                HookHandler.Hookget_IsSkipped();
            }
            remove => HookHandler._afterget_IsSkipped -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Begin_NormalArgs Begin
        {
            add
            {
                HookHandler._afterBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._afterBegin -= value;
        }

        public static event Delegates.Next_NormalArgs Next
        {
            add
            {
                HookHandler._afterNext += value;
                HookHandler.HookNext();
            }
            remove => HookHandler._afterNext -= value;
        }

        public static event Delegates.get_IsPlaying_NormalArgs get_IsPlaying
        {
            add
            {
                HookHandler._afterget_IsPlaying += value;
                HookHandler.Hookget_IsPlaying();
            }
            remove => HookHandler._afterget_IsPlaying -= value;
        }

        public static event Delegates.Skip_NormalArgs Skip
        {
            add
            {
                HookHandler._afterSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._afterSkip -= value;
        }

        public static event Delegates.SkipSingle_NormalArgs SkipSingle
        {
            add
            {
                HookHandler._afterSkipSingle += value;
                HookHandler.HookSkipSingle();
            }
            remove => HookHandler._afterSkipSingle -= value;
        }

        public static event Delegates.get_FadeByController_NormalArgs get_FadeByController
        {
            add
            {
                HookHandler._afterget_FadeByController += value;
                HookHandler.Hookget_FadeByController();
            }
            remove => HookHandler._afterget_FadeByController -= value;
        }

        public static event Delegates.set_FadeByController_NormalArgs set_FadeByController
        {
            add
            {
                HookHandler._afterset_FadeByController += value;
                HookHandler.Hookset_FadeByController();
            }
            remove => HookHandler._afterset_FadeByController -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_CurrentSequence_NormalArgs get_CurrentSequence
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentSequence_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_CurrentSequence"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentSequence_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_CurrentSequence"), value);
        }

        public static event Delegates.get_IsCurrentSkipped_NormalArgs get_IsCurrentSkipped
        {
            add => HookEndpointManager.Add<Delegates.get_IsCurrentSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsCurrentSkipped"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsCurrentSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsCurrentSkipped"), value);
        }

        public static event Delegates.get_IsSkipped_NormalArgs get_IsSkipped
        {
            add => HookEndpointManager.Add<Delegates.get_IsSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsSkipped"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsSkipped"), value);
        }

        public static event On.ChainSequence.hook_Awake Awake
        {
            add => On.ChainSequence.Awake += value;
            remove => On.ChainSequence.Awake -= value;
        }

        public static event On.ChainSequence.hook_Update Update
        {
            add => On.ChainSequence.Update += value;
            remove => On.ChainSequence.Update -= value;
        }

        public static event On.ChainSequence.hook_Begin Begin
        {
            add => On.ChainSequence.Begin += value;
            remove => On.ChainSequence.Begin -= value;
        }

        public static event On.ChainSequence.hook_Next Next
        {
            add => On.ChainSequence.Next += value;
            remove => On.ChainSequence.Next -= value;
        }

        public static event Delegates.get_IsPlaying_NormalArgs get_IsPlaying
        {
            add => HookEndpointManager.Add<Delegates.get_IsPlaying_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsPlaying"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsPlaying_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_IsPlaying"), value);
        }

        public static event On.ChainSequence.hook_Skip Skip
        {
            add => On.ChainSequence.Skip += value;
            remove => On.ChainSequence.Skip -= value;
        }

        public static event On.ChainSequence.hook_SkipSingle SkipSingle
        {
            add => On.ChainSequence.SkipSingle += value;
            remove => On.ChainSequence.SkipSingle -= value;
        }

        public static event Delegates.get_FadeByController_NormalArgs get_FadeByController
        {
            add => HookEndpointManager.Add<Delegates.get_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_FadeByController"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "get_FadeByController"), value);
        }

        public static event Delegates.set_FadeByController_NormalArgs set_FadeByController
        {
            add => HookEndpointManager.Add<Delegates.set_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "set_FadeByController"), value);
            remove => HookEndpointManager.Remove<Delegates.set_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ChainSequence), "set_FadeByController"), value);
        }
    }
}