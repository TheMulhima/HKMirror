using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_UpdateManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_UpdateManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "get_instance", false),
                    get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_NormalArgs _afterget_instance;

        private static TMP_UpdateManager get_instance(Func<TMP_UpdateManager> orig)
        {
            _beforeget_instance?.Invoke();
            var retVal = orig();
            if (_afterget_instance != null) retVal = _afterget_instance.Invoke();
            return retVal;
        }

        internal static void HookRegisterTextElementForLayoutRebuild()
        {
            if (!HookedList.Contains("RegisterTextElementForLayoutRebuild"))
            {
                HookedList.Add("RegisterTextElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "RegisterTextElementForLayoutRebuild",
                        false), RegisterTextElementForLayoutRebuild);
            }
        }

        internal static event Delegates.RegisterTextElementForLayoutRebuild_BeforeArgs
            _beforeRegisterTextElementForLayoutRebuild;

        internal static event Delegates.RegisterTextElementForLayoutRebuild_NormalArgs
            _afterRegisterTextElementForLayoutRebuild;

        private static void RegisterTextElementForLayoutRebuild(Action<TMP_Text> orig, TMP_Text element)
        {
            Delegates.Params_RegisterTextElementForLayoutRebuild @params = new()
            {
                element = element
            };
            _beforeRegisterTextElementForLayoutRebuild?.Invoke(@params);
            element = @params.element;
            orig(element);
            if (_afterRegisterTextElementForLayoutRebuild != null)
                _afterRegisterTextElementForLayoutRebuild.Invoke(@params);
        }

        internal static void HookInternalRegisterTextElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalRegisterTextElementForLayoutRebuild"))
            {
                HookedList.Add("InternalRegisterTextElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalRegisterTextElementForLayoutRebuild"), InternalRegisterTextElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalRegisterTextElementForLayoutRebuild_BeforeArgs
            _beforeInternalRegisterTextElementForLayoutRebuild;

        internal static event Delegates.InternalRegisterTextElementForLayoutRebuild_NormalArgs
            _afterInternalRegisterTextElementForLayoutRebuild;

        private static bool InternalRegisterTextElementForLayoutRebuild(Func<TMP_UpdateManager, TMP_Text, bool> orig,
            TMP_UpdateManager self, TMP_Text element)
        {
            Delegates.Params_InternalRegisterTextElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalRegisterTextElementForLayoutRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterTextElementForLayoutRebuild != null)
                retVal = _afterInternalRegisterTextElementForLayoutRebuild.Invoke(@params);
            return retVal;
        }

        internal static void HookRegisterTextElementForGraphicRebuild()
        {
            if (!HookedList.Contains("RegisterTextElementForGraphicRebuild"))
            {
                HookedList.Add("RegisterTextElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "RegisterTextElementForGraphicRebuild",
                        false), RegisterTextElementForGraphicRebuild);
            }
        }

        internal static event Delegates.RegisterTextElementForGraphicRebuild_BeforeArgs
            _beforeRegisterTextElementForGraphicRebuild;

        internal static event Delegates.RegisterTextElementForGraphicRebuild_NormalArgs
            _afterRegisterTextElementForGraphicRebuild;

        private static void RegisterTextElementForGraphicRebuild(Action<TMP_Text> orig, TMP_Text element)
        {
            Delegates.Params_RegisterTextElementForGraphicRebuild @params = new()
            {
                element = element
            };
            _beforeRegisterTextElementForGraphicRebuild?.Invoke(@params);
            element = @params.element;
            orig(element);
            if (_afterRegisterTextElementForGraphicRebuild != null)
                _afterRegisterTextElementForGraphicRebuild.Invoke(@params);
        }

        internal static void HookInternalRegisterTextElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalRegisterTextElementForGraphicRebuild"))
            {
                HookedList.Add("InternalRegisterTextElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalRegisterTextElementForGraphicRebuild"), InternalRegisterTextElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalRegisterTextElementForGraphicRebuild_BeforeArgs
            _beforeInternalRegisterTextElementForGraphicRebuild;

        internal static event Delegates.InternalRegisterTextElementForGraphicRebuild_NormalArgs
            _afterInternalRegisterTextElementForGraphicRebuild;

        private static bool InternalRegisterTextElementForGraphicRebuild(Func<TMP_UpdateManager, TMP_Text, bool> orig,
            TMP_UpdateManager self, TMP_Text element)
        {
            Delegates.Params_InternalRegisterTextElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalRegisterTextElementForGraphicRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterTextElementForGraphicRebuild != null)
                retVal = _afterInternalRegisterTextElementForGraphicRebuild.Invoke(@params);
            return retVal;
        }

        internal static void HookOnCameraPreRender()
        {
            if (!HookedList.Contains("OnCameraPreRender"))
            {
                HookedList.Add("OnCameraPreRender");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "OnCameraPreRender"),
                    OnCameraPreRender);
            }
        }

        internal static event Delegates.OnCameraPreRender_BeforeArgs _beforeOnCameraPreRender;
        internal static event Delegates.OnCameraPreRender_NormalArgs _afterOnCameraPreRender;

        private static void OnCameraPreRender(Action<TMP_UpdateManager, Camera> orig, TMP_UpdateManager self,
            Camera cam)
        {
            Delegates.Params_OnCameraPreRender @params = new()
            {
                self = self, cam = cam
            };
            _beforeOnCameraPreRender?.Invoke(@params);
            self = @params.self;
            cam = @params.cam;
            orig(self, cam);
            if (_afterOnCameraPreRender != null) _afterOnCameraPreRender.Invoke(@params);
        }

        internal static void HookUnRegisterTextElementForRebuild()
        {
            if (!HookedList.Contains("UnRegisterTextElementForRebuild"))
            {
                HookedList.Add("UnRegisterTextElementForRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "UnRegisterTextElementForRebuild", false),
                    UnRegisterTextElementForRebuild);
            }
        }

        internal static event Delegates.UnRegisterTextElementForRebuild_BeforeArgs
            _beforeUnRegisterTextElementForRebuild;

        internal static event Delegates.UnRegisterTextElementForRebuild_NormalArgs
            _afterUnRegisterTextElementForRebuild;

        private static void UnRegisterTextElementForRebuild(Action<TMP_Text> orig, TMP_Text element)
        {
            Delegates.Params_UnRegisterTextElementForRebuild @params = new()
            {
                element = element
            };
            _beforeUnRegisterTextElementForRebuild?.Invoke(@params);
            element = @params.element;
            orig(element);
            if (_afterUnRegisterTextElementForRebuild != null) _afterUnRegisterTextElementForRebuild.Invoke(@params);
        }

        internal static void HookInternalUnRegisterTextElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterTextElementForGraphicRebuild"))
            {
                HookedList.Add("InternalUnRegisterTextElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalUnRegisterTextElementForGraphicRebuild"),
                    InternalUnRegisterTextElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs
            _beforeInternalUnRegisterTextElementForGraphicRebuild;

        internal static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_NormalArgs
            _afterInternalUnRegisterTextElementForGraphicRebuild;

        private static void InternalUnRegisterTextElementForGraphicRebuild(Action<TMP_UpdateManager, TMP_Text> orig,
            TMP_UpdateManager self, TMP_Text element)
        {
            Delegates.Params_InternalUnRegisterTextElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalUnRegisterTextElementForGraphicRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterTextElementForGraphicRebuild != null)
                _afterInternalUnRegisterTextElementForGraphicRebuild.Invoke(@params);
        }

        internal static void HookInternalUnRegisterTextElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterTextElementForLayoutRebuild"))
            {
                HookedList.Add("InternalUnRegisterTextElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalUnRegisterTextElementForLayoutRebuild"),
                    InternalUnRegisterTextElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs
            _beforeInternalUnRegisterTextElementForLayoutRebuild;

        internal static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_NormalArgs
            _afterInternalUnRegisterTextElementForLayoutRebuild;

        private static void InternalUnRegisterTextElementForLayoutRebuild(Action<TMP_UpdateManager, TMP_Text> orig,
            TMP_UpdateManager self, TMP_Text element)
        {
            Delegates.Params_InternalUnRegisterTextElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            _beforeInternalUnRegisterTextElementForLayoutRebuild?.Invoke(@params);
            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterTextElementForLayoutRebuild != null)
                _afterInternalUnRegisterTextElementForLayoutRebuild.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_instance_BeforeArgs();

        public delegate TMP_UpdateManager get_instance_NormalArgs();

        public delegate void InternalRegisterTextElementForGraphicRebuild_BeforeArgs(
            Params_InternalRegisterTextElementForGraphicRebuild args);

        public delegate bool InternalRegisterTextElementForGraphicRebuild_NormalArgs(
            Params_InternalRegisterTextElementForGraphicRebuild args);

        public delegate void InternalRegisterTextElementForLayoutRebuild_BeforeArgs(
            Params_InternalRegisterTextElementForLayoutRebuild args);

        public delegate bool InternalRegisterTextElementForLayoutRebuild_NormalArgs(
            Params_InternalRegisterTextElementForLayoutRebuild args);

        public delegate void InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs(
            Params_InternalUnRegisterTextElementForGraphicRebuild args);

        public delegate void InternalUnRegisterTextElementForGraphicRebuild_NormalArgs(
            Params_InternalUnRegisterTextElementForGraphicRebuild args);

        public delegate void InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs(
            Params_InternalUnRegisterTextElementForLayoutRebuild args);

        public delegate void InternalUnRegisterTextElementForLayoutRebuild_NormalArgs(
            Params_InternalUnRegisterTextElementForLayoutRebuild args);

        public delegate void OnCameraPreRender_BeforeArgs(Params_OnCameraPreRender args);

        public delegate void OnCameraPreRender_NormalArgs(Params_OnCameraPreRender args);

        public delegate void RegisterTextElementForGraphicRebuild_BeforeArgs(
            Params_RegisterTextElementForGraphicRebuild args);

        public delegate void RegisterTextElementForGraphicRebuild_NormalArgs(
            Params_RegisterTextElementForGraphicRebuild args);

        public delegate void RegisterTextElementForLayoutRebuild_BeforeArgs(
            Params_RegisterTextElementForLayoutRebuild args);

        public delegate void RegisterTextElementForLayoutRebuild_NormalArgs(
            Params_RegisterTextElementForLayoutRebuild args);

        public delegate void UnRegisterTextElementForRebuild_BeforeArgs(Params_UnRegisterTextElementForRebuild args);

        public delegate void UnRegisterTextElementForRebuild_NormalArgs(Params_UnRegisterTextElementForRebuild args);

        public sealed class Params_RegisterTextElementForLayoutRebuild
        {
            public TMP_Text element;
        }

        public sealed class Params_InternalRegisterTextElementForLayoutRebuild
        {
            public TMP_Text element;
            public TMP_UpdateManager self;
        }

        public sealed class Params_RegisterTextElementForGraphicRebuild
        {
            public TMP_Text element;
        }

        public sealed class Params_InternalRegisterTextElementForGraphicRebuild
        {
            public TMP_Text element;
            public TMP_UpdateManager self;
        }

        public sealed class Params_OnCameraPreRender
        {
            public Camera cam;
            public TMP_UpdateManager self;
        }

        public sealed class Params_UnRegisterTextElementForRebuild
        {
            public TMP_Text element;
        }

        public sealed class Params_InternalUnRegisterTextElementForGraphicRebuild
        {
            public TMP_Text element;
            public TMP_UpdateManager self;
        }

        public sealed class Params_InternalUnRegisterTextElementForLayoutRebuild
        {
            public TMP_Text element;
            public TMP_UpdateManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.RegisterTextElementForLayoutRebuild_BeforeArgs RegisterTextElementForLayoutRebuild
        {
            add
            {
                HookHandler._beforeRegisterTextElementForLayoutRebuild += value;
                HookHandler.HookRegisterTextElementForLayoutRebuild();
            }
            remove => HookHandler._beforeRegisterTextElementForLayoutRebuild -= value;
        }

        public static event Delegates.InternalRegisterTextElementForLayoutRebuild_BeforeArgs
            InternalRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalRegisterTextElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterTextElementForGraphicRebuild_BeforeArgs
            RegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._beforeRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterTextElementForGraphicRebuild_BeforeArgs
            InternalRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.OnCameraPreRender_BeforeArgs OnCameraPreRender
        {
            add
            {
                HookHandler._beforeOnCameraPreRender += value;
                HookHandler.HookOnCameraPreRender();
            }
            remove => HookHandler._beforeOnCameraPreRender -= value;
        }

        public static event Delegates.UnRegisterTextElementForRebuild_BeforeArgs UnRegisterTextElementForRebuild
        {
            add
            {
                HookHandler._beforeUnRegisterTextElementForRebuild += value;
                HookHandler.HookUnRegisterTextElementForRebuild();
            }
            remove => HookHandler._beforeUnRegisterTextElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs
            InternalUnRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs
            InternalUnRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterTextElementForLayoutRebuild -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.RegisterTextElementForLayoutRebuild_NormalArgs RegisterTextElementForLayoutRebuild
        {
            add
            {
                HookHandler._afterRegisterTextElementForLayoutRebuild += value;
                HookHandler.HookRegisterTextElementForLayoutRebuild();
            }
            remove => HookHandler._afterRegisterTextElementForLayoutRebuild -= value;
        }

        public static event Delegates.InternalRegisterTextElementForLayoutRebuild_NormalArgs
            InternalRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalRegisterTextElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterTextElementForGraphicRebuild_NormalArgs
            RegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._afterRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterTextElementForGraphicRebuild_NormalArgs
            InternalRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.OnCameraPreRender_NormalArgs OnCameraPreRender
        {
            add
            {
                HookHandler._afterOnCameraPreRender += value;
                HookHandler.HookOnCameraPreRender();
            }
            remove => HookHandler._afterOnCameraPreRender -= value;
        }

        public static event Delegates.UnRegisterTextElementForRebuild_NormalArgs UnRegisterTextElementForRebuild
        {
            add
            {
                HookHandler._afterUnRegisterTextElementForRebuild += value;
                HookHandler.HookUnRegisterTextElementForRebuild();
            }
            remove => HookHandler._afterUnRegisterTextElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_NormalArgs
            InternalUnRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_NormalArgs
            InternalUnRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterTextElementForLayoutRebuild -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "get_instance", false), value);
        }

        public static event Delegates.RegisterTextElementForLayoutRebuild_NormalArgs RegisterTextElementForLayoutRebuild
        {
            add => HookEndpointManager.Add<Delegates.RegisterTextElementForLayoutRebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "RegisterTextElementForLayoutRebuild", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RegisterTextElementForLayoutRebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "RegisterTextElementForLayoutRebuild", false),
                value);
        }

        public static event Delegates.InternalRegisterTextElementForLayoutRebuild_NormalArgs
            InternalRegisterTextElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterTextElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalRegisterTextElementForLayoutRebuild"), value);
                remove => HookEndpointManager.Remove<Delegates.InternalRegisterTextElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalRegisterTextElementForLayoutRebuild"), value);
            }

        public static event Delegates.RegisterTextElementForGraphicRebuild_NormalArgs
            RegisterTextElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.RegisterTextElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "RegisterTextElementForGraphicRebuild",
                        false), value);
                remove => HookEndpointManager.Remove<Delegates.RegisterTextElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "RegisterTextElementForGraphicRebuild",
                        false), value);
            }

        public static event Delegates.InternalRegisterTextElementForGraphicRebuild_NormalArgs
            InternalRegisterTextElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterTextElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalRegisterTextElementForGraphicRebuild"), value);
                remove => HookEndpointManager.Remove<Delegates.InternalRegisterTextElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalRegisterTextElementForGraphicRebuild"), value);
            }

        public static event Delegates.OnCameraPreRender_NormalArgs OnCameraPreRender
        {
            add => HookEndpointManager.Add<Delegates.OnCameraPreRender_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "OnCameraPreRender"), value);
            remove => HookEndpointManager.Remove<Delegates.OnCameraPreRender_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "OnCameraPreRender"), value);
        }

        public static event Delegates.UnRegisterTextElementForRebuild_NormalArgs UnRegisterTextElementForRebuild
        {
            add => HookEndpointManager.Add<Delegates.UnRegisterTextElementForRebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "UnRegisterTextElementForRebuild", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.UnRegisterTextElementForRebuild_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager), "UnRegisterTextElementForRebuild", false),
                value);
        }

        public static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_NormalArgs
            InternalUnRegisterTextElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterTextElementForGraphicRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalUnRegisterTextElementForGraphicRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalUnRegisterTextElementForGraphicRebuild_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                            "InternalUnRegisterTextElementForGraphicRebuild"), value);
            }

        public static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_NormalArgs
            InternalUnRegisterTextElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterTextElementForLayoutRebuild_NormalArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                        "InternalUnRegisterTextElementForLayoutRebuild"), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.InternalUnRegisterTextElementForLayoutRebuild_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(TMP_UpdateManager),
                            "InternalUnRegisterTextElementForLayoutRebuild"), value);
            }
    }
}