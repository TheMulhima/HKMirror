using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for TMP_UpdateManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_UpdateManager
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "get_instance", false),
                    get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static TMPro.TMP_UpdateManager get_instance(Func<TMPro.TMP_UpdateManager> orig)
        {
            if (_beforeget_instance != null)
            {
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                {
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_instance != null)
            {
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRegisterTextElementForLayoutRebuild()
        {
            if (!HookedList.Contains("RegisterTextElementForLayoutRebuild"))
            {
                HookedList.Add("RegisterTextElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "RegisterTextElementForLayoutRebuild", false), RegisterTextElementForLayoutRebuild);
            }
        }

        internal static event Delegates.RegisterTextElementForLayoutRebuild_BeforeArgs
            _beforeRegisterTextElementForLayoutRebuild;

        internal static event Delegates.RegisterTextElementForLayoutRebuild_AfterArgs
            _afterRegisterTextElementForLayoutRebuild;

        private static void RegisterTextElementForLayoutRebuild(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text element)
        {
            Delegates.Params_RegisterTextElementForLayoutRebuild @params = new()
            {
                element = element
            };
            if (_beforeRegisterTextElementForLayoutRebuild != null)
            {
                foreach (Delegates.RegisterTextElementForLayoutRebuild_BeforeArgs toInvoke in
                         _beforeRegisterTextElementForLayoutRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeRegisterTextElementForLayoutRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            element = @params.element;
            orig(element);
            if (_afterRegisterTextElementForLayoutRebuild != null)
            {
                foreach (Delegates.RegisterTextElementForLayoutRebuild_AfterArgs toInvoke in
                         _afterRegisterTextElementForLayoutRebuild.GetInvocationList())
                {
                    try
                    {
                        _afterRegisterTextElementForLayoutRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInternalRegisterTextElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalRegisterTextElementForLayoutRebuild"))
            {
                HookedList.Add("InternalRegisterTextElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalRegisterTextElementForLayoutRebuild", true),
                    InternalRegisterTextElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalRegisterTextElementForLayoutRebuild_BeforeArgs
            _beforeInternalRegisterTextElementForLayoutRebuild;

        internal static event Delegates.InternalRegisterTextElementForLayoutRebuild_AfterArgs
            _afterInternalRegisterTextElementForLayoutRebuild;

        private static bool InternalRegisterTextElementForLayoutRebuild(
            Func<TMPro.TMP_UpdateManager, TMPro.TMP_Text, bool> orig, TMPro.TMP_UpdateManager self,
            TMPro.TMP_Text element)
        {
            Delegates.Params_InternalRegisterTextElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalRegisterTextElementForLayoutRebuild != null)
            {
                foreach (Delegates.InternalRegisterTextElementForLayoutRebuild_BeforeArgs toInvoke in
                         _beforeInternalRegisterTextElementForLayoutRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeInternalRegisterTextElementForLayoutRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterTextElementForLayoutRebuild != null)
            {
                foreach (Delegates.InternalRegisterTextElementForLayoutRebuild_AfterArgs toInvoke in
                         _afterInternalRegisterTextElementForLayoutRebuild.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterInternalRegisterTextElementForLayoutRebuild.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookRegisterTextElementForGraphicRebuild()
        {
            if (!HookedList.Contains("RegisterTextElementForGraphicRebuild"))
            {
                HookedList.Add("RegisterTextElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "RegisterTextElementForGraphicRebuild", false), RegisterTextElementForGraphicRebuild);
            }
        }

        internal static event Delegates.RegisterTextElementForGraphicRebuild_BeforeArgs
            _beforeRegisterTextElementForGraphicRebuild;

        internal static event Delegates.RegisterTextElementForGraphicRebuild_AfterArgs
            _afterRegisterTextElementForGraphicRebuild;

        private static void RegisterTextElementForGraphicRebuild(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text element)
        {
            Delegates.Params_RegisterTextElementForGraphicRebuild @params = new()
            {
                element = element
            };
            if (_beforeRegisterTextElementForGraphicRebuild != null)
            {
                foreach (Delegates.RegisterTextElementForGraphicRebuild_BeforeArgs toInvoke in
                         _beforeRegisterTextElementForGraphicRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeRegisterTextElementForGraphicRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            element = @params.element;
            orig(element);
            if (_afterRegisterTextElementForGraphicRebuild != null)
            {
                foreach (Delegates.RegisterTextElementForGraphicRebuild_AfterArgs toInvoke in
                         _afterRegisterTextElementForGraphicRebuild.GetInvocationList())
                {
                    try
                    {
                        _afterRegisterTextElementForGraphicRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInternalRegisterTextElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalRegisterTextElementForGraphicRebuild"))
            {
                HookedList.Add("InternalRegisterTextElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalRegisterTextElementForGraphicRebuild", true),
                    InternalRegisterTextElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalRegisterTextElementForGraphicRebuild_BeforeArgs
            _beforeInternalRegisterTextElementForGraphicRebuild;

        internal static event Delegates.InternalRegisterTextElementForGraphicRebuild_AfterArgs
            _afterInternalRegisterTextElementForGraphicRebuild;

        private static bool InternalRegisterTextElementForGraphicRebuild(
            Func<TMPro.TMP_UpdateManager, TMPro.TMP_Text, bool> orig, TMPro.TMP_UpdateManager self,
            TMPro.TMP_Text element)
        {
            Delegates.Params_InternalRegisterTextElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalRegisterTextElementForGraphicRebuild != null)
            {
                foreach (Delegates.InternalRegisterTextElementForGraphicRebuild_BeforeArgs toInvoke in
                         _beforeInternalRegisterTextElementForGraphicRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeInternalRegisterTextElementForGraphicRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            element = @params.element;
            var retVal = orig(self, element);
            if (_afterInternalRegisterTextElementForGraphicRebuild != null)
            {
                foreach (Delegates.InternalRegisterTextElementForGraphicRebuild_AfterArgs toInvoke in
                         _afterInternalRegisterTextElementForGraphicRebuild.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterInternalRegisterTextElementForGraphicRebuild.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnCameraPreRender()
        {
            if (!HookedList.Contains("OnCameraPreRender"))
            {
                HookedList.Add("OnCameraPreRender");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "OnCameraPreRender", true),
                    OnCameraPreRender);
            }
        }

        internal static event Delegates.OnCameraPreRender_BeforeArgs _beforeOnCameraPreRender;
        internal static event Delegates.OnCameraPreRender_AfterArgs _afterOnCameraPreRender;

        private static void OnCameraPreRender(Action<TMPro.TMP_UpdateManager, UnityEngine.Camera> orig,
            TMPro.TMP_UpdateManager self, UnityEngine.Camera cam)
        {
            Delegates.Params_OnCameraPreRender @params = new()
            {
                self = self, cam = cam
            };
            if (_beforeOnCameraPreRender != null)
            {
                foreach (Delegates.OnCameraPreRender_BeforeArgs toInvoke in
                         _beforeOnCameraPreRender.GetInvocationList())
                {
                    try
                    {
                        _beforeOnCameraPreRender?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            cam = @params.cam;
            orig(self, cam);
            if (_afterOnCameraPreRender != null)
            {
                foreach (Delegates.OnCameraPreRender_AfterArgs toInvoke in _afterOnCameraPreRender.GetInvocationList())
                {
                    try
                    {
                        _afterOnCameraPreRender.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUnRegisterTextElementForRebuild()
        {
            if (!HookedList.Contains("UnRegisterTextElementForRebuild"))
            {
                HookedList.Add("UnRegisterTextElementForRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "UnRegisterTextElementForRebuild",
                        false), UnRegisterTextElementForRebuild);
            }
        }

        internal static event Delegates.UnRegisterTextElementForRebuild_BeforeArgs
            _beforeUnRegisterTextElementForRebuild;

        internal static event Delegates.UnRegisterTextElementForRebuild_AfterArgs _afterUnRegisterTextElementForRebuild;

        private static void UnRegisterTextElementForRebuild(Action<TMPro.TMP_Text> orig, TMPro.TMP_Text element)
        {
            Delegates.Params_UnRegisterTextElementForRebuild @params = new()
            {
                element = element
            };
            if (_beforeUnRegisterTextElementForRebuild != null)
            {
                foreach (Delegates.UnRegisterTextElementForRebuild_BeforeArgs toInvoke in
                         _beforeUnRegisterTextElementForRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeUnRegisterTextElementForRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            element = @params.element;
            orig(element);
            if (_afterUnRegisterTextElementForRebuild != null)
            {
                foreach (Delegates.UnRegisterTextElementForRebuild_AfterArgs toInvoke in
                         _afterUnRegisterTextElementForRebuild.GetInvocationList())
                {
                    try
                    {
                        _afterUnRegisterTextElementForRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInternalUnRegisterTextElementForGraphicRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterTextElementForGraphicRebuild"))
            {
                HookedList.Add("InternalUnRegisterTextElementForGraphicRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalUnRegisterTextElementForGraphicRebuild", true),
                    InternalUnRegisterTextElementForGraphicRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs
            _beforeInternalUnRegisterTextElementForGraphicRebuild;

        internal static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_AfterArgs
            _afterInternalUnRegisterTextElementForGraphicRebuild;

        private static void InternalUnRegisterTextElementForGraphicRebuild(
            Action<TMPro.TMP_UpdateManager, TMPro.TMP_Text> orig, TMPro.TMP_UpdateManager self, TMPro.TMP_Text element)
        {
            Delegates.Params_InternalUnRegisterTextElementForGraphicRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalUnRegisterTextElementForGraphicRebuild != null)
            {
                foreach (Delegates.InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs toInvoke in
                         _beforeInternalUnRegisterTextElementForGraphicRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeInternalUnRegisterTextElementForGraphicRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterTextElementForGraphicRebuild != null)
            {
                foreach (Delegates.InternalUnRegisterTextElementForGraphicRebuild_AfterArgs toInvoke in
                         _afterInternalUnRegisterTextElementForGraphicRebuild.GetInvocationList())
                {
                    try
                    {
                        _afterInternalUnRegisterTextElementForGraphicRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInternalUnRegisterTextElementForLayoutRebuild()
        {
            if (!HookedList.Contains("InternalUnRegisterTextElementForLayoutRebuild"))
            {
                HookedList.Add("InternalUnRegisterTextElementForLayoutRebuild");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalUnRegisterTextElementForLayoutRebuild", true),
                    InternalUnRegisterTextElementForLayoutRebuild);
            }
        }

        internal static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs
            _beforeInternalUnRegisterTextElementForLayoutRebuild;

        internal static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_AfterArgs
            _afterInternalUnRegisterTextElementForLayoutRebuild;

        private static void InternalUnRegisterTextElementForLayoutRebuild(
            Action<TMPro.TMP_UpdateManager, TMPro.TMP_Text> orig, TMPro.TMP_UpdateManager self, TMPro.TMP_Text element)
        {
            Delegates.Params_InternalUnRegisterTextElementForLayoutRebuild @params = new()
            {
                self = self, element = element
            };
            if (_beforeInternalUnRegisterTextElementForLayoutRebuild != null)
            {
                foreach (Delegates.InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs toInvoke in
                         _beforeInternalUnRegisterTextElementForLayoutRebuild.GetInvocationList())
                {
                    try
                    {
                        _beforeInternalUnRegisterTextElementForLayoutRebuild?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            element = @params.element;
            orig(self, element);
            if (_afterInternalUnRegisterTextElementForLayoutRebuild != null)
            {
                foreach (Delegates.InternalUnRegisterTextElementForLayoutRebuild_AfterArgs toInvoke in
                         _afterInternalUnRegisterTextElementForLayoutRebuild.GetInvocationList())
                {
                    try
                    {
                        _afterInternalUnRegisterTextElementForLayoutRebuild.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_instance_BeforeArgs();

        public delegate TMPro.TMP_UpdateManager get_instance_AfterArgs(TMPro.TMP_UpdateManager ret);

        public delegate TMPro.TMP_UpdateManager get_instance_WithArgs(Func<TMPro.TMP_UpdateManager> orig);

        public sealed class Params_RegisterTextElementForLayoutRebuild
        {
            public TMPro.TMP_Text element;
        }

        public delegate void RegisterTextElementForLayoutRebuild_BeforeArgs(
            Params_RegisterTextElementForLayoutRebuild args);

        public delegate void RegisterTextElementForLayoutRebuild_AfterArgs(
            Params_RegisterTextElementForLayoutRebuild args);

        public delegate void RegisterTextElementForLayoutRebuild_WithArgs(Action<TMPro.TMP_Text> orig,
            TMPro.TMP_Text element);

        public sealed class Params_InternalRegisterTextElementForLayoutRebuild
        {
            public TMPro.TMP_UpdateManager self;
            public TMPro.TMP_Text element;
        }

        public delegate void InternalRegisterTextElementForLayoutRebuild_BeforeArgs(
            Params_InternalRegisterTextElementForLayoutRebuild args);

        public delegate bool InternalRegisterTextElementForLayoutRebuild_AfterArgs(
            Params_InternalRegisterTextElementForLayoutRebuild args, bool ret);

        public delegate bool InternalRegisterTextElementForLayoutRebuild_WithArgs(
            Func<TMPro.TMP_UpdateManager, TMPro.TMP_Text, bool> orig, TMPro.TMP_UpdateManager self,
            TMPro.TMP_Text element);

        public sealed class Params_RegisterTextElementForGraphicRebuild
        {
            public TMPro.TMP_Text element;
        }

        public delegate void RegisterTextElementForGraphicRebuild_BeforeArgs(
            Params_RegisterTextElementForGraphicRebuild args);

        public delegate void RegisterTextElementForGraphicRebuild_AfterArgs(
            Params_RegisterTextElementForGraphicRebuild args);

        public delegate void RegisterTextElementForGraphicRebuild_WithArgs(Action<TMPro.TMP_Text> orig,
            TMPro.TMP_Text element);

        public sealed class Params_InternalRegisterTextElementForGraphicRebuild
        {
            public TMPro.TMP_UpdateManager self;
            public TMPro.TMP_Text element;
        }

        public delegate void InternalRegisterTextElementForGraphicRebuild_BeforeArgs(
            Params_InternalRegisterTextElementForGraphicRebuild args);

        public delegate bool InternalRegisterTextElementForGraphicRebuild_AfterArgs(
            Params_InternalRegisterTextElementForGraphicRebuild args, bool ret);

        public delegate bool InternalRegisterTextElementForGraphicRebuild_WithArgs(
            Func<TMPro.TMP_UpdateManager, TMPro.TMP_Text, bool> orig, TMPro.TMP_UpdateManager self,
            TMPro.TMP_Text element);

        public sealed class Params_OnCameraPreRender
        {
            public TMPro.TMP_UpdateManager self;
            public UnityEngine.Camera cam;
        }

        public delegate void OnCameraPreRender_BeforeArgs(Params_OnCameraPreRender args);

        public delegate void OnCameraPreRender_AfterArgs(Params_OnCameraPreRender args);

        public delegate void OnCameraPreRender_WithArgs(Action<TMPro.TMP_UpdateManager, UnityEngine.Camera> orig,
            TMPro.TMP_UpdateManager self, UnityEngine.Camera cam);

        public sealed class Params_UnRegisterTextElementForRebuild
        {
            public TMPro.TMP_Text element;
        }

        public delegate void UnRegisterTextElementForRebuild_BeforeArgs(Params_UnRegisterTextElementForRebuild args);

        public delegate void UnRegisterTextElementForRebuild_AfterArgs(Params_UnRegisterTextElementForRebuild args);

        public delegate void UnRegisterTextElementForRebuild_WithArgs(Action<TMPro.TMP_Text> orig,
            TMPro.TMP_Text element);

        public sealed class Params_InternalUnRegisterTextElementForGraphicRebuild
        {
            public TMPro.TMP_UpdateManager self;
            public TMPro.TMP_Text element;
        }

        public delegate void InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs(
            Params_InternalUnRegisterTextElementForGraphicRebuild args);

        public delegate void InternalUnRegisterTextElementForGraphicRebuild_AfterArgs(
            Params_InternalUnRegisterTextElementForGraphicRebuild args);

        public delegate void InternalUnRegisterTextElementForGraphicRebuild_WithArgs(
            Action<TMPro.TMP_UpdateManager, TMPro.TMP_Text> orig, TMPro.TMP_UpdateManager self, TMPro.TMP_Text element);

        public sealed class Params_InternalUnRegisterTextElementForLayoutRebuild
        {
            public TMPro.TMP_UpdateManager self;
            public TMPro.TMP_Text element;
        }

        public delegate void InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs(
            Params_InternalUnRegisterTextElementForLayoutRebuild args);

        public delegate void InternalUnRegisterTextElementForLayoutRebuild_AfterArgs(
            Params_InternalUnRegisterTextElementForLayoutRebuild args);

        public delegate void InternalUnRegisterTextElementForLayoutRebuild_WithArgs(
            Action<TMPro.TMP_UpdateManager, TMPro.TMP_Text> orig, TMPro.TMP_UpdateManager self, TMPro.TMP_Text element);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.RegisterTextElementForLayoutRebuild_BeforeArgs RegisterTextElementForLayoutRebuild
        {
            add
            {
                HookHandler._beforeRegisterTextElementForLayoutRebuild += value;
                HookHandler.HookRegisterTextElementForLayoutRebuild();
            }
            remove => HookHandler._beforeRegisterTextElementForLayoutRebuild -= value;
        }

        public static event Delegates.InternalRegisterTextElementForLayoutRebuild_BeforeArgs
            InternalRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalRegisterTextElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterTextElementForGraphicRebuild_BeforeArgs
            RegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._beforeRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterTextElementForGraphicRebuild_BeforeArgs
            InternalRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.OnCameraPreRender_BeforeArgs OnCameraPreRender
        {
            add
            {
                HookHandler._beforeOnCameraPreRender += value;
                HookHandler.HookOnCameraPreRender();
            }
            remove => HookHandler._beforeOnCameraPreRender -= value;
        }

        public static event Delegates.UnRegisterTextElementForRebuild_BeforeArgs UnRegisterTextElementForRebuild
        {
            add
            {
                HookHandler._beforeUnRegisterTextElementForRebuild += value;
                HookHandler.HookUnRegisterTextElementForRebuild();
            }
            remove => HookHandler._beforeUnRegisterTextElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_BeforeArgs
            InternalUnRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_BeforeArgs
            InternalUnRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._beforeInternalUnRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._beforeInternalUnRegisterTextElementForLayoutRebuild -= value;
            }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.RegisterTextElementForLayoutRebuild_AfterArgs RegisterTextElementForLayoutRebuild
        {
            add
            {
                HookHandler._afterRegisterTextElementForLayoutRebuild += value;
                HookHandler.HookRegisterTextElementForLayoutRebuild();
            }
            remove => HookHandler._afterRegisterTextElementForLayoutRebuild -= value;
        }

        public static event Delegates.InternalRegisterTextElementForLayoutRebuild_AfterArgs
            InternalRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalRegisterTextElementForLayoutRebuild -= value;
            }

        public static event Delegates.RegisterTextElementForGraphicRebuild_AfterArgs
            RegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._afterRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalRegisterTextElementForGraphicRebuild_AfterArgs
            InternalRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.OnCameraPreRender_AfterArgs OnCameraPreRender
        {
            add
            {
                HookHandler._afterOnCameraPreRender += value;
                HookHandler.HookOnCameraPreRender();
            }
            remove => HookHandler._afterOnCameraPreRender -= value;
        }

        public static event Delegates.UnRegisterTextElementForRebuild_AfterArgs UnRegisterTextElementForRebuild
        {
            add
            {
                HookHandler._afterUnRegisterTextElementForRebuild += value;
                HookHandler.HookUnRegisterTextElementForRebuild();
            }
            remove => HookHandler._afterUnRegisterTextElementForRebuild -= value;
        }

        public static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_AfterArgs
            InternalUnRegisterTextElementForGraphicRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterTextElementForGraphicRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForGraphicRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterTextElementForGraphicRebuild -= value;
            }

        public static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_AfterArgs
            InternalUnRegisterTextElementForLayoutRebuild
            {
                add
                {
                    HookHandler._afterInternalUnRegisterTextElementForLayoutRebuild += value;
                    HookHandler.HookInternalUnRegisterTextElementForLayoutRebuild();
                }
                remove => HookHandler._afterInternalUnRegisterTextElementForLayoutRebuild -= value;
            }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "get_instance", false), value);
        }

        public static event Delegates.RegisterTextElementForLayoutRebuild_WithArgs RegisterTextElementForLayoutRebuild
        {
            add => HookEndpointManager.Add<Delegates.RegisterTextElementForLayoutRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "RegisterTextElementForLayoutRebuild",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.RegisterTextElementForLayoutRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "RegisterTextElementForLayoutRebuild",
                    false), value);
        }

        public static event Delegates.InternalRegisterTextElementForLayoutRebuild_WithArgs
            InternalRegisterTextElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterTextElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalRegisterTextElementForLayoutRebuild", true), value);
                remove => HookEndpointManager.Remove<Delegates.InternalRegisterTextElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalRegisterTextElementForLayoutRebuild", true), value);
            }

        public static event Delegates.RegisterTextElementForGraphicRebuild_WithArgs RegisterTextElementForGraphicRebuild
        {
            add => HookEndpointManager.Add<Delegates.RegisterTextElementForGraphicRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "RegisterTextElementForGraphicRebuild",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.RegisterTextElementForGraphicRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "RegisterTextElementForGraphicRebuild",
                    false), value);
        }

        public static event Delegates.InternalRegisterTextElementForGraphicRebuild_WithArgs
            InternalRegisterTextElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalRegisterTextElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalRegisterTextElementForGraphicRebuild", true), value);
                remove => HookEndpointManager.Remove<Delegates.InternalRegisterTextElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalRegisterTextElementForGraphicRebuild", true), value);
            }

        public static event Delegates.OnCameraPreRender_WithArgs OnCameraPreRender
        {
            add => HookEndpointManager.Add<Delegates.OnCameraPreRender_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "OnCameraPreRender", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnCameraPreRender_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "OnCameraPreRender", true), value);
        }

        public static event Delegates.UnRegisterTextElementForRebuild_WithArgs UnRegisterTextElementForRebuild
        {
            add => HookEndpointManager.Add<Delegates.UnRegisterTextElementForRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "UnRegisterTextElementForRebuild",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.UnRegisterTextElementForRebuild_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager), "UnRegisterTextElementForRebuild",
                    false), value);
        }

        public static event Delegates.InternalUnRegisterTextElementForGraphicRebuild_WithArgs
            InternalUnRegisterTextElementForGraphicRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterTextElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalUnRegisterTextElementForGraphicRebuild", true), value);
                remove => HookEndpointManager.Remove<Delegates.InternalUnRegisterTextElementForGraphicRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalUnRegisterTextElementForGraphicRebuild", true), value);
            }

        public static event Delegates.InternalUnRegisterTextElementForLayoutRebuild_WithArgs
            InternalUnRegisterTextElementForLayoutRebuild
            {
                add => HookEndpointManager.Add<Delegates.InternalUnRegisterTextElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalUnRegisterTextElementForLayoutRebuild", true), value);
                remove => HookEndpointManager.Remove<Delegates.InternalUnRegisterTextElementForLayoutRebuild_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_UpdateManager),
                        "InternalUnRegisterTextElementForLayoutRebuild", true), value);
            }
    }
}