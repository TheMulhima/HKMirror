using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PlayParticleEffects class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayParticleEffects
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookPlayParticleSystems()
{
if (!HookedList.Contains("PlayParticleSystems"))
{
HookedList.Add("PlayParticleSystems");
On.PlayParticleEffects.PlayParticleSystems += PlayParticleSystems;

}
}
internal static event Delegates.PlayParticleSystems_BeforeArgs _beforePlayParticleSystems;
internal static event Delegates.PlayParticleSystems_AfterArgs _afterPlayParticleSystems;
private static void PlayParticleSystems(On.PlayParticleEffects.orig_PlayParticleSystems orig,PlayParticleEffects self)
{
Delegates.Params_PlayParticleSystems @params = new() 
{
self = self
};
if (_beforePlayParticleSystems != null)
{
foreach (Delegates.PlayParticleSystems_BeforeArgs toInvoke in _beforePlayParticleSystems.GetInvocationList())
{
try
{
_beforePlayParticleSystems?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPlayParticleSystems != null)
{
foreach (Delegates.PlayParticleSystems_AfterArgs toInvoke in _afterPlayParticleSystems.GetInvocationList())
{
try
{
_afterPlayParticleSystems.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_PlayParticleSystems
{
public PlayParticleEffects self;
}
public delegate void PlayParticleSystems_BeforeArgs(Params_PlayParticleSystems args);
public delegate void PlayParticleSystems_AfterArgs(Params_PlayParticleSystems args);
public delegate void PlayParticleSystems_WithArgs (Action<PlayParticleEffects> orig, PlayParticleEffects self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.PlayParticleSystems_BeforeArgs PlayParticleSystems
{
add
{

HookHandler._beforePlayParticleSystems += value;
HookHandler.HookPlayParticleSystems();
}
remove => HookHandler._beforePlayParticleSystems -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.PlayParticleSystems_AfterArgs PlayParticleSystems
{
add
{

HookHandler._afterPlayParticleSystems += value;
HookHandler.HookPlayParticleSystems();
}
remove => HookHandler._afterPlayParticleSystems -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.PlayParticleEffects.hook_PlayParticleSystems PlayParticleSystems
{
add => On.PlayParticleEffects.PlayParticleSystems += value;
remove => On.PlayParticleEffects.PlayParticleSystems -= value;
}
}

}
