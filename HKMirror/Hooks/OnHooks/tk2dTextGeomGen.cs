namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dTextGeomGen class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dTextGeomGen
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookPostAlignTextData()
        {
            if (!HookedList.Contains("PostAlignTextData"))
            {
                HookedList.Add("PostAlignTextData");
                On.tk2dTextGeomGen.PostAlignTextData += PostAlignTextData;
            }
        }

        internal static event Delegates.PostAlignTextData_BeforeArgs _beforePostAlignTextData;
        internal static event Delegates.PostAlignTextData_AfterArgs _afterPostAlignTextData;

        private static void PostAlignTextData(On.tk2dTextGeomGen.orig_PostAlignTextData orig, Vector3[] pos, int offset,
            int targetStart, int targetEnd, float offsetX)
        {
            Delegates.Params_PostAlignTextData @params = new()
            {
                pos = pos, offset = offset, targetStart = targetStart, targetEnd = targetEnd, offsetX = offsetX
            };
            if (_beforePostAlignTextData != null)
                foreach (Delegates.PostAlignTextData_BeforeArgs toInvoke in
                         _beforePostAlignTextData.GetInvocationList())
                    try
                    {
                        _beforePostAlignTextData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pos = @params.pos;
            offset = @params.offset;
            targetStart = @params.targetStart;
            targetEnd = @params.targetEnd;
            offsetX = @params.offsetX;
            orig(pos, offset, targetStart, targetEnd, offsetX);
            if (_afterPostAlignTextData != null)
                foreach (Delegates.PostAlignTextData_AfterArgs toInvoke in _afterPostAlignTextData.GetInvocationList())
                    try
                    {
                        _afterPostAlignTextData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetFullHexColorComponent()
        {
            if (!HookedList.Contains("GetFullHexColorComponent"))
            {
                HookedList.Add("GetFullHexColorComponent");
                On.tk2dTextGeomGen.GetFullHexColorComponent += GetFullHexColorComponent;
            }
        }

        internal static event Delegates.GetFullHexColorComponent_BeforeArgs _beforeGetFullHexColorComponent;
        internal static event Delegates.GetFullHexColorComponent_AfterArgs _afterGetFullHexColorComponent;

        private static int GetFullHexColorComponent(On.tk2dTextGeomGen.orig_GetFullHexColorComponent orig, int c1,
            int c2)
        {
            Delegates.Params_GetFullHexColorComponent @params = new()
            {
                c1 = c1, c2 = c2
            };
            if (_beforeGetFullHexColorComponent != null)
                foreach (Delegates.GetFullHexColorComponent_BeforeArgs toInvoke in _beforeGetFullHexColorComponent
                             .GetInvocationList())
                    try
                    {
                        _beforeGetFullHexColorComponent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            c1 = @params.c1;
            c2 = @params.c2;
            var retVal = orig(c1, c2);
            if (_afterGetFullHexColorComponent != null)
                foreach (Delegates.GetFullHexColorComponent_AfterArgs toInvoke in _afterGetFullHexColorComponent
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetFullHexColorComponent.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetCompactHexColorComponent()
        {
            if (!HookedList.Contains("GetCompactHexColorComponent"))
            {
                HookedList.Add("GetCompactHexColorComponent");
                On.tk2dTextGeomGen.GetCompactHexColorComponent += GetCompactHexColorComponent;
            }
        }

        internal static event Delegates.GetCompactHexColorComponent_BeforeArgs _beforeGetCompactHexColorComponent;
        internal static event Delegates.GetCompactHexColorComponent_AfterArgs _afterGetCompactHexColorComponent;

        private static int GetCompactHexColorComponent(On.tk2dTextGeomGen.orig_GetCompactHexColorComponent orig, int c)
        {
            Delegates.Params_GetCompactHexColorComponent @params = new()
            {
                c = c
            };
            if (_beforeGetCompactHexColorComponent != null)
                foreach (Delegates.GetCompactHexColorComponent_BeforeArgs toInvoke in _beforeGetCompactHexColorComponent
                             .GetInvocationList())
                    try
                    {
                        _beforeGetCompactHexColorComponent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            c = @params.c;
            var retVal = orig(c);
            if (_afterGetCompactHexColorComponent != null)
                foreach (Delegates.GetCompactHexColorComponent_AfterArgs toInvoke in _afterGetCompactHexColorComponent
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetCompactHexColorComponent.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetStyleHexColor()
        {
            if (!HookedList.Contains("GetStyleHexColor"))
            {
                HookedList.Add("GetStyleHexColor");
                On.tk2dTextGeomGen.GetStyleHexColor += GetStyleHexColor;
            }
        }

        internal static event Delegates.GetStyleHexColor_BeforeArgs _beforeGetStyleHexColor;
        internal static event Delegates.GetStyleHexColor_AfterArgs _afterGetStyleHexColor;

        private static int GetStyleHexColor(On.tk2dTextGeomGen.orig_GetStyleHexColor orig, string str, bool fullHex,
            ref Color32 color)
        {
            Delegates.Params_GetStyleHexColor @params = new()
            {
                str = str, fullHex = fullHex, color = color
            };
            if (_beforeGetStyleHexColor != null)
                foreach (Delegates.GetStyleHexColor_BeforeArgs toInvoke in _beforeGetStyleHexColor.GetInvocationList())
                    try
                    {
                        _beforeGetStyleHexColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            str = @params.str;
            fullHex = @params.fullHex;
            color = @params.color;
            var retVal = orig(str, fullHex, ref color);
            if (_afterGetStyleHexColor != null)
                foreach (Delegates.GetStyleHexColor_AfterArgs toInvoke in _afterGetStyleHexColor.GetInvocationList())
                    try
                    {
                        retVal = _afterGetStyleHexColor.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetColorsFromStyleCommand()
        {
            if (!HookedList.Contains("SetColorsFromStyleCommand"))
            {
                HookedList.Add("SetColorsFromStyleCommand");
                On.tk2dTextGeomGen.SetColorsFromStyleCommand += SetColorsFromStyleCommand;
            }
        }

        internal static event Delegates.SetColorsFromStyleCommand_BeforeArgs _beforeSetColorsFromStyleCommand;
        internal static event Delegates.SetColorsFromStyleCommand_AfterArgs _afterSetColorsFromStyleCommand;

        private static int SetColorsFromStyleCommand(On.tk2dTextGeomGen.orig_SetColorsFromStyleCommand orig,
            string args, bool twoColors, bool fullHex)
        {
            Delegates.Params_SetColorsFromStyleCommand @params = new()
            {
                args = args, twoColors = twoColors, fullHex = fullHex
            };
            if (_beforeSetColorsFromStyleCommand != null)
                foreach (Delegates.SetColorsFromStyleCommand_BeforeArgs toInvoke in _beforeSetColorsFromStyleCommand
                             .GetInvocationList())
                    try
                    {
                        _beforeSetColorsFromStyleCommand?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            args = @params.args;
            twoColors = @params.twoColors;
            fullHex = @params.fullHex;
            var retVal = orig(args, twoColors, fullHex);
            if (_afterSetColorsFromStyleCommand != null)
                foreach (Delegates.SetColorsFromStyleCommand_AfterArgs toInvoke in _afterSetColorsFromStyleCommand
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterSetColorsFromStyleCommand.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetGradientTexUFromStyleCommand()
        {
            if (!HookedList.Contains("SetGradientTexUFromStyleCommand"))
            {
                HookedList.Add("SetGradientTexUFromStyleCommand");
                On.tk2dTextGeomGen.SetGradientTexUFromStyleCommand += SetGradientTexUFromStyleCommand;
            }
        }

        internal static event Delegates.SetGradientTexUFromStyleCommand_BeforeArgs
            _beforeSetGradientTexUFromStyleCommand;

        internal static event Delegates.SetGradientTexUFromStyleCommand_AfterArgs _afterSetGradientTexUFromStyleCommand;

        private static void SetGradientTexUFromStyleCommand(
            On.tk2dTextGeomGen.orig_SetGradientTexUFromStyleCommand orig, int arg)
        {
            Delegates.Params_SetGradientTexUFromStyleCommand @params = new()
            {
                arg = arg
            };
            if (_beforeSetGradientTexUFromStyleCommand != null)
                foreach (Delegates.SetGradientTexUFromStyleCommand_BeforeArgs toInvoke in
                         _beforeSetGradientTexUFromStyleCommand.GetInvocationList())
                    try
                    {
                        _beforeSetGradientTexUFromStyleCommand?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            arg = @params.arg;
            orig(arg);
            if (_afterSetGradientTexUFromStyleCommand != null)
                foreach (Delegates.SetGradientTexUFromStyleCommand_AfterArgs toInvoke in
                         _afterSetGradientTexUFromStyleCommand.GetInvocationList())
                    try
                    {
                        _afterSetGradientTexUFromStyleCommand.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHandleStyleCommand()
        {
            if (!HookedList.Contains("HandleStyleCommand"))
            {
                HookedList.Add("HandleStyleCommand");
                On.tk2dTextGeomGen.HandleStyleCommand += HandleStyleCommand;
            }
        }

        internal static event Delegates.HandleStyleCommand_BeforeArgs _beforeHandleStyleCommand;
        internal static event Delegates.HandleStyleCommand_AfterArgs _afterHandleStyleCommand;

        private static int HandleStyleCommand(On.tk2dTextGeomGen.orig_HandleStyleCommand orig, string cmd)
        {
            Delegates.Params_HandleStyleCommand @params = new()
            {
                cmd = cmd
            };
            if (_beforeHandleStyleCommand != null)
                foreach (Delegates.HandleStyleCommand_BeforeArgs toInvoke in
                         _beforeHandleStyleCommand.GetInvocationList())
                    try
                    {
                        _beforeHandleStyleCommand?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            cmd = @params.cmd;
            var retVal = orig(cmd);
            if (_afterHandleStyleCommand != null)
                foreach (Delegates.HandleStyleCommand_AfterArgs toInvoke in
                         _afterHandleStyleCommand.GetInvocationList())
                    try
                    {
                        retVal = _afterHandleStyleCommand.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate int GetCompactHexColorComponent_AfterArgs(Params_GetCompactHexColorComponent args, int ret);

        public delegate void GetCompactHexColorComponent_BeforeArgs(Params_GetCompactHexColorComponent args);

        public delegate int GetCompactHexColorComponent_WithArgs(Func<int, int> orig, int c);

        public delegate int GetFullHexColorComponent_AfterArgs(Params_GetFullHexColorComponent args, int ret);

        public delegate void GetFullHexColorComponent_BeforeArgs(Params_GetFullHexColorComponent args);

        public delegate int GetFullHexColorComponent_WithArgs(Func<int, int, int> orig, int c1, int c2);

        public delegate int GetStyleHexColor_AfterArgs(Params_GetStyleHexColor args, int ret);

        public delegate void GetStyleHexColor_BeforeArgs(Params_GetStyleHexColor args);

        public delegate int GetStyleHexColor_WithArgs(Func<string, bool, Color32, int> orig, string str, bool fullHex,
            ref Color32 color);

        public delegate int HandleStyleCommand_AfterArgs(Params_HandleStyleCommand args, int ret);

        public delegate void HandleStyleCommand_BeforeArgs(Params_HandleStyleCommand args);

        public delegate int HandleStyleCommand_WithArgs(Func<string, int> orig, string cmd);

        public delegate void PostAlignTextData_AfterArgs(Params_PostAlignTextData args);

        public delegate void PostAlignTextData_BeforeArgs(Params_PostAlignTextData args);

        public delegate void PostAlignTextData_WithArgs(Action<Vector3[], int, int, int, float> orig, Vector3[] pos,
            int offset, int targetStart, int targetEnd, float offsetX);

        public delegate int SetColorsFromStyleCommand_AfterArgs(Params_SetColorsFromStyleCommand args, int ret);

        public delegate void SetColorsFromStyleCommand_BeforeArgs(Params_SetColorsFromStyleCommand args);

        public delegate int SetColorsFromStyleCommand_WithArgs(Func<string, bool, bool, int> orig, string args,
            bool twoColors, bool fullHex);

        public delegate void SetGradientTexUFromStyleCommand_AfterArgs(Params_SetGradientTexUFromStyleCommand args);

        public delegate void SetGradientTexUFromStyleCommand_BeforeArgs(Params_SetGradientTexUFromStyleCommand args);

        public delegate void SetGradientTexUFromStyleCommand_WithArgs(Action<int> orig, int arg);

        public sealed class Params_PostAlignTextData
        {
            public int offset;
            public float offsetX;
            public Vector3[] pos;
            public int targetEnd;
            public int targetStart;
        }

        public sealed class Params_GetFullHexColorComponent
        {
            public int c1;
            public int c2;
        }

        public sealed class Params_GetCompactHexColorComponent
        {
            public int c;
        }

        public sealed class Params_GetStyleHexColor
        {
            public Color32 color;
            public bool fullHex;
            public string str;
        }

        public sealed class Params_SetColorsFromStyleCommand
        {
            public string args;
            public bool fullHex;
            public bool twoColors;
        }

        public sealed class Params_SetGradientTexUFromStyleCommand
        {
            public int arg;
        }

        public sealed class Params_HandleStyleCommand
        {
            public string cmd;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.PostAlignTextData_BeforeArgs PostAlignTextData
        {
            add
            {
                HookHandler._beforePostAlignTextData += value;
                HookHandler.HookPostAlignTextData();
            }
            remove => HookHandler._beforePostAlignTextData -= value;
        }

        public static event Delegates.GetFullHexColorComponent_BeforeArgs GetFullHexColorComponent
        {
            add
            {
                HookHandler._beforeGetFullHexColorComponent += value;
                HookHandler.HookGetFullHexColorComponent();
            }
            remove => HookHandler._beforeGetFullHexColorComponent -= value;
        }

        public static event Delegates.GetCompactHexColorComponent_BeforeArgs GetCompactHexColorComponent
        {
            add
            {
                HookHandler._beforeGetCompactHexColorComponent += value;
                HookHandler.HookGetCompactHexColorComponent();
            }
            remove => HookHandler._beforeGetCompactHexColorComponent -= value;
        }

        public static event Delegates.GetStyleHexColor_BeforeArgs GetStyleHexColor
        {
            add
            {
                HookHandler._beforeGetStyleHexColor += value;
                HookHandler.HookGetStyleHexColor();
            }
            remove => HookHandler._beforeGetStyleHexColor -= value;
        }

        public static event Delegates.SetColorsFromStyleCommand_BeforeArgs SetColorsFromStyleCommand
        {
            add
            {
                HookHandler._beforeSetColorsFromStyleCommand += value;
                HookHandler.HookSetColorsFromStyleCommand();
            }
            remove => HookHandler._beforeSetColorsFromStyleCommand -= value;
        }

        public static event Delegates.SetGradientTexUFromStyleCommand_BeforeArgs SetGradientTexUFromStyleCommand
        {
            add
            {
                HookHandler._beforeSetGradientTexUFromStyleCommand += value;
                HookHandler.HookSetGradientTexUFromStyleCommand();
            }
            remove => HookHandler._beforeSetGradientTexUFromStyleCommand -= value;
        }

        public static event Delegates.HandleStyleCommand_BeforeArgs HandleStyleCommand
        {
            add
            {
                HookHandler._beforeHandleStyleCommand += value;
                HookHandler.HookHandleStyleCommand();
            }
            remove => HookHandler._beforeHandleStyleCommand -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.PostAlignTextData_AfterArgs PostAlignTextData
        {
            add
            {
                HookHandler._afterPostAlignTextData += value;
                HookHandler.HookPostAlignTextData();
            }
            remove => HookHandler._afterPostAlignTextData -= value;
        }

        public static event Delegates.GetFullHexColorComponent_AfterArgs GetFullHexColorComponent
        {
            add
            {
                HookHandler._afterGetFullHexColorComponent += value;
                HookHandler.HookGetFullHexColorComponent();
            }
            remove => HookHandler._afterGetFullHexColorComponent -= value;
        }

        public static event Delegates.GetCompactHexColorComponent_AfterArgs GetCompactHexColorComponent
        {
            add
            {
                HookHandler._afterGetCompactHexColorComponent += value;
                HookHandler.HookGetCompactHexColorComponent();
            }
            remove => HookHandler._afterGetCompactHexColorComponent -= value;
        }

        public static event Delegates.GetStyleHexColor_AfterArgs GetStyleHexColor
        {
            add
            {
                HookHandler._afterGetStyleHexColor += value;
                HookHandler.HookGetStyleHexColor();
            }
            remove => HookHandler._afterGetStyleHexColor -= value;
        }

        public static event Delegates.SetColorsFromStyleCommand_AfterArgs SetColorsFromStyleCommand
        {
            add
            {
                HookHandler._afterSetColorsFromStyleCommand += value;
                HookHandler.HookSetColorsFromStyleCommand();
            }
            remove => HookHandler._afterSetColorsFromStyleCommand -= value;
        }

        public static event Delegates.SetGradientTexUFromStyleCommand_AfterArgs SetGradientTexUFromStyleCommand
        {
            add
            {
                HookHandler._afterSetGradientTexUFromStyleCommand += value;
                HookHandler.HookSetGradientTexUFromStyleCommand();
            }
            remove => HookHandler._afterSetGradientTexUFromStyleCommand -= value;
        }

        public static event Delegates.HandleStyleCommand_AfterArgs HandleStyleCommand
        {
            add
            {
                HookHandler._afterHandleStyleCommand += value;
                HookHandler.HookHandleStyleCommand();
            }
            remove => HookHandler._afterHandleStyleCommand -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dTextGeomGen.hook_PostAlignTextData PostAlignTextData
        {
            add => On.tk2dTextGeomGen.PostAlignTextData += value;
            remove => On.tk2dTextGeomGen.PostAlignTextData -= value;
        }

        public static event On.tk2dTextGeomGen.hook_GetFullHexColorComponent GetFullHexColorComponent
        {
            add => On.tk2dTextGeomGen.GetFullHexColorComponent += value;
            remove => On.tk2dTextGeomGen.GetFullHexColorComponent -= value;
        }

        public static event On.tk2dTextGeomGen.hook_GetCompactHexColorComponent GetCompactHexColorComponent
        {
            add => On.tk2dTextGeomGen.GetCompactHexColorComponent += value;
            remove => On.tk2dTextGeomGen.GetCompactHexColorComponent -= value;
        }

        public static event On.tk2dTextGeomGen.hook_GetStyleHexColor GetStyleHexColor
        {
            add => On.tk2dTextGeomGen.GetStyleHexColor += value;
            remove => On.tk2dTextGeomGen.GetStyleHexColor -= value;
        }

        public static event On.tk2dTextGeomGen.hook_SetColorsFromStyleCommand SetColorsFromStyleCommand
        {
            add => On.tk2dTextGeomGen.SetColorsFromStyleCommand += value;
            remove => On.tk2dTextGeomGen.SetColorsFromStyleCommand -= value;
        }

        public static event On.tk2dTextGeomGen.hook_SetGradientTexUFromStyleCommand SetGradientTexUFromStyleCommand
        {
            add => On.tk2dTextGeomGen.SetGradientTexUFromStyleCommand += value;
            remove => On.tk2dTextGeomGen.SetGradientTexUFromStyleCommand -= value;
        }

        public static event On.tk2dTextGeomGen.hook_HandleStyleCommand HandleStyleCommand
        {
            add => On.tk2dTextGeomGen.HandleStyleCommand += value;
            remove => On.tk2dTextGeomGen.HandleStyleCommand -= value;
        }
    }
}