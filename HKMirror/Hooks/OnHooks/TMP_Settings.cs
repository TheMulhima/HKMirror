using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_Settings class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_Settings
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_enableWordWrapping()
        {
            if (!HookedList.Contains("get_enableWordWrapping"))
            {
                HookedList.Add("get_enableWordWrapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableWordWrapping", false),
                    get_enableWordWrapping);
            }
        }

        internal static event Delegates.get_enableWordWrapping_BeforeArgs _beforeget_enableWordWrapping;
        internal static event Delegates.get_enableWordWrapping_AfterArgs _afterget_enableWordWrapping;

        private static bool get_enableWordWrapping(Func<bool> orig)
        {
            if (_beforeget_enableWordWrapping != null)
                foreach (Delegates.get_enableWordWrapping_BeforeArgs toInvoke in _beforeget_enableWordWrapping
                             .GetInvocationList())
                    try
                    {
                        _beforeget_enableWordWrapping?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_enableWordWrapping != null)
                foreach (Delegates.get_enableWordWrapping_AfterArgs toInvoke in _afterget_enableWordWrapping
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_enableWordWrapping.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_enableKerning()
        {
            if (!HookedList.Contains("get_enableKerning"))
            {
                HookedList.Add("get_enableKerning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableKerning", false),
                    get_enableKerning);
            }
        }

        internal static event Delegates.get_enableKerning_BeforeArgs _beforeget_enableKerning;
        internal static event Delegates.get_enableKerning_AfterArgs _afterget_enableKerning;

        private static bool get_enableKerning(Func<bool> orig)
        {
            if (_beforeget_enableKerning != null)
                foreach (Delegates.get_enableKerning_BeforeArgs toInvoke in
                         _beforeget_enableKerning.GetInvocationList())
                    try
                    {
                        _beforeget_enableKerning?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_enableKerning != null)
                foreach (Delegates.get_enableKerning_AfterArgs toInvoke in _afterget_enableKerning.GetInvocationList())
                    try
                    {
                        retVal = _afterget_enableKerning.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_enableExtraPadding()
        {
            if (!HookedList.Contains("get_enableExtraPadding"))
            {
                HookedList.Add("get_enableExtraPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableExtraPadding", false),
                    get_enableExtraPadding);
            }
        }

        internal static event Delegates.get_enableExtraPadding_BeforeArgs _beforeget_enableExtraPadding;
        internal static event Delegates.get_enableExtraPadding_AfterArgs _afterget_enableExtraPadding;

        private static bool get_enableExtraPadding(Func<bool> orig)
        {
            if (_beforeget_enableExtraPadding != null)
                foreach (Delegates.get_enableExtraPadding_BeforeArgs toInvoke in _beforeget_enableExtraPadding
                             .GetInvocationList())
                    try
                    {
                        _beforeget_enableExtraPadding?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_enableExtraPadding != null)
                foreach (Delegates.get_enableExtraPadding_AfterArgs toInvoke in _afterget_enableExtraPadding
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_enableExtraPadding.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_enableTintAllSprites()
        {
            if (!HookedList.Contains("get_enableTintAllSprites"))
            {
                HookedList.Add("get_enableTintAllSprites");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableTintAllSprites", false),
                    get_enableTintAllSprites);
            }
        }

        internal static event Delegates.get_enableTintAllSprites_BeforeArgs _beforeget_enableTintAllSprites;
        internal static event Delegates.get_enableTintAllSprites_AfterArgs _afterget_enableTintAllSprites;

        private static bool get_enableTintAllSprites(Func<bool> orig)
        {
            if (_beforeget_enableTintAllSprites != null)
                foreach (Delegates.get_enableTintAllSprites_BeforeArgs toInvoke in _beforeget_enableTintAllSprites
                             .GetInvocationList())
                    try
                    {
                        _beforeget_enableTintAllSprites?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_enableTintAllSprites != null)
                foreach (Delegates.get_enableTintAllSprites_AfterArgs toInvoke in _afterget_enableTintAllSprites
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_enableTintAllSprites.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_enableParseEscapeCharacters()
        {
            if (!HookedList.Contains("get_enableParseEscapeCharacters"))
            {
                HookedList.Add("get_enableParseEscapeCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableParseEscapeCharacters", false),
                    get_enableParseEscapeCharacters);
            }
        }

        internal static event Delegates.get_enableParseEscapeCharacters_BeforeArgs
            _beforeget_enableParseEscapeCharacters;

        internal static event Delegates.get_enableParseEscapeCharacters_AfterArgs _afterget_enableParseEscapeCharacters;

        private static bool get_enableParseEscapeCharacters(Func<bool> orig)
        {
            if (_beforeget_enableParseEscapeCharacters != null)
                foreach (Delegates.get_enableParseEscapeCharacters_BeforeArgs toInvoke in
                         _beforeget_enableParseEscapeCharacters.GetInvocationList())
                    try
                    {
                        _beforeget_enableParseEscapeCharacters?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_enableParseEscapeCharacters != null)
                foreach (Delegates.get_enableParseEscapeCharacters_AfterArgs toInvoke in
                         _afterget_enableParseEscapeCharacters.GetInvocationList())
                    try
                    {
                        retVal = _afterget_enableParseEscapeCharacters.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_missingGlyphCharacter()
        {
            if (!HookedList.Contains("get_missingGlyphCharacter"))
            {
                HookedList.Add("get_missingGlyphCharacter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_missingGlyphCharacter", false),
                    get_missingGlyphCharacter);
            }
        }

        internal static event Delegates.get_missingGlyphCharacter_BeforeArgs _beforeget_missingGlyphCharacter;
        internal static event Delegates.get_missingGlyphCharacter_AfterArgs _afterget_missingGlyphCharacter;

        private static int get_missingGlyphCharacter(Func<int> orig)
        {
            if (_beforeget_missingGlyphCharacter != null)
                foreach (Delegates.get_missingGlyphCharacter_BeforeArgs toInvoke in _beforeget_missingGlyphCharacter
                             .GetInvocationList())
                    try
                    {
                        _beforeget_missingGlyphCharacter?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_missingGlyphCharacter != null)
                foreach (Delegates.get_missingGlyphCharacter_AfterArgs toInvoke in _afterget_missingGlyphCharacter
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_missingGlyphCharacter.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_warningsDisabled()
        {
            if (!HookedList.Contains("get_warningsDisabled"))
            {
                HookedList.Add("get_warningsDisabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_warningsDisabled", false),
                    get_warningsDisabled);
            }
        }

        internal static event Delegates.get_warningsDisabled_BeforeArgs _beforeget_warningsDisabled;
        internal static event Delegates.get_warningsDisabled_AfterArgs _afterget_warningsDisabled;

        private static bool get_warningsDisabled(Func<bool> orig)
        {
            if (_beforeget_warningsDisabled != null)
                foreach (Delegates.get_warningsDisabled_BeforeArgs toInvoke in _beforeget_warningsDisabled
                             .GetInvocationList())
                    try
                    {
                        _beforeget_warningsDisabled?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_warningsDisabled != null)
                foreach (Delegates.get_warningsDisabled_AfterArgs toInvoke in _afterget_warningsDisabled
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_warningsDisabled.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultFontAsset()
        {
            if (!HookedList.Contains("get_defaultFontAsset"))
            {
                HookedList.Add("get_defaultFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontAsset", false),
                    get_defaultFontAsset);
            }
        }

        internal static event Delegates.get_defaultFontAsset_BeforeArgs _beforeget_defaultFontAsset;
        internal static event Delegates.get_defaultFontAsset_AfterArgs _afterget_defaultFontAsset;

        private static TMP_FontAsset get_defaultFontAsset(Func<TMP_FontAsset> orig)
        {
            if (_beforeget_defaultFontAsset != null)
                foreach (Delegates.get_defaultFontAsset_BeforeArgs toInvoke in _beforeget_defaultFontAsset
                             .GetInvocationList())
                    try
                    {
                        _beforeget_defaultFontAsset?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultFontAsset != null)
                foreach (Delegates.get_defaultFontAsset_AfterArgs toInvoke in _afterget_defaultFontAsset
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultFontAsset.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultFontAssetPath()
        {
            if (!HookedList.Contains("get_defaultFontAssetPath"))
            {
                HookedList.Add("get_defaultFontAssetPath");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontAssetPath", false),
                    get_defaultFontAssetPath);
            }
        }

        internal static event Delegates.get_defaultFontAssetPath_BeforeArgs _beforeget_defaultFontAssetPath;
        internal static event Delegates.get_defaultFontAssetPath_AfterArgs _afterget_defaultFontAssetPath;

        private static string get_defaultFontAssetPath(Func<string> orig)
        {
            if (_beforeget_defaultFontAssetPath != null)
                foreach (Delegates.get_defaultFontAssetPath_BeforeArgs toInvoke in _beforeget_defaultFontAssetPath
                             .GetInvocationList())
                    try
                    {
                        _beforeget_defaultFontAssetPath?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultFontAssetPath != null)
                foreach (Delegates.get_defaultFontAssetPath_AfterArgs toInvoke in _afterget_defaultFontAssetPath
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultFontAssetPath.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultFontSize()
        {
            if (!HookedList.Contains("get_defaultFontSize"))
            {
                HookedList.Add("get_defaultFontSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontSize", false),
                    get_defaultFontSize);
            }
        }

        internal static event Delegates.get_defaultFontSize_BeforeArgs _beforeget_defaultFontSize;
        internal static event Delegates.get_defaultFontSize_AfterArgs _afterget_defaultFontSize;

        private static float get_defaultFontSize(Func<float> orig)
        {
            if (_beforeget_defaultFontSize != null)
                foreach (Delegates.get_defaultFontSize_BeforeArgs toInvoke in _beforeget_defaultFontSize
                             .GetInvocationList())
                    try
                    {
                        _beforeget_defaultFontSize?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultFontSize != null)
                foreach (Delegates.get_defaultFontSize_AfterArgs toInvoke in
                         _afterget_defaultFontSize.GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultFontSize.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultTextContainerWidth()
        {
            if (!HookedList.Contains("get_defaultTextContainerWidth"))
            {
                HookedList.Add("get_defaultTextContainerWidth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultTextContainerWidth", false),
                    get_defaultTextContainerWidth);
            }
        }

        internal static event Delegates.get_defaultTextContainerWidth_BeforeArgs _beforeget_defaultTextContainerWidth;
        internal static event Delegates.get_defaultTextContainerWidth_AfterArgs _afterget_defaultTextContainerWidth;

        private static float get_defaultTextContainerWidth(Func<float> orig)
        {
            if (_beforeget_defaultTextContainerWidth != null)
                foreach (Delegates.get_defaultTextContainerWidth_BeforeArgs toInvoke in
                         _beforeget_defaultTextContainerWidth.GetInvocationList())
                    try
                    {
                        _beforeget_defaultTextContainerWidth?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultTextContainerWidth != null)
                foreach (Delegates.get_defaultTextContainerWidth_AfterArgs toInvoke in
                         _afterget_defaultTextContainerWidth.GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultTextContainerWidth.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultTextContainerHeight()
        {
            if (!HookedList.Contains("get_defaultTextContainerHeight"))
            {
                HookedList.Add("get_defaultTextContainerHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultTextContainerHeight", false),
                    get_defaultTextContainerHeight);
            }
        }

        internal static event Delegates.get_defaultTextContainerHeight_BeforeArgs _beforeget_defaultTextContainerHeight;
        internal static event Delegates.get_defaultTextContainerHeight_AfterArgs _afterget_defaultTextContainerHeight;

        private static float get_defaultTextContainerHeight(Func<float> orig)
        {
            if (_beforeget_defaultTextContainerHeight != null)
                foreach (Delegates.get_defaultTextContainerHeight_BeforeArgs toInvoke in
                         _beforeget_defaultTextContainerHeight.GetInvocationList())
                    try
                    {
                        _beforeget_defaultTextContainerHeight?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultTextContainerHeight != null)
                foreach (Delegates.get_defaultTextContainerHeight_AfterArgs toInvoke in
                         _afterget_defaultTextContainerHeight.GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultTextContainerHeight.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_fallbackFontAssets()
        {
            if (!HookedList.Contains("get_fallbackFontAssets"))
            {
                HookedList.Add("get_fallbackFontAssets");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_fallbackFontAssets", false),
                    get_fallbackFontAssets);
            }
        }

        internal static event Delegates.get_fallbackFontAssets_BeforeArgs _beforeget_fallbackFontAssets;
        internal static event Delegates.get_fallbackFontAssets_AfterArgs _afterget_fallbackFontAssets;

        private static List<TMP_FontAsset> get_fallbackFontAssets(Func<List<TMP_FontAsset>> orig)
        {
            if (_beforeget_fallbackFontAssets != null)
                foreach (Delegates.get_fallbackFontAssets_BeforeArgs toInvoke in _beforeget_fallbackFontAssets
                             .GetInvocationList())
                    try
                    {
                        _beforeget_fallbackFontAssets?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_fallbackFontAssets != null)
                foreach (Delegates.get_fallbackFontAssets_AfterArgs toInvoke in _afterget_fallbackFontAssets
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_fallbackFontAssets.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_matchMaterialPreset()
        {
            if (!HookedList.Contains("get_matchMaterialPreset"))
            {
                HookedList.Add("get_matchMaterialPreset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_matchMaterialPreset", false),
                    get_matchMaterialPreset);
            }
        }

        internal static event Delegates.get_matchMaterialPreset_BeforeArgs _beforeget_matchMaterialPreset;
        internal static event Delegates.get_matchMaterialPreset_AfterArgs _afterget_matchMaterialPreset;

        private static bool get_matchMaterialPreset(Func<bool> orig)
        {
            if (_beforeget_matchMaterialPreset != null)
                foreach (Delegates.get_matchMaterialPreset_BeforeArgs toInvoke in _beforeget_matchMaterialPreset
                             .GetInvocationList())
                    try
                    {
                        _beforeget_matchMaterialPreset?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_matchMaterialPreset != null)
                foreach (Delegates.get_matchMaterialPreset_AfterArgs toInvoke in _afterget_matchMaterialPreset
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_matchMaterialPreset.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultSpriteAsset()
        {
            if (!HookedList.Contains("get_defaultSpriteAsset"))
            {
                HookedList.Add("get_defaultSpriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultSpriteAsset", false),
                    get_defaultSpriteAsset);
            }
        }

        internal static event Delegates.get_defaultSpriteAsset_BeforeArgs _beforeget_defaultSpriteAsset;
        internal static event Delegates.get_defaultSpriteAsset_AfterArgs _afterget_defaultSpriteAsset;

        private static TMP_SpriteAsset get_defaultSpriteAsset(Func<TMP_SpriteAsset> orig)
        {
            if (_beforeget_defaultSpriteAsset != null)
                foreach (Delegates.get_defaultSpriteAsset_BeforeArgs toInvoke in _beforeget_defaultSpriteAsset
                             .GetInvocationList())
                    try
                    {
                        _beforeget_defaultSpriteAsset?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultSpriteAsset != null)
                foreach (Delegates.get_defaultSpriteAsset_AfterArgs toInvoke in _afterget_defaultSpriteAsset
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultSpriteAsset.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultSpriteAssetPath()
        {
            if (!HookedList.Contains("get_defaultSpriteAssetPath"))
            {
                HookedList.Add("get_defaultSpriteAssetPath");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultSpriteAssetPath", false),
                    get_defaultSpriteAssetPath);
            }
        }

        internal static event Delegates.get_defaultSpriteAssetPath_BeforeArgs _beforeget_defaultSpriteAssetPath;
        internal static event Delegates.get_defaultSpriteAssetPath_AfterArgs _afterget_defaultSpriteAssetPath;

        private static string get_defaultSpriteAssetPath(Func<string> orig)
        {
            if (_beforeget_defaultSpriteAssetPath != null)
                foreach (Delegates.get_defaultSpriteAssetPath_BeforeArgs toInvoke in _beforeget_defaultSpriteAssetPath
                             .GetInvocationList())
                    try
                    {
                        _beforeget_defaultSpriteAssetPath?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultSpriteAssetPath != null)
                foreach (Delegates.get_defaultSpriteAssetPath_AfterArgs toInvoke in _afterget_defaultSpriteAssetPath
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultSpriteAssetPath.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_defaultStyleSheet()
        {
            if (!HookedList.Contains("get_defaultStyleSheet"))
            {
                HookedList.Add("get_defaultStyleSheet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultStyleSheet", false),
                    get_defaultStyleSheet);
            }
        }

        internal static event Delegates.get_defaultStyleSheet_BeforeArgs _beforeget_defaultStyleSheet;
        internal static event Delegates.get_defaultStyleSheet_AfterArgs _afterget_defaultStyleSheet;

        private static TMP_StyleSheet get_defaultStyleSheet(Func<TMP_StyleSheet> orig)
        {
            if (_beforeget_defaultStyleSheet != null)
                foreach (Delegates.get_defaultStyleSheet_BeforeArgs toInvoke in _beforeget_defaultStyleSheet
                             .GetInvocationList())
                    try
                    {
                        _beforeget_defaultStyleSheet?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_defaultStyleSheet != null)
                foreach (Delegates.get_defaultStyleSheet_AfterArgs toInvoke in _afterget_defaultStyleSheet
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_defaultStyleSheet.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_leadingCharacters()
        {
            if (!HookedList.Contains("get_leadingCharacters"))
            {
                HookedList.Add("get_leadingCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_leadingCharacters", false),
                    get_leadingCharacters);
            }
        }

        internal static event Delegates.get_leadingCharacters_BeforeArgs _beforeget_leadingCharacters;
        internal static event Delegates.get_leadingCharacters_AfterArgs _afterget_leadingCharacters;

        private static TextAsset get_leadingCharacters(Func<TextAsset> orig)
        {
            if (_beforeget_leadingCharacters != null)
                foreach (Delegates.get_leadingCharacters_BeforeArgs toInvoke in _beforeget_leadingCharacters
                             .GetInvocationList())
                    try
                    {
                        _beforeget_leadingCharacters?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_leadingCharacters != null)
                foreach (Delegates.get_leadingCharacters_AfterArgs toInvoke in _afterget_leadingCharacters
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_leadingCharacters.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_followingCharacters()
        {
            if (!HookedList.Contains("get_followingCharacters"))
            {
                HookedList.Add("get_followingCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_followingCharacters", false),
                    get_followingCharacters);
            }
        }

        internal static event Delegates.get_followingCharacters_BeforeArgs _beforeget_followingCharacters;
        internal static event Delegates.get_followingCharacters_AfterArgs _afterget_followingCharacters;

        private static TextAsset get_followingCharacters(Func<TextAsset> orig)
        {
            if (_beforeget_followingCharacters != null)
                foreach (Delegates.get_followingCharacters_BeforeArgs toInvoke in _beforeget_followingCharacters
                             .GetInvocationList())
                    try
                    {
                        _beforeget_followingCharacters?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_followingCharacters != null)
                foreach (Delegates.get_followingCharacters_AfterArgs toInvoke in _afterget_followingCharacters
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_followingCharacters.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static TMP_Settings get_instance(Func<TMP_Settings> orig)
        {
            if (_beforeget_instance != null)
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_instance != null)
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadDefaultSettings()
        {
            if (!HookedList.Contains("LoadDefaultSettings"))
            {
                HookedList.Add("LoadDefaultSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "LoadDefaultSettings", false),
                    LoadDefaultSettings);
            }
        }

        internal static event Delegates.LoadDefaultSettings_BeforeArgs _beforeLoadDefaultSettings;
        internal static event Delegates.LoadDefaultSettings_AfterArgs _afterLoadDefaultSettings;

        private static TMP_Settings LoadDefaultSettings(Func<TMP_Settings> orig)
        {
            if (_beforeLoadDefaultSettings != null)
                foreach (Delegates.LoadDefaultSettings_BeforeArgs toInvoke in _beforeLoadDefaultSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadDefaultSettings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterLoadDefaultSettings != null)
                foreach (Delegates.LoadDefaultSettings_AfterArgs toInvoke in
                         _afterLoadDefaultSettings.GetInvocationList())
                    try
                    {
                        retVal = _afterLoadDefaultSettings.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSettings()
        {
            if (!HookedList.Contains("GetSettings"))
            {
                HookedList.Add("GetSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetSettings", false), GetSettings);
            }
        }

        internal static event Delegates.GetSettings_BeforeArgs _beforeGetSettings;
        internal static event Delegates.GetSettings_AfterArgs _afterGetSettings;

        private static TMP_Settings GetSettings(Func<TMP_Settings> orig)
        {
            if (_beforeGetSettings != null)
                foreach (Delegates.GetSettings_BeforeArgs toInvoke in _beforeGetSettings.GetInvocationList())
                    try
                    {
                        _beforeGetSettings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetSettings != null)
                foreach (Delegates.GetSettings_AfterArgs toInvoke in _afterGetSettings.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSettings.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFontAsset()
        {
            if (!HookedList.Contains("GetFontAsset"))
            {
                HookedList.Add("GetFontAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetFontAsset", false), GetFontAsset);
            }
        }

        internal static event Delegates.GetFontAsset_BeforeArgs _beforeGetFontAsset;
        internal static event Delegates.GetFontAsset_AfterArgs _afterGetFontAsset;

        private static TMP_FontAsset GetFontAsset(Func<TMP_FontAsset> orig)
        {
            if (_beforeGetFontAsset != null)
                foreach (Delegates.GetFontAsset_BeforeArgs toInvoke in _beforeGetFontAsset.GetInvocationList())
                    try
                    {
                        _beforeGetFontAsset?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetFontAsset != null)
                foreach (Delegates.GetFontAsset_AfterArgs toInvoke in _afterGetFontAsset.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFontAsset.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSpriteAsset()
        {
            if (!HookedList.Contains("GetSpriteAsset"))
            {
                HookedList.Add("GetSpriteAsset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetSpriteAsset", false), GetSpriteAsset);
            }
        }

        internal static event Delegates.GetSpriteAsset_BeforeArgs _beforeGetSpriteAsset;
        internal static event Delegates.GetSpriteAsset_AfterArgs _afterGetSpriteAsset;

        private static TMP_SpriteAsset GetSpriteAsset(Func<TMP_SpriteAsset> orig)
        {
            if (_beforeGetSpriteAsset != null)
                foreach (Delegates.GetSpriteAsset_BeforeArgs toInvoke in _beforeGetSpriteAsset.GetInvocationList())
                    try
                    {
                        _beforeGetSpriteAsset?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetSpriteAsset != null)
                foreach (Delegates.GetSpriteAsset_AfterArgs toInvoke in _afterGetSpriteAsset.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSpriteAsset.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetStyleSheet()
        {
            if (!HookedList.Contains("GetStyleSheet"))
            {
                HookedList.Add("GetStyleSheet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetStyleSheet", false), GetStyleSheet);
            }
        }

        internal static event Delegates.GetStyleSheet_BeforeArgs _beforeGetStyleSheet;
        internal static event Delegates.GetStyleSheet_AfterArgs _afterGetStyleSheet;

        private static TMP_StyleSheet GetStyleSheet(Func<TMP_StyleSheet> orig)
        {
            if (_beforeGetStyleSheet != null)
                foreach (Delegates.GetStyleSheet_BeforeArgs toInvoke in _beforeGetStyleSheet.GetInvocationList())
                    try
                    {
                        _beforeGetStyleSheet?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetStyleSheet != null)
                foreach (Delegates.GetStyleSheet_AfterArgs toInvoke in _afterGetStyleSheet.GetInvocationList())
                    try
                    {
                        retVal = _afterGetStyleSheet.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadLinebreakingRules()
        {
            if (!HookedList.Contains("LoadLinebreakingRules"))
            {
                HookedList.Add("LoadLinebreakingRules");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "LoadLinebreakingRules", false),
                    LoadLinebreakingRules);
            }
        }

        internal static event Delegates.LoadLinebreakingRules_BeforeArgs _beforeLoadLinebreakingRules;
        internal static event Delegates.LoadLinebreakingRules_AfterArgs _afterLoadLinebreakingRules;

        private static void LoadLinebreakingRules(Action orig)
        {
            if (_beforeLoadLinebreakingRules != null)
                foreach (Delegates.LoadLinebreakingRules_BeforeArgs toInvoke in _beforeLoadLinebreakingRules
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadLinebreakingRules?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterLoadLinebreakingRules != null)
                foreach (Delegates.LoadLinebreakingRules_AfterArgs toInvoke in _afterLoadLinebreakingRules
                             .GetInvocationList())
                    try
                    {
                        _afterLoadLinebreakingRules.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetCharacters()
        {
            if (!HookedList.Contains("GetCharacters"))
            {
                HookedList.Add("GetCharacters");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetCharacters", false), GetCharacters);
            }
        }

        internal static event Delegates.GetCharacters_BeforeArgs _beforeGetCharacters;
        internal static event Delegates.GetCharacters_AfterArgs _afterGetCharacters;

        private static Dictionary<int, char> GetCharacters(Func<TextAsset, Dictionary<int, char>> orig, TextAsset file)
        {
            Delegates.Params_GetCharacters @params = new()
            {
                file = file
            };
            if (_beforeGetCharacters != null)
                foreach (Delegates.GetCharacters_BeforeArgs toInvoke in _beforeGetCharacters.GetInvocationList())
                    try
                    {
                        _beforeGetCharacters?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            file = @params.file;
            var retVal = orig(file);
            if (_afterGetCharacters != null)
                foreach (Delegates.GetCharacters_AfterArgs toInvoke in _afterGetCharacters.GetInvocationList())
                    try
                    {
                        retVal = _afterGetCharacters.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate TMP_FontAsset get_defaultFontAsset_AfterArgs(TMP_FontAsset ret);

        public delegate void get_defaultFontAsset_BeforeArgs();

        public delegate TMP_FontAsset get_defaultFontAsset_WithArgs(Func<TMP_FontAsset> orig);

        public delegate string get_defaultFontAssetPath_AfterArgs(string ret);

        public delegate void get_defaultFontAssetPath_BeforeArgs();

        public delegate string get_defaultFontAssetPath_WithArgs(Func<string> orig);

        public delegate float get_defaultFontSize_AfterArgs(float ret);

        public delegate void get_defaultFontSize_BeforeArgs();

        public delegate float get_defaultFontSize_WithArgs(Func<float> orig);

        public delegate TMP_SpriteAsset get_defaultSpriteAsset_AfterArgs(TMP_SpriteAsset ret);

        public delegate void get_defaultSpriteAsset_BeforeArgs();

        public delegate TMP_SpriteAsset get_defaultSpriteAsset_WithArgs(Func<TMP_SpriteAsset> orig);

        public delegate string get_defaultSpriteAssetPath_AfterArgs(string ret);

        public delegate void get_defaultSpriteAssetPath_BeforeArgs();

        public delegate string get_defaultSpriteAssetPath_WithArgs(Func<string> orig);

        public delegate TMP_StyleSheet get_defaultStyleSheet_AfterArgs(TMP_StyleSheet ret);

        public delegate void get_defaultStyleSheet_BeforeArgs();

        public delegate TMP_StyleSheet get_defaultStyleSheet_WithArgs(Func<TMP_StyleSheet> orig);

        public delegate float get_defaultTextContainerHeight_AfterArgs(float ret);

        public delegate void get_defaultTextContainerHeight_BeforeArgs();

        public delegate float get_defaultTextContainerHeight_WithArgs(Func<float> orig);

        public delegate float get_defaultTextContainerWidth_AfterArgs(float ret);

        public delegate void get_defaultTextContainerWidth_BeforeArgs();

        public delegate float get_defaultTextContainerWidth_WithArgs(Func<float> orig);

        public delegate bool get_enableExtraPadding_AfterArgs(bool ret);

        public delegate void get_enableExtraPadding_BeforeArgs();

        public delegate bool get_enableExtraPadding_WithArgs(Func<bool> orig);

        public delegate bool get_enableKerning_AfterArgs(bool ret);

        public delegate void get_enableKerning_BeforeArgs();

        public delegate bool get_enableKerning_WithArgs(Func<bool> orig);

        public delegate bool get_enableParseEscapeCharacters_AfterArgs(bool ret);

        public delegate void get_enableParseEscapeCharacters_BeforeArgs();

        public delegate bool get_enableParseEscapeCharacters_WithArgs(Func<bool> orig);

        public delegate bool get_enableTintAllSprites_AfterArgs(bool ret);

        public delegate void get_enableTintAllSprites_BeforeArgs();

        public delegate bool get_enableTintAllSprites_WithArgs(Func<bool> orig);

        public delegate bool get_enableWordWrapping_AfterArgs(bool ret);

        public delegate void get_enableWordWrapping_BeforeArgs();

        public delegate bool get_enableWordWrapping_WithArgs(Func<bool> orig);

        public delegate List<TMP_FontAsset> get_fallbackFontAssets_AfterArgs(List<TMP_FontAsset> ret);

        public delegate void get_fallbackFontAssets_BeforeArgs();

        public delegate List<TMP_FontAsset> get_fallbackFontAssets_WithArgs(Func<List<TMP_FontAsset>> orig);

        public delegate TextAsset get_followingCharacters_AfterArgs(TextAsset ret);

        public delegate void get_followingCharacters_BeforeArgs();

        public delegate TextAsset get_followingCharacters_WithArgs(Func<TextAsset> orig);

        public delegate TMP_Settings get_instance_AfterArgs(TMP_Settings ret);

        public delegate void get_instance_BeforeArgs();

        public delegate TMP_Settings get_instance_WithArgs(Func<TMP_Settings> orig);

        public delegate TextAsset get_leadingCharacters_AfterArgs(TextAsset ret);

        public delegate void get_leadingCharacters_BeforeArgs();

        public delegate TextAsset get_leadingCharacters_WithArgs(Func<TextAsset> orig);

        public delegate bool get_matchMaterialPreset_AfterArgs(bool ret);

        public delegate void get_matchMaterialPreset_BeforeArgs();

        public delegate bool get_matchMaterialPreset_WithArgs(Func<bool> orig);

        public delegate int get_missingGlyphCharacter_AfterArgs(int ret);

        public delegate void get_missingGlyphCharacter_BeforeArgs();

        public delegate int get_missingGlyphCharacter_WithArgs(Func<int> orig);

        public delegate bool get_warningsDisabled_AfterArgs(bool ret);

        public delegate void get_warningsDisabled_BeforeArgs();

        public delegate bool get_warningsDisabled_WithArgs(Func<bool> orig);

        public delegate Dictionary<int, char> GetCharacters_AfterArgs(Params_GetCharacters args,
            Dictionary<int, char> ret);

        public delegate void GetCharacters_BeforeArgs(Params_GetCharacters args);

        public delegate Dictionary<int, char> GetCharacters_WithArgs(Func<TextAsset, Dictionary<int, char>> orig,
            TextAsset file);

        public delegate TMP_FontAsset GetFontAsset_AfterArgs(TMP_FontAsset ret);

        public delegate void GetFontAsset_BeforeArgs();

        public delegate TMP_FontAsset GetFontAsset_WithArgs(Func<TMP_FontAsset> orig);

        public delegate TMP_Settings GetSettings_AfterArgs(TMP_Settings ret);

        public delegate void GetSettings_BeforeArgs();

        public delegate TMP_Settings GetSettings_WithArgs(Func<TMP_Settings> orig);

        public delegate TMP_SpriteAsset GetSpriteAsset_AfterArgs(TMP_SpriteAsset ret);

        public delegate void GetSpriteAsset_BeforeArgs();

        public delegate TMP_SpriteAsset GetSpriteAsset_WithArgs(Func<TMP_SpriteAsset> orig);

        public delegate TMP_StyleSheet GetStyleSheet_AfterArgs(TMP_StyleSheet ret);

        public delegate void GetStyleSheet_BeforeArgs();

        public delegate TMP_StyleSheet GetStyleSheet_WithArgs(Func<TMP_StyleSheet> orig);

        public delegate TMP_Settings LoadDefaultSettings_AfterArgs(TMP_Settings ret);

        public delegate void LoadDefaultSettings_BeforeArgs();

        public delegate TMP_Settings LoadDefaultSettings_WithArgs(Func<TMP_Settings> orig);

        public delegate void LoadLinebreakingRules_AfterArgs();

        public delegate void LoadLinebreakingRules_BeforeArgs();

        public delegate void LoadLinebreakingRules_WithArgs(Action orig);

        public sealed class Params_GetCharacters
        {
            public TextAsset file;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_enableWordWrapping_BeforeArgs get_enableWordWrapping
        {
            add
            {
                HookHandler._beforeget_enableWordWrapping += value;
                HookHandler.Hookget_enableWordWrapping();
            }
            remove => HookHandler._beforeget_enableWordWrapping -= value;
        }

        public static event Delegates.get_enableKerning_BeforeArgs get_enableKerning
        {
            add
            {
                HookHandler._beforeget_enableKerning += value;
                HookHandler.Hookget_enableKerning();
            }
            remove => HookHandler._beforeget_enableKerning -= value;
        }

        public static event Delegates.get_enableExtraPadding_BeforeArgs get_enableExtraPadding
        {
            add
            {
                HookHandler._beforeget_enableExtraPadding += value;
                HookHandler.Hookget_enableExtraPadding();
            }
            remove => HookHandler._beforeget_enableExtraPadding -= value;
        }

        public static event Delegates.get_enableTintAllSprites_BeforeArgs get_enableTintAllSprites
        {
            add
            {
                HookHandler._beforeget_enableTintAllSprites += value;
                HookHandler.Hookget_enableTintAllSprites();
            }
            remove => HookHandler._beforeget_enableTintAllSprites -= value;
        }

        public static event Delegates.get_enableParseEscapeCharacters_BeforeArgs get_enableParseEscapeCharacters
        {
            add
            {
                HookHandler._beforeget_enableParseEscapeCharacters += value;
                HookHandler.Hookget_enableParseEscapeCharacters();
            }
            remove => HookHandler._beforeget_enableParseEscapeCharacters -= value;
        }

        public static event Delegates.get_missingGlyphCharacter_BeforeArgs get_missingGlyphCharacter
        {
            add
            {
                HookHandler._beforeget_missingGlyphCharacter += value;
                HookHandler.Hookget_missingGlyphCharacter();
            }
            remove => HookHandler._beforeget_missingGlyphCharacter -= value;
        }

        public static event Delegates.get_warningsDisabled_BeforeArgs get_warningsDisabled
        {
            add
            {
                HookHandler._beforeget_warningsDisabled += value;
                HookHandler.Hookget_warningsDisabled();
            }
            remove => HookHandler._beforeget_warningsDisabled -= value;
        }

        public static event Delegates.get_defaultFontAsset_BeforeArgs get_defaultFontAsset
        {
            add
            {
                HookHandler._beforeget_defaultFontAsset += value;
                HookHandler.Hookget_defaultFontAsset();
            }
            remove => HookHandler._beforeget_defaultFontAsset -= value;
        }

        public static event Delegates.get_defaultFontAssetPath_BeforeArgs get_defaultFontAssetPath
        {
            add
            {
                HookHandler._beforeget_defaultFontAssetPath += value;
                HookHandler.Hookget_defaultFontAssetPath();
            }
            remove => HookHandler._beforeget_defaultFontAssetPath -= value;
        }

        public static event Delegates.get_defaultFontSize_BeforeArgs get_defaultFontSize
        {
            add
            {
                HookHandler._beforeget_defaultFontSize += value;
                HookHandler.Hookget_defaultFontSize();
            }
            remove => HookHandler._beforeget_defaultFontSize -= value;
        }

        public static event Delegates.get_defaultTextContainerWidth_BeforeArgs get_defaultTextContainerWidth
        {
            add
            {
                HookHandler._beforeget_defaultTextContainerWidth += value;
                HookHandler.Hookget_defaultTextContainerWidth();
            }
            remove => HookHandler._beforeget_defaultTextContainerWidth -= value;
        }

        public static event Delegates.get_defaultTextContainerHeight_BeforeArgs get_defaultTextContainerHeight
        {
            add
            {
                HookHandler._beforeget_defaultTextContainerHeight += value;
                HookHandler.Hookget_defaultTextContainerHeight();
            }
            remove => HookHandler._beforeget_defaultTextContainerHeight -= value;
        }

        public static event Delegates.get_fallbackFontAssets_BeforeArgs get_fallbackFontAssets
        {
            add
            {
                HookHandler._beforeget_fallbackFontAssets += value;
                HookHandler.Hookget_fallbackFontAssets();
            }
            remove => HookHandler._beforeget_fallbackFontAssets -= value;
        }

        public static event Delegates.get_matchMaterialPreset_BeforeArgs get_matchMaterialPreset
        {
            add
            {
                HookHandler._beforeget_matchMaterialPreset += value;
                HookHandler.Hookget_matchMaterialPreset();
            }
            remove => HookHandler._beforeget_matchMaterialPreset -= value;
        }

        public static event Delegates.get_defaultSpriteAsset_BeforeArgs get_defaultSpriteAsset
        {
            add
            {
                HookHandler._beforeget_defaultSpriteAsset += value;
                HookHandler.Hookget_defaultSpriteAsset();
            }
            remove => HookHandler._beforeget_defaultSpriteAsset -= value;
        }

        public static event Delegates.get_defaultSpriteAssetPath_BeforeArgs get_defaultSpriteAssetPath
        {
            add
            {
                HookHandler._beforeget_defaultSpriteAssetPath += value;
                HookHandler.Hookget_defaultSpriteAssetPath();
            }
            remove => HookHandler._beforeget_defaultSpriteAssetPath -= value;
        }

        public static event Delegates.get_defaultStyleSheet_BeforeArgs get_defaultStyleSheet
        {
            add
            {
                HookHandler._beforeget_defaultStyleSheet += value;
                HookHandler.Hookget_defaultStyleSheet();
            }
            remove => HookHandler._beforeget_defaultStyleSheet -= value;
        }

        public static event Delegates.get_leadingCharacters_BeforeArgs get_leadingCharacters
        {
            add
            {
                HookHandler._beforeget_leadingCharacters += value;
                HookHandler.Hookget_leadingCharacters();
            }
            remove => HookHandler._beforeget_leadingCharacters -= value;
        }

        public static event Delegates.get_followingCharacters_BeforeArgs get_followingCharacters
        {
            add
            {
                HookHandler._beforeget_followingCharacters += value;
                HookHandler.Hookget_followingCharacters();
            }
            remove => HookHandler._beforeget_followingCharacters -= value;
        }

        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.LoadDefaultSettings_BeforeArgs LoadDefaultSettings
        {
            add
            {
                HookHandler._beforeLoadDefaultSettings += value;
                HookHandler.HookLoadDefaultSettings();
            }
            remove => HookHandler._beforeLoadDefaultSettings -= value;
        }

        public static event Delegates.GetSettings_BeforeArgs GetSettings
        {
            add
            {
                HookHandler._beforeGetSettings += value;
                HookHandler.HookGetSettings();
            }
            remove => HookHandler._beforeGetSettings -= value;
        }

        public static event Delegates.GetFontAsset_BeforeArgs GetFontAsset
        {
            add
            {
                HookHandler._beforeGetFontAsset += value;
                HookHandler.HookGetFontAsset();
            }
            remove => HookHandler._beforeGetFontAsset -= value;
        }

        public static event Delegates.GetSpriteAsset_BeforeArgs GetSpriteAsset
        {
            add
            {
                HookHandler._beforeGetSpriteAsset += value;
                HookHandler.HookGetSpriteAsset();
            }
            remove => HookHandler._beforeGetSpriteAsset -= value;
        }

        public static event Delegates.GetStyleSheet_BeforeArgs GetStyleSheet
        {
            add
            {
                HookHandler._beforeGetStyleSheet += value;
                HookHandler.HookGetStyleSheet();
            }
            remove => HookHandler._beforeGetStyleSheet -= value;
        }

        public static event Delegates.LoadLinebreakingRules_BeforeArgs LoadLinebreakingRules
        {
            add
            {
                HookHandler._beforeLoadLinebreakingRules += value;
                HookHandler.HookLoadLinebreakingRules();
            }
            remove => HookHandler._beforeLoadLinebreakingRules -= value;
        }

        public static event Delegates.GetCharacters_BeforeArgs GetCharacters
        {
            add
            {
                HookHandler._beforeGetCharacters += value;
                HookHandler.HookGetCharacters();
            }
            remove => HookHandler._beforeGetCharacters -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_enableWordWrapping_AfterArgs get_enableWordWrapping
        {
            add
            {
                HookHandler._afterget_enableWordWrapping += value;
                HookHandler.Hookget_enableWordWrapping();
            }
            remove => HookHandler._afterget_enableWordWrapping -= value;
        }

        public static event Delegates.get_enableKerning_AfterArgs get_enableKerning
        {
            add
            {
                HookHandler._afterget_enableKerning += value;
                HookHandler.Hookget_enableKerning();
            }
            remove => HookHandler._afterget_enableKerning -= value;
        }

        public static event Delegates.get_enableExtraPadding_AfterArgs get_enableExtraPadding
        {
            add
            {
                HookHandler._afterget_enableExtraPadding += value;
                HookHandler.Hookget_enableExtraPadding();
            }
            remove => HookHandler._afterget_enableExtraPadding -= value;
        }

        public static event Delegates.get_enableTintAllSprites_AfterArgs get_enableTintAllSprites
        {
            add
            {
                HookHandler._afterget_enableTintAllSprites += value;
                HookHandler.Hookget_enableTintAllSprites();
            }
            remove => HookHandler._afterget_enableTintAllSprites -= value;
        }

        public static event Delegates.get_enableParseEscapeCharacters_AfterArgs get_enableParseEscapeCharacters
        {
            add
            {
                HookHandler._afterget_enableParseEscapeCharacters += value;
                HookHandler.Hookget_enableParseEscapeCharacters();
            }
            remove => HookHandler._afterget_enableParseEscapeCharacters -= value;
        }

        public static event Delegates.get_missingGlyphCharacter_AfterArgs get_missingGlyphCharacter
        {
            add
            {
                HookHandler._afterget_missingGlyphCharacter += value;
                HookHandler.Hookget_missingGlyphCharacter();
            }
            remove => HookHandler._afterget_missingGlyphCharacter -= value;
        }

        public static event Delegates.get_warningsDisabled_AfterArgs get_warningsDisabled
        {
            add
            {
                HookHandler._afterget_warningsDisabled += value;
                HookHandler.Hookget_warningsDisabled();
            }
            remove => HookHandler._afterget_warningsDisabled -= value;
        }

        public static event Delegates.get_defaultFontAsset_AfterArgs get_defaultFontAsset
        {
            add
            {
                HookHandler._afterget_defaultFontAsset += value;
                HookHandler.Hookget_defaultFontAsset();
            }
            remove => HookHandler._afterget_defaultFontAsset -= value;
        }

        public static event Delegates.get_defaultFontAssetPath_AfterArgs get_defaultFontAssetPath
        {
            add
            {
                HookHandler._afterget_defaultFontAssetPath += value;
                HookHandler.Hookget_defaultFontAssetPath();
            }
            remove => HookHandler._afterget_defaultFontAssetPath -= value;
        }

        public static event Delegates.get_defaultFontSize_AfterArgs get_defaultFontSize
        {
            add
            {
                HookHandler._afterget_defaultFontSize += value;
                HookHandler.Hookget_defaultFontSize();
            }
            remove => HookHandler._afterget_defaultFontSize -= value;
        }

        public static event Delegates.get_defaultTextContainerWidth_AfterArgs get_defaultTextContainerWidth
        {
            add
            {
                HookHandler._afterget_defaultTextContainerWidth += value;
                HookHandler.Hookget_defaultTextContainerWidth();
            }
            remove => HookHandler._afterget_defaultTextContainerWidth -= value;
        }

        public static event Delegates.get_defaultTextContainerHeight_AfterArgs get_defaultTextContainerHeight
        {
            add
            {
                HookHandler._afterget_defaultTextContainerHeight += value;
                HookHandler.Hookget_defaultTextContainerHeight();
            }
            remove => HookHandler._afterget_defaultTextContainerHeight -= value;
        }

        public static event Delegates.get_fallbackFontAssets_AfterArgs get_fallbackFontAssets
        {
            add
            {
                HookHandler._afterget_fallbackFontAssets += value;
                HookHandler.Hookget_fallbackFontAssets();
            }
            remove => HookHandler._afterget_fallbackFontAssets -= value;
        }

        public static event Delegates.get_matchMaterialPreset_AfterArgs get_matchMaterialPreset
        {
            add
            {
                HookHandler._afterget_matchMaterialPreset += value;
                HookHandler.Hookget_matchMaterialPreset();
            }
            remove => HookHandler._afterget_matchMaterialPreset -= value;
        }

        public static event Delegates.get_defaultSpriteAsset_AfterArgs get_defaultSpriteAsset
        {
            add
            {
                HookHandler._afterget_defaultSpriteAsset += value;
                HookHandler.Hookget_defaultSpriteAsset();
            }
            remove => HookHandler._afterget_defaultSpriteAsset -= value;
        }

        public static event Delegates.get_defaultSpriteAssetPath_AfterArgs get_defaultSpriteAssetPath
        {
            add
            {
                HookHandler._afterget_defaultSpriteAssetPath += value;
                HookHandler.Hookget_defaultSpriteAssetPath();
            }
            remove => HookHandler._afterget_defaultSpriteAssetPath -= value;
        }

        public static event Delegates.get_defaultStyleSheet_AfterArgs get_defaultStyleSheet
        {
            add
            {
                HookHandler._afterget_defaultStyleSheet += value;
                HookHandler.Hookget_defaultStyleSheet();
            }
            remove => HookHandler._afterget_defaultStyleSheet -= value;
        }

        public static event Delegates.get_leadingCharacters_AfterArgs get_leadingCharacters
        {
            add
            {
                HookHandler._afterget_leadingCharacters += value;
                HookHandler.Hookget_leadingCharacters();
            }
            remove => HookHandler._afterget_leadingCharacters -= value;
        }

        public static event Delegates.get_followingCharacters_AfterArgs get_followingCharacters
        {
            add
            {
                HookHandler._afterget_followingCharacters += value;
                HookHandler.Hookget_followingCharacters();
            }
            remove => HookHandler._afterget_followingCharacters -= value;
        }

        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.LoadDefaultSettings_AfterArgs LoadDefaultSettings
        {
            add
            {
                HookHandler._afterLoadDefaultSettings += value;
                HookHandler.HookLoadDefaultSettings();
            }
            remove => HookHandler._afterLoadDefaultSettings -= value;
        }

        public static event Delegates.GetSettings_AfterArgs GetSettings
        {
            add
            {
                HookHandler._afterGetSettings += value;
                HookHandler.HookGetSettings();
            }
            remove => HookHandler._afterGetSettings -= value;
        }

        public static event Delegates.GetFontAsset_AfterArgs GetFontAsset
        {
            add
            {
                HookHandler._afterGetFontAsset += value;
                HookHandler.HookGetFontAsset();
            }
            remove => HookHandler._afterGetFontAsset -= value;
        }

        public static event Delegates.GetSpriteAsset_AfterArgs GetSpriteAsset
        {
            add
            {
                HookHandler._afterGetSpriteAsset += value;
                HookHandler.HookGetSpriteAsset();
            }
            remove => HookHandler._afterGetSpriteAsset -= value;
        }

        public static event Delegates.GetStyleSheet_AfterArgs GetStyleSheet
        {
            add
            {
                HookHandler._afterGetStyleSheet += value;
                HookHandler.HookGetStyleSheet();
            }
            remove => HookHandler._afterGetStyleSheet -= value;
        }

        public static event Delegates.LoadLinebreakingRules_AfterArgs LoadLinebreakingRules
        {
            add
            {
                HookHandler._afterLoadLinebreakingRules += value;
                HookHandler.HookLoadLinebreakingRules();
            }
            remove => HookHandler._afterLoadLinebreakingRules -= value;
        }

        public static event Delegates.GetCharacters_AfterArgs GetCharacters
        {
            add
            {
                HookHandler._afterGetCharacters += value;
                HookHandler.HookGetCharacters();
            }
            remove => HookHandler._afterGetCharacters -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_enableWordWrapping_WithArgs get_enableWordWrapping
        {
            add => HookEndpointManager.Add<Delegates.get_enableWordWrapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableWordWrapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableWordWrapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableWordWrapping", false), value);
        }

        public static event Delegates.get_enableKerning_WithArgs get_enableKerning
        {
            add => HookEndpointManager.Add<Delegates.get_enableKerning_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableKerning", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableKerning_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableKerning", false), value);
        }

        public static event Delegates.get_enableExtraPadding_WithArgs get_enableExtraPadding
        {
            add => HookEndpointManager.Add<Delegates.get_enableExtraPadding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableExtraPadding", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableExtraPadding_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableExtraPadding", false), value);
        }

        public static event Delegates.get_enableTintAllSprites_WithArgs get_enableTintAllSprites
        {
            add => HookEndpointManager.Add<Delegates.get_enableTintAllSprites_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableTintAllSprites", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableTintAllSprites_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableTintAllSprites", false), value);
        }

        public static event Delegates.get_enableParseEscapeCharacters_WithArgs get_enableParseEscapeCharacters
        {
            add => HookEndpointManager.Add<Delegates.get_enableParseEscapeCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableParseEscapeCharacters", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_enableParseEscapeCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_enableParseEscapeCharacters", false), value);
        }

        public static event Delegates.get_missingGlyphCharacter_WithArgs get_missingGlyphCharacter
        {
            add => HookEndpointManager.Add<Delegates.get_missingGlyphCharacter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_missingGlyphCharacter", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_missingGlyphCharacter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_missingGlyphCharacter", false), value);
        }

        public static event Delegates.get_warningsDisabled_WithArgs get_warningsDisabled
        {
            add => HookEndpointManager.Add<Delegates.get_warningsDisabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_warningsDisabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_warningsDisabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_warningsDisabled", false), value);
        }

        public static event Delegates.get_defaultFontAsset_WithArgs get_defaultFontAsset
        {
            add => HookEndpointManager.Add<Delegates.get_defaultFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontAsset", false), value);
        }

        public static event Delegates.get_defaultFontAssetPath_WithArgs get_defaultFontAssetPath
        {
            add => HookEndpointManager.Add<Delegates.get_defaultFontAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontAssetPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultFontAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontAssetPath", false), value);
        }

        public static event Delegates.get_defaultFontSize_WithArgs get_defaultFontSize
        {
            add => HookEndpointManager.Add<Delegates.get_defaultFontSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontSize", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultFontSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultFontSize", false), value);
        }

        public static event Delegates.get_defaultTextContainerWidth_WithArgs get_defaultTextContainerWidth
        {
            add => HookEndpointManager.Add<Delegates.get_defaultTextContainerWidth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultTextContainerWidth", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultTextContainerWidth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultTextContainerWidth", false), value);
        }

        public static event Delegates.get_defaultTextContainerHeight_WithArgs get_defaultTextContainerHeight
        {
            add => HookEndpointManager.Add<Delegates.get_defaultTextContainerHeight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultTextContainerHeight", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultTextContainerHeight_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultTextContainerHeight", false), value);
        }

        public static event Delegates.get_fallbackFontAssets_WithArgs get_fallbackFontAssets
        {
            add => HookEndpointManager.Add<Delegates.get_fallbackFontAssets_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_fallbackFontAssets", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_fallbackFontAssets_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_fallbackFontAssets", false), value);
        }

        public static event Delegates.get_matchMaterialPreset_WithArgs get_matchMaterialPreset
        {
            add => HookEndpointManager.Add<Delegates.get_matchMaterialPreset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_matchMaterialPreset", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_matchMaterialPreset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_matchMaterialPreset", false), value);
        }

        public static event Delegates.get_defaultSpriteAsset_WithArgs get_defaultSpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.get_defaultSpriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultSpriteAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultSpriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultSpriteAsset", false), value);
        }

        public static event Delegates.get_defaultSpriteAssetPath_WithArgs get_defaultSpriteAssetPath
        {
            add => HookEndpointManager.Add<Delegates.get_defaultSpriteAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultSpriteAssetPath", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultSpriteAssetPath_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultSpriteAssetPath", false), value);
        }

        public static event Delegates.get_defaultStyleSheet_WithArgs get_defaultStyleSheet
        {
            add => HookEndpointManager.Add<Delegates.get_defaultStyleSheet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultStyleSheet", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_defaultStyleSheet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_defaultStyleSheet", false), value);
        }

        public static event Delegates.get_leadingCharacters_WithArgs get_leadingCharacters
        {
            add => HookEndpointManager.Add<Delegates.get_leadingCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_leadingCharacters", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_leadingCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_leadingCharacters", false), value);
        }

        public static event Delegates.get_followingCharacters_WithArgs get_followingCharacters
        {
            add => HookEndpointManager.Add<Delegates.get_followingCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_followingCharacters", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_followingCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_followingCharacters", false), value);
        }

        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "get_instance", false), value);
        }

        public static event Delegates.LoadDefaultSettings_WithArgs LoadDefaultSettings
        {
            add => HookEndpointManager.Add<Delegates.LoadDefaultSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "LoadDefaultSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.LoadDefaultSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "LoadDefaultSettings", false), value);
        }

        public static event Delegates.GetSettings_WithArgs GetSettings
        {
            add => HookEndpointManager.Add<Delegates.GetSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetSettings", false), value);
        }

        public static event Delegates.GetFontAsset_WithArgs GetFontAsset
        {
            add => HookEndpointManager.Add<Delegates.GetFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetFontAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetFontAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetFontAsset", false), value);
        }

        public static event Delegates.GetSpriteAsset_WithArgs GetSpriteAsset
        {
            add => HookEndpointManager.Add<Delegates.GetSpriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetSpriteAsset", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSpriteAsset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetSpriteAsset", false), value);
        }

        public static event Delegates.GetStyleSheet_WithArgs GetStyleSheet
        {
            add => HookEndpointManager.Add<Delegates.GetStyleSheet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetStyleSheet", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetStyleSheet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetStyleSheet", false), value);
        }

        public static event Delegates.LoadLinebreakingRules_WithArgs LoadLinebreakingRules
        {
            add => HookEndpointManager.Add<Delegates.LoadLinebreakingRules_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "LoadLinebreakingRules", false), value);
            remove => HookEndpointManager.Remove<Delegates.LoadLinebreakingRules_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "LoadLinebreakingRules", false), value);
        }

        public static event Delegates.GetCharacters_WithArgs GetCharacters
        {
            add => HookEndpointManager.Add<Delegates.GetCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetCharacters", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetCharacters_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Settings), "GetCharacters", false), value);
        }
    }
}