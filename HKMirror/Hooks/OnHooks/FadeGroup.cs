using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for FadeGroup class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFadeGroup
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.FadeGroup.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.FadeGroup.orig_OnEnable orig, FadeGroup self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.FadeGroup.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.FadeGroup.orig_Update orig, FadeGroup self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFadeUp()
        {
            if (!HookedList.Contains("FadeUp"))
            {
                HookedList.Add("FadeUp");
                On.FadeGroup.FadeUp += FadeUp;
            }
        }

        internal static event Delegates.FadeUp_BeforeArgs _beforeFadeUp;
        internal static event Delegates.FadeUp_AfterArgs _afterFadeUp;

        private static void FadeUp(On.FadeGroup.orig_FadeUp orig, FadeGroup self)
        {
            Delegates.Params_FadeUp @params = new()
            {
                self = self
            };
            if (_beforeFadeUp != null)
            {
                foreach (Delegates.FadeUp_BeforeArgs toInvoke in _beforeFadeUp.GetInvocationList())
                {
                    try
                    {
                        _beforeFadeUp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFadeUp != null)
            {
                foreach (Delegates.FadeUp_AfterArgs toInvoke in _afterFadeUp.GetInvocationList())
                {
                    try
                    {
                        _afterFadeUp.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFadeDown()
        {
            if (!HookedList.Contains("FadeDown"))
            {
                HookedList.Add("FadeDown");
                On.FadeGroup.FadeDown += FadeDown;
            }
        }

        internal static event Delegates.FadeDown_BeforeArgs _beforeFadeDown;
        internal static event Delegates.FadeDown_AfterArgs _afterFadeDown;

        private static void FadeDown(On.FadeGroup.orig_FadeDown orig, FadeGroup self)
        {
            Delegates.Params_FadeDown @params = new()
            {
                self = self
            };
            if (_beforeFadeDown != null)
            {
                foreach (Delegates.FadeDown_BeforeArgs toInvoke in _beforeFadeDown.GetInvocationList())
                {
                    try
                    {
                        _beforeFadeDown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFadeDown != null)
            {
                foreach (Delegates.FadeDown_AfterArgs toInvoke in _afterFadeDown.GetInvocationList())
                {
                    try
                    {
                        _afterFadeDown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFadeDownFast()
        {
            if (!HookedList.Contains("FadeDownFast"))
            {
                HookedList.Add("FadeDownFast");
                On.FadeGroup.FadeDownFast += FadeDownFast;
            }
        }

        internal static event Delegates.FadeDownFast_BeforeArgs _beforeFadeDownFast;
        internal static event Delegates.FadeDownFast_AfterArgs _afterFadeDownFast;

        private static void FadeDownFast(On.FadeGroup.orig_FadeDownFast orig, FadeGroup self)
        {
            Delegates.Params_FadeDownFast @params = new()
            {
                self = self
            };
            if (_beforeFadeDownFast != null)
            {
                foreach (Delegates.FadeDownFast_BeforeArgs toInvoke in _beforeFadeDownFast.GetInvocationList())
                {
                    try
                    {
                        _beforeFadeDownFast?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFadeDownFast != null)
            {
                foreach (Delegates.FadeDownFast_AfterArgs toInvoke in _afterFadeDownFast.GetInvocationList())
                {
                    try
                    {
                        _afterFadeDownFast.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDisableRenderers()
        {
            if (!HookedList.Contains("DisableRenderers"))
            {
                HookedList.Add("DisableRenderers");
                On.FadeGroup.DisableRenderers += DisableRenderers;
            }
        }

        internal static event Delegates.DisableRenderers_BeforeArgs _beforeDisableRenderers;
        internal static event Delegates.DisableRenderers_AfterArgs _afterDisableRenderers;

        private static void DisableRenderers(On.FadeGroup.orig_DisableRenderers orig, FadeGroup self)
        {
            Delegates.Params_DisableRenderers @params = new()
            {
                self = self
            };
            if (_beforeDisableRenderers != null)
            {
                foreach (Delegates.DisableRenderers_BeforeArgs toInvoke in _beforeDisableRenderers.GetInvocationList())
                {
                    try
                    {
                        _beforeDisableRenderers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDisableRenderers != null)
            {
                foreach (Delegates.DisableRenderers_AfterArgs toInvoke in _afterDisableRenderers.GetInvocationList())
                {
                    try
                    {
                        _afterDisableRenderers.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_OnEnable
        {
            public FadeGroup self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<FadeGroup> orig, FadeGroup self);

        public sealed class Params_Update
        {
            public FadeGroup self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<FadeGroup> orig, FadeGroup self);

        public sealed class Params_FadeUp
        {
            public FadeGroup self;
        }

        public delegate void FadeUp_BeforeArgs(Params_FadeUp args);

        public delegate void FadeUp_AfterArgs(Params_FadeUp args);

        public delegate void FadeUp_WithArgs(Action<FadeGroup> orig, FadeGroup self);

        public sealed class Params_FadeDown
        {
            public FadeGroup self;
        }

        public delegate void FadeDown_BeforeArgs(Params_FadeDown args);

        public delegate void FadeDown_AfterArgs(Params_FadeDown args);

        public delegate void FadeDown_WithArgs(Action<FadeGroup> orig, FadeGroup self);

        public sealed class Params_FadeDownFast
        {
            public FadeGroup self;
        }

        public delegate void FadeDownFast_BeforeArgs(Params_FadeDownFast args);

        public delegate void FadeDownFast_AfterArgs(Params_FadeDownFast args);

        public delegate void FadeDownFast_WithArgs(Action<FadeGroup> orig, FadeGroup self);

        public sealed class Params_DisableRenderers
        {
            public FadeGroup self;
        }

        public delegate void DisableRenderers_BeforeArgs(Params_DisableRenderers args);

        public delegate void DisableRenderers_AfterArgs(Params_DisableRenderers args);

        public delegate void DisableRenderers_WithArgs(Action<FadeGroup> orig, FadeGroup self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.FadeUp_BeforeArgs FadeUp
        {
            add
            {
                HookHandler._beforeFadeUp += value;
                HookHandler.HookFadeUp();
            }
            remove => HookHandler._beforeFadeUp -= value;
        }

        public static event Delegates.FadeDown_BeforeArgs FadeDown
        {
            add
            {
                HookHandler._beforeFadeDown += value;
                HookHandler.HookFadeDown();
            }
            remove => HookHandler._beforeFadeDown -= value;
        }

        public static event Delegates.FadeDownFast_BeforeArgs FadeDownFast
        {
            add
            {
                HookHandler._beforeFadeDownFast += value;
                HookHandler.HookFadeDownFast();
            }
            remove => HookHandler._beforeFadeDownFast -= value;
        }

        public static event Delegates.DisableRenderers_BeforeArgs DisableRenderers
        {
            add
            {
                HookHandler._beforeDisableRenderers += value;
                HookHandler.HookDisableRenderers();
            }
            remove => HookHandler._beforeDisableRenderers -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.FadeUp_AfterArgs FadeUp
        {
            add
            {
                HookHandler._afterFadeUp += value;
                HookHandler.HookFadeUp();
            }
            remove => HookHandler._afterFadeUp -= value;
        }

        public static event Delegates.FadeDown_AfterArgs FadeDown
        {
            add
            {
                HookHandler._afterFadeDown += value;
                HookHandler.HookFadeDown();
            }
            remove => HookHandler._afterFadeDown -= value;
        }

        public static event Delegates.FadeDownFast_AfterArgs FadeDownFast
        {
            add
            {
                HookHandler._afterFadeDownFast += value;
                HookHandler.HookFadeDownFast();
            }
            remove => HookHandler._afterFadeDownFast -= value;
        }

        public static event Delegates.DisableRenderers_AfterArgs DisableRenderers
        {
            add
            {
                HookHandler._afterDisableRenderers += value;
                HookHandler.HookDisableRenderers();
            }
            remove => HookHandler._afterDisableRenderers -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.FadeGroup.hook_OnEnable OnEnable
        {
            add => On.FadeGroup.OnEnable += value;
            remove => On.FadeGroup.OnEnable -= value;
        }

        public static event On.FadeGroup.hook_Update Update
        {
            add => On.FadeGroup.Update += value;
            remove => On.FadeGroup.Update -= value;
        }

        public static event On.FadeGroup.hook_FadeUp FadeUp
        {
            add => On.FadeGroup.FadeUp += value;
            remove => On.FadeGroup.FadeUp -= value;
        }

        public static event On.FadeGroup.hook_FadeDown FadeDown
        {
            add => On.FadeGroup.FadeDown += value;
            remove => On.FadeGroup.FadeDown -= value;
        }

        public static event On.FadeGroup.hook_FadeDownFast FadeDownFast
        {
            add => On.FadeGroup.FadeDownFast += value;
            remove => On.FadeGroup.FadeDownFast -= value;
        }

        public static event On.FadeGroup.hook_DisableRenderers DisableRenderers
        {
            add => On.FadeGroup.DisableRenderers += value;
            remove => On.FadeGroup.DisableRenderers -= value;
        }
    }
}