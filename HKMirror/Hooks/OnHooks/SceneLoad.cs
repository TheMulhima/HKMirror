using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneLoad class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneLoad
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_TargetSceneName()
        {
            if (!HookedList.Contains("get_TargetSceneName"))
            {
                HookedList.Add("get_TargetSceneName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_TargetSceneName"), get_TargetSceneName);
            }
        }

        internal static event Delegates.get_TargetSceneName_BeforeArgs _beforeget_TargetSceneName;
        internal static event Delegates.get_TargetSceneName_NormalArgs _afterget_TargetSceneName;

        private static string get_TargetSceneName(Func<SceneLoad, string> orig, SceneLoad self)
        {
            Delegates.Params_get_TargetSceneName @params = new()
            {
                self = self
            };
            _beforeget_TargetSceneName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_TargetSceneName != null) retVal = _afterget_TargetSceneName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsFetchAllowed()
        {
            if (!HookedList.Contains("get_IsFetchAllowed"))
            {
                HookedList.Add("get_IsFetchAllowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFetchAllowed"), get_IsFetchAllowed);
            }
        }

        internal static event Delegates.get_IsFetchAllowed_BeforeArgs _beforeget_IsFetchAllowed;
        internal static event Delegates.get_IsFetchAllowed_NormalArgs _afterget_IsFetchAllowed;

        private static bool get_IsFetchAllowed(Func<SceneLoad, bool> orig, SceneLoad self)
        {
            Delegates.Params_get_IsFetchAllowed @params = new()
            {
                self = self
            };
            _beforeget_IsFetchAllowed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsFetchAllowed != null) retVal = _afterget_IsFetchAllowed.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsFetchAllowed()
        {
            if (!HookedList.Contains("set_IsFetchAllowed"))
            {
                HookedList.Add("set_IsFetchAllowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFetchAllowed"), set_IsFetchAllowed);
            }
        }

        internal static event Delegates.set_IsFetchAllowed_BeforeArgs _beforeset_IsFetchAllowed;
        internal static event Delegates.set_IsFetchAllowed_NormalArgs _afterset_IsFetchAllowed;

        private static void set_IsFetchAllowed(Action<SceneLoad, bool> orig, SceneLoad self, bool value)
        {
            Delegates.Params_set_IsFetchAllowed @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsFetchAllowed?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsFetchAllowed != null) _afterset_IsFetchAllowed.Invoke(@params);
        }

        internal static void Hookget_IsActivationAllowed()
        {
            if (!HookedList.Contains("get_IsActivationAllowed"))
            {
                HookedList.Add("get_IsActivationAllowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsActivationAllowed"),
                    get_IsActivationAllowed);
            }
        }

        internal static event Delegates.get_IsActivationAllowed_BeforeArgs _beforeget_IsActivationAllowed;
        internal static event Delegates.get_IsActivationAllowed_NormalArgs _afterget_IsActivationAllowed;

        private static bool get_IsActivationAllowed(Func<SceneLoad, bool> orig, SceneLoad self)
        {
            Delegates.Params_get_IsActivationAllowed @params = new()
            {
                self = self
            };
            _beforeget_IsActivationAllowed?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsActivationAllowed != null) retVal = _afterget_IsActivationAllowed.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsActivationAllowed()
        {
            if (!HookedList.Contains("set_IsActivationAllowed"))
            {
                HookedList.Add("set_IsActivationAllowed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsActivationAllowed"),
                    set_IsActivationAllowed);
            }
        }

        internal static event Delegates.set_IsActivationAllowed_BeforeArgs _beforeset_IsActivationAllowed;
        internal static event Delegates.set_IsActivationAllowed_NormalArgs _afterset_IsActivationAllowed;

        private static void set_IsActivationAllowed(Action<SceneLoad, bool> orig, SceneLoad self, bool value)
        {
            Delegates.Params_set_IsActivationAllowed @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsActivationAllowed?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsActivationAllowed != null) _afterset_IsActivationAllowed.Invoke(@params);
        }

        internal static void Hookget_IsUnloadAssetsRequired()
        {
            if (!HookedList.Contains("get_IsUnloadAssetsRequired"))
            {
                HookedList.Add("get_IsUnloadAssetsRequired");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsUnloadAssetsRequired"),
                    get_IsUnloadAssetsRequired);
            }
        }

        internal static event Delegates.get_IsUnloadAssetsRequired_BeforeArgs _beforeget_IsUnloadAssetsRequired;
        internal static event Delegates.get_IsUnloadAssetsRequired_NormalArgs _afterget_IsUnloadAssetsRequired;

        private static bool get_IsUnloadAssetsRequired(Func<SceneLoad, bool> orig, SceneLoad self)
        {
            Delegates.Params_get_IsUnloadAssetsRequired @params = new()
            {
                self = self
            };
            _beforeget_IsUnloadAssetsRequired?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsUnloadAssetsRequired != null) retVal = _afterget_IsUnloadAssetsRequired.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsUnloadAssetsRequired()
        {
            if (!HookedList.Contains("set_IsUnloadAssetsRequired"))
            {
                HookedList.Add("set_IsUnloadAssetsRequired");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsUnloadAssetsRequired"),
                    set_IsUnloadAssetsRequired);
            }
        }

        internal static event Delegates.set_IsUnloadAssetsRequired_BeforeArgs _beforeset_IsUnloadAssetsRequired;
        internal static event Delegates.set_IsUnloadAssetsRequired_NormalArgs _afterset_IsUnloadAssetsRequired;

        private static void set_IsUnloadAssetsRequired(Action<SceneLoad, bool> orig, SceneLoad self, bool value)
        {
            Delegates.Params_set_IsUnloadAssetsRequired @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsUnloadAssetsRequired?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsUnloadAssetsRequired != null) _afterset_IsUnloadAssetsRequired.Invoke(@params);
        }

        internal static void Hookget_IsGarbageCollectRequired()
        {
            if (!HookedList.Contains("get_IsGarbageCollectRequired"))
            {
                HookedList.Add("get_IsGarbageCollectRequired");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsGarbageCollectRequired"),
                    get_IsGarbageCollectRequired);
            }
        }

        internal static event Delegates.get_IsGarbageCollectRequired_BeforeArgs _beforeget_IsGarbageCollectRequired;
        internal static event Delegates.get_IsGarbageCollectRequired_NormalArgs _afterget_IsGarbageCollectRequired;

        private static bool get_IsGarbageCollectRequired(Func<SceneLoad, bool> orig, SceneLoad self)
        {
            Delegates.Params_get_IsGarbageCollectRequired @params = new()
            {
                self = self
            };
            _beforeget_IsGarbageCollectRequired?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsGarbageCollectRequired != null) retVal = _afterget_IsGarbageCollectRequired.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsGarbageCollectRequired()
        {
            if (!HookedList.Contains("set_IsGarbageCollectRequired"))
            {
                HookedList.Add("set_IsGarbageCollectRequired");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsGarbageCollectRequired"),
                    set_IsGarbageCollectRequired);
            }
        }

        internal static event Delegates.set_IsGarbageCollectRequired_BeforeArgs _beforeset_IsGarbageCollectRequired;
        internal static event Delegates.set_IsGarbageCollectRequired_NormalArgs _afterset_IsGarbageCollectRequired;

        private static void set_IsGarbageCollectRequired(Action<SceneLoad, bool> orig, SceneLoad self, bool value)
        {
            Delegates.Params_set_IsGarbageCollectRequired @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsGarbageCollectRequired?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsGarbageCollectRequired != null) _afterset_IsGarbageCollectRequired.Invoke(@params);
        }

        internal static void Hookget_IsFinished()
        {
            if (!HookedList.Contains("get_IsFinished"))
            {
                HookedList.Add("get_IsFinished");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFinished"), get_IsFinished);
            }
        }

        internal static event Delegates.get_IsFinished_BeforeArgs _beforeget_IsFinished;
        internal static event Delegates.get_IsFinished_NormalArgs _afterget_IsFinished;

        private static bool get_IsFinished(Func<SceneLoad, bool> orig, SceneLoad self)
        {
            Delegates.Params_get_IsFinished @params = new()
            {
                self = self
            };
            _beforeget_IsFinished?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsFinished != null) retVal = _afterget_IsFinished.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsFinished()
        {
            if (!HookedList.Contains("set_IsFinished"))
            {
                HookedList.Add("set_IsFinished");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFinished"), set_IsFinished);
            }
        }

        internal static event Delegates.set_IsFinished_BeforeArgs _beforeset_IsFinished;
        internal static event Delegates.set_IsFinished_NormalArgs _afterset_IsFinished;

        private static void set_IsFinished(Action<SceneLoad, bool> orig, SceneLoad self, bool value)
        {
            Delegates.Params_set_IsFinished @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsFinished?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsFinished != null) _afterset_IsFinished.Invoke(@params);
        }

        internal static void Hookget_BeginTime()
        {
            if (!HookedList.Contains("get_BeginTime"))
            {
                HookedList.Add("get_BeginTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_BeginTime"), get_BeginTime);
            }
        }

        internal static event Delegates.get_BeginTime_BeforeArgs _beforeget_BeginTime;
        internal static event Delegates.get_BeginTime_NormalArgs _afterget_BeginTime;

        private static float? get_BeginTime(Func<SceneLoad, float?> orig, SceneLoad self)
        {
            Delegates.Params_get_BeginTime @params = new()
            {
                self = self
            };
            _beforeget_BeginTime?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BeginTime != null) retVal = _afterget_BeginTime.Invoke(@params);
            return retVal;
        }

        internal static void HookBegin()
        {
            if (!HookedList.Contains("Begin"))
            {
                HookedList.Add("Begin");
                On.SceneLoad.Begin += Begin;
            }
        }

        internal static event Delegates.Begin_BeforeArgs _beforeBegin;
        internal static event Delegates.Begin_NormalArgs _afterBegin;

        private static void Begin(On.SceneLoad.orig_Begin orig, SceneLoad self)
        {
            Delegates.Params_Begin @params = new()
            {
                self = self
            };
            _beforeBegin?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBegin != null) _afterBegin.Invoke(@params);
        }

        internal static void HookBeginRoutine()
        {
            if (!HookedList.Contains("BeginRoutine"))
            {
                HookedList.Add("BeginRoutine");
                On.SceneLoad.BeginRoutine += BeginRoutine;
            }
        }

        internal static event Delegates.BeginRoutine_BeforeArgs _beforeBeginRoutine;

        private static IEnumerator BeginRoutine(On.SceneLoad.orig_BeginRoutine orig, SceneLoad self)
        {
            Delegates.Params_BeginRoutine @params = new()
            {
                self = self
            };
            _beforeBeginRoutine?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Begin_BeforeArgs(Params_Begin args);

        public delegate void Begin_NormalArgs(Params_Begin args);

        public delegate void BeginRoutine_BeforeArgs(Params_BeginRoutine args);

        public delegate IEnumerator BeginRoutine_NormalArgs(Params_BeginRoutine args);

        public delegate void get_BeginTime_BeforeArgs(Params_get_BeginTime args);

        public delegate float? get_BeginTime_NormalArgs(Params_get_BeginTime args);

        public delegate void get_IsActivationAllowed_BeforeArgs(Params_get_IsActivationAllowed args);

        public delegate bool get_IsActivationAllowed_NormalArgs(Params_get_IsActivationAllowed args);

        public delegate void get_IsFetchAllowed_BeforeArgs(Params_get_IsFetchAllowed args);

        public delegate bool get_IsFetchAllowed_NormalArgs(Params_get_IsFetchAllowed args);

        public delegate void get_IsFinished_BeforeArgs(Params_get_IsFinished args);

        public delegate bool get_IsFinished_NormalArgs(Params_get_IsFinished args);

        public delegate void get_IsGarbageCollectRequired_BeforeArgs(Params_get_IsGarbageCollectRequired args);

        public delegate bool get_IsGarbageCollectRequired_NormalArgs(Params_get_IsGarbageCollectRequired args);

        public delegate void get_IsUnloadAssetsRequired_BeforeArgs(Params_get_IsUnloadAssetsRequired args);

        public delegate bool get_IsUnloadAssetsRequired_NormalArgs(Params_get_IsUnloadAssetsRequired args);

        public delegate void get_TargetSceneName_BeforeArgs(Params_get_TargetSceneName args);

        public delegate string get_TargetSceneName_NormalArgs(Params_get_TargetSceneName args);

        public delegate void set_IsActivationAllowed_BeforeArgs(Params_set_IsActivationAllowed args);

        public delegate void set_IsActivationAllowed_NormalArgs(Params_set_IsActivationAllowed args);

        public delegate void set_IsFetchAllowed_BeforeArgs(Params_set_IsFetchAllowed args);

        public delegate void set_IsFetchAllowed_NormalArgs(Params_set_IsFetchAllowed args);

        public delegate void set_IsFinished_BeforeArgs(Params_set_IsFinished args);

        public delegate void set_IsFinished_NormalArgs(Params_set_IsFinished args);

        public delegate void set_IsGarbageCollectRequired_BeforeArgs(Params_set_IsGarbageCollectRequired args);

        public delegate void set_IsGarbageCollectRequired_NormalArgs(Params_set_IsGarbageCollectRequired args);

        public delegate void set_IsUnloadAssetsRequired_BeforeArgs(Params_set_IsUnloadAssetsRequired args);

        public delegate void set_IsUnloadAssetsRequired_NormalArgs(Params_set_IsUnloadAssetsRequired args);

        public sealed class Params_get_TargetSceneName
        {
            public SceneLoad self;
        }

        public sealed class Params_get_IsFetchAllowed
        {
            public SceneLoad self;
        }

        public sealed class Params_set_IsFetchAllowed
        {
            public SceneLoad self;
            public bool value;
        }

        public sealed class Params_get_IsActivationAllowed
        {
            public SceneLoad self;
        }

        public sealed class Params_set_IsActivationAllowed
        {
            public SceneLoad self;
            public bool value;
        }

        public sealed class Params_get_IsUnloadAssetsRequired
        {
            public SceneLoad self;
        }

        public sealed class Params_set_IsUnloadAssetsRequired
        {
            public SceneLoad self;
            public bool value;
        }

        public sealed class Params_get_IsGarbageCollectRequired
        {
            public SceneLoad self;
        }

        public sealed class Params_set_IsGarbageCollectRequired
        {
            public SceneLoad self;
            public bool value;
        }

        public sealed class Params_get_IsFinished
        {
            public SceneLoad self;
        }

        public sealed class Params_set_IsFinished
        {
            public SceneLoad self;
            public bool value;
        }

        public sealed class Params_get_BeginTime
        {
            public SceneLoad self;
        }

        public sealed class Params_Begin
        {
            public SceneLoad self;
        }

        public sealed class Params_BeginRoutine
        {
            public SceneLoad self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_TargetSceneName_BeforeArgs get_TargetSceneName
        {
            add
            {
                HookHandler._beforeget_TargetSceneName += value;
                HookHandler.Hookget_TargetSceneName();
            }
            remove => HookHandler._beforeget_TargetSceneName -= value;
        }

        public static event Delegates.get_IsFetchAllowed_BeforeArgs get_IsFetchAllowed
        {
            add
            {
                HookHandler._beforeget_IsFetchAllowed += value;
                HookHandler.Hookget_IsFetchAllowed();
            }
            remove => HookHandler._beforeget_IsFetchAllowed -= value;
        }

        public static event Delegates.set_IsFetchAllowed_BeforeArgs set_IsFetchAllowed
        {
            add
            {
                HookHandler._beforeset_IsFetchAllowed += value;
                HookHandler.Hookset_IsFetchAllowed();
            }
            remove => HookHandler._beforeset_IsFetchAllowed -= value;
        }

        public static event Delegates.get_IsActivationAllowed_BeforeArgs get_IsActivationAllowed
        {
            add
            {
                HookHandler._beforeget_IsActivationAllowed += value;
                HookHandler.Hookget_IsActivationAllowed();
            }
            remove => HookHandler._beforeget_IsActivationAllowed -= value;
        }

        public static event Delegates.set_IsActivationAllowed_BeforeArgs set_IsActivationAllowed
        {
            add
            {
                HookHandler._beforeset_IsActivationAllowed += value;
                HookHandler.Hookset_IsActivationAllowed();
            }
            remove => HookHandler._beforeset_IsActivationAllowed -= value;
        }

        public static event Delegates.get_IsUnloadAssetsRequired_BeforeArgs get_IsUnloadAssetsRequired
        {
            add
            {
                HookHandler._beforeget_IsUnloadAssetsRequired += value;
                HookHandler.Hookget_IsUnloadAssetsRequired();
            }
            remove => HookHandler._beforeget_IsUnloadAssetsRequired -= value;
        }

        public static event Delegates.set_IsUnloadAssetsRequired_BeforeArgs set_IsUnloadAssetsRequired
        {
            add
            {
                HookHandler._beforeset_IsUnloadAssetsRequired += value;
                HookHandler.Hookset_IsUnloadAssetsRequired();
            }
            remove => HookHandler._beforeset_IsUnloadAssetsRequired -= value;
        }

        public static event Delegates.get_IsGarbageCollectRequired_BeforeArgs get_IsGarbageCollectRequired
        {
            add
            {
                HookHandler._beforeget_IsGarbageCollectRequired += value;
                HookHandler.Hookget_IsGarbageCollectRequired();
            }
            remove => HookHandler._beforeget_IsGarbageCollectRequired -= value;
        }

        public static event Delegates.set_IsGarbageCollectRequired_BeforeArgs set_IsGarbageCollectRequired
        {
            add
            {
                HookHandler._beforeset_IsGarbageCollectRequired += value;
                HookHandler.Hookset_IsGarbageCollectRequired();
            }
            remove => HookHandler._beforeset_IsGarbageCollectRequired -= value;
        }

        public static event Delegates.get_IsFinished_BeforeArgs get_IsFinished
        {
            add
            {
                HookHandler._beforeget_IsFinished += value;
                HookHandler.Hookget_IsFinished();
            }
            remove => HookHandler._beforeget_IsFinished -= value;
        }

        public static event Delegates.set_IsFinished_BeforeArgs set_IsFinished
        {
            add
            {
                HookHandler._beforeset_IsFinished += value;
                HookHandler.Hookset_IsFinished();
            }
            remove => HookHandler._beforeset_IsFinished -= value;
        }

        public static event Delegates.get_BeginTime_BeforeArgs get_BeginTime
        {
            add
            {
                HookHandler._beforeget_BeginTime += value;
                HookHandler.Hookget_BeginTime();
            }
            remove => HookHandler._beforeget_BeginTime -= value;
        }

        public static event Delegates.Begin_BeforeArgs Begin
        {
            add
            {
                HookHandler._beforeBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._beforeBegin -= value;
        }

        public static event Delegates.BeginRoutine_BeforeArgs BeginRoutine
        {
            add
            {
                HookHandler._beforeBeginRoutine += value;
                HookHandler.HookBeginRoutine();
            }
            remove => HookHandler._beforeBeginRoutine -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_TargetSceneName_NormalArgs get_TargetSceneName
        {
            add
            {
                HookHandler._afterget_TargetSceneName += value;
                HookHandler.Hookget_TargetSceneName();
            }
            remove => HookHandler._afterget_TargetSceneName -= value;
        }

        public static event Delegates.get_IsFetchAllowed_NormalArgs get_IsFetchAllowed
        {
            add
            {
                HookHandler._afterget_IsFetchAllowed += value;
                HookHandler.Hookget_IsFetchAllowed();
            }
            remove => HookHandler._afterget_IsFetchAllowed -= value;
        }

        public static event Delegates.set_IsFetchAllowed_NormalArgs set_IsFetchAllowed
        {
            add
            {
                HookHandler._afterset_IsFetchAllowed += value;
                HookHandler.Hookset_IsFetchAllowed();
            }
            remove => HookHandler._afterset_IsFetchAllowed -= value;
        }

        public static event Delegates.get_IsActivationAllowed_NormalArgs get_IsActivationAllowed
        {
            add
            {
                HookHandler._afterget_IsActivationAllowed += value;
                HookHandler.Hookget_IsActivationAllowed();
            }
            remove => HookHandler._afterget_IsActivationAllowed -= value;
        }

        public static event Delegates.set_IsActivationAllowed_NormalArgs set_IsActivationAllowed
        {
            add
            {
                HookHandler._afterset_IsActivationAllowed += value;
                HookHandler.Hookset_IsActivationAllowed();
            }
            remove => HookHandler._afterset_IsActivationAllowed -= value;
        }

        public static event Delegates.get_IsUnloadAssetsRequired_NormalArgs get_IsUnloadAssetsRequired
        {
            add
            {
                HookHandler._afterget_IsUnloadAssetsRequired += value;
                HookHandler.Hookget_IsUnloadAssetsRequired();
            }
            remove => HookHandler._afterget_IsUnloadAssetsRequired -= value;
        }

        public static event Delegates.set_IsUnloadAssetsRequired_NormalArgs set_IsUnloadAssetsRequired
        {
            add
            {
                HookHandler._afterset_IsUnloadAssetsRequired += value;
                HookHandler.Hookset_IsUnloadAssetsRequired();
            }
            remove => HookHandler._afterset_IsUnloadAssetsRequired -= value;
        }

        public static event Delegates.get_IsGarbageCollectRequired_NormalArgs get_IsGarbageCollectRequired
        {
            add
            {
                HookHandler._afterget_IsGarbageCollectRequired += value;
                HookHandler.Hookget_IsGarbageCollectRequired();
            }
            remove => HookHandler._afterget_IsGarbageCollectRequired -= value;
        }

        public static event Delegates.set_IsGarbageCollectRequired_NormalArgs set_IsGarbageCollectRequired
        {
            add
            {
                HookHandler._afterset_IsGarbageCollectRequired += value;
                HookHandler.Hookset_IsGarbageCollectRequired();
            }
            remove => HookHandler._afterset_IsGarbageCollectRequired -= value;
        }

        public static event Delegates.get_IsFinished_NormalArgs get_IsFinished
        {
            add
            {
                HookHandler._afterget_IsFinished += value;
                HookHandler.Hookget_IsFinished();
            }
            remove => HookHandler._afterget_IsFinished -= value;
        }

        public static event Delegates.set_IsFinished_NormalArgs set_IsFinished
        {
            add
            {
                HookHandler._afterset_IsFinished += value;
                HookHandler.Hookset_IsFinished();
            }
            remove => HookHandler._afterset_IsFinished -= value;
        }

        public static event Delegates.get_BeginTime_NormalArgs get_BeginTime
        {
            add
            {
                HookHandler._afterget_BeginTime += value;
                HookHandler.Hookget_BeginTime();
            }
            remove => HookHandler._afterget_BeginTime -= value;
        }

        public static event Delegates.Begin_NormalArgs Begin
        {
            add
            {
                HookHandler._afterBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._afterBegin -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_TargetSceneName_NormalArgs get_TargetSceneName
        {
            add => HookEndpointManager.Add<Delegates.get_TargetSceneName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_TargetSceneName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_TargetSceneName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_TargetSceneName"), value);
        }

        public static event Delegates.get_IsFetchAllowed_NormalArgs get_IsFetchAllowed
        {
            add => HookEndpointManager.Add<Delegates.get_IsFetchAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFetchAllowed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsFetchAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFetchAllowed"), value);
        }

        public static event Delegates.set_IsFetchAllowed_NormalArgs set_IsFetchAllowed
        {
            add => HookEndpointManager.Add<Delegates.set_IsFetchAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFetchAllowed"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsFetchAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFetchAllowed"), value);
        }

        public static event Delegates.get_IsActivationAllowed_NormalArgs get_IsActivationAllowed
        {
            add => HookEndpointManager.Add<Delegates.get_IsActivationAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsActivationAllowed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsActivationAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsActivationAllowed"), value);
        }

        public static event Delegates.set_IsActivationAllowed_NormalArgs set_IsActivationAllowed
        {
            add => HookEndpointManager.Add<Delegates.set_IsActivationAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsActivationAllowed"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsActivationAllowed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsActivationAllowed"), value);
        }

        public static event Delegates.get_IsUnloadAssetsRequired_NormalArgs get_IsUnloadAssetsRequired
        {
            add => HookEndpointManager.Add<Delegates.get_IsUnloadAssetsRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsUnloadAssetsRequired"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsUnloadAssetsRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsUnloadAssetsRequired"), value);
        }

        public static event Delegates.set_IsUnloadAssetsRequired_NormalArgs set_IsUnloadAssetsRequired
        {
            add => HookEndpointManager.Add<Delegates.set_IsUnloadAssetsRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsUnloadAssetsRequired"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsUnloadAssetsRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsUnloadAssetsRequired"), value);
        }

        public static event Delegates.get_IsGarbageCollectRequired_NormalArgs get_IsGarbageCollectRequired
        {
            add => HookEndpointManager.Add<Delegates.get_IsGarbageCollectRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsGarbageCollectRequired"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsGarbageCollectRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsGarbageCollectRequired"), value);
        }

        public static event Delegates.set_IsGarbageCollectRequired_NormalArgs set_IsGarbageCollectRequired
        {
            add => HookEndpointManager.Add<Delegates.set_IsGarbageCollectRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsGarbageCollectRequired"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsGarbageCollectRequired_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsGarbageCollectRequired"), value);
        }

        public static event Delegates.get_IsFinished_NormalArgs get_IsFinished
        {
            add => HookEndpointManager.Add<Delegates.get_IsFinished_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFinished"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsFinished_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFinished"), value);
        }

        public static event Delegates.set_IsFinished_NormalArgs set_IsFinished
        {
            add => HookEndpointManager.Add<Delegates.set_IsFinished_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFinished"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsFinished_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFinished"), value);
        }

        public static event Delegates.get_BeginTime_NormalArgs get_BeginTime
        {
            add => HookEndpointManager.Add<Delegates.get_BeginTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_BeginTime"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BeginTime_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_BeginTime"), value);
        }

        public static event On.SceneLoad.hook_Begin Begin
        {
            add => On.SceneLoad.Begin += value;
            remove => On.SceneLoad.Begin -= value;
        }

        public static event On.SceneLoad.hook_BeginRoutine BeginRoutine
        {
            add => On.SceneLoad.BeginRoutine += value;
            remove => On.SceneLoad.BeginRoutine -= value;
        }
    }
}