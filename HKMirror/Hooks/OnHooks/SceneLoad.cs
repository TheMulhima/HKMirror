using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for SceneLoad class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneLoad
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_TargetSceneName()
{
if (!HookedList.Contains("get_TargetSceneName"))
{
HookedList.Add("get_TargetSceneName");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_TargetSceneName", true), get_TargetSceneName);

}
}
internal static event Delegates.get_TargetSceneName_BeforeArgs _beforeget_TargetSceneName;
internal static event Delegates.get_TargetSceneName_AfterArgs _afterget_TargetSceneName;
private static string get_TargetSceneName(Func<SceneLoad, string> orig, SceneLoad self)
{
Delegates.Params_get_TargetSceneName @params = new() 
{
self = self
};
if (_beforeget_TargetSceneName != null)
{
foreach (Delegates.get_TargetSceneName_BeforeArgs toInvoke in _beforeget_TargetSceneName.GetInvocationList())
{
try
{
_beforeget_TargetSceneName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_TargetSceneName != null)
{
foreach (Delegates.get_TargetSceneName_AfterArgs toInvoke in _afterget_TargetSceneName.GetInvocationList())
{
try
{
retVal = _afterget_TargetSceneName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_IsFetchAllowed()
{
if (!HookedList.Contains("get_IsFetchAllowed"))
{
HookedList.Add("get_IsFetchAllowed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFetchAllowed", true), get_IsFetchAllowed);

}
}
internal static event Delegates.get_IsFetchAllowed_BeforeArgs _beforeget_IsFetchAllowed;
internal static event Delegates.get_IsFetchAllowed_AfterArgs _afterget_IsFetchAllowed;
private static bool get_IsFetchAllowed(Func<SceneLoad, bool> orig, SceneLoad self)
{
Delegates.Params_get_IsFetchAllowed @params = new() 
{
self = self
};
if (_beforeget_IsFetchAllowed != null)
{
foreach (Delegates.get_IsFetchAllowed_BeforeArgs toInvoke in _beforeget_IsFetchAllowed.GetInvocationList())
{
try
{
_beforeget_IsFetchAllowed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsFetchAllowed != null)
{
foreach (Delegates.get_IsFetchAllowed_AfterArgs toInvoke in _afterget_IsFetchAllowed.GetInvocationList())
{
try
{
retVal = _afterget_IsFetchAllowed.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsFetchAllowed()
{
if (!HookedList.Contains("set_IsFetchAllowed"))
{
HookedList.Add("set_IsFetchAllowed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFetchAllowed", true), set_IsFetchAllowed);

}
}
internal static event Delegates.set_IsFetchAllowed_BeforeArgs _beforeset_IsFetchAllowed;
internal static event Delegates.set_IsFetchAllowed_AfterArgs _afterset_IsFetchAllowed;
private static void set_IsFetchAllowed(Action<SceneLoad,  bool> orig, SceneLoad self,  bool value)
{
Delegates.Params_set_IsFetchAllowed @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsFetchAllowed != null)
{
foreach (Delegates.set_IsFetchAllowed_BeforeArgs toInvoke in _beforeset_IsFetchAllowed.GetInvocationList())
{
try
{
_beforeset_IsFetchAllowed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsFetchAllowed != null)
{
foreach (Delegates.set_IsFetchAllowed_AfterArgs toInvoke in _afterset_IsFetchAllowed.GetInvocationList())
{
try
{
_afterset_IsFetchAllowed.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsActivationAllowed()
{
if (!HookedList.Contains("get_IsActivationAllowed"))
{
HookedList.Add("get_IsActivationAllowed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsActivationAllowed", true), get_IsActivationAllowed);

}
}
internal static event Delegates.get_IsActivationAllowed_BeforeArgs _beforeget_IsActivationAllowed;
internal static event Delegates.get_IsActivationAllowed_AfterArgs _afterget_IsActivationAllowed;
private static bool get_IsActivationAllowed(Func<SceneLoad, bool> orig, SceneLoad self)
{
Delegates.Params_get_IsActivationAllowed @params = new() 
{
self = self
};
if (_beforeget_IsActivationAllowed != null)
{
foreach (Delegates.get_IsActivationAllowed_BeforeArgs toInvoke in _beforeget_IsActivationAllowed.GetInvocationList())
{
try
{
_beforeget_IsActivationAllowed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsActivationAllowed != null)
{
foreach (Delegates.get_IsActivationAllowed_AfterArgs toInvoke in _afterget_IsActivationAllowed.GetInvocationList())
{
try
{
retVal = _afterget_IsActivationAllowed.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsActivationAllowed()
{
if (!HookedList.Contains("set_IsActivationAllowed"))
{
HookedList.Add("set_IsActivationAllowed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsActivationAllowed", true), set_IsActivationAllowed);

}
}
internal static event Delegates.set_IsActivationAllowed_BeforeArgs _beforeset_IsActivationAllowed;
internal static event Delegates.set_IsActivationAllowed_AfterArgs _afterset_IsActivationAllowed;
private static void set_IsActivationAllowed(Action<SceneLoad,  bool> orig, SceneLoad self,  bool value)
{
Delegates.Params_set_IsActivationAllowed @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsActivationAllowed != null)
{
foreach (Delegates.set_IsActivationAllowed_BeforeArgs toInvoke in _beforeset_IsActivationAllowed.GetInvocationList())
{
try
{
_beforeset_IsActivationAllowed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsActivationAllowed != null)
{
foreach (Delegates.set_IsActivationAllowed_AfterArgs toInvoke in _afterset_IsActivationAllowed.GetInvocationList())
{
try
{
_afterset_IsActivationAllowed.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsUnloadAssetsRequired()
{
if (!HookedList.Contains("get_IsUnloadAssetsRequired"))
{
HookedList.Add("get_IsUnloadAssetsRequired");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsUnloadAssetsRequired", true), get_IsUnloadAssetsRequired);

}
}
internal static event Delegates.get_IsUnloadAssetsRequired_BeforeArgs _beforeget_IsUnloadAssetsRequired;
internal static event Delegates.get_IsUnloadAssetsRequired_AfterArgs _afterget_IsUnloadAssetsRequired;
private static bool get_IsUnloadAssetsRequired(Func<SceneLoad, bool> orig, SceneLoad self)
{
Delegates.Params_get_IsUnloadAssetsRequired @params = new() 
{
self = self
};
if (_beforeget_IsUnloadAssetsRequired != null)
{
foreach (Delegates.get_IsUnloadAssetsRequired_BeforeArgs toInvoke in _beforeget_IsUnloadAssetsRequired.GetInvocationList())
{
try
{
_beforeget_IsUnloadAssetsRequired?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsUnloadAssetsRequired != null)
{
foreach (Delegates.get_IsUnloadAssetsRequired_AfterArgs toInvoke in _afterget_IsUnloadAssetsRequired.GetInvocationList())
{
try
{
retVal = _afterget_IsUnloadAssetsRequired.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsUnloadAssetsRequired()
{
if (!HookedList.Contains("set_IsUnloadAssetsRequired"))
{
HookedList.Add("set_IsUnloadAssetsRequired");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsUnloadAssetsRequired", true), set_IsUnloadAssetsRequired);

}
}
internal static event Delegates.set_IsUnloadAssetsRequired_BeforeArgs _beforeset_IsUnloadAssetsRequired;
internal static event Delegates.set_IsUnloadAssetsRequired_AfterArgs _afterset_IsUnloadAssetsRequired;
private static void set_IsUnloadAssetsRequired(Action<SceneLoad,  bool> orig, SceneLoad self,  bool value)
{
Delegates.Params_set_IsUnloadAssetsRequired @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsUnloadAssetsRequired != null)
{
foreach (Delegates.set_IsUnloadAssetsRequired_BeforeArgs toInvoke in _beforeset_IsUnloadAssetsRequired.GetInvocationList())
{
try
{
_beforeset_IsUnloadAssetsRequired?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsUnloadAssetsRequired != null)
{
foreach (Delegates.set_IsUnloadAssetsRequired_AfterArgs toInvoke in _afterset_IsUnloadAssetsRequired.GetInvocationList())
{
try
{
_afterset_IsUnloadAssetsRequired.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsGarbageCollectRequired()
{
if (!HookedList.Contains("get_IsGarbageCollectRequired"))
{
HookedList.Add("get_IsGarbageCollectRequired");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsGarbageCollectRequired", true), get_IsGarbageCollectRequired);

}
}
internal static event Delegates.get_IsGarbageCollectRequired_BeforeArgs _beforeget_IsGarbageCollectRequired;
internal static event Delegates.get_IsGarbageCollectRequired_AfterArgs _afterget_IsGarbageCollectRequired;
private static bool get_IsGarbageCollectRequired(Func<SceneLoad, bool> orig, SceneLoad self)
{
Delegates.Params_get_IsGarbageCollectRequired @params = new() 
{
self = self
};
if (_beforeget_IsGarbageCollectRequired != null)
{
foreach (Delegates.get_IsGarbageCollectRequired_BeforeArgs toInvoke in _beforeget_IsGarbageCollectRequired.GetInvocationList())
{
try
{
_beforeget_IsGarbageCollectRequired?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsGarbageCollectRequired != null)
{
foreach (Delegates.get_IsGarbageCollectRequired_AfterArgs toInvoke in _afterget_IsGarbageCollectRequired.GetInvocationList())
{
try
{
retVal = _afterget_IsGarbageCollectRequired.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsGarbageCollectRequired()
{
if (!HookedList.Contains("set_IsGarbageCollectRequired"))
{
HookedList.Add("set_IsGarbageCollectRequired");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsGarbageCollectRequired", true), set_IsGarbageCollectRequired);

}
}
internal static event Delegates.set_IsGarbageCollectRequired_BeforeArgs _beforeset_IsGarbageCollectRequired;
internal static event Delegates.set_IsGarbageCollectRequired_AfterArgs _afterset_IsGarbageCollectRequired;
private static void set_IsGarbageCollectRequired(Action<SceneLoad,  bool> orig, SceneLoad self,  bool value)
{
Delegates.Params_set_IsGarbageCollectRequired @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsGarbageCollectRequired != null)
{
foreach (Delegates.set_IsGarbageCollectRequired_BeforeArgs toInvoke in _beforeset_IsGarbageCollectRequired.GetInvocationList())
{
try
{
_beforeset_IsGarbageCollectRequired?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsGarbageCollectRequired != null)
{
foreach (Delegates.set_IsGarbageCollectRequired_AfterArgs toInvoke in _afterset_IsGarbageCollectRequired.GetInvocationList())
{
try
{
_afterset_IsGarbageCollectRequired.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_IsFinished()
{
if (!HookedList.Contains("get_IsFinished"))
{
HookedList.Add("get_IsFinished");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFinished", true), get_IsFinished);

}
}
internal static event Delegates.get_IsFinished_BeforeArgs _beforeget_IsFinished;
internal static event Delegates.get_IsFinished_AfterArgs _afterget_IsFinished;
private static bool get_IsFinished(Func<SceneLoad, bool> orig, SceneLoad self)
{
Delegates.Params_get_IsFinished @params = new() 
{
self = self
};
if (_beforeget_IsFinished != null)
{
foreach (Delegates.get_IsFinished_BeforeArgs toInvoke in _beforeget_IsFinished.GetInvocationList())
{
try
{
_beforeget_IsFinished?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_IsFinished != null)
{
foreach (Delegates.get_IsFinished_AfterArgs toInvoke in _afterget_IsFinished.GetInvocationList())
{
try
{
retVal = _afterget_IsFinished.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_IsFinished()
{
if (!HookedList.Contains("set_IsFinished"))
{
HookedList.Add("set_IsFinished");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFinished", true), set_IsFinished);

}
}
internal static event Delegates.set_IsFinished_BeforeArgs _beforeset_IsFinished;
internal static event Delegates.set_IsFinished_AfterArgs _afterset_IsFinished;
private static void set_IsFinished(Action<SceneLoad,  bool> orig, SceneLoad self,  bool value)
{
Delegates.Params_set_IsFinished @params = new() 
{
self = self
, value = value
};
if (_beforeset_IsFinished != null)
{
foreach (Delegates.set_IsFinished_BeforeArgs toInvoke in _beforeset_IsFinished.GetInvocationList())
{
try
{
_beforeset_IsFinished?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_IsFinished != null)
{
foreach (Delegates.set_IsFinished_AfterArgs toInvoke in _afterset_IsFinished.GetInvocationList())
{
try
{
_afterset_IsFinished.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_BeginTime()
{
if (!HookedList.Contains("get_BeginTime"))
{
HookedList.Add("get_BeginTime");
new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_BeginTime", true), get_BeginTime);

}
}
internal static event Delegates.get_BeginTime_BeforeArgs _beforeget_BeginTime;
internal static event Delegates.get_BeginTime_AfterArgs _afterget_BeginTime;
private static float? get_BeginTime(Func<SceneLoad, float?> orig, SceneLoad self)
{
Delegates.Params_get_BeginTime @params = new() 
{
self = self
};
if (_beforeget_BeginTime != null)
{
foreach (Delegates.get_BeginTime_BeforeArgs toInvoke in _beforeget_BeginTime.GetInvocationList())
{
try
{
_beforeget_BeginTime?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_BeginTime != null)
{
foreach (Delegates.get_BeginTime_AfterArgs toInvoke in _afterget_BeginTime.GetInvocationList())
{
try
{
retVal = _afterget_BeginTime.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookRecordBeginTime()
{
if (!HookedList.Contains("RecordBeginTime"))
{
HookedList.Add("RecordBeginTime");
On.SceneLoad.RecordBeginTime += RecordBeginTime;

}
}
internal static event Delegates.RecordBeginTime_BeforeArgs _beforeRecordBeginTime;
internal static event Delegates.RecordBeginTime_AfterArgs _afterRecordBeginTime;
private static void RecordBeginTime(On.SceneLoad.orig_RecordBeginTime orig,SceneLoad self,  SceneLoad.Phases phase)
{
Delegates.Params_RecordBeginTime @params = new() 
{
self = self
, phase = phase
};
if (_beforeRecordBeginTime != null)
{
foreach (Delegates.RecordBeginTime_BeforeArgs toInvoke in _beforeRecordBeginTime.GetInvocationList())
{
try
{
_beforeRecordBeginTime?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
phase = @params.phase;
orig(self, phase);
if (_afterRecordBeginTime != null)
{
foreach (Delegates.RecordBeginTime_AfterArgs toInvoke in _afterRecordBeginTime.GetInvocationList())
{
try
{
_afterRecordBeginTime.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRecordEndTime()
{
if (!HookedList.Contains("RecordEndTime"))
{
HookedList.Add("RecordEndTime");
On.SceneLoad.RecordEndTime += RecordEndTime;

}
}
internal static event Delegates.RecordEndTime_BeforeArgs _beforeRecordEndTime;
internal static event Delegates.RecordEndTime_AfterArgs _afterRecordEndTime;
private static void RecordEndTime(On.SceneLoad.orig_RecordEndTime orig,SceneLoad self,  SceneLoad.Phases phase)
{
Delegates.Params_RecordEndTime @params = new() 
{
self = self
, phase = phase
};
if (_beforeRecordEndTime != null)
{
foreach (Delegates.RecordEndTime_BeforeArgs toInvoke in _beforeRecordEndTime.GetInvocationList())
{
try
{
_beforeRecordEndTime?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
phase = @params.phase;
orig(self, phase);
if (_afterRecordEndTime != null)
{
foreach (Delegates.RecordEndTime_AfterArgs toInvoke in _afterRecordEndTime.GetInvocationList())
{
try
{
_afterRecordEndTime.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetDuration()
{
if (!HookedList.Contains("GetDuration"))
{
HookedList.Add("GetDuration");
On.SceneLoad.GetDuration += GetDuration;

}
}
internal static event Delegates.GetDuration_BeforeArgs _beforeGetDuration;
internal static event Delegates.GetDuration_AfterArgs _afterGetDuration;
private static float? GetDuration(On.SceneLoad.orig_GetDuration orig,SceneLoad self,  SceneLoad.Phases phase)
{
Delegates.Params_GetDuration @params = new() 
{
self = self
, phase = phase
};
if (_beforeGetDuration != null)
{
foreach (Delegates.GetDuration_BeforeArgs toInvoke in _beforeGetDuration.GetInvocationList())
{
try
{
_beforeGetDuration?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
phase = @params.phase;
var retVal = orig(self, phase);
if (_afterGetDuration != null)
{
foreach (Delegates.GetDuration_AfterArgs toInvoke in _afterGetDuration.GetInvocationList())
{
try
{
retVal = _afterGetDuration.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookBegin()
{
if (!HookedList.Contains("Begin"))
{
HookedList.Add("Begin");
On.SceneLoad.Begin += Begin;

}
}
internal static event Delegates.Begin_BeforeArgs _beforeBegin;
internal static event Delegates.Begin_AfterArgs _afterBegin;
private static void Begin(On.SceneLoad.orig_Begin orig,SceneLoad self)
{
Delegates.Params_Begin @params = new() 
{
self = self
};
if (_beforeBegin != null)
{
foreach (Delegates.Begin_BeforeArgs toInvoke in _beforeBegin.GetInvocationList())
{
try
{
_beforeBegin?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBegin != null)
{
foreach (Delegates.Begin_AfterArgs toInvoke in _afterBegin.GetInvocationList())
{
try
{
_afterBegin.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBeginRoutine()
{
if (!HookedList.Contains("BeginRoutine"))
{
HookedList.Add("BeginRoutine");
On.SceneLoad.BeginRoutine += BeginRoutine;

}
}
internal static event Delegates.BeginRoutine_BeforeArgs _beforeBeginRoutine;
private static System.Collections.IEnumerator BeginRoutine(On.SceneLoad.orig_BeginRoutine orig,SceneLoad self)
{
Delegates.Params_BeginRoutine @params = new() 
{
self = self
};
if (_beforeBeginRoutine != null)
{
foreach (Delegates.BeginRoutine_BeforeArgs toInvoke in _beforeBeginRoutine.GetInvocationList())
{
try
{
_beforeBeginRoutine?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_TargetSceneName
{
public SceneLoad self;
}
public delegate void get_TargetSceneName_BeforeArgs(Params_get_TargetSceneName args);
public delegate string get_TargetSceneName_AfterArgs(Params_get_TargetSceneName args, string ret);
public delegate string get_TargetSceneName_WithArgs (Func<SceneLoad, string> orig, SceneLoad self);
public sealed class Params_get_IsFetchAllowed
{
public SceneLoad self;
}
public delegate void get_IsFetchAllowed_BeforeArgs(Params_get_IsFetchAllowed args);
public delegate bool get_IsFetchAllowed_AfterArgs(Params_get_IsFetchAllowed args, bool ret);
public delegate bool get_IsFetchAllowed_WithArgs (Func<SceneLoad, bool> orig, SceneLoad self);
public sealed class Params_set_IsFetchAllowed
{
public SceneLoad self;
public bool value;
}
public delegate void set_IsFetchAllowed_BeforeArgs(Params_set_IsFetchAllowed args);
public delegate void set_IsFetchAllowed_AfterArgs(Params_set_IsFetchAllowed args);
public delegate void set_IsFetchAllowed_WithArgs (Action<SceneLoad,  bool> orig, SceneLoad self,  bool value);
public sealed class Params_get_IsActivationAllowed
{
public SceneLoad self;
}
public delegate void get_IsActivationAllowed_BeforeArgs(Params_get_IsActivationAllowed args);
public delegate bool get_IsActivationAllowed_AfterArgs(Params_get_IsActivationAllowed args, bool ret);
public delegate bool get_IsActivationAllowed_WithArgs (Func<SceneLoad, bool> orig, SceneLoad self);
public sealed class Params_set_IsActivationAllowed
{
public SceneLoad self;
public bool value;
}
public delegate void set_IsActivationAllowed_BeforeArgs(Params_set_IsActivationAllowed args);
public delegate void set_IsActivationAllowed_AfterArgs(Params_set_IsActivationAllowed args);
public delegate void set_IsActivationAllowed_WithArgs (Action<SceneLoad,  bool> orig, SceneLoad self,  bool value);
public sealed class Params_get_IsUnloadAssetsRequired
{
public SceneLoad self;
}
public delegate void get_IsUnloadAssetsRequired_BeforeArgs(Params_get_IsUnloadAssetsRequired args);
public delegate bool get_IsUnloadAssetsRequired_AfterArgs(Params_get_IsUnloadAssetsRequired args, bool ret);
public delegate bool get_IsUnloadAssetsRequired_WithArgs (Func<SceneLoad, bool> orig, SceneLoad self);
public sealed class Params_set_IsUnloadAssetsRequired
{
public SceneLoad self;
public bool value;
}
public delegate void set_IsUnloadAssetsRequired_BeforeArgs(Params_set_IsUnloadAssetsRequired args);
public delegate void set_IsUnloadAssetsRequired_AfterArgs(Params_set_IsUnloadAssetsRequired args);
public delegate void set_IsUnloadAssetsRequired_WithArgs (Action<SceneLoad,  bool> orig, SceneLoad self,  bool value);
public sealed class Params_get_IsGarbageCollectRequired
{
public SceneLoad self;
}
public delegate void get_IsGarbageCollectRequired_BeforeArgs(Params_get_IsGarbageCollectRequired args);
public delegate bool get_IsGarbageCollectRequired_AfterArgs(Params_get_IsGarbageCollectRequired args, bool ret);
public delegate bool get_IsGarbageCollectRequired_WithArgs (Func<SceneLoad, bool> orig, SceneLoad self);
public sealed class Params_set_IsGarbageCollectRequired
{
public SceneLoad self;
public bool value;
}
public delegate void set_IsGarbageCollectRequired_BeforeArgs(Params_set_IsGarbageCollectRequired args);
public delegate void set_IsGarbageCollectRequired_AfterArgs(Params_set_IsGarbageCollectRequired args);
public delegate void set_IsGarbageCollectRequired_WithArgs (Action<SceneLoad,  bool> orig, SceneLoad self,  bool value);
public sealed class Params_get_IsFinished
{
public SceneLoad self;
}
public delegate void get_IsFinished_BeforeArgs(Params_get_IsFinished args);
public delegate bool get_IsFinished_AfterArgs(Params_get_IsFinished args, bool ret);
public delegate bool get_IsFinished_WithArgs (Func<SceneLoad, bool> orig, SceneLoad self);
public sealed class Params_set_IsFinished
{
public SceneLoad self;
public bool value;
}
public delegate void set_IsFinished_BeforeArgs(Params_set_IsFinished args);
public delegate void set_IsFinished_AfterArgs(Params_set_IsFinished args);
public delegate void set_IsFinished_WithArgs (Action<SceneLoad,  bool> orig, SceneLoad self,  bool value);
public sealed class Params_get_BeginTime
{
public SceneLoad self;
}
public delegate void get_BeginTime_BeforeArgs(Params_get_BeginTime args);
public delegate float? get_BeginTime_AfterArgs(Params_get_BeginTime args, float? ret);
public delegate float? get_BeginTime_WithArgs (Func<SceneLoad, float?> orig, SceneLoad self);
public sealed class Params_RecordBeginTime
{
public SceneLoad self;
public SceneLoad.Phases phase;
}
public delegate void RecordBeginTime_BeforeArgs(Params_RecordBeginTime args);
public delegate void RecordBeginTime_AfterArgs(Params_RecordBeginTime args);
public delegate void RecordBeginTime_WithArgs (Action<SceneLoad,  SceneLoad.Phases> orig, SceneLoad self,  SceneLoad.Phases phase);
public sealed class Params_RecordEndTime
{
public SceneLoad self;
public SceneLoad.Phases phase;
}
public delegate void RecordEndTime_BeforeArgs(Params_RecordEndTime args);
public delegate void RecordEndTime_AfterArgs(Params_RecordEndTime args);
public delegate void RecordEndTime_WithArgs (Action<SceneLoad,  SceneLoad.Phases> orig, SceneLoad self,  SceneLoad.Phases phase);
public sealed class Params_GetDuration
{
public SceneLoad self;
public SceneLoad.Phases phase;
}
public delegate void GetDuration_BeforeArgs(Params_GetDuration args);
public delegate float? GetDuration_AfterArgs(Params_GetDuration args, float? ret);
public delegate float? GetDuration_WithArgs (Func<SceneLoad,  SceneLoad.Phases, float?> orig, SceneLoad self,  SceneLoad.Phases phase);
public sealed class Params_Begin
{
public SceneLoad self;
}
public delegate void Begin_BeforeArgs(Params_Begin args);
public delegate void Begin_AfterArgs(Params_Begin args);
public delegate void Begin_WithArgs (Action<SceneLoad> orig, SceneLoad self);
public sealed class Params_BeginRoutine
{
public SceneLoad self;
}
public delegate void BeginRoutine_BeforeArgs(Params_BeginRoutine args);
public delegate System.Collections.IEnumerator BeginRoutine_AfterArgs(Params_BeginRoutine args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator BeginRoutine_WithArgs (Func<SceneLoad, System.Collections.IEnumerator> orig, SceneLoad self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_TargetSceneName_BeforeArgs get_TargetSceneName
{
add
{

HookHandler._beforeget_TargetSceneName += value;
HookHandler.Hookget_TargetSceneName();
}
remove => HookHandler._beforeget_TargetSceneName -= value;
}
public static event Delegates.get_IsFetchAllowed_BeforeArgs get_IsFetchAllowed
{
add
{

HookHandler._beforeget_IsFetchAllowed += value;
HookHandler.Hookget_IsFetchAllowed();
}
remove => HookHandler._beforeget_IsFetchAllowed -= value;
}
public static event Delegates.set_IsFetchAllowed_BeforeArgs set_IsFetchAllowed
{
add
{

HookHandler._beforeset_IsFetchAllowed += value;
HookHandler.Hookset_IsFetchAllowed();
}
remove => HookHandler._beforeset_IsFetchAllowed -= value;
}
public static event Delegates.get_IsActivationAllowed_BeforeArgs get_IsActivationAllowed
{
add
{

HookHandler._beforeget_IsActivationAllowed += value;
HookHandler.Hookget_IsActivationAllowed();
}
remove => HookHandler._beforeget_IsActivationAllowed -= value;
}
public static event Delegates.set_IsActivationAllowed_BeforeArgs set_IsActivationAllowed
{
add
{

HookHandler._beforeset_IsActivationAllowed += value;
HookHandler.Hookset_IsActivationAllowed();
}
remove => HookHandler._beforeset_IsActivationAllowed -= value;
}
public static event Delegates.get_IsUnloadAssetsRequired_BeforeArgs get_IsUnloadAssetsRequired
{
add
{

HookHandler._beforeget_IsUnloadAssetsRequired += value;
HookHandler.Hookget_IsUnloadAssetsRequired();
}
remove => HookHandler._beforeget_IsUnloadAssetsRequired -= value;
}
public static event Delegates.set_IsUnloadAssetsRequired_BeforeArgs set_IsUnloadAssetsRequired
{
add
{

HookHandler._beforeset_IsUnloadAssetsRequired += value;
HookHandler.Hookset_IsUnloadAssetsRequired();
}
remove => HookHandler._beforeset_IsUnloadAssetsRequired -= value;
}
public static event Delegates.get_IsGarbageCollectRequired_BeforeArgs get_IsGarbageCollectRequired
{
add
{

HookHandler._beforeget_IsGarbageCollectRequired += value;
HookHandler.Hookget_IsGarbageCollectRequired();
}
remove => HookHandler._beforeget_IsGarbageCollectRequired -= value;
}
public static event Delegates.set_IsGarbageCollectRequired_BeforeArgs set_IsGarbageCollectRequired
{
add
{

HookHandler._beforeset_IsGarbageCollectRequired += value;
HookHandler.Hookset_IsGarbageCollectRequired();
}
remove => HookHandler._beforeset_IsGarbageCollectRequired -= value;
}
public static event Delegates.get_IsFinished_BeforeArgs get_IsFinished
{
add
{

HookHandler._beforeget_IsFinished += value;
HookHandler.Hookget_IsFinished();
}
remove => HookHandler._beforeget_IsFinished -= value;
}
public static event Delegates.set_IsFinished_BeforeArgs set_IsFinished
{
add
{

HookHandler._beforeset_IsFinished += value;
HookHandler.Hookset_IsFinished();
}
remove => HookHandler._beforeset_IsFinished -= value;
}
public static event Delegates.get_BeginTime_BeforeArgs get_BeginTime
{
add
{

HookHandler._beforeget_BeginTime += value;
HookHandler.Hookget_BeginTime();
}
remove => HookHandler._beforeget_BeginTime -= value;
}
public static event Delegates.RecordBeginTime_BeforeArgs RecordBeginTime
{
add
{

HookHandler._beforeRecordBeginTime += value;
HookHandler.HookRecordBeginTime();
}
remove => HookHandler._beforeRecordBeginTime -= value;
}
public static event Delegates.RecordEndTime_BeforeArgs RecordEndTime
{
add
{

HookHandler._beforeRecordEndTime += value;
HookHandler.HookRecordEndTime();
}
remove => HookHandler._beforeRecordEndTime -= value;
}
public static event Delegates.GetDuration_BeforeArgs GetDuration
{
add
{

HookHandler._beforeGetDuration += value;
HookHandler.HookGetDuration();
}
remove => HookHandler._beforeGetDuration -= value;
}
public static event Delegates.Begin_BeforeArgs Begin
{
add
{

HookHandler._beforeBegin += value;
HookHandler.HookBegin();
}
remove => HookHandler._beforeBegin -= value;
}
public static event Delegates.BeginRoutine_BeforeArgs BeginRoutine
{
add
{

HookHandler._beforeBeginRoutine += value;
HookHandler.HookBeginRoutine();
}
remove => HookHandler._beforeBeginRoutine -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_TargetSceneName_AfterArgs get_TargetSceneName
{
add
{

HookHandler._afterget_TargetSceneName += value;
HookHandler.Hookget_TargetSceneName();
}
remove => HookHandler._afterget_TargetSceneName -= value;
}
public static event Delegates.get_IsFetchAllowed_AfterArgs get_IsFetchAllowed
{
add
{

HookHandler._afterget_IsFetchAllowed += value;
HookHandler.Hookget_IsFetchAllowed();
}
remove => HookHandler._afterget_IsFetchAllowed -= value;
}
public static event Delegates.set_IsFetchAllowed_AfterArgs set_IsFetchAllowed
{
add
{

HookHandler._afterset_IsFetchAllowed += value;
HookHandler.Hookset_IsFetchAllowed();
}
remove => HookHandler._afterset_IsFetchAllowed -= value;
}
public static event Delegates.get_IsActivationAllowed_AfterArgs get_IsActivationAllowed
{
add
{

HookHandler._afterget_IsActivationAllowed += value;
HookHandler.Hookget_IsActivationAllowed();
}
remove => HookHandler._afterget_IsActivationAllowed -= value;
}
public static event Delegates.set_IsActivationAllowed_AfterArgs set_IsActivationAllowed
{
add
{

HookHandler._afterset_IsActivationAllowed += value;
HookHandler.Hookset_IsActivationAllowed();
}
remove => HookHandler._afterset_IsActivationAllowed -= value;
}
public static event Delegates.get_IsUnloadAssetsRequired_AfterArgs get_IsUnloadAssetsRequired
{
add
{

HookHandler._afterget_IsUnloadAssetsRequired += value;
HookHandler.Hookget_IsUnloadAssetsRequired();
}
remove => HookHandler._afterget_IsUnloadAssetsRequired -= value;
}
public static event Delegates.set_IsUnloadAssetsRequired_AfterArgs set_IsUnloadAssetsRequired
{
add
{

HookHandler._afterset_IsUnloadAssetsRequired += value;
HookHandler.Hookset_IsUnloadAssetsRequired();
}
remove => HookHandler._afterset_IsUnloadAssetsRequired -= value;
}
public static event Delegates.get_IsGarbageCollectRequired_AfterArgs get_IsGarbageCollectRequired
{
add
{

HookHandler._afterget_IsGarbageCollectRequired += value;
HookHandler.Hookget_IsGarbageCollectRequired();
}
remove => HookHandler._afterget_IsGarbageCollectRequired -= value;
}
public static event Delegates.set_IsGarbageCollectRequired_AfterArgs set_IsGarbageCollectRequired
{
add
{

HookHandler._afterset_IsGarbageCollectRequired += value;
HookHandler.Hookset_IsGarbageCollectRequired();
}
remove => HookHandler._afterset_IsGarbageCollectRequired -= value;
}
public static event Delegates.get_IsFinished_AfterArgs get_IsFinished
{
add
{

HookHandler._afterget_IsFinished += value;
HookHandler.Hookget_IsFinished();
}
remove => HookHandler._afterget_IsFinished -= value;
}
public static event Delegates.set_IsFinished_AfterArgs set_IsFinished
{
add
{

HookHandler._afterset_IsFinished += value;
HookHandler.Hookset_IsFinished();
}
remove => HookHandler._afterset_IsFinished -= value;
}
public static event Delegates.get_BeginTime_AfterArgs get_BeginTime
{
add
{

HookHandler._afterget_BeginTime += value;
HookHandler.Hookget_BeginTime();
}
remove => HookHandler._afterget_BeginTime -= value;
}
public static event Delegates.RecordBeginTime_AfterArgs RecordBeginTime
{
add
{

HookHandler._afterRecordBeginTime += value;
HookHandler.HookRecordBeginTime();
}
remove => HookHandler._afterRecordBeginTime -= value;
}
public static event Delegates.RecordEndTime_AfterArgs RecordEndTime
{
add
{

HookHandler._afterRecordEndTime += value;
HookHandler.HookRecordEndTime();
}
remove => HookHandler._afterRecordEndTime -= value;
}
public static event Delegates.GetDuration_AfterArgs GetDuration
{
add
{

HookHandler._afterGetDuration += value;
HookHandler.HookGetDuration();
}
remove => HookHandler._afterGetDuration -= value;
}
public static event Delegates.Begin_AfterArgs Begin
{
add
{

HookHandler._afterBegin += value;
HookHandler.HookBegin();
}
remove => HookHandler._afterBegin -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_TargetSceneName_WithArgs get_TargetSceneName
{
add => HookEndpointManager.Add<Delegates.get_TargetSceneName_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_TargetSceneName", true), value);
remove => HookEndpointManager.Remove<Delegates.get_TargetSceneName_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_TargetSceneName", true), value);
}
public static event Delegates.get_IsFetchAllowed_WithArgs get_IsFetchAllowed
{
add => HookEndpointManager.Add<Delegates.get_IsFetchAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFetchAllowed", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsFetchAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFetchAllowed", true), value);
}
public static event Delegates.set_IsFetchAllowed_WithArgs set_IsFetchAllowed
{
add => HookEndpointManager.Add<Delegates.set_IsFetchAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFetchAllowed", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsFetchAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFetchAllowed", true), value);
}
public static event Delegates.get_IsActivationAllowed_WithArgs get_IsActivationAllowed
{
add => HookEndpointManager.Add<Delegates.get_IsActivationAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsActivationAllowed", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsActivationAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsActivationAllowed", true), value);
}
public static event Delegates.set_IsActivationAllowed_WithArgs set_IsActivationAllowed
{
add => HookEndpointManager.Add<Delegates.set_IsActivationAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsActivationAllowed", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsActivationAllowed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsActivationAllowed", true), value);
}
public static event Delegates.get_IsUnloadAssetsRequired_WithArgs get_IsUnloadAssetsRequired
{
add => HookEndpointManager.Add<Delegates.get_IsUnloadAssetsRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsUnloadAssetsRequired", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsUnloadAssetsRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsUnloadAssetsRequired", true), value);
}
public static event Delegates.set_IsUnloadAssetsRequired_WithArgs set_IsUnloadAssetsRequired
{
add => HookEndpointManager.Add<Delegates.set_IsUnloadAssetsRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsUnloadAssetsRequired", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsUnloadAssetsRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsUnloadAssetsRequired", true), value);
}
public static event Delegates.get_IsGarbageCollectRequired_WithArgs get_IsGarbageCollectRequired
{
add => HookEndpointManager.Add<Delegates.get_IsGarbageCollectRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsGarbageCollectRequired", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsGarbageCollectRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsGarbageCollectRequired", true), value);
}
public static event Delegates.set_IsGarbageCollectRequired_WithArgs set_IsGarbageCollectRequired
{
add => HookEndpointManager.Add<Delegates.set_IsGarbageCollectRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsGarbageCollectRequired", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsGarbageCollectRequired_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsGarbageCollectRequired", true), value);
}
public static event Delegates.get_IsFinished_WithArgs get_IsFinished
{
add => HookEndpointManager.Add<Delegates.get_IsFinished_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFinished", true), value);
remove => HookEndpointManager.Remove<Delegates.get_IsFinished_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_IsFinished", true), value);
}
public static event Delegates.set_IsFinished_WithArgs set_IsFinished
{
add => HookEndpointManager.Add<Delegates.set_IsFinished_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFinished", true), value);
remove => HookEndpointManager.Remove<Delegates.set_IsFinished_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "set_IsFinished", true), value);
}
public static event Delegates.get_BeginTime_WithArgs get_BeginTime
{
add => HookEndpointManager.Add<Delegates.get_BeginTime_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_BeginTime", true), value);
remove => HookEndpointManager.Remove<Delegates.get_BeginTime_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(SceneLoad), "get_BeginTime", true), value);
}
public static event On.SceneLoad.hook_RecordBeginTime RecordBeginTime
{
add => On.SceneLoad.RecordBeginTime += value;
remove => On.SceneLoad.RecordBeginTime -= value;
}
public static event On.SceneLoad.hook_RecordEndTime RecordEndTime
{
add => On.SceneLoad.RecordEndTime += value;
remove => On.SceneLoad.RecordEndTime -= value;
}
public static event On.SceneLoad.hook_GetDuration GetDuration
{
add => On.SceneLoad.GetDuration += value;
remove => On.SceneLoad.GetDuration -= value;
}
public static event On.SceneLoad.hook_Begin Begin
{
add => On.SceneLoad.Begin += value;
remove => On.SceneLoad.Begin -= value;
}
public static event On.SceneLoad.hook_BeginRoutine BeginRoutine
{
add => On.SceneLoad.BeginRoutine += value;
remove => On.SceneLoad.BeginRoutine -= value;
}
}

}
