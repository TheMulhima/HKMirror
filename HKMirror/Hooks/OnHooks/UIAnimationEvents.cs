using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for UIAnimationEvents class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUIAnimationEvents
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.UIAnimationEvents.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.UIAnimationEvents.orig_OnEnable orig,UIAnimationEvents self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.UIAnimationEvents.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.UIAnimationEvents.orig_OnDisable orig,UIAnimationEvents self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAnimateIn()
{
if (!HookedList.Contains("AnimateIn"))
{
HookedList.Add("AnimateIn");
On.UIAnimationEvents.AnimateIn += AnimateIn;

}
}
internal static event Delegates.AnimateIn_BeforeArgs _beforeAnimateIn;
internal static event Delegates.AnimateIn_AfterArgs _afterAnimateIn;
private static void AnimateIn(On.UIAnimationEvents.orig_AnimateIn orig,UIAnimationEvents self)
{
Delegates.Params_AnimateIn @params = new() 
{
self = self
};
if (_beforeAnimateIn != null)
{
foreach (Delegates.AnimateIn_BeforeArgs toInvoke in _beforeAnimateIn.GetInvocationList())
{
try
{
_beforeAnimateIn?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAnimateIn != null)
{
foreach (Delegates.AnimateIn_AfterArgs toInvoke in _afterAnimateIn.GetInvocationList())
{
try
{
_afterAnimateIn.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAnimateOut()
{
if (!HookedList.Contains("AnimateOut"))
{
HookedList.Add("AnimateOut");
On.UIAnimationEvents.AnimateOut += AnimateOut;

}
}
internal static event Delegates.AnimateOut_BeforeArgs _beforeAnimateOut;
internal static event Delegates.AnimateOut_AfterArgs _afterAnimateOut;
private static void AnimateOut(On.UIAnimationEvents.orig_AnimateOut orig,UIAnimationEvents self)
{
Delegates.Params_AnimateOut @params = new() 
{
self = self
};
if (_beforeAnimateOut != null)
{
foreach (Delegates.AnimateOut_BeforeArgs toInvoke in _beforeAnimateOut.GetInvocationList())
{
try
{
_beforeAnimateOut?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAnimateOut != null)
{
foreach (Delegates.AnimateOut_AfterArgs toInvoke in _afterAnimateOut.GetInvocationList())
{
try
{
_afterAnimateOut.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnEnable
{
public UIAnimationEvents self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<UIAnimationEvents> orig, UIAnimationEvents self);
public sealed class Params_OnDisable
{
public UIAnimationEvents self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<UIAnimationEvents> orig, UIAnimationEvents self);
public sealed class Params_AnimateIn
{
public UIAnimationEvents self;
}
public delegate void AnimateIn_BeforeArgs(Params_AnimateIn args);
public delegate void AnimateIn_AfterArgs(Params_AnimateIn args);
public delegate void AnimateIn_WithArgs (Action<UIAnimationEvents> orig, UIAnimationEvents self);
public sealed class Params_AnimateOut
{
public UIAnimationEvents self;
}
public delegate void AnimateOut_BeforeArgs(Params_AnimateOut args);
public delegate void AnimateOut_AfterArgs(Params_AnimateOut args);
public delegate void AnimateOut_WithArgs (Action<UIAnimationEvents> orig, UIAnimationEvents self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.AnimateIn_BeforeArgs AnimateIn
{
add
{

HookHandler._beforeAnimateIn += value;
HookHandler.HookAnimateIn();
}
remove => HookHandler._beforeAnimateIn -= value;
}
public static event Delegates.AnimateOut_BeforeArgs AnimateOut
{
add
{

HookHandler._beforeAnimateOut += value;
HookHandler.HookAnimateOut();
}
remove => HookHandler._beforeAnimateOut -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.AnimateIn_AfterArgs AnimateIn
{
add
{

HookHandler._afterAnimateIn += value;
HookHandler.HookAnimateIn();
}
remove => HookHandler._afterAnimateIn -= value;
}
public static event Delegates.AnimateOut_AfterArgs AnimateOut
{
add
{

HookHandler._afterAnimateOut += value;
HookHandler.HookAnimateOut();
}
remove => HookHandler._afterAnimateOut -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.UIAnimationEvents.hook_OnEnable OnEnable
{
add => On.UIAnimationEvents.OnEnable += value;
remove => On.UIAnimationEvents.OnEnable -= value;
}
public static event On.UIAnimationEvents.hook_OnDisable OnDisable
{
add => On.UIAnimationEvents.OnDisable += value;
remove => On.UIAnimationEvents.OnDisable -= value;
}
public static event On.UIAnimationEvents.hook_AnimateIn AnimateIn
{
add => On.UIAnimationEvents.AnimateIn += value;
remove => On.UIAnimationEvents.AnimateIn -= value;
}
public static event On.UIAnimationEvents.hook_AnimateOut AnimateOut
{
add => On.UIAnimationEvents.AnimateOut += value;
remove => On.UIAnimationEvents.AnimateOut -= value;
}
}

}
