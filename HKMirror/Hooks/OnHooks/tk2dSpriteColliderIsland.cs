namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteColliderIsland class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteColliderIsland
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookIsValid()
        {
            if (!HookedList.Contains("IsValid"))
            {
                HookedList.Add("IsValid");
                On.tk2dSpriteColliderIsland.IsValid += IsValid;
            }
        }

        internal static event Delegates.IsValid_BeforeArgs _beforeIsValid;
        internal static event Delegates.IsValid_AfterArgs _afterIsValid;

        private static bool IsValid(On.tk2dSpriteColliderIsland.orig_IsValid orig, tk2dSpriteColliderIsland self)
        {
            Delegates.Params_IsValid @params = new()
            {
                self = self
            };
            if (_beforeIsValid != null)
                foreach (Delegates.IsValid_BeforeArgs toInvoke in _beforeIsValid.GetInvocationList())
                    try
                    {
                        _beforeIsValid?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterIsValid != null)
                foreach (Delegates.IsValid_AfterArgs toInvoke in _afterIsValid.GetInvocationList())
                    try
                    {
                        retVal = _afterIsValid.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCopyFrom()
        {
            if (!HookedList.Contains("CopyFrom"))
            {
                HookedList.Add("CopyFrom");
                On.tk2dSpriteColliderIsland.CopyFrom += CopyFrom;
            }
        }

        internal static event Delegates.CopyFrom_BeforeArgs _beforeCopyFrom;
        internal static event Delegates.CopyFrom_AfterArgs _afterCopyFrom;

        private static void CopyFrom(On.tk2dSpriteColliderIsland.orig_CopyFrom orig, tk2dSpriteColliderIsland self,
            tk2dSpriteColliderIsland src)
        {
            Delegates.Params_CopyFrom @params = new()
            {
                self = self, src = src
            };
            if (_beforeCopyFrom != null)
                foreach (Delegates.CopyFrom_BeforeArgs toInvoke in _beforeCopyFrom.GetInvocationList())
                    try
                    {
                        _beforeCopyFrom?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            src = @params.src;
            orig(self, src);
            if (_afterCopyFrom != null)
                foreach (Delegates.CopyFrom_AfterArgs toInvoke in _afterCopyFrom.GetInvocationList())
                    try
                    {
                        _afterCopyFrom.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCompareTo()
        {
            if (!HookedList.Contains("CompareTo"))
            {
                HookedList.Add("CompareTo");
                On.tk2dSpriteColliderIsland.CompareTo += CompareTo;
            }
        }

        internal static event Delegates.CompareTo_BeforeArgs _beforeCompareTo;
        internal static event Delegates.CompareTo_AfterArgs _afterCompareTo;

        private static bool CompareTo(On.tk2dSpriteColliderIsland.orig_CompareTo orig, tk2dSpriteColliderIsland self,
            tk2dSpriteColliderIsland src)
        {
            Delegates.Params_CompareTo @params = new()
            {
                self = self, src = src
            };
            if (_beforeCompareTo != null)
                foreach (Delegates.CompareTo_BeforeArgs toInvoke in _beforeCompareTo.GetInvocationList())
                    try
                    {
                        _beforeCompareTo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            src = @params.src;
            var retVal = orig(self, src);
            if (_afterCompareTo != null)
                foreach (Delegates.CompareTo_AfterArgs toInvoke in _afterCompareTo.GetInvocationList())
                    try
                    {
                        retVal = _afterCompareTo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool CompareTo_AfterArgs(Params_CompareTo args, bool ret);

        public delegate void CompareTo_BeforeArgs(Params_CompareTo args);

        public delegate bool CompareTo_WithArgs(Func<tk2dSpriteColliderIsland, tk2dSpriteColliderIsland, bool> orig,
            tk2dSpriteColliderIsland self, tk2dSpriteColliderIsland src);

        public delegate void CopyFrom_AfterArgs(Params_CopyFrom args);

        public delegate void CopyFrom_BeforeArgs(Params_CopyFrom args);

        public delegate void CopyFrom_WithArgs(Action<tk2dSpriteColliderIsland, tk2dSpriteColliderIsland> orig,
            tk2dSpriteColliderIsland self, tk2dSpriteColliderIsland src);

        public delegate bool IsValid_AfterArgs(Params_IsValid args, bool ret);

        public delegate void IsValid_BeforeArgs(Params_IsValid args);

        public delegate bool IsValid_WithArgs(Func<tk2dSpriteColliderIsland, bool> orig, tk2dSpriteColliderIsland self);

        public sealed class Params_IsValid
        {
            public tk2dSpriteColliderIsland self;
        }

        public sealed class Params_CopyFrom
        {
            public tk2dSpriteColliderIsland self;
            public tk2dSpriteColliderIsland src;
        }

        public sealed class Params_CompareTo
        {
            public tk2dSpriteColliderIsland self;
            public tk2dSpriteColliderIsland src;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.IsValid_BeforeArgs IsValid
        {
            add
            {
                HookHandler._beforeIsValid += value;
                HookHandler.HookIsValid();
            }
            remove => HookHandler._beforeIsValid -= value;
        }

        public static event Delegates.CopyFrom_BeforeArgs CopyFrom
        {
            add
            {
                HookHandler._beforeCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._beforeCopyFrom -= value;
        }

        public static event Delegates.CompareTo_BeforeArgs CompareTo
        {
            add
            {
                HookHandler._beforeCompareTo += value;
                HookHandler.HookCompareTo();
            }
            remove => HookHandler._beforeCompareTo -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.IsValid_AfterArgs IsValid
        {
            add
            {
                HookHandler._afterIsValid += value;
                HookHandler.HookIsValid();
            }
            remove => HookHandler._afterIsValid -= value;
        }

        public static event Delegates.CopyFrom_AfterArgs CopyFrom
        {
            add
            {
                HookHandler._afterCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._afterCopyFrom -= value;
        }

        public static event Delegates.CompareTo_AfterArgs CompareTo
        {
            add
            {
                HookHandler._afterCompareTo += value;
                HookHandler.HookCompareTo();
            }
            remove => HookHandler._afterCompareTo -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSpriteColliderIsland.hook_IsValid IsValid
        {
            add => On.tk2dSpriteColliderIsland.IsValid += value;
            remove => On.tk2dSpriteColliderIsland.IsValid -= value;
        }

        public static event On.tk2dSpriteColliderIsland.hook_CopyFrom CopyFrom
        {
            add => On.tk2dSpriteColliderIsland.CopyFrom += value;
            remove => On.tk2dSpriteColliderIsland.CopyFrom -= value;
        }

        public static event On.tk2dSpriteColliderIsland.hook_CompareTo CompareTo
        {
            add => On.tk2dSpriteColliderIsland.CompareTo += value;
            remove => On.tk2dSpriteColliderIsland.CompareTo -= value;
        }
    }
}