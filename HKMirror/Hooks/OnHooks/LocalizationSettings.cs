using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for LocalizationSettings class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLocalizationSettings
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookGetLanguageEnum()
        {
            if (!HookedList.Contains("GetLanguageEnum"))
            {
                HookedList.Add("GetLanguageEnum");
                On.LocalizationSettings.GetLanguageEnum += GetLanguageEnum;
            }
        }

        internal static event Delegates.GetLanguageEnum_BeforeArgs _beforeGetLanguageEnum;
        internal static event Delegates.GetLanguageEnum_AfterArgs _afterGetLanguageEnum;

        private static Language.LanguageCode GetLanguageEnum(On.LocalizationSettings.orig_GetLanguageEnum orig,
            string langCode)
        {
            Delegates.Params_GetLanguageEnum @params = new()
            {
                langCode = langCode
            };
            if (_beforeGetLanguageEnum != null)
            {
                foreach (Delegates.GetLanguageEnum_BeforeArgs toInvoke in _beforeGetLanguageEnum.GetInvocationList())
                {
                    try
                    {
                        _beforeGetLanguageEnum?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            langCode = @params.langCode;
            var retVal = orig(langCode);
            if (_afterGetLanguageEnum != null)
            {
                foreach (Delegates.GetLanguageEnum_AfterArgs toInvoke in _afterGetLanguageEnum.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetLanguageEnum.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_GetLanguageEnum
        {
            public string langCode;
        }

        public delegate void GetLanguageEnum_BeforeArgs(Params_GetLanguageEnum args);

        public delegate Language.LanguageCode GetLanguageEnum_AfterArgs(Params_GetLanguageEnum args,
            Language.LanguageCode ret);

        public delegate Language.LanguageCode GetLanguageEnum_WithArgs(Func<string, Language.LanguageCode> orig,
            string langCode);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetLanguageEnum_BeforeArgs GetLanguageEnum
        {
            add
            {
                HookHandler._beforeGetLanguageEnum += value;
                HookHandler.HookGetLanguageEnum();
            }
            remove => HookHandler._beforeGetLanguageEnum -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetLanguageEnum_AfterArgs GetLanguageEnum
        {
            add
            {
                HookHandler._afterGetLanguageEnum += value;
                HookHandler.HookGetLanguageEnum();
            }
            remove => HookHandler._afterGetLanguageEnum -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.LocalizationSettings.hook_GetLanguageEnum GetLanguageEnum
        {
            add => On.LocalizationSettings.GetLanguageEnum += value;
            remove => On.LocalizationSettings.GetLanguageEnum -= value;
        }
    }
}