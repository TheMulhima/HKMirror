namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for EndBossSceneTimer class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnEndBossSceneTimer
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.EndBossSceneTimer.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.EndBossSceneTimer.orig_OnEnable orig, EndBossSceneTimer self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.EndBossSceneTimer.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.EndBossSceneTimer.orig_OnDisable orig, EndBossSceneTimer self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookDelayed()
        {
            if (!HookedList.Contains("Delayed"))
            {
                HookedList.Add("Delayed");
                On.EndBossSceneTimer.Delayed += Delayed;
            }
        }

        internal static event Delegates.Delayed_BeforeArgs _beforeDelayed;

        private static IEnumerator Delayed(On.EndBossSceneTimer.orig_Delayed orig, EndBossSceneTimer self)
        {
            Delegates.Params_Delayed @params = new()
            {
                self = self
            };
            _beforeDelayed?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Delayed_BeforeArgs(Params_Delayed args);

        public delegate IEnumerator Delayed_NormalArgs(Params_Delayed args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public sealed class Params_OnEnable
        {
            public EndBossSceneTimer self;
        }

        public sealed class Params_OnDisable
        {
            public EndBossSceneTimer self;
        }

        public sealed class Params_Delayed
        {
            public EndBossSceneTimer self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Delayed_BeforeArgs Delayed
        {
            add
            {
                HookHandler._beforeDelayed += value;
                HookHandler.HookDelayed();
            }
            remove => HookHandler._beforeDelayed -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.EndBossSceneTimer.hook_OnEnable OnEnable
        {
            add => On.EndBossSceneTimer.OnEnable += value;
            remove => On.EndBossSceneTimer.OnEnable -= value;
        }

        public static event On.EndBossSceneTimer.hook_OnDisable OnDisable
        {
            add => On.EndBossSceneTimer.OnDisable += value;
            remove => On.EndBossSceneTimer.OnDisable -= value;
        }

        public static event On.EndBossSceneTimer.hook_Delayed Delayed
        {
            add => On.EndBossSceneTimer.Delayed += value;
            remove => On.EndBossSceneTimer.Delayed -= value;
        }
    }
}