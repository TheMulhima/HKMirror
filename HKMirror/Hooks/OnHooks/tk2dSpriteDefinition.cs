using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Bounds = UnityEngine.Bounds;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteDefinition class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteDefinition
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Valid()
        {
            if (!HookedList.Contains("get_Valid"))
            {
                HookedList.Add("get_Valid");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteDefinition), "get_Valid"), get_Valid);
            }
        }

        internal static event Delegates.get_Valid_BeforeArgs _beforeget_Valid;
        internal static event Delegates.get_Valid_NormalArgs _afterget_Valid;

        private static bool get_Valid(Func<tk2dSpriteDefinition, bool> orig, tk2dSpriteDefinition self)
        {
            Delegates.Params_get_Valid @params = new()
            {
                self = self
            };
            _beforeget_Valid?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Valid != null) retVal = _afterget_Valid.Invoke(@params);
            return retVal;
        }

        internal static void HookGetBounds()
        {
            if (!HookedList.Contains("GetBounds"))
            {
                HookedList.Add("GetBounds");
                On.tk2dSpriteDefinition.GetBounds += GetBounds;
            }
        }

        internal static event Delegates.GetBounds_BeforeArgs _beforeGetBounds;
        internal static event Delegates.GetBounds_NormalArgs _afterGetBounds;

        private static Bounds GetBounds(On.tk2dSpriteDefinition.orig_GetBounds orig, tk2dSpriteDefinition self)
        {
            Delegates.Params_GetBounds @params = new()
            {
                self = self
            };
            _beforeGetBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetBounds != null) retVal = _afterGetBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookGetUntrimmedBounds()
        {
            if (!HookedList.Contains("GetUntrimmedBounds"))
            {
                HookedList.Add("GetUntrimmedBounds");
                On.tk2dSpriteDefinition.GetUntrimmedBounds += GetUntrimmedBounds;
            }
        }

        internal static event Delegates.GetUntrimmedBounds_BeforeArgs _beforeGetUntrimmedBounds;
        internal static event Delegates.GetUntrimmedBounds_NormalArgs _afterGetUntrimmedBounds;

        private static Bounds GetUntrimmedBounds(On.tk2dSpriteDefinition.orig_GetUntrimmedBounds orig,
            tk2dSpriteDefinition self)
        {
            Delegates.Params_GetUntrimmedBounds @params = new()
            {
                self = self
            };
            _beforeGetUntrimmedBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetUntrimmedBounds != null) retVal = _afterGetUntrimmedBounds.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Valid_BeforeArgs(Params_get_Valid args);

        public delegate bool get_Valid_NormalArgs(Params_get_Valid args);

        public delegate void GetBounds_BeforeArgs(Params_GetBounds args);

        public delegate Bounds GetBounds_NormalArgs(Params_GetBounds args);

        public delegate void GetUntrimmedBounds_BeforeArgs(Params_GetUntrimmedBounds args);

        public delegate Bounds GetUntrimmedBounds_NormalArgs(Params_GetUntrimmedBounds args);

        public sealed class Params_get_Valid
        {
            public tk2dSpriteDefinition self;
        }

        public sealed class Params_GetBounds
        {
            public tk2dSpriteDefinition self;
        }

        public sealed class Params_GetUntrimmedBounds
        {
            public tk2dSpriteDefinition self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Valid_BeforeArgs get_Valid
        {
            add
            {
                HookHandler._beforeget_Valid += value;
                HookHandler.Hookget_Valid();
            }
            remove => HookHandler._beforeget_Valid -= value;
        }

        public static event Delegates.GetBounds_BeforeArgs GetBounds
        {
            add
            {
                HookHandler._beforeGetBounds += value;
                HookHandler.HookGetBounds();
            }
            remove => HookHandler._beforeGetBounds -= value;
        }

        public static event Delegates.GetUntrimmedBounds_BeforeArgs GetUntrimmedBounds
        {
            add
            {
                HookHandler._beforeGetUntrimmedBounds += value;
                HookHandler.HookGetUntrimmedBounds();
            }
            remove => HookHandler._beforeGetUntrimmedBounds -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Valid_NormalArgs get_Valid
        {
            add
            {
                HookHandler._afterget_Valid += value;
                HookHandler.Hookget_Valid();
            }
            remove => HookHandler._afterget_Valid -= value;
        }

        public static event Delegates.GetBounds_NormalArgs GetBounds
        {
            add
            {
                HookHandler._afterGetBounds += value;
                HookHandler.HookGetBounds();
            }
            remove => HookHandler._afterGetBounds -= value;
        }

        public static event Delegates.GetUntrimmedBounds_NormalArgs GetUntrimmedBounds
        {
            add
            {
                HookHandler._afterGetUntrimmedBounds += value;
                HookHandler.HookGetUntrimmedBounds();
            }
            remove => HookHandler._afterGetUntrimmedBounds -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Valid_NormalArgs get_Valid
        {
            add => HookEndpointManager.Add<Delegates.get_Valid_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteDefinition), "get_Valid"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Valid_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteDefinition), "get_Valid"), value);
        }

        public static event On.tk2dSpriteDefinition.hook_GetBounds GetBounds
        {
            add => On.tk2dSpriteDefinition.GetBounds += value;
            remove => On.tk2dSpriteDefinition.GetBounds -= value;
        }

        public static event On.tk2dSpriteDefinition.hook_GetUntrimmedBounds GetUntrimmedBounds
        {
            add => On.tk2dSpriteDefinition.GetUntrimmedBounds += value;
            remove => On.tk2dSpriteDefinition.GetUntrimmedBounds -= value;
        }
    }
}