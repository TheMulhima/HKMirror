using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using tk2dRuntime.TileMap;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ColorChannel class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnColorChannel
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Init"), Init);
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_NormalArgs _afterInit;

        private static void Init(Action<ColorChannel, int, int, int, int> orig, ColorChannel self, int width,
            int height, int divX, int divY)
        {
            Delegates.Params_Init @params = new()
            {
                self = self, width = width, height = height, divX = divX, divY = divY
            };
            _beforeInit?.Invoke(@params);
            self = @params.self;
            width = @params.width;
            height = @params.height;
            divX = @params.divX;
            divY = @params.divY;
            orig(self, width, height, divX, divY);
            if (_afterInit != null) _afterInit.Invoke(@params);
        }

        internal static void HookFindChunkAndCoordinate()
        {
            if (!HookedList.Contains("FindChunkAndCoordinate"))
            {
                HookedList.Add("FindChunkAndCoordinate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "FindChunkAndCoordinate"),
                    FindChunkAndCoordinate);
            }
        }

        internal static event Delegates.FindChunkAndCoordinate_BeforeArgs _beforeFindChunkAndCoordinate;
        internal static event Delegates.FindChunkAndCoordinate_NormalArgs _afterFindChunkAndCoordinate;

        private static ColorChunk FindChunkAndCoordinate(Func<ColorChannel, int, int, int, ColorChunk> orig,
            ColorChannel self, int x, int y, int offset)
        {
            Delegates.Params_FindChunkAndCoordinate @params = new()
            {
                self = self, x = x, y = y, offset = offset
            };
            _beforeFindChunkAndCoordinate?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            offset = @params.offset;
            var retVal = orig(self, x, y, offset);
            if (_afterFindChunkAndCoordinate != null) retVal = _afterFindChunkAndCoordinate.Invoke(@params);
            return retVal;
        }

        internal static void HookGetColor()
        {
            if (!HookedList.Contains("GetColor"))
            {
                HookedList.Add("GetColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetColor"), GetColor);
            }
        }

        internal static event Delegates.GetColor_BeforeArgs _beforeGetColor;
        internal static event Delegates.GetColor_NormalArgs _afterGetColor;

        private static Color GetColor(Func<ColorChannel, int, int, Color> orig, ColorChannel self, int x, int y)
        {
            Delegates.Params_GetColor @params = new()
            {
                self = self, x = x, y = y
            };
            _beforeGetColor?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetColor != null) retVal = _afterGetColor.Invoke(@params);
            return retVal;
        }

        internal static void HookInitChunk()
        {
            if (!HookedList.Contains("InitChunk"))
            {
                HookedList.Add("InitChunk");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "InitChunk"), InitChunk);
            }
        }

        internal static event Delegates.InitChunk_BeforeArgs _beforeInitChunk;
        internal static event Delegates.InitChunk_NormalArgs _afterInitChunk;

        private static void InitChunk(Action<ColorChannel, ColorChunk> orig, ColorChannel self, ColorChunk chunk)
        {
            Delegates.Params_InitChunk @params = new()
            {
                self = self, chunk = chunk
            };
            _beforeInitChunk?.Invoke(@params);
            self = @params.self;
            chunk = @params.chunk;
            orig(self, chunk);
            if (_afterInitChunk != null) _afterInitChunk.Invoke(@params);
        }

        internal static void HookSetColor()
        {
            if (!HookedList.Contains("SetColor"))
            {
                HookedList.Add("SetColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "SetColor"), SetColor);
            }
        }

        internal static event Delegates.SetColor_BeforeArgs _beforeSetColor;
        internal static event Delegates.SetColor_NormalArgs _afterSetColor;

        private static void SetColor(Action<ColorChannel, int, int, Color> orig, ColorChannel self, int x, int y,
            Color color)
        {
            Delegates.Params_SetColor @params = new()
            {
                self = self, x = x, y = y, color = color
            };
            _beforeSetColor?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            color = @params.color;
            orig(self, x, y, color);
            if (_afterSetColor != null) _afterSetColor.Invoke(@params);
        }

        internal static void HookGetChunk_int_int()
        {
            if (!HookedList.Contains("GetChunk_int_int"))
            {
                HookedList.Add("GetChunk_int_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetChunk_int_int"), GetChunk_int_int);
            }
        }

        internal static event Delegates.GetChunk_int_int_BeforeArgs _beforeGetChunk_int_int;
        internal static event Delegates.GetChunk_int_int_NormalArgs _afterGetChunk_int_int;

        private static ColorChunk GetChunk_int_int(Func<ColorChannel, int, int, ColorChunk> orig, ColorChannel self,
            int x, int y)
        {
            Delegates.Params_GetChunk_int_int @params = new()
            {
                self = self, x = x, y = y
            };
            _beforeGetChunk_int_int?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetChunk_int_int != null) retVal = _afterGetChunk_int_int.Invoke(@params);
            return retVal;
        }

        internal static void HookGetChunk_int_int_bool()
        {
            if (!HookedList.Contains("GetChunk_int_int_bool"))
            {
                HookedList.Add("GetChunk_int_int_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetChunk_int_int_bool"),
                    GetChunk_int_int_bool);
            }
        }

        internal static event Delegates.GetChunk_int_int_bool_BeforeArgs _beforeGetChunk_int_int_bool;
        internal static event Delegates.GetChunk_int_int_bool_NormalArgs _afterGetChunk_int_int_bool;

        private static ColorChunk GetChunk_int_int_bool(Func<ColorChannel, int, int, bool, ColorChunk> orig,
            ColorChannel self, int x, int y, bool init)
        {
            Delegates.Params_GetChunk_int_int_bool @params = new()
            {
                self = self, x = x, y = y, init = init
            };
            _beforeGetChunk_int_int_bool?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            init = @params.init;
            var retVal = orig(self, x, y, init);
            if (_afterGetChunk_int_int_bool != null) retVal = _afterGetChunk_int_int_bool.Invoke(@params);
            return retVal;
        }

        internal static void HookClearChunk()
        {
            if (!HookedList.Contains("ClearChunk"))
            {
                HookedList.Add("ClearChunk");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "ClearChunk"), ClearChunk);
            }
        }

        internal static event Delegates.ClearChunk_BeforeArgs _beforeClearChunk;
        internal static event Delegates.ClearChunk_NormalArgs _afterClearChunk;

        private static void ClearChunk(Action<ColorChannel, ColorChunk> orig, ColorChannel self, ColorChunk chunk)
        {
            Delegates.Params_ClearChunk @params = new()
            {
                self = self, chunk = chunk
            };
            _beforeClearChunk?.Invoke(@params);
            self = @params.self;
            chunk = @params.chunk;
            orig(self, chunk);
            if (_afterClearChunk != null) _afterClearChunk.Invoke(@params);
        }

        internal static void HookClearDirtyFlag()
        {
            if (!HookedList.Contains("ClearDirtyFlag"))
            {
                HookedList.Add("ClearDirtyFlag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "ClearDirtyFlag"), ClearDirtyFlag);
            }
        }

        internal static event Delegates.ClearDirtyFlag_BeforeArgs _beforeClearDirtyFlag;
        internal static event Delegates.ClearDirtyFlag_NormalArgs _afterClearDirtyFlag;

        private static void ClearDirtyFlag(Action<ColorChannel> orig, ColorChannel self)
        {
            Delegates.Params_ClearDirtyFlag @params = new()
            {
                self = self
            };
            _beforeClearDirtyFlag?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearDirtyFlag != null) _afterClearDirtyFlag.Invoke(@params);
        }

        internal static void HookClear()
        {
            if (!HookedList.Contains("Clear"))
            {
                HookedList.Add("Clear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Clear"), Clear);
            }
        }

        internal static event Delegates.Clear_BeforeArgs _beforeClear;
        internal static event Delegates.Clear_NormalArgs _afterClear;

        private static void Clear(Action<ColorChannel, Color> orig, ColorChannel self, Color color)
        {
            Delegates.Params_Clear @params = new()
            {
                self = self, color = color
            };
            _beforeClear?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterClear != null) _afterClear.Invoke(@params);
        }

        internal static void HookDelete()
        {
            if (!HookedList.Contains("Delete"))
            {
                HookedList.Add("Delete");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Delete"), Delete);
            }
        }

        internal static event Delegates.Delete_BeforeArgs _beforeDelete;
        internal static event Delegates.Delete_NormalArgs _afterDelete;

        private static void Delete(Action<ColorChannel> orig, ColorChannel self)
        {
            Delegates.Params_Delete @params = new()
            {
                self = self
            };
            _beforeDelete?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDelete != null) _afterDelete.Invoke(@params);
        }

        internal static void HookCreate()
        {
            if (!HookedList.Contains("Create"))
            {
                HookedList.Add("Create");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Create"), Create);
            }
        }

        internal static event Delegates.Create_BeforeArgs _beforeCreate;
        internal static event Delegates.Create_NormalArgs _afterCreate;

        private static void Create(Action<ColorChannel> orig, ColorChannel self)
        {
            Delegates.Params_Create @params = new()
            {
                self = self
            };
            _beforeCreate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreate != null) _afterCreate.Invoke(@params);
        }

        internal static void HookOptimize_ColorChunk()
        {
            if (!HookedList.Contains("Optimize_ColorChunk"))
            {
                HookedList.Add("Optimize_ColorChunk");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Optimize_ColorChunk"),
                    Optimize_ColorChunk);
            }
        }

        internal static event Delegates.Optimize_ColorChunk_BeforeArgs _beforeOptimize_ColorChunk;
        internal static event Delegates.Optimize_ColorChunk_NormalArgs _afterOptimize_ColorChunk;

        private static void Optimize_ColorChunk(Action<ColorChannel, ColorChunk> orig, ColorChannel self,
            ColorChunk chunk)
        {
            Delegates.Params_Optimize_ColorChunk @params = new()
            {
                self = self, chunk = chunk
            };
            _beforeOptimize_ColorChunk?.Invoke(@params);
            self = @params.self;
            chunk = @params.chunk;
            orig(self, chunk);
            if (_afterOptimize_ColorChunk != null) _afterOptimize_ColorChunk.Invoke(@params);
        }

        internal static void HookOptimize()
        {
            if (!HookedList.Contains("Optimize"))
            {
                HookedList.Add("Optimize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Optimize"), Optimize);
            }
        }

        internal static event Delegates.Optimize_BeforeArgs _beforeOptimize;
        internal static event Delegates.Optimize_NormalArgs _afterOptimize;

        private static void Optimize(Action<ColorChannel> orig, ColorChannel self)
        {
            Delegates.Params_Optimize @params = new()
            {
                self = self
            };
            _beforeOptimize?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOptimize != null) _afterOptimize.Invoke(@params);
        }

        internal static void Hookget_IsEmpty()
        {
            if (!HookedList.Contains("get_IsEmpty"))
            {
                HookedList.Add("get_IsEmpty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "get_IsEmpty"), get_IsEmpty);
            }
        }

        internal static event Delegates.get_IsEmpty_BeforeArgs _beforeget_IsEmpty;
        internal static event Delegates.get_IsEmpty_NormalArgs _afterget_IsEmpty;

        private static bool get_IsEmpty(Func<ColorChannel, bool> orig, ColorChannel self)
        {
            Delegates.Params_get_IsEmpty @params = new()
            {
                self = self
            };
            _beforeget_IsEmpty?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsEmpty != null) retVal = _afterget_IsEmpty.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_NumActiveChunks()
        {
            if (!HookedList.Contains("get_NumActiveChunks"))
            {
                HookedList.Add("get_NumActiveChunks");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "get_NumActiveChunks"),
                    get_NumActiveChunks);
            }
        }

        internal static event Delegates.get_NumActiveChunks_BeforeArgs _beforeget_NumActiveChunks;
        internal static event Delegates.get_NumActiveChunks_NormalArgs _afterget_NumActiveChunks;

        private static int get_NumActiveChunks(Func<ColorChannel, int> orig, ColorChannel self)
        {
            Delegates.Params_get_NumActiveChunks @params = new()
            {
                self = self
            };
            _beforeget_NumActiveChunks?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumActiveChunks != null) retVal = _afterget_NumActiveChunks.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Clear_BeforeArgs(Params_Clear args);

        public delegate void Clear_NormalArgs(Params_Clear args);

        public delegate void ClearChunk_BeforeArgs(Params_ClearChunk args);

        public delegate void ClearChunk_NormalArgs(Params_ClearChunk args);

        public delegate void ClearDirtyFlag_BeforeArgs(Params_ClearDirtyFlag args);

        public delegate void ClearDirtyFlag_NormalArgs(Params_ClearDirtyFlag args);

        public delegate void Create_BeforeArgs(Params_Create args);

        public delegate void Create_NormalArgs(Params_Create args);

        public delegate void Delete_BeforeArgs(Params_Delete args);

        public delegate void Delete_NormalArgs(Params_Delete args);

        public delegate void FindChunkAndCoordinate_BeforeArgs(Params_FindChunkAndCoordinate args);

        public delegate ColorChunk FindChunkAndCoordinate_NormalArgs(Params_FindChunkAndCoordinate args);

        public delegate void get_IsEmpty_BeforeArgs(Params_get_IsEmpty args);

        public delegate bool get_IsEmpty_NormalArgs(Params_get_IsEmpty args);

        public delegate void get_NumActiveChunks_BeforeArgs(Params_get_NumActiveChunks args);

        public delegate int get_NumActiveChunks_NormalArgs(Params_get_NumActiveChunks args);

        public delegate void GetChunk_int_int_BeforeArgs(Params_GetChunk_int_int args);

        public delegate void GetChunk_int_int_bool_BeforeArgs(Params_GetChunk_int_int_bool args);

        public delegate ColorChunk GetChunk_int_int_bool_NormalArgs(Params_GetChunk_int_int_bool args);

        public delegate ColorChunk GetChunk_int_int_NormalArgs(Params_GetChunk_int_int args);

        public delegate void GetColor_BeforeArgs(Params_GetColor args);

        public delegate Color GetColor_NormalArgs(Params_GetColor args);

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_NormalArgs(Params_Init args);

        public delegate void InitChunk_BeforeArgs(Params_InitChunk args);

        public delegate void InitChunk_NormalArgs(Params_InitChunk args);

        public delegate void Optimize_BeforeArgs(Params_Optimize args);

        public delegate void Optimize_ColorChunk_BeforeArgs(Params_Optimize_ColorChunk args);

        public delegate void Optimize_ColorChunk_NormalArgs(Params_Optimize_ColorChunk args);

        public delegate void Optimize_NormalArgs(Params_Optimize args);

        public delegate void SetColor_BeforeArgs(Params_SetColor args);

        public delegate void SetColor_NormalArgs(Params_SetColor args);

        public sealed class Params_Init
        {
            public int divX;
            public int divY;
            public int height;
            public ColorChannel self;
            public int width;
        }

        public sealed class Params_FindChunkAndCoordinate
        {
            public int offset;
            public ColorChannel self;
            public int x;
            public int y;
        }

        public sealed class Params_GetColor
        {
            public ColorChannel self;
            public int x;
            public int y;
        }

        public sealed class Params_InitChunk
        {
            public ColorChunk chunk;
            public ColorChannel self;
        }

        public sealed class Params_SetColor
        {
            public Color color;
            public ColorChannel self;
            public int x;
            public int y;
        }

        public sealed class Params_GetChunk_int_int
        {
            public ColorChannel self;
            public int x;
            public int y;
        }

        public sealed class Params_GetChunk_int_int_bool
        {
            public bool init;
            public ColorChannel self;
            public int x;
            public int y;
        }

        public sealed class Params_ClearChunk
        {
            public ColorChunk chunk;
            public ColorChannel self;
        }

        public sealed class Params_ClearDirtyFlag
        {
            public ColorChannel self;
        }

        public sealed class Params_Clear
        {
            public Color color;
            public ColorChannel self;
        }

        public sealed class Params_Delete
        {
            public ColorChannel self;
        }

        public sealed class Params_Create
        {
            public ColorChannel self;
        }

        public sealed class Params_Optimize_ColorChunk
        {
            public ColorChunk chunk;
            public ColorChannel self;
        }

        public sealed class Params_Optimize
        {
            public ColorChannel self;
        }

        public sealed class Params_get_IsEmpty
        {
            public ColorChannel self;
        }

        public sealed class Params_get_NumActiveChunks
        {
            public ColorChannel self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.FindChunkAndCoordinate_BeforeArgs FindChunkAndCoordinate
        {
            add
            {
                HookHandler._beforeFindChunkAndCoordinate += value;
                HookHandler.HookFindChunkAndCoordinate();
            }
            remove => HookHandler._beforeFindChunkAndCoordinate -= value;
        }

        public static event Delegates.GetColor_BeforeArgs GetColor
        {
            add
            {
                HookHandler._beforeGetColor += value;
                HookHandler.HookGetColor();
            }
            remove => HookHandler._beforeGetColor -= value;
        }

        public static event Delegates.InitChunk_BeforeArgs InitChunk
        {
            add
            {
                HookHandler._beforeInitChunk += value;
                HookHandler.HookInitChunk();
            }
            remove => HookHandler._beforeInitChunk -= value;
        }

        public static event Delegates.SetColor_BeforeArgs SetColor
        {
            add
            {
                HookHandler._beforeSetColor += value;
                HookHandler.HookSetColor();
            }
            remove => HookHandler._beforeSetColor -= value;
        }

        public static event Delegates.GetChunk_int_int_BeforeArgs GetChunk_int_int
        {
            add
            {
                HookHandler._beforeGetChunk_int_int += value;
                HookHandler.HookGetChunk_int_int();
            }
            remove => HookHandler._beforeGetChunk_int_int -= value;
        }

        public static event Delegates.GetChunk_int_int_bool_BeforeArgs GetChunk_int_int_bool
        {
            add
            {
                HookHandler._beforeGetChunk_int_int_bool += value;
                HookHandler.HookGetChunk_int_int_bool();
            }
            remove => HookHandler._beforeGetChunk_int_int_bool -= value;
        }

        public static event Delegates.ClearChunk_BeforeArgs ClearChunk
        {
            add
            {
                HookHandler._beforeClearChunk += value;
                HookHandler.HookClearChunk();
            }
            remove => HookHandler._beforeClearChunk -= value;
        }

        public static event Delegates.ClearDirtyFlag_BeforeArgs ClearDirtyFlag
        {
            add
            {
                HookHandler._beforeClearDirtyFlag += value;
                HookHandler.HookClearDirtyFlag();
            }
            remove => HookHandler._beforeClearDirtyFlag -= value;
        }

        public static event Delegates.Clear_BeforeArgs Clear
        {
            add
            {
                HookHandler._beforeClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._beforeClear -= value;
        }

        public static event Delegates.Delete_BeforeArgs Delete
        {
            add
            {
                HookHandler._beforeDelete += value;
                HookHandler.HookDelete();
            }
            remove => HookHandler._beforeDelete -= value;
        }

        public static event Delegates.Create_BeforeArgs Create
        {
            add
            {
                HookHandler._beforeCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._beforeCreate -= value;
        }

        public static event Delegates.Optimize_ColorChunk_BeforeArgs Optimize_ColorChunk
        {
            add
            {
                HookHandler._beforeOptimize_ColorChunk += value;
                HookHandler.HookOptimize_ColorChunk();
            }
            remove => HookHandler._beforeOptimize_ColorChunk -= value;
        }

        public static event Delegates.Optimize_BeforeArgs Optimize
        {
            add
            {
                HookHandler._beforeOptimize += value;
                HookHandler.HookOptimize();
            }
            remove => HookHandler._beforeOptimize -= value;
        }

        public static event Delegates.get_IsEmpty_BeforeArgs get_IsEmpty
        {
            add
            {
                HookHandler._beforeget_IsEmpty += value;
                HookHandler.Hookget_IsEmpty();
            }
            remove => HookHandler._beforeget_IsEmpty -= value;
        }

        public static event Delegates.get_NumActiveChunks_BeforeArgs get_NumActiveChunks
        {
            add
            {
                HookHandler._beforeget_NumActiveChunks += value;
                HookHandler.Hookget_NumActiveChunks();
            }
            remove => HookHandler._beforeget_NumActiveChunks -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Init_NormalArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.FindChunkAndCoordinate_NormalArgs FindChunkAndCoordinate
        {
            add
            {
                HookHandler._afterFindChunkAndCoordinate += value;
                HookHandler.HookFindChunkAndCoordinate();
            }
            remove => HookHandler._afterFindChunkAndCoordinate -= value;
        }

        public static event Delegates.GetColor_NormalArgs GetColor
        {
            add
            {
                HookHandler._afterGetColor += value;
                HookHandler.HookGetColor();
            }
            remove => HookHandler._afterGetColor -= value;
        }

        public static event Delegates.InitChunk_NormalArgs InitChunk
        {
            add
            {
                HookHandler._afterInitChunk += value;
                HookHandler.HookInitChunk();
            }
            remove => HookHandler._afterInitChunk -= value;
        }

        public static event Delegates.SetColor_NormalArgs SetColor
        {
            add
            {
                HookHandler._afterSetColor += value;
                HookHandler.HookSetColor();
            }
            remove => HookHandler._afterSetColor -= value;
        }

        public static event Delegates.GetChunk_int_int_NormalArgs GetChunk_int_int
        {
            add
            {
                HookHandler._afterGetChunk_int_int += value;
                HookHandler.HookGetChunk_int_int();
            }
            remove => HookHandler._afterGetChunk_int_int -= value;
        }

        public static event Delegates.GetChunk_int_int_bool_NormalArgs GetChunk_int_int_bool
        {
            add
            {
                HookHandler._afterGetChunk_int_int_bool += value;
                HookHandler.HookGetChunk_int_int_bool();
            }
            remove => HookHandler._afterGetChunk_int_int_bool -= value;
        }

        public static event Delegates.ClearChunk_NormalArgs ClearChunk
        {
            add
            {
                HookHandler._afterClearChunk += value;
                HookHandler.HookClearChunk();
            }
            remove => HookHandler._afterClearChunk -= value;
        }

        public static event Delegates.ClearDirtyFlag_NormalArgs ClearDirtyFlag
        {
            add
            {
                HookHandler._afterClearDirtyFlag += value;
                HookHandler.HookClearDirtyFlag();
            }
            remove => HookHandler._afterClearDirtyFlag -= value;
        }

        public static event Delegates.Clear_NormalArgs Clear
        {
            add
            {
                HookHandler._afterClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._afterClear -= value;
        }

        public static event Delegates.Delete_NormalArgs Delete
        {
            add
            {
                HookHandler._afterDelete += value;
                HookHandler.HookDelete();
            }
            remove => HookHandler._afterDelete -= value;
        }

        public static event Delegates.Create_NormalArgs Create
        {
            add
            {
                HookHandler._afterCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._afterCreate -= value;
        }

        public static event Delegates.Optimize_ColorChunk_NormalArgs Optimize_ColorChunk
        {
            add
            {
                HookHandler._afterOptimize_ColorChunk += value;
                HookHandler.HookOptimize_ColorChunk();
            }
            remove => HookHandler._afterOptimize_ColorChunk -= value;
        }

        public static event Delegates.Optimize_NormalArgs Optimize
        {
            add
            {
                HookHandler._afterOptimize += value;
                HookHandler.HookOptimize();
            }
            remove => HookHandler._afterOptimize -= value;
        }

        public static event Delegates.get_IsEmpty_NormalArgs get_IsEmpty
        {
            add
            {
                HookHandler._afterget_IsEmpty += value;
                HookHandler.Hookget_IsEmpty();
            }
            remove => HookHandler._afterget_IsEmpty -= value;
        }

        public static event Delegates.get_NumActiveChunks_NormalArgs get_NumActiveChunks
        {
            add
            {
                HookHandler._afterget_NumActiveChunks += value;
                HookHandler.Hookget_NumActiveChunks();
            }
            remove => HookHandler._afterget_NumActiveChunks -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Init_NormalArgs Init
        {
            add => HookEndpointManager.Add<Delegates.Init_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Init"), value);
            remove => HookEndpointManager.Remove<Delegates.Init_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Init"), value);
        }

        public static event Delegates.FindChunkAndCoordinate_NormalArgs FindChunkAndCoordinate
        {
            add => HookEndpointManager.Add<Delegates.FindChunkAndCoordinate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "FindChunkAndCoordinate"), value);
            remove => HookEndpointManager.Remove<Delegates.FindChunkAndCoordinate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "FindChunkAndCoordinate"), value);
        }

        public static event Delegates.GetColor_NormalArgs GetColor
        {
            add => HookEndpointManager.Add<Delegates.GetColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetColor"), value);
            remove => HookEndpointManager.Remove<Delegates.GetColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetColor"), value);
        }

        public static event Delegates.InitChunk_NormalArgs InitChunk
        {
            add => HookEndpointManager.Add<Delegates.InitChunk_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "InitChunk"), value);
            remove => HookEndpointManager.Remove<Delegates.InitChunk_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "InitChunk"), value);
        }

        public static event Delegates.SetColor_NormalArgs SetColor
        {
            add => HookEndpointManager.Add<Delegates.SetColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "SetColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "SetColor"), value);
        }

        public static event Delegates.GetChunk_int_int_NormalArgs GetChunk_int_int
        {
            add => HookEndpointManager.Add<Delegates.GetChunk_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetChunk"), value);
            remove => HookEndpointManager.Remove<Delegates.GetChunk_int_int_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetChunk"), value);
        }

        public static event Delegates.GetChunk_int_int_bool_NormalArgs GetChunk_int_int_bool
        {
            add => HookEndpointManager.Add<Delegates.GetChunk_int_int_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetChunk"), value);
            remove => HookEndpointManager.Remove<Delegates.GetChunk_int_int_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "GetChunk"), value);
        }

        public static event Delegates.ClearChunk_NormalArgs ClearChunk
        {
            add => HookEndpointManager.Add<Delegates.ClearChunk_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "ClearChunk"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearChunk_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "ClearChunk"), value);
        }

        public static event Delegates.ClearDirtyFlag_NormalArgs ClearDirtyFlag
        {
            add => HookEndpointManager.Add<Delegates.ClearDirtyFlag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "ClearDirtyFlag"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearDirtyFlag_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "ClearDirtyFlag"), value);
        }

        public static event Delegates.Clear_NormalArgs Clear
        {
            add => HookEndpointManager.Add<Delegates.Clear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Clear"), value);
            remove => HookEndpointManager.Remove<Delegates.Clear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Clear"), value);
        }

        public static event Delegates.Delete_NormalArgs Delete
        {
            add => HookEndpointManager.Add<Delegates.Delete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Delete"), value);
            remove => HookEndpointManager.Remove<Delegates.Delete_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Delete"), value);
        }

        public static event Delegates.Create_NormalArgs Create
        {
            add => HookEndpointManager.Add<Delegates.Create_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Create"), value);
            remove => HookEndpointManager.Remove<Delegates.Create_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Create"), value);
        }

        public static event Delegates.Optimize_ColorChunk_NormalArgs Optimize_ColorChunk
        {
            add => HookEndpointManager.Add<Delegates.Optimize_ColorChunk_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Optimize"), value);
            remove => HookEndpointManager.Remove<Delegates.Optimize_ColorChunk_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Optimize"), value);
        }

        public static event Delegates.Optimize_NormalArgs Optimize
        {
            add => HookEndpointManager.Add<Delegates.Optimize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Optimize"), value);
            remove => HookEndpointManager.Remove<Delegates.Optimize_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "Optimize"), value);
        }

        public static event Delegates.get_IsEmpty_NormalArgs get_IsEmpty
        {
            add => HookEndpointManager.Add<Delegates.get_IsEmpty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "get_IsEmpty"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsEmpty_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "get_IsEmpty"), value);
        }

        public static event Delegates.get_NumActiveChunks_NormalArgs get_NumActiveChunks
        {
            add => HookEndpointManager.Add<Delegates.get_NumActiveChunks_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "get_NumActiveChunks"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NumActiveChunks_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ColorChannel), "get_NumActiveChunks"), value);
        }
    }
}