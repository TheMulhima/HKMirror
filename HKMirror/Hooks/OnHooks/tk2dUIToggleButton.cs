using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for tk2dUIToggleButton class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIToggleButton
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_IsOn()
        {
            if (!HookedList.Contains("get_IsOn"))
            {
                HookedList.Add("get_IsOn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "get_IsOn", true), get_IsOn);
            }
        }

        internal static event Delegates.get_IsOn_BeforeArgs _beforeget_IsOn;
        internal static event Delegates.get_IsOn_AfterArgs _afterget_IsOn;

        private static bool get_IsOn(Func<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self)
        {
            Delegates.Params_get_IsOn @params = new()
            {
                self = self
            };
            if (_beforeget_IsOn != null)
            {
                foreach (Delegates.get_IsOn_BeforeArgs toInvoke in _beforeget_IsOn.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsOn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsOn != null)
            {
                foreach (Delegates.get_IsOn_AfterArgs toInvoke in _afterget_IsOn.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsOn.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_IsOn()
        {
            if (!HookedList.Contains("set_IsOn"))
            {
                HookedList.Add("set_IsOn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "set_IsOn", true), set_IsOn);
            }
        }

        internal static event Delegates.set_IsOn_BeforeArgs _beforeset_IsOn;
        internal static event Delegates.set_IsOn_AfterArgs _afterset_IsOn;

        private static void set_IsOn(Action<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self, bool value)
        {
            Delegates.Params_set_IsOn @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IsOn != null)
            {
                foreach (Delegates.set_IsOn_BeforeArgs toInvoke in _beforeset_IsOn.GetInvocationList())
                {
                    try
                    {
                        _beforeset_IsOn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsOn != null)
            {
                foreach (Delegates.set_IsOn_AfterArgs toInvoke in _afterset_IsOn.GetInvocationList())
                {
                    try
                    {
                        _afterset_IsOn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_IsInToggleGroup()
        {
            if (!HookedList.Contains("get_IsInToggleGroup"))
            {
                HookedList.Add("get_IsInToggleGroup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "get_IsInToggleGroup", true),
                    get_IsInToggleGroup);
            }
        }

        internal static event Delegates.get_IsInToggleGroup_BeforeArgs _beforeget_IsInToggleGroup;
        internal static event Delegates.get_IsInToggleGroup_AfterArgs _afterget_IsInToggleGroup;

        private static bool get_IsInToggleGroup(Func<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self)
        {
            Delegates.Params_get_IsInToggleGroup @params = new()
            {
                self = self
            };
            if (_beforeget_IsInToggleGroup != null)
            {
                foreach (Delegates.get_IsInToggleGroup_BeforeArgs toInvoke in _beforeget_IsInToggleGroup
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsInToggleGroup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsInToggleGroup != null)
            {
                foreach (Delegates.get_IsInToggleGroup_AfterArgs toInvoke in
                         _afterget_IsInToggleGroup.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsInToggleGroup.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_IsInToggleGroup()
        {
            if (!HookedList.Contains("set_IsInToggleGroup"))
            {
                HookedList.Add("set_IsInToggleGroup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "set_IsInToggleGroup", true),
                    set_IsInToggleGroup);
            }
        }

        internal static event Delegates.set_IsInToggleGroup_BeforeArgs _beforeset_IsInToggleGroup;
        internal static event Delegates.set_IsInToggleGroup_AfterArgs _afterset_IsInToggleGroup;

        private static void set_IsInToggleGroup(Action<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self,
            bool value)
        {
            Delegates.Params_set_IsInToggleGroup @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_IsInToggleGroup != null)
            {
                foreach (Delegates.set_IsInToggleGroup_BeforeArgs toInvoke in _beforeset_IsInToggleGroup
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeset_IsInToggleGroup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsInToggleGroup != null)
            {
                foreach (Delegates.set_IsInToggleGroup_AfterArgs toInvoke in
                         _afterset_IsInToggleGroup.GetInvocationList())
                {
                    try
                    {
                        _afterset_IsInToggleGroup.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIToggleButton.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.tk2dUIToggleButton.orig_Start orig, tk2dUIToggleButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIToggleButton.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIToggleButton.orig_OnEnable orig, tk2dUIToggleButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIToggleButton.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIToggleButton.orig_OnDisable orig, tk2dUIToggleButton self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookButtonClick()
        {
            if (!HookedList.Contains("ButtonClick"))
            {
                HookedList.Add("ButtonClick");
                On.tk2dUIToggleButton.ButtonClick += ButtonClick;
            }
        }

        internal static event Delegates.ButtonClick_BeforeArgs _beforeButtonClick;
        internal static event Delegates.ButtonClick_AfterArgs _afterButtonClick;

        private static void ButtonClick(On.tk2dUIToggleButton.orig_ButtonClick orig, tk2dUIToggleButton self)
        {
            Delegates.Params_ButtonClick @params = new()
            {
                self = self
            };
            if (_beforeButtonClick != null)
            {
                foreach (Delegates.ButtonClick_BeforeArgs toInvoke in _beforeButtonClick.GetInvocationList())
                {
                    try
                    {
                        _beforeButtonClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterButtonClick != null)
            {
                foreach (Delegates.ButtonClick_AfterArgs toInvoke in _afterButtonClick.GetInvocationList())
                {
                    try
                    {
                        _afterButtonClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookButtonDown()
        {
            if (!HookedList.Contains("ButtonDown"))
            {
                HookedList.Add("ButtonDown");
                On.tk2dUIToggleButton.ButtonDown += ButtonDown;
            }
        }

        internal static event Delegates.ButtonDown_BeforeArgs _beforeButtonDown;
        internal static event Delegates.ButtonDown_AfterArgs _afterButtonDown;

        private static void ButtonDown(On.tk2dUIToggleButton.orig_ButtonDown orig, tk2dUIToggleButton self)
        {
            Delegates.Params_ButtonDown @params = new()
            {
                self = self
            };
            if (_beforeButtonDown != null)
            {
                foreach (Delegates.ButtonDown_BeforeArgs toInvoke in _beforeButtonDown.GetInvocationList())
                {
                    try
                    {
                        _beforeButtonDown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterButtonDown != null)
            {
                foreach (Delegates.ButtonDown_AfterArgs toInvoke in _afterButtonDown.GetInvocationList())
                {
                    try
                    {
                        _afterButtonDown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookButtonToggle()
        {
            if (!HookedList.Contains("ButtonToggle"))
            {
                HookedList.Add("ButtonToggle");
                On.tk2dUIToggleButton.ButtonToggle += ButtonToggle;
            }
        }

        internal static event Delegates.ButtonToggle_BeforeArgs _beforeButtonToggle;
        internal static event Delegates.ButtonToggle_AfterArgs _afterButtonToggle;

        private static void ButtonToggle(On.tk2dUIToggleButton.orig_ButtonToggle orig, tk2dUIToggleButton self)
        {
            Delegates.Params_ButtonToggle @params = new()
            {
                self = self
            };
            if (_beforeButtonToggle != null)
            {
                foreach (Delegates.ButtonToggle_BeforeArgs toInvoke in _beforeButtonToggle.GetInvocationList())
                {
                    try
                    {
                        _beforeButtonToggle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterButtonToggle != null)
            {
                foreach (Delegates.ButtonToggle_AfterArgs toInvoke in _afterButtonToggle.GetInvocationList())
                {
                    try
                    {
                        _afterButtonToggle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.tk2dUIToggleButton.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_AfterArgs _afterSetState;

        private static void SetState(On.tk2dUIToggleButton.orig_SetState orig, tk2dUIToggleButton self)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self
            };
            if (_beforeSetState != null)
            {
                foreach (Delegates.SetState_BeforeArgs toInvoke in _beforeSetState.GetInvocationList())
                {
                    try
                    {
                        _beforeSetState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterSetState != null)
            {
                foreach (Delegates.SetState_AfterArgs toInvoke in _afterSetState.GetInvocationList())
                {
                    try
                    {
                        _afterSetState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_IsOn
        {
            public tk2dUIToggleButton self;
        }

        public delegate void get_IsOn_BeforeArgs(Params_get_IsOn args);

        public delegate bool get_IsOn_AfterArgs(Params_get_IsOn args, bool ret);

        public delegate bool get_IsOn_WithArgs(Func<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self);

        public sealed class Params_set_IsOn
        {
            public tk2dUIToggleButton self;
            public bool value;
        }

        public delegate void set_IsOn_BeforeArgs(Params_set_IsOn args);

        public delegate void set_IsOn_AfterArgs(Params_set_IsOn args);

        public delegate void set_IsOn_WithArgs(Action<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self,
            bool value);

        public sealed class Params_get_IsInToggleGroup
        {
            public tk2dUIToggleButton self;
        }

        public delegate void get_IsInToggleGroup_BeforeArgs(Params_get_IsInToggleGroup args);

        public delegate bool get_IsInToggleGroup_AfterArgs(Params_get_IsInToggleGroup args, bool ret);

        public delegate bool get_IsInToggleGroup_WithArgs(Func<tk2dUIToggleButton, bool> orig, tk2dUIToggleButton self);

        public sealed class Params_set_IsInToggleGroup
        {
            public tk2dUIToggleButton self;
            public bool value;
        }

        public delegate void set_IsInToggleGroup_BeforeArgs(Params_set_IsInToggleGroup args);

        public delegate void set_IsInToggleGroup_AfterArgs(Params_set_IsInToggleGroup args);

        public delegate void set_IsInToggleGroup_WithArgs(Action<tk2dUIToggleButton, bool> orig,
            tk2dUIToggleButton self, bool value);

        public sealed class Params_Start
        {
            public tk2dUIToggleButton self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);

        public sealed class Params_OnEnable
        {
            public tk2dUIToggleButton self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);

        public sealed class Params_OnDisable
        {
            public tk2dUIToggleButton self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);

        public sealed class Params_ButtonClick
        {
            public tk2dUIToggleButton self;
        }

        public delegate void ButtonClick_BeforeArgs(Params_ButtonClick args);

        public delegate void ButtonClick_AfterArgs(Params_ButtonClick args);

        public delegate void ButtonClick_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);

        public sealed class Params_ButtonDown
        {
            public tk2dUIToggleButton self;
        }

        public delegate void ButtonDown_BeforeArgs(Params_ButtonDown args);

        public delegate void ButtonDown_AfterArgs(Params_ButtonDown args);

        public delegate void ButtonDown_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);

        public sealed class Params_ButtonToggle
        {
            public tk2dUIToggleButton self;
        }

        public delegate void ButtonToggle_BeforeArgs(Params_ButtonToggle args);

        public delegate void ButtonToggle_AfterArgs(Params_ButtonToggle args);

        public delegate void ButtonToggle_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);

        public sealed class Params_SetState
        {
            public tk2dUIToggleButton self;
        }

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_AfterArgs(Params_SetState args);

        public delegate void SetState_WithArgs(Action<tk2dUIToggleButton> orig, tk2dUIToggleButton self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_IsOn_BeforeArgs get_IsOn
        {
            add
            {
                HookHandler._beforeget_IsOn += value;
                HookHandler.Hookget_IsOn();
            }
            remove => HookHandler._beforeget_IsOn -= value;
        }

        public static event Delegates.set_IsOn_BeforeArgs set_IsOn
        {
            add
            {
                HookHandler._beforeset_IsOn += value;
                HookHandler.Hookset_IsOn();
            }
            remove => HookHandler._beforeset_IsOn -= value;
        }

        public static event Delegates.get_IsInToggleGroup_BeforeArgs get_IsInToggleGroup
        {
            add
            {
                HookHandler._beforeget_IsInToggleGroup += value;
                HookHandler.Hookget_IsInToggleGroup();
            }
            remove => HookHandler._beforeget_IsInToggleGroup -= value;
        }

        public static event Delegates.set_IsInToggleGroup_BeforeArgs set_IsInToggleGroup
        {
            add
            {
                HookHandler._beforeset_IsInToggleGroup += value;
                HookHandler.Hookset_IsInToggleGroup();
            }
            remove => HookHandler._beforeset_IsInToggleGroup -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.ButtonClick_BeforeArgs ButtonClick
        {
            add
            {
                HookHandler._beforeButtonClick += value;
                HookHandler.HookButtonClick();
            }
            remove => HookHandler._beforeButtonClick -= value;
        }

        public static event Delegates.ButtonDown_BeforeArgs ButtonDown
        {
            add
            {
                HookHandler._beforeButtonDown += value;
                HookHandler.HookButtonDown();
            }
            remove => HookHandler._beforeButtonDown -= value;
        }

        public static event Delegates.ButtonToggle_BeforeArgs ButtonToggle
        {
            add
            {
                HookHandler._beforeButtonToggle += value;
                HookHandler.HookButtonToggle();
            }
            remove => HookHandler._beforeButtonToggle -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_IsOn_AfterArgs get_IsOn
        {
            add
            {
                HookHandler._afterget_IsOn += value;
                HookHandler.Hookget_IsOn();
            }
            remove => HookHandler._afterget_IsOn -= value;
        }

        public static event Delegates.set_IsOn_AfterArgs set_IsOn
        {
            add
            {
                HookHandler._afterset_IsOn += value;
                HookHandler.Hookset_IsOn();
            }
            remove => HookHandler._afterset_IsOn -= value;
        }

        public static event Delegates.get_IsInToggleGroup_AfterArgs get_IsInToggleGroup
        {
            add
            {
                HookHandler._afterget_IsInToggleGroup += value;
                HookHandler.Hookget_IsInToggleGroup();
            }
            remove => HookHandler._afterget_IsInToggleGroup -= value;
        }

        public static event Delegates.set_IsInToggleGroup_AfterArgs set_IsInToggleGroup
        {
            add
            {
                HookHandler._afterset_IsInToggleGroup += value;
                HookHandler.Hookset_IsInToggleGroup();
            }
            remove => HookHandler._afterset_IsInToggleGroup -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.ButtonClick_AfterArgs ButtonClick
        {
            add
            {
                HookHandler._afterButtonClick += value;
                HookHandler.HookButtonClick();
            }
            remove => HookHandler._afterButtonClick -= value;
        }

        public static event Delegates.ButtonDown_AfterArgs ButtonDown
        {
            add
            {
                HookHandler._afterButtonDown += value;
                HookHandler.HookButtonDown();
            }
            remove => HookHandler._afterButtonDown -= value;
        }

        public static event Delegates.ButtonToggle_AfterArgs ButtonToggle
        {
            add
            {
                HookHandler._afterButtonToggle += value;
                HookHandler.HookButtonToggle();
            }
            remove => HookHandler._afterButtonToggle -= value;
        }

        public static event Delegates.SetState_AfterArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_IsOn_WithArgs get_IsOn
        {
            add => HookEndpointManager.Add<Delegates.get_IsOn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "get_IsOn", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsOn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "get_IsOn", true), value);
        }

        public static event Delegates.set_IsOn_WithArgs set_IsOn
        {
            add => HookEndpointManager.Add<Delegates.set_IsOn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "set_IsOn", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsOn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "set_IsOn", true), value);
        }

        public static event Delegates.get_IsInToggleGroup_WithArgs get_IsInToggleGroup
        {
            add => HookEndpointManager.Add<Delegates.get_IsInToggleGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "get_IsInToggleGroup", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsInToggleGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "get_IsInToggleGroup", true), value);
        }

        public static event Delegates.set_IsInToggleGroup_WithArgs set_IsInToggleGroup
        {
            add => HookEndpointManager.Add<Delegates.set_IsInToggleGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "set_IsInToggleGroup", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsInToggleGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIToggleButton), "set_IsInToggleGroup", true), value);
        }

        public static event On.tk2dUIToggleButton.hook_Start Start
        {
            add => On.tk2dUIToggleButton.Start += value;
            remove => On.tk2dUIToggleButton.Start -= value;
        }

        public static event On.tk2dUIToggleButton.hook_OnEnable OnEnable
        {
            add => On.tk2dUIToggleButton.OnEnable += value;
            remove => On.tk2dUIToggleButton.OnEnable -= value;
        }

        public static event On.tk2dUIToggleButton.hook_OnDisable OnDisable
        {
            add => On.tk2dUIToggleButton.OnDisable += value;
            remove => On.tk2dUIToggleButton.OnDisable -= value;
        }

        public static event On.tk2dUIToggleButton.hook_ButtonClick ButtonClick
        {
            add => On.tk2dUIToggleButton.ButtonClick += value;
            remove => On.tk2dUIToggleButton.ButtonClick -= value;
        }

        public static event On.tk2dUIToggleButton.hook_ButtonDown ButtonDown
        {
            add => On.tk2dUIToggleButton.ButtonDown += value;
            remove => On.tk2dUIToggleButton.ButtonDown -= value;
        }

        public static event On.tk2dUIToggleButton.hook_ButtonToggle ButtonToggle
        {
            add => On.tk2dUIToggleButton.ButtonToggle += value;
            remove => On.tk2dUIToggleButton.ButtonToggle -= value;
        }

        public static event On.tk2dUIToggleButton.hook_SetState SetState
        {
            add => On.tk2dUIToggleButton.SetState += value;
            remove => On.tk2dUIToggleButton.SetState -= value;
        }
    }
}