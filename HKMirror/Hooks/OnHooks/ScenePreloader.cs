using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ScenePreloader class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnScenePreloader
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ScenePreloader.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.ScenePreloader.orig_Start orig, ScenePreloader self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.ScenePreloader.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;

        private static void OnGUI(On.ScenePreloader.orig_OnGUI orig, ScenePreloader self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            if (_beforeOnGUI != null)
            {
                foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
                {
                    try
                    {
                        _beforeOnGUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnGUI != null)
            {
                foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
                {
                    try
                    {
                        _afterOnGUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLoadRoutine()
        {
            if (!HookedList.Contains("LoadRoutine"))
            {
                HookedList.Add("LoadRoutine");
                On.ScenePreloader.LoadRoutine += LoadRoutine;
            }
        }

        internal static event Delegates.LoadRoutine_BeforeArgs _beforeLoadRoutine;

        private static System.Collections.IEnumerator LoadRoutine(On.ScenePreloader.orig_LoadRoutine orig,
            ScenePreloader self)
        {
            Delegates.Params_LoadRoutine @params = new()
            {
                self = self
            };
            if (_beforeLoadRoutine != null)
            {
                foreach (Delegates.LoadRoutine_BeforeArgs toInvoke in _beforeLoadRoutine.GetInvocationList())
                {
                    try
                    {
                        _beforeLoadRoutine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFinishPendingOperations()
        {
            if (!HookedList.Contains("FinishPendingOperations"))
            {
                HookedList.Add("FinishPendingOperations");
                On.ScenePreloader.FinishPendingOperations += FinishPendingOperations;
            }
        }

        internal static event Delegates.FinishPendingOperations_BeforeArgs _beforeFinishPendingOperations;

        private static System.Collections.IEnumerator FinishPendingOperations(
            On.ScenePreloader.orig_FinishPendingOperations orig)
        {
            if (_beforeFinishPendingOperations != null)
            {
                foreach (Delegates.FinishPendingOperations_BeforeArgs toInvoke in _beforeFinishPendingOperations
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeFinishPendingOperations?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return orig();
        }

        internal static void HookCleanup()
        {
            if (!HookedList.Contains("Cleanup"))
            {
                HookedList.Add("Cleanup");
                On.ScenePreloader.Cleanup += Cleanup;
            }
        }

        internal static event Delegates.Cleanup_BeforeArgs _beforeCleanup;
        internal static event Delegates.Cleanup_AfterArgs _afterCleanup;

        private static void Cleanup(On.ScenePreloader.orig_Cleanup orig)
        {
            if (_beforeCleanup != null)
            {
                foreach (Delegates.Cleanup_BeforeArgs toInvoke in _beforeCleanup.GetInvocationList())
                {
                    try
                    {
                        _beforeCleanup?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterCleanup != null)
            {
                foreach (Delegates.Cleanup_AfterArgs toInvoke in _afterCleanup.GetInvocationList())
                {
                    try
                    {
                        _afterCleanup.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public ScenePreloader self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<ScenePreloader> orig, ScenePreloader self);

        public sealed class Params_OnGUI
        {
            public ScenePreloader self;
        }

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_AfterArgs(Params_OnGUI args);

        public delegate void OnGUI_WithArgs(Action<ScenePreloader> orig, ScenePreloader self);

        public sealed class Params_LoadRoutine
        {
            public ScenePreloader self;
        }

        public delegate void LoadRoutine_BeforeArgs(Params_LoadRoutine args);

        public delegate System.Collections.IEnumerator LoadRoutine_AfterArgs(Params_LoadRoutine args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator LoadRoutine_WithArgs(
            Func<ScenePreloader, System.Collections.IEnumerator> orig, ScenePreloader self);

        public delegate void FinishPendingOperations_BeforeArgs();

        public delegate System.Collections.IEnumerator FinishPendingOperations_AfterArgs(
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator FinishPendingOperations_WithArgs(
            Func<System.Collections.IEnumerator> orig);

        public delegate void Cleanup_BeforeArgs();

        public delegate void Cleanup_AfterArgs();

        public delegate void Cleanup_WithArgs(Action orig);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.LoadRoutine_BeforeArgs LoadRoutine
        {
            add
            {
                HookHandler._beforeLoadRoutine += value;
                HookHandler.HookLoadRoutine();
            }
            remove => HookHandler._beforeLoadRoutine -= value;
        }

        public static event Delegates.FinishPendingOperations_BeforeArgs FinishPendingOperations
        {
            add
            {
                HookHandler._beforeFinishPendingOperations += value;
                HookHandler.HookFinishPendingOperations();
            }
            remove => HookHandler._beforeFinishPendingOperations -= value;
        }

        public static event Delegates.Cleanup_BeforeArgs Cleanup
        {
            add
            {
                HookHandler._beforeCleanup += value;
                HookHandler.HookCleanup();
            }
            remove => HookHandler._beforeCleanup -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnGUI_AfterArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.Cleanup_AfterArgs Cleanup
        {
            add
            {
                HookHandler._afterCleanup += value;
                HookHandler.HookCleanup();
            }
            remove => HookHandler._afterCleanup -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ScenePreloader.hook_Start Start
        {
            add => On.ScenePreloader.Start += value;
            remove => On.ScenePreloader.Start -= value;
        }

        public static event On.ScenePreloader.hook_OnGUI OnGUI
        {
            add => On.ScenePreloader.OnGUI += value;
            remove => On.ScenePreloader.OnGUI -= value;
        }

        public static event On.ScenePreloader.hook_LoadRoutine LoadRoutine
        {
            add => On.ScenePreloader.LoadRoutine += value;
            remove => On.ScenePreloader.LoadRoutine -= value;
        }

        public static event On.ScenePreloader.hook_FinishPendingOperations FinishPendingOperations
        {
            add => On.ScenePreloader.FinishPendingOperations += value;
            remove => On.ScenePreloader.FinishPendingOperations -= value;
        }

        public static event On.ScenePreloader.hook_Cleanup Cleanup
        {
            add => On.ScenePreloader.Cleanup += value;
            remove => On.ScenePreloader.Cleanup -= value;
        }
    }
}