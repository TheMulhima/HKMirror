namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteCollectionDefinition class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteCollectionDefinition
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCopyFrom()
        {
            if (!HookedList.Contains("CopyFrom"))
            {
                HookedList.Add("CopyFrom");
                On.tk2dSpriteCollectionDefinition.CopyFrom += CopyFrom;
            }
        }

        internal static event Delegates.CopyFrom_BeforeArgs _beforeCopyFrom;
        internal static event Delegates.CopyFrom_NormalArgs _afterCopyFrom;

        private static void CopyFrom(On.tk2dSpriteCollectionDefinition.orig_CopyFrom orig,
            tk2dSpriteCollectionDefinition self, tk2dSpriteCollectionDefinition src)
        {
            Delegates.Params_CopyFrom @params = new()
            {
                self = self, src = src
            };
            _beforeCopyFrom?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            orig(self, src);
            if (_afterCopyFrom != null) _afterCopyFrom.Invoke(@params);
        }

        internal static void HookClear()
        {
            if (!HookedList.Contains("Clear"))
            {
                HookedList.Add("Clear");
                On.tk2dSpriteCollectionDefinition.Clear += Clear;
            }
        }

        internal static event Delegates.Clear_BeforeArgs _beforeClear;
        internal static event Delegates.Clear_NormalArgs _afterClear;

        private static void Clear(On.tk2dSpriteCollectionDefinition.orig_Clear orig,
            tk2dSpriteCollectionDefinition self)
        {
            Delegates.Params_Clear @params = new()
            {
                self = self
            };
            _beforeClear?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClear != null) _afterClear.Invoke(@params);
        }

        internal static void HookCompareTo()
        {
            if (!HookedList.Contains("CompareTo"))
            {
                HookedList.Add("CompareTo");
                On.tk2dSpriteCollectionDefinition.CompareTo += CompareTo;
            }
        }

        internal static event Delegates.CompareTo_BeforeArgs _beforeCompareTo;
        internal static event Delegates.CompareTo_NormalArgs _afterCompareTo;

        private static bool CompareTo(On.tk2dSpriteCollectionDefinition.orig_CompareTo orig,
            tk2dSpriteCollectionDefinition self, tk2dSpriteCollectionDefinition src)
        {
            Delegates.Params_CompareTo @params = new()
            {
                self = self, src = src
            };
            _beforeCompareTo?.Invoke(@params);
            self = @params.self;
            src = @params.src;
            var retVal = orig(self, src);
            if (_afterCompareTo != null) retVal = _afterCompareTo.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Clear_BeforeArgs(Params_Clear args);

        public delegate void Clear_NormalArgs(Params_Clear args);

        public delegate void CompareTo_BeforeArgs(Params_CompareTo args);

        public delegate bool CompareTo_NormalArgs(Params_CompareTo args);

        public delegate void CopyFrom_BeforeArgs(Params_CopyFrom args);

        public delegate void CopyFrom_NormalArgs(Params_CopyFrom args);

        public sealed class Params_CopyFrom
        {
            public tk2dSpriteCollectionDefinition self;
            public tk2dSpriteCollectionDefinition src;
        }

        public sealed class Params_Clear
        {
            public tk2dSpriteCollectionDefinition self;
        }

        public sealed class Params_CompareTo
        {
            public tk2dSpriteCollectionDefinition self;
            public tk2dSpriteCollectionDefinition src;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CopyFrom_BeforeArgs CopyFrom
        {
            add
            {
                HookHandler._beforeCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._beforeCopyFrom -= value;
        }

        public static event Delegates.Clear_BeforeArgs Clear
        {
            add
            {
                HookHandler._beforeClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._beforeClear -= value;
        }

        public static event Delegates.CompareTo_BeforeArgs CompareTo
        {
            add
            {
                HookHandler._beforeCompareTo += value;
                HookHandler.HookCompareTo();
            }
            remove => HookHandler._beforeCompareTo -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CopyFrom_NormalArgs CopyFrom
        {
            add
            {
                HookHandler._afterCopyFrom += value;
                HookHandler.HookCopyFrom();
            }
            remove => HookHandler._afterCopyFrom -= value;
        }

        public static event Delegates.Clear_NormalArgs Clear
        {
            add
            {
                HookHandler._afterClear += value;
                HookHandler.HookClear();
            }
            remove => HookHandler._afterClear -= value;
        }

        public static event Delegates.CompareTo_NormalArgs CompareTo
        {
            add
            {
                HookHandler._afterCompareTo += value;
                HookHandler.HookCompareTo();
            }
            remove => HookHandler._afterCompareTo -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dSpriteCollectionDefinition.hook_CopyFrom CopyFrom
        {
            add => On.tk2dSpriteCollectionDefinition.CopyFrom += value;
            remove => On.tk2dSpriteCollectionDefinition.CopyFrom -= value;
        }

        public static event On.tk2dSpriteCollectionDefinition.hook_Clear Clear
        {
            add => On.tk2dSpriteCollectionDefinition.Clear += value;
            remove => On.tk2dSpriteCollectionDefinition.Clear -= value;
        }

        public static event On.tk2dSpriteCollectionDefinition.hook_CompareTo CompareTo
        {
            add => On.tk2dSpriteCollectionDefinition.CompareTo += value;
            remove => On.tk2dSpriteCollectionDefinition.CompareTo -= value;
        }
    }
}