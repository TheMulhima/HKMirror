using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ControllerProfileButtons class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnControllerProfileButtons
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookSelectItem()
        {
            if (!HookedList.Contains("SelectItem"))
            {
                HookedList.Add("SelectItem");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.ControllerProfileButtons), "SelectItem", true),
                    SelectItem);
            }
        }

        internal static event Delegates.SelectItem_BeforeArgs _beforeSelectItem;
        internal static event Delegates.SelectItem_AfterArgs _afterSelectItem;

        private static void SelectItem(Action<UnityEngine.UI.ControllerProfileButtons, int> orig,
            UnityEngine.UI.ControllerProfileButtons self, int num)
        {
            Delegates.Params_SelectItem @params = new()
            {
                self = self, num = num
            };
            if (_beforeSelectItem != null)
            {
                foreach (Delegates.SelectItem_BeforeArgs toInvoke in _beforeSelectItem.GetInvocationList())
                {
                    try
                    {
                        _beforeSelectItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            num = @params.num;
            orig(self, num);
            if (_afterSelectItem != null)
            {
                foreach (Delegates.SelectItem_AfterArgs toInvoke in _afterSelectItem.GetInvocationList())
                {
                    try
                    {
                        _afterSelectItem.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_SelectItem
        {
            public UnityEngine.UI.ControllerProfileButtons self;
            public int num;
        }

        public delegate void SelectItem_BeforeArgs(Params_SelectItem args);

        public delegate void SelectItem_AfterArgs(Params_SelectItem args);

        public delegate void SelectItem_WithArgs(Action<UnityEngine.UI.ControllerProfileButtons, int> orig,
            UnityEngine.UI.ControllerProfileButtons self, int num);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SelectItem_BeforeArgs SelectItem
        {
            add
            {
                HookHandler._beforeSelectItem += value;
                HookHandler.HookSelectItem();
            }
            remove => HookHandler._beforeSelectItem -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SelectItem_AfterArgs SelectItem
        {
            add
            {
                HookHandler._afterSelectItem += value;
                HookHandler.HookSelectItem();
            }
            remove => HookHandler._afterSelectItem -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.SelectItem_WithArgs SelectItem
        {
            add => HookEndpointManager.Add<Delegates.SelectItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.ControllerProfileButtons), "SelectItem", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.SelectItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.ControllerProfileButtons), "SelectItem", true),
                value);
        }
    }
}