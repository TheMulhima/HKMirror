using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for SetZ class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSetZ
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.SetZ.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.SetZ.orig_OnEnable orig, SetZ self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetPosition()
        {
            if (!HookedList.Contains("SetPosition"))
            {
                HookedList.Add("SetPosition");
                On.SetZ.SetPosition += SetPosition;
            }
        }

        internal static event Delegates.SetPosition_BeforeArgs _beforeSetPosition;

        private static System.Collections.IEnumerator SetPosition(On.SetZ.orig_SetPosition orig, SetZ self)
        {
            Delegates.Params_SetPosition @params = new()
            {
                self = self
            };
            if (_beforeSetPosition != null)
            {
                foreach (Delegates.SetPosition_BeforeArgs toInvoke in _beforeSetPosition.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_OnEnable
        {
            public SetZ self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<SetZ> orig, SetZ self);

        public sealed class Params_SetPosition
        {
            public SetZ self;
        }

        public delegate void SetPosition_BeforeArgs(Params_SetPosition args);

        public delegate System.Collections.IEnumerator SetPosition_AfterArgs(Params_SetPosition args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator SetPosition_WithArgs(
            Func<SetZ, System.Collections.IEnumerator> orig, SetZ self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.SetPosition_BeforeArgs SetPosition
        {
            add
            {
                HookHandler._beforeSetPosition += value;
                HookHandler.HookSetPosition();
            }
            remove => HookHandler._beforeSetPosition -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SetZ.hook_OnEnable OnEnable
        {
            add => On.SetZ.OnEnable += value;
            remove => On.SetZ.OnEnable -= value;
        }

        public static event On.SetZ.hook_SetPosition SetPosition
        {
            add => On.SetZ.SetPosition += value;
            remove => On.SetZ.SetPosition -= value;
        }
    }
}