namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UnlockGGMode class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnlockGGMode
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.UnlockGGMode.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.UnlockGGMode.orig_Start orig, UnlockGGMode self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSetUnlocked()
        {
            if (!HookedList.Contains("SetUnlocked"))
            {
                HookedList.Add("SetUnlocked");
                On.UnlockGGMode.SetUnlocked += SetUnlocked;
            }
        }

        internal static event Delegates.SetUnlocked_BeforeArgs _beforeSetUnlocked;
        internal static event Delegates.SetUnlocked_NormalArgs _afterSetUnlocked;

        private static void SetUnlocked(On.UnlockGGMode.orig_SetUnlocked orig, UnlockGGMode self)
        {
            Delegates.Params_SetUnlocked @params = new()
            {
                self = self
            };
            _beforeSetUnlocked?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetUnlocked != null) _afterSetUnlocked.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void SetUnlocked_BeforeArgs(Params_SetUnlocked args);

        public delegate void SetUnlocked_NormalArgs(Params_SetUnlocked args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public UnlockGGMode self;
        }

        public sealed class Params_SetUnlocked
        {
            public UnlockGGMode self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SetUnlocked_BeforeArgs SetUnlocked
        {
            add
            {
                HookHandler._beforeSetUnlocked += value;
                HookHandler.HookSetUnlocked();
            }
            remove => HookHandler._beforeSetUnlocked -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SetUnlocked_NormalArgs SetUnlocked
        {
            add
            {
                HookHandler._afterSetUnlocked += value;
                HookHandler.HookSetUnlocked();
            }
            remove => HookHandler._afterSetUnlocked -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.UnlockGGMode.hook_Start Start
        {
            add => On.UnlockGGMode.Start += value;
            remove => On.UnlockGGMode.Start -= value;
        }

        public static event On.UnlockGGMode.hook_SetUnlocked SetUnlocked
        {
            add => On.UnlockGGMode.SetUnlocked += value;
            remove => On.UnlockGGMode.SetUnlocked -= value;
        }
    }
}