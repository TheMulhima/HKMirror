using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ContentPackDetailsUI class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnContentPackDetailsUI
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ContentPackDetailsUI.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.ContentPackDetailsUI.orig_Awake orig, ContentPackDetailsUI self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowPackDetails()
        {
            if (!HookedList.Contains("ShowPackDetails"))
            {
                HookedList.Add("ShowPackDetails");
                On.ContentPackDetailsUI.ShowPackDetails += ShowPackDetails;
            }
        }

        internal static event Delegates.ShowPackDetails_BeforeArgs _beforeShowPackDetails;
        internal static event Delegates.ShowPackDetails_AfterArgs _afterShowPackDetails;

        private static void ShowPackDetails(On.ContentPackDetailsUI.orig_ShowPackDetails orig,
            ContentPackDetailsUI self, int index)
        {
            Delegates.Params_ShowPackDetails @params = new()
            {
                self = self, index = index
            };
            if (_beforeShowPackDetails != null)
            {
                foreach (Delegates.ShowPackDetails_BeforeArgs toInvoke in _beforeShowPackDetails.GetInvocationList())
                {
                    try
                    {
                        _beforeShowPackDetails?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterShowPackDetails != null)
            {
                foreach (Delegates.ShowPackDetails_AfterArgs toInvoke in _afterShowPackDetails.GetInvocationList())
                {
                    try
                    {
                        _afterShowPackDetails.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.ContentPackDetailsUI.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.ContentPackDetailsUI.orig_OnEnable orig, ContentPackDetailsUI self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.ContentPackDetailsUI.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.ContentPackDetailsUI.orig_OnDisable orig, ContentPackDetailsUI self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateDelayed()
        {
            if (!HookedList.Contains("UpdateDelayed"))
            {
                HookedList.Add("UpdateDelayed");
                On.ContentPackDetailsUI.UpdateDelayed += UpdateDelayed;
            }
        }

        internal static event Delegates.UpdateDelayed_BeforeArgs _beforeUpdateDelayed;

        private static System.Collections.IEnumerator UpdateDelayed(On.ContentPackDetailsUI.orig_UpdateDelayed orig,
            ContentPackDetailsUI self)
        {
            Delegates.Params_UpdateDelayed @params = new()
            {
                self = self
            };
            if (_beforeUpdateDelayed != null)
            {
                foreach (Delegates.UpdateDelayed_BeforeArgs toInvoke in _beforeUpdateDelayed.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateDelayed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookUndoMenuStyle()
        {
            if (!HookedList.Contains("UndoMenuStyle"))
            {
                HookedList.Add("UndoMenuStyle");
                On.ContentPackDetailsUI.UndoMenuStyle += UndoMenuStyle;
            }
        }

        internal static event Delegates.UndoMenuStyle_BeforeArgs _beforeUndoMenuStyle;
        internal static event Delegates.UndoMenuStyle_AfterArgs _afterUndoMenuStyle;

        private static void UndoMenuStyle(On.ContentPackDetailsUI.orig_UndoMenuStyle orig, ContentPackDetailsUI self)
        {
            Delegates.Params_UndoMenuStyle @params = new()
            {
                self = self
            };
            if (_beforeUndoMenuStyle != null)
            {
                foreach (Delegates.UndoMenuStyle_BeforeArgs toInvoke in _beforeUndoMenuStyle.GetInvocationList())
                {
                    try
                    {
                        _beforeUndoMenuStyle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUndoMenuStyle != null)
            {
                foreach (Delegates.UndoMenuStyle_AfterArgs toInvoke in _afterUndoMenuStyle.GetInvocationList())
                {
                    try
                    {
                        _afterUndoMenuStyle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public ContentPackDetailsUI self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<ContentPackDetailsUI> orig, ContentPackDetailsUI self);

        public sealed class Params_ShowPackDetails
        {
            public ContentPackDetailsUI self;
            public int index;
        }

        public delegate void ShowPackDetails_BeforeArgs(Params_ShowPackDetails args);

        public delegate void ShowPackDetails_AfterArgs(Params_ShowPackDetails args);

        public delegate void ShowPackDetails_WithArgs(Action<ContentPackDetailsUI, int> orig, ContentPackDetailsUI self,
            int index);

        public sealed class Params_OnEnable
        {
            public ContentPackDetailsUI self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<ContentPackDetailsUI> orig, ContentPackDetailsUI self);

        public sealed class Params_OnDisable
        {
            public ContentPackDetailsUI self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<ContentPackDetailsUI> orig, ContentPackDetailsUI self);

        public sealed class Params_UpdateDelayed
        {
            public ContentPackDetailsUI self;
        }

        public delegate void UpdateDelayed_BeforeArgs(Params_UpdateDelayed args);

        public delegate System.Collections.IEnumerator UpdateDelayed_AfterArgs(Params_UpdateDelayed args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator UpdateDelayed_WithArgs(
            Func<ContentPackDetailsUI, System.Collections.IEnumerator> orig, ContentPackDetailsUI self);

        public sealed class Params_UndoMenuStyle
        {
            public ContentPackDetailsUI self;
        }

        public delegate void UndoMenuStyle_BeforeArgs(Params_UndoMenuStyle args);

        public delegate void UndoMenuStyle_AfterArgs(Params_UndoMenuStyle args);

        public delegate void UndoMenuStyle_WithArgs(Action<ContentPackDetailsUI> orig, ContentPackDetailsUI self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.ShowPackDetails_BeforeArgs ShowPackDetails
        {
            add
            {
                HookHandler._beforeShowPackDetails += value;
                HookHandler.HookShowPackDetails();
            }
            remove => HookHandler._beforeShowPackDetails -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.UpdateDelayed_BeforeArgs UpdateDelayed
        {
            add
            {
                HookHandler._beforeUpdateDelayed += value;
                HookHandler.HookUpdateDelayed();
            }
            remove => HookHandler._beforeUpdateDelayed -= value;
        }

        public static event Delegates.UndoMenuStyle_BeforeArgs UndoMenuStyle
        {
            add
            {
                HookHandler._beforeUndoMenuStyle += value;
                HookHandler.HookUndoMenuStyle();
            }
            remove => HookHandler._beforeUndoMenuStyle -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.ShowPackDetails_AfterArgs ShowPackDetails
        {
            add
            {
                HookHandler._afterShowPackDetails += value;
                HookHandler.HookShowPackDetails();
            }
            remove => HookHandler._afterShowPackDetails -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.UndoMenuStyle_AfterArgs UndoMenuStyle
        {
            add
            {
                HookHandler._afterUndoMenuStyle += value;
                HookHandler.HookUndoMenuStyle();
            }
            remove => HookHandler._afterUndoMenuStyle -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ContentPackDetailsUI.hook_Awake Awake
        {
            add => On.ContentPackDetailsUI.Awake += value;
            remove => On.ContentPackDetailsUI.Awake -= value;
        }

        public static event On.ContentPackDetailsUI.hook_ShowPackDetails ShowPackDetails
        {
            add => On.ContentPackDetailsUI.ShowPackDetails += value;
            remove => On.ContentPackDetailsUI.ShowPackDetails -= value;
        }

        public static event On.ContentPackDetailsUI.hook_OnEnable OnEnable
        {
            add => On.ContentPackDetailsUI.OnEnable += value;
            remove => On.ContentPackDetailsUI.OnEnable -= value;
        }

        public static event On.ContentPackDetailsUI.hook_OnDisable OnDisable
        {
            add => On.ContentPackDetailsUI.OnDisable += value;
            remove => On.ContentPackDetailsUI.OnDisable -= value;
        }

        public static event On.ContentPackDetailsUI.hook_UpdateDelayed UpdateDelayed
        {
            add => On.ContentPackDetailsUI.UpdateDelayed += value;
            remove => On.ContentPackDetailsUI.UpdateDelayed -= value;
        }

        public static event On.ContentPackDetailsUI.hook_UndoMenuStyle UndoMenuStyle
        {
            add => On.ContentPackDetailsUI.UndoMenuStyle += value;
            remove => On.ContentPackDetailsUI.UndoMenuStyle -= value;
        }
    }
}