namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FakeBat class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFakeBat
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.FakeBat.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.FakeBat.orig_Awake orig, FakeBat self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.FakeBat.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.FakeBat.orig_Init orig)
        {
            if (_beforeInit != null)
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterInit != null)
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.FakeBat.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.FakeBat.orig_OnEnable orig, FakeBat self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.FakeBat.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.FakeBat.orig_OnDisable orig, FakeBat self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.FakeBat.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.FakeBat.orig_Start orig, FakeBat self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.FakeBat.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.FakeBat.orig_Update orig, FakeBat self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookNotifyAllBossAwake()
        {
            if (!HookedList.Contains("NotifyAllBossAwake"))
            {
                HookedList.Add("NotifyAllBossAwake");
                On.FakeBat.NotifyAllBossAwake += NotifyAllBossAwake;
            }
        }

        internal static event Delegates.NotifyAllBossAwake_BeforeArgs _beforeNotifyAllBossAwake;
        internal static event Delegates.NotifyAllBossAwake_AfterArgs _afterNotifyAllBossAwake;

        private static void NotifyAllBossAwake(On.FakeBat.orig_NotifyAllBossAwake orig)
        {
            if (_beforeNotifyAllBossAwake != null)
                foreach (Delegates.NotifyAllBossAwake_BeforeArgs toInvoke in
                         _beforeNotifyAllBossAwake.GetInvocationList())
                    try
                    {
                        _beforeNotifyAllBossAwake?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterNotifyAllBossAwake != null)
                foreach (Delegates.NotifyAllBossAwake_AfterArgs toInvoke in
                         _afterNotifyAllBossAwake.GetInvocationList())
                    try
                    {
                        _afterNotifyAllBossAwake.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookNotifyBossAwake()
        {
            if (!HookedList.Contains("NotifyBossAwake"))
            {
                HookedList.Add("NotifyBossAwake");
                On.FakeBat.NotifyBossAwake += NotifyBossAwake;
            }
        }

        internal static event Delegates.NotifyBossAwake_BeforeArgs _beforeNotifyBossAwake;
        internal static event Delegates.NotifyBossAwake_AfterArgs _afterNotifyBossAwake;

        private static void NotifyBossAwake(On.FakeBat.orig_NotifyBossAwake orig, FakeBat self)
        {
            Delegates.Params_NotifyBossAwake @params = new()
            {
                self = self
            };
            if (_beforeNotifyBossAwake != null)
                foreach (Delegates.NotifyBossAwake_BeforeArgs toInvoke in _beforeNotifyBossAwake.GetInvocationList())
                    try
                    {
                        _beforeNotifyBossAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterNotifyBossAwake != null)
                foreach (Delegates.NotifyBossAwake_AfterArgs toInvoke in _afterNotifyBossAwake.GetInvocationList())
                    try
                    {
                        _afterNotifyBossAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendAllOut()
        {
            if (!HookedList.Contains("SendAllOut"))
            {
                HookedList.Add("SendAllOut");
                On.FakeBat.SendAllOut += SendAllOut;
            }
        }

        internal static event Delegates.SendAllOut_BeforeArgs _beforeSendAllOut;
        internal static event Delegates.SendAllOut_AfterArgs _afterSendAllOut;

        private static void SendAllOut(On.FakeBat.orig_SendAllOut orig)
        {
            if (_beforeSendAllOut != null)
                foreach (Delegates.SendAllOut_BeforeArgs toInvoke in _beforeSendAllOut.GetInvocationList())
                    try
                    {
                        _beforeSendAllOut?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterSendAllOut != null)
                foreach (Delegates.SendAllOut_AfterArgs toInvoke in _afterSendAllOut.GetInvocationList())
                    try
                    {
                        _afterSendAllOut.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendOut()
        {
            if (!HookedList.Contains("SendOut"))
            {
                HookedList.Add("SendOut");
                On.FakeBat.SendOut += SendOut;
            }
        }

        internal static event Delegates.SendOut_BeforeArgs _beforeSendOut;
        internal static event Delegates.SendOut_AfterArgs _afterSendOut;

        private static void SendOut(On.FakeBat.orig_SendOut orig, FakeBat self)
        {
            Delegates.Params_SendOut @params = new()
            {
                self = self
            };
            if (_beforeSendOut != null)
                foreach (Delegates.SendOut_BeforeArgs toInvoke in _beforeSendOut.GetInvocationList())
                    try
                    {
                        _beforeSendOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSendOut != null)
                foreach (Delegates.SendOut_AfterArgs toInvoke in _afterSendOut.GetInvocationList())
                    try
                    {
                        _afterSendOut.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendOutRoutine()
        {
            if (!HookedList.Contains("SendOutRoutine"))
            {
                HookedList.Add("SendOutRoutine");
                On.FakeBat.SendOutRoutine += SendOutRoutine;
            }
        }

        internal static event Delegates.SendOutRoutine_BeforeArgs _beforeSendOutRoutine;

        private static IEnumerator SendOutRoutine(On.FakeBat.orig_SendOutRoutine orig, FakeBat self)
        {
            Delegates.Params_SendOutRoutine @params = new()
            {
                self = self
            };
            if (_beforeSendOutRoutine != null)
                foreach (Delegates.SendOutRoutine_BeforeArgs toInvoke in _beforeSendOutRoutine.GetInvocationList())
                    try
                    {
                        _beforeSendOutRoutine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookBringAllIn()
        {
            if (!HookedList.Contains("BringAllIn"))
            {
                HookedList.Add("BringAllIn");
                On.FakeBat.BringAllIn += BringAllIn;
            }
        }

        internal static event Delegates.BringAllIn_BeforeArgs _beforeBringAllIn;
        internal static event Delegates.BringAllIn_AfterArgs _afterBringAllIn;

        private static void BringAllIn(On.FakeBat.orig_BringAllIn orig)
        {
            if (_beforeBringAllIn != null)
                foreach (Delegates.BringAllIn_BeforeArgs toInvoke in _beforeBringAllIn.GetInvocationList())
                    try
                    {
                        _beforeBringAllIn?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterBringAllIn != null)
                foreach (Delegates.BringAllIn_AfterArgs toInvoke in _afterBringAllIn.GetInvocationList())
                    try
                    {
                        _afterBringAllIn.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBringIn()
        {
            if (!HookedList.Contains("BringIn"))
            {
                HookedList.Add("BringIn");
                On.FakeBat.BringIn += BringIn;
            }
        }

        internal static event Delegates.BringIn_BeforeArgs _beforeBringIn;
        internal static event Delegates.BringIn_AfterArgs _afterBringIn;

        private static void BringIn(On.FakeBat.orig_BringIn orig, FakeBat self)
        {
            Delegates.Params_BringIn @params = new()
            {
                self = self
            };
            if (_beforeBringIn != null)
                foreach (Delegates.BringIn_BeforeArgs toInvoke in _beforeBringIn.GetInvocationList())
                    try
                    {
                        _beforeBringIn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterBringIn != null)
                foreach (Delegates.BringIn_AfterArgs toInvoke in _afterBringIn.GetInvocationList())
                    try
                    {
                        _afterBringIn.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBringInRoutine()
        {
            if (!HookedList.Contains("BringInRoutine"))
            {
                HookedList.Add("BringInRoutine");
                On.FakeBat.BringInRoutine += BringInRoutine;
            }
        }

        internal static event Delegates.BringInRoutine_BeforeArgs _beforeBringInRoutine;

        private static IEnumerator BringInRoutine(On.FakeBat.orig_BringInRoutine orig, FakeBat self)
        {
            Delegates.Params_BringInRoutine @params = new()
            {
                self = self
            };
            if (_beforeBringInRoutine != null)
                foreach (Delegates.BringInRoutine_BeforeArgs toInvoke in _beforeBringInRoutine.GetInvocationList())
                    try
                    {
                        _beforeBringInRoutine?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFaceDirection()
        {
            if (!HookedList.Contains("FaceDirection"))
            {
                HookedList.Add("FaceDirection");
                On.FakeBat.FaceDirection += FaceDirection;
            }
        }

        internal static event Delegates.FaceDirection_BeforeArgs _beforeFaceDirection;
        internal static event Delegates.FaceDirection_AfterArgs _afterFaceDirection;

        private static void FaceDirection(On.FakeBat.orig_FaceDirection orig, FakeBat self, int sign, bool snap)
        {
            Delegates.Params_FaceDirection @params = new()
            {
                self = self, sign = sign, snap = snap
            };
            if (_beforeFaceDirection != null)
                foreach (Delegates.FaceDirection_BeforeArgs toInvoke in _beforeFaceDirection.GetInvocationList())
                    try
                    {
                        _beforeFaceDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            sign = @params.sign;
            snap = @params.snap;
            orig(self, sign, snap);
            if (_afterFaceDirection != null)
                foreach (Delegates.FaceDirection_AfterArgs toInvoke in _afterFaceDirection.GetInvocationList())
                    try
                    {
                        _afterFaceDirection.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAccelerate()
        {
            if (!HookedList.Contains("Accelerate"))
            {
                HookedList.Add("Accelerate");
                On.FakeBat.Accelerate += Accelerate;
            }
        }

        internal static event Delegates.Accelerate_BeforeArgs _beforeAccelerate;
        internal static event Delegates.Accelerate_AfterArgs _afterAccelerate;

        private static void Accelerate(On.FakeBat.orig_Accelerate orig, FakeBat self, Vector2 fixedAcceleration,
            Vector2 speedLimit)
        {
            Delegates.Params_Accelerate @params = new()
            {
                self = self, fixedAcceleration = fixedAcceleration, speedLimit = speedLimit
            };
            if (_beforeAccelerate != null)
                foreach (Delegates.Accelerate_BeforeArgs toInvoke in _beforeAccelerate.GetInvocationList())
                    try
                    {
                        _beforeAccelerate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            fixedAcceleration = @params.fixedAcceleration;
            speedLimit = @params.speedLimit;
            orig(self, fixedAcceleration, speedLimit);
            if (_afterAccelerate != null)
                foreach (Delegates.Accelerate_AfterArgs toInvoke in _afterAccelerate.GetInvocationList())
                    try
                    {
                        _afterAccelerate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Accelerate_AfterArgs(Params_Accelerate args);

        public delegate void Accelerate_BeforeArgs(Params_Accelerate args);

        public delegate void Accelerate_WithArgs(Action<FakeBat, Vector2, Vector2> orig, FakeBat self,
            Vector2 fixedAcceleration, Vector2 speedLimit);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate void BringAllIn_AfterArgs();

        public delegate void BringAllIn_BeforeArgs();

        public delegate void BringAllIn_WithArgs(Action orig);

        public delegate void BringIn_AfterArgs(Params_BringIn args);

        public delegate void BringIn_BeforeArgs(Params_BringIn args);

        public delegate void BringIn_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate IEnumerator BringInRoutine_AfterArgs(Params_BringInRoutine args, IEnumerator ret);

        public delegate void BringInRoutine_BeforeArgs(Params_BringInRoutine args);

        public delegate IEnumerator BringInRoutine_WithArgs(Func<FakeBat, IEnumerator> orig, FakeBat self);

        public delegate void FaceDirection_AfterArgs(Params_FaceDirection args);

        public delegate void FaceDirection_BeforeArgs(Params_FaceDirection args);

        public delegate void FaceDirection_WithArgs(Action<FakeBat, int, bool> orig, FakeBat self, int sign, bool snap);

        public delegate void Init_AfterArgs();

        public delegate void Init_BeforeArgs();

        public delegate void Init_WithArgs(Action orig);

        public delegate void NotifyAllBossAwake_AfterArgs();

        public delegate void NotifyAllBossAwake_BeforeArgs();

        public delegate void NotifyAllBossAwake_WithArgs(Action orig);

        public delegate void NotifyBossAwake_AfterArgs(Params_NotifyBossAwake args);

        public delegate void NotifyBossAwake_BeforeArgs(Params_NotifyBossAwake args);

        public delegate void NotifyBossAwake_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate void SendAllOut_AfterArgs();

        public delegate void SendAllOut_BeforeArgs();

        public delegate void SendAllOut_WithArgs(Action orig);

        public delegate void SendOut_AfterArgs(Params_SendOut args);

        public delegate void SendOut_BeforeArgs(Params_SendOut args);

        public delegate void SendOut_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate IEnumerator SendOutRoutine_AfterArgs(Params_SendOutRoutine args, IEnumerator ret);

        public delegate void SendOutRoutine_BeforeArgs(Params_SendOutRoutine args);

        public delegate IEnumerator SendOutRoutine_WithArgs(Func<FakeBat, IEnumerator> orig, FakeBat self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<FakeBat> orig, FakeBat self);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<FakeBat> orig, FakeBat self);

        public sealed class Params_Awake
        {
            public FakeBat self;
        }

        public sealed class Params_OnEnable
        {
            public FakeBat self;
        }

        public sealed class Params_OnDisable
        {
            public FakeBat self;
        }

        public sealed class Params_Start
        {
            public FakeBat self;
        }

        public sealed class Params_Update
        {
            public FakeBat self;
        }

        public sealed class Params_NotifyBossAwake
        {
            public FakeBat self;
        }

        public sealed class Params_SendOut
        {
            public FakeBat self;
        }

        public sealed class Params_SendOutRoutine
        {
            public FakeBat self;
        }

        public sealed class Params_BringIn
        {
            public FakeBat self;
        }

        public sealed class Params_BringInRoutine
        {
            public FakeBat self;
        }

        public sealed class Params_FaceDirection
        {
            public FakeBat self;
            public int sign;
            public bool snap;
        }

        public sealed class Params_Accelerate
        {
            public Vector2 fixedAcceleration;
            public FakeBat self;
            public Vector2 speedLimit;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.NotifyAllBossAwake_BeforeArgs NotifyAllBossAwake
        {
            add
            {
                HookHandler._beforeNotifyAllBossAwake += value;
                HookHandler.HookNotifyAllBossAwake();
            }
            remove => HookHandler._beforeNotifyAllBossAwake -= value;
        }

        public static event Delegates.NotifyBossAwake_BeforeArgs NotifyBossAwake
        {
            add
            {
                HookHandler._beforeNotifyBossAwake += value;
                HookHandler.HookNotifyBossAwake();
            }
            remove => HookHandler._beforeNotifyBossAwake -= value;
        }

        public static event Delegates.SendAllOut_BeforeArgs SendAllOut
        {
            add
            {
                HookHandler._beforeSendAllOut += value;
                HookHandler.HookSendAllOut();
            }
            remove => HookHandler._beforeSendAllOut -= value;
        }

        public static event Delegates.SendOut_BeforeArgs SendOut
        {
            add
            {
                HookHandler._beforeSendOut += value;
                HookHandler.HookSendOut();
            }
            remove => HookHandler._beforeSendOut -= value;
        }

        public static event Delegates.SendOutRoutine_BeforeArgs SendOutRoutine
        {
            add
            {
                HookHandler._beforeSendOutRoutine += value;
                HookHandler.HookSendOutRoutine();
            }
            remove => HookHandler._beforeSendOutRoutine -= value;
        }

        public static event Delegates.BringAllIn_BeforeArgs BringAllIn
        {
            add
            {
                HookHandler._beforeBringAllIn += value;
                HookHandler.HookBringAllIn();
            }
            remove => HookHandler._beforeBringAllIn -= value;
        }

        public static event Delegates.BringIn_BeforeArgs BringIn
        {
            add
            {
                HookHandler._beforeBringIn += value;
                HookHandler.HookBringIn();
            }
            remove => HookHandler._beforeBringIn -= value;
        }

        public static event Delegates.BringInRoutine_BeforeArgs BringInRoutine
        {
            add
            {
                HookHandler._beforeBringInRoutine += value;
                HookHandler.HookBringInRoutine();
            }
            remove => HookHandler._beforeBringInRoutine -= value;
        }

        public static event Delegates.FaceDirection_BeforeArgs FaceDirection
        {
            add
            {
                HookHandler._beforeFaceDirection += value;
                HookHandler.HookFaceDirection();
            }
            remove => HookHandler._beforeFaceDirection -= value;
        }

        public static event Delegates.Accelerate_BeforeArgs Accelerate
        {
            add
            {
                HookHandler._beforeAccelerate += value;
                HookHandler.HookAccelerate();
            }
            remove => HookHandler._beforeAccelerate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.NotifyAllBossAwake_AfterArgs NotifyAllBossAwake
        {
            add
            {
                HookHandler._afterNotifyAllBossAwake += value;
                HookHandler.HookNotifyAllBossAwake();
            }
            remove => HookHandler._afterNotifyAllBossAwake -= value;
        }

        public static event Delegates.NotifyBossAwake_AfterArgs NotifyBossAwake
        {
            add
            {
                HookHandler._afterNotifyBossAwake += value;
                HookHandler.HookNotifyBossAwake();
            }
            remove => HookHandler._afterNotifyBossAwake -= value;
        }

        public static event Delegates.SendAllOut_AfterArgs SendAllOut
        {
            add
            {
                HookHandler._afterSendAllOut += value;
                HookHandler.HookSendAllOut();
            }
            remove => HookHandler._afterSendAllOut -= value;
        }

        public static event Delegates.SendOut_AfterArgs SendOut
        {
            add
            {
                HookHandler._afterSendOut += value;
                HookHandler.HookSendOut();
            }
            remove => HookHandler._afterSendOut -= value;
        }

        public static event Delegates.BringAllIn_AfterArgs BringAllIn
        {
            add
            {
                HookHandler._afterBringAllIn += value;
                HookHandler.HookBringAllIn();
            }
            remove => HookHandler._afterBringAllIn -= value;
        }

        public static event Delegates.BringIn_AfterArgs BringIn
        {
            add
            {
                HookHandler._afterBringIn += value;
                HookHandler.HookBringIn();
            }
            remove => HookHandler._afterBringIn -= value;
        }

        public static event Delegates.FaceDirection_AfterArgs FaceDirection
        {
            add
            {
                HookHandler._afterFaceDirection += value;
                HookHandler.HookFaceDirection();
            }
            remove => HookHandler._afterFaceDirection -= value;
        }

        public static event Delegates.Accelerate_AfterArgs Accelerate
        {
            add
            {
                HookHandler._afterAccelerate += value;
                HookHandler.HookAccelerate();
            }
            remove => HookHandler._afterAccelerate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.FakeBat.hook_Awake Awake
        {
            add => On.FakeBat.Awake += value;
            remove => On.FakeBat.Awake -= value;
        }

        public static event On.FakeBat.hook_Init Init
        {
            add => On.FakeBat.Init += value;
            remove => On.FakeBat.Init -= value;
        }

        public static event On.FakeBat.hook_OnEnable OnEnable
        {
            add => On.FakeBat.OnEnable += value;
            remove => On.FakeBat.OnEnable -= value;
        }

        public static event On.FakeBat.hook_OnDisable OnDisable
        {
            add => On.FakeBat.OnDisable += value;
            remove => On.FakeBat.OnDisable -= value;
        }

        public static event On.FakeBat.hook_Start Start
        {
            add => On.FakeBat.Start += value;
            remove => On.FakeBat.Start -= value;
        }

        public static event On.FakeBat.hook_Update Update
        {
            add => On.FakeBat.Update += value;
            remove => On.FakeBat.Update -= value;
        }

        public static event On.FakeBat.hook_NotifyAllBossAwake NotifyAllBossAwake
        {
            add => On.FakeBat.NotifyAllBossAwake += value;
            remove => On.FakeBat.NotifyAllBossAwake -= value;
        }

        public static event On.FakeBat.hook_NotifyBossAwake NotifyBossAwake
        {
            add => On.FakeBat.NotifyBossAwake += value;
            remove => On.FakeBat.NotifyBossAwake -= value;
        }

        public static event On.FakeBat.hook_SendAllOut SendAllOut
        {
            add => On.FakeBat.SendAllOut += value;
            remove => On.FakeBat.SendAllOut -= value;
        }

        public static event On.FakeBat.hook_SendOut SendOut
        {
            add => On.FakeBat.SendOut += value;
            remove => On.FakeBat.SendOut -= value;
        }

        public static event On.FakeBat.hook_SendOutRoutine SendOutRoutine
        {
            add => On.FakeBat.SendOutRoutine += value;
            remove => On.FakeBat.SendOutRoutine -= value;
        }

        public static event On.FakeBat.hook_BringAllIn BringAllIn
        {
            add => On.FakeBat.BringAllIn += value;
            remove => On.FakeBat.BringAllIn -= value;
        }

        public static event On.FakeBat.hook_BringIn BringIn
        {
            add => On.FakeBat.BringIn += value;
            remove => On.FakeBat.BringIn -= value;
        }

        public static event On.FakeBat.hook_BringInRoutine BringInRoutine
        {
            add => On.FakeBat.BringInRoutine += value;
            remove => On.FakeBat.BringInRoutine -= value;
        }

        public static event On.FakeBat.hook_FaceDirection FaceDirection
        {
            add => On.FakeBat.FaceDirection += value;
            remove => On.FakeBat.FaceDirection -= value;
        }

        public static event On.FakeBat.hook_Accelerate Accelerate
        {
            add => On.FakeBat.Accelerate += value;
            remove => On.FakeBat.Accelerate -= value;
        }
    }
}