using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerUnity2DProxy class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerUnity2DProxy
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAddOnCollisionEnter2dDelegate()
        {
            if (!HookedList.Contains("AddOnCollisionEnter2dDelegate"))
            {
                HookedList.Add("AddOnCollisionEnter2dDelegate");
                On.PlayMakerUnity2DProxy.AddOnCollisionEnter2dDelegate += AddOnCollisionEnter2dDelegate;
            }
        }

        internal static event Delegates.AddOnCollisionEnter2dDelegate_BeforeArgs _beforeAddOnCollisionEnter2dDelegate;
        internal static event Delegates.AddOnCollisionEnter2dDelegate_AfterArgs _afterAddOnCollisionEnter2dDelegate;

        private static void AddOnCollisionEnter2dDelegate(
            On.PlayMakerUnity2DProxy.orig_AddOnCollisionEnter2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate del)
        {
            Delegates.Params_AddOnCollisionEnter2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeAddOnCollisionEnter2dDelegate != null)
                foreach (Delegates.AddOnCollisionEnter2dDelegate_BeforeArgs toInvoke in
                         _beforeAddOnCollisionEnter2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeAddOnCollisionEnter2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterAddOnCollisionEnter2dDelegate != null)
                foreach (Delegates.AddOnCollisionEnter2dDelegate_AfterArgs toInvoke in
                         _afterAddOnCollisionEnter2dDelegate.GetInvocationList())
                    try
                    {
                        _afterAddOnCollisionEnter2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveOnCollisionEnter2dDelegate()
        {
            if (!HookedList.Contains("RemoveOnCollisionEnter2dDelegate"))
            {
                HookedList.Add("RemoveOnCollisionEnter2dDelegate");
                On.PlayMakerUnity2DProxy.RemoveOnCollisionEnter2dDelegate += RemoveOnCollisionEnter2dDelegate;
            }
        }

        internal static event Delegates.RemoveOnCollisionEnter2dDelegate_BeforeArgs
            _beforeRemoveOnCollisionEnter2dDelegate;

        internal static event Delegates.RemoveOnCollisionEnter2dDelegate_AfterArgs
            _afterRemoveOnCollisionEnter2dDelegate;

        private static void RemoveOnCollisionEnter2dDelegate(
            On.PlayMakerUnity2DProxy.orig_RemoveOnCollisionEnter2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate del)
        {
            Delegates.Params_RemoveOnCollisionEnter2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeRemoveOnCollisionEnter2dDelegate != null)
                foreach (Delegates.RemoveOnCollisionEnter2dDelegate_BeforeArgs toInvoke in
                         _beforeRemoveOnCollisionEnter2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeRemoveOnCollisionEnter2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterRemoveOnCollisionEnter2dDelegate != null)
                foreach (Delegates.RemoveOnCollisionEnter2dDelegate_AfterArgs toInvoke in
                         _afterRemoveOnCollisionEnter2dDelegate.GetInvocationList())
                    try
                    {
                        _afterRemoveOnCollisionEnter2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddOnCollisionStay2dDelegate()
        {
            if (!HookedList.Contains("AddOnCollisionStay2dDelegate"))
            {
                HookedList.Add("AddOnCollisionStay2dDelegate");
                On.PlayMakerUnity2DProxy.AddOnCollisionStay2dDelegate += AddOnCollisionStay2dDelegate;
            }
        }

        internal static event Delegates.AddOnCollisionStay2dDelegate_BeforeArgs _beforeAddOnCollisionStay2dDelegate;
        internal static event Delegates.AddOnCollisionStay2dDelegate_AfterArgs _afterAddOnCollisionStay2dDelegate;

        private static void AddOnCollisionStay2dDelegate(
            On.PlayMakerUnity2DProxy.orig_AddOnCollisionStay2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnCollisionStay2dDelegate del)
        {
            Delegates.Params_AddOnCollisionStay2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeAddOnCollisionStay2dDelegate != null)
                foreach (Delegates.AddOnCollisionStay2dDelegate_BeforeArgs toInvoke in
                         _beforeAddOnCollisionStay2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeAddOnCollisionStay2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterAddOnCollisionStay2dDelegate != null)
                foreach (Delegates.AddOnCollisionStay2dDelegate_AfterArgs toInvoke in _afterAddOnCollisionStay2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _afterAddOnCollisionStay2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveOnCollisionStay2dDelegate()
        {
            if (!HookedList.Contains("RemoveOnCollisionStay2dDelegate"))
            {
                HookedList.Add("RemoveOnCollisionStay2dDelegate");
                On.PlayMakerUnity2DProxy.RemoveOnCollisionStay2dDelegate += RemoveOnCollisionStay2dDelegate;
            }
        }

        internal static event Delegates.RemoveOnCollisionStay2dDelegate_BeforeArgs
            _beforeRemoveOnCollisionStay2dDelegate;

        internal static event Delegates.RemoveOnCollisionStay2dDelegate_AfterArgs _afterRemoveOnCollisionStay2dDelegate;

        private static void RemoveOnCollisionStay2dDelegate(
            On.PlayMakerUnity2DProxy.orig_RemoveOnCollisionStay2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnCollisionStay2dDelegate del)
        {
            Delegates.Params_RemoveOnCollisionStay2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeRemoveOnCollisionStay2dDelegate != null)
                foreach (Delegates.RemoveOnCollisionStay2dDelegate_BeforeArgs toInvoke in
                         _beforeRemoveOnCollisionStay2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeRemoveOnCollisionStay2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterRemoveOnCollisionStay2dDelegate != null)
                foreach (Delegates.RemoveOnCollisionStay2dDelegate_AfterArgs toInvoke in
                         _afterRemoveOnCollisionStay2dDelegate.GetInvocationList())
                    try
                    {
                        _afterRemoveOnCollisionStay2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddOnCollisionExit2dDelegate()
        {
            if (!HookedList.Contains("AddOnCollisionExit2dDelegate"))
            {
                HookedList.Add("AddOnCollisionExit2dDelegate");
                On.PlayMakerUnity2DProxy.AddOnCollisionExit2dDelegate += AddOnCollisionExit2dDelegate;
            }
        }

        internal static event Delegates.AddOnCollisionExit2dDelegate_BeforeArgs _beforeAddOnCollisionExit2dDelegate;
        internal static event Delegates.AddOnCollisionExit2dDelegate_AfterArgs _afterAddOnCollisionExit2dDelegate;

        private static void AddOnCollisionExit2dDelegate(
            On.PlayMakerUnity2DProxy.orig_AddOnCollisionExit2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnCollisionExit2dDelegate del)
        {
            Delegates.Params_AddOnCollisionExit2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeAddOnCollisionExit2dDelegate != null)
                foreach (Delegates.AddOnCollisionExit2dDelegate_BeforeArgs toInvoke in
                         _beforeAddOnCollisionExit2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeAddOnCollisionExit2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterAddOnCollisionExit2dDelegate != null)
                foreach (Delegates.AddOnCollisionExit2dDelegate_AfterArgs toInvoke in _afterAddOnCollisionExit2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _afterAddOnCollisionExit2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveOnCollisionExit2dDelegate()
        {
            if (!HookedList.Contains("RemoveOnCollisionExit2dDelegate"))
            {
                HookedList.Add("RemoveOnCollisionExit2dDelegate");
                On.PlayMakerUnity2DProxy.RemoveOnCollisionExit2dDelegate += RemoveOnCollisionExit2dDelegate;
            }
        }

        internal static event Delegates.RemoveOnCollisionExit2dDelegate_BeforeArgs
            _beforeRemoveOnCollisionExit2dDelegate;

        internal static event Delegates.RemoveOnCollisionExit2dDelegate_AfterArgs _afterRemoveOnCollisionExit2dDelegate;

        private static void RemoveOnCollisionExit2dDelegate(
            On.PlayMakerUnity2DProxy.orig_RemoveOnCollisionExit2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnCollisionExit2dDelegate del)
        {
            Delegates.Params_RemoveOnCollisionExit2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeRemoveOnCollisionExit2dDelegate != null)
                foreach (Delegates.RemoveOnCollisionExit2dDelegate_BeforeArgs toInvoke in
                         _beforeRemoveOnCollisionExit2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeRemoveOnCollisionExit2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterRemoveOnCollisionExit2dDelegate != null)
                foreach (Delegates.RemoveOnCollisionExit2dDelegate_AfterArgs toInvoke in
                         _afterRemoveOnCollisionExit2dDelegate.GetInvocationList())
                    try
                    {
                        _afterRemoveOnCollisionExit2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddOnTriggerEnter2dDelegate()
        {
            if (!HookedList.Contains("AddOnTriggerEnter2dDelegate"))
            {
                HookedList.Add("AddOnTriggerEnter2dDelegate");
                On.PlayMakerUnity2DProxy.AddOnTriggerEnter2dDelegate += AddOnTriggerEnter2dDelegate;
            }
        }

        internal static event Delegates.AddOnTriggerEnter2dDelegate_BeforeArgs _beforeAddOnTriggerEnter2dDelegate;
        internal static event Delegates.AddOnTriggerEnter2dDelegate_AfterArgs _afterAddOnTriggerEnter2dDelegate;

        private static void AddOnTriggerEnter2dDelegate(On.PlayMakerUnity2DProxy.orig_AddOnTriggerEnter2dDelegate orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate del)
        {
            Delegates.Params_AddOnTriggerEnter2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeAddOnTriggerEnter2dDelegate != null)
                foreach (Delegates.AddOnTriggerEnter2dDelegate_BeforeArgs toInvoke in _beforeAddOnTriggerEnter2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _beforeAddOnTriggerEnter2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterAddOnTriggerEnter2dDelegate != null)
                foreach (Delegates.AddOnTriggerEnter2dDelegate_AfterArgs toInvoke in _afterAddOnTriggerEnter2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _afterAddOnTriggerEnter2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveOnTriggerEnter2dDelegate()
        {
            if (!HookedList.Contains("RemoveOnTriggerEnter2dDelegate"))
            {
                HookedList.Add("RemoveOnTriggerEnter2dDelegate");
                On.PlayMakerUnity2DProxy.RemoveOnTriggerEnter2dDelegate += RemoveOnTriggerEnter2dDelegate;
            }
        }

        internal static event Delegates.RemoveOnTriggerEnter2dDelegate_BeforeArgs _beforeRemoveOnTriggerEnter2dDelegate;
        internal static event Delegates.RemoveOnTriggerEnter2dDelegate_AfterArgs _afterRemoveOnTriggerEnter2dDelegate;

        private static void RemoveOnTriggerEnter2dDelegate(
            On.PlayMakerUnity2DProxy.orig_RemoveOnTriggerEnter2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate del)
        {
            Delegates.Params_RemoveOnTriggerEnter2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeRemoveOnTriggerEnter2dDelegate != null)
                foreach (Delegates.RemoveOnTriggerEnter2dDelegate_BeforeArgs toInvoke in
                         _beforeRemoveOnTriggerEnter2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeRemoveOnTriggerEnter2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterRemoveOnTriggerEnter2dDelegate != null)
                foreach (Delegates.RemoveOnTriggerEnter2dDelegate_AfterArgs toInvoke in
                         _afterRemoveOnTriggerEnter2dDelegate.GetInvocationList())
                    try
                    {
                        _afterRemoveOnTriggerEnter2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddOnTriggerStay2dDelegate()
        {
            if (!HookedList.Contains("AddOnTriggerStay2dDelegate"))
            {
                HookedList.Add("AddOnTriggerStay2dDelegate");
                On.PlayMakerUnity2DProxy.AddOnTriggerStay2dDelegate += AddOnTriggerStay2dDelegate;
            }
        }

        internal static event Delegates.AddOnTriggerStay2dDelegate_BeforeArgs _beforeAddOnTriggerStay2dDelegate;
        internal static event Delegates.AddOnTriggerStay2dDelegate_AfterArgs _afterAddOnTriggerStay2dDelegate;

        private static void AddOnTriggerStay2dDelegate(On.PlayMakerUnity2DProxy.orig_AddOnTriggerStay2dDelegate orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerStay2dDelegate del)
        {
            Delegates.Params_AddOnTriggerStay2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeAddOnTriggerStay2dDelegate != null)
                foreach (Delegates.AddOnTriggerStay2dDelegate_BeforeArgs toInvoke in _beforeAddOnTriggerStay2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _beforeAddOnTriggerStay2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterAddOnTriggerStay2dDelegate != null)
                foreach (Delegates.AddOnTriggerStay2dDelegate_AfterArgs toInvoke in _afterAddOnTriggerStay2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _afterAddOnTriggerStay2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveOnTriggerStay2dDelegate()
        {
            if (!HookedList.Contains("RemoveOnTriggerStay2dDelegate"))
            {
                HookedList.Add("RemoveOnTriggerStay2dDelegate");
                On.PlayMakerUnity2DProxy.RemoveOnTriggerStay2dDelegate += RemoveOnTriggerStay2dDelegate;
            }
        }

        internal static event Delegates.RemoveOnTriggerStay2dDelegate_BeforeArgs _beforeRemoveOnTriggerStay2dDelegate;
        internal static event Delegates.RemoveOnTriggerStay2dDelegate_AfterArgs _afterRemoveOnTriggerStay2dDelegate;

        private static void RemoveOnTriggerStay2dDelegate(
            On.PlayMakerUnity2DProxy.orig_RemoveOnTriggerStay2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnTriggerStay2dDelegate del)
        {
            Delegates.Params_RemoveOnTriggerStay2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeRemoveOnTriggerStay2dDelegate != null)
                foreach (Delegates.RemoveOnTriggerStay2dDelegate_BeforeArgs toInvoke in
                         _beforeRemoveOnTriggerStay2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeRemoveOnTriggerStay2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterRemoveOnTriggerStay2dDelegate != null)
                foreach (Delegates.RemoveOnTriggerStay2dDelegate_AfterArgs toInvoke in
                         _afterRemoveOnTriggerStay2dDelegate.GetInvocationList())
                    try
                    {
                        _afterRemoveOnTriggerStay2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddOnTriggerExit2dDelegate()
        {
            if (!HookedList.Contains("AddOnTriggerExit2dDelegate"))
            {
                HookedList.Add("AddOnTriggerExit2dDelegate");
                On.PlayMakerUnity2DProxy.AddOnTriggerExit2dDelegate += AddOnTriggerExit2dDelegate;
            }
        }

        internal static event Delegates.AddOnTriggerExit2dDelegate_BeforeArgs _beforeAddOnTriggerExit2dDelegate;
        internal static event Delegates.AddOnTriggerExit2dDelegate_AfterArgs _afterAddOnTriggerExit2dDelegate;

        private static void AddOnTriggerExit2dDelegate(On.PlayMakerUnity2DProxy.orig_AddOnTriggerExit2dDelegate orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerExit2dDelegate del)
        {
            Delegates.Params_AddOnTriggerExit2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeAddOnTriggerExit2dDelegate != null)
                foreach (Delegates.AddOnTriggerExit2dDelegate_BeforeArgs toInvoke in _beforeAddOnTriggerExit2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _beforeAddOnTriggerExit2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterAddOnTriggerExit2dDelegate != null)
                foreach (Delegates.AddOnTriggerExit2dDelegate_AfterArgs toInvoke in _afterAddOnTriggerExit2dDelegate
                             .GetInvocationList())
                    try
                    {
                        _afterAddOnTriggerExit2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemoveOnTriggerExit2dDelegate()
        {
            if (!HookedList.Contains("RemoveOnTriggerExit2dDelegate"))
            {
                HookedList.Add("RemoveOnTriggerExit2dDelegate");
                On.PlayMakerUnity2DProxy.RemoveOnTriggerExit2dDelegate += RemoveOnTriggerExit2dDelegate;
            }
        }

        internal static event Delegates.RemoveOnTriggerExit2dDelegate_BeforeArgs _beforeRemoveOnTriggerExit2dDelegate;
        internal static event Delegates.RemoveOnTriggerExit2dDelegate_AfterArgs _afterRemoveOnTriggerExit2dDelegate;

        private static void RemoveOnTriggerExit2dDelegate(
            On.PlayMakerUnity2DProxy.orig_RemoveOnTriggerExit2dDelegate orig, PlayMakerUnity2DProxy self,
            PlayMakerUnity2DProxy.OnTriggerExit2dDelegate del)
        {
            Delegates.Params_RemoveOnTriggerExit2dDelegate @params = new()
            {
                self = self, del = del
            };
            if (_beforeRemoveOnTriggerExit2dDelegate != null)
                foreach (Delegates.RemoveOnTriggerExit2dDelegate_BeforeArgs toInvoke in
                         _beforeRemoveOnTriggerExit2dDelegate.GetInvocationList())
                    try
                    {
                        _beforeRemoveOnTriggerExit2dDelegate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            del = @params.del;
            orig(self, del);
            if (_afterRemoveOnTriggerExit2dDelegate != null)
                foreach (Delegates.RemoveOnTriggerExit2dDelegate_AfterArgs toInvoke in
                         _afterRemoveOnTriggerExit2dDelegate.GetInvocationList())
                    try
                    {
                        _afterRemoveOnTriggerExit2dDelegate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookhelp()
        {
            if (!HookedList.Contains("help"))
            {
                HookedList.Add("help");
                On.PlayMakerUnity2DProxy.help += help;
            }
        }

        internal static event Delegates.help_BeforeArgs _beforehelp;
        internal static event Delegates.help_AfterArgs _afterhelp;

        private static void help(On.PlayMakerUnity2DProxy.orig_help orig, PlayMakerUnity2DProxy self)
        {
            Delegates.Params_help @params = new()
            {
                self = self
            };
            if (_beforehelp != null)
                foreach (Delegates.help_BeforeArgs toInvoke in _beforehelp.GetInvocationList())
                    try
                    {
                        _beforehelp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterhelp != null)
                foreach (Delegates.help_AfterArgs toInvoke in _afterhelp.GetInvocationList())
                    try
                    {
                        _afterhelp.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PlayMakerUnity2DProxy.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.PlayMakerUnity2DProxy.orig_Start orig, PlayMakerUnity2DProxy self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRefreshImplementation()
        {
            if (!HookedList.Contains("RefreshImplementation"))
            {
                HookedList.Add("RefreshImplementation");
                On.PlayMakerUnity2DProxy.RefreshImplementation += RefreshImplementation;
            }
        }

        internal static event Delegates.RefreshImplementation_BeforeArgs _beforeRefreshImplementation;
        internal static event Delegates.RefreshImplementation_AfterArgs _afterRefreshImplementation;

        private static void RefreshImplementation(On.PlayMakerUnity2DProxy.orig_RefreshImplementation orig,
            PlayMakerUnity2DProxy self)
        {
            Delegates.Params_RefreshImplementation @params = new()
            {
                self = self
            };
            if (_beforeRefreshImplementation != null)
                foreach (Delegates.RefreshImplementation_BeforeArgs toInvoke in _beforeRefreshImplementation
                             .GetInvocationList())
                    try
                    {
                        _beforeRefreshImplementation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRefreshImplementation != null)
                foreach (Delegates.RefreshImplementation_AfterArgs toInvoke in _afterRefreshImplementation
                             .GetInvocationList())
                    try
                    {
                        _afterRefreshImplementation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.PlayMakerUnity2DProxy.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_AfterArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.PlayMakerUnity2DProxy.orig_OnCollisionEnter2D orig,
            PlayMakerUnity2DProxy self, Collision2D coll)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, coll = coll
            };
            if (_beforeOnCollisionEnter2D != null)
                foreach (Delegates.OnCollisionEnter2D_BeforeArgs toInvoke in
                         _beforeOnCollisionEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnCollisionEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            coll = @params.coll;
            orig(self, coll);
            if (_afterOnCollisionEnter2D != null)
                foreach (Delegates.OnCollisionEnter2D_AfterArgs toInvoke in
                         _afterOnCollisionEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnCollisionEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCollisionStay2D()
        {
            if (!HookedList.Contains("OnCollisionStay2D"))
            {
                HookedList.Add("OnCollisionStay2D");
                On.PlayMakerUnity2DProxy.OnCollisionStay2D += OnCollisionStay2D;
            }
        }

        internal static event Delegates.OnCollisionStay2D_BeforeArgs _beforeOnCollisionStay2D;
        internal static event Delegates.OnCollisionStay2D_AfterArgs _afterOnCollisionStay2D;

        private static void OnCollisionStay2D(On.PlayMakerUnity2DProxy.orig_OnCollisionStay2D orig,
            PlayMakerUnity2DProxy self, Collision2D coll)
        {
            Delegates.Params_OnCollisionStay2D @params = new()
            {
                self = self, coll = coll
            };
            if (_beforeOnCollisionStay2D != null)
                foreach (Delegates.OnCollisionStay2D_BeforeArgs toInvoke in
                         _beforeOnCollisionStay2D.GetInvocationList())
                    try
                    {
                        _beforeOnCollisionStay2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            coll = @params.coll;
            orig(self, coll);
            if (_afterOnCollisionStay2D != null)
                foreach (Delegates.OnCollisionStay2D_AfterArgs toInvoke in _afterOnCollisionStay2D.GetInvocationList())
                    try
                    {
                        _afterOnCollisionStay2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCollisionExit2D()
        {
            if (!HookedList.Contains("OnCollisionExit2D"))
            {
                HookedList.Add("OnCollisionExit2D");
                On.PlayMakerUnity2DProxy.OnCollisionExit2D += OnCollisionExit2D;
            }
        }

        internal static event Delegates.OnCollisionExit2D_BeforeArgs _beforeOnCollisionExit2D;
        internal static event Delegates.OnCollisionExit2D_AfterArgs _afterOnCollisionExit2D;

        private static void OnCollisionExit2D(On.PlayMakerUnity2DProxy.orig_OnCollisionExit2D orig,
            PlayMakerUnity2DProxy self, Collision2D coll)
        {
            Delegates.Params_OnCollisionExit2D @params = new()
            {
                self = self, coll = coll
            };
            if (_beforeOnCollisionExit2D != null)
                foreach (Delegates.OnCollisionExit2D_BeforeArgs toInvoke in
                         _beforeOnCollisionExit2D.GetInvocationList())
                    try
                    {
                        _beforeOnCollisionExit2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            coll = @params.coll;
            orig(self, coll);
            if (_afterOnCollisionExit2D != null)
                foreach (Delegates.OnCollisionExit2D_AfterArgs toInvoke in _afterOnCollisionExit2D.GetInvocationList())
                    try
                    {
                        _afterOnCollisionExit2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.PlayMakerUnity2DProxy.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.PlayMakerUnity2DProxy.orig_OnTriggerEnter2D orig,
            PlayMakerUnity2DProxy self, Collider2D coll)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, coll = coll
            };
            if (_beforeOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            coll = @params.coll;
            orig(self, coll);
            if (_afterOnTriggerEnter2D != null)
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerStay2D()
        {
            if (!HookedList.Contains("OnTriggerStay2D"))
            {
                HookedList.Add("OnTriggerStay2D");
                On.PlayMakerUnity2DProxy.OnTriggerStay2D += OnTriggerStay2D;
            }
        }

        internal static event Delegates.OnTriggerStay2D_BeforeArgs _beforeOnTriggerStay2D;
        internal static event Delegates.OnTriggerStay2D_AfterArgs _afterOnTriggerStay2D;

        private static void OnTriggerStay2D(On.PlayMakerUnity2DProxy.orig_OnTriggerStay2D orig,
            PlayMakerUnity2DProxy self, Collider2D coll)
        {
            Delegates.Params_OnTriggerStay2D @params = new()
            {
                self = self, coll = coll
            };
            if (_beforeOnTriggerStay2D != null)
                foreach (Delegates.OnTriggerStay2D_BeforeArgs toInvoke in _beforeOnTriggerStay2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerStay2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            coll = @params.coll;
            orig(self, coll);
            if (_afterOnTriggerStay2D != null)
                foreach (Delegates.OnTriggerStay2D_AfterArgs toInvoke in _afterOnTriggerStay2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerStay2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerExit2D()
        {
            if (!HookedList.Contains("OnTriggerExit2D"))
            {
                HookedList.Add("OnTriggerExit2D");
                On.PlayMakerUnity2DProxy.OnTriggerExit2D += OnTriggerExit2D;
            }
        }

        internal static event Delegates.OnTriggerExit2D_BeforeArgs _beforeOnTriggerExit2D;
        internal static event Delegates.OnTriggerExit2D_AfterArgs _afterOnTriggerExit2D;

        private static void OnTriggerExit2D(On.PlayMakerUnity2DProxy.orig_OnTriggerExit2D orig,
            PlayMakerUnity2DProxy self, Collider2D coll)
        {
            Delegates.Params_OnTriggerExit2D @params = new()
            {
                self = self, coll = coll
            };
            if (_beforeOnTriggerExit2D != null)
                foreach (Delegates.OnTriggerExit2D_BeforeArgs toInvoke in _beforeOnTriggerExit2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerExit2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            coll = @params.coll;
            orig(self, coll);
            if (_afterOnTriggerExit2D != null)
                foreach (Delegates.OnTriggerExit2D_AfterArgs toInvoke in _afterOnTriggerExit2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerExit2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckGameObjectEventsImplementation()
        {
            if (!HookedList.Contains("CheckGameObjectEventsImplementation"))
            {
                HookedList.Add("CheckGameObjectEventsImplementation");
                On.PlayMakerUnity2DProxy.CheckGameObjectEventsImplementation += CheckGameObjectEventsImplementation;
            }
        }

        internal static event Delegates.CheckGameObjectEventsImplementation_BeforeArgs
            _beforeCheckGameObjectEventsImplementation;

        internal static event Delegates.CheckGameObjectEventsImplementation_AfterArgs
            _afterCheckGameObjectEventsImplementation;

        private static void CheckGameObjectEventsImplementation(
            On.PlayMakerUnity2DProxy.orig_CheckGameObjectEventsImplementation orig, PlayMakerUnity2DProxy self)
        {
            Delegates.Params_CheckGameObjectEventsImplementation @params = new()
            {
                self = self
            };
            if (_beforeCheckGameObjectEventsImplementation != null)
                foreach (Delegates.CheckGameObjectEventsImplementation_BeforeArgs toInvoke in
                         _beforeCheckGameObjectEventsImplementation.GetInvocationList())
                    try
                    {
                        _beforeCheckGameObjectEventsImplementation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckGameObjectEventsImplementation != null)
                foreach (Delegates.CheckGameObjectEventsImplementation_AfterArgs toInvoke in
                         _afterCheckGameObjectEventsImplementation.GetInvocationList())
                    try
                    {
                        _afterCheckGameObjectEventsImplementation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckFsmEventsImplementation()
        {
            if (!HookedList.Contains("CheckFsmEventsImplementation"))
            {
                HookedList.Add("CheckFsmEventsImplementation");
                On.PlayMakerUnity2DProxy.CheckFsmEventsImplementation += CheckFsmEventsImplementation;
            }
        }

        internal static event Delegates.CheckFsmEventsImplementation_BeforeArgs _beforeCheckFsmEventsImplementation;
        internal static event Delegates.CheckFsmEventsImplementation_AfterArgs _afterCheckFsmEventsImplementation;

        private static void CheckFsmEventsImplementation(
            On.PlayMakerUnity2DProxy.orig_CheckFsmEventsImplementation orig, PlayMakerUnity2DProxy self,
            PlayMakerFSM fsm)
        {
            Delegates.Params_CheckFsmEventsImplementation @params = new()
            {
                self = self, fsm = fsm
            };
            if (_beforeCheckFsmEventsImplementation != null)
                foreach (Delegates.CheckFsmEventsImplementation_BeforeArgs toInvoke in
                         _beforeCheckFsmEventsImplementation.GetInvocationList())
                    try
                    {
                        _beforeCheckFsmEventsImplementation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            fsm = @params.fsm;
            orig(self, fsm);
            if (_afterCheckFsmEventsImplementation != null)
                foreach (Delegates.CheckFsmEventsImplementation_AfterArgs toInvoke in _afterCheckFsmEventsImplementation
                             .GetInvocationList())
                    try
                    {
                        _afterCheckFsmEventsImplementation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckTransition()
        {
            if (!HookedList.Contains("CheckTransition"))
            {
                HookedList.Add("CheckTransition");
                On.PlayMakerUnity2DProxy.CheckTransition += CheckTransition;
            }
        }

        internal static event Delegates.CheckTransition_BeforeArgs _beforeCheckTransition;
        internal static event Delegates.CheckTransition_AfterArgs _afterCheckTransition;

        private static void CheckTransition(On.PlayMakerUnity2DProxy.orig_CheckTransition orig,
            PlayMakerUnity2DProxy self, string transitionName)
        {
            Delegates.Params_CheckTransition @params = new()
            {
                self = self, transitionName = transitionName
            };
            if (_beforeCheckTransition != null)
                foreach (Delegates.CheckTransition_BeforeArgs toInvoke in _beforeCheckTransition.GetInvocationList())
                    try
                    {
                        _beforeCheckTransition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            transitionName = @params.transitionName;
            orig(self, transitionName);
            if (_afterCheckTransition != null)
                foreach (Delegates.CheckTransition_AfterArgs toInvoke in _afterCheckTransition.GetInvocationList())
                    try
                    {
                        _afterCheckTransition.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_Start()
        {
            if (!HookedList.Contains("orig_Start"))
            {
                HookedList.Add("orig_Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayMakerUnity2DProxy), "orig_Start"), orig_Start);
            }
        }

        internal static event Delegates.orig_Start_BeforeArgs _beforeorig_Start;
        internal static event Delegates.orig_Start_AfterArgs _afterorig_Start;

        private static void orig_Start(Action<PlayMakerUnity2DProxy> orig, PlayMakerUnity2DProxy self)
        {
            Delegates.Params_orig_Start @params = new()
            {
                self = self
            };
            if (_beforeorig_Start != null)
                foreach (Delegates.orig_Start_BeforeArgs toInvoke in _beforeorig_Start.GetInvocationList())
                    try
                    {
                        _beforeorig_Start?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterorig_Start != null)
                foreach (Delegates.orig_Start_AfterArgs toInvoke in _afterorig_Start.GetInvocationList())
                    try
                    {
                        _afterorig_Start.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddOnCollisionEnter2dDelegate_AfterArgs(Params_AddOnCollisionEnter2dDelegate args);

        public delegate void AddOnCollisionEnter2dDelegate_BeforeArgs(Params_AddOnCollisionEnter2dDelegate args);

        public delegate void AddOnCollisionEnter2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate del);

        public delegate void AddOnCollisionExit2dDelegate_AfterArgs(Params_AddOnCollisionExit2dDelegate args);

        public delegate void AddOnCollisionExit2dDelegate_BeforeArgs(Params_AddOnCollisionExit2dDelegate args);

        public delegate void AddOnCollisionExit2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnCollisionExit2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnCollisionExit2dDelegate del);

        public delegate void AddOnCollisionStay2dDelegate_AfterArgs(Params_AddOnCollisionStay2dDelegate args);

        public delegate void AddOnCollisionStay2dDelegate_BeforeArgs(Params_AddOnCollisionStay2dDelegate args);

        public delegate void AddOnCollisionStay2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnCollisionStay2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnCollisionStay2dDelegate del);

        public delegate void AddOnTriggerEnter2dDelegate_AfterArgs(Params_AddOnTriggerEnter2dDelegate args);

        public delegate void AddOnTriggerEnter2dDelegate_BeforeArgs(Params_AddOnTriggerEnter2dDelegate args);

        public delegate void AddOnTriggerEnter2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate del);

        public delegate void AddOnTriggerExit2dDelegate_AfterArgs(Params_AddOnTriggerExit2dDelegate args);

        public delegate void AddOnTriggerExit2dDelegate_BeforeArgs(Params_AddOnTriggerExit2dDelegate args);

        public delegate void AddOnTriggerExit2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnTriggerExit2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerExit2dDelegate del);

        public delegate void AddOnTriggerStay2dDelegate_AfterArgs(Params_AddOnTriggerStay2dDelegate args);

        public delegate void AddOnTriggerStay2dDelegate_BeforeArgs(Params_AddOnTriggerStay2dDelegate args);

        public delegate void AddOnTriggerStay2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnTriggerStay2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerStay2dDelegate del);

        public delegate void CheckFsmEventsImplementation_AfterArgs(Params_CheckFsmEventsImplementation args);

        public delegate void CheckFsmEventsImplementation_BeforeArgs(Params_CheckFsmEventsImplementation args);

        public delegate void CheckFsmEventsImplementation_WithArgs(Action<PlayMakerUnity2DProxy, PlayMakerFSM> orig,
            PlayMakerUnity2DProxy self, PlayMakerFSM fsm);

        public delegate void CheckGameObjectEventsImplementation_AfterArgs(
            Params_CheckGameObjectEventsImplementation args);

        public delegate void CheckGameObjectEventsImplementation_BeforeArgs(
            Params_CheckGameObjectEventsImplementation args);

        public delegate void CheckGameObjectEventsImplementation_WithArgs(Action<PlayMakerUnity2DProxy> orig,
            PlayMakerUnity2DProxy self);

        public delegate void CheckTransition_AfterArgs(Params_CheckTransition args);

        public delegate void CheckTransition_BeforeArgs(Params_CheckTransition args);

        public delegate void CheckTransition_WithArgs(Action<PlayMakerUnity2DProxy, string> orig,
            PlayMakerUnity2DProxy self, string transitionName);

        public delegate void help_AfterArgs(Params_help args);

        public delegate void help_BeforeArgs(Params_help args);

        public delegate void help_WithArgs(Action<PlayMakerUnity2DProxy> orig, PlayMakerUnity2DProxy self);

        public delegate void OnCollisionEnter2D_AfterArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_WithArgs(Action<PlayMakerUnity2DProxy, Collision2D> orig,
            PlayMakerUnity2DProxy self, Collision2D coll);

        public delegate void OnCollisionExit2D_AfterArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionExit2D_BeforeArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionExit2D_WithArgs(Action<PlayMakerUnity2DProxy, Collision2D> orig,
            PlayMakerUnity2DProxy self, Collision2D coll);

        public delegate void OnCollisionStay2D_AfterArgs(Params_OnCollisionStay2D args);

        public delegate void OnCollisionStay2D_BeforeArgs(Params_OnCollisionStay2D args);

        public delegate void OnCollisionStay2D_WithArgs(Action<PlayMakerUnity2DProxy, Collision2D> orig,
            PlayMakerUnity2DProxy self, Collision2D coll);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<PlayMakerUnity2DProxy, Collider2D> orig,
            PlayMakerUnity2DProxy self, Collider2D coll);

        public delegate void OnTriggerExit2D_AfterArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_BeforeArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_WithArgs(Action<PlayMakerUnity2DProxy, Collider2D> orig,
            PlayMakerUnity2DProxy self, Collider2D coll);

        public delegate void OnTriggerStay2D_AfterArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_BeforeArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_WithArgs(Action<PlayMakerUnity2DProxy, Collider2D> orig,
            PlayMakerUnity2DProxy self, Collider2D coll);

        public delegate void orig_Start_AfterArgs(Params_orig_Start args);

        public delegate void orig_Start_BeforeArgs(Params_orig_Start args);

        public delegate void orig_Start_WithArgs(Action<PlayMakerUnity2DProxy> orig, PlayMakerUnity2DProxy self);

        public delegate void RefreshImplementation_AfterArgs(Params_RefreshImplementation args);

        public delegate void RefreshImplementation_BeforeArgs(Params_RefreshImplementation args);

        public delegate void RefreshImplementation_WithArgs(Action<PlayMakerUnity2DProxy> orig,
            PlayMakerUnity2DProxy self);

        public delegate void RemoveOnCollisionEnter2dDelegate_AfterArgs(Params_RemoveOnCollisionEnter2dDelegate args);

        public delegate void RemoveOnCollisionEnter2dDelegate_BeforeArgs(Params_RemoveOnCollisionEnter2dDelegate args);

        public delegate void RemoveOnCollisionEnter2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate del);

        public delegate void RemoveOnCollisionExit2dDelegate_AfterArgs(Params_RemoveOnCollisionExit2dDelegate args);

        public delegate void RemoveOnCollisionExit2dDelegate_BeforeArgs(Params_RemoveOnCollisionExit2dDelegate args);

        public delegate void RemoveOnCollisionExit2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnCollisionExit2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnCollisionExit2dDelegate del);

        public delegate void RemoveOnCollisionStay2dDelegate_AfterArgs(Params_RemoveOnCollisionStay2dDelegate args);

        public delegate void RemoveOnCollisionStay2dDelegate_BeforeArgs(Params_RemoveOnCollisionStay2dDelegate args);

        public delegate void RemoveOnCollisionStay2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnCollisionStay2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnCollisionStay2dDelegate del);

        public delegate void RemoveOnTriggerEnter2dDelegate_AfterArgs(Params_RemoveOnTriggerEnter2dDelegate args);

        public delegate void RemoveOnTriggerEnter2dDelegate_BeforeArgs(Params_RemoveOnTriggerEnter2dDelegate args);

        public delegate void RemoveOnTriggerEnter2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate del);

        public delegate void RemoveOnTriggerExit2dDelegate_AfterArgs(Params_RemoveOnTriggerExit2dDelegate args);

        public delegate void RemoveOnTriggerExit2dDelegate_BeforeArgs(Params_RemoveOnTriggerExit2dDelegate args);

        public delegate void RemoveOnTriggerExit2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnTriggerExit2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerExit2dDelegate del);

        public delegate void RemoveOnTriggerStay2dDelegate_AfterArgs(Params_RemoveOnTriggerStay2dDelegate args);

        public delegate void RemoveOnTriggerStay2dDelegate_BeforeArgs(Params_RemoveOnTriggerStay2dDelegate args);

        public delegate void RemoveOnTriggerStay2dDelegate_WithArgs(
            Action<PlayMakerUnity2DProxy, PlayMakerUnity2DProxy.OnTriggerStay2dDelegate> orig,
            PlayMakerUnity2DProxy self, PlayMakerUnity2DProxy.OnTriggerStay2dDelegate del);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<PlayMakerUnity2DProxy> orig, PlayMakerUnity2DProxy self);

        public sealed class Params_AddOnCollisionEnter2dDelegate
        {
            public PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RemoveOnCollisionEnter2dDelegate
        {
            public PlayMakerUnity2DProxy.OnCollisionEnter2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_AddOnCollisionStay2dDelegate
        {
            public PlayMakerUnity2DProxy.OnCollisionStay2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RemoveOnCollisionStay2dDelegate
        {
            public PlayMakerUnity2DProxy.OnCollisionStay2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_AddOnCollisionExit2dDelegate
        {
            public PlayMakerUnity2DProxy.OnCollisionExit2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RemoveOnCollisionExit2dDelegate
        {
            public PlayMakerUnity2DProxy.OnCollisionExit2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_AddOnTriggerEnter2dDelegate
        {
            public PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RemoveOnTriggerEnter2dDelegate
        {
            public PlayMakerUnity2DProxy.OnTriggerEnter2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_AddOnTriggerStay2dDelegate
        {
            public PlayMakerUnity2DProxy.OnTriggerStay2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RemoveOnTriggerStay2dDelegate
        {
            public PlayMakerUnity2DProxy.OnTriggerStay2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_AddOnTriggerExit2dDelegate
        {
            public PlayMakerUnity2DProxy.OnTriggerExit2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RemoveOnTriggerExit2dDelegate
        {
            public PlayMakerUnity2DProxy.OnTriggerExit2dDelegate del;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_help
        {
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_Start
        {
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_RefreshImplementation
        {
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D coll;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_OnCollisionStay2D
        {
            public Collision2D coll;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_OnCollisionExit2D
        {
            public Collision2D coll;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D coll;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_OnTriggerStay2D
        {
            public Collider2D coll;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_OnTriggerExit2D
        {
            public Collider2D coll;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_CheckGameObjectEventsImplementation
        {
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_CheckFsmEventsImplementation
        {
            public PlayMakerFSM fsm;
            public PlayMakerUnity2DProxy self;
        }

        public sealed class Params_CheckTransition
        {
            public PlayMakerUnity2DProxy self;
            public string transitionName;
        }

        public sealed class Params_orig_Start
        {
            public PlayMakerUnity2DProxy self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AddOnCollisionEnter2dDelegate_BeforeArgs AddOnCollisionEnter2dDelegate
        {
            add
            {
                HookHandler._beforeAddOnCollisionEnter2dDelegate += value;
                HookHandler.HookAddOnCollisionEnter2dDelegate();
            }
            remove => HookHandler._beforeAddOnCollisionEnter2dDelegate -= value;
        }

        public static event Delegates.RemoveOnCollisionEnter2dDelegate_BeforeArgs RemoveOnCollisionEnter2dDelegate
        {
            add
            {
                HookHandler._beforeRemoveOnCollisionEnter2dDelegate += value;
                HookHandler.HookRemoveOnCollisionEnter2dDelegate();
            }
            remove => HookHandler._beforeRemoveOnCollisionEnter2dDelegate -= value;
        }

        public static event Delegates.AddOnCollisionStay2dDelegate_BeforeArgs AddOnCollisionStay2dDelegate
        {
            add
            {
                HookHandler._beforeAddOnCollisionStay2dDelegate += value;
                HookHandler.HookAddOnCollisionStay2dDelegate();
            }
            remove => HookHandler._beforeAddOnCollisionStay2dDelegate -= value;
        }

        public static event Delegates.RemoveOnCollisionStay2dDelegate_BeforeArgs RemoveOnCollisionStay2dDelegate
        {
            add
            {
                HookHandler._beforeRemoveOnCollisionStay2dDelegate += value;
                HookHandler.HookRemoveOnCollisionStay2dDelegate();
            }
            remove => HookHandler._beforeRemoveOnCollisionStay2dDelegate -= value;
        }

        public static event Delegates.AddOnCollisionExit2dDelegate_BeforeArgs AddOnCollisionExit2dDelegate
        {
            add
            {
                HookHandler._beforeAddOnCollisionExit2dDelegate += value;
                HookHandler.HookAddOnCollisionExit2dDelegate();
            }
            remove => HookHandler._beforeAddOnCollisionExit2dDelegate -= value;
        }

        public static event Delegates.RemoveOnCollisionExit2dDelegate_BeforeArgs RemoveOnCollisionExit2dDelegate
        {
            add
            {
                HookHandler._beforeRemoveOnCollisionExit2dDelegate += value;
                HookHandler.HookRemoveOnCollisionExit2dDelegate();
            }
            remove => HookHandler._beforeRemoveOnCollisionExit2dDelegate -= value;
        }

        public static event Delegates.AddOnTriggerEnter2dDelegate_BeforeArgs AddOnTriggerEnter2dDelegate
        {
            add
            {
                HookHandler._beforeAddOnTriggerEnter2dDelegate += value;
                HookHandler.HookAddOnTriggerEnter2dDelegate();
            }
            remove => HookHandler._beforeAddOnTriggerEnter2dDelegate -= value;
        }

        public static event Delegates.RemoveOnTriggerEnter2dDelegate_BeforeArgs RemoveOnTriggerEnter2dDelegate
        {
            add
            {
                HookHandler._beforeRemoveOnTriggerEnter2dDelegate += value;
                HookHandler.HookRemoveOnTriggerEnter2dDelegate();
            }
            remove => HookHandler._beforeRemoveOnTriggerEnter2dDelegate -= value;
        }

        public static event Delegates.AddOnTriggerStay2dDelegate_BeforeArgs AddOnTriggerStay2dDelegate
        {
            add
            {
                HookHandler._beforeAddOnTriggerStay2dDelegate += value;
                HookHandler.HookAddOnTriggerStay2dDelegate();
            }
            remove => HookHandler._beforeAddOnTriggerStay2dDelegate -= value;
        }

        public static event Delegates.RemoveOnTriggerStay2dDelegate_BeforeArgs RemoveOnTriggerStay2dDelegate
        {
            add
            {
                HookHandler._beforeRemoveOnTriggerStay2dDelegate += value;
                HookHandler.HookRemoveOnTriggerStay2dDelegate();
            }
            remove => HookHandler._beforeRemoveOnTriggerStay2dDelegate -= value;
        }

        public static event Delegates.AddOnTriggerExit2dDelegate_BeforeArgs AddOnTriggerExit2dDelegate
        {
            add
            {
                HookHandler._beforeAddOnTriggerExit2dDelegate += value;
                HookHandler.HookAddOnTriggerExit2dDelegate();
            }
            remove => HookHandler._beforeAddOnTriggerExit2dDelegate -= value;
        }

        public static event Delegates.RemoveOnTriggerExit2dDelegate_BeforeArgs RemoveOnTriggerExit2dDelegate
        {
            add
            {
                HookHandler._beforeRemoveOnTriggerExit2dDelegate += value;
                HookHandler.HookRemoveOnTriggerExit2dDelegate();
            }
            remove => HookHandler._beforeRemoveOnTriggerExit2dDelegate -= value;
        }

        public static event Delegates.help_BeforeArgs help
        {
            add
            {
                HookHandler._beforehelp += value;
                HookHandler.Hookhelp();
            }
            remove => HookHandler._beforehelp -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.RefreshImplementation_BeforeArgs RefreshImplementation
        {
            add
            {
                HookHandler._beforeRefreshImplementation += value;
                HookHandler.HookRefreshImplementation();
            }
            remove => HookHandler._beforeRefreshImplementation -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionStay2D_BeforeArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._beforeOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._beforeOnCollisionStay2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_BeforeArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._beforeOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._beforeOnCollisionExit2D -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_BeforeArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._beforeOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._beforeOnTriggerStay2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_BeforeArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._beforeOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._beforeOnTriggerExit2D -= value;
        }

        public static event Delegates.CheckGameObjectEventsImplementation_BeforeArgs CheckGameObjectEventsImplementation
        {
            add
            {
                HookHandler._beforeCheckGameObjectEventsImplementation += value;
                HookHandler.HookCheckGameObjectEventsImplementation();
            }
            remove => HookHandler._beforeCheckGameObjectEventsImplementation -= value;
        }

        public static event Delegates.CheckFsmEventsImplementation_BeforeArgs CheckFsmEventsImplementation
        {
            add
            {
                HookHandler._beforeCheckFsmEventsImplementation += value;
                HookHandler.HookCheckFsmEventsImplementation();
            }
            remove => HookHandler._beforeCheckFsmEventsImplementation -= value;
        }

        public static event Delegates.CheckTransition_BeforeArgs CheckTransition
        {
            add
            {
                HookHandler._beforeCheckTransition += value;
                HookHandler.HookCheckTransition();
            }
            remove => HookHandler._beforeCheckTransition -= value;
        }

        public static event Delegates.orig_Start_BeforeArgs orig_Start
        {
            add
            {
                HookHandler._beforeorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._beforeorig_Start -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AddOnCollisionEnter2dDelegate_AfterArgs AddOnCollisionEnter2dDelegate
        {
            add
            {
                HookHandler._afterAddOnCollisionEnter2dDelegate += value;
                HookHandler.HookAddOnCollisionEnter2dDelegate();
            }
            remove => HookHandler._afterAddOnCollisionEnter2dDelegate -= value;
        }

        public static event Delegates.RemoveOnCollisionEnter2dDelegate_AfterArgs RemoveOnCollisionEnter2dDelegate
        {
            add
            {
                HookHandler._afterRemoveOnCollisionEnter2dDelegate += value;
                HookHandler.HookRemoveOnCollisionEnter2dDelegate();
            }
            remove => HookHandler._afterRemoveOnCollisionEnter2dDelegate -= value;
        }

        public static event Delegates.AddOnCollisionStay2dDelegate_AfterArgs AddOnCollisionStay2dDelegate
        {
            add
            {
                HookHandler._afterAddOnCollisionStay2dDelegate += value;
                HookHandler.HookAddOnCollisionStay2dDelegate();
            }
            remove => HookHandler._afterAddOnCollisionStay2dDelegate -= value;
        }

        public static event Delegates.RemoveOnCollisionStay2dDelegate_AfterArgs RemoveOnCollisionStay2dDelegate
        {
            add
            {
                HookHandler._afterRemoveOnCollisionStay2dDelegate += value;
                HookHandler.HookRemoveOnCollisionStay2dDelegate();
            }
            remove => HookHandler._afterRemoveOnCollisionStay2dDelegate -= value;
        }

        public static event Delegates.AddOnCollisionExit2dDelegate_AfterArgs AddOnCollisionExit2dDelegate
        {
            add
            {
                HookHandler._afterAddOnCollisionExit2dDelegate += value;
                HookHandler.HookAddOnCollisionExit2dDelegate();
            }
            remove => HookHandler._afterAddOnCollisionExit2dDelegate -= value;
        }

        public static event Delegates.RemoveOnCollisionExit2dDelegate_AfterArgs RemoveOnCollisionExit2dDelegate
        {
            add
            {
                HookHandler._afterRemoveOnCollisionExit2dDelegate += value;
                HookHandler.HookRemoveOnCollisionExit2dDelegate();
            }
            remove => HookHandler._afterRemoveOnCollisionExit2dDelegate -= value;
        }

        public static event Delegates.AddOnTriggerEnter2dDelegate_AfterArgs AddOnTriggerEnter2dDelegate
        {
            add
            {
                HookHandler._afterAddOnTriggerEnter2dDelegate += value;
                HookHandler.HookAddOnTriggerEnter2dDelegate();
            }
            remove => HookHandler._afterAddOnTriggerEnter2dDelegate -= value;
        }

        public static event Delegates.RemoveOnTriggerEnter2dDelegate_AfterArgs RemoveOnTriggerEnter2dDelegate
        {
            add
            {
                HookHandler._afterRemoveOnTriggerEnter2dDelegate += value;
                HookHandler.HookRemoveOnTriggerEnter2dDelegate();
            }
            remove => HookHandler._afterRemoveOnTriggerEnter2dDelegate -= value;
        }

        public static event Delegates.AddOnTriggerStay2dDelegate_AfterArgs AddOnTriggerStay2dDelegate
        {
            add
            {
                HookHandler._afterAddOnTriggerStay2dDelegate += value;
                HookHandler.HookAddOnTriggerStay2dDelegate();
            }
            remove => HookHandler._afterAddOnTriggerStay2dDelegate -= value;
        }

        public static event Delegates.RemoveOnTriggerStay2dDelegate_AfterArgs RemoveOnTriggerStay2dDelegate
        {
            add
            {
                HookHandler._afterRemoveOnTriggerStay2dDelegate += value;
                HookHandler.HookRemoveOnTriggerStay2dDelegate();
            }
            remove => HookHandler._afterRemoveOnTriggerStay2dDelegate -= value;
        }

        public static event Delegates.AddOnTriggerExit2dDelegate_AfterArgs AddOnTriggerExit2dDelegate
        {
            add
            {
                HookHandler._afterAddOnTriggerExit2dDelegate += value;
                HookHandler.HookAddOnTriggerExit2dDelegate();
            }
            remove => HookHandler._afterAddOnTriggerExit2dDelegate -= value;
        }

        public static event Delegates.RemoveOnTriggerExit2dDelegate_AfterArgs RemoveOnTriggerExit2dDelegate
        {
            add
            {
                HookHandler._afterRemoveOnTriggerExit2dDelegate += value;
                HookHandler.HookRemoveOnTriggerExit2dDelegate();
            }
            remove => HookHandler._afterRemoveOnTriggerExit2dDelegate -= value;
        }

        public static event Delegates.help_AfterArgs help
        {
            add
            {
                HookHandler._afterhelp += value;
                HookHandler.Hookhelp();
            }
            remove => HookHandler._afterhelp -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.RefreshImplementation_AfterArgs RefreshImplementation
        {
            add
            {
                HookHandler._afterRefreshImplementation += value;
                HookHandler.HookRefreshImplementation();
            }
            remove => HookHandler._afterRefreshImplementation -= value;
        }

        public static event Delegates.OnCollisionEnter2D_AfterArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionStay2D_AfterArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._afterOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._afterOnCollisionStay2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_AfterArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._afterOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._afterOnCollisionExit2D -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerStay2D_AfterArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._afterOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._afterOnTriggerStay2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_AfterArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._afterOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._afterOnTriggerExit2D -= value;
        }

        public static event Delegates.CheckGameObjectEventsImplementation_AfterArgs CheckGameObjectEventsImplementation
        {
            add
            {
                HookHandler._afterCheckGameObjectEventsImplementation += value;
                HookHandler.HookCheckGameObjectEventsImplementation();
            }
            remove => HookHandler._afterCheckGameObjectEventsImplementation -= value;
        }

        public static event Delegates.CheckFsmEventsImplementation_AfterArgs CheckFsmEventsImplementation
        {
            add
            {
                HookHandler._afterCheckFsmEventsImplementation += value;
                HookHandler.HookCheckFsmEventsImplementation();
            }
            remove => HookHandler._afterCheckFsmEventsImplementation -= value;
        }

        public static event Delegates.CheckTransition_AfterArgs CheckTransition
        {
            add
            {
                HookHandler._afterCheckTransition += value;
                HookHandler.HookCheckTransition();
            }
            remove => HookHandler._afterCheckTransition -= value;
        }

        public static event Delegates.orig_Start_AfterArgs orig_Start
        {
            add
            {
                HookHandler._afterorig_Start += value;
                HookHandler.Hookorig_Start();
            }
            remove => HookHandler._afterorig_Start -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerUnity2DProxy.hook_AddOnCollisionEnter2dDelegate AddOnCollisionEnter2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.AddOnCollisionEnter2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.AddOnCollisionEnter2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RemoveOnCollisionEnter2dDelegate
            RemoveOnCollisionEnter2dDelegate
            {
                add => On.PlayMakerUnity2DProxy.RemoveOnCollisionEnter2dDelegate += value;
                remove => On.PlayMakerUnity2DProxy.RemoveOnCollisionEnter2dDelegate -= value;
            }

        public static event On.PlayMakerUnity2DProxy.hook_AddOnCollisionStay2dDelegate AddOnCollisionStay2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.AddOnCollisionStay2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.AddOnCollisionStay2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RemoveOnCollisionStay2dDelegate
            RemoveOnCollisionStay2dDelegate
            {
                add => On.PlayMakerUnity2DProxy.RemoveOnCollisionStay2dDelegate += value;
                remove => On.PlayMakerUnity2DProxy.RemoveOnCollisionStay2dDelegate -= value;
            }

        public static event On.PlayMakerUnity2DProxy.hook_AddOnCollisionExit2dDelegate AddOnCollisionExit2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.AddOnCollisionExit2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.AddOnCollisionExit2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RemoveOnCollisionExit2dDelegate
            RemoveOnCollisionExit2dDelegate
            {
                add => On.PlayMakerUnity2DProxy.RemoveOnCollisionExit2dDelegate += value;
                remove => On.PlayMakerUnity2DProxy.RemoveOnCollisionExit2dDelegate -= value;
            }

        public static event On.PlayMakerUnity2DProxy.hook_AddOnTriggerEnter2dDelegate AddOnTriggerEnter2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.AddOnTriggerEnter2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.AddOnTriggerEnter2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RemoveOnTriggerEnter2dDelegate RemoveOnTriggerEnter2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.RemoveOnTriggerEnter2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.RemoveOnTriggerEnter2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_AddOnTriggerStay2dDelegate AddOnTriggerStay2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.AddOnTriggerStay2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.AddOnTriggerStay2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RemoveOnTriggerStay2dDelegate RemoveOnTriggerStay2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.RemoveOnTriggerStay2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.RemoveOnTriggerStay2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_AddOnTriggerExit2dDelegate AddOnTriggerExit2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.AddOnTriggerExit2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.AddOnTriggerExit2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RemoveOnTriggerExit2dDelegate RemoveOnTriggerExit2dDelegate
        {
            add => On.PlayMakerUnity2DProxy.RemoveOnTriggerExit2dDelegate += value;
            remove => On.PlayMakerUnity2DProxy.RemoveOnTriggerExit2dDelegate -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_help help
        {
            add => On.PlayMakerUnity2DProxy.help += value;
            remove => On.PlayMakerUnity2DProxy.help -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_Start Start
        {
            add => On.PlayMakerUnity2DProxy.Start += value;
            remove => On.PlayMakerUnity2DProxy.Start -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_RefreshImplementation RefreshImplementation
        {
            add => On.PlayMakerUnity2DProxy.RefreshImplementation += value;
            remove => On.PlayMakerUnity2DProxy.RefreshImplementation -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.PlayMakerUnity2DProxy.OnCollisionEnter2D += value;
            remove => On.PlayMakerUnity2DProxy.OnCollisionEnter2D -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_OnCollisionStay2D OnCollisionStay2D
        {
            add => On.PlayMakerUnity2DProxy.OnCollisionStay2D += value;
            remove => On.PlayMakerUnity2DProxy.OnCollisionStay2D -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_OnCollisionExit2D OnCollisionExit2D
        {
            add => On.PlayMakerUnity2DProxy.OnCollisionExit2D += value;
            remove => On.PlayMakerUnity2DProxy.OnCollisionExit2D -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.PlayMakerUnity2DProxy.OnTriggerEnter2D += value;
            remove => On.PlayMakerUnity2DProxy.OnTriggerEnter2D -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_OnTriggerStay2D OnTriggerStay2D
        {
            add => On.PlayMakerUnity2DProxy.OnTriggerStay2D += value;
            remove => On.PlayMakerUnity2DProxy.OnTriggerStay2D -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_OnTriggerExit2D OnTriggerExit2D
        {
            add => On.PlayMakerUnity2DProxy.OnTriggerExit2D += value;
            remove => On.PlayMakerUnity2DProxy.OnTriggerExit2D -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_CheckGameObjectEventsImplementation
            CheckGameObjectEventsImplementation
            {
                add => On.PlayMakerUnity2DProxy.CheckGameObjectEventsImplementation += value;
                remove => On.PlayMakerUnity2DProxy.CheckGameObjectEventsImplementation -= value;
            }

        public static event On.PlayMakerUnity2DProxy.hook_CheckFsmEventsImplementation CheckFsmEventsImplementation
        {
            add => On.PlayMakerUnity2DProxy.CheckFsmEventsImplementation += value;
            remove => On.PlayMakerUnity2DProxy.CheckFsmEventsImplementation -= value;
        }

        public static event On.PlayMakerUnity2DProxy.hook_CheckTransition CheckTransition
        {
            add => On.PlayMakerUnity2DProxy.CheckTransition += value;
            remove => On.PlayMakerUnity2DProxy.CheckTransition -= value;
        }

        public static event Delegates.orig_Start_WithArgs orig_Start
        {
            add => HookEndpointManager.Add<Delegates.orig_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayMakerUnity2DProxy), "orig_Start"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayMakerUnity2DProxy), "orig_Start"), value);
        }
    }
}