using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Utility class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUtility
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookDrawCircleGizmo_Vector2_float()
        {
            if (!HookedList.Contains("DrawCircleGizmo_Vector2_float"))
            {
                HookedList.Add("DrawCircleGizmo_Vector2_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawCircleGizmo_Vector2_float", false),
                    DrawCircleGizmo_Vector2_float);
            }
        }

        internal static event Delegates.DrawCircleGizmo_Vector2_float_BeforeArgs _beforeDrawCircleGizmo_Vector2_float;
        internal static event Delegates.DrawCircleGizmo_Vector2_float_AfterArgs _afterDrawCircleGizmo_Vector2_float;

        private static void DrawCircleGizmo_Vector2_float(Action<Vector2, float> orig, Vector2 center, float radius)
        {
            Delegates.Params_DrawCircleGizmo_Vector2_float @params = new()
            {
                center = center, radius = radius
            };
            if (_beforeDrawCircleGizmo_Vector2_float != null)
                foreach (Delegates.DrawCircleGizmo_Vector2_float_BeforeArgs toInvoke in
                         _beforeDrawCircleGizmo_Vector2_float.GetInvocationList())
                    try
                    {
                        _beforeDrawCircleGizmo_Vector2_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            center = @params.center;
            radius = @params.radius;
            orig(center, radius);
            if (_afterDrawCircleGizmo_Vector2_float != null)
                foreach (Delegates.DrawCircleGizmo_Vector2_float_AfterArgs toInvoke in
                         _afterDrawCircleGizmo_Vector2_float.GetInvocationList())
                    try
                    {
                        _afterDrawCircleGizmo_Vector2_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawCircleGizmo_Vector2_float_Color()
        {
            if (!HookedList.Contains("DrawCircleGizmo_Vector2_float_Color"))
            {
                HookedList.Add("DrawCircleGizmo_Vector2_float_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawCircleGizmo_Vector2_float_Color", false),
                    DrawCircleGizmo_Vector2_float_Color);
            }
        }

        internal static event Delegates.DrawCircleGizmo_Vector2_float_Color_BeforeArgs
            _beforeDrawCircleGizmo_Vector2_float_Color;

        internal static event Delegates.DrawCircleGizmo_Vector2_float_Color_AfterArgs
            _afterDrawCircleGizmo_Vector2_float_Color;

        private static void DrawCircleGizmo_Vector2_float_Color(Action<Vector2, float, Color> orig, Vector2 center,
            float radius, Color color)
        {
            Delegates.Params_DrawCircleGizmo_Vector2_float_Color @params = new()
            {
                center = center, radius = radius, color = color
            };
            if (_beforeDrawCircleGizmo_Vector2_float_Color != null)
                foreach (Delegates.DrawCircleGizmo_Vector2_float_Color_BeforeArgs toInvoke in
                         _beforeDrawCircleGizmo_Vector2_float_Color.GetInvocationList())
                    try
                    {
                        _beforeDrawCircleGizmo_Vector2_float_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            center = @params.center;
            radius = @params.radius;
            color = @params.color;
            orig(center, radius, color);
            if (_afterDrawCircleGizmo_Vector2_float_Color != null)
                foreach (Delegates.DrawCircleGizmo_Vector2_float_Color_AfterArgs toInvoke in
                         _afterDrawCircleGizmo_Vector2_float_Color.GetInvocationList())
                    try
                    {
                        _afterDrawCircleGizmo_Vector2_float_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawOvalGizmo_Vector2_Vector2()
        {
            if (!HookedList.Contains("DrawOvalGizmo_Vector2_Vector2"))
            {
                HookedList.Add("DrawOvalGizmo_Vector2_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawOvalGizmo_Vector2_Vector2", false),
                    DrawOvalGizmo_Vector2_Vector2);
            }
        }

        internal static event Delegates.DrawOvalGizmo_Vector2_Vector2_BeforeArgs _beforeDrawOvalGizmo_Vector2_Vector2;
        internal static event Delegates.DrawOvalGizmo_Vector2_Vector2_AfterArgs _afterDrawOvalGizmo_Vector2_Vector2;

        private static void DrawOvalGizmo_Vector2_Vector2(Action<Vector2, Vector2> orig, Vector2 center, Vector2 size)
        {
            Delegates.Params_DrawOvalGizmo_Vector2_Vector2 @params = new()
            {
                center = center, size = size
            };
            if (_beforeDrawOvalGizmo_Vector2_Vector2 != null)
                foreach (Delegates.DrawOvalGizmo_Vector2_Vector2_BeforeArgs toInvoke in
                         _beforeDrawOvalGizmo_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        _beforeDrawOvalGizmo_Vector2_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            center = @params.center;
            size = @params.size;
            orig(center, size);
            if (_afterDrawOvalGizmo_Vector2_Vector2 != null)
                foreach (Delegates.DrawOvalGizmo_Vector2_Vector2_AfterArgs toInvoke in
                         _afterDrawOvalGizmo_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        _afterDrawOvalGizmo_Vector2_Vector2.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawOvalGizmo_Vector2_Vector2_Color()
        {
            if (!HookedList.Contains("DrawOvalGizmo_Vector2_Vector2_Color"))
            {
                HookedList.Add("DrawOvalGizmo_Vector2_Vector2_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawOvalGizmo_Vector2_Vector2_Color", false),
                    DrawOvalGizmo_Vector2_Vector2_Color);
            }
        }

        internal static event Delegates.DrawOvalGizmo_Vector2_Vector2_Color_BeforeArgs
            _beforeDrawOvalGizmo_Vector2_Vector2_Color;

        internal static event Delegates.DrawOvalGizmo_Vector2_Vector2_Color_AfterArgs
            _afterDrawOvalGizmo_Vector2_Vector2_Color;

        private static void DrawOvalGizmo_Vector2_Vector2_Color(Action<Vector2, Vector2, Color> orig, Vector2 center,
            Vector2 size, Color color)
        {
            Delegates.Params_DrawOvalGizmo_Vector2_Vector2_Color @params = new()
            {
                center = center, size = size, color = color
            };
            if (_beforeDrawOvalGizmo_Vector2_Vector2_Color != null)
                foreach (Delegates.DrawOvalGizmo_Vector2_Vector2_Color_BeforeArgs toInvoke in
                         _beforeDrawOvalGizmo_Vector2_Vector2_Color.GetInvocationList())
                    try
                    {
                        _beforeDrawOvalGizmo_Vector2_Vector2_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            center = @params.center;
            size = @params.size;
            color = @params.color;
            orig(center, size, color);
            if (_afterDrawOvalGizmo_Vector2_Vector2_Color != null)
                foreach (Delegates.DrawOvalGizmo_Vector2_Vector2_Color_AfterArgs toInvoke in
                         _afterDrawOvalGizmo_Vector2_Vector2_Color.GetInvocationList())
                    try
                    {
                        _afterDrawOvalGizmo_Vector2_Vector2_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawRectGizmo_Rect()
        {
            if (!HookedList.Contains("DrawRectGizmo_Rect"))
            {
                HookedList.Add("DrawRectGizmo_Rect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo_Rect", false),
                    DrawRectGizmo_Rect);
            }
        }

        internal static event Delegates.DrawRectGizmo_Rect_BeforeArgs _beforeDrawRectGizmo_Rect;
        internal static event Delegates.DrawRectGizmo_Rect_AfterArgs _afterDrawRectGizmo_Rect;

        private static void DrawRectGizmo_Rect(Action<Rect> orig, Rect rect)
        {
            Delegates.Params_DrawRectGizmo_Rect @params = new()
            {
                rect = rect
            };
            if (_beforeDrawRectGizmo_Rect != null)
                foreach (Delegates.DrawRectGizmo_Rect_BeforeArgs toInvoke in
                         _beforeDrawRectGizmo_Rect.GetInvocationList())
                    try
                    {
                        _beforeDrawRectGizmo_Rect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rect = @params.rect;
            orig(rect);
            if (_afterDrawRectGizmo_Rect != null)
                foreach (Delegates.DrawRectGizmo_Rect_AfterArgs toInvoke in
                         _afterDrawRectGizmo_Rect.GetInvocationList())
                    try
                    {
                        _afterDrawRectGizmo_Rect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawRectGizmo_Rect_Color()
        {
            if (!HookedList.Contains("DrawRectGizmo_Rect_Color"))
            {
                HookedList.Add("DrawRectGizmo_Rect_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo_Rect_Color", false),
                    DrawRectGizmo_Rect_Color);
            }
        }

        internal static event Delegates.DrawRectGizmo_Rect_Color_BeforeArgs _beforeDrawRectGizmo_Rect_Color;
        internal static event Delegates.DrawRectGizmo_Rect_Color_AfterArgs _afterDrawRectGizmo_Rect_Color;

        private static void DrawRectGizmo_Rect_Color(Action<Rect, Color> orig, Rect rect, Color color)
        {
            Delegates.Params_DrawRectGizmo_Rect_Color @params = new()
            {
                rect = rect, color = color
            };
            if (_beforeDrawRectGizmo_Rect_Color != null)
                foreach (Delegates.DrawRectGizmo_Rect_Color_BeforeArgs toInvoke in _beforeDrawRectGizmo_Rect_Color
                             .GetInvocationList())
                    try
                    {
                        _beforeDrawRectGizmo_Rect_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            rect = @params.rect;
            color = @params.color;
            orig(rect, color);
            if (_afterDrawRectGizmo_Rect_Color != null)
                foreach (Delegates.DrawRectGizmo_Rect_Color_AfterArgs toInvoke in _afterDrawRectGizmo_Rect_Color
                             .GetInvocationList())
                    try
                    {
                        _afterDrawRectGizmo_Rect_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawRectGizmo_Vector2_Vector2()
        {
            if (!HookedList.Contains("DrawRectGizmo_Vector2_Vector2"))
            {
                HookedList.Add("DrawRectGizmo_Vector2_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo_Vector2_Vector2", false),
                    DrawRectGizmo_Vector2_Vector2);
            }
        }

        internal static event Delegates.DrawRectGizmo_Vector2_Vector2_BeforeArgs _beforeDrawRectGizmo_Vector2_Vector2;
        internal static event Delegates.DrawRectGizmo_Vector2_Vector2_AfterArgs _afterDrawRectGizmo_Vector2_Vector2;

        private static void DrawRectGizmo_Vector2_Vector2(Action<Vector2, Vector2> orig, Vector2 center, Vector2 size)
        {
            Delegates.Params_DrawRectGizmo_Vector2_Vector2 @params = new()
            {
                center = center, size = size
            };
            if (_beforeDrawRectGizmo_Vector2_Vector2 != null)
                foreach (Delegates.DrawRectGizmo_Vector2_Vector2_BeforeArgs toInvoke in
                         _beforeDrawRectGizmo_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        _beforeDrawRectGizmo_Vector2_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            center = @params.center;
            size = @params.size;
            orig(center, size);
            if (_afterDrawRectGizmo_Vector2_Vector2 != null)
                foreach (Delegates.DrawRectGizmo_Vector2_Vector2_AfterArgs toInvoke in
                         _afterDrawRectGizmo_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        _afterDrawRectGizmo_Vector2_Vector2.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDrawRectGizmo_Vector2_Vector2_Color()
        {
            if (!HookedList.Contains("DrawRectGizmo_Vector2_Vector2_Color"))
            {
                HookedList.Add("DrawRectGizmo_Vector2_Vector2_Color");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo_Vector2_Vector2_Color", false),
                    DrawRectGizmo_Vector2_Vector2_Color);
            }
        }

        internal static event Delegates.DrawRectGizmo_Vector2_Vector2_Color_BeforeArgs
            _beforeDrawRectGizmo_Vector2_Vector2_Color;

        internal static event Delegates.DrawRectGizmo_Vector2_Vector2_Color_AfterArgs
            _afterDrawRectGizmo_Vector2_Vector2_Color;

        private static void DrawRectGizmo_Vector2_Vector2_Color(Action<Vector2, Vector2, Color> orig, Vector2 center,
            Vector2 size, Color color)
        {
            Delegates.Params_DrawRectGizmo_Vector2_Vector2_Color @params = new()
            {
                center = center, size = size, color = color
            };
            if (_beforeDrawRectGizmo_Vector2_Vector2_Color != null)
                foreach (Delegates.DrawRectGizmo_Vector2_Vector2_Color_BeforeArgs toInvoke in
                         _beforeDrawRectGizmo_Vector2_Vector2_Color.GetInvocationList())
                    try
                    {
                        _beforeDrawRectGizmo_Vector2_Vector2_Color?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            center = @params.center;
            size = @params.size;
            color = @params.color;
            orig(center, size, color);
            if (_afterDrawRectGizmo_Vector2_Vector2_Color != null)
                foreach (Delegates.DrawRectGizmo_Vector2_Vector2_Color_AfterArgs toInvoke in
                         _afterDrawRectGizmo_Vector2_Vector2_Color.GetInvocationList())
                    try
                    {
                        _afterDrawRectGizmo_Vector2_Vector2_Color.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGameObjectIsCulledOnCurrentCamera()
        {
            if (!HookedList.Contains("GameObjectIsCulledOnCurrentCamera"))
            {
                HookedList.Add("GameObjectIsCulledOnCurrentCamera");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "GameObjectIsCulledOnCurrentCamera", false),
                    GameObjectIsCulledOnCurrentCamera);
            }
        }

        internal static event Delegates.GameObjectIsCulledOnCurrentCamera_BeforeArgs
            _beforeGameObjectIsCulledOnCurrentCamera;

        internal static event Delegates.GameObjectIsCulledOnCurrentCamera_AfterArgs
            _afterGameObjectIsCulledOnCurrentCamera;

        private static bool GameObjectIsCulledOnCurrentCamera(Func<GameObject, bool> orig, GameObject gameObject)
        {
            Delegates.Params_GameObjectIsCulledOnCurrentCamera @params = new()
            {
                gameObject = gameObject
            };
            if (_beforeGameObjectIsCulledOnCurrentCamera != null)
                foreach (Delegates.GameObjectIsCulledOnCurrentCamera_BeforeArgs toInvoke in
                         _beforeGameObjectIsCulledOnCurrentCamera.GetInvocationList())
                    try
                    {
                        _beforeGameObjectIsCulledOnCurrentCamera?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gameObject = @params.gameObject;
            var retVal = orig(gameObject);
            if (_afterGameObjectIsCulledOnCurrentCamera != null)
                foreach (Delegates.GameObjectIsCulledOnCurrentCamera_AfterArgs toInvoke in
                         _afterGameObjectIsCulledOnCurrentCamera.GetInvocationList())
                    try
                    {
                        retVal = _afterGameObjectIsCulledOnCurrentCamera.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMoveColorTowards()
        {
            if (!HookedList.Contains("MoveColorTowards"))
            {
                HookedList.Add("MoveColorTowards");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "MoveColorTowards", false), MoveColorTowards);
            }
        }

        internal static event Delegates.MoveColorTowards_BeforeArgs _beforeMoveColorTowards;
        internal static event Delegates.MoveColorTowards_AfterArgs _afterMoveColorTowards;

        private static Color MoveColorTowards(Func<Color, Color, float, Color> orig, Color color0, Color color1,
            float maxDelta)
        {
            Delegates.Params_MoveColorTowards @params = new()
            {
                color0 = color0, color1 = color1, maxDelta = maxDelta
            };
            if (_beforeMoveColorTowards != null)
                foreach (Delegates.MoveColorTowards_BeforeArgs toInvoke in _beforeMoveColorTowards.GetInvocationList())
                    try
                    {
                        _beforeMoveColorTowards?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            color0 = @params.color0;
            color1 = @params.color1;
            maxDelta = @params.maxDelta;
            var retVal = orig(color0, color1, maxDelta);
            if (_afterMoveColorTowards != null)
                foreach (Delegates.MoveColorTowards_AfterArgs toInvoke in _afterMoveColorTowards.GetInvocationList())
                    try
                    {
                        retVal = _afterMoveColorTowards.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApplyDeadZone()
        {
            if (!HookedList.Contains("ApplyDeadZone"))
            {
                HookedList.Add("ApplyDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplyDeadZone", false), ApplyDeadZone);
            }
        }

        internal static event Delegates.ApplyDeadZone_BeforeArgs _beforeApplyDeadZone;
        internal static event Delegates.ApplyDeadZone_AfterArgs _afterApplyDeadZone;

        private static float ApplyDeadZone(Func<float, float, float, float> orig, float value, float lowerDeadZone,
            float upperDeadZone)
        {
            Delegates.Params_ApplyDeadZone @params = new()
            {
                value = value, lowerDeadZone = lowerDeadZone, upperDeadZone = upperDeadZone
            };
            if (_beforeApplyDeadZone != null)
                foreach (Delegates.ApplyDeadZone_BeforeArgs toInvoke in _beforeApplyDeadZone.GetInvocationList())
                    try
                    {
                        _beforeApplyDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            lowerDeadZone = @params.lowerDeadZone;
            upperDeadZone = @params.upperDeadZone;
            var retVal = orig(value, lowerDeadZone, upperDeadZone);
            if (_afterApplyDeadZone != null)
                foreach (Delegates.ApplyDeadZone_AfterArgs toInvoke in _afterApplyDeadZone.GetInvocationList())
                    try
                    {
                        retVal = _afterApplyDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApplySmoothing()
        {
            if (!HookedList.Contains("ApplySmoothing"))
            {
                HookedList.Add("ApplySmoothing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplySmoothing", false), ApplySmoothing);
            }
        }

        internal static event Delegates.ApplySmoothing_BeforeArgs _beforeApplySmoothing;
        internal static event Delegates.ApplySmoothing_AfterArgs _afterApplySmoothing;

        private static float ApplySmoothing(Func<float, float, float, float, float> orig, float thisValue,
            float lastValue, float deltaTime, float sensitivity)
        {
            Delegates.Params_ApplySmoothing @params = new()
            {
                thisValue = thisValue, lastValue = lastValue, deltaTime = deltaTime, sensitivity = sensitivity
            };
            if (_beforeApplySmoothing != null)
                foreach (Delegates.ApplySmoothing_BeforeArgs toInvoke in _beforeApplySmoothing.GetInvocationList())
                    try
                    {
                        _beforeApplySmoothing?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            thisValue = @params.thisValue;
            lastValue = @params.lastValue;
            deltaTime = @params.deltaTime;
            sensitivity = @params.sensitivity;
            var retVal = orig(thisValue, lastValue, deltaTime, sensitivity);
            if (_afterApplySmoothing != null)
                foreach (Delegates.ApplySmoothing_AfterArgs toInvoke in _afterApplySmoothing.GetInvocationList())
                    try
                    {
                        retVal = _afterApplySmoothing.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApplySnapping()
        {
            if (!HookedList.Contains("ApplySnapping"))
            {
                HookedList.Add("ApplySnapping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplySnapping", false), ApplySnapping);
            }
        }

        internal static event Delegates.ApplySnapping_BeforeArgs _beforeApplySnapping;
        internal static event Delegates.ApplySnapping_AfterArgs _afterApplySnapping;

        private static float ApplySnapping(Func<float, float, float> orig, float value, float threshold)
        {
            Delegates.Params_ApplySnapping @params = new()
            {
                value = value, threshold = threshold
            };
            if (_beforeApplySnapping != null)
                foreach (Delegates.ApplySnapping_BeforeArgs toInvoke in _beforeApplySnapping.GetInvocationList())
                    try
                    {
                        _beforeApplySnapping?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            threshold = @params.threshold;
            var retVal = orig(value, threshold);
            if (_afterApplySnapping != null)
                foreach (Delegates.ApplySnapping_AfterArgs toInvoke in _afterApplySnapping.GetInvocationList())
                    try
                    {
                        retVal = _afterApplySnapping.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTargetIsButton()
        {
            if (!HookedList.Contains("TargetIsButton"))
            {
                HookedList.Add("TargetIsButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsButton", false), TargetIsButton);
            }
        }

        internal static event Delegates.TargetIsButton_BeforeArgs _beforeTargetIsButton;
        internal static event Delegates.TargetIsButton_AfterArgs _afterTargetIsButton;

        private static bool TargetIsButton(Func<InputControlType, bool> orig, InputControlType target)
        {
            Delegates.Params_TargetIsButton @params = new()
            {
                target = target
            };
            if (_beforeTargetIsButton != null)
                foreach (Delegates.TargetIsButton_BeforeArgs toInvoke in _beforeTargetIsButton.GetInvocationList())
                    try
                    {
                        _beforeTargetIsButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            var retVal = orig(target);
            if (_afterTargetIsButton != null)
                foreach (Delegates.TargetIsButton_AfterArgs toInvoke in _afterTargetIsButton.GetInvocationList())
                    try
                    {
                        retVal = _afterTargetIsButton.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTargetIsStandard()
        {
            if (!HookedList.Contains("TargetIsStandard"))
            {
                HookedList.Add("TargetIsStandard");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsStandard", false), TargetIsStandard);
            }
        }

        internal static event Delegates.TargetIsStandard_BeforeArgs _beforeTargetIsStandard;
        internal static event Delegates.TargetIsStandard_AfterArgs _afterTargetIsStandard;

        private static bool TargetIsStandard(Func<InputControlType, bool> orig, InputControlType target)
        {
            Delegates.Params_TargetIsStandard @params = new()
            {
                target = target
            };
            if (_beforeTargetIsStandard != null)
                foreach (Delegates.TargetIsStandard_BeforeArgs toInvoke in _beforeTargetIsStandard.GetInvocationList())
                    try
                    {
                        _beforeTargetIsStandard?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            var retVal = orig(target);
            if (_afterTargetIsStandard != null)
                foreach (Delegates.TargetIsStandard_AfterArgs toInvoke in _afterTargetIsStandard.GetInvocationList())
                    try
                    {
                        retVal = _afterTargetIsStandard.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTargetIsAlias()
        {
            if (!HookedList.Contains("TargetIsAlias"))
            {
                HookedList.Add("TargetIsAlias");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsAlias", false), TargetIsAlias);
            }
        }

        internal static event Delegates.TargetIsAlias_BeforeArgs _beforeTargetIsAlias;
        internal static event Delegates.TargetIsAlias_AfterArgs _afterTargetIsAlias;

        private static bool TargetIsAlias(Func<InputControlType, bool> orig, InputControlType target)
        {
            Delegates.Params_TargetIsAlias @params = new()
            {
                target = target
            };
            if (_beforeTargetIsAlias != null)
                foreach (Delegates.TargetIsAlias_BeforeArgs toInvoke in _beforeTargetIsAlias.GetInvocationList())
                    try
                    {
                        _beforeTargetIsAlias?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            var retVal = orig(target);
            if (_afterTargetIsAlias != null)
                foreach (Delegates.TargetIsAlias_AfterArgs toInvoke in _afterTargetIsAlias.GetInvocationList())
                    try
                    {
                        retVal = _afterTargetIsAlias.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookReadFromFile()
        {
            if (!HookedList.Contains("ReadFromFile"))
            {
                HookedList.Add("ReadFromFile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "ReadFromFile", false), ReadFromFile);
            }
        }

        internal static event Delegates.ReadFromFile_BeforeArgs _beforeReadFromFile;
        internal static event Delegates.ReadFromFile_AfterArgs _afterReadFromFile;

        private static string ReadFromFile(Func<string, string> orig, string path)
        {
            Delegates.Params_ReadFromFile @params = new()
            {
                path = path
            };
            if (_beforeReadFromFile != null)
                foreach (Delegates.ReadFromFile_BeforeArgs toInvoke in _beforeReadFromFile.GetInvocationList())
                    try
                    {
                        _beforeReadFromFile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            var retVal = orig(path);
            if (_afterReadFromFile != null)
                foreach (Delegates.ReadFromFile_AfterArgs toInvoke in _afterReadFromFile.GetInvocationList())
                    try
                    {
                        retVal = _afterReadFromFile.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookWriteToFile()
        {
            if (!HookedList.Contains("WriteToFile"))
            {
                HookedList.Add("WriteToFile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "WriteToFile", false), WriteToFile);
            }
        }

        internal static event Delegates.WriteToFile_BeforeArgs _beforeWriteToFile;
        internal static event Delegates.WriteToFile_AfterArgs _afterWriteToFile;

        private static void WriteToFile(Action<string, string> orig, string path, string data)
        {
            Delegates.Params_WriteToFile @params = new()
            {
                path = path, data = data
            };
            if (_beforeWriteToFile != null)
                foreach (Delegates.WriteToFile_BeforeArgs toInvoke in _beforeWriteToFile.GetInvocationList())
                    try
                    {
                        _beforeWriteToFile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            path = @params.path;
            data = @params.data;
            orig(path, data);
            if (_afterWriteToFile != null)
                foreach (Delegates.WriteToFile_AfterArgs toInvoke in _afterWriteToFile.GetInvocationList())
                    try
                    {
                        _afterWriteToFile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAbs()
        {
            if (!HookedList.Contains("Abs"))
            {
                HookedList.Add("Abs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Abs", false), Abs);
            }
        }

        internal static event Delegates.Abs_BeforeArgs _beforeAbs;
        internal static event Delegates.Abs_AfterArgs _afterAbs;

        private static float Abs(Func<float, float> orig, float value)
        {
            Delegates.Params_Abs @params = new()
            {
                value = value
            };
            if (_beforeAbs != null)
                foreach (Delegates.Abs_BeforeArgs toInvoke in _beforeAbs.GetInvocationList())
                    try
                    {
                        _beforeAbs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            var retVal = orig(value);
            if (_afterAbs != null)
                foreach (Delegates.Abs_AfterArgs toInvoke in _afterAbs.GetInvocationList())
                    try
                    {
                        retVal = _afterAbs.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApproximately_float_float()
        {
            if (!HookedList.Contains("Approximately_float_float"))
            {
                HookedList.Add("Approximately_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Approximately_float_float", false),
                    Approximately_float_float);
            }
        }

        internal static event Delegates.Approximately_float_float_BeforeArgs _beforeApproximately_float_float;
        internal static event Delegates.Approximately_float_float_AfterArgs _afterApproximately_float_float;

        private static bool Approximately_float_float(Func<float, float, bool> orig, float v1, float v2)
        {
            Delegates.Params_Approximately_float_float @params = new()
            {
                v1 = v1, v2 = v2
            };
            if (_beforeApproximately_float_float != null)
                foreach (Delegates.Approximately_float_float_BeforeArgs toInvoke in _beforeApproximately_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeApproximately_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            v1 = @params.v1;
            v2 = @params.v2;
            var retVal = orig(v1, v2);
            if (_afterApproximately_float_float != null)
                foreach (Delegates.Approximately_float_float_AfterArgs toInvoke in _afterApproximately_float_float
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterApproximately_float_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookApproximately_Vector2_Vector2()
        {
            if (!HookedList.Contains("Approximately_Vector2_Vector2"))
            {
                HookedList.Add("Approximately_Vector2_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Approximately_Vector2_Vector2", false),
                    Approximately_Vector2_Vector2);
            }
        }

        internal static event Delegates.Approximately_Vector2_Vector2_BeforeArgs _beforeApproximately_Vector2_Vector2;
        internal static event Delegates.Approximately_Vector2_Vector2_AfterArgs _afterApproximately_Vector2_Vector2;

        private static bool Approximately_Vector2_Vector2(Func<Vector2, Vector2, bool> orig, Vector2 v1, Vector2 v2)
        {
            Delegates.Params_Approximately_Vector2_Vector2 @params = new()
            {
                v1 = v1, v2 = v2
            };
            if (_beforeApproximately_Vector2_Vector2 != null)
                foreach (Delegates.Approximately_Vector2_Vector2_BeforeArgs toInvoke in
                         _beforeApproximately_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        _beforeApproximately_Vector2_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            v1 = @params.v1;
            v2 = @params.v2;
            var retVal = orig(v1, v2);
            if (_afterApproximately_Vector2_Vector2 != null)
                foreach (Delegates.Approximately_Vector2_Vector2_AfterArgs toInvoke in
                         _afterApproximately_Vector2_Vector2.GetInvocationList())
                    try
                    {
                        retVal = _afterApproximately_Vector2_Vector2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsNotZero()
        {
            if (!HookedList.Contains("IsNotZero"))
            {
                HookedList.Add("IsNotZero");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "IsNotZero", false), IsNotZero);
            }
        }

        internal static event Delegates.IsNotZero_BeforeArgs _beforeIsNotZero;
        internal static event Delegates.IsNotZero_AfterArgs _afterIsNotZero;

        private static bool IsNotZero(Func<float, bool> orig, float value)
        {
            Delegates.Params_IsNotZero @params = new()
            {
                value = value
            };
            if (_beforeIsNotZero != null)
                foreach (Delegates.IsNotZero_BeforeArgs toInvoke in _beforeIsNotZero.GetInvocationList())
                    try
                    {
                        _beforeIsNotZero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            var retVal = orig(value);
            if (_afterIsNotZero != null)
                foreach (Delegates.IsNotZero_AfterArgs toInvoke in _afterIsNotZero.GetInvocationList())
                    try
                    {
                        retVal = _afterIsNotZero.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookIsZero()
        {
            if (!HookedList.Contains("IsZero"))
            {
                HookedList.Add("IsZero");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "IsZero", false), IsZero);
            }
        }

        internal static event Delegates.IsZero_BeforeArgs _beforeIsZero;
        internal static event Delegates.IsZero_AfterArgs _afterIsZero;

        private static bool IsZero(Func<float, bool> orig, float value)
        {
            Delegates.Params_IsZero @params = new()
            {
                value = value
            };
            if (_beforeIsZero != null)
                foreach (Delegates.IsZero_BeforeArgs toInvoke in _beforeIsZero.GetInvocationList())
                    try
                    {
                        _beforeIsZero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            var retVal = orig(value);
            if (_afterIsZero != null)
                foreach (Delegates.IsZero_AfterArgs toInvoke in _afterIsZero.GetInvocationList())
                    try
                    {
                        retVal = _afterIsZero.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSign()
        {
            if (!HookedList.Contains("Sign"))
            {
                HookedList.Add("Sign");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Sign", false), Sign);
            }
        }

        internal static event Delegates.Sign_BeforeArgs _beforeSign;
        internal static event Delegates.Sign_AfterArgs _afterSign;

        private static int Sign(Func<float, int> orig, float f)
        {
            Delegates.Params_Sign @params = new()
            {
                f = f
            };
            if (_beforeSign != null)
                foreach (Delegates.Sign_BeforeArgs toInvoke in _beforeSign.GetInvocationList())
                    try
                    {
                        _beforeSign?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            f = @params.f;
            var retVal = orig(f);
            if (_afterSign != null)
                foreach (Delegates.Sign_AfterArgs toInvoke in _afterSign.GetInvocationList())
                    try
                    {
                        retVal = _afterSign.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAbsoluteIsOverThreshold()
        {
            if (!HookedList.Contains("AbsoluteIsOverThreshold"))
            {
                HookedList.Add("AbsoluteIsOverThreshold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "AbsoluteIsOverThreshold", false),
                    AbsoluteIsOverThreshold);
            }
        }

        internal static event Delegates.AbsoluteIsOverThreshold_BeforeArgs _beforeAbsoluteIsOverThreshold;
        internal static event Delegates.AbsoluteIsOverThreshold_AfterArgs _afterAbsoluteIsOverThreshold;

        private static bool AbsoluteIsOverThreshold(Func<float, float, bool> orig, float value, float threshold)
        {
            Delegates.Params_AbsoluteIsOverThreshold @params = new()
            {
                value = value, threshold = threshold
            };
            if (_beforeAbsoluteIsOverThreshold != null)
                foreach (Delegates.AbsoluteIsOverThreshold_BeforeArgs toInvoke in _beforeAbsoluteIsOverThreshold
                             .GetInvocationList())
                    try
                    {
                        _beforeAbsoluteIsOverThreshold?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            threshold = @params.threshold;
            var retVal = orig(value, threshold);
            if (_afterAbsoluteIsOverThreshold != null)
                foreach (Delegates.AbsoluteIsOverThreshold_AfterArgs toInvoke in _afterAbsoluteIsOverThreshold
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterAbsoluteIsOverThreshold.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookNormalizeAngle()
        {
            if (!HookedList.Contains("NormalizeAngle"))
            {
                HookedList.Add("NormalizeAngle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "NormalizeAngle", false), NormalizeAngle);
            }
        }

        internal static event Delegates.NormalizeAngle_BeforeArgs _beforeNormalizeAngle;
        internal static event Delegates.NormalizeAngle_AfterArgs _afterNormalizeAngle;

        private static float NormalizeAngle(Func<float, float> orig, float angle)
        {
            Delegates.Params_NormalizeAngle @params = new()
            {
                angle = angle
            };
            if (_beforeNormalizeAngle != null)
                foreach (Delegates.NormalizeAngle_BeforeArgs toInvoke in _beforeNormalizeAngle.GetInvocationList())
                    try
                    {
                        _beforeNormalizeAngle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            angle = @params.angle;
            var retVal = orig(angle);
            if (_afterNormalizeAngle != null)
                foreach (Delegates.NormalizeAngle_AfterArgs toInvoke in _afterNormalizeAngle.GetInvocationList())
                    try
                    {
                        retVal = _afterNormalizeAngle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookVectorToAngle()
        {
            if (!HookedList.Contains("VectorToAngle"))
            {
                HookedList.Add("VectorToAngle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "VectorToAngle", false), VectorToAngle);
            }
        }

        internal static event Delegates.VectorToAngle_BeforeArgs _beforeVectorToAngle;
        internal static event Delegates.VectorToAngle_AfterArgs _afterVectorToAngle;

        private static float VectorToAngle(Func<Vector2, float> orig, Vector2 vector)
        {
            Delegates.Params_VectorToAngle @params = new()
            {
                vector = vector
            };
            if (_beforeVectorToAngle != null)
                foreach (Delegates.VectorToAngle_BeforeArgs toInvoke in _beforeVectorToAngle.GetInvocationList())
                    try
                    {
                        _beforeVectorToAngle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            vector = @params.vector;
            var retVal = orig(vector);
            if (_afterVectorToAngle != null)
                foreach (Delegates.VectorToAngle_AfterArgs toInvoke in _afterVectorToAngle.GetInvocationList())
                    try
                    {
                        retVal = _afterVectorToAngle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMin_float_float()
        {
            if (!HookedList.Contains("Min_float_float"))
            {
                HookedList.Add("Min_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Min_float_float", false), Min_float_float);
            }
        }

        internal static event Delegates.Min_float_float_BeforeArgs _beforeMin_float_float;
        internal static event Delegates.Min_float_float_AfterArgs _afterMin_float_float;

        private static float Min_float_float(Func<float, float, float> orig, float v0, float v1)
        {
            Delegates.Params_Min_float_float @params = new()
            {
                v0 = v0, v1 = v1
            };
            if (_beforeMin_float_float != null)
                foreach (Delegates.Min_float_float_BeforeArgs toInvoke in _beforeMin_float_float.GetInvocationList())
                    try
                    {
                        _beforeMin_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            v0 = @params.v0;
            v1 = @params.v1;
            var retVal = orig(v0, v1);
            if (_afterMin_float_float != null)
                foreach (Delegates.Min_float_float_AfterArgs toInvoke in _afterMin_float_float.GetInvocationList())
                    try
                    {
                        retVal = _afterMin_float_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMax_float_float()
        {
            if (!HookedList.Contains("Max_float_float"))
            {
                HookedList.Add("Max_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Max_float_float", false), Max_float_float);
            }
        }

        internal static event Delegates.Max_float_float_BeforeArgs _beforeMax_float_float;
        internal static event Delegates.Max_float_float_AfterArgs _afterMax_float_float;

        private static float Max_float_float(Func<float, float, float> orig, float v0, float v1)
        {
            Delegates.Params_Max_float_float @params = new()
            {
                v0 = v0, v1 = v1
            };
            if (_beforeMax_float_float != null)
                foreach (Delegates.Max_float_float_BeforeArgs toInvoke in _beforeMax_float_float.GetInvocationList())
                    try
                    {
                        _beforeMax_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            v0 = @params.v0;
            v1 = @params.v1;
            var retVal = orig(v0, v1);
            if (_afterMax_float_float != null)
                foreach (Delegates.Max_float_float_AfterArgs toInvoke in _afterMax_float_float.GetInvocationList())
                    try
                    {
                        retVal = _afterMax_float_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMin_float_float_float_float()
        {
            if (!HookedList.Contains("Min_float_float_float_float"))
            {
                HookedList.Add("Min_float_float_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Min_float_float_float_float", false),
                    Min_float_float_float_float);
            }
        }

        internal static event Delegates.Min_float_float_float_float_BeforeArgs _beforeMin_float_float_float_float;
        internal static event Delegates.Min_float_float_float_float_AfterArgs _afterMin_float_float_float_float;

        private static float Min_float_float_float_float(Func<float, float, float, float, float> orig, float v0,
            float v1, float v2, float v3)
        {
            Delegates.Params_Min_float_float_float_float @params = new()
            {
                v0 = v0, v1 = v1, v2 = v2, v3 = v3
            };
            if (_beforeMin_float_float_float_float != null)
                foreach (Delegates.Min_float_float_float_float_BeforeArgs toInvoke in _beforeMin_float_float_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeMin_float_float_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            v0 = @params.v0;
            v1 = @params.v1;
            v2 = @params.v2;
            v3 = @params.v3;
            var retVal = orig(v0, v1, v2, v3);
            if (_afterMin_float_float_float_float != null)
                foreach (Delegates.Min_float_float_float_float_AfterArgs toInvoke in _afterMin_float_float_float_float
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterMin_float_float_float_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookMax_float_float_float_float()
        {
            if (!HookedList.Contains("Max_float_float_float_float"))
            {
                HookedList.Add("Max_float_float_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "Max_float_float_float_float", false),
                    Max_float_float_float_float);
            }
        }

        internal static event Delegates.Max_float_float_float_float_BeforeArgs _beforeMax_float_float_float_float;
        internal static event Delegates.Max_float_float_float_float_AfterArgs _afterMax_float_float_float_float;

        private static float Max_float_float_float_float(Func<float, float, float, float, float> orig, float v0,
            float v1, float v2, float v3)
        {
            Delegates.Params_Max_float_float_float_float @params = new()
            {
                v0 = v0, v1 = v1, v2 = v2, v3 = v3
            };
            if (_beforeMax_float_float_float_float != null)
                foreach (Delegates.Max_float_float_float_float_BeforeArgs toInvoke in _beforeMax_float_float_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeMax_float_float_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            v0 = @params.v0;
            v1 = @params.v1;
            v2 = @params.v2;
            v3 = @params.v3;
            var retVal = orig(v0, v1, v2, v3);
            if (_afterMax_float_float_float_float != null)
                foreach (Delegates.Max_float_float_float_float_AfterArgs toInvoke in _afterMax_float_float_float_float
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterMax_float_float_float_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookValueFromSides_float_float()
        {
            if (!HookedList.Contains("ValueFromSides_float_float"))
            {
                HookedList.Add("ValueFromSides_float_float");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "ValueFromSides_float_float", false),
                    ValueFromSides_float_float);
            }
        }

        internal static event Delegates.ValueFromSides_float_float_BeforeArgs _beforeValueFromSides_float_float;
        internal static event Delegates.ValueFromSides_float_float_AfterArgs _afterValueFromSides_float_float;

        private static float ValueFromSides_float_float(Func<float, float, float> orig, float negativeSide,
            float positiveSide)
        {
            Delegates.Params_ValueFromSides_float_float @params = new()
            {
                negativeSide = negativeSide, positiveSide = positiveSide
            };
            if (_beforeValueFromSides_float_float != null)
                foreach (Delegates.ValueFromSides_float_float_BeforeArgs toInvoke in _beforeValueFromSides_float_float
                             .GetInvocationList())
                    try
                    {
                        _beforeValueFromSides_float_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            negativeSide = @params.negativeSide;
            positiveSide = @params.positiveSide;
            var retVal = orig(negativeSide, positiveSide);
            if (_afterValueFromSides_float_float != null)
                foreach (Delegates.ValueFromSides_float_float_AfterArgs toInvoke in _afterValueFromSides_float_float
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterValueFromSides_float_float.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookValueFromSides_float_float_bool()
        {
            if (!HookedList.Contains("ValueFromSides_float_float_bool"))
            {
                HookedList.Add("ValueFromSides_float_float_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "ValueFromSides_float_float_bool", false),
                    ValueFromSides_float_float_bool);
            }
        }

        internal static event Delegates.ValueFromSides_float_float_bool_BeforeArgs
            _beforeValueFromSides_float_float_bool;

        internal static event Delegates.ValueFromSides_float_float_bool_AfterArgs _afterValueFromSides_float_float_bool;

        private static float ValueFromSides_float_float_bool(Func<float, float, bool, float> orig, float negativeSide,
            float positiveSide, bool invertSides)
        {
            Delegates.Params_ValueFromSides_float_float_bool @params = new()
            {
                negativeSide = negativeSide, positiveSide = positiveSide, invertSides = invertSides
            };
            if (_beforeValueFromSides_float_float_bool != null)
                foreach (Delegates.ValueFromSides_float_float_bool_BeforeArgs toInvoke in
                         _beforeValueFromSides_float_float_bool.GetInvocationList())
                    try
                    {
                        _beforeValueFromSides_float_float_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            negativeSide = @params.negativeSide;
            positiveSide = @params.positiveSide;
            invertSides = @params.invertSides;
            var retVal = orig(negativeSide, positiveSide, invertSides);
            if (_afterValueFromSides_float_float_bool != null)
                foreach (Delegates.ValueFromSides_float_float_bool_AfterArgs toInvoke in
                         _afterValueFromSides_float_float_bool.GetInvocationList())
                    try
                    {
                        retVal = _afterValueFromSides_float_float_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookNextPowerOfTwo()
        {
            if (!HookedList.Contains("NextPowerOfTwo"))
            {
                HookedList.Add("NextPowerOfTwo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "NextPowerOfTwo", false), NextPowerOfTwo);
            }
        }

        internal static event Delegates.NextPowerOfTwo_BeforeArgs _beforeNextPowerOfTwo;
        internal static event Delegates.NextPowerOfTwo_AfterArgs _afterNextPowerOfTwo;

        private static int NextPowerOfTwo(Func<int, int> orig, int value)
        {
            Delegates.Params_NextPowerOfTwo @params = new()
            {
                value = value
            };
            if (_beforeNextPowerOfTwo != null)
                foreach (Delegates.NextPowerOfTwo_BeforeArgs toInvoke in _beforeNextPowerOfTwo.GetInvocationList())
                    try
                    {
                        _beforeNextPowerOfTwo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            var retVal = orig(value);
            if (_afterNextPowerOfTwo != null)
                foreach (Delegates.NextPowerOfTwo_AfterArgs toInvoke in _afterNextPowerOfTwo.GetInvocationList())
                    try
                    {
                        retVal = _afterNextPowerOfTwo.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Is32Bit()
        {
            if (!HookedList.Contains("get_Is32Bit"))
            {
                HookedList.Add("get_Is32Bit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "get_Is32Bit", false), get_Is32Bit);
            }
        }

        internal static event Delegates.get_Is32Bit_BeforeArgs _beforeget_Is32Bit;
        internal static event Delegates.get_Is32Bit_AfterArgs _afterget_Is32Bit;

        private static bool get_Is32Bit(Func<bool> orig)
        {
            if (_beforeget_Is32Bit != null)
                foreach (Delegates.get_Is32Bit_BeforeArgs toInvoke in _beforeget_Is32Bit.GetInvocationList())
                    try
                    {
                        _beforeget_Is32Bit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_Is32Bit != null)
                foreach (Delegates.get_Is32Bit_AfterArgs toInvoke in _afterget_Is32Bit.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Is32Bit.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Is64Bit()
        {
            if (!HookedList.Contains("get_Is64Bit"))
            {
                HookedList.Add("get_Is64Bit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "get_Is64Bit", false), get_Is64Bit);
            }
        }

        internal static event Delegates.get_Is64Bit_BeforeArgs _beforeget_Is64Bit;
        internal static event Delegates.get_Is64Bit_AfterArgs _afterget_Is64Bit;

        private static bool get_Is64Bit(Func<bool> orig)
        {
            if (_beforeget_Is64Bit != null)
                foreach (Delegates.get_Is64Bit_BeforeArgs toInvoke in _beforeget_Is64Bit.GetInvocationList())
                    try
                    {
                        _beforeget_Is64Bit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_Is64Bit != null)
                foreach (Delegates.get_Is64Bit_AfterArgs toInvoke in _afterget_Is64Bit.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Is64Bit.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetPlatformName()
        {
            if (!HookedList.Contains("GetPlatformName"))
            {
                HookedList.Add("GetPlatformName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "GetPlatformName", false), GetPlatformName);
            }
        }

        internal static event Delegates.GetPlatformName_BeforeArgs _beforeGetPlatformName;
        internal static event Delegates.GetPlatformName_AfterArgs _afterGetPlatformName;

        private static string GetPlatformName(Func<bool, string> orig, bool uppercase)
        {
            Delegates.Params_GetPlatformName @params = new()
            {
                uppercase = uppercase
            };
            if (_beforeGetPlatformName != null)
                foreach (Delegates.GetPlatformName_BeforeArgs toInvoke in _beforeGetPlatformName.GetInvocationList())
                    try
                    {
                        _beforeGetPlatformName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            uppercase = @params.uppercase;
            var retVal = orig(uppercase);
            if (_afterGetPlatformName != null)
                foreach (Delegates.GetPlatformName_AfterArgs toInvoke in _afterGetPlatformName.GetInvocationList())
                    try
                    {
                        retVal = _afterGetPlatformName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetHumanUnderstandableWindowsVersion()
        {
            if (!HookedList.Contains("GetHumanUnderstandableWindowsVersion"))
            {
                HookedList.Add("GetHumanUnderstandableWindowsVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "GetHumanUnderstandableWindowsVersion", false),
                    GetHumanUnderstandableWindowsVersion);
            }
        }

        internal static event Delegates.GetHumanUnderstandableWindowsVersion_BeforeArgs
            _beforeGetHumanUnderstandableWindowsVersion;

        internal static event Delegates.GetHumanUnderstandableWindowsVersion_AfterArgs
            _afterGetHumanUnderstandableWindowsVersion;

        private static string GetHumanUnderstandableWindowsVersion(Func<string> orig)
        {
            if (_beforeGetHumanUnderstandableWindowsVersion != null)
                foreach (Delegates.GetHumanUnderstandableWindowsVersion_BeforeArgs toInvoke in
                         _beforeGetHumanUnderstandableWindowsVersion.GetInvocationList())
                    try
                    {
                        _beforeGetHumanUnderstandableWindowsVersion?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetHumanUnderstandableWindowsVersion != null)
                foreach (Delegates.GetHumanUnderstandableWindowsVersion_AfterArgs toInvoke in
                         _afterGetHumanUnderstandableWindowsVersion.GetInvocationList())
                    try
                    {
                        retVal = _afterGetHumanUnderstandableWindowsVersion.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetWindowsVersion()
        {
            if (!HookedList.Contains("GetWindowsVersion"))
            {
                HookedList.Add("GetWindowsVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "GetWindowsVersion", false),
                    GetWindowsVersion);
            }
        }

        internal static event Delegates.GetWindowsVersion_BeforeArgs _beforeGetWindowsVersion;
        internal static event Delegates.GetWindowsVersion_AfterArgs _afterGetWindowsVersion;

        private static string GetWindowsVersion(Func<string> orig)
        {
            if (_beforeGetWindowsVersion != null)
                foreach (Delegates.GetWindowsVersion_BeforeArgs toInvoke in
                         _beforeGetWindowsVersion.GetInvocationList())
                    try
                    {
                        _beforeGetWindowsVersion?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetWindowsVersion != null)
                foreach (Delegates.GetWindowsVersion_AfterArgs toInvoke in _afterGetWindowsVersion.GetInvocationList())
                    try
                    {
                        retVal = _afterGetWindowsVersion.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetSystemBuildNumber()
        {
            if (!HookedList.Contains("GetSystemBuildNumber"))
            {
                HookedList.Add("GetSystemBuildNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "GetSystemBuildNumber", false),
                    GetSystemBuildNumber);
            }
        }

        internal static event Delegates.GetSystemBuildNumber_BeforeArgs _beforeGetSystemBuildNumber;
        internal static event Delegates.GetSystemBuildNumber_AfterArgs _afterGetSystemBuildNumber;

        private static int GetSystemBuildNumber(Func<int> orig)
        {
            if (_beforeGetSystemBuildNumber != null)
                foreach (Delegates.GetSystemBuildNumber_BeforeArgs toInvoke in _beforeGetSystemBuildNumber
                             .GetInvocationList())
                    try
                    {
                        _beforeGetSystemBuildNumber?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterGetSystemBuildNumber != null)
                foreach (Delegates.GetSystemBuildNumber_AfterArgs toInvoke in _afterGetSystemBuildNumber
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterGetSystemBuildNumber.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadScene()
        {
            if (!HookedList.Contains("LoadScene"))
            {
                HookedList.Add("LoadScene");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "LoadScene", false), LoadScene);
            }
        }

        internal static event Delegates.LoadScene_BeforeArgs _beforeLoadScene;
        internal static event Delegates.LoadScene_AfterArgs _afterLoadScene;

        private static void LoadScene(Action<string> orig, string sceneName)
        {
            Delegates.Params_LoadScene @params = new()
            {
                sceneName = sceneName
            };
            if (_beforeLoadScene != null)
                foreach (Delegates.LoadScene_BeforeArgs toInvoke in _beforeLoadScene.GetInvocationList())
                    try
                    {
                        _beforeLoadScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            sceneName = @params.sceneName;
            orig(sceneName);
            if (_afterLoadScene != null)
                foreach (Delegates.LoadScene_AfterArgs toInvoke in _afterLoadScene.GetInvocationList())
                    try
                    {
                        _afterLoadScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPluginFileExtension()
        {
            if (!HookedList.Contains("PluginFileExtension"))
            {
                HookedList.Add("PluginFileExtension");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Utility), "PluginFileExtension", false),
                    PluginFileExtension);
            }
        }

        internal static event Delegates.PluginFileExtension_BeforeArgs _beforePluginFileExtension;
        internal static event Delegates.PluginFileExtension_AfterArgs _afterPluginFileExtension;

        private static string PluginFileExtension(Func<string> orig)
        {
            if (_beforePluginFileExtension != null)
                foreach (Delegates.PluginFileExtension_BeforeArgs toInvoke in _beforePluginFileExtension
                             .GetInvocationList())
                    try
                    {
                        _beforePluginFileExtension?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterPluginFileExtension != null)
                foreach (Delegates.PluginFileExtension_AfterArgs toInvoke in
                         _afterPluginFileExtension.GetInvocationList())
                    try
                    {
                        retVal = _afterPluginFileExtension.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate float Abs_AfterArgs(Params_Abs args, float ret);

        public delegate void Abs_BeforeArgs(Params_Abs args);

        public delegate float Abs_WithArgs(Func<float, float> orig, float value);

        public delegate bool AbsoluteIsOverThreshold_AfterArgs(Params_AbsoluteIsOverThreshold args, bool ret);

        public delegate void AbsoluteIsOverThreshold_BeforeArgs(Params_AbsoluteIsOverThreshold args);

        public delegate bool AbsoluteIsOverThreshold_WithArgs(Func<float, float, bool> orig, float value,
            float threshold);

        public delegate float ApplyDeadZone_AfterArgs(Params_ApplyDeadZone args, float ret);

        public delegate void ApplyDeadZone_BeforeArgs(Params_ApplyDeadZone args);

        public delegate float ApplyDeadZone_WithArgs(Func<float, float, float, float> orig, float value,
            float lowerDeadZone, float upperDeadZone);

        public delegate float ApplySmoothing_AfterArgs(Params_ApplySmoothing args, float ret);

        public delegate void ApplySmoothing_BeforeArgs(Params_ApplySmoothing args);

        public delegate float ApplySmoothing_WithArgs(Func<float, float, float, float, float> orig, float thisValue,
            float lastValue, float deltaTime, float sensitivity);

        public delegate float ApplySnapping_AfterArgs(Params_ApplySnapping args, float ret);

        public delegate void ApplySnapping_BeforeArgs(Params_ApplySnapping args);

        public delegate float ApplySnapping_WithArgs(Func<float, float, float> orig, float value, float threshold);

        public delegate bool Approximately_float_float_AfterArgs(Params_Approximately_float_float args, bool ret);

        public delegate void Approximately_float_float_BeforeArgs(Params_Approximately_float_float args);

        public delegate bool Approximately_float_float_WithArgs(Func<float, float, bool> orig, float v1, float v2);

        public delegate bool Approximately_Vector2_Vector2_AfterArgs(Params_Approximately_Vector2_Vector2 args,
            bool ret);

        public delegate void Approximately_Vector2_Vector2_BeforeArgs(Params_Approximately_Vector2_Vector2 args);

        public delegate bool Approximately_Vector2_Vector2_WithArgs(Func<Vector2, Vector2, bool> orig, Vector2 v1,
            Vector2 v2);

        public delegate void DrawCircleGizmo_Vector2_float_AfterArgs(Params_DrawCircleGizmo_Vector2_float args);

        public delegate void DrawCircleGizmo_Vector2_float_BeforeArgs(Params_DrawCircleGizmo_Vector2_float args);

        public delegate void DrawCircleGizmo_Vector2_float_Color_AfterArgs(
            Params_DrawCircleGizmo_Vector2_float_Color args);

        public delegate void DrawCircleGizmo_Vector2_float_Color_BeforeArgs(
            Params_DrawCircleGizmo_Vector2_float_Color args);

        public delegate void DrawCircleGizmo_Vector2_float_Color_WithArgs(Action<Vector2, float, Color> orig,
            Vector2 center, float radius, Color color);

        public delegate void DrawCircleGizmo_Vector2_float_WithArgs(Action<Vector2, float> orig, Vector2 center,
            float radius);

        public delegate void DrawOvalGizmo_Vector2_Vector2_AfterArgs(Params_DrawOvalGizmo_Vector2_Vector2 args);

        public delegate void DrawOvalGizmo_Vector2_Vector2_BeforeArgs(Params_DrawOvalGizmo_Vector2_Vector2 args);

        public delegate void DrawOvalGizmo_Vector2_Vector2_Color_AfterArgs(
            Params_DrawOvalGizmo_Vector2_Vector2_Color args);

        public delegate void DrawOvalGizmo_Vector2_Vector2_Color_BeforeArgs(
            Params_DrawOvalGizmo_Vector2_Vector2_Color args);

        public delegate void DrawOvalGizmo_Vector2_Vector2_Color_WithArgs(Action<Vector2, Vector2, Color> orig,
            Vector2 center, Vector2 size, Color color);

        public delegate void DrawOvalGizmo_Vector2_Vector2_WithArgs(Action<Vector2, Vector2> orig, Vector2 center,
            Vector2 size);

        public delegate void DrawRectGizmo_Rect_AfterArgs(Params_DrawRectGizmo_Rect args);

        public delegate void DrawRectGizmo_Rect_BeforeArgs(Params_DrawRectGizmo_Rect args);

        public delegate void DrawRectGizmo_Rect_Color_AfterArgs(Params_DrawRectGizmo_Rect_Color args);

        public delegate void DrawRectGizmo_Rect_Color_BeforeArgs(Params_DrawRectGizmo_Rect_Color args);

        public delegate void DrawRectGizmo_Rect_Color_WithArgs(Action<Rect, Color> orig, Rect rect, Color color);

        public delegate void DrawRectGizmo_Rect_WithArgs(Action<Rect> orig, Rect rect);

        public delegate void DrawRectGizmo_Vector2_Vector2_AfterArgs(Params_DrawRectGizmo_Vector2_Vector2 args);

        public delegate void DrawRectGizmo_Vector2_Vector2_BeforeArgs(Params_DrawRectGizmo_Vector2_Vector2 args);

        public delegate void DrawRectGizmo_Vector2_Vector2_Color_AfterArgs(
            Params_DrawRectGizmo_Vector2_Vector2_Color args);

        public delegate void DrawRectGizmo_Vector2_Vector2_Color_BeforeArgs(
            Params_DrawRectGizmo_Vector2_Vector2_Color args);

        public delegate void DrawRectGizmo_Vector2_Vector2_Color_WithArgs(Action<Vector2, Vector2, Color> orig,
            Vector2 center, Vector2 size, Color color);

        public delegate void DrawRectGizmo_Vector2_Vector2_WithArgs(Action<Vector2, Vector2> orig, Vector2 center,
            Vector2 size);

        public delegate bool GameObjectIsCulledOnCurrentCamera_AfterArgs(Params_GameObjectIsCulledOnCurrentCamera args,
            bool ret);

        public delegate void
            GameObjectIsCulledOnCurrentCamera_BeforeArgs(Params_GameObjectIsCulledOnCurrentCamera args);

        public delegate bool GameObjectIsCulledOnCurrentCamera_WithArgs(Func<GameObject, bool> orig,
            GameObject gameObject);

        public delegate bool get_Is32Bit_AfterArgs(bool ret);

        public delegate void get_Is32Bit_BeforeArgs();

        public delegate bool get_Is32Bit_WithArgs(Func<bool> orig);

        public delegate bool get_Is64Bit_AfterArgs(bool ret);

        public delegate void get_Is64Bit_BeforeArgs();

        public delegate bool get_Is64Bit_WithArgs(Func<bool> orig);

        public delegate string GetHumanUnderstandableWindowsVersion_AfterArgs(string ret);

        public delegate void GetHumanUnderstandableWindowsVersion_BeforeArgs();

        public delegate string GetHumanUnderstandableWindowsVersion_WithArgs(Func<string> orig);

        public delegate string GetPlatformName_AfterArgs(Params_GetPlatformName args, string ret);

        public delegate void GetPlatformName_BeforeArgs(Params_GetPlatformName args);

        public delegate string GetPlatformName_WithArgs(Func<bool, string> orig, bool uppercase);

        public delegate int GetSystemBuildNumber_AfterArgs(int ret);

        public delegate void GetSystemBuildNumber_BeforeArgs();

        public delegate int GetSystemBuildNumber_WithArgs(Func<int> orig);

        public delegate string GetWindowsVersion_AfterArgs(string ret);

        public delegate void GetWindowsVersion_BeforeArgs();

        public delegate string GetWindowsVersion_WithArgs(Func<string> orig);

        public delegate bool IsNotZero_AfterArgs(Params_IsNotZero args, bool ret);

        public delegate void IsNotZero_BeforeArgs(Params_IsNotZero args);

        public delegate bool IsNotZero_WithArgs(Func<float, bool> orig, float value);

        public delegate bool IsZero_AfterArgs(Params_IsZero args, bool ret);

        public delegate void IsZero_BeforeArgs(Params_IsZero args);

        public delegate bool IsZero_WithArgs(Func<float, bool> orig, float value);

        public delegate void LoadScene_AfterArgs(Params_LoadScene args);

        public delegate void LoadScene_BeforeArgs(Params_LoadScene args);

        public delegate void LoadScene_WithArgs(Action<string> orig, string sceneName);

        public delegate float Max_float_float_AfterArgs(Params_Max_float_float args, float ret);

        public delegate void Max_float_float_BeforeArgs(Params_Max_float_float args);

        public delegate float Max_float_float_float_float_AfterArgs(Params_Max_float_float_float_float args, float ret);

        public delegate void Max_float_float_float_float_BeforeArgs(Params_Max_float_float_float_float args);

        public delegate float Max_float_float_float_float_WithArgs(Func<float, float, float, float, float> orig,
            float v0, float v1, float v2, float v3);

        public delegate float Max_float_float_WithArgs(Func<float, float, float> orig, float v0, float v1);

        public delegate float Min_float_float_AfterArgs(Params_Min_float_float args, float ret);

        public delegate void Min_float_float_BeforeArgs(Params_Min_float_float args);

        public delegate float Min_float_float_float_float_AfterArgs(Params_Min_float_float_float_float args, float ret);

        public delegate void Min_float_float_float_float_BeforeArgs(Params_Min_float_float_float_float args);

        public delegate float Min_float_float_float_float_WithArgs(Func<float, float, float, float, float> orig,
            float v0, float v1, float v2, float v3);

        public delegate float Min_float_float_WithArgs(Func<float, float, float> orig, float v0, float v1);

        public delegate Color MoveColorTowards_AfterArgs(Params_MoveColorTowards args, Color ret);

        public delegate void MoveColorTowards_BeforeArgs(Params_MoveColorTowards args);

        public delegate Color MoveColorTowards_WithArgs(Func<Color, Color, float, Color> orig, Color color0,
            Color color1, float maxDelta);

        public delegate int NextPowerOfTwo_AfterArgs(Params_NextPowerOfTwo args, int ret);

        public delegate void NextPowerOfTwo_BeforeArgs(Params_NextPowerOfTwo args);

        public delegate int NextPowerOfTwo_WithArgs(Func<int, int> orig, int value);

        public delegate float NormalizeAngle_AfterArgs(Params_NormalizeAngle args, float ret);

        public delegate void NormalizeAngle_BeforeArgs(Params_NormalizeAngle args);

        public delegate float NormalizeAngle_WithArgs(Func<float, float> orig, float angle);

        public delegate string PluginFileExtension_AfterArgs(string ret);

        public delegate void PluginFileExtension_BeforeArgs();

        public delegate string PluginFileExtension_WithArgs(Func<string> orig);

        public delegate string ReadFromFile_AfterArgs(Params_ReadFromFile args, string ret);

        public delegate void ReadFromFile_BeforeArgs(Params_ReadFromFile args);

        public delegate string ReadFromFile_WithArgs(Func<string, string> orig, string path);

        public delegate int Sign_AfterArgs(Params_Sign args, int ret);

        public delegate void Sign_BeforeArgs(Params_Sign args);

        public delegate int Sign_WithArgs(Func<float, int> orig, float f);

        public delegate bool TargetIsAlias_AfterArgs(Params_TargetIsAlias args, bool ret);

        public delegate void TargetIsAlias_BeforeArgs(Params_TargetIsAlias args);

        public delegate bool TargetIsAlias_WithArgs(Func<InputControlType, bool> orig, InputControlType target);

        public delegate bool TargetIsButton_AfterArgs(Params_TargetIsButton args, bool ret);

        public delegate void TargetIsButton_BeforeArgs(Params_TargetIsButton args);

        public delegate bool TargetIsButton_WithArgs(Func<InputControlType, bool> orig, InputControlType target);

        public delegate bool TargetIsStandard_AfterArgs(Params_TargetIsStandard args, bool ret);

        public delegate void TargetIsStandard_BeforeArgs(Params_TargetIsStandard args);

        public delegate bool TargetIsStandard_WithArgs(Func<InputControlType, bool> orig, InputControlType target);

        public delegate float ValueFromSides_float_float_AfterArgs(Params_ValueFromSides_float_float args, float ret);

        public delegate void ValueFromSides_float_float_BeforeArgs(Params_ValueFromSides_float_float args);

        public delegate float ValueFromSides_float_float_bool_AfterArgs(Params_ValueFromSides_float_float_bool args,
            float ret);

        public delegate void ValueFromSides_float_float_bool_BeforeArgs(Params_ValueFromSides_float_float_bool args);

        public delegate float ValueFromSides_float_float_bool_WithArgs(Func<float, float, bool, float> orig,
            float negativeSide, float positiveSide, bool invertSides);

        public delegate float ValueFromSides_float_float_WithArgs(Func<float, float, float> orig, float negativeSide,
            float positiveSide);

        public delegate float VectorToAngle_AfterArgs(Params_VectorToAngle args, float ret);

        public delegate void VectorToAngle_BeforeArgs(Params_VectorToAngle args);

        public delegate float VectorToAngle_WithArgs(Func<Vector2, float> orig, Vector2 vector);

        public delegate void WriteToFile_AfterArgs(Params_WriteToFile args);

        public delegate void WriteToFile_BeforeArgs(Params_WriteToFile args);

        public delegate void WriteToFile_WithArgs(Action<string, string> orig, string path, string data);

        public sealed class Params_DrawCircleGizmo_Vector2_float
        {
            public Vector2 center;
            public float radius;
        }

        public sealed class Params_DrawCircleGizmo_Vector2_float_Color
        {
            public Vector2 center;
            public Color color;
            public float radius;
        }

        public sealed class Params_DrawOvalGizmo_Vector2_Vector2
        {
            public Vector2 center;
            public Vector2 size;
        }

        public sealed class Params_DrawOvalGizmo_Vector2_Vector2_Color
        {
            public Vector2 center;
            public Color color;
            public Vector2 size;
        }

        public sealed class Params_DrawRectGizmo_Rect
        {
            public Rect rect;
        }

        public sealed class Params_DrawRectGizmo_Rect_Color
        {
            public Color color;
            public Rect rect;
        }

        public sealed class Params_DrawRectGizmo_Vector2_Vector2
        {
            public Vector2 center;
            public Vector2 size;
        }

        public sealed class Params_DrawRectGizmo_Vector2_Vector2_Color
        {
            public Vector2 center;
            public Color color;
            public Vector2 size;
        }

        public sealed class Params_GameObjectIsCulledOnCurrentCamera
        {
            public GameObject gameObject;
        }

        public sealed class Params_MoveColorTowards
        {
            public Color color0;
            public Color color1;
            public float maxDelta;
        }

        public sealed class Params_ApplyDeadZone
        {
            public float lowerDeadZone;
            public float upperDeadZone;
            public float value;
        }

        public sealed class Params_ApplySmoothing
        {
            public float deltaTime;
            public float lastValue;
            public float sensitivity;
            public float thisValue;
        }

        public sealed class Params_ApplySnapping
        {
            public float threshold;
            public float value;
        }

        public sealed class Params_TargetIsButton
        {
            public InputControlType target;
        }

        public sealed class Params_TargetIsStandard
        {
            public InputControlType target;
        }

        public sealed class Params_TargetIsAlias
        {
            public InputControlType target;
        }

        public sealed class Params_ReadFromFile
        {
            public string path;
        }

        public sealed class Params_WriteToFile
        {
            public string data;
            public string path;
        }

        public sealed class Params_Abs
        {
            public float value;
        }

        public sealed class Params_Approximately_float_float
        {
            public float v1;
            public float v2;
        }

        public sealed class Params_Approximately_Vector2_Vector2
        {
            public Vector2 v1;
            public Vector2 v2;
        }

        public sealed class Params_IsNotZero
        {
            public float value;
        }

        public sealed class Params_IsZero
        {
            public float value;
        }

        public sealed class Params_Sign
        {
            public float f;
        }

        public sealed class Params_AbsoluteIsOverThreshold
        {
            public float threshold;
            public float value;
        }

        public sealed class Params_NormalizeAngle
        {
            public float angle;
        }

        public sealed class Params_VectorToAngle
        {
            public Vector2 vector;
        }

        public sealed class Params_Min_float_float
        {
            public float v0;
            public float v1;
        }

        public sealed class Params_Max_float_float
        {
            public float v0;
            public float v1;
        }

        public sealed class Params_Min_float_float_float_float
        {
            public float v0;
            public float v1;
            public float v2;
            public float v3;
        }

        public sealed class Params_Max_float_float_float_float
        {
            public float v0;
            public float v1;
            public float v2;
            public float v3;
        }

        public sealed class Params_ValueFromSides_float_float
        {
            public float negativeSide;
            public float positiveSide;
        }

        public sealed class Params_ValueFromSides_float_float_bool
        {
            public bool invertSides;
            public float negativeSide;
            public float positiveSide;
        }

        public sealed class Params_NextPowerOfTwo
        {
            public int value;
        }

        public sealed class Params_GetPlatformName
        {
            public bool uppercase;
        }

        public sealed class Params_LoadScene
        {
            public string sceneName;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.DrawCircleGizmo_Vector2_float_BeforeArgs DrawCircleGizmo_Vector2_float
        {
            add
            {
                HookHandler._beforeDrawCircleGizmo_Vector2_float += value;
                HookHandler.HookDrawCircleGizmo_Vector2_float();
            }
            remove => HookHandler._beforeDrawCircleGizmo_Vector2_float -= value;
        }

        public static event Delegates.DrawCircleGizmo_Vector2_float_Color_BeforeArgs DrawCircleGizmo_Vector2_float_Color
        {
            add
            {
                HookHandler._beforeDrawCircleGizmo_Vector2_float_Color += value;
                HookHandler.HookDrawCircleGizmo_Vector2_float_Color();
            }
            remove => HookHandler._beforeDrawCircleGizmo_Vector2_float_Color -= value;
        }

        public static event Delegates.DrawOvalGizmo_Vector2_Vector2_BeforeArgs DrawOvalGizmo_Vector2_Vector2
        {
            add
            {
                HookHandler._beforeDrawOvalGizmo_Vector2_Vector2 += value;
                HookHandler.HookDrawOvalGizmo_Vector2_Vector2();
            }
            remove => HookHandler._beforeDrawOvalGizmo_Vector2_Vector2 -= value;
        }

        public static event Delegates.DrawOvalGizmo_Vector2_Vector2_Color_BeforeArgs DrawOvalGizmo_Vector2_Vector2_Color
        {
            add
            {
                HookHandler._beforeDrawOvalGizmo_Vector2_Vector2_Color += value;
                HookHandler.HookDrawOvalGizmo_Vector2_Vector2_Color();
            }
            remove => HookHandler._beforeDrawOvalGizmo_Vector2_Vector2_Color -= value;
        }

        public static event Delegates.DrawRectGizmo_Rect_BeforeArgs DrawRectGizmo_Rect
        {
            add
            {
                HookHandler._beforeDrawRectGizmo_Rect += value;
                HookHandler.HookDrawRectGizmo_Rect();
            }
            remove => HookHandler._beforeDrawRectGizmo_Rect -= value;
        }

        public static event Delegates.DrawRectGizmo_Rect_Color_BeforeArgs DrawRectGizmo_Rect_Color
        {
            add
            {
                HookHandler._beforeDrawRectGizmo_Rect_Color += value;
                HookHandler.HookDrawRectGizmo_Rect_Color();
            }
            remove => HookHandler._beforeDrawRectGizmo_Rect_Color -= value;
        }

        public static event Delegates.DrawRectGizmo_Vector2_Vector2_BeforeArgs DrawRectGizmo_Vector2_Vector2
        {
            add
            {
                HookHandler._beforeDrawRectGizmo_Vector2_Vector2 += value;
                HookHandler.HookDrawRectGizmo_Vector2_Vector2();
            }
            remove => HookHandler._beforeDrawRectGizmo_Vector2_Vector2 -= value;
        }

        public static event Delegates.DrawRectGizmo_Vector2_Vector2_Color_BeforeArgs DrawRectGizmo_Vector2_Vector2_Color
        {
            add
            {
                HookHandler._beforeDrawRectGizmo_Vector2_Vector2_Color += value;
                HookHandler.HookDrawRectGizmo_Vector2_Vector2_Color();
            }
            remove => HookHandler._beforeDrawRectGizmo_Vector2_Vector2_Color -= value;
        }

        public static event Delegates.GameObjectIsCulledOnCurrentCamera_BeforeArgs GameObjectIsCulledOnCurrentCamera
        {
            add
            {
                HookHandler._beforeGameObjectIsCulledOnCurrentCamera += value;
                HookHandler.HookGameObjectIsCulledOnCurrentCamera();
            }
            remove => HookHandler._beforeGameObjectIsCulledOnCurrentCamera -= value;
        }

        public static event Delegates.MoveColorTowards_BeforeArgs MoveColorTowards
        {
            add
            {
                HookHandler._beforeMoveColorTowards += value;
                HookHandler.HookMoveColorTowards();
            }
            remove => HookHandler._beforeMoveColorTowards -= value;
        }

        public static event Delegates.ApplyDeadZone_BeforeArgs ApplyDeadZone
        {
            add
            {
                HookHandler._beforeApplyDeadZone += value;
                HookHandler.HookApplyDeadZone();
            }
            remove => HookHandler._beforeApplyDeadZone -= value;
        }

        public static event Delegates.ApplySmoothing_BeforeArgs ApplySmoothing
        {
            add
            {
                HookHandler._beforeApplySmoothing += value;
                HookHandler.HookApplySmoothing();
            }
            remove => HookHandler._beforeApplySmoothing -= value;
        }

        public static event Delegates.ApplySnapping_BeforeArgs ApplySnapping
        {
            add
            {
                HookHandler._beforeApplySnapping += value;
                HookHandler.HookApplySnapping();
            }
            remove => HookHandler._beforeApplySnapping -= value;
        }

        public static event Delegates.TargetIsButton_BeforeArgs TargetIsButton
        {
            add
            {
                HookHandler._beforeTargetIsButton += value;
                HookHandler.HookTargetIsButton();
            }
            remove => HookHandler._beforeTargetIsButton -= value;
        }

        public static event Delegates.TargetIsStandard_BeforeArgs TargetIsStandard
        {
            add
            {
                HookHandler._beforeTargetIsStandard += value;
                HookHandler.HookTargetIsStandard();
            }
            remove => HookHandler._beforeTargetIsStandard -= value;
        }

        public static event Delegates.TargetIsAlias_BeforeArgs TargetIsAlias
        {
            add
            {
                HookHandler._beforeTargetIsAlias += value;
                HookHandler.HookTargetIsAlias();
            }
            remove => HookHandler._beforeTargetIsAlias -= value;
        }

        public static event Delegates.ReadFromFile_BeforeArgs ReadFromFile
        {
            add
            {
                HookHandler._beforeReadFromFile += value;
                HookHandler.HookReadFromFile();
            }
            remove => HookHandler._beforeReadFromFile -= value;
        }

        public static event Delegates.WriteToFile_BeforeArgs WriteToFile
        {
            add
            {
                HookHandler._beforeWriteToFile += value;
                HookHandler.HookWriteToFile();
            }
            remove => HookHandler._beforeWriteToFile -= value;
        }

        public static event Delegates.Abs_BeforeArgs Abs
        {
            add
            {
                HookHandler._beforeAbs += value;
                HookHandler.HookAbs();
            }
            remove => HookHandler._beforeAbs -= value;
        }

        public static event Delegates.Approximately_float_float_BeforeArgs Approximately_float_float
        {
            add
            {
                HookHandler._beforeApproximately_float_float += value;
                HookHandler.HookApproximately_float_float();
            }
            remove => HookHandler._beforeApproximately_float_float -= value;
        }

        public static event Delegates.Approximately_Vector2_Vector2_BeforeArgs Approximately_Vector2_Vector2
        {
            add
            {
                HookHandler._beforeApproximately_Vector2_Vector2 += value;
                HookHandler.HookApproximately_Vector2_Vector2();
            }
            remove => HookHandler._beforeApproximately_Vector2_Vector2 -= value;
        }

        public static event Delegates.IsNotZero_BeforeArgs IsNotZero
        {
            add
            {
                HookHandler._beforeIsNotZero += value;
                HookHandler.HookIsNotZero();
            }
            remove => HookHandler._beforeIsNotZero -= value;
        }

        public static event Delegates.IsZero_BeforeArgs IsZero
        {
            add
            {
                HookHandler._beforeIsZero += value;
                HookHandler.HookIsZero();
            }
            remove => HookHandler._beforeIsZero -= value;
        }

        public static event Delegates.Sign_BeforeArgs Sign
        {
            add
            {
                HookHandler._beforeSign += value;
                HookHandler.HookSign();
            }
            remove => HookHandler._beforeSign -= value;
        }

        public static event Delegates.AbsoluteIsOverThreshold_BeforeArgs AbsoluteIsOverThreshold
        {
            add
            {
                HookHandler._beforeAbsoluteIsOverThreshold += value;
                HookHandler.HookAbsoluteIsOverThreshold();
            }
            remove => HookHandler._beforeAbsoluteIsOverThreshold -= value;
        }

        public static event Delegates.NormalizeAngle_BeforeArgs NormalizeAngle
        {
            add
            {
                HookHandler._beforeNormalizeAngle += value;
                HookHandler.HookNormalizeAngle();
            }
            remove => HookHandler._beforeNormalizeAngle -= value;
        }

        public static event Delegates.VectorToAngle_BeforeArgs VectorToAngle
        {
            add
            {
                HookHandler._beforeVectorToAngle += value;
                HookHandler.HookVectorToAngle();
            }
            remove => HookHandler._beforeVectorToAngle -= value;
        }

        public static event Delegates.Min_float_float_BeforeArgs Min_float_float
        {
            add
            {
                HookHandler._beforeMin_float_float += value;
                HookHandler.HookMin_float_float();
            }
            remove => HookHandler._beforeMin_float_float -= value;
        }

        public static event Delegates.Max_float_float_BeforeArgs Max_float_float
        {
            add
            {
                HookHandler._beforeMax_float_float += value;
                HookHandler.HookMax_float_float();
            }
            remove => HookHandler._beforeMax_float_float -= value;
        }

        public static event Delegates.Min_float_float_float_float_BeforeArgs Min_float_float_float_float
        {
            add
            {
                HookHandler._beforeMin_float_float_float_float += value;
                HookHandler.HookMin_float_float_float_float();
            }
            remove => HookHandler._beforeMin_float_float_float_float -= value;
        }

        public static event Delegates.Max_float_float_float_float_BeforeArgs Max_float_float_float_float
        {
            add
            {
                HookHandler._beforeMax_float_float_float_float += value;
                HookHandler.HookMax_float_float_float_float();
            }
            remove => HookHandler._beforeMax_float_float_float_float -= value;
        }

        public static event Delegates.ValueFromSides_float_float_BeforeArgs ValueFromSides_float_float
        {
            add
            {
                HookHandler._beforeValueFromSides_float_float += value;
                HookHandler.HookValueFromSides_float_float();
            }
            remove => HookHandler._beforeValueFromSides_float_float -= value;
        }

        public static event Delegates.ValueFromSides_float_float_bool_BeforeArgs ValueFromSides_float_float_bool
        {
            add
            {
                HookHandler._beforeValueFromSides_float_float_bool += value;
                HookHandler.HookValueFromSides_float_float_bool();
            }
            remove => HookHandler._beforeValueFromSides_float_float_bool -= value;
        }

        public static event Delegates.NextPowerOfTwo_BeforeArgs NextPowerOfTwo
        {
            add
            {
                HookHandler._beforeNextPowerOfTwo += value;
                HookHandler.HookNextPowerOfTwo();
            }
            remove => HookHandler._beforeNextPowerOfTwo -= value;
        }

        public static event Delegates.get_Is32Bit_BeforeArgs get_Is32Bit
        {
            add
            {
                HookHandler._beforeget_Is32Bit += value;
                HookHandler.Hookget_Is32Bit();
            }
            remove => HookHandler._beforeget_Is32Bit -= value;
        }

        public static event Delegates.get_Is64Bit_BeforeArgs get_Is64Bit
        {
            add
            {
                HookHandler._beforeget_Is64Bit += value;
                HookHandler.Hookget_Is64Bit();
            }
            remove => HookHandler._beforeget_Is64Bit -= value;
        }

        public static event Delegates.GetPlatformName_BeforeArgs GetPlatformName
        {
            add
            {
                HookHandler._beforeGetPlatformName += value;
                HookHandler.HookGetPlatformName();
            }
            remove => HookHandler._beforeGetPlatformName -= value;
        }

        public static event Delegates.GetHumanUnderstandableWindowsVersion_BeforeArgs
            GetHumanUnderstandableWindowsVersion
            {
                add
                {
                    HookHandler._beforeGetHumanUnderstandableWindowsVersion += value;
                    HookHandler.HookGetHumanUnderstandableWindowsVersion();
                }
                remove => HookHandler._beforeGetHumanUnderstandableWindowsVersion -= value;
            }

        public static event Delegates.GetWindowsVersion_BeforeArgs GetWindowsVersion
        {
            add
            {
                HookHandler._beforeGetWindowsVersion += value;
                HookHandler.HookGetWindowsVersion();
            }
            remove => HookHandler._beforeGetWindowsVersion -= value;
        }

        public static event Delegates.GetSystemBuildNumber_BeforeArgs GetSystemBuildNumber
        {
            add
            {
                HookHandler._beforeGetSystemBuildNumber += value;
                HookHandler.HookGetSystemBuildNumber();
            }
            remove => HookHandler._beforeGetSystemBuildNumber -= value;
        }

        public static event Delegates.LoadScene_BeforeArgs LoadScene
        {
            add
            {
                HookHandler._beforeLoadScene += value;
                HookHandler.HookLoadScene();
            }
            remove => HookHandler._beforeLoadScene -= value;
        }

        public static event Delegates.PluginFileExtension_BeforeArgs PluginFileExtension
        {
            add
            {
                HookHandler._beforePluginFileExtension += value;
                HookHandler.HookPluginFileExtension();
            }
            remove => HookHandler._beforePluginFileExtension -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.DrawCircleGizmo_Vector2_float_AfterArgs DrawCircleGizmo_Vector2_float
        {
            add
            {
                HookHandler._afterDrawCircleGizmo_Vector2_float += value;
                HookHandler.HookDrawCircleGizmo_Vector2_float();
            }
            remove => HookHandler._afterDrawCircleGizmo_Vector2_float -= value;
        }

        public static event Delegates.DrawCircleGizmo_Vector2_float_Color_AfterArgs DrawCircleGizmo_Vector2_float_Color
        {
            add
            {
                HookHandler._afterDrawCircleGizmo_Vector2_float_Color += value;
                HookHandler.HookDrawCircleGizmo_Vector2_float_Color();
            }
            remove => HookHandler._afterDrawCircleGizmo_Vector2_float_Color -= value;
        }

        public static event Delegates.DrawOvalGizmo_Vector2_Vector2_AfterArgs DrawOvalGizmo_Vector2_Vector2
        {
            add
            {
                HookHandler._afterDrawOvalGizmo_Vector2_Vector2 += value;
                HookHandler.HookDrawOvalGizmo_Vector2_Vector2();
            }
            remove => HookHandler._afterDrawOvalGizmo_Vector2_Vector2 -= value;
        }

        public static event Delegates.DrawOvalGizmo_Vector2_Vector2_Color_AfterArgs DrawOvalGizmo_Vector2_Vector2_Color
        {
            add
            {
                HookHandler._afterDrawOvalGizmo_Vector2_Vector2_Color += value;
                HookHandler.HookDrawOvalGizmo_Vector2_Vector2_Color();
            }
            remove => HookHandler._afterDrawOvalGizmo_Vector2_Vector2_Color -= value;
        }

        public static event Delegates.DrawRectGizmo_Rect_AfterArgs DrawRectGizmo_Rect
        {
            add
            {
                HookHandler._afterDrawRectGizmo_Rect += value;
                HookHandler.HookDrawRectGizmo_Rect();
            }
            remove => HookHandler._afterDrawRectGizmo_Rect -= value;
        }

        public static event Delegates.DrawRectGizmo_Rect_Color_AfterArgs DrawRectGizmo_Rect_Color
        {
            add
            {
                HookHandler._afterDrawRectGizmo_Rect_Color += value;
                HookHandler.HookDrawRectGizmo_Rect_Color();
            }
            remove => HookHandler._afterDrawRectGizmo_Rect_Color -= value;
        }

        public static event Delegates.DrawRectGizmo_Vector2_Vector2_AfterArgs DrawRectGizmo_Vector2_Vector2
        {
            add
            {
                HookHandler._afterDrawRectGizmo_Vector2_Vector2 += value;
                HookHandler.HookDrawRectGizmo_Vector2_Vector2();
            }
            remove => HookHandler._afterDrawRectGizmo_Vector2_Vector2 -= value;
        }

        public static event Delegates.DrawRectGizmo_Vector2_Vector2_Color_AfterArgs DrawRectGizmo_Vector2_Vector2_Color
        {
            add
            {
                HookHandler._afterDrawRectGizmo_Vector2_Vector2_Color += value;
                HookHandler.HookDrawRectGizmo_Vector2_Vector2_Color();
            }
            remove => HookHandler._afterDrawRectGizmo_Vector2_Vector2_Color -= value;
        }

        public static event Delegates.GameObjectIsCulledOnCurrentCamera_AfterArgs GameObjectIsCulledOnCurrentCamera
        {
            add
            {
                HookHandler._afterGameObjectIsCulledOnCurrentCamera += value;
                HookHandler.HookGameObjectIsCulledOnCurrentCamera();
            }
            remove => HookHandler._afterGameObjectIsCulledOnCurrentCamera -= value;
        }

        public static event Delegates.MoveColorTowards_AfterArgs MoveColorTowards
        {
            add
            {
                HookHandler._afterMoveColorTowards += value;
                HookHandler.HookMoveColorTowards();
            }
            remove => HookHandler._afterMoveColorTowards -= value;
        }

        public static event Delegates.ApplyDeadZone_AfterArgs ApplyDeadZone
        {
            add
            {
                HookHandler._afterApplyDeadZone += value;
                HookHandler.HookApplyDeadZone();
            }
            remove => HookHandler._afterApplyDeadZone -= value;
        }

        public static event Delegates.ApplySmoothing_AfterArgs ApplySmoothing
        {
            add
            {
                HookHandler._afterApplySmoothing += value;
                HookHandler.HookApplySmoothing();
            }
            remove => HookHandler._afterApplySmoothing -= value;
        }

        public static event Delegates.ApplySnapping_AfterArgs ApplySnapping
        {
            add
            {
                HookHandler._afterApplySnapping += value;
                HookHandler.HookApplySnapping();
            }
            remove => HookHandler._afterApplySnapping -= value;
        }

        public static event Delegates.TargetIsButton_AfterArgs TargetIsButton
        {
            add
            {
                HookHandler._afterTargetIsButton += value;
                HookHandler.HookTargetIsButton();
            }
            remove => HookHandler._afterTargetIsButton -= value;
        }

        public static event Delegates.TargetIsStandard_AfterArgs TargetIsStandard
        {
            add
            {
                HookHandler._afterTargetIsStandard += value;
                HookHandler.HookTargetIsStandard();
            }
            remove => HookHandler._afterTargetIsStandard -= value;
        }

        public static event Delegates.TargetIsAlias_AfterArgs TargetIsAlias
        {
            add
            {
                HookHandler._afterTargetIsAlias += value;
                HookHandler.HookTargetIsAlias();
            }
            remove => HookHandler._afterTargetIsAlias -= value;
        }

        public static event Delegates.ReadFromFile_AfterArgs ReadFromFile
        {
            add
            {
                HookHandler._afterReadFromFile += value;
                HookHandler.HookReadFromFile();
            }
            remove => HookHandler._afterReadFromFile -= value;
        }

        public static event Delegates.WriteToFile_AfterArgs WriteToFile
        {
            add
            {
                HookHandler._afterWriteToFile += value;
                HookHandler.HookWriteToFile();
            }
            remove => HookHandler._afterWriteToFile -= value;
        }

        public static event Delegates.Abs_AfterArgs Abs
        {
            add
            {
                HookHandler._afterAbs += value;
                HookHandler.HookAbs();
            }
            remove => HookHandler._afterAbs -= value;
        }

        public static event Delegates.Approximately_float_float_AfterArgs Approximately_float_float
        {
            add
            {
                HookHandler._afterApproximately_float_float += value;
                HookHandler.HookApproximately_float_float();
            }
            remove => HookHandler._afterApproximately_float_float -= value;
        }

        public static event Delegates.Approximately_Vector2_Vector2_AfterArgs Approximately_Vector2_Vector2
        {
            add
            {
                HookHandler._afterApproximately_Vector2_Vector2 += value;
                HookHandler.HookApproximately_Vector2_Vector2();
            }
            remove => HookHandler._afterApproximately_Vector2_Vector2 -= value;
        }

        public static event Delegates.IsNotZero_AfterArgs IsNotZero
        {
            add
            {
                HookHandler._afterIsNotZero += value;
                HookHandler.HookIsNotZero();
            }
            remove => HookHandler._afterIsNotZero -= value;
        }

        public static event Delegates.IsZero_AfterArgs IsZero
        {
            add
            {
                HookHandler._afterIsZero += value;
                HookHandler.HookIsZero();
            }
            remove => HookHandler._afterIsZero -= value;
        }

        public static event Delegates.Sign_AfterArgs Sign
        {
            add
            {
                HookHandler._afterSign += value;
                HookHandler.HookSign();
            }
            remove => HookHandler._afterSign -= value;
        }

        public static event Delegates.AbsoluteIsOverThreshold_AfterArgs AbsoluteIsOverThreshold
        {
            add
            {
                HookHandler._afterAbsoluteIsOverThreshold += value;
                HookHandler.HookAbsoluteIsOverThreshold();
            }
            remove => HookHandler._afterAbsoluteIsOverThreshold -= value;
        }

        public static event Delegates.NormalizeAngle_AfterArgs NormalizeAngle
        {
            add
            {
                HookHandler._afterNormalizeAngle += value;
                HookHandler.HookNormalizeAngle();
            }
            remove => HookHandler._afterNormalizeAngle -= value;
        }

        public static event Delegates.VectorToAngle_AfterArgs VectorToAngle
        {
            add
            {
                HookHandler._afterVectorToAngle += value;
                HookHandler.HookVectorToAngle();
            }
            remove => HookHandler._afterVectorToAngle -= value;
        }

        public static event Delegates.Min_float_float_AfterArgs Min_float_float
        {
            add
            {
                HookHandler._afterMin_float_float += value;
                HookHandler.HookMin_float_float();
            }
            remove => HookHandler._afterMin_float_float -= value;
        }

        public static event Delegates.Max_float_float_AfterArgs Max_float_float
        {
            add
            {
                HookHandler._afterMax_float_float += value;
                HookHandler.HookMax_float_float();
            }
            remove => HookHandler._afterMax_float_float -= value;
        }

        public static event Delegates.Min_float_float_float_float_AfterArgs Min_float_float_float_float
        {
            add
            {
                HookHandler._afterMin_float_float_float_float += value;
                HookHandler.HookMin_float_float_float_float();
            }
            remove => HookHandler._afterMin_float_float_float_float -= value;
        }

        public static event Delegates.Max_float_float_float_float_AfterArgs Max_float_float_float_float
        {
            add
            {
                HookHandler._afterMax_float_float_float_float += value;
                HookHandler.HookMax_float_float_float_float();
            }
            remove => HookHandler._afterMax_float_float_float_float -= value;
        }

        public static event Delegates.ValueFromSides_float_float_AfterArgs ValueFromSides_float_float
        {
            add
            {
                HookHandler._afterValueFromSides_float_float += value;
                HookHandler.HookValueFromSides_float_float();
            }
            remove => HookHandler._afterValueFromSides_float_float -= value;
        }

        public static event Delegates.ValueFromSides_float_float_bool_AfterArgs ValueFromSides_float_float_bool
        {
            add
            {
                HookHandler._afterValueFromSides_float_float_bool += value;
                HookHandler.HookValueFromSides_float_float_bool();
            }
            remove => HookHandler._afterValueFromSides_float_float_bool -= value;
        }

        public static event Delegates.NextPowerOfTwo_AfterArgs NextPowerOfTwo
        {
            add
            {
                HookHandler._afterNextPowerOfTwo += value;
                HookHandler.HookNextPowerOfTwo();
            }
            remove => HookHandler._afterNextPowerOfTwo -= value;
        }

        public static event Delegates.get_Is32Bit_AfterArgs get_Is32Bit
        {
            add
            {
                HookHandler._afterget_Is32Bit += value;
                HookHandler.Hookget_Is32Bit();
            }
            remove => HookHandler._afterget_Is32Bit -= value;
        }

        public static event Delegates.get_Is64Bit_AfterArgs get_Is64Bit
        {
            add
            {
                HookHandler._afterget_Is64Bit += value;
                HookHandler.Hookget_Is64Bit();
            }
            remove => HookHandler._afterget_Is64Bit -= value;
        }

        public static event Delegates.GetPlatformName_AfterArgs GetPlatformName
        {
            add
            {
                HookHandler._afterGetPlatformName += value;
                HookHandler.HookGetPlatformName();
            }
            remove => HookHandler._afterGetPlatformName -= value;
        }

        public static event Delegates.GetHumanUnderstandableWindowsVersion_AfterArgs
            GetHumanUnderstandableWindowsVersion
            {
                add
                {
                    HookHandler._afterGetHumanUnderstandableWindowsVersion += value;
                    HookHandler.HookGetHumanUnderstandableWindowsVersion();
                }
                remove => HookHandler._afterGetHumanUnderstandableWindowsVersion -= value;
            }

        public static event Delegates.GetWindowsVersion_AfterArgs GetWindowsVersion
        {
            add
            {
                HookHandler._afterGetWindowsVersion += value;
                HookHandler.HookGetWindowsVersion();
            }
            remove => HookHandler._afterGetWindowsVersion -= value;
        }

        public static event Delegates.GetSystemBuildNumber_AfterArgs GetSystemBuildNumber
        {
            add
            {
                HookHandler._afterGetSystemBuildNumber += value;
                HookHandler.HookGetSystemBuildNumber();
            }
            remove => HookHandler._afterGetSystemBuildNumber -= value;
        }

        public static event Delegates.LoadScene_AfterArgs LoadScene
        {
            add
            {
                HookHandler._afterLoadScene += value;
                HookHandler.HookLoadScene();
            }
            remove => HookHandler._afterLoadScene -= value;
        }

        public static event Delegates.PluginFileExtension_AfterArgs PluginFileExtension
        {
            add
            {
                HookHandler._afterPluginFileExtension += value;
                HookHandler.HookPluginFileExtension();
            }
            remove => HookHandler._afterPluginFileExtension -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.DrawCircleGizmo_Vector2_float_WithArgs DrawCircleGizmo_Vector2_float
        {
            add => HookEndpointManager.Add<Delegates.DrawCircleGizmo_Vector2_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawCircleGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawCircleGizmo_Vector2_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawCircleGizmo", false), value);
        }

        public static event Delegates.DrawCircleGizmo_Vector2_float_Color_WithArgs DrawCircleGizmo_Vector2_float_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawCircleGizmo_Vector2_float_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawCircleGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawCircleGizmo_Vector2_float_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawCircleGizmo", false), value);
        }

        public static event Delegates.DrawOvalGizmo_Vector2_Vector2_WithArgs DrawOvalGizmo_Vector2_Vector2
        {
            add => HookEndpointManager.Add<Delegates.DrawOvalGizmo_Vector2_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawOvalGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawOvalGizmo_Vector2_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawOvalGizmo", false), value);
        }

        public static event Delegates.DrawOvalGizmo_Vector2_Vector2_Color_WithArgs DrawOvalGizmo_Vector2_Vector2_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawOvalGizmo_Vector2_Vector2_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawOvalGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawOvalGizmo_Vector2_Vector2_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawOvalGizmo", false), value);
        }

        public static event Delegates.DrawRectGizmo_Rect_WithArgs DrawRectGizmo_Rect
        {
            add => HookEndpointManager.Add<Delegates.DrawRectGizmo_Rect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawRectGizmo_Rect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
        }

        public static event Delegates.DrawRectGizmo_Rect_Color_WithArgs DrawRectGizmo_Rect_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawRectGizmo_Rect_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawRectGizmo_Rect_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
        }

        public static event Delegates.DrawRectGizmo_Vector2_Vector2_WithArgs DrawRectGizmo_Vector2_Vector2
        {
            add => HookEndpointManager.Add<Delegates.DrawRectGizmo_Vector2_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawRectGizmo_Vector2_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
        }

        public static event Delegates.DrawRectGizmo_Vector2_Vector2_Color_WithArgs DrawRectGizmo_Vector2_Vector2_Color
        {
            add => HookEndpointManager.Add<Delegates.DrawRectGizmo_Vector2_Vector2_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
            remove => HookEndpointManager.Remove<Delegates.DrawRectGizmo_Vector2_Vector2_Color_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "DrawRectGizmo", false), value);
        }

        public static event Delegates.GameObjectIsCulledOnCurrentCamera_WithArgs GameObjectIsCulledOnCurrentCamera
        {
            add => HookEndpointManager.Add<Delegates.GameObjectIsCulledOnCurrentCamera_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GameObjectIsCulledOnCurrentCamera", false), value);
            remove => HookEndpointManager.Remove<Delegates.GameObjectIsCulledOnCurrentCamera_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GameObjectIsCulledOnCurrentCamera", false), value);
        }

        public static event Delegates.MoveColorTowards_WithArgs MoveColorTowards
        {
            add => HookEndpointManager.Add<Delegates.MoveColorTowards_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "MoveColorTowards", false), value);
            remove => HookEndpointManager.Remove<Delegates.MoveColorTowards_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "MoveColorTowards", false), value);
        }

        public static event Delegates.ApplyDeadZone_WithArgs ApplyDeadZone
        {
            add => HookEndpointManager.Add<Delegates.ApplyDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplyDeadZone", false), value);
            remove => HookEndpointManager.Remove<Delegates.ApplyDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplyDeadZone", false), value);
        }

        public static event Delegates.ApplySmoothing_WithArgs ApplySmoothing
        {
            add => HookEndpointManager.Add<Delegates.ApplySmoothing_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplySmoothing", false), value);
            remove => HookEndpointManager.Remove<Delegates.ApplySmoothing_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplySmoothing", false), value);
        }

        public static event Delegates.ApplySnapping_WithArgs ApplySnapping
        {
            add => HookEndpointManager.Add<Delegates.ApplySnapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplySnapping", false), value);
            remove => HookEndpointManager.Remove<Delegates.ApplySnapping_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ApplySnapping", false), value);
        }

        public static event Delegates.TargetIsButton_WithArgs TargetIsButton
        {
            add => HookEndpointManager.Add<Delegates.TargetIsButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsButton", false), value);
            remove => HookEndpointManager.Remove<Delegates.TargetIsButton_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsButton", false), value);
        }

        public static event Delegates.TargetIsStandard_WithArgs TargetIsStandard
        {
            add => HookEndpointManager.Add<Delegates.TargetIsStandard_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsStandard", false), value);
            remove => HookEndpointManager.Remove<Delegates.TargetIsStandard_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsStandard", false), value);
        }

        public static event Delegates.TargetIsAlias_WithArgs TargetIsAlias
        {
            add => HookEndpointManager.Add<Delegates.TargetIsAlias_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsAlias", false), value);
            remove => HookEndpointManager.Remove<Delegates.TargetIsAlias_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "TargetIsAlias", false), value);
        }

        public static event Delegates.ReadFromFile_WithArgs ReadFromFile
        {
            add => HookEndpointManager.Add<Delegates.ReadFromFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ReadFromFile", false), value);
            remove => HookEndpointManager.Remove<Delegates.ReadFromFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ReadFromFile", false), value);
        }

        public static event Delegates.WriteToFile_WithArgs WriteToFile
        {
            add => HookEndpointManager.Add<Delegates.WriteToFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "WriteToFile", false), value);
            remove => HookEndpointManager.Remove<Delegates.WriteToFile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "WriteToFile", false), value);
        }

        public static event Delegates.Abs_WithArgs Abs
        {
            add => HookEndpointManager.Add<Delegates.Abs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Abs", false), value);
            remove => HookEndpointManager.Remove<Delegates.Abs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Abs", false), value);
        }

        public static event Delegates.Approximately_float_float_WithArgs Approximately_float_float
        {
            add => HookEndpointManager.Add<Delegates.Approximately_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Approximately", false), value);
            remove => HookEndpointManager.Remove<Delegates.Approximately_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Approximately", false), value);
        }

        public static event Delegates.Approximately_Vector2_Vector2_WithArgs Approximately_Vector2_Vector2
        {
            add => HookEndpointManager.Add<Delegates.Approximately_Vector2_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Approximately", false), value);
            remove => HookEndpointManager.Remove<Delegates.Approximately_Vector2_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Approximately", false), value);
        }

        public static event Delegates.IsNotZero_WithArgs IsNotZero
        {
            add => HookEndpointManager.Add<Delegates.IsNotZero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "IsNotZero", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsNotZero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "IsNotZero", false), value);
        }

        public static event Delegates.IsZero_WithArgs IsZero
        {
            add => HookEndpointManager.Add<Delegates.IsZero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "IsZero", false), value);
            remove => HookEndpointManager.Remove<Delegates.IsZero_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "IsZero", false), value);
        }

        public static event Delegates.Sign_WithArgs Sign
        {
            add => HookEndpointManager.Add<Delegates.Sign_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Sign", false), value);
            remove => HookEndpointManager.Remove<Delegates.Sign_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Sign", false), value);
        }

        public static event Delegates.AbsoluteIsOverThreshold_WithArgs AbsoluteIsOverThreshold
        {
            add => HookEndpointManager.Add<Delegates.AbsoluteIsOverThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "AbsoluteIsOverThreshold", false), value);
            remove => HookEndpointManager.Remove<Delegates.AbsoluteIsOverThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "AbsoluteIsOverThreshold", false), value);
        }

        public static event Delegates.NormalizeAngle_WithArgs NormalizeAngle
        {
            add => HookEndpointManager.Add<Delegates.NormalizeAngle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "NormalizeAngle", false), value);
            remove => HookEndpointManager.Remove<Delegates.NormalizeAngle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "NormalizeAngle", false), value);
        }

        public static event Delegates.VectorToAngle_WithArgs VectorToAngle
        {
            add => HookEndpointManager.Add<Delegates.VectorToAngle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "VectorToAngle", false), value);
            remove => HookEndpointManager.Remove<Delegates.VectorToAngle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "VectorToAngle", false), value);
        }

        public static event Delegates.Min_float_float_WithArgs Min_float_float
        {
            add => HookEndpointManager.Add<Delegates.Min_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Min", false), value);
            remove => HookEndpointManager.Remove<Delegates.Min_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Min", false), value);
        }

        public static event Delegates.Max_float_float_WithArgs Max_float_float
        {
            add => HookEndpointManager.Add<Delegates.Max_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Max", false), value);
            remove => HookEndpointManager.Remove<Delegates.Max_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Max", false), value);
        }

        public static event Delegates.Min_float_float_float_float_WithArgs Min_float_float_float_float
        {
            add => HookEndpointManager.Add<Delegates.Min_float_float_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Min", false), value);
            remove => HookEndpointManager.Remove<Delegates.Min_float_float_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Min", false), value);
        }

        public static event Delegates.Max_float_float_float_float_WithArgs Max_float_float_float_float
        {
            add => HookEndpointManager.Add<Delegates.Max_float_float_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Max", false), value);
            remove => HookEndpointManager.Remove<Delegates.Max_float_float_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "Max", false), value);
        }

        public static event Delegates.ValueFromSides_float_float_WithArgs ValueFromSides_float_float
        {
            add => HookEndpointManager.Add<Delegates.ValueFromSides_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ValueFromSides", false), value);
            remove => HookEndpointManager.Remove<Delegates.ValueFromSides_float_float_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ValueFromSides", false), value);
        }

        public static event Delegates.ValueFromSides_float_float_bool_WithArgs ValueFromSides_float_float_bool
        {
            add => HookEndpointManager.Add<Delegates.ValueFromSides_float_float_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ValueFromSides", false), value);
            remove => HookEndpointManager.Remove<Delegates.ValueFromSides_float_float_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "ValueFromSides", false), value);
        }

        public static event Delegates.NextPowerOfTwo_WithArgs NextPowerOfTwo
        {
            add => HookEndpointManager.Add<Delegates.NextPowerOfTwo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "NextPowerOfTwo", false), value);
            remove => HookEndpointManager.Remove<Delegates.NextPowerOfTwo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "NextPowerOfTwo", false), value);
        }

        public static event Delegates.get_Is32Bit_WithArgs get_Is32Bit
        {
            add => HookEndpointManager.Add<Delegates.get_Is32Bit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "get_Is32Bit", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Is32Bit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "get_Is32Bit", false), value);
        }

        public static event Delegates.get_Is64Bit_WithArgs get_Is64Bit
        {
            add => HookEndpointManager.Add<Delegates.get_Is64Bit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "get_Is64Bit", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Is64Bit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "get_Is64Bit", false), value);
        }

        public static event Delegates.GetPlatformName_WithArgs GetPlatformName
        {
            add => HookEndpointManager.Add<Delegates.GetPlatformName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetPlatformName", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlatformName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetPlatformName", false), value);
        }

        public static event Delegates.GetHumanUnderstandableWindowsVersion_WithArgs GetHumanUnderstandableWindowsVersion
        {
            add => HookEndpointManager.Add<Delegates.GetHumanUnderstandableWindowsVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetHumanUnderstandableWindowsVersion", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetHumanUnderstandableWindowsVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetHumanUnderstandableWindowsVersion", false), value);
        }

        public static event Delegates.GetWindowsVersion_WithArgs GetWindowsVersion
        {
            add => HookEndpointManager.Add<Delegates.GetWindowsVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetWindowsVersion", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetWindowsVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetWindowsVersion", false), value);
        }

        public static event Delegates.GetSystemBuildNumber_WithArgs GetSystemBuildNumber
        {
            add => HookEndpointManager.Add<Delegates.GetSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetSystemBuildNumber", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSystemBuildNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "GetSystemBuildNumber", false), value);
        }

        public static event Delegates.LoadScene_WithArgs LoadScene
        {
            add => HookEndpointManager.Add<Delegates.LoadScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "LoadScene", false), value);
            remove => HookEndpointManager.Remove<Delegates.LoadScene_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "LoadScene", false), value);
        }

        public static event Delegates.PluginFileExtension_WithArgs PluginFileExtension
        {
            add => HookEndpointManager.Add<Delegates.PluginFileExtension_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "PluginFileExtension", false), value);
            remove => HookEndpointManager.Remove<Delegates.PluginFileExtension_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Utility), "PluginFileExtension", false), value);
        }
    }
}