namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GodfinderGateIcon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGodfinderGateIcon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.GodfinderGateIcon.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.GodfinderGateIcon.orig_Reset orig, GodfinderGateIcon self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnValidate()
        {
            if (!HookedList.Contains("OnValidate"))
            {
                HookedList.Add("OnValidate");
                On.GodfinderGateIcon.OnValidate += OnValidate;
            }
        }

        internal static event Delegates.OnValidate_BeforeArgs _beforeOnValidate;
        internal static event Delegates.OnValidate_AfterArgs _afterOnValidate;

        private static void OnValidate(On.GodfinderGateIcon.orig_OnValidate orig, GodfinderGateIcon self)
        {
            Delegates.Params_OnValidate @params = new()
            {
                self = self
            };
            if (_beforeOnValidate != null)
                foreach (Delegates.OnValidate_BeforeArgs toInvoke in _beforeOnValidate.GetInvocationList())
                    try
                    {
                        _beforeOnValidate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnValidate != null)
                foreach (Delegates.OnValidate_AfterArgs toInvoke in _afterOnValidate.GetInvocationList())
                    try
                    {
                        _afterOnValidate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetIcon()
        {
            if (!HookedList.Contains("SetIcon"))
            {
                HookedList.Add("SetIcon");
                On.GodfinderGateIcon.SetIcon += SetIcon;
            }
        }

        internal static event Delegates.SetIcon_BeforeArgs _beforeSetIcon;
        internal static event Delegates.SetIcon_AfterArgs _afterSetIcon;

        private static void SetIcon(On.GodfinderGateIcon.orig_SetIcon orig, GodfinderGateIcon self,
            GodfinderGateIcon.IconType type)
        {
            Delegates.Params_SetIcon @params = new()
            {
                self = self, type = type
            };
            if (_beforeSetIcon != null)
                foreach (Delegates.SetIcon_BeforeArgs toInvoke in _beforeSetIcon.GetInvocationList())
                    try
                    {
                        _beforeSetIcon?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            type = @params.type;
            orig(self, type);
            if (_afterSetIcon != null)
                foreach (Delegates.SetIcon_AfterArgs toInvoke in _afterSetIcon.GetInvocationList())
                    try
                    {
                        _afterSetIcon.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEvaluate()
        {
            if (!HookedList.Contains("Evaluate"))
            {
                HookedList.Add("Evaluate");
                On.GodfinderGateIcon.Evaluate += Evaluate;
            }
        }

        internal static event Delegates.Evaluate_BeforeArgs _beforeEvaluate;
        internal static event Delegates.Evaluate_AfterArgs _afterEvaluate;

        private static void Evaluate(On.GodfinderGateIcon.orig_Evaluate orig, GodfinderGateIcon self)
        {
            Delegates.Params_Evaluate @params = new()
            {
                self = self
            };
            if (_beforeEvaluate != null)
                foreach (Delegates.Evaluate_BeforeArgs toInvoke in _beforeEvaluate.GetInvocationList())
                    try
                    {
                        _beforeEvaluate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEvaluate != null)
                foreach (Delegates.Evaluate_AfterArgs toInvoke in _afterEvaluate.GetInvocationList())
                    try
                    {
                        _afterEvaluate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Evaluate_AfterArgs(Params_Evaluate args);

        public delegate void Evaluate_BeforeArgs(Params_Evaluate args);

        public delegate void Evaluate_WithArgs(Action<GodfinderGateIcon> orig, GodfinderGateIcon self);

        public delegate void OnValidate_AfterArgs(Params_OnValidate args);

        public delegate void OnValidate_BeforeArgs(Params_OnValidate args);

        public delegate void OnValidate_WithArgs(Action<GodfinderGateIcon> orig, GodfinderGateIcon self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<GodfinderGateIcon> orig, GodfinderGateIcon self);

        public delegate void SetIcon_AfterArgs(Params_SetIcon args);

        public delegate void SetIcon_BeforeArgs(Params_SetIcon args);

        public delegate void SetIcon_WithArgs(Action<GodfinderGateIcon, GodfinderGateIcon.IconType> orig,
            GodfinderGateIcon self, GodfinderGateIcon.IconType type);

        public sealed class Params_Reset
        {
            public GodfinderGateIcon self;
        }

        public sealed class Params_OnValidate
        {
            public GodfinderGateIcon self;
        }

        public sealed class Params_SetIcon
        {
            public GodfinderGateIcon self;
            public GodfinderGateIcon.IconType type;
        }

        public sealed class Params_Evaluate
        {
            public GodfinderGateIcon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnValidate_BeforeArgs OnValidate
        {
            add
            {
                HookHandler._beforeOnValidate += value;
                HookHandler.HookOnValidate();
            }
            remove => HookHandler._beforeOnValidate -= value;
        }

        public static event Delegates.SetIcon_BeforeArgs SetIcon
        {
            add
            {
                HookHandler._beforeSetIcon += value;
                HookHandler.HookSetIcon();
            }
            remove => HookHandler._beforeSetIcon -= value;
        }

        public static event Delegates.Evaluate_BeforeArgs Evaluate
        {
            add
            {
                HookHandler._beforeEvaluate += value;
                HookHandler.HookEvaluate();
            }
            remove => HookHandler._beforeEvaluate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnValidate_AfterArgs OnValidate
        {
            add
            {
                HookHandler._afterOnValidate += value;
                HookHandler.HookOnValidate();
            }
            remove => HookHandler._afterOnValidate -= value;
        }

        public static event Delegates.SetIcon_AfterArgs SetIcon
        {
            add
            {
                HookHandler._afterSetIcon += value;
                HookHandler.HookSetIcon();
            }
            remove => HookHandler._afterSetIcon -= value;
        }

        public static event Delegates.Evaluate_AfterArgs Evaluate
        {
            add
            {
                HookHandler._afterEvaluate += value;
                HookHandler.HookEvaluate();
            }
            remove => HookHandler._afterEvaluate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GodfinderGateIcon.hook_Reset Reset
        {
            add => On.GodfinderGateIcon.Reset += value;
            remove => On.GodfinderGateIcon.Reset -= value;
        }

        public static event On.GodfinderGateIcon.hook_OnValidate OnValidate
        {
            add => On.GodfinderGateIcon.OnValidate += value;
            remove => On.GodfinderGateIcon.OnValidate -= value;
        }

        public static event On.GodfinderGateIcon.hook_SetIcon SetIcon
        {
            add => On.GodfinderGateIcon.SetIcon += value;
            remove => On.GodfinderGateIcon.SetIcon -= value;
        }

        public static event On.GodfinderGateIcon.hook_Evaluate Evaluate
        {
            add => On.GodfinderGateIcon.Evaluate += value;
            remove => On.GodfinderGateIcon.Evaluate -= value;
        }
    }
}