namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GodfinderGateIcon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGodfinderGateIcon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.GodfinderGateIcon.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.GodfinderGateIcon.orig_Reset orig, GodfinderGateIcon self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnValidate()
        {
            if (!HookedList.Contains("OnValidate"))
            {
                HookedList.Add("OnValidate");
                On.GodfinderGateIcon.OnValidate += OnValidate;
            }
        }

        internal static event Delegates.OnValidate_BeforeArgs _beforeOnValidate;
        internal static event Delegates.OnValidate_NormalArgs _afterOnValidate;

        private static void OnValidate(On.GodfinderGateIcon.orig_OnValidate orig, GodfinderGateIcon self)
        {
            Delegates.Params_OnValidate @params = new()
            {
                self = self
            };
            _beforeOnValidate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnValidate != null) _afterOnValidate.Invoke(@params);
        }

        internal static void HookEvaluate()
        {
            if (!HookedList.Contains("Evaluate"))
            {
                HookedList.Add("Evaluate");
                On.GodfinderGateIcon.Evaluate += Evaluate;
            }
        }

        internal static event Delegates.Evaluate_BeforeArgs _beforeEvaluate;
        internal static event Delegates.Evaluate_NormalArgs _afterEvaluate;

        private static void Evaluate(On.GodfinderGateIcon.orig_Evaluate orig, GodfinderGateIcon self)
        {
            Delegates.Params_Evaluate @params = new()
            {
                self = self
            };
            _beforeEvaluate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEvaluate != null) _afterEvaluate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Evaluate_BeforeArgs(Params_Evaluate args);

        public delegate void Evaluate_NormalArgs(Params_Evaluate args);

        public delegate void OnValidate_BeforeArgs(Params_OnValidate args);

        public delegate void OnValidate_NormalArgs(Params_OnValidate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public GodfinderGateIcon self;
        }

        public sealed class Params_OnValidate
        {
            public GodfinderGateIcon self;
        }

        public sealed class Params_Evaluate
        {
            public GodfinderGateIcon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnValidate_BeforeArgs OnValidate
        {
            add
            {
                HookHandler._beforeOnValidate += value;
                HookHandler.HookOnValidate();
            }
            remove => HookHandler._beforeOnValidate -= value;
        }

        public static event Delegates.Evaluate_BeforeArgs Evaluate
        {
            add
            {
                HookHandler._beforeEvaluate += value;
                HookHandler.HookEvaluate();
            }
            remove => HookHandler._beforeEvaluate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnValidate_NormalArgs OnValidate
        {
            add
            {
                HookHandler._afterOnValidate += value;
                HookHandler.HookOnValidate();
            }
            remove => HookHandler._afterOnValidate -= value;
        }

        public static event Delegates.Evaluate_NormalArgs Evaluate
        {
            add
            {
                HookHandler._afterEvaluate += value;
                HookHandler.HookEvaluate();
            }
            remove => HookHandler._afterEvaluate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GodfinderGateIcon.hook_Reset Reset
        {
            add => On.GodfinderGateIcon.Reset += value;
            remove => On.GodfinderGateIcon.Reset -= value;
        }

        public static event On.GodfinderGateIcon.hook_OnValidate OnValidate
        {
            add => On.GodfinderGateIcon.OnValidate += value;
            remove => On.GodfinderGateIcon.OnValidate -= value;
        }

        public static event On.GodfinderGateIcon.hook_Evaluate Evaluate
        {
            add => On.GodfinderGateIcon.Evaluate += value;
            remove => On.GodfinderGateIcon.Evaluate -= value;
        }
    }
}