using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for OuyaEverywhereDeviceManager class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOuyaEverywhereDeviceManager
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.OuyaEverywhereDeviceManager), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.OuyaEverywhereDeviceManager,  ulong,  float> orig, InControl.OuyaEverywhereDeviceManager self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_Update @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookEnable()
{
if (!HookedList.Contains("Enable"))
{
HookedList.Add("Enable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.OuyaEverywhereDeviceManager), "Enable", false), Enable);

}
}
internal static event Delegates.Enable_BeforeArgs _beforeEnable;
internal static event Delegates.Enable_AfterArgs _afterEnable;
private static void Enable(Action orig)
{
if (_beforeEnable != null)
{
foreach (Delegates.Enable_BeforeArgs toInvoke in _beforeEnable.GetInvocationList())
{
try
{
_beforeEnable?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
orig();
if (_afterEnable != null)
{
foreach (Delegates.Enable_AfterArgs toInvoke in _afterEnable.GetInvocationList())
{
try
{
_afterEnable.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Update
{
public InControl.OuyaEverywhereDeviceManager self;
public ulong updateTick;
public float deltaTime;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.OuyaEverywhereDeviceManager,  ulong,  float> orig, InControl.OuyaEverywhereDeviceManager self,  ulong updateTick,  float deltaTime);
public delegate void Enable_BeforeArgs();
public delegate void Enable_AfterArgs();
public delegate void Enable_WithArgs (Action orig);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.Enable_BeforeArgs Enable
{
add
{

HookHandler._beforeEnable += value;
HookHandler.HookEnable();
}
remove => HookHandler._beforeEnable -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.Enable_AfterArgs Enable
{
add
{

HookHandler._afterEnable += value;
HookHandler.HookEnable();
}
remove => HookHandler._afterEnable -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.OuyaEverywhereDeviceManager), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.OuyaEverywhereDeviceManager), "Update", true), value);
}
public static event Delegates.Enable_WithArgs Enable
{
add => HookEndpointManager.Add<Delegates.Enable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.OuyaEverywhereDeviceManager), "Enable", false), value);
remove => HookEndpointManager.Remove<Delegates.Enable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.OuyaEverywhereDeviceManager), "Enable", false), value);
}
}

}
