using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for SetRandomSpriteId class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSetRandomSpriteId
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.SetRandomSpriteId.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.SetRandomSpriteId.orig_Awake orig, SetRandomSpriteId self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.SetRandomSpriteId.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.SetRandomSpriteId.orig_Init orig, SetRandomSpriteId self)
        {
            Delegates.Params_Init @params = new()
            {
                self = self
            };
            if (_beforeInit != null)
            {
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                {
                    try
                    {
                        _beforeInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterInit != null)
            {
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                {
                    try
                    {
                        _afterInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInitExternalDebris()
        {
            if (!HookedList.Contains("InitExternalDebris"))
            {
                HookedList.Add("InitExternalDebris");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SetRandomSpriteId), "InitExternalDebris", true),
                    InitExternalDebris);
            }
        }

        internal static event Delegates.InitExternalDebris_BeforeArgs _beforeInitExternalDebris;
        internal static event Delegates.InitExternalDebris_AfterArgs _afterInitExternalDebris;

        private static void InitExternalDebris(Action<SetRandomSpriteId> orig, SetRandomSpriteId self)
        {
            Delegates.Params_InitExternalDebris @params = new()
            {
                self = self
            };
            if (_beforeInitExternalDebris != null)
            {
                foreach (Delegates.InitExternalDebris_BeforeArgs toInvoke in
                         _beforeInitExternalDebris.GetInvocationList())
                {
                    try
                    {
                        _beforeInitExternalDebris?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterInitExternalDebris != null)
            {
                foreach (Delegates.InitExternalDebris_AfterArgs toInvoke in
                         _afterInitExternalDebris.GetInvocationList())
                {
                    try
                    {
                        _afterInitExternalDebris.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public SetRandomSpriteId self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<SetRandomSpriteId> orig, SetRandomSpriteId self);

        public sealed class Params_Init
        {
            public SetRandomSpriteId self;
        }

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_AfterArgs(Params_Init args);

        public delegate void Init_WithArgs(Action<SetRandomSpriteId> orig, SetRandomSpriteId self);

        public sealed class Params_InitExternalDebris
        {
            public SetRandomSpriteId self;
        }

        public delegate void InitExternalDebris_BeforeArgs(Params_InitExternalDebris args);

        public delegate void InitExternalDebris_AfterArgs(Params_InitExternalDebris args);

        public delegate void InitExternalDebris_WithArgs(Action<SetRandomSpriteId> orig, SetRandomSpriteId self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.InitExternalDebris_BeforeArgs InitExternalDebris
        {
            add
            {
                HookHandler._beforeInitExternalDebris += value;
                HookHandler.HookInitExternalDebris();
            }
            remove => HookHandler._beforeInitExternalDebris -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.InitExternalDebris_AfterArgs InitExternalDebris
        {
            add
            {
                HookHandler._afterInitExternalDebris += value;
                HookHandler.HookInitExternalDebris();
            }
            remove => HookHandler._afterInitExternalDebris -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SetRandomSpriteId.hook_Awake Awake
        {
            add => On.SetRandomSpriteId.Awake += value;
            remove => On.SetRandomSpriteId.Awake -= value;
        }

        public static event On.SetRandomSpriteId.hook_Init Init
        {
            add => On.SetRandomSpriteId.Init += value;
            remove => On.SetRandomSpriteId.Init -= value;
        }

        public static event Delegates.InitExternalDebris_WithArgs InitExternalDebris
        {
            add => HookEndpointManager.Add<Delegates.InitExternalDebris_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetRandomSpriteId), "IExternalDebris.InitExternalDebris", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.InitExternalDebris_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetRandomSpriteId), "IExternalDebris.InitExternalDebris", true),
                value);
        }
    }
}