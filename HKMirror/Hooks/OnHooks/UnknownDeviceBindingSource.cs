using System.IO;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UnknownDeviceBindingSource class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnknownDeviceBindingSource
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Control()
        {
            if (!HookedList.Contains("get_Control"))
            {
                HookedList.Add("get_Control");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_Control"),
                    get_Control);
            }
        }

        internal static event Delegates.get_Control_BeforeArgs _beforeget_Control;
        internal static event Delegates.get_Control_NormalArgs _afterget_Control;

        private static UnknownDeviceControl get_Control(Func<UnknownDeviceBindingSource, UnknownDeviceControl> orig,
            UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_Control @params = new()
            {
                self = self
            };
            _beforeget_Control?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Control != null) retVal = _afterget_Control.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Control()
        {
            if (!HookedList.Contains("set_Control"))
            {
                HookedList.Add("set_Control");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "set_Control"),
                    set_Control);
            }
        }

        internal static event Delegates.set_Control_BeforeArgs _beforeset_Control;
        internal static event Delegates.set_Control_NormalArgs _afterset_Control;

        private static void set_Control(Action<UnknownDeviceBindingSource, UnknownDeviceControl> orig,
            UnknownDeviceBindingSource self, UnknownDeviceControl value)
        {
            Delegates.Params_set_Control @params = new()
            {
                self = self, value = value
            };
            _beforeset_Control?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Control != null) _afterset_Control.Invoke(@params);
        }

        internal static void HookGetValue()
        {
            if (!HookedList.Contains("GetValue"))
            {
                HookedList.Add("GetValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "GetValue"), GetValue);
            }
        }

        internal static event Delegates.GetValue_BeforeArgs _beforeGetValue;
        internal static event Delegates.GetValue_NormalArgs _afterGetValue;

        private static float GetValue(Func<UnknownDeviceBindingSource, InputDevice, float> orig,
            UnknownDeviceBindingSource self, InputDevice device)
        {
            Delegates.Params_GetValue @params = new()
            {
                self = self, device = device
            };
            _beforeGetValue?.Invoke(@params);
            self = @params.self;
            device = @params.device;
            var retVal = orig(self, device);
            if (_afterGetValue != null) retVal = _afterGetValue.Invoke(@params);
            return retVal;
        }

        internal static void HookGetState()
        {
            if (!HookedList.Contains("GetState"))
            {
                HookedList.Add("GetState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "GetState"), GetState);
            }
        }

        internal static event Delegates.GetState_BeforeArgs _beforeGetState;
        internal static event Delegates.GetState_NormalArgs _afterGetState;

        private static bool GetState(Func<UnknownDeviceBindingSource, InputDevice, bool> orig,
            UnknownDeviceBindingSource self, InputDevice device)
        {
            Delegates.Params_GetState @params = new()
            {
                self = self, device = device
            };
            _beforeGetState?.Invoke(@params);
            self = @params.self;
            device = @params.device;
            var retVal = orig(self, device);
            if (_afterGetState != null) retVal = _afterGetState.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Name()
        {
            if (!HookedList.Contains("get_Name"))
            {
                HookedList.Add("get_Name");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_Name"), get_Name);
            }
        }

        internal static event Delegates.get_Name_BeforeArgs _beforeget_Name;
        internal static event Delegates.get_Name_NormalArgs _afterget_Name;

        private static string get_Name(Func<UnknownDeviceBindingSource, string> orig, UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_Name @params = new()
            {
                self = self
            };
            _beforeget_Name?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Name != null) retVal = _afterget_Name.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DeviceName()
        {
            if (!HookedList.Contains("get_DeviceName"))
            {
                HookedList.Add("get_DeviceName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceName"),
                    get_DeviceName);
            }
        }

        internal static event Delegates.get_DeviceName_BeforeArgs _beforeget_DeviceName;
        internal static event Delegates.get_DeviceName_NormalArgs _afterget_DeviceName;

        private static string get_DeviceName(Func<UnknownDeviceBindingSource, string> orig,
            UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_DeviceName @params = new()
            {
                self = self
            };
            _beforeget_DeviceName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceName != null) retVal = _afterget_DeviceName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DeviceClass()
        {
            if (!HookedList.Contains("get_DeviceClass"))
            {
                HookedList.Add("get_DeviceClass");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceClass"),
                    get_DeviceClass);
            }
        }

        internal static event Delegates.get_DeviceClass_BeforeArgs _beforeget_DeviceClass;
        internal static event Delegates.get_DeviceClass_NormalArgs _afterget_DeviceClass;

        private static InputDeviceClass get_DeviceClass(Func<UnknownDeviceBindingSource, InputDeviceClass> orig,
            UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_DeviceClass @params = new()
            {
                self = self
            };
            _beforeget_DeviceClass?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceClass != null) retVal = _afterget_DeviceClass.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DeviceStyle()
        {
            if (!HookedList.Contains("get_DeviceStyle"))
            {
                HookedList.Add("get_DeviceStyle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceStyle"),
                    get_DeviceStyle);
            }
        }

        internal static event Delegates.get_DeviceStyle_BeforeArgs _beforeget_DeviceStyle;
        internal static event Delegates.get_DeviceStyle_NormalArgs _afterget_DeviceStyle;

        private static InputDeviceStyle get_DeviceStyle(Func<UnknownDeviceBindingSource, InputDeviceStyle> orig,
            UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_DeviceStyle @params = new()
            {
                self = self
            };
            _beforeget_DeviceStyle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceStyle != null) retVal = _afterget_DeviceStyle.Invoke(@params);
            return retVal;
        }

        internal static void HookEquals_BindingSource()
        {
            if (!HookedList.Contains("Equals_BindingSource"))
            {
                HookedList.Add("Equals_BindingSource");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Equals_BindingSource"),
                    Equals_BindingSource);
            }
        }

        internal static event Delegates.Equals_BindingSource_BeforeArgs _beforeEquals_BindingSource;
        internal static event Delegates.Equals_BindingSource_NormalArgs _afterEquals_BindingSource;

        private static bool Equals_BindingSource(Func<UnknownDeviceBindingSource, BindingSource, bool> orig,
            UnknownDeviceBindingSource self, BindingSource other)
        {
            Delegates.Params_Equals_BindingSource @params = new()
            {
                self = self, other = other
            };
            _beforeEquals_BindingSource?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            var retVal = orig(self, other);
            if (_afterEquals_BindingSource != null) retVal = _afterEquals_BindingSource.Invoke(@params);
            return retVal;
        }

        internal static void HookEquals_Object()
        {
            if (!HookedList.Contains("Equals_Object"))
            {
                HookedList.Add("Equals_Object");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Equals_Object"),
                    Equals_Object);
            }
        }

        internal static event Delegates.Equals_Object_BeforeArgs _beforeEquals_Object;
        internal static event Delegates.Equals_Object_NormalArgs _afterEquals_Object;

        private static bool Equals_Object(Func<UnknownDeviceBindingSource, object, bool> orig,
            UnknownDeviceBindingSource self, object other)
        {
            Delegates.Params_Equals_Object @params = new()
            {
                self = self, other = other
            };
            _beforeEquals_Object?.Invoke(@params);
            self = @params.self;
            other = @params.other;
            var retVal = orig(self, other);
            if (_afterEquals_Object != null) retVal = _afterEquals_Object.Invoke(@params);
            return retVal;
        }
        internal static void Hookget_BindingSourceType()
        {
            if (!HookedList.Contains("get_BindingSourceType"))
            {
                HookedList.Add("get_BindingSourceType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_BindingSourceType"),
                    get_BindingSourceType);
            }
        }

        internal static event Delegates.get_BindingSourceType_BeforeArgs _beforeget_BindingSourceType;
        internal static event Delegates.get_BindingSourceType_NormalArgs _afterget_BindingSourceType;

        private static BindingSourceType get_BindingSourceType(Func<UnknownDeviceBindingSource, BindingSourceType> orig,
            UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_BindingSourceType @params = new()
            {
                self = self
            };
            _beforeget_BindingSourceType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BindingSourceType != null) retVal = _afterget_BindingSourceType.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsValid()
        {
            if (!HookedList.Contains("get_IsValid"))
            {
                HookedList.Add("get_IsValid");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_IsValid"),
                    get_IsValid);
            }
        }

        internal static event Delegates.get_IsValid_BeforeArgs _beforeget_IsValid;
        internal static event Delegates.get_IsValid_NormalArgs _afterget_IsValid;

        private static bool get_IsValid(Func<UnknownDeviceBindingSource, bool> orig, UnknownDeviceBindingSource self)
        {
            Delegates.Params_get_IsValid @params = new()
            {
                self = self
            };
            _beforeget_IsValid?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsValid != null) retVal = _afterget_IsValid.Invoke(@params);
            return retVal;
        }

        internal static void HookLoad()
        {
            if (!HookedList.Contains("Load"))
            {
                HookedList.Add("Load");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Load"), Load);
            }
        }

        internal static event Delegates.Load_BeforeArgs _beforeLoad;
        internal static event Delegates.Load_NormalArgs _afterLoad;

        private static void Load(Action<UnknownDeviceBindingSource, BinaryReader, ushort> orig,
            UnknownDeviceBindingSource self, BinaryReader reader, ushort dataFormatVersion)
        {
            Delegates.Params_Load @params = new()
            {
                self = self, reader = reader, dataFormatVersion = dataFormatVersion
            };
            _beforeLoad?.Invoke(@params);
            self = @params.self;
            reader = @params.reader;
            dataFormatVersion = @params.dataFormatVersion;
            orig(self, reader, dataFormatVersion);
            if (_afterLoad != null) _afterLoad.Invoke(@params);
        }

        internal static void HookSave()
        {
            if (!HookedList.Contains("Save"))
            {
                HookedList.Add("Save");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Save"), Save);
            }
        }

        internal static event Delegates.Save_BeforeArgs _beforeSave;
        internal static event Delegates.Save_NormalArgs _afterSave;

        private static void Save(Action<UnknownDeviceBindingSource, BinaryWriter> orig, UnknownDeviceBindingSource self,
            BinaryWriter writer)
        {
            Delegates.Params_Save @params = new()
            {
                self = self, writer = writer
            };
            _beforeSave?.Invoke(@params);
            self = @params.self;
            writer = @params.writer;
            orig(self, writer);
            if (_afterSave != null) _afterSave.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Equals_BindingSource_BeforeArgs(Params_Equals_BindingSource args);

        public delegate bool Equals_BindingSource_NormalArgs(Params_Equals_BindingSource args);

        public delegate void Equals_Object_BeforeArgs(Params_Equals_Object args);

        public delegate bool Equals_Object_NormalArgs(Params_Equals_Object args);

        public delegate void get_BindingSourceType_BeforeArgs(Params_get_BindingSourceType args);

        public delegate BindingSourceType get_BindingSourceType_NormalArgs(Params_get_BindingSourceType args);

        public delegate void get_Control_BeforeArgs(Params_get_Control args);

        public delegate UnknownDeviceControl get_Control_NormalArgs(Params_get_Control args);

        public delegate void get_DeviceClass_BeforeArgs(Params_get_DeviceClass args);

        public delegate InputDeviceClass get_DeviceClass_NormalArgs(Params_get_DeviceClass args);

        public delegate void get_DeviceName_BeforeArgs(Params_get_DeviceName args);

        public delegate string get_DeviceName_NormalArgs(Params_get_DeviceName args);

        public delegate void get_DeviceStyle_BeforeArgs(Params_get_DeviceStyle args);

        public delegate InputDeviceStyle get_DeviceStyle_NormalArgs(Params_get_DeviceStyle args);

        public delegate void get_IsValid_BeforeArgs(Params_get_IsValid args);

        public delegate bool get_IsValid_NormalArgs(Params_get_IsValid args);

        public delegate void get_Name_BeforeArgs(Params_get_Name args);

        public delegate string get_Name_NormalArgs(Params_get_Name args);

        public delegate void GetState_BeforeArgs(Params_GetState args);

        public delegate bool GetState_NormalArgs(Params_GetState args);

        public delegate void GetValue_BeforeArgs(Params_GetValue args);

        public delegate float GetValue_NormalArgs(Params_GetValue args);

        public delegate void Load_BeforeArgs(Params_Load args);

        public delegate void Load_NormalArgs(Params_Load args);

        public delegate void Save_BeforeArgs(Params_Save args);

        public delegate void Save_NormalArgs(Params_Save args);

        public delegate void set_Control_BeforeArgs(Params_set_Control args);

        public delegate void set_Control_NormalArgs(Params_set_Control args);

        public sealed class Params_get_Control
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_set_Control
        {
            public UnknownDeviceBindingSource self;
            public UnknownDeviceControl value;
        }

        public sealed class Params_GetValue
        {
            public InputDevice device;
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_GetState
        {
            public InputDevice device;
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_get_Name
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_get_DeviceName
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_get_DeviceClass
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_get_DeviceStyle
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_Equals_BindingSource
        {
            public BindingSource other;
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_Equals_Object
        {
            public object other;
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_get_BindingSourceType
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_get_IsValid
        {
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_Load
        {
            public ushort dataFormatVersion;
            public BinaryReader reader;
            public UnknownDeviceBindingSource self;
        }

        public sealed class Params_Save
        {
            public UnknownDeviceBindingSource self;
            public BinaryWriter writer;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Control_BeforeArgs get_Control
        {
            add
            {
                HookHandler._beforeget_Control += value;
                HookHandler.Hookget_Control();
            }
            remove => HookHandler._beforeget_Control -= value;
        }

        public static event Delegates.set_Control_BeforeArgs set_Control
        {
            add
            {
                HookHandler._beforeset_Control += value;
                HookHandler.Hookset_Control();
            }
            remove => HookHandler._beforeset_Control -= value;
        }

        public static event Delegates.GetValue_BeforeArgs GetValue
        {
            add
            {
                HookHandler._beforeGetValue += value;
                HookHandler.HookGetValue();
            }
            remove => HookHandler._beforeGetValue -= value;
        }

        public static event Delegates.GetState_BeforeArgs GetState
        {
            add
            {
                HookHandler._beforeGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._beforeGetState -= value;
        }

        public static event Delegates.get_Name_BeforeArgs get_Name
        {
            add
            {
                HookHandler._beforeget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._beforeget_Name -= value;
        }

        public static event Delegates.get_DeviceName_BeforeArgs get_DeviceName
        {
            add
            {
                HookHandler._beforeget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._beforeget_DeviceName -= value;
        }

        public static event Delegates.get_DeviceClass_BeforeArgs get_DeviceClass
        {
            add
            {
                HookHandler._beforeget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._beforeget_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_BeforeArgs get_DeviceStyle
        {
            add
            {
                HookHandler._beforeget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._beforeget_DeviceStyle -= value;
        }

        public static event Delegates.Equals_BindingSource_BeforeArgs Equals_BindingSource
        {
            add
            {
                HookHandler._beforeEquals_BindingSource += value;
                HookHandler.HookEquals_BindingSource();
            }
            remove => HookHandler._beforeEquals_BindingSource -= value;
        }

        public static event Delegates.Equals_Object_BeforeArgs Equals_Object
        {
            add
            {
                HookHandler._beforeEquals_Object += value;
                HookHandler.HookEquals_Object();
            }
            remove => HookHandler._beforeEquals_Object -= value;
        }

        public static event Delegates.get_BindingSourceType_BeforeArgs get_BindingSourceType
        {
            add
            {
                HookHandler._beforeget_BindingSourceType += value;
                HookHandler.Hookget_BindingSourceType();
            }
            remove => HookHandler._beforeget_BindingSourceType -= value;
        }

        public static event Delegates.get_IsValid_BeforeArgs get_IsValid
        {
            add
            {
                HookHandler._beforeget_IsValid += value;
                HookHandler.Hookget_IsValid();
            }
            remove => HookHandler._beforeget_IsValid -= value;
        }

        public static event Delegates.Load_BeforeArgs Load
        {
            add
            {
                HookHandler._beforeLoad += value;
                HookHandler.HookLoad();
            }
            remove => HookHandler._beforeLoad -= value;
        }

        public static event Delegates.Save_BeforeArgs Save
        {
            add
            {
                HookHandler._beforeSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._beforeSave -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Control_NormalArgs get_Control
        {
            add
            {
                HookHandler._afterget_Control += value;
                HookHandler.Hookget_Control();
            }
            remove => HookHandler._afterget_Control -= value;
        }

        public static event Delegates.set_Control_NormalArgs set_Control
        {
            add
            {
                HookHandler._afterset_Control += value;
                HookHandler.Hookset_Control();
            }
            remove => HookHandler._afterset_Control -= value;
        }

        public static event Delegates.GetValue_NormalArgs GetValue
        {
            add
            {
                HookHandler._afterGetValue += value;
                HookHandler.HookGetValue();
            }
            remove => HookHandler._afterGetValue -= value;
        }

        public static event Delegates.GetState_NormalArgs GetState
        {
            add
            {
                HookHandler._afterGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._afterGetState -= value;
        }

        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add
            {
                HookHandler._afterget_Name += value;
                HookHandler.Hookget_Name();
            }
            remove => HookHandler._afterget_Name -= value;
        }

        public static event Delegates.get_DeviceName_NormalArgs get_DeviceName
        {
            add
            {
                HookHandler._afterget_DeviceName += value;
                HookHandler.Hookget_DeviceName();
            }
            remove => HookHandler._afterget_DeviceName -= value;
        }

        public static event Delegates.get_DeviceClass_NormalArgs get_DeviceClass
        {
            add
            {
                HookHandler._afterget_DeviceClass += value;
                HookHandler.Hookget_DeviceClass();
            }
            remove => HookHandler._afterget_DeviceClass -= value;
        }

        public static event Delegates.get_DeviceStyle_NormalArgs get_DeviceStyle
        {
            add
            {
                HookHandler._afterget_DeviceStyle += value;
                HookHandler.Hookget_DeviceStyle();
            }
            remove => HookHandler._afterget_DeviceStyle -= value;
        }

        public static event Delegates.Equals_BindingSource_NormalArgs Equals_BindingSource
        {
            add
            {
                HookHandler._afterEquals_BindingSource += value;
                HookHandler.HookEquals_BindingSource();
            }
            remove => HookHandler._afterEquals_BindingSource -= value;
        }

        public static event Delegates.Equals_Object_NormalArgs Equals_Object
        {
            add
            {
                HookHandler._afterEquals_Object += value;
                HookHandler.HookEquals_Object();
            }
            remove => HookHandler._afterEquals_Object -= value;
        }

        public static event Delegates.get_BindingSourceType_NormalArgs get_BindingSourceType
        {
            add
            {
                HookHandler._afterget_BindingSourceType += value;
                HookHandler.Hookget_BindingSourceType();
            }
            remove => HookHandler._afterget_BindingSourceType -= value;
        }

        public static event Delegates.get_IsValid_NormalArgs get_IsValid
        {
            add
            {
                HookHandler._afterget_IsValid += value;
                HookHandler.Hookget_IsValid();
            }
            remove => HookHandler._afterget_IsValid -= value;
        }

        public static event Delegates.Load_NormalArgs Load
        {
            add
            {
                HookHandler._afterLoad += value;
                HookHandler.HookLoad();
            }
            remove => HookHandler._afterLoad -= value;
        }

        public static event Delegates.Save_NormalArgs Save
        {
            add
            {
                HookHandler._afterSave += value;
                HookHandler.HookSave();
            }
            remove => HookHandler._afterSave -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Control_NormalArgs get_Control
        {
            add => HookEndpointManager.Add<Delegates.get_Control_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_Control"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Control_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_Control"), value);
        }

        public static event Delegates.set_Control_NormalArgs set_Control
        {
            add => HookEndpointManager.Add<Delegates.set_Control_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "set_Control"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Control_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "set_Control"), value);
        }

        public static event Delegates.GetValue_NormalArgs GetValue
        {
            add => HookEndpointManager.Add<Delegates.GetValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "GetValue"), value);
            remove => HookEndpointManager.Remove<Delegates.GetValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "GetValue"), value);
        }

        public static event Delegates.GetState_NormalArgs GetState
        {
            add => HookEndpointManager.Add<Delegates.GetState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "GetState"), value);
            remove => HookEndpointManager.Remove<Delegates.GetState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "GetState"), value);
        }

        public static event Delegates.get_Name_NormalArgs get_Name
        {
            add => HookEndpointManager.Add<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_Name"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Name_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_Name"), value);
        }

        public static event Delegates.get_DeviceName_NormalArgs get_DeviceName
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceName"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceName"), value);
        }

        public static event Delegates.get_DeviceClass_NormalArgs get_DeviceClass
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceClass"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceClass_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceClass"), value);
        }

        public static event Delegates.get_DeviceStyle_NormalArgs get_DeviceStyle
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceStyle"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceStyle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_DeviceStyle"), value);
        }

        public static event Delegates.Equals_BindingSource_NormalArgs Equals_BindingSource
        {
            add => HookEndpointManager.Add<Delegates.Equals_BindingSource_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Equals"), value);
            remove => HookEndpointManager.Remove<Delegates.Equals_BindingSource_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Equals"), value);
        }

        public static event Delegates.Equals_Object_NormalArgs Equals_Object
        {
            add => HookEndpointManager.Add<Delegates.Equals_Object_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Equals"), value);
            remove => HookEndpointManager.Remove<Delegates.Equals_Object_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Equals"), value);
        }

        public static event Delegates.get_BindingSourceType_NormalArgs get_BindingSourceType
        {
            add => HookEndpointManager.Add<Delegates.get_BindingSourceType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_BindingSourceType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BindingSourceType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_BindingSourceType"), value);
        }

        public static event Delegates.get_IsValid_NormalArgs get_IsValid
        {
            add => HookEndpointManager.Add<Delegates.get_IsValid_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_IsValid"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsValid_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "get_IsValid"), value);
        }

        public static event Delegates.Load_NormalArgs Load
        {
            add => HookEndpointManager.Add<Delegates.Load_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Load"), value);
            remove => HookEndpointManager.Remove<Delegates.Load_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Load"), value);
        }

        public static event Delegates.Save_NormalArgs Save
        {
            add => HookEndpointManager.Add<Delegates.Save_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Save"), value);
            remove => HookEndpointManager.Remove<Delegates.Save_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnknownDeviceBindingSource), "Save"), value);
        }
    }
}