using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for GlobControl class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGlobControl
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.GlobControl.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.GlobControl.orig_Awake orig,GlobControl self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.GlobControl.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.GlobControl.orig_OnEnable orig,GlobControl self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.GlobControl.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.GlobControl.orig_Start orig,GlobControl self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnTriggerEnter2D()
{
if (!HookedList.Contains("OnTriggerEnter2D"))
{
HookedList.Add("OnTriggerEnter2D");
On.GlobControl.OnTriggerEnter2D += OnTriggerEnter2D;

}
}
internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;
private static void OnTriggerEnter2D(On.GlobControl.orig_OnTriggerEnter2D orig,GlobControl self,  UnityEngine.Collider2D col)
{
Delegates.Params_OnTriggerEnter2D @params = new() 
{
self = self
, col = col
};
if (_beforeOnTriggerEnter2D != null)
{
foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
{
try
{
_beforeOnTriggerEnter2D?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
col = @params.col;
orig(self, col);
if (_afterOnTriggerEnter2D != null)
{
foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
{
try
{
_afterOnTriggerEnter2D.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBreak()
{
if (!HookedList.Contains("Break"))
{
HookedList.Add("Break");
On.GlobControl.Break += Break;

}
}
internal static event Delegates.Break_BeforeArgs _beforeBreak;
private static System.Collections.IEnumerator Break(On.GlobControl.orig_Break orig,GlobControl self)
{
Delegates.Params_Break @params = new() 
{
self = self
};
if (_beforeBreak != null)
{
foreach (Delegates.Break_BeforeArgs toInvoke in _beforeBreak.GetInvocationList())
{
try
{
_beforeBreak?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookCheckForGround()
{
if (!HookedList.Contains("CheckForGround"))
{
HookedList.Add("CheckForGround");
On.GlobControl.CheckForGround += CheckForGround;

}
}
internal static event Delegates.CheckForGround_BeforeArgs _beforeCheckForGround;
internal static event Delegates.CheckForGround_AfterArgs _afterCheckForGround;
private static bool CheckForGround(On.GlobControl.orig_CheckForGround orig,GlobControl self)
{
Delegates.Params_CheckForGround @params = new() 
{
self = self
};
if (_beforeCheckForGround != null)
{
foreach (Delegates.CheckForGround_BeforeArgs toInvoke in _beforeCheckForGround.GetInvocationList())
{
try
{
_beforeCheckForGround?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterCheckForGround != null)
{
foreach (Delegates.CheckForGround_AfterArgs toInvoke in _afterCheckForGround.GetInvocationList())
{
try
{
retVal = _afterCheckForGround.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public GlobControl self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<GlobControl> orig, GlobControl self);
public sealed class Params_OnEnable
{
public GlobControl self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<GlobControl> orig, GlobControl self);
public sealed class Params_Start
{
public GlobControl self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<GlobControl> orig, GlobControl self);
public sealed class Params_OnTriggerEnter2D
{
public GlobControl self;
public UnityEngine.Collider2D col;
}
public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);
public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);
public delegate void OnTriggerEnter2D_WithArgs (Action<GlobControl,  UnityEngine.Collider2D> orig, GlobControl self,  UnityEngine.Collider2D col);
public sealed class Params_Break
{
public GlobControl self;
}
public delegate void Break_BeforeArgs(Params_Break args);
public delegate System.Collections.IEnumerator Break_AfterArgs(Params_Break args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Break_WithArgs (Func<GlobControl, System.Collections.IEnumerator> orig, GlobControl self);
public sealed class Params_CheckForGround
{
public GlobControl self;
}
public delegate void CheckForGround_BeforeArgs(Params_CheckForGround args);
public delegate bool CheckForGround_AfterArgs(Params_CheckForGround args, bool ret);
public delegate bool CheckForGround_WithArgs (Func<GlobControl, bool> orig, GlobControl self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
{
add
{

HookHandler._beforeOnTriggerEnter2D += value;
HookHandler.HookOnTriggerEnter2D();
}
remove => HookHandler._beforeOnTriggerEnter2D -= value;
}
public static event Delegates.Break_BeforeArgs Break
{
add
{

HookHandler._beforeBreak += value;
HookHandler.HookBreak();
}
remove => HookHandler._beforeBreak -= value;
}
public static event Delegates.CheckForGround_BeforeArgs CheckForGround
{
add
{

HookHandler._beforeCheckForGround += value;
HookHandler.HookCheckForGround();
}
remove => HookHandler._beforeCheckForGround -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
{
add
{

HookHandler._afterOnTriggerEnter2D += value;
HookHandler.HookOnTriggerEnter2D();
}
remove => HookHandler._afterOnTriggerEnter2D -= value;
}
public static event Delegates.CheckForGround_AfterArgs CheckForGround
{
add
{

HookHandler._afterCheckForGround += value;
HookHandler.HookCheckForGround();
}
remove => HookHandler._afterCheckForGround -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.GlobControl.hook_Awake Awake
{
add => On.GlobControl.Awake += value;
remove => On.GlobControl.Awake -= value;
}
public static event On.GlobControl.hook_OnEnable OnEnable
{
add => On.GlobControl.OnEnable += value;
remove => On.GlobControl.OnEnable -= value;
}
public static event On.GlobControl.hook_Start Start
{
add => On.GlobControl.Start += value;
remove => On.GlobControl.Start -= value;
}
public static event On.GlobControl.hook_OnTriggerEnter2D OnTriggerEnter2D
{
add => On.GlobControl.OnTriggerEnter2D += value;
remove => On.GlobControl.OnTriggerEnter2D -= value;
}
public static event On.GlobControl.hook_Break Break
{
add => On.GlobControl.Break += value;
remove => On.GlobControl.Break -= value;
}
public static event On.GlobControl.hook_CheckForGround CheckForGround
{
add => On.GlobControl.CheckForGround += value;
remove => On.GlobControl.CheckForGround -= value;
}
}

}
