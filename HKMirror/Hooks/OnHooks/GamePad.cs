using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using XInputDotNetPure;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GamePad class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGamePad
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGetState()
        {
            if (!HookedList.Contains("GetState"))
            {
                HookedList.Add("GetState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamePad), "GetState", false), GetState);
            }
        }

        internal static event Delegates.GetState_BeforeArgs _beforeGetState;
        internal static event Delegates.GetState_NormalArgs _afterGetState;

        private static GamePadState GetState(Func<PlayerIndex, GamePadState> orig, PlayerIndex playerIndex)
        {
            Delegates.Params_GetState @params = new()
            {
                playerIndex = playerIndex
            };
            _beforeGetState?.Invoke(@params);
            playerIndex = @params.playerIndex;
            var retVal = orig(playerIndex);
            if (_afterGetState != null) retVal = _afterGetState.Invoke(@params);
            return retVal;
        }

        internal static void HookSetVibration()
        {
            if (!HookedList.Contains("SetVibration"))
            {
                HookedList.Add("SetVibration");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GamePad), "SetVibration", false), SetVibration);
            }
        }

        internal static event Delegates.SetVibration_BeforeArgs _beforeSetVibration;
        internal static event Delegates.SetVibration_NormalArgs _afterSetVibration;

        private static void SetVibration(Action<PlayerIndex, float, float> orig, PlayerIndex playerIndex,
            float leftMotor, float rightMotor)
        {
            Delegates.Params_SetVibration @params = new()
            {
                playerIndex = playerIndex, leftMotor = leftMotor, rightMotor = rightMotor
            };
            _beforeSetVibration?.Invoke(@params);
            playerIndex = @params.playerIndex;
            leftMotor = @params.leftMotor;
            rightMotor = @params.rightMotor;
            orig(playerIndex, leftMotor, rightMotor);
            if (_afterSetVibration != null) _afterSetVibration.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void GetState_BeforeArgs(Params_GetState args);

        public delegate GamePadState GetState_NormalArgs(Params_GetState args);

        public delegate void SetVibration_BeforeArgs(Params_SetVibration args);

        public delegate void SetVibration_NormalArgs(Params_SetVibration args);

        public sealed class Params_GetState
        {
            public PlayerIndex playerIndex;
        }

        public sealed class Params_SetVibration
        {
            public float leftMotor;
            public PlayerIndex playerIndex;
            public float rightMotor;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GetState_BeforeArgs GetState
        {
            add
            {
                HookHandler._beforeGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._beforeGetState -= value;
        }

        public static event Delegates.SetVibration_BeforeArgs SetVibration
        {
            add
            {
                HookHandler._beforeSetVibration += value;
                HookHandler.HookSetVibration();
            }
            remove => HookHandler._beforeSetVibration -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GetState_NormalArgs GetState
        {
            add
            {
                HookHandler._afterGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._afterGetState -= value;
        }

        public static event Delegates.SetVibration_NormalArgs SetVibration
        {
            add
            {
                HookHandler._afterSetVibration += value;
                HookHandler.HookSetVibration();
            }
            remove => HookHandler._afterSetVibration -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.GetState_NormalArgs GetState
        {
            add => HookEndpointManager.Add<Delegates.GetState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamePad), "GetState", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamePad), "GetState", false), value);
        }

        public static event Delegates.SetVibration_NormalArgs SetVibration
        {
            add => HookEndpointManager.Add<Delegates.SetVibration_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamePad), "SetVibration", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetVibration_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GamePad), "SetVibration", false), value);
        }
    }
}