using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUILayout class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUILayout
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ItemCount()
        {
            if (!HookedList.Contains("get_ItemCount"))
            {
                HookedList.Add("get_ItemCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUILayout), "get_ItemCount"), get_ItemCount);
            }
        }

        internal static event Delegates.get_ItemCount_BeforeArgs _beforeget_ItemCount;
        internal static event Delegates.get_ItemCount_NormalArgs _afterget_ItemCount;

        private static int get_ItemCount(Func<tk2dUILayout, int> orig, tk2dUILayout self)
        {
            Delegates.Params_get_ItemCount @params = new()
            {
                self = self
            };
            _beforeget_ItemCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ItemCount != null) retVal = _afterget_ItemCount.Invoke(@params);
            return retVal;
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.tk2dUILayout.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.tk2dUILayout.orig_Reset orig, tk2dUILayout self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookReshape()
        {
            if (!HookedList.Contains("Reshape"))
            {
                HookedList.Add("Reshape");
                On.tk2dUILayout.Reshape += Reshape;
            }
        }

        internal static event Delegates.Reshape_BeforeArgs _beforeReshape;
        internal static event Delegates.Reshape_NormalArgs _afterReshape;

        private static void Reshape(On.tk2dUILayout.orig_Reshape orig, tk2dUILayout self, Vector3 dMin, Vector3 dMax,
            bool updateChildren)
        {
            Delegates.Params_Reshape @params = new()
            {
                self = self, dMin = dMin, dMax = dMax, updateChildren = updateChildren
            };
            _beforeReshape?.Invoke(@params);
            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            updateChildren = @params.updateChildren;
            orig(self, dMin, dMax, updateChildren);
            if (_afterReshape != null) _afterReshape.Invoke(@params);
        }

        internal static void HookSetBounds()
        {
            if (!HookedList.Contains("SetBounds"))
            {
                HookedList.Add("SetBounds");
                On.tk2dUILayout.SetBounds += SetBounds;
            }
        }

        internal static event Delegates.SetBounds_BeforeArgs _beforeSetBounds;
        internal static event Delegates.SetBounds_NormalArgs _afterSetBounds;

        private static void SetBounds(On.tk2dUILayout.orig_SetBounds orig, tk2dUILayout self, Vector3 pMin,
            Vector3 pMax)
        {
            Delegates.Params_SetBounds @params = new()
            {
                self = self, pMin = pMin, pMax = pMax
            };
            _beforeSetBounds?.Invoke(@params);
            self = @params.self;
            pMin = @params.pMin;
            pMax = @params.pMax;
            orig(self, pMin, pMax);
            if (_afterSetBounds != null) _afterSetBounds.Invoke(@params);
        }

        internal static void HookGetMinBounds()
        {
            if (!HookedList.Contains("GetMinBounds"))
            {
                HookedList.Add("GetMinBounds");
                On.tk2dUILayout.GetMinBounds += GetMinBounds;
            }
        }

        internal static event Delegates.GetMinBounds_BeforeArgs _beforeGetMinBounds;
        internal static event Delegates.GetMinBounds_NormalArgs _afterGetMinBounds;

        private static Vector3 GetMinBounds(On.tk2dUILayout.orig_GetMinBounds orig, tk2dUILayout self)
        {
            Delegates.Params_GetMinBounds @params = new()
            {
                self = self
            };
            _beforeGetMinBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetMinBounds != null) retVal = _afterGetMinBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMaxBounds()
        {
            if (!HookedList.Contains("GetMaxBounds"))
            {
                HookedList.Add("GetMaxBounds");
                On.tk2dUILayout.GetMaxBounds += GetMaxBounds;
            }
        }

        internal static event Delegates.GetMaxBounds_BeforeArgs _beforeGetMaxBounds;
        internal static event Delegates.GetMaxBounds_NormalArgs _afterGetMaxBounds;

        private static Vector3 GetMaxBounds(On.tk2dUILayout.orig_GetMaxBounds orig, tk2dUILayout self)
        {
            Delegates.Params_GetMaxBounds @params = new()
            {
                self = self
            };
            _beforeGetMaxBounds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetMaxBounds != null) retVal = _afterGetMaxBounds.Invoke(@params);
            return retVal;
        }

        internal static void HookRefresh()
        {
            if (!HookedList.Contains("Refresh"))
            {
                HookedList.Add("Refresh");
                On.tk2dUILayout.Refresh += Refresh;
            }
        }

        internal static event Delegates.Refresh_BeforeArgs _beforeRefresh;
        internal static event Delegates.Refresh_NormalArgs _afterRefresh;

        private static void Refresh(On.tk2dUILayout.orig_Refresh orig, tk2dUILayout self)
        {
            Delegates.Params_Refresh @params = new()
            {
                self = self
            };
            _beforeRefresh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefresh != null) _afterRefresh.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_ItemCount_BeforeArgs(Params_get_ItemCount args);

        public delegate int get_ItemCount_NormalArgs(Params_get_ItemCount args);

        public delegate void GetMaxBounds_BeforeArgs(Params_GetMaxBounds args);

        public delegate Vector3 GetMaxBounds_NormalArgs(Params_GetMaxBounds args);

        public delegate void GetMinBounds_BeforeArgs(Params_GetMinBounds args);

        public delegate Vector3 GetMinBounds_NormalArgs(Params_GetMinBounds args);

        public delegate void Refresh_BeforeArgs(Params_Refresh args);

        public delegate void Refresh_NormalArgs(Params_Refresh args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void Reshape_BeforeArgs(Params_Reshape args);

        public delegate void Reshape_NormalArgs(Params_Reshape args);

        public delegate void SetBounds_BeforeArgs(Params_SetBounds args);

        public delegate void SetBounds_NormalArgs(Params_SetBounds args);

        public sealed class Params_get_ItemCount
        {
            public tk2dUILayout self;
        }

        public sealed class Params_Reset
        {
            public tk2dUILayout self;
        }

        public sealed class Params_Reshape
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dUILayout self;
            public bool updateChildren;
        }

        public sealed class Params_SetBounds
        {
            public Vector3 pMax;
            public Vector3 pMin;
            public tk2dUILayout self;
        }

        public sealed class Params_GetMinBounds
        {
            public tk2dUILayout self;
        }

        public sealed class Params_GetMaxBounds
        {
            public tk2dUILayout self;
        }

        public sealed class Params_Refresh
        {
            public tk2dUILayout self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ItemCount_BeforeArgs get_ItemCount
        {
            add
            {
                HookHandler._beforeget_ItemCount += value;
                HookHandler.Hookget_ItemCount();
            }
            remove => HookHandler._beforeget_ItemCount -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Reshape_BeforeArgs Reshape
        {
            add
            {
                HookHandler._beforeReshape += value;
                HookHandler.HookReshape();
            }
            remove => HookHandler._beforeReshape -= value;
        }

        public static event Delegates.SetBounds_BeforeArgs SetBounds
        {
            add
            {
                HookHandler._beforeSetBounds += value;
                HookHandler.HookSetBounds();
            }
            remove => HookHandler._beforeSetBounds -= value;
        }

        public static event Delegates.GetMinBounds_BeforeArgs GetMinBounds
        {
            add
            {
                HookHandler._beforeGetMinBounds += value;
                HookHandler.HookGetMinBounds();
            }
            remove => HookHandler._beforeGetMinBounds -= value;
        }

        public static event Delegates.GetMaxBounds_BeforeArgs GetMaxBounds
        {
            add
            {
                HookHandler._beforeGetMaxBounds += value;
                HookHandler.HookGetMaxBounds();
            }
            remove => HookHandler._beforeGetMaxBounds -= value;
        }

        public static event Delegates.Refresh_BeforeArgs Refresh
        {
            add
            {
                HookHandler._beforeRefresh += value;
                HookHandler.HookRefresh();
            }
            remove => HookHandler._beforeRefresh -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ItemCount_NormalArgs get_ItemCount
        {
            add
            {
                HookHandler._afterget_ItemCount += value;
                HookHandler.Hookget_ItemCount();
            }
            remove => HookHandler._afterget_ItemCount -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Reshape_NormalArgs Reshape
        {
            add
            {
                HookHandler._afterReshape += value;
                HookHandler.HookReshape();
            }
            remove => HookHandler._afterReshape -= value;
        }

        public static event Delegates.SetBounds_NormalArgs SetBounds
        {
            add
            {
                HookHandler._afterSetBounds += value;
                HookHandler.HookSetBounds();
            }
            remove => HookHandler._afterSetBounds -= value;
        }

        public static event Delegates.GetMinBounds_NormalArgs GetMinBounds
        {
            add
            {
                HookHandler._afterGetMinBounds += value;
                HookHandler.HookGetMinBounds();
            }
            remove => HookHandler._afterGetMinBounds -= value;
        }

        public static event Delegates.GetMaxBounds_NormalArgs GetMaxBounds
        {
            add
            {
                HookHandler._afterGetMaxBounds += value;
                HookHandler.HookGetMaxBounds();
            }
            remove => HookHandler._afterGetMaxBounds -= value;
        }

        public static event Delegates.Refresh_NormalArgs Refresh
        {
            add
            {
                HookHandler._afterRefresh += value;
                HookHandler.HookRefresh();
            }
            remove => HookHandler._afterRefresh -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ItemCount_NormalArgs get_ItemCount
        {
            add => HookEndpointManager.Add<Delegates.get_ItemCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUILayout), "get_ItemCount"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ItemCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUILayout), "get_ItemCount"), value);
        }

        public static event On.tk2dUILayout.hook_Reset Reset
        {
            add => On.tk2dUILayout.Reset += value;
            remove => On.tk2dUILayout.Reset -= value;
        }

        public static event On.tk2dUILayout.hook_Reshape Reshape
        {
            add => On.tk2dUILayout.Reshape += value;
            remove => On.tk2dUILayout.Reshape -= value;
        }

        public static event On.tk2dUILayout.hook_SetBounds SetBounds
        {
            add => On.tk2dUILayout.SetBounds += value;
            remove => On.tk2dUILayout.SetBounds -= value;
        }

        public static event On.tk2dUILayout.hook_GetMinBounds GetMinBounds
        {
            add => On.tk2dUILayout.GetMinBounds += value;
            remove => On.tk2dUILayout.GetMinBounds -= value;
        }

        public static event On.tk2dUILayout.hook_GetMaxBounds GetMaxBounds
        {
            add => On.tk2dUILayout.GetMaxBounds += value;
            remove => On.tk2dUILayout.GetMaxBounds -= value;
        }

        public static event On.tk2dUILayout.hook_Refresh Refresh
        {
            add => On.tk2dUILayout.Refresh += value;
            remove => On.tk2dUILayout.Refresh -= value;
        }
    }
}