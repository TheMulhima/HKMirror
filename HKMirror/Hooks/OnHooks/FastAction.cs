using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FastAction class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFastAction
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAdd()
        {
            if (!HookedList.Contains("Add"))
            {
                HookedList.Add("Add");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastAction), "Add"), Add);
            }
        }

        internal static event Delegates.Add_BeforeArgs _beforeAdd;
        internal static event Delegates.Add_NormalArgs _afterAdd;

        private static void Add(Action<FastAction, Action> orig, FastAction self, Action rhs)
        {
            Delegates.Params_Add @params = new()
            {
                self = self, rhs = rhs
            };
            _beforeAdd?.Invoke(@params);
            self = @params.self;
            rhs = @params.rhs;
            orig(self, rhs);
            if (_afterAdd != null) _afterAdd.Invoke(@params);
        }

        internal static void HookRemove()
        {
            if (!HookedList.Contains("Remove"))
            {
                HookedList.Add("Remove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastAction), "Remove"), Remove);
            }
        }

        internal static event Delegates.Remove_BeforeArgs _beforeRemove;
        internal static event Delegates.Remove_NormalArgs _afterRemove;

        private static void Remove(Action<FastAction, Action> orig, FastAction self, Action rhs)
        {
            Delegates.Params_Remove @params = new()
            {
                self = self, rhs = rhs
            };
            _beforeRemove?.Invoke(@params);
            self = @params.self;
            rhs = @params.rhs;
            orig(self, rhs);
            if (_afterRemove != null) _afterRemove.Invoke(@params);
        }

        internal static void HookCall()
        {
            if (!HookedList.Contains("Call"))
            {
                HookedList.Add("Call");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(FastAction), "Call"), Call);
            }
        }

        internal static event Delegates.Call_BeforeArgs _beforeCall;
        internal static event Delegates.Call_NormalArgs _afterCall;

        private static void Call(Action<FastAction> orig, FastAction self)
        {
            Delegates.Params_Call @params = new()
            {
                self = self
            };
            _beforeCall?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCall != null) _afterCall.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Add_BeforeArgs(Params_Add args);

        public delegate void Add_NormalArgs(Params_Add args);

        public delegate void Call_BeforeArgs(Params_Call args);

        public delegate void Call_NormalArgs(Params_Call args);

        public delegate void Remove_BeforeArgs(Params_Remove args);

        public delegate void Remove_NormalArgs(Params_Remove args);

        public sealed class Params_Add
        {
            public Action rhs;
            public FastAction self;
        }

        public sealed class Params_Remove
        {
            public Action rhs;
            public FastAction self;
        }

        public sealed class Params_Call
        {
            public FastAction self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Add_BeforeArgs Add
        {
            add
            {
                HookHandler._beforeAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._beforeAdd -= value;
        }

        public static event Delegates.Remove_BeforeArgs Remove
        {
            add
            {
                HookHandler._beforeRemove += value;
                HookHandler.HookRemove();
            }
            remove => HookHandler._beforeRemove -= value;
        }

        public static event Delegates.Call_BeforeArgs Call
        {
            add
            {
                HookHandler._beforeCall += value;
                HookHandler.HookCall();
            }
            remove => HookHandler._beforeCall -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Add_NormalArgs Add
        {
            add
            {
                HookHandler._afterAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._afterAdd -= value;
        }

        public static event Delegates.Remove_NormalArgs Remove
        {
            add
            {
                HookHandler._afterRemove += value;
                HookHandler.HookRemove();
            }
            remove => HookHandler._afterRemove -= value;
        }

        public static event Delegates.Call_NormalArgs Call
        {
            add
            {
                HookHandler._afterCall += value;
                HookHandler.HookCall();
            }
            remove => HookHandler._afterCall -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Add_NormalArgs Add
        {
            add => HookEndpointManager.Add<Delegates.Add_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastAction), "Add"), value);
            remove => HookEndpointManager.Remove<Delegates.Add_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastAction), "Add"), value);
        }

        public static event Delegates.Remove_NormalArgs Remove
        {
            add => HookEndpointManager.Add<Delegates.Remove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastAction), "Remove"), value);
            remove => HookEndpointManager.Remove<Delegates.Remove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastAction), "Remove"), value);
        }

        public static event Delegates.Call_NormalArgs Call
        {
            add => HookEndpointManager.Add<Delegates.Call_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastAction), "Call"), value);
            remove => HookEndpointManager.Remove<Delegates.Call_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(FastAction), "Call"), value);
        }
    }
}