namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ScrollBarHandle class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnScrollBarHandle
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.ScrollBarHandle.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.ScrollBarHandle.orig_Awake orig, ScrollBarHandle self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.ScrollBarHandle.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.ScrollBarHandle.orig_Start orig, ScrollBarHandle self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdatePosition()
        {
            if (!HookedList.Contains("UpdatePosition"))
            {
                HookedList.Add("UpdatePosition");
                On.ScrollBarHandle.UpdatePosition += UpdatePosition;
            }
        }

        internal static event Delegates.UpdatePosition_BeforeArgs _beforeUpdatePosition;
        internal static event Delegates.UpdatePosition_NormalArgs _afterUpdatePosition;

        private static void UpdatePosition(On.ScrollBarHandle.orig_UpdatePosition orig, ScrollBarHandle self,
            float value)
        {
            Delegates.Params_UpdatePosition @params = new()
            {
                self = self, value = value
            };
            _beforeUpdatePosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterUpdatePosition != null) _afterUpdatePosition.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UpdatePosition_BeforeArgs(Params_UpdatePosition args);

        public delegate void UpdatePosition_NormalArgs(Params_UpdatePosition args);

        public sealed class Params_Awake
        {
            public ScrollBarHandle self;
        }

        public sealed class Params_Start
        {
            public ScrollBarHandle self;
        }

        public sealed class Params_UpdatePosition
        {
            public ScrollBarHandle self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdatePosition_BeforeArgs UpdatePosition
        {
            add
            {
                HookHandler._beforeUpdatePosition += value;
                HookHandler.HookUpdatePosition();
            }
            remove => HookHandler._beforeUpdatePosition -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdatePosition_NormalArgs UpdatePosition
        {
            add
            {
                HookHandler._afterUpdatePosition += value;
                HookHandler.HookUpdatePosition();
            }
            remove => HookHandler._afterUpdatePosition -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.ScrollBarHandle.hook_Awake Awake
        {
            add => On.ScrollBarHandle.Awake += value;
            remove => On.ScrollBarHandle.Awake -= value;
        }

        public static event On.ScrollBarHandle.hook_Start Start
        {
            add => On.ScrollBarHandle.Start += value;
            remove => On.ScrollBarHandle.Start -= value;
        }

        public static event On.ScrollBarHandle.hook_UpdatePosition UpdatePosition
        {
            add => On.ScrollBarHandle.UpdatePosition += value;
            remove => On.ScrollBarHandle.UpdatePosition -= value;
        }
    }
}