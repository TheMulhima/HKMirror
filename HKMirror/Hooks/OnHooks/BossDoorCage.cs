namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossDoorCage class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossDoorCage
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BossDoorCage.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BossDoorCage.orig_Awake orig, BossDoorCage self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossDoorCage.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BossDoorCage.orig_Start orig, BossDoorCage self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUnlock()
        {
            if (!HookedList.Contains("Unlock"))
            {
                HookedList.Add("Unlock");
                On.BossDoorCage.Unlock += Unlock;
            }
        }

        internal static event Delegates.Unlock_BeforeArgs _beforeUnlock;
        internal static event Delegates.Unlock_NormalArgs _afterUnlock;

        private static void Unlock(On.BossDoorCage.orig_Unlock orig, BossDoorCage self)
        {
            Delegates.Params_Unlock @params = new()
            {
                self = self
            };
            _beforeUnlock?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnlock != null) _afterUnlock.Invoke(@params);
        }

        internal static void HookUnlockRoutine()
        {
            if (!HookedList.Contains("UnlockRoutine"))
            {
                HookedList.Add("UnlockRoutine");
                On.BossDoorCage.UnlockRoutine += UnlockRoutine;
            }
        }

        internal static event Delegates.UnlockRoutine_BeforeArgs _beforeUnlockRoutine;

        private static IEnumerator UnlockRoutine(On.BossDoorCage.orig_UnlockRoutine orig, BossDoorCage self)
        {
            Delegates.Params_UnlockRoutine @params = new()
            {
                self = self
            };
            _beforeUnlockRoutine?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookStartShakeLock()
        {
            if (!HookedList.Contains("StartShakeLock"))
            {
                HookedList.Add("StartShakeLock");
                On.BossDoorCage.StartShakeLock += StartShakeLock;
            }
        }

        internal static event Delegates.StartShakeLock_BeforeArgs _beforeStartShakeLock;
        internal static event Delegates.StartShakeLock_NormalArgs _afterStartShakeLock;

        private static void StartShakeLock(On.BossDoorCage.orig_StartShakeLock orig, BossDoorCage self)
        {
            Delegates.Params_StartShakeLock @params = new()
            {
                self = self
            };
            _beforeStartShakeLock?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartShakeLock != null) _afterStartShakeLock.Invoke(@params);
        }

        internal static void HookStopShakeLock()
        {
            if (!HookedList.Contains("StopShakeLock"))
            {
                HookedList.Add("StopShakeLock");
                On.BossDoorCage.StopShakeLock += StopShakeLock;
            }
        }

        internal static event Delegates.StopShakeLock_BeforeArgs _beforeStopShakeLock;
        internal static event Delegates.StopShakeLock_NormalArgs _afterStopShakeLock;

        private static void StopShakeLock(On.BossDoorCage.orig_StopShakeLock orig, BossDoorCage self)
        {
            Delegates.Params_StopShakeLock @params = new()
            {
                self = self
            };
            _beforeStopShakeLock?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopShakeLock != null) _afterStopShakeLock.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StartShakeLock_BeforeArgs(Params_StartShakeLock args);

        public delegate void StartShakeLock_NormalArgs(Params_StartShakeLock args);

        public delegate void StopShakeLock_BeforeArgs(Params_StopShakeLock args);

        public delegate void StopShakeLock_NormalArgs(Params_StopShakeLock args);

        public delegate void Unlock_BeforeArgs(Params_Unlock args);

        public delegate void Unlock_NormalArgs(Params_Unlock args);

        public delegate void UnlockRoutine_BeforeArgs(Params_UnlockRoutine args);

        public delegate IEnumerator UnlockRoutine_NormalArgs(Params_UnlockRoutine args);

        public sealed class Params_Awake
        {
            public BossDoorCage self;
        }

        public sealed class Params_Start
        {
            public BossDoorCage self;
        }

        public sealed class Params_Unlock
        {
            public BossDoorCage self;
        }

        public sealed class Params_UnlockRoutine
        {
            public BossDoorCage self;
        }

        public sealed class Params_StartShakeLock
        {
            public BossDoorCage self;
        }

        public sealed class Params_StopShakeLock
        {
            public BossDoorCage self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Unlock_BeforeArgs Unlock
        {
            add
            {
                HookHandler._beforeUnlock += value;
                HookHandler.HookUnlock();
            }
            remove => HookHandler._beforeUnlock -= value;
        }

        public static event Delegates.UnlockRoutine_BeforeArgs UnlockRoutine
        {
            add
            {
                HookHandler._beforeUnlockRoutine += value;
                HookHandler.HookUnlockRoutine();
            }
            remove => HookHandler._beforeUnlockRoutine -= value;
        }

        public static event Delegates.StartShakeLock_BeforeArgs StartShakeLock
        {
            add
            {
                HookHandler._beforeStartShakeLock += value;
                HookHandler.HookStartShakeLock();
            }
            remove => HookHandler._beforeStartShakeLock -= value;
        }

        public static event Delegates.StopShakeLock_BeforeArgs StopShakeLock
        {
            add
            {
                HookHandler._beforeStopShakeLock += value;
                HookHandler.HookStopShakeLock();
            }
            remove => HookHandler._beforeStopShakeLock -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Unlock_NormalArgs Unlock
        {
            add
            {
                HookHandler._afterUnlock += value;
                HookHandler.HookUnlock();
            }
            remove => HookHandler._afterUnlock -= value;
        }

        public static event Delegates.StartShakeLock_NormalArgs StartShakeLock
        {
            add
            {
                HookHandler._afterStartShakeLock += value;
                HookHandler.HookStartShakeLock();
            }
            remove => HookHandler._afterStartShakeLock -= value;
        }

        public static event Delegates.StopShakeLock_NormalArgs StopShakeLock
        {
            add
            {
                HookHandler._afterStopShakeLock += value;
                HookHandler.HookStopShakeLock();
            }
            remove => HookHandler._afterStopShakeLock -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossDoorCage.hook_Awake Awake
        {
            add => On.BossDoorCage.Awake += value;
            remove => On.BossDoorCage.Awake -= value;
        }

        public static event On.BossDoorCage.hook_Start Start
        {
            add => On.BossDoorCage.Start += value;
            remove => On.BossDoorCage.Start -= value;
        }

        public static event On.BossDoorCage.hook_Unlock Unlock
        {
            add => On.BossDoorCage.Unlock += value;
            remove => On.BossDoorCage.Unlock -= value;
        }

        public static event On.BossDoorCage.hook_UnlockRoutine UnlockRoutine
        {
            add => On.BossDoorCage.UnlockRoutine += value;
            remove => On.BossDoorCage.UnlockRoutine -= value;
        }

        public static event On.BossDoorCage.hook_StartShakeLock StartShakeLock
        {
            add => On.BossDoorCage.StartShakeLock += value;
            remove => On.BossDoorCage.StartShakeLock -= value;
        }

        public static event On.BossDoorCage.hook_StopShakeLock StopShakeLock
        {
            add => On.BossDoorCage.StopShakeLock += value;
            remove => On.BossDoorCage.StopShakeLock -= value;
        }
    }
}