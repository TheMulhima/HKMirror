using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuFrameCapSetting class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuFrameCapSetting
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnMove"), OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_NormalArgs _afterOnMove;

        private static void OnMove(Action<MenuFrameCapSetting, AxisEventData> orig, MenuFrameCapSetting self,
            AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            _beforeOnMove?.Invoke(@params);
            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null) _afterOnMove.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuFrameCapSetting, PointerEventData> orig, MenuFrameCapSetting self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookRefreshControls()
        {
            if (!HookedList.Contains("RefreshControls"))
            {
                HookedList.Add("RefreshControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "RefreshControls"),
                    RefreshControls);
            }
        }

        internal static event Delegates.RefreshControls_BeforeArgs _beforeRefreshControls;
        internal static event Delegates.RefreshControls_NormalArgs _afterRefreshControls;

        private static void RefreshControls(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_RefreshControls @params = new()
            {
                self = self
            };
            _beforeRefreshControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshControls != null) _afterRefreshControls.Invoke(@params);
        }

        internal static void HookDisableFrameCapSetting()
        {
            if (!HookedList.Contains("DisableFrameCapSetting"))
            {
                HookedList.Add("DisableFrameCapSetting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "DisableFrameCapSetting"),
                    DisableFrameCapSetting);
            }
        }

        internal static event Delegates.DisableFrameCapSetting_BeforeArgs _beforeDisableFrameCapSetting;
        internal static event Delegates.DisableFrameCapSetting_NormalArgs _afterDisableFrameCapSetting;

        private static void DisableFrameCapSetting(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_DisableFrameCapSetting @params = new()
            {
                self = self
            };
            _beforeDisableFrameCapSetting?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDisableFrameCapSetting != null) _afterDisableFrameCapSetting.Invoke(@params);
        }

        internal static void HookApplyValueFromGameSettings()
        {
            if (!HookedList.Contains("ApplyValueFromGameSettings"))
            {
                HookedList.Add("ApplyValueFromGameSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "ApplyValueFromGameSettings"),
                    ApplyValueFromGameSettings);
            }
        }

        internal static event Delegates.ApplyValueFromGameSettings_BeforeArgs _beforeApplyValueFromGameSettings;
        internal static event Delegates.ApplyValueFromGameSettings_NormalArgs _afterApplyValueFromGameSettings;

        private static void ApplyValueFromGameSettings(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_ApplyValueFromGameSettings @params = new()
            {
                self = self
            };
            _beforeApplyValueFromGameSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterApplyValueFromGameSettings != null) _afterApplyValueFromGameSettings.Invoke(@params);
        }

        internal static void HookUpdateFrameCapSetting()
        {
            if (!HookedList.Contains("UpdateFrameCapSetting"))
            {
                HookedList.Add("UpdateFrameCapSetting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "UpdateFrameCapSetting"),
                    UpdateFrameCapSetting);
            }
        }

        internal static event Delegates.UpdateFrameCapSetting_BeforeArgs _beforeUpdateFrameCapSetting;
        internal static event Delegates.UpdateFrameCapSetting_NormalArgs _afterUpdateFrameCapSetting;

        private static void UpdateFrameCapSetting(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_UpdateFrameCapSetting @params = new()
            {
                self = self
            };
            _beforeUpdateFrameCapSetting?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateFrameCapSetting != null) _afterUpdateFrameCapSetting.Invoke(@params);
        }

        internal static void HookRefreshCurrentIndex()
        {
            if (!HookedList.Contains("RefreshCurrentIndex"))
            {
                HookedList.Add("RefreshCurrentIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "RefreshCurrentIndex"),
                    RefreshCurrentIndex);
            }
        }

        internal static event Delegates.RefreshCurrentIndex_BeforeArgs _beforeRefreshCurrentIndex;
        internal static event Delegates.RefreshCurrentIndex_NormalArgs _afterRefreshCurrentIndex;

        private static void RefreshCurrentIndex(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_RefreshCurrentIndex @params = new()
            {
                self = self
            };
            _beforeRefreshCurrentIndex?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshCurrentIndex != null) _afterRefreshCurrentIndex.Invoke(@params);
        }

        internal static void HookPushUpdateOptionList()
        {
            if (!HookedList.Contains("PushUpdateOptionList"))
            {
                HookedList.Add("PushUpdateOptionList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "PushUpdateOptionList"),
                    PushUpdateOptionList);
            }
        }

        internal static event Delegates.PushUpdateOptionList_BeforeArgs _beforePushUpdateOptionList;
        internal static event Delegates.PushUpdateOptionList_NormalArgs _afterPushUpdateOptionList;

        private static void PushUpdateOptionList(Action<MenuFrameCapSetting> orig, MenuFrameCapSetting self)
        {
            Delegates.Params_PushUpdateOptionList @params = new()
            {
                self = self
            };
            _beforePushUpdateOptionList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPushUpdateOptionList != null) _afterPushUpdateOptionList.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyValueFromGameSettings_BeforeArgs(Params_ApplyValueFromGameSettings args);

        public delegate void ApplyValueFromGameSettings_NormalArgs(Params_ApplyValueFromGameSettings args);

        public delegate void DisableFrameCapSetting_BeforeArgs(Params_DisableFrameCapSetting args);

        public delegate void DisableFrameCapSetting_NormalArgs(Params_DisableFrameCapSetting args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_NormalArgs(Params_OnMove args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void PushUpdateOptionList_BeforeArgs(Params_PushUpdateOptionList args);

        public delegate void PushUpdateOptionList_NormalArgs(Params_PushUpdateOptionList args);

        public delegate void RefreshControls_BeforeArgs(Params_RefreshControls args);

        public delegate void RefreshControls_NormalArgs(Params_RefreshControls args);

        public delegate void RefreshCurrentIndex_BeforeArgs(Params_RefreshCurrentIndex args);

        public delegate void RefreshCurrentIndex_NormalArgs(Params_RefreshCurrentIndex args);

        public delegate void UpdateFrameCapSetting_BeforeArgs(Params_UpdateFrameCapSetting args);

        public delegate void UpdateFrameCapSetting_NormalArgs(Params_UpdateFrameCapSetting args);

        public sealed class Params_OnEnable
        {
            public MenuFrameCapSetting self;
        }

        public sealed class Params_OnMove
        {
            public AxisEventData move;
            public MenuFrameCapSetting self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuFrameCapSetting self;
        }

        public sealed class Params_RefreshControls
        {
            public MenuFrameCapSetting self;
        }

        public sealed class Params_DisableFrameCapSetting
        {
            public MenuFrameCapSetting self;
        }

        public sealed class Params_ApplyValueFromGameSettings
        {
            public MenuFrameCapSetting self;
        }

        public sealed class Params_UpdateFrameCapSetting
        {
            public MenuFrameCapSetting self;
        }

        public sealed class Params_RefreshCurrentIndex
        {
            public MenuFrameCapSetting self;
        }

        public sealed class Params_PushUpdateOptionList
        {
            public MenuFrameCapSetting self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.RefreshControls_BeforeArgs RefreshControls
        {
            add
            {
                HookHandler._beforeRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._beforeRefreshControls -= value;
        }

        public static event Delegates.DisableFrameCapSetting_BeforeArgs DisableFrameCapSetting
        {
            add
            {
                HookHandler._beforeDisableFrameCapSetting += value;
                HookHandler.HookDisableFrameCapSetting();
            }
            remove => HookHandler._beforeDisableFrameCapSetting -= value;
        }

        public static event Delegates.ApplyValueFromGameSettings_BeforeArgs ApplyValueFromGameSettings
        {
            add
            {
                HookHandler._beforeApplyValueFromGameSettings += value;
                HookHandler.HookApplyValueFromGameSettings();
            }
            remove => HookHandler._beforeApplyValueFromGameSettings -= value;
        }

        public static event Delegates.UpdateFrameCapSetting_BeforeArgs UpdateFrameCapSetting
        {
            add
            {
                HookHandler._beforeUpdateFrameCapSetting += value;
                HookHandler.HookUpdateFrameCapSetting();
            }
            remove => HookHandler._beforeUpdateFrameCapSetting -= value;
        }

        public static event Delegates.RefreshCurrentIndex_BeforeArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._beforeRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._beforeRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_BeforeArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._beforePushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._beforePushUpdateOptionList -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.RefreshControls_NormalArgs RefreshControls
        {
            add
            {
                HookHandler._afterRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._afterRefreshControls -= value;
        }

        public static event Delegates.DisableFrameCapSetting_NormalArgs DisableFrameCapSetting
        {
            add
            {
                HookHandler._afterDisableFrameCapSetting += value;
                HookHandler.HookDisableFrameCapSetting();
            }
            remove => HookHandler._afterDisableFrameCapSetting -= value;
        }

        public static event Delegates.ApplyValueFromGameSettings_NormalArgs ApplyValueFromGameSettings
        {
            add
            {
                HookHandler._afterApplyValueFromGameSettings += value;
                HookHandler.HookApplyValueFromGameSettings();
            }
            remove => HookHandler._afterApplyValueFromGameSettings -= value;
        }

        public static event Delegates.UpdateFrameCapSetting_NormalArgs UpdateFrameCapSetting
        {
            add
            {
                HookHandler._afterUpdateFrameCapSetting += value;
                HookHandler.HookUpdateFrameCapSetting();
            }
            remove => HookHandler._afterUpdateFrameCapSetting -= value;
        }

        public static event Delegates.RefreshCurrentIndex_NormalArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._afterRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._afterRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_NormalArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._afterPushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._afterPushUpdateOptionList -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnEnable"), value);
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnMove"), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnMove"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "OnPointerClick"), value);
        }

        public static event Delegates.RefreshControls_NormalArgs RefreshControls
        {
            add => HookEndpointManager.Add<Delegates.RefreshControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "RefreshControls"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "RefreshControls"), value);
        }

        public static event Delegates.DisableFrameCapSetting_NormalArgs DisableFrameCapSetting
        {
            add => HookEndpointManager.Add<Delegates.DisableFrameCapSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "DisableFrameCapSetting"), value);
            remove => HookEndpointManager.Remove<Delegates.DisableFrameCapSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "DisableFrameCapSetting"), value);
        }

        public static event Delegates.ApplyValueFromGameSettings_NormalArgs ApplyValueFromGameSettings
        {
            add => HookEndpointManager.Add<Delegates.ApplyValueFromGameSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "ApplyValueFromGameSettings"), value);
            remove => HookEndpointManager.Remove<Delegates.ApplyValueFromGameSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "ApplyValueFromGameSettings"), value);
        }

        public static event Delegates.UpdateFrameCapSetting_NormalArgs UpdateFrameCapSetting
        {
            add => HookEndpointManager.Add<Delegates.UpdateFrameCapSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "UpdateFrameCapSetting"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateFrameCapSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "UpdateFrameCapSetting"), value);
        }

        public static event Delegates.RefreshCurrentIndex_NormalArgs RefreshCurrentIndex
        {
            add => HookEndpointManager.Add<Delegates.RefreshCurrentIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "RefreshCurrentIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshCurrentIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "RefreshCurrentIndex"), value);
        }

        public static event Delegates.PushUpdateOptionList_NormalArgs PushUpdateOptionList
        {
            add => HookEndpointManager.Add<Delegates.PushUpdateOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "PushUpdateOptionList"), value);
            remove => HookEndpointManager.Remove<Delegates.PushUpdateOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuFrameCapSetting), "PushUpdateOptionList"), value);
        }
    }
}