using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for MenuFrameCapSetting class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuFrameCapSetting
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnEnable", true), OnEnable);

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnMove()
{
if (!HookedList.Contains("OnMove"))
{
HookedList.Add("OnMove");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnMove", true), OnMove);

}
}
internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
internal static event Delegates.OnMove_AfterArgs _afterOnMove;
private static void OnMove(Action<UnityEngine.UI.MenuFrameCapSetting,  UnityEngine.EventSystems.AxisEventData> orig, UnityEngine.UI.MenuFrameCapSetting self,  UnityEngine.EventSystems.AxisEventData move)
{
Delegates.Params_OnMove @params = new() 
{
self = self
, move = move
};
if (_beforeOnMove != null)
{
foreach (Delegates.OnMove_BeforeArgs toInvoke in _beforeOnMove.GetInvocationList())
{
try
{
_beforeOnMove?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
move = @params.move;
orig(self, move);
if (_afterOnMove != null)
{
foreach (Delegates.OnMove_AfterArgs toInvoke in _afterOnMove.GetInvocationList())
{
try
{
_afterOnMove.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPointerClick()
{
if (!HookedList.Contains("OnPointerClick"))
{
HookedList.Add("OnPointerClick");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnPointerClick", true), OnPointerClick);

}
}
internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;
private static void OnPointerClick(Action<UnityEngine.UI.MenuFrameCapSetting,  UnityEngine.EventSystems.PointerEventData> orig, UnityEngine.UI.MenuFrameCapSetting self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerClick @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
{
try
{
_beforeOnPointerClick?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerClick != null)
{
foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
{
try
{
_afterOnPointerClick.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRefreshControls()
{
if (!HookedList.Contains("RefreshControls"))
{
HookedList.Add("RefreshControls");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "RefreshControls", true), RefreshControls);

}
}
internal static event Delegates.RefreshControls_BeforeArgs _beforeRefreshControls;
internal static event Delegates.RefreshControls_AfterArgs _afterRefreshControls;
private static void RefreshControls(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_RefreshControls @params = new() 
{
self = self
};
if (_beforeRefreshControls != null)
{
foreach (Delegates.RefreshControls_BeforeArgs toInvoke in _beforeRefreshControls.GetInvocationList())
{
try
{
_beforeRefreshControls?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRefreshControls != null)
{
foreach (Delegates.RefreshControls_AfterArgs toInvoke in _afterRefreshControls.GetInvocationList())
{
try
{
_afterRefreshControls.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDisableFrameCapSetting()
{
if (!HookedList.Contains("DisableFrameCapSetting"))
{
HookedList.Add("DisableFrameCapSetting");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "DisableFrameCapSetting", true), DisableFrameCapSetting);

}
}
internal static event Delegates.DisableFrameCapSetting_BeforeArgs _beforeDisableFrameCapSetting;
internal static event Delegates.DisableFrameCapSetting_AfterArgs _afterDisableFrameCapSetting;
private static void DisableFrameCapSetting(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_DisableFrameCapSetting @params = new() 
{
self = self
};
if (_beforeDisableFrameCapSetting != null)
{
foreach (Delegates.DisableFrameCapSetting_BeforeArgs toInvoke in _beforeDisableFrameCapSetting.GetInvocationList())
{
try
{
_beforeDisableFrameCapSetting?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDisableFrameCapSetting != null)
{
foreach (Delegates.DisableFrameCapSetting_AfterArgs toInvoke in _afterDisableFrameCapSetting.GetInvocationList())
{
try
{
_afterDisableFrameCapSetting.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookApplyValueFromGameSettings()
{
if (!HookedList.Contains("ApplyValueFromGameSettings"))
{
HookedList.Add("ApplyValueFromGameSettings");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "ApplyValueFromGameSettings", true), ApplyValueFromGameSettings);

}
}
internal static event Delegates.ApplyValueFromGameSettings_BeforeArgs _beforeApplyValueFromGameSettings;
internal static event Delegates.ApplyValueFromGameSettings_AfterArgs _afterApplyValueFromGameSettings;
private static void ApplyValueFromGameSettings(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_ApplyValueFromGameSettings @params = new() 
{
self = self
};
if (_beforeApplyValueFromGameSettings != null)
{
foreach (Delegates.ApplyValueFromGameSettings_BeforeArgs toInvoke in _beforeApplyValueFromGameSettings.GetInvocationList())
{
try
{
_beforeApplyValueFromGameSettings?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterApplyValueFromGameSettings != null)
{
foreach (Delegates.ApplyValueFromGameSettings_AfterArgs toInvoke in _afterApplyValueFromGameSettings.GetInvocationList())
{
try
{
_afterApplyValueFromGameSettings.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateFrameCapSetting()
{
if (!HookedList.Contains("UpdateFrameCapSetting"))
{
HookedList.Add("UpdateFrameCapSetting");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "UpdateFrameCapSetting", true), UpdateFrameCapSetting);

}
}
internal static event Delegates.UpdateFrameCapSetting_BeforeArgs _beforeUpdateFrameCapSetting;
internal static event Delegates.UpdateFrameCapSetting_AfterArgs _afterUpdateFrameCapSetting;
private static void UpdateFrameCapSetting(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_UpdateFrameCapSetting @params = new() 
{
self = self
};
if (_beforeUpdateFrameCapSetting != null)
{
foreach (Delegates.UpdateFrameCapSetting_BeforeArgs toInvoke in _beforeUpdateFrameCapSetting.GetInvocationList())
{
try
{
_beforeUpdateFrameCapSetting?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateFrameCapSetting != null)
{
foreach (Delegates.UpdateFrameCapSetting_AfterArgs toInvoke in _afterUpdateFrameCapSetting.GetInvocationList())
{
try
{
_afterUpdateFrameCapSetting.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRefreshCurrentIndex()
{
if (!HookedList.Contains("RefreshCurrentIndex"))
{
HookedList.Add("RefreshCurrentIndex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "RefreshCurrentIndex", true), RefreshCurrentIndex);

}
}
internal static event Delegates.RefreshCurrentIndex_BeforeArgs _beforeRefreshCurrentIndex;
internal static event Delegates.RefreshCurrentIndex_AfterArgs _afterRefreshCurrentIndex;
private static void RefreshCurrentIndex(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_RefreshCurrentIndex @params = new() 
{
self = self
};
if (_beforeRefreshCurrentIndex != null)
{
foreach (Delegates.RefreshCurrentIndex_BeforeArgs toInvoke in _beforeRefreshCurrentIndex.GetInvocationList())
{
try
{
_beforeRefreshCurrentIndex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRefreshCurrentIndex != null)
{
foreach (Delegates.RefreshCurrentIndex_AfterArgs toInvoke in _afterRefreshCurrentIndex.GetInvocationList())
{
try
{
_afterRefreshCurrentIndex.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPushUpdateOptionList()
{
if (!HookedList.Contains("PushUpdateOptionList"))
{
HookedList.Add("PushUpdateOptionList");
new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "PushUpdateOptionList", true), PushUpdateOptionList);

}
}
internal static event Delegates.PushUpdateOptionList_BeforeArgs _beforePushUpdateOptionList;
internal static event Delegates.PushUpdateOptionList_AfterArgs _afterPushUpdateOptionList;
private static void PushUpdateOptionList(Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self)
{
Delegates.Params_PushUpdateOptionList @params = new() 
{
self = self
};
if (_beforePushUpdateOptionList != null)
{
foreach (Delegates.PushUpdateOptionList_BeforeArgs toInvoke in _beforePushUpdateOptionList.GetInvocationList())
{
try
{
_beforePushUpdateOptionList?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPushUpdateOptionList != null)
{
foreach (Delegates.PushUpdateOptionList_AfterArgs toInvoke in _afterPushUpdateOptionList.GetInvocationList())
{
try
{
_afterPushUpdateOptionList.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnEnable
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
public sealed class Params_OnMove
{
public UnityEngine.UI.MenuFrameCapSetting self;
public UnityEngine.EventSystems.AxisEventData move;
}
public delegate void OnMove_BeforeArgs(Params_OnMove args);
public delegate void OnMove_AfterArgs(Params_OnMove args);
public delegate void OnMove_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting,  UnityEngine.EventSystems.AxisEventData> orig, UnityEngine.UI.MenuFrameCapSetting self,  UnityEngine.EventSystems.AxisEventData move);
public sealed class Params_OnPointerClick
{
public UnityEngine.UI.MenuFrameCapSetting self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);
public delegate void OnPointerClick_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting,  UnityEngine.EventSystems.PointerEventData> orig, UnityEngine.UI.MenuFrameCapSetting self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_RefreshControls
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void RefreshControls_BeforeArgs(Params_RefreshControls args);
public delegate void RefreshControls_AfterArgs(Params_RefreshControls args);
public delegate void RefreshControls_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
public sealed class Params_DisableFrameCapSetting
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void DisableFrameCapSetting_BeforeArgs(Params_DisableFrameCapSetting args);
public delegate void DisableFrameCapSetting_AfterArgs(Params_DisableFrameCapSetting args);
public delegate void DisableFrameCapSetting_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
public sealed class Params_ApplyValueFromGameSettings
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void ApplyValueFromGameSettings_BeforeArgs(Params_ApplyValueFromGameSettings args);
public delegate void ApplyValueFromGameSettings_AfterArgs(Params_ApplyValueFromGameSettings args);
public delegate void ApplyValueFromGameSettings_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
public sealed class Params_UpdateFrameCapSetting
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void UpdateFrameCapSetting_BeforeArgs(Params_UpdateFrameCapSetting args);
public delegate void UpdateFrameCapSetting_AfterArgs(Params_UpdateFrameCapSetting args);
public delegate void UpdateFrameCapSetting_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
public sealed class Params_RefreshCurrentIndex
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void RefreshCurrentIndex_BeforeArgs(Params_RefreshCurrentIndex args);
public delegate void RefreshCurrentIndex_AfterArgs(Params_RefreshCurrentIndex args);
public delegate void RefreshCurrentIndex_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
public sealed class Params_PushUpdateOptionList
{
public UnityEngine.UI.MenuFrameCapSetting self;
}
public delegate void PushUpdateOptionList_BeforeArgs(Params_PushUpdateOptionList args);
public delegate void PushUpdateOptionList_AfterArgs(Params_PushUpdateOptionList args);
public delegate void PushUpdateOptionList_WithArgs (Action<UnityEngine.UI.MenuFrameCapSetting> orig, UnityEngine.UI.MenuFrameCapSetting self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnMove_BeforeArgs OnMove
{
add
{

HookHandler._beforeOnMove += value;
HookHandler.HookOnMove();
}
remove => HookHandler._beforeOnMove -= value;
}
public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
{
add
{

HookHandler._beforeOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._beforeOnPointerClick -= value;
}
public static event Delegates.RefreshControls_BeforeArgs RefreshControls
{
add
{

HookHandler._beforeRefreshControls += value;
HookHandler.HookRefreshControls();
}
remove => HookHandler._beforeRefreshControls -= value;
}
public static event Delegates.DisableFrameCapSetting_BeforeArgs DisableFrameCapSetting
{
add
{

HookHandler._beforeDisableFrameCapSetting += value;
HookHandler.HookDisableFrameCapSetting();
}
remove => HookHandler._beforeDisableFrameCapSetting -= value;
}
public static event Delegates.ApplyValueFromGameSettings_BeforeArgs ApplyValueFromGameSettings
{
add
{

HookHandler._beforeApplyValueFromGameSettings += value;
HookHandler.HookApplyValueFromGameSettings();
}
remove => HookHandler._beforeApplyValueFromGameSettings -= value;
}
public static event Delegates.UpdateFrameCapSetting_BeforeArgs UpdateFrameCapSetting
{
add
{

HookHandler._beforeUpdateFrameCapSetting += value;
HookHandler.HookUpdateFrameCapSetting();
}
remove => HookHandler._beforeUpdateFrameCapSetting -= value;
}
public static event Delegates.RefreshCurrentIndex_BeforeArgs RefreshCurrentIndex
{
add
{

HookHandler._beforeRefreshCurrentIndex += value;
HookHandler.HookRefreshCurrentIndex();
}
remove => HookHandler._beforeRefreshCurrentIndex -= value;
}
public static event Delegates.PushUpdateOptionList_BeforeArgs PushUpdateOptionList
{
add
{

HookHandler._beforePushUpdateOptionList += value;
HookHandler.HookPushUpdateOptionList();
}
remove => HookHandler._beforePushUpdateOptionList -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnMove_AfterArgs OnMove
{
add
{

HookHandler._afterOnMove += value;
HookHandler.HookOnMove();
}
remove => HookHandler._afterOnMove -= value;
}
public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
{
add
{

HookHandler._afterOnPointerClick += value;
HookHandler.HookOnPointerClick();
}
remove => HookHandler._afterOnPointerClick -= value;
}
public static event Delegates.RefreshControls_AfterArgs RefreshControls
{
add
{

HookHandler._afterRefreshControls += value;
HookHandler.HookRefreshControls();
}
remove => HookHandler._afterRefreshControls -= value;
}
public static event Delegates.DisableFrameCapSetting_AfterArgs DisableFrameCapSetting
{
add
{

HookHandler._afterDisableFrameCapSetting += value;
HookHandler.HookDisableFrameCapSetting();
}
remove => HookHandler._afterDisableFrameCapSetting -= value;
}
public static event Delegates.ApplyValueFromGameSettings_AfterArgs ApplyValueFromGameSettings
{
add
{

HookHandler._afterApplyValueFromGameSettings += value;
HookHandler.HookApplyValueFromGameSettings();
}
remove => HookHandler._afterApplyValueFromGameSettings -= value;
}
public static event Delegates.UpdateFrameCapSetting_AfterArgs UpdateFrameCapSetting
{
add
{

HookHandler._afterUpdateFrameCapSetting += value;
HookHandler.HookUpdateFrameCapSetting();
}
remove => HookHandler._afterUpdateFrameCapSetting -= value;
}
public static event Delegates.RefreshCurrentIndex_AfterArgs RefreshCurrentIndex
{
add
{

HookHandler._afterRefreshCurrentIndex += value;
HookHandler.HookRefreshCurrentIndex();
}
remove => HookHandler._afterRefreshCurrentIndex -= value;
}
public static event Delegates.PushUpdateOptionList_AfterArgs PushUpdateOptionList
{
add
{

HookHandler._afterPushUpdateOptionList += value;
HookHandler.HookPushUpdateOptionList();
}
remove => HookHandler._afterPushUpdateOptionList -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.OnEnable_WithArgs OnEnable
{
add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnEnable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnEnable", true), value);
}
public static event Delegates.OnMove_WithArgs OnMove
{
add => HookEndpointManager.Add<Delegates.OnMove_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnMove", true), value);
remove => HookEndpointManager.Remove<Delegates.OnMove_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnMove", true), value);
}
public static event Delegates.OnPointerClick_WithArgs OnPointerClick
{
add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnPointerClick", true), value);
remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "OnPointerClick", true), value);
}
public static event Delegates.RefreshControls_WithArgs RefreshControls
{
add => HookEndpointManager.Add<Delegates.RefreshControls_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "RefreshControls", true), value);
remove => HookEndpointManager.Remove<Delegates.RefreshControls_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "RefreshControls", true), value);
}
public static event Delegates.DisableFrameCapSetting_WithArgs DisableFrameCapSetting
{
add => HookEndpointManager.Add<Delegates.DisableFrameCapSetting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "DisableFrameCapSetting", true), value);
remove => HookEndpointManager.Remove<Delegates.DisableFrameCapSetting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "DisableFrameCapSetting", true), value);
}
public static event Delegates.ApplyValueFromGameSettings_WithArgs ApplyValueFromGameSettings
{
add => HookEndpointManager.Add<Delegates.ApplyValueFromGameSettings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "ApplyValueFromGameSettings", true), value);
remove => HookEndpointManager.Remove<Delegates.ApplyValueFromGameSettings_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "ApplyValueFromGameSettings", true), value);
}
public static event Delegates.UpdateFrameCapSetting_WithArgs UpdateFrameCapSetting
{
add => HookEndpointManager.Add<Delegates.UpdateFrameCapSetting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "UpdateFrameCapSetting", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateFrameCapSetting_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "UpdateFrameCapSetting", true), value);
}
public static event Delegates.RefreshCurrentIndex_WithArgs RefreshCurrentIndex
{
add => HookEndpointManager.Add<Delegates.RefreshCurrentIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "RefreshCurrentIndex", true), value);
remove => HookEndpointManager.Remove<Delegates.RefreshCurrentIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "RefreshCurrentIndex", true), value);
}
public static event Delegates.PushUpdateOptionList_WithArgs PushUpdateOptionList
{
add => HookEndpointManager.Add<Delegates.PushUpdateOptionList_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "PushUpdateOptionList", true), value);
remove => HookEndpointManager.Remove<Delegates.PushUpdateOptionList_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(UnityEngine.UI.MenuFrameCapSetting), "PushUpdateOptionList", true), value);
}
}

}
