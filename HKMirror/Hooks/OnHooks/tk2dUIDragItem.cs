namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIDragItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIDragItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIDragItem.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIDragItem.orig_OnEnable orig, tk2dUIDragItem self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIDragItem.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIDragItem.orig_OnDisable orig, tk2dUIDragItem self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookUpdateBtnPosition()
        {
            if (!HookedList.Contains("UpdateBtnPosition"))
            {
                HookedList.Add("UpdateBtnPosition");
                On.tk2dUIDragItem.UpdateBtnPosition += UpdateBtnPosition;
            }
        }

        internal static event Delegates.UpdateBtnPosition_BeforeArgs _beforeUpdateBtnPosition;
        internal static event Delegates.UpdateBtnPosition_NormalArgs _afterUpdateBtnPosition;

        private static void UpdateBtnPosition(On.tk2dUIDragItem.orig_UpdateBtnPosition orig, tk2dUIDragItem self)
        {
            Delegates.Params_UpdateBtnPosition @params = new()
            {
                self = self
            };
            _beforeUpdateBtnPosition?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateBtnPosition != null) _afterUpdateBtnPosition.Invoke(@params);
        }

        internal static void HookCalculateNewPos()
        {
            if (!HookedList.Contains("CalculateNewPos"))
            {
                HookedList.Add("CalculateNewPos");
                On.tk2dUIDragItem.CalculateNewPos += CalculateNewPos;
            }
        }

        internal static event Delegates.CalculateNewPos_BeforeArgs _beforeCalculateNewPos;
        internal static event Delegates.CalculateNewPos_NormalArgs _afterCalculateNewPos;

        private static Vector3 CalculateNewPos(On.tk2dUIDragItem.orig_CalculateNewPos orig, tk2dUIDragItem self)
        {
            Delegates.Params_CalculateNewPos @params = new()
            {
                self = self
            };
            _beforeCalculateNewPos?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCalculateNewPos != null) retVal = _afterCalculateNewPos.Invoke(@params);
            return retVal;
        }

        internal static void HookButtonDown()
        {
            if (!HookedList.Contains("ButtonDown"))
            {
                HookedList.Add("ButtonDown");
                On.tk2dUIDragItem.ButtonDown += ButtonDown;
            }
        }

        internal static event Delegates.ButtonDown_BeforeArgs _beforeButtonDown;
        internal static event Delegates.ButtonDown_NormalArgs _afterButtonDown;

        private static void ButtonDown(On.tk2dUIDragItem.orig_ButtonDown orig, tk2dUIDragItem self)
        {
            Delegates.Params_ButtonDown @params = new()
            {
                self = self
            };
            _beforeButtonDown?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterButtonDown != null) _afterButtonDown.Invoke(@params);
        }

        internal static void HookButtonRelease()
        {
            if (!HookedList.Contains("ButtonRelease"))
            {
                HookedList.Add("ButtonRelease");
                On.tk2dUIDragItem.ButtonRelease += ButtonRelease;
            }
        }

        internal static event Delegates.ButtonRelease_BeforeArgs _beforeButtonRelease;
        internal static event Delegates.ButtonRelease_NormalArgs _afterButtonRelease;

        private static void ButtonRelease(On.tk2dUIDragItem.orig_ButtonRelease orig, tk2dUIDragItem self)
        {
            Delegates.Params_ButtonRelease @params = new()
            {
                self = self
            };
            _beforeButtonRelease?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterButtonRelease != null) _afterButtonRelease.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ButtonDown_BeforeArgs(Params_ButtonDown args);

        public delegate void ButtonDown_NormalArgs(Params_ButtonDown args);

        public delegate void ButtonRelease_BeforeArgs(Params_ButtonRelease args);

        public delegate void ButtonRelease_NormalArgs(Params_ButtonRelease args);

        public delegate void CalculateNewPos_BeforeArgs(Params_CalculateNewPos args);

        public delegate Vector3 CalculateNewPos_NormalArgs(Params_CalculateNewPos args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void UpdateBtnPosition_BeforeArgs(Params_UpdateBtnPosition args);

        public delegate void UpdateBtnPosition_NormalArgs(Params_UpdateBtnPosition args);

        public sealed class Params_OnEnable
        {
            public tk2dUIDragItem self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUIDragItem self;
        }

        public sealed class Params_UpdateBtnPosition
        {
            public tk2dUIDragItem self;
        }

        public sealed class Params_CalculateNewPos
        {
            public tk2dUIDragItem self;
        }

        public sealed class Params_ButtonDown
        {
            public tk2dUIDragItem self;
        }

        public sealed class Params_ButtonRelease
        {
            public tk2dUIDragItem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.UpdateBtnPosition_BeforeArgs UpdateBtnPosition
        {
            add
            {
                HookHandler._beforeUpdateBtnPosition += value;
                HookHandler.HookUpdateBtnPosition();
            }
            remove => HookHandler._beforeUpdateBtnPosition -= value;
        }

        public static event Delegates.CalculateNewPos_BeforeArgs CalculateNewPos
        {
            add
            {
                HookHandler._beforeCalculateNewPos += value;
                HookHandler.HookCalculateNewPos();
            }
            remove => HookHandler._beforeCalculateNewPos -= value;
        }

        public static event Delegates.ButtonDown_BeforeArgs ButtonDown
        {
            add
            {
                HookHandler._beforeButtonDown += value;
                HookHandler.HookButtonDown();
            }
            remove => HookHandler._beforeButtonDown -= value;
        }

        public static event Delegates.ButtonRelease_BeforeArgs ButtonRelease
        {
            add
            {
                HookHandler._beforeButtonRelease += value;
                HookHandler.HookButtonRelease();
            }
            remove => HookHandler._beforeButtonRelease -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.UpdateBtnPosition_NormalArgs UpdateBtnPosition
        {
            add
            {
                HookHandler._afterUpdateBtnPosition += value;
                HookHandler.HookUpdateBtnPosition();
            }
            remove => HookHandler._afterUpdateBtnPosition -= value;
        }

        public static event Delegates.CalculateNewPos_NormalArgs CalculateNewPos
        {
            add
            {
                HookHandler._afterCalculateNewPos += value;
                HookHandler.HookCalculateNewPos();
            }
            remove => HookHandler._afterCalculateNewPos -= value;
        }

        public static event Delegates.ButtonDown_NormalArgs ButtonDown
        {
            add
            {
                HookHandler._afterButtonDown += value;
                HookHandler.HookButtonDown();
            }
            remove => HookHandler._afterButtonDown -= value;
        }

        public static event Delegates.ButtonRelease_NormalArgs ButtonRelease
        {
            add
            {
                HookHandler._afterButtonRelease += value;
                HookHandler.HookButtonRelease();
            }
            remove => HookHandler._afterButtonRelease -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dUIDragItem.hook_OnEnable OnEnable
        {
            add => On.tk2dUIDragItem.OnEnable += value;
            remove => On.tk2dUIDragItem.OnEnable -= value;
        }

        public static event On.tk2dUIDragItem.hook_OnDisable OnDisable
        {
            add => On.tk2dUIDragItem.OnDisable += value;
            remove => On.tk2dUIDragItem.OnDisable -= value;
        }

        public static event On.tk2dUIDragItem.hook_UpdateBtnPosition UpdateBtnPosition
        {
            add => On.tk2dUIDragItem.UpdateBtnPosition += value;
            remove => On.tk2dUIDragItem.UpdateBtnPosition -= value;
        }

        public static event On.tk2dUIDragItem.hook_CalculateNewPos CalculateNewPos
        {
            add => On.tk2dUIDragItem.CalculateNewPos += value;
            remove => On.tk2dUIDragItem.CalculateNewPos -= value;
        }

        public static event On.tk2dUIDragItem.hook_ButtonDown ButtonDown
        {
            add => On.tk2dUIDragItem.ButtonDown += value;
            remove => On.tk2dUIDragItem.ButtonDown -= value;
        }

        public static event On.tk2dUIDragItem.hook_ButtonRelease ButtonRelease
        {
            add => On.tk2dUIDragItem.ButtonRelease += value;
            remove => On.tk2dUIDragItem.ButtonRelease -= value;
        }
    }
}