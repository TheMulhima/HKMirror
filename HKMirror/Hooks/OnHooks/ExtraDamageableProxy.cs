using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ExtraDamageableProxy class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnExtraDamageableProxy
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookRecieveExtraDamage()
        {
            if (!HookedList.Contains("RecieveExtraDamage"))
            {
                HookedList.Add("RecieveExtraDamage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ExtraDamageableProxy), "RecieveExtraDamage"),
                    RecieveExtraDamage);
            }
        }

        internal static event Delegates.RecieveExtraDamage_BeforeArgs _beforeRecieveExtraDamage;
        internal static event Delegates.RecieveExtraDamage_AfterArgs _afterRecieveExtraDamage;

        private static void RecieveExtraDamage(Action<ExtraDamageableProxy, ExtraDamageTypes> orig,
            ExtraDamageableProxy self, ExtraDamageTypes extraDamageTypes)
        {
            Delegates.Params_RecieveExtraDamage @params = new()
            {
                self = self, extraDamageTypes = extraDamageTypes
            };
            if (_beforeRecieveExtraDamage != null)
                foreach (Delegates.RecieveExtraDamage_BeforeArgs toInvoke in
                         _beforeRecieveExtraDamage.GetInvocationList())
                    try
                    {
                        _beforeRecieveExtraDamage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            extraDamageTypes = @params.extraDamageTypes;
            orig(self, extraDamageTypes);
            if (_afterRecieveExtraDamage != null)
                foreach (Delegates.RecieveExtraDamage_AfterArgs toInvoke in
                         _afterRecieveExtraDamage.GetInvocationList())
                    try
                    {
                        _afterRecieveExtraDamage.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void RecieveExtraDamage_AfterArgs(Params_RecieveExtraDamage args);

        public delegate void RecieveExtraDamage_BeforeArgs(Params_RecieveExtraDamage args);

        public delegate void RecieveExtraDamage_WithArgs(Action<ExtraDamageableProxy, ExtraDamageTypes> orig,
            ExtraDamageableProxy self, ExtraDamageTypes extraDamageTypes);

        public sealed class Params_RecieveExtraDamage
        {
            public ExtraDamageTypes extraDamageTypes;
            public ExtraDamageableProxy self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.RecieveExtraDamage_BeforeArgs RecieveExtraDamage
        {
            add
            {
                HookHandler._beforeRecieveExtraDamage += value;
                HookHandler.HookRecieveExtraDamage();
            }
            remove => HookHandler._beforeRecieveExtraDamage -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.RecieveExtraDamage_AfterArgs RecieveExtraDamage
        {
            add
            {
                HookHandler._afterRecieveExtraDamage += value;
                HookHandler.HookRecieveExtraDamage();
            }
            remove => HookHandler._afterRecieveExtraDamage -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.RecieveExtraDamage_WithArgs RecieveExtraDamage
        {
            add => HookEndpointManager.Add<Delegates.RecieveExtraDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ExtraDamageableProxy), "IExtraDamageable.RecieveExtraDamage"),
                value);
            remove => HookEndpointManager.Remove<Delegates.RecieveExtraDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ExtraDamageableProxy), "IExtraDamageable.RecieveExtraDamage"),
                value);
        }
    }
}