using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CanvasUtil class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCanvasUtil
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_TrajanBold()
        {
            if (!HookedList.Contains("get_TrajanBold"))
            {
                HookedList.Add("get_TrajanBold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "get_TrajanBold", false), get_TrajanBold);
            }
        }

        internal static event Delegates.get_TrajanBold_BeforeArgs _beforeget_TrajanBold;
        internal static event Delegates.get_TrajanBold_AfterArgs _afterget_TrajanBold;

        private static Font get_TrajanBold(Func<Font> orig)
        {
            if (_beforeget_TrajanBold != null)
                foreach (Delegates.get_TrajanBold_BeforeArgs toInvoke in _beforeget_TrajanBold.GetInvocationList())
                    try
                    {
                        _beforeget_TrajanBold?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_TrajanBold != null)
                foreach (Delegates.get_TrajanBold_AfterArgs toInvoke in _afterget_TrajanBold.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TrajanBold.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_TrajanNormal()
        {
            if (!HookedList.Contains("get_TrajanNormal"))
            {
                HookedList.Add("get_TrajanNormal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "get_TrajanNormal", false),
                    get_TrajanNormal);
            }
        }

        internal static event Delegates.get_TrajanNormal_BeforeArgs _beforeget_TrajanNormal;
        internal static event Delegates.get_TrajanNormal_AfterArgs _afterget_TrajanNormal;

        private static Font get_TrajanNormal(Func<Font> orig)
        {
            if (_beforeget_TrajanNormal != null)
                foreach (Delegates.get_TrajanNormal_BeforeArgs toInvoke in _beforeget_TrajanNormal.GetInvocationList())
                    try
                    {
                        _beforeget_TrajanNormal?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_TrajanNormal != null)
                foreach (Delegates.get_TrajanNormal_AfterArgs toInvoke in _afterget_TrajanNormal.GetInvocationList())
                    try
                    {
                        retVal = _afterget_TrajanNormal.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateFonts()
        {
            if (!HookedList.Contains("CreateFonts"))
            {
                HookedList.Add("CreateFonts");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateFonts", false), CreateFonts);
            }
        }

        internal static event Delegates.CreateFonts_BeforeArgs _beforeCreateFonts;
        internal static event Delegates.CreateFonts_AfterArgs _afterCreateFonts;

        private static void CreateFonts(Action orig)
        {
            if (_beforeCreateFonts != null)
                foreach (Delegates.CreateFonts_BeforeArgs toInvoke in _beforeCreateFonts.GetInvocationList())
                    try
                    {
                        _beforeCreateFonts?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterCreateFonts != null)
                foreach (Delegates.CreateFonts_AfterArgs toInvoke in _afterCreateFonts.GetInvocationList())
                    try
                    {
                        _afterCreateFonts.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetFont()
        {
            if (!HookedList.Contains("GetFont"))
            {
                HookedList.Add("GetFont");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "GetFont", false), GetFont);
            }
        }

        internal static event Delegates.GetFont_BeforeArgs _beforeGetFont;
        internal static event Delegates.GetFont_AfterArgs _afterGetFont;

        private static Font GetFont(Func<string, Font> orig, string fontName)
        {
            Delegates.Params_GetFont @params = new()
            {
                fontName = fontName
            };
            if (_beforeGetFont != null)
                foreach (Delegates.GetFont_BeforeArgs toInvoke in _beforeGetFont.GetInvocationList())
                    try
                    {
                        _beforeGetFont?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fontName = @params.fontName;
            var retVal = orig(fontName);
            if (_afterGetFont != null)
                foreach (Delegates.GetFont_AfterArgs toInvoke in _afterGetFont.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFont.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookNullSprite()
        {
            if (!HookedList.Contains("NullSprite"))
            {
                HookedList.Add("NullSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "NullSprite", false), NullSprite);
            }
        }

        internal static event Delegates.NullSprite_BeforeArgs _beforeNullSprite;
        internal static event Delegates.NullSprite_AfterArgs _afterNullSprite;

        private static Sprite NullSprite(Func<byte[], Sprite> orig, byte[] data)
        {
            Delegates.Params_NullSprite @params = new()
            {
                data = data
            };
            if (_beforeNullSprite != null)
                foreach (Delegates.NullSprite_BeforeArgs toInvoke in _beforeNullSprite.GetInvocationList())
                    try
                    {
                        _beforeNullSprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            data = @params.data;
            var retVal = orig(data);
            if (_afterNullSprite != null)
                foreach (Delegates.NullSprite_AfterArgs toInvoke in _afterNullSprite.GetInvocationList())
                    try
                    {
                        retVal = _afterNullSprite.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateSprite()
        {
            if (!HookedList.Contains("CreateSprite"))
            {
                HookedList.Add("CreateSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateSprite", false), CreateSprite);
            }
        }

        internal static event Delegates.CreateSprite_BeforeArgs _beforeCreateSprite;
        internal static event Delegates.CreateSprite_AfterArgs _afterCreateSprite;

        private static Sprite CreateSprite(Func<byte[], int, int, int, int, Sprite> orig, byte[] data, int x, int y,
            int width, int height)
        {
            Delegates.Params_CreateSprite @params = new()
            {
                data = data, x = x, y = y, width = width, height = height
            };
            if (_beforeCreateSprite != null)
                foreach (Delegates.CreateSprite_BeforeArgs toInvoke in _beforeCreateSprite.GetInvocationList())
                    try
                    {
                        _beforeCreateSprite?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            data = @params.data;
            x = @params.x;
            y = @params.y;
            width = @params.width;
            height = @params.height;
            var retVal = orig(data, x, y, width, height);
            if (_afterCreateSprite != null)
                foreach (Delegates.CreateSprite_AfterArgs toInvoke in _afterCreateSprite.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateSprite.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateCanvas_RenderMode_int()
        {
            if (!HookedList.Contains("CreateCanvas_RenderMode_int"))
            {
                HookedList.Add("CreateCanvas_RenderMode_int");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas_RenderMode_int", false),
                    CreateCanvas_RenderMode_int);
            }
        }

        internal static event Delegates.CreateCanvas_RenderMode_int_BeforeArgs _beforeCreateCanvas_RenderMode_int;
        internal static event Delegates.CreateCanvas_RenderMode_int_AfterArgs _afterCreateCanvas_RenderMode_int;

        private static GameObject CreateCanvas_RenderMode_int(Func<RenderMode, int, GameObject> orig,
            RenderMode renderMode, int referencePixelsPerUnit)
        {
            Delegates.Params_CreateCanvas_RenderMode_int @params = new()
            {
                renderMode = renderMode, referencePixelsPerUnit = referencePixelsPerUnit
            };
            if (_beforeCreateCanvas_RenderMode_int != null)
                foreach (Delegates.CreateCanvas_RenderMode_int_BeforeArgs toInvoke in _beforeCreateCanvas_RenderMode_int
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateCanvas_RenderMode_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            renderMode = @params.renderMode;
            referencePixelsPerUnit = @params.referencePixelsPerUnit;
            var retVal = orig(renderMode, referencePixelsPerUnit);
            if (_afterCreateCanvas_RenderMode_int != null)
                foreach (Delegates.CreateCanvas_RenderMode_int_AfterArgs toInvoke in _afterCreateCanvas_RenderMode_int
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCreateCanvas_RenderMode_int.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateCanvas_RenderMode_Vector2()
        {
            if (!HookedList.Contains("CreateCanvas_RenderMode_Vector2"))
            {
                HookedList.Add("CreateCanvas_RenderMode_Vector2");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas_RenderMode_Vector2", false),
                    CreateCanvas_RenderMode_Vector2);
            }
        }

        internal static event Delegates.CreateCanvas_RenderMode_Vector2_BeforeArgs
            _beforeCreateCanvas_RenderMode_Vector2;

        internal static event Delegates.CreateCanvas_RenderMode_Vector2_AfterArgs _afterCreateCanvas_RenderMode_Vector2;

        private static GameObject CreateCanvas_RenderMode_Vector2(Func<RenderMode, Vector2, GameObject> orig,
            RenderMode renderMode, Vector2 size)
        {
            Delegates.Params_CreateCanvas_RenderMode_Vector2 @params = new()
            {
                renderMode = renderMode, size = size
            };
            if (_beforeCreateCanvas_RenderMode_Vector2 != null)
                foreach (Delegates.CreateCanvas_RenderMode_Vector2_BeforeArgs toInvoke in
                         _beforeCreateCanvas_RenderMode_Vector2.GetInvocationList())
                    try
                    {
                        _beforeCreateCanvas_RenderMode_Vector2?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            renderMode = @params.renderMode;
            size = @params.size;
            var retVal = orig(renderMode, size);
            if (_afterCreateCanvas_RenderMode_Vector2 != null)
                foreach (Delegates.CreateCanvas_RenderMode_Vector2_AfterArgs toInvoke in
                         _afterCreateCanvas_RenderMode_Vector2.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateCanvas_RenderMode_Vector2.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateCanvas_RenderMode()
        {
            if (!HookedList.Contains("CreateCanvas_RenderMode"))
            {
                HookedList.Add("CreateCanvas_RenderMode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas_RenderMode", false),
                    CreateCanvas_RenderMode);
            }
        }

        internal static event Delegates.CreateCanvas_RenderMode_BeforeArgs _beforeCreateCanvas_RenderMode;
        internal static event Delegates.CreateCanvas_RenderMode_AfterArgs _afterCreateCanvas_RenderMode;

        private static GameObject CreateCanvas_RenderMode(Func<RenderMode, GameObject> orig, RenderMode renderMode)
        {
            Delegates.Params_CreateCanvas_RenderMode @params = new()
            {
                renderMode = renderMode
            };
            if (_beforeCreateCanvas_RenderMode != null)
                foreach (Delegates.CreateCanvas_RenderMode_BeforeArgs toInvoke in _beforeCreateCanvas_RenderMode
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateCanvas_RenderMode?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            renderMode = @params.renderMode;
            var retVal = orig(renderMode);
            if (_afterCreateCanvas_RenderMode != null)
                foreach (Delegates.CreateCanvas_RenderMode_AfterArgs toInvoke in _afterCreateCanvas_RenderMode
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCreateCanvas_RenderMode.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateToggleGroup()
        {
            if (!HookedList.Contains("CreateToggleGroup"))
            {
                HookedList.Add("CreateToggleGroup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateToggleGroup", false),
                    CreateToggleGroup);
            }
        }

        internal static event Delegates.CreateToggleGroup_BeforeArgs _beforeCreateToggleGroup;
        internal static event Delegates.CreateToggleGroup_AfterArgs _afterCreateToggleGroup;

        private static GameObject CreateToggleGroup(Func<GameObject> orig)
        {
            if (_beforeCreateToggleGroup != null)
                foreach (Delegates.CreateToggleGroup_BeforeArgs toInvoke in
                         _beforeCreateToggleGroup.GetInvocationList())
                    try
                    {
                        _beforeCreateToggleGroup?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterCreateToggleGroup != null)
                foreach (Delegates.CreateToggleGroup_AfterArgs toInvoke in _afterCreateToggleGroup.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateToggleGroup.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFadeInCanvasGroup()
        {
            if (!HookedList.Contains("FadeInCanvasGroup"))
            {
                HookedList.Add("FadeInCanvasGroup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "FadeInCanvasGroup", false),
                    FadeInCanvasGroup);
            }
        }

        internal static event Delegates.FadeInCanvasGroup_BeforeArgs _beforeFadeInCanvasGroup;

        private static IEnumerator FadeInCanvasGroup(Func<CanvasGroup, IEnumerator> orig, CanvasGroup cg)
        {
            Delegates.Params_FadeInCanvasGroup @params = new()
            {
                cg = cg
            };
            if (_beforeFadeInCanvasGroup != null)
                foreach (Delegates.FadeInCanvasGroup_BeforeArgs toInvoke in
                         _beforeFadeInCanvasGroup.GetInvocationList())
                    try
                    {
                        _beforeFadeInCanvasGroup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            cg = @params.cg;
            return orig(cg);
        }

        internal static void HookFadeOutCanvasGroup()
        {
            if (!HookedList.Contains("FadeOutCanvasGroup"))
            {
                HookedList.Add("FadeOutCanvasGroup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "FadeOutCanvasGroup", false),
                    FadeOutCanvasGroup);
            }
        }

        internal static event Delegates.FadeOutCanvasGroup_BeforeArgs _beforeFadeOutCanvasGroup;

        private static IEnumerator FadeOutCanvasGroup(Func<CanvasGroup, IEnumerator> orig, CanvasGroup cg)
        {
            Delegates.Params_FadeOutCanvasGroup @params = new()
            {
                cg = cg
            };
            if (_beforeFadeOutCanvasGroup != null)
                foreach (Delegates.FadeOutCanvasGroup_BeforeArgs toInvoke in
                         _beforeFadeOutCanvasGroup.GetInvocationList())
                    try
                    {
                        _beforeFadeOutCanvasGroup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            cg = @params.cg;
            return orig(cg);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate GameObject CreateCanvas_RenderMode_AfterArgs(Params_CreateCanvas_RenderMode args,
            GameObject ret);

        public delegate void CreateCanvas_RenderMode_BeforeArgs(Params_CreateCanvas_RenderMode args);

        public delegate GameObject CreateCanvas_RenderMode_int_AfterArgs(Params_CreateCanvas_RenderMode_int args,
            GameObject ret);

        public delegate void CreateCanvas_RenderMode_int_BeforeArgs(Params_CreateCanvas_RenderMode_int args);

        public delegate GameObject CreateCanvas_RenderMode_int_WithArgs(Func<RenderMode, int, GameObject> orig,
            RenderMode renderMode, int referencePixelsPerUnit);

        public delegate GameObject CreateCanvas_RenderMode_Vector2_AfterArgs(
            Params_CreateCanvas_RenderMode_Vector2 args, GameObject ret);

        public delegate void CreateCanvas_RenderMode_Vector2_BeforeArgs(Params_CreateCanvas_RenderMode_Vector2 args);

        public delegate GameObject CreateCanvas_RenderMode_Vector2_WithArgs(Func<RenderMode, Vector2, GameObject> orig,
            RenderMode renderMode, Vector2 size);

        public delegate GameObject CreateCanvas_RenderMode_WithArgs(Func<RenderMode, GameObject> orig,
            RenderMode renderMode);

        public delegate void CreateFonts_AfterArgs();

        public delegate void CreateFonts_BeforeArgs();

        public delegate void CreateFonts_WithArgs(Action orig);

        public delegate Sprite CreateSprite_AfterArgs(Params_CreateSprite args, Sprite ret);

        public delegate void CreateSprite_BeforeArgs(Params_CreateSprite args);

        public delegate Sprite CreateSprite_WithArgs(Func<byte[], int, int, int, int, Sprite> orig, byte[] data, int x,
            int y, int width, int height);

        public delegate GameObject CreateToggleGroup_AfterArgs(GameObject ret);

        public delegate void CreateToggleGroup_BeforeArgs();

        public delegate GameObject CreateToggleGroup_WithArgs(Func<GameObject> orig);

        public delegate IEnumerator FadeInCanvasGroup_AfterArgs(Params_FadeInCanvasGroup args, IEnumerator ret);

        public delegate void FadeInCanvasGroup_BeforeArgs(Params_FadeInCanvasGroup args);

        public delegate IEnumerator FadeInCanvasGroup_WithArgs(Func<CanvasGroup, IEnumerator> orig, CanvasGroup cg);

        public delegate IEnumerator FadeOutCanvasGroup_AfterArgs(Params_FadeOutCanvasGroup args, IEnumerator ret);

        public delegate void FadeOutCanvasGroup_BeforeArgs(Params_FadeOutCanvasGroup args);

        public delegate IEnumerator FadeOutCanvasGroup_WithArgs(Func<CanvasGroup, IEnumerator> orig, CanvasGroup cg);

        public delegate Font get_TrajanBold_AfterArgs(Font ret);

        public delegate void get_TrajanBold_BeforeArgs();

        public delegate Font get_TrajanBold_WithArgs(Func<Font> orig);

        public delegate Font get_TrajanNormal_AfterArgs(Font ret);

        public delegate void get_TrajanNormal_BeforeArgs();

        public delegate Font get_TrajanNormal_WithArgs(Func<Font> orig);

        public delegate Font GetFont_AfterArgs(Params_GetFont args, Font ret);

        public delegate void GetFont_BeforeArgs(Params_GetFont args);

        public delegate Font GetFont_WithArgs(Func<string, Font> orig, string fontName);

        public delegate Sprite NullSprite_AfterArgs(Params_NullSprite args, Sprite ret);

        public delegate void NullSprite_BeforeArgs(Params_NullSprite args);

        public delegate Sprite NullSprite_WithArgs(Func<byte[], Sprite> orig, byte[] data);

        public sealed class Params_GetFont
        {
            public string fontName;
        }

        public sealed class Params_NullSprite
        {
            public byte[] data;
        }

        public sealed class Params_CreateSprite
        {
            public byte[] data;
            public int height;
            public int width;
            public int x;
            public int y;
        }

        public sealed class Params_CreateCanvas_RenderMode_int
        {
            public int referencePixelsPerUnit;
            public RenderMode renderMode;
        }

        public sealed class Params_CreateCanvas_RenderMode_Vector2
        {
            public RenderMode renderMode;
            public Vector2 size;
        }

        public sealed class Params_CreateCanvas_RenderMode
        {
            public RenderMode renderMode;
        }

        public sealed class Params_FadeInCanvasGroup
        {
            public CanvasGroup cg;
        }

        public sealed class Params_FadeOutCanvasGroup
        {
            public CanvasGroup cg;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_TrajanBold_BeforeArgs get_TrajanBold
        {
            add
            {
                HookHandler._beforeget_TrajanBold += value;
                HookHandler.Hookget_TrajanBold();
            }
            remove => HookHandler._beforeget_TrajanBold -= value;
        }

        public static event Delegates.get_TrajanNormal_BeforeArgs get_TrajanNormal
        {
            add
            {
                HookHandler._beforeget_TrajanNormal += value;
                HookHandler.Hookget_TrajanNormal();
            }
            remove => HookHandler._beforeget_TrajanNormal -= value;
        }

        public static event Delegates.CreateFonts_BeforeArgs CreateFonts
        {
            add
            {
                HookHandler._beforeCreateFonts += value;
                HookHandler.HookCreateFonts();
            }
            remove => HookHandler._beforeCreateFonts -= value;
        }

        public static event Delegates.GetFont_BeforeArgs GetFont
        {
            add
            {
                HookHandler._beforeGetFont += value;
                HookHandler.HookGetFont();
            }
            remove => HookHandler._beforeGetFont -= value;
        }

        public static event Delegates.NullSprite_BeforeArgs NullSprite
        {
            add
            {
                HookHandler._beforeNullSprite += value;
                HookHandler.HookNullSprite();
            }
            remove => HookHandler._beforeNullSprite -= value;
        }

        public static event Delegates.CreateSprite_BeforeArgs CreateSprite
        {
            add
            {
                HookHandler._beforeCreateSprite += value;
                HookHandler.HookCreateSprite();
            }
            remove => HookHandler._beforeCreateSprite -= value;
        }

        public static event Delegates.CreateCanvas_RenderMode_int_BeforeArgs CreateCanvas_RenderMode_int
        {
            add
            {
                HookHandler._beforeCreateCanvas_RenderMode_int += value;
                HookHandler.HookCreateCanvas_RenderMode_int();
            }
            remove => HookHandler._beforeCreateCanvas_RenderMode_int -= value;
        }

        public static event Delegates.CreateCanvas_RenderMode_Vector2_BeforeArgs CreateCanvas_RenderMode_Vector2
        {
            add
            {
                HookHandler._beforeCreateCanvas_RenderMode_Vector2 += value;
                HookHandler.HookCreateCanvas_RenderMode_Vector2();
            }
            remove => HookHandler._beforeCreateCanvas_RenderMode_Vector2 -= value;
        }

        public static event Delegates.CreateCanvas_RenderMode_BeforeArgs CreateCanvas_RenderMode
        {
            add
            {
                HookHandler._beforeCreateCanvas_RenderMode += value;
                HookHandler.HookCreateCanvas_RenderMode();
            }
            remove => HookHandler._beforeCreateCanvas_RenderMode -= value;
        }

        public static event Delegates.CreateToggleGroup_BeforeArgs CreateToggleGroup
        {
            add
            {
                HookHandler._beforeCreateToggleGroup += value;
                HookHandler.HookCreateToggleGroup();
            }
            remove => HookHandler._beforeCreateToggleGroup -= value;
        }

        public static event Delegates.FadeInCanvasGroup_BeforeArgs FadeInCanvasGroup
        {
            add
            {
                HookHandler._beforeFadeInCanvasGroup += value;
                HookHandler.HookFadeInCanvasGroup();
            }
            remove => HookHandler._beforeFadeInCanvasGroup -= value;
        }

        public static event Delegates.FadeOutCanvasGroup_BeforeArgs FadeOutCanvasGroup
        {
            add
            {
                HookHandler._beforeFadeOutCanvasGroup += value;
                HookHandler.HookFadeOutCanvasGroup();
            }
            remove => HookHandler._beforeFadeOutCanvasGroup -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_TrajanBold_AfterArgs get_TrajanBold
        {
            add
            {
                HookHandler._afterget_TrajanBold += value;
                HookHandler.Hookget_TrajanBold();
            }
            remove => HookHandler._afterget_TrajanBold -= value;
        }

        public static event Delegates.get_TrajanNormal_AfterArgs get_TrajanNormal
        {
            add
            {
                HookHandler._afterget_TrajanNormal += value;
                HookHandler.Hookget_TrajanNormal();
            }
            remove => HookHandler._afterget_TrajanNormal -= value;
        }

        public static event Delegates.CreateFonts_AfterArgs CreateFonts
        {
            add
            {
                HookHandler._afterCreateFonts += value;
                HookHandler.HookCreateFonts();
            }
            remove => HookHandler._afterCreateFonts -= value;
        }

        public static event Delegates.GetFont_AfterArgs GetFont
        {
            add
            {
                HookHandler._afterGetFont += value;
                HookHandler.HookGetFont();
            }
            remove => HookHandler._afterGetFont -= value;
        }

        public static event Delegates.NullSprite_AfterArgs NullSprite
        {
            add
            {
                HookHandler._afterNullSprite += value;
                HookHandler.HookNullSprite();
            }
            remove => HookHandler._afterNullSprite -= value;
        }

        public static event Delegates.CreateSprite_AfterArgs CreateSprite
        {
            add
            {
                HookHandler._afterCreateSprite += value;
                HookHandler.HookCreateSprite();
            }
            remove => HookHandler._afterCreateSprite -= value;
        }

        public static event Delegates.CreateCanvas_RenderMode_int_AfterArgs CreateCanvas_RenderMode_int
        {
            add
            {
                HookHandler._afterCreateCanvas_RenderMode_int += value;
                HookHandler.HookCreateCanvas_RenderMode_int();
            }
            remove => HookHandler._afterCreateCanvas_RenderMode_int -= value;
        }

        public static event Delegates.CreateCanvas_RenderMode_Vector2_AfterArgs CreateCanvas_RenderMode_Vector2
        {
            add
            {
                HookHandler._afterCreateCanvas_RenderMode_Vector2 += value;
                HookHandler.HookCreateCanvas_RenderMode_Vector2();
            }
            remove => HookHandler._afterCreateCanvas_RenderMode_Vector2 -= value;
        }

        public static event Delegates.CreateCanvas_RenderMode_AfterArgs CreateCanvas_RenderMode
        {
            add
            {
                HookHandler._afterCreateCanvas_RenderMode += value;
                HookHandler.HookCreateCanvas_RenderMode();
            }
            remove => HookHandler._afterCreateCanvas_RenderMode -= value;
        }

        public static event Delegates.CreateToggleGroup_AfterArgs CreateToggleGroup
        {
            add
            {
                HookHandler._afterCreateToggleGroup += value;
                HookHandler.HookCreateToggleGroup();
            }
            remove => HookHandler._afterCreateToggleGroup -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_TrajanBold_WithArgs get_TrajanBold
        {
            add => HookEndpointManager.Add<Delegates.get_TrajanBold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "get_TrajanBold", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TrajanBold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "get_TrajanBold", false), value);
        }

        public static event Delegates.get_TrajanNormal_WithArgs get_TrajanNormal
        {
            add => HookEndpointManager.Add<Delegates.get_TrajanNormal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "get_TrajanNormal", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_TrajanNormal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "get_TrajanNormal", false), value);
        }

        public static event Delegates.CreateFonts_WithArgs CreateFonts
        {
            add => HookEndpointManager.Add<Delegates.CreateFonts_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateFonts", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateFonts_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateFonts", false), value);
        }

        public static event Delegates.GetFont_WithArgs GetFont
        {
            add => HookEndpointManager.Add<Delegates.GetFont_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "GetFont", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetFont_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "GetFont", false), value);
        }

        public static event Delegates.NullSprite_WithArgs NullSprite
        {
            add => HookEndpointManager.Add<Delegates.NullSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "NullSprite", false), value);
            remove => HookEndpointManager.Remove<Delegates.NullSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "NullSprite", false), value);
        }

        public static event Delegates.CreateSprite_WithArgs CreateSprite
        {
            add => HookEndpointManager.Add<Delegates.CreateSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateSprite", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateSprite_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateSprite", false), value);
        }

        public static event Delegates.CreateCanvas_RenderMode_int_WithArgs CreateCanvas_RenderMode_int
        {
            add => HookEndpointManager.Add<Delegates.CreateCanvas_RenderMode_int_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateCanvas_RenderMode_int_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas", false), value);
        }

        public static event Delegates.CreateCanvas_RenderMode_Vector2_WithArgs CreateCanvas_RenderMode_Vector2
        {
            add => HookEndpointManager.Add<Delegates.CreateCanvas_RenderMode_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateCanvas_RenderMode_Vector2_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas", false), value);
        }

        public static event Delegates.CreateCanvas_RenderMode_WithArgs CreateCanvas_RenderMode
        {
            add => HookEndpointManager.Add<Delegates.CreateCanvas_RenderMode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateCanvas_RenderMode_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateCanvas", false), value);
        }

        public static event Delegates.CreateToggleGroup_WithArgs CreateToggleGroup
        {
            add => HookEndpointManager.Add<Delegates.CreateToggleGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateToggleGroup", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateToggleGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "CreateToggleGroup", false), value);
        }

        public static event Delegates.FadeInCanvasGroup_WithArgs FadeInCanvasGroup
        {
            add => HookEndpointManager.Add<Delegates.FadeInCanvasGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "FadeInCanvasGroup", false), value);
            remove => HookEndpointManager.Remove<Delegates.FadeInCanvasGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "FadeInCanvasGroup", false), value);
        }

        public static event Delegates.FadeOutCanvasGroup_WithArgs FadeOutCanvasGroup
        {
            add => HookEndpointManager.Add<Delegates.FadeOutCanvasGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "FadeOutCanvasGroup", false), value);
            remove => HookEndpointManager.Remove<Delegates.FadeOutCanvasGroup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CanvasUtil), "FadeOutCanvasGroup", false), value);
        }
    }
}