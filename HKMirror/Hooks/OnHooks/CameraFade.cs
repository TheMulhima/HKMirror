using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CameraFade class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCameraFade
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.CameraFade.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.CameraFade.orig_Awake orig,CameraFade self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.CameraFade.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
private static System.Collections.IEnumerator Start(On.CameraFade.orig_Start orig,CameraFade self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookOnGUI()
{
if (!HookedList.Contains("OnGUI"))
{
HookedList.Add("OnGUI");
On.CameraFade.OnGUI += OnGUI;

}
}
internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;
private static void OnGUI(On.CameraFade.orig_OnGUI orig,CameraFade self)
{
Delegates.Params_OnGUI @params = new() 
{
self = self
};
if (_beforeOnGUI != null)
{
foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
{
try
{
_beforeOnGUI?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnGUI != null)
{
foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
{
try
{
_afterOnGUI.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetScreenOverlayColor()
{
if (!HookedList.Contains("SetScreenOverlayColor"))
{
HookedList.Add("SetScreenOverlayColor");
On.CameraFade.SetScreenOverlayColor += SetScreenOverlayColor;

}
}
internal static event Delegates.SetScreenOverlayColor_BeforeArgs _beforeSetScreenOverlayColor;
internal static event Delegates.SetScreenOverlayColor_AfterArgs _afterSetScreenOverlayColor;
private static void SetScreenOverlayColor(On.CameraFade.orig_SetScreenOverlayColor orig,CameraFade self,  UnityEngine.Color newScreenOverlayColor)
{
Delegates.Params_SetScreenOverlayColor @params = new() 
{
self = self
, newScreenOverlayColor = newScreenOverlayColor
};
if (_beforeSetScreenOverlayColor != null)
{
foreach (Delegates.SetScreenOverlayColor_BeforeArgs toInvoke in _beforeSetScreenOverlayColor.GetInvocationList())
{
try
{
_beforeSetScreenOverlayColor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
newScreenOverlayColor = @params.newScreenOverlayColor;
orig(self, newScreenOverlayColor);
if (_afterSetScreenOverlayColor != null)
{
foreach (Delegates.SetScreenOverlayColor_AfterArgs toInvoke in _afterSetScreenOverlayColor.GetInvocationList())
{
try
{
_afterSetScreenOverlayColor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStartFade()
{
if (!HookedList.Contains("StartFade"))
{
HookedList.Add("StartFade");
On.CameraFade.StartFade += StartFade;

}
}
internal static event Delegates.StartFade_BeforeArgs _beforeStartFade;
internal static event Delegates.StartFade_AfterArgs _afterStartFade;
private static void StartFade(On.CameraFade.orig_StartFade orig,CameraFade self,  UnityEngine.Color newScreenOverlayColor,  float fadeDuration)
{
Delegates.Params_StartFade @params = new() 
{
self = self
, newScreenOverlayColor = newScreenOverlayColor
, fadeDuration = fadeDuration
};
if (_beforeStartFade != null)
{
foreach (Delegates.StartFade_BeforeArgs toInvoke in _beforeStartFade.GetInvocationList())
{
try
{
_beforeStartFade?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
newScreenOverlayColor = @params.newScreenOverlayColor;
fadeDuration = @params.fadeDuration;
orig(self, newScreenOverlayColor, fadeDuration);
if (_afterStartFade != null)
{
foreach (Delegates.StartFade_AfterArgs toInvoke in _afterStartFade.GetInvocationList())
{
try
{
_afterStartFade.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeToBlack()
{
if (!HookedList.Contains("FadeToBlack"))
{
HookedList.Add("FadeToBlack");
On.CameraFade.FadeToBlack += FadeToBlack;

}
}
internal static event Delegates.FadeToBlack_BeforeArgs _beforeFadeToBlack;
internal static event Delegates.FadeToBlack_AfterArgs _afterFadeToBlack;
private static void FadeToBlack(On.CameraFade.orig_FadeToBlack orig,CameraFade self,  float duration)
{
Delegates.Params_FadeToBlack @params = new() 
{
self = self
, duration = duration
};
if (_beforeFadeToBlack != null)
{
foreach (Delegates.FadeToBlack_BeforeArgs toInvoke in _beforeFadeToBlack.GetInvocationList())
{
try
{
_beforeFadeToBlack?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
duration = @params.duration;
orig(self, duration);
if (_afterFadeToBlack != null)
{
foreach (Delegates.FadeToBlack_AfterArgs toInvoke in _afterFadeToBlack.GetInvocationList())
{
try
{
_afterFadeToBlack.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeToTransparent()
{
if (!HookedList.Contains("FadeToTransparent"))
{
HookedList.Add("FadeToTransparent");
On.CameraFade.FadeToTransparent += FadeToTransparent;

}
}
internal static event Delegates.FadeToTransparent_BeforeArgs _beforeFadeToTransparent;
internal static event Delegates.FadeToTransparent_AfterArgs _afterFadeToTransparent;
private static void FadeToTransparent(On.CameraFade.orig_FadeToTransparent orig,CameraFade self,  float duration)
{
Delegates.Params_FadeToTransparent @params = new() 
{
self = self
, duration = duration
};
if (_beforeFadeToTransparent != null)
{
foreach (Delegates.FadeToTransparent_BeforeArgs toInvoke in _beforeFadeToTransparent.GetInvocationList())
{
try
{
_beforeFadeToTransparent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
duration = @params.duration;
orig(self, duration);
if (_afterFadeToTransparent != null)
{
foreach (Delegates.FadeToTransparent_AfterArgs toInvoke in _afterFadeToTransparent.GetInvocationList())
{
try
{
_afterFadeToTransparent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public CameraFade self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<CameraFade> orig, CameraFade self);
public sealed class Params_Start
{
public CameraFade self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate System.Collections.IEnumerator Start_AfterArgs(Params_Start args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Start_WithArgs (Func<CameraFade, System.Collections.IEnumerator> orig, CameraFade self);
public sealed class Params_OnGUI
{
public CameraFade self;
}
public delegate void OnGUI_BeforeArgs(Params_OnGUI args);
public delegate void OnGUI_AfterArgs(Params_OnGUI args);
public delegate void OnGUI_WithArgs (Action<CameraFade> orig, CameraFade self);
public sealed class Params_SetScreenOverlayColor
{
public CameraFade self;
public UnityEngine.Color newScreenOverlayColor;
}
public delegate void SetScreenOverlayColor_BeforeArgs(Params_SetScreenOverlayColor args);
public delegate void SetScreenOverlayColor_AfterArgs(Params_SetScreenOverlayColor args);
public delegate void SetScreenOverlayColor_WithArgs (Action<CameraFade,  UnityEngine.Color> orig, CameraFade self,  UnityEngine.Color newScreenOverlayColor);
public sealed class Params_StartFade
{
public CameraFade self;
public UnityEngine.Color newScreenOverlayColor;
public float fadeDuration;
}
public delegate void StartFade_BeforeArgs(Params_StartFade args);
public delegate void StartFade_AfterArgs(Params_StartFade args);
public delegate void StartFade_WithArgs (Action<CameraFade,  UnityEngine.Color,  float> orig, CameraFade self,  UnityEngine.Color newScreenOverlayColor,  float fadeDuration);
public sealed class Params_FadeToBlack
{
public CameraFade self;
public float duration;
}
public delegate void FadeToBlack_BeforeArgs(Params_FadeToBlack args);
public delegate void FadeToBlack_AfterArgs(Params_FadeToBlack args);
public delegate void FadeToBlack_WithArgs (Action<CameraFade,  float> orig, CameraFade self,  float duration);
public sealed class Params_FadeToTransparent
{
public CameraFade self;
public float duration;
}
public delegate void FadeToTransparent_BeforeArgs(Params_FadeToTransparent args);
public delegate void FadeToTransparent_AfterArgs(Params_FadeToTransparent args);
public delegate void FadeToTransparent_WithArgs (Action<CameraFade,  float> orig, CameraFade self,  float duration);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnGUI_BeforeArgs OnGUI
{
add
{

HookHandler._beforeOnGUI += value;
HookHandler.HookOnGUI();
}
remove => HookHandler._beforeOnGUI -= value;
}
public static event Delegates.SetScreenOverlayColor_BeforeArgs SetScreenOverlayColor
{
add
{

HookHandler._beforeSetScreenOverlayColor += value;
HookHandler.HookSetScreenOverlayColor();
}
remove => HookHandler._beforeSetScreenOverlayColor -= value;
}
public static event Delegates.StartFade_BeforeArgs StartFade
{
add
{

HookHandler._beforeStartFade += value;
HookHandler.HookStartFade();
}
remove => HookHandler._beforeStartFade -= value;
}
public static event Delegates.FadeToBlack_BeforeArgs FadeToBlack
{
add
{

HookHandler._beforeFadeToBlack += value;
HookHandler.HookFadeToBlack();
}
remove => HookHandler._beforeFadeToBlack -= value;
}
public static event Delegates.FadeToTransparent_BeforeArgs FadeToTransparent
{
add
{

HookHandler._beforeFadeToTransparent += value;
HookHandler.HookFadeToTransparent();
}
remove => HookHandler._beforeFadeToTransparent -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnGUI_AfterArgs OnGUI
{
add
{

HookHandler._afterOnGUI += value;
HookHandler.HookOnGUI();
}
remove => HookHandler._afterOnGUI -= value;
}
public static event Delegates.SetScreenOverlayColor_AfterArgs SetScreenOverlayColor
{
add
{

HookHandler._afterSetScreenOverlayColor += value;
HookHandler.HookSetScreenOverlayColor();
}
remove => HookHandler._afterSetScreenOverlayColor -= value;
}
public static event Delegates.StartFade_AfterArgs StartFade
{
add
{

HookHandler._afterStartFade += value;
HookHandler.HookStartFade();
}
remove => HookHandler._afterStartFade -= value;
}
public static event Delegates.FadeToBlack_AfterArgs FadeToBlack
{
add
{

HookHandler._afterFadeToBlack += value;
HookHandler.HookFadeToBlack();
}
remove => HookHandler._afterFadeToBlack -= value;
}
public static event Delegates.FadeToTransparent_AfterArgs FadeToTransparent
{
add
{

HookHandler._afterFadeToTransparent += value;
HookHandler.HookFadeToTransparent();
}
remove => HookHandler._afterFadeToTransparent -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CameraFade.hook_Awake Awake
{
add => On.CameraFade.Awake += value;
remove => On.CameraFade.Awake -= value;
}
public static event On.CameraFade.hook_Start Start
{
add => On.CameraFade.Start += value;
remove => On.CameraFade.Start -= value;
}
public static event On.CameraFade.hook_OnGUI OnGUI
{
add => On.CameraFade.OnGUI += value;
remove => On.CameraFade.OnGUI -= value;
}
public static event On.CameraFade.hook_SetScreenOverlayColor SetScreenOverlayColor
{
add => On.CameraFade.SetScreenOverlayColor += value;
remove => On.CameraFade.SetScreenOverlayColor -= value;
}
public static event On.CameraFade.hook_StartFade StartFade
{
add => On.CameraFade.StartFade += value;
remove => On.CameraFade.StartFade -= value;
}
public static event On.CameraFade.hook_FadeToBlack FadeToBlack
{
add => On.CameraFade.FadeToBlack += value;
remove => On.CameraFade.FadeToBlack -= value;
}
public static event On.CameraFade.hook_FadeToTransparent FadeToTransparent
{
add => On.CameraFade.FadeToTransparent += value;
remove => On.CameraFade.FadeToTransparent -= value;
}
}

}
