using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GetNextLineCast2d class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGetNextLineCast2d
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<GetNextLineCast2d> orig, GetNextLineCast2d self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<GetNextLineCast2d> orig, GetNextLineCast2d self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookDoGetNextCollider()
        {
            if (!HookedList.Contains("DoGetNextCollider"))
            {
                HookedList.Add("DoGetNextCollider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "DoGetNextCollider"),
                    DoGetNextCollider);
            }
        }

        internal static event Delegates.DoGetNextCollider_BeforeArgs _beforeDoGetNextCollider;
        internal static event Delegates.DoGetNextCollider_NormalArgs _afterDoGetNextCollider;

        private static void DoGetNextCollider(Action<GetNextLineCast2d> orig, GetNextLineCast2d self)
        {
            Delegates.Params_DoGetNextCollider @params = new()
            {
                self = self
            };
            _beforeDoGetNextCollider?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoGetNextCollider != null) _afterDoGetNextCollider.Invoke(@params);
        }

        internal static void HookGetLineCastAll()
        {
            if (!HookedList.Contains("GetLineCastAll"))
            {
                HookedList.Add("GetLineCastAll");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "GetLineCastAll"), GetLineCastAll);
            }
        }

        internal static event Delegates.GetLineCastAll_BeforeArgs _beforeGetLineCastAll;
        internal static event Delegates.GetLineCastAll_NormalArgs _afterGetLineCastAll;

        private static RaycastHit2D[] GetLineCastAll(Func<GetNextLineCast2d, RaycastHit2D[]> orig,
            GetNextLineCast2d self)
        {
            Delegates.Params_GetLineCastAll @params = new()
            {
                self = self
            };
            _beforeGetLineCastAll?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetLineCastAll != null) retVal = _afterGetLineCastAll.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoGetNextCollider_BeforeArgs(Params_DoGetNextCollider args);

        public delegate void DoGetNextCollider_NormalArgs(Params_DoGetNextCollider args);

        public delegate void GetLineCastAll_BeforeArgs(Params_GetLineCastAll args);

        public delegate RaycastHit2D[] GetLineCastAll_NormalArgs(Params_GetLineCastAll args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public GetNextLineCast2d self;
        }

        public sealed class Params_OnEnter
        {
            public GetNextLineCast2d self;
        }

        public sealed class Params_DoGetNextCollider
        {
            public GetNextLineCast2d self;
        }

        public sealed class Params_GetLineCastAll
        {
            public GetNextLineCast2d self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoGetNextCollider_BeforeArgs DoGetNextCollider
        {
            add
            {
                HookHandler._beforeDoGetNextCollider += value;
                HookHandler.HookDoGetNextCollider();
            }
            remove => HookHandler._beforeDoGetNextCollider -= value;
        }

        public static event Delegates.GetLineCastAll_BeforeArgs GetLineCastAll
        {
            add
            {
                HookHandler._beforeGetLineCastAll += value;
                HookHandler.HookGetLineCastAll();
            }
            remove => HookHandler._beforeGetLineCastAll -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoGetNextCollider_NormalArgs DoGetNextCollider
        {
            add
            {
                HookHandler._afterDoGetNextCollider += value;
                HookHandler.HookDoGetNextCollider();
            }
            remove => HookHandler._afterDoGetNextCollider -= value;
        }

        public static event Delegates.GetLineCastAll_NormalArgs GetLineCastAll
        {
            add
            {
                HookHandler._afterGetLineCastAll += value;
                HookHandler.HookGetLineCastAll();
            }
            remove => HookHandler._afterGetLineCastAll -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "OnEnter"), value);
        }

        public static event Delegates.DoGetNextCollider_NormalArgs DoGetNextCollider
        {
            add => HookEndpointManager.Add<Delegates.DoGetNextCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "DoGetNextCollider"), value);
            remove => HookEndpointManager.Remove<Delegates.DoGetNextCollider_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "DoGetNextCollider"), value);
        }

        public static event Delegates.GetLineCastAll_NormalArgs GetLineCastAll
        {
            add => HookEndpointManager.Add<Delegates.GetLineCastAll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "GetLineCastAll"), value);
            remove => HookEndpointManager.Remove<Delegates.GetLineCastAll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GetNextLineCast2d), "GetLineCastAll"), value);
        }
    }
}