using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Touch = InControl.Touch;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TouchButtonControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchButtonControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCreateControl()
        {
            if (!HookedList.Contains("CreateControl"))
            {
                HookedList.Add("CreateControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "CreateControl"), CreateControl);
            }
        }

        internal static event Delegates.CreateControl_BeforeArgs _beforeCreateControl;
        internal static event Delegates.CreateControl_NormalArgs _afterCreateControl;

        private static void CreateControl(Action<TouchButtonControl> orig, TouchButtonControl self)
        {
            Delegates.Params_CreateControl @params = new()
            {
                self = self
            };
            _beforeCreateControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCreateControl != null) _afterCreateControl.Invoke(@params);
        }

        internal static void HookDestroyControl()
        {
            if (!HookedList.Contains("DestroyControl"))
            {
                HookedList.Add("DestroyControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "DestroyControl"), DestroyControl);
            }
        }

        internal static event Delegates.DestroyControl_BeforeArgs _beforeDestroyControl;
        internal static event Delegates.DestroyControl_NormalArgs _afterDestroyControl;

        private static void DestroyControl(Action<TouchButtonControl> orig, TouchButtonControl self)
        {
            Delegates.Params_DestroyControl @params = new()
            {
                self = self
            };
            _beforeDestroyControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDestroyControl != null) _afterDestroyControl.Invoke(@params);
        }

        internal static void HookConfigureControl()
        {
            if (!HookedList.Contains("ConfigureControl"))
            {
                HookedList.Add("ConfigureControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "ConfigureControl"),
                    ConfigureControl);
            }
        }

        internal static event Delegates.ConfigureControl_BeforeArgs _beforeConfigureControl;
        internal static event Delegates.ConfigureControl_NormalArgs _afterConfigureControl;

        private static void ConfigureControl(Action<TouchButtonControl> orig, TouchButtonControl self)
        {
            Delegates.Params_ConfigureControl @params = new()
            {
                self = self
            };
            _beforeConfigureControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterConfigureControl != null) _afterConfigureControl.Invoke(@params);
        }

        internal static void HookDrawGizmos()
        {
            if (!HookedList.Contains("DrawGizmos"))
            {
                HookedList.Add("DrawGizmos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "DrawGizmos"), DrawGizmos);
            }
        }

        internal static event Delegates.DrawGizmos_BeforeArgs _beforeDrawGizmos;
        internal static event Delegates.DrawGizmos_NormalArgs _afterDrawGizmos;

        private static void DrawGizmos(Action<TouchButtonControl> orig, TouchButtonControl self)
        {
            Delegates.Params_DrawGizmos @params = new()
            {
                self = self
            };
            _beforeDrawGizmos?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDrawGizmos != null) _afterDrawGizmos.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<TouchButtonControl> orig, TouchButtonControl self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSubmitControlState()
        {
            if (!HookedList.Contains("SubmitControlState"))
            {
                HookedList.Add("SubmitControlState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "SubmitControlState"),
                    SubmitControlState);
            }
        }

        internal static event Delegates.SubmitControlState_BeforeArgs _beforeSubmitControlState;
        internal static event Delegates.SubmitControlState_NormalArgs _afterSubmitControlState;

        private static void SubmitControlState(Action<TouchButtonControl, ulong, float> orig, TouchButtonControl self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_SubmitControlState @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeSubmitControlState?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterSubmitControlState != null) _afterSubmitControlState.Invoke(@params);
        }

        internal static void HookCommitControlState()
        {
            if (!HookedList.Contains("CommitControlState"))
            {
                HookedList.Add("CommitControlState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "CommitControlState"),
                    CommitControlState);
            }
        }

        internal static event Delegates.CommitControlState_BeforeArgs _beforeCommitControlState;
        internal static event Delegates.CommitControlState_NormalArgs _afterCommitControlState;

        private static void CommitControlState(Action<TouchButtonControl, ulong, float> orig, TouchButtonControl self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_CommitControlState @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeCommitControlState?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterCommitControlState != null) _afterCommitControlState.Invoke(@params);
        }

        internal static void HookTouchBegan()
        {
            if (!HookedList.Contains("TouchBegan"))
            {
                HookedList.Add("TouchBegan");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchBegan"), TouchBegan);
            }
        }

        internal static event Delegates.TouchBegan_BeforeArgs _beforeTouchBegan;
        internal static event Delegates.TouchBegan_NormalArgs _afterTouchBegan;

        private static void TouchBegan(Action<TouchButtonControl, Touch> orig, TouchButtonControl self, Touch touch)
        {
            Delegates.Params_TouchBegan @params = new()
            {
                self = self, touch = touch
            };
            _beforeTouchBegan?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterTouchBegan != null) _afterTouchBegan.Invoke(@params);
        }

        internal static void HookTouchMoved()
        {
            if (!HookedList.Contains("TouchMoved"))
            {
                HookedList.Add("TouchMoved");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchMoved"), TouchMoved);
            }
        }

        internal static event Delegates.TouchMoved_BeforeArgs _beforeTouchMoved;
        internal static event Delegates.TouchMoved_NormalArgs _afterTouchMoved;

        private static void TouchMoved(Action<TouchButtonControl, Touch> orig, TouchButtonControl self, Touch touch)
        {
            Delegates.Params_TouchMoved @params = new()
            {
                self = self, touch = touch
            };
            _beforeTouchMoved?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterTouchMoved != null) _afterTouchMoved.Invoke(@params);
        }

        internal static void HookTouchEnded()
        {
            if (!HookedList.Contains("TouchEnded"))
            {
                HookedList.Add("TouchEnded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchEnded"), TouchEnded);
            }
        }

        internal static event Delegates.TouchEnded_BeforeArgs _beforeTouchEnded;
        internal static event Delegates.TouchEnded_NormalArgs _afterTouchEnded;

        private static void TouchEnded(Action<TouchButtonControl, Touch> orig, TouchButtonControl self, Touch touch)
        {
            Delegates.Params_TouchEnded @params = new()
            {
                self = self, touch = touch
            };
            _beforeTouchEnded?.Invoke(@params);
            self = @params.self;
            touch = @params.touch;
            orig(self, touch);
            if (_afterTouchEnded != null) _afterTouchEnded.Invoke(@params);
        }

        internal static void Hookget_ButtonState()
        {
            if (!HookedList.Contains("get_ButtonState"))
            {
                HookedList.Add("get_ButtonState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_ButtonState"),
                    get_ButtonState);
            }
        }

        internal static event Delegates.get_ButtonState_BeforeArgs _beforeget_ButtonState;
        internal static event Delegates.get_ButtonState_NormalArgs _afterget_ButtonState;

        private static bool get_ButtonState(Func<TouchButtonControl, bool> orig, TouchButtonControl self)
        {
            Delegates.Params_get_ButtonState @params = new()
            {
                self = self
            };
            _beforeget_ButtonState?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonState != null) retVal = _afterget_ButtonState.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ButtonState()
        {
            if (!HookedList.Contains("set_ButtonState"))
            {
                HookedList.Add("set_ButtonState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_ButtonState"),
                    set_ButtonState);
            }
        }

        internal static event Delegates.set_ButtonState_BeforeArgs _beforeset_ButtonState;
        internal static event Delegates.set_ButtonState_NormalArgs _afterset_ButtonState;

        private static void set_ButtonState(Action<TouchButtonControl, bool> orig, TouchButtonControl self, bool value)
        {
            Delegates.Params_set_ButtonState @params = new()
            {
                self = self, value = value
            };
            _beforeset_ButtonState?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ButtonState != null) _afterset_ButtonState.Invoke(@params);
        }

        internal static void Hookget_ButtonPosition()
        {
            if (!HookedList.Contains("get_ButtonPosition"))
            {
                HookedList.Add("get_ButtonPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_ButtonPosition"),
                    get_ButtonPosition);
            }
        }

        internal static event Delegates.get_ButtonPosition_BeforeArgs _beforeget_ButtonPosition;
        internal static event Delegates.get_ButtonPosition_NormalArgs _afterget_ButtonPosition;

        private static Vector3 get_ButtonPosition(Func<TouchButtonControl, Vector3> orig, TouchButtonControl self)
        {
            Delegates.Params_get_ButtonPosition @params = new()
            {
                self = self
            };
            _beforeget_ButtonPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ButtonPosition != null) retVal = _afterget_ButtonPosition.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ButtonPosition()
        {
            if (!HookedList.Contains("set_ButtonPosition"))
            {
                HookedList.Add("set_ButtonPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_ButtonPosition"),
                    set_ButtonPosition);
            }
        }

        internal static event Delegates.set_ButtonPosition_BeforeArgs _beforeset_ButtonPosition;
        internal static event Delegates.set_ButtonPosition_NormalArgs _afterset_ButtonPosition;

        private static void set_ButtonPosition(Action<TouchButtonControl, Vector3> orig, TouchButtonControl self,
            Vector3 value)
        {
            Delegates.Params_set_ButtonPosition @params = new()
            {
                self = self, value = value
            };
            _beforeset_ButtonPosition?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ButtonPosition != null) _afterset_ButtonPosition.Invoke(@params);
        }

        internal static void Hookget_Anchor()
        {
            if (!HookedList.Contains("get_Anchor"))
            {
                HookedList.Add("get_Anchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_Anchor"), get_Anchor);
            }
        }

        internal static event Delegates.get_Anchor_BeforeArgs _beforeget_Anchor;
        internal static event Delegates.get_Anchor_NormalArgs _afterget_Anchor;

        private static TouchControlAnchor get_Anchor(Func<TouchButtonControl, TouchControlAnchor> orig,
            TouchButtonControl self)
        {
            Delegates.Params_get_Anchor @params = new()
            {
                self = self
            };
            _beforeget_Anchor?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Anchor != null) retVal = _afterget_Anchor.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Anchor()
        {
            if (!HookedList.Contains("set_Anchor"))
            {
                HookedList.Add("set_Anchor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_Anchor"), set_Anchor);
            }
        }

        internal static event Delegates.set_Anchor_BeforeArgs _beforeset_Anchor;
        internal static event Delegates.set_Anchor_NormalArgs _afterset_Anchor;

        private static void set_Anchor(Action<TouchButtonControl, TouchControlAnchor> orig, TouchButtonControl self,
            TouchControlAnchor value)
        {
            Delegates.Params_set_Anchor @params = new()
            {
                self = self, value = value
            };
            _beforeset_Anchor?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Anchor != null) _afterset_Anchor.Invoke(@params);
        }

        internal static void Hookget_Offset()
        {
            if (!HookedList.Contains("get_Offset"))
            {
                HookedList.Add("get_Offset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_Offset"), get_Offset);
            }
        }

        internal static event Delegates.get_Offset_BeforeArgs _beforeget_Offset;
        internal static event Delegates.get_Offset_NormalArgs _afterget_Offset;

        private static Vector2 get_Offset(Func<TouchButtonControl, Vector2> orig, TouchButtonControl self)
        {
            Delegates.Params_get_Offset @params = new()
            {
                self = self
            };
            _beforeget_Offset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Offset != null) retVal = _afterget_Offset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Offset()
        {
            if (!HookedList.Contains("set_Offset"))
            {
                HookedList.Add("set_Offset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_Offset"), set_Offset);
            }
        }

        internal static event Delegates.set_Offset_BeforeArgs _beforeset_Offset;
        internal static event Delegates.set_Offset_NormalArgs _afterset_Offset;

        private static void set_Offset(Action<TouchButtonControl, Vector2> orig, TouchButtonControl self, Vector2 value)
        {
            Delegates.Params_set_Offset @params = new()
            {
                self = self, value = value
            };
            _beforeset_Offset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Offset != null) _afterset_Offset.Invoke(@params);
        }

        internal static void Hookget_OffsetUnitType()
        {
            if (!HookedList.Contains("get_OffsetUnitType"))
            {
                HookedList.Add("get_OffsetUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_OffsetUnitType"),
                    get_OffsetUnitType);
            }
        }

        internal static event Delegates.get_OffsetUnitType_BeforeArgs _beforeget_OffsetUnitType;
        internal static event Delegates.get_OffsetUnitType_NormalArgs _afterget_OffsetUnitType;

        private static TouchUnitType get_OffsetUnitType(Func<TouchButtonControl, TouchUnitType> orig,
            TouchButtonControl self)
        {
            Delegates.Params_get_OffsetUnitType @params = new()
            {
                self = self
            };
            _beforeget_OffsetUnitType?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_OffsetUnitType != null) retVal = _afterget_OffsetUnitType.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_OffsetUnitType()
        {
            if (!HookedList.Contains("set_OffsetUnitType"))
            {
                HookedList.Add("set_OffsetUnitType");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_OffsetUnitType"),
                    set_OffsetUnitType);
            }
        }

        internal static event Delegates.set_OffsetUnitType_BeforeArgs _beforeset_OffsetUnitType;
        internal static event Delegates.set_OffsetUnitType_NormalArgs _afterset_OffsetUnitType;

        private static void set_OffsetUnitType(Action<TouchButtonControl, TouchUnitType> orig, TouchButtonControl self,
            TouchUnitType value)
        {
            Delegates.Params_set_OffsetUnitType @params = new()
            {
                self = self, value = value
            };
            _beforeset_OffsetUnitType?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_OffsetUnitType != null) _afterset_OffsetUnitType.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CommitControlState_BeforeArgs(Params_CommitControlState args);

        public delegate void CommitControlState_NormalArgs(Params_CommitControlState args);

        public delegate void ConfigureControl_BeforeArgs(Params_ConfigureControl args);

        public delegate void ConfigureControl_NormalArgs(Params_ConfigureControl args);

        public delegate void CreateControl_BeforeArgs(Params_CreateControl args);

        public delegate void CreateControl_NormalArgs(Params_CreateControl args);

        public delegate void DestroyControl_BeforeArgs(Params_DestroyControl args);

        public delegate void DestroyControl_NormalArgs(Params_DestroyControl args);

        public delegate void DrawGizmos_BeforeArgs(Params_DrawGizmos args);

        public delegate void DrawGizmos_NormalArgs(Params_DrawGizmos args);

        public delegate void get_Anchor_BeforeArgs(Params_get_Anchor args);

        public delegate TouchControlAnchor get_Anchor_NormalArgs(Params_get_Anchor args);

        public delegate void get_ButtonPosition_BeforeArgs(Params_get_ButtonPosition args);

        public delegate Vector3 get_ButtonPosition_NormalArgs(Params_get_ButtonPosition args);

        public delegate void get_ButtonState_BeforeArgs(Params_get_ButtonState args);

        public delegate bool get_ButtonState_NormalArgs(Params_get_ButtonState args);

        public delegate void get_Offset_BeforeArgs(Params_get_Offset args);

        public delegate Vector2 get_Offset_NormalArgs(Params_get_Offset args);

        public delegate void get_OffsetUnitType_BeforeArgs(Params_get_OffsetUnitType args);

        public delegate TouchUnitType get_OffsetUnitType_NormalArgs(Params_get_OffsetUnitType args);

        public delegate void set_Anchor_BeforeArgs(Params_set_Anchor args);

        public delegate void set_Anchor_NormalArgs(Params_set_Anchor args);

        public delegate void set_ButtonPosition_BeforeArgs(Params_set_ButtonPosition args);

        public delegate void set_ButtonPosition_NormalArgs(Params_set_ButtonPosition args);

        public delegate void set_ButtonState_BeforeArgs(Params_set_ButtonState args);

        public delegate void set_ButtonState_NormalArgs(Params_set_ButtonState args);

        public delegate void set_Offset_BeforeArgs(Params_set_Offset args);

        public delegate void set_Offset_NormalArgs(Params_set_Offset args);

        public delegate void set_OffsetUnitType_BeforeArgs(Params_set_OffsetUnitType args);

        public delegate void set_OffsetUnitType_NormalArgs(Params_set_OffsetUnitType args);

        public delegate void SubmitControlState_BeforeArgs(Params_SubmitControlState args);

        public delegate void SubmitControlState_NormalArgs(Params_SubmitControlState args);

        public delegate void TouchBegan_BeforeArgs(Params_TouchBegan args);

        public delegate void TouchBegan_NormalArgs(Params_TouchBegan args);

        public delegate void TouchEnded_BeforeArgs(Params_TouchEnded args);

        public delegate void TouchEnded_NormalArgs(Params_TouchEnded args);

        public delegate void TouchMoved_BeforeArgs(Params_TouchMoved args);

        public delegate void TouchMoved_NormalArgs(Params_TouchMoved args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_CreateControl
        {
            public TouchButtonControl self;
        }

        public sealed class Params_DestroyControl
        {
            public TouchButtonControl self;
        }

        public sealed class Params_ConfigureControl
        {
            public TouchButtonControl self;
        }

        public sealed class Params_DrawGizmos
        {
            public TouchButtonControl self;
        }

        public sealed class Params_Update
        {
            public TouchButtonControl self;
        }

        public sealed class Params_SubmitControlState
        {
            public float deltaTime;
            public TouchButtonControl self;
            public ulong updateTick;
        }

        public sealed class Params_CommitControlState
        {
            public float deltaTime;
            public TouchButtonControl self;
            public ulong updateTick;
        }

        public sealed class Params_TouchBegan
        {
            public TouchButtonControl self;
            public Touch touch;
        }

        public sealed class Params_TouchMoved
        {
            public TouchButtonControl self;
            public Touch touch;
        }

        public sealed class Params_TouchEnded
        {
            public TouchButtonControl self;
            public Touch touch;
        }

        public sealed class Params_get_ButtonState
        {
            public TouchButtonControl self;
        }

        public sealed class Params_set_ButtonState
        {
            public TouchButtonControl self;
            public bool value;
        }

        public sealed class Params_get_ButtonPosition
        {
            public TouchButtonControl self;
        }

        public sealed class Params_set_ButtonPosition
        {
            public TouchButtonControl self;
            public Vector3 value;
        }

        public sealed class Params_get_Anchor
        {
            public TouchButtonControl self;
        }

        public sealed class Params_set_Anchor
        {
            public TouchButtonControl self;
            public TouchControlAnchor value;
        }

        public sealed class Params_get_Offset
        {
            public TouchButtonControl self;
        }

        public sealed class Params_set_Offset
        {
            public TouchButtonControl self;
            public Vector2 value;
        }

        public sealed class Params_get_OffsetUnitType
        {
            public TouchButtonControl self;
        }

        public sealed class Params_set_OffsetUnitType
        {
            public TouchButtonControl self;
            public TouchUnitType value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CreateControl_BeforeArgs CreateControl
        {
            add
            {
                HookHandler._beforeCreateControl += value;
                HookHandler.HookCreateControl();
            }
            remove => HookHandler._beforeCreateControl -= value;
        }

        public static event Delegates.DestroyControl_BeforeArgs DestroyControl
        {
            add
            {
                HookHandler._beforeDestroyControl += value;
                HookHandler.HookDestroyControl();
            }
            remove => HookHandler._beforeDestroyControl -= value;
        }

        public static event Delegates.ConfigureControl_BeforeArgs ConfigureControl
        {
            add
            {
                HookHandler._beforeConfigureControl += value;
                HookHandler.HookConfigureControl();
            }
            remove => HookHandler._beforeConfigureControl -= value;
        }

        public static event Delegates.DrawGizmos_BeforeArgs DrawGizmos
        {
            add
            {
                HookHandler._beforeDrawGizmos += value;
                HookHandler.HookDrawGizmos();
            }
            remove => HookHandler._beforeDrawGizmos -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SubmitControlState_BeforeArgs SubmitControlState
        {
            add
            {
                HookHandler._beforeSubmitControlState += value;
                HookHandler.HookSubmitControlState();
            }
            remove => HookHandler._beforeSubmitControlState -= value;
        }

        public static event Delegates.CommitControlState_BeforeArgs CommitControlState
        {
            add
            {
                HookHandler._beforeCommitControlState += value;
                HookHandler.HookCommitControlState();
            }
            remove => HookHandler._beforeCommitControlState -= value;
        }

        public static event Delegates.TouchBegan_BeforeArgs TouchBegan
        {
            add
            {
                HookHandler._beforeTouchBegan += value;
                HookHandler.HookTouchBegan();
            }
            remove => HookHandler._beforeTouchBegan -= value;
        }

        public static event Delegates.TouchMoved_BeforeArgs TouchMoved
        {
            add
            {
                HookHandler._beforeTouchMoved += value;
                HookHandler.HookTouchMoved();
            }
            remove => HookHandler._beforeTouchMoved -= value;
        }

        public static event Delegates.TouchEnded_BeforeArgs TouchEnded
        {
            add
            {
                HookHandler._beforeTouchEnded += value;
                HookHandler.HookTouchEnded();
            }
            remove => HookHandler._beforeTouchEnded -= value;
        }

        public static event Delegates.get_ButtonState_BeforeArgs get_ButtonState
        {
            add
            {
                HookHandler._beforeget_ButtonState += value;
                HookHandler.Hookget_ButtonState();
            }
            remove => HookHandler._beforeget_ButtonState -= value;
        }

        public static event Delegates.set_ButtonState_BeforeArgs set_ButtonState
        {
            add
            {
                HookHandler._beforeset_ButtonState += value;
                HookHandler.Hookset_ButtonState();
            }
            remove => HookHandler._beforeset_ButtonState -= value;
        }

        public static event Delegates.get_ButtonPosition_BeforeArgs get_ButtonPosition
        {
            add
            {
                HookHandler._beforeget_ButtonPosition += value;
                HookHandler.Hookget_ButtonPosition();
            }
            remove => HookHandler._beforeget_ButtonPosition -= value;
        }

        public static event Delegates.set_ButtonPosition_BeforeArgs set_ButtonPosition
        {
            add
            {
                HookHandler._beforeset_ButtonPosition += value;
                HookHandler.Hookset_ButtonPosition();
            }
            remove => HookHandler._beforeset_ButtonPosition -= value;
        }

        public static event Delegates.get_Anchor_BeforeArgs get_Anchor
        {
            add
            {
                HookHandler._beforeget_Anchor += value;
                HookHandler.Hookget_Anchor();
            }
            remove => HookHandler._beforeget_Anchor -= value;
        }

        public static event Delegates.set_Anchor_BeforeArgs set_Anchor
        {
            add
            {
                HookHandler._beforeset_Anchor += value;
                HookHandler.Hookset_Anchor();
            }
            remove => HookHandler._beforeset_Anchor -= value;
        }

        public static event Delegates.get_Offset_BeforeArgs get_Offset
        {
            add
            {
                HookHandler._beforeget_Offset += value;
                HookHandler.Hookget_Offset();
            }
            remove => HookHandler._beforeget_Offset -= value;
        }

        public static event Delegates.set_Offset_BeforeArgs set_Offset
        {
            add
            {
                HookHandler._beforeset_Offset += value;
                HookHandler.Hookset_Offset();
            }
            remove => HookHandler._beforeset_Offset -= value;
        }

        public static event Delegates.get_OffsetUnitType_BeforeArgs get_OffsetUnitType
        {
            add
            {
                HookHandler._beforeget_OffsetUnitType += value;
                HookHandler.Hookget_OffsetUnitType();
            }
            remove => HookHandler._beforeget_OffsetUnitType -= value;
        }

        public static event Delegates.set_OffsetUnitType_BeforeArgs set_OffsetUnitType
        {
            add
            {
                HookHandler._beforeset_OffsetUnitType += value;
                HookHandler.Hookset_OffsetUnitType();
            }
            remove => HookHandler._beforeset_OffsetUnitType -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CreateControl_NormalArgs CreateControl
        {
            add
            {
                HookHandler._afterCreateControl += value;
                HookHandler.HookCreateControl();
            }
            remove => HookHandler._afterCreateControl -= value;
        }

        public static event Delegates.DestroyControl_NormalArgs DestroyControl
        {
            add
            {
                HookHandler._afterDestroyControl += value;
                HookHandler.HookDestroyControl();
            }
            remove => HookHandler._afterDestroyControl -= value;
        }

        public static event Delegates.ConfigureControl_NormalArgs ConfigureControl
        {
            add
            {
                HookHandler._afterConfigureControl += value;
                HookHandler.HookConfigureControl();
            }
            remove => HookHandler._afterConfigureControl -= value;
        }

        public static event Delegates.DrawGizmos_NormalArgs DrawGizmos
        {
            add
            {
                HookHandler._afterDrawGizmos += value;
                HookHandler.HookDrawGizmos();
            }
            remove => HookHandler._afterDrawGizmos -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SubmitControlState_NormalArgs SubmitControlState
        {
            add
            {
                HookHandler._afterSubmitControlState += value;
                HookHandler.HookSubmitControlState();
            }
            remove => HookHandler._afterSubmitControlState -= value;
        }

        public static event Delegates.CommitControlState_NormalArgs CommitControlState
        {
            add
            {
                HookHandler._afterCommitControlState += value;
                HookHandler.HookCommitControlState();
            }
            remove => HookHandler._afterCommitControlState -= value;
        }

        public static event Delegates.TouchBegan_NormalArgs TouchBegan
        {
            add
            {
                HookHandler._afterTouchBegan += value;
                HookHandler.HookTouchBegan();
            }
            remove => HookHandler._afterTouchBegan -= value;
        }

        public static event Delegates.TouchMoved_NormalArgs TouchMoved
        {
            add
            {
                HookHandler._afterTouchMoved += value;
                HookHandler.HookTouchMoved();
            }
            remove => HookHandler._afterTouchMoved -= value;
        }

        public static event Delegates.TouchEnded_NormalArgs TouchEnded
        {
            add
            {
                HookHandler._afterTouchEnded += value;
                HookHandler.HookTouchEnded();
            }
            remove => HookHandler._afterTouchEnded -= value;
        }

        public static event Delegates.get_ButtonState_NormalArgs get_ButtonState
        {
            add
            {
                HookHandler._afterget_ButtonState += value;
                HookHandler.Hookget_ButtonState();
            }
            remove => HookHandler._afterget_ButtonState -= value;
        }

        public static event Delegates.set_ButtonState_NormalArgs set_ButtonState
        {
            add
            {
                HookHandler._afterset_ButtonState += value;
                HookHandler.Hookset_ButtonState();
            }
            remove => HookHandler._afterset_ButtonState -= value;
        }

        public static event Delegates.get_ButtonPosition_NormalArgs get_ButtonPosition
        {
            add
            {
                HookHandler._afterget_ButtonPosition += value;
                HookHandler.Hookget_ButtonPosition();
            }
            remove => HookHandler._afterget_ButtonPosition -= value;
        }

        public static event Delegates.set_ButtonPosition_NormalArgs set_ButtonPosition
        {
            add
            {
                HookHandler._afterset_ButtonPosition += value;
                HookHandler.Hookset_ButtonPosition();
            }
            remove => HookHandler._afterset_ButtonPosition -= value;
        }

        public static event Delegates.get_Anchor_NormalArgs get_Anchor
        {
            add
            {
                HookHandler._afterget_Anchor += value;
                HookHandler.Hookget_Anchor();
            }
            remove => HookHandler._afterget_Anchor -= value;
        }

        public static event Delegates.set_Anchor_NormalArgs set_Anchor
        {
            add
            {
                HookHandler._afterset_Anchor += value;
                HookHandler.Hookset_Anchor();
            }
            remove => HookHandler._afterset_Anchor -= value;
        }

        public static event Delegates.get_Offset_NormalArgs get_Offset
        {
            add
            {
                HookHandler._afterget_Offset += value;
                HookHandler.Hookget_Offset();
            }
            remove => HookHandler._afterget_Offset -= value;
        }

        public static event Delegates.set_Offset_NormalArgs set_Offset
        {
            add
            {
                HookHandler._afterset_Offset += value;
                HookHandler.Hookset_Offset();
            }
            remove => HookHandler._afterset_Offset -= value;
        }

        public static event Delegates.get_OffsetUnitType_NormalArgs get_OffsetUnitType
        {
            add
            {
                HookHandler._afterget_OffsetUnitType += value;
                HookHandler.Hookget_OffsetUnitType();
            }
            remove => HookHandler._afterget_OffsetUnitType -= value;
        }

        public static event Delegates.set_OffsetUnitType_NormalArgs set_OffsetUnitType
        {
            add
            {
                HookHandler._afterset_OffsetUnitType += value;
                HookHandler.Hookset_OffsetUnitType();
            }
            remove => HookHandler._afterset_OffsetUnitType -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CreateControl_NormalArgs CreateControl
        {
            add => HookEndpointManager.Add<Delegates.CreateControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "CreateControl"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "CreateControl"), value);
        }

        public static event Delegates.DestroyControl_NormalArgs DestroyControl
        {
            add => HookEndpointManager.Add<Delegates.DestroyControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "DestroyControl"), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "DestroyControl"), value);
        }

        public static event Delegates.ConfigureControl_NormalArgs ConfigureControl
        {
            add => HookEndpointManager.Add<Delegates.ConfigureControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "ConfigureControl"), value);
            remove => HookEndpointManager.Remove<Delegates.ConfigureControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "ConfigureControl"), value);
        }

        public static event Delegates.DrawGizmos_NormalArgs DrawGizmos
        {
            add => HookEndpointManager.Add<Delegates.DrawGizmos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "DrawGizmos"), value);
            remove => HookEndpointManager.Remove<Delegates.DrawGizmos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "DrawGizmos"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "Update"), value);
        }

        public static event Delegates.SubmitControlState_NormalArgs SubmitControlState
        {
            add => HookEndpointManager.Add<Delegates.SubmitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "SubmitControlState"), value);
            remove => HookEndpointManager.Remove<Delegates.SubmitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "SubmitControlState"), value);
        }

        public static event Delegates.CommitControlState_NormalArgs CommitControlState
        {
            add => HookEndpointManager.Add<Delegates.CommitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "CommitControlState"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitControlState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "CommitControlState"), value);
        }

        public static event Delegates.TouchBegan_NormalArgs TouchBegan
        {
            add => HookEndpointManager.Add<Delegates.TouchBegan_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchBegan"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchBegan_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchBegan"), value);
        }

        public static event Delegates.TouchMoved_NormalArgs TouchMoved
        {
            add => HookEndpointManager.Add<Delegates.TouchMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchMoved"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchMoved_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchMoved"), value);
        }

        public static event Delegates.TouchEnded_NormalArgs TouchEnded
        {
            add => HookEndpointManager.Add<Delegates.TouchEnded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchEnded"), value);
            remove => HookEndpointManager.Remove<Delegates.TouchEnded_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "TouchEnded"), value);
        }

        public static event Delegates.get_ButtonState_NormalArgs get_ButtonState
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_ButtonState"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_ButtonState"), value);
        }

        public static event Delegates.set_ButtonState_NormalArgs set_ButtonState
        {
            add => HookEndpointManager.Add<Delegates.set_ButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_ButtonState"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_ButtonState"), value);
        }

        public static event Delegates.get_ButtonPosition_NormalArgs get_ButtonPosition
        {
            add => HookEndpointManager.Add<Delegates.get_ButtonPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_ButtonPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ButtonPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_ButtonPosition"), value);
        }

        public static event Delegates.set_ButtonPosition_NormalArgs set_ButtonPosition
        {
            add => HookEndpointManager.Add<Delegates.set_ButtonPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_ButtonPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ButtonPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_ButtonPosition"), value);
        }

        public static event Delegates.get_Anchor_NormalArgs get_Anchor
        {
            add => HookEndpointManager.Add<Delegates.get_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_Anchor"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_Anchor"), value);
        }

        public static event Delegates.set_Anchor_NormalArgs set_Anchor
        {
            add => HookEndpointManager.Add<Delegates.set_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_Anchor"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Anchor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_Anchor"), value);
        }

        public static event Delegates.get_Offset_NormalArgs get_Offset
        {
            add => HookEndpointManager.Add<Delegates.get_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_Offset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_Offset"), value);
        }

        public static event Delegates.set_Offset_NormalArgs set_Offset
        {
            add => HookEndpointManager.Add<Delegates.set_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_Offset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Offset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_Offset"), value);
        }

        public static event Delegates.get_OffsetUnitType_NormalArgs get_OffsetUnitType
        {
            add => HookEndpointManager.Add<Delegates.get_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_OffsetUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.get_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "get_OffsetUnitType"), value);
        }

        public static event Delegates.set_OffsetUnitType_NormalArgs set_OffsetUnitType
        {
            add => HookEndpointManager.Add<Delegates.set_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_OffsetUnitType"), value);
            remove => HookEndpointManager.Remove<Delegates.set_OffsetUnitType_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TouchButtonControl), "set_OffsetUnitType"), value);
        }
    }
}