using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TouchButtonControl class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTouchButtonControl
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookCreateControl()
{
if (!HookedList.Contains("CreateControl"))
{
HookedList.Add("CreateControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "CreateControl", true), CreateControl);

}
}
internal static event Delegates.CreateControl_BeforeArgs _beforeCreateControl;
internal static event Delegates.CreateControl_AfterArgs _afterCreateControl;
private static void CreateControl(Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self)
{
Delegates.Params_CreateControl @params = new() 
{
self = self
};
if (_beforeCreateControl != null)
{
foreach (Delegates.CreateControl_BeforeArgs toInvoke in _beforeCreateControl.GetInvocationList())
{
try
{
_beforeCreateControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateControl != null)
{
foreach (Delegates.CreateControl_AfterArgs toInvoke in _afterCreateControl.GetInvocationList())
{
try
{
_afterCreateControl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDestroyControl()
{
if (!HookedList.Contains("DestroyControl"))
{
HookedList.Add("DestroyControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "DestroyControl", true), DestroyControl);

}
}
internal static event Delegates.DestroyControl_BeforeArgs _beforeDestroyControl;
internal static event Delegates.DestroyControl_AfterArgs _afterDestroyControl;
private static void DestroyControl(Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self)
{
Delegates.Params_DestroyControl @params = new() 
{
self = self
};
if (_beforeDestroyControl != null)
{
foreach (Delegates.DestroyControl_BeforeArgs toInvoke in _beforeDestroyControl.GetInvocationList())
{
try
{
_beforeDestroyControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDestroyControl != null)
{
foreach (Delegates.DestroyControl_AfterArgs toInvoke in _afterDestroyControl.GetInvocationList())
{
try
{
_afterDestroyControl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookConfigureControl()
{
if (!HookedList.Contains("ConfigureControl"))
{
HookedList.Add("ConfigureControl");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "ConfigureControl", true), ConfigureControl);

}
}
internal static event Delegates.ConfigureControl_BeforeArgs _beforeConfigureControl;
internal static event Delegates.ConfigureControl_AfterArgs _afterConfigureControl;
private static void ConfigureControl(Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self)
{
Delegates.Params_ConfigureControl @params = new() 
{
self = self
};
if (_beforeConfigureControl != null)
{
foreach (Delegates.ConfigureControl_BeforeArgs toInvoke in _beforeConfigureControl.GetInvocationList())
{
try
{
_beforeConfigureControl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterConfigureControl != null)
{
foreach (Delegates.ConfigureControl_AfterArgs toInvoke in _afterConfigureControl.GetInvocationList())
{
try
{
_afterConfigureControl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDrawGizmos()
{
if (!HookedList.Contains("DrawGizmos"))
{
HookedList.Add("DrawGizmos");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "DrawGizmos", true), DrawGizmos);

}
}
internal static event Delegates.DrawGizmos_BeforeArgs _beforeDrawGizmos;
internal static event Delegates.DrawGizmos_AfterArgs _afterDrawGizmos;
private static void DrawGizmos(Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self)
{
Delegates.Params_DrawGizmos @params = new() 
{
self = self
};
if (_beforeDrawGizmos != null)
{
foreach (Delegates.DrawGizmos_BeforeArgs toInvoke in _beforeDrawGizmos.GetInvocationList())
{
try
{
_beforeDrawGizmos?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDrawGizmos != null)
{
foreach (Delegates.DrawGizmos_AfterArgs toInvoke in _afterDrawGizmos.GetInvocationList())
{
try
{
_afterDrawGizmos.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSubmitControlState()
{
if (!HookedList.Contains("SubmitControlState"))
{
HookedList.Add("SubmitControlState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "SubmitControlState", true), SubmitControlState);

}
}
internal static event Delegates.SubmitControlState_BeforeArgs _beforeSubmitControlState;
internal static event Delegates.SubmitControlState_AfterArgs _afterSubmitControlState;
private static void SubmitControlState(Action<InControl.TouchButtonControl,  ulong,  float> orig, InControl.TouchButtonControl self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_SubmitControlState @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeSubmitControlState != null)
{
foreach (Delegates.SubmitControlState_BeforeArgs toInvoke in _beforeSubmitControlState.GetInvocationList())
{
try
{
_beforeSubmitControlState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterSubmitControlState != null)
{
foreach (Delegates.SubmitControlState_AfterArgs toInvoke in _afterSubmitControlState.GetInvocationList())
{
try
{
_afterSubmitControlState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCommitControlState()
{
if (!HookedList.Contains("CommitControlState"))
{
HookedList.Add("CommitControlState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "CommitControlState", true), CommitControlState);

}
}
internal static event Delegates.CommitControlState_BeforeArgs _beforeCommitControlState;
internal static event Delegates.CommitControlState_AfterArgs _afterCommitControlState;
private static void CommitControlState(Action<InControl.TouchButtonControl,  ulong,  float> orig, InControl.TouchButtonControl self,  ulong updateTick,  float deltaTime)
{
Delegates.Params_CommitControlState @params = new() 
{
self = self
, updateTick = updateTick
, deltaTime = deltaTime
};
if (_beforeCommitControlState != null)
{
foreach (Delegates.CommitControlState_BeforeArgs toInvoke in _beforeCommitControlState.GetInvocationList())
{
try
{
_beforeCommitControlState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
updateTick = @params.updateTick;
deltaTime = @params.deltaTime;
orig(self, updateTick, deltaTime);
if (_afterCommitControlState != null)
{
foreach (Delegates.CommitControlState_AfterArgs toInvoke in _afterCommitControlState.GetInvocationList())
{
try
{
_afterCommitControlState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchBegan()
{
if (!HookedList.Contains("TouchBegan"))
{
HookedList.Add("TouchBegan");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchBegan", true), TouchBegan);

}
}
internal static event Delegates.TouchBegan_BeforeArgs _beforeTouchBegan;
internal static event Delegates.TouchBegan_AfterArgs _afterTouchBegan;
private static void TouchBegan(Action<InControl.TouchButtonControl,  InControl.Touch> orig, InControl.TouchButtonControl self,  InControl.Touch touch)
{
Delegates.Params_TouchBegan @params = new() 
{
self = self
, touch = touch
};
if (_beforeTouchBegan != null)
{
foreach (Delegates.TouchBegan_BeforeArgs toInvoke in _beforeTouchBegan.GetInvocationList())
{
try
{
_beforeTouchBegan?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterTouchBegan != null)
{
foreach (Delegates.TouchBegan_AfterArgs toInvoke in _afterTouchBegan.GetInvocationList())
{
try
{
_afterTouchBegan.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchMoved()
{
if (!HookedList.Contains("TouchMoved"))
{
HookedList.Add("TouchMoved");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchMoved", true), TouchMoved);

}
}
internal static event Delegates.TouchMoved_BeforeArgs _beforeTouchMoved;
internal static event Delegates.TouchMoved_AfterArgs _afterTouchMoved;
private static void TouchMoved(Action<InControl.TouchButtonControl,  InControl.Touch> orig, InControl.TouchButtonControl self,  InControl.Touch touch)
{
Delegates.Params_TouchMoved @params = new() 
{
self = self
, touch = touch
};
if (_beforeTouchMoved != null)
{
foreach (Delegates.TouchMoved_BeforeArgs toInvoke in _beforeTouchMoved.GetInvocationList())
{
try
{
_beforeTouchMoved?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterTouchMoved != null)
{
foreach (Delegates.TouchMoved_AfterArgs toInvoke in _afterTouchMoved.GetInvocationList())
{
try
{
_afterTouchMoved.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTouchEnded()
{
if (!HookedList.Contains("TouchEnded"))
{
HookedList.Add("TouchEnded");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchEnded", true), TouchEnded);

}
}
internal static event Delegates.TouchEnded_BeforeArgs _beforeTouchEnded;
internal static event Delegates.TouchEnded_AfterArgs _afterTouchEnded;
private static void TouchEnded(Action<InControl.TouchButtonControl,  InControl.Touch> orig, InControl.TouchButtonControl self,  InControl.Touch touch)
{
Delegates.Params_TouchEnded @params = new() 
{
self = self
, touch = touch
};
if (_beforeTouchEnded != null)
{
foreach (Delegates.TouchEnded_BeforeArgs toInvoke in _beforeTouchEnded.GetInvocationList())
{
try
{
_beforeTouchEnded?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
touch = @params.touch;
orig(self, touch);
if (_afterTouchEnded != null)
{
foreach (Delegates.TouchEnded_AfterArgs toInvoke in _afterTouchEnded.GetInvocationList())
{
try
{
_afterTouchEnded.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ButtonState()
{
if (!HookedList.Contains("get_ButtonState"))
{
HookedList.Add("get_ButtonState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_ButtonState", true), get_ButtonState);

}
}
internal static event Delegates.get_ButtonState_BeforeArgs _beforeget_ButtonState;
internal static event Delegates.get_ButtonState_AfterArgs _afterget_ButtonState;
private static bool get_ButtonState(Func<InControl.TouchButtonControl, bool> orig, InControl.TouchButtonControl self)
{
Delegates.Params_get_ButtonState @params = new() 
{
self = self
};
if (_beforeget_ButtonState != null)
{
foreach (Delegates.get_ButtonState_BeforeArgs toInvoke in _beforeget_ButtonState.GetInvocationList())
{
try
{
_beforeget_ButtonState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ButtonState != null)
{
foreach (Delegates.get_ButtonState_AfterArgs toInvoke in _afterget_ButtonState.GetInvocationList())
{
try
{
retVal = _afterget_ButtonState.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ButtonState()
{
if (!HookedList.Contains("set_ButtonState"))
{
HookedList.Add("set_ButtonState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_ButtonState", true), set_ButtonState);

}
}
internal static event Delegates.set_ButtonState_BeforeArgs _beforeset_ButtonState;
internal static event Delegates.set_ButtonState_AfterArgs _afterset_ButtonState;
private static void set_ButtonState(Action<InControl.TouchButtonControl,  bool> orig, InControl.TouchButtonControl self,  bool value)
{
Delegates.Params_set_ButtonState @params = new() 
{
self = self
, value = value
};
if (_beforeset_ButtonState != null)
{
foreach (Delegates.set_ButtonState_BeforeArgs toInvoke in _beforeset_ButtonState.GetInvocationList())
{
try
{
_beforeset_ButtonState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ButtonState != null)
{
foreach (Delegates.set_ButtonState_AfterArgs toInvoke in _afterset_ButtonState.GetInvocationList())
{
try
{
_afterset_ButtonState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ButtonPosition()
{
if (!HookedList.Contains("get_ButtonPosition"))
{
HookedList.Add("get_ButtonPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_ButtonPosition", true), get_ButtonPosition);

}
}
internal static event Delegates.get_ButtonPosition_BeforeArgs _beforeget_ButtonPosition;
internal static event Delegates.get_ButtonPosition_AfterArgs _afterget_ButtonPosition;
private static UnityEngine.Vector3 get_ButtonPosition(Func<InControl.TouchButtonControl, UnityEngine.Vector3> orig, InControl.TouchButtonControl self)
{
Delegates.Params_get_ButtonPosition @params = new() 
{
self = self
};
if (_beforeget_ButtonPosition != null)
{
foreach (Delegates.get_ButtonPosition_BeforeArgs toInvoke in _beforeget_ButtonPosition.GetInvocationList())
{
try
{
_beforeget_ButtonPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ButtonPosition != null)
{
foreach (Delegates.get_ButtonPosition_AfterArgs toInvoke in _afterget_ButtonPosition.GetInvocationList())
{
try
{
retVal = _afterget_ButtonPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ButtonPosition()
{
if (!HookedList.Contains("set_ButtonPosition"))
{
HookedList.Add("set_ButtonPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_ButtonPosition", true), set_ButtonPosition);

}
}
internal static event Delegates.set_ButtonPosition_BeforeArgs _beforeset_ButtonPosition;
internal static event Delegates.set_ButtonPosition_AfterArgs _afterset_ButtonPosition;
private static void set_ButtonPosition(Action<InControl.TouchButtonControl,  UnityEngine.Vector3> orig, InControl.TouchButtonControl self,  UnityEngine.Vector3 value)
{
Delegates.Params_set_ButtonPosition @params = new() 
{
self = self
, value = value
};
if (_beforeset_ButtonPosition != null)
{
foreach (Delegates.set_ButtonPosition_BeforeArgs toInvoke in _beforeset_ButtonPosition.GetInvocationList())
{
try
{
_beforeset_ButtonPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ButtonPosition != null)
{
foreach (Delegates.set_ButtonPosition_AfterArgs toInvoke in _afterset_ButtonPosition.GetInvocationList())
{
try
{
_afterset_ButtonPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Anchor()
{
if (!HookedList.Contains("get_Anchor"))
{
HookedList.Add("get_Anchor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_Anchor", true), get_Anchor);

}
}
internal static event Delegates.get_Anchor_BeforeArgs _beforeget_Anchor;
internal static event Delegates.get_Anchor_AfterArgs _afterget_Anchor;
private static InControl.TouchControlAnchor get_Anchor(Func<InControl.TouchButtonControl, InControl.TouchControlAnchor> orig, InControl.TouchButtonControl self)
{
Delegates.Params_get_Anchor @params = new() 
{
self = self
};
if (_beforeget_Anchor != null)
{
foreach (Delegates.get_Anchor_BeforeArgs toInvoke in _beforeget_Anchor.GetInvocationList())
{
try
{
_beforeget_Anchor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Anchor != null)
{
foreach (Delegates.get_Anchor_AfterArgs toInvoke in _afterget_Anchor.GetInvocationList())
{
try
{
retVal = _afterget_Anchor.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Anchor()
{
if (!HookedList.Contains("set_Anchor"))
{
HookedList.Add("set_Anchor");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_Anchor", true), set_Anchor);

}
}
internal static event Delegates.set_Anchor_BeforeArgs _beforeset_Anchor;
internal static event Delegates.set_Anchor_AfterArgs _afterset_Anchor;
private static void set_Anchor(Action<InControl.TouchButtonControl,  InControl.TouchControlAnchor> orig, InControl.TouchButtonControl self,  InControl.TouchControlAnchor value)
{
Delegates.Params_set_Anchor @params = new() 
{
self = self
, value = value
};
if (_beforeset_Anchor != null)
{
foreach (Delegates.set_Anchor_BeforeArgs toInvoke in _beforeset_Anchor.GetInvocationList())
{
try
{
_beforeset_Anchor?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Anchor != null)
{
foreach (Delegates.set_Anchor_AfterArgs toInvoke in _afterset_Anchor.GetInvocationList())
{
try
{
_afterset_Anchor.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Offset()
{
if (!HookedList.Contains("get_Offset"))
{
HookedList.Add("get_Offset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_Offset", true), get_Offset);

}
}
internal static event Delegates.get_Offset_BeforeArgs _beforeget_Offset;
internal static event Delegates.get_Offset_AfterArgs _afterget_Offset;
private static UnityEngine.Vector2 get_Offset(Func<InControl.TouchButtonControl, UnityEngine.Vector2> orig, InControl.TouchButtonControl self)
{
Delegates.Params_get_Offset @params = new() 
{
self = self
};
if (_beforeget_Offset != null)
{
foreach (Delegates.get_Offset_BeforeArgs toInvoke in _beforeget_Offset.GetInvocationList())
{
try
{
_beforeget_Offset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Offset != null)
{
foreach (Delegates.get_Offset_AfterArgs toInvoke in _afterget_Offset.GetInvocationList())
{
try
{
retVal = _afterget_Offset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Offset()
{
if (!HookedList.Contains("set_Offset"))
{
HookedList.Add("set_Offset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_Offset", true), set_Offset);

}
}
internal static event Delegates.set_Offset_BeforeArgs _beforeset_Offset;
internal static event Delegates.set_Offset_AfterArgs _afterset_Offset;
private static void set_Offset(Action<InControl.TouchButtonControl,  UnityEngine.Vector2> orig, InControl.TouchButtonControl self,  UnityEngine.Vector2 value)
{
Delegates.Params_set_Offset @params = new() 
{
self = self
, value = value
};
if (_beforeset_Offset != null)
{
foreach (Delegates.set_Offset_BeforeArgs toInvoke in _beforeset_Offset.GetInvocationList())
{
try
{
_beforeset_Offset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Offset != null)
{
foreach (Delegates.set_Offset_AfterArgs toInvoke in _afterset_Offset.GetInvocationList())
{
try
{
_afterset_Offset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_OffsetUnitType()
{
if (!HookedList.Contains("get_OffsetUnitType"))
{
HookedList.Add("get_OffsetUnitType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_OffsetUnitType", true), get_OffsetUnitType);

}
}
internal static event Delegates.get_OffsetUnitType_BeforeArgs _beforeget_OffsetUnitType;
internal static event Delegates.get_OffsetUnitType_AfterArgs _afterget_OffsetUnitType;
private static InControl.TouchUnitType get_OffsetUnitType(Func<InControl.TouchButtonControl, InControl.TouchUnitType> orig, InControl.TouchButtonControl self)
{
Delegates.Params_get_OffsetUnitType @params = new() 
{
self = self
};
if (_beforeget_OffsetUnitType != null)
{
foreach (Delegates.get_OffsetUnitType_BeforeArgs toInvoke in _beforeget_OffsetUnitType.GetInvocationList())
{
try
{
_beforeget_OffsetUnitType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_OffsetUnitType != null)
{
foreach (Delegates.get_OffsetUnitType_AfterArgs toInvoke in _afterget_OffsetUnitType.GetInvocationList())
{
try
{
retVal = _afterget_OffsetUnitType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_OffsetUnitType()
{
if (!HookedList.Contains("set_OffsetUnitType"))
{
HookedList.Add("set_OffsetUnitType");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_OffsetUnitType", true), set_OffsetUnitType);

}
}
internal static event Delegates.set_OffsetUnitType_BeforeArgs _beforeset_OffsetUnitType;
internal static event Delegates.set_OffsetUnitType_AfterArgs _afterset_OffsetUnitType;
private static void set_OffsetUnitType(Action<InControl.TouchButtonControl,  InControl.TouchUnitType> orig, InControl.TouchButtonControl self,  InControl.TouchUnitType value)
{
Delegates.Params_set_OffsetUnitType @params = new() 
{
self = self
, value = value
};
if (_beforeset_OffsetUnitType != null)
{
foreach (Delegates.set_OffsetUnitType_BeforeArgs toInvoke in _beforeset_OffsetUnitType.GetInvocationList())
{
try
{
_beforeset_OffsetUnitType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_OffsetUnitType != null)
{
foreach (Delegates.set_OffsetUnitType_AfterArgs toInvoke in _afterset_OffsetUnitType.GetInvocationList())
{
try
{
_afterset_OffsetUnitType.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_CreateControl
{
public InControl.TouchButtonControl self;
}
public delegate void CreateControl_BeforeArgs(Params_CreateControl args);
public delegate void CreateControl_AfterArgs(Params_CreateControl args);
public delegate void CreateControl_WithArgs (Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self);
public sealed class Params_DestroyControl
{
public InControl.TouchButtonControl self;
}
public delegate void DestroyControl_BeforeArgs(Params_DestroyControl args);
public delegate void DestroyControl_AfterArgs(Params_DestroyControl args);
public delegate void DestroyControl_WithArgs (Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self);
public sealed class Params_ConfigureControl
{
public InControl.TouchButtonControl self;
}
public delegate void ConfigureControl_BeforeArgs(Params_ConfigureControl args);
public delegate void ConfigureControl_AfterArgs(Params_ConfigureControl args);
public delegate void ConfigureControl_WithArgs (Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self);
public sealed class Params_DrawGizmos
{
public InControl.TouchButtonControl self;
}
public delegate void DrawGizmos_BeforeArgs(Params_DrawGizmos args);
public delegate void DrawGizmos_AfterArgs(Params_DrawGizmos args);
public delegate void DrawGizmos_WithArgs (Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self);
public sealed class Params_Update
{
public InControl.TouchButtonControl self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.TouchButtonControl> orig, InControl.TouchButtonControl self);
public sealed class Params_SubmitControlState
{
public InControl.TouchButtonControl self;
public ulong updateTick;
public float deltaTime;
}
public delegate void SubmitControlState_BeforeArgs(Params_SubmitControlState args);
public delegate void SubmitControlState_AfterArgs(Params_SubmitControlState args);
public delegate void SubmitControlState_WithArgs (Action<InControl.TouchButtonControl,  ulong,  float> orig, InControl.TouchButtonControl self,  ulong updateTick,  float deltaTime);
public sealed class Params_CommitControlState
{
public InControl.TouchButtonControl self;
public ulong updateTick;
public float deltaTime;
}
public delegate void CommitControlState_BeforeArgs(Params_CommitControlState args);
public delegate void CommitControlState_AfterArgs(Params_CommitControlState args);
public delegate void CommitControlState_WithArgs (Action<InControl.TouchButtonControl,  ulong,  float> orig, InControl.TouchButtonControl self,  ulong updateTick,  float deltaTime);
public sealed class Params_TouchBegan
{
public InControl.TouchButtonControl self;
public InControl.Touch touch;
}
public delegate void TouchBegan_BeforeArgs(Params_TouchBegan args);
public delegate void TouchBegan_AfterArgs(Params_TouchBegan args);
public delegate void TouchBegan_WithArgs (Action<InControl.TouchButtonControl,  InControl.Touch> orig, InControl.TouchButtonControl self,  InControl.Touch touch);
public sealed class Params_TouchMoved
{
public InControl.TouchButtonControl self;
public InControl.Touch touch;
}
public delegate void TouchMoved_BeforeArgs(Params_TouchMoved args);
public delegate void TouchMoved_AfterArgs(Params_TouchMoved args);
public delegate void TouchMoved_WithArgs (Action<InControl.TouchButtonControl,  InControl.Touch> orig, InControl.TouchButtonControl self,  InControl.Touch touch);
public sealed class Params_TouchEnded
{
public InControl.TouchButtonControl self;
public InControl.Touch touch;
}
public delegate void TouchEnded_BeforeArgs(Params_TouchEnded args);
public delegate void TouchEnded_AfterArgs(Params_TouchEnded args);
public delegate void TouchEnded_WithArgs (Action<InControl.TouchButtonControl,  InControl.Touch> orig, InControl.TouchButtonControl self,  InControl.Touch touch);
public sealed class Params_get_ButtonState
{
public InControl.TouchButtonControl self;
}
public delegate void get_ButtonState_BeforeArgs(Params_get_ButtonState args);
public delegate bool get_ButtonState_AfterArgs(Params_get_ButtonState args, bool ret);
public delegate bool get_ButtonState_WithArgs (Func<InControl.TouchButtonControl, bool> orig, InControl.TouchButtonControl self);
public sealed class Params_set_ButtonState
{
public InControl.TouchButtonControl self;
public bool value;
}
public delegate void set_ButtonState_BeforeArgs(Params_set_ButtonState args);
public delegate void set_ButtonState_AfterArgs(Params_set_ButtonState args);
public delegate void set_ButtonState_WithArgs (Action<InControl.TouchButtonControl,  bool> orig, InControl.TouchButtonControl self,  bool value);
public sealed class Params_get_ButtonPosition
{
public InControl.TouchButtonControl self;
}
public delegate void get_ButtonPosition_BeforeArgs(Params_get_ButtonPosition args);
public delegate UnityEngine.Vector3 get_ButtonPosition_AfterArgs(Params_get_ButtonPosition args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 get_ButtonPosition_WithArgs (Func<InControl.TouchButtonControl, UnityEngine.Vector3> orig, InControl.TouchButtonControl self);
public sealed class Params_set_ButtonPosition
{
public InControl.TouchButtonControl self;
public UnityEngine.Vector3 value;
}
public delegate void set_ButtonPosition_BeforeArgs(Params_set_ButtonPosition args);
public delegate void set_ButtonPosition_AfterArgs(Params_set_ButtonPosition args);
public delegate void set_ButtonPosition_WithArgs (Action<InControl.TouchButtonControl,  UnityEngine.Vector3> orig, InControl.TouchButtonControl self,  UnityEngine.Vector3 value);
public sealed class Params_get_Anchor
{
public InControl.TouchButtonControl self;
}
public delegate void get_Anchor_BeforeArgs(Params_get_Anchor args);
public delegate InControl.TouchControlAnchor get_Anchor_AfterArgs(Params_get_Anchor args, InControl.TouchControlAnchor ret);
public delegate InControl.TouchControlAnchor get_Anchor_WithArgs (Func<InControl.TouchButtonControl, InControl.TouchControlAnchor> orig, InControl.TouchButtonControl self);
public sealed class Params_set_Anchor
{
public InControl.TouchButtonControl self;
public InControl.TouchControlAnchor value;
}
public delegate void set_Anchor_BeforeArgs(Params_set_Anchor args);
public delegate void set_Anchor_AfterArgs(Params_set_Anchor args);
public delegate void set_Anchor_WithArgs (Action<InControl.TouchButtonControl,  InControl.TouchControlAnchor> orig, InControl.TouchButtonControl self,  InControl.TouchControlAnchor value);
public sealed class Params_get_Offset
{
public InControl.TouchButtonControl self;
}
public delegate void get_Offset_BeforeArgs(Params_get_Offset args);
public delegate UnityEngine.Vector2 get_Offset_AfterArgs(Params_get_Offset args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_Offset_WithArgs (Func<InControl.TouchButtonControl, UnityEngine.Vector2> orig, InControl.TouchButtonControl self);
public sealed class Params_set_Offset
{
public InControl.TouchButtonControl self;
public UnityEngine.Vector2 value;
}
public delegate void set_Offset_BeforeArgs(Params_set_Offset args);
public delegate void set_Offset_AfterArgs(Params_set_Offset args);
public delegate void set_Offset_WithArgs (Action<InControl.TouchButtonControl,  UnityEngine.Vector2> orig, InControl.TouchButtonControl self,  UnityEngine.Vector2 value);
public sealed class Params_get_OffsetUnitType
{
public InControl.TouchButtonControl self;
}
public delegate void get_OffsetUnitType_BeforeArgs(Params_get_OffsetUnitType args);
public delegate InControl.TouchUnitType get_OffsetUnitType_AfterArgs(Params_get_OffsetUnitType args, InControl.TouchUnitType ret);
public delegate InControl.TouchUnitType get_OffsetUnitType_WithArgs (Func<InControl.TouchButtonControl, InControl.TouchUnitType> orig, InControl.TouchButtonControl self);
public sealed class Params_set_OffsetUnitType
{
public InControl.TouchButtonControl self;
public InControl.TouchUnitType value;
}
public delegate void set_OffsetUnitType_BeforeArgs(Params_set_OffsetUnitType args);
public delegate void set_OffsetUnitType_AfterArgs(Params_set_OffsetUnitType args);
public delegate void set_OffsetUnitType_WithArgs (Action<InControl.TouchButtonControl,  InControl.TouchUnitType> orig, InControl.TouchButtonControl self,  InControl.TouchUnitType value);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.CreateControl_BeforeArgs CreateControl
{
add
{

HookHandler._beforeCreateControl += value;
HookHandler.HookCreateControl();
}
remove => HookHandler._beforeCreateControl -= value;
}
public static event Delegates.DestroyControl_BeforeArgs DestroyControl
{
add
{

HookHandler._beforeDestroyControl += value;
HookHandler.HookDestroyControl();
}
remove => HookHandler._beforeDestroyControl -= value;
}
public static event Delegates.ConfigureControl_BeforeArgs ConfigureControl
{
add
{

HookHandler._beforeConfigureControl += value;
HookHandler.HookConfigureControl();
}
remove => HookHandler._beforeConfigureControl -= value;
}
public static event Delegates.DrawGizmos_BeforeArgs DrawGizmos
{
add
{

HookHandler._beforeDrawGizmos += value;
HookHandler.HookDrawGizmos();
}
remove => HookHandler._beforeDrawGizmos -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.SubmitControlState_BeforeArgs SubmitControlState
{
add
{

HookHandler._beforeSubmitControlState += value;
HookHandler.HookSubmitControlState();
}
remove => HookHandler._beforeSubmitControlState -= value;
}
public static event Delegates.CommitControlState_BeforeArgs CommitControlState
{
add
{

HookHandler._beforeCommitControlState += value;
HookHandler.HookCommitControlState();
}
remove => HookHandler._beforeCommitControlState -= value;
}
public static event Delegates.TouchBegan_BeforeArgs TouchBegan
{
add
{

HookHandler._beforeTouchBegan += value;
HookHandler.HookTouchBegan();
}
remove => HookHandler._beforeTouchBegan -= value;
}
public static event Delegates.TouchMoved_BeforeArgs TouchMoved
{
add
{

HookHandler._beforeTouchMoved += value;
HookHandler.HookTouchMoved();
}
remove => HookHandler._beforeTouchMoved -= value;
}
public static event Delegates.TouchEnded_BeforeArgs TouchEnded
{
add
{

HookHandler._beforeTouchEnded += value;
HookHandler.HookTouchEnded();
}
remove => HookHandler._beforeTouchEnded -= value;
}
public static event Delegates.get_ButtonState_BeforeArgs get_ButtonState
{
add
{

HookHandler._beforeget_ButtonState += value;
HookHandler.Hookget_ButtonState();
}
remove => HookHandler._beforeget_ButtonState -= value;
}
public static event Delegates.set_ButtonState_BeforeArgs set_ButtonState
{
add
{

HookHandler._beforeset_ButtonState += value;
HookHandler.Hookset_ButtonState();
}
remove => HookHandler._beforeset_ButtonState -= value;
}
public static event Delegates.get_ButtonPosition_BeforeArgs get_ButtonPosition
{
add
{

HookHandler._beforeget_ButtonPosition += value;
HookHandler.Hookget_ButtonPosition();
}
remove => HookHandler._beforeget_ButtonPosition -= value;
}
public static event Delegates.set_ButtonPosition_BeforeArgs set_ButtonPosition
{
add
{

HookHandler._beforeset_ButtonPosition += value;
HookHandler.Hookset_ButtonPosition();
}
remove => HookHandler._beforeset_ButtonPosition -= value;
}
public static event Delegates.get_Anchor_BeforeArgs get_Anchor
{
add
{

HookHandler._beforeget_Anchor += value;
HookHandler.Hookget_Anchor();
}
remove => HookHandler._beforeget_Anchor -= value;
}
public static event Delegates.set_Anchor_BeforeArgs set_Anchor
{
add
{

HookHandler._beforeset_Anchor += value;
HookHandler.Hookset_Anchor();
}
remove => HookHandler._beforeset_Anchor -= value;
}
public static event Delegates.get_Offset_BeforeArgs get_Offset
{
add
{

HookHandler._beforeget_Offset += value;
HookHandler.Hookget_Offset();
}
remove => HookHandler._beforeget_Offset -= value;
}
public static event Delegates.set_Offset_BeforeArgs set_Offset
{
add
{

HookHandler._beforeset_Offset += value;
HookHandler.Hookset_Offset();
}
remove => HookHandler._beforeset_Offset -= value;
}
public static event Delegates.get_OffsetUnitType_BeforeArgs get_OffsetUnitType
{
add
{

HookHandler._beforeget_OffsetUnitType += value;
HookHandler.Hookget_OffsetUnitType();
}
remove => HookHandler._beforeget_OffsetUnitType -= value;
}
public static event Delegates.set_OffsetUnitType_BeforeArgs set_OffsetUnitType
{
add
{

HookHandler._beforeset_OffsetUnitType += value;
HookHandler.Hookset_OffsetUnitType();
}
remove => HookHandler._beforeset_OffsetUnitType -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.CreateControl_AfterArgs CreateControl
{
add
{

HookHandler._afterCreateControl += value;
HookHandler.HookCreateControl();
}
remove => HookHandler._afterCreateControl -= value;
}
public static event Delegates.DestroyControl_AfterArgs DestroyControl
{
add
{

HookHandler._afterDestroyControl += value;
HookHandler.HookDestroyControl();
}
remove => HookHandler._afterDestroyControl -= value;
}
public static event Delegates.ConfigureControl_AfterArgs ConfigureControl
{
add
{

HookHandler._afterConfigureControl += value;
HookHandler.HookConfigureControl();
}
remove => HookHandler._afterConfigureControl -= value;
}
public static event Delegates.DrawGizmos_AfterArgs DrawGizmos
{
add
{

HookHandler._afterDrawGizmos += value;
HookHandler.HookDrawGizmos();
}
remove => HookHandler._afterDrawGizmos -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.SubmitControlState_AfterArgs SubmitControlState
{
add
{

HookHandler._afterSubmitControlState += value;
HookHandler.HookSubmitControlState();
}
remove => HookHandler._afterSubmitControlState -= value;
}
public static event Delegates.CommitControlState_AfterArgs CommitControlState
{
add
{

HookHandler._afterCommitControlState += value;
HookHandler.HookCommitControlState();
}
remove => HookHandler._afterCommitControlState -= value;
}
public static event Delegates.TouchBegan_AfterArgs TouchBegan
{
add
{

HookHandler._afterTouchBegan += value;
HookHandler.HookTouchBegan();
}
remove => HookHandler._afterTouchBegan -= value;
}
public static event Delegates.TouchMoved_AfterArgs TouchMoved
{
add
{

HookHandler._afterTouchMoved += value;
HookHandler.HookTouchMoved();
}
remove => HookHandler._afterTouchMoved -= value;
}
public static event Delegates.TouchEnded_AfterArgs TouchEnded
{
add
{

HookHandler._afterTouchEnded += value;
HookHandler.HookTouchEnded();
}
remove => HookHandler._afterTouchEnded -= value;
}
public static event Delegates.get_ButtonState_AfterArgs get_ButtonState
{
add
{

HookHandler._afterget_ButtonState += value;
HookHandler.Hookget_ButtonState();
}
remove => HookHandler._afterget_ButtonState -= value;
}
public static event Delegates.set_ButtonState_AfterArgs set_ButtonState
{
add
{

HookHandler._afterset_ButtonState += value;
HookHandler.Hookset_ButtonState();
}
remove => HookHandler._afterset_ButtonState -= value;
}
public static event Delegates.get_ButtonPosition_AfterArgs get_ButtonPosition
{
add
{

HookHandler._afterget_ButtonPosition += value;
HookHandler.Hookget_ButtonPosition();
}
remove => HookHandler._afterget_ButtonPosition -= value;
}
public static event Delegates.set_ButtonPosition_AfterArgs set_ButtonPosition
{
add
{

HookHandler._afterset_ButtonPosition += value;
HookHandler.Hookset_ButtonPosition();
}
remove => HookHandler._afterset_ButtonPosition -= value;
}
public static event Delegates.get_Anchor_AfterArgs get_Anchor
{
add
{

HookHandler._afterget_Anchor += value;
HookHandler.Hookget_Anchor();
}
remove => HookHandler._afterget_Anchor -= value;
}
public static event Delegates.set_Anchor_AfterArgs set_Anchor
{
add
{

HookHandler._afterset_Anchor += value;
HookHandler.Hookset_Anchor();
}
remove => HookHandler._afterset_Anchor -= value;
}
public static event Delegates.get_Offset_AfterArgs get_Offset
{
add
{

HookHandler._afterget_Offset += value;
HookHandler.Hookget_Offset();
}
remove => HookHandler._afterget_Offset -= value;
}
public static event Delegates.set_Offset_AfterArgs set_Offset
{
add
{

HookHandler._afterset_Offset += value;
HookHandler.Hookset_Offset();
}
remove => HookHandler._afterset_Offset -= value;
}
public static event Delegates.get_OffsetUnitType_AfterArgs get_OffsetUnitType
{
add
{

HookHandler._afterget_OffsetUnitType += value;
HookHandler.Hookget_OffsetUnitType();
}
remove => HookHandler._afterget_OffsetUnitType -= value;
}
public static event Delegates.set_OffsetUnitType_AfterArgs set_OffsetUnitType
{
add
{

HookHandler._afterset_OffsetUnitType += value;
HookHandler.Hookset_OffsetUnitType();
}
remove => HookHandler._afterset_OffsetUnitType -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.CreateControl_WithArgs CreateControl
{
add => HookEndpointManager.Add<Delegates.CreateControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "CreateControl", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "CreateControl", true), value);
}
public static event Delegates.DestroyControl_WithArgs DestroyControl
{
add => HookEndpointManager.Add<Delegates.DestroyControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "DestroyControl", true), value);
remove => HookEndpointManager.Remove<Delegates.DestroyControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "DestroyControl", true), value);
}
public static event Delegates.ConfigureControl_WithArgs ConfigureControl
{
add => HookEndpointManager.Add<Delegates.ConfigureControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "ConfigureControl", true), value);
remove => HookEndpointManager.Remove<Delegates.ConfigureControl_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "ConfigureControl", true), value);
}
public static event Delegates.DrawGizmos_WithArgs DrawGizmos
{
add => HookEndpointManager.Add<Delegates.DrawGizmos_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "DrawGizmos", true), value);
remove => HookEndpointManager.Remove<Delegates.DrawGizmos_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "DrawGizmos", true), value);
}
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "Update", true), value);
}
public static event Delegates.SubmitControlState_WithArgs SubmitControlState
{
add => HookEndpointManager.Add<Delegates.SubmitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "SubmitControlState", true), value);
remove => HookEndpointManager.Remove<Delegates.SubmitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "SubmitControlState", true), value);
}
public static event Delegates.CommitControlState_WithArgs CommitControlState
{
add => HookEndpointManager.Add<Delegates.CommitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "CommitControlState", true), value);
remove => HookEndpointManager.Remove<Delegates.CommitControlState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "CommitControlState", true), value);
}
public static event Delegates.TouchBegan_WithArgs TouchBegan
{
add => HookEndpointManager.Add<Delegates.TouchBegan_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchBegan", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchBegan_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchBegan", true), value);
}
public static event Delegates.TouchMoved_WithArgs TouchMoved
{
add => HookEndpointManager.Add<Delegates.TouchMoved_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchMoved", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchMoved_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchMoved", true), value);
}
public static event Delegates.TouchEnded_WithArgs TouchEnded
{
add => HookEndpointManager.Add<Delegates.TouchEnded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchEnded", true), value);
remove => HookEndpointManager.Remove<Delegates.TouchEnded_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "TouchEnded", true), value);
}
public static event Delegates.get_ButtonState_WithArgs get_ButtonState
{
add => HookEndpointManager.Add<Delegates.get_ButtonState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_ButtonState", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ButtonState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_ButtonState", true), value);
}
public static event Delegates.set_ButtonState_WithArgs set_ButtonState
{
add => HookEndpointManager.Add<Delegates.set_ButtonState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_ButtonState", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ButtonState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_ButtonState", true), value);
}
public static event Delegates.get_ButtonPosition_WithArgs get_ButtonPosition
{
add => HookEndpointManager.Add<Delegates.get_ButtonPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_ButtonPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ButtonPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_ButtonPosition", true), value);
}
public static event Delegates.set_ButtonPosition_WithArgs set_ButtonPosition
{
add => HookEndpointManager.Add<Delegates.set_ButtonPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_ButtonPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ButtonPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_ButtonPosition", true), value);
}
public static event Delegates.get_Anchor_WithArgs get_Anchor
{
add => HookEndpointManager.Add<Delegates.get_Anchor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_Anchor", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Anchor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_Anchor", true), value);
}
public static event Delegates.set_Anchor_WithArgs set_Anchor
{
add => HookEndpointManager.Add<Delegates.set_Anchor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_Anchor", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Anchor_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_Anchor", true), value);
}
public static event Delegates.get_Offset_WithArgs get_Offset
{
add => HookEndpointManager.Add<Delegates.get_Offset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_Offset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Offset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_Offset", true), value);
}
public static event Delegates.set_Offset_WithArgs set_Offset
{
add => HookEndpointManager.Add<Delegates.set_Offset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_Offset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Offset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_Offset", true), value);
}
public static event Delegates.get_OffsetUnitType_WithArgs get_OffsetUnitType
{
add => HookEndpointManager.Add<Delegates.get_OffsetUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_OffsetUnitType", true), value);
remove => HookEndpointManager.Remove<Delegates.get_OffsetUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "get_OffsetUnitType", true), value);
}
public static event Delegates.set_OffsetUnitType_WithArgs set_OffsetUnitType
{
add => HookEndpointManager.Add<Delegates.set_OffsetUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_OffsetUnitType", true), value);
remove => HookEndpointManager.Remove<Delegates.set_OffsetUnitType_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.TouchButtonControl), "set_OffsetUnitType", true), value);
}
}

}
