using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Encryption class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnEncryption
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookEncrypt_Array()
        {
            if (!HookedList.Contains("Encrypt_Array"))
            {
                HookedList.Add("Encrypt_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Encryption), "Encrypt_Array", false), Encrypt_Array);
            }
        }

        internal static event Delegates.Encrypt_Array_BeforeArgs _beforeEncrypt_Array;
        internal static event Delegates.Encrypt_Array_AfterArgs _afterEncrypt_Array;

        private static byte[] Encrypt_Array(Func<byte[], byte[]> orig, byte[] decryptedBytes)
        {
            Delegates.Params_Encrypt_Array @params = new()
            {
                decryptedBytes = decryptedBytes
            };
            if (_beforeEncrypt_Array != null)
                foreach (Delegates.Encrypt_Array_BeforeArgs toInvoke in _beforeEncrypt_Array.GetInvocationList())
                    try
                    {
                        _beforeEncrypt_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            decryptedBytes = @params.decryptedBytes;
            var retVal = orig(decryptedBytes);
            if (_afterEncrypt_Array != null)
                foreach (Delegates.Encrypt_Array_AfterArgs toInvoke in _afterEncrypt_Array.GetInvocationList())
                    try
                    {
                        retVal = _afterEncrypt_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDecrypt_Array()
        {
            if (!HookedList.Contains("Decrypt_Array"))
            {
                HookedList.Add("Decrypt_Array");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Encryption), "Decrypt_Array", false), Decrypt_Array);
            }
        }

        internal static event Delegates.Decrypt_Array_BeforeArgs _beforeDecrypt_Array;
        internal static event Delegates.Decrypt_Array_AfterArgs _afterDecrypt_Array;

        private static byte[] Decrypt_Array(Func<byte[], byte[]> orig, byte[] encryptedBytes)
        {
            Delegates.Params_Decrypt_Array @params = new()
            {
                encryptedBytes = encryptedBytes
            };
            if (_beforeDecrypt_Array != null)
                foreach (Delegates.Decrypt_Array_BeforeArgs toInvoke in _beforeDecrypt_Array.GetInvocationList())
                    try
                    {
                        _beforeDecrypt_Array?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            encryptedBytes = @params.encryptedBytes;
            var retVal = orig(encryptedBytes);
            if (_afterDecrypt_Array != null)
                foreach (Delegates.Decrypt_Array_AfterArgs toInvoke in _afterDecrypt_Array.GetInvocationList())
                    try
                    {
                        retVal = _afterDecrypt_Array.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookEncrypt_string()
        {
            if (!HookedList.Contains("Encrypt_string"))
            {
                HookedList.Add("Encrypt_string");
                On.Encryption.Encrypt_string += Encrypt_string;
            }
        }

        internal static event Delegates.Encrypt_string_BeforeArgs _beforeEncrypt_string;
        internal static event Delegates.Encrypt_string_AfterArgs _afterEncrypt_string;

        private static string Encrypt_string(On.Encryption.orig_Encrypt_string orig, string unencryptedString)
        {
            Delegates.Params_Encrypt_string @params = new()
            {
                unencryptedString = unencryptedString
            };
            if (_beforeEncrypt_string != null)
                foreach (Delegates.Encrypt_string_BeforeArgs toInvoke in _beforeEncrypt_string.GetInvocationList())
                    try
                    {
                        _beforeEncrypt_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            unencryptedString = @params.unencryptedString;
            var retVal = orig(unencryptedString);
            if (_afterEncrypt_string != null)
                foreach (Delegates.Encrypt_string_AfterArgs toInvoke in _afterEncrypt_string.GetInvocationList())
                    try
                    {
                        retVal = _afterEncrypt_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookDecrypt_string()
        {
            if (!HookedList.Contains("Decrypt_string"))
            {
                HookedList.Add("Decrypt_string");
                On.Encryption.Decrypt_string += Decrypt_string;
            }
        }

        internal static event Delegates.Decrypt_string_BeforeArgs _beforeDecrypt_string;
        internal static event Delegates.Decrypt_string_AfterArgs _afterDecrypt_string;

        private static string Decrypt_string(On.Encryption.orig_Decrypt_string orig, string encryptedString)
        {
            Delegates.Params_Decrypt_string @params = new()
            {
                encryptedString = encryptedString
            };
            if (_beforeDecrypt_string != null)
                foreach (Delegates.Decrypt_string_BeforeArgs toInvoke in _beforeDecrypt_string.GetInvocationList())
                    try
                    {
                        _beforeDecrypt_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            encryptedString = @params.encryptedString;
            var retVal = orig(encryptedString);
            if (_afterDecrypt_string != null)
                foreach (Delegates.Decrypt_string_AfterArgs toInvoke in _afterDecrypt_string.GetInvocationList())
                    try
                    {
                        retVal = _afterDecrypt_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate byte[] Decrypt_Array_AfterArgs(Params_Decrypt_Array args, byte[] ret);

        public delegate void Decrypt_Array_BeforeArgs(Params_Decrypt_Array args);

        public delegate byte[] Decrypt_Array_WithArgs(Func<byte[], byte[]> orig, byte[] encryptedBytes);

        public delegate string Decrypt_string_AfterArgs(Params_Decrypt_string args, string ret);

        public delegate void Decrypt_string_BeforeArgs(Params_Decrypt_string args);

        public delegate string Decrypt_string_WithArgs(Func<string, string> orig, string encryptedString);

        public delegate byte[] Encrypt_Array_AfterArgs(Params_Encrypt_Array args, byte[] ret);

        public delegate void Encrypt_Array_BeforeArgs(Params_Encrypt_Array args);

        public delegate byte[] Encrypt_Array_WithArgs(Func<byte[], byte[]> orig, byte[] decryptedBytes);

        public delegate string Encrypt_string_AfterArgs(Params_Encrypt_string args, string ret);

        public delegate void Encrypt_string_BeforeArgs(Params_Encrypt_string args);

        public delegate string Encrypt_string_WithArgs(Func<string, string> orig, string unencryptedString);

        public sealed class Params_Encrypt_Array
        {
            public byte[] decryptedBytes;
        }

        public sealed class Params_Decrypt_Array
        {
            public byte[] encryptedBytes;
        }

        public sealed class Params_Encrypt_string
        {
            public string unencryptedString;
        }

        public sealed class Params_Decrypt_string
        {
            public string encryptedString;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Encrypt_Array_BeforeArgs Encrypt_Array
        {
            add
            {
                HookHandler._beforeEncrypt_Array += value;
                HookHandler.HookEncrypt_Array();
            }
            remove => HookHandler._beforeEncrypt_Array -= value;
        }

        public static event Delegates.Decrypt_Array_BeforeArgs Decrypt_Array
        {
            add
            {
                HookHandler._beforeDecrypt_Array += value;
                HookHandler.HookDecrypt_Array();
            }
            remove => HookHandler._beforeDecrypt_Array -= value;
        }

        public static event Delegates.Encrypt_string_BeforeArgs Encrypt_string
        {
            add
            {
                HookHandler._beforeEncrypt_string += value;
                HookHandler.HookEncrypt_string();
            }
            remove => HookHandler._beforeEncrypt_string -= value;
        }

        public static event Delegates.Decrypt_string_BeforeArgs Decrypt_string
        {
            add
            {
                HookHandler._beforeDecrypt_string += value;
                HookHandler.HookDecrypt_string();
            }
            remove => HookHandler._beforeDecrypt_string -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Encrypt_Array_AfterArgs Encrypt_Array
        {
            add
            {
                HookHandler._afterEncrypt_Array += value;
                HookHandler.HookEncrypt_Array();
            }
            remove => HookHandler._afterEncrypt_Array -= value;
        }

        public static event Delegates.Decrypt_Array_AfterArgs Decrypt_Array
        {
            add
            {
                HookHandler._afterDecrypt_Array += value;
                HookHandler.HookDecrypt_Array();
            }
            remove => HookHandler._afterDecrypt_Array -= value;
        }

        public static event Delegates.Encrypt_string_AfterArgs Encrypt_string
        {
            add
            {
                HookHandler._afterEncrypt_string += value;
                HookHandler.HookEncrypt_string();
            }
            remove => HookHandler._afterEncrypt_string -= value;
        }

        public static event Delegates.Decrypt_string_AfterArgs Decrypt_string
        {
            add
            {
                HookHandler._afterDecrypt_string += value;
                HookHandler.HookDecrypt_string();
            }
            remove => HookHandler._afterDecrypt_string -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Encrypt_Array_WithArgs Encrypt_Array
        {
            add => HookEndpointManager.Add<Delegates.Encrypt_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Encryption), "Encrypt", false), value);
            remove => HookEndpointManager.Remove<Delegates.Encrypt_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Encryption), "Encrypt", false), value);
        }

        public static event Delegates.Decrypt_Array_WithArgs Decrypt_Array
        {
            add => HookEndpointManager.Add<Delegates.Decrypt_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Encryption), "Decrypt", false), value);
            remove => HookEndpointManager.Remove<Delegates.Decrypt_Array_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Encryption), "Decrypt", false), value);
        }

        public static event On.Encryption.hook_Encrypt_string Encrypt_string
        {
            add => On.Encryption.Encrypt_string += value;
            remove => On.Encryption.Encrypt_string -= value;
        }

        public static event On.Encryption.hook_Decrypt_string Decrypt_string
        {
            add => On.Encryption.Decrypt_string += value;
            remove => On.Encryption.Decrypt_string -= value;
        }
    }
}