namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SpriteFlash class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSpriteFlash
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.SpriteFlash.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.SpriteFlash.orig_Start orig, SpriteFlash self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.SpriteFlash.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.SpriteFlash.orig_OnDisable orig, SpriteFlash self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.SpriteFlash.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.SpriteFlash.orig_Update orig, SpriteFlash self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookGeoFlash()
        {
            if (!HookedList.Contains("GeoFlash"))
            {
                HookedList.Add("GeoFlash");
                On.SpriteFlash.GeoFlash += GeoFlash;
            }
        }

        internal static event Delegates.GeoFlash_BeforeArgs _beforeGeoFlash;
        internal static event Delegates.GeoFlash_NormalArgs _afterGeoFlash;

        private static void GeoFlash(On.SpriteFlash.orig_GeoFlash orig, SpriteFlash self)
        {
            Delegates.Params_GeoFlash @params = new()
            {
                self = self
            };
            _beforeGeoFlash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGeoFlash != null) _afterGeoFlash.Invoke(@params);
        }

        internal static void Hookflash()
        {
            if (!HookedList.Contains("flash"))
            {
                HookedList.Add("flash");
                On.SpriteFlash.flash += flash;
            }
        }

        internal static event Delegates.flash_BeforeArgs _beforeflash;
        internal static event Delegates.flash_NormalArgs _afterflash;

        private static void flash(On.SpriteFlash.orig_flash orig, SpriteFlash self, Color flashColour_var,
            float amount_var, float timeUp_var, float stayTime_var, float timeDown_var)
        {
            Delegates.Params_flash @params = new()
            {
                self = self, flashColour_var = flashColour_var, amount_var = amount_var, timeUp_var = timeUp_var,
                stayTime_var = stayTime_var, timeDown_var = timeDown_var
            };
            _beforeflash?.Invoke(@params);
            self = @params.self;
            flashColour_var = @params.flashColour_var;
            amount_var = @params.amount_var;
            timeUp_var = @params.timeUp_var;
            stayTime_var = @params.stayTime_var;
            timeDown_var = @params.timeDown_var;
            orig(self, flashColour_var, amount_var, timeUp_var, stayTime_var, timeDown_var);
            if (_afterflash != null) _afterflash.Invoke(@params);
        }

        internal static void HookCancelFlash()
        {
            if (!HookedList.Contains("CancelFlash"))
            {
                HookedList.Add("CancelFlash");
                On.SpriteFlash.CancelFlash += CancelFlash;
            }
        }

        internal static event Delegates.CancelFlash_BeforeArgs _beforeCancelFlash;
        internal static event Delegates.CancelFlash_NormalArgs _afterCancelFlash;

        private static void CancelFlash(On.SpriteFlash.orig_CancelFlash orig, SpriteFlash self)
        {
            Delegates.Params_CancelFlash @params = new()
            {
                self = self
            };
            _beforeCancelFlash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelFlash != null) _afterCancelFlash.Invoke(@params);
        }

        internal static void HookFlashingSuperDash()
        {
            if (!HookedList.Contains("FlashingSuperDash"))
            {
                HookedList.Add("FlashingSuperDash");
                On.SpriteFlash.FlashingSuperDash += FlashingSuperDash;
            }
        }

        internal static event Delegates.FlashingSuperDash_BeforeArgs _beforeFlashingSuperDash;
        internal static event Delegates.FlashingSuperDash_NormalArgs _afterFlashingSuperDash;

        private static void FlashingSuperDash(On.SpriteFlash.orig_FlashingSuperDash orig, SpriteFlash self)
        {
            Delegates.Params_FlashingSuperDash @params = new()
            {
                self = self
            };
            _beforeFlashingSuperDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashingSuperDash != null) _afterFlashingSuperDash.Invoke(@params);
        }

        internal static void HookFlashingGhostWounded()
        {
            if (!HookedList.Contains("FlashingGhostWounded"))
            {
                HookedList.Add("FlashingGhostWounded");
                On.SpriteFlash.FlashingGhostWounded += FlashingGhostWounded;
            }
        }

        internal static event Delegates.FlashingGhostWounded_BeforeArgs _beforeFlashingGhostWounded;
        internal static event Delegates.FlashingGhostWounded_NormalArgs _afterFlashingGhostWounded;

        private static void FlashingGhostWounded(On.SpriteFlash.orig_FlashingGhostWounded orig, SpriteFlash self)
        {
            Delegates.Params_FlashingGhostWounded @params = new()
            {
                self = self
            };
            _beforeFlashingGhostWounded?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashingGhostWounded != null) _afterFlashingGhostWounded.Invoke(@params);
        }

        internal static void HookFlashingWhiteStay()
        {
            if (!HookedList.Contains("FlashingWhiteStay"))
            {
                HookedList.Add("FlashingWhiteStay");
                On.SpriteFlash.FlashingWhiteStay += FlashingWhiteStay;
            }
        }

        internal static event Delegates.FlashingWhiteStay_BeforeArgs _beforeFlashingWhiteStay;
        internal static event Delegates.FlashingWhiteStay_NormalArgs _afterFlashingWhiteStay;

        private static void FlashingWhiteStay(On.SpriteFlash.orig_FlashingWhiteStay orig, SpriteFlash self)
        {
            Delegates.Params_FlashingWhiteStay @params = new()
            {
                self = self
            };
            _beforeFlashingWhiteStay?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashingWhiteStay != null) _afterFlashingWhiteStay.Invoke(@params);
        }

        internal static void HookFlashingWhiteStayMoth()
        {
            if (!HookedList.Contains("FlashingWhiteStayMoth"))
            {
                HookedList.Add("FlashingWhiteStayMoth");
                On.SpriteFlash.FlashingWhiteStayMoth += FlashingWhiteStayMoth;
            }
        }

        internal static event Delegates.FlashingWhiteStayMoth_BeforeArgs _beforeFlashingWhiteStayMoth;
        internal static event Delegates.FlashingWhiteStayMoth_NormalArgs _afterFlashingWhiteStayMoth;

        private static void FlashingWhiteStayMoth(On.SpriteFlash.orig_FlashingWhiteStayMoth orig, SpriteFlash self)
        {
            Delegates.Params_FlashingWhiteStayMoth @params = new()
            {
                self = self
            };
            _beforeFlashingWhiteStayMoth?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashingWhiteStayMoth != null) _afterFlashingWhiteStayMoth.Invoke(@params);
        }

        internal static void HookFlashingFury()
        {
            if (!HookedList.Contains("FlashingFury"))
            {
                HookedList.Add("FlashingFury");
                On.SpriteFlash.FlashingFury += FlashingFury;
            }
        }

        internal static event Delegates.FlashingFury_BeforeArgs _beforeFlashingFury;
        internal static event Delegates.FlashingFury_NormalArgs _afterFlashingFury;

        private static void FlashingFury(On.SpriteFlash.orig_FlashingFury orig, SpriteFlash self)
        {
            Delegates.Params_FlashingFury @params = new()
            {
                self = self
            };
            _beforeFlashingFury?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashingFury != null) _afterFlashingFury.Invoke(@params);
        }

        internal static void HookFlashingOrange()
        {
            if (!HookedList.Contains("FlashingOrange"))
            {
                HookedList.Add("FlashingOrange");
                On.SpriteFlash.FlashingOrange += FlashingOrange;
            }
        }

        internal static event Delegates.FlashingOrange_BeforeArgs _beforeFlashingOrange;
        internal static event Delegates.FlashingOrange_NormalArgs _afterFlashingOrange;

        private static void FlashingOrange(On.SpriteFlash.orig_FlashingOrange orig, SpriteFlash self)
        {
            Delegates.Params_FlashingOrange @params = new()
            {
                self = self
            };
            _beforeFlashingOrange?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashingOrange != null) _afterFlashingOrange.Invoke(@params);
        }

        internal static void HookflashInfected()
        {
            if (!HookedList.Contains("flashInfected"))
            {
                HookedList.Add("flashInfected");
                On.SpriteFlash.flashInfected += flashInfected;
            }
        }

        internal static event Delegates.flashInfected_BeforeArgs _beforeflashInfected;
        internal static event Delegates.flashInfected_NormalArgs _afterflashInfected;

        private static void flashInfected(On.SpriteFlash.orig_flashInfected orig, SpriteFlash self)
        {
            Delegates.Params_flashInfected @params = new()
            {
                self = self
            };
            _beforeflashInfected?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashInfected != null) _afterflashInfected.Invoke(@params);
        }

        internal static void HookflashDung()
        {
            if (!HookedList.Contains("flashDung"))
            {
                HookedList.Add("flashDung");
                On.SpriteFlash.flashDung += flashDung;
            }
        }

        internal static event Delegates.flashDung_BeforeArgs _beforeflashDung;
        internal static event Delegates.flashDung_NormalArgs _afterflashDung;

        private static void flashDung(On.SpriteFlash.orig_flashDung orig, SpriteFlash self)
        {
            Delegates.Params_flashDung @params = new()
            {
                self = self
            };
            _beforeflashDung?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashDung != null) _afterflashDung.Invoke(@params);
        }

        internal static void HookflashDungQuick()
        {
            if (!HookedList.Contains("flashDungQuick"))
            {
                HookedList.Add("flashDungQuick");
                On.SpriteFlash.flashDungQuick += flashDungQuick;
            }
        }

        internal static event Delegates.flashDungQuick_BeforeArgs _beforeflashDungQuick;
        internal static event Delegates.flashDungQuick_NormalArgs _afterflashDungQuick;

        private static void flashDungQuick(On.SpriteFlash.orig_flashDungQuick orig, SpriteFlash self)
        {
            Delegates.Params_flashDungQuick @params = new()
            {
                self = self
            };
            _beforeflashDungQuick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashDungQuick != null) _afterflashDungQuick.Invoke(@params);
        }

        internal static void HookflashSporeQuick()
        {
            if (!HookedList.Contains("flashSporeQuick"))
            {
                HookedList.Add("flashSporeQuick");
                On.SpriteFlash.flashSporeQuick += flashSporeQuick;
            }
        }

        internal static event Delegates.flashSporeQuick_BeforeArgs _beforeflashSporeQuick;
        internal static event Delegates.flashSporeQuick_NormalArgs _afterflashSporeQuick;

        private static void flashSporeQuick(On.SpriteFlash.orig_flashSporeQuick orig, SpriteFlash self)
        {
            Delegates.Params_flashSporeQuick @params = new()
            {
                self = self
            };
            _beforeflashSporeQuick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashSporeQuick != null) _afterflashSporeQuick.Invoke(@params);
        }

        internal static void HookflashWhiteQuick()
        {
            if (!HookedList.Contains("flashWhiteQuick"))
            {
                HookedList.Add("flashWhiteQuick");
                On.SpriteFlash.flashWhiteQuick += flashWhiteQuick;
            }
        }

        internal static event Delegates.flashWhiteQuick_BeforeArgs _beforeflashWhiteQuick;
        internal static event Delegates.flashWhiteQuick_NormalArgs _afterflashWhiteQuick;

        private static void flashWhiteQuick(On.SpriteFlash.orig_flashWhiteQuick orig, SpriteFlash self)
        {
            Delegates.Params_flashWhiteQuick @params = new()
            {
                self = self
            };
            _beforeflashWhiteQuick?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashWhiteQuick != null) _afterflashWhiteQuick.Invoke(@params);
        }

        internal static void HookflashInfectedLong()
        {
            if (!HookedList.Contains("flashInfectedLong"))
            {
                HookedList.Add("flashInfectedLong");
                On.SpriteFlash.flashInfectedLong += flashInfectedLong;
            }
        }

        internal static event Delegates.flashInfectedLong_BeforeArgs _beforeflashInfectedLong;
        internal static event Delegates.flashInfectedLong_NormalArgs _afterflashInfectedLong;

        private static void flashInfectedLong(On.SpriteFlash.orig_flashInfectedLong orig, SpriteFlash self)
        {
            Delegates.Params_flashInfectedLong @params = new()
            {
                self = self
            };
            _beforeflashInfectedLong?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashInfectedLong != null) _afterflashInfectedLong.Invoke(@params);
        }

        internal static void HookflashArmoured()
        {
            if (!HookedList.Contains("flashArmoured"))
            {
                HookedList.Add("flashArmoured");
                On.SpriteFlash.flashArmoured += flashArmoured;
            }
        }

        internal static event Delegates.flashArmoured_BeforeArgs _beforeflashArmoured;
        internal static event Delegates.flashArmoured_NormalArgs _afterflashArmoured;

        private static void flashArmoured(On.SpriteFlash.orig_flashArmoured orig, SpriteFlash self)
        {
            Delegates.Params_flashArmoured @params = new()
            {
                self = self
            };
            _beforeflashArmoured?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashArmoured != null) _afterflashArmoured.Invoke(@params);
        }

        internal static void HookflashBenchRest()
        {
            if (!HookedList.Contains("flashBenchRest"))
            {
                HookedList.Add("flashBenchRest");
                On.SpriteFlash.flashBenchRest += flashBenchRest;
            }
        }

        internal static event Delegates.flashBenchRest_BeforeArgs _beforeflashBenchRest;
        internal static event Delegates.flashBenchRest_NormalArgs _afterflashBenchRest;

        private static void flashBenchRest(On.SpriteFlash.orig_flashBenchRest orig, SpriteFlash self)
        {
            Delegates.Params_flashBenchRest @params = new()
            {
                self = self
            };
            _beforeflashBenchRest?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashBenchRest != null) _afterflashBenchRest.Invoke(@params);
        }

        internal static void HookflashDreamImpact()
        {
            if (!HookedList.Contains("flashDreamImpact"))
            {
                HookedList.Add("flashDreamImpact");
                On.SpriteFlash.flashDreamImpact += flashDreamImpact;
            }
        }

        internal static event Delegates.flashDreamImpact_BeforeArgs _beforeflashDreamImpact;
        internal static event Delegates.flashDreamImpact_NormalArgs _afterflashDreamImpact;

        private static void flashDreamImpact(On.SpriteFlash.orig_flashDreamImpact orig, SpriteFlash self)
        {
            Delegates.Params_flashDreamImpact @params = new()
            {
                self = self
            };
            _beforeflashDreamImpact?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashDreamImpact != null) _afterflashDreamImpact.Invoke(@params);
        }

        internal static void HookflashMothDepart()
        {
            if (!HookedList.Contains("flashMothDepart"))
            {
                HookedList.Add("flashMothDepart");
                On.SpriteFlash.flashMothDepart += flashMothDepart;
            }
        }

        internal static event Delegates.flashMothDepart_BeforeArgs _beforeflashMothDepart;
        internal static event Delegates.flashMothDepart_NormalArgs _afterflashMothDepart;

        private static void flashMothDepart(On.SpriteFlash.orig_flashMothDepart orig, SpriteFlash self)
        {
            Delegates.Params_flashMothDepart @params = new()
            {
                self = self
            };
            _beforeflashMothDepart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashMothDepart != null) _afterflashMothDepart.Invoke(@params);
        }

        internal static void HookflashSoulGet()
        {
            if (!HookedList.Contains("flashSoulGet"))
            {
                HookedList.Add("flashSoulGet");
                On.SpriteFlash.flashSoulGet += flashSoulGet;
            }
        }

        internal static event Delegates.flashSoulGet_BeforeArgs _beforeflashSoulGet;
        internal static event Delegates.flashSoulGet_NormalArgs _afterflashSoulGet;

        private static void flashSoulGet(On.SpriteFlash.orig_flashSoulGet orig, SpriteFlash self)
        {
            Delegates.Params_flashSoulGet @params = new()
            {
                self = self
            };
            _beforeflashSoulGet?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashSoulGet != null) _afterflashSoulGet.Invoke(@params);
        }

        internal static void HookflashShadeGet()
        {
            if (!HookedList.Contains("flashShadeGet"))
            {
                HookedList.Add("flashShadeGet");
                On.SpriteFlash.flashShadeGet += flashShadeGet;
            }
        }

        internal static event Delegates.flashShadeGet_BeforeArgs _beforeflashShadeGet;
        internal static event Delegates.flashShadeGet_NormalArgs _afterflashShadeGet;

        private static void flashShadeGet(On.SpriteFlash.orig_flashShadeGet orig, SpriteFlash self)
        {
            Delegates.Params_flashShadeGet @params = new()
            {
                self = self
            };
            _beforeflashShadeGet?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashShadeGet != null) _afterflashShadeGet.Invoke(@params);
        }

        internal static void HookflashWhiteLong()
        {
            if (!HookedList.Contains("flashWhiteLong"))
            {
                HookedList.Add("flashWhiteLong");
                On.SpriteFlash.flashWhiteLong += flashWhiteLong;
            }
        }

        internal static event Delegates.flashWhiteLong_BeforeArgs _beforeflashWhiteLong;
        internal static event Delegates.flashWhiteLong_NormalArgs _afterflashWhiteLong;

        private static void flashWhiteLong(On.SpriteFlash.orig_flashWhiteLong orig, SpriteFlash self)
        {
            Delegates.Params_flashWhiteLong @params = new()
            {
                self = self
            };
            _beforeflashWhiteLong?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashWhiteLong != null) _afterflashWhiteLong.Invoke(@params);
        }

        internal static void HookflashOvercharmed()
        {
            if (!HookedList.Contains("flashOvercharmed"))
            {
                HookedList.Add("flashOvercharmed");
                On.SpriteFlash.flashOvercharmed += flashOvercharmed;
            }
        }

        internal static event Delegates.flashOvercharmed_BeforeArgs _beforeflashOvercharmed;
        internal static event Delegates.flashOvercharmed_NormalArgs _afterflashOvercharmed;

        private static void flashOvercharmed(On.SpriteFlash.orig_flashOvercharmed orig, SpriteFlash self)
        {
            Delegates.Params_flashOvercharmed @params = new()
            {
                self = self
            };
            _beforeflashOvercharmed?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashOvercharmed != null) _afterflashOvercharmed.Invoke(@params);
        }

        internal static void HookflashFocusHeal()
        {
            if (!HookedList.Contains("flashFocusHeal"))
            {
                HookedList.Add("flashFocusHeal");
                On.SpriteFlash.flashFocusHeal += flashFocusHeal;
            }
        }

        internal static event Delegates.flashFocusHeal_BeforeArgs _beforeflashFocusHeal;
        internal static event Delegates.flashFocusHeal_NormalArgs _afterflashFocusHeal;

        private static void flashFocusHeal(On.SpriteFlash.orig_flashFocusHeal orig, SpriteFlash self)
        {
            Delegates.Params_flashFocusHeal @params = new()
            {
                self = self
            };
            _beforeflashFocusHeal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashFocusHeal != null) _afterflashFocusHeal.Invoke(@params);
        }

        internal static void HookflashFocusGet()
        {
            if (!HookedList.Contains("flashFocusGet"))
            {
                HookedList.Add("flashFocusGet");
                On.SpriteFlash.flashFocusGet += flashFocusGet;
            }
        }

        internal static event Delegates.flashFocusGet_BeforeArgs _beforeflashFocusGet;
        internal static event Delegates.flashFocusGet_NormalArgs _afterflashFocusGet;

        private static void flashFocusGet(On.SpriteFlash.orig_flashFocusGet orig, SpriteFlash self)
        {
            Delegates.Params_flashFocusGet @params = new()
            {
                self = self
            };
            _beforeflashFocusGet?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashFocusGet != null) _afterflashFocusGet.Invoke(@params);
        }

        internal static void HookflashWhitePulse()
        {
            if (!HookedList.Contains("flashWhitePulse"))
            {
                HookedList.Add("flashWhitePulse");
                On.SpriteFlash.flashWhitePulse += flashWhitePulse;
            }
        }

        internal static event Delegates.flashWhitePulse_BeforeArgs _beforeflashWhitePulse;
        internal static event Delegates.flashWhitePulse_NormalArgs _afterflashWhitePulse;

        private static void flashWhitePulse(On.SpriteFlash.orig_flashWhitePulse orig, SpriteFlash self)
        {
            Delegates.Params_flashWhitePulse @params = new()
            {
                self = self
            };
            _beforeflashWhitePulse?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashWhitePulse != null) _afterflashWhitePulse.Invoke(@params);
        }

        internal static void HookflashHealBlue()
        {
            if (!HookedList.Contains("flashHealBlue"))
            {
                HookedList.Add("flashHealBlue");
                On.SpriteFlash.flashHealBlue += flashHealBlue;
            }
        }

        internal static event Delegates.flashHealBlue_BeforeArgs _beforeflashHealBlue;
        internal static event Delegates.flashHealBlue_NormalArgs _afterflashHealBlue;

        private static void flashHealBlue(On.SpriteFlash.orig_flashHealBlue orig, SpriteFlash self)
        {
            Delegates.Params_flashHealBlue @params = new()
            {
                self = self
            };
            _beforeflashHealBlue?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashHealBlue != null) _afterflashHealBlue.Invoke(@params);
        }

        internal static void HookFlashShadowRecharge()
        {
            if (!HookedList.Contains("FlashShadowRecharge"))
            {
                HookedList.Add("FlashShadowRecharge");
                On.SpriteFlash.FlashShadowRecharge += FlashShadowRecharge;
            }
        }

        internal static event Delegates.FlashShadowRecharge_BeforeArgs _beforeFlashShadowRecharge;
        internal static event Delegates.FlashShadowRecharge_NormalArgs _afterFlashShadowRecharge;

        private static void FlashShadowRecharge(On.SpriteFlash.orig_FlashShadowRecharge orig, SpriteFlash self)
        {
            Delegates.Params_FlashShadowRecharge @params = new()
            {
                self = self
            };
            _beforeFlashShadowRecharge?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashShadowRecharge != null) _afterFlashShadowRecharge.Invoke(@params);
        }

        internal static void HookflashInfectedLoop()
        {
            if (!HookedList.Contains("flashInfectedLoop"))
            {
                HookedList.Add("flashInfectedLoop");
                On.SpriteFlash.flashInfectedLoop += flashInfectedLoop;
            }
        }

        internal static event Delegates.flashInfectedLoop_BeforeArgs _beforeflashInfectedLoop;
        internal static event Delegates.flashInfectedLoop_NormalArgs _afterflashInfectedLoop;

        private static void flashInfectedLoop(On.SpriteFlash.orig_flashInfectedLoop orig, SpriteFlash self)
        {
            Delegates.Params_flashInfectedLoop @params = new()
            {
                self = self
            };
            _beforeflashInfectedLoop?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterflashInfectedLoop != null) _afterflashInfectedLoop.Invoke(@params);
        }

        internal static void HookFlashGrimmflame()
        {
            if (!HookedList.Contains("FlashGrimmflame"))
            {
                HookedList.Add("FlashGrimmflame");
                On.SpriteFlash.FlashGrimmflame += FlashGrimmflame;
            }
        }

        internal static event Delegates.FlashGrimmflame_BeforeArgs _beforeFlashGrimmflame;
        internal static event Delegates.FlashGrimmflame_NormalArgs _afterFlashGrimmflame;

        private static void FlashGrimmflame(On.SpriteFlash.orig_FlashGrimmflame orig, SpriteFlash self)
        {
            Delegates.Params_FlashGrimmflame @params = new()
            {
                self = self
            };
            _beforeFlashGrimmflame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashGrimmflame != null) _afterFlashGrimmflame.Invoke(@params);
        }

        internal static void HookFlashGrimmHit()
        {
            if (!HookedList.Contains("FlashGrimmHit"))
            {
                HookedList.Add("FlashGrimmHit");
                On.SpriteFlash.FlashGrimmHit += FlashGrimmHit;
            }
        }

        internal static event Delegates.FlashGrimmHit_BeforeArgs _beforeFlashGrimmHit;
        internal static event Delegates.FlashGrimmHit_NormalArgs _afterFlashGrimmHit;

        private static void FlashGrimmHit(On.SpriteFlash.orig_FlashGrimmHit orig, SpriteFlash self)
        {
            Delegates.Params_FlashGrimmHit @params = new()
            {
                self = self
            };
            _beforeFlashGrimmHit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlashGrimmHit != null) _afterFlashGrimmHit.Invoke(@params);
        }

        internal static void HookSendToChildren()
        {
            if (!HookedList.Contains("SendToChildren"))
            {
                HookedList.Add("SendToChildren");
                On.SpriteFlash.SendToChildren += SendToChildren;
            }
        }

        internal static event Delegates.SendToChildren_BeforeArgs _beforeSendToChildren;
        internal static event Delegates.SendToChildren_NormalArgs _afterSendToChildren;

        private static void SendToChildren(On.SpriteFlash.orig_SendToChildren orig, SpriteFlash self, Action function)
        {
            Delegates.Params_SendToChildren @params = new()
            {
                self = self, function = function
            };
            _beforeSendToChildren?.Invoke(@params);
            self = @params.self;
            function = @params.function;
            orig(self, function);
            if (_afterSendToChildren != null) _afterSendToChildren.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CancelFlash_BeforeArgs(Params_CancelFlash args);

        public delegate void CancelFlash_NormalArgs(Params_CancelFlash args);

        public delegate void flash_BeforeArgs(Params_flash args);

        public delegate void flash_NormalArgs(Params_flash args);

        public delegate void flashArmoured_BeforeArgs(Params_flashArmoured args);

        public delegate void flashArmoured_NormalArgs(Params_flashArmoured args);

        public delegate void flashBenchRest_BeforeArgs(Params_flashBenchRest args);

        public delegate void flashBenchRest_NormalArgs(Params_flashBenchRest args);

        public delegate void flashDreamImpact_BeforeArgs(Params_flashDreamImpact args);

        public delegate void flashDreamImpact_NormalArgs(Params_flashDreamImpact args);

        public delegate void flashDung_BeforeArgs(Params_flashDung args);

        public delegate void flashDung_NormalArgs(Params_flashDung args);

        public delegate void flashDungQuick_BeforeArgs(Params_flashDungQuick args);

        public delegate void flashDungQuick_NormalArgs(Params_flashDungQuick args);

        public delegate void flashFocusGet_BeforeArgs(Params_flashFocusGet args);

        public delegate void flashFocusGet_NormalArgs(Params_flashFocusGet args);

        public delegate void flashFocusHeal_BeforeArgs(Params_flashFocusHeal args);

        public delegate void flashFocusHeal_NormalArgs(Params_flashFocusHeal args);

        public delegate void FlashGrimmflame_BeforeArgs(Params_FlashGrimmflame args);

        public delegate void FlashGrimmflame_NormalArgs(Params_FlashGrimmflame args);

        public delegate void FlashGrimmHit_BeforeArgs(Params_FlashGrimmHit args);

        public delegate void FlashGrimmHit_NormalArgs(Params_FlashGrimmHit args);

        public delegate void flashHealBlue_BeforeArgs(Params_flashHealBlue args);

        public delegate void flashHealBlue_NormalArgs(Params_flashHealBlue args);

        public delegate void flashInfected_BeforeArgs(Params_flashInfected args);

        public delegate void flashInfected_NormalArgs(Params_flashInfected args);

        public delegate void flashInfectedLong_BeforeArgs(Params_flashInfectedLong args);

        public delegate void flashInfectedLong_NormalArgs(Params_flashInfectedLong args);

        public delegate void flashInfectedLoop_BeforeArgs(Params_flashInfectedLoop args);

        public delegate void flashInfectedLoop_NormalArgs(Params_flashInfectedLoop args);

        public delegate void FlashingFury_BeforeArgs(Params_FlashingFury args);

        public delegate void FlashingFury_NormalArgs(Params_FlashingFury args);

        public delegate void FlashingGhostWounded_BeforeArgs(Params_FlashingGhostWounded args);

        public delegate void FlashingGhostWounded_NormalArgs(Params_FlashingGhostWounded args);

        public delegate void FlashingOrange_BeforeArgs(Params_FlashingOrange args);

        public delegate void FlashingOrange_NormalArgs(Params_FlashingOrange args);

        public delegate void FlashingSuperDash_BeforeArgs(Params_FlashingSuperDash args);

        public delegate void FlashingSuperDash_NormalArgs(Params_FlashingSuperDash args);

        public delegate void FlashingWhiteStay_BeforeArgs(Params_FlashingWhiteStay args);

        public delegate void FlashingWhiteStay_NormalArgs(Params_FlashingWhiteStay args);

        public delegate void FlashingWhiteStayMoth_BeforeArgs(Params_FlashingWhiteStayMoth args);

        public delegate void FlashingWhiteStayMoth_NormalArgs(Params_FlashingWhiteStayMoth args);

        public delegate void flashMothDepart_BeforeArgs(Params_flashMothDepart args);

        public delegate void flashMothDepart_NormalArgs(Params_flashMothDepart args);

        public delegate void flashOvercharmed_BeforeArgs(Params_flashOvercharmed args);

        public delegate void flashOvercharmed_NormalArgs(Params_flashOvercharmed args);

        public delegate void flashShadeGet_BeforeArgs(Params_flashShadeGet args);

        public delegate void flashShadeGet_NormalArgs(Params_flashShadeGet args);

        public delegate void FlashShadowRecharge_BeforeArgs(Params_FlashShadowRecharge args);

        public delegate void FlashShadowRecharge_NormalArgs(Params_FlashShadowRecharge args);

        public delegate void flashSoulGet_BeforeArgs(Params_flashSoulGet args);

        public delegate void flashSoulGet_NormalArgs(Params_flashSoulGet args);

        public delegate void flashSporeQuick_BeforeArgs(Params_flashSporeQuick args);

        public delegate void flashSporeQuick_NormalArgs(Params_flashSporeQuick args);

        public delegate void flashWhiteLong_BeforeArgs(Params_flashWhiteLong args);

        public delegate void flashWhiteLong_NormalArgs(Params_flashWhiteLong args);

        public delegate void flashWhitePulse_BeforeArgs(Params_flashWhitePulse args);

        public delegate void flashWhitePulse_NormalArgs(Params_flashWhitePulse args);

        public delegate void flashWhiteQuick_BeforeArgs(Params_flashWhiteQuick args);

        public delegate void flashWhiteQuick_NormalArgs(Params_flashWhiteQuick args);

        public delegate void GeoFlash_BeforeArgs(Params_GeoFlash args);

        public delegate void GeoFlash_NormalArgs(Params_GeoFlash args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void SendToChildren_BeforeArgs(Params_SendToChildren args);

        public delegate void SendToChildren_NormalArgs(Params_SendToChildren args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Start
        {
            public SpriteFlash self;
        }

        public sealed class Params_OnDisable
        {
            public SpriteFlash self;
        }

        public sealed class Params_Update
        {
            public SpriteFlash self;
        }

        public sealed class Params_GeoFlash
        {
            public SpriteFlash self;
        }

        public sealed class Params_flash
        {
            public float amount_var;
            public Color flashColour_var;
            public SpriteFlash self;
            public float stayTime_var;
            public float timeDown_var;
            public float timeUp_var;
        }

        public sealed class Params_CancelFlash
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashingSuperDash
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashingGhostWounded
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashingWhiteStay
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashingWhiteStayMoth
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashingFury
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashingOrange
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashInfected
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashDung
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashDungQuick
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashSporeQuick
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashWhiteQuick
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashInfectedLong
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashArmoured
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashBenchRest
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashDreamImpact
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashMothDepart
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashSoulGet
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashShadeGet
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashWhiteLong
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashOvercharmed
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashFocusHeal
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashFocusGet
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashWhitePulse
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashHealBlue
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashShadowRecharge
        {
            public SpriteFlash self;
        }

        public sealed class Params_flashInfectedLoop
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashGrimmflame
        {
            public SpriteFlash self;
        }

        public sealed class Params_FlashGrimmHit
        {
            public SpriteFlash self;
        }

        public sealed class Params_SendToChildren
        {
            public Action function;
            public SpriteFlash self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.GeoFlash_BeforeArgs GeoFlash
        {
            add
            {
                HookHandler._beforeGeoFlash += value;
                HookHandler.HookGeoFlash();
            }
            remove => HookHandler._beforeGeoFlash -= value;
        }

        public static event Delegates.flash_BeforeArgs flash
        {
            add
            {
                HookHandler._beforeflash += value;
                HookHandler.Hookflash();
            }
            remove => HookHandler._beforeflash -= value;
        }

        public static event Delegates.CancelFlash_BeforeArgs CancelFlash
        {
            add
            {
                HookHandler._beforeCancelFlash += value;
                HookHandler.HookCancelFlash();
            }
            remove => HookHandler._beforeCancelFlash -= value;
        }

        public static event Delegates.FlashingSuperDash_BeforeArgs FlashingSuperDash
        {
            add
            {
                HookHandler._beforeFlashingSuperDash += value;
                HookHandler.HookFlashingSuperDash();
            }
            remove => HookHandler._beforeFlashingSuperDash -= value;
        }

        public static event Delegates.FlashingGhostWounded_BeforeArgs FlashingGhostWounded
        {
            add
            {
                HookHandler._beforeFlashingGhostWounded += value;
                HookHandler.HookFlashingGhostWounded();
            }
            remove => HookHandler._beforeFlashingGhostWounded -= value;
        }

        public static event Delegates.FlashingWhiteStay_BeforeArgs FlashingWhiteStay
        {
            add
            {
                HookHandler._beforeFlashingWhiteStay += value;
                HookHandler.HookFlashingWhiteStay();
            }
            remove => HookHandler._beforeFlashingWhiteStay -= value;
        }

        public static event Delegates.FlashingWhiteStayMoth_BeforeArgs FlashingWhiteStayMoth
        {
            add
            {
                HookHandler._beforeFlashingWhiteStayMoth += value;
                HookHandler.HookFlashingWhiteStayMoth();
            }
            remove => HookHandler._beforeFlashingWhiteStayMoth -= value;
        }

        public static event Delegates.FlashingFury_BeforeArgs FlashingFury
        {
            add
            {
                HookHandler._beforeFlashingFury += value;
                HookHandler.HookFlashingFury();
            }
            remove => HookHandler._beforeFlashingFury -= value;
        }

        public static event Delegates.FlashingOrange_BeforeArgs FlashingOrange
        {
            add
            {
                HookHandler._beforeFlashingOrange += value;
                HookHandler.HookFlashingOrange();
            }
            remove => HookHandler._beforeFlashingOrange -= value;
        }

        public static event Delegates.flashInfected_BeforeArgs flashInfected
        {
            add
            {
                HookHandler._beforeflashInfected += value;
                HookHandler.HookflashInfected();
            }
            remove => HookHandler._beforeflashInfected -= value;
        }

        public static event Delegates.flashDung_BeforeArgs flashDung
        {
            add
            {
                HookHandler._beforeflashDung += value;
                HookHandler.HookflashDung();
            }
            remove => HookHandler._beforeflashDung -= value;
        }

        public static event Delegates.flashDungQuick_BeforeArgs flashDungQuick
        {
            add
            {
                HookHandler._beforeflashDungQuick += value;
                HookHandler.HookflashDungQuick();
            }
            remove => HookHandler._beforeflashDungQuick -= value;
        }

        public static event Delegates.flashSporeQuick_BeforeArgs flashSporeQuick
        {
            add
            {
                HookHandler._beforeflashSporeQuick += value;
                HookHandler.HookflashSporeQuick();
            }
            remove => HookHandler._beforeflashSporeQuick -= value;
        }

        public static event Delegates.flashWhiteQuick_BeforeArgs flashWhiteQuick
        {
            add
            {
                HookHandler._beforeflashWhiteQuick += value;
                HookHandler.HookflashWhiteQuick();
            }
            remove => HookHandler._beforeflashWhiteQuick -= value;
        }

        public static event Delegates.flashInfectedLong_BeforeArgs flashInfectedLong
        {
            add
            {
                HookHandler._beforeflashInfectedLong += value;
                HookHandler.HookflashInfectedLong();
            }
            remove => HookHandler._beforeflashInfectedLong -= value;
        }

        public static event Delegates.flashArmoured_BeforeArgs flashArmoured
        {
            add
            {
                HookHandler._beforeflashArmoured += value;
                HookHandler.HookflashArmoured();
            }
            remove => HookHandler._beforeflashArmoured -= value;
        }

        public static event Delegates.flashBenchRest_BeforeArgs flashBenchRest
        {
            add
            {
                HookHandler._beforeflashBenchRest += value;
                HookHandler.HookflashBenchRest();
            }
            remove => HookHandler._beforeflashBenchRest -= value;
        }

        public static event Delegates.flashDreamImpact_BeforeArgs flashDreamImpact
        {
            add
            {
                HookHandler._beforeflashDreamImpact += value;
                HookHandler.HookflashDreamImpact();
            }
            remove => HookHandler._beforeflashDreamImpact -= value;
        }

        public static event Delegates.flashMothDepart_BeforeArgs flashMothDepart
        {
            add
            {
                HookHandler._beforeflashMothDepart += value;
                HookHandler.HookflashMothDepart();
            }
            remove => HookHandler._beforeflashMothDepart -= value;
        }

        public static event Delegates.flashSoulGet_BeforeArgs flashSoulGet
        {
            add
            {
                HookHandler._beforeflashSoulGet += value;
                HookHandler.HookflashSoulGet();
            }
            remove => HookHandler._beforeflashSoulGet -= value;
        }

        public static event Delegates.flashShadeGet_BeforeArgs flashShadeGet
        {
            add
            {
                HookHandler._beforeflashShadeGet += value;
                HookHandler.HookflashShadeGet();
            }
            remove => HookHandler._beforeflashShadeGet -= value;
        }

        public static event Delegates.flashWhiteLong_BeforeArgs flashWhiteLong
        {
            add
            {
                HookHandler._beforeflashWhiteLong += value;
                HookHandler.HookflashWhiteLong();
            }
            remove => HookHandler._beforeflashWhiteLong -= value;
        }

        public static event Delegates.flashOvercharmed_BeforeArgs flashOvercharmed
        {
            add
            {
                HookHandler._beforeflashOvercharmed += value;
                HookHandler.HookflashOvercharmed();
            }
            remove => HookHandler._beforeflashOvercharmed -= value;
        }

        public static event Delegates.flashFocusHeal_BeforeArgs flashFocusHeal
        {
            add
            {
                HookHandler._beforeflashFocusHeal += value;
                HookHandler.HookflashFocusHeal();
            }
            remove => HookHandler._beforeflashFocusHeal -= value;
        }

        public static event Delegates.flashFocusGet_BeforeArgs flashFocusGet
        {
            add
            {
                HookHandler._beforeflashFocusGet += value;
                HookHandler.HookflashFocusGet();
            }
            remove => HookHandler._beforeflashFocusGet -= value;
        }

        public static event Delegates.flashWhitePulse_BeforeArgs flashWhitePulse
        {
            add
            {
                HookHandler._beforeflashWhitePulse += value;
                HookHandler.HookflashWhitePulse();
            }
            remove => HookHandler._beforeflashWhitePulse -= value;
        }

        public static event Delegates.flashHealBlue_BeforeArgs flashHealBlue
        {
            add
            {
                HookHandler._beforeflashHealBlue += value;
                HookHandler.HookflashHealBlue();
            }
            remove => HookHandler._beforeflashHealBlue -= value;
        }

        public static event Delegates.FlashShadowRecharge_BeforeArgs FlashShadowRecharge
        {
            add
            {
                HookHandler._beforeFlashShadowRecharge += value;
                HookHandler.HookFlashShadowRecharge();
            }
            remove => HookHandler._beforeFlashShadowRecharge -= value;
        }

        public static event Delegates.flashInfectedLoop_BeforeArgs flashInfectedLoop
        {
            add
            {
                HookHandler._beforeflashInfectedLoop += value;
                HookHandler.HookflashInfectedLoop();
            }
            remove => HookHandler._beforeflashInfectedLoop -= value;
        }

        public static event Delegates.FlashGrimmflame_BeforeArgs FlashGrimmflame
        {
            add
            {
                HookHandler._beforeFlashGrimmflame += value;
                HookHandler.HookFlashGrimmflame();
            }
            remove => HookHandler._beforeFlashGrimmflame -= value;
        }

        public static event Delegates.FlashGrimmHit_BeforeArgs FlashGrimmHit
        {
            add
            {
                HookHandler._beforeFlashGrimmHit += value;
                HookHandler.HookFlashGrimmHit();
            }
            remove => HookHandler._beforeFlashGrimmHit -= value;
        }

        public static event Delegates.SendToChildren_BeforeArgs SendToChildren
        {
            add
            {
                HookHandler._beforeSendToChildren += value;
                HookHandler.HookSendToChildren();
            }
            remove => HookHandler._beforeSendToChildren -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.GeoFlash_NormalArgs GeoFlash
        {
            add
            {
                HookHandler._afterGeoFlash += value;
                HookHandler.HookGeoFlash();
            }
            remove => HookHandler._afterGeoFlash -= value;
        }

        public static event Delegates.flash_NormalArgs flash
        {
            add
            {
                HookHandler._afterflash += value;
                HookHandler.Hookflash();
            }
            remove => HookHandler._afterflash -= value;
        }

        public static event Delegates.CancelFlash_NormalArgs CancelFlash
        {
            add
            {
                HookHandler._afterCancelFlash += value;
                HookHandler.HookCancelFlash();
            }
            remove => HookHandler._afterCancelFlash -= value;
        }

        public static event Delegates.FlashingSuperDash_NormalArgs FlashingSuperDash
        {
            add
            {
                HookHandler._afterFlashingSuperDash += value;
                HookHandler.HookFlashingSuperDash();
            }
            remove => HookHandler._afterFlashingSuperDash -= value;
        }

        public static event Delegates.FlashingGhostWounded_NormalArgs FlashingGhostWounded
        {
            add
            {
                HookHandler._afterFlashingGhostWounded += value;
                HookHandler.HookFlashingGhostWounded();
            }
            remove => HookHandler._afterFlashingGhostWounded -= value;
        }

        public static event Delegates.FlashingWhiteStay_NormalArgs FlashingWhiteStay
        {
            add
            {
                HookHandler._afterFlashingWhiteStay += value;
                HookHandler.HookFlashingWhiteStay();
            }
            remove => HookHandler._afterFlashingWhiteStay -= value;
        }

        public static event Delegates.FlashingWhiteStayMoth_NormalArgs FlashingWhiteStayMoth
        {
            add
            {
                HookHandler._afterFlashingWhiteStayMoth += value;
                HookHandler.HookFlashingWhiteStayMoth();
            }
            remove => HookHandler._afterFlashingWhiteStayMoth -= value;
        }

        public static event Delegates.FlashingFury_NormalArgs FlashingFury
        {
            add
            {
                HookHandler._afterFlashingFury += value;
                HookHandler.HookFlashingFury();
            }
            remove => HookHandler._afterFlashingFury -= value;
        }

        public static event Delegates.FlashingOrange_NormalArgs FlashingOrange
        {
            add
            {
                HookHandler._afterFlashingOrange += value;
                HookHandler.HookFlashingOrange();
            }
            remove => HookHandler._afterFlashingOrange -= value;
        }

        public static event Delegates.flashInfected_NormalArgs flashInfected
        {
            add
            {
                HookHandler._afterflashInfected += value;
                HookHandler.HookflashInfected();
            }
            remove => HookHandler._afterflashInfected -= value;
        }

        public static event Delegates.flashDung_NormalArgs flashDung
        {
            add
            {
                HookHandler._afterflashDung += value;
                HookHandler.HookflashDung();
            }
            remove => HookHandler._afterflashDung -= value;
        }

        public static event Delegates.flashDungQuick_NormalArgs flashDungQuick
        {
            add
            {
                HookHandler._afterflashDungQuick += value;
                HookHandler.HookflashDungQuick();
            }
            remove => HookHandler._afterflashDungQuick -= value;
        }

        public static event Delegates.flashSporeQuick_NormalArgs flashSporeQuick
        {
            add
            {
                HookHandler._afterflashSporeQuick += value;
                HookHandler.HookflashSporeQuick();
            }
            remove => HookHandler._afterflashSporeQuick -= value;
        }

        public static event Delegates.flashWhiteQuick_NormalArgs flashWhiteQuick
        {
            add
            {
                HookHandler._afterflashWhiteQuick += value;
                HookHandler.HookflashWhiteQuick();
            }
            remove => HookHandler._afterflashWhiteQuick -= value;
        }

        public static event Delegates.flashInfectedLong_NormalArgs flashInfectedLong
        {
            add
            {
                HookHandler._afterflashInfectedLong += value;
                HookHandler.HookflashInfectedLong();
            }
            remove => HookHandler._afterflashInfectedLong -= value;
        }

        public static event Delegates.flashArmoured_NormalArgs flashArmoured
        {
            add
            {
                HookHandler._afterflashArmoured += value;
                HookHandler.HookflashArmoured();
            }
            remove => HookHandler._afterflashArmoured -= value;
        }

        public static event Delegates.flashBenchRest_NormalArgs flashBenchRest
        {
            add
            {
                HookHandler._afterflashBenchRest += value;
                HookHandler.HookflashBenchRest();
            }
            remove => HookHandler._afterflashBenchRest -= value;
        }

        public static event Delegates.flashDreamImpact_NormalArgs flashDreamImpact
        {
            add
            {
                HookHandler._afterflashDreamImpact += value;
                HookHandler.HookflashDreamImpact();
            }
            remove => HookHandler._afterflashDreamImpact -= value;
        }

        public static event Delegates.flashMothDepart_NormalArgs flashMothDepart
        {
            add
            {
                HookHandler._afterflashMothDepart += value;
                HookHandler.HookflashMothDepart();
            }
            remove => HookHandler._afterflashMothDepart -= value;
        }

        public static event Delegates.flashSoulGet_NormalArgs flashSoulGet
        {
            add
            {
                HookHandler._afterflashSoulGet += value;
                HookHandler.HookflashSoulGet();
            }
            remove => HookHandler._afterflashSoulGet -= value;
        }

        public static event Delegates.flashShadeGet_NormalArgs flashShadeGet
        {
            add
            {
                HookHandler._afterflashShadeGet += value;
                HookHandler.HookflashShadeGet();
            }
            remove => HookHandler._afterflashShadeGet -= value;
        }

        public static event Delegates.flashWhiteLong_NormalArgs flashWhiteLong
        {
            add
            {
                HookHandler._afterflashWhiteLong += value;
                HookHandler.HookflashWhiteLong();
            }
            remove => HookHandler._afterflashWhiteLong -= value;
        }

        public static event Delegates.flashOvercharmed_NormalArgs flashOvercharmed
        {
            add
            {
                HookHandler._afterflashOvercharmed += value;
                HookHandler.HookflashOvercharmed();
            }
            remove => HookHandler._afterflashOvercharmed -= value;
        }

        public static event Delegates.flashFocusHeal_NormalArgs flashFocusHeal
        {
            add
            {
                HookHandler._afterflashFocusHeal += value;
                HookHandler.HookflashFocusHeal();
            }
            remove => HookHandler._afterflashFocusHeal -= value;
        }

        public static event Delegates.flashFocusGet_NormalArgs flashFocusGet
        {
            add
            {
                HookHandler._afterflashFocusGet += value;
                HookHandler.HookflashFocusGet();
            }
            remove => HookHandler._afterflashFocusGet -= value;
        }

        public static event Delegates.flashWhitePulse_NormalArgs flashWhitePulse
        {
            add
            {
                HookHandler._afterflashWhitePulse += value;
                HookHandler.HookflashWhitePulse();
            }
            remove => HookHandler._afterflashWhitePulse -= value;
        }

        public static event Delegates.flashHealBlue_NormalArgs flashHealBlue
        {
            add
            {
                HookHandler._afterflashHealBlue += value;
                HookHandler.HookflashHealBlue();
            }
            remove => HookHandler._afterflashHealBlue -= value;
        }

        public static event Delegates.FlashShadowRecharge_NormalArgs FlashShadowRecharge
        {
            add
            {
                HookHandler._afterFlashShadowRecharge += value;
                HookHandler.HookFlashShadowRecharge();
            }
            remove => HookHandler._afterFlashShadowRecharge -= value;
        }

        public static event Delegates.flashInfectedLoop_NormalArgs flashInfectedLoop
        {
            add
            {
                HookHandler._afterflashInfectedLoop += value;
                HookHandler.HookflashInfectedLoop();
            }
            remove => HookHandler._afterflashInfectedLoop -= value;
        }

        public static event Delegates.FlashGrimmflame_NormalArgs FlashGrimmflame
        {
            add
            {
                HookHandler._afterFlashGrimmflame += value;
                HookHandler.HookFlashGrimmflame();
            }
            remove => HookHandler._afterFlashGrimmflame -= value;
        }

        public static event Delegates.FlashGrimmHit_NormalArgs FlashGrimmHit
        {
            add
            {
                HookHandler._afterFlashGrimmHit += value;
                HookHandler.HookFlashGrimmHit();
            }
            remove => HookHandler._afterFlashGrimmHit -= value;
        }

        public static event Delegates.SendToChildren_NormalArgs SendToChildren
        {
            add
            {
                HookHandler._afterSendToChildren += value;
                HookHandler.HookSendToChildren();
            }
            remove => HookHandler._afterSendToChildren -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SpriteFlash.hook_Start Start
        {
            add => On.SpriteFlash.Start += value;
            remove => On.SpriteFlash.Start -= value;
        }

        public static event On.SpriteFlash.hook_OnDisable OnDisable
        {
            add => On.SpriteFlash.OnDisable += value;
            remove => On.SpriteFlash.OnDisable -= value;
        }

        public static event On.SpriteFlash.hook_Update Update
        {
            add => On.SpriteFlash.Update += value;
            remove => On.SpriteFlash.Update -= value;
        }

        public static event On.SpriteFlash.hook_GeoFlash GeoFlash
        {
            add => On.SpriteFlash.GeoFlash += value;
            remove => On.SpriteFlash.GeoFlash -= value;
        }

        public static event On.SpriteFlash.hook_flash flash
        {
            add => On.SpriteFlash.flash += value;
            remove => On.SpriteFlash.flash -= value;
        }

        public static event On.SpriteFlash.hook_CancelFlash CancelFlash
        {
            add => On.SpriteFlash.CancelFlash += value;
            remove => On.SpriteFlash.CancelFlash -= value;
        }

        public static event On.SpriteFlash.hook_FlashingSuperDash FlashingSuperDash
        {
            add => On.SpriteFlash.FlashingSuperDash += value;
            remove => On.SpriteFlash.FlashingSuperDash -= value;
        }

        public static event On.SpriteFlash.hook_FlashingGhostWounded FlashingGhostWounded
        {
            add => On.SpriteFlash.FlashingGhostWounded += value;
            remove => On.SpriteFlash.FlashingGhostWounded -= value;
        }

        public static event On.SpriteFlash.hook_FlashingWhiteStay FlashingWhiteStay
        {
            add => On.SpriteFlash.FlashingWhiteStay += value;
            remove => On.SpriteFlash.FlashingWhiteStay -= value;
        }

        public static event On.SpriteFlash.hook_FlashingWhiteStayMoth FlashingWhiteStayMoth
        {
            add => On.SpriteFlash.FlashingWhiteStayMoth += value;
            remove => On.SpriteFlash.FlashingWhiteStayMoth -= value;
        }

        public static event On.SpriteFlash.hook_FlashingFury FlashingFury
        {
            add => On.SpriteFlash.FlashingFury += value;
            remove => On.SpriteFlash.FlashingFury -= value;
        }

        public static event On.SpriteFlash.hook_FlashingOrange FlashingOrange
        {
            add => On.SpriteFlash.FlashingOrange += value;
            remove => On.SpriteFlash.FlashingOrange -= value;
        }

        public static event On.SpriteFlash.hook_flashInfected flashInfected
        {
            add => On.SpriteFlash.flashInfected += value;
            remove => On.SpriteFlash.flashInfected -= value;
        }

        public static event On.SpriteFlash.hook_flashDung flashDung
        {
            add => On.SpriteFlash.flashDung += value;
            remove => On.SpriteFlash.flashDung -= value;
        }

        public static event On.SpriteFlash.hook_flashDungQuick flashDungQuick
        {
            add => On.SpriteFlash.flashDungQuick += value;
            remove => On.SpriteFlash.flashDungQuick -= value;
        }

        public static event On.SpriteFlash.hook_flashSporeQuick flashSporeQuick
        {
            add => On.SpriteFlash.flashSporeQuick += value;
            remove => On.SpriteFlash.flashSporeQuick -= value;
        }

        public static event On.SpriteFlash.hook_flashWhiteQuick flashWhiteQuick
        {
            add => On.SpriteFlash.flashWhiteQuick += value;
            remove => On.SpriteFlash.flashWhiteQuick -= value;
        }

        public static event On.SpriteFlash.hook_flashInfectedLong flashInfectedLong
        {
            add => On.SpriteFlash.flashInfectedLong += value;
            remove => On.SpriteFlash.flashInfectedLong -= value;
        }

        public static event On.SpriteFlash.hook_flashArmoured flashArmoured
        {
            add => On.SpriteFlash.flashArmoured += value;
            remove => On.SpriteFlash.flashArmoured -= value;
        }

        public static event On.SpriteFlash.hook_flashBenchRest flashBenchRest
        {
            add => On.SpriteFlash.flashBenchRest += value;
            remove => On.SpriteFlash.flashBenchRest -= value;
        }

        public static event On.SpriteFlash.hook_flashDreamImpact flashDreamImpact
        {
            add => On.SpriteFlash.flashDreamImpact += value;
            remove => On.SpriteFlash.flashDreamImpact -= value;
        }

        public static event On.SpriteFlash.hook_flashMothDepart flashMothDepart
        {
            add => On.SpriteFlash.flashMothDepart += value;
            remove => On.SpriteFlash.flashMothDepart -= value;
        }

        public static event On.SpriteFlash.hook_flashSoulGet flashSoulGet
        {
            add => On.SpriteFlash.flashSoulGet += value;
            remove => On.SpriteFlash.flashSoulGet -= value;
        }

        public static event On.SpriteFlash.hook_flashShadeGet flashShadeGet
        {
            add => On.SpriteFlash.flashShadeGet += value;
            remove => On.SpriteFlash.flashShadeGet -= value;
        }

        public static event On.SpriteFlash.hook_flashWhiteLong flashWhiteLong
        {
            add => On.SpriteFlash.flashWhiteLong += value;
            remove => On.SpriteFlash.flashWhiteLong -= value;
        }

        public static event On.SpriteFlash.hook_flashOvercharmed flashOvercharmed
        {
            add => On.SpriteFlash.flashOvercharmed += value;
            remove => On.SpriteFlash.flashOvercharmed -= value;
        }

        public static event On.SpriteFlash.hook_flashFocusHeal flashFocusHeal
        {
            add => On.SpriteFlash.flashFocusHeal += value;
            remove => On.SpriteFlash.flashFocusHeal -= value;
        }

        public static event On.SpriteFlash.hook_flashFocusGet flashFocusGet
        {
            add => On.SpriteFlash.flashFocusGet += value;
            remove => On.SpriteFlash.flashFocusGet -= value;
        }

        public static event On.SpriteFlash.hook_flashWhitePulse flashWhitePulse
        {
            add => On.SpriteFlash.flashWhitePulse += value;
            remove => On.SpriteFlash.flashWhitePulse -= value;
        }

        public static event On.SpriteFlash.hook_flashHealBlue flashHealBlue
        {
            add => On.SpriteFlash.flashHealBlue += value;
            remove => On.SpriteFlash.flashHealBlue -= value;
        }

        public static event On.SpriteFlash.hook_FlashShadowRecharge FlashShadowRecharge
        {
            add => On.SpriteFlash.FlashShadowRecharge += value;
            remove => On.SpriteFlash.FlashShadowRecharge -= value;
        }

        public static event On.SpriteFlash.hook_flashInfectedLoop flashInfectedLoop
        {
            add => On.SpriteFlash.flashInfectedLoop += value;
            remove => On.SpriteFlash.flashInfectedLoop -= value;
        }

        public static event On.SpriteFlash.hook_FlashGrimmflame FlashGrimmflame
        {
            add => On.SpriteFlash.FlashGrimmflame += value;
            remove => On.SpriteFlash.FlashGrimmflame -= value;
        }

        public static event On.SpriteFlash.hook_FlashGrimmHit FlashGrimmHit
        {
            add => On.SpriteFlash.FlashGrimmHit += value;
            remove => On.SpriteFlash.FlashGrimmHit -= value;
        }

        public static event On.SpriteFlash.hook_SendToChildren SendToChildren
        {
            add => On.SpriteFlash.SendToChildren += value;
            remove => On.SpriteFlash.SendToChildren -= value;
        }
    }
}