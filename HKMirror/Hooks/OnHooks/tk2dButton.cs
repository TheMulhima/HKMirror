using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for tk2dButton class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dButton
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dButton.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.tk2dButton.orig_OnEnable orig, tk2dButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dButton.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.tk2dButton.orig_Start orig, tk2dButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateSpriteIds()
        {
            if (!HookedList.Contains("UpdateSpriteIds"))
            {
                HookedList.Add("UpdateSpriteIds");
                On.tk2dButton.UpdateSpriteIds += UpdateSpriteIds;
            }
        }

        internal static event Delegates.UpdateSpriteIds_BeforeArgs _beforeUpdateSpriteIds;
        internal static event Delegates.UpdateSpriteIds_AfterArgs _afterUpdateSpriteIds;

        private static void UpdateSpriteIds(On.tk2dButton.orig_UpdateSpriteIds orig, tk2dButton self)
        {
            Delegates.Params_UpdateSpriteIds @params = new()
            {
                self = self
            };
            if (_beforeUpdateSpriteIds != null)
            {
                foreach (Delegates.UpdateSpriteIds_BeforeArgs toInvoke in _beforeUpdateSpriteIds.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateSpriteIds?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateSpriteIds != null)
            {
                foreach (Delegates.UpdateSpriteIds_AfterArgs toInvoke in _afterUpdateSpriteIds.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateSpriteIds.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPlaySound()
        {
            if (!HookedList.Contains("PlaySound"))
            {
                HookedList.Add("PlaySound");
                On.tk2dButton.PlaySound += PlaySound;
            }
        }

        internal static event Delegates.PlaySound_BeforeArgs _beforePlaySound;
        internal static event Delegates.PlaySound_AfterArgs _afterPlaySound;

        private static void PlaySound(On.tk2dButton.orig_PlaySound orig, tk2dButton self, UnityEngine.AudioClip source)
        {
            Delegates.Params_PlaySound @params = new()
            {
                self = self, source = source
            };
            if (_beforePlaySound != null)
            {
                foreach (Delegates.PlaySound_BeforeArgs toInvoke in _beforePlaySound.GetInvocationList())
                {
                    try
                    {
                        _beforePlaySound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            source = @params.source;
            orig(self, source);
            if (_afterPlaySound != null)
            {
                foreach (Delegates.PlaySound_AfterArgs toInvoke in _afterPlaySound.GetInvocationList())
                {
                    try
                    {
                        _afterPlaySound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookcoScale()
        {
            if (!HookedList.Contains("coScale"))
            {
                HookedList.Add("coScale");
                On.tk2dButton.coScale += coScale;
            }
        }

        internal static event Delegates.coScale_BeforeArgs _beforecoScale;

        private static System.Collections.IEnumerator coScale(On.tk2dButton.orig_coScale orig, tk2dButton self,
            UnityEngine.Vector3 defaultScale, float startScale, float endScale)
        {
            Delegates.Params_coScale @params = new()
            {
                self = self, defaultScale = defaultScale, startScale = startScale, endScale = endScale
            };
            if (_beforecoScale != null)
            {
                foreach (Delegates.coScale_BeforeArgs toInvoke in _beforecoScale.GetInvocationList())
                {
                    try
                    {
                        _beforecoScale?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            defaultScale = @params.defaultScale;
            startScale = @params.startScale;
            endScale = @params.endScale;
            return orig(self, defaultScale, startScale, endScale);
        }

        internal static void HookLocalWaitForSeconds()
        {
            if (!HookedList.Contains("LocalWaitForSeconds"))
            {
                HookedList.Add("LocalWaitForSeconds");
                On.tk2dButton.LocalWaitForSeconds += LocalWaitForSeconds;
            }
        }

        internal static event Delegates.LocalWaitForSeconds_BeforeArgs _beforeLocalWaitForSeconds;

        private static System.Collections.IEnumerator LocalWaitForSeconds(On.tk2dButton.orig_LocalWaitForSeconds orig,
            tk2dButton self, float seconds)
        {
            Delegates.Params_LocalWaitForSeconds @params = new()
            {
                self = self, seconds = seconds
            };
            if (_beforeLocalWaitForSeconds != null)
            {
                foreach (Delegates.LocalWaitForSeconds_BeforeArgs toInvoke in _beforeLocalWaitForSeconds
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeLocalWaitForSeconds?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            seconds = @params.seconds;
            return orig(self, seconds);
        }

        internal static void HookcoHandleButtonPress()
        {
            if (!HookedList.Contains("coHandleButtonPress"))
            {
                HookedList.Add("coHandleButtonPress");
                On.tk2dButton.coHandleButtonPress += coHandleButtonPress;
            }
        }

        internal static event Delegates.coHandleButtonPress_BeforeArgs _beforecoHandleButtonPress;

        private static System.Collections.IEnumerator coHandleButtonPress(On.tk2dButton.orig_coHandleButtonPress orig,
            tk2dButton self, int fingerId)
        {
            Delegates.Params_coHandleButtonPress @params = new()
            {
                self = self, fingerId = fingerId
            };
            if (_beforecoHandleButtonPress != null)
            {
                foreach (Delegates.coHandleButtonPress_BeforeArgs toInvoke in _beforecoHandleButtonPress
                             .GetInvocationList())
                {
                    try
                    {
                        _beforecoHandleButtonPress?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            fingerId = @params.fingerId;
            return orig(self, fingerId);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.tk2dButton.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.tk2dButton.orig_Update orig, tk2dButton self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_OnEnable
        {
            public tk2dButton self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<tk2dButton> orig, tk2dButton self);

        public sealed class Params_Start
        {
            public tk2dButton self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<tk2dButton> orig, tk2dButton self);

        public sealed class Params_UpdateSpriteIds
        {
            public tk2dButton self;
        }

        public delegate void UpdateSpriteIds_BeforeArgs(Params_UpdateSpriteIds args);

        public delegate void UpdateSpriteIds_AfterArgs(Params_UpdateSpriteIds args);

        public delegate void UpdateSpriteIds_WithArgs(Action<tk2dButton> orig, tk2dButton self);

        public sealed class Params_PlaySound
        {
            public tk2dButton self;
            public UnityEngine.AudioClip source;
        }

        public delegate void PlaySound_BeforeArgs(Params_PlaySound args);

        public delegate void PlaySound_AfterArgs(Params_PlaySound args);

        public delegate void PlaySound_WithArgs(Action<tk2dButton, UnityEngine.AudioClip> orig, tk2dButton self,
            UnityEngine.AudioClip source);

        public sealed class Params_coScale
        {
            public tk2dButton self;
            public UnityEngine.Vector3 defaultScale;
            public float startScale;
            public float endScale;
        }

        public delegate void coScale_BeforeArgs(Params_coScale args);

        public delegate System.Collections.IEnumerator coScale_AfterArgs(Params_coScale args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator coScale_WithArgs(
            Func<tk2dButton, UnityEngine.Vector3, float, float, System.Collections.IEnumerator> orig, tk2dButton self,
            UnityEngine.Vector3 defaultScale, float startScale, float endScale);

        public sealed class Params_LocalWaitForSeconds
        {
            public tk2dButton self;
            public float seconds;
        }

        public delegate void LocalWaitForSeconds_BeforeArgs(Params_LocalWaitForSeconds args);

        public delegate System.Collections.IEnumerator LocalWaitForSeconds_AfterArgs(Params_LocalWaitForSeconds args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator LocalWaitForSeconds_WithArgs(
            Func<tk2dButton, float, System.Collections.IEnumerator> orig, tk2dButton self, float seconds);

        public sealed class Params_coHandleButtonPress
        {
            public tk2dButton self;
            public int fingerId;
        }

        public delegate void coHandleButtonPress_BeforeArgs(Params_coHandleButtonPress args);

        public delegate System.Collections.IEnumerator coHandleButtonPress_AfterArgs(Params_coHandleButtonPress args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator coHandleButtonPress_WithArgs(
            Func<tk2dButton, int, System.Collections.IEnumerator> orig, tk2dButton self, int fingerId);

        public sealed class Params_Update
        {
            public tk2dButton self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<tk2dButton> orig, tk2dButton self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdateSpriteIds_BeforeArgs UpdateSpriteIds
        {
            add
            {
                HookHandler._beforeUpdateSpriteIds += value;
                HookHandler.HookUpdateSpriteIds();
            }
            remove => HookHandler._beforeUpdateSpriteIds -= value;
        }

        public static event Delegates.PlaySound_BeforeArgs PlaySound
        {
            add
            {
                HookHandler._beforePlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._beforePlaySound -= value;
        }

        public static event Delegates.coScale_BeforeArgs coScale
        {
            add
            {
                HookHandler._beforecoScale += value;
                HookHandler.HookcoScale();
            }
            remove => HookHandler._beforecoScale -= value;
        }

        public static event Delegates.LocalWaitForSeconds_BeforeArgs LocalWaitForSeconds
        {
            add
            {
                HookHandler._beforeLocalWaitForSeconds += value;
                HookHandler.HookLocalWaitForSeconds();
            }
            remove => HookHandler._beforeLocalWaitForSeconds -= value;
        }

        public static event Delegates.coHandleButtonPress_BeforeArgs coHandleButtonPress
        {
            add
            {
                HookHandler._beforecoHandleButtonPress += value;
                HookHandler.HookcoHandleButtonPress();
            }
            remove => HookHandler._beforecoHandleButtonPress -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdateSpriteIds_AfterArgs UpdateSpriteIds
        {
            add
            {
                HookHandler._afterUpdateSpriteIds += value;
                HookHandler.HookUpdateSpriteIds();
            }
            remove => HookHandler._afterUpdateSpriteIds -= value;
        }

        public static event Delegates.PlaySound_AfterArgs PlaySound
        {
            add
            {
                HookHandler._afterPlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._afterPlaySound -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dButton.hook_OnEnable OnEnable
        {
            add => On.tk2dButton.OnEnable += value;
            remove => On.tk2dButton.OnEnable -= value;
        }

        public static event On.tk2dButton.hook_Start Start
        {
            add => On.tk2dButton.Start += value;
            remove => On.tk2dButton.Start -= value;
        }

        public static event On.tk2dButton.hook_UpdateSpriteIds UpdateSpriteIds
        {
            add => On.tk2dButton.UpdateSpriteIds += value;
            remove => On.tk2dButton.UpdateSpriteIds -= value;
        }

        public static event On.tk2dButton.hook_PlaySound PlaySound
        {
            add => On.tk2dButton.PlaySound += value;
            remove => On.tk2dButton.PlaySound -= value;
        }

        public static event On.tk2dButton.hook_coScale coScale
        {
            add => On.tk2dButton.coScale += value;
            remove => On.tk2dButton.coScale -= value;
        }

        public static event On.tk2dButton.hook_LocalWaitForSeconds LocalWaitForSeconds
        {
            add => On.tk2dButton.LocalWaitForSeconds += value;
            remove => On.tk2dButton.LocalWaitForSeconds -= value;
        }

        public static event On.tk2dButton.hook_coHandleButtonPress coHandleButtonPress
        {
            add => On.tk2dButton.coHandleButtonPress += value;
            remove => On.tk2dButton.coHandleButtonPress -= value;
        }

        public static event On.tk2dButton.hook_Update Update
        {
            add => On.tk2dButton.Update += value;
            remove => On.tk2dButton.Update -= value;
        }
    }
}