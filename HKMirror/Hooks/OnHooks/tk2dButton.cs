namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dButton.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dButton.orig_OnEnable orig, tk2dButton self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dButton.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dButton.orig_Start orig, tk2dButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdateSpriteIds()
        {
            if (!HookedList.Contains("UpdateSpriteIds"))
            {
                HookedList.Add("UpdateSpriteIds");
                On.tk2dButton.UpdateSpriteIds += UpdateSpriteIds;
            }
        }

        internal static event Delegates.UpdateSpriteIds_BeforeArgs _beforeUpdateSpriteIds;
        internal static event Delegates.UpdateSpriteIds_NormalArgs _afterUpdateSpriteIds;

        private static void UpdateSpriteIds(On.tk2dButton.orig_UpdateSpriteIds orig, tk2dButton self)
        {
            Delegates.Params_UpdateSpriteIds @params = new()
            {
                self = self
            };
            _beforeUpdateSpriteIds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateSpriteIds != null) _afterUpdateSpriteIds.Invoke(@params);
        }

        internal static void HookPlaySound()
        {
            if (!HookedList.Contains("PlaySound"))
            {
                HookedList.Add("PlaySound");
                On.tk2dButton.PlaySound += PlaySound;
            }
        }

        internal static event Delegates.PlaySound_BeforeArgs _beforePlaySound;
        internal static event Delegates.PlaySound_NormalArgs _afterPlaySound;

        private static void PlaySound(On.tk2dButton.orig_PlaySound orig, tk2dButton self, AudioClip source)
        {
            Delegates.Params_PlaySound @params = new()
            {
                self = self, source = source
            };
            _beforePlaySound?.Invoke(@params);
            self = @params.self;
            source = @params.source;
            orig(self, source);
            if (_afterPlaySound != null) _afterPlaySound.Invoke(@params);
        }

        internal static void HookcoScale()
        {
            if (!HookedList.Contains("coScale"))
            {
                HookedList.Add("coScale");
                On.tk2dButton.coScale += coScale;
            }
        }

        internal static event Delegates.coScale_BeforeArgs _beforecoScale;

        private static IEnumerator coScale(On.tk2dButton.orig_coScale orig, tk2dButton self, Vector3 defaultScale,
            float startScale, float endScale)
        {
            Delegates.Params_coScale @params = new()
            {
                self = self, defaultScale = defaultScale, startScale = startScale, endScale = endScale
            };
            _beforecoScale?.Invoke(@params);
            self = @params.self;
            defaultScale = @params.defaultScale;
            startScale = @params.startScale;
            endScale = @params.endScale;
            return orig(self, defaultScale, startScale, endScale);
        }

        internal static void HookLocalWaitForSeconds()
        {
            if (!HookedList.Contains("LocalWaitForSeconds"))
            {
                HookedList.Add("LocalWaitForSeconds");
                On.tk2dButton.LocalWaitForSeconds += LocalWaitForSeconds;
            }
        }

        internal static event Delegates.LocalWaitForSeconds_BeforeArgs _beforeLocalWaitForSeconds;

        private static IEnumerator LocalWaitForSeconds(On.tk2dButton.orig_LocalWaitForSeconds orig, tk2dButton self,
            float seconds)
        {
            Delegates.Params_LocalWaitForSeconds @params = new()
            {
                self = self, seconds = seconds
            };
            _beforeLocalWaitForSeconds?.Invoke(@params);
            self = @params.self;
            seconds = @params.seconds;
            return orig(self, seconds);
        }

        internal static void HookcoHandleButtonPress()
        {
            if (!HookedList.Contains("coHandleButtonPress"))
            {
                HookedList.Add("coHandleButtonPress");
                On.tk2dButton.coHandleButtonPress += coHandleButtonPress;
            }
        }

        internal static event Delegates.coHandleButtonPress_BeforeArgs _beforecoHandleButtonPress;

        private static IEnumerator coHandleButtonPress(On.tk2dButton.orig_coHandleButtonPress orig, tk2dButton self,
            int fingerId)
        {
            Delegates.Params_coHandleButtonPress @params = new()
            {
                self = self, fingerId = fingerId
            };
            _beforecoHandleButtonPress?.Invoke(@params);
            self = @params.self;
            fingerId = @params.fingerId;
            return orig(self, fingerId);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.tk2dButton.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.tk2dButton.orig_Update orig, tk2dButton self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void coHandleButtonPress_BeforeArgs(Params_coHandleButtonPress args);

        public delegate IEnumerator coHandleButtonPress_NormalArgs(Params_coHandleButtonPress args);

        public delegate void coScale_BeforeArgs(Params_coScale args);

        public delegate IEnumerator coScale_NormalArgs(Params_coScale args);

        public delegate void LocalWaitForSeconds_BeforeArgs(Params_LocalWaitForSeconds args);

        public delegate IEnumerator LocalWaitForSeconds_NormalArgs(Params_LocalWaitForSeconds args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void PlaySound_BeforeArgs(Params_PlaySound args);

        public delegate void PlaySound_NormalArgs(Params_PlaySound args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateSpriteIds_BeforeArgs(Params_UpdateSpriteIds args);

        public delegate void UpdateSpriteIds_NormalArgs(Params_UpdateSpriteIds args);

        public sealed class Params_OnEnable
        {
            public tk2dButton self;
        }

        public sealed class Params_Start
        {
            public tk2dButton self;
        }

        public sealed class Params_UpdateSpriteIds
        {
            public tk2dButton self;
        }

        public sealed class Params_PlaySound
        {
            public tk2dButton self;
            public AudioClip source;
        }

        public sealed class Params_coScale
        {
            public Vector3 defaultScale;
            public float endScale;
            public tk2dButton self;
            public float startScale;
        }

        public sealed class Params_LocalWaitForSeconds
        {
            public float seconds;
            public tk2dButton self;
        }

        public sealed class Params_coHandleButtonPress
        {
            public int fingerId;
            public tk2dButton self;
        }

        public sealed class Params_Update
        {
            public tk2dButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdateSpriteIds_BeforeArgs UpdateSpriteIds
        {
            add
            {
                HookHandler._beforeUpdateSpriteIds += value;
                HookHandler.HookUpdateSpriteIds();
            }
            remove => HookHandler._beforeUpdateSpriteIds -= value;
        }

        public static event Delegates.PlaySound_BeforeArgs PlaySound
        {
            add
            {
                HookHandler._beforePlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._beforePlaySound -= value;
        }

        public static event Delegates.coScale_BeforeArgs coScale
        {
            add
            {
                HookHandler._beforecoScale += value;
                HookHandler.HookcoScale();
            }
            remove => HookHandler._beforecoScale -= value;
        }

        public static event Delegates.LocalWaitForSeconds_BeforeArgs LocalWaitForSeconds
        {
            add
            {
                HookHandler._beforeLocalWaitForSeconds += value;
                HookHandler.HookLocalWaitForSeconds();
            }
            remove => HookHandler._beforeLocalWaitForSeconds -= value;
        }

        public static event Delegates.coHandleButtonPress_BeforeArgs coHandleButtonPress
        {
            add
            {
                HookHandler._beforecoHandleButtonPress += value;
                HookHandler.HookcoHandleButtonPress();
            }
            remove => HookHandler._beforecoHandleButtonPress -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdateSpriteIds_NormalArgs UpdateSpriteIds
        {
            add
            {
                HookHandler._afterUpdateSpriteIds += value;
                HookHandler.HookUpdateSpriteIds();
            }
            remove => HookHandler._afterUpdateSpriteIds -= value;
        }

        public static event Delegates.PlaySound_NormalArgs PlaySound
        {
            add
            {
                HookHandler._afterPlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._afterPlaySound -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dButton.hook_OnEnable OnEnable
        {
            add => On.tk2dButton.OnEnable += value;
            remove => On.tk2dButton.OnEnable -= value;
        }

        public static event On.tk2dButton.hook_Start Start
        {
            add => On.tk2dButton.Start += value;
            remove => On.tk2dButton.Start -= value;
        }

        public static event On.tk2dButton.hook_UpdateSpriteIds UpdateSpriteIds
        {
            add => On.tk2dButton.UpdateSpriteIds += value;
            remove => On.tk2dButton.UpdateSpriteIds -= value;
        }

        public static event On.tk2dButton.hook_PlaySound PlaySound
        {
            add => On.tk2dButton.PlaySound += value;
            remove => On.tk2dButton.PlaySound -= value;
        }

        public static event On.tk2dButton.hook_coScale coScale
        {
            add => On.tk2dButton.coScale += value;
            remove => On.tk2dButton.coScale -= value;
        }

        public static event On.tk2dButton.hook_LocalWaitForSeconds LocalWaitForSeconds
        {
            add => On.tk2dButton.LocalWaitForSeconds += value;
            remove => On.tk2dButton.LocalWaitForSeconds -= value;
        }

        public static event On.tk2dButton.hook_coHandleButtonPress coHandleButtonPress
        {
            add => On.tk2dButton.coHandleButtonPress += value;
            remove => On.tk2dButton.coHandleButtonPress -= value;
        }

        public static event On.tk2dButton.hook_Update Update
        {
            add => On.tk2dButton.Update += value;
            remove => On.tk2dButton.Update -= value;
        }
    }
}