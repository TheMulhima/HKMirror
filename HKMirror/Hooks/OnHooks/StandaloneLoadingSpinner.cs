namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for StandaloneLoadingSpinner class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnStandaloneLoadingSpinner
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.StandaloneLoadingSpinner.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_AfterArgs _afterSetup;

        private static void Setup(On.StandaloneLoadingSpinner.orig_Setup orig, StandaloneLoadingSpinner self,
            GameManager lastGameManager)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self, lastGameManager = lastGameManager
            };
            if (_beforeSetup != null)
                foreach (Delegates.Setup_BeforeArgs toInvoke in _beforeSetup.GetInvocationList())
                    try
                    {
                        _beforeSetup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            lastGameManager = @params.lastGameManager;
            orig(self, lastGameManager);
            if (_afterSetup != null)
                foreach (Delegates.Setup_AfterArgs toInvoke in _afterSetup.GetInvocationList())
                    try
                    {
                        _afterSetup.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.StandaloneLoadingSpinner.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.StandaloneLoadingSpinner.orig_OnEnable orig, StandaloneLoadingSpinner self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.StandaloneLoadingSpinner.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.StandaloneLoadingSpinner.orig_Start orig, StandaloneLoadingSpinner self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.StandaloneLoadingSpinner.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

        private static void LateUpdate(On.StandaloneLoadingSpinner.orig_LateUpdate orig, StandaloneLoadingSpinner self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            if (_beforeLateUpdate != null)
                foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
                    try
                    {
                        _beforeLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null)
                foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
                    try
                    {
                        _afterLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_WithArgs(Action<StandaloneLoadingSpinner> orig, StandaloneLoadingSpinner self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<StandaloneLoadingSpinner> orig, StandaloneLoadingSpinner self);

        public delegate void Setup_AfterArgs(Params_Setup args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_WithArgs(Action<StandaloneLoadingSpinner, GameManager> orig,
            StandaloneLoadingSpinner self, GameManager lastGameManager);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<StandaloneLoadingSpinner> orig, StandaloneLoadingSpinner self);

        public sealed class Params_Setup
        {
            public GameManager lastGameManager;
            public StandaloneLoadingSpinner self;
        }

        public sealed class Params_OnEnable
        {
            public StandaloneLoadingSpinner self;
        }

        public sealed class Params_Start
        {
            public StandaloneLoadingSpinner self;
        }

        public sealed class Params_LateUpdate
        {
            public StandaloneLoadingSpinner self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Setup_AfterArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.LateUpdate_AfterArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.StandaloneLoadingSpinner.hook_Setup Setup
        {
            add => On.StandaloneLoadingSpinner.Setup += value;
            remove => On.StandaloneLoadingSpinner.Setup -= value;
        }

        public static event On.StandaloneLoadingSpinner.hook_OnEnable OnEnable
        {
            add => On.StandaloneLoadingSpinner.OnEnable += value;
            remove => On.StandaloneLoadingSpinner.OnEnable -= value;
        }

        public static event On.StandaloneLoadingSpinner.hook_Start Start
        {
            add => On.StandaloneLoadingSpinner.Start += value;
            remove => On.StandaloneLoadingSpinner.Start -= value;
        }

        public static event On.StandaloneLoadingSpinner.hook_LateUpdate LateUpdate
        {
            add => On.StandaloneLoadingSpinner.LateUpdate += value;
            remove => On.StandaloneLoadingSpinner.LateUpdate -= value;
        }
    }
}