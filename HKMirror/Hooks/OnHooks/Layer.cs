using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for Layer class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLayer
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Init", true), Init);
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(Action<tk2dRuntime.TileMap.Layer, int, int, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int hash, int width, int height, int divX, int divY)
        {
            Delegates.Params_Init @params = new()
            {
                self = self, hash = hash, width = width, height = height, divX = divX, divY = divY
            };
            if (_beforeInit != null)
            {
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                {
                    try
                    {
                        _beforeInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            hash = @params.hash;
            width = @params.width;
            height = @params.height;
            divX = @params.divX;
            divY = @params.divY;
            orig(self, hash, width, height, divX, divY);
            if (_afterInit != null)
            {
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                {
                    try
                    {
                        _afterInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_IsEmpty()
        {
            if (!HookedList.Contains("get_IsEmpty"))
            {
                HookedList.Add("get_IsEmpty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "get_IsEmpty", true),
                    get_IsEmpty);
            }
        }

        internal static event Delegates.get_IsEmpty_BeforeArgs _beforeget_IsEmpty;
        internal static event Delegates.get_IsEmpty_AfterArgs _afterget_IsEmpty;

        private static bool get_IsEmpty(Func<tk2dRuntime.TileMap.Layer, bool> orig, tk2dRuntime.TileMap.Layer self)
        {
            Delegates.Params_get_IsEmpty @params = new()
            {
                self = self
            };
            if (_beforeget_IsEmpty != null)
            {
                foreach (Delegates.get_IsEmpty_BeforeArgs toInvoke in _beforeget_IsEmpty.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsEmpty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsEmpty != null)
            {
                foreach (Delegates.get_IsEmpty_AfterArgs toInvoke in _afterget_IsEmpty.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsEmpty.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCreate()
        {
            if (!HookedList.Contains("Create"))
            {
                HookedList.Add("Create");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Create", true), Create);
            }
        }

        internal static event Delegates.Create_BeforeArgs _beforeCreate;
        internal static event Delegates.Create_AfterArgs _afterCreate;

        private static void Create(Action<tk2dRuntime.TileMap.Layer> orig, tk2dRuntime.TileMap.Layer self)
        {
            Delegates.Params_Create @params = new()
            {
                self = self
            };
            if (_beforeCreate != null)
            {
                foreach (Delegates.Create_BeforeArgs toInvoke in _beforeCreate.GetInvocationList())
                {
                    try
                    {
                        _beforeCreate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterCreate != null)
            {
                foreach (Delegates.Create_AfterArgs toInvoke in _afterCreate.GetInvocationList())
                {
                    try
                    {
                        _afterCreate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetChunkData()
        {
            if (!HookedList.Contains("GetChunkData"))
            {
                HookedList.Add("GetChunkData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetChunkData", true),
                    GetChunkData);
            }
        }

        internal static event Delegates.GetChunkData_BeforeArgs _beforeGetChunkData;
        internal static event Delegates.GetChunkData_AfterArgs _afterGetChunkData;

        private static int[] GetChunkData(Func<tk2dRuntime.TileMap.Layer, int, int, int[]> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y)
        {
            Delegates.Params_GetChunkData @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeGetChunkData != null)
            {
                foreach (Delegates.GetChunkData_BeforeArgs toInvoke in _beforeGetChunkData.GetInvocationList())
                {
                    try
                    {
                        _beforeGetChunkData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetChunkData != null)
            {
                foreach (Delegates.GetChunkData_AfterArgs toInvoke in _afterGetChunkData.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetChunkData.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetChunk()
        {
            if (!HookedList.Contains("GetChunk"))
            {
                HookedList.Add("GetChunk");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetChunk", true), GetChunk);
            }
        }

        internal static event Delegates.GetChunk_BeforeArgs _beforeGetChunk;
        internal static event Delegates.GetChunk_AfterArgs _afterGetChunk;

        private static tk2dRuntime.TileMap.SpriteChunk GetChunk(
            Func<tk2dRuntime.TileMap.Layer, int, int, tk2dRuntime.TileMap.SpriteChunk> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y)
        {
            Delegates.Params_GetChunk @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeGetChunk != null)
            {
                foreach (Delegates.GetChunk_BeforeArgs toInvoke in _beforeGetChunk.GetInvocationList())
                {
                    try
                    {
                        _beforeGetChunk?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetChunk != null)
            {
                foreach (Delegates.GetChunk_AfterArgs toInvoke in _afterGetChunk.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetChunk.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookFindChunkAndCoordinate()
        {
            if (!HookedList.Contains("FindChunkAndCoordinate"))
            {
                HookedList.Add("FindChunkAndCoordinate");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "FindChunkAndCoordinate", true),
                    FindChunkAndCoordinate);
            }
        }

        internal static event Delegates.FindChunkAndCoordinate_BeforeArgs _beforeFindChunkAndCoordinate;
        internal static event Delegates.FindChunkAndCoordinate_AfterArgs _afterFindChunkAndCoordinate;

        private static tk2dRuntime.TileMap.SpriteChunk FindChunkAndCoordinate(
            Func<tk2dRuntime.TileMap.Layer, int, int, int, tk2dRuntime.TileMap.SpriteChunk> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int offset)
        {
            Delegates.Params_FindChunkAndCoordinate @params = new()
            {
                self = self, x = x, y = y, offset = offset
            };
            if (_beforeFindChunkAndCoordinate != null)
            {
                foreach (Delegates.FindChunkAndCoordinate_BeforeArgs toInvoke in _beforeFindChunkAndCoordinate
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeFindChunkAndCoordinate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            offset = @params.offset;
            var retVal = orig(self, x, y, offset);
            if (_afterFindChunkAndCoordinate != null)
            {
                foreach (Delegates.FindChunkAndCoordinate_AfterArgs toInvoke in _afterFindChunkAndCoordinate
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterFindChunkAndCoordinate.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetRawTileValue()
        {
            if (!HookedList.Contains("GetRawTileValue"))
            {
                HookedList.Add("GetRawTileValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetRawTileValue", true),
                    GetRawTileValue);
            }
        }

        internal static event Delegates.GetRawTileValue_BeforeArgs _beforeGetRawTileValue;
        internal static event Delegates.GetRawTileValue_AfterArgs _afterGetRawTileValue;

        private static bool GetRawTileValue(Func<tk2dRuntime.TileMap.Layer, int, int, int, bool> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int value)
        {
            Delegates.Params_GetRawTileValue @params = new()
            {
                self = self, x = x, y = y, value = value
            };
            if (_beforeGetRawTileValue != null)
            {
                foreach (Delegates.GetRawTileValue_BeforeArgs toInvoke in _beforeGetRawTileValue.GetInvocationList())
                {
                    try
                    {
                        _beforeGetRawTileValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            value = @params.value;
            var retVal = orig(self, x, y, value);
            if (_afterGetRawTileValue != null)
            {
                foreach (Delegates.GetRawTileValue_AfterArgs toInvoke in _afterGetRawTileValue.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetRawTileValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetRawTileValue()
        {
            if (!HookedList.Contains("SetRawTileValue"))
            {
                HookedList.Add("SetRawTileValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetRawTileValue", true),
                    SetRawTileValue);
            }
        }

        internal static event Delegates.SetRawTileValue_BeforeArgs _beforeSetRawTileValue;
        internal static event Delegates.SetRawTileValue_AfterArgs _afterSetRawTileValue;

        private static void SetRawTileValue(Action<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int value)
        {
            Delegates.Params_SetRawTileValue @params = new()
            {
                self = self, x = x, y = y, value = value
            };
            if (_beforeSetRawTileValue != null)
            {
                foreach (Delegates.SetRawTileValue_BeforeArgs toInvoke in _beforeSetRawTileValue.GetInvocationList())
                {
                    try
                    {
                        _beforeSetRawTileValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            value = @params.value;
            orig(self, x, y, value);
            if (_afterSetRawTileValue != null)
            {
                foreach (Delegates.SetRawTileValue_AfterArgs toInvoke in _afterSetRawTileValue.GetInvocationList())
                {
                    try
                    {
                        _afterSetRawTileValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDestroyGameData()
        {
            if (!HookedList.Contains("DestroyGameData"))
            {
                HookedList.Add("DestroyGameData");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "DestroyGameData", true),
                    DestroyGameData);
            }
        }

        internal static event Delegates.DestroyGameData_BeforeArgs _beforeDestroyGameData;
        internal static event Delegates.DestroyGameData_AfterArgs _afterDestroyGameData;

        private static void DestroyGameData(Action<tk2dRuntime.TileMap.Layer, tk2dTileMap> orig,
            tk2dRuntime.TileMap.Layer self, tk2dTileMap tilemap)
        {
            Delegates.Params_DestroyGameData @params = new()
            {
                self = self, tilemap = tilemap
            };
            if (_beforeDestroyGameData != null)
            {
                foreach (Delegates.DestroyGameData_BeforeArgs toInvoke in _beforeDestroyGameData.GetInvocationList())
                {
                    try
                    {
                        _beforeDestroyGameData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            tilemap = @params.tilemap;
            orig(self, tilemap);
            if (_afterDestroyGameData != null)
            {
                foreach (Delegates.DestroyGameData_AfterArgs toInvoke in _afterDestroyGameData.GetInvocationList())
                {
                    try
                    {
                        _afterDestroyGameData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetTile()
        {
            if (!HookedList.Contains("GetTile"))
            {
                HookedList.Add("GetTile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetTile", true), GetTile);
            }
        }

        internal static event Delegates.GetTile_BeforeArgs _beforeGetTile;
        internal static event Delegates.GetTile_AfterArgs _afterGetTile;

        private static int GetTile(Func<tk2dRuntime.TileMap.Layer, int, int, int> orig, tk2dRuntime.TileMap.Layer self,
            int x, int y)
        {
            Delegates.Params_GetTile @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeGetTile != null)
            {
                foreach (Delegates.GetTile_BeforeArgs toInvoke in _beforeGetTile.GetInvocationList())
                {
                    try
                    {
                        _beforeGetTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetTile != null)
            {
                foreach (Delegates.GetTile_AfterArgs toInvoke in _afterGetTile.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTile.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetTileFlags()
        {
            if (!HookedList.Contains("GetTileFlags"))
            {
                HookedList.Add("GetTileFlags");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetTileFlags", true),
                    GetTileFlags);
            }
        }

        internal static event Delegates.GetTileFlags_BeforeArgs _beforeGetTileFlags;
        internal static event Delegates.GetTileFlags_AfterArgs _afterGetTileFlags;

        private static tk2dTileFlags GetTileFlags(Func<tk2dRuntime.TileMap.Layer, int, int, tk2dTileFlags> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y)
        {
            Delegates.Params_GetTileFlags @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeGetTileFlags != null)
            {
                foreach (Delegates.GetTileFlags_BeforeArgs toInvoke in _beforeGetTileFlags.GetInvocationList())
                {
                    try
                    {
                        _beforeGetTileFlags?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetTileFlags != null)
            {
                foreach (Delegates.GetTileFlags_AfterArgs toInvoke in _afterGetTileFlags.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTileFlags.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetRawTile()
        {
            if (!HookedList.Contains("GetRawTile"))
            {
                HookedList.Add("GetRawTile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetRawTile", true),
                    GetRawTile);
            }
        }

        internal static event Delegates.GetRawTile_BeforeArgs _beforeGetRawTile;
        internal static event Delegates.GetRawTile_AfterArgs _afterGetRawTile;

        private static int GetRawTile(Func<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y)
        {
            Delegates.Params_GetRawTile @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeGetRawTile != null)
            {
                foreach (Delegates.GetRawTile_BeforeArgs toInvoke in _beforeGetRawTile.GetInvocationList())
                {
                    try
                    {
                        _beforeGetRawTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            var retVal = orig(self, x, y);
            if (_afterGetRawTile != null)
            {
                foreach (Delegates.GetRawTile_AfterArgs toInvoke in _afterGetRawTile.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetRawTile.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetTile()
        {
            if (!HookedList.Contains("SetTile"))
            {
                HookedList.Add("SetTile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetTile", true), SetTile);
            }
        }

        internal static event Delegates.SetTile_BeforeArgs _beforeSetTile;
        internal static event Delegates.SetTile_AfterArgs _afterSetTile;

        private static void SetTile(Action<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int tile)
        {
            Delegates.Params_SetTile @params = new()
            {
                self = self, x = x, y = y, tile = tile
            };
            if (_beforeSetTile != null)
            {
                foreach (Delegates.SetTile_BeforeArgs toInvoke in _beforeSetTile.GetInvocationList())
                {
                    try
                    {
                        _beforeSetTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            tile = @params.tile;
            orig(self, x, y, tile);
            if (_afterSetTile != null)
            {
                foreach (Delegates.SetTile_AfterArgs toInvoke in _afterSetTile.GetInvocationList())
                {
                    try
                    {
                        _afterSetTile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetTileFlags()
        {
            if (!HookedList.Contains("SetTileFlags"))
            {
                HookedList.Add("SetTileFlags");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetTileFlags", true),
                    SetTileFlags);
            }
        }

        internal static event Delegates.SetTileFlags_BeforeArgs _beforeSetTileFlags;
        internal static event Delegates.SetTileFlags_AfterArgs _afterSetTileFlags;

        private static void SetTileFlags(Action<tk2dRuntime.TileMap.Layer, int, int, tk2dTileFlags> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, tk2dTileFlags flags)
        {
            Delegates.Params_SetTileFlags @params = new()
            {
                self = self, x = x, y = y, flags = flags
            };
            if (_beforeSetTileFlags != null)
            {
                foreach (Delegates.SetTileFlags_BeforeArgs toInvoke in _beforeSetTileFlags.GetInvocationList())
                {
                    try
                    {
                        _beforeSetTileFlags?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            flags = @params.flags;
            orig(self, x, y, flags);
            if (_afterSetTileFlags != null)
            {
                foreach (Delegates.SetTileFlags_AfterArgs toInvoke in _afterSetTileFlags.GetInvocationList())
                {
                    try
                    {
                        _afterSetTileFlags.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClearTile()
        {
            if (!HookedList.Contains("ClearTile"))
            {
                HookedList.Add("ClearTile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "ClearTile", true),
                    ClearTile);
            }
        }

        internal static event Delegates.ClearTile_BeforeArgs _beforeClearTile;
        internal static event Delegates.ClearTile_AfterArgs _afterClearTile;

        private static void ClearTile(Action<tk2dRuntime.TileMap.Layer, int, int> orig, tk2dRuntime.TileMap.Layer self,
            int x, int y)
        {
            Delegates.Params_ClearTile @params = new()
            {
                self = self, x = x, y = y
            };
            if (_beforeClearTile != null)
            {
                foreach (Delegates.ClearTile_BeforeArgs toInvoke in _beforeClearTile.GetInvocationList())
                {
                    try
                    {
                        _beforeClearTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            orig(self, x, y);
            if (_afterClearTile != null)
            {
                foreach (Delegates.ClearTile_AfterArgs toInvoke in _afterClearTile.GetInvocationList())
                {
                    try
                    {
                        _afterClearTile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetRawTile()
        {
            if (!HookedList.Contains("SetRawTile"))
            {
                HookedList.Add("SetRawTile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetRawTile", true),
                    SetRawTile);
            }
        }

        internal static event Delegates.SetRawTile_BeforeArgs _beforeSetRawTile;
        internal static event Delegates.SetRawTile_AfterArgs _afterSetRawTile;

        private static void SetRawTile(Action<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int rawTile)
        {
            Delegates.Params_SetRawTile @params = new()
            {
                self = self, x = x, y = y, rawTile = rawTile
            };
            if (_beforeSetRawTile != null)
            {
                foreach (Delegates.SetRawTile_BeforeArgs toInvoke in _beforeSetRawTile.GetInvocationList())
                {
                    try
                    {
                        _beforeSetRawTile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            rawTile = @params.rawTile;
            orig(self, x, y, rawTile);
            if (_afterSetRawTile != null)
            {
                foreach (Delegates.SetRawTile_AfterArgs toInvoke in _afterSetRawTile.GetInvocationList())
                {
                    try
                    {
                        _afterSetRawTile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCreateChunk()
        {
            if (!HookedList.Contains("CreateChunk"))
            {
                HookedList.Add("CreateChunk");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "CreateChunk", true),
                    CreateChunk);
            }
        }

        internal static event Delegates.CreateChunk_BeforeArgs _beforeCreateChunk;
        internal static event Delegates.CreateChunk_AfterArgs _afterCreateChunk;

        private static void CreateChunk(Action<tk2dRuntime.TileMap.Layer, tk2dRuntime.TileMap.SpriteChunk> orig,
            tk2dRuntime.TileMap.Layer self, tk2dRuntime.TileMap.SpriteChunk chunk)
        {
            Delegates.Params_CreateChunk @params = new()
            {
                self = self, chunk = chunk
            };
            if (_beforeCreateChunk != null)
            {
                foreach (Delegates.CreateChunk_BeforeArgs toInvoke in _beforeCreateChunk.GetInvocationList())
                {
                    try
                    {
                        _beforeCreateChunk?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            chunk = @params.chunk;
            orig(self, chunk);
            if (_afterCreateChunk != null)
            {
                foreach (Delegates.CreateChunk_AfterArgs toInvoke in _afterCreateChunk.GetInvocationList())
                {
                    try
                    {
                        _afterCreateChunk.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOptimize_SpriteChunk()
        {
            if (!HookedList.Contains("Optimize_SpriteChunk"))
            {
                HookedList.Add("Optimize_SpriteChunk");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Optimize_SpriteChunk", true),
                    Optimize_SpriteChunk);
            }
        }

        internal static event Delegates.Optimize_SpriteChunk_BeforeArgs _beforeOptimize_SpriteChunk;
        internal static event Delegates.Optimize_SpriteChunk_AfterArgs _afterOptimize_SpriteChunk;

        private static void Optimize_SpriteChunk(
            Action<tk2dRuntime.TileMap.Layer, tk2dRuntime.TileMap.SpriteChunk> orig, tk2dRuntime.TileMap.Layer self,
            tk2dRuntime.TileMap.SpriteChunk chunk)
        {
            Delegates.Params_Optimize_SpriteChunk @params = new()
            {
                self = self, chunk = chunk
            };
            if (_beforeOptimize_SpriteChunk != null)
            {
                foreach (Delegates.Optimize_SpriteChunk_BeforeArgs toInvoke in _beforeOptimize_SpriteChunk
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOptimize_SpriteChunk?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            chunk = @params.chunk;
            orig(self, chunk);
            if (_afterOptimize_SpriteChunk != null)
            {
                foreach (Delegates.Optimize_SpriteChunk_AfterArgs toInvoke in _afterOptimize_SpriteChunk
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOptimize_SpriteChunk.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOptimize()
        {
            if (!HookedList.Contains("Optimize"))
            {
                HookedList.Add("Optimize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Optimize", true), Optimize);
            }
        }

        internal static event Delegates.Optimize_BeforeArgs _beforeOptimize;
        internal static event Delegates.Optimize_AfterArgs _afterOptimize;

        private static void Optimize(Action<tk2dRuntime.TileMap.Layer> orig, tk2dRuntime.TileMap.Layer self)
        {
            Delegates.Params_Optimize @params = new()
            {
                self = self
            };
            if (_beforeOptimize != null)
            {
                foreach (Delegates.Optimize_BeforeArgs toInvoke in _beforeOptimize.GetInvocationList())
                {
                    try
                    {
                        _beforeOptimize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOptimize != null)
            {
                foreach (Delegates.Optimize_AfterArgs toInvoke in _afterOptimize.GetInvocationList())
                {
                    try
                    {
                        _afterOptimize.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOptimizeIncremental()
        {
            if (!HookedList.Contains("OptimizeIncremental"))
            {
                HookedList.Add("OptimizeIncremental");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "OptimizeIncremental", true),
                    OptimizeIncremental);
            }
        }

        internal static event Delegates.OptimizeIncremental_BeforeArgs _beforeOptimizeIncremental;
        internal static event Delegates.OptimizeIncremental_AfterArgs _afterOptimizeIncremental;

        private static void OptimizeIncremental(Action<tk2dRuntime.TileMap.Layer> orig, tk2dRuntime.TileMap.Layer self)
        {
            Delegates.Params_OptimizeIncremental @params = new()
            {
                self = self
            };
            if (_beforeOptimizeIncremental != null)
            {
                foreach (Delegates.OptimizeIncremental_BeforeArgs toInvoke in _beforeOptimizeIncremental
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOptimizeIncremental?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOptimizeIncremental != null)
            {
                foreach (Delegates.OptimizeIncremental_AfterArgs toInvoke in
                         _afterOptimizeIncremental.GetInvocationList())
                {
                    try
                    {
                        _afterOptimizeIncremental.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClearDirtyFlag()
        {
            if (!HookedList.Contains("ClearDirtyFlag"))
            {
                HookedList.Add("ClearDirtyFlag");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "ClearDirtyFlag", true),
                    ClearDirtyFlag);
            }
        }

        internal static event Delegates.ClearDirtyFlag_BeforeArgs _beforeClearDirtyFlag;
        internal static event Delegates.ClearDirtyFlag_AfterArgs _afterClearDirtyFlag;

        private static void ClearDirtyFlag(Action<tk2dRuntime.TileMap.Layer> orig, tk2dRuntime.TileMap.Layer self)
        {
            Delegates.Params_ClearDirtyFlag @params = new()
            {
                self = self
            };
            if (_beforeClearDirtyFlag != null)
            {
                foreach (Delegates.ClearDirtyFlag_BeforeArgs toInvoke in _beforeClearDirtyFlag.GetInvocationList())
                {
                    try
                    {
                        _beforeClearDirtyFlag?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClearDirtyFlag != null)
            {
                foreach (Delegates.ClearDirtyFlag_AfterArgs toInvoke in _afterClearDirtyFlag.GetInvocationList())
                {
                    try
                    {
                        _afterClearDirtyFlag.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_NumActiveChunks()
        {
            if (!HookedList.Contains("get_NumActiveChunks"))
            {
                HookedList.Add("get_NumActiveChunks");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "get_NumActiveChunks", true),
                    get_NumActiveChunks);
            }
        }

        internal static event Delegates.get_NumActiveChunks_BeforeArgs _beforeget_NumActiveChunks;
        internal static event Delegates.get_NumActiveChunks_AfterArgs _afterget_NumActiveChunks;

        private static int get_NumActiveChunks(Func<tk2dRuntime.TileMap.Layer, int> orig,
            tk2dRuntime.TileMap.Layer self)
        {
            Delegates.Params_get_NumActiveChunks @params = new()
            {
                self = self
            };
            if (_beforeget_NumActiveChunks != null)
            {
                foreach (Delegates.get_NumActiveChunks_BeforeArgs toInvoke in _beforeget_NumActiveChunks
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_NumActiveChunks?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumActiveChunks != null)
            {
                foreach (Delegates.get_NumActiveChunks_AfterArgs toInvoke in
                         _afterget_NumActiveChunks.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_NumActiveChunks.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Init
        {
            public tk2dRuntime.TileMap.Layer self;
            public int hash;
            public int width;
            public int height;
            public int divX;
            public int divY;
        }

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_AfterArgs(Params_Init args);

        public delegate void Init_WithArgs(Action<tk2dRuntime.TileMap.Layer, int, int, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int hash, int width, int height, int divX, int divY);

        public sealed class Params_get_IsEmpty
        {
            public tk2dRuntime.TileMap.Layer self;
        }

        public delegate void get_IsEmpty_BeforeArgs(Params_get_IsEmpty args);

        public delegate bool get_IsEmpty_AfterArgs(Params_get_IsEmpty args, bool ret);

        public delegate bool get_IsEmpty_WithArgs(Func<tk2dRuntime.TileMap.Layer, bool> orig,
            tk2dRuntime.TileMap.Layer self);

        public sealed class Params_Create
        {
            public tk2dRuntime.TileMap.Layer self;
        }

        public delegate void Create_BeforeArgs(Params_Create args);

        public delegate void Create_AfterArgs(Params_Create args);

        public delegate void Create_WithArgs(Action<tk2dRuntime.TileMap.Layer> orig, tk2dRuntime.TileMap.Layer self);

        public sealed class Params_GetChunkData
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
        }

        public delegate void GetChunkData_BeforeArgs(Params_GetChunkData args);

        public delegate int[] GetChunkData_AfterArgs(Params_GetChunkData args, int[] ret);

        public delegate int[] GetChunkData_WithArgs(Func<tk2dRuntime.TileMap.Layer, int, int, int[]> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y);

        public sealed class Params_GetChunk
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
        }

        public delegate void GetChunk_BeforeArgs(Params_GetChunk args);

        public delegate tk2dRuntime.TileMap.SpriteChunk GetChunk_AfterArgs(Params_GetChunk args,
            tk2dRuntime.TileMap.SpriteChunk ret);

        public delegate tk2dRuntime.TileMap.SpriteChunk GetChunk_WithArgs(
            Func<tk2dRuntime.TileMap.Layer, int, int, tk2dRuntime.TileMap.SpriteChunk> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y);

        public sealed class Params_FindChunkAndCoordinate
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
            public int offset;
        }

        public delegate void FindChunkAndCoordinate_BeforeArgs(Params_FindChunkAndCoordinate args);

        public delegate tk2dRuntime.TileMap.SpriteChunk FindChunkAndCoordinate_AfterArgs(
            Params_FindChunkAndCoordinate args, tk2dRuntime.TileMap.SpriteChunk ret);

        public delegate tk2dRuntime.TileMap.SpriteChunk FindChunkAndCoordinate_WithArgs(
            Func<tk2dRuntime.TileMap.Layer, int, int, int, tk2dRuntime.TileMap.SpriteChunk> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int offset);

        public sealed class Params_GetRawTileValue
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
            public int value;
        }

        public delegate void GetRawTileValue_BeforeArgs(Params_GetRawTileValue args);

        public delegate bool GetRawTileValue_AfterArgs(Params_GetRawTileValue args, bool ret);

        public delegate bool GetRawTileValue_WithArgs(Func<tk2dRuntime.TileMap.Layer, int, int, int, bool> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int value);

        public sealed class Params_SetRawTileValue
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
            public int value;
        }

        public delegate void SetRawTileValue_BeforeArgs(Params_SetRawTileValue args);

        public delegate void SetRawTileValue_AfterArgs(Params_SetRawTileValue args);

        public delegate void SetRawTileValue_WithArgs(Action<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int value);

        public sealed class Params_DestroyGameData
        {
            public tk2dRuntime.TileMap.Layer self;
            public tk2dTileMap tilemap;
        }

        public delegate void DestroyGameData_BeforeArgs(Params_DestroyGameData args);

        public delegate void DestroyGameData_AfterArgs(Params_DestroyGameData args);

        public delegate void DestroyGameData_WithArgs(Action<tk2dRuntime.TileMap.Layer, tk2dTileMap> orig,
            tk2dRuntime.TileMap.Layer self, tk2dTileMap tilemap);

        public sealed class Params_GetTile
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
        }

        public delegate void GetTile_BeforeArgs(Params_GetTile args);

        public delegate int GetTile_AfterArgs(Params_GetTile args, int ret);

        public delegate int GetTile_WithArgs(Func<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y);

        public sealed class Params_GetTileFlags
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
        }

        public delegate void GetTileFlags_BeforeArgs(Params_GetTileFlags args);

        public delegate tk2dTileFlags GetTileFlags_AfterArgs(Params_GetTileFlags args, tk2dTileFlags ret);

        public delegate tk2dTileFlags GetTileFlags_WithArgs(
            Func<tk2dRuntime.TileMap.Layer, int, int, tk2dTileFlags> orig, tk2dRuntime.TileMap.Layer self, int x,
            int y);

        public sealed class Params_GetRawTile
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
        }

        public delegate void GetRawTile_BeforeArgs(Params_GetRawTile args);

        public delegate int GetRawTile_AfterArgs(Params_GetRawTile args, int ret);

        public delegate int GetRawTile_WithArgs(Func<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y);

        public sealed class Params_SetTile
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
            public int tile;
        }

        public delegate void SetTile_BeforeArgs(Params_SetTile args);

        public delegate void SetTile_AfterArgs(Params_SetTile args);

        public delegate void SetTile_WithArgs(Action<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int tile);

        public sealed class Params_SetTileFlags
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
            public tk2dTileFlags flags;
        }

        public delegate void SetTileFlags_BeforeArgs(Params_SetTileFlags args);

        public delegate void SetTileFlags_AfterArgs(Params_SetTileFlags args);

        public delegate void SetTileFlags_WithArgs(Action<tk2dRuntime.TileMap.Layer, int, int, tk2dTileFlags> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, tk2dTileFlags flags);

        public sealed class Params_ClearTile
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
        }

        public delegate void ClearTile_BeforeArgs(Params_ClearTile args);

        public delegate void ClearTile_AfterArgs(Params_ClearTile args);

        public delegate void ClearTile_WithArgs(Action<tk2dRuntime.TileMap.Layer, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y);

        public sealed class Params_SetRawTile
        {
            public tk2dRuntime.TileMap.Layer self;
            public int x;
            public int y;
            public int rawTile;
        }

        public delegate void SetRawTile_BeforeArgs(Params_SetRawTile args);

        public delegate void SetRawTile_AfterArgs(Params_SetRawTile args);

        public delegate void SetRawTile_WithArgs(Action<tk2dRuntime.TileMap.Layer, int, int, int> orig,
            tk2dRuntime.TileMap.Layer self, int x, int y, int rawTile);

        public sealed class Params_CreateChunk
        {
            public tk2dRuntime.TileMap.Layer self;
            public tk2dRuntime.TileMap.SpriteChunk chunk;
        }

        public delegate void CreateChunk_BeforeArgs(Params_CreateChunk args);

        public delegate void CreateChunk_AfterArgs(Params_CreateChunk args);

        public delegate void CreateChunk_WithArgs(
            Action<tk2dRuntime.TileMap.Layer, tk2dRuntime.TileMap.SpriteChunk> orig, tk2dRuntime.TileMap.Layer self,
            tk2dRuntime.TileMap.SpriteChunk chunk);

        public sealed class Params_Optimize_SpriteChunk
        {
            public tk2dRuntime.TileMap.Layer self;
            public tk2dRuntime.TileMap.SpriteChunk chunk;
        }

        public delegate void Optimize_SpriteChunk_BeforeArgs(Params_Optimize_SpriteChunk args);

        public delegate void Optimize_SpriteChunk_AfterArgs(Params_Optimize_SpriteChunk args);

        public delegate void Optimize_SpriteChunk_WithArgs(
            Action<tk2dRuntime.TileMap.Layer, tk2dRuntime.TileMap.SpriteChunk> orig, tk2dRuntime.TileMap.Layer self,
            tk2dRuntime.TileMap.SpriteChunk chunk);

        public sealed class Params_Optimize
        {
            public tk2dRuntime.TileMap.Layer self;
        }

        public delegate void Optimize_BeforeArgs(Params_Optimize args);

        public delegate void Optimize_AfterArgs(Params_Optimize args);

        public delegate void Optimize_WithArgs(Action<tk2dRuntime.TileMap.Layer> orig, tk2dRuntime.TileMap.Layer self);

        public sealed class Params_OptimizeIncremental
        {
            public tk2dRuntime.TileMap.Layer self;
        }

        public delegate void OptimizeIncremental_BeforeArgs(Params_OptimizeIncremental args);

        public delegate void OptimizeIncremental_AfterArgs(Params_OptimizeIncremental args);

        public delegate void OptimizeIncremental_WithArgs(Action<tk2dRuntime.TileMap.Layer> orig,
            tk2dRuntime.TileMap.Layer self);

        public sealed class Params_ClearDirtyFlag
        {
            public tk2dRuntime.TileMap.Layer self;
        }

        public delegate void ClearDirtyFlag_BeforeArgs(Params_ClearDirtyFlag args);

        public delegate void ClearDirtyFlag_AfterArgs(Params_ClearDirtyFlag args);

        public delegate void ClearDirtyFlag_WithArgs(Action<tk2dRuntime.TileMap.Layer> orig,
            tk2dRuntime.TileMap.Layer self);

        public sealed class Params_get_NumActiveChunks
        {
            public tk2dRuntime.TileMap.Layer self;
        }

        public delegate void get_NumActiveChunks_BeforeArgs(Params_get_NumActiveChunks args);

        public delegate int get_NumActiveChunks_AfterArgs(Params_get_NumActiveChunks args, int ret);

        public delegate int get_NumActiveChunks_WithArgs(Func<tk2dRuntime.TileMap.Layer, int> orig,
            tk2dRuntime.TileMap.Layer self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.get_IsEmpty_BeforeArgs get_IsEmpty
        {
            add
            {
                HookHandler._beforeget_IsEmpty += value;
                HookHandler.Hookget_IsEmpty();
            }
            remove => HookHandler._beforeget_IsEmpty -= value;
        }

        public static event Delegates.Create_BeforeArgs Create
        {
            add
            {
                HookHandler._beforeCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._beforeCreate -= value;
        }

        public static event Delegates.GetChunkData_BeforeArgs GetChunkData
        {
            add
            {
                HookHandler._beforeGetChunkData += value;
                HookHandler.HookGetChunkData();
            }
            remove => HookHandler._beforeGetChunkData -= value;
        }

        public static event Delegates.GetChunk_BeforeArgs GetChunk
        {
            add
            {
                HookHandler._beforeGetChunk += value;
                HookHandler.HookGetChunk();
            }
            remove => HookHandler._beforeGetChunk -= value;
        }

        public static event Delegates.FindChunkAndCoordinate_BeforeArgs FindChunkAndCoordinate
        {
            add
            {
                HookHandler._beforeFindChunkAndCoordinate += value;
                HookHandler.HookFindChunkAndCoordinate();
            }
            remove => HookHandler._beforeFindChunkAndCoordinate -= value;
        }

        public static event Delegates.GetRawTileValue_BeforeArgs GetRawTileValue
        {
            add
            {
                HookHandler._beforeGetRawTileValue += value;
                HookHandler.HookGetRawTileValue();
            }
            remove => HookHandler._beforeGetRawTileValue -= value;
        }

        public static event Delegates.SetRawTileValue_BeforeArgs SetRawTileValue
        {
            add
            {
                HookHandler._beforeSetRawTileValue += value;
                HookHandler.HookSetRawTileValue();
            }
            remove => HookHandler._beforeSetRawTileValue -= value;
        }

        public static event Delegates.DestroyGameData_BeforeArgs DestroyGameData
        {
            add
            {
                HookHandler._beforeDestroyGameData += value;
                HookHandler.HookDestroyGameData();
            }
            remove => HookHandler._beforeDestroyGameData -= value;
        }

        public static event Delegates.GetTile_BeforeArgs GetTile
        {
            add
            {
                HookHandler._beforeGetTile += value;
                HookHandler.HookGetTile();
            }
            remove => HookHandler._beforeGetTile -= value;
        }

        public static event Delegates.GetTileFlags_BeforeArgs GetTileFlags
        {
            add
            {
                HookHandler._beforeGetTileFlags += value;
                HookHandler.HookGetTileFlags();
            }
            remove => HookHandler._beforeGetTileFlags -= value;
        }

        public static event Delegates.GetRawTile_BeforeArgs GetRawTile
        {
            add
            {
                HookHandler._beforeGetRawTile += value;
                HookHandler.HookGetRawTile();
            }
            remove => HookHandler._beforeGetRawTile -= value;
        }

        public static event Delegates.SetTile_BeforeArgs SetTile
        {
            add
            {
                HookHandler._beforeSetTile += value;
                HookHandler.HookSetTile();
            }
            remove => HookHandler._beforeSetTile -= value;
        }

        public static event Delegates.SetTileFlags_BeforeArgs SetTileFlags
        {
            add
            {
                HookHandler._beforeSetTileFlags += value;
                HookHandler.HookSetTileFlags();
            }
            remove => HookHandler._beforeSetTileFlags -= value;
        }

        public static event Delegates.ClearTile_BeforeArgs ClearTile
        {
            add
            {
                HookHandler._beforeClearTile += value;
                HookHandler.HookClearTile();
            }
            remove => HookHandler._beforeClearTile -= value;
        }

        public static event Delegates.SetRawTile_BeforeArgs SetRawTile
        {
            add
            {
                HookHandler._beforeSetRawTile += value;
                HookHandler.HookSetRawTile();
            }
            remove => HookHandler._beforeSetRawTile -= value;
        }

        public static event Delegates.CreateChunk_BeforeArgs CreateChunk
        {
            add
            {
                HookHandler._beforeCreateChunk += value;
                HookHandler.HookCreateChunk();
            }
            remove => HookHandler._beforeCreateChunk -= value;
        }

        public static event Delegates.Optimize_SpriteChunk_BeforeArgs Optimize_SpriteChunk
        {
            add
            {
                HookHandler._beforeOptimize_SpriteChunk += value;
                HookHandler.HookOptimize_SpriteChunk();
            }
            remove => HookHandler._beforeOptimize_SpriteChunk -= value;
        }

        public static event Delegates.Optimize_BeforeArgs Optimize
        {
            add
            {
                HookHandler._beforeOptimize += value;
                HookHandler.HookOptimize();
            }
            remove => HookHandler._beforeOptimize -= value;
        }

        public static event Delegates.OptimizeIncremental_BeforeArgs OptimizeIncremental
        {
            add
            {
                HookHandler._beforeOptimizeIncremental += value;
                HookHandler.HookOptimizeIncremental();
            }
            remove => HookHandler._beforeOptimizeIncremental -= value;
        }

        public static event Delegates.ClearDirtyFlag_BeforeArgs ClearDirtyFlag
        {
            add
            {
                HookHandler._beforeClearDirtyFlag += value;
                HookHandler.HookClearDirtyFlag();
            }
            remove => HookHandler._beforeClearDirtyFlag -= value;
        }

        public static event Delegates.get_NumActiveChunks_BeforeArgs get_NumActiveChunks
        {
            add
            {
                HookHandler._beforeget_NumActiveChunks += value;
                HookHandler.Hookget_NumActiveChunks();
            }
            remove => HookHandler._beforeget_NumActiveChunks -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.get_IsEmpty_AfterArgs get_IsEmpty
        {
            add
            {
                HookHandler._afterget_IsEmpty += value;
                HookHandler.Hookget_IsEmpty();
            }
            remove => HookHandler._afterget_IsEmpty -= value;
        }

        public static event Delegates.Create_AfterArgs Create
        {
            add
            {
                HookHandler._afterCreate += value;
                HookHandler.HookCreate();
            }
            remove => HookHandler._afterCreate -= value;
        }

        public static event Delegates.GetChunkData_AfterArgs GetChunkData
        {
            add
            {
                HookHandler._afterGetChunkData += value;
                HookHandler.HookGetChunkData();
            }
            remove => HookHandler._afterGetChunkData -= value;
        }

        public static event Delegates.GetChunk_AfterArgs GetChunk
        {
            add
            {
                HookHandler._afterGetChunk += value;
                HookHandler.HookGetChunk();
            }
            remove => HookHandler._afterGetChunk -= value;
        }

        public static event Delegates.FindChunkAndCoordinate_AfterArgs FindChunkAndCoordinate
        {
            add
            {
                HookHandler._afterFindChunkAndCoordinate += value;
                HookHandler.HookFindChunkAndCoordinate();
            }
            remove => HookHandler._afterFindChunkAndCoordinate -= value;
        }

        public static event Delegates.GetRawTileValue_AfterArgs GetRawTileValue
        {
            add
            {
                HookHandler._afterGetRawTileValue += value;
                HookHandler.HookGetRawTileValue();
            }
            remove => HookHandler._afterGetRawTileValue -= value;
        }

        public static event Delegates.SetRawTileValue_AfterArgs SetRawTileValue
        {
            add
            {
                HookHandler._afterSetRawTileValue += value;
                HookHandler.HookSetRawTileValue();
            }
            remove => HookHandler._afterSetRawTileValue -= value;
        }

        public static event Delegates.DestroyGameData_AfterArgs DestroyGameData
        {
            add
            {
                HookHandler._afterDestroyGameData += value;
                HookHandler.HookDestroyGameData();
            }
            remove => HookHandler._afterDestroyGameData -= value;
        }

        public static event Delegates.GetTile_AfterArgs GetTile
        {
            add
            {
                HookHandler._afterGetTile += value;
                HookHandler.HookGetTile();
            }
            remove => HookHandler._afterGetTile -= value;
        }

        public static event Delegates.GetTileFlags_AfterArgs GetTileFlags
        {
            add
            {
                HookHandler._afterGetTileFlags += value;
                HookHandler.HookGetTileFlags();
            }
            remove => HookHandler._afterGetTileFlags -= value;
        }

        public static event Delegates.GetRawTile_AfterArgs GetRawTile
        {
            add
            {
                HookHandler._afterGetRawTile += value;
                HookHandler.HookGetRawTile();
            }
            remove => HookHandler._afterGetRawTile -= value;
        }

        public static event Delegates.SetTile_AfterArgs SetTile
        {
            add
            {
                HookHandler._afterSetTile += value;
                HookHandler.HookSetTile();
            }
            remove => HookHandler._afterSetTile -= value;
        }

        public static event Delegates.SetTileFlags_AfterArgs SetTileFlags
        {
            add
            {
                HookHandler._afterSetTileFlags += value;
                HookHandler.HookSetTileFlags();
            }
            remove => HookHandler._afterSetTileFlags -= value;
        }

        public static event Delegates.ClearTile_AfterArgs ClearTile
        {
            add
            {
                HookHandler._afterClearTile += value;
                HookHandler.HookClearTile();
            }
            remove => HookHandler._afterClearTile -= value;
        }

        public static event Delegates.SetRawTile_AfterArgs SetRawTile
        {
            add
            {
                HookHandler._afterSetRawTile += value;
                HookHandler.HookSetRawTile();
            }
            remove => HookHandler._afterSetRawTile -= value;
        }

        public static event Delegates.CreateChunk_AfterArgs CreateChunk
        {
            add
            {
                HookHandler._afterCreateChunk += value;
                HookHandler.HookCreateChunk();
            }
            remove => HookHandler._afterCreateChunk -= value;
        }

        public static event Delegates.Optimize_SpriteChunk_AfterArgs Optimize_SpriteChunk
        {
            add
            {
                HookHandler._afterOptimize_SpriteChunk += value;
                HookHandler.HookOptimize_SpriteChunk();
            }
            remove => HookHandler._afterOptimize_SpriteChunk -= value;
        }

        public static event Delegates.Optimize_AfterArgs Optimize
        {
            add
            {
                HookHandler._afterOptimize += value;
                HookHandler.HookOptimize();
            }
            remove => HookHandler._afterOptimize -= value;
        }

        public static event Delegates.OptimizeIncremental_AfterArgs OptimizeIncremental
        {
            add
            {
                HookHandler._afterOptimizeIncremental += value;
                HookHandler.HookOptimizeIncremental();
            }
            remove => HookHandler._afterOptimizeIncremental -= value;
        }

        public static event Delegates.ClearDirtyFlag_AfterArgs ClearDirtyFlag
        {
            add
            {
                HookHandler._afterClearDirtyFlag += value;
                HookHandler.HookClearDirtyFlag();
            }
            remove => HookHandler._afterClearDirtyFlag -= value;
        }

        public static event Delegates.get_NumActiveChunks_AfterArgs get_NumActiveChunks
        {
            add
            {
                HookHandler._afterget_NumActiveChunks += value;
                HookHandler.Hookget_NumActiveChunks();
            }
            remove => HookHandler._afterget_NumActiveChunks -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Init_WithArgs Init
        {
            add => HookEndpointManager.Add<Delegates.Init_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Init", true), value);
            remove => HookEndpointManager.Remove<Delegates.Init_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Init", true), value);
        }

        public static event Delegates.get_IsEmpty_WithArgs get_IsEmpty
        {
            add => HookEndpointManager.Add<Delegates.get_IsEmpty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "get_IsEmpty", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsEmpty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "get_IsEmpty", true), value);
        }

        public static event Delegates.Create_WithArgs Create
        {
            add => HookEndpointManager.Add<Delegates.Create_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Create", true), value);
            remove => HookEndpointManager.Remove<Delegates.Create_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Create", true), value);
        }

        public static event Delegates.GetChunkData_WithArgs GetChunkData
        {
            add => HookEndpointManager.Add<Delegates.GetChunkData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetChunkData", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetChunkData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetChunkData", true), value);
        }

        public static event Delegates.GetChunk_WithArgs GetChunk
        {
            add => HookEndpointManager.Add<Delegates.GetChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetChunk", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetChunk", true), value);
        }

        public static event Delegates.FindChunkAndCoordinate_WithArgs FindChunkAndCoordinate
        {
            add => HookEndpointManager.Add<Delegates.FindChunkAndCoordinate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "FindChunkAndCoordinate", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.FindChunkAndCoordinate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "FindChunkAndCoordinate", true),
                value);
        }

        public static event Delegates.GetRawTileValue_WithArgs GetRawTileValue
        {
            add => HookEndpointManager.Add<Delegates.GetRawTileValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetRawTileValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetRawTileValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetRawTileValue", true), value);
        }

        public static event Delegates.SetRawTileValue_WithArgs SetRawTileValue
        {
            add => HookEndpointManager.Add<Delegates.SetRawTileValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetRawTileValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetRawTileValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetRawTileValue", true), value);
        }

        public static event Delegates.DestroyGameData_WithArgs DestroyGameData
        {
            add => HookEndpointManager.Add<Delegates.DestroyGameData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "DestroyGameData", true), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyGameData_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "DestroyGameData", true), value);
        }

        public static event Delegates.GetTile_WithArgs GetTile
        {
            add => HookEndpointManager.Add<Delegates.GetTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetTile", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetTile", true), value);
        }

        public static event Delegates.GetTileFlags_WithArgs GetTileFlags
        {
            add => HookEndpointManager.Add<Delegates.GetTileFlags_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetTileFlags", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetTileFlags_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetTileFlags", true), value);
        }

        public static event Delegates.GetRawTile_WithArgs GetRawTile
        {
            add => HookEndpointManager.Add<Delegates.GetRawTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetRawTile", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetRawTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "GetRawTile", true), value);
        }

        public static event Delegates.SetTile_WithArgs SetTile
        {
            add => HookEndpointManager.Add<Delegates.SetTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetTile", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetTile", true), value);
        }

        public static event Delegates.SetTileFlags_WithArgs SetTileFlags
        {
            add => HookEndpointManager.Add<Delegates.SetTileFlags_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetTileFlags", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetTileFlags_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetTileFlags", true), value);
        }

        public static event Delegates.ClearTile_WithArgs ClearTile
        {
            add => HookEndpointManager.Add<Delegates.ClearTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "ClearTile", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "ClearTile", true), value);
        }

        public static event Delegates.SetRawTile_WithArgs SetRawTile
        {
            add => HookEndpointManager.Add<Delegates.SetRawTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetRawTile", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetRawTile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "SetRawTile", true), value);
        }

        public static event Delegates.CreateChunk_WithArgs CreateChunk
        {
            add => HookEndpointManager.Add<Delegates.CreateChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "CreateChunk", true), value);
            remove => HookEndpointManager.Remove<Delegates.CreateChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "CreateChunk", true), value);
        }

        public static event Delegates.Optimize_SpriteChunk_WithArgs Optimize_SpriteChunk
        {
            add => HookEndpointManager.Add<Delegates.Optimize_SpriteChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Optimize", true), value);
            remove => HookEndpointManager.Remove<Delegates.Optimize_SpriteChunk_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Optimize", true), value);
        }

        public static event Delegates.Optimize_WithArgs Optimize
        {
            add => HookEndpointManager.Add<Delegates.Optimize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Optimize", true), value);
            remove => HookEndpointManager.Remove<Delegates.Optimize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "Optimize", true), value);
        }

        public static event Delegates.OptimizeIncremental_WithArgs OptimizeIncremental
        {
            add => HookEndpointManager.Add<Delegates.OptimizeIncremental_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "OptimizeIncremental", true), value);
            remove => HookEndpointManager.Remove<Delegates.OptimizeIncremental_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "OptimizeIncremental", true), value);
        }

        public static event Delegates.ClearDirtyFlag_WithArgs ClearDirtyFlag
        {
            add => HookEndpointManager.Add<Delegates.ClearDirtyFlag_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "ClearDirtyFlag", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearDirtyFlag_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "ClearDirtyFlag", true), value);
        }

        public static event Delegates.get_NumActiveChunks_WithArgs get_NumActiveChunks
        {
            add => HookEndpointManager.Add<Delegates.get_NumActiveChunks_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "get_NumActiveChunks", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_NumActiveChunks_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dRuntime.TileMap.Layer), "get_NumActiveChunks", true), value);
        }
    }
}