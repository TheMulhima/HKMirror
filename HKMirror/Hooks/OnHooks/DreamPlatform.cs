using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for DreamPlatform class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDreamPlatform
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.DreamPlatform.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.DreamPlatform.orig_Awake orig,DreamPlatform self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.DreamPlatform.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.DreamPlatform.orig_Start orig,DreamPlatform self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.DreamPlatform.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.DreamPlatform.orig_OnEnable orig,DreamPlatform self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShow()
{
if (!HookedList.Contains("Show"))
{
HookedList.Add("Show");
On.DreamPlatform.Show += Show;

}
}
internal static event Delegates.Show_BeforeArgs _beforeShow;
internal static event Delegates.Show_AfterArgs _afterShow;
private static void Show(On.DreamPlatform.orig_Show orig,DreamPlatform self)
{
Delegates.Params_Show @params = new() 
{
self = self
};
if (_beforeShow != null)
{
foreach (Delegates.Show_BeforeArgs toInvoke in _beforeShow.GetInvocationList())
{
try
{
_beforeShow?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterShow != null)
{
foreach (Delegates.Show_AfterArgs toInvoke in _afterShow.GetInvocationList())
{
try
{
_afterShow.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookHide()
{
if (!HookedList.Contains("Hide"))
{
HookedList.Add("Hide");
On.DreamPlatform.Hide += Hide;

}
}
internal static event Delegates.Hide_BeforeArgs _beforeHide;
internal static event Delegates.Hide_AfterArgs _afterHide;
private static void Hide(On.DreamPlatform.orig_Hide orig,DreamPlatform self)
{
Delegates.Params_Hide @params = new() 
{
self = self
};
if (_beforeHide != null)
{
foreach (Delegates.Hide_BeforeArgs toInvoke in _beforeHide.GetInvocationList())
{
try
{
_beforeHide?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterHide != null)
{
foreach (Delegates.Hide_AfterArgs toInvoke in _afterHide.GetInvocationList())
{
try
{
_afterHide.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPlayAnimation()
{
if (!HookedList.Contains("PlayAnimation"))
{
HookedList.Add("PlayAnimation");
On.DreamPlatform.PlayAnimation += PlayAnimation;

}
}
internal static event Delegates.PlayAnimation_BeforeArgs _beforePlayAnimation;
internal static event Delegates.PlayAnimation_AfterArgs _afterPlayAnimation;
private static void PlayAnimation(On.DreamPlatform.orig_PlayAnimation orig,DreamPlatform self,  string animationName)
{
Delegates.Params_PlayAnimation @params = new() 
{
self = self
, animationName = animationName
};
if (_beforePlayAnimation != null)
{
foreach (Delegates.PlayAnimation_BeforeArgs toInvoke in _beforePlayAnimation.GetInvocationList())
{
try
{
_beforePlayAnimation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
animationName = @params.animationName;
orig(self, animationName);
if (_afterPlayAnimation != null)
{
foreach (Delegates.PlayAnimation_AfterArgs toInvoke in _afterPlayAnimation.GetInvocationList())
{
try
{
_afterPlayAnimation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public DreamPlatform self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<DreamPlatform> orig, DreamPlatform self);
public sealed class Params_Start
{
public DreamPlatform self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<DreamPlatform> orig, DreamPlatform self);
public sealed class Params_OnEnable
{
public DreamPlatform self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<DreamPlatform> orig, DreamPlatform self);
public sealed class Params_Show
{
public DreamPlatform self;
}
public delegate void Show_BeforeArgs(Params_Show args);
public delegate void Show_AfterArgs(Params_Show args);
public delegate void Show_WithArgs (Action<DreamPlatform> orig, DreamPlatform self);
public sealed class Params_Hide
{
public DreamPlatform self;
}
public delegate void Hide_BeforeArgs(Params_Hide args);
public delegate void Hide_AfterArgs(Params_Hide args);
public delegate void Hide_WithArgs (Action<DreamPlatform> orig, DreamPlatform self);
public sealed class Params_PlayAnimation
{
public DreamPlatform self;
public string animationName;
}
public delegate void PlayAnimation_BeforeArgs(Params_PlayAnimation args);
public delegate void PlayAnimation_AfterArgs(Params_PlayAnimation args);
public delegate void PlayAnimation_WithArgs (Action<DreamPlatform,  string> orig, DreamPlatform self,  string animationName);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Show_BeforeArgs Show
{
add
{

HookHandler._beforeShow += value;
HookHandler.HookShow();
}
remove => HookHandler._beforeShow -= value;
}
public static event Delegates.Hide_BeforeArgs Hide
{
add
{

HookHandler._beforeHide += value;
HookHandler.HookHide();
}
remove => HookHandler._beforeHide -= value;
}
public static event Delegates.PlayAnimation_BeforeArgs PlayAnimation
{
add
{

HookHandler._beforePlayAnimation += value;
HookHandler.HookPlayAnimation();
}
remove => HookHandler._beforePlayAnimation -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Show_AfterArgs Show
{
add
{

HookHandler._afterShow += value;
HookHandler.HookShow();
}
remove => HookHandler._afterShow -= value;
}
public static event Delegates.Hide_AfterArgs Hide
{
add
{

HookHandler._afterHide += value;
HookHandler.HookHide();
}
remove => HookHandler._afterHide -= value;
}
public static event Delegates.PlayAnimation_AfterArgs PlayAnimation
{
add
{

HookHandler._afterPlayAnimation += value;
HookHandler.HookPlayAnimation();
}
remove => HookHandler._afterPlayAnimation -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.DreamPlatform.hook_Awake Awake
{
add => On.DreamPlatform.Awake += value;
remove => On.DreamPlatform.Awake -= value;
}
public static event On.DreamPlatform.hook_Start Start
{
add => On.DreamPlatform.Start += value;
remove => On.DreamPlatform.Start -= value;
}
public static event On.DreamPlatform.hook_OnEnable OnEnable
{
add => On.DreamPlatform.OnEnable += value;
remove => On.DreamPlatform.OnEnable -= value;
}
public static event On.DreamPlatform.hook_Show Show
{
add => On.DreamPlatform.Show += value;
remove => On.DreamPlatform.Show -= value;
}
public static event On.DreamPlatform.hook_Hide Hide
{
add => On.DreamPlatform.Hide += value;
remove => On.DreamPlatform.Hide -= value;
}
public static event On.DreamPlatform.hook_PlayAnimation PlayAnimation
{
add => On.DreamPlatform.PlayAnimation += value;
remove => On.DreamPlatform.PlayAnimation -= value;
}
}

}
