using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CorpseDeathStun class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCorpseDeathStun
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.CorpseDeathStun.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.CorpseDeathStun.orig_Start orig,CorpseDeathStun self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDeathStun()
{
if (!HookedList.Contains("DeathStun"))
{
HookedList.Add("DeathStun");
On.CorpseDeathStun.DeathStun += DeathStun;

}
}
internal static event Delegates.DeathStun_BeforeArgs _beforeDeathStun;
private static System.Collections.IEnumerator DeathStun(On.CorpseDeathStun.orig_DeathStun orig,CorpseDeathStun self)
{
Delegates.Params_DeathStun @params = new() 
{
self = self
};
if (_beforeDeathStun != null)
{
foreach (Delegates.DeathStun_BeforeArgs toInvoke in _beforeDeathStun.GetInvocationList())
{
try
{
_beforeDeathStun?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookJitter()
{
if (!HookedList.Contains("Jitter"))
{
HookedList.Add("Jitter");
On.CorpseDeathStun.Jitter += Jitter;

}
}
internal static event Delegates.Jitter_BeforeArgs _beforeJitter;
private static System.Collections.IEnumerator Jitter(On.CorpseDeathStun.orig_Jitter orig,CorpseDeathStun self,  float duration)
{
Delegates.Params_Jitter @params = new() 
{
self = self
, duration = duration
};
if (_beforeJitter != null)
{
foreach (Delegates.Jitter_BeforeArgs toInvoke in _beforeJitter.GetInvocationList())
{
try
{
_beforeJitter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
duration = @params.duration;
return orig(self, duration);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public CorpseDeathStun self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<CorpseDeathStun> orig, CorpseDeathStun self);
public sealed class Params_DeathStun
{
public CorpseDeathStun self;
}
public delegate void DeathStun_BeforeArgs(Params_DeathStun args);
public delegate System.Collections.IEnumerator DeathStun_AfterArgs(Params_DeathStun args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator DeathStun_WithArgs (Func<CorpseDeathStun, System.Collections.IEnumerator> orig, CorpseDeathStun self);
public sealed class Params_Jitter
{
public CorpseDeathStun self;
public float duration;
}
public delegate void Jitter_BeforeArgs(Params_Jitter args);
public delegate System.Collections.IEnumerator Jitter_AfterArgs(Params_Jitter args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Jitter_WithArgs (Func<CorpseDeathStun,  float, System.Collections.IEnumerator> orig, CorpseDeathStun self,  float duration);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.DeathStun_BeforeArgs DeathStun
{
add
{

HookHandler._beforeDeathStun += value;
HookHandler.HookDeathStun();
}
remove => HookHandler._beforeDeathStun -= value;
}
public static event Delegates.Jitter_BeforeArgs Jitter
{
add
{

HookHandler._beforeJitter += value;
HookHandler.HookJitter();
}
remove => HookHandler._beforeJitter -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CorpseDeathStun.hook_Start Start
{
add => On.CorpseDeathStun.Start += value;
remove => On.CorpseDeathStun.Start -= value;
}
public static event On.CorpseDeathStun.hook_DeathStun DeathStun
{
add => On.CorpseDeathStun.DeathStun += value;
remove => On.CorpseDeathStun.DeathStun -= value;
}
public static event On.CorpseDeathStun.hook_Jitter Jitter
{
add => On.CorpseDeathStun.Jitter += value;
remove => On.CorpseDeathStun.Jitter -= value;
}
}

}
