using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for SpellGetOrb class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSpellGetOrb
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.SpellGetOrb.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.SpellGetOrb.orig_Start orig,SpellGetOrb self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.SpellGetOrb.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.SpellGetOrb.orig_OnEnable orig,SpellGetOrb self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.SpellGetOrb.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.SpellGetOrb.orig_Update orig,SpellGetOrb self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFaceAngle()
{
if (!HookedList.Contains("FaceAngle"))
{
HookedList.Add("FaceAngle");
On.SpellGetOrb.FaceAngle += FaceAngle;

}
}
internal static event Delegates.FaceAngle_BeforeArgs _beforeFaceAngle;
internal static event Delegates.FaceAngle_AfterArgs _afterFaceAngle;
private static void FaceAngle(On.SpellGetOrb.orig_FaceAngle orig,SpellGetOrb self)
{
Delegates.Params_FaceAngle @params = new() 
{
self = self
};
if (_beforeFaceAngle != null)
{
foreach (Delegates.FaceAngle_BeforeArgs toInvoke in _beforeFaceAngle.GetInvocationList())
{
try
{
_beforeFaceAngle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFaceAngle != null)
{
foreach (Delegates.FaceAngle_AfterArgs toInvoke in _afterFaceAngle.GetInvocationList())
{
try
{
_afterFaceAngle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookProjectileSquash()
{
if (!HookedList.Contains("ProjectileSquash"))
{
HookedList.Add("ProjectileSquash");
On.SpellGetOrb.ProjectileSquash += ProjectileSquash;

}
}
internal static event Delegates.ProjectileSquash_BeforeArgs _beforeProjectileSquash;
internal static event Delegates.ProjectileSquash_AfterArgs _afterProjectileSquash;
private static void ProjectileSquash(On.SpellGetOrb.orig_ProjectileSquash orig,SpellGetOrb self)
{
Delegates.Params_ProjectileSquash @params = new() 
{
self = self
};
if (_beforeProjectileSquash != null)
{
foreach (Delegates.ProjectileSquash_BeforeArgs toInvoke in _beforeProjectileSquash.GetInvocationList())
{
try
{
_beforeProjectileSquash?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterProjectileSquash != null)
{
foreach (Delegates.ProjectileSquash_AfterArgs toInvoke in _afterProjectileSquash.GetInvocationList())
{
try
{
_afterProjectileSquash.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCollect()
{
if (!HookedList.Contains("Collect"))
{
HookedList.Add("Collect");
On.SpellGetOrb.Collect += Collect;

}
}
internal static event Delegates.Collect_BeforeArgs _beforeCollect;
internal static event Delegates.Collect_AfterArgs _afterCollect;
private static void Collect(On.SpellGetOrb.orig_Collect orig,SpellGetOrb self)
{
Delegates.Params_Collect @params = new() 
{
self = self
};
if (_beforeCollect != null)
{
foreach (Delegates.Collect_BeforeArgs toInvoke in _beforeCollect.GetInvocationList())
{
try
{
_beforeCollect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCollect != null)
{
foreach (Delegates.Collect_AfterArgs toInvoke in _afterCollect.GetInvocationList())
{
try
{
_afterCollect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public SpellGetOrb self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<SpellGetOrb> orig, SpellGetOrb self);
public sealed class Params_OnEnable
{
public SpellGetOrb self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<SpellGetOrb> orig, SpellGetOrb self);
public sealed class Params_Update
{
public SpellGetOrb self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<SpellGetOrb> orig, SpellGetOrb self);
public sealed class Params_FaceAngle
{
public SpellGetOrb self;
}
public delegate void FaceAngle_BeforeArgs(Params_FaceAngle args);
public delegate void FaceAngle_AfterArgs(Params_FaceAngle args);
public delegate void FaceAngle_WithArgs (Action<SpellGetOrb> orig, SpellGetOrb self);
public sealed class Params_ProjectileSquash
{
public SpellGetOrb self;
}
public delegate void ProjectileSquash_BeforeArgs(Params_ProjectileSquash args);
public delegate void ProjectileSquash_AfterArgs(Params_ProjectileSquash args);
public delegate void ProjectileSquash_WithArgs (Action<SpellGetOrb> orig, SpellGetOrb self);
public sealed class Params_Collect
{
public SpellGetOrb self;
}
public delegate void Collect_BeforeArgs(Params_Collect args);
public delegate void Collect_AfterArgs(Params_Collect args);
public delegate void Collect_WithArgs (Action<SpellGetOrb> orig, SpellGetOrb self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.FaceAngle_BeforeArgs FaceAngle
{
add
{

HookHandler._beforeFaceAngle += value;
HookHandler.HookFaceAngle();
}
remove => HookHandler._beforeFaceAngle -= value;
}
public static event Delegates.ProjectileSquash_BeforeArgs ProjectileSquash
{
add
{

HookHandler._beforeProjectileSquash += value;
HookHandler.HookProjectileSquash();
}
remove => HookHandler._beforeProjectileSquash -= value;
}
public static event Delegates.Collect_BeforeArgs Collect
{
add
{

HookHandler._beforeCollect += value;
HookHandler.HookCollect();
}
remove => HookHandler._beforeCollect -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.FaceAngle_AfterArgs FaceAngle
{
add
{

HookHandler._afterFaceAngle += value;
HookHandler.HookFaceAngle();
}
remove => HookHandler._afterFaceAngle -= value;
}
public static event Delegates.ProjectileSquash_AfterArgs ProjectileSquash
{
add
{

HookHandler._afterProjectileSquash += value;
HookHandler.HookProjectileSquash();
}
remove => HookHandler._afterProjectileSquash -= value;
}
public static event Delegates.Collect_AfterArgs Collect
{
add
{

HookHandler._afterCollect += value;
HookHandler.HookCollect();
}
remove => HookHandler._afterCollect -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.SpellGetOrb.hook_Start Start
{
add => On.SpellGetOrb.Start += value;
remove => On.SpellGetOrb.Start -= value;
}
public static event On.SpellGetOrb.hook_OnEnable OnEnable
{
add => On.SpellGetOrb.OnEnable += value;
remove => On.SpellGetOrb.OnEnable -= value;
}
public static event On.SpellGetOrb.hook_Update Update
{
add => On.SpellGetOrb.Update += value;
remove => On.SpellGetOrb.Update -= value;
}
public static event On.SpellGetOrb.hook_FaceAngle FaceAngle
{
add => On.SpellGetOrb.FaceAngle += value;
remove => On.SpellGetOrb.FaceAngle -= value;
}
public static event On.SpellGetOrb.hook_ProjectileSquash ProjectileSquash
{
add => On.SpellGetOrb.ProjectileSquash += value;
remove => On.SpellGetOrb.ProjectileSquash -= value;
}
public static event On.SpellGetOrb.hook_Collect Collect
{
add => On.SpellGetOrb.Collect += value;
remove => On.SpellGetOrb.Collect -= value;
}
}

}
