using Modding.Patches;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuSelectableExt class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuSelectableExt
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetDynamicMenuCancel()
        {
            if (!HookedList.Contains("SetDynamicMenuCancel"))
            {
                HookedList.Add("SetDynamicMenuCancel");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuSelectableExt), "SetDynamicMenuCancel", false),
                    SetDynamicMenuCancel);
            }
        }

        internal static event Delegates.SetDynamicMenuCancel_BeforeArgs _beforeSetDynamicMenuCancel;
        internal static event Delegates.SetDynamicMenuCancel_AfterArgs _afterSetDynamicMenuCancel;

        private static void SetDynamicMenuCancel(Action<MenuSelectable, MenuScreen> orig, MenuSelectable ms,
            MenuScreen to)
        {
            Delegates.Params_SetDynamicMenuCancel @params = new()
            {
                ms = ms, to = to
            };
            if (_beforeSetDynamicMenuCancel != null)
                foreach (Delegates.SetDynamicMenuCancel_BeforeArgs toInvoke in _beforeSetDynamicMenuCancel
                             .GetInvocationList())
                    try
                    {
                        _beforeSetDynamicMenuCancel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            ms = @params.ms;
            to = @params.to;
            orig(ms, to);
            if (_afterSetDynamicMenuCancel != null)
                foreach (Delegates.SetDynamicMenuCancel_AfterArgs toInvoke in _afterSetDynamicMenuCancel
                             .GetInvocationList())
                    try
                    {
                        _afterSetDynamicMenuCancel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void SetDynamicMenuCancel_AfterArgs(Params_SetDynamicMenuCancel args);

        public delegate void SetDynamicMenuCancel_BeforeArgs(Params_SetDynamicMenuCancel args);

        public delegate void SetDynamicMenuCancel_WithArgs(Action<MenuSelectable, MenuScreen> orig, MenuSelectable ms,
            MenuScreen to);

        public sealed class Params_SetDynamicMenuCancel
        {
            public MenuSelectable ms;
            public MenuScreen to;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetDynamicMenuCancel_BeforeArgs SetDynamicMenuCancel
        {
            add
            {
                HookHandler._beforeSetDynamicMenuCancel += value;
                HookHandler.HookSetDynamicMenuCancel();
            }
            remove => HookHandler._beforeSetDynamicMenuCancel -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetDynamicMenuCancel_AfterArgs SetDynamicMenuCancel
        {
            add
            {
                HookHandler._afterSetDynamicMenuCancel += value;
                HookHandler.HookSetDynamicMenuCancel();
            }
            remove => HookHandler._afterSetDynamicMenuCancel -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.SetDynamicMenuCancel_WithArgs SetDynamicMenuCancel
        {
            add => HookEndpointManager.Add<Delegates.SetDynamicMenuCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectableExt), "SetDynamicMenuCancel", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetDynamicMenuCancel_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuSelectableExt), "SetDynamicMenuCancel", false), value);
        }
    }
}