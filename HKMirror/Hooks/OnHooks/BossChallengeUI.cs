namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossChallengeUI class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossChallengeUI
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BossChallengeUI.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BossChallengeUI.orig_Awake orig, BossChallengeUI self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BossChallengeUI.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BossChallengeUI.orig_Start orig, BossChallengeUI self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.BossChallengeUI.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.BossChallengeUI.orig_Setup orig, BossChallengeUI self, BossStatue bossStatue,
            string bossNameSheet, string bossNameKey, string descriptionSheet, string descriptionKey)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self, bossStatue = bossStatue, bossNameSheet = bossNameSheet, bossNameKey = bossNameKey,
                descriptionSheet = descriptionSheet, descriptionKey = descriptionKey
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            bossStatue = @params.bossStatue;
            bossNameSheet = @params.bossNameSheet;
            bossNameKey = @params.bossNameKey;
            descriptionSheet = @params.descriptionSheet;
            descriptionKey = @params.descriptionKey;
            orig(self, bossStatue, bossNameSheet, bossNameKey, descriptionSheet, descriptionKey);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookShowUnlockEffect()
        {
            if (!HookedList.Contains("ShowUnlockEffect"))
            {
                HookedList.Add("ShowUnlockEffect");
                On.BossChallengeUI.ShowUnlockEffect += ShowUnlockEffect;
            }
        }

        internal static event Delegates.ShowUnlockEffect_BeforeArgs _beforeShowUnlockEffect;

        private static IEnumerator ShowUnlockEffect(On.BossChallengeUI.orig_ShowUnlockEffect orig, BossChallengeUI self)
        {
            Delegates.Params_ShowUnlockEffect @params = new()
            {
                self = self
            };
            _beforeShowUnlockEffect?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookSetFirstSelected()
        {
            if (!HookedList.Contains("SetFirstSelected"))
            {
                HookedList.Add("SetFirstSelected");
                On.BossChallengeUI.SetFirstSelected += SetFirstSelected;
            }
        }

        internal static event Delegates.SetFirstSelected_BeforeArgs _beforeSetFirstSelected;

        private static IEnumerator SetFirstSelected(On.BossChallengeUI.orig_SetFirstSelected orig, BossChallengeUI self)
        {
            Delegates.Params_SetFirstSelected @params = new()
            {
                self = self
            };
            _beforeSetFirstSelected?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookHide()
        {
            if (!HookedList.Contains("Hide"))
            {
                HookedList.Add("Hide");
                On.BossChallengeUI.Hide += Hide;
            }
        }

        internal static event Delegates.Hide_BeforeArgs _beforeHide;
        internal static event Delegates.Hide_NormalArgs _afterHide;

        private static void Hide(On.BossChallengeUI.orig_Hide orig, BossChallengeUI self)
        {
            Delegates.Params_Hide @params = new()
            {
                self = self
            };
            _beforeHide?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHide != null) _afterHide.Invoke(@params);
        }

        internal static void HookHide_bool()
        {
            if (!HookedList.Contains("Hide_bool"))
            {
                HookedList.Add("Hide_bool");
                On.BossChallengeUI.Hide_bool += Hide_bool;
            }
        }

        internal static event Delegates.Hide_bool_BeforeArgs _beforeHide_bool;
        internal static event Delegates.Hide_bool_NormalArgs _afterHide_bool;

        private static void Hide_bool(On.BossChallengeUI.orig_Hide_bool orig, BossChallengeUI self, bool doAnim)
        {
            Delegates.Params_Hide_bool @params = new()
            {
                self = self, doAnim = doAnim
            };
            _beforeHide_bool?.Invoke(@params);
            self = @params.self;
            doAnim = @params.doAnim;
            orig(self, doAnim);
            if (_afterHide_bool != null) _afterHide_bool.Invoke(@params);
        }

        internal static void HookHideAnim()
        {
            if (!HookedList.Contains("HideAnim"))
            {
                HookedList.Add("HideAnim");
                On.BossChallengeUI.HideAnim += HideAnim;
            }
        }

        internal static event Delegates.HideAnim_BeforeArgs _beforeHideAnim;

        private static IEnumerator HideAnim(On.BossChallengeUI.orig_HideAnim orig, BossChallengeUI self)
        {
            Delegates.Params_HideAnim @params = new()
            {
                self = self
            };
            _beforeHideAnim?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookLoadBoss_int()
        {
            if (!HookedList.Contains("LoadBoss_int"))
            {
                HookedList.Add("LoadBoss_int");
                On.BossChallengeUI.LoadBoss_int += LoadBoss_int;
            }
        }

        internal static event Delegates.LoadBoss_int_BeforeArgs _beforeLoadBoss_int;
        internal static event Delegates.LoadBoss_int_NormalArgs _afterLoadBoss_int;

        private static void LoadBoss_int(On.BossChallengeUI.orig_LoadBoss_int orig, BossChallengeUI self, int level)
        {
            Delegates.Params_LoadBoss_int @params = new()
            {
                self = self, level = level
            };
            _beforeLoadBoss_int?.Invoke(@params);
            self = @params.self;
            level = @params.level;
            orig(self, level);
            if (_afterLoadBoss_int != null) _afterLoadBoss_int.Invoke(@params);
        }

        internal static void HookLoadBoss_int_bool()
        {
            if (!HookedList.Contains("LoadBoss_int_bool"))
            {
                HookedList.Add("LoadBoss_int_bool");
                On.BossChallengeUI.LoadBoss_int_bool += LoadBoss_int_bool;
            }
        }

        internal static event Delegates.LoadBoss_int_bool_BeforeArgs _beforeLoadBoss_int_bool;
        internal static event Delegates.LoadBoss_int_bool_NormalArgs _afterLoadBoss_int_bool;

        private static void LoadBoss_int_bool(On.BossChallengeUI.orig_LoadBoss_int_bool orig, BossChallengeUI self,
            int level, bool doHideAnim)
        {
            Delegates.Params_LoadBoss_int_bool @params = new()
            {
                self = self, level = level, doHideAnim = doHideAnim
            };
            _beforeLoadBoss_int_bool?.Invoke(@params);
            self = @params.self;
            level = @params.level;
            doHideAnim = @params.doHideAnim;
            orig(self, level, doHideAnim);
            if (_afterLoadBoss_int_bool != null) _afterLoadBoss_int_bool.Invoke(@params);
        }

        internal static void HookRecordLastSelected()
        {
            if (!HookedList.Contains("RecordLastSelected"))
            {
                HookedList.Add("RecordLastSelected");
                On.BossChallengeUI.RecordLastSelected += RecordLastSelected;
            }
        }

        internal static event Delegates.RecordLastSelected_BeforeArgs _beforeRecordLastSelected;
        internal static event Delegates.RecordLastSelected_NormalArgs _afterRecordLastSelected;

        private static void RecordLastSelected(On.BossChallengeUI.orig_RecordLastSelected orig, BossChallengeUI self,
            int index)
        {
            Delegates.Params_RecordLastSelected @params = new()
            {
                self = self, index = index
            };
            _beforeRecordLastSelected?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            orig(self, index);
            if (_afterRecordLastSelected != null) _afterRecordLastSelected.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Hide_BeforeArgs(Params_Hide args);

        public delegate void Hide_bool_BeforeArgs(Params_Hide_bool args);

        public delegate void Hide_bool_NormalArgs(Params_Hide_bool args);

        public delegate void Hide_NormalArgs(Params_Hide args);

        public delegate void HideAnim_BeforeArgs(Params_HideAnim args);

        public delegate IEnumerator HideAnim_NormalArgs(Params_HideAnim args);

        public delegate void LoadBoss_int_BeforeArgs(Params_LoadBoss_int args);

        public delegate void LoadBoss_int_bool_BeforeArgs(Params_LoadBoss_int_bool args);

        public delegate void LoadBoss_int_bool_NormalArgs(Params_LoadBoss_int_bool args);

        public delegate void LoadBoss_int_NormalArgs(Params_LoadBoss_int args);

        public delegate void RecordLastSelected_BeforeArgs(Params_RecordLastSelected args);

        public delegate void RecordLastSelected_NormalArgs(Params_RecordLastSelected args);

        public delegate void SetFirstSelected_BeforeArgs(Params_SetFirstSelected args);

        public delegate IEnumerator SetFirstSelected_NormalArgs(Params_SetFirstSelected args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void ShowUnlockEffect_BeforeArgs(Params_ShowUnlockEffect args);

        public delegate IEnumerator ShowUnlockEffect_NormalArgs(Params_ShowUnlockEffect args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public BossChallengeUI self;
        }

        public sealed class Params_Start
        {
            public BossChallengeUI self;
        }

        public sealed class Params_Setup
        {
            public string bossNameKey;
            public string bossNameSheet;
            public BossStatue bossStatue;
            public string descriptionKey;
            public string descriptionSheet;
            public BossChallengeUI self;
        }

        public sealed class Params_ShowUnlockEffect
        {
            public BossChallengeUI self;
        }

        public sealed class Params_SetFirstSelected
        {
            public BossChallengeUI self;
        }

        public sealed class Params_Hide
        {
            public BossChallengeUI self;
        }

        public sealed class Params_Hide_bool
        {
            public bool doAnim;
            public BossChallengeUI self;
        }

        public sealed class Params_HideAnim
        {
            public BossChallengeUI self;
        }

        public sealed class Params_LoadBoss_int
        {
            public int level;
            public BossChallengeUI self;
        }

        public sealed class Params_LoadBoss_int_bool
        {
            public bool doHideAnim;
            public int level;
            public BossChallengeUI self;
        }

        public sealed class Params_RecordLastSelected
        {
            public int index;
            public BossChallengeUI self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.ShowUnlockEffect_BeforeArgs ShowUnlockEffect
        {
            add
            {
                HookHandler._beforeShowUnlockEffect += value;
                HookHandler.HookShowUnlockEffect();
            }
            remove => HookHandler._beforeShowUnlockEffect -= value;
        }

        public static event Delegates.SetFirstSelected_BeforeArgs SetFirstSelected
        {
            add
            {
                HookHandler._beforeSetFirstSelected += value;
                HookHandler.HookSetFirstSelected();
            }
            remove => HookHandler._beforeSetFirstSelected -= value;
        }

        public static event Delegates.Hide_BeforeArgs Hide
        {
            add
            {
                HookHandler._beforeHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._beforeHide -= value;
        }

        public static event Delegates.Hide_bool_BeforeArgs Hide_bool
        {
            add
            {
                HookHandler._beforeHide_bool += value;
                HookHandler.HookHide_bool();
            }
            remove => HookHandler._beforeHide_bool -= value;
        }

        public static event Delegates.HideAnim_BeforeArgs HideAnim
        {
            add
            {
                HookHandler._beforeHideAnim += value;
                HookHandler.HookHideAnim();
            }
            remove => HookHandler._beforeHideAnim -= value;
        }

        public static event Delegates.LoadBoss_int_BeforeArgs LoadBoss_int
        {
            add
            {
                HookHandler._beforeLoadBoss_int += value;
                HookHandler.HookLoadBoss_int();
            }
            remove => HookHandler._beforeLoadBoss_int -= value;
        }

        public static event Delegates.LoadBoss_int_bool_BeforeArgs LoadBoss_int_bool
        {
            add
            {
                HookHandler._beforeLoadBoss_int_bool += value;
                HookHandler.HookLoadBoss_int_bool();
            }
            remove => HookHandler._beforeLoadBoss_int_bool -= value;
        }

        public static event Delegates.RecordLastSelected_BeforeArgs RecordLastSelected
        {
            add
            {
                HookHandler._beforeRecordLastSelected += value;
                HookHandler.HookRecordLastSelected();
            }
            remove => HookHandler._beforeRecordLastSelected -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.Hide_NormalArgs Hide
        {
            add
            {
                HookHandler._afterHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._afterHide -= value;
        }

        public static event Delegates.Hide_bool_NormalArgs Hide_bool
        {
            add
            {
                HookHandler._afterHide_bool += value;
                HookHandler.HookHide_bool();
            }
            remove => HookHandler._afterHide_bool -= value;
        }

        public static event Delegates.LoadBoss_int_NormalArgs LoadBoss_int
        {
            add
            {
                HookHandler._afterLoadBoss_int += value;
                HookHandler.HookLoadBoss_int();
            }
            remove => HookHandler._afterLoadBoss_int -= value;
        }

        public static event Delegates.LoadBoss_int_bool_NormalArgs LoadBoss_int_bool
        {
            add
            {
                HookHandler._afterLoadBoss_int_bool += value;
                HookHandler.HookLoadBoss_int_bool();
            }
            remove => HookHandler._afterLoadBoss_int_bool -= value;
        }

        public static event Delegates.RecordLastSelected_NormalArgs RecordLastSelected
        {
            add
            {
                HookHandler._afterRecordLastSelected += value;
                HookHandler.HookRecordLastSelected();
            }
            remove => HookHandler._afterRecordLastSelected -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BossChallengeUI.hook_Awake Awake
        {
            add => On.BossChallengeUI.Awake += value;
            remove => On.BossChallengeUI.Awake -= value;
        }

        public static event On.BossChallengeUI.hook_Start Start
        {
            add => On.BossChallengeUI.Start += value;
            remove => On.BossChallengeUI.Start -= value;
        }

        public static event On.BossChallengeUI.hook_Setup Setup
        {
            add => On.BossChallengeUI.Setup += value;
            remove => On.BossChallengeUI.Setup -= value;
        }

        public static event On.BossChallengeUI.hook_ShowUnlockEffect ShowUnlockEffect
        {
            add => On.BossChallengeUI.ShowUnlockEffect += value;
            remove => On.BossChallengeUI.ShowUnlockEffect -= value;
        }

        public static event On.BossChallengeUI.hook_SetFirstSelected SetFirstSelected
        {
            add => On.BossChallengeUI.SetFirstSelected += value;
            remove => On.BossChallengeUI.SetFirstSelected -= value;
        }

        public static event On.BossChallengeUI.hook_Hide Hide
        {
            add => On.BossChallengeUI.Hide += value;
            remove => On.BossChallengeUI.Hide -= value;
        }

        public static event On.BossChallengeUI.hook_Hide_bool Hide_bool
        {
            add => On.BossChallengeUI.Hide_bool += value;
            remove => On.BossChallengeUI.Hide_bool -= value;
        }

        public static event On.BossChallengeUI.hook_HideAnim HideAnim
        {
            add => On.BossChallengeUI.HideAnim += value;
            remove => On.BossChallengeUI.HideAnim -= value;
        }

        public static event On.BossChallengeUI.hook_LoadBoss_int LoadBoss_int
        {
            add => On.BossChallengeUI.LoadBoss_int += value;
            remove => On.BossChallengeUI.LoadBoss_int -= value;
        }

        public static event On.BossChallengeUI.hook_LoadBoss_int_bool LoadBoss_int_bool
        {
            add => On.BossChallengeUI.LoadBoss_int_bool += value;
            remove => On.BossChallengeUI.LoadBoss_int_bool -= value;
        }

        public static event On.BossChallengeUI.hook_RecordLastSelected RecordLastSelected
        {
            add => On.BossChallengeUI.RecordLastSelected += value;
            remove => On.BossChallengeUI.RecordLastSelected -= value;
        }
    }
}