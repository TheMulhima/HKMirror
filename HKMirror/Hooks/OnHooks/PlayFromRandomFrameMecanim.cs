namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayFromRandomFrameMecanim class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayFromRandomFrameMecanim
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PlayFromRandomFrameMecanim.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.PlayFromRandomFrameMecanim.orig_Awake orig, PlayFromRandomFrameMecanim self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PlayFromRandomFrameMecanim.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.PlayFromRandomFrameMecanim.orig_Start orig, PlayFromRandomFrameMecanim self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PlayFromRandomFrameMecanim.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.PlayFromRandomFrameMecanim.orig_OnEnable orig, PlayFromRandomFrameMecanim self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookDoPlay()
        {
            if (!HookedList.Contains("DoPlay"))
            {
                HookedList.Add("DoPlay");
                On.PlayFromRandomFrameMecanim.DoPlay += DoPlay;
            }
        }

        internal static event Delegates.DoPlay_BeforeArgs _beforeDoPlay;
        internal static event Delegates.DoPlay_NormalArgs _afterDoPlay;

        private static void DoPlay(On.PlayFromRandomFrameMecanim.orig_DoPlay orig, PlayFromRandomFrameMecanim self)
        {
            Delegates.Params_DoPlay @params = new()
            {
                self = self
            };
            _beforeDoPlay?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoPlay != null) _afterDoPlay.Invoke(@params);
        }

        internal static void HookDelayStart()
        {
            if (!HookedList.Contains("DelayStart"))
            {
                HookedList.Add("DelayStart");
                On.PlayFromRandomFrameMecanim.DelayStart += DelayStart;
            }
        }

        internal static event Delegates.DelayStart_BeforeArgs _beforeDelayStart;

        private static IEnumerator DelayStart(On.PlayFromRandomFrameMecanim.orig_DelayStart orig,
            PlayFromRandomFrameMecanim self)
        {
            Delegates.Params_DelayStart @params = new()
            {
                self = self
            };
            _beforeDelayStart?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void DelayStart_BeforeArgs(Params_DelayStart args);

        public delegate IEnumerator DelayStart_NormalArgs(Params_DelayStart args);

        public delegate void DoPlay_BeforeArgs(Params_DoPlay args);

        public delegate void DoPlay_NormalArgs(Params_DoPlay args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public PlayFromRandomFrameMecanim self;
        }

        public sealed class Params_Start
        {
            public PlayFromRandomFrameMecanim self;
        }

        public sealed class Params_OnEnable
        {
            public PlayFromRandomFrameMecanim self;
        }

        public sealed class Params_DoPlay
        {
            public PlayFromRandomFrameMecanim self;
        }

        public sealed class Params_DelayStart
        {
            public PlayFromRandomFrameMecanim self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.DoPlay_BeforeArgs DoPlay
        {
            add
            {
                HookHandler._beforeDoPlay += value;
                HookHandler.HookDoPlay();
            }
            remove => HookHandler._beforeDoPlay -= value;
        }

        public static event Delegates.DelayStart_BeforeArgs DelayStart
        {
            add
            {
                HookHandler._beforeDelayStart += value;
                HookHandler.HookDelayStart();
            }
            remove => HookHandler._beforeDelayStart -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.DoPlay_NormalArgs DoPlay
        {
            add
            {
                HookHandler._afterDoPlay += value;
                HookHandler.HookDoPlay();
            }
            remove => HookHandler._afterDoPlay -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayFromRandomFrameMecanim.hook_Awake Awake
        {
            add => On.PlayFromRandomFrameMecanim.Awake += value;
            remove => On.PlayFromRandomFrameMecanim.Awake -= value;
        }

        public static event On.PlayFromRandomFrameMecanim.hook_Start Start
        {
            add => On.PlayFromRandomFrameMecanim.Start += value;
            remove => On.PlayFromRandomFrameMecanim.Start -= value;
        }

        public static event On.PlayFromRandomFrameMecanim.hook_OnEnable OnEnable
        {
            add => On.PlayFromRandomFrameMecanim.OnEnable += value;
            remove => On.PlayFromRandomFrameMecanim.OnEnable -= value;
        }

        public static event On.PlayFromRandomFrameMecanim.hook_DoPlay DoPlay
        {
            add => On.PlayFromRandomFrameMecanim.DoPlay += value;
            remove => On.PlayFromRandomFrameMecanim.DoPlay -= value;
        }

        public static event On.PlayFromRandomFrameMecanim.hook_DelayStart DelayStart
        {
            add => On.PlayFromRandomFrameMecanim.DelayStart += value;
            remove => On.PlayFromRandomFrameMecanim.DelayStart -= value;
        }
    }
}