using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MusicCue_MusicChannelInfo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMusicCue_MusicChannelInfo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Clip()
        {
            if (!HookedList.Contains("get_Clip"))
            {
                HookedList.Add("get_Clip");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_Clip"), get_Clip);
            }
        }

        internal static event Delegates.get_Clip_BeforeArgs _beforeget_Clip;
        internal static event Delegates.get_Clip_AfterArgs _afterget_Clip;

        private static AudioClip get_Clip(Func<MusicCue.MusicChannelInfo, AudioClip> orig,
            MusicCue.MusicChannelInfo self)
        {
            Delegates.Params_get_Clip @params = new()
            {
                self = self
            };
            if (_beforeget_Clip != null)
                foreach (Delegates.get_Clip_BeforeArgs toInvoke in _beforeget_Clip.GetInvocationList())
                    try
                    {
                        _beforeget_Clip?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Clip != null)
                foreach (Delegates.get_Clip_AfterArgs toInvoke in _afterget_Clip.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Clip.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsEnabled()
        {
            if (!HookedList.Contains("get_IsEnabled"))
            {
                HookedList.Add("get_IsEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_IsEnabled"),
                    get_IsEnabled);
            }
        }

        internal static event Delegates.get_IsEnabled_BeforeArgs _beforeget_IsEnabled;
        internal static event Delegates.get_IsEnabled_AfterArgs _afterget_IsEnabled;

        private static bool get_IsEnabled(Func<MusicCue.MusicChannelInfo, bool> orig, MusicCue.MusicChannelInfo self)
        {
            Delegates.Params_get_IsEnabled @params = new()
            {
                self = self
            };
            if (_beforeget_IsEnabled != null)
                foreach (Delegates.get_IsEnabled_BeforeArgs toInvoke in _beforeget_IsEnabled.GetInvocationList())
                    try
                    {
                        _beforeget_IsEnabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsEnabled != null)
                foreach (Delegates.get_IsEnabled_AfterArgs toInvoke in _afterget_IsEnabled.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsEnabled.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsSyncRequired()
        {
            if (!HookedList.Contains("get_IsSyncRequired"))
            {
                HookedList.Add("get_IsSyncRequired");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_IsSyncRequired"),
                    get_IsSyncRequired);
            }
        }

        internal static event Delegates.get_IsSyncRequired_BeforeArgs _beforeget_IsSyncRequired;
        internal static event Delegates.get_IsSyncRequired_AfterArgs _afterget_IsSyncRequired;

        private static bool get_IsSyncRequired(Func<MusicCue.MusicChannelInfo, bool> orig,
            MusicCue.MusicChannelInfo self)
        {
            Delegates.Params_get_IsSyncRequired @params = new()
            {
                self = self
            };
            if (_beforeget_IsSyncRequired != null)
                foreach (Delegates.get_IsSyncRequired_BeforeArgs toInvoke in
                         _beforeget_IsSyncRequired.GetInvocationList())
                    try
                    {
                        _beforeget_IsSyncRequired?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSyncRequired != null)
                foreach (Delegates.get_IsSyncRequired_AfterArgs toInvoke in
                         _afterget_IsSyncRequired.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsSyncRequired.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate AudioClip get_Clip_AfterArgs(Params_get_Clip args, AudioClip ret);

        public delegate void get_Clip_BeforeArgs(Params_get_Clip args);

        public delegate AudioClip get_Clip_WithArgs(Func<MusicCue.MusicChannelInfo, AudioClip> orig,
            MusicCue.MusicChannelInfo self);

        public delegate bool get_IsEnabled_AfterArgs(Params_get_IsEnabled args, bool ret);

        public delegate void get_IsEnabled_BeforeArgs(Params_get_IsEnabled args);

        public delegate bool get_IsEnabled_WithArgs(Func<MusicCue.MusicChannelInfo, bool> orig,
            MusicCue.MusicChannelInfo self);

        public delegate bool get_IsSyncRequired_AfterArgs(Params_get_IsSyncRequired args, bool ret);

        public delegate void get_IsSyncRequired_BeforeArgs(Params_get_IsSyncRequired args);

        public delegate bool get_IsSyncRequired_WithArgs(Func<MusicCue.MusicChannelInfo, bool> orig,
            MusicCue.MusicChannelInfo self);

        public sealed class Params_get_Clip
        {
            public MusicCue.MusicChannelInfo self;
        }

        public sealed class Params_get_IsEnabled
        {
            public MusicCue.MusicChannelInfo self;
        }

        public sealed class Params_get_IsSyncRequired
        {
            public MusicCue.MusicChannelInfo self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Clip_BeforeArgs get_Clip
        {
            add
            {
                HookHandler._beforeget_Clip += value;
                HookHandler.Hookget_Clip();
            }
            remove => HookHandler._beforeget_Clip -= value;
        }

        public static event Delegates.get_IsEnabled_BeforeArgs get_IsEnabled
        {
            add
            {
                HookHandler._beforeget_IsEnabled += value;
                HookHandler.Hookget_IsEnabled();
            }
            remove => HookHandler._beforeget_IsEnabled -= value;
        }

        public static event Delegates.get_IsSyncRequired_BeforeArgs get_IsSyncRequired
        {
            add
            {
                HookHandler._beforeget_IsSyncRequired += value;
                HookHandler.Hookget_IsSyncRequired();
            }
            remove => HookHandler._beforeget_IsSyncRequired -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Clip_AfterArgs get_Clip
        {
            add
            {
                HookHandler._afterget_Clip += value;
                HookHandler.Hookget_Clip();
            }
            remove => HookHandler._afterget_Clip -= value;
        }

        public static event Delegates.get_IsEnabled_AfterArgs get_IsEnabled
        {
            add
            {
                HookHandler._afterget_IsEnabled += value;
                HookHandler.Hookget_IsEnabled();
            }
            remove => HookHandler._afterget_IsEnabled -= value;
        }

        public static event Delegates.get_IsSyncRequired_AfterArgs get_IsSyncRequired
        {
            add
            {
                HookHandler._afterget_IsSyncRequired += value;
                HookHandler.Hookget_IsSyncRequired();
            }
            remove => HookHandler._afterget_IsSyncRequired -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Clip_WithArgs get_Clip
        {
            add => HookEndpointManager.Add<Delegates.get_Clip_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_Clip"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Clip_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_Clip"), value);
        }

        public static event Delegates.get_IsEnabled_WithArgs get_IsEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_IsEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_IsEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_IsEnabled"), value);
        }

        public static event Delegates.get_IsSyncRequired_WithArgs get_IsSyncRequired
        {
            add => HookEndpointManager.Add<Delegates.get_IsSyncRequired_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_IsSyncRequired"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSyncRequired_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MusicCue.MusicChannelInfo), "get_IsSyncRequired"), value);
        }
    }
}