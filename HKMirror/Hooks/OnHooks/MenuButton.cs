using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "Start"), Start);
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(Action<MenuButton> orig, MenuButton self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;

        private static void OnSubmit(Action<MenuButton, BaseEventData> orig, MenuButton self, BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSubmit != null)
                foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
                    try
                    {
                        _beforeOnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null)
                foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
                    try
                    {
                        _afterOnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuButton, PointerEventData> orig, MenuButton self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_submitAction()
        {
            if (!HookedList.Contains("get_submitAction"))
            {
                HookedList.Add("get_submitAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "get_submitAction"), get_submitAction);
            }
        }

        internal static event Delegates.get_submitAction_BeforeArgs _beforeget_submitAction;
        internal static event Delegates.get_submitAction_AfterArgs _afterget_submitAction;

        private static Action<MenuButton> get_submitAction(Func<MenuButton, Action<MenuButton>> orig, MenuButton self)
        {
            Delegates.Params_get_submitAction @params = new()
            {
                self = self
            };
            if (_beforeget_submitAction != null)
                foreach (Delegates.get_submitAction_BeforeArgs toInvoke in _beforeget_submitAction.GetInvocationList())
                    try
                    {
                        _beforeget_submitAction?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_submitAction != null)
                foreach (Delegates.get_submitAction_AfterArgs toInvoke in _afterget_submitAction.GetInvocationList())
                    try
                    {
                        retVal = _afterget_submitAction.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_submitAction()
        {
            if (!HookedList.Contains("set_submitAction"))
            {
                HookedList.Add("set_submitAction");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "set_submitAction"), set_submitAction);
            }
        }

        internal static event Delegates.set_submitAction_BeforeArgs _beforeset_submitAction;
        internal static event Delegates.set_submitAction_AfterArgs _afterset_submitAction;

        private static void set_submitAction(Action<MenuButton, Action<MenuButton>> orig, MenuButton self,
            Action<MenuButton> value)
        {
            Delegates.Params_set_submitAction @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_submitAction != null)
                foreach (Delegates.set_submitAction_BeforeArgs toInvoke in _beforeset_submitAction.GetInvocationList())
                    try
                    {
                        _beforeset_submitAction?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_submitAction != null)
                foreach (Delegates.set_submitAction_AfterArgs toInvoke in _afterset_submitAction.GetInvocationList())
                    try
                    {
                        _afterset_submitAction.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_proceed()
        {
            if (!HookedList.Contains("get_proceed"))
            {
                HookedList.Add("get_proceed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "get_proceed"), get_proceed);
            }
        }

        internal static event Delegates.get_proceed_BeforeArgs _beforeget_proceed;
        internal static event Delegates.get_proceed_AfterArgs _afterget_proceed;

        private static bool get_proceed(Func<MenuButton, bool> orig, MenuButton self)
        {
            Delegates.Params_get_proceed @params = new()
            {
                self = self
            };
            if (_beforeget_proceed != null)
                foreach (Delegates.get_proceed_BeforeArgs toInvoke in _beforeget_proceed.GetInvocationList())
                    try
                    {
                        _beforeget_proceed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_proceed != null)
                foreach (Delegates.get_proceed_AfterArgs toInvoke in _afterget_proceed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_proceed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_proceed()
        {
            if (!HookedList.Contains("set_proceed"))
            {
                HookedList.Add("set_proceed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "set_proceed"), set_proceed);
            }
        }

        internal static event Delegates.set_proceed_BeforeArgs _beforeset_proceed;
        internal static event Delegates.set_proceed_AfterArgs _afterset_proceed;

        private static void set_proceed(Action<MenuButton, bool> orig, MenuButton self, bool value)
        {
            Delegates.Params_set_proceed @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_proceed != null)
                foreach (Delegates.set_proceed_BeforeArgs toInvoke in _beforeset_proceed.GetInvocationList())
                    try
                    {
                        _beforeset_proceed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_proceed != null)
                foreach (Delegates.set_proceed_AfterArgs toInvoke in _afterset_proceed.GetInvocationList())
                    try
                    {
                        _afterset_proceed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_OnSubmit()
        {
            if (!HookedList.Contains("orig_OnSubmit"))
            {
                HookedList.Add("orig_OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuButton), "orig_OnSubmit"), orig_OnSubmit);
            }
        }

        internal static event Delegates.orig_OnSubmit_BeforeArgs _beforeorig_OnSubmit;
        internal static event Delegates.orig_OnSubmit_AfterArgs _afterorig_OnSubmit;

        private static void orig_OnSubmit(Action<MenuButton, BaseEventData> orig, MenuButton self,
            BaseEventData eventData)
        {
            Delegates.Params_orig_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeorig_OnSubmit != null)
                foreach (Delegates.orig_OnSubmit_BeforeArgs toInvoke in _beforeorig_OnSubmit.GetInvocationList())
                    try
                    {
                        _beforeorig_OnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterorig_OnSubmit != null)
                foreach (Delegates.orig_OnSubmit_AfterArgs toInvoke in _afterorig_OnSubmit.GetInvocationList())
                    try
                    {
                        _afterorig_OnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool get_proceed_AfterArgs(Params_get_proceed args, bool ret);

        public delegate void get_proceed_BeforeArgs(Params_get_proceed args);

        public delegate bool get_proceed_WithArgs(Func<MenuButton, bool> orig, MenuButton self);

        public delegate Action<MenuButton> get_submitAction_AfterArgs(Params_get_submitAction args,
            Action<MenuButton> ret);

        public delegate void get_submitAction_BeforeArgs(Params_get_submitAction args);

        public delegate Action<MenuButton> get_submitAction_WithArgs(Func<MenuButton, Action<MenuButton>> orig,
            MenuButton self);

        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(Action<MenuButton, PointerEventData> orig, MenuButton self,
            PointerEventData eventData);

        public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_WithArgs(Action<MenuButton, BaseEventData> orig, MenuButton self,
            BaseEventData eventData);

        public delegate void orig_OnSubmit_AfterArgs(Params_orig_OnSubmit args);

        public delegate void orig_OnSubmit_BeforeArgs(Params_orig_OnSubmit args);

        public delegate void orig_OnSubmit_WithArgs(Action<MenuButton, BaseEventData> orig, MenuButton self,
            BaseEventData eventData);

        public delegate void set_proceed_AfterArgs(Params_set_proceed args);

        public delegate void set_proceed_BeforeArgs(Params_set_proceed args);

        public delegate void set_proceed_WithArgs(Action<MenuButton, bool> orig, MenuButton self, bool value);

        public delegate void set_submitAction_AfterArgs(Params_set_submitAction args);

        public delegate void set_submitAction_BeforeArgs(Params_set_submitAction args);

        public delegate void set_submitAction_WithArgs(Action<MenuButton, Action<MenuButton>> orig, MenuButton self,
            Action<MenuButton> value);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<MenuButton> orig, MenuButton self);

        public sealed class Params_Start
        {
            public MenuButton self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public MenuButton self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuButton self;
        }

        public sealed class Params_get_submitAction
        {
            public MenuButton self;
        }

        public sealed class Params_set_submitAction
        {
            public MenuButton self;
            public Action<MenuButton> value;
        }

        public sealed class Params_get_proceed
        {
            public MenuButton self;
        }

        public sealed class Params_set_proceed
        {
            public MenuButton self;
            public bool value;
        }

        public sealed class Params_orig_OnSubmit
        {
            public BaseEventData eventData;
            public MenuButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.get_submitAction_BeforeArgs get_submitAction
        {
            add
            {
                HookHandler._beforeget_submitAction += value;
                HookHandler.Hookget_submitAction();
            }
            remove => HookHandler._beforeget_submitAction -= value;
        }

        public static event Delegates.set_submitAction_BeforeArgs set_submitAction
        {
            add
            {
                HookHandler._beforeset_submitAction += value;
                HookHandler.Hookset_submitAction();
            }
            remove => HookHandler._beforeset_submitAction -= value;
        }

        public static event Delegates.get_proceed_BeforeArgs get_proceed
        {
            add
            {
                HookHandler._beforeget_proceed += value;
                HookHandler.Hookget_proceed();
            }
            remove => HookHandler._beforeget_proceed -= value;
        }

        public static event Delegates.set_proceed_BeforeArgs set_proceed
        {
            add
            {
                HookHandler._beforeset_proceed += value;
                HookHandler.Hookset_proceed();
            }
            remove => HookHandler._beforeset_proceed -= value;
        }

        public static event Delegates.orig_OnSubmit_BeforeArgs orig_OnSubmit
        {
            add
            {
                HookHandler._beforeorig_OnSubmit += value;
                HookHandler.Hookorig_OnSubmit();
            }
            remove => HookHandler._beforeorig_OnSubmit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnSubmit_AfterArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.get_submitAction_AfterArgs get_submitAction
        {
            add
            {
                HookHandler._afterget_submitAction += value;
                HookHandler.Hookget_submitAction();
            }
            remove => HookHandler._afterget_submitAction -= value;
        }

        public static event Delegates.set_submitAction_AfterArgs set_submitAction
        {
            add
            {
                HookHandler._afterset_submitAction += value;
                HookHandler.Hookset_submitAction();
            }
            remove => HookHandler._afterset_submitAction -= value;
        }

        public static event Delegates.get_proceed_AfterArgs get_proceed
        {
            add
            {
                HookHandler._afterget_proceed += value;
                HookHandler.Hookget_proceed();
            }
            remove => HookHandler._afterget_proceed -= value;
        }

        public static event Delegates.set_proceed_AfterArgs set_proceed
        {
            add
            {
                HookHandler._afterset_proceed += value;
                HookHandler.Hookset_proceed();
            }
            remove => HookHandler._afterset_proceed -= value;
        }

        public static event Delegates.orig_OnSubmit_AfterArgs orig_OnSubmit
        {
            add
            {
                HookHandler._afterorig_OnSubmit += value;
                HookHandler.Hookorig_OnSubmit();
            }
            remove => HookHandler._afterorig_OnSubmit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Start_WithArgs Start
        {
            add => HookEndpointManager.Add<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "Start"), value);
            remove => HookEndpointManager.Remove<Delegates.Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "Start"), value);
        }

        public static event Delegates.OnSubmit_WithArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "OnSubmit"), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "OnPointerClick"), value);
        }

        public static event Delegates.get_submitAction_WithArgs get_submitAction
        {
            add => HookEndpointManager.Add<Delegates.get_submitAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "get_submitAction"), value);
            remove => HookEndpointManager.Remove<Delegates.get_submitAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "get_submitAction"), value);
        }

        public static event Delegates.set_submitAction_WithArgs set_submitAction
        {
            add => HookEndpointManager.Add<Delegates.set_submitAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "set_submitAction"), value);
            remove => HookEndpointManager.Remove<Delegates.set_submitAction_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "set_submitAction"), value);
        }

        public static event Delegates.get_proceed_WithArgs get_proceed
        {
            add => HookEndpointManager.Add<Delegates.get_proceed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "get_proceed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_proceed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "get_proceed"), value);
        }

        public static event Delegates.set_proceed_WithArgs set_proceed
        {
            add => HookEndpointManager.Add<Delegates.set_proceed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "set_proceed"), value);
            remove => HookEndpointManager.Remove<Delegates.set_proceed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "set_proceed"), value);
        }

        public static event Delegates.orig_OnSubmit_WithArgs orig_OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.orig_OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "orig_OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuButton), "orig_OnSubmit"), value);
        }
    }
}