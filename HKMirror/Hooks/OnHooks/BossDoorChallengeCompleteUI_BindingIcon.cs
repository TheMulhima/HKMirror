using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossDoorChallengeCompleteUI_BindingIcon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossDoorChallengeCompleteUI_BindingIcon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetAlreadyVisible()
        {
            if (!HookedList.Contains("SetAlreadyVisible"))
            {
                HookedList.Add("SetAlreadyVisible");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon),
                        "SetAlreadyVisible"), SetAlreadyVisible);
            }
        }

        internal static event Delegates.SetAlreadyVisible_BeforeArgs _beforeSetAlreadyVisible;
        internal static event Delegates.SetAlreadyVisible_AfterArgs _afterSetAlreadyVisible;

        private static void SetAlreadyVisible(Action<BossDoorChallengeCompleteUI.BindingIcon, bool, bool> orig,
            BossDoorChallengeCompleteUI.BindingIcon self, bool value, bool allUnlocked)
        {
            Delegates.Params_SetAlreadyVisible @params = new()
            {
                self = self, value = value, allUnlocked = allUnlocked
            };
            if (_beforeSetAlreadyVisible != null)
                foreach (Delegates.SetAlreadyVisible_BeforeArgs toInvoke in
                         _beforeSetAlreadyVisible.GetInvocationList())
                    try
                    {
                        _beforeSetAlreadyVisible?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            allUnlocked = @params.allUnlocked;
            orig(self, value, allUnlocked);
            if (_afterSetAlreadyVisible != null)
                foreach (Delegates.SetAlreadyVisible_AfterArgs toInvoke in _afterSetAlreadyVisible.GetInvocationList())
                    try
                    {
                        _afterSetAlreadyVisible.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoAppearAnim()
        {
            if (!HookedList.Contains("DoAppearAnim"))
            {
                HookedList.Add("DoAppearAnim");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "DoAppearAnim"),
                    DoAppearAnim);
            }
        }

        internal static event Delegates.DoAppearAnim_BeforeArgs _beforeDoAppearAnim;

        private static IEnumerator DoAppearAnim(Func<BossDoorChallengeCompleteUI.BindingIcon, float, IEnumerator> orig,
            BossDoorChallengeCompleteUI.BindingIcon self, float appearDelay)
        {
            Delegates.Params_DoAppearAnim @params = new()
            {
                self = self, appearDelay = appearDelay
            };
            if (_beforeDoAppearAnim != null)
                foreach (Delegates.DoAppearAnim_BeforeArgs toInvoke in _beforeDoAppearAnim.GetInvocationList())
                    try
                    {
                        _beforeDoAppearAnim?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            appearDelay = @params.appearDelay;
            return orig(self, appearDelay);
        }

        internal static void HookDoAllAppearAnim()
        {
            if (!HookedList.Contains("DoAllAppearAnim"))
            {
                HookedList.Add("DoAllAppearAnim");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "DoAllAppearAnim"),
                    DoAllAppearAnim);
            }
        }

        internal static event Delegates.DoAllAppearAnim_BeforeArgs _beforeDoAllAppearAnim;

        private static IEnumerator DoAllAppearAnim(
            Func<BossDoorChallengeCompleteUI.BindingIcon, float, IEnumerator> orig,
            BossDoorChallengeCompleteUI.BindingIcon self, float appearDelay)
        {
            Delegates.Params_DoAllAppearAnim @params = new()
            {
                self = self, appearDelay = appearDelay
            };
            if (_beforeDoAllAppearAnim != null)
                foreach (Delegates.DoAllAppearAnim_BeforeArgs toInvoke in _beforeDoAllAppearAnim.GetInvocationList())
                    try
                    {
                        _beforeDoAllAppearAnim?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            appearDelay = @params.appearDelay;
            return orig(self, appearDelay);
        }

        internal static void HookSetAllUnlocked()
        {
            if (!HookedList.Contains("SetAllUnlocked"))
            {
                HookedList.Add("SetAllUnlocked");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "SetAllUnlocked"),
                    SetAllUnlocked);
            }
        }

        internal static event Delegates.SetAllUnlocked_BeforeArgs _beforeSetAllUnlocked;
        internal static event Delegates.SetAllUnlocked_AfterArgs _afterSetAllUnlocked;

        private static void SetAllUnlocked(Action<BossDoorChallengeCompleteUI.BindingIcon> orig,
            BossDoorChallengeCompleteUI.BindingIcon self)
        {
            Delegates.Params_SetAllUnlocked @params = new()
            {
                self = self
            };
            if (_beforeSetAllUnlocked != null)
                foreach (Delegates.SetAllUnlocked_BeforeArgs toInvoke in _beforeSetAllUnlocked.GetInvocationList())
                    try
                    {
                        _beforeSetAllUnlocked?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetAllUnlocked != null)
                foreach (Delegates.SetAllUnlocked_AfterArgs toInvoke in _afterSetAllUnlocked.GetInvocationList())
                    try
                    {
                        _afterSetAllUnlocked.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate IEnumerator DoAllAppearAnim_AfterArgs(Params_DoAllAppearAnim args, IEnumerator ret);

        public delegate void DoAllAppearAnim_BeforeArgs(Params_DoAllAppearAnim args);

        public delegate IEnumerator DoAllAppearAnim_WithArgs(
            Func<BossDoorChallengeCompleteUI.BindingIcon, float, IEnumerator> orig,
            BossDoorChallengeCompleteUI.BindingIcon self, float appearDelay);

        public delegate IEnumerator DoAppearAnim_AfterArgs(Params_DoAppearAnim args, IEnumerator ret);

        public delegate void DoAppearAnim_BeforeArgs(Params_DoAppearAnim args);

        public delegate IEnumerator DoAppearAnim_WithArgs(
            Func<BossDoorChallengeCompleteUI.BindingIcon, float, IEnumerator> orig,
            BossDoorChallengeCompleteUI.BindingIcon self, float appearDelay);

        public delegate void SetAllUnlocked_AfterArgs(Params_SetAllUnlocked args);

        public delegate void SetAllUnlocked_BeforeArgs(Params_SetAllUnlocked args);

        public delegate void SetAllUnlocked_WithArgs(Action<BossDoorChallengeCompleteUI.BindingIcon> orig,
            BossDoorChallengeCompleteUI.BindingIcon self);

        public delegate void SetAlreadyVisible_AfterArgs(Params_SetAlreadyVisible args);

        public delegate void SetAlreadyVisible_BeforeArgs(Params_SetAlreadyVisible args);

        public delegate void SetAlreadyVisible_WithArgs(
            Action<BossDoorChallengeCompleteUI.BindingIcon, bool, bool> orig,
            BossDoorChallengeCompleteUI.BindingIcon self, bool value, bool allUnlocked);

        public sealed class Params_SetAlreadyVisible
        {
            public bool allUnlocked;
            public BossDoorChallengeCompleteUI.BindingIcon self;
            public bool value;
        }

        public sealed class Params_DoAppearAnim
        {
            public float appearDelay;
            public BossDoorChallengeCompleteUI.BindingIcon self;
        }

        public sealed class Params_DoAllAppearAnim
        {
            public float appearDelay;
            public BossDoorChallengeCompleteUI.BindingIcon self;
        }

        public sealed class Params_SetAllUnlocked
        {
            public BossDoorChallengeCompleteUI.BindingIcon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetAlreadyVisible_BeforeArgs SetAlreadyVisible
        {
            add
            {
                HookHandler._beforeSetAlreadyVisible += value;
                HookHandler.HookSetAlreadyVisible();
            }
            remove => HookHandler._beforeSetAlreadyVisible -= value;
        }

        public static event Delegates.DoAppearAnim_BeforeArgs DoAppearAnim
        {
            add
            {
                HookHandler._beforeDoAppearAnim += value;
                HookHandler.HookDoAppearAnim();
            }
            remove => HookHandler._beforeDoAppearAnim -= value;
        }

        public static event Delegates.DoAllAppearAnim_BeforeArgs DoAllAppearAnim
        {
            add
            {
                HookHandler._beforeDoAllAppearAnim += value;
                HookHandler.HookDoAllAppearAnim();
            }
            remove => HookHandler._beforeDoAllAppearAnim -= value;
        }

        public static event Delegates.SetAllUnlocked_BeforeArgs SetAllUnlocked
        {
            add
            {
                HookHandler._beforeSetAllUnlocked += value;
                HookHandler.HookSetAllUnlocked();
            }
            remove => HookHandler._beforeSetAllUnlocked -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetAlreadyVisible_AfterArgs SetAlreadyVisible
        {
            add
            {
                HookHandler._afterSetAlreadyVisible += value;
                HookHandler.HookSetAlreadyVisible();
            }
            remove => HookHandler._afterSetAlreadyVisible -= value;
        }

        public static event Delegates.SetAllUnlocked_AfterArgs SetAllUnlocked
        {
            add
            {
                HookHandler._afterSetAllUnlocked += value;
                HookHandler.HookSetAllUnlocked();
            }
            remove => HookHandler._afterSetAllUnlocked -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.SetAlreadyVisible_WithArgs SetAlreadyVisible
        {
            add => HookEndpointManager.Add<Delegates.SetAlreadyVisible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "SetAlreadyVisible"),
                value);
            remove => HookEndpointManager.Remove<Delegates.SetAlreadyVisible_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "SetAlreadyVisible"),
                value);
        }

        public static event Delegates.DoAppearAnim_WithArgs DoAppearAnim
        {
            add => HookEndpointManager.Add<Delegates.DoAppearAnim_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "DoAppearAnim"), value);
            remove => HookEndpointManager.Remove<Delegates.DoAppearAnim_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "DoAppearAnim"), value);
        }

        public static event Delegates.DoAllAppearAnim_WithArgs DoAllAppearAnim
        {
            add => HookEndpointManager.Add<Delegates.DoAllAppearAnim_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "DoAllAppearAnim"),
                value);
            remove => HookEndpointManager.Remove<Delegates.DoAllAppearAnim_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "DoAllAppearAnim"),
                value);
        }

        public static event Delegates.SetAllUnlocked_WithArgs SetAllUnlocked
        {
            add => HookEndpointManager.Add<Delegates.SetAllUnlocked_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "SetAllUnlocked"),
                value);
            remove => HookEndpointManager.Remove<Delegates.SetAllUnlocked_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeCompleteUI.BindingIcon), "SetAllUnlocked"),
                value);
        }
    }
}