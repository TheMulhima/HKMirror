namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HitTaker class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHitTaker
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookHit()
        {
            if (!HookedList.Contains("Hit"))
            {
                HookedList.Add("Hit");
                On.HitTaker.Hit += Hit;
            }
        }

        internal static event Delegates.Hit_BeforeArgs _beforeHit;
        internal static event Delegates.Hit_AfterArgs _afterHit;

        private static void Hit(On.HitTaker.orig_Hit orig, GameObject targetGameObject, HitInstance damageInstance,
            int recursionDepth)
        {
            Delegates.Params_Hit @params = new()
            {
                targetGameObject = targetGameObject, damageInstance = damageInstance, recursionDepth = recursionDepth
            };
            if (_beforeHit != null)
                foreach (Delegates.Hit_BeforeArgs toInvoke in _beforeHit.GetInvocationList())
                    try
                    {
                        _beforeHit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            targetGameObject = @params.targetGameObject;
            damageInstance = @params.damageInstance;
            recursionDepth = @params.recursionDepth;
            orig(targetGameObject, damageInstance, recursionDepth);
            if (_afterHit != null)
                foreach (Delegates.Hit_AfterArgs toInvoke in _afterHit.GetInvocationList())
                    try
                    {
                        _afterHit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Hit_AfterArgs(Params_Hit args);

        public delegate void Hit_BeforeArgs(Params_Hit args);

        public delegate void Hit_WithArgs(Action<GameObject, HitInstance, int> orig, GameObject targetGameObject,
            HitInstance damageInstance, int recursionDepth);

        public sealed class Params_Hit
        {
            public HitInstance damageInstance;
            public int recursionDepth;
            public GameObject targetGameObject;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Hit_BeforeArgs Hit
        {
            add
            {
                HookHandler._beforeHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._beforeHit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Hit_AfterArgs Hit
        {
            add
            {
                HookHandler._afterHit += value;
                HookHandler.HookHit();
            }
            remove => HookHandler._afterHit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.HitTaker.hook_Hit Hit
        {
            add => On.HitTaker.Hit += value;
            remove => On.HitTaker.Hit -= value;
        }
    }
}