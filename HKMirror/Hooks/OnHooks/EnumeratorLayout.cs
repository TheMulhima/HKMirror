using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for EnumeratorLayout class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnEnumeratorLayout
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookModifyNext()
{
if (!HookedList.Contains("ModifyNext"))
{
HookedList.Add("ModifyNext");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.EnumeratorLayout), "ModifyNext", true), ModifyNext);

}
}
internal static event Delegates.ModifyNext_BeforeArgs _beforeModifyNext;
internal static event Delegates.ModifyNext_AfterArgs _afterModifyNext;
private static void ModifyNext(Action<Modding.Menu.EnumeratorLayout,  UnityEngine.RectTransform> orig, Modding.Menu.EnumeratorLayout self,  UnityEngine.RectTransform rt)
{
Delegates.Params_ModifyNext @params = new() 
{
self = self
, rt = rt
};
if (_beforeModifyNext != null)
{
foreach (Delegates.ModifyNext_BeforeArgs toInvoke in _beforeModifyNext.GetInvocationList())
{
try
{
_beforeModifyNext?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
rt = @params.rt;
orig(self, rt);
if (_afterModifyNext != null)
{
foreach (Delegates.ModifyNext_AfterArgs toInvoke in _afterModifyNext.GetInvocationList())
{
try
{
_afterModifyNext.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_ModifyNext
{
public Modding.Menu.EnumeratorLayout self;
public UnityEngine.RectTransform rt;
}
public delegate void ModifyNext_BeforeArgs(Params_ModifyNext args);
public delegate void ModifyNext_AfterArgs(Params_ModifyNext args);
public delegate void ModifyNext_WithArgs (Action<Modding.Menu.EnumeratorLayout,  UnityEngine.RectTransform> orig, Modding.Menu.EnumeratorLayout self,  UnityEngine.RectTransform rt);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.ModifyNext_BeforeArgs ModifyNext
{
add
{

HookHandler._beforeModifyNext += value;
HookHandler.HookModifyNext();
}
remove => HookHandler._beforeModifyNext -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.ModifyNext_AfterArgs ModifyNext
{
add
{

HookHandler._afterModifyNext += value;
HookHandler.HookModifyNext();
}
remove => HookHandler._afterModifyNext -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.ModifyNext_WithArgs ModifyNext
{
add => HookEndpointManager.Add<Delegates.ModifyNext_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.EnumeratorLayout), "ModifyNext", true), value);
remove => HookEndpointManager.Remove<Delegates.ModifyNext_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.EnumeratorLayout), "ModifyNext", true), value);
}
}

}
