using GUIBlendModes;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BlendMaterials class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBlendMaterials
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookInitialize()
        {
            if (!HookedList.Contains("Initialize"))
            {
                HookedList.Add("Initialize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlendMaterials), "Initialize", false), Initialize);
            }
        }

        internal static event Delegates.Initialize_BeforeArgs _beforeInitialize;
        internal static event Delegates.Initialize_AfterArgs _afterInitialize;

        private static void Initialize(Action orig)
        {
            if (_beforeInitialize != null)
                foreach (Delegates.Initialize_BeforeArgs toInvoke in _beforeInitialize.GetInvocationList())
                    try
                    {
                        _beforeInitialize?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterInitialize != null)
                foreach (Delegates.Initialize_AfterArgs toInvoke in _afterInitialize.GetInvocationList())
                    try
                    {
                        _afterInitialize.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BlendMaterials), "GetMaterial", false), GetMaterial);
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_AfterArgs _afterGetMaterial;

        private static Material GetMaterial(Func<BlendMode, bool, bool, Material> orig, BlendMode mode, bool font,
            bool optimized)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                mode = mode, font = font, optimized = optimized
            };
            if (_beforeGetMaterial != null)
                foreach (Delegates.GetMaterial_BeforeArgs toInvoke in _beforeGetMaterial.GetInvocationList())
                    try
                    {
                        _beforeGetMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            mode = @params.mode;
            font = @params.font;
            optimized = @params.optimized;
            var retVal = orig(mode, font, optimized);
            if (_afterGetMaterial != null)
                foreach (Delegates.GetMaterial_AfterArgs toInvoke in _afterGetMaterial.GetInvocationList())
                    try
                    {
                        retVal = _afterGetMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate Material GetMaterial_AfterArgs(Params_GetMaterial args, Material ret);

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate Material GetMaterial_WithArgs(Func<BlendMode, bool, bool, Material> orig, BlendMode mode,
            bool font, bool optimized);

        public delegate void Initialize_AfterArgs();

        public delegate void Initialize_BeforeArgs();

        public delegate void Initialize_WithArgs(Action orig);

        public sealed class Params_GetMaterial
        {
            public bool font;
            public BlendMode mode;
            public bool optimized;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Initialize_BeforeArgs Initialize
        {
            add
            {
                HookHandler._beforeInitialize += value;
                HookHandler.HookInitialize();
            }
            remove => HookHandler._beforeInitialize -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Initialize_AfterArgs Initialize
        {
            add
            {
                HookHandler._afterInitialize += value;
                HookHandler.HookInitialize();
            }
            remove => HookHandler._afterInitialize -= value;
        }

        public static event Delegates.GetMaterial_AfterArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Initialize_WithArgs Initialize
        {
            add => HookEndpointManager.Add<Delegates.Initialize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlendMaterials), "Initialize", false), value);
            remove => HookEndpointManager.Remove<Delegates.Initialize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlendMaterials), "Initialize", false), value);
        }

        public static event Delegates.GetMaterial_WithArgs GetMaterial
        {
            add => HookEndpointManager.Add<Delegates.GetMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlendMaterials), "GetMaterial", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BlendMaterials), "GetMaterial", false), value);
        }
    }
}