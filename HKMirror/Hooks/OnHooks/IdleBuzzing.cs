namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for IdleBuzzing class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnIdleBuzzing
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.IdleBuzzing.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.IdleBuzzing.orig_Reset orig, IdleBuzzing self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.IdleBuzzing.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.IdleBuzzing.orig_Awake orig, IdleBuzzing self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.IdleBuzzing.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.IdleBuzzing.orig_Start orig, IdleBuzzing self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.IdleBuzzing.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.IdleBuzzing.orig_FixedUpdate orig, IdleBuzzing self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBuzz()
        {
            if (!HookedList.Contains("Buzz"))
            {
                HookedList.Add("Buzz");
                On.IdleBuzzing.Buzz += Buzz;
            }
        }

        internal static event Delegates.Buzz_BeforeArgs _beforeBuzz;
        internal static event Delegates.Buzz_AfterArgs _afterBuzz;

        private static void Buzz(On.IdleBuzzing.orig_Buzz orig, IdleBuzzing self, float deltaTime)
        {
            Delegates.Params_Buzz @params = new()
            {
                self = self, deltaTime = deltaTime
            };
            if (_beforeBuzz != null)
                foreach (Delegates.Buzz_BeforeArgs toInvoke in _beforeBuzz.GetInvocationList())
                    try
                    {
                        _beforeBuzz?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            deltaTime = @params.deltaTime;
            orig(self, deltaTime);
            if (_afterBuzz != null)
                foreach (Delegates.Buzz_AfterArgs toInvoke in _afterBuzz.GetInvocationList())
                    try
                    {
                        _afterBuzz.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<IdleBuzzing> orig, IdleBuzzing self);

        public delegate void Buzz_AfterArgs(Params_Buzz args);

        public delegate void Buzz_BeforeArgs(Params_Buzz args);

        public delegate void Buzz_WithArgs(Action<IdleBuzzing, float> orig, IdleBuzzing self, float deltaTime);

        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<IdleBuzzing> orig, IdleBuzzing self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<IdleBuzzing> orig, IdleBuzzing self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<IdleBuzzing> orig, IdleBuzzing self);

        public sealed class Params_Reset
        {
            public IdleBuzzing self;
        }

        public sealed class Params_Awake
        {
            public IdleBuzzing self;
        }

        public sealed class Params_Start
        {
            public IdleBuzzing self;
        }

        public sealed class Params_FixedUpdate
        {
            public IdleBuzzing self;
        }

        public sealed class Params_Buzz
        {
            public float deltaTime;
            public IdleBuzzing self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.Buzz_BeforeArgs Buzz
        {
            add
            {
                HookHandler._beforeBuzz += value;
                HookHandler.HookBuzz();
            }
            remove => HookHandler._beforeBuzz -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.Buzz_AfterArgs Buzz
        {
            add
            {
                HookHandler._afterBuzz += value;
                HookHandler.HookBuzz();
            }
            remove => HookHandler._afterBuzz -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.IdleBuzzing.hook_Reset Reset
        {
            add => On.IdleBuzzing.Reset += value;
            remove => On.IdleBuzzing.Reset -= value;
        }

        public static event On.IdleBuzzing.hook_Awake Awake
        {
            add => On.IdleBuzzing.Awake += value;
            remove => On.IdleBuzzing.Awake -= value;
        }

        public static event On.IdleBuzzing.hook_Start Start
        {
            add => On.IdleBuzzing.Start += value;
            remove => On.IdleBuzzing.Start -= value;
        }

        public static event On.IdleBuzzing.hook_FixedUpdate FixedUpdate
        {
            add => On.IdleBuzzing.FixedUpdate += value;
            remove => On.IdleBuzzing.FixedUpdate -= value;
        }

        public static event On.IdleBuzzing.hook_Buzz Buzz
        {
            add => On.IdleBuzzing.Buzz += value;
            remove => On.IdleBuzzing.Buzz -= value;
        }
    }
}