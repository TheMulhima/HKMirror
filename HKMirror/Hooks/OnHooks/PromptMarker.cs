using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for PromptMarker class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPromptMarker
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PromptMarker.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.PromptMarker.orig_Awake orig, PromptMarker self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PromptMarker.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.PromptMarker.orig_Start orig, PromptMarker self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.PromptMarker.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.PromptMarker.orig_OnDestroy orig, PromptMarker self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRecycleOnLevelLoad()
        {
            if (!HookedList.Contains("RecycleOnLevelLoad"))
            {
                HookedList.Add("RecycleOnLevelLoad");
                On.PromptMarker.RecycleOnLevelLoad += RecycleOnLevelLoad;
            }
        }

        internal static event Delegates.RecycleOnLevelLoad_BeforeArgs _beforeRecycleOnLevelLoad;
        internal static event Delegates.RecycleOnLevelLoad_AfterArgs _afterRecycleOnLevelLoad;

        private static void RecycleOnLevelLoad(On.PromptMarker.orig_RecycleOnLevelLoad orig, PromptMarker self)
        {
            Delegates.Params_RecycleOnLevelLoad @params = new()
            {
                self = self
            };
            if (_beforeRecycleOnLevelLoad != null)
            {
                foreach (Delegates.RecycleOnLevelLoad_BeforeArgs toInvoke in
                         _beforeRecycleOnLevelLoad.GetInvocationList())
                {
                    try
                    {
                        _beforeRecycleOnLevelLoad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRecycleOnLevelLoad != null)
            {
                foreach (Delegates.RecycleOnLevelLoad_AfterArgs toInvoke in
                         _afterRecycleOnLevelLoad.GetInvocationList())
                {
                    try
                    {
                        _afterRecycleOnLevelLoad.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PromptMarker.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.PromptMarker.orig_OnEnable orig, PromptMarker self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.PromptMarker.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.PromptMarker.orig_Update orig, PromptMarker self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetLabel()
        {
            if (!HookedList.Contains("SetLabel"))
            {
                HookedList.Add("SetLabel");
                On.PromptMarker.SetLabel += SetLabel;
            }
        }

        internal static event Delegates.SetLabel_BeforeArgs _beforeSetLabel;
        internal static event Delegates.SetLabel_AfterArgs _afterSetLabel;

        private static void SetLabel(On.PromptMarker.orig_SetLabel orig, PromptMarker self, string labelName)
        {
            Delegates.Params_SetLabel @params = new()
            {
                self = self, labelName = labelName
            };
            if (_beforeSetLabel != null)
            {
                foreach (Delegates.SetLabel_BeforeArgs toInvoke in _beforeSetLabel.GetInvocationList())
                {
                    try
                    {
                        _beforeSetLabel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            labelName = @params.labelName;
            orig(self, labelName);
            if (_afterSetLabel != null)
            {
                foreach (Delegates.SetLabel_AfterArgs toInvoke in _afterSetLabel.GetInvocationList())
                {
                    try
                    {
                        _afterSetLabel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShow()
        {
            if (!HookedList.Contains("Show"))
            {
                HookedList.Add("Show");
                On.PromptMarker.Show += Show;
            }
        }

        internal static event Delegates.Show_BeforeArgs _beforeShow;
        internal static event Delegates.Show_AfterArgs _afterShow;

        private static void Show(On.PromptMarker.orig_Show orig, PromptMarker self)
        {
            Delegates.Params_Show @params = new()
            {
                self = self
            };
            if (_beforeShow != null)
            {
                foreach (Delegates.Show_BeforeArgs toInvoke in _beforeShow.GetInvocationList())
                {
                    try
                    {
                        _beforeShow?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterShow != null)
            {
                foreach (Delegates.Show_AfterArgs toInvoke in _afterShow.GetInvocationList())
                {
                    try
                    {
                        _afterShow.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookHide()
        {
            if (!HookedList.Contains("Hide"))
            {
                HookedList.Add("Hide");
                On.PromptMarker.Hide += Hide;
            }
        }

        internal static event Delegates.Hide_BeforeArgs _beforeHide;
        internal static event Delegates.Hide_AfterArgs _afterHide;

        private static void Hide(On.PromptMarker.orig_Hide orig, PromptMarker self)
        {
            Delegates.Params_Hide @params = new()
            {
                self = self
            };
            if (_beforeHide != null)
            {
                foreach (Delegates.Hide_BeforeArgs toInvoke in _beforeHide.GetInvocationList())
                {
                    try
                    {
                        _beforeHide?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterHide != null)
            {
                foreach (Delegates.Hide_AfterArgs toInvoke in _afterHide.GetInvocationList())
                {
                    try
                    {
                        _afterHide.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRecycleDelayed()
        {
            if (!HookedList.Contains("RecycleDelayed"))
            {
                HookedList.Add("RecycleDelayed");
                On.PromptMarker.RecycleDelayed += RecycleDelayed;
            }
        }

        internal static event Delegates.RecycleDelayed_BeforeArgs _beforeRecycleDelayed;

        private static System.Collections.IEnumerator RecycleDelayed(On.PromptMarker.orig_RecycleDelayed orig,
            PromptMarker self, float delay)
        {
            Delegates.Params_RecycleDelayed @params = new()
            {
                self = self, delay = delay
            };
            if (_beforeRecycleDelayed != null)
            {
                foreach (Delegates.RecycleDelayed_BeforeArgs toInvoke in _beforeRecycleDelayed.GetInvocationList())
                {
                    try
                    {
                        _beforeRecycleDelayed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            delay = @params.delay;
            return orig(self, delay);
        }

        internal static void HookSetOwner()
        {
            if (!HookedList.Contains("SetOwner"))
            {
                HookedList.Add("SetOwner");
                On.PromptMarker.SetOwner += SetOwner;
            }
        }

        internal static event Delegates.SetOwner_BeforeArgs _beforeSetOwner;
        internal static event Delegates.SetOwner_AfterArgs _afterSetOwner;

        private static void SetOwner(On.PromptMarker.orig_SetOwner orig, PromptMarker self, UnityEngine.GameObject obj)
        {
            Delegates.Params_SetOwner @params = new()
            {
                self = self, obj = obj
            };
            if (_beforeSetOwner != null)
            {
                foreach (Delegates.SetOwner_BeforeArgs toInvoke in _beforeSetOwner.GetInvocationList())
                {
                    try
                    {
                        _beforeSetOwner?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            obj = @params.obj;
            orig(self, obj);
            if (_afterSetOwner != null)
            {
                foreach (Delegates.SetOwner_AfterArgs toInvoke in _afterSetOwner.GetInvocationList())
                {
                    try
                    {
                        _afterSetOwner.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public PromptMarker self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_Start
        {
            public PromptMarker self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_OnDestroy
        {
            public PromptMarker self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_RecycleOnLevelLoad
        {
            public PromptMarker self;
        }

        public delegate void RecycleOnLevelLoad_BeforeArgs(Params_RecycleOnLevelLoad args);

        public delegate void RecycleOnLevelLoad_AfterArgs(Params_RecycleOnLevelLoad args);

        public delegate void RecycleOnLevelLoad_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_OnEnable
        {
            public PromptMarker self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_Update
        {
            public PromptMarker self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_SetLabel
        {
            public PromptMarker self;
            public string labelName;
        }

        public delegate void SetLabel_BeforeArgs(Params_SetLabel args);

        public delegate void SetLabel_AfterArgs(Params_SetLabel args);

        public delegate void SetLabel_WithArgs(Action<PromptMarker, string> orig, PromptMarker self, string labelName);

        public sealed class Params_Show
        {
            public PromptMarker self;
        }

        public delegate void Show_BeforeArgs(Params_Show args);

        public delegate void Show_AfterArgs(Params_Show args);

        public delegate void Show_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_Hide
        {
            public PromptMarker self;
        }

        public delegate void Hide_BeforeArgs(Params_Hide args);

        public delegate void Hide_AfterArgs(Params_Hide args);

        public delegate void Hide_WithArgs(Action<PromptMarker> orig, PromptMarker self);

        public sealed class Params_RecycleDelayed
        {
            public PromptMarker self;
            public float delay;
        }

        public delegate void RecycleDelayed_BeforeArgs(Params_RecycleDelayed args);

        public delegate System.Collections.IEnumerator RecycleDelayed_AfterArgs(Params_RecycleDelayed args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator RecycleDelayed_WithArgs(
            Func<PromptMarker, float, System.Collections.IEnumerator> orig, PromptMarker self, float delay);

        public sealed class Params_SetOwner
        {
            public PromptMarker self;
            public UnityEngine.GameObject obj;
        }

        public delegate void SetOwner_BeforeArgs(Params_SetOwner args);

        public delegate void SetOwner_AfterArgs(Params_SetOwner args);

        public delegate void SetOwner_WithArgs(Action<PromptMarker, UnityEngine.GameObject> orig, PromptMarker self,
            UnityEngine.GameObject obj);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.RecycleOnLevelLoad_BeforeArgs RecycleOnLevelLoad
        {
            add
            {
                HookHandler._beforeRecycleOnLevelLoad += value;
                HookHandler.HookRecycleOnLevelLoad();
            }
            remove => HookHandler._beforeRecycleOnLevelLoad -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SetLabel_BeforeArgs SetLabel
        {
            add
            {
                HookHandler._beforeSetLabel += value;
                HookHandler.HookSetLabel();
            }
            remove => HookHandler._beforeSetLabel -= value;
        }

        public static event Delegates.Show_BeforeArgs Show
        {
            add
            {
                HookHandler._beforeShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._beforeShow -= value;
        }

        public static event Delegates.Hide_BeforeArgs Hide
        {
            add
            {
                HookHandler._beforeHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._beforeHide -= value;
        }

        public static event Delegates.RecycleDelayed_BeforeArgs RecycleDelayed
        {
            add
            {
                HookHandler._beforeRecycleDelayed += value;
                HookHandler.HookRecycleDelayed();
            }
            remove => HookHandler._beforeRecycleDelayed -= value;
        }

        public static event Delegates.SetOwner_BeforeArgs SetOwner
        {
            add
            {
                HookHandler._beforeSetOwner += value;
                HookHandler.HookSetOwner();
            }
            remove => HookHandler._beforeSetOwner -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.RecycleOnLevelLoad_AfterArgs RecycleOnLevelLoad
        {
            add
            {
                HookHandler._afterRecycleOnLevelLoad += value;
                HookHandler.HookRecycleOnLevelLoad();
            }
            remove => HookHandler._afterRecycleOnLevelLoad -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SetLabel_AfterArgs SetLabel
        {
            add
            {
                HookHandler._afterSetLabel += value;
                HookHandler.HookSetLabel();
            }
            remove => HookHandler._afterSetLabel -= value;
        }

        public static event Delegates.Show_AfterArgs Show
        {
            add
            {
                HookHandler._afterShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._afterShow -= value;
        }

        public static event Delegates.Hide_AfterArgs Hide
        {
            add
            {
                HookHandler._afterHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._afterHide -= value;
        }

        public static event Delegates.SetOwner_AfterArgs SetOwner
        {
            add
            {
                HookHandler._afterSetOwner += value;
                HookHandler.HookSetOwner();
            }
            remove => HookHandler._afterSetOwner -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PromptMarker.hook_Awake Awake
        {
            add => On.PromptMarker.Awake += value;
            remove => On.PromptMarker.Awake -= value;
        }

        public static event On.PromptMarker.hook_Start Start
        {
            add => On.PromptMarker.Start += value;
            remove => On.PromptMarker.Start -= value;
        }

        public static event On.PromptMarker.hook_OnDestroy OnDestroy
        {
            add => On.PromptMarker.OnDestroy += value;
            remove => On.PromptMarker.OnDestroy -= value;
        }

        public static event On.PromptMarker.hook_RecycleOnLevelLoad RecycleOnLevelLoad
        {
            add => On.PromptMarker.RecycleOnLevelLoad += value;
            remove => On.PromptMarker.RecycleOnLevelLoad -= value;
        }

        public static event On.PromptMarker.hook_OnEnable OnEnable
        {
            add => On.PromptMarker.OnEnable += value;
            remove => On.PromptMarker.OnEnable -= value;
        }

        public static event On.PromptMarker.hook_Update Update
        {
            add => On.PromptMarker.Update += value;
            remove => On.PromptMarker.Update -= value;
        }

        public static event On.PromptMarker.hook_SetLabel SetLabel
        {
            add => On.PromptMarker.SetLabel += value;
            remove => On.PromptMarker.SetLabel -= value;
        }

        public static event On.PromptMarker.hook_Show Show
        {
            add => On.PromptMarker.Show += value;
            remove => On.PromptMarker.Show -= value;
        }

        public static event On.PromptMarker.hook_Hide Hide
        {
            add => On.PromptMarker.Hide += value;
            remove => On.PromptMarker.Hide -= value;
        }

        public static event On.PromptMarker.hook_RecycleDelayed RecycleDelayed
        {
            add => On.PromptMarker.RecycleDelayed += value;
            remove => On.PromptMarker.RecycleDelayed -= value;
        }

        public static event On.PromptMarker.hook_SetOwner SetOwner
        {
            add => On.PromptMarker.SetOwner += value;
            remove => On.PromptMarker.SetOwner -= value;
        }
    }
}