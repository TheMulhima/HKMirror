using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_DefaultControls class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_DefaultControls
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCreateUIElementRoot()
        {
            if (!HookedList.Contains("CreateUIElementRoot"))
            {
                HookedList.Add("CreateUIElementRoot");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "CreateUIElementRoot", false),
                    CreateUIElementRoot);
            }
        }

        internal static event Delegates.CreateUIElementRoot_BeforeArgs _beforeCreateUIElementRoot;
        internal static event Delegates.CreateUIElementRoot_AfterArgs _afterCreateUIElementRoot;

        private static GameObject CreateUIElementRoot(Func<string, Vector2, GameObject> orig, string name, Vector2 size)
        {
            Delegates.Params_CreateUIElementRoot @params = new()
            {
                name = name, size = size
            };
            if (_beforeCreateUIElementRoot != null)
                foreach (Delegates.CreateUIElementRoot_BeforeArgs toInvoke in _beforeCreateUIElementRoot
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateUIElementRoot?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            name = @params.name;
            size = @params.size;
            var retVal = orig(name, size);
            if (_afterCreateUIElementRoot != null)
                foreach (Delegates.CreateUIElementRoot_AfterArgs toInvoke in
                         _afterCreateUIElementRoot.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateUIElementRoot.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateUIObject()
        {
            if (!HookedList.Contains("CreateUIObject"))
            {
                HookedList.Add("CreateUIObject");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "CreateUIObject", false),
                    CreateUIObject);
            }
        }

        internal static event Delegates.CreateUIObject_BeforeArgs _beforeCreateUIObject;
        internal static event Delegates.CreateUIObject_AfterArgs _afterCreateUIObject;

        private static GameObject CreateUIObject(Func<string, GameObject, GameObject> orig, string name,
            GameObject parent)
        {
            Delegates.Params_CreateUIObject @params = new()
            {
                name = name, parent = parent
            };
            if (_beforeCreateUIObject != null)
                foreach (Delegates.CreateUIObject_BeforeArgs toInvoke in _beforeCreateUIObject.GetInvocationList())
                    try
                    {
                        _beforeCreateUIObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            name = @params.name;
            parent = @params.parent;
            var retVal = orig(name, parent);
            if (_afterCreateUIObject != null)
                foreach (Delegates.CreateUIObject_AfterArgs toInvoke in _afterCreateUIObject.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateUIObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetDefaultTextValues()
        {
            if (!HookedList.Contains("SetDefaultTextValues"))
            {
                HookedList.Add("SetDefaultTextValues");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetDefaultTextValues", false),
                    SetDefaultTextValues);
            }
        }

        internal static event Delegates.SetDefaultTextValues_BeforeArgs _beforeSetDefaultTextValues;
        internal static event Delegates.SetDefaultTextValues_AfterArgs _afterSetDefaultTextValues;

        private static void SetDefaultTextValues(Action<TMP_Text> orig, TMP_Text lbl)
        {
            Delegates.Params_SetDefaultTextValues @params = new()
            {
                lbl = lbl
            };
            if (_beforeSetDefaultTextValues != null)
                foreach (Delegates.SetDefaultTextValues_BeforeArgs toInvoke in _beforeSetDefaultTextValues
                             .GetInvocationList())
                    try
                    {
                        _beforeSetDefaultTextValues?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            lbl = @params.lbl;
            orig(lbl);
            if (_afterSetDefaultTextValues != null)
                foreach (Delegates.SetDefaultTextValues_AfterArgs toInvoke in _afterSetDefaultTextValues
                             .GetInvocationList())
                    try
                    {
                        _afterSetDefaultTextValues.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetDefaultColorTransitionValues()
        {
            if (!HookedList.Contains("SetDefaultColorTransitionValues"))
            {
                HookedList.Add("SetDefaultColorTransitionValues");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetDefaultColorTransitionValues",
                        false), SetDefaultColorTransitionValues);
            }
        }

        internal static event Delegates.SetDefaultColorTransitionValues_BeforeArgs
            _beforeSetDefaultColorTransitionValues;

        internal static event Delegates.SetDefaultColorTransitionValues_AfterArgs _afterSetDefaultColorTransitionValues;

        private static void SetDefaultColorTransitionValues(Action<Selectable> orig, Selectable slider)
        {
            Delegates.Params_SetDefaultColorTransitionValues @params = new()
            {
                slider = slider
            };
            if (_beforeSetDefaultColorTransitionValues != null)
                foreach (Delegates.SetDefaultColorTransitionValues_BeforeArgs toInvoke in
                         _beforeSetDefaultColorTransitionValues.GetInvocationList())
                    try
                    {
                        _beforeSetDefaultColorTransitionValues?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            slider = @params.slider;
            orig(slider);
            if (_afterSetDefaultColorTransitionValues != null)
                foreach (Delegates.SetDefaultColorTransitionValues_AfterArgs toInvoke in
                         _afterSetDefaultColorTransitionValues.GetInvocationList())
                    try
                    {
                        _afterSetDefaultColorTransitionValues.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetParentAndAlign()
        {
            if (!HookedList.Contains("SetParentAndAlign"))
            {
                HookedList.Add("SetParentAndAlign");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetParentAndAlign", false),
                    SetParentAndAlign);
            }
        }

        internal static event Delegates.SetParentAndAlign_BeforeArgs _beforeSetParentAndAlign;
        internal static event Delegates.SetParentAndAlign_AfterArgs _afterSetParentAndAlign;

        private static void SetParentAndAlign(Action<GameObject, GameObject> orig, GameObject child, GameObject parent)
        {
            Delegates.Params_SetParentAndAlign @params = new()
            {
                child = child, parent = parent
            };
            if (_beforeSetParentAndAlign != null)
                foreach (Delegates.SetParentAndAlign_BeforeArgs toInvoke in
                         _beforeSetParentAndAlign.GetInvocationList())
                    try
                    {
                        _beforeSetParentAndAlign?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            child = @params.child;
            parent = @params.parent;
            orig(child, parent);
            if (_afterSetParentAndAlign != null)
                foreach (Delegates.SetParentAndAlign_AfterArgs toInvoke in _afterSetParentAndAlign.GetInvocationList())
                    try
                    {
                        _afterSetParentAndAlign.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetLayerRecursively()
        {
            if (!HookedList.Contains("SetLayerRecursively"))
            {
                HookedList.Add("SetLayerRecursively");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetLayerRecursively", false),
                    SetLayerRecursively);
            }
        }

        internal static event Delegates.SetLayerRecursively_BeforeArgs _beforeSetLayerRecursively;
        internal static event Delegates.SetLayerRecursively_AfterArgs _afterSetLayerRecursively;

        private static void SetLayerRecursively(Action<GameObject, int> orig, GameObject go, int layer)
        {
            Delegates.Params_SetLayerRecursively @params = new()
            {
                go = go, layer = layer
            };
            if (_beforeSetLayerRecursively != null)
                foreach (Delegates.SetLayerRecursively_BeforeArgs toInvoke in _beforeSetLayerRecursively
                             .GetInvocationList())
                    try
                    {
                        _beforeSetLayerRecursively?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            layer = @params.layer;
            orig(go, layer);
            if (_afterSetLayerRecursively != null)
                foreach (Delegates.SetLayerRecursively_AfterArgs toInvoke in
                         _afterSetLayerRecursively.GetInvocationList())
                    try
                    {
                        _afterSetLayerRecursively.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate GameObject CreateUIElementRoot_AfterArgs(Params_CreateUIElementRoot args, GameObject ret);

        public delegate void CreateUIElementRoot_BeforeArgs(Params_CreateUIElementRoot args);

        public delegate GameObject CreateUIElementRoot_WithArgs(Func<string, Vector2, GameObject> orig, string name,
            Vector2 size);

        public delegate GameObject CreateUIObject_AfterArgs(Params_CreateUIObject args, GameObject ret);

        public delegate void CreateUIObject_BeforeArgs(Params_CreateUIObject args);

        public delegate GameObject CreateUIObject_WithArgs(Func<string, GameObject, GameObject> orig, string name,
            GameObject parent);

        public delegate void SetDefaultColorTransitionValues_AfterArgs(Params_SetDefaultColorTransitionValues args);

        public delegate void SetDefaultColorTransitionValues_BeforeArgs(Params_SetDefaultColorTransitionValues args);

        public delegate void SetDefaultColorTransitionValues_WithArgs(Action<Selectable> orig, Selectable slider);

        public delegate void SetDefaultTextValues_AfterArgs(Params_SetDefaultTextValues args);

        public delegate void SetDefaultTextValues_BeforeArgs(Params_SetDefaultTextValues args);

        public delegate void SetDefaultTextValues_WithArgs(Action<TMP_Text> orig, TMP_Text lbl);

        public delegate void SetLayerRecursively_AfterArgs(Params_SetLayerRecursively args);

        public delegate void SetLayerRecursively_BeforeArgs(Params_SetLayerRecursively args);

        public delegate void SetLayerRecursively_WithArgs(Action<GameObject, int> orig, GameObject go, int layer);

        public delegate void SetParentAndAlign_AfterArgs(Params_SetParentAndAlign args);

        public delegate void SetParentAndAlign_BeforeArgs(Params_SetParentAndAlign args);

        public delegate void SetParentAndAlign_WithArgs(Action<GameObject, GameObject> orig, GameObject child,
            GameObject parent);

        public sealed class Params_CreateUIElementRoot
        {
            public string name;
            public Vector2 size;
        }

        public sealed class Params_CreateUIObject
        {
            public string name;
            public GameObject parent;
        }

        public sealed class Params_SetDefaultTextValues
        {
            public TMP_Text lbl;
        }

        public sealed class Params_SetDefaultColorTransitionValues
        {
            public Selectable slider;
        }

        public sealed class Params_SetParentAndAlign
        {
            public GameObject child;
            public GameObject parent;
        }

        public sealed class Params_SetLayerRecursively
        {
            public GameObject go;
            public int layer;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CreateUIElementRoot_BeforeArgs CreateUIElementRoot
        {
            add
            {
                HookHandler._beforeCreateUIElementRoot += value;
                HookHandler.HookCreateUIElementRoot();
            }
            remove => HookHandler._beforeCreateUIElementRoot -= value;
        }

        public static event Delegates.CreateUIObject_BeforeArgs CreateUIObject
        {
            add
            {
                HookHandler._beforeCreateUIObject += value;
                HookHandler.HookCreateUIObject();
            }
            remove => HookHandler._beforeCreateUIObject -= value;
        }

        public static event Delegates.SetDefaultTextValues_BeforeArgs SetDefaultTextValues
        {
            add
            {
                HookHandler._beforeSetDefaultTextValues += value;
                HookHandler.HookSetDefaultTextValues();
            }
            remove => HookHandler._beforeSetDefaultTextValues -= value;
        }

        public static event Delegates.SetDefaultColorTransitionValues_BeforeArgs SetDefaultColorTransitionValues
        {
            add
            {
                HookHandler._beforeSetDefaultColorTransitionValues += value;
                HookHandler.HookSetDefaultColorTransitionValues();
            }
            remove => HookHandler._beforeSetDefaultColorTransitionValues -= value;
        }

        public static event Delegates.SetParentAndAlign_BeforeArgs SetParentAndAlign
        {
            add
            {
                HookHandler._beforeSetParentAndAlign += value;
                HookHandler.HookSetParentAndAlign();
            }
            remove => HookHandler._beforeSetParentAndAlign -= value;
        }

        public static event Delegates.SetLayerRecursively_BeforeArgs SetLayerRecursively
        {
            add
            {
                HookHandler._beforeSetLayerRecursively += value;
                HookHandler.HookSetLayerRecursively();
            }
            remove => HookHandler._beforeSetLayerRecursively -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CreateUIElementRoot_AfterArgs CreateUIElementRoot
        {
            add
            {
                HookHandler._afterCreateUIElementRoot += value;
                HookHandler.HookCreateUIElementRoot();
            }
            remove => HookHandler._afterCreateUIElementRoot -= value;
        }

        public static event Delegates.CreateUIObject_AfterArgs CreateUIObject
        {
            add
            {
                HookHandler._afterCreateUIObject += value;
                HookHandler.HookCreateUIObject();
            }
            remove => HookHandler._afterCreateUIObject -= value;
        }

        public static event Delegates.SetDefaultTextValues_AfterArgs SetDefaultTextValues
        {
            add
            {
                HookHandler._afterSetDefaultTextValues += value;
                HookHandler.HookSetDefaultTextValues();
            }
            remove => HookHandler._afterSetDefaultTextValues -= value;
        }

        public static event Delegates.SetDefaultColorTransitionValues_AfterArgs SetDefaultColorTransitionValues
        {
            add
            {
                HookHandler._afterSetDefaultColorTransitionValues += value;
                HookHandler.HookSetDefaultColorTransitionValues();
            }
            remove => HookHandler._afterSetDefaultColorTransitionValues -= value;
        }

        public static event Delegates.SetParentAndAlign_AfterArgs SetParentAndAlign
        {
            add
            {
                HookHandler._afterSetParentAndAlign += value;
                HookHandler.HookSetParentAndAlign();
            }
            remove => HookHandler._afterSetParentAndAlign -= value;
        }

        public static event Delegates.SetLayerRecursively_AfterArgs SetLayerRecursively
        {
            add
            {
                HookHandler._afterSetLayerRecursively += value;
                HookHandler.HookSetLayerRecursively();
            }
            remove => HookHandler._afterSetLayerRecursively -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CreateUIElementRoot_WithArgs CreateUIElementRoot
        {
            add => HookEndpointManager.Add<Delegates.CreateUIElementRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "CreateUIElementRoot", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateUIElementRoot_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "CreateUIElementRoot", false), value);
        }

        public static event Delegates.CreateUIObject_WithArgs CreateUIObject
        {
            add => HookEndpointManager.Add<Delegates.CreateUIObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "CreateUIObject", false), value);
            remove => HookEndpointManager.Remove<Delegates.CreateUIObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "CreateUIObject", false), value);
        }

        public static event Delegates.SetDefaultTextValues_WithArgs SetDefaultTextValues
        {
            add => HookEndpointManager.Add<Delegates.SetDefaultTextValues_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetDefaultTextValues", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetDefaultTextValues_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetDefaultTextValues", false), value);
        }

        public static event Delegates.SetDefaultColorTransitionValues_WithArgs SetDefaultColorTransitionValues
        {
            add => HookEndpointManager.Add<Delegates.SetDefaultColorTransitionValues_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetDefaultColorTransitionValues", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.SetDefaultColorTransitionValues_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetDefaultColorTransitionValues", false),
                value);
        }

        public static event Delegates.SetParentAndAlign_WithArgs SetParentAndAlign
        {
            add => HookEndpointManager.Add<Delegates.SetParentAndAlign_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetParentAndAlign", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetParentAndAlign_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetParentAndAlign", false), value);
        }

        public static event Delegates.SetLayerRecursively_WithArgs SetLayerRecursively
        {
            add => HookEndpointManager.Add<Delegates.SetLayerRecursively_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetLayerRecursively", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetLayerRecursively_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_DefaultControls), "SetLayerRecursively", false), value);
        }
    }
}