namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for LimitBehaviour class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLimitBehaviour
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.LimitBehaviour.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.LimitBehaviour.orig_OnDisable orig, LimitBehaviour self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookAdd()
        {
            if (!HookedList.Contains("Add"))
            {
                HookedList.Add("Add");
                On.LimitBehaviour.Add += Add;
            }
        }

        internal static event Delegates.Add_BeforeArgs _beforeAdd;
        internal static event Delegates.Add_NormalArgs _afterAdd;

        private static void Add(On.LimitBehaviour.orig_Add orig, LimitBehaviour self)
        {
            Delegates.Params_Add @params = new()
            {
                self = self
            };
            _beforeAdd?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAdd != null) _afterAdd.Invoke(@params);
        }

        internal static void HookRemoveFirst()
        {
            if (!HookedList.Contains("RemoveFirst"))
            {
                HookedList.Add("RemoveFirst");
                On.LimitBehaviour.RemoveFirst += RemoveFirst;
            }
        }

        internal static event Delegates.RemoveFirst_BeforeArgs _beforeRemoveFirst;
        internal static event Delegates.RemoveFirst_NormalArgs _afterRemoveFirst;

        private static void RemoveFirst(On.LimitBehaviour.orig_RemoveFirst orig, LimitBehaviour self)
        {
            Delegates.Params_RemoveFirst @params = new()
            {
                self = self
            };
            _beforeRemoveFirst?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemoveFirst != null) _afterRemoveFirst.Invoke(@params);
        }

        internal static void HookRemoveSelf()
        {
            if (!HookedList.Contains("RemoveSelf"))
            {
                HookedList.Add("RemoveSelf");
                On.LimitBehaviour.RemoveSelf += RemoveSelf;
            }
        }

        internal static event Delegates.RemoveSelf_BeforeArgs _beforeRemoveSelf;
        internal static event Delegates.RemoveSelf_NormalArgs _afterRemoveSelf;

        private static void RemoveSelf(On.LimitBehaviour.orig_RemoveSelf orig, LimitBehaviour self)
        {
            Delegates.Params_RemoveSelf @params = new()
            {
                self = self
            };
            _beforeRemoveSelf?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRemoveSelf != null) _afterRemoveSelf.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Add_BeforeArgs(Params_Add args);

        public delegate void Add_NormalArgs(Params_Add args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void RemoveFirst_BeforeArgs(Params_RemoveFirst args);

        public delegate void RemoveFirst_NormalArgs(Params_RemoveFirst args);

        public delegate void RemoveSelf_BeforeArgs(Params_RemoveSelf args);

        public delegate void RemoveSelf_NormalArgs(Params_RemoveSelf args);

        public sealed class Params_OnDisable
        {
            public LimitBehaviour self;
        }

        public sealed class Params_Add
        {
            public LimitBehaviour self;
        }

        public sealed class Params_RemoveFirst
        {
            public LimitBehaviour self;
        }

        public sealed class Params_RemoveSelf
        {
            public LimitBehaviour self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Add_BeforeArgs Add
        {
            add
            {
                HookHandler._beforeAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._beforeAdd -= value;
        }

        public static event Delegates.RemoveFirst_BeforeArgs RemoveFirst
        {
            add
            {
                HookHandler._beforeRemoveFirst += value;
                HookHandler.HookRemoveFirst();
            }
            remove => HookHandler._beforeRemoveFirst -= value;
        }

        public static event Delegates.RemoveSelf_BeforeArgs RemoveSelf
        {
            add
            {
                HookHandler._beforeRemoveSelf += value;
                HookHandler.HookRemoveSelf();
            }
            remove => HookHandler._beforeRemoveSelf -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Add_NormalArgs Add
        {
            add
            {
                HookHandler._afterAdd += value;
                HookHandler.HookAdd();
            }
            remove => HookHandler._afterAdd -= value;
        }

        public static event Delegates.RemoveFirst_NormalArgs RemoveFirst
        {
            add
            {
                HookHandler._afterRemoveFirst += value;
                HookHandler.HookRemoveFirst();
            }
            remove => HookHandler._afterRemoveFirst -= value;
        }

        public static event Delegates.RemoveSelf_NormalArgs RemoveSelf
        {
            add
            {
                HookHandler._afterRemoveSelf += value;
                HookHandler.HookRemoveSelf();
            }
            remove => HookHandler._afterRemoveSelf -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.LimitBehaviour.hook_OnDisable OnDisable
        {
            add => On.LimitBehaviour.OnDisable += value;
            remove => On.LimitBehaviour.OnDisable -= value;
        }

        public static event On.LimitBehaviour.hook_Add Add
        {
            add => On.LimitBehaviour.Add += value;
            remove => On.LimitBehaviour.Add -= value;
        }

        public static event On.LimitBehaviour.hook_RemoveFirst RemoveFirst
        {
            add => On.LimitBehaviour.RemoveFirst += value;
            remove => On.LimitBehaviour.RemoveFirst -= value;
        }

        public static event On.LimitBehaviour.hook_RemoveSelf RemoveSelf
        {
            add => On.LimitBehaviour.RemoveSelf += value;
            remove => On.LimitBehaviour.RemoveSelf -= value;
        }
    }
}