using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GrassBehaviour class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGrassBehaviour
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_SharedMaterial()
        {
            if (!HookedList.Contains("get_SharedMaterial"))
            {
                HookedList.Add("get_SharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GrassBehaviour), "get_SharedMaterial"),
                    get_SharedMaterial);
            }
        }

        internal static event Delegates.get_SharedMaterial_BeforeArgs _beforeget_SharedMaterial;
        internal static event Delegates.get_SharedMaterial_NormalArgs _afterget_SharedMaterial;

        private static Material get_SharedMaterial(Func<GrassBehaviour, Material> orig, GrassBehaviour self)
        {
            Delegates.Params_get_SharedMaterial @params = new()
            {
                self = self
            };
            _beforeget_SharedMaterial?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SharedMaterial != null) retVal = _afterget_SharedMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GrassBehaviour.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.GrassBehaviour.orig_Awake orig, GrassBehaviour self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GrassBehaviour.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.GrassBehaviour.orig_Start orig, GrassBehaviour self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GrassBehaviour.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.GrassBehaviour.orig_OnEnable orig, GrassBehaviour self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GrassBehaviour.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.GrassBehaviour.orig_OnDisable orig, GrassBehaviour self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookDelayedInfectedCheck()
        {
            if (!HookedList.Contains("DelayedInfectedCheck"))
            {
                HookedList.Add("DelayedInfectedCheck");
                On.GrassBehaviour.DelayedInfectedCheck += DelayedInfectedCheck;
            }
        }

        internal static event Delegates.DelayedInfectedCheck_BeforeArgs _beforeDelayedInfectedCheck;

        private static IEnumerator DelayedInfectedCheck(On.GrassBehaviour.orig_DelayedInfectedCheck orig,
            GrassBehaviour self)
        {
            Delegates.Params_DelayedInfectedCheck @params = new()
            {
                self = self
            };
            _beforeDelayedInfectedCheck?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.GrassBehaviour.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.GrassBehaviour.orig_LateUpdate orig, GrassBehaviour self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.GrassBehaviour.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_NormalArgs _afterFixedUpdate;

        private static void FixedUpdate(On.GrassBehaviour.orig_FixedUpdate orig, GrassBehaviour self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            _beforeFixedUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null) _afterFixedUpdate.Invoke(@params);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.GrassBehaviour.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.GrassBehaviour.orig_OnTriggerEnter2D orig, GrassBehaviour self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookOnTriggerExit2D()
        {
            if (!HookedList.Contains("OnTriggerExit2D"))
            {
                HookedList.Add("OnTriggerExit2D");
                On.GrassBehaviour.OnTriggerExit2D += OnTriggerExit2D;
            }
        }

        internal static event Delegates.OnTriggerExit2D_BeforeArgs _beforeOnTriggerExit2D;
        internal static event Delegates.OnTriggerExit2D_NormalArgs _afterOnTriggerExit2D;

        private static void OnTriggerExit2D(On.GrassBehaviour.orig_OnTriggerExit2D orig, GrassBehaviour self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerExit2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerExit2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerExit2D != null) _afterOnTriggerExit2D.Invoke(@params);
        }

        internal static void HookCutReact()
        {
            if (!HookedList.Contains("CutReact"))
            {
                HookedList.Add("CutReact");
                On.GrassBehaviour.CutReact += CutReact;
            }
        }

        internal static event Delegates.CutReact_BeforeArgs _beforeCutReact;
        internal static event Delegates.CutReact_NormalArgs _afterCutReact;

        private static void CutReact(On.GrassBehaviour.orig_CutReact orig, GrassBehaviour self, Collider2D collision)
        {
            Delegates.Params_CutReact @params = new()
            {
                self = self, collision = collision
            };
            _beforeCutReact?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterCutReact != null) _afterCutReact.Invoke(@params);
        }

        internal static void HookWindReact()
        {
            if (!HookedList.Contains("WindReact"))
            {
                HookedList.Add("WindReact");
                On.GrassBehaviour.WindReact += WindReact;
            }
        }

        internal static event Delegates.WindReact_BeforeArgs _beforeWindReact;
        internal static event Delegates.WindReact_NormalArgs _afterWindReact;

        private static void WindReact(On.GrassBehaviour.orig_WindReact orig, GrassBehaviour self, Collider2D collision)
        {
            Delegates.Params_WindReact @params = new()
            {
                self = self, collision = collision
            };
            _beforeWindReact?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterWindReact != null) _afterWindReact.Invoke(@params);
        }

        internal static void HookPlayRandomSound()
        {
            if (!HookedList.Contains("PlayRandomSound"))
            {
                HookedList.Add("PlayRandomSound");
                On.GrassBehaviour.PlayRandomSound += PlayRandomSound;
            }
        }

        internal static event Delegates.PlayRandomSound_BeforeArgs _beforePlayRandomSound;
        internal static event Delegates.PlayRandomSound_NormalArgs _afterPlayRandomSound;

        private static void PlayRandomSound(On.GrassBehaviour.orig_PlayRandomSound orig, GrassBehaviour self,
            AudioClip[] clips)
        {
            Delegates.Params_PlayRandomSound @params = new()
            {
                self = self, clips = clips
            };
            _beforePlayRandomSound?.Invoke(@params);
            self = @params.self;
            clips = @params.clips;
            orig(self, clips);
            if (_afterPlayRandomSound != null) _afterPlayRandomSound.Invoke(@params);
        }

        internal static void HookSetPushAmount()
        {
            if (!HookedList.Contains("SetPushAmount"))
            {
                HookedList.Add("SetPushAmount");
                On.GrassBehaviour.SetPushAmount += SetPushAmount;
            }
        }

        internal static event Delegates.SetPushAmount_BeforeArgs _beforeSetPushAmount;
        internal static event Delegates.SetPushAmount_NormalArgs _afterSetPushAmount;

        private static void SetPushAmount(On.GrassBehaviour.orig_SetPushAmount orig, GrassBehaviour self, Renderer rend,
            float value)
        {
            Delegates.Params_SetPushAmount @params = new()
            {
                self = self, rend = rend, value = value
            };
            _beforeSetPushAmount?.Invoke(@params);
            self = @params.self;
            rend = @params.rend;
            value = @params.value;
            orig(self, rend, value);
            if (_afterSetPushAmount != null) _afterSetPushAmount.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CutReact_BeforeArgs(Params_CutReact args);

        public delegate void CutReact_NormalArgs(Params_CutReact args);

        public delegate void DelayedInfectedCheck_BeforeArgs(Params_DelayedInfectedCheck args);

        public delegate IEnumerator DelayedInfectedCheck_NormalArgs(Params_DelayedInfectedCheck args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_NormalArgs(Params_FixedUpdate args);

        public delegate void get_SharedMaterial_BeforeArgs(Params_get_SharedMaterial args);

        public delegate Material get_SharedMaterial_NormalArgs(Params_get_SharedMaterial args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerExit2D_BeforeArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_NormalArgs(Params_OnTriggerExit2D args);

        public delegate void PlayRandomSound_BeforeArgs(Params_PlayRandomSound args);

        public delegate void PlayRandomSound_NormalArgs(Params_PlayRandomSound args);

        public delegate void SetPushAmount_BeforeArgs(Params_SetPushAmount args);

        public delegate void SetPushAmount_NormalArgs(Params_SetPushAmount args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void WindReact_BeforeArgs(Params_WindReact args);

        public delegate void WindReact_NormalArgs(Params_WindReact args);

        public sealed class Params_get_SharedMaterial
        {
            public GrassBehaviour self;
        }

        public sealed class Params_Awake
        {
            public GrassBehaviour self;
        }

        public sealed class Params_Start
        {
            public GrassBehaviour self;
        }

        public sealed class Params_OnEnable
        {
            public GrassBehaviour self;
        }

        public sealed class Params_OnDisable
        {
            public GrassBehaviour self;
        }

        public sealed class Params_DelayedInfectedCheck
        {
            public GrassBehaviour self;
        }

        public sealed class Params_LateUpdate
        {
            public GrassBehaviour self;
        }

        public sealed class Params_FixedUpdate
        {
            public GrassBehaviour self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public GrassBehaviour self;
        }

        public sealed class Params_OnTriggerExit2D
        {
            public Collider2D collision;
            public GrassBehaviour self;
        }

        public sealed class Params_CutReact
        {
            public Collider2D collision;
            public GrassBehaviour self;
        }

        public sealed class Params_WindReact
        {
            public Collider2D collision;
            public GrassBehaviour self;
        }

        public sealed class Params_PlayRandomSound
        {
            public AudioClip[] clips;
            public GrassBehaviour self;
        }

        public sealed class Params_SetPushAmount
        {
            public Renderer rend;
            public GrassBehaviour self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SharedMaterial_BeforeArgs get_SharedMaterial
        {
            add
            {
                HookHandler._beforeget_SharedMaterial += value;
                HookHandler.Hookget_SharedMaterial();
            }
            remove => HookHandler._beforeget_SharedMaterial -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.DelayedInfectedCheck_BeforeArgs DelayedInfectedCheck
        {
            add
            {
                HookHandler._beforeDelayedInfectedCheck += value;
                HookHandler.HookDelayedInfectedCheck();
            }
            remove => HookHandler._beforeDelayedInfectedCheck -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_BeforeArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._beforeOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._beforeOnTriggerExit2D -= value;
        }

        public static event Delegates.CutReact_BeforeArgs CutReact
        {
            add
            {
                HookHandler._beforeCutReact += value;
                HookHandler.HookCutReact();
            }
            remove => HookHandler._beforeCutReact -= value;
        }

        public static event Delegates.WindReact_BeforeArgs WindReact
        {
            add
            {
                HookHandler._beforeWindReact += value;
                HookHandler.HookWindReact();
            }
            remove => HookHandler._beforeWindReact -= value;
        }

        public static event Delegates.PlayRandomSound_BeforeArgs PlayRandomSound
        {
            add
            {
                HookHandler._beforePlayRandomSound += value;
                HookHandler.HookPlayRandomSound();
            }
            remove => HookHandler._beforePlayRandomSound -= value;
        }

        public static event Delegates.SetPushAmount_BeforeArgs SetPushAmount
        {
            add
            {
                HookHandler._beforeSetPushAmount += value;
                HookHandler.HookSetPushAmount();
            }
            remove => HookHandler._beforeSetPushAmount -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SharedMaterial_NormalArgs get_SharedMaterial
        {
            add
            {
                HookHandler._afterget_SharedMaterial += value;
                HookHandler.Hookget_SharedMaterial();
            }
            remove => HookHandler._afterget_SharedMaterial -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.FixedUpdate_NormalArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_NormalArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._afterOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._afterOnTriggerExit2D -= value;
        }

        public static event Delegates.CutReact_NormalArgs CutReact
        {
            add
            {
                HookHandler._afterCutReact += value;
                HookHandler.HookCutReact();
            }
            remove => HookHandler._afterCutReact -= value;
        }

        public static event Delegates.WindReact_NormalArgs WindReact
        {
            add
            {
                HookHandler._afterWindReact += value;
                HookHandler.HookWindReact();
            }
            remove => HookHandler._afterWindReact -= value;
        }

        public static event Delegates.PlayRandomSound_NormalArgs PlayRandomSound
        {
            add
            {
                HookHandler._afterPlayRandomSound += value;
                HookHandler.HookPlayRandomSound();
            }
            remove => HookHandler._afterPlayRandomSound -= value;
        }

        public static event Delegates.SetPushAmount_NormalArgs SetPushAmount
        {
            add
            {
                HookHandler._afterSetPushAmount += value;
                HookHandler.HookSetPushAmount();
            }
            remove => HookHandler._afterSetPushAmount -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SharedMaterial_NormalArgs get_SharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_SharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrassBehaviour), "get_SharedMaterial"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SharedMaterial_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrassBehaviour), "get_SharedMaterial"), value);
        }

        public static event On.GrassBehaviour.hook_Awake Awake
        {
            add => On.GrassBehaviour.Awake += value;
            remove => On.GrassBehaviour.Awake -= value;
        }

        public static event On.GrassBehaviour.hook_Start Start
        {
            add => On.GrassBehaviour.Start += value;
            remove => On.GrassBehaviour.Start -= value;
        }

        public static event On.GrassBehaviour.hook_OnEnable OnEnable
        {
            add => On.GrassBehaviour.OnEnable += value;
            remove => On.GrassBehaviour.OnEnable -= value;
        }

        public static event On.GrassBehaviour.hook_OnDisable OnDisable
        {
            add => On.GrassBehaviour.OnDisable += value;
            remove => On.GrassBehaviour.OnDisable -= value;
        }

        public static event On.GrassBehaviour.hook_DelayedInfectedCheck DelayedInfectedCheck
        {
            add => On.GrassBehaviour.DelayedInfectedCheck += value;
            remove => On.GrassBehaviour.DelayedInfectedCheck -= value;
        }

        public static event On.GrassBehaviour.hook_LateUpdate LateUpdate
        {
            add => On.GrassBehaviour.LateUpdate += value;
            remove => On.GrassBehaviour.LateUpdate -= value;
        }

        public static event On.GrassBehaviour.hook_FixedUpdate FixedUpdate
        {
            add => On.GrassBehaviour.FixedUpdate += value;
            remove => On.GrassBehaviour.FixedUpdate -= value;
        }

        public static event On.GrassBehaviour.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.GrassBehaviour.OnTriggerEnter2D += value;
            remove => On.GrassBehaviour.OnTriggerEnter2D -= value;
        }

        public static event On.GrassBehaviour.hook_OnTriggerExit2D OnTriggerExit2D
        {
            add => On.GrassBehaviour.OnTriggerExit2D += value;
            remove => On.GrassBehaviour.OnTriggerExit2D -= value;
        }

        public static event On.GrassBehaviour.hook_CutReact CutReact
        {
            add => On.GrassBehaviour.CutReact += value;
            remove => On.GrassBehaviour.CutReact -= value;
        }

        public static event On.GrassBehaviour.hook_WindReact WindReact
        {
            add => On.GrassBehaviour.WindReact += value;
            remove => On.GrassBehaviour.WindReact -= value;
        }

        public static event On.GrassBehaviour.hook_PlayRandomSound PlayRandomSound
        {
            add => On.GrassBehaviour.PlayRandomSound += value;
            remove => On.GrassBehaviour.PlayRandomSound -= value;
        }

        public static event On.GrassBehaviour.hook_SetPushAmount SetPushAmount
        {
            add => On.GrassBehaviour.SetPushAmount += value;
            remove => On.GrassBehaviour.SetPushAmount -= value;
        }
    }
}