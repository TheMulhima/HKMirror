using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for GrassBehaviour class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGrassBehaviour
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_SharedMaterial()
        {
            if (!HookedList.Contains("get_SharedMaterial"))
            {
                HookedList.Add("get_SharedMaterial");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GrassBehaviour), "get_SharedMaterial", true),
                    get_SharedMaterial);
            }
        }

        internal static event Delegates.get_SharedMaterial_BeforeArgs _beforeget_SharedMaterial;
        internal static event Delegates.get_SharedMaterial_AfterArgs _afterget_SharedMaterial;

        private static UnityEngine.Material get_SharedMaterial(Func<GrassBehaviour, UnityEngine.Material> orig,
            GrassBehaviour self)
        {
            Delegates.Params_get_SharedMaterial @params = new()
            {
                self = self
            };
            if (_beforeget_SharedMaterial != null)
            {
                foreach (Delegates.get_SharedMaterial_BeforeArgs toInvoke in
                         _beforeget_SharedMaterial.GetInvocationList())
                {
                    try
                    {
                        _beforeget_SharedMaterial?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SharedMaterial != null)
            {
                foreach (Delegates.get_SharedMaterial_AfterArgs toInvoke in
                         _afterget_SharedMaterial.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_SharedMaterial.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GrassBehaviour.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GrassBehaviour.orig_Awake orig, GrassBehaviour self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GrassBehaviour.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GrassBehaviour.orig_Start orig, GrassBehaviour self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.GrassBehaviour.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.GrassBehaviour.orig_OnEnable orig, GrassBehaviour self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.GrassBehaviour.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.GrassBehaviour.orig_OnDisable orig, GrassBehaviour self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDelayedInfectedCheck()
        {
            if (!HookedList.Contains("DelayedInfectedCheck"))
            {
                HookedList.Add("DelayedInfectedCheck");
                On.GrassBehaviour.DelayedInfectedCheck += DelayedInfectedCheck;
            }
        }

        internal static event Delegates.DelayedInfectedCheck_BeforeArgs _beforeDelayedInfectedCheck;

        private static System.Collections.IEnumerator DelayedInfectedCheck(
            On.GrassBehaviour.orig_DelayedInfectedCheck orig, GrassBehaviour self)
        {
            Delegates.Params_DelayedInfectedCheck @params = new()
            {
                self = self
            };
            if (_beforeDelayedInfectedCheck != null)
            {
                foreach (Delegates.DelayedInfectedCheck_BeforeArgs toInvoke in _beforeDelayedInfectedCheck
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeDelayedInfectedCheck?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.GrassBehaviour.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

        private static void LateUpdate(On.GrassBehaviour.orig_LateUpdate orig, GrassBehaviour self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            if (_beforeLateUpdate != null)
            {
                foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null)
            {
                foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.GrassBehaviour.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.GrassBehaviour.orig_FixedUpdate orig, GrassBehaviour self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
            {
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
            {
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.GrassBehaviour.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_AfterArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.GrassBehaviour.orig_OnTriggerEnter2D orig, GrassBehaviour self,
            UnityEngine.Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_BeforeArgs toInvoke in _beforeOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null)
            {
                foreach (Delegates.OnTriggerEnter2D_AfterArgs toInvoke in _afterOnTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnTriggerExit2D()
        {
            if (!HookedList.Contains("OnTriggerExit2D"))
            {
                HookedList.Add("OnTriggerExit2D");
                On.GrassBehaviour.OnTriggerExit2D += OnTriggerExit2D;
            }
        }

        internal static event Delegates.OnTriggerExit2D_BeforeArgs _beforeOnTriggerExit2D;
        internal static event Delegates.OnTriggerExit2D_AfterArgs _afterOnTriggerExit2D;

        private static void OnTriggerExit2D(On.GrassBehaviour.orig_OnTriggerExit2D orig, GrassBehaviour self,
            UnityEngine.Collider2D collision)
        {
            Delegates.Params_OnTriggerExit2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerExit2D != null)
            {
                foreach (Delegates.OnTriggerExit2D_BeforeArgs toInvoke in _beforeOnTriggerExit2D.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTriggerExit2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerExit2D != null)
            {
                foreach (Delegates.OnTriggerExit2D_AfterArgs toInvoke in _afterOnTriggerExit2D.GetInvocationList())
                {
                    try
                    {
                        _afterOnTriggerExit2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCutReact()
        {
            if (!HookedList.Contains("CutReact"))
            {
                HookedList.Add("CutReact");
                On.GrassBehaviour.CutReact += CutReact;
            }
        }

        internal static event Delegates.CutReact_BeforeArgs _beforeCutReact;
        internal static event Delegates.CutReact_AfterArgs _afterCutReact;

        private static void CutReact(On.GrassBehaviour.orig_CutReact orig, GrassBehaviour self,
            UnityEngine.Collider2D collision)
        {
            Delegates.Params_CutReact @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeCutReact != null)
            {
                foreach (Delegates.CutReact_BeforeArgs toInvoke in _beforeCutReact.GetInvocationList())
                {
                    try
                    {
                        _beforeCutReact?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterCutReact != null)
            {
                foreach (Delegates.CutReact_AfterArgs toInvoke in _afterCutReact.GetInvocationList())
                {
                    try
                    {
                        _afterCutReact.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWindReact()
        {
            if (!HookedList.Contains("WindReact"))
            {
                HookedList.Add("WindReact");
                On.GrassBehaviour.WindReact += WindReact;
            }
        }

        internal static event Delegates.WindReact_BeforeArgs _beforeWindReact;
        internal static event Delegates.WindReact_AfterArgs _afterWindReact;

        private static void WindReact(On.GrassBehaviour.orig_WindReact orig, GrassBehaviour self,
            UnityEngine.Collider2D collision)
        {
            Delegates.Params_WindReact @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeWindReact != null)
            {
                foreach (Delegates.WindReact_BeforeArgs toInvoke in _beforeWindReact.GetInvocationList())
                {
                    try
                    {
                        _beforeWindReact?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterWindReact != null)
            {
                foreach (Delegates.WindReact_AfterArgs toInvoke in _afterWindReact.GetInvocationList())
                {
                    try
                    {
                        _afterWindReact.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookPlayRandomSound()
        {
            if (!HookedList.Contains("PlayRandomSound"))
            {
                HookedList.Add("PlayRandomSound");
                On.GrassBehaviour.PlayRandomSound += PlayRandomSound;
            }
        }

        internal static event Delegates.PlayRandomSound_BeforeArgs _beforePlayRandomSound;
        internal static event Delegates.PlayRandomSound_AfterArgs _afterPlayRandomSound;

        private static void PlayRandomSound(On.GrassBehaviour.orig_PlayRandomSound orig, GrassBehaviour self,
            UnityEngine.AudioClip[] clips)
        {
            Delegates.Params_PlayRandomSound @params = new()
            {
                self = self, clips = clips
            };
            if (_beforePlayRandomSound != null)
            {
                foreach (Delegates.PlayRandomSound_BeforeArgs toInvoke in _beforePlayRandomSound.GetInvocationList())
                {
                    try
                    {
                        _beforePlayRandomSound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            clips = @params.clips;
            orig(self, clips);
            if (_afterPlayRandomSound != null)
            {
                foreach (Delegates.PlayRandomSound_AfterArgs toInvoke in _afterPlayRandomSound.GetInvocationList())
                {
                    try
                    {
                        _afterPlayRandomSound.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetPushAmount()
        {
            if (!HookedList.Contains("SetPushAmount"))
            {
                HookedList.Add("SetPushAmount");
                On.GrassBehaviour.SetPushAmount += SetPushAmount;
            }
        }

        internal static event Delegates.SetPushAmount_BeforeArgs _beforeSetPushAmount;
        internal static event Delegates.SetPushAmount_AfterArgs _afterSetPushAmount;

        private static void SetPushAmount(On.GrassBehaviour.orig_SetPushAmount orig, GrassBehaviour self,
            UnityEngine.Renderer rend, float value)
        {
            Delegates.Params_SetPushAmount @params = new()
            {
                self = self, rend = rend, value = value
            };
            if (_beforeSetPushAmount != null)
            {
                foreach (Delegates.SetPushAmount_BeforeArgs toInvoke in _beforeSetPushAmount.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPushAmount?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            rend = @params.rend;
            value = @params.value;
            orig(self, rend, value);
            if (_afterSetPushAmount != null)
            {
                foreach (Delegates.SetPushAmount_AfterArgs toInvoke in _afterSetPushAmount.GetInvocationList())
                {
                    try
                    {
                        _afterSetPushAmount.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_SharedMaterial
        {
            public GrassBehaviour self;
        }

        public delegate void get_SharedMaterial_BeforeArgs(Params_get_SharedMaterial args);

        public delegate UnityEngine.Material get_SharedMaterial_AfterArgs(Params_get_SharedMaterial args,
            UnityEngine.Material ret);

        public delegate UnityEngine.Material get_SharedMaterial_WithArgs(
            Func<GrassBehaviour, UnityEngine.Material> orig, GrassBehaviour self);

        public sealed class Params_Awake
        {
            public GrassBehaviour self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GrassBehaviour> orig, GrassBehaviour self);

        public sealed class Params_Start
        {
            public GrassBehaviour self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GrassBehaviour> orig, GrassBehaviour self);

        public sealed class Params_OnEnable
        {
            public GrassBehaviour self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<GrassBehaviour> orig, GrassBehaviour self);

        public sealed class Params_OnDisable
        {
            public GrassBehaviour self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<GrassBehaviour> orig, GrassBehaviour self);

        public sealed class Params_DelayedInfectedCheck
        {
            public GrassBehaviour self;
        }

        public delegate void DelayedInfectedCheck_BeforeArgs(Params_DelayedInfectedCheck args);

        public delegate System.Collections.IEnumerator DelayedInfectedCheck_AfterArgs(Params_DelayedInfectedCheck args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator DelayedInfectedCheck_WithArgs(
            Func<GrassBehaviour, System.Collections.IEnumerator> orig, GrassBehaviour self);

        public sealed class Params_LateUpdate
        {
            public GrassBehaviour self;
        }

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

        public delegate void LateUpdate_WithArgs(Action<GrassBehaviour> orig, GrassBehaviour self);

        public sealed class Params_FixedUpdate
        {
            public GrassBehaviour self;
        }

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<GrassBehaviour> orig, GrassBehaviour self);

        public sealed class Params_OnTriggerEnter2D
        {
            public GrassBehaviour self;
            public UnityEngine.Collider2D collision;
        }

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_AfterArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_WithArgs(Action<GrassBehaviour, UnityEngine.Collider2D> orig,
            GrassBehaviour self, UnityEngine.Collider2D collision);

        public sealed class Params_OnTriggerExit2D
        {
            public GrassBehaviour self;
            public UnityEngine.Collider2D collision;
        }

        public delegate void OnTriggerExit2D_BeforeArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_AfterArgs(Params_OnTriggerExit2D args);

        public delegate void OnTriggerExit2D_WithArgs(Action<GrassBehaviour, UnityEngine.Collider2D> orig,
            GrassBehaviour self, UnityEngine.Collider2D collision);

        public sealed class Params_CutReact
        {
            public GrassBehaviour self;
            public UnityEngine.Collider2D collision;
        }

        public delegate void CutReact_BeforeArgs(Params_CutReact args);

        public delegate void CutReact_AfterArgs(Params_CutReact args);

        public delegate void CutReact_WithArgs(Action<GrassBehaviour, UnityEngine.Collider2D> orig, GrassBehaviour self,
            UnityEngine.Collider2D collision);

        public sealed class Params_WindReact
        {
            public GrassBehaviour self;
            public UnityEngine.Collider2D collision;
        }

        public delegate void WindReact_BeforeArgs(Params_WindReact args);

        public delegate void WindReact_AfterArgs(Params_WindReact args);

        public delegate void WindReact_WithArgs(Action<GrassBehaviour, UnityEngine.Collider2D> orig,
            GrassBehaviour self, UnityEngine.Collider2D collision);

        public sealed class Params_PlayRandomSound
        {
            public GrassBehaviour self;
            public UnityEngine.AudioClip[] clips;
        }

        public delegate void PlayRandomSound_BeforeArgs(Params_PlayRandomSound args);

        public delegate void PlayRandomSound_AfterArgs(Params_PlayRandomSound args);

        public delegate void PlayRandomSound_WithArgs(Action<GrassBehaviour, UnityEngine.AudioClip[]> orig,
            GrassBehaviour self, UnityEngine.AudioClip[] clips);

        public sealed class Params_SetPushAmount
        {
            public GrassBehaviour self;
            public UnityEngine.Renderer rend;
            public float value;
        }

        public delegate void SetPushAmount_BeforeArgs(Params_SetPushAmount args);

        public delegate void SetPushAmount_AfterArgs(Params_SetPushAmount args);

        public delegate void SetPushAmount_WithArgs(Action<GrassBehaviour, UnityEngine.Renderer, float> orig,
            GrassBehaviour self, UnityEngine.Renderer rend, float value);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_SharedMaterial_BeforeArgs get_SharedMaterial
        {
            add
            {
                HookHandler._beforeget_SharedMaterial += value;
                HookHandler.Hookget_SharedMaterial();
            }
            remove => HookHandler._beforeget_SharedMaterial -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.DelayedInfectedCheck_BeforeArgs DelayedInfectedCheck
        {
            add
            {
                HookHandler._beforeDelayedInfectedCheck += value;
                HookHandler.HookDelayedInfectedCheck();
            }
            remove => HookHandler._beforeDelayedInfectedCheck -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_BeforeArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._beforeOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._beforeOnTriggerExit2D -= value;
        }

        public static event Delegates.CutReact_BeforeArgs CutReact
        {
            add
            {
                HookHandler._beforeCutReact += value;
                HookHandler.HookCutReact();
            }
            remove => HookHandler._beforeCutReact -= value;
        }

        public static event Delegates.WindReact_BeforeArgs WindReact
        {
            add
            {
                HookHandler._beforeWindReact += value;
                HookHandler.HookWindReact();
            }
            remove => HookHandler._beforeWindReact -= value;
        }

        public static event Delegates.PlayRandomSound_BeforeArgs PlayRandomSound
        {
            add
            {
                HookHandler._beforePlayRandomSound += value;
                HookHandler.HookPlayRandomSound();
            }
            remove => HookHandler._beforePlayRandomSound -= value;
        }

        public static event Delegates.SetPushAmount_BeforeArgs SetPushAmount
        {
            add
            {
                HookHandler._beforeSetPushAmount += value;
                HookHandler.HookSetPushAmount();
            }
            remove => HookHandler._beforeSetPushAmount -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_SharedMaterial_AfterArgs get_SharedMaterial
        {
            add
            {
                HookHandler._afterget_SharedMaterial += value;
                HookHandler.Hookget_SharedMaterial();
            }
            remove => HookHandler._afterget_SharedMaterial -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.LateUpdate_AfterArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.OnTriggerEnter2D_AfterArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.OnTriggerExit2D_AfterArgs OnTriggerExit2D
        {
            add
            {
                HookHandler._afterOnTriggerExit2D += value;
                HookHandler.HookOnTriggerExit2D();
            }
            remove => HookHandler._afterOnTriggerExit2D -= value;
        }

        public static event Delegates.CutReact_AfterArgs CutReact
        {
            add
            {
                HookHandler._afterCutReact += value;
                HookHandler.HookCutReact();
            }
            remove => HookHandler._afterCutReact -= value;
        }

        public static event Delegates.WindReact_AfterArgs WindReact
        {
            add
            {
                HookHandler._afterWindReact += value;
                HookHandler.HookWindReact();
            }
            remove => HookHandler._afterWindReact -= value;
        }

        public static event Delegates.PlayRandomSound_AfterArgs PlayRandomSound
        {
            add
            {
                HookHandler._afterPlayRandomSound += value;
                HookHandler.HookPlayRandomSound();
            }
            remove => HookHandler._afterPlayRandomSound -= value;
        }

        public static event Delegates.SetPushAmount_AfterArgs SetPushAmount
        {
            add
            {
                HookHandler._afterSetPushAmount += value;
                HookHandler.HookSetPushAmount();
            }
            remove => HookHandler._afterSetPushAmount -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_SharedMaterial_WithArgs get_SharedMaterial
        {
            add => HookEndpointManager.Add<Delegates.get_SharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrassBehaviour), "get_SharedMaterial", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_SharedMaterial_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GrassBehaviour), "get_SharedMaterial", true), value);
        }

        public static event On.GrassBehaviour.hook_Awake Awake
        {
            add => On.GrassBehaviour.Awake += value;
            remove => On.GrassBehaviour.Awake -= value;
        }

        public static event On.GrassBehaviour.hook_Start Start
        {
            add => On.GrassBehaviour.Start += value;
            remove => On.GrassBehaviour.Start -= value;
        }

        public static event On.GrassBehaviour.hook_OnEnable OnEnable
        {
            add => On.GrassBehaviour.OnEnable += value;
            remove => On.GrassBehaviour.OnEnable -= value;
        }

        public static event On.GrassBehaviour.hook_OnDisable OnDisable
        {
            add => On.GrassBehaviour.OnDisable += value;
            remove => On.GrassBehaviour.OnDisable -= value;
        }

        public static event On.GrassBehaviour.hook_DelayedInfectedCheck DelayedInfectedCheck
        {
            add => On.GrassBehaviour.DelayedInfectedCheck += value;
            remove => On.GrassBehaviour.DelayedInfectedCheck -= value;
        }

        public static event On.GrassBehaviour.hook_LateUpdate LateUpdate
        {
            add => On.GrassBehaviour.LateUpdate += value;
            remove => On.GrassBehaviour.LateUpdate -= value;
        }

        public static event On.GrassBehaviour.hook_FixedUpdate FixedUpdate
        {
            add => On.GrassBehaviour.FixedUpdate += value;
            remove => On.GrassBehaviour.FixedUpdate -= value;
        }

        public static event On.GrassBehaviour.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.GrassBehaviour.OnTriggerEnter2D += value;
            remove => On.GrassBehaviour.OnTriggerEnter2D -= value;
        }

        public static event On.GrassBehaviour.hook_OnTriggerExit2D OnTriggerExit2D
        {
            add => On.GrassBehaviour.OnTriggerExit2D += value;
            remove => On.GrassBehaviour.OnTriggerExit2D -= value;
        }

        public static event On.GrassBehaviour.hook_CutReact CutReact
        {
            add => On.GrassBehaviour.CutReact += value;
            remove => On.GrassBehaviour.CutReact -= value;
        }

        public static event On.GrassBehaviour.hook_WindReact WindReact
        {
            add => On.GrassBehaviour.WindReact += value;
            remove => On.GrassBehaviour.WindReact -= value;
        }

        public static event On.GrassBehaviour.hook_PlayRandomSound PlayRandomSound
        {
            add => On.GrassBehaviour.PlayRandomSound += value;
            remove => On.GrassBehaviour.PlayRandomSound -= value;
        }

        public static event On.GrassBehaviour.hook_SetPushAmount SetPushAmount
        {
            add => On.GrassBehaviour.SetPushAmount += value;
            remove => On.GrassBehaviour.SetPushAmount -= value;
        }
    }
}