namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for OverscanSetting class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOverscanSetting
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.OverscanSetting.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.OverscanSetting.orig_Start orig, OverscanSetting self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdateValue()
        {
            if (!HookedList.Contains("UpdateValue"))
            {
                HookedList.Add("UpdateValue");
                On.OverscanSetting.UpdateValue += UpdateValue;
            }
        }

        internal static event Delegates.UpdateValue_BeforeArgs _beforeUpdateValue;
        internal static event Delegates.UpdateValue_NormalArgs _afterUpdateValue;

        private static void UpdateValue(On.OverscanSetting.orig_UpdateValue orig, OverscanSetting self)
        {
            Delegates.Params_UpdateValue @params = new()
            {
                self = self
            };
            _beforeUpdateValue?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateValue != null) _afterUpdateValue.Invoke(@params);
        }

        internal static void HookUpdateTextValue()
        {
            if (!HookedList.Contains("UpdateTextValue"))
            {
                HookedList.Add("UpdateTextValue");
                On.OverscanSetting.UpdateTextValue += UpdateTextValue;
            }
        }

        internal static event Delegates.UpdateTextValue_BeforeArgs _beforeUpdateTextValue;
        internal static event Delegates.UpdateTextValue_NormalArgs _afterUpdateTextValue;

        private static void UpdateTextValue(On.OverscanSetting.orig_UpdateTextValue orig, OverscanSetting self,
            float value)
        {
            Delegates.Params_UpdateTextValue @params = new()
            {
                self = self, value = value
            };
            _beforeUpdateTextValue?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterUpdateTextValue != null) _afterUpdateTextValue.Invoke(@params);
        }

        internal static void HookSetOverscan()
        {
            if (!HookedList.Contains("SetOverscan"))
            {
                HookedList.Add("SetOverscan");
                On.OverscanSetting.SetOverscan += SetOverscan;
            }
        }

        internal static event Delegates.SetOverscan_BeforeArgs _beforeSetOverscan;
        internal static event Delegates.SetOverscan_NormalArgs _afterSetOverscan;

        private static void SetOverscan(On.OverscanSetting.orig_SetOverscan orig, OverscanSetting self, float value)
        {
            Delegates.Params_SetOverscan @params = new()
            {
                self = self, value = value
            };
            _beforeSetOverscan?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetOverscan != null) _afterSetOverscan.Invoke(@params);
        }

        internal static void HookRefreshValueFromSettings()
        {
            if (!HookedList.Contains("RefreshValueFromSettings"))
            {
                HookedList.Add("RefreshValueFromSettings");
                On.OverscanSetting.RefreshValueFromSettings += RefreshValueFromSettings;
            }
        }

        internal static event Delegates.RefreshValueFromSettings_BeforeArgs _beforeRefreshValueFromSettings;
        internal static event Delegates.RefreshValueFromSettings_NormalArgs _afterRefreshValueFromSettings;

        private static void RefreshValueFromSettings(On.OverscanSetting.orig_RefreshValueFromSettings orig,
            OverscanSetting self)
        {
            Delegates.Params_RefreshValueFromSettings @params = new()
            {
                self = self
            };
            _beforeRefreshValueFromSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshValueFromSettings != null) _afterRefreshValueFromSettings.Invoke(@params);
        }

        internal static void HookDoneMode()
        {
            if (!HookedList.Contains("DoneMode"))
            {
                HookedList.Add("DoneMode");
                On.OverscanSetting.DoneMode += DoneMode;
            }
        }

        internal static event Delegates.DoneMode_BeforeArgs _beforeDoneMode;
        internal static event Delegates.DoneMode_NormalArgs _afterDoneMode;

        private static void DoneMode(On.OverscanSetting.orig_DoneMode orig, OverscanSetting self)
        {
            Delegates.Params_DoneMode @params = new()
            {
                self = self
            };
            _beforeDoneMode?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoneMode != null) _afterDoneMode.Invoke(@params);
        }

        internal static void HookNormalMode()
        {
            if (!HookedList.Contains("NormalMode"))
            {
                HookedList.Add("NormalMode");
                On.OverscanSetting.NormalMode += NormalMode;
            }
        }

        internal static event Delegates.NormalMode_BeforeArgs _beforeNormalMode;
        internal static event Delegates.NormalMode_NormalArgs _afterNormalMode;

        private static void NormalMode(On.OverscanSetting.orig_NormalMode orig, OverscanSetting self)
        {
            Delegates.Params_NormalMode @params = new()
            {
                self = self
            };
            _beforeNormalMode?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterNormalMode != null) _afterNormalMode.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoneMode_BeforeArgs(Params_DoneMode args);

        public delegate void DoneMode_NormalArgs(Params_DoneMode args);

        public delegate void NormalMode_BeforeArgs(Params_NormalMode args);

        public delegate void NormalMode_NormalArgs(Params_NormalMode args);

        public delegate void RefreshValueFromSettings_BeforeArgs(Params_RefreshValueFromSettings args);

        public delegate void RefreshValueFromSettings_NormalArgs(Params_RefreshValueFromSettings args);

        public delegate void SetOverscan_BeforeArgs(Params_SetOverscan args);

        public delegate void SetOverscan_NormalArgs(Params_SetOverscan args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UpdateTextValue_BeforeArgs(Params_UpdateTextValue args);

        public delegate void UpdateTextValue_NormalArgs(Params_UpdateTextValue args);

        public delegate void UpdateValue_BeforeArgs(Params_UpdateValue args);

        public delegate void UpdateValue_NormalArgs(Params_UpdateValue args);

        public sealed class Params_Start
        {
            public OverscanSetting self;
        }

        public sealed class Params_UpdateValue
        {
            public OverscanSetting self;
        }

        public sealed class Params_UpdateTextValue
        {
            public OverscanSetting self;
            public float value;
        }

        public sealed class Params_SetOverscan
        {
            public OverscanSetting self;
            public float value;
        }

        public sealed class Params_RefreshValueFromSettings
        {
            public OverscanSetting self;
        }

        public sealed class Params_DoneMode
        {
            public OverscanSetting self;
        }

        public sealed class Params_NormalMode
        {
            public OverscanSetting self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdateValue_BeforeArgs UpdateValue
        {
            add
            {
                HookHandler._beforeUpdateValue += value;
                HookHandler.HookUpdateValue();
            }
            remove => HookHandler._beforeUpdateValue -= value;
        }

        public static event Delegates.UpdateTextValue_BeforeArgs UpdateTextValue
        {
            add
            {
                HookHandler._beforeUpdateTextValue += value;
                HookHandler.HookUpdateTextValue();
            }
            remove => HookHandler._beforeUpdateTextValue -= value;
        }

        public static event Delegates.SetOverscan_BeforeArgs SetOverscan
        {
            add
            {
                HookHandler._beforeSetOverscan += value;
                HookHandler.HookSetOverscan();
            }
            remove => HookHandler._beforeSetOverscan -= value;
        }

        public static event Delegates.RefreshValueFromSettings_BeforeArgs RefreshValueFromSettings
        {
            add
            {
                HookHandler._beforeRefreshValueFromSettings += value;
                HookHandler.HookRefreshValueFromSettings();
            }
            remove => HookHandler._beforeRefreshValueFromSettings -= value;
        }

        public static event Delegates.DoneMode_BeforeArgs DoneMode
        {
            add
            {
                HookHandler._beforeDoneMode += value;
                HookHandler.HookDoneMode();
            }
            remove => HookHandler._beforeDoneMode -= value;
        }

        public static event Delegates.NormalMode_BeforeArgs NormalMode
        {
            add
            {
                HookHandler._beforeNormalMode += value;
                HookHandler.HookNormalMode();
            }
            remove => HookHandler._beforeNormalMode -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdateValue_NormalArgs UpdateValue
        {
            add
            {
                HookHandler._afterUpdateValue += value;
                HookHandler.HookUpdateValue();
            }
            remove => HookHandler._afterUpdateValue -= value;
        }

        public static event Delegates.UpdateTextValue_NormalArgs UpdateTextValue
        {
            add
            {
                HookHandler._afterUpdateTextValue += value;
                HookHandler.HookUpdateTextValue();
            }
            remove => HookHandler._afterUpdateTextValue -= value;
        }

        public static event Delegates.SetOverscan_NormalArgs SetOverscan
        {
            add
            {
                HookHandler._afterSetOverscan += value;
                HookHandler.HookSetOverscan();
            }
            remove => HookHandler._afterSetOverscan -= value;
        }

        public static event Delegates.RefreshValueFromSettings_NormalArgs RefreshValueFromSettings
        {
            add
            {
                HookHandler._afterRefreshValueFromSettings += value;
                HookHandler.HookRefreshValueFromSettings();
            }
            remove => HookHandler._afterRefreshValueFromSettings -= value;
        }

        public static event Delegates.DoneMode_NormalArgs DoneMode
        {
            add
            {
                HookHandler._afterDoneMode += value;
                HookHandler.HookDoneMode();
            }
            remove => HookHandler._afterDoneMode -= value;
        }

        public static event Delegates.NormalMode_NormalArgs NormalMode
        {
            add
            {
                HookHandler._afterNormalMode += value;
                HookHandler.HookNormalMode();
            }
            remove => HookHandler._afterNormalMode -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.OverscanSetting.hook_Start Start
        {
            add => On.OverscanSetting.Start += value;
            remove => On.OverscanSetting.Start -= value;
        }

        public static event On.OverscanSetting.hook_UpdateValue UpdateValue
        {
            add => On.OverscanSetting.UpdateValue += value;
            remove => On.OverscanSetting.UpdateValue -= value;
        }

        public static event On.OverscanSetting.hook_UpdateTextValue UpdateTextValue
        {
            add => On.OverscanSetting.UpdateTextValue += value;
            remove => On.OverscanSetting.UpdateTextValue -= value;
        }

        public static event On.OverscanSetting.hook_SetOverscan SetOverscan
        {
            add => On.OverscanSetting.SetOverscan += value;
            remove => On.OverscanSetting.SetOverscan -= value;
        }

        public static event On.OverscanSetting.hook_RefreshValueFromSettings RefreshValueFromSettings
        {
            add => On.OverscanSetting.RefreshValueFromSettings += value;
            remove => On.OverscanSetting.RefreshValueFromSettings -= value;
        }

        public static event On.OverscanSetting.hook_DoneMode DoneMode
        {
            add => On.OverscanSetting.DoneMode += value;
            remove => On.OverscanSetting.DoneMode -= value;
        }

        public static event On.OverscanSetting.hook_NormalMode NormalMode
        {
            add => On.OverscanSetting.NormalMode += value;
            remove => On.OverscanSetting.NormalMode -= value;
        }
    }
}