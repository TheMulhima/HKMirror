using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for AutoSelector class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAutoSelector
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_Start()
        {
            if (!HookedList.Contains("get_Start"))
            {
                HookedList.Add("get_Start");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "get_Start", true),
                    get_Start);
            }
        }

        internal static event Delegates.get_Start_BeforeArgs _beforeget_Start;
        internal static event Delegates.get_Start_AfterArgs _afterget_Start;

        private static UnityEngine.UI.Selectable get_Start(
            Func<Modding.Menu.Components.AutoSelector, UnityEngine.UI.Selectable> orig,
            Modding.Menu.Components.AutoSelector self)
        {
            Delegates.Params_get_Start @params = new()
            {
                self = self
            };
            if (_beforeget_Start != null)
            {
                foreach (Delegates.get_Start_BeforeArgs toInvoke in _beforeget_Start.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Start?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Start != null)
            {
                foreach (Delegates.get_Start_AfterArgs toInvoke in _afterget_Start.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Start.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Start()
        {
            if (!HookedList.Contains("set_Start"))
            {
                HookedList.Add("set_Start");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "set_Start", true),
                    set_Start);
            }
        }

        internal static event Delegates.set_Start_BeforeArgs _beforeset_Start;
        internal static event Delegates.set_Start_AfterArgs _afterset_Start;

        private static void set_Start(Action<Modding.Menu.Components.AutoSelector, UnityEngine.UI.Selectable> orig,
            Modding.Menu.Components.AutoSelector self, UnityEngine.UI.Selectable value)
        {
            Delegates.Params_set_Start @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Start != null)
            {
                foreach (Delegates.set_Start_BeforeArgs toInvoke in _beforeset_Start.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Start?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Start != null)
            {
                foreach (Delegates.set_Start_AfterArgs toInvoke in _afterset_Start.GetInvocationList())
                {
                    try
                    {
                        _afterset_Start.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "OnEnable", true),
                    OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(Action<Modding.Menu.Components.AutoSelector> orig,
            Modding.Menu.Components.AutoSelector self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSelectDelayed()
        {
            if (!HookedList.Contains("SelectDelayed"))
            {
                HookedList.Add("SelectDelayed");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "SelectDelayed", true),
                    SelectDelayed);
            }
        }

        internal static event Delegates.SelectDelayed_BeforeArgs _beforeSelectDelayed;

        private static System.Collections.IEnumerator SelectDelayed(
            Func<Modding.Menu.Components.AutoSelector, UnityEngine.UI.Selectable, System.Collections.IEnumerator> orig,
            Modding.Menu.Components.AutoSelector self, UnityEngine.UI.Selectable selectable)
        {
            Delegates.Params_SelectDelayed @params = new()
            {
                self = self, selectable = selectable
            };
            if (_beforeSelectDelayed != null)
            {
                foreach (Delegates.SelectDelayed_BeforeArgs toInvoke in _beforeSelectDelayed.GetInvocationList())
                {
                    try
                    {
                        _beforeSelectDelayed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            selectable = @params.selectable;
            return orig(self, selectable);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_Start
        {
            public Modding.Menu.Components.AutoSelector self;
        }

        public delegate void get_Start_BeforeArgs(Params_get_Start args);

        public delegate UnityEngine.UI.Selectable get_Start_AfterArgs(Params_get_Start args,
            UnityEngine.UI.Selectable ret);

        public delegate UnityEngine.UI.Selectable get_Start_WithArgs(
            Func<Modding.Menu.Components.AutoSelector, UnityEngine.UI.Selectable> orig,
            Modding.Menu.Components.AutoSelector self);

        public sealed class Params_set_Start
        {
            public Modding.Menu.Components.AutoSelector self;
            public UnityEngine.UI.Selectable value;
        }

        public delegate void set_Start_BeforeArgs(Params_set_Start args);

        public delegate void set_Start_AfterArgs(Params_set_Start args);

        public delegate void set_Start_WithArgs(
            Action<Modding.Menu.Components.AutoSelector, UnityEngine.UI.Selectable> orig,
            Modding.Menu.Components.AutoSelector self, UnityEngine.UI.Selectable value);

        public sealed class Params_OnEnable
        {
            public Modding.Menu.Components.AutoSelector self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<Modding.Menu.Components.AutoSelector> orig,
            Modding.Menu.Components.AutoSelector self);

        public sealed class Params_SelectDelayed
        {
            public Modding.Menu.Components.AutoSelector self;
            public UnityEngine.UI.Selectable selectable;
        }

        public delegate void SelectDelayed_BeforeArgs(Params_SelectDelayed args);

        public delegate System.Collections.IEnumerator SelectDelayed_AfterArgs(Params_SelectDelayed args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator SelectDelayed_WithArgs(
            Func<Modding.Menu.Components.AutoSelector, UnityEngine.UI.Selectable, System.Collections.IEnumerator> orig,
            Modding.Menu.Components.AutoSelector self, UnityEngine.UI.Selectable selectable);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Start_BeforeArgs get_Start
        {
            add
            {
                HookHandler._beforeget_Start += value;
                HookHandler.Hookget_Start();
            }
            remove => HookHandler._beforeget_Start -= value;
        }

        public static event Delegates.set_Start_BeforeArgs set_Start
        {
            add
            {
                HookHandler._beforeset_Start += value;
                HookHandler.Hookset_Start();
            }
            remove => HookHandler._beforeset_Start -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.SelectDelayed_BeforeArgs SelectDelayed
        {
            add
            {
                HookHandler._beforeSelectDelayed += value;
                HookHandler.HookSelectDelayed();
            }
            remove => HookHandler._beforeSelectDelayed -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Start_AfterArgs get_Start
        {
            add
            {
                HookHandler._afterget_Start += value;
                HookHandler.Hookget_Start();
            }
            remove => HookHandler._afterget_Start -= value;
        }

        public static event Delegates.set_Start_AfterArgs set_Start
        {
            add
            {
                HookHandler._afterset_Start += value;
                HookHandler.Hookset_Start();
            }
            remove => HookHandler._afterset_Start -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Start_WithArgs get_Start
        {
            add => HookEndpointManager.Add<Delegates.get_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "get_Start", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "get_Start", true), value);
        }

        public static event Delegates.set_Start_WithArgs set_Start
        {
            add => HookEndpointManager.Add<Delegates.set_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "set_Start", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Start_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "set_Start", true), value);
        }

        public static event Delegates.OnEnable_WithArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "OnEnable", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "OnEnable", true), value);
        }

        public static event Delegates.SelectDelayed_WithArgs SelectDelayed
        {
            add => HookEndpointManager.Add<Delegates.SelectDelayed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "SelectDelayed", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.SelectDelayed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.AutoSelector), "SelectDelayed", true),
                value);
        }
    }
}