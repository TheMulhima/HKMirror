namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameCameraTextureDisplay class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameCameraTextureDisplay
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GameCameraTextureDisplay.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.GameCameraTextureDisplay.orig_Awake orig, GameCameraTextureDisplay self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.GameCameraTextureDisplay.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.GameCameraTextureDisplay.orig_LateUpdate orig, GameCameraTextureDisplay self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookUpdateDisplay()
        {
            if (!HookedList.Contains("UpdateDisplay"))
            {
                HookedList.Add("UpdateDisplay");
                On.GameCameraTextureDisplay.UpdateDisplay += UpdateDisplay;
            }
        }

        internal static event Delegates.UpdateDisplay_BeforeArgs _beforeUpdateDisplay;
        internal static event Delegates.UpdateDisplay_NormalArgs _afterUpdateDisplay;

        private static void UpdateDisplay(On.GameCameraTextureDisplay.orig_UpdateDisplay orig,
            GameCameraTextureDisplay self, RenderTexture source, Material material)
        {
            Delegates.Params_UpdateDisplay @params = new()
            {
                self = self, source = source, material = material
            };
            _beforeUpdateDisplay?.Invoke(@params);
            self = @params.self;
            source = @params.source;
            material = @params.material;
            orig(self, source, material);
            if (_afterUpdateDisplay != null) _afterUpdateDisplay.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void UpdateDisplay_BeforeArgs(Params_UpdateDisplay args);

        public delegate void UpdateDisplay_NormalArgs(Params_UpdateDisplay args);

        public sealed class Params_Awake
        {
            public GameCameraTextureDisplay self;
        }

        public sealed class Params_LateUpdate
        {
            public GameCameraTextureDisplay self;
        }

        public sealed class Params_UpdateDisplay
        {
            public Material material;
            public GameCameraTextureDisplay self;
            public RenderTexture source;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.UpdateDisplay_BeforeArgs UpdateDisplay
        {
            add
            {
                HookHandler._beforeUpdateDisplay += value;
                HookHandler.HookUpdateDisplay();
            }
            remove => HookHandler._beforeUpdateDisplay -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.UpdateDisplay_NormalArgs UpdateDisplay
        {
            add
            {
                HookHandler._afterUpdateDisplay += value;
                HookHandler.HookUpdateDisplay();
            }
            remove => HookHandler._afterUpdateDisplay -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GameCameraTextureDisplay.hook_Awake Awake
        {
            add => On.GameCameraTextureDisplay.Awake += value;
            remove => On.GameCameraTextureDisplay.Awake -= value;
        }

        public static event On.GameCameraTextureDisplay.hook_LateUpdate LateUpdate
        {
            add => On.GameCameraTextureDisplay.LateUpdate += value;
            remove => On.GameCameraTextureDisplay.LateUpdate -= value;
        }

        public static event On.GameCameraTextureDisplay.hook_UpdateDisplay UpdateDisplay
        {
            add => On.GameCameraTextureDisplay.UpdateDisplay += value;
            remove => On.GameCameraTextureDisplay.UpdateDisplay -= value;
        }
    }
}