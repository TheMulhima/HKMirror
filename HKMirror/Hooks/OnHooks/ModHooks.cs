using System.Collections.ObjectModel;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using LogLevel = Modding.LogLevel;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ModHooks class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnModHooks
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_BuiltModMenuScreens()
        {
            if (!HookedList.Contains("get_BuiltModMenuScreens"))
            {
                HookedList.Add("get_BuiltModMenuScreens");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_BuiltModMenuScreens", false),
                    get_BuiltModMenuScreens);
            }
        }

        internal static event Delegates.get_BuiltModMenuScreens_BeforeArgs _beforeget_BuiltModMenuScreens;
        internal static event Delegates.get_BuiltModMenuScreens_NormalArgs _afterget_BuiltModMenuScreens;

        private static ReadOnlyDictionary<IMod, MenuScreen> get_BuiltModMenuScreens(
            Func<ReadOnlyDictionary<IMod, MenuScreen>> orig)
        {
            _beforeget_BuiltModMenuScreens?.Invoke();
            var retVal = orig();
            if (_afterget_BuiltModMenuScreens != null) retVal = _afterget_BuiltModMenuScreens.Invoke();
            return retVal;
        }

        internal static void Hookget_GlobalSettings()
        {
            if (!HookedList.Contains("get_GlobalSettings"))
            {
                HookedList.Add("get_GlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_GlobalSettings", false),
                    get_GlobalSettings);
            }
        }

        internal static event Delegates.get_GlobalSettings_BeforeArgs _beforeget_GlobalSettings;
        internal static event Delegates.get_GlobalSettings_NormalArgs _afterget_GlobalSettings;

        private static ModHooksGlobalSettings get_GlobalSettings(Func<ModHooksGlobalSettings> orig)
        {
            _beforeget_GlobalSettings?.Invoke();
            var retVal = orig();
            if (_afterget_GlobalSettings != null) retVal = _afterget_GlobalSettings.Invoke();
            return retVal;
        }

        internal static void Hookset_GlobalSettings()
        {
            if (!HookedList.Contains("set_GlobalSettings"))
            {
                HookedList.Add("set_GlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "set_GlobalSettings", false),
                    set_GlobalSettings);
            }
        }

        internal static event Delegates.set_GlobalSettings_BeforeArgs _beforeset_GlobalSettings;
        internal static event Delegates.set_GlobalSettings_NormalArgs _afterset_GlobalSettings;

        private static void set_GlobalSettings(Action<ModHooksGlobalSettings> orig, ModHooksGlobalSettings value)
        {
            Delegates.Params_set_GlobalSettings @params = new()
            {
                value = value
            };
            _beforeset_GlobalSettings?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_GlobalSettings != null) _afterset_GlobalSettings.Invoke(@params);
        }

        internal static void Hookget_Instance()
        {
            if (!HookedList.Contains("get_Instance"))
            {
                HookedList.Add("get_Instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_Instance", false), get_Instance);
            }
        }

        internal static event Delegates.get_Instance_BeforeArgs _beforeget_Instance;
        internal static event Delegates.get_Instance_NormalArgs _afterget_Instance;

        private static ModHooks get_Instance(Func<ModHooks> orig)
        {
            _beforeget_Instance?.Invoke();
            var retVal = orig();
            if (_afterget_Instance != null) retVal = _afterget_Instance.Invoke();
            return retVal;
        }

        internal static void HookLoadGlobalSettings()
        {
            if (!HookedList.Contains("LoadGlobalSettings"))
            {
                HookedList.Add("LoadGlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LoadGlobalSettings", false),
                    LoadGlobalSettings);
            }
        }

        internal static event Delegates.LoadGlobalSettings_BeforeArgs _beforeLoadGlobalSettings;
        internal static event Delegates.LoadGlobalSettings_NormalArgs _afterLoadGlobalSettings;

        private static void LoadGlobalSettings(Action orig)
        {
            _beforeLoadGlobalSettings?.Invoke();
            orig();
            if (_afterLoadGlobalSettings != null) _afterLoadGlobalSettings.Invoke();
        }

        internal static void HookSaveGlobalSettings()
        {
            if (!HookedList.Contains("SaveGlobalSettings"))
            {
                HookedList.Add("SaveGlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SaveGlobalSettings", false),
                    SaveGlobalSettings);
            }
        }

        internal static event Delegates.SaveGlobalSettings_BeforeArgs _beforeSaveGlobalSettings;
        internal static event Delegates.SaveGlobalSettings_NormalArgs _afterSaveGlobalSettings;

        private static void SaveGlobalSettings(Action orig)
        {
            _beforeSaveGlobalSettings?.Invoke();
            orig();
            if (_afterSaveGlobalSettings != null) _afterSaveGlobalSettings.Invoke();
        }

        internal static void HookLogConsole()
        {
            if (!HookedList.Contains("LogConsole"))
            {
                HookedList.Add("LogConsole");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LogConsole", false), LogConsole);
            }
        }

        internal static event Delegates.LogConsole_BeforeArgs _beforeLogConsole;
        internal static event Delegates.LogConsole_NormalArgs _afterLogConsole;

        private static void LogConsole(Action<string, LogLevel> orig, string message, LogLevel level)
        {
            Delegates.Params_LogConsole @params = new()
            {
                message = message, level = level
            };
            _beforeLogConsole?.Invoke(@params);
            message = @params.message;
            level = @params.level;
            orig(message, level);
            if (_afterLogConsole != null) _afterLogConsole.Invoke(@params);
        }

        internal static void HookLanguageGet()
        {
            if (!HookedList.Contains("LanguageGet"))
            {
                HookedList.Add("LanguageGet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LanguageGet", false), LanguageGet);
            }
        }

        internal static event Delegates.LanguageGet_BeforeArgs _beforeLanguageGet;
        internal static event Delegates.LanguageGet_NormalArgs _afterLanguageGet;

        private static string LanguageGet(Func<string, string, string> orig, string key, string sheet)
        {
            Delegates.Params_LanguageGet @params = new()
            {
                key = key, sheet = sheet
            };
            _beforeLanguageGet?.Invoke(@params);
            key = @params.key;
            sheet = @params.sheet;
            var retVal = orig(key, sheet);
            if (_afterLanguageGet != null) retVal = _afterLanguageGet.Invoke(@params);
            return retVal;
        }

        internal static void HookOnCursor()
        {
            if (!HookedList.Contains("OnCursor"))
            {
                HookedList.Add("OnCursor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnCursor", false), OnCursor);
            }
        }

        internal static event Delegates.OnCursor_BeforeArgs _beforeOnCursor;
        internal static event Delegates.OnCursor_NormalArgs _afterOnCursor;

        private static void OnCursor(Action<GameManager> orig, GameManager gm)
        {
            Delegates.Params_OnCursor @params = new()
            {
                gm = gm
            };
            _beforeOnCursor?.Invoke(@params);
            gm = @params.gm;
            orig(gm);
            if (_afterOnCursor != null) _afterOnCursor.Invoke(@params);
        }

        internal static void HookOnColliderCreate()
        {
            if (!HookedList.Contains("OnColliderCreate"))
            {
                HookedList.Add("OnColliderCreate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnColliderCreate", false), OnColliderCreate);
            }
        }

        internal static event Delegates.OnColliderCreate_BeforeArgs _beforeOnColliderCreate;
        internal static event Delegates.OnColliderCreate_NormalArgs _afterOnColliderCreate;

        private static void OnColliderCreate(Action<GameObject> orig, GameObject go)
        {
            Delegates.Params_OnColliderCreate @params = new()
            {
                go = go
            };
            _beforeOnColliderCreate?.Invoke(@params);
            go = @params.go;
            orig(go);
            if (_afterOnColliderCreate != null) _afterOnColliderCreate.Invoke(@params);
        }

        internal static void HookOnObjectPoolSpawn()
        {
            if (!HookedList.Contains("OnObjectPoolSpawn"))
            {
                HookedList.Add("OnObjectPoolSpawn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnObjectPoolSpawn", false),
                    OnObjectPoolSpawn);
            }
        }

        internal static event Delegates.OnObjectPoolSpawn_BeforeArgs _beforeOnObjectPoolSpawn;
        internal static event Delegates.OnObjectPoolSpawn_NormalArgs _afterOnObjectPoolSpawn;

        private static GameObject OnObjectPoolSpawn(Func<GameObject, GameObject> orig, GameObject go)
        {
            Delegates.Params_OnObjectPoolSpawn @params = new()
            {
                go = go
            };
            _beforeOnObjectPoolSpawn?.Invoke(@params);
            go = @params.go;
            var retVal = orig(go);
            if (_afterOnObjectPoolSpawn != null) retVal = _afterOnObjectPoolSpawn.Invoke(@params);
            return retVal;
        }

        internal static void HookOnApplicationQuit()
        {
            if (!HookedList.Contains("OnApplicationQuit"))
            {
                HookedList.Add("OnApplicationQuit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnApplicationQuit", false),
                    OnApplicationQuit);
            }
        }

        internal static event Delegates.OnApplicationQuit_BeforeArgs _beforeOnApplicationQuit;
        internal static event Delegates.OnApplicationQuit_NormalArgs _afterOnApplicationQuit;

        private static void OnApplicationQuit(Action orig)
        {
            _beforeOnApplicationQuit?.Invoke();
            orig();
            if (_afterOnApplicationQuit != null) _afterOnApplicationQuit.Invoke();
        }

        internal static void HookOnHitInstanceBeforeHit()
        {
            if (!HookedList.Contains("OnHitInstanceBeforeHit"))
            {
                HookedList.Add("OnHitInstanceBeforeHit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnHitInstanceBeforeHit", false),
                    OnHitInstanceBeforeHit);
            }
        }

        internal static event Delegates.OnHitInstanceBeforeHit_BeforeArgs _beforeOnHitInstanceBeforeHit;
        internal static event Delegates.OnHitInstanceBeforeHit_NormalArgs _afterOnHitInstanceBeforeHit;

        private static HitInstance OnHitInstanceBeforeHit(Func<Fsm, HitInstance, HitInstance> orig, Fsm owner,
            HitInstance hit)
        {
            Delegates.Params_OnHitInstanceBeforeHit @params = new()
            {
                owner = owner, hit = hit
            };
            _beforeOnHitInstanceBeforeHit?.Invoke(@params);
            owner = @params.owner;
            hit = @params.hit;
            var retVal = orig(owner, hit);
            if (_afterOnHitInstanceBeforeHit != null) retVal = _afterOnHitInstanceBeforeHit.Invoke(@params);
            return retVal;
        }

        internal static void HookOnDrawBlackBorders()
        {
            if (!HookedList.Contains("OnDrawBlackBorders"))
            {
                HookedList.Add("OnDrawBlackBorders");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDrawBlackBorders", false),
                    OnDrawBlackBorders);
            }
        }

        internal static event Delegates.OnDrawBlackBorders_BeforeArgs _beforeOnDrawBlackBorders;
        internal static event Delegates.OnDrawBlackBorders_NormalArgs _afterOnDrawBlackBorders;

        private static void OnDrawBlackBorders(Action<List<GameObject>> orig, List<GameObject> borders)
        {
            Delegates.Params_OnDrawBlackBorders @params = new()
            {
                borders = borders
            };
            _beforeOnDrawBlackBorders?.Invoke(@params);
            borders = @params.borders;
            orig(borders);
            if (_afterOnDrawBlackBorders != null) _afterOnDrawBlackBorders.Invoke(@params);
        }

        internal static void HookOnEnableEnemy()
        {
            if (!HookedList.Contains("OnEnableEnemy"))
            {
                HookedList.Add("OnEnableEnemy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnEnableEnemy", false), OnEnableEnemy);
            }
        }

        internal static event Delegates.OnEnableEnemy_BeforeArgs _beforeOnEnableEnemy;
        internal static event Delegates.OnEnableEnemy_NormalArgs _afterOnEnableEnemy;

        private static bool OnEnableEnemy(Func<GameObject, bool, bool> orig, GameObject enemy, bool isAlreadyDead)
        {
            Delegates.Params_OnEnableEnemy @params = new()
            {
                enemy = enemy, isAlreadyDead = isAlreadyDead
            };
            _beforeOnEnableEnemy?.Invoke(@params);
            enemy = @params.enemy;
            isAlreadyDead = @params.isAlreadyDead;
            var retVal = orig(enemy, isAlreadyDead);
            if (_afterOnEnableEnemy != null) retVal = _afterOnEnableEnemy.Invoke(@params);
            return retVal;
        }

        internal static void HookOnRecieveDeathEvent()
        {
            if (!HookedList.Contains("OnRecieveDeathEvent"))
            {
                HookedList.Add("OnRecieveDeathEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnRecieveDeathEvent", false),
                    OnRecieveDeathEvent);
            }
        }

        internal static event Delegates.OnRecieveDeathEvent_BeforeArgs _beforeOnRecieveDeathEvent;
        internal static event Delegates.OnRecieveDeathEvent_NormalArgs _afterOnRecieveDeathEvent;

        private static void OnRecieveDeathEvent(Action<EnemyDeathEffects, bool, float?, bool, bool, bool> orig,
            EnemyDeathEffects enemyDeathEffects, bool eventAlreadyRecieved, float? attackDirection,
            bool resetDeathEvent, bool spellBurn, bool isWatery)
        {
            Delegates.Params_OnRecieveDeathEvent @params = new()
            {
                enemyDeathEffects = enemyDeathEffects, eventAlreadyRecieved = eventAlreadyRecieved,
                attackDirection = attackDirection, resetDeathEvent = resetDeathEvent, spellBurn = spellBurn,
                isWatery = isWatery
            };
            _beforeOnRecieveDeathEvent?.Invoke(@params);
            enemyDeathEffects = @params.enemyDeathEffects;
            eventAlreadyRecieved = @params.eventAlreadyRecieved;
            attackDirection = @params.attackDirection;
            resetDeathEvent = @params.resetDeathEvent;
            spellBurn = @params.spellBurn;
            isWatery = @params.isWatery;
            orig(enemyDeathEffects, eventAlreadyRecieved, attackDirection, resetDeathEvent, spellBurn, isWatery);
            if (_afterOnRecieveDeathEvent != null) _afterOnRecieveDeathEvent.Invoke(@params);
        }

        internal static void HookOnRecordKillForJournal()
        {
            if (!HookedList.Contains("OnRecordKillForJournal"))
            {
                HookedList.Add("OnRecordKillForJournal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnRecordKillForJournal", false),
                    OnRecordKillForJournal);
            }
        }

        internal static event Delegates.OnRecordKillForJournal_BeforeArgs _beforeOnRecordKillForJournal;
        internal static event Delegates.OnRecordKillForJournal_NormalArgs _afterOnRecordKillForJournal;

        private static void OnRecordKillForJournal(Action<EnemyDeathEffects, string, string, string, string> orig,
            EnemyDeathEffects enemyDeathEffects, string playerDataName, string killedBoolPlayerDataLookupKey,
            string killCountIntPlayerDataLookupKey, string newDataBoolPlayerDataLookupKey)
        {
            Delegates.Params_OnRecordKillForJournal @params = new()
            {
                enemyDeathEffects = enemyDeathEffects, playerDataName = playerDataName,
                killedBoolPlayerDataLookupKey = killedBoolPlayerDataLookupKey,
                killCountIntPlayerDataLookupKey = killCountIntPlayerDataLookupKey,
                newDataBoolPlayerDataLookupKey = newDataBoolPlayerDataLookupKey
            };
            _beforeOnRecordKillForJournal?.Invoke(@params);
            enemyDeathEffects = @params.enemyDeathEffects;
            playerDataName = @params.playerDataName;
            killedBoolPlayerDataLookupKey = @params.killedBoolPlayerDataLookupKey;
            killCountIntPlayerDataLookupKey = @params.killCountIntPlayerDataLookupKey;
            newDataBoolPlayerDataLookupKey = @params.newDataBoolPlayerDataLookupKey;
            orig(enemyDeathEffects, playerDataName, killedBoolPlayerDataLookupKey, killCountIntPlayerDataLookupKey,
                newDataBoolPlayerDataLookupKey);
            if (_afterOnRecordKillForJournal != null) _afterOnRecordKillForJournal.Invoke(@params);
        }

        internal static void HookSetPlayerBool()
        {
            if (!HookedList.Contains("SetPlayerBool"))
            {
                HookedList.Add("SetPlayerBool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerBool", false), SetPlayerBool);
            }
        }

        internal static event Delegates.SetPlayerBool_BeforeArgs _beforeSetPlayerBool;
        internal static event Delegates.SetPlayerBool_NormalArgs _afterSetPlayerBool;

        private static void SetPlayerBool(Action<string, bool, PlayerData> orig, string target, bool orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerBool @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            _beforeSetPlayerBool?.Invoke(@params);
            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerBool != null) _afterSetPlayerBool.Invoke(@params);
        }

        internal static void HookGetPlayerBool()
        {
            if (!HookedList.Contains("GetPlayerBool"))
            {
                HookedList.Add("GetPlayerBool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerBool", false), GetPlayerBool);
            }
        }

        internal static event Delegates.GetPlayerBool_BeforeArgs _beforeGetPlayerBool;
        internal static event Delegates.GetPlayerBool_NormalArgs _afterGetPlayerBool;

        private static bool GetPlayerBool(Func<string, PlayerData, bool> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerBool @params = new()
            {
                target = target, pd = pd
            };
            _beforeGetPlayerBool?.Invoke(@params);
            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerBool != null) retVal = _afterGetPlayerBool.Invoke(@params);
            return retVal;
        }

        internal static void HookSetPlayerInt()
        {
            if (!HookedList.Contains("SetPlayerInt"))
            {
                HookedList.Add("SetPlayerInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerInt", false), SetPlayerInt);
            }
        }

        internal static event Delegates.SetPlayerInt_BeforeArgs _beforeSetPlayerInt;
        internal static event Delegates.SetPlayerInt_NormalArgs _afterSetPlayerInt;

        private static void SetPlayerInt(Action<string, int, PlayerData> orig, string target, int orig_, PlayerData pd)
        {
            Delegates.Params_SetPlayerInt @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            _beforeSetPlayerInt?.Invoke(@params);
            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerInt != null) _afterSetPlayerInt.Invoke(@params);
        }

        internal static void HookGetPlayerInt()
        {
            if (!HookedList.Contains("GetPlayerInt"))
            {
                HookedList.Add("GetPlayerInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerInt", false), GetPlayerInt);
            }
        }

        internal static event Delegates.GetPlayerInt_BeforeArgs _beforeGetPlayerInt;
        internal static event Delegates.GetPlayerInt_NormalArgs _afterGetPlayerInt;

        private static int GetPlayerInt(Func<string, PlayerData, int> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerInt @params = new()
            {
                target = target, pd = pd
            };
            _beforeGetPlayerInt?.Invoke(@params);
            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerInt != null) retVal = _afterGetPlayerInt.Invoke(@params);
            return retVal;
        }

        internal static void HookSetPlayerFloat()
        {
            if (!HookedList.Contains("SetPlayerFloat"))
            {
                HookedList.Add("SetPlayerFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerFloat", false), SetPlayerFloat);
            }
        }

        internal static event Delegates.SetPlayerFloat_BeforeArgs _beforeSetPlayerFloat;
        internal static event Delegates.SetPlayerFloat_NormalArgs _afterSetPlayerFloat;

        private static void SetPlayerFloat(Action<string, float, PlayerData> orig, string target, float orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerFloat @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            _beforeSetPlayerFloat?.Invoke(@params);
            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerFloat != null) _afterSetPlayerFloat.Invoke(@params);
        }

        internal static void HookGetPlayerFloat()
        {
            if (!HookedList.Contains("GetPlayerFloat"))
            {
                HookedList.Add("GetPlayerFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerFloat", false), GetPlayerFloat);
            }
        }

        internal static event Delegates.GetPlayerFloat_BeforeArgs _beforeGetPlayerFloat;
        internal static event Delegates.GetPlayerFloat_NormalArgs _afterGetPlayerFloat;

        private static float GetPlayerFloat(Func<string, PlayerData, float> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerFloat @params = new()
            {
                target = target, pd = pd
            };
            _beforeGetPlayerFloat?.Invoke(@params);
            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerFloat != null) retVal = _afterGetPlayerFloat.Invoke(@params);
            return retVal;
        }

        internal static void HookSetPlayerString()
        {
            if (!HookedList.Contains("SetPlayerString"))
            {
                HookedList.Add("SetPlayerString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerString", false), SetPlayerString);
            }
        }

        internal static event Delegates.SetPlayerString_BeforeArgs _beforeSetPlayerString;
        internal static event Delegates.SetPlayerString_NormalArgs _afterSetPlayerString;

        private static void SetPlayerString(Action<string, string, PlayerData> orig, string target, string orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerString @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            _beforeSetPlayerString?.Invoke(@params);
            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerString != null) _afterSetPlayerString.Invoke(@params);
        }

        internal static void HookGetPlayerString()
        {
            if (!HookedList.Contains("GetPlayerString"))
            {
                HookedList.Add("GetPlayerString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerString", false), GetPlayerString);
            }
        }

        internal static event Delegates.GetPlayerString_BeforeArgs _beforeGetPlayerString;
        internal static event Delegates.GetPlayerString_NormalArgs _afterGetPlayerString;

        private static string GetPlayerString(Func<string, PlayerData, string> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerString @params = new()
            {
                target = target, pd = pd
            };
            _beforeGetPlayerString?.Invoke(@params);
            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerString != null) retVal = _afterGetPlayerString.Invoke(@params);
            return retVal;
        }

        internal static void HookSetPlayerVector3()
        {
            if (!HookedList.Contains("SetPlayerVector3"))
            {
                HookedList.Add("SetPlayerVector3");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerVector3", false), SetPlayerVector3);
            }
        }

        internal static event Delegates.SetPlayerVector3_BeforeArgs _beforeSetPlayerVector3;
        internal static event Delegates.SetPlayerVector3_NormalArgs _afterSetPlayerVector3;

        private static void SetPlayerVector3(Action<string, Vector3, PlayerData> orig, string target, Vector3 orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerVector3 @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            _beforeSetPlayerVector3?.Invoke(@params);
            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerVector3 != null) _afterSetPlayerVector3.Invoke(@params);
        }

        internal static void HookGetPlayerVector3()
        {
            if (!HookedList.Contains("GetPlayerVector3"))
            {
                HookedList.Add("GetPlayerVector3");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerVector3", false), GetPlayerVector3);
            }
        }

        internal static event Delegates.GetPlayerVector3_BeforeArgs _beforeGetPlayerVector3;
        internal static event Delegates.GetPlayerVector3_NormalArgs _afterGetPlayerVector3;

        private static Vector3 GetPlayerVector3(Func<string, PlayerData, Vector3> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerVector3 @params = new()
            {
                target = target, pd = pd
            };
            _beforeGetPlayerVector3?.Invoke(@params);
            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerVector3 != null) retVal = _afterGetPlayerVector3.Invoke(@params);
            return retVal;
        }

        internal static void HookOnBlueHealth()
        {
            if (!HookedList.Contains("OnBlueHealth"))
            {
                HookedList.Add("OnBlueHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBlueHealth", false), OnBlueHealth);
            }
        }

        internal static event Delegates.OnBlueHealth_BeforeArgs _beforeOnBlueHealth;
        internal static event Delegates.OnBlueHealth_NormalArgs _afterOnBlueHealth;

        private static int OnBlueHealth(Func<int> orig)
        {
            _beforeOnBlueHealth?.Invoke();
            var retVal = orig();
            if (_afterOnBlueHealth != null) retVal = _afterOnBlueHealth.Invoke();
            return retVal;
        }

        internal static void HookOnTakeHealth()
        {
            if (!HookedList.Contains("OnTakeHealth"))
            {
                HookedList.Add("OnTakeHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnTakeHealth", false), OnTakeHealth);
            }
        }

        internal static event Delegates.OnTakeHealth_BeforeArgs _beforeOnTakeHealth;
        internal static event Delegates.OnTakeHealth_NormalArgs _afterOnTakeHealth;

        private static int OnTakeHealth(Func<int, int> orig, int damage)
        {
            Delegates.Params_OnTakeHealth @params = new()
            {
                damage = damage
            };
            _beforeOnTakeHealth?.Invoke(@params);
            damage = @params.damage;
            var retVal = orig(damage);
            if (_afterOnTakeHealth != null) retVal = _afterOnTakeHealth.Invoke(@params);
            return retVal;
        }

        internal static void HookOnTakeDamage()
        {
            if (!HookedList.Contains("OnTakeDamage"))
            {
                HookedList.Add("OnTakeDamage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnTakeDamage", false), OnTakeDamage);
            }
        }

        internal static event Delegates.OnTakeDamage_BeforeArgs _beforeOnTakeDamage;
        internal static event Delegates.OnTakeDamage_NormalArgs _afterOnTakeDamage;

        private static int OnTakeDamage(Func<int, int, int> orig, int hazardType, int damage)
        {
            Delegates.Params_OnTakeDamage @params = new()
            {
                hazardType = hazardType, damage = damage
            };
            _beforeOnTakeDamage?.Invoke(@params);
            hazardType = @params.hazardType;
            damage = @params.damage;
            var retVal = orig(hazardType, damage);
            if (_afterOnTakeDamage != null) retVal = _afterOnTakeDamage.Invoke(@params);
            return retVal;
        }

        internal static void HookAfterTakeDamage()
        {
            if (!HookedList.Contains("AfterTakeDamage"))
            {
                HookedList.Add("AfterTakeDamage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "AfterTakeDamage", false), AfterTakeDamage);
            }
        }

        internal static event Delegates.AfterTakeDamage_BeforeArgs _beforeAfterTakeDamage;
        internal static event Delegates.AfterTakeDamage_NormalArgs _afterAfterTakeDamage;

        private static int AfterTakeDamage(Func<int, int, int> orig, int hazardType, int damageAmount)
        {
            Delegates.Params_AfterTakeDamage @params = new()
            {
                hazardType = hazardType, damageAmount = damageAmount
            };
            _beforeAfterTakeDamage?.Invoke(@params);
            hazardType = @params.hazardType;
            damageAmount = @params.damageAmount;
            var retVal = orig(hazardType, damageAmount);
            if (_afterAfterTakeDamage != null) retVal = _afterAfterTakeDamage.Invoke(@params);
            return retVal;
        }

        internal static void HookOnBeforePlayerDead()
        {
            if (!HookedList.Contains("OnBeforePlayerDead"))
            {
                HookedList.Add("OnBeforePlayerDead");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBeforePlayerDead", false),
                    OnBeforePlayerDead);
            }
        }

        internal static event Delegates.OnBeforePlayerDead_BeforeArgs _beforeOnBeforePlayerDead;
        internal static event Delegates.OnBeforePlayerDead_NormalArgs _afterOnBeforePlayerDead;

        private static void OnBeforePlayerDead(Action orig)
        {
            _beforeOnBeforePlayerDead?.Invoke();
            orig();
            if (_afterOnBeforePlayerDead != null) _afterOnBeforePlayerDead.Invoke();
        }

        internal static void HookOnAfterPlayerDead()
        {
            if (!HookedList.Contains("OnAfterPlayerDead"))
            {
                HookedList.Add("OnAfterPlayerDead");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterPlayerDead", false),
                    OnAfterPlayerDead);
            }
        }

        internal static event Delegates.OnAfterPlayerDead_BeforeArgs _beforeOnAfterPlayerDead;
        internal static event Delegates.OnAfterPlayerDead_NormalArgs _afterOnAfterPlayerDead;

        private static void OnAfterPlayerDead(Action orig)
        {
            _beforeOnAfterPlayerDead?.Invoke();
            orig();
            if (_afterOnAfterPlayerDead != null) _afterOnAfterPlayerDead.Invoke();
        }

        internal static void HookOnAttack()
        {
            if (!HookedList.Contains("OnAttack"))
            {
                HookedList.Add("OnAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAttack", false), OnAttack);
            }
        }

        internal static event Delegates.OnAttack_BeforeArgs _beforeOnAttack;
        internal static event Delegates.OnAttack_NormalArgs _afterOnAttack;

        private static void OnAttack(Action<AttackDirection> orig, AttackDirection dir)
        {
            Delegates.Params_OnAttack @params = new()
            {
                dir = dir
            };
            _beforeOnAttack?.Invoke(@params);
            dir = @params.dir;
            orig(dir);
            if (_afterOnAttack != null) _afterOnAttack.Invoke(@params);
        }

        internal static void HookOnDoAttack()
        {
            if (!HookedList.Contains("OnDoAttack"))
            {
                HookedList.Add("OnDoAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDoAttack", false), OnDoAttack);
            }
        }

        internal static event Delegates.OnDoAttack_BeforeArgs _beforeOnDoAttack;
        internal static event Delegates.OnDoAttack_NormalArgs _afterOnDoAttack;

        private static void OnDoAttack(Action orig)
        {
            _beforeOnDoAttack?.Invoke();
            orig();
            if (_afterOnDoAttack != null) _afterOnDoAttack.Invoke();
        }

        internal static void HookAfterAttack()
        {
            if (!HookedList.Contains("AfterAttack"))
            {
                HookedList.Add("AfterAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "AfterAttack", false), AfterAttack);
            }
        }

        internal static event Delegates.AfterAttack_BeforeArgs _beforeAfterAttack;
        internal static event Delegates.AfterAttack_NormalArgs _afterAfterAttack;

        private static void AfterAttack(Action<AttackDirection> orig, AttackDirection dir)
        {
            Delegates.Params_AfterAttack @params = new()
            {
                dir = dir
            };
            _beforeAfterAttack?.Invoke(@params);
            dir = @params.dir;
            orig(dir);
            if (_afterAfterAttack != null) _afterAfterAttack.Invoke(@params);
        }

        internal static void HookOnSlashHit()
        {
            if (!HookedList.Contains("OnSlashHit"))
            {
                HookedList.Add("OnSlashHit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSlashHit", false), OnSlashHit);
            }
        }

        internal static event Delegates.OnSlashHit_BeforeArgs _beforeOnSlashHit;
        internal static event Delegates.OnSlashHit_NormalArgs _afterOnSlashHit;

        private static void OnSlashHit(Action<Collider2D, GameObject> orig, Collider2D otherCollider,
            GameObject gameObject)
        {
            Delegates.Params_OnSlashHit @params = new()
            {
                otherCollider = otherCollider, gameObject = gameObject
            };
            _beforeOnSlashHit?.Invoke(@params);
            otherCollider = @params.otherCollider;
            gameObject = @params.gameObject;
            orig(otherCollider, gameObject);
            if (_afterOnSlashHit != null) _afterOnSlashHit.Invoke(@params);
        }

        internal static void HookOnCharmUpdate()
        {
            if (!HookedList.Contains("OnCharmUpdate"))
            {
                HookedList.Add("OnCharmUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnCharmUpdate", false), OnCharmUpdate);
            }
        }

        internal static event Delegates.OnCharmUpdate_BeforeArgs _beforeOnCharmUpdate;
        internal static event Delegates.OnCharmUpdate_NormalArgs _afterOnCharmUpdate;

        private static void OnCharmUpdate(Action<PlayerData, HeroController> orig, PlayerData pd, HeroController hc)
        {
            Delegates.Params_OnCharmUpdate @params = new()
            {
                pd = pd, hc = hc
            };
            _beforeOnCharmUpdate?.Invoke(@params);
            pd = @params.pd;
            hc = @params.hc;
            orig(pd, hc);
            if (_afterOnCharmUpdate != null) _afterOnCharmUpdate.Invoke(@params);
        }

        internal static void HookOnHeroUpdate()
        {
            if (!HookedList.Contains("OnHeroUpdate"))
            {
                HookedList.Add("OnHeroUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnHeroUpdate", false), OnHeroUpdate);
            }
        }

        internal static event Delegates.OnHeroUpdate_BeforeArgs _beforeOnHeroUpdate;
        internal static event Delegates.OnHeroUpdate_NormalArgs _afterOnHeroUpdate;

        private static void OnHeroUpdate(Action orig)
        {
            _beforeOnHeroUpdate?.Invoke();
            orig();
            if (_afterOnHeroUpdate != null) _afterOnHeroUpdate.Invoke();
        }

        internal static void HookBeforeAddHealth()
        {
            if (!HookedList.Contains("BeforeAddHealth"))
            {
                HookedList.Add("BeforeAddHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "BeforeAddHealth", false), BeforeAddHealth);
            }
        }

        internal static event Delegates.BeforeAddHealth_BeforeArgs _beforeBeforeAddHealth;
        internal static event Delegates.BeforeAddHealth_NormalArgs _afterBeforeAddHealth;

        private static int BeforeAddHealth(Func<int, int> orig, int amount)
        {
            Delegates.Params_BeforeAddHealth @params = new()
            {
                amount = amount
            };
            _beforeBeforeAddHealth?.Invoke(@params);
            amount = @params.amount;
            var retVal = orig(amount);
            if (_afterBeforeAddHealth != null) retVal = _afterBeforeAddHealth.Invoke(@params);
            return retVal;
        }

        internal static void HookOnFocusCost()
        {
            if (!HookedList.Contains("OnFocusCost"))
            {
                HookedList.Add("OnFocusCost");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnFocusCost", false), OnFocusCost);
            }
        }

        internal static event Delegates.OnFocusCost_BeforeArgs _beforeOnFocusCost;
        internal static event Delegates.OnFocusCost_NormalArgs _afterOnFocusCost;

        private static float OnFocusCost(Func<float> orig)
        {
            _beforeOnFocusCost?.Invoke();
            var retVal = orig();
            if (_afterOnFocusCost != null) retVal = _afterOnFocusCost.Invoke();
            return retVal;
        }

        internal static void HookOnSoulGain()
        {
            if (!HookedList.Contains("OnSoulGain"))
            {
                HookedList.Add("OnSoulGain");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSoulGain", false), OnSoulGain);
            }
        }

        internal static event Delegates.OnSoulGain_BeforeArgs _beforeOnSoulGain;
        internal static event Delegates.OnSoulGain_NormalArgs _afterOnSoulGain;

        private static int OnSoulGain(Func<int, int> orig, int num)
        {
            Delegates.Params_OnSoulGain @params = new()
            {
                num = num
            };
            _beforeOnSoulGain?.Invoke(@params);
            num = @params.num;
            var retVal = orig(num);
            if (_afterOnSoulGain != null) retVal = _afterOnSoulGain.Invoke(@params);
            return retVal;
        }

        internal static void HookDashVelocityChange()
        {
            if (!HookedList.Contains("DashVelocityChange"))
            {
                HookedList.Add("DashVelocityChange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "DashVelocityChange", false),
                    DashVelocityChange);
            }
        }

        internal static event Delegates.DashVelocityChange_BeforeArgs _beforeDashVelocityChange;
        internal static event Delegates.DashVelocityChange_NormalArgs _afterDashVelocityChange;

        private static Vector2 DashVelocityChange(Func<Vector2, Vector2> orig, Vector2 change)
        {
            Delegates.Params_DashVelocityChange @params = new()
            {
                change = change
            };
            _beforeDashVelocityChange?.Invoke(@params);
            change = @params.change;
            var retVal = orig(change);
            if (_afterDashVelocityChange != null) retVal = _afterDashVelocityChange.Invoke(@params);
            return retVal;
        }

        internal static void HookOnDashPressed()
        {
            if (!HookedList.Contains("OnDashPressed"))
            {
                HookedList.Add("OnDashPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDashPressed", false), OnDashPressed);
            }
        }

        internal static event Delegates.OnDashPressed_BeforeArgs _beforeOnDashPressed;
        internal static event Delegates.OnDashPressed_NormalArgs _afterOnDashPressed;

        private static bool OnDashPressed(Func<bool> orig)
        {
            _beforeOnDashPressed?.Invoke();
            var retVal = orig();
            if (_afterOnDashPressed != null) retVal = _afterOnDashPressed.Invoke();
            return retVal;
        }

        internal static void HookOnSavegameLoad()
        {
            if (!HookedList.Contains("OnSavegameLoad"))
            {
                HookedList.Add("OnSavegameLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameLoad", false), OnSavegameLoad);
            }
        }

        internal static event Delegates.OnSavegameLoad_BeforeArgs _beforeOnSavegameLoad;
        internal static event Delegates.OnSavegameLoad_NormalArgs _afterOnSavegameLoad;

        private static void OnSavegameLoad(Action<int> orig, int id)
        {
            Delegates.Params_OnSavegameLoad @params = new()
            {
                id = id
            };
            _beforeOnSavegameLoad?.Invoke(@params);
            id = @params.id;
            orig(id);
            if (_afterOnSavegameLoad != null) _afterOnSavegameLoad.Invoke(@params);
        }

        internal static void HookOnSavegameSave()
        {
            if (!HookedList.Contains("OnSavegameSave"))
            {
                HookedList.Add("OnSavegameSave");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameSave", false), OnSavegameSave);
            }
        }

        internal static event Delegates.OnSavegameSave_BeforeArgs _beforeOnSavegameSave;
        internal static event Delegates.OnSavegameSave_NormalArgs _afterOnSavegameSave;

        private static void OnSavegameSave(Action<int> orig, int id)
        {
            Delegates.Params_OnSavegameSave @params = new()
            {
                id = id
            };
            _beforeOnSavegameSave?.Invoke(@params);
            id = @params.id;
            orig(id);
            if (_afterOnSavegameSave != null) _afterOnSavegameSave.Invoke(@params);
        }

        internal static void HookOnNewGame()
        {
            if (!HookedList.Contains("OnNewGame"))
            {
                HookedList.Add("OnNewGame");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnNewGame", false), OnNewGame);
            }
        }

        internal static event Delegates.OnNewGame_BeforeArgs _beforeOnNewGame;
        internal static event Delegates.OnNewGame_NormalArgs _afterOnNewGame;

        private static void OnNewGame(Action orig)
        {
            _beforeOnNewGame?.Invoke();
            orig();
            if (_afterOnNewGame != null) _afterOnNewGame.Invoke();
        }

        internal static void HookOnSavegameClear()
        {
            if (!HookedList.Contains("OnSavegameClear"))
            {
                HookedList.Add("OnSavegameClear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameClear", false), OnSavegameClear);
            }
        }

        internal static event Delegates.OnSavegameClear_BeforeArgs _beforeOnSavegameClear;
        internal static event Delegates.OnSavegameClear_NormalArgs _afterOnSavegameClear;

        private static void OnSavegameClear(Action<int> orig, int id)
        {
            Delegates.Params_OnSavegameClear @params = new()
            {
                id = id
            };
            _beforeOnSavegameClear?.Invoke(@params);
            id = @params.id;
            orig(id);
            if (_afterOnSavegameClear != null) _afterOnSavegameClear.Invoke(@params);
        }

        internal static void HookOnAfterSaveGameLoad()
        {
            if (!HookedList.Contains("OnAfterSaveGameLoad"))
            {
                HookedList.Add("OnAfterSaveGameLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterSaveGameLoad", false),
                    OnAfterSaveGameLoad);
            }
        }

        internal static event Delegates.OnAfterSaveGameLoad_BeforeArgs _beforeOnAfterSaveGameLoad;
        internal static event Delegates.OnAfterSaveGameLoad_NormalArgs _afterOnAfterSaveGameLoad;

        private static void OnAfterSaveGameLoad(Action<SaveGameData> orig, SaveGameData data)
        {
            Delegates.Params_OnAfterSaveGameLoad @params = new()
            {
                data = data
            };
            _beforeOnAfterSaveGameLoad?.Invoke(@params);
            data = @params.data;
            orig(data);
            if (_afterOnAfterSaveGameLoad != null) _afterOnAfterSaveGameLoad.Invoke(@params);
        }

        internal static void HookOnBeforeSaveGameSave()
        {
            if (!HookedList.Contains("OnBeforeSaveGameSave"))
            {
                HookedList.Add("OnBeforeSaveGameSave");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBeforeSaveGameSave", false),
                    OnBeforeSaveGameSave);
            }
        }

        internal static event Delegates.OnBeforeSaveGameSave_BeforeArgs _beforeOnBeforeSaveGameSave;
        internal static event Delegates.OnBeforeSaveGameSave_NormalArgs _afterOnBeforeSaveGameSave;

        private static void OnBeforeSaveGameSave(Action<SaveGameData> orig, SaveGameData data)
        {
            Delegates.Params_OnBeforeSaveGameSave @params = new()
            {
                data = data
            };
            _beforeOnBeforeSaveGameSave?.Invoke(@params);
            data = @params.data;
            orig(data);
            if (_afterOnBeforeSaveGameSave != null) _afterOnBeforeSaveGameSave.Invoke(@params);
        }

        internal static void HookGetSaveFileName()
        {
            if (!HookedList.Contains("GetSaveFileName"))
            {
                HookedList.Add("GetSaveFileName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetSaveFileName", false), GetSaveFileName);
            }
        }

        internal static event Delegates.GetSaveFileName_BeforeArgs _beforeGetSaveFileName;
        internal static event Delegates.GetSaveFileName_NormalArgs _afterGetSaveFileName;

        private static string GetSaveFileName(Func<int, string> orig, int saveSlot)
        {
            Delegates.Params_GetSaveFileName @params = new()
            {
                saveSlot = saveSlot
            };
            _beforeGetSaveFileName?.Invoke(@params);
            saveSlot = @params.saveSlot;
            var retVal = orig(saveSlot);
            if (_afterGetSaveFileName != null) retVal = _afterGetSaveFileName.Invoke(@params);
            return retVal;
        }

        internal static void HookOnAfterSaveGameClear()
        {
            if (!HookedList.Contains("OnAfterSaveGameClear"))
            {
                HookedList.Add("OnAfterSaveGameClear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterSaveGameClear", false),
                    OnAfterSaveGameClear);
            }
        }

        internal static event Delegates.OnAfterSaveGameClear_BeforeArgs _beforeOnAfterSaveGameClear;
        internal static event Delegates.OnAfterSaveGameClear_NormalArgs _afterOnAfterSaveGameClear;

        private static void OnAfterSaveGameClear(Action<int> orig, int saveSlot)
        {
            Delegates.Params_OnAfterSaveGameClear @params = new()
            {
                saveSlot = saveSlot
            };
            _beforeOnAfterSaveGameClear?.Invoke(@params);
            saveSlot = @params.saveSlot;
            orig(saveSlot);
            if (_afterOnAfterSaveGameClear != null) _afterOnAfterSaveGameClear.Invoke(@params);
        }

        internal static void HookOnSceneChanged()
        {
            if (!HookedList.Contains("OnSceneChanged"))
            {
                HookedList.Add("OnSceneChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSceneChanged", false), OnSceneChanged);
            }
        }

        internal static event Delegates.OnSceneChanged_BeforeArgs _beforeOnSceneChanged;
        internal static event Delegates.OnSceneChanged_NormalArgs _afterOnSceneChanged;

        private static void OnSceneChanged(Action<string> orig, string targetScene)
        {
            Delegates.Params_OnSceneChanged @params = new()
            {
                targetScene = targetScene
            };
            _beforeOnSceneChanged?.Invoke(@params);
            targetScene = @params.targetScene;
            orig(targetScene);
            if (_afterOnSceneChanged != null) _afterOnSceneChanged.Invoke(@params);
        }

        internal static void HookBeforeSceneLoad()
        {
            if (!HookedList.Contains("BeforeSceneLoad"))
            {
                HookedList.Add("BeforeSceneLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "BeforeSceneLoad", false), BeforeSceneLoad);
            }
        }

        internal static event Delegates.BeforeSceneLoad_BeforeArgs _beforeBeforeSceneLoad;
        internal static event Delegates.BeforeSceneLoad_NormalArgs _afterBeforeSceneLoad;

        private static string BeforeSceneLoad(Func<string, string> orig, string sceneName)
        {
            Delegates.Params_BeforeSceneLoad @params = new()
            {
                sceneName = sceneName
            };
            _beforeBeforeSceneLoad?.Invoke(@params);
            sceneName = @params.sceneName;
            var retVal = orig(sceneName);
            if (_afterBeforeSceneLoad != null) retVal = _afterBeforeSceneLoad.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMod_string_bool_bool()
        {
            if (!HookedList.Contains("GetMod_string_bool_bool"))
            {
                HookedList.Add("GetMod_string_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetMod_string_bool_bool", false),
                    GetMod_string_bool_bool);
            }
        }

        internal static event Delegates.GetMod_string_bool_bool_BeforeArgs _beforeGetMod_string_bool_bool;
        internal static event Delegates.GetMod_string_bool_bool_NormalArgs _afterGetMod_string_bool_bool;

        private static IMod GetMod_string_bool_bool(Func<string, bool, bool, IMod> orig, string name, bool onlyEnabled,
            bool allowLoadError)
        {
            Delegates.Params_GetMod_string_bool_bool @params = new()
            {
                name = name, onlyEnabled = onlyEnabled, allowLoadError = allowLoadError
            };
            _beforeGetMod_string_bool_bool?.Invoke(@params);
            name = @params.name;
            onlyEnabled = @params.onlyEnabled;
            allowLoadError = @params.allowLoadError;
            var retVal = orig(name, onlyEnabled, allowLoadError);
            if (_afterGetMod_string_bool_bool != null) retVal = _afterGetMod_string_bool_bool.Invoke(@params);
            return retVal;
        }

        internal static void HookGetMod_Type_bool_bool()
        {
            if (!HookedList.Contains("GetMod_Type_bool_bool"))
            {
                HookedList.Add("GetMod_Type_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetMod_Type_bool_bool", false),
                    GetMod_Type_bool_bool);
            }
        }

        internal static event Delegates.GetMod_Type_bool_bool_BeforeArgs _beforeGetMod_Type_bool_bool;
        internal static event Delegates.GetMod_Type_bool_bool_NormalArgs _afterGetMod_Type_bool_bool;

        private static IMod GetMod_Type_bool_bool(Func<Type, bool, bool, IMod> orig, Type type, bool onlyEnabled,
            bool allowLoadError)
        {
            Delegates.Params_GetMod_Type_bool_bool @params = new()
            {
                type = type, onlyEnabled = onlyEnabled, allowLoadError = allowLoadError
            };
            _beforeGetMod_Type_bool_bool?.Invoke(@params);
            type = @params.type;
            onlyEnabled = @params.onlyEnabled;
            allowLoadError = @params.allowLoadError;
            var retVal = orig(type, onlyEnabled, allowLoadError);
            if (_afterGetMod_Type_bool_bool != null) retVal = _afterGetMod_Type_bool_bool.Invoke(@params);
            return retVal;
        }

        internal static void HookModEnabled_ITogglableMod()
        {
            if (!HookedList.Contains("ModEnabled_ITogglableMod"))
            {
                HookedList.Add("ModEnabled_ITogglableMod");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled_ITogglableMod", false),
                    ModEnabled_ITogglableMod);
            }
        }

        internal static event Delegates.ModEnabled_ITogglableMod_BeforeArgs _beforeModEnabled_ITogglableMod;
        internal static event Delegates.ModEnabled_ITogglableMod_NormalArgs _afterModEnabled_ITogglableMod;

        private static bool ModEnabled_ITogglableMod(Func<ITogglableMod, bool> orig, ITogglableMod mod)
        {
            Delegates.Params_ModEnabled_ITogglableMod @params = new()
            {
                mod = mod
            };
            _beforeModEnabled_ITogglableMod?.Invoke(@params);
            mod = @params.mod;
            var retVal = orig(mod);
            if (_afterModEnabled_ITogglableMod != null) retVal = _afterModEnabled_ITogglableMod.Invoke(@params);
            return retVal;
        }

        internal static void HookModEnabled_string()
        {
            if (!HookedList.Contains("ModEnabled_string"))
            {
                HookedList.Add("ModEnabled_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled_string", false),
                    ModEnabled_string);
            }
        }

        internal static event Delegates.ModEnabled_string_BeforeArgs _beforeModEnabled_string;
        internal static event Delegates.ModEnabled_string_NormalArgs _afterModEnabled_string;

        private static bool ModEnabled_string(Func<string, bool> orig, string name)
        {
            Delegates.Params_ModEnabled_string @params = new()
            {
                name = name
            };
            _beforeModEnabled_string?.Invoke(@params);
            name = @params.name;
            var retVal = orig(name);
            if (_afterModEnabled_string != null) retVal = _afterModEnabled_string.Invoke(@params);
            return retVal;
        }

        internal static void HookModEnabled_Type()
        {
            if (!HookedList.Contains("ModEnabled_Type"))
            {
                HookedList.Add("ModEnabled_Type");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled_Type", false), ModEnabled_Type);
            }
        }

        internal static event Delegates.ModEnabled_Type_BeforeArgs _beforeModEnabled_Type;
        internal static event Delegates.ModEnabled_Type_NormalArgs _afterModEnabled_Type;

        private static bool ModEnabled_Type(Func<Type, bool> orig, Type type)
        {
            Delegates.Params_ModEnabled_Type @params = new()
            {
                type = type
            };
            _beforeModEnabled_Type?.Invoke(@params);
            type = @params.type;
            var retVal = orig(type);
            if (_afterModEnabled_Type != null) retVal = _afterModEnabled_Type.Invoke(@params);
            return retVal;
        }

        internal static void HookGetAllMods()
        {
            if (!HookedList.Contains("GetAllMods"))
            {
                HookedList.Add("GetAllMods");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetAllMods", false), GetAllMods);
            }
        }

        internal static event Delegates.GetAllMods_BeforeArgs _beforeGetAllMods;
        internal static event Delegates.GetAllMods_NormalArgs _afterGetAllMods;

        private static IEnumerable<IMod> GetAllMods(Func<bool, bool, IEnumerable<IMod>> orig, bool onlyEnabled,
            bool allowLoadError)
        {
            Delegates.Params_GetAllMods @params = new()
            {
                onlyEnabled = onlyEnabled, allowLoadError = allowLoadError
            };
            _beforeGetAllMods?.Invoke(@params);
            onlyEnabled = @params.onlyEnabled;
            allowLoadError = @params.allowLoadError;
            var retVal = orig(onlyEnabled, allowLoadError);
            if (_afterGetAllMods != null) retVal = _afterGetAllMods.Invoke(@params);
            return retVal;
        }

        internal static void HookOnFinishedLoadingMods()
        {
            if (!HookedList.Contains("OnFinishedLoadingMods"))
            {
                HookedList.Add("OnFinishedLoadingMods");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnFinishedLoadingMods", false),
                    OnFinishedLoadingMods);
            }
        }

        internal static event Delegates.OnFinishedLoadingMods_BeforeArgs _beforeOnFinishedLoadingMods;
        internal static event Delegates.OnFinishedLoadingMods_NormalArgs _afterOnFinishedLoadingMods;

        private static void OnFinishedLoadingMods(Action orig)
        {
            _beforeOnFinishedLoadingMods?.Invoke();
            orig();
            if (_afterOnFinishedLoadingMods != null) _afterOnFinishedLoadingMods.Invoke();
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AfterAttack_BeforeArgs(Params_AfterAttack args);

        public delegate void AfterAttack_NormalArgs(Params_AfterAttack args);

        public delegate void AfterTakeDamage_BeforeArgs(Params_AfterTakeDamage args);

        public delegate int AfterTakeDamage_NormalArgs(Params_AfterTakeDamage args);

        public delegate void BeforeAddHealth_BeforeArgs(Params_BeforeAddHealth args);

        public delegate int BeforeAddHealth_NormalArgs(Params_BeforeAddHealth args);

        public delegate void BeforeSceneLoad_BeforeArgs(Params_BeforeSceneLoad args);

        public delegate string BeforeSceneLoad_NormalArgs(Params_BeforeSceneLoad args);

        public delegate void DashVelocityChange_BeforeArgs(Params_DashVelocityChange args);

        public delegate Vector2 DashVelocityChange_NormalArgs(Params_DashVelocityChange args);

        public delegate void get_BuiltModMenuScreens_BeforeArgs();

        public delegate ReadOnlyDictionary<IMod, MenuScreen> get_BuiltModMenuScreens_NormalArgs();

        public delegate void get_GlobalSettings_BeforeArgs();

        public delegate ModHooksGlobalSettings get_GlobalSettings_NormalArgs();

        public delegate void get_Instance_BeforeArgs();

        public delegate ModHooks get_Instance_NormalArgs();

        public delegate void GetAllMods_BeforeArgs(Params_GetAllMods args);

        public delegate IEnumerable<IMod> GetAllMods_NormalArgs(Params_GetAllMods args);

        public delegate void GetMod_string_bool_bool_BeforeArgs(Params_GetMod_string_bool_bool args);

        public delegate IMod GetMod_string_bool_bool_NormalArgs(Params_GetMod_string_bool_bool args);

        public delegate void GetMod_Type_bool_bool_BeforeArgs(Params_GetMod_Type_bool_bool args);

        public delegate IMod GetMod_Type_bool_bool_NormalArgs(Params_GetMod_Type_bool_bool args);

        public delegate void GetPlayerBool_BeforeArgs(Params_GetPlayerBool args);

        public delegate bool GetPlayerBool_NormalArgs(Params_GetPlayerBool args);

        public delegate void GetPlayerFloat_BeforeArgs(Params_GetPlayerFloat args);

        public delegate float GetPlayerFloat_NormalArgs(Params_GetPlayerFloat args);

        public delegate void GetPlayerInt_BeforeArgs(Params_GetPlayerInt args);

        public delegate int GetPlayerInt_NormalArgs(Params_GetPlayerInt args);

        public delegate void GetPlayerString_BeforeArgs(Params_GetPlayerString args);

        public delegate string GetPlayerString_NormalArgs(Params_GetPlayerString args);

        public delegate void GetPlayerVector3_BeforeArgs(Params_GetPlayerVector3 args);

        public delegate Vector3 GetPlayerVector3_NormalArgs(Params_GetPlayerVector3 args);

        public delegate void GetSaveFileName_BeforeArgs(Params_GetSaveFileName args);

        public delegate string GetSaveFileName_NormalArgs(Params_GetSaveFileName args);

        public delegate void LanguageGet_BeforeArgs(Params_LanguageGet args);

        public delegate string LanguageGet_NormalArgs(Params_LanguageGet args);

        public delegate void LoadGlobalSettings_BeforeArgs();

        public delegate void LoadGlobalSettings_NormalArgs();

        public delegate void LogConsole_BeforeArgs(Params_LogConsole args);

        public delegate void LogConsole_NormalArgs(Params_LogConsole args);

        public delegate void ModEnabled_ITogglableMod_BeforeArgs(Params_ModEnabled_ITogglableMod args);

        public delegate bool ModEnabled_ITogglableMod_NormalArgs(Params_ModEnabled_ITogglableMod args);

        public delegate void ModEnabled_string_BeforeArgs(Params_ModEnabled_string args);

        public delegate bool ModEnabled_string_NormalArgs(Params_ModEnabled_string args);

        public delegate void ModEnabled_Type_BeforeArgs(Params_ModEnabled_Type args);

        public delegate bool ModEnabled_Type_NormalArgs(Params_ModEnabled_Type args);

        public delegate void OnAfterPlayerDead_BeforeArgs();

        public delegate void OnAfterPlayerDead_NormalArgs();

        public delegate void OnAfterSaveGameClear_BeforeArgs(Params_OnAfterSaveGameClear args);

        public delegate void OnAfterSaveGameClear_NormalArgs(Params_OnAfterSaveGameClear args);

        public delegate void OnAfterSaveGameLoad_BeforeArgs(Params_OnAfterSaveGameLoad args);

        public delegate void OnAfterSaveGameLoad_NormalArgs(Params_OnAfterSaveGameLoad args);

        public delegate void OnApplicationQuit_BeforeArgs();

        public delegate void OnApplicationQuit_NormalArgs();

        public delegate void OnAttack_BeforeArgs(Params_OnAttack args);

        public delegate void OnAttack_NormalArgs(Params_OnAttack args);

        public delegate void OnBeforePlayerDead_BeforeArgs();

        public delegate void OnBeforePlayerDead_NormalArgs();

        public delegate void OnBeforeSaveGameSave_BeforeArgs(Params_OnBeforeSaveGameSave args);

        public delegate void OnBeforeSaveGameSave_NormalArgs(Params_OnBeforeSaveGameSave args);

        public delegate void OnBlueHealth_BeforeArgs();

        public delegate int OnBlueHealth_NormalArgs();

        public delegate void OnCharmUpdate_BeforeArgs(Params_OnCharmUpdate args);

        public delegate void OnCharmUpdate_NormalArgs(Params_OnCharmUpdate args);

        public delegate void OnColliderCreate_BeforeArgs(Params_OnColliderCreate args);

        public delegate void OnColliderCreate_NormalArgs(Params_OnColliderCreate args);

        public delegate void OnCursor_BeforeArgs(Params_OnCursor args);

        public delegate void OnCursor_NormalArgs(Params_OnCursor args);

        public delegate void OnDashPressed_BeforeArgs();

        public delegate bool OnDashPressed_NormalArgs();

        public delegate void OnDoAttack_BeforeArgs();

        public delegate void OnDoAttack_NormalArgs();

        public delegate void OnDrawBlackBorders_BeforeArgs(Params_OnDrawBlackBorders args);

        public delegate void OnDrawBlackBorders_NormalArgs(Params_OnDrawBlackBorders args);

        public delegate void OnEnableEnemy_BeforeArgs(Params_OnEnableEnemy args);

        public delegate bool OnEnableEnemy_NormalArgs(Params_OnEnableEnemy args);

        public delegate void OnFinishedLoadingMods_BeforeArgs();

        public delegate void OnFinishedLoadingMods_NormalArgs();

        public delegate void OnFocusCost_BeforeArgs();

        public delegate float OnFocusCost_NormalArgs();

        public delegate void OnHeroUpdate_BeforeArgs();

        public delegate void OnHeroUpdate_NormalArgs();

        public delegate void OnHitInstanceBeforeHit_BeforeArgs(Params_OnHitInstanceBeforeHit args);

        public delegate HitInstance OnHitInstanceBeforeHit_NormalArgs(Params_OnHitInstanceBeforeHit args);

        public delegate void OnNewGame_BeforeArgs();

        public delegate void OnNewGame_NormalArgs();

        public delegate void OnObjectPoolSpawn_BeforeArgs(Params_OnObjectPoolSpawn args);

        public delegate GameObject OnObjectPoolSpawn_NormalArgs(Params_OnObjectPoolSpawn args);

        public delegate void OnRecieveDeathEvent_BeforeArgs(Params_OnRecieveDeathEvent args);

        public delegate void OnRecieveDeathEvent_NormalArgs(Params_OnRecieveDeathEvent args);

        public delegate void OnRecordKillForJournal_BeforeArgs(Params_OnRecordKillForJournal args);

        public delegate void OnRecordKillForJournal_NormalArgs(Params_OnRecordKillForJournal args);

        public delegate void OnSavegameClear_BeforeArgs(Params_OnSavegameClear args);

        public delegate void OnSavegameClear_NormalArgs(Params_OnSavegameClear args);

        public delegate void OnSavegameLoad_BeforeArgs(Params_OnSavegameLoad args);

        public delegate void OnSavegameLoad_NormalArgs(Params_OnSavegameLoad args);

        public delegate void OnSavegameSave_BeforeArgs(Params_OnSavegameSave args);

        public delegate void OnSavegameSave_NormalArgs(Params_OnSavegameSave args);

        public delegate void OnSceneChanged_BeforeArgs(Params_OnSceneChanged args);

        public delegate void OnSceneChanged_NormalArgs(Params_OnSceneChanged args);

        public delegate void OnSlashHit_BeforeArgs(Params_OnSlashHit args);

        public delegate void OnSlashHit_NormalArgs(Params_OnSlashHit args);

        public delegate void OnSoulGain_BeforeArgs(Params_OnSoulGain args);

        public delegate int OnSoulGain_NormalArgs(Params_OnSoulGain args);

        public delegate void OnTakeDamage_BeforeArgs(Params_OnTakeDamage args);

        public delegate int OnTakeDamage_NormalArgs(Params_OnTakeDamage args);

        public delegate void OnTakeHealth_BeforeArgs(Params_OnTakeHealth args);

        public delegate int OnTakeHealth_NormalArgs(Params_OnTakeHealth args);

        public delegate void SaveGlobalSettings_BeforeArgs();

        public delegate void SaveGlobalSettings_NormalArgs();

        public delegate void set_GlobalSettings_BeforeArgs(Params_set_GlobalSettings args);

        public delegate void set_GlobalSettings_NormalArgs(Params_set_GlobalSettings args);

        public delegate void SetPlayerBool_BeforeArgs(Params_SetPlayerBool args);

        public delegate void SetPlayerBool_NormalArgs(Params_SetPlayerBool args);

        public delegate void SetPlayerFloat_BeforeArgs(Params_SetPlayerFloat args);

        public delegate void SetPlayerFloat_NormalArgs(Params_SetPlayerFloat args);

        public delegate void SetPlayerInt_BeforeArgs(Params_SetPlayerInt args);

        public delegate void SetPlayerInt_NormalArgs(Params_SetPlayerInt args);

        public delegate void SetPlayerString_BeforeArgs(Params_SetPlayerString args);

        public delegate void SetPlayerString_NormalArgs(Params_SetPlayerString args);

        public delegate void SetPlayerVector3_BeforeArgs(Params_SetPlayerVector3 args);

        public delegate void SetPlayerVector3_NormalArgs(Params_SetPlayerVector3 args);

        public sealed class Params_set_GlobalSettings
        {
            public ModHooksGlobalSettings value;
        }

        public sealed class Params_LogConsole
        {
            public LogLevel level;
            public string message;
        }

        public sealed class Params_LanguageGet
        {
            public string key;
            public string sheet;
        }

        public sealed class Params_OnCursor
        {
            public GameManager gm;
        }

        public sealed class Params_OnColliderCreate
        {
            public GameObject go;
        }

        public sealed class Params_OnObjectPoolSpawn
        {
            public GameObject go;
        }

        public sealed class Params_OnHitInstanceBeforeHit
        {
            public HitInstance hit;
            public Fsm owner;
        }

        public sealed class Params_OnDrawBlackBorders
        {
            public List<GameObject> borders;
        }

        public sealed class Params_OnEnableEnemy
        {
            public GameObject enemy;
            public bool isAlreadyDead;
        }

        public sealed class Params_OnRecieveDeathEvent
        {
            public float? attackDirection;
            public EnemyDeathEffects enemyDeathEffects;
            public bool eventAlreadyRecieved;
            public bool isWatery;
            public bool resetDeathEvent;
            public bool spellBurn;
        }

        public sealed class Params_OnRecordKillForJournal
        {
            public EnemyDeathEffects enemyDeathEffects;
            public string killCountIntPlayerDataLookupKey;
            public string killedBoolPlayerDataLookupKey;
            public string newDataBoolPlayerDataLookupKey;
            public string playerDataName;
        }

        public sealed class Params_SetPlayerBool
        {
            public bool orig_;
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_GetPlayerBool
        {
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_SetPlayerInt
        {
            public int orig_;
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_GetPlayerInt
        {
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_SetPlayerFloat
        {
            public float orig_;
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_GetPlayerFloat
        {
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_SetPlayerString
        {
            public string orig_;
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_GetPlayerString
        {
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_SetPlayerVector3
        {
            public Vector3 orig_;
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_GetPlayerVector3
        {
            public PlayerData pd;
            public string target;
        }

        public sealed class Params_OnTakeHealth
        {
            public int damage;
        }

        public sealed class Params_OnTakeDamage
        {
            public int damage;
            public int hazardType;
        }

        public sealed class Params_AfterTakeDamage
        {
            public int damageAmount;
            public int hazardType;
        }

        public sealed class Params_OnAttack
        {
            public AttackDirection dir;
        }

        public sealed class Params_AfterAttack
        {
            public AttackDirection dir;
        }

        public sealed class Params_OnSlashHit
        {
            public GameObject gameObject;
            public Collider2D otherCollider;
        }

        public sealed class Params_OnCharmUpdate
        {
            public HeroController hc;
            public PlayerData pd;
        }

        public sealed class Params_BeforeAddHealth
        {
            public int amount;
        }

        public sealed class Params_OnSoulGain
        {
            public int num;
        }

        public sealed class Params_DashVelocityChange
        {
            public Vector2 change;
        }

        public sealed class Params_OnSavegameLoad
        {
            public int id;
        }

        public sealed class Params_OnSavegameSave
        {
            public int id;
        }

        public sealed class Params_OnSavegameClear
        {
            public int id;
        }

        public sealed class Params_OnAfterSaveGameLoad
        {
            public SaveGameData data;
        }

        public sealed class Params_OnBeforeSaveGameSave
        {
            public SaveGameData data;
        }

        public sealed class Params_GetSaveFileName
        {
            public int saveSlot;
        }

        public sealed class Params_OnAfterSaveGameClear
        {
            public int saveSlot;
        }

        public sealed class Params_OnSceneChanged
        {
            public string targetScene;
        }

        public sealed class Params_BeforeSceneLoad
        {
            public string sceneName;
        }

        public sealed class Params_GetMod_string_bool_bool
        {
            public bool allowLoadError;
            public string name;
            public bool onlyEnabled;
        }

        public sealed class Params_GetMod_Type_bool_bool
        {
            public bool allowLoadError;
            public bool onlyEnabled;
            public Type type;
        }

        public sealed class Params_ModEnabled_ITogglableMod
        {
            public ITogglableMod mod;
        }

        public sealed class Params_ModEnabled_string
        {
            public string name;
        }

        public sealed class Params_ModEnabled_Type
        {
            public Type type;
        }

        public sealed class Params_GetAllMods
        {
            public bool allowLoadError;
            public bool onlyEnabled;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_BuiltModMenuScreens_BeforeArgs get_BuiltModMenuScreens
        {
            add
            {
                HookHandler._beforeget_BuiltModMenuScreens += value;
                HookHandler.Hookget_BuiltModMenuScreens();
            }
            remove => HookHandler._beforeget_BuiltModMenuScreens -= value;
        }

        public static event Delegates.get_GlobalSettings_BeforeArgs get_GlobalSettings
        {
            add
            {
                HookHandler._beforeget_GlobalSettings += value;
                HookHandler.Hookget_GlobalSettings();
            }
            remove => HookHandler._beforeget_GlobalSettings -= value;
        }

        public static event Delegates.set_GlobalSettings_BeforeArgs set_GlobalSettings
        {
            add
            {
                HookHandler._beforeset_GlobalSettings += value;
                HookHandler.Hookset_GlobalSettings();
            }
            remove => HookHandler._beforeset_GlobalSettings -= value;
        }

        public static event Delegates.get_Instance_BeforeArgs get_Instance
        {
            add
            {
                HookHandler._beforeget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._beforeget_Instance -= value;
        }

        public static event Delegates.LoadGlobalSettings_BeforeArgs LoadGlobalSettings
        {
            add
            {
                HookHandler._beforeLoadGlobalSettings += value;
                HookHandler.HookLoadGlobalSettings();
            }
            remove => HookHandler._beforeLoadGlobalSettings -= value;
        }

        public static event Delegates.SaveGlobalSettings_BeforeArgs SaveGlobalSettings
        {
            add
            {
                HookHandler._beforeSaveGlobalSettings += value;
                HookHandler.HookSaveGlobalSettings();
            }
            remove => HookHandler._beforeSaveGlobalSettings -= value;
        }

        public static event Delegates.LogConsole_BeforeArgs LogConsole
        {
            add
            {
                HookHandler._beforeLogConsole += value;
                HookHandler.HookLogConsole();
            }
            remove => HookHandler._beforeLogConsole -= value;
        }

        public static event Delegates.LanguageGet_BeforeArgs LanguageGet
        {
            add
            {
                HookHandler._beforeLanguageGet += value;
                HookHandler.HookLanguageGet();
            }
            remove => HookHandler._beforeLanguageGet -= value;
        }

        public static event Delegates.OnCursor_BeforeArgs OnCursor
        {
            add
            {
                HookHandler._beforeOnCursor += value;
                HookHandler.HookOnCursor();
            }
            remove => HookHandler._beforeOnCursor -= value;
        }

        public static event Delegates.OnColliderCreate_BeforeArgs OnColliderCreate
        {
            add
            {
                HookHandler._beforeOnColliderCreate += value;
                HookHandler.HookOnColliderCreate();
            }
            remove => HookHandler._beforeOnColliderCreate -= value;
        }

        public static event Delegates.OnObjectPoolSpawn_BeforeArgs OnObjectPoolSpawn
        {
            add
            {
                HookHandler._beforeOnObjectPoolSpawn += value;
                HookHandler.HookOnObjectPoolSpawn();
            }
            remove => HookHandler._beforeOnObjectPoolSpawn -= value;
        }

        public static event Delegates.OnApplicationQuit_BeforeArgs OnApplicationQuit
        {
            add
            {
                HookHandler._beforeOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._beforeOnApplicationQuit -= value;
        }

        public static event Delegates.OnHitInstanceBeforeHit_BeforeArgs OnHitInstanceBeforeHit
        {
            add
            {
                HookHandler._beforeOnHitInstanceBeforeHit += value;
                HookHandler.HookOnHitInstanceBeforeHit();
            }
            remove => HookHandler._beforeOnHitInstanceBeforeHit -= value;
        }

        public static event Delegates.OnDrawBlackBorders_BeforeArgs OnDrawBlackBorders
        {
            add
            {
                HookHandler._beforeOnDrawBlackBorders += value;
                HookHandler.HookOnDrawBlackBorders();
            }
            remove => HookHandler._beforeOnDrawBlackBorders -= value;
        }

        public static event Delegates.OnEnableEnemy_BeforeArgs OnEnableEnemy
        {
            add
            {
                HookHandler._beforeOnEnableEnemy += value;
                HookHandler.HookOnEnableEnemy();
            }
            remove => HookHandler._beforeOnEnableEnemy -= value;
        }

        public static event Delegates.OnRecieveDeathEvent_BeforeArgs OnRecieveDeathEvent
        {
            add
            {
                HookHandler._beforeOnRecieveDeathEvent += value;
                HookHandler.HookOnRecieveDeathEvent();
            }
            remove => HookHandler._beforeOnRecieveDeathEvent -= value;
        }

        public static event Delegates.OnRecordKillForJournal_BeforeArgs OnRecordKillForJournal
        {
            add
            {
                HookHandler._beforeOnRecordKillForJournal += value;
                HookHandler.HookOnRecordKillForJournal();
            }
            remove => HookHandler._beforeOnRecordKillForJournal -= value;
        }

        public static event Delegates.SetPlayerBool_BeforeArgs SetPlayerBool
        {
            add
            {
                HookHandler._beforeSetPlayerBool += value;
                HookHandler.HookSetPlayerBool();
            }
            remove => HookHandler._beforeSetPlayerBool -= value;
        }

        public static event Delegates.GetPlayerBool_BeforeArgs GetPlayerBool
        {
            add
            {
                HookHandler._beforeGetPlayerBool += value;
                HookHandler.HookGetPlayerBool();
            }
            remove => HookHandler._beforeGetPlayerBool -= value;
        }

        public static event Delegates.SetPlayerInt_BeforeArgs SetPlayerInt
        {
            add
            {
                HookHandler._beforeSetPlayerInt += value;
                HookHandler.HookSetPlayerInt();
            }
            remove => HookHandler._beforeSetPlayerInt -= value;
        }

        public static event Delegates.GetPlayerInt_BeforeArgs GetPlayerInt
        {
            add
            {
                HookHandler._beforeGetPlayerInt += value;
                HookHandler.HookGetPlayerInt();
            }
            remove => HookHandler._beforeGetPlayerInt -= value;
        }

        public static event Delegates.SetPlayerFloat_BeforeArgs SetPlayerFloat
        {
            add
            {
                HookHandler._beforeSetPlayerFloat += value;
                HookHandler.HookSetPlayerFloat();
            }
            remove => HookHandler._beforeSetPlayerFloat -= value;
        }

        public static event Delegates.GetPlayerFloat_BeforeArgs GetPlayerFloat
        {
            add
            {
                HookHandler._beforeGetPlayerFloat += value;
                HookHandler.HookGetPlayerFloat();
            }
            remove => HookHandler._beforeGetPlayerFloat -= value;
        }

        public static event Delegates.SetPlayerString_BeforeArgs SetPlayerString
        {
            add
            {
                HookHandler._beforeSetPlayerString += value;
                HookHandler.HookSetPlayerString();
            }
            remove => HookHandler._beforeSetPlayerString -= value;
        }

        public static event Delegates.GetPlayerString_BeforeArgs GetPlayerString
        {
            add
            {
                HookHandler._beforeGetPlayerString += value;
                HookHandler.HookGetPlayerString();
            }
            remove => HookHandler._beforeGetPlayerString -= value;
        }

        public static event Delegates.SetPlayerVector3_BeforeArgs SetPlayerVector3
        {
            add
            {
                HookHandler._beforeSetPlayerVector3 += value;
                HookHandler.HookSetPlayerVector3();
            }
            remove => HookHandler._beforeSetPlayerVector3 -= value;
        }

        public static event Delegates.GetPlayerVector3_BeforeArgs GetPlayerVector3
        {
            add
            {
                HookHandler._beforeGetPlayerVector3 += value;
                HookHandler.HookGetPlayerVector3();
            }
            remove => HookHandler._beforeGetPlayerVector3 -= value;
        }

        public static event Delegates.OnBlueHealth_BeforeArgs OnBlueHealth
        {
            add
            {
                HookHandler._beforeOnBlueHealth += value;
                HookHandler.HookOnBlueHealth();
            }
            remove => HookHandler._beforeOnBlueHealth -= value;
        }

        public static event Delegates.OnTakeHealth_BeforeArgs OnTakeHealth
        {
            add
            {
                HookHandler._beforeOnTakeHealth += value;
                HookHandler.HookOnTakeHealth();
            }
            remove => HookHandler._beforeOnTakeHealth -= value;
        }

        public static event Delegates.OnTakeDamage_BeforeArgs OnTakeDamage
        {
            add
            {
                HookHandler._beforeOnTakeDamage += value;
                HookHandler.HookOnTakeDamage();
            }
            remove => HookHandler._beforeOnTakeDamage -= value;
        }

        public static event Delegates.AfterTakeDamage_BeforeArgs AfterTakeDamage
        {
            add
            {
                HookHandler._beforeAfterTakeDamage += value;
                HookHandler.HookAfterTakeDamage();
            }
            remove => HookHandler._beforeAfterTakeDamage -= value;
        }

        public static event Delegates.OnBeforePlayerDead_BeforeArgs OnBeforePlayerDead
        {
            add
            {
                HookHandler._beforeOnBeforePlayerDead += value;
                HookHandler.HookOnBeforePlayerDead();
            }
            remove => HookHandler._beforeOnBeforePlayerDead -= value;
        }

        public static event Delegates.OnAfterPlayerDead_BeforeArgs OnAfterPlayerDead
        {
            add
            {
                HookHandler._beforeOnAfterPlayerDead += value;
                HookHandler.HookOnAfterPlayerDead();
            }
            remove => HookHandler._beforeOnAfterPlayerDead -= value;
        }

        public static event Delegates.OnAttack_BeforeArgs OnAttack
        {
            add
            {
                HookHandler._beforeOnAttack += value;
                HookHandler.HookOnAttack();
            }
            remove => HookHandler._beforeOnAttack -= value;
        }

        public static event Delegates.OnDoAttack_BeforeArgs OnDoAttack
        {
            add
            {
                HookHandler._beforeOnDoAttack += value;
                HookHandler.HookOnDoAttack();
            }
            remove => HookHandler._beforeOnDoAttack -= value;
        }

        public static event Delegates.AfterAttack_BeforeArgs AfterAttack
        {
            add
            {
                HookHandler._beforeAfterAttack += value;
                HookHandler.HookAfterAttack();
            }
            remove => HookHandler._beforeAfterAttack -= value;
        }

        public static event Delegates.OnSlashHit_BeforeArgs OnSlashHit
        {
            add
            {
                HookHandler._beforeOnSlashHit += value;
                HookHandler.HookOnSlashHit();
            }
            remove => HookHandler._beforeOnSlashHit -= value;
        }

        public static event Delegates.OnCharmUpdate_BeforeArgs OnCharmUpdate
        {
            add
            {
                HookHandler._beforeOnCharmUpdate += value;
                HookHandler.HookOnCharmUpdate();
            }
            remove => HookHandler._beforeOnCharmUpdate -= value;
        }

        public static event Delegates.OnHeroUpdate_BeforeArgs OnHeroUpdate
        {
            add
            {
                HookHandler._beforeOnHeroUpdate += value;
                HookHandler.HookOnHeroUpdate();
            }
            remove => HookHandler._beforeOnHeroUpdate -= value;
        }

        public static event Delegates.BeforeAddHealth_BeforeArgs BeforeAddHealth
        {
            add
            {
                HookHandler._beforeBeforeAddHealth += value;
                HookHandler.HookBeforeAddHealth();
            }
            remove => HookHandler._beforeBeforeAddHealth -= value;
        }

        public static event Delegates.OnFocusCost_BeforeArgs OnFocusCost
        {
            add
            {
                HookHandler._beforeOnFocusCost += value;
                HookHandler.HookOnFocusCost();
            }
            remove => HookHandler._beforeOnFocusCost -= value;
        }

        public static event Delegates.OnSoulGain_BeforeArgs OnSoulGain
        {
            add
            {
                HookHandler._beforeOnSoulGain += value;
                HookHandler.HookOnSoulGain();
            }
            remove => HookHandler._beforeOnSoulGain -= value;
        }

        public static event Delegates.DashVelocityChange_BeforeArgs DashVelocityChange
        {
            add
            {
                HookHandler._beforeDashVelocityChange += value;
                HookHandler.HookDashVelocityChange();
            }
            remove => HookHandler._beforeDashVelocityChange -= value;
        }

        public static event Delegates.OnDashPressed_BeforeArgs OnDashPressed
        {
            add
            {
                HookHandler._beforeOnDashPressed += value;
                HookHandler.HookOnDashPressed();
            }
            remove => HookHandler._beforeOnDashPressed -= value;
        }

        public static event Delegates.OnSavegameLoad_BeforeArgs OnSavegameLoad
        {
            add
            {
                HookHandler._beforeOnSavegameLoad += value;
                HookHandler.HookOnSavegameLoad();
            }
            remove => HookHandler._beforeOnSavegameLoad -= value;
        }

        public static event Delegates.OnSavegameSave_BeforeArgs OnSavegameSave
        {
            add
            {
                HookHandler._beforeOnSavegameSave += value;
                HookHandler.HookOnSavegameSave();
            }
            remove => HookHandler._beforeOnSavegameSave -= value;
        }

        public static event Delegates.OnNewGame_BeforeArgs OnNewGame
        {
            add
            {
                HookHandler._beforeOnNewGame += value;
                HookHandler.HookOnNewGame();
            }
            remove => HookHandler._beforeOnNewGame -= value;
        }

        public static event Delegates.OnSavegameClear_BeforeArgs OnSavegameClear
        {
            add
            {
                HookHandler._beforeOnSavegameClear += value;
                HookHandler.HookOnSavegameClear();
            }
            remove => HookHandler._beforeOnSavegameClear -= value;
        }

        public static event Delegates.OnAfterSaveGameLoad_BeforeArgs OnAfterSaveGameLoad
        {
            add
            {
                HookHandler._beforeOnAfterSaveGameLoad += value;
                HookHandler.HookOnAfterSaveGameLoad();
            }
            remove => HookHandler._beforeOnAfterSaveGameLoad -= value;
        }

        public static event Delegates.OnBeforeSaveGameSave_BeforeArgs OnBeforeSaveGameSave
        {
            add
            {
                HookHandler._beforeOnBeforeSaveGameSave += value;
                HookHandler.HookOnBeforeSaveGameSave();
            }
            remove => HookHandler._beforeOnBeforeSaveGameSave -= value;
        }

        public static event Delegates.GetSaveFileName_BeforeArgs GetSaveFileName
        {
            add
            {
                HookHandler._beforeGetSaveFileName += value;
                HookHandler.HookGetSaveFileName();
            }
            remove => HookHandler._beforeGetSaveFileName -= value;
        }

        public static event Delegates.OnAfterSaveGameClear_BeforeArgs OnAfterSaveGameClear
        {
            add
            {
                HookHandler._beforeOnAfterSaveGameClear += value;
                HookHandler.HookOnAfterSaveGameClear();
            }
            remove => HookHandler._beforeOnAfterSaveGameClear -= value;
        }

        public static event Delegates.OnSceneChanged_BeforeArgs OnSceneChanged
        {
            add
            {
                HookHandler._beforeOnSceneChanged += value;
                HookHandler.HookOnSceneChanged();
            }
            remove => HookHandler._beforeOnSceneChanged -= value;
        }

        public static event Delegates.BeforeSceneLoad_BeforeArgs BeforeSceneLoad
        {
            add
            {
                HookHandler._beforeBeforeSceneLoad += value;
                HookHandler.HookBeforeSceneLoad();
            }
            remove => HookHandler._beforeBeforeSceneLoad -= value;
        }

        public static event Delegates.GetMod_string_bool_bool_BeforeArgs GetMod_string_bool_bool
        {
            add
            {
                HookHandler._beforeGetMod_string_bool_bool += value;
                HookHandler.HookGetMod_string_bool_bool();
            }
            remove => HookHandler._beforeGetMod_string_bool_bool -= value;
        }

        public static event Delegates.GetMod_Type_bool_bool_BeforeArgs GetMod_Type_bool_bool
        {
            add
            {
                HookHandler._beforeGetMod_Type_bool_bool += value;
                HookHandler.HookGetMod_Type_bool_bool();
            }
            remove => HookHandler._beforeGetMod_Type_bool_bool -= value;
        }

        public static event Delegates.ModEnabled_ITogglableMod_BeforeArgs ModEnabled_ITogglableMod
        {
            add
            {
                HookHandler._beforeModEnabled_ITogglableMod += value;
                HookHandler.HookModEnabled_ITogglableMod();
            }
            remove => HookHandler._beforeModEnabled_ITogglableMod -= value;
        }

        public static event Delegates.ModEnabled_string_BeforeArgs ModEnabled_string
        {
            add
            {
                HookHandler._beforeModEnabled_string += value;
                HookHandler.HookModEnabled_string();
            }
            remove => HookHandler._beforeModEnabled_string -= value;
        }

        public static event Delegates.ModEnabled_Type_BeforeArgs ModEnabled_Type
        {
            add
            {
                HookHandler._beforeModEnabled_Type += value;
                HookHandler.HookModEnabled_Type();
            }
            remove => HookHandler._beforeModEnabled_Type -= value;
        }

        public static event Delegates.GetAllMods_BeforeArgs GetAllMods
        {
            add
            {
                HookHandler._beforeGetAllMods += value;
                HookHandler.HookGetAllMods();
            }
            remove => HookHandler._beforeGetAllMods -= value;
        }

        public static event Delegates.OnFinishedLoadingMods_BeforeArgs OnFinishedLoadingMods
        {
            add
            {
                HookHandler._beforeOnFinishedLoadingMods += value;
                HookHandler.HookOnFinishedLoadingMods();
            }
            remove => HookHandler._beforeOnFinishedLoadingMods -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_BuiltModMenuScreens_NormalArgs get_BuiltModMenuScreens
        {
            add
            {
                HookHandler._afterget_BuiltModMenuScreens += value;
                HookHandler.Hookget_BuiltModMenuScreens();
            }
            remove => HookHandler._afterget_BuiltModMenuScreens -= value;
        }

        public static event Delegates.get_GlobalSettings_NormalArgs get_GlobalSettings
        {
            add
            {
                HookHandler._afterget_GlobalSettings += value;
                HookHandler.Hookget_GlobalSettings();
            }
            remove => HookHandler._afterget_GlobalSettings -= value;
        }

        public static event Delegates.set_GlobalSettings_NormalArgs set_GlobalSettings
        {
            add
            {
                HookHandler._afterset_GlobalSettings += value;
                HookHandler.Hookset_GlobalSettings();
            }
            remove => HookHandler._afterset_GlobalSettings -= value;
        }

        public static event Delegates.get_Instance_NormalArgs get_Instance
        {
            add
            {
                HookHandler._afterget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._afterget_Instance -= value;
        }

        public static event Delegates.LoadGlobalSettings_NormalArgs LoadGlobalSettings
        {
            add
            {
                HookHandler._afterLoadGlobalSettings += value;
                HookHandler.HookLoadGlobalSettings();
            }
            remove => HookHandler._afterLoadGlobalSettings -= value;
        }

        public static event Delegates.SaveGlobalSettings_NormalArgs SaveGlobalSettings
        {
            add
            {
                HookHandler._afterSaveGlobalSettings += value;
                HookHandler.HookSaveGlobalSettings();
            }
            remove => HookHandler._afterSaveGlobalSettings -= value;
        }

        public static event Delegates.LogConsole_NormalArgs LogConsole
        {
            add
            {
                HookHandler._afterLogConsole += value;
                HookHandler.HookLogConsole();
            }
            remove => HookHandler._afterLogConsole -= value;
        }

        public static event Delegates.LanguageGet_NormalArgs LanguageGet
        {
            add
            {
                HookHandler._afterLanguageGet += value;
                HookHandler.HookLanguageGet();
            }
            remove => HookHandler._afterLanguageGet -= value;
        }

        public static event Delegates.OnCursor_NormalArgs OnCursor
        {
            add
            {
                HookHandler._afterOnCursor += value;
                HookHandler.HookOnCursor();
            }
            remove => HookHandler._afterOnCursor -= value;
        }

        public static event Delegates.OnColliderCreate_NormalArgs OnColliderCreate
        {
            add
            {
                HookHandler._afterOnColliderCreate += value;
                HookHandler.HookOnColliderCreate();
            }
            remove => HookHandler._afterOnColliderCreate -= value;
        }

        public static event Delegates.OnObjectPoolSpawn_NormalArgs OnObjectPoolSpawn
        {
            add
            {
                HookHandler._afterOnObjectPoolSpawn += value;
                HookHandler.HookOnObjectPoolSpawn();
            }
            remove => HookHandler._afterOnObjectPoolSpawn -= value;
        }

        public static event Delegates.OnApplicationQuit_NormalArgs OnApplicationQuit
        {
            add
            {
                HookHandler._afterOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._afterOnApplicationQuit -= value;
        }

        public static event Delegates.OnHitInstanceBeforeHit_NormalArgs OnHitInstanceBeforeHit
        {
            add
            {
                HookHandler._afterOnHitInstanceBeforeHit += value;
                HookHandler.HookOnHitInstanceBeforeHit();
            }
            remove => HookHandler._afterOnHitInstanceBeforeHit -= value;
        }

        public static event Delegates.OnDrawBlackBorders_NormalArgs OnDrawBlackBorders
        {
            add
            {
                HookHandler._afterOnDrawBlackBorders += value;
                HookHandler.HookOnDrawBlackBorders();
            }
            remove => HookHandler._afterOnDrawBlackBorders -= value;
        }

        public static event Delegates.OnEnableEnemy_NormalArgs OnEnableEnemy
        {
            add
            {
                HookHandler._afterOnEnableEnemy += value;
                HookHandler.HookOnEnableEnemy();
            }
            remove => HookHandler._afterOnEnableEnemy -= value;
        }

        public static event Delegates.OnRecieveDeathEvent_NormalArgs OnRecieveDeathEvent
        {
            add
            {
                HookHandler._afterOnRecieveDeathEvent += value;
                HookHandler.HookOnRecieveDeathEvent();
            }
            remove => HookHandler._afterOnRecieveDeathEvent -= value;
        }

        public static event Delegates.OnRecordKillForJournal_NormalArgs OnRecordKillForJournal
        {
            add
            {
                HookHandler._afterOnRecordKillForJournal += value;
                HookHandler.HookOnRecordKillForJournal();
            }
            remove => HookHandler._afterOnRecordKillForJournal -= value;
        }

        public static event Delegates.SetPlayerBool_NormalArgs SetPlayerBool
        {
            add
            {
                HookHandler._afterSetPlayerBool += value;
                HookHandler.HookSetPlayerBool();
            }
            remove => HookHandler._afterSetPlayerBool -= value;
        }

        public static event Delegates.GetPlayerBool_NormalArgs GetPlayerBool
        {
            add
            {
                HookHandler._afterGetPlayerBool += value;
                HookHandler.HookGetPlayerBool();
            }
            remove => HookHandler._afterGetPlayerBool -= value;
        }

        public static event Delegates.SetPlayerInt_NormalArgs SetPlayerInt
        {
            add
            {
                HookHandler._afterSetPlayerInt += value;
                HookHandler.HookSetPlayerInt();
            }
            remove => HookHandler._afterSetPlayerInt -= value;
        }

        public static event Delegates.GetPlayerInt_NormalArgs GetPlayerInt
        {
            add
            {
                HookHandler._afterGetPlayerInt += value;
                HookHandler.HookGetPlayerInt();
            }
            remove => HookHandler._afterGetPlayerInt -= value;
        }

        public static event Delegates.SetPlayerFloat_NormalArgs SetPlayerFloat
        {
            add
            {
                HookHandler._afterSetPlayerFloat += value;
                HookHandler.HookSetPlayerFloat();
            }
            remove => HookHandler._afterSetPlayerFloat -= value;
        }

        public static event Delegates.GetPlayerFloat_NormalArgs GetPlayerFloat
        {
            add
            {
                HookHandler._afterGetPlayerFloat += value;
                HookHandler.HookGetPlayerFloat();
            }
            remove => HookHandler._afterGetPlayerFloat -= value;
        }

        public static event Delegates.SetPlayerString_NormalArgs SetPlayerString
        {
            add
            {
                HookHandler._afterSetPlayerString += value;
                HookHandler.HookSetPlayerString();
            }
            remove => HookHandler._afterSetPlayerString -= value;
        }

        public static event Delegates.GetPlayerString_NormalArgs GetPlayerString
        {
            add
            {
                HookHandler._afterGetPlayerString += value;
                HookHandler.HookGetPlayerString();
            }
            remove => HookHandler._afterGetPlayerString -= value;
        }

        public static event Delegates.SetPlayerVector3_NormalArgs SetPlayerVector3
        {
            add
            {
                HookHandler._afterSetPlayerVector3 += value;
                HookHandler.HookSetPlayerVector3();
            }
            remove => HookHandler._afterSetPlayerVector3 -= value;
        }

        public static event Delegates.GetPlayerVector3_NormalArgs GetPlayerVector3
        {
            add
            {
                HookHandler._afterGetPlayerVector3 += value;
                HookHandler.HookGetPlayerVector3();
            }
            remove => HookHandler._afterGetPlayerVector3 -= value;
        }

        public static event Delegates.OnBlueHealth_NormalArgs OnBlueHealth
        {
            add
            {
                HookHandler._afterOnBlueHealth += value;
                HookHandler.HookOnBlueHealth();
            }
            remove => HookHandler._afterOnBlueHealth -= value;
        }

        public static event Delegates.OnTakeHealth_NormalArgs OnTakeHealth
        {
            add
            {
                HookHandler._afterOnTakeHealth += value;
                HookHandler.HookOnTakeHealth();
            }
            remove => HookHandler._afterOnTakeHealth -= value;
        }

        public static event Delegates.OnTakeDamage_NormalArgs OnTakeDamage
        {
            add
            {
                HookHandler._afterOnTakeDamage += value;
                HookHandler.HookOnTakeDamage();
            }
            remove => HookHandler._afterOnTakeDamage -= value;
        }

        public static event Delegates.AfterTakeDamage_NormalArgs AfterTakeDamage
        {
            add
            {
                HookHandler._afterAfterTakeDamage += value;
                HookHandler.HookAfterTakeDamage();
            }
            remove => HookHandler._afterAfterTakeDamage -= value;
        }

        public static event Delegates.OnBeforePlayerDead_NormalArgs OnBeforePlayerDead
        {
            add
            {
                HookHandler._afterOnBeforePlayerDead += value;
                HookHandler.HookOnBeforePlayerDead();
            }
            remove => HookHandler._afterOnBeforePlayerDead -= value;
        }

        public static event Delegates.OnAfterPlayerDead_NormalArgs OnAfterPlayerDead
        {
            add
            {
                HookHandler._afterOnAfterPlayerDead += value;
                HookHandler.HookOnAfterPlayerDead();
            }
            remove => HookHandler._afterOnAfterPlayerDead -= value;
        }

        public static event Delegates.OnAttack_NormalArgs OnAttack
        {
            add
            {
                HookHandler._afterOnAttack += value;
                HookHandler.HookOnAttack();
            }
            remove => HookHandler._afterOnAttack -= value;
        }

        public static event Delegates.OnDoAttack_NormalArgs OnDoAttack
        {
            add
            {
                HookHandler._afterOnDoAttack += value;
                HookHandler.HookOnDoAttack();
            }
            remove => HookHandler._afterOnDoAttack -= value;
        }

        public static event Delegates.AfterAttack_NormalArgs AfterAttack
        {
            add
            {
                HookHandler._afterAfterAttack += value;
                HookHandler.HookAfterAttack();
            }
            remove => HookHandler._afterAfterAttack -= value;
        }

        public static event Delegates.OnSlashHit_NormalArgs OnSlashHit
        {
            add
            {
                HookHandler._afterOnSlashHit += value;
                HookHandler.HookOnSlashHit();
            }
            remove => HookHandler._afterOnSlashHit -= value;
        }

        public static event Delegates.OnCharmUpdate_NormalArgs OnCharmUpdate
        {
            add
            {
                HookHandler._afterOnCharmUpdate += value;
                HookHandler.HookOnCharmUpdate();
            }
            remove => HookHandler._afterOnCharmUpdate -= value;
        }

        public static event Delegates.OnHeroUpdate_NormalArgs OnHeroUpdate
        {
            add
            {
                HookHandler._afterOnHeroUpdate += value;
                HookHandler.HookOnHeroUpdate();
            }
            remove => HookHandler._afterOnHeroUpdate -= value;
        }

        public static event Delegates.BeforeAddHealth_NormalArgs BeforeAddHealth
        {
            add
            {
                HookHandler._afterBeforeAddHealth += value;
                HookHandler.HookBeforeAddHealth();
            }
            remove => HookHandler._afterBeforeAddHealth -= value;
        }

        public static event Delegates.OnFocusCost_NormalArgs OnFocusCost
        {
            add
            {
                HookHandler._afterOnFocusCost += value;
                HookHandler.HookOnFocusCost();
            }
            remove => HookHandler._afterOnFocusCost -= value;
        }

        public static event Delegates.OnSoulGain_NormalArgs OnSoulGain
        {
            add
            {
                HookHandler._afterOnSoulGain += value;
                HookHandler.HookOnSoulGain();
            }
            remove => HookHandler._afterOnSoulGain -= value;
        }

        public static event Delegates.DashVelocityChange_NormalArgs DashVelocityChange
        {
            add
            {
                HookHandler._afterDashVelocityChange += value;
                HookHandler.HookDashVelocityChange();
            }
            remove => HookHandler._afterDashVelocityChange -= value;
        }

        public static event Delegates.OnDashPressed_NormalArgs OnDashPressed
        {
            add
            {
                HookHandler._afterOnDashPressed += value;
                HookHandler.HookOnDashPressed();
            }
            remove => HookHandler._afterOnDashPressed -= value;
        }

        public static event Delegates.OnSavegameLoad_NormalArgs OnSavegameLoad
        {
            add
            {
                HookHandler._afterOnSavegameLoad += value;
                HookHandler.HookOnSavegameLoad();
            }
            remove => HookHandler._afterOnSavegameLoad -= value;
        }

        public static event Delegates.OnSavegameSave_NormalArgs OnSavegameSave
        {
            add
            {
                HookHandler._afterOnSavegameSave += value;
                HookHandler.HookOnSavegameSave();
            }
            remove => HookHandler._afterOnSavegameSave -= value;
        }

        public static event Delegates.OnNewGame_NormalArgs OnNewGame
        {
            add
            {
                HookHandler._afterOnNewGame += value;
                HookHandler.HookOnNewGame();
            }
            remove => HookHandler._afterOnNewGame -= value;
        }

        public static event Delegates.OnSavegameClear_NormalArgs OnSavegameClear
        {
            add
            {
                HookHandler._afterOnSavegameClear += value;
                HookHandler.HookOnSavegameClear();
            }
            remove => HookHandler._afterOnSavegameClear -= value;
        }

        public static event Delegates.OnAfterSaveGameLoad_NormalArgs OnAfterSaveGameLoad
        {
            add
            {
                HookHandler._afterOnAfterSaveGameLoad += value;
                HookHandler.HookOnAfterSaveGameLoad();
            }
            remove => HookHandler._afterOnAfterSaveGameLoad -= value;
        }

        public static event Delegates.OnBeforeSaveGameSave_NormalArgs OnBeforeSaveGameSave
        {
            add
            {
                HookHandler._afterOnBeforeSaveGameSave += value;
                HookHandler.HookOnBeforeSaveGameSave();
            }
            remove => HookHandler._afterOnBeforeSaveGameSave -= value;
        }

        public static event Delegates.GetSaveFileName_NormalArgs GetSaveFileName
        {
            add
            {
                HookHandler._afterGetSaveFileName += value;
                HookHandler.HookGetSaveFileName();
            }
            remove => HookHandler._afterGetSaveFileName -= value;
        }

        public static event Delegates.OnAfterSaveGameClear_NormalArgs OnAfterSaveGameClear
        {
            add
            {
                HookHandler._afterOnAfterSaveGameClear += value;
                HookHandler.HookOnAfterSaveGameClear();
            }
            remove => HookHandler._afterOnAfterSaveGameClear -= value;
        }

        public static event Delegates.OnSceneChanged_NormalArgs OnSceneChanged
        {
            add
            {
                HookHandler._afterOnSceneChanged += value;
                HookHandler.HookOnSceneChanged();
            }
            remove => HookHandler._afterOnSceneChanged -= value;
        }

        public static event Delegates.BeforeSceneLoad_NormalArgs BeforeSceneLoad
        {
            add
            {
                HookHandler._afterBeforeSceneLoad += value;
                HookHandler.HookBeforeSceneLoad();
            }
            remove => HookHandler._afterBeforeSceneLoad -= value;
        }

        public static event Delegates.GetMod_string_bool_bool_NormalArgs GetMod_string_bool_bool
        {
            add
            {
                HookHandler._afterGetMod_string_bool_bool += value;
                HookHandler.HookGetMod_string_bool_bool();
            }
            remove => HookHandler._afterGetMod_string_bool_bool -= value;
        }

        public static event Delegates.GetMod_Type_bool_bool_NormalArgs GetMod_Type_bool_bool
        {
            add
            {
                HookHandler._afterGetMod_Type_bool_bool += value;
                HookHandler.HookGetMod_Type_bool_bool();
            }
            remove => HookHandler._afterGetMod_Type_bool_bool -= value;
        }

        public static event Delegates.ModEnabled_ITogglableMod_NormalArgs ModEnabled_ITogglableMod
        {
            add
            {
                HookHandler._afterModEnabled_ITogglableMod += value;
                HookHandler.HookModEnabled_ITogglableMod();
            }
            remove => HookHandler._afterModEnabled_ITogglableMod -= value;
        }

        public static event Delegates.ModEnabled_string_NormalArgs ModEnabled_string
        {
            add
            {
                HookHandler._afterModEnabled_string += value;
                HookHandler.HookModEnabled_string();
            }
            remove => HookHandler._afterModEnabled_string -= value;
        }

        public static event Delegates.ModEnabled_Type_NormalArgs ModEnabled_Type
        {
            add
            {
                HookHandler._afterModEnabled_Type += value;
                HookHandler.HookModEnabled_Type();
            }
            remove => HookHandler._afterModEnabled_Type -= value;
        }

        public static event Delegates.GetAllMods_NormalArgs GetAllMods
        {
            add
            {
                HookHandler._afterGetAllMods += value;
                HookHandler.HookGetAllMods();
            }
            remove => HookHandler._afterGetAllMods -= value;
        }

        public static event Delegates.OnFinishedLoadingMods_NormalArgs OnFinishedLoadingMods
        {
            add
            {
                HookHandler._afterOnFinishedLoadingMods += value;
                HookHandler.HookOnFinishedLoadingMods();
            }
            remove => HookHandler._afterOnFinishedLoadingMods -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_BuiltModMenuScreens_NormalArgs get_BuiltModMenuScreens
        {
            add => HookEndpointManager.Add<Delegates.get_BuiltModMenuScreens_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_BuiltModMenuScreens", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BuiltModMenuScreens_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_BuiltModMenuScreens", false), value);
        }

        public static event Delegates.get_GlobalSettings_NormalArgs get_GlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.get_GlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_GlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_GlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_GlobalSettings", false), value);
        }

        public static event Delegates.set_GlobalSettings_NormalArgs set_GlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.set_GlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "set_GlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_GlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "set_GlobalSettings", false), value);
        }

        public static event Delegates.get_Instance_NormalArgs get_Instance
        {
            add => HookEndpointManager.Add<Delegates.get_Instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_Instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "get_Instance", false), value);
        }

        public static event Delegates.LoadGlobalSettings_NormalArgs LoadGlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.LoadGlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LoadGlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.LoadGlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LoadGlobalSettings", false), value);
        }

        public static event Delegates.SaveGlobalSettings_NormalArgs SaveGlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.SaveGlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SaveGlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.SaveGlobalSettings_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SaveGlobalSettings", false), value);
        }

        public static event Delegates.LogConsole_NormalArgs LogConsole
        {
            add => HookEndpointManager.Add<Delegates.LogConsole_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LogConsole", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogConsole_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LogConsole", false), value);
        }

        public static event Delegates.LanguageGet_NormalArgs LanguageGet
        {
            add => HookEndpointManager.Add<Delegates.LanguageGet_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LanguageGet", false), value);
            remove => HookEndpointManager.Remove<Delegates.LanguageGet_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "LanguageGet", false), value);
        }

        public static event Delegates.OnCursor_NormalArgs OnCursor
        {
            add => HookEndpointManager.Add<Delegates.OnCursor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnCursor", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnCursor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnCursor", false), value);
        }

        public static event Delegates.OnColliderCreate_NormalArgs OnColliderCreate
        {
            add => HookEndpointManager.Add<Delegates.OnColliderCreate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnColliderCreate", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnColliderCreate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnColliderCreate", false), value);
        }

        public static event Delegates.OnObjectPoolSpawn_NormalArgs OnObjectPoolSpawn
        {
            add => HookEndpointManager.Add<Delegates.OnObjectPoolSpawn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnObjectPoolSpawn", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnObjectPoolSpawn_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnObjectPoolSpawn", false), value);
        }

        public static event Delegates.OnApplicationQuit_NormalArgs OnApplicationQuit
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationQuit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnApplicationQuit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationQuit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnApplicationQuit", false), value);
        }

        public static event Delegates.OnHitInstanceBeforeHit_NormalArgs OnHitInstanceBeforeHit
        {
            add => HookEndpointManager.Add<Delegates.OnHitInstanceBeforeHit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnHitInstanceBeforeHit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnHitInstanceBeforeHit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnHitInstanceBeforeHit", false), value);
        }

        public static event Delegates.OnDrawBlackBorders_NormalArgs OnDrawBlackBorders
        {
            add => HookEndpointManager.Add<Delegates.OnDrawBlackBorders_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDrawBlackBorders", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnDrawBlackBorders_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDrawBlackBorders", false), value);
        }

        public static event Delegates.OnEnableEnemy_NormalArgs OnEnableEnemy
        {
            add => HookEndpointManager.Add<Delegates.OnEnableEnemy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnEnableEnemy", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnableEnemy_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnEnableEnemy", false), value);
        }

        public static event Delegates.OnRecieveDeathEvent_NormalArgs OnRecieveDeathEvent
        {
            add => HookEndpointManager.Add<Delegates.OnRecieveDeathEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnRecieveDeathEvent", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnRecieveDeathEvent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnRecieveDeathEvent", false), value);
        }

        public static event Delegates.OnRecordKillForJournal_NormalArgs OnRecordKillForJournal
        {
            add => HookEndpointManager.Add<Delegates.OnRecordKillForJournal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnRecordKillForJournal", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnRecordKillForJournal_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnRecordKillForJournal", false), value);
        }

        public static event Delegates.SetPlayerBool_NormalArgs SetPlayerBool
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerBool", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerBool", false), value);
        }

        public static event Delegates.GetPlayerBool_NormalArgs GetPlayerBool
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerBool", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerBool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerBool", false), value);
        }

        public static event Delegates.SetPlayerInt_NormalArgs SetPlayerInt
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerInt", false), value);
        }

        public static event Delegates.GetPlayerInt_NormalArgs GetPlayerInt
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerInt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerInt", false), value);
        }

        public static event Delegates.SetPlayerFloat_NormalArgs SetPlayerFloat
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerFloat", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerFloat", false), value);
        }

        public static event Delegates.GetPlayerFloat_NormalArgs GetPlayerFloat
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerFloat", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerFloat_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerFloat", false), value);
        }

        public static event Delegates.SetPlayerString_NormalArgs SetPlayerString
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerString", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerString", false), value);
        }

        public static event Delegates.GetPlayerString_NormalArgs GetPlayerString
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerString", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerString_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerString", false), value);
        }

        public static event Delegates.SetPlayerVector3_NormalArgs SetPlayerVector3
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerVector3_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerVector3", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerVector3_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "SetPlayerVector3", false), value);
        }

        public static event Delegates.GetPlayerVector3_NormalArgs GetPlayerVector3
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerVector3_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerVector3", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerVector3_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetPlayerVector3", false), value);
        }

        public static event Delegates.OnBlueHealth_NormalArgs OnBlueHealth
        {
            add => HookEndpointManager.Add<Delegates.OnBlueHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBlueHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnBlueHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBlueHealth", false), value);
        }

        public static event Delegates.OnTakeHealth_NormalArgs OnTakeHealth
        {
            add => HookEndpointManager.Add<Delegates.OnTakeHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnTakeHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnTakeHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnTakeHealth", false), value);
        }

        public static event Delegates.OnTakeDamage_NormalArgs OnTakeDamage
        {
            add => HookEndpointManager.Add<Delegates.OnTakeDamage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnTakeDamage", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnTakeDamage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnTakeDamage", false), value);
        }

        public static event Delegates.AfterTakeDamage_NormalArgs AfterTakeDamage
        {
            add => HookEndpointManager.Add<Delegates.AfterTakeDamage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "AfterTakeDamage", false), value);
            remove => HookEndpointManager.Remove<Delegates.AfterTakeDamage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "AfterTakeDamage", false), value);
        }

        public static event Delegates.OnBeforePlayerDead_NormalArgs OnBeforePlayerDead
        {
            add => HookEndpointManager.Add<Delegates.OnBeforePlayerDead_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBeforePlayerDead", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnBeforePlayerDead_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBeforePlayerDead", false), value);
        }

        public static event Delegates.OnAfterPlayerDead_NormalArgs OnAfterPlayerDead
        {
            add => HookEndpointManager.Add<Delegates.OnAfterPlayerDead_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterPlayerDead", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAfterPlayerDead_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterPlayerDead", false), value);
        }

        public static event Delegates.OnAttack_NormalArgs OnAttack
        {
            add => HookEndpointManager.Add<Delegates.OnAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAttack", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAttack", false), value);
        }

        public static event Delegates.OnDoAttack_NormalArgs OnDoAttack
        {
            add => HookEndpointManager.Add<Delegates.OnDoAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDoAttack", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnDoAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDoAttack", false), value);
        }

        public static event Delegates.AfterAttack_NormalArgs AfterAttack
        {
            add => HookEndpointManager.Add<Delegates.AfterAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "AfterAttack", false), value);
            remove => HookEndpointManager.Remove<Delegates.AfterAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "AfterAttack", false), value);
        }

        public static event Delegates.OnSlashHit_NormalArgs OnSlashHit
        {
            add => HookEndpointManager.Add<Delegates.OnSlashHit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSlashHit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSlashHit_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSlashHit", false), value);
        }

        public static event Delegates.OnCharmUpdate_NormalArgs OnCharmUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnCharmUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnCharmUpdate", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnCharmUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnCharmUpdate", false), value);
        }

        public static event Delegates.OnHeroUpdate_NormalArgs OnHeroUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnHeroUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnHeroUpdate", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnHeroUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnHeroUpdate", false), value);
        }

        public static event Delegates.BeforeAddHealth_NormalArgs BeforeAddHealth
        {
            add => HookEndpointManager.Add<Delegates.BeforeAddHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "BeforeAddHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.BeforeAddHealth_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "BeforeAddHealth", false), value);
        }

        public static event Delegates.OnFocusCost_NormalArgs OnFocusCost
        {
            add => HookEndpointManager.Add<Delegates.OnFocusCost_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnFocusCost", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnFocusCost_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnFocusCost", false), value);
        }

        public static event Delegates.OnSoulGain_NormalArgs OnSoulGain
        {
            add => HookEndpointManager.Add<Delegates.OnSoulGain_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSoulGain", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSoulGain_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSoulGain", false), value);
        }

        public static event Delegates.DashVelocityChange_NormalArgs DashVelocityChange
        {
            add => HookEndpointManager.Add<Delegates.DashVelocityChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "DashVelocityChange", false), value);
            remove => HookEndpointManager.Remove<Delegates.DashVelocityChange_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "DashVelocityChange", false), value);
        }

        public static event Delegates.OnDashPressed_NormalArgs OnDashPressed
        {
            add => HookEndpointManager.Add<Delegates.OnDashPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDashPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnDashPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnDashPressed", false), value);
        }

        public static event Delegates.OnSavegameLoad_NormalArgs OnSavegameLoad
        {
            add => HookEndpointManager.Add<Delegates.OnSavegameLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameLoad", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSavegameLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameLoad", false), value);
        }

        public static event Delegates.OnSavegameSave_NormalArgs OnSavegameSave
        {
            add => HookEndpointManager.Add<Delegates.OnSavegameSave_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameSave", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSavegameSave_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameSave", false), value);
        }

        public static event Delegates.OnNewGame_NormalArgs OnNewGame
        {
            add => HookEndpointManager.Add<Delegates.OnNewGame_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnNewGame", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnNewGame_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnNewGame", false), value);
        }

        public static event Delegates.OnSavegameClear_NormalArgs OnSavegameClear
        {
            add => HookEndpointManager.Add<Delegates.OnSavegameClear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameClear", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSavegameClear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSavegameClear", false), value);
        }

        public static event Delegates.OnAfterSaveGameLoad_NormalArgs OnAfterSaveGameLoad
        {
            add => HookEndpointManager.Add<Delegates.OnAfterSaveGameLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterSaveGameLoad", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAfterSaveGameLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterSaveGameLoad", false), value);
        }

        public static event Delegates.OnBeforeSaveGameSave_NormalArgs OnBeforeSaveGameSave
        {
            add => HookEndpointManager.Add<Delegates.OnBeforeSaveGameSave_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBeforeSaveGameSave", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnBeforeSaveGameSave_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnBeforeSaveGameSave", false), value);
        }

        public static event Delegates.GetSaveFileName_NormalArgs GetSaveFileName
        {
            add => HookEndpointManager.Add<Delegates.GetSaveFileName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetSaveFileName", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSaveFileName_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetSaveFileName", false), value);
        }

        public static event Delegates.OnAfterSaveGameClear_NormalArgs OnAfterSaveGameClear
        {
            add => HookEndpointManager.Add<Delegates.OnAfterSaveGameClear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterSaveGameClear", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAfterSaveGameClear_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnAfterSaveGameClear", false), value);
        }

        public static event Delegates.OnSceneChanged_NormalArgs OnSceneChanged
        {
            add => HookEndpointManager.Add<Delegates.OnSceneChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSceneChanged", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSceneChanged_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnSceneChanged", false), value);
        }

        public static event Delegates.BeforeSceneLoad_NormalArgs BeforeSceneLoad
        {
            add => HookEndpointManager.Add<Delegates.BeforeSceneLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "BeforeSceneLoad", false), value);
            remove => HookEndpointManager.Remove<Delegates.BeforeSceneLoad_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "BeforeSceneLoad", false), value);
        }

        public static event Delegates.GetMod_string_bool_bool_NormalArgs GetMod_string_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.GetMod_string_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetMod", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetMod_string_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetMod", false), value);
        }

        public static event Delegates.GetMod_Type_bool_bool_NormalArgs GetMod_Type_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.GetMod_Type_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetMod", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetMod_Type_bool_bool_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetMod", false), value);
        }

        public static event Delegates.ModEnabled_ITogglableMod_NormalArgs ModEnabled_ITogglableMod
        {
            add => HookEndpointManager.Add<Delegates.ModEnabled_ITogglableMod_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModEnabled_ITogglableMod_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled", false), value);
        }

        public static event Delegates.ModEnabled_string_NormalArgs ModEnabled_string
        {
            add => HookEndpointManager.Add<Delegates.ModEnabled_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModEnabled_string_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled", false), value);
        }

        public static event Delegates.ModEnabled_Type_NormalArgs ModEnabled_Type
        {
            add => HookEndpointManager.Add<Delegates.ModEnabled_Type_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModEnabled_Type_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "ModEnabled", false), value);
        }

        public static event Delegates.GetAllMods_NormalArgs GetAllMods
        {
            add => HookEndpointManager.Add<Delegates.GetAllMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetAllMods", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetAllMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "GetAllMods", false), value);
        }

        public static event Delegates.OnFinishedLoadingMods_NormalArgs OnFinishedLoadingMods
        {
            add => HookEndpointManager.Add<Delegates.OnFinishedLoadingMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnFinishedLoadingMods", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnFinishedLoadingMods_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ModHooks), "OnFinishedLoadingMods", false), value);
        }
    }
}