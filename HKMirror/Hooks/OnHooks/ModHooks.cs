using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ModHooks class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnModHooks
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_BuiltModMenuScreens()
        {
            if (!HookedList.Contains("get_BuiltModMenuScreens"))
            {
                HookedList.Add("get_BuiltModMenuScreens");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_BuiltModMenuScreens", false),
                    get_BuiltModMenuScreens);
            }
        }

        internal static event Delegates.get_BuiltModMenuScreens_BeforeArgs _beforeget_BuiltModMenuScreens;
        internal static event Delegates.get_BuiltModMenuScreens_AfterArgs _afterget_BuiltModMenuScreens;

        private static System.Collections.ObjectModel.ReadOnlyDictionary<Modding.IMod, MenuScreen>
            get_BuiltModMenuScreens(
                Func<System.Collections.ObjectModel.ReadOnlyDictionary<Modding.IMod, MenuScreen>> orig)
        {
            if (_beforeget_BuiltModMenuScreens != null)
            {
                foreach (Delegates.get_BuiltModMenuScreens_BeforeArgs toInvoke in _beforeget_BuiltModMenuScreens
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_BuiltModMenuScreens?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_BuiltModMenuScreens != null)
            {
                foreach (Delegates.get_BuiltModMenuScreens_AfterArgs toInvoke in _afterget_BuiltModMenuScreens
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_BuiltModMenuScreens.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_GlobalSettings()
        {
            if (!HookedList.Contains("get_GlobalSettings"))
            {
                HookedList.Add("get_GlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_GlobalSettings", false),
                    get_GlobalSettings);
            }
        }

        internal static event Delegates.get_GlobalSettings_BeforeArgs _beforeget_GlobalSettings;
        internal static event Delegates.get_GlobalSettings_AfterArgs _afterget_GlobalSettings;

        private static Modding.ModHooksGlobalSettings get_GlobalSettings(Func<Modding.ModHooksGlobalSettings> orig)
        {
            if (_beforeget_GlobalSettings != null)
            {
                foreach (Delegates.get_GlobalSettings_BeforeArgs toInvoke in
                         _beforeget_GlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeget_GlobalSettings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_GlobalSettings != null)
            {
                foreach (Delegates.get_GlobalSettings_AfterArgs toInvoke in
                         _afterget_GlobalSettings.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_GlobalSettings.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_GlobalSettings()
        {
            if (!HookedList.Contains("set_GlobalSettings"))
            {
                HookedList.Add("set_GlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "set_GlobalSettings", false),
                    set_GlobalSettings);
            }
        }

        internal static event Delegates.set_GlobalSettings_BeforeArgs _beforeset_GlobalSettings;
        internal static event Delegates.set_GlobalSettings_AfterArgs _afterset_GlobalSettings;

        private static void set_GlobalSettings(Action<Modding.ModHooksGlobalSettings> orig,
            Modding.ModHooksGlobalSettings value)
        {
            Delegates.Params_set_GlobalSettings @params = new()
            {
                value = value
            };
            if (_beforeset_GlobalSettings != null)
            {
                foreach (Delegates.set_GlobalSettings_BeforeArgs toInvoke in
                         _beforeset_GlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeset_GlobalSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            value = @params.value;
            orig(value);
            if (_afterset_GlobalSettings != null)
            {
                foreach (Delegates.set_GlobalSettings_AfterArgs toInvoke in
                         _afterset_GlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _afterset_GlobalSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Instance()
        {
            if (!HookedList.Contains("get_Instance"))
            {
                HookedList.Add("get_Instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_Instance", false), get_Instance);
            }
        }

        internal static event Delegates.get_Instance_BeforeArgs _beforeget_Instance;
        internal static event Delegates.get_Instance_AfterArgs _afterget_Instance;

        private static Modding.ModHooks get_Instance(Func<Modding.ModHooks> orig)
        {
            if (_beforeget_Instance != null)
            {
                foreach (Delegates.get_Instance_BeforeArgs toInvoke in _beforeget_Instance.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_Instance != null)
            {
                foreach (Delegates.get_Instance_AfterArgs toInvoke in _afterget_Instance.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookLoadGlobalSettings()
        {
            if (!HookedList.Contains("LoadGlobalSettings"))
            {
                HookedList.Add("LoadGlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LoadGlobalSettings", false),
                    LoadGlobalSettings);
            }
        }

        internal static event Delegates.LoadGlobalSettings_BeforeArgs _beforeLoadGlobalSettings;
        internal static event Delegates.LoadGlobalSettings_AfterArgs _afterLoadGlobalSettings;

        private static void LoadGlobalSettings(Action orig)
        {
            if (_beforeLoadGlobalSettings != null)
            {
                foreach (Delegates.LoadGlobalSettings_BeforeArgs toInvoke in
                         _beforeLoadGlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeLoadGlobalSettings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterLoadGlobalSettings != null)
            {
                foreach (Delegates.LoadGlobalSettings_AfterArgs toInvoke in
                         _afterLoadGlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _afterLoadGlobalSettings.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSaveGlobalSettings()
        {
            if (!HookedList.Contains("SaveGlobalSettings"))
            {
                HookedList.Add("SaveGlobalSettings");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SaveGlobalSettings", false),
                    SaveGlobalSettings);
            }
        }

        internal static event Delegates.SaveGlobalSettings_BeforeArgs _beforeSaveGlobalSettings;
        internal static event Delegates.SaveGlobalSettings_AfterArgs _afterSaveGlobalSettings;

        private static void SaveGlobalSettings(Action orig)
        {
            if (_beforeSaveGlobalSettings != null)
            {
                foreach (Delegates.SaveGlobalSettings_BeforeArgs toInvoke in
                         _beforeSaveGlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _beforeSaveGlobalSettings?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterSaveGlobalSettings != null)
            {
                foreach (Delegates.SaveGlobalSettings_AfterArgs toInvoke in
                         _afterSaveGlobalSettings.GetInvocationList())
                {
                    try
                    {
                        _afterSaveGlobalSettings.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLogConsole()
        {
            if (!HookedList.Contains("LogConsole"))
            {
                HookedList.Add("LogConsole");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LogConsole", false), LogConsole);
            }
        }

        internal static event Delegates.LogConsole_BeforeArgs _beforeLogConsole;
        internal static event Delegates.LogConsole_AfterArgs _afterLogConsole;

        private static void LogConsole(Action<string, Modding.LogLevel> orig, string message, Modding.LogLevel level)
        {
            Delegates.Params_LogConsole @params = new()
            {
                message = message, level = level
            };
            if (_beforeLogConsole != null)
            {
                foreach (Delegates.LogConsole_BeforeArgs toInvoke in _beforeLogConsole.GetInvocationList())
                {
                    try
                    {
                        _beforeLogConsole?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            message = @params.message;
            level = @params.level;
            orig(message, level);
            if (_afterLogConsole != null)
            {
                foreach (Delegates.LogConsole_AfterArgs toInvoke in _afterLogConsole.GetInvocationList())
                {
                    try
                    {
                        _afterLogConsole.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLanguageGet()
        {
            if (!HookedList.Contains("LanguageGet"))
            {
                HookedList.Add("LanguageGet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LanguageGet", false), LanguageGet);
            }
        }

        internal static event Delegates.LanguageGet_BeforeArgs _beforeLanguageGet;
        internal static event Delegates.LanguageGet_AfterArgs _afterLanguageGet;

        private static string LanguageGet(Func<string, string, string> orig, string key, string sheet)
        {
            Delegates.Params_LanguageGet @params = new()
            {
                key = key, sheet = sheet
            };
            if (_beforeLanguageGet != null)
            {
                foreach (Delegates.LanguageGet_BeforeArgs toInvoke in _beforeLanguageGet.GetInvocationList())
                {
                    try
                    {
                        _beforeLanguageGet?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            key = @params.key;
            sheet = @params.sheet;
            var retVal = orig(key, sheet);
            if (_afterLanguageGet != null)
            {
                foreach (Delegates.LanguageGet_AfterArgs toInvoke in _afterLanguageGet.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterLanguageGet.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnCursor()
        {
            if (!HookedList.Contains("OnCursor"))
            {
                HookedList.Add("OnCursor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnCursor", false), OnCursor);
            }
        }

        internal static event Delegates.OnCursor_BeforeArgs _beforeOnCursor;
        internal static event Delegates.OnCursor_AfterArgs _afterOnCursor;

        private static void OnCursor(Action<GameManager> orig, GameManager gm)
        {
            Delegates.Params_OnCursor @params = new()
            {
                gm = gm
            };
            if (_beforeOnCursor != null)
            {
                foreach (Delegates.OnCursor_BeforeArgs toInvoke in _beforeOnCursor.GetInvocationList())
                {
                    try
                    {
                        _beforeOnCursor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            gm = @params.gm;
            orig(gm);
            if (_afterOnCursor != null)
            {
                foreach (Delegates.OnCursor_AfterArgs toInvoke in _afterOnCursor.GetInvocationList())
                {
                    try
                    {
                        _afterOnCursor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnColliderCreate()
        {
            if (!HookedList.Contains("OnColliderCreate"))
            {
                HookedList.Add("OnColliderCreate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnColliderCreate", false),
                    OnColliderCreate);
            }
        }

        internal static event Delegates.OnColliderCreate_BeforeArgs _beforeOnColliderCreate;
        internal static event Delegates.OnColliderCreate_AfterArgs _afterOnColliderCreate;

        private static void OnColliderCreate(Action<UnityEngine.GameObject> orig, UnityEngine.GameObject go)
        {
            Delegates.Params_OnColliderCreate @params = new()
            {
                go = go
            };
            if (_beforeOnColliderCreate != null)
            {
                foreach (Delegates.OnColliderCreate_BeforeArgs toInvoke in _beforeOnColliderCreate.GetInvocationList())
                {
                    try
                    {
                        _beforeOnColliderCreate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            go = @params.go;
            orig(go);
            if (_afterOnColliderCreate != null)
            {
                foreach (Delegates.OnColliderCreate_AfterArgs toInvoke in _afterOnColliderCreate.GetInvocationList())
                {
                    try
                    {
                        _afterOnColliderCreate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnObjectPoolSpawn()
        {
            if (!HookedList.Contains("OnObjectPoolSpawn"))
            {
                HookedList.Add("OnObjectPoolSpawn");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnObjectPoolSpawn", false),
                    OnObjectPoolSpawn);
            }
        }

        internal static event Delegates.OnObjectPoolSpawn_BeforeArgs _beforeOnObjectPoolSpawn;
        internal static event Delegates.OnObjectPoolSpawn_AfterArgs _afterOnObjectPoolSpawn;

        private static UnityEngine.GameObject OnObjectPoolSpawn(
            Func<UnityEngine.GameObject, UnityEngine.GameObject> orig, UnityEngine.GameObject go)
        {
            Delegates.Params_OnObjectPoolSpawn @params = new()
            {
                go = go
            };
            if (_beforeOnObjectPoolSpawn != null)
            {
                foreach (Delegates.OnObjectPoolSpawn_BeforeArgs toInvoke in
                         _beforeOnObjectPoolSpawn.GetInvocationList())
                {
                    try
                    {
                        _beforeOnObjectPoolSpawn?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            go = @params.go;
            var retVal = orig(go);
            if (_afterOnObjectPoolSpawn != null)
            {
                foreach (Delegates.OnObjectPoolSpawn_AfterArgs toInvoke in _afterOnObjectPoolSpawn.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnObjectPoolSpawn.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnApplicationQuit()
        {
            if (!HookedList.Contains("OnApplicationQuit"))
            {
                HookedList.Add("OnApplicationQuit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnApplicationQuit", false),
                    OnApplicationQuit);
            }
        }

        internal static event Delegates.OnApplicationQuit_BeforeArgs _beforeOnApplicationQuit;
        internal static event Delegates.OnApplicationQuit_AfterArgs _afterOnApplicationQuit;

        private static void OnApplicationQuit(Action orig)
        {
            if (_beforeOnApplicationQuit != null)
            {
                foreach (Delegates.OnApplicationQuit_BeforeArgs toInvoke in
                         _beforeOnApplicationQuit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnApplicationQuit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnApplicationQuit != null)
            {
                foreach (Delegates.OnApplicationQuit_AfterArgs toInvoke in _afterOnApplicationQuit.GetInvocationList())
                {
                    try
                    {
                        _afterOnApplicationQuit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnHitInstanceBeforeHit()
        {
            if (!HookedList.Contains("OnHitInstanceBeforeHit"))
            {
                HookedList.Add("OnHitInstanceBeforeHit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnHitInstanceBeforeHit", false),
                    OnHitInstanceBeforeHit);
            }
        }

        internal static event Delegates.OnHitInstanceBeforeHit_BeforeArgs _beforeOnHitInstanceBeforeHit;
        internal static event Delegates.OnHitInstanceBeforeHit_AfterArgs _afterOnHitInstanceBeforeHit;

        private static HitInstance OnHitInstanceBeforeHit(
            Func<HutongGames.PlayMaker.Fsm, HitInstance, HitInstance> orig, HutongGames.PlayMaker.Fsm owner,
            HitInstance hit)
        {
            Delegates.Params_OnHitInstanceBeforeHit @params = new()
            {
                owner = owner, hit = hit
            };
            if (_beforeOnHitInstanceBeforeHit != null)
            {
                foreach (Delegates.OnHitInstanceBeforeHit_BeforeArgs toInvoke in _beforeOnHitInstanceBeforeHit
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnHitInstanceBeforeHit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            owner = @params.owner;
            hit = @params.hit;
            var retVal = orig(owner, hit);
            if (_afterOnHitInstanceBeforeHit != null)
            {
                foreach (Delegates.OnHitInstanceBeforeHit_AfterArgs toInvoke in _afterOnHitInstanceBeforeHit
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnHitInstanceBeforeHit.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnDrawBlackBorders()
        {
            if (!HookedList.Contains("OnDrawBlackBorders"))
            {
                HookedList.Add("OnDrawBlackBorders");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDrawBlackBorders", false),
                    OnDrawBlackBorders);
            }
        }

        internal static event Delegates.OnDrawBlackBorders_BeforeArgs _beforeOnDrawBlackBorders;
        internal static event Delegates.OnDrawBlackBorders_AfterArgs _afterOnDrawBlackBorders;

        private static void OnDrawBlackBorders(Action<System.Collections.Generic.List<UnityEngine.GameObject>> orig,
            System.Collections.Generic.List<UnityEngine.GameObject> borders)
        {
            Delegates.Params_OnDrawBlackBorders @params = new()
            {
                borders = borders
            };
            if (_beforeOnDrawBlackBorders != null)
            {
                foreach (Delegates.OnDrawBlackBorders_BeforeArgs toInvoke in
                         _beforeOnDrawBlackBorders.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDrawBlackBorders?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            borders = @params.borders;
            orig(borders);
            if (_afterOnDrawBlackBorders != null)
            {
                foreach (Delegates.OnDrawBlackBorders_AfterArgs toInvoke in
                         _afterOnDrawBlackBorders.GetInvocationList())
                {
                    try
                    {
                        _afterOnDrawBlackBorders.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnableEnemy()
        {
            if (!HookedList.Contains("OnEnableEnemy"))
            {
                HookedList.Add("OnEnableEnemy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnEnableEnemy", false),
                    OnEnableEnemy);
            }
        }

        internal static event Delegates.OnEnableEnemy_BeforeArgs _beforeOnEnableEnemy;
        internal static event Delegates.OnEnableEnemy_AfterArgs _afterOnEnableEnemy;

        private static bool OnEnableEnemy(Func<UnityEngine.GameObject, bool, bool> orig, UnityEngine.GameObject enemy,
            bool isAlreadyDead)
        {
            Delegates.Params_OnEnableEnemy @params = new()
            {
                enemy = enemy, isAlreadyDead = isAlreadyDead
            };
            if (_beforeOnEnableEnemy != null)
            {
                foreach (Delegates.OnEnableEnemy_BeforeArgs toInvoke in _beforeOnEnableEnemy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnableEnemy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            enemy = @params.enemy;
            isAlreadyDead = @params.isAlreadyDead;
            var retVal = orig(enemy, isAlreadyDead);
            if (_afterOnEnableEnemy != null)
            {
                foreach (Delegates.OnEnableEnemy_AfterArgs toInvoke in _afterOnEnableEnemy.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnEnableEnemy.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnRecieveDeathEvent()
        {
            if (!HookedList.Contains("OnRecieveDeathEvent"))
            {
                HookedList.Add("OnRecieveDeathEvent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnRecieveDeathEvent", false),
                    OnRecieveDeathEvent);
            }
        }

        internal static event Delegates.OnRecieveDeathEvent_BeforeArgs _beforeOnRecieveDeathEvent;
        internal static event Delegates.OnRecieveDeathEvent_AfterArgs _afterOnRecieveDeathEvent;

        private static void OnRecieveDeathEvent(Action<EnemyDeathEffects, bool, float?, bool, bool, bool> orig,
            EnemyDeathEffects enemyDeathEffects, bool eventAlreadyRecieved, float? attackDirection,
            bool resetDeathEvent, bool spellBurn, bool isWatery)
        {
            Delegates.Params_OnRecieveDeathEvent @params = new()
            {
                enemyDeathEffects = enemyDeathEffects, eventAlreadyRecieved = eventAlreadyRecieved,
                attackDirection = attackDirection, resetDeathEvent = resetDeathEvent, spellBurn = spellBurn,
                isWatery = isWatery
            };
            if (_beforeOnRecieveDeathEvent != null)
            {
                foreach (Delegates.OnRecieveDeathEvent_BeforeArgs toInvoke in _beforeOnRecieveDeathEvent
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnRecieveDeathEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            enemyDeathEffects = @params.enemyDeathEffects;
            eventAlreadyRecieved = @params.eventAlreadyRecieved;
            attackDirection = @params.attackDirection;
            resetDeathEvent = @params.resetDeathEvent;
            spellBurn = @params.spellBurn;
            isWatery = @params.isWatery;
            orig(enemyDeathEffects, eventAlreadyRecieved, attackDirection, resetDeathEvent, spellBurn, isWatery);
            if (_afterOnRecieveDeathEvent != null)
            {
                foreach (Delegates.OnRecieveDeathEvent_AfterArgs toInvoke in
                         _afterOnRecieveDeathEvent.GetInvocationList())
                {
                    try
                    {
                        _afterOnRecieveDeathEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnRecordKillForJournal()
        {
            if (!HookedList.Contains("OnRecordKillForJournal"))
            {
                HookedList.Add("OnRecordKillForJournal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnRecordKillForJournal", false),
                    OnRecordKillForJournal);
            }
        }

        internal static event Delegates.OnRecordKillForJournal_BeforeArgs _beforeOnRecordKillForJournal;
        internal static event Delegates.OnRecordKillForJournal_AfterArgs _afterOnRecordKillForJournal;

        private static void OnRecordKillForJournal(Action<EnemyDeathEffects, string, string, string, string> orig,
            EnemyDeathEffects enemyDeathEffects, string playerDataName, string killedBoolPlayerDataLookupKey,
            string killCountIntPlayerDataLookupKey, string newDataBoolPlayerDataLookupKey)
        {
            Delegates.Params_OnRecordKillForJournal @params = new()
            {
                enemyDeathEffects = enemyDeathEffects, playerDataName = playerDataName,
                killedBoolPlayerDataLookupKey = killedBoolPlayerDataLookupKey,
                killCountIntPlayerDataLookupKey = killCountIntPlayerDataLookupKey,
                newDataBoolPlayerDataLookupKey = newDataBoolPlayerDataLookupKey
            };
            if (_beforeOnRecordKillForJournal != null)
            {
                foreach (Delegates.OnRecordKillForJournal_BeforeArgs toInvoke in _beforeOnRecordKillForJournal
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnRecordKillForJournal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            enemyDeathEffects = @params.enemyDeathEffects;
            playerDataName = @params.playerDataName;
            killedBoolPlayerDataLookupKey = @params.killedBoolPlayerDataLookupKey;
            killCountIntPlayerDataLookupKey = @params.killCountIntPlayerDataLookupKey;
            newDataBoolPlayerDataLookupKey = @params.newDataBoolPlayerDataLookupKey;
            orig(enemyDeathEffects, playerDataName, killedBoolPlayerDataLookupKey, killCountIntPlayerDataLookupKey,
                newDataBoolPlayerDataLookupKey);
            if (_afterOnRecordKillForJournal != null)
            {
                foreach (Delegates.OnRecordKillForJournal_AfterArgs toInvoke in _afterOnRecordKillForJournal
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnRecordKillForJournal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetPlayerBool()
        {
            if (!HookedList.Contains("SetPlayerBool"))
            {
                HookedList.Add("SetPlayerBool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerBool", false),
                    SetPlayerBool);
            }
        }

        internal static event Delegates.SetPlayerBool_BeforeArgs _beforeSetPlayerBool;
        internal static event Delegates.SetPlayerBool_AfterArgs _afterSetPlayerBool;

        private static void SetPlayerBool(Action<string, bool, PlayerData> orig, string target, bool orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerBool @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            if (_beforeSetPlayerBool != null)
            {
                foreach (Delegates.SetPlayerBool_BeforeArgs toInvoke in _beforeSetPlayerBool.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlayerBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerBool != null)
            {
                foreach (Delegates.SetPlayerBool_AfterArgs toInvoke in _afterSetPlayerBool.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlayerBool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetPlayerBool()
        {
            if (!HookedList.Contains("GetPlayerBool"))
            {
                HookedList.Add("GetPlayerBool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerBool", false),
                    GetPlayerBool);
            }
        }

        internal static event Delegates.GetPlayerBool_BeforeArgs _beforeGetPlayerBool;
        internal static event Delegates.GetPlayerBool_AfterArgs _afterGetPlayerBool;

        private static bool GetPlayerBool(Func<string, PlayerData, bool> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerBool @params = new()
            {
                target = target, pd = pd
            };
            if (_beforeGetPlayerBool != null)
            {
                foreach (Delegates.GetPlayerBool_BeforeArgs toInvoke in _beforeGetPlayerBool.GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerBool != null)
            {
                foreach (Delegates.GetPlayerBool_AfterArgs toInvoke in _afterGetPlayerBool.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerBool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetPlayerInt()
        {
            if (!HookedList.Contains("SetPlayerInt"))
            {
                HookedList.Add("SetPlayerInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerInt", false), SetPlayerInt);
            }
        }

        internal static event Delegates.SetPlayerInt_BeforeArgs _beforeSetPlayerInt;
        internal static event Delegates.SetPlayerInt_AfterArgs _afterSetPlayerInt;

        private static void SetPlayerInt(Action<string, int, PlayerData> orig, string target, int orig_, PlayerData pd)
        {
            Delegates.Params_SetPlayerInt @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            if (_beforeSetPlayerInt != null)
            {
                foreach (Delegates.SetPlayerInt_BeforeArgs toInvoke in _beforeSetPlayerInt.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlayerInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerInt != null)
            {
                foreach (Delegates.SetPlayerInt_AfterArgs toInvoke in _afterSetPlayerInt.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlayerInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetPlayerInt()
        {
            if (!HookedList.Contains("GetPlayerInt"))
            {
                HookedList.Add("GetPlayerInt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerInt", false), GetPlayerInt);
            }
        }

        internal static event Delegates.GetPlayerInt_BeforeArgs _beforeGetPlayerInt;
        internal static event Delegates.GetPlayerInt_AfterArgs _afterGetPlayerInt;

        private static int GetPlayerInt(Func<string, PlayerData, int> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerInt @params = new()
            {
                target = target, pd = pd
            };
            if (_beforeGetPlayerInt != null)
            {
                foreach (Delegates.GetPlayerInt_BeforeArgs toInvoke in _beforeGetPlayerInt.GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerInt != null)
            {
                foreach (Delegates.GetPlayerInt_AfterArgs toInvoke in _afterGetPlayerInt.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetPlayerFloat()
        {
            if (!HookedList.Contains("SetPlayerFloat"))
            {
                HookedList.Add("SetPlayerFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerFloat", false),
                    SetPlayerFloat);
            }
        }

        internal static event Delegates.SetPlayerFloat_BeforeArgs _beforeSetPlayerFloat;
        internal static event Delegates.SetPlayerFloat_AfterArgs _afterSetPlayerFloat;

        private static void SetPlayerFloat(Action<string, float, PlayerData> orig, string target, float orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerFloat @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            if (_beforeSetPlayerFloat != null)
            {
                foreach (Delegates.SetPlayerFloat_BeforeArgs toInvoke in _beforeSetPlayerFloat.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlayerFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerFloat != null)
            {
                foreach (Delegates.SetPlayerFloat_AfterArgs toInvoke in _afterSetPlayerFloat.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlayerFloat.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetPlayerFloat()
        {
            if (!HookedList.Contains("GetPlayerFloat"))
            {
                HookedList.Add("GetPlayerFloat");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerFloat", false),
                    GetPlayerFloat);
            }
        }

        internal static event Delegates.GetPlayerFloat_BeforeArgs _beforeGetPlayerFloat;
        internal static event Delegates.GetPlayerFloat_AfterArgs _afterGetPlayerFloat;

        private static float GetPlayerFloat(Func<string, PlayerData, float> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerFloat @params = new()
            {
                target = target, pd = pd
            };
            if (_beforeGetPlayerFloat != null)
            {
                foreach (Delegates.GetPlayerFloat_BeforeArgs toInvoke in _beforeGetPlayerFloat.GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerFloat != null)
            {
                foreach (Delegates.GetPlayerFloat_AfterArgs toInvoke in _afterGetPlayerFloat.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerFloat.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetPlayerString()
        {
            if (!HookedList.Contains("SetPlayerString"))
            {
                HookedList.Add("SetPlayerString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerString", false),
                    SetPlayerString);
            }
        }

        internal static event Delegates.SetPlayerString_BeforeArgs _beforeSetPlayerString;
        internal static event Delegates.SetPlayerString_AfterArgs _afterSetPlayerString;

        private static void SetPlayerString(Action<string, string, PlayerData> orig, string target, string orig_,
            PlayerData pd)
        {
            Delegates.Params_SetPlayerString @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            if (_beforeSetPlayerString != null)
            {
                foreach (Delegates.SetPlayerString_BeforeArgs toInvoke in _beforeSetPlayerString.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlayerString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerString != null)
            {
                foreach (Delegates.SetPlayerString_AfterArgs toInvoke in _afterSetPlayerString.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlayerString.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetPlayerString()
        {
            if (!HookedList.Contains("GetPlayerString"))
            {
                HookedList.Add("GetPlayerString");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerString", false),
                    GetPlayerString);
            }
        }

        internal static event Delegates.GetPlayerString_BeforeArgs _beforeGetPlayerString;
        internal static event Delegates.GetPlayerString_AfterArgs _afterGetPlayerString;

        private static string GetPlayerString(Func<string, PlayerData, string> orig, string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerString @params = new()
            {
                target = target, pd = pd
            };
            if (_beforeGetPlayerString != null)
            {
                foreach (Delegates.GetPlayerString_BeforeArgs toInvoke in _beforeGetPlayerString.GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerString != null)
            {
                foreach (Delegates.GetPlayerString_AfterArgs toInvoke in _afterGetPlayerString.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookSetPlayerVector3()
        {
            if (!HookedList.Contains("SetPlayerVector3"))
            {
                HookedList.Add("SetPlayerVector3");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerVector3", false),
                    SetPlayerVector3);
            }
        }

        internal static event Delegates.SetPlayerVector3_BeforeArgs _beforeSetPlayerVector3;
        internal static event Delegates.SetPlayerVector3_AfterArgs _afterSetPlayerVector3;

        private static void SetPlayerVector3(Action<string, UnityEngine.Vector3, PlayerData> orig, string target,
            UnityEngine.Vector3 orig_, PlayerData pd)
        {
            Delegates.Params_SetPlayerVector3 @params = new()
            {
                target = target, orig_ = orig_, pd = pd
            };
            if (_beforeSetPlayerVector3 != null)
            {
                foreach (Delegates.SetPlayerVector3_BeforeArgs toInvoke in _beforeSetPlayerVector3.GetInvocationList())
                {
                    try
                    {
                        _beforeSetPlayerVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            orig_ = @params.orig_;
            pd = @params.pd;
            orig(target, orig_, pd);
            if (_afterSetPlayerVector3 != null)
            {
                foreach (Delegates.SetPlayerVector3_AfterArgs toInvoke in _afterSetPlayerVector3.GetInvocationList())
                {
                    try
                    {
                        _afterSetPlayerVector3.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetPlayerVector3()
        {
            if (!HookedList.Contains("GetPlayerVector3"))
            {
                HookedList.Add("GetPlayerVector3");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerVector3", false),
                    GetPlayerVector3);
            }
        }

        internal static event Delegates.GetPlayerVector3_BeforeArgs _beforeGetPlayerVector3;
        internal static event Delegates.GetPlayerVector3_AfterArgs _afterGetPlayerVector3;

        private static UnityEngine.Vector3 GetPlayerVector3(Func<string, PlayerData, UnityEngine.Vector3> orig,
            string target, PlayerData pd)
        {
            Delegates.Params_GetPlayerVector3 @params = new()
            {
                target = target, pd = pd
            };
            if (_beforeGetPlayerVector3 != null)
            {
                foreach (Delegates.GetPlayerVector3_BeforeArgs toInvoke in _beforeGetPlayerVector3.GetInvocationList())
                {
                    try
                    {
                        _beforeGetPlayerVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            target = @params.target;
            pd = @params.pd;
            var retVal = orig(target, pd);
            if (_afterGetPlayerVector3 != null)
            {
                foreach (Delegates.GetPlayerVector3_AfterArgs toInvoke in _afterGetPlayerVector3.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetPlayerVector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnBlueHealth()
        {
            if (!HookedList.Contains("OnBlueHealth"))
            {
                HookedList.Add("OnBlueHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBlueHealth", false), OnBlueHealth);
            }
        }

        internal static event Delegates.OnBlueHealth_BeforeArgs _beforeOnBlueHealth;
        internal static event Delegates.OnBlueHealth_AfterArgs _afterOnBlueHealth;

        private static int OnBlueHealth(Func<int> orig)
        {
            if (_beforeOnBlueHealth != null)
            {
                foreach (Delegates.OnBlueHealth_BeforeArgs toInvoke in _beforeOnBlueHealth.GetInvocationList())
                {
                    try
                    {
                        _beforeOnBlueHealth?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterOnBlueHealth != null)
            {
                foreach (Delegates.OnBlueHealth_AfterArgs toInvoke in _afterOnBlueHealth.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnBlueHealth.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnTakeHealth()
        {
            if (!HookedList.Contains("OnTakeHealth"))
            {
                HookedList.Add("OnTakeHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnTakeHealth", false), OnTakeHealth);
            }
        }

        internal static event Delegates.OnTakeHealth_BeforeArgs _beforeOnTakeHealth;
        internal static event Delegates.OnTakeHealth_AfterArgs _afterOnTakeHealth;

        private static int OnTakeHealth(Func<int, int> orig, int damage)
        {
            Delegates.Params_OnTakeHealth @params = new()
            {
                damage = damage
            };
            if (_beforeOnTakeHealth != null)
            {
                foreach (Delegates.OnTakeHealth_BeforeArgs toInvoke in _beforeOnTakeHealth.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTakeHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            damage = @params.damage;
            var retVal = orig(damage);
            if (_afterOnTakeHealth != null)
            {
                foreach (Delegates.OnTakeHealth_AfterArgs toInvoke in _afterOnTakeHealth.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnTakeHealth.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnTakeDamage()
        {
            if (!HookedList.Contains("OnTakeDamage"))
            {
                HookedList.Add("OnTakeDamage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnTakeDamage", false), OnTakeDamage);
            }
        }

        internal static event Delegates.OnTakeDamage_BeforeArgs _beforeOnTakeDamage;
        internal static event Delegates.OnTakeDamage_AfterArgs _afterOnTakeDamage;

        private static int OnTakeDamage(Func<int, int, int> orig, int hazardType, int damage)
        {
            Delegates.Params_OnTakeDamage @params = new()
            {
                hazardType = hazardType, damage = damage
            };
            if (_beforeOnTakeDamage != null)
            {
                foreach (Delegates.OnTakeDamage_BeforeArgs toInvoke in _beforeOnTakeDamage.GetInvocationList())
                {
                    try
                    {
                        _beforeOnTakeDamage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            hazardType = @params.hazardType;
            damage = @params.damage;
            var retVal = orig(hazardType, damage);
            if (_afterOnTakeDamage != null)
            {
                foreach (Delegates.OnTakeDamage_AfterArgs toInvoke in _afterOnTakeDamage.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnTakeDamage.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookAfterTakeDamage()
        {
            if (!HookedList.Contains("AfterTakeDamage"))
            {
                HookedList.Add("AfterTakeDamage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "AfterTakeDamage", false),
                    AfterTakeDamage);
            }
        }

        internal static event Delegates.AfterTakeDamage_BeforeArgs _beforeAfterTakeDamage;
        internal static event Delegates.AfterTakeDamage_AfterArgs _afterAfterTakeDamage;

        private static int AfterTakeDamage(Func<int, int, int> orig, int hazardType, int damageAmount)
        {
            Delegates.Params_AfterTakeDamage @params = new()
            {
                hazardType = hazardType, damageAmount = damageAmount
            };
            if (_beforeAfterTakeDamage != null)
            {
                foreach (Delegates.AfterTakeDamage_BeforeArgs toInvoke in _beforeAfterTakeDamage.GetInvocationList())
                {
                    try
                    {
                        _beforeAfterTakeDamage?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            hazardType = @params.hazardType;
            damageAmount = @params.damageAmount;
            var retVal = orig(hazardType, damageAmount);
            if (_afterAfterTakeDamage != null)
            {
                foreach (Delegates.AfterTakeDamage_AfterArgs toInvoke in _afterAfterTakeDamage.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterAfterTakeDamage.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnBeforePlayerDead()
        {
            if (!HookedList.Contains("OnBeforePlayerDead"))
            {
                HookedList.Add("OnBeforePlayerDead");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBeforePlayerDead", false),
                    OnBeforePlayerDead);
            }
        }

        internal static event Delegates.OnBeforePlayerDead_BeforeArgs _beforeOnBeforePlayerDead;
        internal static event Delegates.OnBeforePlayerDead_AfterArgs _afterOnBeforePlayerDead;

        private static void OnBeforePlayerDead(Action orig)
        {
            if (_beforeOnBeforePlayerDead != null)
            {
                foreach (Delegates.OnBeforePlayerDead_BeforeArgs toInvoke in
                         _beforeOnBeforePlayerDead.GetInvocationList())
                {
                    try
                    {
                        _beforeOnBeforePlayerDead?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnBeforePlayerDead != null)
            {
                foreach (Delegates.OnBeforePlayerDead_AfterArgs toInvoke in
                         _afterOnBeforePlayerDead.GetInvocationList())
                {
                    try
                    {
                        _afterOnBeforePlayerDead.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnAfterPlayerDead()
        {
            if (!HookedList.Contains("OnAfterPlayerDead"))
            {
                HookedList.Add("OnAfterPlayerDead");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterPlayerDead", false),
                    OnAfterPlayerDead);
            }
        }

        internal static event Delegates.OnAfterPlayerDead_BeforeArgs _beforeOnAfterPlayerDead;
        internal static event Delegates.OnAfterPlayerDead_AfterArgs _afterOnAfterPlayerDead;

        private static void OnAfterPlayerDead(Action orig)
        {
            if (_beforeOnAfterPlayerDead != null)
            {
                foreach (Delegates.OnAfterPlayerDead_BeforeArgs toInvoke in
                         _beforeOnAfterPlayerDead.GetInvocationList())
                {
                    try
                    {
                        _beforeOnAfterPlayerDead?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnAfterPlayerDead != null)
            {
                foreach (Delegates.OnAfterPlayerDead_AfterArgs toInvoke in _afterOnAfterPlayerDead.GetInvocationList())
                {
                    try
                    {
                        _afterOnAfterPlayerDead.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnAttack()
        {
            if (!HookedList.Contains("OnAttack"))
            {
                HookedList.Add("OnAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAttack", false), OnAttack);
            }
        }

        internal static event Delegates.OnAttack_BeforeArgs _beforeOnAttack;
        internal static event Delegates.OnAttack_AfterArgs _afterOnAttack;

        private static void OnAttack(Action<GlobalEnums.AttackDirection> orig, GlobalEnums.AttackDirection dir)
        {
            Delegates.Params_OnAttack @params = new()
            {
                dir = dir
            };
            if (_beforeOnAttack != null)
            {
                foreach (Delegates.OnAttack_BeforeArgs toInvoke in _beforeOnAttack.GetInvocationList())
                {
                    try
                    {
                        _beforeOnAttack?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            dir = @params.dir;
            orig(dir);
            if (_afterOnAttack != null)
            {
                foreach (Delegates.OnAttack_AfterArgs toInvoke in _afterOnAttack.GetInvocationList())
                {
                    try
                    {
                        _afterOnAttack.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDoAttack()
        {
            if (!HookedList.Contains("OnDoAttack"))
            {
                HookedList.Add("OnDoAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDoAttack", false), OnDoAttack);
            }
        }

        internal static event Delegates.OnDoAttack_BeforeArgs _beforeOnDoAttack;
        internal static event Delegates.OnDoAttack_AfterArgs _afterOnDoAttack;

        private static void OnDoAttack(Action orig)
        {
            if (_beforeOnDoAttack != null)
            {
                foreach (Delegates.OnDoAttack_BeforeArgs toInvoke in _beforeOnDoAttack.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDoAttack?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnDoAttack != null)
            {
                foreach (Delegates.OnDoAttack_AfterArgs toInvoke in _afterOnDoAttack.GetInvocationList())
                {
                    try
                    {
                        _afterOnDoAttack.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAfterAttack()
        {
            if (!HookedList.Contains("AfterAttack"))
            {
                HookedList.Add("AfterAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "AfterAttack", false), AfterAttack);
            }
        }

        internal static event Delegates.AfterAttack_BeforeArgs _beforeAfterAttack;
        internal static event Delegates.AfterAttack_AfterArgs _afterAfterAttack;

        private static void AfterAttack(Action<GlobalEnums.AttackDirection> orig, GlobalEnums.AttackDirection dir)
        {
            Delegates.Params_AfterAttack @params = new()
            {
                dir = dir
            };
            if (_beforeAfterAttack != null)
            {
                foreach (Delegates.AfterAttack_BeforeArgs toInvoke in _beforeAfterAttack.GetInvocationList())
                {
                    try
                    {
                        _beforeAfterAttack?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            dir = @params.dir;
            orig(dir);
            if (_afterAfterAttack != null)
            {
                foreach (Delegates.AfterAttack_AfterArgs toInvoke in _afterAfterAttack.GetInvocationList())
                {
                    try
                    {
                        _afterAfterAttack.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSlashHit()
        {
            if (!HookedList.Contains("OnSlashHit"))
            {
                HookedList.Add("OnSlashHit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSlashHit", false), OnSlashHit);
            }
        }

        internal static event Delegates.OnSlashHit_BeforeArgs _beforeOnSlashHit;
        internal static event Delegates.OnSlashHit_AfterArgs _afterOnSlashHit;

        private static void OnSlashHit(Action<UnityEngine.Collider2D, UnityEngine.GameObject> orig,
            UnityEngine.Collider2D otherCollider, UnityEngine.GameObject gameObject)
        {
            Delegates.Params_OnSlashHit @params = new()
            {
                otherCollider = otherCollider, gameObject = gameObject
            };
            if (_beforeOnSlashHit != null)
            {
                foreach (Delegates.OnSlashHit_BeforeArgs toInvoke in _beforeOnSlashHit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSlashHit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            otherCollider = @params.otherCollider;
            gameObject = @params.gameObject;
            orig(otherCollider, gameObject);
            if (_afterOnSlashHit != null)
            {
                foreach (Delegates.OnSlashHit_AfterArgs toInvoke in _afterOnSlashHit.GetInvocationList())
                {
                    try
                    {
                        _afterOnSlashHit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnCharmUpdate()
        {
            if (!HookedList.Contains("OnCharmUpdate"))
            {
                HookedList.Add("OnCharmUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnCharmUpdate", false),
                    OnCharmUpdate);
            }
        }

        internal static event Delegates.OnCharmUpdate_BeforeArgs _beforeOnCharmUpdate;
        internal static event Delegates.OnCharmUpdate_AfterArgs _afterOnCharmUpdate;

        private static void OnCharmUpdate(Action<PlayerData, HeroController> orig, PlayerData pd, HeroController hc)
        {
            Delegates.Params_OnCharmUpdate @params = new()
            {
                pd = pd, hc = hc
            };
            if (_beforeOnCharmUpdate != null)
            {
                foreach (Delegates.OnCharmUpdate_BeforeArgs toInvoke in _beforeOnCharmUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeOnCharmUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            pd = @params.pd;
            hc = @params.hc;
            orig(pd, hc);
            if (_afterOnCharmUpdate != null)
            {
                foreach (Delegates.OnCharmUpdate_AfterArgs toInvoke in _afterOnCharmUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterOnCharmUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnHeroUpdate()
        {
            if (!HookedList.Contains("OnHeroUpdate"))
            {
                HookedList.Add("OnHeroUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnHeroUpdate", false), OnHeroUpdate);
            }
        }

        internal static event Delegates.OnHeroUpdate_BeforeArgs _beforeOnHeroUpdate;
        internal static event Delegates.OnHeroUpdate_AfterArgs _afterOnHeroUpdate;

        private static void OnHeroUpdate(Action orig)
        {
            if (_beforeOnHeroUpdate != null)
            {
                foreach (Delegates.OnHeroUpdate_BeforeArgs toInvoke in _beforeOnHeroUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeOnHeroUpdate?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnHeroUpdate != null)
            {
                foreach (Delegates.OnHeroUpdate_AfterArgs toInvoke in _afterOnHeroUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterOnHeroUpdate.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookBeforeAddHealth()
        {
            if (!HookedList.Contains("BeforeAddHealth"))
            {
                HookedList.Add("BeforeAddHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "BeforeAddHealth", false),
                    BeforeAddHealth);
            }
        }

        internal static event Delegates.BeforeAddHealth_BeforeArgs _beforeBeforeAddHealth;
        internal static event Delegates.BeforeAddHealth_AfterArgs _afterBeforeAddHealth;

        private static int BeforeAddHealth(Func<int, int> orig, int amount)
        {
            Delegates.Params_BeforeAddHealth @params = new()
            {
                amount = amount
            };
            if (_beforeBeforeAddHealth != null)
            {
                foreach (Delegates.BeforeAddHealth_BeforeArgs toInvoke in _beforeBeforeAddHealth.GetInvocationList())
                {
                    try
                    {
                        _beforeBeforeAddHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            amount = @params.amount;
            var retVal = orig(amount);
            if (_afterBeforeAddHealth != null)
            {
                foreach (Delegates.BeforeAddHealth_AfterArgs toInvoke in _afterBeforeAddHealth.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterBeforeAddHealth.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnFocusCost()
        {
            if (!HookedList.Contains("OnFocusCost"))
            {
                HookedList.Add("OnFocusCost");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnFocusCost", false), OnFocusCost);
            }
        }

        internal static event Delegates.OnFocusCost_BeforeArgs _beforeOnFocusCost;
        internal static event Delegates.OnFocusCost_AfterArgs _afterOnFocusCost;

        private static float OnFocusCost(Func<float> orig)
        {
            if (_beforeOnFocusCost != null)
            {
                foreach (Delegates.OnFocusCost_BeforeArgs toInvoke in _beforeOnFocusCost.GetInvocationList())
                {
                    try
                    {
                        _beforeOnFocusCost?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterOnFocusCost != null)
            {
                foreach (Delegates.OnFocusCost_AfterArgs toInvoke in _afterOnFocusCost.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnFocusCost.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnSoulGain()
        {
            if (!HookedList.Contains("OnSoulGain"))
            {
                HookedList.Add("OnSoulGain");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSoulGain", false), OnSoulGain);
            }
        }

        internal static event Delegates.OnSoulGain_BeforeArgs _beforeOnSoulGain;
        internal static event Delegates.OnSoulGain_AfterArgs _afterOnSoulGain;

        private static int OnSoulGain(Func<int, int> orig, int num)
        {
            Delegates.Params_OnSoulGain @params = new()
            {
                num = num
            };
            if (_beforeOnSoulGain != null)
            {
                foreach (Delegates.OnSoulGain_BeforeArgs toInvoke in _beforeOnSoulGain.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSoulGain?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            num = @params.num;
            var retVal = orig(num);
            if (_afterOnSoulGain != null)
            {
                foreach (Delegates.OnSoulGain_AfterArgs toInvoke in _afterOnSoulGain.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnSoulGain.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookDashVelocityChange()
        {
            if (!HookedList.Contains("DashVelocityChange"))
            {
                HookedList.Add("DashVelocityChange");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "DashVelocityChange", false),
                    DashVelocityChange);
            }
        }

        internal static event Delegates.DashVelocityChange_BeforeArgs _beforeDashVelocityChange;
        internal static event Delegates.DashVelocityChange_AfterArgs _afterDashVelocityChange;

        private static UnityEngine.Vector2 DashVelocityChange(Func<UnityEngine.Vector2, UnityEngine.Vector2> orig,
            UnityEngine.Vector2 change)
        {
            Delegates.Params_DashVelocityChange @params = new()
            {
                change = change
            };
            if (_beforeDashVelocityChange != null)
            {
                foreach (Delegates.DashVelocityChange_BeforeArgs toInvoke in
                         _beforeDashVelocityChange.GetInvocationList())
                {
                    try
                    {
                        _beforeDashVelocityChange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            change = @params.change;
            var retVal = orig(change);
            if (_afterDashVelocityChange != null)
            {
                foreach (Delegates.DashVelocityChange_AfterArgs toInvoke in
                         _afterDashVelocityChange.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterDashVelocityChange.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnDashPressed()
        {
            if (!HookedList.Contains("OnDashPressed"))
            {
                HookedList.Add("OnDashPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDashPressed", false),
                    OnDashPressed);
            }
        }

        internal static event Delegates.OnDashPressed_BeforeArgs _beforeOnDashPressed;
        internal static event Delegates.OnDashPressed_AfterArgs _afterOnDashPressed;

        private static bool OnDashPressed(Func<bool> orig)
        {
            if (_beforeOnDashPressed != null)
            {
                foreach (Delegates.OnDashPressed_BeforeArgs toInvoke in _beforeOnDashPressed.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDashPressed?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterOnDashPressed != null)
            {
                foreach (Delegates.OnDashPressed_AfterArgs toInvoke in _afterOnDashPressed.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterOnDashPressed.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnSavegameLoad()
        {
            if (!HookedList.Contains("OnSavegameLoad"))
            {
                HookedList.Add("OnSavegameLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameLoad", false),
                    OnSavegameLoad);
            }
        }

        internal static event Delegates.OnSavegameLoad_BeforeArgs _beforeOnSavegameLoad;
        internal static event Delegates.OnSavegameLoad_AfterArgs _afterOnSavegameLoad;

        private static void OnSavegameLoad(Action<int> orig, int id)
        {
            Delegates.Params_OnSavegameLoad @params = new()
            {
                id = id
            };
            if (_beforeOnSavegameLoad != null)
            {
                foreach (Delegates.OnSavegameLoad_BeforeArgs toInvoke in _beforeOnSavegameLoad.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSavegameLoad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            id = @params.id;
            orig(id);
            if (_afterOnSavegameLoad != null)
            {
                foreach (Delegates.OnSavegameLoad_AfterArgs toInvoke in _afterOnSavegameLoad.GetInvocationList())
                {
                    try
                    {
                        _afterOnSavegameLoad.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSavegameSave()
        {
            if (!HookedList.Contains("OnSavegameSave"))
            {
                HookedList.Add("OnSavegameSave");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameSave", false),
                    OnSavegameSave);
            }
        }

        internal static event Delegates.OnSavegameSave_BeforeArgs _beforeOnSavegameSave;
        internal static event Delegates.OnSavegameSave_AfterArgs _afterOnSavegameSave;

        private static void OnSavegameSave(Action<int> orig, int id)
        {
            Delegates.Params_OnSavegameSave @params = new()
            {
                id = id
            };
            if (_beforeOnSavegameSave != null)
            {
                foreach (Delegates.OnSavegameSave_BeforeArgs toInvoke in _beforeOnSavegameSave.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSavegameSave?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            id = @params.id;
            orig(id);
            if (_afterOnSavegameSave != null)
            {
                foreach (Delegates.OnSavegameSave_AfterArgs toInvoke in _afterOnSavegameSave.GetInvocationList())
                {
                    try
                    {
                        _afterOnSavegameSave.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnNewGame()
        {
            if (!HookedList.Contains("OnNewGame"))
            {
                HookedList.Add("OnNewGame");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnNewGame", false), OnNewGame);
            }
        }

        internal static event Delegates.OnNewGame_BeforeArgs _beforeOnNewGame;
        internal static event Delegates.OnNewGame_AfterArgs _afterOnNewGame;

        private static void OnNewGame(Action orig)
        {
            if (_beforeOnNewGame != null)
            {
                foreach (Delegates.OnNewGame_BeforeArgs toInvoke in _beforeOnNewGame.GetInvocationList())
                {
                    try
                    {
                        _beforeOnNewGame?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnNewGame != null)
            {
                foreach (Delegates.OnNewGame_AfterArgs toInvoke in _afterOnNewGame.GetInvocationList())
                {
                    try
                    {
                        _afterOnNewGame.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSavegameClear()
        {
            if (!HookedList.Contains("OnSavegameClear"))
            {
                HookedList.Add("OnSavegameClear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameClear", false),
                    OnSavegameClear);
            }
        }

        internal static event Delegates.OnSavegameClear_BeforeArgs _beforeOnSavegameClear;
        internal static event Delegates.OnSavegameClear_AfterArgs _afterOnSavegameClear;

        private static void OnSavegameClear(Action<int> orig, int id)
        {
            Delegates.Params_OnSavegameClear @params = new()
            {
                id = id
            };
            if (_beforeOnSavegameClear != null)
            {
                foreach (Delegates.OnSavegameClear_BeforeArgs toInvoke in _beforeOnSavegameClear.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSavegameClear?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            id = @params.id;
            orig(id);
            if (_afterOnSavegameClear != null)
            {
                foreach (Delegates.OnSavegameClear_AfterArgs toInvoke in _afterOnSavegameClear.GetInvocationList())
                {
                    try
                    {
                        _afterOnSavegameClear.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnAfterSaveGameLoad()
        {
            if (!HookedList.Contains("OnAfterSaveGameLoad"))
            {
                HookedList.Add("OnAfterSaveGameLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterSaveGameLoad", false),
                    OnAfterSaveGameLoad);
            }
        }

        internal static event Delegates.OnAfterSaveGameLoad_BeforeArgs _beforeOnAfterSaveGameLoad;
        internal static event Delegates.OnAfterSaveGameLoad_AfterArgs _afterOnAfterSaveGameLoad;

        private static void OnAfterSaveGameLoad(Action<SaveGameData> orig, SaveGameData data)
        {
            Delegates.Params_OnAfterSaveGameLoad @params = new()
            {
                data = data
            };
            if (_beforeOnAfterSaveGameLoad != null)
            {
                foreach (Delegates.OnAfterSaveGameLoad_BeforeArgs toInvoke in _beforeOnAfterSaveGameLoad
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnAfterSaveGameLoad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            data = @params.data;
            orig(data);
            if (_afterOnAfterSaveGameLoad != null)
            {
                foreach (Delegates.OnAfterSaveGameLoad_AfterArgs toInvoke in
                         _afterOnAfterSaveGameLoad.GetInvocationList())
                {
                    try
                    {
                        _afterOnAfterSaveGameLoad.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnBeforeSaveGameSave()
        {
            if (!HookedList.Contains("OnBeforeSaveGameSave"))
            {
                HookedList.Add("OnBeforeSaveGameSave");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBeforeSaveGameSave", false),
                    OnBeforeSaveGameSave);
            }
        }

        internal static event Delegates.OnBeforeSaveGameSave_BeforeArgs _beforeOnBeforeSaveGameSave;
        internal static event Delegates.OnBeforeSaveGameSave_AfterArgs _afterOnBeforeSaveGameSave;

        private static void OnBeforeSaveGameSave(Action<SaveGameData> orig, SaveGameData data)
        {
            Delegates.Params_OnBeforeSaveGameSave @params = new()
            {
                data = data
            };
            if (_beforeOnBeforeSaveGameSave != null)
            {
                foreach (Delegates.OnBeforeSaveGameSave_BeforeArgs toInvoke in _beforeOnBeforeSaveGameSave
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnBeforeSaveGameSave?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            data = @params.data;
            orig(data);
            if (_afterOnBeforeSaveGameSave != null)
            {
                foreach (Delegates.OnBeforeSaveGameSave_AfterArgs toInvoke in _afterOnBeforeSaveGameSave
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnBeforeSaveGameSave.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetSaveFileName()
        {
            if (!HookedList.Contains("GetSaveFileName"))
            {
                HookedList.Add("GetSaveFileName");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetSaveFileName", false),
                    GetSaveFileName);
            }
        }

        internal static event Delegates.GetSaveFileName_BeforeArgs _beforeGetSaveFileName;
        internal static event Delegates.GetSaveFileName_AfterArgs _afterGetSaveFileName;

        private static string GetSaveFileName(Func<int, string> orig, int saveSlot)
        {
            Delegates.Params_GetSaveFileName @params = new()
            {
                saveSlot = saveSlot
            };
            if (_beforeGetSaveFileName != null)
            {
                foreach (Delegates.GetSaveFileName_BeforeArgs toInvoke in _beforeGetSaveFileName.GetInvocationList())
                {
                    try
                    {
                        _beforeGetSaveFileName?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            saveSlot = @params.saveSlot;
            var retVal = orig(saveSlot);
            if (_afterGetSaveFileName != null)
            {
                foreach (Delegates.GetSaveFileName_AfterArgs toInvoke in _afterGetSaveFileName.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetSaveFileName.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnAfterSaveGameClear()
        {
            if (!HookedList.Contains("OnAfterSaveGameClear"))
            {
                HookedList.Add("OnAfterSaveGameClear");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterSaveGameClear", false),
                    OnAfterSaveGameClear);
            }
        }

        internal static event Delegates.OnAfterSaveGameClear_BeforeArgs _beforeOnAfterSaveGameClear;
        internal static event Delegates.OnAfterSaveGameClear_AfterArgs _afterOnAfterSaveGameClear;

        private static void OnAfterSaveGameClear(Action<int> orig, int saveSlot)
        {
            Delegates.Params_OnAfterSaveGameClear @params = new()
            {
                saveSlot = saveSlot
            };
            if (_beforeOnAfterSaveGameClear != null)
            {
                foreach (Delegates.OnAfterSaveGameClear_BeforeArgs toInvoke in _beforeOnAfterSaveGameClear
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnAfterSaveGameClear?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            saveSlot = @params.saveSlot;
            orig(saveSlot);
            if (_afterOnAfterSaveGameClear != null)
            {
                foreach (Delegates.OnAfterSaveGameClear_AfterArgs toInvoke in _afterOnAfterSaveGameClear
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnAfterSaveGameClear.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnSceneChanged()
        {
            if (!HookedList.Contains("OnSceneChanged"))
            {
                HookedList.Add("OnSceneChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSceneChanged", false),
                    OnSceneChanged);
            }
        }

        internal static event Delegates.OnSceneChanged_BeforeArgs _beforeOnSceneChanged;
        internal static event Delegates.OnSceneChanged_AfterArgs _afterOnSceneChanged;

        private static void OnSceneChanged(Action<string> orig, string targetScene)
        {
            Delegates.Params_OnSceneChanged @params = new()
            {
                targetScene = targetScene
            };
            if (_beforeOnSceneChanged != null)
            {
                foreach (Delegates.OnSceneChanged_BeforeArgs toInvoke in _beforeOnSceneChanged.GetInvocationList())
                {
                    try
                    {
                        _beforeOnSceneChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            targetScene = @params.targetScene;
            orig(targetScene);
            if (_afterOnSceneChanged != null)
            {
                foreach (Delegates.OnSceneChanged_AfterArgs toInvoke in _afterOnSceneChanged.GetInvocationList())
                {
                    try
                    {
                        _afterOnSceneChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookBeforeSceneLoad()
        {
            if (!HookedList.Contains("BeforeSceneLoad"))
            {
                HookedList.Add("BeforeSceneLoad");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "BeforeSceneLoad", false),
                    BeforeSceneLoad);
            }
        }

        internal static event Delegates.BeforeSceneLoad_BeforeArgs _beforeBeforeSceneLoad;
        internal static event Delegates.BeforeSceneLoad_AfterArgs _afterBeforeSceneLoad;

        private static string BeforeSceneLoad(Func<string, string> orig, string sceneName)
        {
            Delegates.Params_BeforeSceneLoad @params = new()
            {
                sceneName = sceneName
            };
            if (_beforeBeforeSceneLoad != null)
            {
                foreach (Delegates.BeforeSceneLoad_BeforeArgs toInvoke in _beforeBeforeSceneLoad.GetInvocationList())
                {
                    try
                    {
                        _beforeBeforeSceneLoad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            sceneName = @params.sceneName;
            var retVal = orig(sceneName);
            if (_afterBeforeSceneLoad != null)
            {
                foreach (Delegates.BeforeSceneLoad_AfterArgs toInvoke in _afterBeforeSceneLoad.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterBeforeSceneLoad.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetMod_string_bool_bool()
        {
            if (!HookedList.Contains("GetMod_string_bool_bool"))
            {
                HookedList.Add("GetMod_string_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetMod_string_bool_bool", false),
                    GetMod_string_bool_bool);
            }
        }

        internal static event Delegates.GetMod_string_bool_bool_BeforeArgs _beforeGetMod_string_bool_bool;
        internal static event Delegates.GetMod_string_bool_bool_AfterArgs _afterGetMod_string_bool_bool;

        private static Modding.IMod GetMod_string_bool_bool(Func<string, bool, bool, Modding.IMod> orig, string name,
            bool onlyEnabled, bool allowLoadError)
        {
            Delegates.Params_GetMod_string_bool_bool @params = new()
            {
                name = name, onlyEnabled = onlyEnabled, allowLoadError = allowLoadError
            };
            if (_beforeGetMod_string_bool_bool != null)
            {
                foreach (Delegates.GetMod_string_bool_bool_BeforeArgs toInvoke in _beforeGetMod_string_bool_bool
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetMod_string_bool_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            name = @params.name;
            onlyEnabled = @params.onlyEnabled;
            allowLoadError = @params.allowLoadError;
            var retVal = orig(name, onlyEnabled, allowLoadError);
            if (_afterGetMod_string_bool_bool != null)
            {
                foreach (Delegates.GetMod_string_bool_bool_AfterArgs toInvoke in _afterGetMod_string_bool_bool
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetMod_string_bool_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetMod_Type_bool_bool()
        {
            if (!HookedList.Contains("GetMod_Type_bool_bool"))
            {
                HookedList.Add("GetMod_Type_bool_bool");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetMod_Type_bool_bool", false),
                    GetMod_Type_bool_bool);
            }
        }

        internal static event Delegates.GetMod_Type_bool_bool_BeforeArgs _beforeGetMod_Type_bool_bool;
        internal static event Delegates.GetMod_Type_bool_bool_AfterArgs _afterGetMod_Type_bool_bool;

        private static Modding.IMod GetMod_Type_bool_bool(Func<System.Type, bool, bool, Modding.IMod> orig,
            System.Type type, bool onlyEnabled, bool allowLoadError)
        {
            Delegates.Params_GetMod_Type_bool_bool @params = new()
            {
                type = type, onlyEnabled = onlyEnabled, allowLoadError = allowLoadError
            };
            if (_beforeGetMod_Type_bool_bool != null)
            {
                foreach (Delegates.GetMod_Type_bool_bool_BeforeArgs toInvoke in _beforeGetMod_Type_bool_bool
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetMod_Type_bool_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            type = @params.type;
            onlyEnabled = @params.onlyEnabled;
            allowLoadError = @params.allowLoadError;
            var retVal = orig(type, onlyEnabled, allowLoadError);
            if (_afterGetMod_Type_bool_bool != null)
            {
                foreach (Delegates.GetMod_Type_bool_bool_AfterArgs toInvoke in _afterGetMod_Type_bool_bool
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetMod_Type_bool_bool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookModEnabled_ITogglableMod()
        {
            if (!HookedList.Contains("ModEnabled_ITogglableMod"))
            {
                HookedList.Add("ModEnabled_ITogglableMod");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled_ITogglableMod", false),
                    ModEnabled_ITogglableMod);
            }
        }

        internal static event Delegates.ModEnabled_ITogglableMod_BeforeArgs _beforeModEnabled_ITogglableMod;
        internal static event Delegates.ModEnabled_ITogglableMod_AfterArgs _afterModEnabled_ITogglableMod;

        private static bool ModEnabled_ITogglableMod(Func<Modding.ITogglableMod, bool> orig, Modding.ITogglableMod mod)
        {
            Delegates.Params_ModEnabled_ITogglableMod @params = new()
            {
                mod = mod
            };
            if (_beforeModEnabled_ITogglableMod != null)
            {
                foreach (Delegates.ModEnabled_ITogglableMod_BeforeArgs toInvoke in _beforeModEnabled_ITogglableMod
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeModEnabled_ITogglableMod?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            mod = @params.mod;
            var retVal = orig(mod);
            if (_afterModEnabled_ITogglableMod != null)
            {
                foreach (Delegates.ModEnabled_ITogglableMod_AfterArgs toInvoke in _afterModEnabled_ITogglableMod
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterModEnabled_ITogglableMod.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookModEnabled_string()
        {
            if (!HookedList.Contains("ModEnabled_string"))
            {
                HookedList.Add("ModEnabled_string");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled_string", false),
                    ModEnabled_string);
            }
        }

        internal static event Delegates.ModEnabled_string_BeforeArgs _beforeModEnabled_string;
        internal static event Delegates.ModEnabled_string_AfterArgs _afterModEnabled_string;

        private static bool ModEnabled_string(Func<string, bool> orig, string name)
        {
            Delegates.Params_ModEnabled_string @params = new()
            {
                name = name
            };
            if (_beforeModEnabled_string != null)
            {
                foreach (Delegates.ModEnabled_string_BeforeArgs toInvoke in
                         _beforeModEnabled_string.GetInvocationList())
                {
                    try
                    {
                        _beforeModEnabled_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            name = @params.name;
            var retVal = orig(name);
            if (_afterModEnabled_string != null)
            {
                foreach (Delegates.ModEnabled_string_AfterArgs toInvoke in _afterModEnabled_string.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterModEnabled_string.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookModEnabled_Type()
        {
            if (!HookedList.Contains("ModEnabled_Type"))
            {
                HookedList.Add("ModEnabled_Type");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled_Type", false),
                    ModEnabled_Type);
            }
        }

        internal static event Delegates.ModEnabled_Type_BeforeArgs _beforeModEnabled_Type;
        internal static event Delegates.ModEnabled_Type_AfterArgs _afterModEnabled_Type;

        private static bool ModEnabled_Type(Func<System.Type, bool> orig, System.Type type)
        {
            Delegates.Params_ModEnabled_Type @params = new()
            {
                type = type
            };
            if (_beforeModEnabled_Type != null)
            {
                foreach (Delegates.ModEnabled_Type_BeforeArgs toInvoke in _beforeModEnabled_Type.GetInvocationList())
                {
                    try
                    {
                        _beforeModEnabled_Type?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            type = @params.type;
            var retVal = orig(type);
            if (_afterModEnabled_Type != null)
            {
                foreach (Delegates.ModEnabled_Type_AfterArgs toInvoke in _afterModEnabled_Type.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterModEnabled_Type.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetAllMods()
        {
            if (!HookedList.Contains("GetAllMods"))
            {
                HookedList.Add("GetAllMods");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetAllMods", false), GetAllMods);
            }
        }

        internal static event Delegates.GetAllMods_BeforeArgs _beforeGetAllMods;
        internal static event Delegates.GetAllMods_AfterArgs _afterGetAllMods;

        private static System.Collections.Generic.IEnumerable<Modding.IMod> GetAllMods(
            Func<bool, bool, System.Collections.Generic.IEnumerable<Modding.IMod>> orig, bool onlyEnabled,
            bool allowLoadError)
        {
            Delegates.Params_GetAllMods @params = new()
            {
                onlyEnabled = onlyEnabled, allowLoadError = allowLoadError
            };
            if (_beforeGetAllMods != null)
            {
                foreach (Delegates.GetAllMods_BeforeArgs toInvoke in _beforeGetAllMods.GetInvocationList())
                {
                    try
                    {
                        _beforeGetAllMods?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            onlyEnabled = @params.onlyEnabled;
            allowLoadError = @params.allowLoadError;
            var retVal = orig(onlyEnabled, allowLoadError);
            if (_afterGetAllMods != null)
            {
                foreach (Delegates.GetAllMods_AfterArgs toInvoke in _afterGetAllMods.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetAllMods.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookOnFinishedLoadingMods()
        {
            if (!HookedList.Contains("OnFinishedLoadingMods"))
            {
                HookedList.Add("OnFinishedLoadingMods");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnFinishedLoadingMods", false),
                    OnFinishedLoadingMods);
            }
        }

        internal static event Delegates.OnFinishedLoadingMods_BeforeArgs _beforeOnFinishedLoadingMods;
        internal static event Delegates.OnFinishedLoadingMods_AfterArgs _afterOnFinishedLoadingMods;

        private static void OnFinishedLoadingMods(Action orig)
        {
            if (_beforeOnFinishedLoadingMods != null)
            {
                foreach (Delegates.OnFinishedLoadingMods_BeforeArgs toInvoke in _beforeOnFinishedLoadingMods
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeOnFinishedLoadingMods?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterOnFinishedLoadingMods != null)
            {
                foreach (Delegates.OnFinishedLoadingMods_AfterArgs toInvoke in _afterOnFinishedLoadingMods
                             .GetInvocationList())
                {
                    try
                    {
                        _afterOnFinishedLoadingMods.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_BuiltModMenuScreens_BeforeArgs();

        public delegate System.Collections.ObjectModel.ReadOnlyDictionary<Modding.IMod, MenuScreen>
            get_BuiltModMenuScreens_AfterArgs(
                System.Collections.ObjectModel.ReadOnlyDictionary<Modding.IMod, MenuScreen> ret);

        public delegate System.Collections.ObjectModel.ReadOnlyDictionary<Modding.IMod, MenuScreen>
            get_BuiltModMenuScreens_WithArgs(
                Func<System.Collections.ObjectModel.ReadOnlyDictionary<Modding.IMod, MenuScreen>> orig);

        public delegate void get_GlobalSettings_BeforeArgs();

        public delegate Modding.ModHooksGlobalSettings get_GlobalSettings_AfterArgs(Modding.ModHooksGlobalSettings ret);

        public delegate Modding.ModHooksGlobalSettings get_GlobalSettings_WithArgs(
            Func<Modding.ModHooksGlobalSettings> orig);

        public sealed class Params_set_GlobalSettings
        {
            public Modding.ModHooksGlobalSettings value;
        }

        public delegate void set_GlobalSettings_BeforeArgs(Params_set_GlobalSettings args);

        public delegate void set_GlobalSettings_AfterArgs(Params_set_GlobalSettings args);

        public delegate void set_GlobalSettings_WithArgs(Action<Modding.ModHooksGlobalSettings> orig,
            Modding.ModHooksGlobalSettings value);

        public delegate void get_Instance_BeforeArgs();

        public delegate Modding.ModHooks get_Instance_AfterArgs(Modding.ModHooks ret);

        public delegate Modding.ModHooks get_Instance_WithArgs(Func<Modding.ModHooks> orig);

        public delegate void LoadGlobalSettings_BeforeArgs();

        public delegate void LoadGlobalSettings_AfterArgs();

        public delegate void LoadGlobalSettings_WithArgs(Action orig);

        public delegate void SaveGlobalSettings_BeforeArgs();

        public delegate void SaveGlobalSettings_AfterArgs();

        public delegate void SaveGlobalSettings_WithArgs(Action orig);

        public sealed class Params_LogConsole
        {
            public string message;
            public Modding.LogLevel level;
        }

        public delegate void LogConsole_BeforeArgs(Params_LogConsole args);

        public delegate void LogConsole_AfterArgs(Params_LogConsole args);

        public delegate void LogConsole_WithArgs(Action<string, Modding.LogLevel> orig, string message,
            Modding.LogLevel level);

        public sealed class Params_LanguageGet
        {
            public string key;
            public string sheet;
        }

        public delegate void LanguageGet_BeforeArgs(Params_LanguageGet args);

        public delegate string LanguageGet_AfterArgs(Params_LanguageGet args, string ret);

        public delegate string LanguageGet_WithArgs(Func<string, string, string> orig, string key, string sheet);

        public sealed class Params_OnCursor
        {
            public GameManager gm;
        }

        public delegate void OnCursor_BeforeArgs(Params_OnCursor args);

        public delegate void OnCursor_AfterArgs(Params_OnCursor args);

        public delegate void OnCursor_WithArgs(Action<GameManager> orig, GameManager gm);

        public sealed class Params_OnColliderCreate
        {
            public UnityEngine.GameObject go;
        }

        public delegate void OnColliderCreate_BeforeArgs(Params_OnColliderCreate args);

        public delegate void OnColliderCreate_AfterArgs(Params_OnColliderCreate args);

        public delegate void OnColliderCreate_WithArgs(Action<UnityEngine.GameObject> orig, UnityEngine.GameObject go);

        public sealed class Params_OnObjectPoolSpawn
        {
            public UnityEngine.GameObject go;
        }

        public delegate void OnObjectPoolSpawn_BeforeArgs(Params_OnObjectPoolSpawn args);

        public delegate UnityEngine.GameObject OnObjectPoolSpawn_AfterArgs(Params_OnObjectPoolSpawn args,
            UnityEngine.GameObject ret);

        public delegate UnityEngine.GameObject OnObjectPoolSpawn_WithArgs(
            Func<UnityEngine.GameObject, UnityEngine.GameObject> orig, UnityEngine.GameObject go);

        public delegate void OnApplicationQuit_BeforeArgs();

        public delegate void OnApplicationQuit_AfterArgs();

        public delegate void OnApplicationQuit_WithArgs(Action orig);

        public sealed class Params_OnHitInstanceBeforeHit
        {
            public HutongGames.PlayMaker.Fsm owner;
            public HitInstance hit;
        }

        public delegate void OnHitInstanceBeforeHit_BeforeArgs(Params_OnHitInstanceBeforeHit args);

        public delegate HitInstance OnHitInstanceBeforeHit_AfterArgs(Params_OnHitInstanceBeforeHit args,
            HitInstance ret);

        public delegate HitInstance OnHitInstanceBeforeHit_WithArgs(
            Func<HutongGames.PlayMaker.Fsm, HitInstance, HitInstance> orig, HutongGames.PlayMaker.Fsm owner,
            HitInstance hit);

        public sealed class Params_OnDrawBlackBorders
        {
            public System.Collections.Generic.List<UnityEngine.GameObject> borders;
        }

        public delegate void OnDrawBlackBorders_BeforeArgs(Params_OnDrawBlackBorders args);

        public delegate void OnDrawBlackBorders_AfterArgs(Params_OnDrawBlackBorders args);

        public delegate void OnDrawBlackBorders_WithArgs(
            Action<System.Collections.Generic.List<UnityEngine.GameObject>> orig,
            System.Collections.Generic.List<UnityEngine.GameObject> borders);

        public sealed class Params_OnEnableEnemy
        {
            public UnityEngine.GameObject enemy;
            public bool isAlreadyDead;
        }

        public delegate void OnEnableEnemy_BeforeArgs(Params_OnEnableEnemy args);

        public delegate bool OnEnableEnemy_AfterArgs(Params_OnEnableEnemy args, bool ret);

        public delegate bool OnEnableEnemy_WithArgs(Func<UnityEngine.GameObject, bool, bool> orig,
            UnityEngine.GameObject enemy, bool isAlreadyDead);

        public sealed class Params_OnRecieveDeathEvent
        {
            public EnemyDeathEffects enemyDeathEffects;
            public bool eventAlreadyRecieved;
            public float? attackDirection;
            public bool resetDeathEvent;
            public bool spellBurn;
            public bool isWatery;
        }

        public delegate void OnRecieveDeathEvent_BeforeArgs(Params_OnRecieveDeathEvent args);

        public delegate void OnRecieveDeathEvent_AfterArgs(Params_OnRecieveDeathEvent args);

        public delegate void OnRecieveDeathEvent_WithArgs(
            Action<EnemyDeathEffects, bool, float?, bool, bool, bool> orig, EnemyDeathEffects enemyDeathEffects,
            bool eventAlreadyRecieved, float? attackDirection, bool resetDeathEvent, bool spellBurn, bool isWatery);

        public sealed class Params_OnRecordKillForJournal
        {
            public EnemyDeathEffects enemyDeathEffects;
            public string playerDataName;
            public string killedBoolPlayerDataLookupKey;
            public string killCountIntPlayerDataLookupKey;
            public string newDataBoolPlayerDataLookupKey;
        }

        public delegate void OnRecordKillForJournal_BeforeArgs(Params_OnRecordKillForJournal args);

        public delegate void OnRecordKillForJournal_AfterArgs(Params_OnRecordKillForJournal args);

        public delegate void OnRecordKillForJournal_WithArgs(
            Action<EnemyDeathEffects, string, string, string, string> orig, EnemyDeathEffects enemyDeathEffects,
            string playerDataName, string killedBoolPlayerDataLookupKey, string killCountIntPlayerDataLookupKey,
            string newDataBoolPlayerDataLookupKey);

        public sealed class Params_SetPlayerBool
        {
            public string target;
            public bool orig_;
            public PlayerData pd;
        }

        public delegate void SetPlayerBool_BeforeArgs(Params_SetPlayerBool args);

        public delegate void SetPlayerBool_AfterArgs(Params_SetPlayerBool args);

        public delegate void SetPlayerBool_WithArgs(Action<string, bool, PlayerData> orig, string target, bool orig_,
            PlayerData pd);

        public sealed class Params_GetPlayerBool
        {
            public string target;
            public PlayerData pd;
        }

        public delegate void GetPlayerBool_BeforeArgs(Params_GetPlayerBool args);

        public delegate bool GetPlayerBool_AfterArgs(Params_GetPlayerBool args, bool ret);

        public delegate bool GetPlayerBool_WithArgs(Func<string, PlayerData, bool> orig, string target, PlayerData pd);

        public sealed class Params_SetPlayerInt
        {
            public string target;
            public int orig_;
            public PlayerData pd;
        }

        public delegate void SetPlayerInt_BeforeArgs(Params_SetPlayerInt args);

        public delegate void SetPlayerInt_AfterArgs(Params_SetPlayerInt args);

        public delegate void SetPlayerInt_WithArgs(Action<string, int, PlayerData> orig, string target, int orig_,
            PlayerData pd);

        public sealed class Params_GetPlayerInt
        {
            public string target;
            public PlayerData pd;
        }

        public delegate void GetPlayerInt_BeforeArgs(Params_GetPlayerInt args);

        public delegate int GetPlayerInt_AfterArgs(Params_GetPlayerInt args, int ret);

        public delegate int GetPlayerInt_WithArgs(Func<string, PlayerData, int> orig, string target, PlayerData pd);

        public sealed class Params_SetPlayerFloat
        {
            public string target;
            public float orig_;
            public PlayerData pd;
        }

        public delegate void SetPlayerFloat_BeforeArgs(Params_SetPlayerFloat args);

        public delegate void SetPlayerFloat_AfterArgs(Params_SetPlayerFloat args);

        public delegate void SetPlayerFloat_WithArgs(Action<string, float, PlayerData> orig, string target, float orig_,
            PlayerData pd);

        public sealed class Params_GetPlayerFloat
        {
            public string target;
            public PlayerData pd;
        }

        public delegate void GetPlayerFloat_BeforeArgs(Params_GetPlayerFloat args);

        public delegate float GetPlayerFloat_AfterArgs(Params_GetPlayerFloat args, float ret);

        public delegate float GetPlayerFloat_WithArgs(Func<string, PlayerData, float> orig, string target,
            PlayerData pd);

        public sealed class Params_SetPlayerString
        {
            public string target;
            public string orig_;
            public PlayerData pd;
        }

        public delegate void SetPlayerString_BeforeArgs(Params_SetPlayerString args);

        public delegate void SetPlayerString_AfterArgs(Params_SetPlayerString args);

        public delegate void SetPlayerString_WithArgs(Action<string, string, PlayerData> orig, string target,
            string orig_, PlayerData pd);

        public sealed class Params_GetPlayerString
        {
            public string target;
            public PlayerData pd;
        }

        public delegate void GetPlayerString_BeforeArgs(Params_GetPlayerString args);

        public delegate string GetPlayerString_AfterArgs(Params_GetPlayerString args, string ret);

        public delegate string GetPlayerString_WithArgs(Func<string, PlayerData, string> orig, string target,
            PlayerData pd);

        public sealed class Params_SetPlayerVector3
        {
            public string target;
            public UnityEngine.Vector3 orig_;
            public PlayerData pd;
        }

        public delegate void SetPlayerVector3_BeforeArgs(Params_SetPlayerVector3 args);

        public delegate void SetPlayerVector3_AfterArgs(Params_SetPlayerVector3 args);

        public delegate void SetPlayerVector3_WithArgs(Action<string, UnityEngine.Vector3, PlayerData> orig,
            string target, UnityEngine.Vector3 orig_, PlayerData pd);

        public sealed class Params_GetPlayerVector3
        {
            public string target;
            public PlayerData pd;
        }

        public delegate void GetPlayerVector3_BeforeArgs(Params_GetPlayerVector3 args);

        public delegate UnityEngine.Vector3 GetPlayerVector3_AfterArgs(Params_GetPlayerVector3 args,
            UnityEngine.Vector3 ret);

        public delegate UnityEngine.Vector3 GetPlayerVector3_WithArgs(
            Func<string, PlayerData, UnityEngine.Vector3> orig, string target, PlayerData pd);

        public delegate void OnBlueHealth_BeforeArgs();

        public delegate int OnBlueHealth_AfterArgs(int ret);

        public delegate int OnBlueHealth_WithArgs(Func<int> orig);

        public sealed class Params_OnTakeHealth
        {
            public int damage;
        }

        public delegate void OnTakeHealth_BeforeArgs(Params_OnTakeHealth args);

        public delegate int OnTakeHealth_AfterArgs(Params_OnTakeHealth args, int ret);

        public delegate int OnTakeHealth_WithArgs(Func<int, int> orig, int damage);

        public sealed class Params_OnTakeDamage
        {
            public int hazardType;
            public int damage;
        }

        public delegate void OnTakeDamage_BeforeArgs(Params_OnTakeDamage args);

        public delegate int OnTakeDamage_AfterArgs(Params_OnTakeDamage args, int ret);

        public delegate int OnTakeDamage_WithArgs(Func<int, int, int> orig, int hazardType, int damage);

        public sealed class Params_AfterTakeDamage
        {
            public int hazardType;
            public int damageAmount;
        }

        public delegate void AfterTakeDamage_BeforeArgs(Params_AfterTakeDamage args);

        public delegate int AfterTakeDamage_AfterArgs(Params_AfterTakeDamage args, int ret);

        public delegate int AfterTakeDamage_WithArgs(Func<int, int, int> orig, int hazardType, int damageAmount);

        public delegate void OnBeforePlayerDead_BeforeArgs();

        public delegate void OnBeforePlayerDead_AfterArgs();

        public delegate void OnBeforePlayerDead_WithArgs(Action orig);

        public delegate void OnAfterPlayerDead_BeforeArgs();

        public delegate void OnAfterPlayerDead_AfterArgs();

        public delegate void OnAfterPlayerDead_WithArgs(Action orig);

        public sealed class Params_OnAttack
        {
            public GlobalEnums.AttackDirection dir;
        }

        public delegate void OnAttack_BeforeArgs(Params_OnAttack args);

        public delegate void OnAttack_AfterArgs(Params_OnAttack args);

        public delegate void OnAttack_WithArgs(Action<GlobalEnums.AttackDirection> orig,
            GlobalEnums.AttackDirection dir);

        public delegate void OnDoAttack_BeforeArgs();

        public delegate void OnDoAttack_AfterArgs();

        public delegate void OnDoAttack_WithArgs(Action orig);

        public sealed class Params_AfterAttack
        {
            public GlobalEnums.AttackDirection dir;
        }

        public delegate void AfterAttack_BeforeArgs(Params_AfterAttack args);

        public delegate void AfterAttack_AfterArgs(Params_AfterAttack args);

        public delegate void AfterAttack_WithArgs(Action<GlobalEnums.AttackDirection> orig,
            GlobalEnums.AttackDirection dir);

        public sealed class Params_OnSlashHit
        {
            public UnityEngine.Collider2D otherCollider;
            public UnityEngine.GameObject gameObject;
        }

        public delegate void OnSlashHit_BeforeArgs(Params_OnSlashHit args);

        public delegate void OnSlashHit_AfterArgs(Params_OnSlashHit args);

        public delegate void OnSlashHit_WithArgs(Action<UnityEngine.Collider2D, UnityEngine.GameObject> orig,
            UnityEngine.Collider2D otherCollider, UnityEngine.GameObject gameObject);

        public sealed class Params_OnCharmUpdate
        {
            public PlayerData pd;
            public HeroController hc;
        }

        public delegate void OnCharmUpdate_BeforeArgs(Params_OnCharmUpdate args);

        public delegate void OnCharmUpdate_AfterArgs(Params_OnCharmUpdate args);

        public delegate void OnCharmUpdate_WithArgs(Action<PlayerData, HeroController> orig, PlayerData pd,
            HeroController hc);

        public delegate void OnHeroUpdate_BeforeArgs();

        public delegate void OnHeroUpdate_AfterArgs();

        public delegate void OnHeroUpdate_WithArgs(Action orig);

        public sealed class Params_BeforeAddHealth
        {
            public int amount;
        }

        public delegate void BeforeAddHealth_BeforeArgs(Params_BeforeAddHealth args);

        public delegate int BeforeAddHealth_AfterArgs(Params_BeforeAddHealth args, int ret);

        public delegate int BeforeAddHealth_WithArgs(Func<int, int> orig, int amount);

        public delegate void OnFocusCost_BeforeArgs();

        public delegate float OnFocusCost_AfterArgs(float ret);

        public delegate float OnFocusCost_WithArgs(Func<float> orig);

        public sealed class Params_OnSoulGain
        {
            public int num;
        }

        public delegate void OnSoulGain_BeforeArgs(Params_OnSoulGain args);

        public delegate int OnSoulGain_AfterArgs(Params_OnSoulGain args, int ret);

        public delegate int OnSoulGain_WithArgs(Func<int, int> orig, int num);

        public sealed class Params_DashVelocityChange
        {
            public UnityEngine.Vector2 change;
        }

        public delegate void DashVelocityChange_BeforeArgs(Params_DashVelocityChange args);

        public delegate UnityEngine.Vector2 DashVelocityChange_AfterArgs(Params_DashVelocityChange args,
            UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 DashVelocityChange_WithArgs(
            Func<UnityEngine.Vector2, UnityEngine.Vector2> orig, UnityEngine.Vector2 change);

        public delegate void OnDashPressed_BeforeArgs();

        public delegate bool OnDashPressed_AfterArgs(bool ret);

        public delegate bool OnDashPressed_WithArgs(Func<bool> orig);

        public sealed class Params_OnSavegameLoad
        {
            public int id;
        }

        public delegate void OnSavegameLoad_BeforeArgs(Params_OnSavegameLoad args);

        public delegate void OnSavegameLoad_AfterArgs(Params_OnSavegameLoad args);

        public delegate void OnSavegameLoad_WithArgs(Action<int> orig, int id);

        public sealed class Params_OnSavegameSave
        {
            public int id;
        }

        public delegate void OnSavegameSave_BeforeArgs(Params_OnSavegameSave args);

        public delegate void OnSavegameSave_AfterArgs(Params_OnSavegameSave args);

        public delegate void OnSavegameSave_WithArgs(Action<int> orig, int id);

        public delegate void OnNewGame_BeforeArgs();

        public delegate void OnNewGame_AfterArgs();

        public delegate void OnNewGame_WithArgs(Action orig);

        public sealed class Params_OnSavegameClear
        {
            public int id;
        }

        public delegate void OnSavegameClear_BeforeArgs(Params_OnSavegameClear args);

        public delegate void OnSavegameClear_AfterArgs(Params_OnSavegameClear args);

        public delegate void OnSavegameClear_WithArgs(Action<int> orig, int id);

        public sealed class Params_OnAfterSaveGameLoad
        {
            public SaveGameData data;
        }

        public delegate void OnAfterSaveGameLoad_BeforeArgs(Params_OnAfterSaveGameLoad args);

        public delegate void OnAfterSaveGameLoad_AfterArgs(Params_OnAfterSaveGameLoad args);

        public delegate void OnAfterSaveGameLoad_WithArgs(Action<SaveGameData> orig, SaveGameData data);

        public sealed class Params_OnBeforeSaveGameSave
        {
            public SaveGameData data;
        }

        public delegate void OnBeforeSaveGameSave_BeforeArgs(Params_OnBeforeSaveGameSave args);

        public delegate void OnBeforeSaveGameSave_AfterArgs(Params_OnBeforeSaveGameSave args);

        public delegate void OnBeforeSaveGameSave_WithArgs(Action<SaveGameData> orig, SaveGameData data);

        public sealed class Params_GetSaveFileName
        {
            public int saveSlot;
        }

        public delegate void GetSaveFileName_BeforeArgs(Params_GetSaveFileName args);

        public delegate string GetSaveFileName_AfterArgs(Params_GetSaveFileName args, string ret);

        public delegate string GetSaveFileName_WithArgs(Func<int, string> orig, int saveSlot);

        public sealed class Params_OnAfterSaveGameClear
        {
            public int saveSlot;
        }

        public delegate void OnAfterSaveGameClear_BeforeArgs(Params_OnAfterSaveGameClear args);

        public delegate void OnAfterSaveGameClear_AfterArgs(Params_OnAfterSaveGameClear args);

        public delegate void OnAfterSaveGameClear_WithArgs(Action<int> orig, int saveSlot);

        public sealed class Params_OnSceneChanged
        {
            public string targetScene;
        }

        public delegate void OnSceneChanged_BeforeArgs(Params_OnSceneChanged args);

        public delegate void OnSceneChanged_AfterArgs(Params_OnSceneChanged args);

        public delegate void OnSceneChanged_WithArgs(Action<string> orig, string targetScene);

        public sealed class Params_BeforeSceneLoad
        {
            public string sceneName;
        }

        public delegate void BeforeSceneLoad_BeforeArgs(Params_BeforeSceneLoad args);

        public delegate string BeforeSceneLoad_AfterArgs(Params_BeforeSceneLoad args, string ret);

        public delegate string BeforeSceneLoad_WithArgs(Func<string, string> orig, string sceneName);

        public sealed class Params_GetMod_string_bool_bool
        {
            public string name;
            public bool onlyEnabled;
            public bool allowLoadError;
        }

        public delegate void GetMod_string_bool_bool_BeforeArgs(Params_GetMod_string_bool_bool args);

        public delegate Modding.IMod GetMod_string_bool_bool_AfterArgs(Params_GetMod_string_bool_bool args,
            Modding.IMod ret);

        public delegate Modding.IMod GetMod_string_bool_bool_WithArgs(Func<string, bool, bool, Modding.IMod> orig,
            string name, bool onlyEnabled, bool allowLoadError);

        public sealed class Params_GetMod_Type_bool_bool
        {
            public System.Type type;
            public bool onlyEnabled;
            public bool allowLoadError;
        }

        public delegate void GetMod_Type_bool_bool_BeforeArgs(Params_GetMod_Type_bool_bool args);

        public delegate Modding.IMod GetMod_Type_bool_bool_AfterArgs(Params_GetMod_Type_bool_bool args,
            Modding.IMod ret);

        public delegate Modding.IMod GetMod_Type_bool_bool_WithArgs(Func<System.Type, bool, bool, Modding.IMod> orig,
            System.Type type, bool onlyEnabled, bool allowLoadError);

        public sealed class Params_ModEnabled_ITogglableMod
        {
            public Modding.ITogglableMod mod;
        }

        public delegate void ModEnabled_ITogglableMod_BeforeArgs(Params_ModEnabled_ITogglableMod args);

        public delegate bool ModEnabled_ITogglableMod_AfterArgs(Params_ModEnabled_ITogglableMod args, bool ret);

        public delegate bool ModEnabled_ITogglableMod_WithArgs(Func<Modding.ITogglableMod, bool> orig,
            Modding.ITogglableMod mod);

        public sealed class Params_ModEnabled_string
        {
            public string name;
        }

        public delegate void ModEnabled_string_BeforeArgs(Params_ModEnabled_string args);

        public delegate bool ModEnabled_string_AfterArgs(Params_ModEnabled_string args, bool ret);

        public delegate bool ModEnabled_string_WithArgs(Func<string, bool> orig, string name);

        public sealed class Params_ModEnabled_Type
        {
            public System.Type type;
        }

        public delegate void ModEnabled_Type_BeforeArgs(Params_ModEnabled_Type args);

        public delegate bool ModEnabled_Type_AfterArgs(Params_ModEnabled_Type args, bool ret);

        public delegate bool ModEnabled_Type_WithArgs(Func<System.Type, bool> orig, System.Type type);

        public sealed class Params_GetAllMods
        {
            public bool onlyEnabled;
            public bool allowLoadError;
        }

        public delegate void GetAllMods_BeforeArgs(Params_GetAllMods args);

        public delegate System.Collections.Generic.IEnumerable<Modding.IMod> GetAllMods_AfterArgs(
            Params_GetAllMods args, System.Collections.Generic.IEnumerable<Modding.IMod> ret);

        public delegate System.Collections.Generic.IEnumerable<Modding.IMod> GetAllMods_WithArgs(
            Func<bool, bool, System.Collections.Generic.IEnumerable<Modding.IMod>> orig, bool onlyEnabled,
            bool allowLoadError);

        public delegate void OnFinishedLoadingMods_BeforeArgs();

        public delegate void OnFinishedLoadingMods_AfterArgs();

        public delegate void OnFinishedLoadingMods_WithArgs(Action orig);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_BuiltModMenuScreens_BeforeArgs get_BuiltModMenuScreens
        {
            add
            {
                HookHandler._beforeget_BuiltModMenuScreens += value;
                HookHandler.Hookget_BuiltModMenuScreens();
            }
            remove => HookHandler._beforeget_BuiltModMenuScreens -= value;
        }

        public static event Delegates.get_GlobalSettings_BeforeArgs get_GlobalSettings
        {
            add
            {
                HookHandler._beforeget_GlobalSettings += value;
                HookHandler.Hookget_GlobalSettings();
            }
            remove => HookHandler._beforeget_GlobalSettings -= value;
        }

        public static event Delegates.set_GlobalSettings_BeforeArgs set_GlobalSettings
        {
            add
            {
                HookHandler._beforeset_GlobalSettings += value;
                HookHandler.Hookset_GlobalSettings();
            }
            remove => HookHandler._beforeset_GlobalSettings -= value;
        }

        public static event Delegates.get_Instance_BeforeArgs get_Instance
        {
            add
            {
                HookHandler._beforeget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._beforeget_Instance -= value;
        }

        public static event Delegates.LoadGlobalSettings_BeforeArgs LoadGlobalSettings
        {
            add
            {
                HookHandler._beforeLoadGlobalSettings += value;
                HookHandler.HookLoadGlobalSettings();
            }
            remove => HookHandler._beforeLoadGlobalSettings -= value;
        }

        public static event Delegates.SaveGlobalSettings_BeforeArgs SaveGlobalSettings
        {
            add
            {
                HookHandler._beforeSaveGlobalSettings += value;
                HookHandler.HookSaveGlobalSettings();
            }
            remove => HookHandler._beforeSaveGlobalSettings -= value;
        }

        public static event Delegates.LogConsole_BeforeArgs LogConsole
        {
            add
            {
                HookHandler._beforeLogConsole += value;
                HookHandler.HookLogConsole();
            }
            remove => HookHandler._beforeLogConsole -= value;
        }

        public static event Delegates.LanguageGet_BeforeArgs LanguageGet
        {
            add
            {
                HookHandler._beforeLanguageGet += value;
                HookHandler.HookLanguageGet();
            }
            remove => HookHandler._beforeLanguageGet -= value;
        }

        public static event Delegates.OnCursor_BeforeArgs OnCursor
        {
            add
            {
                HookHandler._beforeOnCursor += value;
                HookHandler.HookOnCursor();
            }
            remove => HookHandler._beforeOnCursor -= value;
        }

        public static event Delegates.OnColliderCreate_BeforeArgs OnColliderCreate
        {
            add
            {
                HookHandler._beforeOnColliderCreate += value;
                HookHandler.HookOnColliderCreate();
            }
            remove => HookHandler._beforeOnColliderCreate -= value;
        }

        public static event Delegates.OnObjectPoolSpawn_BeforeArgs OnObjectPoolSpawn
        {
            add
            {
                HookHandler._beforeOnObjectPoolSpawn += value;
                HookHandler.HookOnObjectPoolSpawn();
            }
            remove => HookHandler._beforeOnObjectPoolSpawn -= value;
        }

        public static event Delegates.OnApplicationQuit_BeforeArgs OnApplicationQuit
        {
            add
            {
                HookHandler._beforeOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._beforeOnApplicationQuit -= value;
        }

        public static event Delegates.OnHitInstanceBeforeHit_BeforeArgs OnHitInstanceBeforeHit
        {
            add
            {
                HookHandler._beforeOnHitInstanceBeforeHit += value;
                HookHandler.HookOnHitInstanceBeforeHit();
            }
            remove => HookHandler._beforeOnHitInstanceBeforeHit -= value;
        }

        public static event Delegates.OnDrawBlackBorders_BeforeArgs OnDrawBlackBorders
        {
            add
            {
                HookHandler._beforeOnDrawBlackBorders += value;
                HookHandler.HookOnDrawBlackBorders();
            }
            remove => HookHandler._beforeOnDrawBlackBorders -= value;
        }

        public static event Delegates.OnEnableEnemy_BeforeArgs OnEnableEnemy
        {
            add
            {
                HookHandler._beforeOnEnableEnemy += value;
                HookHandler.HookOnEnableEnemy();
            }
            remove => HookHandler._beforeOnEnableEnemy -= value;
        }

        public static event Delegates.OnRecieveDeathEvent_BeforeArgs OnRecieveDeathEvent
        {
            add
            {
                HookHandler._beforeOnRecieveDeathEvent += value;
                HookHandler.HookOnRecieveDeathEvent();
            }
            remove => HookHandler._beforeOnRecieveDeathEvent -= value;
        }

        public static event Delegates.OnRecordKillForJournal_BeforeArgs OnRecordKillForJournal
        {
            add
            {
                HookHandler._beforeOnRecordKillForJournal += value;
                HookHandler.HookOnRecordKillForJournal();
            }
            remove => HookHandler._beforeOnRecordKillForJournal -= value;
        }

        public static event Delegates.SetPlayerBool_BeforeArgs SetPlayerBool
        {
            add
            {
                HookHandler._beforeSetPlayerBool += value;
                HookHandler.HookSetPlayerBool();
            }
            remove => HookHandler._beforeSetPlayerBool -= value;
        }

        public static event Delegates.GetPlayerBool_BeforeArgs GetPlayerBool
        {
            add
            {
                HookHandler._beforeGetPlayerBool += value;
                HookHandler.HookGetPlayerBool();
            }
            remove => HookHandler._beforeGetPlayerBool -= value;
        }

        public static event Delegates.SetPlayerInt_BeforeArgs SetPlayerInt
        {
            add
            {
                HookHandler._beforeSetPlayerInt += value;
                HookHandler.HookSetPlayerInt();
            }
            remove => HookHandler._beforeSetPlayerInt -= value;
        }

        public static event Delegates.GetPlayerInt_BeforeArgs GetPlayerInt
        {
            add
            {
                HookHandler._beforeGetPlayerInt += value;
                HookHandler.HookGetPlayerInt();
            }
            remove => HookHandler._beforeGetPlayerInt -= value;
        }

        public static event Delegates.SetPlayerFloat_BeforeArgs SetPlayerFloat
        {
            add
            {
                HookHandler._beforeSetPlayerFloat += value;
                HookHandler.HookSetPlayerFloat();
            }
            remove => HookHandler._beforeSetPlayerFloat -= value;
        }

        public static event Delegates.GetPlayerFloat_BeforeArgs GetPlayerFloat
        {
            add
            {
                HookHandler._beforeGetPlayerFloat += value;
                HookHandler.HookGetPlayerFloat();
            }
            remove => HookHandler._beforeGetPlayerFloat -= value;
        }

        public static event Delegates.SetPlayerString_BeforeArgs SetPlayerString
        {
            add
            {
                HookHandler._beforeSetPlayerString += value;
                HookHandler.HookSetPlayerString();
            }
            remove => HookHandler._beforeSetPlayerString -= value;
        }

        public static event Delegates.GetPlayerString_BeforeArgs GetPlayerString
        {
            add
            {
                HookHandler._beforeGetPlayerString += value;
                HookHandler.HookGetPlayerString();
            }
            remove => HookHandler._beforeGetPlayerString -= value;
        }

        public static event Delegates.SetPlayerVector3_BeforeArgs SetPlayerVector3
        {
            add
            {
                HookHandler._beforeSetPlayerVector3 += value;
                HookHandler.HookSetPlayerVector3();
            }
            remove => HookHandler._beforeSetPlayerVector3 -= value;
        }

        public static event Delegates.GetPlayerVector3_BeforeArgs GetPlayerVector3
        {
            add
            {
                HookHandler._beforeGetPlayerVector3 += value;
                HookHandler.HookGetPlayerVector3();
            }
            remove => HookHandler._beforeGetPlayerVector3 -= value;
        }

        public static event Delegates.OnBlueHealth_BeforeArgs OnBlueHealth
        {
            add
            {
                HookHandler._beforeOnBlueHealth += value;
                HookHandler.HookOnBlueHealth();
            }
            remove => HookHandler._beforeOnBlueHealth -= value;
        }

        public static event Delegates.OnTakeHealth_BeforeArgs OnTakeHealth
        {
            add
            {
                HookHandler._beforeOnTakeHealth += value;
                HookHandler.HookOnTakeHealth();
            }
            remove => HookHandler._beforeOnTakeHealth -= value;
        }

        public static event Delegates.OnTakeDamage_BeforeArgs OnTakeDamage
        {
            add
            {
                HookHandler._beforeOnTakeDamage += value;
                HookHandler.HookOnTakeDamage();
            }
            remove => HookHandler._beforeOnTakeDamage -= value;
        }

        public static event Delegates.AfterTakeDamage_BeforeArgs AfterTakeDamage
        {
            add
            {
                HookHandler._beforeAfterTakeDamage += value;
                HookHandler.HookAfterTakeDamage();
            }
            remove => HookHandler._beforeAfterTakeDamage -= value;
        }

        public static event Delegates.OnBeforePlayerDead_BeforeArgs OnBeforePlayerDead
        {
            add
            {
                HookHandler._beforeOnBeforePlayerDead += value;
                HookHandler.HookOnBeforePlayerDead();
            }
            remove => HookHandler._beforeOnBeforePlayerDead -= value;
        }

        public static event Delegates.OnAfterPlayerDead_BeforeArgs OnAfterPlayerDead
        {
            add
            {
                HookHandler._beforeOnAfterPlayerDead += value;
                HookHandler.HookOnAfterPlayerDead();
            }
            remove => HookHandler._beforeOnAfterPlayerDead -= value;
        }

        public static event Delegates.OnAttack_BeforeArgs OnAttack
        {
            add
            {
                HookHandler._beforeOnAttack += value;
                HookHandler.HookOnAttack();
            }
            remove => HookHandler._beforeOnAttack -= value;
        }

        public static event Delegates.OnDoAttack_BeforeArgs OnDoAttack
        {
            add
            {
                HookHandler._beforeOnDoAttack += value;
                HookHandler.HookOnDoAttack();
            }
            remove => HookHandler._beforeOnDoAttack -= value;
        }

        public static event Delegates.AfterAttack_BeforeArgs AfterAttack
        {
            add
            {
                HookHandler._beforeAfterAttack += value;
                HookHandler.HookAfterAttack();
            }
            remove => HookHandler._beforeAfterAttack -= value;
        }

        public static event Delegates.OnSlashHit_BeforeArgs OnSlashHit
        {
            add
            {
                HookHandler._beforeOnSlashHit += value;
                HookHandler.HookOnSlashHit();
            }
            remove => HookHandler._beforeOnSlashHit -= value;
        }

        public static event Delegates.OnCharmUpdate_BeforeArgs OnCharmUpdate
        {
            add
            {
                HookHandler._beforeOnCharmUpdate += value;
                HookHandler.HookOnCharmUpdate();
            }
            remove => HookHandler._beforeOnCharmUpdate -= value;
        }

        public static event Delegates.OnHeroUpdate_BeforeArgs OnHeroUpdate
        {
            add
            {
                HookHandler._beforeOnHeroUpdate += value;
                HookHandler.HookOnHeroUpdate();
            }
            remove => HookHandler._beforeOnHeroUpdate -= value;
        }

        public static event Delegates.BeforeAddHealth_BeforeArgs BeforeAddHealth
        {
            add
            {
                HookHandler._beforeBeforeAddHealth += value;
                HookHandler.HookBeforeAddHealth();
            }
            remove => HookHandler._beforeBeforeAddHealth -= value;
        }

        public static event Delegates.OnFocusCost_BeforeArgs OnFocusCost
        {
            add
            {
                HookHandler._beforeOnFocusCost += value;
                HookHandler.HookOnFocusCost();
            }
            remove => HookHandler._beforeOnFocusCost -= value;
        }

        public static event Delegates.OnSoulGain_BeforeArgs OnSoulGain
        {
            add
            {
                HookHandler._beforeOnSoulGain += value;
                HookHandler.HookOnSoulGain();
            }
            remove => HookHandler._beforeOnSoulGain -= value;
        }

        public static event Delegates.DashVelocityChange_BeforeArgs DashVelocityChange
        {
            add
            {
                HookHandler._beforeDashVelocityChange += value;
                HookHandler.HookDashVelocityChange();
            }
            remove => HookHandler._beforeDashVelocityChange -= value;
        }

        public static event Delegates.OnDashPressed_BeforeArgs OnDashPressed
        {
            add
            {
                HookHandler._beforeOnDashPressed += value;
                HookHandler.HookOnDashPressed();
            }
            remove => HookHandler._beforeOnDashPressed -= value;
        }

        public static event Delegates.OnSavegameLoad_BeforeArgs OnSavegameLoad
        {
            add
            {
                HookHandler._beforeOnSavegameLoad += value;
                HookHandler.HookOnSavegameLoad();
            }
            remove => HookHandler._beforeOnSavegameLoad -= value;
        }

        public static event Delegates.OnSavegameSave_BeforeArgs OnSavegameSave
        {
            add
            {
                HookHandler._beforeOnSavegameSave += value;
                HookHandler.HookOnSavegameSave();
            }
            remove => HookHandler._beforeOnSavegameSave -= value;
        }

        public static event Delegates.OnNewGame_BeforeArgs OnNewGame
        {
            add
            {
                HookHandler._beforeOnNewGame += value;
                HookHandler.HookOnNewGame();
            }
            remove => HookHandler._beforeOnNewGame -= value;
        }

        public static event Delegates.OnSavegameClear_BeforeArgs OnSavegameClear
        {
            add
            {
                HookHandler._beforeOnSavegameClear += value;
                HookHandler.HookOnSavegameClear();
            }
            remove => HookHandler._beforeOnSavegameClear -= value;
        }

        public static event Delegates.OnAfterSaveGameLoad_BeforeArgs OnAfterSaveGameLoad
        {
            add
            {
                HookHandler._beforeOnAfterSaveGameLoad += value;
                HookHandler.HookOnAfterSaveGameLoad();
            }
            remove => HookHandler._beforeOnAfterSaveGameLoad -= value;
        }

        public static event Delegates.OnBeforeSaveGameSave_BeforeArgs OnBeforeSaveGameSave
        {
            add
            {
                HookHandler._beforeOnBeforeSaveGameSave += value;
                HookHandler.HookOnBeforeSaveGameSave();
            }
            remove => HookHandler._beforeOnBeforeSaveGameSave -= value;
        }

        public static event Delegates.GetSaveFileName_BeforeArgs GetSaveFileName
        {
            add
            {
                HookHandler._beforeGetSaveFileName += value;
                HookHandler.HookGetSaveFileName();
            }
            remove => HookHandler._beforeGetSaveFileName -= value;
        }

        public static event Delegates.OnAfterSaveGameClear_BeforeArgs OnAfterSaveGameClear
        {
            add
            {
                HookHandler._beforeOnAfterSaveGameClear += value;
                HookHandler.HookOnAfterSaveGameClear();
            }
            remove => HookHandler._beforeOnAfterSaveGameClear -= value;
        }

        public static event Delegates.OnSceneChanged_BeforeArgs OnSceneChanged
        {
            add
            {
                HookHandler._beforeOnSceneChanged += value;
                HookHandler.HookOnSceneChanged();
            }
            remove => HookHandler._beforeOnSceneChanged -= value;
        }

        public static event Delegates.BeforeSceneLoad_BeforeArgs BeforeSceneLoad
        {
            add
            {
                HookHandler._beforeBeforeSceneLoad += value;
                HookHandler.HookBeforeSceneLoad();
            }
            remove => HookHandler._beforeBeforeSceneLoad -= value;
        }

        public static event Delegates.GetMod_string_bool_bool_BeforeArgs GetMod_string_bool_bool
        {
            add
            {
                HookHandler._beforeGetMod_string_bool_bool += value;
                HookHandler.HookGetMod_string_bool_bool();
            }
            remove => HookHandler._beforeGetMod_string_bool_bool -= value;
        }

        public static event Delegates.GetMod_Type_bool_bool_BeforeArgs GetMod_Type_bool_bool
        {
            add
            {
                HookHandler._beforeGetMod_Type_bool_bool += value;
                HookHandler.HookGetMod_Type_bool_bool();
            }
            remove => HookHandler._beforeGetMod_Type_bool_bool -= value;
        }

        public static event Delegates.ModEnabled_ITogglableMod_BeforeArgs ModEnabled_ITogglableMod
        {
            add
            {
                HookHandler._beforeModEnabled_ITogglableMod += value;
                HookHandler.HookModEnabled_ITogglableMod();
            }
            remove => HookHandler._beforeModEnabled_ITogglableMod -= value;
        }

        public static event Delegates.ModEnabled_string_BeforeArgs ModEnabled_string
        {
            add
            {
                HookHandler._beforeModEnabled_string += value;
                HookHandler.HookModEnabled_string();
            }
            remove => HookHandler._beforeModEnabled_string -= value;
        }

        public static event Delegates.ModEnabled_Type_BeforeArgs ModEnabled_Type
        {
            add
            {
                HookHandler._beforeModEnabled_Type += value;
                HookHandler.HookModEnabled_Type();
            }
            remove => HookHandler._beforeModEnabled_Type -= value;
        }

        public static event Delegates.GetAllMods_BeforeArgs GetAllMods
        {
            add
            {
                HookHandler._beforeGetAllMods += value;
                HookHandler.HookGetAllMods();
            }
            remove => HookHandler._beforeGetAllMods -= value;
        }

        public static event Delegates.OnFinishedLoadingMods_BeforeArgs OnFinishedLoadingMods
        {
            add
            {
                HookHandler._beforeOnFinishedLoadingMods += value;
                HookHandler.HookOnFinishedLoadingMods();
            }
            remove => HookHandler._beforeOnFinishedLoadingMods -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_BuiltModMenuScreens_AfterArgs get_BuiltModMenuScreens
        {
            add
            {
                HookHandler._afterget_BuiltModMenuScreens += value;
                HookHandler.Hookget_BuiltModMenuScreens();
            }
            remove => HookHandler._afterget_BuiltModMenuScreens -= value;
        }

        public static event Delegates.get_GlobalSettings_AfterArgs get_GlobalSettings
        {
            add
            {
                HookHandler._afterget_GlobalSettings += value;
                HookHandler.Hookget_GlobalSettings();
            }
            remove => HookHandler._afterget_GlobalSettings -= value;
        }

        public static event Delegates.set_GlobalSettings_AfterArgs set_GlobalSettings
        {
            add
            {
                HookHandler._afterset_GlobalSettings += value;
                HookHandler.Hookset_GlobalSettings();
            }
            remove => HookHandler._afterset_GlobalSettings -= value;
        }

        public static event Delegates.get_Instance_AfterArgs get_Instance
        {
            add
            {
                HookHandler._afterget_Instance += value;
                HookHandler.Hookget_Instance();
            }
            remove => HookHandler._afterget_Instance -= value;
        }

        public static event Delegates.LoadGlobalSettings_AfterArgs LoadGlobalSettings
        {
            add
            {
                HookHandler._afterLoadGlobalSettings += value;
                HookHandler.HookLoadGlobalSettings();
            }
            remove => HookHandler._afterLoadGlobalSettings -= value;
        }

        public static event Delegates.SaveGlobalSettings_AfterArgs SaveGlobalSettings
        {
            add
            {
                HookHandler._afterSaveGlobalSettings += value;
                HookHandler.HookSaveGlobalSettings();
            }
            remove => HookHandler._afterSaveGlobalSettings -= value;
        }

        public static event Delegates.LogConsole_AfterArgs LogConsole
        {
            add
            {
                HookHandler._afterLogConsole += value;
                HookHandler.HookLogConsole();
            }
            remove => HookHandler._afterLogConsole -= value;
        }

        public static event Delegates.LanguageGet_AfterArgs LanguageGet
        {
            add
            {
                HookHandler._afterLanguageGet += value;
                HookHandler.HookLanguageGet();
            }
            remove => HookHandler._afterLanguageGet -= value;
        }

        public static event Delegates.OnCursor_AfterArgs OnCursor
        {
            add
            {
                HookHandler._afterOnCursor += value;
                HookHandler.HookOnCursor();
            }
            remove => HookHandler._afterOnCursor -= value;
        }

        public static event Delegates.OnColliderCreate_AfterArgs OnColliderCreate
        {
            add
            {
                HookHandler._afterOnColliderCreate += value;
                HookHandler.HookOnColliderCreate();
            }
            remove => HookHandler._afterOnColliderCreate -= value;
        }

        public static event Delegates.OnObjectPoolSpawn_AfterArgs OnObjectPoolSpawn
        {
            add
            {
                HookHandler._afterOnObjectPoolSpawn += value;
                HookHandler.HookOnObjectPoolSpawn();
            }
            remove => HookHandler._afterOnObjectPoolSpawn -= value;
        }

        public static event Delegates.OnApplicationQuit_AfterArgs OnApplicationQuit
        {
            add
            {
                HookHandler._afterOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._afterOnApplicationQuit -= value;
        }

        public static event Delegates.OnHitInstanceBeforeHit_AfterArgs OnHitInstanceBeforeHit
        {
            add
            {
                HookHandler._afterOnHitInstanceBeforeHit += value;
                HookHandler.HookOnHitInstanceBeforeHit();
            }
            remove => HookHandler._afterOnHitInstanceBeforeHit -= value;
        }

        public static event Delegates.OnDrawBlackBorders_AfterArgs OnDrawBlackBorders
        {
            add
            {
                HookHandler._afterOnDrawBlackBorders += value;
                HookHandler.HookOnDrawBlackBorders();
            }
            remove => HookHandler._afterOnDrawBlackBorders -= value;
        }

        public static event Delegates.OnEnableEnemy_AfterArgs OnEnableEnemy
        {
            add
            {
                HookHandler._afterOnEnableEnemy += value;
                HookHandler.HookOnEnableEnemy();
            }
            remove => HookHandler._afterOnEnableEnemy -= value;
        }

        public static event Delegates.OnRecieveDeathEvent_AfterArgs OnRecieveDeathEvent
        {
            add
            {
                HookHandler._afterOnRecieveDeathEvent += value;
                HookHandler.HookOnRecieveDeathEvent();
            }
            remove => HookHandler._afterOnRecieveDeathEvent -= value;
        }

        public static event Delegates.OnRecordKillForJournal_AfterArgs OnRecordKillForJournal
        {
            add
            {
                HookHandler._afterOnRecordKillForJournal += value;
                HookHandler.HookOnRecordKillForJournal();
            }
            remove => HookHandler._afterOnRecordKillForJournal -= value;
        }

        public static event Delegates.SetPlayerBool_AfterArgs SetPlayerBool
        {
            add
            {
                HookHandler._afterSetPlayerBool += value;
                HookHandler.HookSetPlayerBool();
            }
            remove => HookHandler._afterSetPlayerBool -= value;
        }

        public static event Delegates.GetPlayerBool_AfterArgs GetPlayerBool
        {
            add
            {
                HookHandler._afterGetPlayerBool += value;
                HookHandler.HookGetPlayerBool();
            }
            remove => HookHandler._afterGetPlayerBool -= value;
        }

        public static event Delegates.SetPlayerInt_AfterArgs SetPlayerInt
        {
            add
            {
                HookHandler._afterSetPlayerInt += value;
                HookHandler.HookSetPlayerInt();
            }
            remove => HookHandler._afterSetPlayerInt -= value;
        }

        public static event Delegates.GetPlayerInt_AfterArgs GetPlayerInt
        {
            add
            {
                HookHandler._afterGetPlayerInt += value;
                HookHandler.HookGetPlayerInt();
            }
            remove => HookHandler._afterGetPlayerInt -= value;
        }

        public static event Delegates.SetPlayerFloat_AfterArgs SetPlayerFloat
        {
            add
            {
                HookHandler._afterSetPlayerFloat += value;
                HookHandler.HookSetPlayerFloat();
            }
            remove => HookHandler._afterSetPlayerFloat -= value;
        }

        public static event Delegates.GetPlayerFloat_AfterArgs GetPlayerFloat
        {
            add
            {
                HookHandler._afterGetPlayerFloat += value;
                HookHandler.HookGetPlayerFloat();
            }
            remove => HookHandler._afterGetPlayerFloat -= value;
        }

        public static event Delegates.SetPlayerString_AfterArgs SetPlayerString
        {
            add
            {
                HookHandler._afterSetPlayerString += value;
                HookHandler.HookSetPlayerString();
            }
            remove => HookHandler._afterSetPlayerString -= value;
        }

        public static event Delegates.GetPlayerString_AfterArgs GetPlayerString
        {
            add
            {
                HookHandler._afterGetPlayerString += value;
                HookHandler.HookGetPlayerString();
            }
            remove => HookHandler._afterGetPlayerString -= value;
        }

        public static event Delegates.SetPlayerVector3_AfterArgs SetPlayerVector3
        {
            add
            {
                HookHandler._afterSetPlayerVector3 += value;
                HookHandler.HookSetPlayerVector3();
            }
            remove => HookHandler._afterSetPlayerVector3 -= value;
        }

        public static event Delegates.GetPlayerVector3_AfterArgs GetPlayerVector3
        {
            add
            {
                HookHandler._afterGetPlayerVector3 += value;
                HookHandler.HookGetPlayerVector3();
            }
            remove => HookHandler._afterGetPlayerVector3 -= value;
        }

        public static event Delegates.OnBlueHealth_AfterArgs OnBlueHealth
        {
            add
            {
                HookHandler._afterOnBlueHealth += value;
                HookHandler.HookOnBlueHealth();
            }
            remove => HookHandler._afterOnBlueHealth -= value;
        }

        public static event Delegates.OnTakeHealth_AfterArgs OnTakeHealth
        {
            add
            {
                HookHandler._afterOnTakeHealth += value;
                HookHandler.HookOnTakeHealth();
            }
            remove => HookHandler._afterOnTakeHealth -= value;
        }

        public static event Delegates.OnTakeDamage_AfterArgs OnTakeDamage
        {
            add
            {
                HookHandler._afterOnTakeDamage += value;
                HookHandler.HookOnTakeDamage();
            }
            remove => HookHandler._afterOnTakeDamage -= value;
        }

        public static event Delegates.AfterTakeDamage_AfterArgs AfterTakeDamage
        {
            add
            {
                HookHandler._afterAfterTakeDamage += value;
                HookHandler.HookAfterTakeDamage();
            }
            remove => HookHandler._afterAfterTakeDamage -= value;
        }

        public static event Delegates.OnBeforePlayerDead_AfterArgs OnBeforePlayerDead
        {
            add
            {
                HookHandler._afterOnBeforePlayerDead += value;
                HookHandler.HookOnBeforePlayerDead();
            }
            remove => HookHandler._afterOnBeforePlayerDead -= value;
        }

        public static event Delegates.OnAfterPlayerDead_AfterArgs OnAfterPlayerDead
        {
            add
            {
                HookHandler._afterOnAfterPlayerDead += value;
                HookHandler.HookOnAfterPlayerDead();
            }
            remove => HookHandler._afterOnAfterPlayerDead -= value;
        }

        public static event Delegates.OnAttack_AfterArgs OnAttack
        {
            add
            {
                HookHandler._afterOnAttack += value;
                HookHandler.HookOnAttack();
            }
            remove => HookHandler._afterOnAttack -= value;
        }

        public static event Delegates.OnDoAttack_AfterArgs OnDoAttack
        {
            add
            {
                HookHandler._afterOnDoAttack += value;
                HookHandler.HookOnDoAttack();
            }
            remove => HookHandler._afterOnDoAttack -= value;
        }

        public static event Delegates.AfterAttack_AfterArgs AfterAttack
        {
            add
            {
                HookHandler._afterAfterAttack += value;
                HookHandler.HookAfterAttack();
            }
            remove => HookHandler._afterAfterAttack -= value;
        }

        public static event Delegates.OnSlashHit_AfterArgs OnSlashHit
        {
            add
            {
                HookHandler._afterOnSlashHit += value;
                HookHandler.HookOnSlashHit();
            }
            remove => HookHandler._afterOnSlashHit -= value;
        }

        public static event Delegates.OnCharmUpdate_AfterArgs OnCharmUpdate
        {
            add
            {
                HookHandler._afterOnCharmUpdate += value;
                HookHandler.HookOnCharmUpdate();
            }
            remove => HookHandler._afterOnCharmUpdate -= value;
        }

        public static event Delegates.OnHeroUpdate_AfterArgs OnHeroUpdate
        {
            add
            {
                HookHandler._afterOnHeroUpdate += value;
                HookHandler.HookOnHeroUpdate();
            }
            remove => HookHandler._afterOnHeroUpdate -= value;
        }

        public static event Delegates.BeforeAddHealth_AfterArgs BeforeAddHealth
        {
            add
            {
                HookHandler._afterBeforeAddHealth += value;
                HookHandler.HookBeforeAddHealth();
            }
            remove => HookHandler._afterBeforeAddHealth -= value;
        }

        public static event Delegates.OnFocusCost_AfterArgs OnFocusCost
        {
            add
            {
                HookHandler._afterOnFocusCost += value;
                HookHandler.HookOnFocusCost();
            }
            remove => HookHandler._afterOnFocusCost -= value;
        }

        public static event Delegates.OnSoulGain_AfterArgs OnSoulGain
        {
            add
            {
                HookHandler._afterOnSoulGain += value;
                HookHandler.HookOnSoulGain();
            }
            remove => HookHandler._afterOnSoulGain -= value;
        }

        public static event Delegates.DashVelocityChange_AfterArgs DashVelocityChange
        {
            add
            {
                HookHandler._afterDashVelocityChange += value;
                HookHandler.HookDashVelocityChange();
            }
            remove => HookHandler._afterDashVelocityChange -= value;
        }

        public static event Delegates.OnDashPressed_AfterArgs OnDashPressed
        {
            add
            {
                HookHandler._afterOnDashPressed += value;
                HookHandler.HookOnDashPressed();
            }
            remove => HookHandler._afterOnDashPressed -= value;
        }

        public static event Delegates.OnSavegameLoad_AfterArgs OnSavegameLoad
        {
            add
            {
                HookHandler._afterOnSavegameLoad += value;
                HookHandler.HookOnSavegameLoad();
            }
            remove => HookHandler._afterOnSavegameLoad -= value;
        }

        public static event Delegates.OnSavegameSave_AfterArgs OnSavegameSave
        {
            add
            {
                HookHandler._afterOnSavegameSave += value;
                HookHandler.HookOnSavegameSave();
            }
            remove => HookHandler._afterOnSavegameSave -= value;
        }

        public static event Delegates.OnNewGame_AfterArgs OnNewGame
        {
            add
            {
                HookHandler._afterOnNewGame += value;
                HookHandler.HookOnNewGame();
            }
            remove => HookHandler._afterOnNewGame -= value;
        }

        public static event Delegates.OnSavegameClear_AfterArgs OnSavegameClear
        {
            add
            {
                HookHandler._afterOnSavegameClear += value;
                HookHandler.HookOnSavegameClear();
            }
            remove => HookHandler._afterOnSavegameClear -= value;
        }

        public static event Delegates.OnAfterSaveGameLoad_AfterArgs OnAfterSaveGameLoad
        {
            add
            {
                HookHandler._afterOnAfterSaveGameLoad += value;
                HookHandler.HookOnAfterSaveGameLoad();
            }
            remove => HookHandler._afterOnAfterSaveGameLoad -= value;
        }

        public static event Delegates.OnBeforeSaveGameSave_AfterArgs OnBeforeSaveGameSave
        {
            add
            {
                HookHandler._afterOnBeforeSaveGameSave += value;
                HookHandler.HookOnBeforeSaveGameSave();
            }
            remove => HookHandler._afterOnBeforeSaveGameSave -= value;
        }

        public static event Delegates.GetSaveFileName_AfterArgs GetSaveFileName
        {
            add
            {
                HookHandler._afterGetSaveFileName += value;
                HookHandler.HookGetSaveFileName();
            }
            remove => HookHandler._afterGetSaveFileName -= value;
        }

        public static event Delegates.OnAfterSaveGameClear_AfterArgs OnAfterSaveGameClear
        {
            add
            {
                HookHandler._afterOnAfterSaveGameClear += value;
                HookHandler.HookOnAfterSaveGameClear();
            }
            remove => HookHandler._afterOnAfterSaveGameClear -= value;
        }

        public static event Delegates.OnSceneChanged_AfterArgs OnSceneChanged
        {
            add
            {
                HookHandler._afterOnSceneChanged += value;
                HookHandler.HookOnSceneChanged();
            }
            remove => HookHandler._afterOnSceneChanged -= value;
        }

        public static event Delegates.BeforeSceneLoad_AfterArgs BeforeSceneLoad
        {
            add
            {
                HookHandler._afterBeforeSceneLoad += value;
                HookHandler.HookBeforeSceneLoad();
            }
            remove => HookHandler._afterBeforeSceneLoad -= value;
        }

        public static event Delegates.GetMod_string_bool_bool_AfterArgs GetMod_string_bool_bool
        {
            add
            {
                HookHandler._afterGetMod_string_bool_bool += value;
                HookHandler.HookGetMod_string_bool_bool();
            }
            remove => HookHandler._afterGetMod_string_bool_bool -= value;
        }

        public static event Delegates.GetMod_Type_bool_bool_AfterArgs GetMod_Type_bool_bool
        {
            add
            {
                HookHandler._afterGetMod_Type_bool_bool += value;
                HookHandler.HookGetMod_Type_bool_bool();
            }
            remove => HookHandler._afterGetMod_Type_bool_bool -= value;
        }

        public static event Delegates.ModEnabled_ITogglableMod_AfterArgs ModEnabled_ITogglableMod
        {
            add
            {
                HookHandler._afterModEnabled_ITogglableMod += value;
                HookHandler.HookModEnabled_ITogglableMod();
            }
            remove => HookHandler._afterModEnabled_ITogglableMod -= value;
        }

        public static event Delegates.ModEnabled_string_AfterArgs ModEnabled_string
        {
            add
            {
                HookHandler._afterModEnabled_string += value;
                HookHandler.HookModEnabled_string();
            }
            remove => HookHandler._afterModEnabled_string -= value;
        }

        public static event Delegates.ModEnabled_Type_AfterArgs ModEnabled_Type
        {
            add
            {
                HookHandler._afterModEnabled_Type += value;
                HookHandler.HookModEnabled_Type();
            }
            remove => HookHandler._afterModEnabled_Type -= value;
        }

        public static event Delegates.GetAllMods_AfterArgs GetAllMods
        {
            add
            {
                HookHandler._afterGetAllMods += value;
                HookHandler.HookGetAllMods();
            }
            remove => HookHandler._afterGetAllMods -= value;
        }

        public static event Delegates.OnFinishedLoadingMods_AfterArgs OnFinishedLoadingMods
        {
            add
            {
                HookHandler._afterOnFinishedLoadingMods += value;
                HookHandler.HookOnFinishedLoadingMods();
            }
            remove => HookHandler._afterOnFinishedLoadingMods -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_BuiltModMenuScreens_WithArgs get_BuiltModMenuScreens
        {
            add => HookEndpointManager.Add<Delegates.get_BuiltModMenuScreens_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_BuiltModMenuScreens", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_BuiltModMenuScreens_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_BuiltModMenuScreens", false), value);
        }

        public static event Delegates.get_GlobalSettings_WithArgs get_GlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.get_GlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_GlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_GlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_GlobalSettings", false), value);
        }

        public static event Delegates.set_GlobalSettings_WithArgs set_GlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.set_GlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "set_GlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_GlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "set_GlobalSettings", false), value);
        }

        public static event Delegates.get_Instance_WithArgs get_Instance
        {
            add => HookEndpointManager.Add<Delegates.get_Instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_Instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "get_Instance", false), value);
        }

        public static event Delegates.LoadGlobalSettings_WithArgs LoadGlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.LoadGlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LoadGlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.LoadGlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LoadGlobalSettings", false), value);
        }

        public static event Delegates.SaveGlobalSettings_WithArgs SaveGlobalSettings
        {
            add => HookEndpointManager.Add<Delegates.SaveGlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SaveGlobalSettings", false), value);
            remove => HookEndpointManager.Remove<Delegates.SaveGlobalSettings_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SaveGlobalSettings", false), value);
        }

        public static event Delegates.LogConsole_WithArgs LogConsole
        {
            add => HookEndpointManager.Add<Delegates.LogConsole_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LogConsole", false), value);
            remove => HookEndpointManager.Remove<Delegates.LogConsole_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LogConsole", false), value);
        }

        public static event Delegates.LanguageGet_WithArgs LanguageGet
        {
            add => HookEndpointManager.Add<Delegates.LanguageGet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LanguageGet", false), value);
            remove => HookEndpointManager.Remove<Delegates.LanguageGet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "LanguageGet", false), value);
        }

        public static event Delegates.OnCursor_WithArgs OnCursor
        {
            add => HookEndpointManager.Add<Delegates.OnCursor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnCursor", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnCursor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnCursor", false), value);
        }

        public static event Delegates.OnColliderCreate_WithArgs OnColliderCreate
        {
            add => HookEndpointManager.Add<Delegates.OnColliderCreate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnColliderCreate", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnColliderCreate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnColliderCreate", false), value);
        }

        public static event Delegates.OnObjectPoolSpawn_WithArgs OnObjectPoolSpawn
        {
            add => HookEndpointManager.Add<Delegates.OnObjectPoolSpawn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnObjectPoolSpawn", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnObjectPoolSpawn_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnObjectPoolSpawn", false), value);
        }

        public static event Delegates.OnApplicationQuit_WithArgs OnApplicationQuit
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnApplicationQuit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnApplicationQuit", false), value);
        }

        public static event Delegates.OnHitInstanceBeforeHit_WithArgs OnHitInstanceBeforeHit
        {
            add => HookEndpointManager.Add<Delegates.OnHitInstanceBeforeHit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnHitInstanceBeforeHit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnHitInstanceBeforeHit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnHitInstanceBeforeHit", false), value);
        }

        public static event Delegates.OnDrawBlackBorders_WithArgs OnDrawBlackBorders
        {
            add => HookEndpointManager.Add<Delegates.OnDrawBlackBorders_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDrawBlackBorders", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnDrawBlackBorders_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDrawBlackBorders", false), value);
        }

        public static event Delegates.OnEnableEnemy_WithArgs OnEnableEnemy
        {
            add => HookEndpointManager.Add<Delegates.OnEnableEnemy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnEnableEnemy", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnableEnemy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnEnableEnemy", false), value);
        }

        public static event Delegates.OnRecieveDeathEvent_WithArgs OnRecieveDeathEvent
        {
            add => HookEndpointManager.Add<Delegates.OnRecieveDeathEvent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnRecieveDeathEvent", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnRecieveDeathEvent_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnRecieveDeathEvent", false), value);
        }

        public static event Delegates.OnRecordKillForJournal_WithArgs OnRecordKillForJournal
        {
            add => HookEndpointManager.Add<Delegates.OnRecordKillForJournal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnRecordKillForJournal", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnRecordKillForJournal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnRecordKillForJournal", false), value);
        }

        public static event Delegates.SetPlayerBool_WithArgs SetPlayerBool
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerBool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerBool", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerBool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerBool", false), value);
        }

        public static event Delegates.GetPlayerBool_WithArgs GetPlayerBool
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerBool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerBool", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerBool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerBool", false), value);
        }

        public static event Delegates.SetPlayerInt_WithArgs SetPlayerInt
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerInt", false), value);
        }

        public static event Delegates.GetPlayerInt_WithArgs GetPlayerInt
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerInt", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerInt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerInt", false), value);
        }

        public static event Delegates.SetPlayerFloat_WithArgs SetPlayerFloat
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerFloat_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerFloat", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerFloat_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerFloat", false), value);
        }

        public static event Delegates.GetPlayerFloat_WithArgs GetPlayerFloat
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerFloat_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerFloat", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerFloat_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerFloat", false), value);
        }

        public static event Delegates.SetPlayerString_WithArgs SetPlayerString
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerString", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerString", false), value);
        }

        public static event Delegates.GetPlayerString_WithArgs GetPlayerString
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerString", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerString_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerString", false), value);
        }

        public static event Delegates.SetPlayerVector3_WithArgs SetPlayerVector3
        {
            add => HookEndpointManager.Add<Delegates.SetPlayerVector3_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerVector3", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetPlayerVector3_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "SetPlayerVector3", false), value);
        }

        public static event Delegates.GetPlayerVector3_WithArgs GetPlayerVector3
        {
            add => HookEndpointManager.Add<Delegates.GetPlayerVector3_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerVector3", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetPlayerVector3_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetPlayerVector3", false), value);
        }

        public static event Delegates.OnBlueHealth_WithArgs OnBlueHealth
        {
            add => HookEndpointManager.Add<Delegates.OnBlueHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBlueHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnBlueHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBlueHealth", false), value);
        }

        public static event Delegates.OnTakeHealth_WithArgs OnTakeHealth
        {
            add => HookEndpointManager.Add<Delegates.OnTakeHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnTakeHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnTakeHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnTakeHealth", false), value);
        }

        public static event Delegates.OnTakeDamage_WithArgs OnTakeDamage
        {
            add => HookEndpointManager.Add<Delegates.OnTakeDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnTakeDamage", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnTakeDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnTakeDamage", false), value);
        }

        public static event Delegates.AfterTakeDamage_WithArgs AfterTakeDamage
        {
            add => HookEndpointManager.Add<Delegates.AfterTakeDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "AfterTakeDamage", false), value);
            remove => HookEndpointManager.Remove<Delegates.AfterTakeDamage_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "AfterTakeDamage", false), value);
        }

        public static event Delegates.OnBeforePlayerDead_WithArgs OnBeforePlayerDead
        {
            add => HookEndpointManager.Add<Delegates.OnBeforePlayerDead_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBeforePlayerDead", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnBeforePlayerDead_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBeforePlayerDead", false), value);
        }

        public static event Delegates.OnAfterPlayerDead_WithArgs OnAfterPlayerDead
        {
            add => HookEndpointManager.Add<Delegates.OnAfterPlayerDead_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterPlayerDead", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAfterPlayerDead_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterPlayerDead", false), value);
        }

        public static event Delegates.OnAttack_WithArgs OnAttack
        {
            add => HookEndpointManager.Add<Delegates.OnAttack_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAttack", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAttack_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAttack", false), value);
        }

        public static event Delegates.OnDoAttack_WithArgs OnDoAttack
        {
            add => HookEndpointManager.Add<Delegates.OnDoAttack_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDoAttack", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnDoAttack_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDoAttack", false), value);
        }

        public static event Delegates.AfterAttack_WithArgs AfterAttack
        {
            add => HookEndpointManager.Add<Delegates.AfterAttack_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "AfterAttack", false), value);
            remove => HookEndpointManager.Remove<Delegates.AfterAttack_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "AfterAttack", false), value);
        }

        public static event Delegates.OnSlashHit_WithArgs OnSlashHit
        {
            add => HookEndpointManager.Add<Delegates.OnSlashHit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSlashHit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSlashHit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSlashHit", false), value);
        }

        public static event Delegates.OnCharmUpdate_WithArgs OnCharmUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnCharmUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnCharmUpdate", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnCharmUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnCharmUpdate", false), value);
        }

        public static event Delegates.OnHeroUpdate_WithArgs OnHeroUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnHeroUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnHeroUpdate", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnHeroUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnHeroUpdate", false), value);
        }

        public static event Delegates.BeforeAddHealth_WithArgs BeforeAddHealth
        {
            add => HookEndpointManager.Add<Delegates.BeforeAddHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "BeforeAddHealth", false), value);
            remove => HookEndpointManager.Remove<Delegates.BeforeAddHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "BeforeAddHealth", false), value);
        }

        public static event Delegates.OnFocusCost_WithArgs OnFocusCost
        {
            add => HookEndpointManager.Add<Delegates.OnFocusCost_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnFocusCost", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnFocusCost_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnFocusCost", false), value);
        }

        public static event Delegates.OnSoulGain_WithArgs OnSoulGain
        {
            add => HookEndpointManager.Add<Delegates.OnSoulGain_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSoulGain", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSoulGain_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSoulGain", false), value);
        }

        public static event Delegates.DashVelocityChange_WithArgs DashVelocityChange
        {
            add => HookEndpointManager.Add<Delegates.DashVelocityChange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "DashVelocityChange", false), value);
            remove => HookEndpointManager.Remove<Delegates.DashVelocityChange_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "DashVelocityChange", false), value);
        }

        public static event Delegates.OnDashPressed_WithArgs OnDashPressed
        {
            add => HookEndpointManager.Add<Delegates.OnDashPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDashPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnDashPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnDashPressed", false), value);
        }

        public static event Delegates.OnSavegameLoad_WithArgs OnSavegameLoad
        {
            add => HookEndpointManager.Add<Delegates.OnSavegameLoad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameLoad", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSavegameLoad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameLoad", false), value);
        }

        public static event Delegates.OnSavegameSave_WithArgs OnSavegameSave
        {
            add => HookEndpointManager.Add<Delegates.OnSavegameSave_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameSave", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSavegameSave_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameSave", false), value);
        }

        public static event Delegates.OnNewGame_WithArgs OnNewGame
        {
            add => HookEndpointManager.Add<Delegates.OnNewGame_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnNewGame", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnNewGame_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnNewGame", false), value);
        }

        public static event Delegates.OnSavegameClear_WithArgs OnSavegameClear
        {
            add => HookEndpointManager.Add<Delegates.OnSavegameClear_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameClear", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSavegameClear_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSavegameClear", false), value);
        }

        public static event Delegates.OnAfterSaveGameLoad_WithArgs OnAfterSaveGameLoad
        {
            add => HookEndpointManager.Add<Delegates.OnAfterSaveGameLoad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterSaveGameLoad", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAfterSaveGameLoad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterSaveGameLoad", false), value);
        }

        public static event Delegates.OnBeforeSaveGameSave_WithArgs OnBeforeSaveGameSave
        {
            add => HookEndpointManager.Add<Delegates.OnBeforeSaveGameSave_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBeforeSaveGameSave", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnBeforeSaveGameSave_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnBeforeSaveGameSave", false), value);
        }

        public static event Delegates.GetSaveFileName_WithArgs GetSaveFileName
        {
            add => HookEndpointManager.Add<Delegates.GetSaveFileName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetSaveFileName", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetSaveFileName_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetSaveFileName", false), value);
        }

        public static event Delegates.OnAfterSaveGameClear_WithArgs OnAfterSaveGameClear
        {
            add => HookEndpointManager.Add<Delegates.OnAfterSaveGameClear_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterSaveGameClear", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnAfterSaveGameClear_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnAfterSaveGameClear", false), value);
        }

        public static event Delegates.OnSceneChanged_WithArgs OnSceneChanged
        {
            add => HookEndpointManager.Add<Delegates.OnSceneChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSceneChanged", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnSceneChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnSceneChanged", false), value);
        }

        public static event Delegates.BeforeSceneLoad_WithArgs BeforeSceneLoad
        {
            add => HookEndpointManager.Add<Delegates.BeforeSceneLoad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "BeforeSceneLoad", false), value);
            remove => HookEndpointManager.Remove<Delegates.BeforeSceneLoad_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "BeforeSceneLoad", false), value);
        }

        public static event Delegates.GetMod_string_bool_bool_WithArgs GetMod_string_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.GetMod_string_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetMod", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetMod_string_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetMod", false), value);
        }

        public static event Delegates.GetMod_Type_bool_bool_WithArgs GetMod_Type_bool_bool
        {
            add => HookEndpointManager.Add<Delegates.GetMod_Type_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetMod", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetMod_Type_bool_bool_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetMod", false), value);
        }

        public static event Delegates.ModEnabled_ITogglableMod_WithArgs ModEnabled_ITogglableMod
        {
            add => HookEndpointManager.Add<Delegates.ModEnabled_ITogglableMod_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModEnabled_ITogglableMod_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled", false), value);
        }

        public static event Delegates.ModEnabled_string_WithArgs ModEnabled_string
        {
            add => HookEndpointManager.Add<Delegates.ModEnabled_string_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModEnabled_string_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled", false), value);
        }

        public static event Delegates.ModEnabled_Type_WithArgs ModEnabled_Type
        {
            add => HookEndpointManager.Add<Delegates.ModEnabled_Type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.ModEnabled_Type_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "ModEnabled", false), value);
        }

        public static event Delegates.GetAllMods_WithArgs GetAllMods
        {
            add => HookEndpointManager.Add<Delegates.GetAllMods_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetAllMods", false), value);
            remove => HookEndpointManager.Remove<Delegates.GetAllMods_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "GetAllMods", false), value);
        }

        public static event Delegates.OnFinishedLoadingMods_WithArgs OnFinishedLoadingMods
        {
            add => HookEndpointManager.Add<Delegates.OnFinishedLoadingMods_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnFinishedLoadingMods", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnFinishedLoadingMods_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Modding.ModHooks), "OnFinishedLoadingMods", false), value);
        }
    }
}