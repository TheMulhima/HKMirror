namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SendEnemyMessageTrigger class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSendEnemyMessageTrigger
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.SendEnemyMessageTrigger.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.SendEnemyMessageTrigger.orig_Start orig, SendEnemyMessageTrigger self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.SendEnemyMessageTrigger.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.SendEnemyMessageTrigger.orig_FixedUpdate orig, SendEnemyMessageTrigger self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnTriggerStay2D()
        {
            if (!HookedList.Contains("OnTriggerStay2D"))
            {
                HookedList.Add("OnTriggerStay2D");
                On.SendEnemyMessageTrigger.OnTriggerStay2D += OnTriggerStay2D;
            }
        }

        internal static event Delegates.OnTriggerStay2D_BeforeArgs _beforeOnTriggerStay2D;
        internal static event Delegates.OnTriggerStay2D_AfterArgs _afterOnTriggerStay2D;

        private static void OnTriggerStay2D(On.SendEnemyMessageTrigger.orig_OnTriggerStay2D orig,
            SendEnemyMessageTrigger self, Collider2D collision)
        {
            Delegates.Params_OnTriggerStay2D @params = new()
            {
                self = self, collision = collision
            };
            if (_beforeOnTriggerStay2D != null)
                foreach (Delegates.OnTriggerStay2D_BeforeArgs toInvoke in _beforeOnTriggerStay2D.GetInvocationList())
                    try
                    {
                        _beforeOnTriggerStay2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerStay2D != null)
                foreach (Delegates.OnTriggerStay2D_AfterArgs toInvoke in _afterOnTriggerStay2D.GetInvocationList())
                    try
                    {
                        _afterOnTriggerStay2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendEvent()
        {
            if (!HookedList.Contains("SendEvent"))
            {
                HookedList.Add("SendEvent");
                On.SendEnemyMessageTrigger.SendEvent += SendEvent;
            }
        }

        internal static event Delegates.SendEvent_BeforeArgs _beforeSendEvent;
        internal static event Delegates.SendEvent_AfterArgs _afterSendEvent;

        private static void SendEvent(On.SendEnemyMessageTrigger.orig_SendEvent orig, SendEnemyMessageTrigger self,
            GameObject obj)
        {
            Delegates.Params_SendEvent @params = new()
            {
                self = self, obj = obj
            };
            if (_beforeSendEvent != null)
                foreach (Delegates.SendEvent_BeforeArgs toInvoke in _beforeSendEvent.GetInvocationList())
                    try
                    {
                        _beforeSendEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            obj = @params.obj;
            orig(self, obj);
            if (_afterSendEvent != null)
                foreach (Delegates.SendEvent_AfterArgs toInvoke in _afterSendEvent.GetInvocationList())
                    try
                    {
                        _afterSendEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendWalkerGoInDirection()
        {
            if (!HookedList.Contains("SendWalkerGoInDirection"))
            {
                HookedList.Add("SendWalkerGoInDirection");
                On.SendEnemyMessageTrigger.SendWalkerGoInDirection += SendWalkerGoInDirection;
            }
        }

        internal static event Delegates.SendWalkerGoInDirection_BeforeArgs _beforeSendWalkerGoInDirection;
        internal static event Delegates.SendWalkerGoInDirection_AfterArgs _afterSendWalkerGoInDirection;

        private static void SendWalkerGoInDirection(On.SendEnemyMessageTrigger.orig_SendWalkerGoInDirection orig,
            GameObject target, int facing)
        {
            Delegates.Params_SendWalkerGoInDirection @params = new()
            {
                target = target, facing = facing
            };
            if (_beforeSendWalkerGoInDirection != null)
                foreach (Delegates.SendWalkerGoInDirection_BeforeArgs toInvoke in _beforeSendWalkerGoInDirection
                             .GetInvocationList())
                    try
                    {
                        _beforeSendWalkerGoInDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            target = @params.target;
            facing = @params.facing;
            orig(target, facing);
            if (_afterSendWalkerGoInDirection != null)
                foreach (Delegates.SendWalkerGoInDirection_AfterArgs toInvoke in _afterSendWalkerGoInDirection
                             .GetInvocationList())
                    try
                    {
                        _afterSendWalkerGoInDirection.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<SendEnemyMessageTrigger> orig, SendEnemyMessageTrigger self);

        public delegate void OnTriggerStay2D_AfterArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_BeforeArgs(Params_OnTriggerStay2D args);

        public delegate void OnTriggerStay2D_WithArgs(Action<SendEnemyMessageTrigger, Collider2D> orig,
            SendEnemyMessageTrigger self, Collider2D collision);

        public delegate void SendEvent_AfterArgs(Params_SendEvent args);

        public delegate void SendEvent_BeforeArgs(Params_SendEvent args);

        public delegate void SendEvent_WithArgs(Action<SendEnemyMessageTrigger, GameObject> orig,
            SendEnemyMessageTrigger self, GameObject obj);

        public delegate void SendWalkerGoInDirection_AfterArgs(Params_SendWalkerGoInDirection args);

        public delegate void SendWalkerGoInDirection_BeforeArgs(Params_SendWalkerGoInDirection args);

        public delegate void SendWalkerGoInDirection_WithArgs(Action<GameObject, int> orig, GameObject target,
            int facing);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<SendEnemyMessageTrigger> orig, SendEnemyMessageTrigger self);

        public sealed class Params_Start
        {
            public SendEnemyMessageTrigger self;
        }

        public sealed class Params_FixedUpdate
        {
            public SendEnemyMessageTrigger self;
        }

        public sealed class Params_OnTriggerStay2D
        {
            public Collider2D collision;
            public SendEnemyMessageTrigger self;
        }

        public sealed class Params_SendEvent
        {
            public GameObject obj;
            public SendEnemyMessageTrigger self;
        }

        public sealed class Params_SendWalkerGoInDirection
        {
            public int facing;
            public GameObject target;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.OnTriggerStay2D_BeforeArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._beforeOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._beforeOnTriggerStay2D -= value;
        }

        public static event Delegates.SendEvent_BeforeArgs SendEvent
        {
            add
            {
                HookHandler._beforeSendEvent += value;
                HookHandler.HookSendEvent();
            }
            remove => HookHandler._beforeSendEvent -= value;
        }

        public static event Delegates.SendWalkerGoInDirection_BeforeArgs SendWalkerGoInDirection
        {
            add
            {
                HookHandler._beforeSendWalkerGoInDirection += value;
                HookHandler.HookSendWalkerGoInDirection();
            }
            remove => HookHandler._beforeSendWalkerGoInDirection -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.OnTriggerStay2D_AfterArgs OnTriggerStay2D
        {
            add
            {
                HookHandler._afterOnTriggerStay2D += value;
                HookHandler.HookOnTriggerStay2D();
            }
            remove => HookHandler._afterOnTriggerStay2D -= value;
        }

        public static event Delegates.SendEvent_AfterArgs SendEvent
        {
            add
            {
                HookHandler._afterSendEvent += value;
                HookHandler.HookSendEvent();
            }
            remove => HookHandler._afterSendEvent -= value;
        }

        public static event Delegates.SendWalkerGoInDirection_AfterArgs SendWalkerGoInDirection
        {
            add
            {
                HookHandler._afterSendWalkerGoInDirection += value;
                HookHandler.HookSendWalkerGoInDirection();
            }
            remove => HookHandler._afterSendWalkerGoInDirection -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SendEnemyMessageTrigger.hook_Start Start
        {
            add => On.SendEnemyMessageTrigger.Start += value;
            remove => On.SendEnemyMessageTrigger.Start -= value;
        }

        public static event On.SendEnemyMessageTrigger.hook_FixedUpdate FixedUpdate
        {
            add => On.SendEnemyMessageTrigger.FixedUpdate += value;
            remove => On.SendEnemyMessageTrigger.FixedUpdate -= value;
        }

        public static event On.SendEnemyMessageTrigger.hook_OnTriggerStay2D OnTriggerStay2D
        {
            add => On.SendEnemyMessageTrigger.OnTriggerStay2D += value;
            remove => On.SendEnemyMessageTrigger.OnTriggerStay2D -= value;
        }

        public static event On.SendEnemyMessageTrigger.hook_SendEvent SendEvent
        {
            add => On.SendEnemyMessageTrigger.SendEvent += value;
            remove => On.SendEnemyMessageTrigger.SendEvent -= value;
        }

        public static event On.SendEnemyMessageTrigger.hook_SendWalkerGoInDirection SendWalkerGoInDirection
        {
            add => On.SendEnemyMessageTrigger.SendWalkerGoInDirection += value;
            remove => On.SendEnemyMessageTrigger.SendWalkerGoInDirection -= value;
        }
    }
}