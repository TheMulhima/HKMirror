using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuAchievementsList class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuAchievementsList
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_init()
        {
            if (!HookedList.Contains("get_init"))
            {
                HookedList.Add("get_init");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuAchievementsList), "get_init"), get_init);
            }
        }

        internal static event Delegates.get_init_BeforeArgs _beforeget_init;
        internal static event Delegates.get_init_NormalArgs _afterget_init;

        private static bool get_init(Func<MenuAchievementsList, bool> orig, MenuAchievementsList self)
        {
            Delegates.Params_get_init @params = new()
            {
                self = self
            };
            _beforeget_init?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_init != null) retVal = _afterget_init.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_init()
        {
            if (!HookedList.Contains("set_init"))
            {
                HookedList.Add("set_init");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuAchievementsList), "set_init"), set_init);
            }
        }

        internal static event Delegates.set_init_BeforeArgs _beforeset_init;
        internal static event Delegates.set_init_NormalArgs _afterset_init;

        private static void set_init(Action<MenuAchievementsList, bool> orig, MenuAchievementsList self, bool value)
        {
            Delegates.Params_set_init @params = new()
            {
                self = self, value = value
            };
            _beforeset_init?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_init != null) _afterset_init.Invoke(@params);
        }

        internal static void HookAddMenuAchievement()
        {
            if (!HookedList.Contains("AddMenuAchievement"))
            {
                HookedList.Add("AddMenuAchievement");
                On.MenuAchievementsList.AddMenuAchievement += AddMenuAchievement;
            }
        }

        internal static event Delegates.AddMenuAchievement_BeforeArgs _beforeAddMenuAchievement;
        internal static event Delegates.AddMenuAchievement_NormalArgs _afterAddMenuAchievement;

        private static void AddMenuAchievement(On.MenuAchievementsList.orig_AddMenuAchievement orig,
            MenuAchievementsList self, MenuAchievement achievement)
        {
            Delegates.Params_AddMenuAchievement @params = new()
            {
                self = self, achievement = achievement
            };
            _beforeAddMenuAchievement?.Invoke(@params);
            self = @params.self;
            achievement = @params.achievement;
            orig(self, achievement);
            if (_afterAddMenuAchievement != null) _afterAddMenuAchievement.Invoke(@params);
        }

        internal static void HookFindAchievement()
        {
            if (!HookedList.Contains("FindAchievement"))
            {
                HookedList.Add("FindAchievement");
                On.MenuAchievementsList.FindAchievement += FindAchievement;
            }
        }

        internal static event Delegates.FindAchievement_BeforeArgs _beforeFindAchievement;
        internal static event Delegates.FindAchievement_NormalArgs _afterFindAchievement;

        private static MenuAchievement FindAchievement(On.MenuAchievementsList.orig_FindAchievement orig,
            MenuAchievementsList self, string key)
        {
            Delegates.Params_FindAchievement @params = new()
            {
                self = self, key = key
            };
            _beforeFindAchievement?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterFindAchievement != null) retVal = _afterFindAchievement.Invoke(@params);
            return retVal;
        }

        internal static void HookMarkInit()
        {
            if (!HookedList.Contains("MarkInit"))
            {
                HookedList.Add("MarkInit");
                On.MenuAchievementsList.MarkInit += MarkInit;
            }
        }

        internal static event Delegates.MarkInit_BeforeArgs _beforeMarkInit;
        internal static event Delegates.MarkInit_NormalArgs _afterMarkInit;

        private static void MarkInit(On.MenuAchievementsList.orig_MarkInit orig, MenuAchievementsList self)
        {
            Delegates.Params_MarkInit @params = new()
            {
                self = self
            };
            _beforeMarkInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMarkInit != null) _afterMarkInit.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddMenuAchievement_BeforeArgs(Params_AddMenuAchievement args);

        public delegate void AddMenuAchievement_NormalArgs(Params_AddMenuAchievement args);

        public delegate void FindAchievement_BeforeArgs(Params_FindAchievement args);

        public delegate MenuAchievement FindAchievement_NormalArgs(Params_FindAchievement args);

        public delegate void get_init_BeforeArgs(Params_get_init args);

        public delegate bool get_init_NormalArgs(Params_get_init args);

        public delegate void MarkInit_BeforeArgs(Params_MarkInit args);

        public delegate void MarkInit_NormalArgs(Params_MarkInit args);

        public delegate void set_init_BeforeArgs(Params_set_init args);

        public delegate void set_init_NormalArgs(Params_set_init args);

        public sealed class Params_get_init
        {
            public MenuAchievementsList self;
        }

        public sealed class Params_set_init
        {
            public MenuAchievementsList self;
            public bool value;
        }

        public sealed class Params_AddMenuAchievement
        {
            public MenuAchievement achievement;
            public MenuAchievementsList self;
        }

        public sealed class Params_FindAchievement
        {
            public string key;
            public MenuAchievementsList self;
        }

        public sealed class Params_MarkInit
        {
            public MenuAchievementsList self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_init_BeforeArgs get_init
        {
            add
            {
                HookHandler._beforeget_init += value;
                HookHandler.Hookget_init();
            }
            remove => HookHandler._beforeget_init -= value;
        }

        public static event Delegates.set_init_BeforeArgs set_init
        {
            add
            {
                HookHandler._beforeset_init += value;
                HookHandler.Hookset_init();
            }
            remove => HookHandler._beforeset_init -= value;
        }

        public static event Delegates.AddMenuAchievement_BeforeArgs AddMenuAchievement
        {
            add
            {
                HookHandler._beforeAddMenuAchievement += value;
                HookHandler.HookAddMenuAchievement();
            }
            remove => HookHandler._beforeAddMenuAchievement -= value;
        }

        public static event Delegates.FindAchievement_BeforeArgs FindAchievement
        {
            add
            {
                HookHandler._beforeFindAchievement += value;
                HookHandler.HookFindAchievement();
            }
            remove => HookHandler._beforeFindAchievement -= value;
        }

        public static event Delegates.MarkInit_BeforeArgs MarkInit
        {
            add
            {
                HookHandler._beforeMarkInit += value;
                HookHandler.HookMarkInit();
            }
            remove => HookHandler._beforeMarkInit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_init_NormalArgs get_init
        {
            add
            {
                HookHandler._afterget_init += value;
                HookHandler.Hookget_init();
            }
            remove => HookHandler._afterget_init -= value;
        }

        public static event Delegates.set_init_NormalArgs set_init
        {
            add
            {
                HookHandler._afterset_init += value;
                HookHandler.Hookset_init();
            }
            remove => HookHandler._afterset_init -= value;
        }

        public static event Delegates.AddMenuAchievement_NormalArgs AddMenuAchievement
        {
            add
            {
                HookHandler._afterAddMenuAchievement += value;
                HookHandler.HookAddMenuAchievement();
            }
            remove => HookHandler._afterAddMenuAchievement -= value;
        }

        public static event Delegates.FindAchievement_NormalArgs FindAchievement
        {
            add
            {
                HookHandler._afterFindAchievement += value;
                HookHandler.HookFindAchievement();
            }
            remove => HookHandler._afterFindAchievement -= value;
        }

        public static event Delegates.MarkInit_NormalArgs MarkInit
        {
            add
            {
                HookHandler._afterMarkInit += value;
                HookHandler.HookMarkInit();
            }
            remove => HookHandler._afterMarkInit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_init_NormalArgs get_init
        {
            add => HookEndpointManager.Add<Delegates.get_init_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuAchievementsList), "get_init"), value);
            remove => HookEndpointManager.Remove<Delegates.get_init_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuAchievementsList), "get_init"), value);
        }

        public static event Delegates.set_init_NormalArgs set_init
        {
            add => HookEndpointManager.Add<Delegates.set_init_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuAchievementsList), "set_init"), value);
            remove => HookEndpointManager.Remove<Delegates.set_init_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuAchievementsList), "set_init"), value);
        }

        public static event On.MenuAchievementsList.hook_AddMenuAchievement AddMenuAchievement
        {
            add => On.MenuAchievementsList.AddMenuAchievement += value;
            remove => On.MenuAchievementsList.AddMenuAchievement -= value;
        }

        public static event On.MenuAchievementsList.hook_FindAchievement FindAchievement
        {
            add => On.MenuAchievementsList.FindAchievement += value;
            remove => On.MenuAchievementsList.FindAchievement -= value;
        }

        public static event On.MenuAchievementsList.hook_MarkInit MarkInit
        {
            add => On.MenuAchievementsList.MarkInit += value;
            remove => On.MenuAchievementsList.MarkInit -= value;
        }
    }
}