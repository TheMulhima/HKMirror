using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MouseLook2 class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMouseLook2
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<MouseLook2> orig, MouseLook2 self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<MouseLook2> orig, MouseLook2 self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<MouseLook2> orig, MouseLook2 self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookDoMouseLook()
        {
            if (!HookedList.Contains("DoMouseLook"))
            {
                HookedList.Add("DoMouseLook");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "DoMouseLook"), DoMouseLook);
            }
        }

        internal static event Delegates.DoMouseLook_BeforeArgs _beforeDoMouseLook;
        internal static event Delegates.DoMouseLook_NormalArgs _afterDoMouseLook;

        private static void DoMouseLook(Action<MouseLook2> orig, MouseLook2 self)
        {
            Delegates.Params_DoMouseLook @params = new()
            {
                self = self
            };
            _beforeDoMouseLook?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoMouseLook != null) _afterDoMouseLook.Invoke(@params);
        }

        internal static void HookGetXRotation()
        {
            if (!HookedList.Contains("GetXRotation"))
            {
                HookedList.Add("GetXRotation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "GetXRotation"), GetXRotation);
            }
        }

        internal static event Delegates.GetXRotation_BeforeArgs _beforeGetXRotation;
        internal static event Delegates.GetXRotation_NormalArgs _afterGetXRotation;

        private static float GetXRotation(Func<MouseLook2, float> orig, MouseLook2 self)
        {
            Delegates.Params_GetXRotation @params = new()
            {
                self = self
            };
            _beforeGetXRotation?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetXRotation != null) retVal = _afterGetXRotation.Invoke(@params);
            return retVal;
        }

        internal static void HookGetYRotation()
        {
            if (!HookedList.Contains("GetYRotation"))
            {
                HookedList.Add("GetYRotation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "GetYRotation"), GetYRotation);
            }
        }

        internal static event Delegates.GetYRotation_BeforeArgs _beforeGetYRotation;
        internal static event Delegates.GetYRotation_NormalArgs _afterGetYRotation;

        private static float GetYRotation(Func<MouseLook2, float> orig, MouseLook2 self)
        {
            Delegates.Params_GetYRotation @params = new()
            {
                self = self
            };
            _beforeGetYRotation?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetYRotation != null) retVal = _afterGetYRotation.Invoke(@params);
            return retVal;
        }

        internal static void HookClampAngle()
        {
            if (!HookedList.Contains("ClampAngle"))
            {
                HookedList.Add("ClampAngle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "ClampAngle", false), ClampAngle);
            }
        }

        internal static event Delegates.ClampAngle_BeforeArgs _beforeClampAngle;
        internal static event Delegates.ClampAngle_NormalArgs _afterClampAngle;

        private static float ClampAngle(Func<float, FsmFloat, FsmFloat, float> orig, float angle, FsmFloat min,
            FsmFloat max)
        {
            Delegates.Params_ClampAngle @params = new()
            {
                angle = angle, min = min, max = max
            };
            _beforeClampAngle?.Invoke(@params);
            angle = @params.angle;
            min = @params.min;
            max = @params.max;
            var retVal = orig(angle, min, max);
            if (_afterClampAngle != null) retVal = _afterClampAngle.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ClampAngle_BeforeArgs(Params_ClampAngle args);

        public delegate float ClampAngle_NormalArgs(Params_ClampAngle args);

        public delegate void DoMouseLook_BeforeArgs(Params_DoMouseLook args);

        public delegate void DoMouseLook_NormalArgs(Params_DoMouseLook args);

        public delegate void GetXRotation_BeforeArgs(Params_GetXRotation args);

        public delegate float GetXRotation_NormalArgs(Params_GetXRotation args);

        public delegate void GetYRotation_BeforeArgs(Params_GetYRotation args);

        public delegate float GetYRotation_NormalArgs(Params_GetYRotation args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public MouseLook2 self;
        }

        public sealed class Params_OnEnter
        {
            public MouseLook2 self;
        }

        public sealed class Params_OnUpdate
        {
            public MouseLook2 self;
        }

        public sealed class Params_DoMouseLook
        {
            public MouseLook2 self;
        }

        public sealed class Params_GetXRotation
        {
            public MouseLook2 self;
        }

        public sealed class Params_GetYRotation
        {
            public MouseLook2 self;
        }

        public sealed class Params_ClampAngle
        {
            public float angle;
            public FsmFloat max;
            public FsmFloat min;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoMouseLook_BeforeArgs DoMouseLook
        {
            add
            {
                HookHandler._beforeDoMouseLook += value;
                HookHandler.HookDoMouseLook();
            }
            remove => HookHandler._beforeDoMouseLook -= value;
        }

        public static event Delegates.GetXRotation_BeforeArgs GetXRotation
        {
            add
            {
                HookHandler._beforeGetXRotation += value;
                HookHandler.HookGetXRotation();
            }
            remove => HookHandler._beforeGetXRotation -= value;
        }

        public static event Delegates.GetYRotation_BeforeArgs GetYRotation
        {
            add
            {
                HookHandler._beforeGetYRotation += value;
                HookHandler.HookGetYRotation();
            }
            remove => HookHandler._beforeGetYRotation -= value;
        }

        public static event Delegates.ClampAngle_BeforeArgs ClampAngle
        {
            add
            {
                HookHandler._beforeClampAngle += value;
                HookHandler.HookClampAngle();
            }
            remove => HookHandler._beforeClampAngle -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoMouseLook_NormalArgs DoMouseLook
        {
            add
            {
                HookHandler._afterDoMouseLook += value;
                HookHandler.HookDoMouseLook();
            }
            remove => HookHandler._afterDoMouseLook -= value;
        }

        public static event Delegates.GetXRotation_NormalArgs GetXRotation
        {
            add
            {
                HookHandler._afterGetXRotation += value;
                HookHandler.HookGetXRotation();
            }
            remove => HookHandler._afterGetXRotation -= value;
        }

        public static event Delegates.GetYRotation_NormalArgs GetYRotation
        {
            add
            {
                HookHandler._afterGetYRotation += value;
                HookHandler.HookGetYRotation();
            }
            remove => HookHandler._afterGetYRotation -= value;
        }

        public static event Delegates.ClampAngle_NormalArgs ClampAngle
        {
            add
            {
                HookHandler._afterClampAngle += value;
                HookHandler.HookClampAngle();
            }
            remove => HookHandler._afterClampAngle -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "OnUpdate"), value);
        }

        public static event Delegates.DoMouseLook_NormalArgs DoMouseLook
        {
            add => HookEndpointManager.Add<Delegates.DoMouseLook_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "DoMouseLook"), value);
            remove => HookEndpointManager.Remove<Delegates.DoMouseLook_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "DoMouseLook"), value);
        }

        public static event Delegates.GetXRotation_NormalArgs GetXRotation
        {
            add => HookEndpointManager.Add<Delegates.GetXRotation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "GetXRotation"), value);
            remove => HookEndpointManager.Remove<Delegates.GetXRotation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "GetXRotation"), value);
        }

        public static event Delegates.GetYRotation_NormalArgs GetYRotation
        {
            add => HookEndpointManager.Add<Delegates.GetYRotation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "GetYRotation"), value);
            remove => HookEndpointManager.Remove<Delegates.GetYRotation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "GetYRotation"), value);
        }

        public static event Delegates.ClampAngle_NormalArgs ClampAngle
        {
            add => HookEndpointManager.Add<Delegates.ClampAngle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "ClampAngle", false), value);
            remove => HookEndpointManager.Remove<Delegates.ClampAngle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseLook2), "ClampAngle", false), value);
        }
    }
}