namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CreditsHelper class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCreditsHelper
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CreditsHelper.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.CreditsHelper.orig_Start orig, CreditsHelper self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookBeginCredits()
        {
            if (!HookedList.Contains("BeginCredits"))
            {
                HookedList.Add("BeginCredits");
                On.CreditsHelper.BeginCredits += BeginCredits;
            }
        }

        internal static event Delegates.BeginCredits_BeforeArgs _beforeBeginCredits;
        internal static event Delegates.BeginCredits_NormalArgs _afterBeginCredits;

        private static void BeginCredits(On.CreditsHelper.orig_BeginCredits orig, CreditsHelper self)
        {
            Delegates.Params_BeginCredits @params = new()
            {
                self = self
            };
            _beforeBeginCredits?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBeginCredits != null) _afterBeginCredits.Invoke(@params);
        }

        internal static void HookShouldStopHere()
        {
            if (!HookedList.Contains("ShouldStopHere"))
            {
                HookedList.Add("ShouldStopHere");
                On.CreditsHelper.ShouldStopHere += ShouldStopHere;
            }
        }

        internal static event Delegates.ShouldStopHere_BeforeArgs _beforeShouldStopHere;
        internal static event Delegates.ShouldStopHere_NormalArgs _afterShouldStopHere;

        private static void ShouldStopHere(On.CreditsHelper.orig_ShouldStopHere orig, CreditsHelper self)
        {
            Delegates.Params_ShouldStopHere @params = new()
            {
                self = self
            };
            _beforeShouldStopHere?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShouldStopHere != null) _afterShouldStopHere.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BeginCredits_BeforeArgs(Params_BeginCredits args);

        public delegate void BeginCredits_NormalArgs(Params_BeginCredits args);

        public delegate void ShouldStopHere_BeforeArgs(Params_ShouldStopHere args);

        public delegate void ShouldStopHere_NormalArgs(Params_ShouldStopHere args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public CreditsHelper self;
        }

        public sealed class Params_BeginCredits
        {
            public CreditsHelper self;
        }

        public sealed class Params_ShouldStopHere
        {
            public CreditsHelper self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.BeginCredits_BeforeArgs BeginCredits
        {
            add
            {
                HookHandler._beforeBeginCredits += value;
                HookHandler.HookBeginCredits();
            }
            remove => HookHandler._beforeBeginCredits -= value;
        }

        public static event Delegates.ShouldStopHere_BeforeArgs ShouldStopHere
        {
            add
            {
                HookHandler._beforeShouldStopHere += value;
                HookHandler.HookShouldStopHere();
            }
            remove => HookHandler._beforeShouldStopHere -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.BeginCredits_NormalArgs BeginCredits
        {
            add
            {
                HookHandler._afterBeginCredits += value;
                HookHandler.HookBeginCredits();
            }
            remove => HookHandler._afterBeginCredits -= value;
        }

        public static event Delegates.ShouldStopHere_NormalArgs ShouldStopHere
        {
            add
            {
                HookHandler._afterShouldStopHere += value;
                HookHandler.HookShouldStopHere();
            }
            remove => HookHandler._afterShouldStopHere -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CreditsHelper.hook_Start Start
        {
            add => On.CreditsHelper.Start += value;
            remove => On.CreditsHelper.Start -= value;
        }

        public static event On.CreditsHelper.hook_BeginCredits BeginCredits
        {
            add => On.CreditsHelper.BeginCredits += value;
            remove => On.CreditsHelper.BeginCredits -= value;
        }

        public static event On.CreditsHelper.hook_ShouldStopHere ShouldStopHere
        {
            add => On.CreditsHelper.ShouldStopHere += value;
            remove => On.CreditsHelper.ShouldStopHere -= value;
        }
    }
}