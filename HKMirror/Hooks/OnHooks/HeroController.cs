using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HeroController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHeroController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_fallTimer()
        {
            if (!HookedList.Contains("get_fallTimer"))
            {
                HookedList.Add("get_fallTimer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_fallTimer"), get_fallTimer);
            }
        }

        internal static event Delegates.get_fallTimer_BeforeArgs _beforeget_fallTimer;
        internal static event Delegates.get_fallTimer_NormalArgs _afterget_fallTimer;

        private static float get_fallTimer(Func<HeroController, float> orig, HeroController self)
        {
            Delegates.Params_get_fallTimer @params = new()
            {
                self = self
            };
            _beforeget_fallTimer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_fallTimer != null) retVal = _afterget_fallTimer.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_fallTimer()
        {
            if (!HookedList.Contains("set_fallTimer"))
            {
                HookedList.Add("set_fallTimer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_fallTimer"), set_fallTimer);
            }
        }

        internal static event Delegates.set_fallTimer_BeforeArgs _beforeset_fallTimer;
        internal static event Delegates.set_fallTimer_NormalArgs _afterset_fallTimer;

        private static void set_fallTimer(Action<HeroController, float> orig, HeroController self, float value)
        {
            Delegates.Params_set_fallTimer @params = new()
            {
                self = self, value = value
            };
            _beforeset_fallTimer?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_fallTimer != null) _afterset_fallTimer.Invoke(@params);
        }

        internal static void Hookget_geoCounter()
        {
            if (!HookedList.Contains("get_geoCounter"))
            {
                HookedList.Add("get_geoCounter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_geoCounter"), get_geoCounter);
            }
        }

        internal static event Delegates.get_geoCounter_BeforeArgs _beforeget_geoCounter;
        internal static event Delegates.get_geoCounter_NormalArgs _afterget_geoCounter;

        private static GeoCounter get_geoCounter(Func<HeroController, GeoCounter> orig, HeroController self)
        {
            Delegates.Params_get_geoCounter @params = new()
            {
                self = self
            };
            _beforeget_geoCounter?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_geoCounter != null) retVal = _afterget_geoCounter.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_geoCounter()
        {
            if (!HookedList.Contains("set_geoCounter"))
            {
                HookedList.Add("set_geoCounter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_geoCounter"), set_geoCounter);
            }
        }

        internal static event Delegates.set_geoCounter_BeforeArgs _beforeset_geoCounter;
        internal static event Delegates.set_geoCounter_NormalArgs _afterset_geoCounter;

        private static void set_geoCounter(Action<HeroController, GeoCounter> orig, HeroController self,
            GeoCounter value)
        {
            Delegates.Params_set_geoCounter @params = new()
            {
                self = self, value = value
            };
            _beforeset_geoCounter?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_geoCounter != null) _afterset_geoCounter.Invoke(@params);
        }

        internal static void Hookget_proxyFSM()
        {
            if (!HookedList.Contains("get_proxyFSM"))
            {
                HookedList.Add("get_proxyFSM");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_proxyFSM"), get_proxyFSM);
            }
        }

        internal static event Delegates.get_proxyFSM_BeforeArgs _beforeget_proxyFSM;
        internal static event Delegates.get_proxyFSM_NormalArgs _afterget_proxyFSM;

        private static PlayMakerFSM get_proxyFSM(Func<HeroController, PlayMakerFSM> orig, HeroController self)
        {
            Delegates.Params_get_proxyFSM @params = new()
            {
                self = self
            };
            _beforeget_proxyFSM?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_proxyFSM != null) retVal = _afterget_proxyFSM.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_proxyFSM()
        {
            if (!HookedList.Contains("set_proxyFSM"))
            {
                HookedList.Add("set_proxyFSM");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_proxyFSM"), set_proxyFSM);
            }
        }

        internal static event Delegates.set_proxyFSM_BeforeArgs _beforeset_proxyFSM;
        internal static event Delegates.set_proxyFSM_NormalArgs _afterset_proxyFSM;

        private static void set_proxyFSM(Action<HeroController, PlayMakerFSM> orig, HeroController self,
            PlayMakerFSM value)
        {
            Delegates.Params_set_proxyFSM @params = new()
            {
                self = self, value = value
            };
            _beforeset_proxyFSM?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_proxyFSM != null) _afterset_proxyFSM.Invoke(@params);
        }

        internal static void Hookget_sceneEntryGate()
        {
            if (!HookedList.Contains("get_sceneEntryGate"))
            {
                HookedList.Add("get_sceneEntryGate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_sceneEntryGate"),
                    get_sceneEntryGate);
            }
        }

        internal static event Delegates.get_sceneEntryGate_BeforeArgs _beforeget_sceneEntryGate;
        internal static event Delegates.get_sceneEntryGate_NormalArgs _afterget_sceneEntryGate;

        private static TransitionPoint get_sceneEntryGate(Func<HeroController, TransitionPoint> orig,
            HeroController self)
        {
            Delegates.Params_get_sceneEntryGate @params = new()
            {
                self = self
            };
            _beforeget_sceneEntryGate?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_sceneEntryGate != null) retVal = _afterget_sceneEntryGate.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_sceneEntryGate()
        {
            if (!HookedList.Contains("set_sceneEntryGate"))
            {
                HookedList.Add("set_sceneEntryGate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_sceneEntryGate"),
                    set_sceneEntryGate);
            }
        }

        internal static event Delegates.set_sceneEntryGate_BeforeArgs _beforeset_sceneEntryGate;
        internal static event Delegates.set_sceneEntryGate_NormalArgs _afterset_sceneEntryGate;

        private static void set_sceneEntryGate(Action<HeroController, TransitionPoint> orig, HeroController self,
            TransitionPoint value)
        {
            Delegates.Params_set_sceneEntryGate @params = new()
            {
                self = self, value = value
            };
            _beforeset_sceneEntryGate?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_sceneEntryGate != null) _afterset_sceneEntryGate.Invoke(@params);
        }

        internal static void Hookget_IsDreamReturning()
        {
            if (!HookedList.Contains("get_IsDreamReturning"))
            {
                HookedList.Add("get_IsDreamReturning");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_IsDreamReturning"),
                    get_IsDreamReturning);
            }
        }

        internal static event Delegates.get_IsDreamReturning_BeforeArgs _beforeget_IsDreamReturning;
        internal static event Delegates.get_IsDreamReturning_NormalArgs _afterget_IsDreamReturning;

        private static bool get_IsDreamReturning(Func<HeroController, bool> orig, HeroController self)
        {
            Delegates.Params_get_IsDreamReturning @params = new()
            {
                self = self
            };
            _beforeget_IsDreamReturning?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsDreamReturning != null) retVal = _afterget_IsDreamReturning.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_NormalArgs _afterget_instance;

        private static HeroController get_instance(Func<HeroController> orig)
        {
            _beforeget_instance?.Invoke();
            var retVal = orig();
            if (_afterget_instance != null) retVal = _afterget_instance.Invoke();
            return retVal;
        }

        internal static void Hookget_SilentInstance()
        {
            if (!HookedList.Contains("get_SilentInstance"))
            {
                HookedList.Add("get_SilentInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_SilentInstance", false),
                    get_SilentInstance);
            }
        }

        internal static event Delegates.get_SilentInstance_BeforeArgs _beforeget_SilentInstance;
        internal static event Delegates.get_SilentInstance_NormalArgs _afterget_SilentInstance;

        private static HeroController get_SilentInstance(Func<HeroController> orig)
        {
            _beforeget_SilentInstance?.Invoke();
            var retVal = orig();
            if (_afterget_SilentInstance != null) retVal = _afterget_SilentInstance.Invoke();
            return retVal;
        }

        internal static void Hookget_UnsafeInstance()
        {
            if (!HookedList.Contains("get_UnsafeInstance"))
            {
                HookedList.Add("get_UnsafeInstance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_UnsafeInstance", false),
                    get_UnsafeInstance);
            }
        }

        internal static event Delegates.get_UnsafeInstance_BeforeArgs _beforeget_UnsafeInstance;
        internal static event Delegates.get_UnsafeInstance_NormalArgs _afterget_UnsafeInstance;

        private static HeroController get_UnsafeInstance(Func<HeroController> orig)
        {
            _beforeget_UnsafeInstance?.Invoke();
            var retVal = orig();
            if (_afterget_UnsafeInstance != null) retVal = _afterget_UnsafeInstance.Invoke();
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.HeroController.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.HeroController.orig_Awake orig, HeroController self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.HeroController.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.HeroController.orig_Start orig, HeroController self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.HeroController.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_NormalArgs _afterSceneInit;

        private static void SceneInit(On.HeroController.orig_SceneInit orig, HeroController self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            _beforeSceneInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSceneInit != null) _afterSceneInit.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.HeroController.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.HeroController.orig_Update orig, HeroController self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.HeroController.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_NormalArgs _afterFixedUpdate;

        private static void FixedUpdate(On.HeroController.orig_FixedUpdate orig, HeroController self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            _beforeFixedUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null) _afterFixedUpdate.Invoke(@params);
        }

        internal static void HookUpdate10()
        {
            if (!HookedList.Contains("Update10"))
            {
                HookedList.Add("Update10");
                On.HeroController.Update10 += Update10;
            }
        }

        internal static event Delegates.Update10_BeforeArgs _beforeUpdate10;
        internal static event Delegates.Update10_NormalArgs _afterUpdate10;

        private static void Update10(On.HeroController.orig_Update10 orig, HeroController self)
        {
            Delegates.Params_Update10 @params = new()
            {
                self = self
            };
            _beforeUpdate10?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate10 != null) _afterUpdate10.Invoke(@params);
        }

        internal static void HookOnLevelUnload()
        {
            if (!HookedList.Contains("OnLevelUnload"))
            {
                HookedList.Add("OnLevelUnload");
                On.HeroController.OnLevelUnload += OnLevelUnload;
            }
        }

        internal static event Delegates.OnLevelUnload_BeforeArgs _beforeOnLevelUnload;
        internal static event Delegates.OnLevelUnload_NormalArgs _afterOnLevelUnload;

        private static void OnLevelUnload(On.HeroController.orig_OnLevelUnload orig, HeroController self)
        {
            Delegates.Params_OnLevelUnload @params = new()
            {
                self = self
            };
            _beforeOnLevelUnload?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnLevelUnload != null) _afterOnLevelUnload.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.HeroController.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.HeroController.orig_OnDisable orig, HeroController self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookMove()
        {
            if (!HookedList.Contains("Move"))
            {
                HookedList.Add("Move");
                On.HeroController.Move += Move;
            }
        }

        internal static event Delegates.Move_BeforeArgs _beforeMove;
        internal static event Delegates.Move_NormalArgs _afterMove;

        private static void Move(On.HeroController.orig_Move orig, HeroController self, float move_direction)
        {
            Delegates.Params_Move @params = new()
            {
                self = self, move_direction = move_direction
            };
            _beforeMove?.Invoke(@params);
            self = @params.self;
            move_direction = @params.move_direction;
            orig(self, move_direction);
            if (_afterMove != null) _afterMove.Invoke(@params);
        }

        internal static void HookJump()
        {
            if (!HookedList.Contains("Jump"))
            {
                HookedList.Add("Jump");
                On.HeroController.Jump += Jump;
            }
        }

        internal static event Delegates.Jump_BeforeArgs _beforeJump;
        internal static event Delegates.Jump_NormalArgs _afterJump;

        private static void Jump(On.HeroController.orig_Jump orig, HeroController self)
        {
            Delegates.Params_Jump @params = new()
            {
                self = self
            };
            _beforeJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterJump != null) _afterJump.Invoke(@params);
        }

        internal static void HookDoubleJump()
        {
            if (!HookedList.Contains("DoubleJump"))
            {
                HookedList.Add("DoubleJump");
                On.HeroController.DoubleJump += DoubleJump;
            }
        }

        internal static event Delegates.DoubleJump_BeforeArgs _beforeDoubleJump;
        internal static event Delegates.DoubleJump_NormalArgs _afterDoubleJump;

        private static void DoubleJump(On.HeroController.orig_DoubleJump orig, HeroController self)
        {
            Delegates.Params_DoubleJump @params = new()
            {
                self = self
            };
            _beforeDoubleJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoubleJump != null) _afterDoubleJump.Invoke(@params);
        }

        internal static void HookAttack()
        {
            if (!HookedList.Contains("Attack"))
            {
                HookedList.Add("Attack");
                On.HeroController.Attack += Attack;
            }
        }

        internal static event Delegates.Attack_BeforeArgs _beforeAttack;
        internal static event Delegates.Attack_NormalArgs _afterAttack;

        private static void Attack(On.HeroController.orig_Attack orig, HeroController self, AttackDirection attackDir)
        {
            Delegates.Params_Attack @params = new()
            {
                self = self, attackDir = attackDir
            };
            _beforeAttack?.Invoke(@params);
            self = @params.self;
            attackDir = @params.attackDir;
            orig(self, attackDir);
            if (_afterAttack != null) _afterAttack.Invoke(@params);
        }

        internal static void HookDash()
        {
            if (!HookedList.Contains("Dash"))
            {
                HookedList.Add("Dash");
                On.HeroController.Dash += Dash;
            }
        }

        internal static event Delegates.Dash_BeforeArgs _beforeDash;
        internal static event Delegates.Dash_NormalArgs _afterDash;

        private static void Dash(On.HeroController.orig_Dash orig, HeroController self)
        {
            Delegates.Params_Dash @params = new()
            {
                self = self
            };
            _beforeDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDash != null) _afterDash.Invoke(@params);
        }

        internal static void HookBackDash()
        {
            if (!HookedList.Contains("BackDash"))
            {
                HookedList.Add("BackDash");
                On.HeroController.BackDash += BackDash;
            }
        }

        internal static event Delegates.BackDash_BeforeArgs _beforeBackDash;
        internal static event Delegates.BackDash_NormalArgs _afterBackDash;

        private static void BackDash(On.HeroController.orig_BackDash orig, HeroController self)
        {
            Delegates.Params_BackDash @params = new()
            {
                self = self
            };
            _beforeBackDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackDash != null) _afterBackDash.Invoke(@params);
        }

        internal static void HookShadowDash()
        {
            if (!HookedList.Contains("ShadowDash"))
            {
                HookedList.Add("ShadowDash");
                On.HeroController.ShadowDash += ShadowDash;
            }
        }

        internal static event Delegates.ShadowDash_BeforeArgs _beforeShadowDash;
        internal static event Delegates.ShadowDash_NormalArgs _afterShadowDash;

        private static void ShadowDash(On.HeroController.orig_ShadowDash orig, HeroController self)
        {
            Delegates.Params_ShadowDash @params = new()
            {
                self = self
            };
            _beforeShadowDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShadowDash != null) _afterShadowDash.Invoke(@params);
        }

        internal static void HookSuperDash()
        {
            if (!HookedList.Contains("SuperDash"))
            {
                HookedList.Add("SuperDash");
                On.HeroController.SuperDash += SuperDash;
            }
        }

        internal static event Delegates.SuperDash_BeforeArgs _beforeSuperDash;
        internal static event Delegates.SuperDash_NormalArgs _afterSuperDash;

        private static void SuperDash(On.HeroController.orig_SuperDash orig, HeroController self)
        {
            Delegates.Params_SuperDash @params = new()
            {
                self = self
            };
            _beforeSuperDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSuperDash != null) _afterSuperDash.Invoke(@params);
        }

        internal static void HookFaceRight()
        {
            if (!HookedList.Contains("FaceRight"))
            {
                HookedList.Add("FaceRight");
                On.HeroController.FaceRight += FaceRight;
            }
        }

        internal static event Delegates.FaceRight_BeforeArgs _beforeFaceRight;
        internal static event Delegates.FaceRight_NormalArgs _afterFaceRight;

        private static void FaceRight(On.HeroController.orig_FaceRight orig, HeroController self)
        {
            Delegates.Params_FaceRight @params = new()
            {
                self = self
            };
            _beforeFaceRight?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFaceRight != null) _afterFaceRight.Invoke(@params);
        }

        internal static void HookFaceLeft()
        {
            if (!HookedList.Contains("FaceLeft"))
            {
                HookedList.Add("FaceLeft");
                On.HeroController.FaceLeft += FaceLeft;
            }
        }

        internal static event Delegates.FaceLeft_BeforeArgs _beforeFaceLeft;
        internal static event Delegates.FaceLeft_NormalArgs _afterFaceLeft;

        private static void FaceLeft(On.HeroController.orig_FaceLeft orig, HeroController self)
        {
            Delegates.Params_FaceLeft @params = new()
            {
                self = self
            };
            _beforeFaceLeft?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFaceLeft != null) _afterFaceLeft.Invoke(@params);
        }

        internal static void HookStartMPDrain()
        {
            if (!HookedList.Contains("StartMPDrain"))
            {
                HookedList.Add("StartMPDrain");
                On.HeroController.StartMPDrain += StartMPDrain;
            }
        }

        internal static event Delegates.StartMPDrain_BeforeArgs _beforeStartMPDrain;
        internal static event Delegates.StartMPDrain_NormalArgs _afterStartMPDrain;

        private static void StartMPDrain(On.HeroController.orig_StartMPDrain orig, HeroController self, float time)
        {
            Delegates.Params_StartMPDrain @params = new()
            {
                self = self, time = time
            };
            _beforeStartMPDrain?.Invoke(@params);
            self = @params.self;
            time = @params.time;
            orig(self, time);
            if (_afterStartMPDrain != null) _afterStartMPDrain.Invoke(@params);
        }

        internal static void HookStopMPDrain()
        {
            if (!HookedList.Contains("StopMPDrain"))
            {
                HookedList.Add("StopMPDrain");
                On.HeroController.StopMPDrain += StopMPDrain;
            }
        }

        internal static event Delegates.StopMPDrain_BeforeArgs _beforeStopMPDrain;
        internal static event Delegates.StopMPDrain_NormalArgs _afterStopMPDrain;

        private static void StopMPDrain(On.HeroController.orig_StopMPDrain orig, HeroController self)
        {
            Delegates.Params_StopMPDrain @params = new()
            {
                self = self
            };
            _beforeStopMPDrain?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopMPDrain != null) _afterStopMPDrain.Invoke(@params);
        }

        internal static void HookSetBackOnGround()
        {
            if (!HookedList.Contains("SetBackOnGround"))
            {
                HookedList.Add("SetBackOnGround");
                On.HeroController.SetBackOnGround += SetBackOnGround;
            }
        }

        internal static event Delegates.SetBackOnGround_BeforeArgs _beforeSetBackOnGround;
        internal static event Delegates.SetBackOnGround_NormalArgs _afterSetBackOnGround;

        private static void SetBackOnGround(On.HeroController.orig_SetBackOnGround orig, HeroController self)
        {
            Delegates.Params_SetBackOnGround @params = new()
            {
                self = self
            };
            _beforeSetBackOnGround?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetBackOnGround != null) _afterSetBackOnGround.Invoke(@params);
        }

        internal static void HookSetStartWithWallslide()
        {
            if (!HookedList.Contains("SetStartWithWallslide"))
            {
                HookedList.Add("SetStartWithWallslide");
                On.HeroController.SetStartWithWallslide += SetStartWithWallslide;
            }
        }

        internal static event Delegates.SetStartWithWallslide_BeforeArgs _beforeSetStartWithWallslide;
        internal static event Delegates.SetStartWithWallslide_NormalArgs _afterSetStartWithWallslide;

        private static void SetStartWithWallslide(On.HeroController.orig_SetStartWithWallslide orig,
            HeroController self)
        {
            Delegates.Params_SetStartWithWallslide @params = new()
            {
                self = self
            };
            _beforeSetStartWithWallslide?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetStartWithWallslide != null) _afterSetStartWithWallslide.Invoke(@params);
        }

        internal static void HookSetStartWithJump()
        {
            if (!HookedList.Contains("SetStartWithJump"))
            {
                HookedList.Add("SetStartWithJump");
                On.HeroController.SetStartWithJump += SetStartWithJump;
            }
        }

        internal static event Delegates.SetStartWithJump_BeforeArgs _beforeSetStartWithJump;
        internal static event Delegates.SetStartWithJump_NormalArgs _afterSetStartWithJump;

        private static void SetStartWithJump(On.HeroController.orig_SetStartWithJump orig, HeroController self)
        {
            Delegates.Params_SetStartWithJump @params = new()
            {
                self = self
            };
            _beforeSetStartWithJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetStartWithJump != null) _afterSetStartWithJump.Invoke(@params);
        }

        internal static void HookSetStartWithFullJump()
        {
            if (!HookedList.Contains("SetStartWithFullJump"))
            {
                HookedList.Add("SetStartWithFullJump");
                On.HeroController.SetStartWithFullJump += SetStartWithFullJump;
            }
        }

        internal static event Delegates.SetStartWithFullJump_BeforeArgs _beforeSetStartWithFullJump;
        internal static event Delegates.SetStartWithFullJump_NormalArgs _afterSetStartWithFullJump;

        private static void SetStartWithFullJump(On.HeroController.orig_SetStartWithFullJump orig, HeroController self)
        {
            Delegates.Params_SetStartWithFullJump @params = new()
            {
                self = self
            };
            _beforeSetStartWithFullJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetStartWithFullJump != null) _afterSetStartWithFullJump.Invoke(@params);
        }

        internal static void HookSetStartWithDash()
        {
            if (!HookedList.Contains("SetStartWithDash"))
            {
                HookedList.Add("SetStartWithDash");
                On.HeroController.SetStartWithDash += SetStartWithDash;
            }
        }

        internal static event Delegates.SetStartWithDash_BeforeArgs _beforeSetStartWithDash;
        internal static event Delegates.SetStartWithDash_NormalArgs _afterSetStartWithDash;

        private static void SetStartWithDash(On.HeroController.orig_SetStartWithDash orig, HeroController self)
        {
            Delegates.Params_SetStartWithDash @params = new()
            {
                self = self
            };
            _beforeSetStartWithDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetStartWithDash != null) _afterSetStartWithDash.Invoke(@params);
        }

        internal static void HookSetStartWithAttack()
        {
            if (!HookedList.Contains("SetStartWithAttack"))
            {
                HookedList.Add("SetStartWithAttack");
                On.HeroController.SetStartWithAttack += SetStartWithAttack;
            }
        }

        internal static event Delegates.SetStartWithAttack_BeforeArgs _beforeSetStartWithAttack;
        internal static event Delegates.SetStartWithAttack_NormalArgs _afterSetStartWithAttack;

        private static void SetStartWithAttack(On.HeroController.orig_SetStartWithAttack orig, HeroController self)
        {
            Delegates.Params_SetStartWithAttack @params = new()
            {
                self = self
            };
            _beforeSetStartWithAttack?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetStartWithAttack != null) _afterSetStartWithAttack.Invoke(@params);
        }

        internal static void HookSetSuperDashExit()
        {
            if (!HookedList.Contains("SetSuperDashExit"))
            {
                HookedList.Add("SetSuperDashExit");
                On.HeroController.SetSuperDashExit += SetSuperDashExit;
            }
        }

        internal static event Delegates.SetSuperDashExit_BeforeArgs _beforeSetSuperDashExit;
        internal static event Delegates.SetSuperDashExit_NormalArgs _afterSetSuperDashExit;

        private static void SetSuperDashExit(On.HeroController.orig_SetSuperDashExit orig, HeroController self)
        {
            Delegates.Params_SetSuperDashExit @params = new()
            {
                self = self
            };
            _beforeSetSuperDashExit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetSuperDashExit != null) _afterSetSuperDashExit.Invoke(@params);
        }

        internal static void HookSetQuakeExit()
        {
            if (!HookedList.Contains("SetQuakeExit"))
            {
                HookedList.Add("SetQuakeExit");
                On.HeroController.SetQuakeExit += SetQuakeExit;
            }
        }

        internal static event Delegates.SetQuakeExit_BeforeArgs _beforeSetQuakeExit;
        internal static event Delegates.SetQuakeExit_NormalArgs _afterSetQuakeExit;

        private static void SetQuakeExit(On.HeroController.orig_SetQuakeExit orig, HeroController self)
        {
            Delegates.Params_SetQuakeExit @params = new()
            {
                self = self
            };
            _beforeSetQuakeExit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetQuakeExit != null) _afterSetQuakeExit.Invoke(@params);
        }

        internal static void HookSetTakeNoDamage()
        {
            if (!HookedList.Contains("SetTakeNoDamage"))
            {
                HookedList.Add("SetTakeNoDamage");
                On.HeroController.SetTakeNoDamage += SetTakeNoDamage;
            }
        }

        internal static event Delegates.SetTakeNoDamage_BeforeArgs _beforeSetTakeNoDamage;
        internal static event Delegates.SetTakeNoDamage_NormalArgs _afterSetTakeNoDamage;

        private static void SetTakeNoDamage(On.HeroController.orig_SetTakeNoDamage orig, HeroController self)
        {
            Delegates.Params_SetTakeNoDamage @params = new()
            {
                self = self
            };
            _beforeSetTakeNoDamage?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetTakeNoDamage != null) _afterSetTakeNoDamage.Invoke(@params);
        }

        internal static void HookEndTakeNoDamage()
        {
            if (!HookedList.Contains("EndTakeNoDamage"))
            {
                HookedList.Add("EndTakeNoDamage");
                On.HeroController.EndTakeNoDamage += EndTakeNoDamage;
            }
        }

        internal static event Delegates.EndTakeNoDamage_BeforeArgs _beforeEndTakeNoDamage;
        internal static event Delegates.EndTakeNoDamage_NormalArgs _afterEndTakeNoDamage;

        private static void EndTakeNoDamage(On.HeroController.orig_EndTakeNoDamage orig, HeroController self)
        {
            Delegates.Params_EndTakeNoDamage @params = new()
            {
                self = self
            };
            _beforeEndTakeNoDamage?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEndTakeNoDamage != null) _afterEndTakeNoDamage.Invoke(@params);
        }

        internal static void HookSetHeroParent()
        {
            if (!HookedList.Contains("SetHeroParent"))
            {
                HookedList.Add("SetHeroParent");
                On.HeroController.SetHeroParent += SetHeroParent;
            }
        }

        internal static event Delegates.SetHeroParent_BeforeArgs _beforeSetHeroParent;
        internal static event Delegates.SetHeroParent_NormalArgs _afterSetHeroParent;

        private static void SetHeroParent(On.HeroController.orig_SetHeroParent orig, HeroController self,
            Transform newParent)
        {
            Delegates.Params_SetHeroParent @params = new()
            {
                self = self, newParent = newParent
            };
            _beforeSetHeroParent?.Invoke(@params);
            self = @params.self;
            newParent = @params.newParent;
            orig(self, newParent);
            if (_afterSetHeroParent != null) _afterSetHeroParent.Invoke(@params);
        }

        internal static void HookIsSwimming()
        {
            if (!HookedList.Contains("IsSwimming"))
            {
                HookedList.Add("IsSwimming");
                On.HeroController.IsSwimming += IsSwimming;
            }
        }

        internal static event Delegates.IsSwimming_BeforeArgs _beforeIsSwimming;
        internal static event Delegates.IsSwimming_NormalArgs _afterIsSwimming;

        private static void IsSwimming(On.HeroController.orig_IsSwimming orig, HeroController self)
        {
            Delegates.Params_IsSwimming @params = new()
            {
                self = self
            };
            _beforeIsSwimming?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterIsSwimming != null) _afterIsSwimming.Invoke(@params);
        }

        internal static void HookNotSwimming()
        {
            if (!HookedList.Contains("NotSwimming"))
            {
                HookedList.Add("NotSwimming");
                On.HeroController.NotSwimming += NotSwimming;
            }
        }

        internal static event Delegates.NotSwimming_BeforeArgs _beforeNotSwimming;
        internal static event Delegates.NotSwimming_NormalArgs _afterNotSwimming;

        private static void NotSwimming(On.HeroController.orig_NotSwimming orig, HeroController self)
        {
            Delegates.Params_NotSwimming @params = new()
            {
                self = self
            };
            _beforeNotSwimming?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterNotSwimming != null) _afterNotSwimming.Invoke(@params);
        }

        internal static void HookEnableRenderer()
        {
            if (!HookedList.Contains("EnableRenderer"))
            {
                HookedList.Add("EnableRenderer");
                On.HeroController.EnableRenderer += EnableRenderer;
            }
        }

        internal static event Delegates.EnableRenderer_BeforeArgs _beforeEnableRenderer;
        internal static event Delegates.EnableRenderer_NormalArgs _afterEnableRenderer;

        private static void EnableRenderer(On.HeroController.orig_EnableRenderer orig, HeroController self)
        {
            Delegates.Params_EnableRenderer @params = new()
            {
                self = self
            };
            _beforeEnableRenderer?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnableRenderer != null) _afterEnableRenderer.Invoke(@params);
        }

        internal static void HookResetAirMoves()
        {
            if (!HookedList.Contains("ResetAirMoves"))
            {
                HookedList.Add("ResetAirMoves");
                On.HeroController.ResetAirMoves += ResetAirMoves;
            }
        }

        internal static event Delegates.ResetAirMoves_BeforeArgs _beforeResetAirMoves;
        internal static event Delegates.ResetAirMoves_NormalArgs _afterResetAirMoves;

        private static void ResetAirMoves(On.HeroController.orig_ResetAirMoves orig, HeroController self)
        {
            Delegates.Params_ResetAirMoves @params = new()
            {
                self = self
            };
            _beforeResetAirMoves?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAirMoves != null) _afterResetAirMoves.Invoke(@params);
        }

        internal static void HookSetConveyorSpeed()
        {
            if (!HookedList.Contains("SetConveyorSpeed"))
            {
                HookedList.Add("SetConveyorSpeed");
                On.HeroController.SetConveyorSpeed += SetConveyorSpeed;
            }
        }

        internal static event Delegates.SetConveyorSpeed_BeforeArgs _beforeSetConveyorSpeed;
        internal static event Delegates.SetConveyorSpeed_NormalArgs _afterSetConveyorSpeed;

        private static void SetConveyorSpeed(On.HeroController.orig_SetConveyorSpeed orig, HeroController self,
            float speed)
        {
            Delegates.Params_SetConveyorSpeed @params = new()
            {
                self = self, speed = speed
            };
            _beforeSetConveyorSpeed?.Invoke(@params);
            self = @params.self;
            speed = @params.speed;
            orig(self, speed);
            if (_afterSetConveyorSpeed != null) _afterSetConveyorSpeed.Invoke(@params);
        }

        internal static void HookSetConveyorSpeedV()
        {
            if (!HookedList.Contains("SetConveyorSpeedV"))
            {
                HookedList.Add("SetConveyorSpeedV");
                On.HeroController.SetConveyorSpeedV += SetConveyorSpeedV;
            }
        }

        internal static event Delegates.SetConveyorSpeedV_BeforeArgs _beforeSetConveyorSpeedV;
        internal static event Delegates.SetConveyorSpeedV_NormalArgs _afterSetConveyorSpeedV;

        private static void SetConveyorSpeedV(On.HeroController.orig_SetConveyorSpeedV orig, HeroController self,
            float speed)
        {
            Delegates.Params_SetConveyorSpeedV @params = new()
            {
                self = self, speed = speed
            };
            _beforeSetConveyorSpeedV?.Invoke(@params);
            self = @params.self;
            speed = @params.speed;
            orig(self, speed);
            if (_afterSetConveyorSpeedV != null) _afterSetConveyorSpeedV.Invoke(@params);
        }

        internal static void HookEnterWithoutInput()
        {
            if (!HookedList.Contains("EnterWithoutInput"))
            {
                HookedList.Add("EnterWithoutInput");
                On.HeroController.EnterWithoutInput += EnterWithoutInput;
            }
        }

        internal static event Delegates.EnterWithoutInput_BeforeArgs _beforeEnterWithoutInput;
        internal static event Delegates.EnterWithoutInput_NormalArgs _afterEnterWithoutInput;

        private static void EnterWithoutInput(On.HeroController.orig_EnterWithoutInput orig, HeroController self,
            bool flag)
        {
            Delegates.Params_EnterWithoutInput @params = new()
            {
                self = self, flag = flag
            };
            _beforeEnterWithoutInput?.Invoke(@params);
            self = @params.self;
            flag = @params.flag;
            orig(self, flag);
            if (_afterEnterWithoutInput != null) _afterEnterWithoutInput.Invoke(@params);
        }

        internal static void HookSetDarkness()
        {
            if (!HookedList.Contains("SetDarkness"))
            {
                HookedList.Add("SetDarkness");
                On.HeroController.SetDarkness += SetDarkness;
            }
        }

        internal static event Delegates.SetDarkness_BeforeArgs _beforeSetDarkness;
        internal static event Delegates.SetDarkness_NormalArgs _afterSetDarkness;

        private static void SetDarkness(On.HeroController.orig_SetDarkness orig, HeroController self, int darkness)
        {
            Delegates.Params_SetDarkness @params = new()
            {
                self = self, darkness = darkness
            };
            _beforeSetDarkness?.Invoke(@params);
            self = @params.self;
            darkness = @params.darkness;
            orig(self, darkness);
            if (_afterSetDarkness != null) _afterSetDarkness.Invoke(@params);
        }

        internal static void HookCancelHeroJump()
        {
            if (!HookedList.Contains("CancelHeroJump"))
            {
                HookedList.Add("CancelHeroJump");
                On.HeroController.CancelHeroJump += CancelHeroJump;
            }
        }

        internal static event Delegates.CancelHeroJump_BeforeArgs _beforeCancelHeroJump;
        internal static event Delegates.CancelHeroJump_NormalArgs _afterCancelHeroJump;

        private static void CancelHeroJump(On.HeroController.orig_CancelHeroJump orig, HeroController self)
        {
            Delegates.Params_CancelHeroJump @params = new()
            {
                self = self
            };
            _beforeCancelHeroJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelHeroJump != null) _afterCancelHeroJump.Invoke(@params);
        }

        internal static void HookCharmUpdate()
        {
            if (!HookedList.Contains("CharmUpdate"))
            {
                HookedList.Add("CharmUpdate");
                On.HeroController.CharmUpdate += CharmUpdate;
            }
        }

        internal static event Delegates.CharmUpdate_BeforeArgs _beforeCharmUpdate;
        internal static event Delegates.CharmUpdate_NormalArgs _afterCharmUpdate;

        private static void CharmUpdate(On.HeroController.orig_CharmUpdate orig, HeroController self)
        {
            Delegates.Params_CharmUpdate @params = new()
            {
                self = self
            };
            _beforeCharmUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCharmUpdate != null) _afterCharmUpdate.Invoke(@params);
        }

        internal static void HookcheckEnvironment()
        {
            if (!HookedList.Contains("checkEnvironment"))
            {
                HookedList.Add("checkEnvironment");
                On.HeroController.checkEnvironment += checkEnvironment;
            }
        }

        internal static event Delegates.checkEnvironment_BeforeArgs _beforecheckEnvironment;
        internal static event Delegates.checkEnvironment_NormalArgs _aftercheckEnvironment;

        private static void checkEnvironment(On.HeroController.orig_checkEnvironment orig, HeroController self)
        {
            Delegates.Params_checkEnvironment @params = new()
            {
                self = self
            };
            _beforecheckEnvironment?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_aftercheckEnvironment != null) _aftercheckEnvironment.Invoke(@params);
        }

        internal static void HookSetBenchRespawn()
        {
            if (!HookedList.Contains("SetBenchRespawn"))
            {
                HookedList.Add("SetBenchRespawn");
                On.HeroController.SetBenchRespawn += SetBenchRespawn;
            }
        }

        internal static event Delegates.SetBenchRespawn_BeforeArgs _beforeSetBenchRespawn;
        internal static event Delegates.SetBenchRespawn_NormalArgs _afterSetBenchRespawn;

        private static void SetBenchRespawn(On.HeroController.orig_SetBenchRespawn orig, HeroController self,
            string spawnMarker, string sceneName, int spawnType, bool facingRight)
        {
            Delegates.Params_SetBenchRespawn @params = new()
            {
                self = self, spawnMarker = spawnMarker, sceneName = sceneName, spawnType = spawnType,
                facingRight = facingRight
            };
            _beforeSetBenchRespawn?.Invoke(@params);
            self = @params.self;
            spawnMarker = @params.spawnMarker;
            sceneName = @params.sceneName;
            spawnType = @params.spawnType;
            facingRight = @params.facingRight;
            orig(self, spawnMarker, sceneName, spawnType, facingRight);
            if (_afterSetBenchRespawn != null) _afterSetBenchRespawn.Invoke(@params);
        }

        internal static void HookSetHazardRespawn()
        {
            if (!HookedList.Contains("SetHazardRespawn"))
            {
                HookedList.Add("SetHazardRespawn");
                On.HeroController.SetHazardRespawn += SetHazardRespawn;
            }
        }

        internal static event Delegates.SetHazardRespawn_BeforeArgs _beforeSetHazardRespawn;
        internal static event Delegates.SetHazardRespawn_NormalArgs _afterSetHazardRespawn;

        private static void SetHazardRespawn(On.HeroController.orig_SetHazardRespawn orig, HeroController self,
            Vector3 position, bool facingRight)
        {
            Delegates.Params_SetHazardRespawn @params = new()
            {
                self = self, position = position, facingRight = facingRight
            };
            _beforeSetHazardRespawn?.Invoke(@params);
            self = @params.self;
            position = @params.position;
            facingRight = @params.facingRight;
            orig(self, position, facingRight);
            if (_afterSetHazardRespawn != null) _afterSetHazardRespawn.Invoke(@params);
        }

        internal static void HookAddGeo()
        {
            if (!HookedList.Contains("AddGeo"))
            {
                HookedList.Add("AddGeo");
                On.HeroController.AddGeo += AddGeo;
            }
        }

        internal static event Delegates.AddGeo_BeforeArgs _beforeAddGeo;
        internal static event Delegates.AddGeo_NormalArgs _afterAddGeo;

        private static void AddGeo(On.HeroController.orig_AddGeo orig, HeroController self, int amount)
        {
            Delegates.Params_AddGeo @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddGeo?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddGeo != null) _afterAddGeo.Invoke(@params);
        }

        internal static void HookToZero()
        {
            if (!HookedList.Contains("ToZero"))
            {
                HookedList.Add("ToZero");
                On.HeroController.ToZero += ToZero;
            }
        }

        internal static event Delegates.ToZero_BeforeArgs _beforeToZero;
        internal static event Delegates.ToZero_NormalArgs _afterToZero;

        private static void ToZero(On.HeroController.orig_ToZero orig, HeroController self)
        {
            Delegates.Params_ToZero @params = new()
            {
                self = self
            };
            _beforeToZero?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterToZero != null) _afterToZero.Invoke(@params);
        }

        internal static void HookAddGeoQuietly()
        {
            if (!HookedList.Contains("AddGeoQuietly"))
            {
                HookedList.Add("AddGeoQuietly");
                On.HeroController.AddGeoQuietly += AddGeoQuietly;
            }
        }

        internal static event Delegates.AddGeoQuietly_BeforeArgs _beforeAddGeoQuietly;
        internal static event Delegates.AddGeoQuietly_NormalArgs _afterAddGeoQuietly;

        private static void AddGeoQuietly(On.HeroController.orig_AddGeoQuietly orig, HeroController self, int amount)
        {
            Delegates.Params_AddGeoQuietly @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddGeoQuietly?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddGeoQuietly != null) _afterAddGeoQuietly.Invoke(@params);
        }

        internal static void HookAddGeoToCounter()
        {
            if (!HookedList.Contains("AddGeoToCounter"))
            {
                HookedList.Add("AddGeoToCounter");
                On.HeroController.AddGeoToCounter += AddGeoToCounter;
            }
        }

        internal static event Delegates.AddGeoToCounter_BeforeArgs _beforeAddGeoToCounter;
        internal static event Delegates.AddGeoToCounter_NormalArgs _afterAddGeoToCounter;

        private static void AddGeoToCounter(On.HeroController.orig_AddGeoToCounter orig, HeroController self,
            int amount)
        {
            Delegates.Params_AddGeoToCounter @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddGeoToCounter?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddGeoToCounter != null) _afterAddGeoToCounter.Invoke(@params);
        }

        internal static void HookTakeGeo()
        {
            if (!HookedList.Contains("TakeGeo"))
            {
                HookedList.Add("TakeGeo");
                On.HeroController.TakeGeo += TakeGeo;
            }
        }

        internal static event Delegates.TakeGeo_BeforeArgs _beforeTakeGeo;
        internal static event Delegates.TakeGeo_NormalArgs _afterTakeGeo;

        private static void TakeGeo(On.HeroController.orig_TakeGeo orig, HeroController self, int amount)
        {
            Delegates.Params_TakeGeo @params = new()
            {
                self = self, amount = amount
            };
            _beforeTakeGeo?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeGeo != null) _afterTakeGeo.Invoke(@params);
        }

        internal static void HookUpdateGeo()
        {
            if (!HookedList.Contains("UpdateGeo"))
            {
                HookedList.Add("UpdateGeo");
                On.HeroController.UpdateGeo += UpdateGeo;
            }
        }

        internal static event Delegates.UpdateGeo_BeforeArgs _beforeUpdateGeo;
        internal static event Delegates.UpdateGeo_NormalArgs _afterUpdateGeo;

        private static void UpdateGeo(On.HeroController.orig_UpdateGeo orig, HeroController self)
        {
            Delegates.Params_UpdateGeo @params = new()
            {
                self = self
            };
            _beforeUpdateGeo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateGeo != null) _afterUpdateGeo.Invoke(@params);
        }

        internal static void HookCanInput()
        {
            if (!HookedList.Contains("CanInput"))
            {
                HookedList.Add("CanInput");
                On.HeroController.CanInput += CanInput;
            }
        }

        internal static event Delegates.CanInput_BeforeArgs _beforeCanInput;
        internal static event Delegates.CanInput_NormalArgs _afterCanInput;

        private static bool CanInput(On.HeroController.orig_CanInput orig, HeroController self)
        {
            Delegates.Params_CanInput @params = new()
            {
                self = self
            };
            _beforeCanInput?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanInput != null) retVal = _afterCanInput.Invoke(@params);
            return retVal;
        }

        internal static void HookCanTalk()
        {
            if (!HookedList.Contains("CanTalk"))
            {
                HookedList.Add("CanTalk");
                On.HeroController.CanTalk += CanTalk;
            }
        }

        internal static event Delegates.CanTalk_BeforeArgs _beforeCanTalk;
        internal static event Delegates.CanTalk_NormalArgs _afterCanTalk;

        private static bool CanTalk(On.HeroController.orig_CanTalk orig, HeroController self)
        {
            Delegates.Params_CanTalk @params = new()
            {
                self = self
            };
            _beforeCanTalk?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanTalk != null) retVal = _afterCanTalk.Invoke(@params);
            return retVal;
        }

        internal static void HookFlipSprite()
        {
            if (!HookedList.Contains("FlipSprite"))
            {
                HookedList.Add("FlipSprite");
                On.HeroController.FlipSprite += FlipSprite;
            }
        }

        internal static event Delegates.FlipSprite_BeforeArgs _beforeFlipSprite;
        internal static event Delegates.FlipSprite_NormalArgs _afterFlipSprite;

        private static void FlipSprite(On.HeroController.orig_FlipSprite orig, HeroController self)
        {
            Delegates.Params_FlipSprite @params = new()
            {
                self = self
            };
            _beforeFlipSprite?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFlipSprite != null) _afterFlipSprite.Invoke(@params);
        }

        internal static void HookNailParry()
        {
            if (!HookedList.Contains("NailParry"))
            {
                HookedList.Add("NailParry");
                On.HeroController.NailParry += NailParry;
            }
        }

        internal static event Delegates.NailParry_BeforeArgs _beforeNailParry;
        internal static event Delegates.NailParry_NormalArgs _afterNailParry;

        private static void NailParry(On.HeroController.orig_NailParry orig, HeroController self)
        {
            Delegates.Params_NailParry @params = new()
            {
                self = self
            };
            _beforeNailParry?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterNailParry != null) _afterNailParry.Invoke(@params);
        }

        internal static void HookNailParryRecover()
        {
            if (!HookedList.Contains("NailParryRecover"))
            {
                HookedList.Add("NailParryRecover");
                On.HeroController.NailParryRecover += NailParryRecover;
            }
        }

        internal static event Delegates.NailParryRecover_BeforeArgs _beforeNailParryRecover;
        internal static event Delegates.NailParryRecover_NormalArgs _afterNailParryRecover;

        private static void NailParryRecover(On.HeroController.orig_NailParryRecover orig, HeroController self)
        {
            Delegates.Params_NailParryRecover @params = new()
            {
                self = self
            };
            _beforeNailParryRecover?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterNailParryRecover != null) _afterNailParryRecover.Invoke(@params);
        }

        internal static void HookQuakeInvuln()
        {
            if (!HookedList.Contains("QuakeInvuln"))
            {
                HookedList.Add("QuakeInvuln");
                On.HeroController.QuakeInvuln += QuakeInvuln;
            }
        }

        internal static event Delegates.QuakeInvuln_BeforeArgs _beforeQuakeInvuln;
        internal static event Delegates.QuakeInvuln_NormalArgs _afterQuakeInvuln;

        private static void QuakeInvuln(On.HeroController.orig_QuakeInvuln orig, HeroController self)
        {
            Delegates.Params_QuakeInvuln @params = new()
            {
                self = self
            };
            _beforeQuakeInvuln?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterQuakeInvuln != null) _afterQuakeInvuln.Invoke(@params);
        }

        internal static void HookCancelParryInvuln()
        {
            if (!HookedList.Contains("CancelParryInvuln"))
            {
                HookedList.Add("CancelParryInvuln");
                On.HeroController.CancelParryInvuln += CancelParryInvuln;
            }
        }

        internal static event Delegates.CancelParryInvuln_BeforeArgs _beforeCancelParryInvuln;
        internal static event Delegates.CancelParryInvuln_NormalArgs _afterCancelParryInvuln;

        private static void CancelParryInvuln(On.HeroController.orig_CancelParryInvuln orig, HeroController self)
        {
            Delegates.Params_CancelParryInvuln @params = new()
            {
                self = self
            };
            _beforeCancelParryInvuln?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelParryInvuln != null) _afterCancelParryInvuln.Invoke(@params);
        }

        internal static void HookCycloneInvuln()
        {
            if (!HookedList.Contains("CycloneInvuln"))
            {
                HookedList.Add("CycloneInvuln");
                On.HeroController.CycloneInvuln += CycloneInvuln;
            }
        }

        internal static event Delegates.CycloneInvuln_BeforeArgs _beforeCycloneInvuln;
        internal static event Delegates.CycloneInvuln_NormalArgs _afterCycloneInvuln;

        private static void CycloneInvuln(On.HeroController.orig_CycloneInvuln orig, HeroController self)
        {
            Delegates.Params_CycloneInvuln @params = new()
            {
                self = self
            };
            _beforeCycloneInvuln?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCycloneInvuln != null) _afterCycloneInvuln.Invoke(@params);
        }

        internal static void HookSetWieldingLantern()
        {
            if (!HookedList.Contains("SetWieldingLantern"))
            {
                HookedList.Add("SetWieldingLantern");
                On.HeroController.SetWieldingLantern += SetWieldingLantern;
            }
        }

        internal static event Delegates.SetWieldingLantern_BeforeArgs _beforeSetWieldingLantern;
        internal static event Delegates.SetWieldingLantern_NormalArgs _afterSetWieldingLantern;

        private static void SetWieldingLantern(On.HeroController.orig_SetWieldingLantern orig, HeroController self,
            bool set)
        {
            Delegates.Params_SetWieldingLantern @params = new()
            {
                self = self, set = set
            };
            _beforeSetWieldingLantern?.Invoke(@params);
            self = @params.self;
            set = @params.set;
            orig(self, set);
            if (_afterSetWieldingLantern != null) _afterSetWieldingLantern.Invoke(@params);
        }

        internal static void HookTakeDamage()
        {
            if (!HookedList.Contains("TakeDamage"))
            {
                HookedList.Add("TakeDamage");
                On.HeroController.TakeDamage += TakeDamage;
            }
        }

        internal static event Delegates.TakeDamage_BeforeArgs _beforeTakeDamage;
        internal static event Delegates.TakeDamage_NormalArgs _afterTakeDamage;

        private static void TakeDamage(On.HeroController.orig_TakeDamage orig, HeroController self, GameObject go,
            CollisionSide damageSide, int damageAmount, int hazardType)
        {
            Delegates.Params_TakeDamage @params = new()
            {
                self = self, go = go, damageSide = damageSide, damageAmount = damageAmount, hazardType = hazardType
            };
            _beforeTakeDamage?.Invoke(@params);
            self = @params.self;
            go = @params.go;
            damageSide = @params.damageSide;
            damageAmount = @params.damageAmount;
            hazardType = @params.hazardType;
            orig(self, go, damageSide, damageAmount, hazardType);
            if (_afterTakeDamage != null) _afterTakeDamage.Invoke(@params);
        }

        internal static void HookGetEntryGateName()
        {
            if (!HookedList.Contains("GetEntryGateName"))
            {
                HookedList.Add("GetEntryGateName");
                On.HeroController.GetEntryGateName += GetEntryGateName;
            }
        }

        internal static event Delegates.GetEntryGateName_BeforeArgs _beforeGetEntryGateName;
        internal static event Delegates.GetEntryGateName_NormalArgs _afterGetEntryGateName;

        private static string GetEntryGateName(On.HeroController.orig_GetEntryGateName orig, HeroController self)
        {
            Delegates.Params_GetEntryGateName @params = new()
            {
                self = self
            };
            _beforeGetEntryGateName?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetEntryGateName != null) retVal = _afterGetEntryGateName.Invoke(@params);
            return retVal;
        }

        internal static void HookAddMPCharge()
        {
            if (!HookedList.Contains("AddMPCharge"))
            {
                HookedList.Add("AddMPCharge");
                On.HeroController.AddMPCharge += AddMPCharge;
            }
        }

        internal static event Delegates.AddMPCharge_BeforeArgs _beforeAddMPCharge;
        internal static event Delegates.AddMPCharge_NormalArgs _afterAddMPCharge;

        private static void AddMPCharge(On.HeroController.orig_AddMPCharge orig, HeroController self, int amount)
        {
            Delegates.Params_AddMPCharge @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddMPCharge?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddMPCharge != null) _afterAddMPCharge.Invoke(@params);
        }

        internal static void HookSoulGain()
        {
            if (!HookedList.Contains("SoulGain"))
            {
                HookedList.Add("SoulGain");
                On.HeroController.SoulGain += SoulGain;
            }
        }

        internal static event Delegates.SoulGain_BeforeArgs _beforeSoulGain;
        internal static event Delegates.SoulGain_NormalArgs _afterSoulGain;

        private static void SoulGain(On.HeroController.orig_SoulGain orig, HeroController self)
        {
            Delegates.Params_SoulGain @params = new()
            {
                self = self
            };
            _beforeSoulGain?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSoulGain != null) _afterSoulGain.Invoke(@params);
        }

        internal static void HookAddMPChargeSpa()
        {
            if (!HookedList.Contains("AddMPChargeSpa"))
            {
                HookedList.Add("AddMPChargeSpa");
                On.HeroController.AddMPChargeSpa += AddMPChargeSpa;
            }
        }

        internal static event Delegates.AddMPChargeSpa_BeforeArgs _beforeAddMPChargeSpa;
        internal static event Delegates.AddMPChargeSpa_NormalArgs _afterAddMPChargeSpa;

        private static void AddMPChargeSpa(On.HeroController.orig_AddMPChargeSpa orig, HeroController self, int amount)
        {
            Delegates.Params_AddMPChargeSpa @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddMPChargeSpa?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddMPChargeSpa != null) _afterAddMPChargeSpa.Invoke(@params);
        }

        internal static void HookTryAddMPChargeSpa()
        {
            if (!HookedList.Contains("TryAddMPChargeSpa"))
            {
                HookedList.Add("TryAddMPChargeSpa");
                On.HeroController.TryAddMPChargeSpa += TryAddMPChargeSpa;
            }
        }

        internal static event Delegates.TryAddMPChargeSpa_BeforeArgs _beforeTryAddMPChargeSpa;
        internal static event Delegates.TryAddMPChargeSpa_NormalArgs _afterTryAddMPChargeSpa;

        private static bool TryAddMPChargeSpa(On.HeroController.orig_TryAddMPChargeSpa orig, HeroController self,
            int amount)
        {
            Delegates.Params_TryAddMPChargeSpa @params = new()
            {
                self = self, amount = amount
            };
            _beforeTryAddMPChargeSpa?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            var retVal = orig(self, amount);
            if (_afterTryAddMPChargeSpa != null) retVal = _afterTryAddMPChargeSpa.Invoke(@params);
            return retVal;
        }

        internal static void HookSetMPCharge()
        {
            if (!HookedList.Contains("SetMPCharge"))
            {
                HookedList.Add("SetMPCharge");
                On.HeroController.SetMPCharge += SetMPCharge;
            }
        }

        internal static event Delegates.SetMPCharge_BeforeArgs _beforeSetMPCharge;
        internal static event Delegates.SetMPCharge_NormalArgs _afterSetMPCharge;

        private static void SetMPCharge(On.HeroController.orig_SetMPCharge orig, HeroController self, int amount)
        {
            Delegates.Params_SetMPCharge @params = new()
            {
                self = self, amount = amount
            };
            _beforeSetMPCharge?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterSetMPCharge != null) _afterSetMPCharge.Invoke(@params);
        }

        internal static void HookTakeMP()
        {
            if (!HookedList.Contains("TakeMP"))
            {
                HookedList.Add("TakeMP");
                On.HeroController.TakeMP += TakeMP;
            }
        }

        internal static event Delegates.TakeMP_BeforeArgs _beforeTakeMP;
        internal static event Delegates.TakeMP_NormalArgs _afterTakeMP;

        private static void TakeMP(On.HeroController.orig_TakeMP orig, HeroController self, int amount)
        {
            Delegates.Params_TakeMP @params = new()
            {
                self = self, amount = amount
            };
            _beforeTakeMP?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeMP != null) _afterTakeMP.Invoke(@params);
        }

        internal static void HookTakeMPQuick()
        {
            if (!HookedList.Contains("TakeMPQuick"))
            {
                HookedList.Add("TakeMPQuick");
                On.HeroController.TakeMPQuick += TakeMPQuick;
            }
        }

        internal static event Delegates.TakeMPQuick_BeforeArgs _beforeTakeMPQuick;
        internal static event Delegates.TakeMPQuick_NormalArgs _afterTakeMPQuick;

        private static void TakeMPQuick(On.HeroController.orig_TakeMPQuick orig, HeroController self, int amount)
        {
            Delegates.Params_TakeMPQuick @params = new()
            {
                self = self, amount = amount
            };
            _beforeTakeMPQuick?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeMPQuick != null) _afterTakeMPQuick.Invoke(@params);
        }

        internal static void HookTakeReserveMP()
        {
            if (!HookedList.Contains("TakeReserveMP"))
            {
                HookedList.Add("TakeReserveMP");
                On.HeroController.TakeReserveMP += TakeReserveMP;
            }
        }

        internal static event Delegates.TakeReserveMP_BeforeArgs _beforeTakeReserveMP;
        internal static event Delegates.TakeReserveMP_NormalArgs _afterTakeReserveMP;

        private static void TakeReserveMP(On.HeroController.orig_TakeReserveMP orig, HeroController self, int amount)
        {
            Delegates.Params_TakeReserveMP @params = new()
            {
                self = self, amount = amount
            };
            _beforeTakeReserveMP?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeReserveMP != null) _afterTakeReserveMP.Invoke(@params);
        }

        internal static void HookAddHealth()
        {
            if (!HookedList.Contains("AddHealth"))
            {
                HookedList.Add("AddHealth");
                On.HeroController.AddHealth += AddHealth;
            }
        }

        internal static event Delegates.AddHealth_BeforeArgs _beforeAddHealth;
        internal static event Delegates.AddHealth_NormalArgs _afterAddHealth;

        private static void AddHealth(On.HeroController.orig_AddHealth orig, HeroController self, int amount)
        {
            Delegates.Params_AddHealth @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddHealth?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddHealth != null) _afterAddHealth.Invoke(@params);
        }

        internal static void HookTakeHealth()
        {
            if (!HookedList.Contains("TakeHealth"))
            {
                HookedList.Add("TakeHealth");
                On.HeroController.TakeHealth += TakeHealth;
            }
        }

        internal static event Delegates.TakeHealth_BeforeArgs _beforeTakeHealth;
        internal static event Delegates.TakeHealth_NormalArgs _afterTakeHealth;

        private static void TakeHealth(On.HeroController.orig_TakeHealth orig, HeroController self, int amount)
        {
            Delegates.Params_TakeHealth @params = new()
            {
                self = self, amount = amount
            };
            _beforeTakeHealth?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeHealth != null) _afterTakeHealth.Invoke(@params);
        }

        internal static void HookMaxHealth()
        {
            if (!HookedList.Contains("MaxHealth"))
            {
                HookedList.Add("MaxHealth");
                On.HeroController.MaxHealth += MaxHealth;
            }
        }

        internal static event Delegates.MaxHealth_BeforeArgs _beforeMaxHealth;
        internal static event Delegates.MaxHealth_NormalArgs _afterMaxHealth;

        private static void MaxHealth(On.HeroController.orig_MaxHealth orig, HeroController self)
        {
            Delegates.Params_MaxHealth @params = new()
            {
                self = self
            };
            _beforeMaxHealth?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMaxHealth != null) _afterMaxHealth.Invoke(@params);
        }

        internal static void HookMaxHealthKeepBlue()
        {
            if (!HookedList.Contains("MaxHealthKeepBlue"))
            {
                HookedList.Add("MaxHealthKeepBlue");
                On.HeroController.MaxHealthKeepBlue += MaxHealthKeepBlue;
            }
        }

        internal static event Delegates.MaxHealthKeepBlue_BeforeArgs _beforeMaxHealthKeepBlue;
        internal static event Delegates.MaxHealthKeepBlue_NormalArgs _afterMaxHealthKeepBlue;

        private static void MaxHealthKeepBlue(On.HeroController.orig_MaxHealthKeepBlue orig, HeroController self)
        {
            Delegates.Params_MaxHealthKeepBlue @params = new()
            {
                self = self
            };
            _beforeMaxHealthKeepBlue?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterMaxHealthKeepBlue != null) _afterMaxHealthKeepBlue.Invoke(@params);
        }

        internal static void HookAddToMaxHealth()
        {
            if (!HookedList.Contains("AddToMaxHealth"))
            {
                HookedList.Add("AddToMaxHealth");
                On.HeroController.AddToMaxHealth += AddToMaxHealth;
            }
        }

        internal static event Delegates.AddToMaxHealth_BeforeArgs _beforeAddToMaxHealth;
        internal static event Delegates.AddToMaxHealth_NormalArgs _afterAddToMaxHealth;

        private static void AddToMaxHealth(On.HeroController.orig_AddToMaxHealth orig, HeroController self, int amount)
        {
            Delegates.Params_AddToMaxHealth @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddToMaxHealth?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddToMaxHealth != null) _afterAddToMaxHealth.Invoke(@params);
        }

        internal static void HookClearMP()
        {
            if (!HookedList.Contains("ClearMP"))
            {
                HookedList.Add("ClearMP");
                On.HeroController.ClearMP += ClearMP;
            }
        }

        internal static event Delegates.ClearMP_BeforeArgs _beforeClearMP;
        internal static event Delegates.ClearMP_NormalArgs _afterClearMP;

        private static void ClearMP(On.HeroController.orig_ClearMP orig, HeroController self)
        {
            Delegates.Params_ClearMP @params = new()
            {
                self = self
            };
            _beforeClearMP?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearMP != null) _afterClearMP.Invoke(@params);
        }

        internal static void HookClearMPSendEvents()
        {
            if (!HookedList.Contains("ClearMPSendEvents"))
            {
                HookedList.Add("ClearMPSendEvents");
                On.HeroController.ClearMPSendEvents += ClearMPSendEvents;
            }
        }

        internal static event Delegates.ClearMPSendEvents_BeforeArgs _beforeClearMPSendEvents;
        internal static event Delegates.ClearMPSendEvents_NormalArgs _afterClearMPSendEvents;

        private static void ClearMPSendEvents(On.HeroController.orig_ClearMPSendEvents orig, HeroController self)
        {
            Delegates.Params_ClearMPSendEvents @params = new()
            {
                self = self
            };
            _beforeClearMPSendEvents?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearMPSendEvents != null) _afterClearMPSendEvents.Invoke(@params);
        }

        internal static void HookAddToMaxMPReserve()
        {
            if (!HookedList.Contains("AddToMaxMPReserve"))
            {
                HookedList.Add("AddToMaxMPReserve");
                On.HeroController.AddToMaxMPReserve += AddToMaxMPReserve;
            }
        }

        internal static event Delegates.AddToMaxMPReserve_BeforeArgs _beforeAddToMaxMPReserve;
        internal static event Delegates.AddToMaxMPReserve_NormalArgs _afterAddToMaxMPReserve;

        private static void AddToMaxMPReserve(On.HeroController.orig_AddToMaxMPReserve orig, HeroController self,
            int amount)
        {
            Delegates.Params_AddToMaxMPReserve @params = new()
            {
                self = self, amount = amount
            };
            _beforeAddToMaxMPReserve?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddToMaxMPReserve != null) _afterAddToMaxMPReserve.Invoke(@params);
        }

        internal static void HookBounce()
        {
            if (!HookedList.Contains("Bounce"))
            {
                HookedList.Add("Bounce");
                On.HeroController.Bounce += Bounce;
            }
        }

        internal static event Delegates.Bounce_BeforeArgs _beforeBounce;
        internal static event Delegates.Bounce_NormalArgs _afterBounce;

        private static void Bounce(On.HeroController.orig_Bounce orig, HeroController self)
        {
            Delegates.Params_Bounce @params = new()
            {
                self = self
            };
            _beforeBounce?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBounce != null) _afterBounce.Invoke(@params);
        }

        internal static void HookBounceHigh()
        {
            if (!HookedList.Contains("BounceHigh"))
            {
                HookedList.Add("BounceHigh");
                On.HeroController.BounceHigh += BounceHigh;
            }
        }

        internal static event Delegates.BounceHigh_BeforeArgs _beforeBounceHigh;
        internal static event Delegates.BounceHigh_NormalArgs _afterBounceHigh;

        private static void BounceHigh(On.HeroController.orig_BounceHigh orig, HeroController self)
        {
            Delegates.Params_BounceHigh @params = new()
            {
                self = self
            };
            _beforeBounceHigh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBounceHigh != null) _afterBounceHigh.Invoke(@params);
        }

        internal static void HookShroomBounce()
        {
            if (!HookedList.Contains("ShroomBounce"))
            {
                HookedList.Add("ShroomBounce");
                On.HeroController.ShroomBounce += ShroomBounce;
            }
        }

        internal static event Delegates.ShroomBounce_BeforeArgs _beforeShroomBounce;
        internal static event Delegates.ShroomBounce_NormalArgs _afterShroomBounce;

        private static void ShroomBounce(On.HeroController.orig_ShroomBounce orig, HeroController self)
        {
            Delegates.Params_ShroomBounce @params = new()
            {
                self = self
            };
            _beforeShroomBounce?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShroomBounce != null) _afterShroomBounce.Invoke(@params);
        }

        internal static void HookRecoilLeft()
        {
            if (!HookedList.Contains("RecoilLeft"))
            {
                HookedList.Add("RecoilLeft");
                On.HeroController.RecoilLeft += RecoilLeft;
            }
        }

        internal static event Delegates.RecoilLeft_BeforeArgs _beforeRecoilLeft;
        internal static event Delegates.RecoilLeft_NormalArgs _afterRecoilLeft;

        private static void RecoilLeft(On.HeroController.orig_RecoilLeft orig, HeroController self)
        {
            Delegates.Params_RecoilLeft @params = new()
            {
                self = self
            };
            _beforeRecoilLeft?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecoilLeft != null) _afterRecoilLeft.Invoke(@params);
        }

        internal static void HookRecoilRight()
        {
            if (!HookedList.Contains("RecoilRight"))
            {
                HookedList.Add("RecoilRight");
                On.HeroController.RecoilRight += RecoilRight;
            }
        }

        internal static event Delegates.RecoilRight_BeforeArgs _beforeRecoilRight;
        internal static event Delegates.RecoilRight_NormalArgs _afterRecoilRight;

        private static void RecoilRight(On.HeroController.orig_RecoilRight orig, HeroController self)
        {
            Delegates.Params_RecoilRight @params = new()
            {
                self = self
            };
            _beforeRecoilRight?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecoilRight != null) _afterRecoilRight.Invoke(@params);
        }

        internal static void HookRecoilRightLong()
        {
            if (!HookedList.Contains("RecoilRightLong"))
            {
                HookedList.Add("RecoilRightLong");
                On.HeroController.RecoilRightLong += RecoilRightLong;
            }
        }

        internal static event Delegates.RecoilRightLong_BeforeArgs _beforeRecoilRightLong;
        internal static event Delegates.RecoilRightLong_NormalArgs _afterRecoilRightLong;

        private static void RecoilRightLong(On.HeroController.orig_RecoilRightLong orig, HeroController self)
        {
            Delegates.Params_RecoilRightLong @params = new()
            {
                self = self
            };
            _beforeRecoilRightLong?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecoilRightLong != null) _afterRecoilRightLong.Invoke(@params);
        }

        internal static void HookRecoilLeftLong()
        {
            if (!HookedList.Contains("RecoilLeftLong"))
            {
                HookedList.Add("RecoilLeftLong");
                On.HeroController.RecoilLeftLong += RecoilLeftLong;
            }
        }

        internal static event Delegates.RecoilLeftLong_BeforeArgs _beforeRecoilLeftLong;
        internal static event Delegates.RecoilLeftLong_NormalArgs _afterRecoilLeftLong;

        private static void RecoilLeftLong(On.HeroController.orig_RecoilLeftLong orig, HeroController self)
        {
            Delegates.Params_RecoilLeftLong @params = new()
            {
                self = self
            };
            _beforeRecoilLeftLong?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecoilLeftLong != null) _afterRecoilLeftLong.Invoke(@params);
        }

        internal static void HookRecoilDown()
        {
            if (!HookedList.Contains("RecoilDown"))
            {
                HookedList.Add("RecoilDown");
                On.HeroController.RecoilDown += RecoilDown;
            }
        }

        internal static event Delegates.RecoilDown_BeforeArgs _beforeRecoilDown;
        internal static event Delegates.RecoilDown_NormalArgs _afterRecoilDown;

        private static void RecoilDown(On.HeroController.orig_RecoilDown orig, HeroController self)
        {
            Delegates.Params_RecoilDown @params = new()
            {
                self = self
            };
            _beforeRecoilDown?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRecoilDown != null) _afterRecoilDown.Invoke(@params);
        }

        internal static void HookForceHardLanding()
        {
            if (!HookedList.Contains("ForceHardLanding"))
            {
                HookedList.Add("ForceHardLanding");
                On.HeroController.ForceHardLanding += ForceHardLanding;
            }
        }

        internal static event Delegates.ForceHardLanding_BeforeArgs _beforeForceHardLanding;
        internal static event Delegates.ForceHardLanding_NormalArgs _afterForceHardLanding;

        private static void ForceHardLanding(On.HeroController.orig_ForceHardLanding orig, HeroController self)
        {
            Delegates.Params_ForceHardLanding @params = new()
            {
                self = self
            };
            _beforeForceHardLanding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceHardLanding != null) _afterForceHardLanding.Invoke(@params);
        }

        internal static void HookEnterSceneDreamGate()
        {
            if (!HookedList.Contains("EnterSceneDreamGate"))
            {
                HookedList.Add("EnterSceneDreamGate");
                On.HeroController.EnterSceneDreamGate += EnterSceneDreamGate;
            }
        }

        internal static event Delegates.EnterSceneDreamGate_BeforeArgs _beforeEnterSceneDreamGate;
        internal static event Delegates.EnterSceneDreamGate_NormalArgs _afterEnterSceneDreamGate;

        private static void EnterSceneDreamGate(On.HeroController.orig_EnterSceneDreamGate orig, HeroController self)
        {
            Delegates.Params_EnterSceneDreamGate @params = new()
            {
                self = self
            };
            _beforeEnterSceneDreamGate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnterSceneDreamGate != null) _afterEnterSceneDreamGate.Invoke(@params);
        }

        internal static void HookEnterScene()
        {
            if (!HookedList.Contains("EnterScene"))
            {
                HookedList.Add("EnterScene");
                On.HeroController.EnterScene += EnterScene;
            }
        }

        internal static event Delegates.EnterScene_BeforeArgs _beforeEnterScene;

        private static IEnumerator EnterScene(On.HeroController.orig_EnterScene orig, HeroController self,
            TransitionPoint enterGate, float delayBeforeEnter)
        {
            Delegates.Params_EnterScene @params = new()
            {
                self = self, enterGate = enterGate, delayBeforeEnter = delayBeforeEnter
            };
            _beforeEnterScene?.Invoke(@params);
            self = @params.self;
            enterGate = @params.enterGate;
            delayBeforeEnter = @params.delayBeforeEnter;
            return orig(self, enterGate, delayBeforeEnter);
        }

        internal static void HookLeaveScene()
        {
            if (!HookedList.Contains("LeaveScene"))
            {
                HookedList.Add("LeaveScene");
                On.HeroController.LeaveScene += LeaveScene;
            }
        }

        internal static event Delegates.LeaveScene_BeforeArgs _beforeLeaveScene;
        internal static event Delegates.LeaveScene_NormalArgs _afterLeaveScene;

        private static void LeaveScene(On.HeroController.orig_LeaveScene orig, HeroController self, GatePosition? gate)
        {
            Delegates.Params_LeaveScene @params = new()
            {
                self = self, gate = gate
            };
            _beforeLeaveScene?.Invoke(@params);
            self = @params.self;
            gate = @params.gate;
            orig(self, gate);
            if (_afterLeaveScene != null) _afterLeaveScene.Invoke(@params);
        }

        internal static void HookBetaLeave()
        {
            if (!HookedList.Contains("BetaLeave"))
            {
                HookedList.Add("BetaLeave");
                On.HeroController.BetaLeave += BetaLeave;
            }
        }

        internal static event Delegates.BetaLeave_BeforeArgs _beforeBetaLeave;

        private static IEnumerator BetaLeave(On.HeroController.orig_BetaLeave orig, HeroController self,
            EndBeta betaEndTrigger)
        {
            Delegates.Params_BetaLeave @params = new()
            {
                self = self, betaEndTrigger = betaEndTrigger
            };
            _beforeBetaLeave?.Invoke(@params);
            self = @params.self;
            betaEndTrigger = @params.betaEndTrigger;
            return orig(self, betaEndTrigger);
        }

        internal static void HookBetaReturn()
        {
            if (!HookedList.Contains("BetaReturn"))
            {
                HookedList.Add("BetaReturn");
                On.HeroController.BetaReturn += BetaReturn;
            }
        }

        internal static event Delegates.BetaReturn_BeforeArgs _beforeBetaReturn;

        private static IEnumerator BetaReturn(On.HeroController.orig_BetaReturn orig, HeroController self)
        {
            Delegates.Params_BetaReturn @params = new()
            {
                self = self
            };
            _beforeBetaReturn?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookRespawn()
        {
            if (!HookedList.Contains("Respawn"))
            {
                HookedList.Add("Respawn");
                On.HeroController.Respawn += Respawn;
            }
        }

        internal static event Delegates.Respawn_BeforeArgs _beforeRespawn;

        private static IEnumerator Respawn(On.HeroController.orig_Respawn orig, HeroController self)
        {
            Delegates.Params_Respawn @params = new()
            {
                self = self
            };
            _beforeRespawn?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookHazardRespawn()
        {
            if (!HookedList.Contains("HazardRespawn"))
            {
                HookedList.Add("HazardRespawn");
                On.HeroController.HazardRespawn += HazardRespawn;
            }
        }

        internal static event Delegates.HazardRespawn_BeforeArgs _beforeHazardRespawn;

        private static IEnumerator HazardRespawn(On.HeroController.orig_HazardRespawn orig, HeroController self)
        {
            Delegates.Params_HazardRespawn @params = new()
            {
                self = self
            };
            _beforeHazardRespawn?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookStartCyclone()
        {
            if (!HookedList.Contains("StartCyclone"))
            {
                HookedList.Add("StartCyclone");
                On.HeroController.StartCyclone += StartCyclone;
            }
        }

        internal static event Delegates.StartCyclone_BeforeArgs _beforeStartCyclone;
        internal static event Delegates.StartCyclone_NormalArgs _afterStartCyclone;

        private static void StartCyclone(On.HeroController.orig_StartCyclone orig, HeroController self)
        {
            Delegates.Params_StartCyclone @params = new()
            {
                self = self
            };
            _beforeStartCyclone?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartCyclone != null) _afterStartCyclone.Invoke(@params);
        }

        internal static void HookEndCyclone()
        {
            if (!HookedList.Contains("EndCyclone"))
            {
                HookedList.Add("EndCyclone");
                On.HeroController.EndCyclone += EndCyclone;
            }
        }

        internal static event Delegates.EndCyclone_BeforeArgs _beforeEndCyclone;
        internal static event Delegates.EndCyclone_NormalArgs _afterEndCyclone;

        private static void EndCyclone(On.HeroController.orig_EndCyclone orig, HeroController self)
        {
            Delegates.Params_EndCyclone @params = new()
            {
                self = self
            };
            _beforeEndCyclone?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEndCyclone != null) _afterEndCyclone.Invoke(@params);
        }

        internal static void HookGetState()
        {
            if (!HookedList.Contains("GetState"))
            {
                HookedList.Add("GetState");
                On.HeroController.GetState += GetState;
            }
        }

        internal static event Delegates.GetState_BeforeArgs _beforeGetState;
        internal static event Delegates.GetState_NormalArgs _afterGetState;

        private static bool GetState(On.HeroController.orig_GetState orig, HeroController self, string stateName)
        {
            Delegates.Params_GetState @params = new()
            {
                self = self, stateName = stateName
            };
            _beforeGetState?.Invoke(@params);
            self = @params.self;
            stateName = @params.stateName;
            var retVal = orig(self, stateName);
            if (_afterGetState != null) retVal = _afterGetState.Invoke(@params);
            return retVal;
        }

        internal static void HookGetCState()
        {
            if (!HookedList.Contains("GetCState"))
            {
                HookedList.Add("GetCState");
                On.HeroController.GetCState += GetCState;
            }
        }

        internal static event Delegates.GetCState_BeforeArgs _beforeGetCState;
        internal static event Delegates.GetCState_NormalArgs _afterGetCState;

        private static bool GetCState(On.HeroController.orig_GetCState orig, HeroController self, string stateName)
        {
            Delegates.Params_GetCState @params = new()
            {
                self = self, stateName = stateName
            };
            _beforeGetCState?.Invoke(@params);
            self = @params.self;
            stateName = @params.stateName;
            var retVal = orig(self, stateName);
            if (_afterGetCState != null) retVal = _afterGetCState.Invoke(@params);
            return retVal;
        }

        internal static void HookSetCState()
        {
            if (!HookedList.Contains("SetCState"))
            {
                HookedList.Add("SetCState");
                On.HeroController.SetCState += SetCState;
            }
        }

        internal static event Delegates.SetCState_BeforeArgs _beforeSetCState;
        internal static event Delegates.SetCState_NormalArgs _afterSetCState;

        private static void SetCState(On.HeroController.orig_SetCState orig, HeroController self, string stateName,
            bool value)
        {
            Delegates.Params_SetCState @params = new()
            {
                self = self, stateName = stateName, value = value
            };
            _beforeSetCState?.Invoke(@params);
            self = @params.self;
            stateName = @params.stateName;
            value = @params.value;
            orig(self, stateName, value);
            if (_afterSetCState != null) _afterSetCState.Invoke(@params);
        }

        internal static void HookResetHardLandingTimer()
        {
            if (!HookedList.Contains("ResetHardLandingTimer"))
            {
                HookedList.Add("ResetHardLandingTimer");
                On.HeroController.ResetHardLandingTimer += ResetHardLandingTimer;
            }
        }

        internal static event Delegates.ResetHardLandingTimer_BeforeArgs _beforeResetHardLandingTimer;
        internal static event Delegates.ResetHardLandingTimer_NormalArgs _afterResetHardLandingTimer;

        private static void ResetHardLandingTimer(On.HeroController.orig_ResetHardLandingTimer orig,
            HeroController self)
        {
            Delegates.Params_ResetHardLandingTimer @params = new()
            {
                self = self
            };
            _beforeResetHardLandingTimer?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetHardLandingTimer != null) _afterResetHardLandingTimer.Invoke(@params);
        }

        internal static void HookCancelSuperDash()
        {
            if (!HookedList.Contains("CancelSuperDash"))
            {
                HookedList.Add("CancelSuperDash");
                On.HeroController.CancelSuperDash += CancelSuperDash;
            }
        }

        internal static event Delegates.CancelSuperDash_BeforeArgs _beforeCancelSuperDash;
        internal static event Delegates.CancelSuperDash_NormalArgs _afterCancelSuperDash;

        private static void CancelSuperDash(On.HeroController.orig_CancelSuperDash orig, HeroController self)
        {
            Delegates.Params_CancelSuperDash @params = new()
            {
                self = self
            };
            _beforeCancelSuperDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelSuperDash != null) _afterCancelSuperDash.Invoke(@params);
        }

        internal static void HookRelinquishControlNotVelocity()
        {
            if (!HookedList.Contains("RelinquishControlNotVelocity"))
            {
                HookedList.Add("RelinquishControlNotVelocity");
                On.HeroController.RelinquishControlNotVelocity += RelinquishControlNotVelocity;
            }
        }

        internal static event Delegates.RelinquishControlNotVelocity_BeforeArgs _beforeRelinquishControlNotVelocity;
        internal static event Delegates.RelinquishControlNotVelocity_NormalArgs _afterRelinquishControlNotVelocity;

        private static void RelinquishControlNotVelocity(On.HeroController.orig_RelinquishControlNotVelocity orig,
            HeroController self)
        {
            Delegates.Params_RelinquishControlNotVelocity @params = new()
            {
                self = self
            };
            _beforeRelinquishControlNotVelocity?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRelinquishControlNotVelocity != null) _afterRelinquishControlNotVelocity.Invoke(@params);
        }

        internal static void HookRelinquishControl()
        {
            if (!HookedList.Contains("RelinquishControl"))
            {
                HookedList.Add("RelinquishControl");
                On.HeroController.RelinquishControl += RelinquishControl;
            }
        }

        internal static event Delegates.RelinquishControl_BeforeArgs _beforeRelinquishControl;
        internal static event Delegates.RelinquishControl_NormalArgs _afterRelinquishControl;

        private static void RelinquishControl(On.HeroController.orig_RelinquishControl orig, HeroController self)
        {
            Delegates.Params_RelinquishControl @params = new()
            {
                self = self
            };
            _beforeRelinquishControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRelinquishControl != null) _afterRelinquishControl.Invoke(@params);
        }

        internal static void HookRegainControl()
        {
            if (!HookedList.Contains("RegainControl"))
            {
                HookedList.Add("RegainControl");
                On.HeroController.RegainControl += RegainControl;
            }
        }

        internal static event Delegates.RegainControl_BeforeArgs _beforeRegainControl;
        internal static event Delegates.RegainControl_NormalArgs _afterRegainControl;

        private static void RegainControl(On.HeroController.orig_RegainControl orig, HeroController self)
        {
            Delegates.Params_RegainControl @params = new()
            {
                self = self
            };
            _beforeRegainControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRegainControl != null) _afterRegainControl.Invoke(@params);
        }

        internal static void HookPreventCastByDialogueEnd()
        {
            if (!HookedList.Contains("PreventCastByDialogueEnd"))
            {
                HookedList.Add("PreventCastByDialogueEnd");
                On.HeroController.PreventCastByDialogueEnd += PreventCastByDialogueEnd;
            }
        }

        internal static event Delegates.PreventCastByDialogueEnd_BeforeArgs _beforePreventCastByDialogueEnd;
        internal static event Delegates.PreventCastByDialogueEnd_NormalArgs _afterPreventCastByDialogueEnd;

        private static void PreventCastByDialogueEnd(On.HeroController.orig_PreventCastByDialogueEnd orig,
            HeroController self)
        {
            Delegates.Params_PreventCastByDialogueEnd @params = new()
            {
                self = self
            };
            _beforePreventCastByDialogueEnd?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPreventCastByDialogueEnd != null) _afterPreventCastByDialogueEnd.Invoke(@params);
        }

        internal static void HookCanCast()
        {
            if (!HookedList.Contains("CanCast"))
            {
                HookedList.Add("CanCast");
                On.HeroController.CanCast += CanCast;
            }
        }

        internal static event Delegates.CanCast_BeforeArgs _beforeCanCast;
        internal static event Delegates.CanCast_NormalArgs _afterCanCast;

        private static bool CanCast(On.HeroController.orig_CanCast orig, HeroController self)
        {
            Delegates.Params_CanCast @params = new()
            {
                self = self
            };
            _beforeCanCast?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanCast != null) retVal = _afterCanCast.Invoke(@params);
            return retVal;
        }

        internal static void HookCanFocus()
        {
            if (!HookedList.Contains("CanFocus"))
            {
                HookedList.Add("CanFocus");
                On.HeroController.CanFocus += CanFocus;
            }
        }

        internal static event Delegates.CanFocus_BeforeArgs _beforeCanFocus;
        internal static event Delegates.CanFocus_NormalArgs _afterCanFocus;

        private static bool CanFocus(On.HeroController.orig_CanFocus orig, HeroController self)
        {
            Delegates.Params_CanFocus @params = new()
            {
                self = self
            };
            _beforeCanFocus?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanFocus != null) retVal = _afterCanFocus.Invoke(@params);
            return retVal;
        }

        internal static void HookCanNailArt()
        {
            if (!HookedList.Contains("CanNailArt"))
            {
                HookedList.Add("CanNailArt");
                On.HeroController.CanNailArt += CanNailArt;
            }
        }

        internal static event Delegates.CanNailArt_BeforeArgs _beforeCanNailArt;
        internal static event Delegates.CanNailArt_NormalArgs _afterCanNailArt;

        private static bool CanNailArt(On.HeroController.orig_CanNailArt orig, HeroController self)
        {
            Delegates.Params_CanNailArt @params = new()
            {
                self = self
            };
            _beforeCanNailArt?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanNailArt != null) retVal = _afterCanNailArt.Invoke(@params);
            return retVal;
        }

        internal static void HookCanQuickMap()
        {
            if (!HookedList.Contains("CanQuickMap"))
            {
                HookedList.Add("CanQuickMap");
                On.HeroController.CanQuickMap += CanQuickMap;
            }
        }

        internal static event Delegates.CanQuickMap_BeforeArgs _beforeCanQuickMap;
        internal static event Delegates.CanQuickMap_NormalArgs _afterCanQuickMap;

        private static bool CanQuickMap(On.HeroController.orig_CanQuickMap orig, HeroController self)
        {
            Delegates.Params_CanQuickMap @params = new()
            {
                self = self
            };
            _beforeCanQuickMap?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanQuickMap != null) retVal = _afterCanQuickMap.Invoke(@params);
            return retVal;
        }

        internal static void HookCanInspect()
        {
            if (!HookedList.Contains("CanInspect"))
            {
                HookedList.Add("CanInspect");
                On.HeroController.CanInspect += CanInspect;
            }
        }

        internal static event Delegates.CanInspect_BeforeArgs _beforeCanInspect;
        internal static event Delegates.CanInspect_NormalArgs _afterCanInspect;

        private static bool CanInspect(On.HeroController.orig_CanInspect orig, HeroController self)
        {
            Delegates.Params_CanInspect @params = new()
            {
                self = self
            };
            _beforeCanInspect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanInspect != null) retVal = _afterCanInspect.Invoke(@params);
            return retVal;
        }

        internal static void HookCanBackDash()
        {
            if (!HookedList.Contains("CanBackDash"))
            {
                HookedList.Add("CanBackDash");
                On.HeroController.CanBackDash += CanBackDash;
            }
        }

        internal static event Delegates.CanBackDash_BeforeArgs _beforeCanBackDash;
        internal static event Delegates.CanBackDash_NormalArgs _afterCanBackDash;

        private static bool CanBackDash(On.HeroController.orig_CanBackDash orig, HeroController self)
        {
            Delegates.Params_CanBackDash @params = new()
            {
                self = self
            };
            _beforeCanBackDash?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanBackDash != null) retVal = _afterCanBackDash.Invoke(@params);
            return retVal;
        }

        internal static void HookCanSuperDash()
        {
            if (!HookedList.Contains("CanSuperDash"))
            {
                HookedList.Add("CanSuperDash");
                On.HeroController.CanSuperDash += CanSuperDash;
            }
        }

        internal static event Delegates.CanSuperDash_BeforeArgs _beforeCanSuperDash;
        internal static event Delegates.CanSuperDash_NormalArgs _afterCanSuperDash;

        private static bool CanSuperDash(On.HeroController.orig_CanSuperDash orig, HeroController self)
        {
            Delegates.Params_CanSuperDash @params = new()
            {
                self = self
            };
            _beforeCanSuperDash?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanSuperDash != null) retVal = _afterCanSuperDash.Invoke(@params);
            return retVal;
        }

        internal static void HookCanDreamNail()
        {
            if (!HookedList.Contains("CanDreamNail"))
            {
                HookedList.Add("CanDreamNail");
                On.HeroController.CanDreamNail += CanDreamNail;
            }
        }

        internal static event Delegates.CanDreamNail_BeforeArgs _beforeCanDreamNail;
        internal static event Delegates.CanDreamNail_NormalArgs _afterCanDreamNail;

        private static bool CanDreamNail(On.HeroController.orig_CanDreamNail orig, HeroController self)
        {
            Delegates.Params_CanDreamNail @params = new()
            {
                self = self
            };
            _beforeCanDreamNail?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanDreamNail != null) retVal = _afterCanDreamNail.Invoke(@params);
            return retVal;
        }

        internal static void HookCanDreamGate()
        {
            if (!HookedList.Contains("CanDreamGate"))
            {
                HookedList.Add("CanDreamGate");
                On.HeroController.CanDreamGate += CanDreamGate;
            }
        }

        internal static event Delegates.CanDreamGate_BeforeArgs _beforeCanDreamGate;
        internal static event Delegates.CanDreamGate_NormalArgs _afterCanDreamGate;

        private static bool CanDreamGate(On.HeroController.orig_CanDreamGate orig, HeroController self)
        {
            Delegates.Params_CanDreamGate @params = new()
            {
                self = self
            };
            _beforeCanDreamGate?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanDreamGate != null) retVal = _afterCanDreamGate.Invoke(@params);
            return retVal;
        }

        internal static void HookCanInteract()
        {
            if (!HookedList.Contains("CanInteract"))
            {
                HookedList.Add("CanInteract");
                On.HeroController.CanInteract += CanInteract;
            }
        }

        internal static event Delegates.CanInteract_BeforeArgs _beforeCanInteract;
        internal static event Delegates.CanInteract_NormalArgs _afterCanInteract;

        private static bool CanInteract(On.HeroController.orig_CanInteract orig, HeroController self)
        {
            Delegates.Params_CanInteract @params = new()
            {
                self = self
            };
            _beforeCanInteract?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanInteract != null) retVal = _afterCanInteract.Invoke(@params);
            return retVal;
        }

        internal static void HookCanOpenInventory()
        {
            if (!HookedList.Contains("CanOpenInventory"))
            {
                HookedList.Add("CanOpenInventory");
                On.HeroController.CanOpenInventory += CanOpenInventory;
            }
        }

        internal static event Delegates.CanOpenInventory_BeforeArgs _beforeCanOpenInventory;
        internal static event Delegates.CanOpenInventory_NormalArgs _afterCanOpenInventory;

        private static bool CanOpenInventory(On.HeroController.orig_CanOpenInventory orig, HeroController self)
        {
            Delegates.Params_CanOpenInventory @params = new()
            {
                self = self
            };
            _beforeCanOpenInventory?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanOpenInventory != null) retVal = _afterCanOpenInventory.Invoke(@params);
            return retVal;
        }

        internal static void HookSetDamageMode_int()
        {
            if (!HookedList.Contains("SetDamageMode_int"))
            {
                HookedList.Add("SetDamageMode_int");
                On.HeroController.SetDamageMode_int += SetDamageMode_int;
            }
        }

        internal static event Delegates.SetDamageMode_int_BeforeArgs _beforeSetDamageMode_int;
        internal static event Delegates.SetDamageMode_int_NormalArgs _afterSetDamageMode_int;

        private static void SetDamageMode_int(On.HeroController.orig_SetDamageMode_int orig, HeroController self,
            int invincibilityType)
        {
            Delegates.Params_SetDamageMode_int @params = new()
            {
                self = self, invincibilityType = invincibilityType
            };
            _beforeSetDamageMode_int?.Invoke(@params);
            self = @params.self;
            invincibilityType = @params.invincibilityType;
            orig(self, invincibilityType);
            if (_afterSetDamageMode_int != null) _afterSetDamageMode_int.Invoke(@params);
        }

        internal static void HookSetDamageModeFSM()
        {
            if (!HookedList.Contains("SetDamageModeFSM"))
            {
                HookedList.Add("SetDamageModeFSM");
                On.HeroController.SetDamageModeFSM += SetDamageModeFSM;
            }
        }

        internal static event Delegates.SetDamageModeFSM_BeforeArgs _beforeSetDamageModeFSM;
        internal static event Delegates.SetDamageModeFSM_NormalArgs _afterSetDamageModeFSM;

        private static void SetDamageModeFSM(On.HeroController.orig_SetDamageModeFSM orig, HeroController self,
            int invincibilityType)
        {
            Delegates.Params_SetDamageModeFSM @params = new()
            {
                self = self, invincibilityType = invincibilityType
            };
            _beforeSetDamageModeFSM?.Invoke(@params);
            self = @params.self;
            invincibilityType = @params.invincibilityType;
            orig(self, invincibilityType);
            if (_afterSetDamageModeFSM != null) _afterSetDamageModeFSM.Invoke(@params);
        }

        internal static void HookResetQuakeDamage()
        {
            if (!HookedList.Contains("ResetQuakeDamage"))
            {
                HookedList.Add("ResetQuakeDamage");
                On.HeroController.ResetQuakeDamage += ResetQuakeDamage;
            }
        }

        internal static event Delegates.ResetQuakeDamage_BeforeArgs _beforeResetQuakeDamage;
        internal static event Delegates.ResetQuakeDamage_NormalArgs _afterResetQuakeDamage;

        private static void ResetQuakeDamage(On.HeroController.orig_ResetQuakeDamage orig, HeroController self)
        {
            Delegates.Params_ResetQuakeDamage @params = new()
            {
                self = self
            };
            _beforeResetQuakeDamage?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetQuakeDamage != null) _afterResetQuakeDamage.Invoke(@params);
        }

        internal static void HookSetDamageMode_DamageMode()
        {
            if (!HookedList.Contains("SetDamageMode_DamageMode"))
            {
                HookedList.Add("SetDamageMode_DamageMode");
                On.HeroController.SetDamageMode_DamageMode += SetDamageMode_DamageMode;
            }
        }

        internal static event Delegates.SetDamageMode_DamageMode_BeforeArgs _beforeSetDamageMode_DamageMode;
        internal static event Delegates.SetDamageMode_DamageMode_NormalArgs _afterSetDamageMode_DamageMode;

        private static void SetDamageMode_DamageMode(On.HeroController.orig_SetDamageMode_DamageMode orig,
            HeroController self, DamageMode newDamageMode)
        {
            Delegates.Params_SetDamageMode_DamageMode @params = new()
            {
                self = self, newDamageMode = newDamageMode
            };
            _beforeSetDamageMode_DamageMode?.Invoke(@params);
            self = @params.self;
            newDamageMode = @params.newDamageMode;
            orig(self, newDamageMode);
            if (_afterSetDamageMode_DamageMode != null) _afterSetDamageMode_DamageMode.Invoke(@params);
        }

        internal static void HookStopAnimationControl()
        {
            if (!HookedList.Contains("StopAnimationControl"))
            {
                HookedList.Add("StopAnimationControl");
                On.HeroController.StopAnimationControl += StopAnimationControl;
            }
        }

        internal static event Delegates.StopAnimationControl_BeforeArgs _beforeStopAnimationControl;
        internal static event Delegates.StopAnimationControl_NormalArgs _afterStopAnimationControl;

        private static void StopAnimationControl(On.HeroController.orig_StopAnimationControl orig, HeroController self)
        {
            Delegates.Params_StopAnimationControl @params = new()
            {
                self = self
            };
            _beforeStopAnimationControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopAnimationControl != null) _afterStopAnimationControl.Invoke(@params);
        }

        internal static void HookStartAnimationControl()
        {
            if (!HookedList.Contains("StartAnimationControl"))
            {
                HookedList.Add("StartAnimationControl");
                On.HeroController.StartAnimationControl += StartAnimationControl;
            }
        }

        internal static event Delegates.StartAnimationControl_BeforeArgs _beforeStartAnimationControl;
        internal static event Delegates.StartAnimationControl_NormalArgs _afterStartAnimationControl;

        private static void StartAnimationControl(On.HeroController.orig_StartAnimationControl orig,
            HeroController self)
        {
            Delegates.Params_StartAnimationControl @params = new()
            {
                self = self
            };
            _beforeStartAnimationControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartAnimationControl != null) _afterStartAnimationControl.Invoke(@params);
        }

        internal static void HookIgnoreInput()
        {
            if (!HookedList.Contains("IgnoreInput"))
            {
                HookedList.Add("IgnoreInput");
                On.HeroController.IgnoreInput += IgnoreInput;
            }
        }

        internal static event Delegates.IgnoreInput_BeforeArgs _beforeIgnoreInput;
        internal static event Delegates.IgnoreInput_NormalArgs _afterIgnoreInput;

        private static void IgnoreInput(On.HeroController.orig_IgnoreInput orig, HeroController self)
        {
            Delegates.Params_IgnoreInput @params = new()
            {
                self = self
            };
            _beforeIgnoreInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterIgnoreInput != null) _afterIgnoreInput.Invoke(@params);
        }

        internal static void HookIgnoreInputWithoutReset()
        {
            if (!HookedList.Contains("IgnoreInputWithoutReset"))
            {
                HookedList.Add("IgnoreInputWithoutReset");
                On.HeroController.IgnoreInputWithoutReset += IgnoreInputWithoutReset;
            }
        }

        internal static event Delegates.IgnoreInputWithoutReset_BeforeArgs _beforeIgnoreInputWithoutReset;
        internal static event Delegates.IgnoreInputWithoutReset_NormalArgs _afterIgnoreInputWithoutReset;

        private static void IgnoreInputWithoutReset(On.HeroController.orig_IgnoreInputWithoutReset orig,
            HeroController self)
        {
            Delegates.Params_IgnoreInputWithoutReset @params = new()
            {
                self = self
            };
            _beforeIgnoreInputWithoutReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterIgnoreInputWithoutReset != null) _afterIgnoreInputWithoutReset.Invoke(@params);
        }

        internal static void HookAcceptInput()
        {
            if (!HookedList.Contains("AcceptInput"))
            {
                HookedList.Add("AcceptInput");
                On.HeroController.AcceptInput += AcceptInput;
            }
        }

        internal static event Delegates.AcceptInput_BeforeArgs _beforeAcceptInput;
        internal static event Delegates.AcceptInput_NormalArgs _afterAcceptInput;

        private static void AcceptInput(On.HeroController.orig_AcceptInput orig, HeroController self)
        {
            Delegates.Params_AcceptInput @params = new()
            {
                self = self
            };
            _beforeAcceptInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAcceptInput != null) _afterAcceptInput.Invoke(@params);
        }

        internal static void HookPause()
        {
            if (!HookedList.Contains("Pause"))
            {
                HookedList.Add("Pause");
                On.HeroController.Pause += Pause;
            }
        }

        internal static event Delegates.Pause_BeforeArgs _beforePause;
        internal static event Delegates.Pause_NormalArgs _afterPause;

        private static void Pause(On.HeroController.orig_Pause orig, HeroController self)
        {
            Delegates.Params_Pause @params = new()
            {
                self = self
            };
            _beforePause?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPause != null) _afterPause.Invoke(@params);
        }

        internal static void HookUnPause()
        {
            if (!HookedList.Contains("UnPause"))
            {
                HookedList.Add("UnPause");
                On.HeroController.UnPause += UnPause;
            }
        }

        internal static event Delegates.UnPause_BeforeArgs _beforeUnPause;
        internal static event Delegates.UnPause_NormalArgs _afterUnPause;

        private static void UnPause(On.HeroController.orig_UnPause orig, HeroController self)
        {
            Delegates.Params_UnPause @params = new()
            {
                self = self
            };
            _beforeUnPause?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnPause != null) _afterUnPause.Invoke(@params);
        }

        internal static void HookNearBench()
        {
            if (!HookedList.Contains("NearBench"))
            {
                HookedList.Add("NearBench");
                On.HeroController.NearBench += NearBench;
            }
        }

        internal static event Delegates.NearBench_BeforeArgs _beforeNearBench;
        internal static event Delegates.NearBench_NormalArgs _afterNearBench;

        private static void NearBench(On.HeroController.orig_NearBench orig, HeroController self, bool isNearBench)
        {
            Delegates.Params_NearBench @params = new()
            {
                self = self, isNearBench = isNearBench
            };
            _beforeNearBench?.Invoke(@params);
            self = @params.self;
            isNearBench = @params.isNearBench;
            orig(self, isNearBench);
            if (_afterNearBench != null) _afterNearBench.Invoke(@params);
        }

        internal static void HookSetWalkZone()
        {
            if (!HookedList.Contains("SetWalkZone"))
            {
                HookedList.Add("SetWalkZone");
                On.HeroController.SetWalkZone += SetWalkZone;
            }
        }

        internal static event Delegates.SetWalkZone_BeforeArgs _beforeSetWalkZone;
        internal static event Delegates.SetWalkZone_NormalArgs _afterSetWalkZone;

        private static void SetWalkZone(On.HeroController.orig_SetWalkZone orig, HeroController self, bool inWalkZone)
        {
            Delegates.Params_SetWalkZone @params = new()
            {
                self = self, inWalkZone = inWalkZone
            };
            _beforeSetWalkZone?.Invoke(@params);
            self = @params.self;
            inWalkZone = @params.inWalkZone;
            orig(self, inWalkZone);
            if (_afterSetWalkZone != null) _afterSetWalkZone.Invoke(@params);
        }

        internal static void HookResetState()
        {
            if (!HookedList.Contains("ResetState"))
            {
                HookedList.Add("ResetState");
                On.HeroController.ResetState += ResetState;
            }
        }

        internal static event Delegates.ResetState_BeforeArgs _beforeResetState;
        internal static event Delegates.ResetState_NormalArgs _afterResetState;

        private static void ResetState(On.HeroController.orig_ResetState orig, HeroController self)
        {
            Delegates.Params_ResetState @params = new()
            {
                self = self
            };
            _beforeResetState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetState != null) _afterResetState.Invoke(@params);
        }

        internal static void HookStopPlayingAudio()
        {
            if (!HookedList.Contains("StopPlayingAudio"))
            {
                HookedList.Add("StopPlayingAudio");
                On.HeroController.StopPlayingAudio += StopPlayingAudio;
            }
        }

        internal static event Delegates.StopPlayingAudio_BeforeArgs _beforeStopPlayingAudio;
        internal static event Delegates.StopPlayingAudio_NormalArgs _afterStopPlayingAudio;

        private static void StopPlayingAudio(On.HeroController.orig_StopPlayingAudio orig, HeroController self)
        {
            Delegates.Params_StopPlayingAudio @params = new()
            {
                self = self
            };
            _beforeStopPlayingAudio?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopPlayingAudio != null) _afterStopPlayingAudio.Invoke(@params);
        }

        internal static void HookPauseAudio()
        {
            if (!HookedList.Contains("PauseAudio"))
            {
                HookedList.Add("PauseAudio");
                On.HeroController.PauseAudio += PauseAudio;
            }
        }

        internal static event Delegates.PauseAudio_BeforeArgs _beforePauseAudio;
        internal static event Delegates.PauseAudio_NormalArgs _afterPauseAudio;

        private static void PauseAudio(On.HeroController.orig_PauseAudio orig, HeroController self)
        {
            Delegates.Params_PauseAudio @params = new()
            {
                self = self
            };
            _beforePauseAudio?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPauseAudio != null) _afterPauseAudio.Invoke(@params);
        }

        internal static void HookUnPauseAudio()
        {
            if (!HookedList.Contains("UnPauseAudio"))
            {
                HookedList.Add("UnPauseAudio");
                On.HeroController.UnPauseAudio += UnPauseAudio;
            }
        }

        internal static event Delegates.UnPauseAudio_BeforeArgs _beforeUnPauseAudio;
        internal static event Delegates.UnPauseAudio_NormalArgs _afterUnPauseAudio;

        private static void UnPauseAudio(On.HeroController.orig_UnPauseAudio orig, HeroController self)
        {
            Delegates.Params_UnPauseAudio @params = new()
            {
                self = self
            };
            _beforeUnPauseAudio?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnPauseAudio != null) _afterUnPauseAudio.Invoke(@params);
        }

        internal static void HookPauseInput()
        {
            if (!HookedList.Contains("PauseInput"))
            {
                HookedList.Add("PauseInput");
                On.HeroController.PauseInput += PauseInput;
            }
        }

        internal static event Delegates.PauseInput_BeforeArgs _beforePauseInput;
        internal static event Delegates.PauseInput_NormalArgs _afterPauseInput;

        private static void PauseInput(On.HeroController.orig_PauseInput orig, HeroController self)
        {
            Delegates.Params_PauseInput @params = new()
            {
                self = self
            };
            _beforePauseInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPauseInput != null) _afterPauseInput.Invoke(@params);
        }

        internal static void HookUnPauseInput()
        {
            if (!HookedList.Contains("UnPauseInput"))
            {
                HookedList.Add("UnPauseInput");
                On.HeroController.UnPauseInput += UnPauseInput;
            }
        }

        internal static event Delegates.UnPauseInput_BeforeArgs _beforeUnPauseInput;
        internal static event Delegates.UnPauseInput_NormalArgs _afterUnPauseInput;

        private static void UnPauseInput(On.HeroController.orig_UnPauseInput orig, HeroController self)
        {
            Delegates.Params_UnPauseInput @params = new()
            {
                self = self
            };
            _beforeUnPauseInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnPauseInput != null) _afterUnPauseInput.Invoke(@params);
        }

        internal static void HookSpawnSoftLandingPrefab()
        {
            if (!HookedList.Contains("SpawnSoftLandingPrefab"))
            {
                HookedList.Add("SpawnSoftLandingPrefab");
                On.HeroController.SpawnSoftLandingPrefab += SpawnSoftLandingPrefab;
            }
        }

        internal static event Delegates.SpawnSoftLandingPrefab_BeforeArgs _beforeSpawnSoftLandingPrefab;
        internal static event Delegates.SpawnSoftLandingPrefab_NormalArgs _afterSpawnSoftLandingPrefab;

        private static void SpawnSoftLandingPrefab(On.HeroController.orig_SpawnSoftLandingPrefab orig,
            HeroController self)
        {
            Delegates.Params_SpawnSoftLandingPrefab @params = new()
            {
                self = self
            };
            _beforeSpawnSoftLandingPrefab?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSpawnSoftLandingPrefab != null) _afterSpawnSoftLandingPrefab.Invoke(@params);
        }

        internal static void HookAffectedByGravity()
        {
            if (!HookedList.Contains("AffectedByGravity"))
            {
                HookedList.Add("AffectedByGravity");
                On.HeroController.AffectedByGravity += AffectedByGravity;
            }
        }

        internal static event Delegates.AffectedByGravity_BeforeArgs _beforeAffectedByGravity;
        internal static event Delegates.AffectedByGravity_NormalArgs _afterAffectedByGravity;

        private static void AffectedByGravity(On.HeroController.orig_AffectedByGravity orig, HeroController self,
            bool gravityApplies)
        {
            Delegates.Params_AffectedByGravity @params = new()
            {
                self = self, gravityApplies = gravityApplies
            };
            _beforeAffectedByGravity?.Invoke(@params);
            self = @params.self;
            gravityApplies = @params.gravityApplies;
            orig(self, gravityApplies);
            if (_afterAffectedByGravity != null) _afterAffectedByGravity.Invoke(@params);
        }

        internal static void HookLookForInput()
        {
            if (!HookedList.Contains("LookForInput"))
            {
                HookedList.Add("LookForInput");
                On.HeroController.LookForInput += LookForInput;
            }
        }

        internal static event Delegates.LookForInput_BeforeArgs _beforeLookForInput;
        internal static event Delegates.LookForInput_NormalArgs _afterLookForInput;

        private static void LookForInput(On.HeroController.orig_LookForInput orig, HeroController self)
        {
            Delegates.Params_LookForInput @params = new()
            {
                self = self
            };
            _beforeLookForInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLookForInput != null) _afterLookForInput.Invoke(@params);
        }

        internal static void HookLookForQueueInput()
        {
            if (!HookedList.Contains("LookForQueueInput"))
            {
                HookedList.Add("LookForQueueInput");
                On.HeroController.LookForQueueInput += LookForQueueInput;
            }
        }

        internal static event Delegates.LookForQueueInput_BeforeArgs _beforeLookForQueueInput;
        internal static event Delegates.LookForQueueInput_NormalArgs _afterLookForQueueInput;

        private static void LookForQueueInput(On.HeroController.orig_LookForQueueInput orig, HeroController self)
        {
            Delegates.Params_LookForQueueInput @params = new()
            {
                self = self
            };
            _beforeLookForQueueInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLookForQueueInput != null) _afterLookForQueueInput.Invoke(@params);
        }

        internal static void HookHeroJump()
        {
            if (!HookedList.Contains("HeroJump"))
            {
                HookedList.Add("HeroJump");
                On.HeroController.HeroJump += HeroJump;
            }
        }

        internal static event Delegates.HeroJump_BeforeArgs _beforeHeroJump;
        internal static event Delegates.HeroJump_NormalArgs _afterHeroJump;

        private static void HeroJump(On.HeroController.orig_HeroJump orig, HeroController self)
        {
            Delegates.Params_HeroJump @params = new()
            {
                self = self
            };
            _beforeHeroJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHeroJump != null) _afterHeroJump.Invoke(@params);
        }

        internal static void HookHeroJumpNoEffect()
        {
            if (!HookedList.Contains("HeroJumpNoEffect"))
            {
                HookedList.Add("HeroJumpNoEffect");
                On.HeroController.HeroJumpNoEffect += HeroJumpNoEffect;
            }
        }

        internal static event Delegates.HeroJumpNoEffect_BeforeArgs _beforeHeroJumpNoEffect;
        internal static event Delegates.HeroJumpNoEffect_NormalArgs _afterHeroJumpNoEffect;

        private static void HeroJumpNoEffect(On.HeroController.orig_HeroJumpNoEffect orig, HeroController self)
        {
            Delegates.Params_HeroJumpNoEffect @params = new()
            {
                self = self
            };
            _beforeHeroJumpNoEffect?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHeroJumpNoEffect != null) _afterHeroJumpNoEffect.Invoke(@params);
        }

        internal static void HookDoWallJump()
        {
            if (!HookedList.Contains("DoWallJump"))
            {
                HookedList.Add("DoWallJump");
                On.HeroController.DoWallJump += DoWallJump;
            }
        }

        internal static event Delegates.DoWallJump_BeforeArgs _beforeDoWallJump;
        internal static event Delegates.DoWallJump_NormalArgs _afterDoWallJump;

        private static void DoWallJump(On.HeroController.orig_DoWallJump orig, HeroController self)
        {
            Delegates.Params_DoWallJump @params = new()
            {
                self = self
            };
            _beforeDoWallJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoWallJump != null) _afterDoWallJump.Invoke(@params);
        }

        internal static void HookDoDoubleJump()
        {
            if (!HookedList.Contains("DoDoubleJump"))
            {
                HookedList.Add("DoDoubleJump");
                On.HeroController.DoDoubleJump += DoDoubleJump;
            }
        }

        internal static event Delegates.DoDoubleJump_BeforeArgs _beforeDoDoubleJump;
        internal static event Delegates.DoDoubleJump_NormalArgs _afterDoDoubleJump;

        private static void DoDoubleJump(On.HeroController.orig_DoDoubleJump orig, HeroController self)
        {
            Delegates.Params_DoDoubleJump @params = new()
            {
                self = self
            };
            _beforeDoDoubleJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoDoubleJump != null) _afterDoDoubleJump.Invoke(@params);
        }

        internal static void HookDoHardLanding()
        {
            if (!HookedList.Contains("DoHardLanding"))
            {
                HookedList.Add("DoHardLanding");
                On.HeroController.DoHardLanding += DoHardLanding;
            }
        }

        internal static event Delegates.DoHardLanding_BeforeArgs _beforeDoHardLanding;
        internal static event Delegates.DoHardLanding_NormalArgs _afterDoHardLanding;

        private static void DoHardLanding(On.HeroController.orig_DoHardLanding orig, HeroController self)
        {
            Delegates.Params_DoHardLanding @params = new()
            {
                self = self
            };
            _beforeDoHardLanding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoHardLanding != null) _afterDoHardLanding.Invoke(@params);
        }

        internal static void HookDoAttack()
        {
            if (!HookedList.Contains("DoAttack"))
            {
                HookedList.Add("DoAttack");
                On.HeroController.DoAttack += DoAttack;
            }
        }

        internal static event Delegates.DoAttack_BeforeArgs _beforeDoAttack;
        internal static event Delegates.DoAttack_NormalArgs _afterDoAttack;

        private static void DoAttack(On.HeroController.orig_DoAttack orig, HeroController self)
        {
            Delegates.Params_DoAttack @params = new()
            {
                self = self
            };
            _beforeDoAttack?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoAttack != null) _afterDoAttack.Invoke(@params);
        }

        internal static void HookHeroDash()
        {
            if (!HookedList.Contains("HeroDash"))
            {
                HookedList.Add("HeroDash");
                On.HeroController.HeroDash += HeroDash;
            }
        }

        internal static event Delegates.HeroDash_BeforeArgs _beforeHeroDash;
        internal static event Delegates.HeroDash_NormalArgs _afterHeroDash;

        private static void HeroDash(On.HeroController.orig_HeroDash orig, HeroController self)
        {
            Delegates.Params_HeroDash @params = new()
            {
                self = self
            };
            _beforeHeroDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterHeroDash != null) _afterHeroDash.Invoke(@params);
        }

        internal static void HookStartFallRumble()
        {
            if (!HookedList.Contains("StartFallRumble"))
            {
                HookedList.Add("StartFallRumble");
                On.HeroController.StartFallRumble += StartFallRumble;
            }
        }

        internal static event Delegates.StartFallRumble_BeforeArgs _beforeStartFallRumble;
        internal static event Delegates.StartFallRumble_NormalArgs _afterStartFallRumble;

        private static void StartFallRumble(On.HeroController.orig_StartFallRumble orig, HeroController self)
        {
            Delegates.Params_StartFallRumble @params = new()
            {
                self = self
            };
            _beforeStartFallRumble?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartFallRumble != null) _afterStartFallRumble.Invoke(@params);
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                On.HeroController.SetState += SetState;
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_NormalArgs _afterSetState;

        private static void SetState(On.HeroController.orig_SetState orig, HeroController self, ActorStates newState)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self, newState = newState
            };
            _beforeSetState?.Invoke(@params);
            self = @params.self;
            newState = @params.newState;
            orig(self, newState);
            if (_afterSetState != null) _afterSetState.Invoke(@params);
        }

        internal static void HookFinishedEnteringScene()
        {
            if (!HookedList.Contains("FinishedEnteringScene"))
            {
                HookedList.Add("FinishedEnteringScene");
                On.HeroController.FinishedEnteringScene += FinishedEnteringScene;
            }
        }

        internal static event Delegates.FinishedEnteringScene_BeforeArgs _beforeFinishedEnteringScene;
        internal static event Delegates.FinishedEnteringScene_NormalArgs _afterFinishedEnteringScene;

        private static void FinishedEnteringScene(On.HeroController.orig_FinishedEnteringScene orig,
            HeroController self, bool setHazardMarker, bool preventRunBob)
        {
            Delegates.Params_FinishedEnteringScene @params = new()
            {
                self = self, setHazardMarker = setHazardMarker, preventRunBob = preventRunBob
            };
            _beforeFinishedEnteringScene?.Invoke(@params);
            self = @params.self;
            setHazardMarker = @params.setHazardMarker;
            preventRunBob = @params.preventRunBob;
            orig(self, setHazardMarker, preventRunBob);
            if (_afterFinishedEnteringScene != null) _afterFinishedEnteringScene.Invoke(@params);
        }

        internal static void HookDie()
        {
            if (!HookedList.Contains("Die"))
            {
                HookedList.Add("Die");
                On.HeroController.Die += Die;
            }
        }

        internal static event Delegates.Die_BeforeArgs _beforeDie;

        private static IEnumerator Die(On.HeroController.orig_Die orig, HeroController self)
        {
            Delegates.Params_Die @params = new()
            {
                self = self
            };
            _beforeDie?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookDieFromHazard()
        {
            if (!HookedList.Contains("DieFromHazard"))
            {
                HookedList.Add("DieFromHazard");
                On.HeroController.DieFromHazard += DieFromHazard;
            }
        }

        internal static event Delegates.DieFromHazard_BeforeArgs _beforeDieFromHazard;

        private static IEnumerator DieFromHazard(On.HeroController.orig_DieFromHazard orig, HeroController self,
            HazardType hazardType, float angle)
        {
            Delegates.Params_DieFromHazard @params = new()
            {
                self = self, hazardType = hazardType, angle = angle
            };
            _beforeDieFromHazard?.Invoke(@params);
            self = @params.self;
            hazardType = @params.hazardType;
            angle = @params.angle;
            return orig(self, hazardType, angle);
        }

        internal static void HookStartRecoil()
        {
            if (!HookedList.Contains("StartRecoil"))
            {
                HookedList.Add("StartRecoil");
                On.HeroController.StartRecoil += StartRecoil;
            }
        }

        internal static event Delegates.StartRecoil_BeforeArgs _beforeStartRecoil;

        private static IEnumerator StartRecoil(On.HeroController.orig_StartRecoil orig, HeroController self,
            CollisionSide impactSide, bool spawnDamageEffect, int damageAmount)
        {
            Delegates.Params_StartRecoil @params = new()
            {
                self = self, impactSide = impactSide, spawnDamageEffect = spawnDamageEffect, damageAmount = damageAmount
            };
            _beforeStartRecoil?.Invoke(@params);
            self = @params.self;
            impactSide = @params.impactSide;
            spawnDamageEffect = @params.spawnDamageEffect;
            damageAmount = @params.damageAmount;
            return orig(self, impactSide, spawnDamageEffect, damageAmount);
        }

        internal static void HookInvulnerable()
        {
            if (!HookedList.Contains("Invulnerable"))
            {
                HookedList.Add("Invulnerable");
                On.HeroController.Invulnerable += Invulnerable;
            }
        }

        internal static event Delegates.Invulnerable_BeforeArgs _beforeInvulnerable;

        private static IEnumerator Invulnerable(On.HeroController.orig_Invulnerable orig, HeroController self,
            float duration)
        {
            Delegates.Params_Invulnerable @params = new()
            {
                self = self, duration = duration
            };
            _beforeInvulnerable?.Invoke(@params);
            self = @params.self;
            duration = @params.duration;
            return orig(self, duration);
        }

        internal static void HookFirstFadeIn()
        {
            if (!HookedList.Contains("FirstFadeIn"))
            {
                HookedList.Add("FirstFadeIn");
                On.HeroController.FirstFadeIn += FirstFadeIn;
            }
        }

        internal static event Delegates.FirstFadeIn_BeforeArgs _beforeFirstFadeIn;

        private static IEnumerator FirstFadeIn(On.HeroController.orig_FirstFadeIn orig, HeroController self)
        {
            Delegates.Params_FirstFadeIn @params = new()
            {
                self = self
            };
            _beforeFirstFadeIn?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookFallCheck()
        {
            if (!HookedList.Contains("FallCheck"))
            {
                HookedList.Add("FallCheck");
                On.HeroController.FallCheck += FallCheck;
            }
        }

        internal static event Delegates.FallCheck_BeforeArgs _beforeFallCheck;
        internal static event Delegates.FallCheck_NormalArgs _afterFallCheck;

        private static void FallCheck(On.HeroController.orig_FallCheck orig, HeroController self)
        {
            Delegates.Params_FallCheck @params = new()
            {
                self = self
            };
            _beforeFallCheck?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFallCheck != null) _afterFallCheck.Invoke(@params);
        }

        internal static void HookOutOfBoundsCheck()
        {
            if (!HookedList.Contains("OutOfBoundsCheck"))
            {
                HookedList.Add("OutOfBoundsCheck");
                On.HeroController.OutOfBoundsCheck += OutOfBoundsCheck;
            }
        }

        internal static event Delegates.OutOfBoundsCheck_BeforeArgs _beforeOutOfBoundsCheck;
        internal static event Delegates.OutOfBoundsCheck_NormalArgs _afterOutOfBoundsCheck;

        private static void OutOfBoundsCheck(On.HeroController.orig_OutOfBoundsCheck orig, HeroController self)
        {
            Delegates.Params_OutOfBoundsCheck @params = new()
            {
                self = self
            };
            _beforeOutOfBoundsCheck?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOutOfBoundsCheck != null) _afterOutOfBoundsCheck.Invoke(@params);
        }

        internal static void HookConfirmOutOfBounds()
        {
            if (!HookedList.Contains("ConfirmOutOfBounds"))
            {
                HookedList.Add("ConfirmOutOfBounds");
                On.HeroController.ConfirmOutOfBounds += ConfirmOutOfBounds;
            }
        }

        internal static event Delegates.ConfirmOutOfBounds_BeforeArgs _beforeConfirmOutOfBounds;
        internal static event Delegates.ConfirmOutOfBounds_NormalArgs _afterConfirmOutOfBounds;

        private static void ConfirmOutOfBounds(On.HeroController.orig_ConfirmOutOfBounds orig, HeroController self)
        {
            Delegates.Params_ConfirmOutOfBounds @params = new()
            {
                self = self
            };
            _beforeConfirmOutOfBounds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterConfirmOutOfBounds != null) _afterConfirmOutOfBounds.Invoke(@params);
        }

        internal static void HookFailSafeChecks()
        {
            if (!HookedList.Contains("FailSafeChecks"))
            {
                HookedList.Add("FailSafeChecks");
                On.HeroController.FailSafeChecks += FailSafeChecks;
            }
        }

        internal static event Delegates.FailSafeChecks_BeforeArgs _beforeFailSafeChecks;
        internal static event Delegates.FailSafeChecks_NormalArgs _afterFailSafeChecks;

        private static void FailSafeChecks(On.HeroController.orig_FailSafeChecks orig, HeroController self)
        {
            Delegates.Params_FailSafeChecks @params = new()
            {
                self = self
            };
            _beforeFailSafeChecks?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFailSafeChecks != null) _afterFailSafeChecks.Invoke(@params);
        }

        internal static void HookLocateSpawnPoint()
        {
            if (!HookedList.Contains("LocateSpawnPoint"))
            {
                HookedList.Add("LocateSpawnPoint");
                On.HeroController.LocateSpawnPoint += LocateSpawnPoint;
            }
        }

        internal static event Delegates.LocateSpawnPoint_BeforeArgs _beforeLocateSpawnPoint;
        internal static event Delegates.LocateSpawnPoint_NormalArgs _afterLocateSpawnPoint;

        private static Transform LocateSpawnPoint(On.HeroController.orig_LocateSpawnPoint orig, HeroController self)
        {
            Delegates.Params_LocateSpawnPoint @params = new()
            {
                self = self
            };
            _beforeLocateSpawnPoint?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterLocateSpawnPoint != null) retVal = _afterLocateSpawnPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookCancelJump()
        {
            if (!HookedList.Contains("CancelJump"))
            {
                HookedList.Add("CancelJump");
                On.HeroController.CancelJump += CancelJump;
            }
        }

        internal static event Delegates.CancelJump_BeforeArgs _beforeCancelJump;
        internal static event Delegates.CancelJump_NormalArgs _afterCancelJump;

        private static void CancelJump(On.HeroController.orig_CancelJump orig, HeroController self)
        {
            Delegates.Params_CancelJump @params = new()
            {
                self = self
            };
            _beforeCancelJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelJump != null) _afterCancelJump.Invoke(@params);
        }

        internal static void HookCancelDoubleJump()
        {
            if (!HookedList.Contains("CancelDoubleJump"))
            {
                HookedList.Add("CancelDoubleJump");
                On.HeroController.CancelDoubleJump += CancelDoubleJump;
            }
        }

        internal static event Delegates.CancelDoubleJump_BeforeArgs _beforeCancelDoubleJump;
        internal static event Delegates.CancelDoubleJump_NormalArgs _afterCancelDoubleJump;

        private static void CancelDoubleJump(On.HeroController.orig_CancelDoubleJump orig, HeroController self)
        {
            Delegates.Params_CancelDoubleJump @params = new()
            {
                self = self
            };
            _beforeCancelDoubleJump?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelDoubleJump != null) _afterCancelDoubleJump.Invoke(@params);
        }

        internal static void HookCancelDash()
        {
            if (!HookedList.Contains("CancelDash"))
            {
                HookedList.Add("CancelDash");
                On.HeroController.CancelDash += CancelDash;
            }
        }

        internal static event Delegates.CancelDash_BeforeArgs _beforeCancelDash;
        internal static event Delegates.CancelDash_NormalArgs _afterCancelDash;

        private static void CancelDash(On.HeroController.orig_CancelDash orig, HeroController self)
        {
            Delegates.Params_CancelDash @params = new()
            {
                self = self
            };
            _beforeCancelDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelDash != null) _afterCancelDash.Invoke(@params);
        }

        internal static void HookCancelWallsliding()
        {
            if (!HookedList.Contains("CancelWallsliding"))
            {
                HookedList.Add("CancelWallsliding");
                On.HeroController.CancelWallsliding += CancelWallsliding;
            }
        }

        internal static event Delegates.CancelWallsliding_BeforeArgs _beforeCancelWallsliding;
        internal static event Delegates.CancelWallsliding_NormalArgs _afterCancelWallsliding;

        private static void CancelWallsliding(On.HeroController.orig_CancelWallsliding orig, HeroController self)
        {
            Delegates.Params_CancelWallsliding @params = new()
            {
                self = self
            };
            _beforeCancelWallsliding?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelWallsliding != null) _afterCancelWallsliding.Invoke(@params);
        }

        internal static void HookCancelBackDash()
        {
            if (!HookedList.Contains("CancelBackDash"))
            {
                HookedList.Add("CancelBackDash");
                On.HeroController.CancelBackDash += CancelBackDash;
            }
        }

        internal static event Delegates.CancelBackDash_BeforeArgs _beforeCancelBackDash;
        internal static event Delegates.CancelBackDash_NormalArgs _afterCancelBackDash;

        private static void CancelBackDash(On.HeroController.orig_CancelBackDash orig, HeroController self)
        {
            Delegates.Params_CancelBackDash @params = new()
            {
                self = self
            };
            _beforeCancelBackDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelBackDash != null) _afterCancelBackDash.Invoke(@params);
        }

        internal static void HookCancelDownAttack()
        {
            if (!HookedList.Contains("CancelDownAttack"))
            {
                HookedList.Add("CancelDownAttack");
                On.HeroController.CancelDownAttack += CancelDownAttack;
            }
        }

        internal static event Delegates.CancelDownAttack_BeforeArgs _beforeCancelDownAttack;
        internal static event Delegates.CancelDownAttack_NormalArgs _afterCancelDownAttack;

        private static void CancelDownAttack(On.HeroController.orig_CancelDownAttack orig, HeroController self)
        {
            Delegates.Params_CancelDownAttack @params = new()
            {
                self = self
            };
            _beforeCancelDownAttack?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelDownAttack != null) _afterCancelDownAttack.Invoke(@params);
        }

        internal static void HookCancelAttack()
        {
            if (!HookedList.Contains("CancelAttack"))
            {
                HookedList.Add("CancelAttack");
                On.HeroController.CancelAttack += CancelAttack;
            }
        }

        internal static event Delegates.CancelAttack_BeforeArgs _beforeCancelAttack;
        internal static event Delegates.CancelAttack_NormalArgs _afterCancelAttack;

        private static void CancelAttack(On.HeroController.orig_CancelAttack orig, HeroController self)
        {
            Delegates.Params_CancelAttack @params = new()
            {
                self = self
            };
            _beforeCancelAttack?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelAttack != null) _afterCancelAttack.Invoke(@params);
        }

        internal static void HookCancelBounce()
        {
            if (!HookedList.Contains("CancelBounce"))
            {
                HookedList.Add("CancelBounce");
                On.HeroController.CancelBounce += CancelBounce;
            }
        }

        internal static event Delegates.CancelBounce_BeforeArgs _beforeCancelBounce;
        internal static event Delegates.CancelBounce_NormalArgs _afterCancelBounce;

        private static void CancelBounce(On.HeroController.orig_CancelBounce orig, HeroController self)
        {
            Delegates.Params_CancelBounce @params = new()
            {
                self = self
            };
            _beforeCancelBounce?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelBounce != null) _afterCancelBounce.Invoke(@params);
        }

        internal static void HookCancelRecoilHorizontal()
        {
            if (!HookedList.Contains("CancelRecoilHorizontal"))
            {
                HookedList.Add("CancelRecoilHorizontal");
                On.HeroController.CancelRecoilHorizontal += CancelRecoilHorizontal;
            }
        }

        internal static event Delegates.CancelRecoilHorizontal_BeforeArgs _beforeCancelRecoilHorizontal;
        internal static event Delegates.CancelRecoilHorizontal_NormalArgs _afterCancelRecoilHorizontal;

        private static void CancelRecoilHorizontal(On.HeroController.orig_CancelRecoilHorizontal orig,
            HeroController self)
        {
            Delegates.Params_CancelRecoilHorizontal @params = new()
            {
                self = self
            };
            _beforeCancelRecoilHorizontal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelRecoilHorizontal != null) _afterCancelRecoilHorizontal.Invoke(@params);
        }

        internal static void HookCancelDamageRecoil()
        {
            if (!HookedList.Contains("CancelDamageRecoil"))
            {
                HookedList.Add("CancelDamageRecoil");
                On.HeroController.CancelDamageRecoil += CancelDamageRecoil;
            }
        }

        internal static event Delegates.CancelDamageRecoil_BeforeArgs _beforeCancelDamageRecoil;
        internal static event Delegates.CancelDamageRecoil_NormalArgs _afterCancelDamageRecoil;

        private static void CancelDamageRecoil(On.HeroController.orig_CancelDamageRecoil orig, HeroController self)
        {
            Delegates.Params_CancelDamageRecoil @params = new()
            {
                self = self
            };
            _beforeCancelDamageRecoil?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelDamageRecoil != null) _afterCancelDamageRecoil.Invoke(@params);
        }

        internal static void HookCancelFallEffects()
        {
            if (!HookedList.Contains("CancelFallEffects"))
            {
                HookedList.Add("CancelFallEffects");
                On.HeroController.CancelFallEffects += CancelFallEffects;
            }
        }

        internal static event Delegates.CancelFallEffects_BeforeArgs _beforeCancelFallEffects;
        internal static event Delegates.CancelFallEffects_NormalArgs _afterCancelFallEffects;

        private static void CancelFallEffects(On.HeroController.orig_CancelFallEffects orig, HeroController self)
        {
            Delegates.Params_CancelFallEffects @params = new()
            {
                self = self
            };
            _beforeCancelFallEffects?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCancelFallEffects != null) _afterCancelFallEffects.Invoke(@params);
        }

        internal static void HookResetAttacks()
        {
            if (!HookedList.Contains("ResetAttacks"))
            {
                HookedList.Add("ResetAttacks");
                On.HeroController.ResetAttacks += ResetAttacks;
            }
        }

        internal static event Delegates.ResetAttacks_BeforeArgs _beforeResetAttacks;
        internal static event Delegates.ResetAttacks_NormalArgs _afterResetAttacks;

        private static void ResetAttacks(On.HeroController.orig_ResetAttacks orig, HeroController self)
        {
            Delegates.Params_ResetAttacks @params = new()
            {
                self = self
            };
            _beforeResetAttacks?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAttacks != null) _afterResetAttacks.Invoke(@params);
        }

        internal static void HookResetAttacksDash()
        {
            if (!HookedList.Contains("ResetAttacksDash"))
            {
                HookedList.Add("ResetAttacksDash");
                On.HeroController.ResetAttacksDash += ResetAttacksDash;
            }
        }

        internal static event Delegates.ResetAttacksDash_BeforeArgs _beforeResetAttacksDash;
        internal static event Delegates.ResetAttacksDash_NormalArgs _afterResetAttacksDash;

        private static void ResetAttacksDash(On.HeroController.orig_ResetAttacksDash orig, HeroController self)
        {
            Delegates.Params_ResetAttacksDash @params = new()
            {
                self = self
            };
            _beforeResetAttacksDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAttacksDash != null) _afterResetAttacksDash.Invoke(@params);
        }

        internal static void HookResetMotion()
        {
            if (!HookedList.Contains("ResetMotion"))
            {
                HookedList.Add("ResetMotion");
                On.HeroController.ResetMotion += ResetMotion;
            }
        }

        internal static event Delegates.ResetMotion_BeforeArgs _beforeResetMotion;
        internal static event Delegates.ResetMotion_NormalArgs _afterResetMotion;

        private static void ResetMotion(On.HeroController.orig_ResetMotion orig, HeroController self)
        {
            Delegates.Params_ResetMotion @params = new()
            {
                self = self
            };
            _beforeResetMotion?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetMotion != null) _afterResetMotion.Invoke(@params);
        }

        internal static void HookResetMotionNotVelocity()
        {
            if (!HookedList.Contains("ResetMotionNotVelocity"))
            {
                HookedList.Add("ResetMotionNotVelocity");
                On.HeroController.ResetMotionNotVelocity += ResetMotionNotVelocity;
            }
        }

        internal static event Delegates.ResetMotionNotVelocity_BeforeArgs _beforeResetMotionNotVelocity;
        internal static event Delegates.ResetMotionNotVelocity_NormalArgs _afterResetMotionNotVelocity;

        private static void ResetMotionNotVelocity(On.HeroController.orig_ResetMotionNotVelocity orig,
            HeroController self)
        {
            Delegates.Params_ResetMotionNotVelocity @params = new()
            {
                self = self
            };
            _beforeResetMotionNotVelocity?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetMotionNotVelocity != null) _afterResetMotionNotVelocity.Invoke(@params);
        }

        internal static void HookResetLook()
        {
            if (!HookedList.Contains("ResetLook"))
            {
                HookedList.Add("ResetLook");
                On.HeroController.ResetLook += ResetLook;
            }
        }

        internal static event Delegates.ResetLook_BeforeArgs _beforeResetLook;
        internal static event Delegates.ResetLook_NormalArgs _afterResetLook;

        private static void ResetLook(On.HeroController.orig_ResetLook orig, HeroController self)
        {
            Delegates.Params_ResetLook @params = new()
            {
                self = self
            };
            _beforeResetLook?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetLook != null) _afterResetLook.Invoke(@params);
        }

        internal static void HookResetInput()
        {
            if (!HookedList.Contains("ResetInput"))
            {
                HookedList.Add("ResetInput");
                On.HeroController.ResetInput += ResetInput;
            }
        }

        internal static event Delegates.ResetInput_BeforeArgs _beforeResetInput;
        internal static event Delegates.ResetInput_NormalArgs _afterResetInput;

        private static void ResetInput(On.HeroController.orig_ResetInput orig, HeroController self)
        {
            Delegates.Params_ResetInput @params = new()
            {
                self = self
            };
            _beforeResetInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetInput != null) _afterResetInput.Invoke(@params);
        }

        internal static void HookBackOnGround()
        {
            if (!HookedList.Contains("BackOnGround"))
            {
                HookedList.Add("BackOnGround");
                On.HeroController.BackOnGround += BackOnGround;
            }
        }

        internal static event Delegates.BackOnGround_BeforeArgs _beforeBackOnGround;
        internal static event Delegates.BackOnGround_NormalArgs _afterBackOnGround;

        private static void BackOnGround(On.HeroController.orig_BackOnGround orig, HeroController self)
        {
            Delegates.Params_BackOnGround @params = new()
            {
                self = self
            };
            _beforeBackOnGround?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackOnGround != null) _afterBackOnGround.Invoke(@params);
        }

        internal static void HookJumpReleased()
        {
            if (!HookedList.Contains("JumpReleased"))
            {
                HookedList.Add("JumpReleased");
                On.HeroController.JumpReleased += JumpReleased;
            }
        }

        internal static event Delegates.JumpReleased_BeforeArgs _beforeJumpReleased;
        internal static event Delegates.JumpReleased_NormalArgs _afterJumpReleased;

        private static void JumpReleased(On.HeroController.orig_JumpReleased orig, HeroController self)
        {
            Delegates.Params_JumpReleased @params = new()
            {
                self = self
            };
            _beforeJumpReleased?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterJumpReleased != null) _afterJumpReleased.Invoke(@params);
        }

        internal static void HookFinishedDashing()
        {
            if (!HookedList.Contains("FinishedDashing"))
            {
                HookedList.Add("FinishedDashing");
                On.HeroController.FinishedDashing += FinishedDashing;
            }
        }

        internal static event Delegates.FinishedDashing_BeforeArgs _beforeFinishedDashing;
        internal static event Delegates.FinishedDashing_NormalArgs _afterFinishedDashing;

        private static void FinishedDashing(On.HeroController.orig_FinishedDashing orig, HeroController self)
        {
            Delegates.Params_FinishedDashing @params = new()
            {
                self = self
            };
            _beforeFinishedDashing?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFinishedDashing != null) _afterFinishedDashing.Invoke(@params);
        }

        internal static void HookSetStartingMotionState()
        {
            if (!HookedList.Contains("SetStartingMotionState"))
            {
                HookedList.Add("SetStartingMotionState");
                On.HeroController.SetStartingMotionState += SetStartingMotionState;
            }
        }

        internal static event Delegates.SetStartingMotionState_BeforeArgs _beforeSetStartingMotionState;
        internal static event Delegates.SetStartingMotionState_NormalArgs _afterSetStartingMotionState;

        private static void SetStartingMotionState(On.HeroController.orig_SetStartingMotionState orig,
            HeroController self)
        {
            Delegates.Params_SetStartingMotionState @params = new()
            {
                self = self
            };
            _beforeSetStartingMotionState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetStartingMotionState != null) _afterSetStartingMotionState.Invoke(@params);
        }

        internal static void HookSetStartingMotionState_bool()
        {
            if (!HookedList.Contains("SetStartingMotionState_bool"))
            {
                HookedList.Add("SetStartingMotionState_bool");
                On.HeroController.SetStartingMotionState_bool += SetStartingMotionState_bool;
            }
        }

        internal static event Delegates.SetStartingMotionState_bool_BeforeArgs _beforeSetStartingMotionState_bool;
        internal static event Delegates.SetStartingMotionState_bool_NormalArgs _afterSetStartingMotionState_bool;

        private static void SetStartingMotionState_bool(On.HeroController.orig_SetStartingMotionState_bool orig,
            HeroController self, bool preventRunDip)
        {
            Delegates.Params_SetStartingMotionState_bool @params = new()
            {
                self = self, preventRunDip = preventRunDip
            };
            _beforeSetStartingMotionState_bool?.Invoke(@params);
            self = @params.self;
            preventRunDip = @params.preventRunDip;
            orig(self, preventRunDip);
            if (_afterSetStartingMotionState_bool != null) _afterSetStartingMotionState_bool.Invoke(@params);
        }

        internal static void HookEnterAcid()
        {
            if (!HookedList.Contains("EnterAcid"))
            {
                HookedList.Add("EnterAcid");
                On.HeroController.EnterAcid += EnterAcid;
            }
        }

        internal static event Delegates.EnterAcid_BeforeArgs _beforeEnterAcid;
        internal static event Delegates.EnterAcid_NormalArgs _afterEnterAcid;

        private static void EnterAcid(On.HeroController.orig_EnterAcid orig, HeroController self)
        {
            Delegates.Params_EnterAcid @params = new()
            {
                self = self
            };
            _beforeEnterAcid?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterEnterAcid != null) _afterEnterAcid.Invoke(@params);
        }

        internal static void HookExitAcid()
        {
            if (!HookedList.Contains("ExitAcid"))
            {
                HookedList.Add("ExitAcid");
                On.HeroController.ExitAcid += ExitAcid;
            }
        }

        internal static event Delegates.ExitAcid_BeforeArgs _beforeExitAcid;
        internal static event Delegates.ExitAcid_NormalArgs _afterExitAcid;

        private static void ExitAcid(On.HeroController.orig_ExitAcid orig, HeroController self)
        {
            Delegates.Params_ExitAcid @params = new()
            {
                self = self
            };
            _beforeExitAcid?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterExitAcid != null) _afterExitAcid.Invoke(@params);
        }

        internal static void HookTileMapTest()
        {
            if (!HookedList.Contains("TileMapTest"))
            {
                HookedList.Add("TileMapTest");
                On.HeroController.TileMapTest += TileMapTest;
            }
        }

        internal static event Delegates.TileMapTest_BeforeArgs _beforeTileMapTest;
        internal static event Delegates.TileMapTest_NormalArgs _afterTileMapTest;

        private static void TileMapTest(On.HeroController.orig_TileMapTest orig, HeroController self)
        {
            Delegates.Params_TileMapTest @params = new()
            {
                self = self
            };
            _beforeTileMapTest?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterTileMapTest != null) _afterTileMapTest.Invoke(@params);
        }

        internal static void HookTilemapTestPause()
        {
            if (!HookedList.Contains("TilemapTestPause"))
            {
                HookedList.Add("TilemapTestPause");
                On.HeroController.TilemapTestPause += TilemapTestPause;
            }
        }

        internal static event Delegates.TilemapTestPause_BeforeArgs _beforeTilemapTestPause;

        private static IEnumerator TilemapTestPause(On.HeroController.orig_TilemapTestPause orig, HeroController self)
        {
            Delegates.Params_TilemapTestPause @params = new()
            {
                self = self
            };
            _beforeTilemapTestPause?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookStopTilemapTest()
        {
            if (!HookedList.Contains("StopTilemapTest"))
            {
                HookedList.Add("StopTilemapTest");
                On.HeroController.StopTilemapTest += StopTilemapTest;
            }
        }

        internal static event Delegates.StopTilemapTest_BeforeArgs _beforeStopTilemapTest;
        internal static event Delegates.StopTilemapTest_NormalArgs _afterStopTilemapTest;

        private static void StopTilemapTest(On.HeroController.orig_StopTilemapTest orig, HeroController self)
        {
            Delegates.Params_StopTilemapTest @params = new()
            {
                self = self
            };
            _beforeStopTilemapTest?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopTilemapTest != null) _afterStopTilemapTest.Invoke(@params);
        }

        internal static void HookCheckForTerrainThunk()
        {
            if (!HookedList.Contains("CheckForTerrainThunk"))
            {
                HookedList.Add("CheckForTerrainThunk");
                On.HeroController.CheckForTerrainThunk += CheckForTerrainThunk;
            }
        }

        internal static event Delegates.CheckForTerrainThunk_BeforeArgs _beforeCheckForTerrainThunk;

        private static IEnumerator CheckForTerrainThunk(On.HeroController.orig_CheckForTerrainThunk orig,
            HeroController self, AttackDirection attackDir)
        {
            Delegates.Params_CheckForTerrainThunk @params = new()
            {
                self = self, attackDir = attackDir
            };
            _beforeCheckForTerrainThunk?.Invoke(@params);
            self = @params.self;
            attackDir = @params.attackDir;
            return orig(self, attackDir);
        }

        internal static void HookCheckStillTouchingWall()
        {
            if (!HookedList.Contains("CheckStillTouchingWall"))
            {
                HookedList.Add("CheckStillTouchingWall");
                On.HeroController.CheckStillTouchingWall += CheckStillTouchingWall;
            }
        }

        internal static event Delegates.CheckStillTouchingWall_BeforeArgs _beforeCheckStillTouchingWall;
        internal static event Delegates.CheckStillTouchingWall_NormalArgs _afterCheckStillTouchingWall;

        private static bool CheckStillTouchingWall(On.HeroController.orig_CheckStillTouchingWall orig,
            HeroController self, CollisionSide side, bool checkTop)
        {
            Delegates.Params_CheckStillTouchingWall @params = new()
            {
                self = self, side = side, checkTop = checkTop
            };
            _beforeCheckStillTouchingWall?.Invoke(@params);
            self = @params.self;
            side = @params.side;
            checkTop = @params.checkTop;
            var retVal = orig(self, side, checkTop);
            if (_afterCheckStillTouchingWall != null) retVal = _afterCheckStillTouchingWall.Invoke(@params);
            return retVal;
        }

        internal static void HookCheckForBump()
        {
            if (!HookedList.Contains("CheckForBump"))
            {
                HookedList.Add("CheckForBump");
                On.HeroController.CheckForBump += CheckForBump;
            }
        }

        internal static event Delegates.CheckForBump_BeforeArgs _beforeCheckForBump;
        internal static event Delegates.CheckForBump_NormalArgs _afterCheckForBump;

        private static bool CheckForBump(On.HeroController.orig_CheckForBump orig, HeroController self,
            CollisionSide side)
        {
            Delegates.Params_CheckForBump @params = new()
            {
                self = self, side = side
            };
            _beforeCheckForBump?.Invoke(@params);
            self = @params.self;
            side = @params.side;
            var retVal = orig(self, side);
            if (_afterCheckForBump != null) retVal = _afterCheckForBump.Invoke(@params);
            return retVal;
        }

        internal static void HookCheckNearRoof()
        {
            if (!HookedList.Contains("CheckNearRoof"))
            {
                HookedList.Add("CheckNearRoof");
                On.HeroController.CheckNearRoof += CheckNearRoof;
            }
        }

        internal static event Delegates.CheckNearRoof_BeforeArgs _beforeCheckNearRoof;
        internal static event Delegates.CheckNearRoof_NormalArgs _afterCheckNearRoof;

        private static bool CheckNearRoof(On.HeroController.orig_CheckNearRoof orig, HeroController self)
        {
            Delegates.Params_CheckNearRoof @params = new()
            {
                self = self
            };
            _beforeCheckNearRoof?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCheckNearRoof != null) retVal = _afterCheckNearRoof.Invoke(@params);
            return retVal;
        }

        internal static void HookCheckTouchingGround()
        {
            if (!HookedList.Contains("CheckTouchingGround"))
            {
                HookedList.Add("CheckTouchingGround");
                On.HeroController.CheckTouchingGround += CheckTouchingGround;
            }
        }

        internal static event Delegates.CheckTouchingGround_BeforeArgs _beforeCheckTouchingGround;
        internal static event Delegates.CheckTouchingGround_NormalArgs _afterCheckTouchingGround;

        private static bool CheckTouchingGround(On.HeroController.orig_CheckTouchingGround orig, HeroController self)
        {
            Delegates.Params_CheckTouchingGround @params = new()
            {
                self = self
            };
            _beforeCheckTouchingGround?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCheckTouchingGround != null) retVal = _afterCheckTouchingGround.Invoke(@params);
            return retVal;
        }

        internal static void HookCheckTouching()
        {
            if (!HookedList.Contains("CheckTouching"))
            {
                HookedList.Add("CheckTouching");
                On.HeroController.CheckTouching += CheckTouching;
            }
        }

        internal static event Delegates.CheckTouching_BeforeArgs _beforeCheckTouching;
        internal static event Delegates.CheckTouching_NormalArgs _afterCheckTouching;

        private static List<CollisionSide> CheckTouching(On.HeroController.orig_CheckTouching orig, HeroController self,
            PhysLayers layer)
        {
            Delegates.Params_CheckTouching @params = new()
            {
                self = self, layer = layer
            };
            _beforeCheckTouching?.Invoke(@params);
            self = @params.self;
            layer = @params.layer;
            var retVal = orig(self, layer);
            if (_afterCheckTouching != null) retVal = _afterCheckTouching.Invoke(@params);
            return retVal;
        }

        internal static void HookCheckTouchingAdvanced()
        {
            if (!HookedList.Contains("CheckTouchingAdvanced"))
            {
                HookedList.Add("CheckTouchingAdvanced");
                On.HeroController.CheckTouchingAdvanced += CheckTouchingAdvanced;
            }
        }

        internal static event Delegates.CheckTouchingAdvanced_BeforeArgs _beforeCheckTouchingAdvanced;
        internal static event Delegates.CheckTouchingAdvanced_NormalArgs _afterCheckTouchingAdvanced;

        private static List<CollisionSide> CheckTouchingAdvanced(On.HeroController.orig_CheckTouchingAdvanced orig,
            HeroController self, PhysLayers layer)
        {
            Delegates.Params_CheckTouchingAdvanced @params = new()
            {
                self = self, layer = layer
            };
            _beforeCheckTouchingAdvanced?.Invoke(@params);
            self = @params.self;
            layer = @params.layer;
            var retVal = orig(self, layer);
            if (_afterCheckTouchingAdvanced != null) retVal = _afterCheckTouchingAdvanced.Invoke(@params);
            return retVal;
        }

        internal static void HookFindCollisionDirection()
        {
            if (!HookedList.Contains("FindCollisionDirection"))
            {
                HookedList.Add("FindCollisionDirection");
                On.HeroController.FindCollisionDirection += FindCollisionDirection;
            }
        }

        internal static event Delegates.FindCollisionDirection_BeforeArgs _beforeFindCollisionDirection;
        internal static event Delegates.FindCollisionDirection_NormalArgs _afterFindCollisionDirection;

        private static CollisionSide FindCollisionDirection(On.HeroController.orig_FindCollisionDirection orig,
            HeroController self, Collision2D collision)
        {
            Delegates.Params_FindCollisionDirection @params = new()
            {
                self = self, collision = collision
            };
            _beforeFindCollisionDirection?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            var retVal = orig(self, collision);
            if (_afterFindCollisionDirection != null) retVal = _afterFindCollisionDirection.Invoke(@params);
            return retVal;
        }

        internal static void HookCanJump()
        {
            if (!HookedList.Contains("CanJump"))
            {
                HookedList.Add("CanJump");
                On.HeroController.CanJump += CanJump;
            }
        }

        internal static event Delegates.CanJump_BeforeArgs _beforeCanJump;
        internal static event Delegates.CanJump_NormalArgs _afterCanJump;

        private static bool CanJump(On.HeroController.orig_CanJump orig, HeroController self)
        {
            Delegates.Params_CanJump @params = new()
            {
                self = self
            };
            _beforeCanJump?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanJump != null) retVal = _afterCanJump.Invoke(@params);
            return retVal;
        }

        internal static void HookCanDoubleJump()
        {
            if (!HookedList.Contains("CanDoubleJump"))
            {
                HookedList.Add("CanDoubleJump");
                On.HeroController.CanDoubleJump += CanDoubleJump;
            }
        }

        internal static event Delegates.CanDoubleJump_BeforeArgs _beforeCanDoubleJump;
        internal static event Delegates.CanDoubleJump_NormalArgs _afterCanDoubleJump;

        private static bool CanDoubleJump(On.HeroController.orig_CanDoubleJump orig, HeroController self)
        {
            Delegates.Params_CanDoubleJump @params = new()
            {
                self = self
            };
            _beforeCanDoubleJump?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanDoubleJump != null) retVal = _afterCanDoubleJump.Invoke(@params);
            return retVal;
        }

        internal static void HookCanInfiniteAirJump()
        {
            if (!HookedList.Contains("CanInfiniteAirJump"))
            {
                HookedList.Add("CanInfiniteAirJump");
                On.HeroController.CanInfiniteAirJump += CanInfiniteAirJump;
            }
        }

        internal static event Delegates.CanInfiniteAirJump_BeforeArgs _beforeCanInfiniteAirJump;
        internal static event Delegates.CanInfiniteAirJump_NormalArgs _afterCanInfiniteAirJump;

        private static bool CanInfiniteAirJump(On.HeroController.orig_CanInfiniteAirJump orig, HeroController self)
        {
            Delegates.Params_CanInfiniteAirJump @params = new()
            {
                self = self
            };
            _beforeCanInfiniteAirJump?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanInfiniteAirJump != null) retVal = _afterCanInfiniteAirJump.Invoke(@params);
            return retVal;
        }

        internal static void HookCanSwim()
        {
            if (!HookedList.Contains("CanSwim"))
            {
                HookedList.Add("CanSwim");
                On.HeroController.CanSwim += CanSwim;
            }
        }

        internal static event Delegates.CanSwim_BeforeArgs _beforeCanSwim;
        internal static event Delegates.CanSwim_NormalArgs _afterCanSwim;

        private static bool CanSwim(On.HeroController.orig_CanSwim orig, HeroController self)
        {
            Delegates.Params_CanSwim @params = new()
            {
                self = self
            };
            _beforeCanSwim?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanSwim != null) retVal = _afterCanSwim.Invoke(@params);
            return retVal;
        }

        internal static void HookCanDash()
        {
            if (!HookedList.Contains("CanDash"))
            {
                HookedList.Add("CanDash");
                On.HeroController.CanDash += CanDash;
            }
        }

        internal static event Delegates.CanDash_BeforeArgs _beforeCanDash;
        internal static event Delegates.CanDash_NormalArgs _afterCanDash;

        private static bool CanDash(On.HeroController.orig_CanDash orig, HeroController self)
        {
            Delegates.Params_CanDash @params = new()
            {
                self = self
            };
            _beforeCanDash?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanDash != null) retVal = _afterCanDash.Invoke(@params);
            return retVal;
        }

        internal static void HookCanAttack()
        {
            if (!HookedList.Contains("CanAttack"))
            {
                HookedList.Add("CanAttack");
                On.HeroController.CanAttack += CanAttack;
            }
        }

        internal static event Delegates.CanAttack_BeforeArgs _beforeCanAttack;
        internal static event Delegates.CanAttack_NormalArgs _afterCanAttack;

        private static bool CanAttack(On.HeroController.orig_CanAttack orig, HeroController self)
        {
            Delegates.Params_CanAttack @params = new()
            {
                self = self
            };
            _beforeCanAttack?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanAttack != null) retVal = _afterCanAttack.Invoke(@params);
            return retVal;
        }

        internal static void HookCanNailCharge()
        {
            if (!HookedList.Contains("CanNailCharge"))
            {
                HookedList.Add("CanNailCharge");
                On.HeroController.CanNailCharge += CanNailCharge;
            }
        }

        internal static event Delegates.CanNailCharge_BeforeArgs _beforeCanNailCharge;
        internal static event Delegates.CanNailCharge_NormalArgs _afterCanNailCharge;

        private static bool CanNailCharge(On.HeroController.orig_CanNailCharge orig, HeroController self)
        {
            Delegates.Params_CanNailCharge @params = new()
            {
                self = self
            };
            _beforeCanNailCharge?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanNailCharge != null) retVal = _afterCanNailCharge.Invoke(@params);
            return retVal;
        }

        internal static void HookCanWallSlide()
        {
            if (!HookedList.Contains("CanWallSlide"))
            {
                HookedList.Add("CanWallSlide");
                On.HeroController.CanWallSlide += CanWallSlide;
            }
        }

        internal static event Delegates.CanWallSlide_BeforeArgs _beforeCanWallSlide;
        internal static event Delegates.CanWallSlide_NormalArgs _afterCanWallSlide;

        private static bool CanWallSlide(On.HeroController.orig_CanWallSlide orig, HeroController self)
        {
            Delegates.Params_CanWallSlide @params = new()
            {
                self = self
            };
            _beforeCanWallSlide?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanWallSlide != null) retVal = _afterCanWallSlide.Invoke(@params);
            return retVal;
        }

        internal static void HookCanTakeDamage()
        {
            if (!HookedList.Contains("CanTakeDamage"))
            {
                HookedList.Add("CanTakeDamage");
                On.HeroController.CanTakeDamage += CanTakeDamage;
            }
        }

        internal static event Delegates.CanTakeDamage_BeforeArgs _beforeCanTakeDamage;
        internal static event Delegates.CanTakeDamage_NormalArgs _afterCanTakeDamage;

        private static bool CanTakeDamage(On.HeroController.orig_CanTakeDamage orig, HeroController self)
        {
            Delegates.Params_CanTakeDamage @params = new()
            {
                self = self
            };
            _beforeCanTakeDamage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanTakeDamage != null) retVal = _afterCanTakeDamage.Invoke(@params);
            return retVal;
        }

        internal static void HookCanWallJump()
        {
            if (!HookedList.Contains("CanWallJump"))
            {
                HookedList.Add("CanWallJump");
                On.HeroController.CanWallJump += CanWallJump;
            }
        }

        internal static event Delegates.CanWallJump_BeforeArgs _beforeCanWallJump;
        internal static event Delegates.CanWallJump_NormalArgs _afterCanWallJump;

        private static bool CanWallJump(On.HeroController.orig_CanWallJump orig, HeroController self)
        {
            Delegates.Params_CanWallJump @params = new()
            {
                self = self
            };
            _beforeCanWallJump?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanWallJump != null) retVal = _afterCanWallJump.Invoke(@params);
            return retVal;
        }

        internal static void HookShouldHardLand()
        {
            if (!HookedList.Contains("ShouldHardLand"))
            {
                HookedList.Add("ShouldHardLand");
                On.HeroController.ShouldHardLand += ShouldHardLand;
            }
        }

        internal static event Delegates.ShouldHardLand_BeforeArgs _beforeShouldHardLand;
        internal static event Delegates.ShouldHardLand_NormalArgs _afterShouldHardLand;

        private static bool ShouldHardLand(On.HeroController.orig_ShouldHardLand orig, HeroController self,
            Collision2D collision)
        {
            Delegates.Params_ShouldHardLand @params = new()
            {
                self = self, collision = collision
            };
            _beforeShouldHardLand?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            var retVal = orig(self, collision);
            if (_afterShouldHardLand != null) retVal = _afterShouldHardLand.Invoke(@params);
            return retVal;
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.HeroController.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_NormalArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.HeroController.orig_OnCollisionEnter2D orig, HeroController self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionEnter2D != null) _afterOnCollisionEnter2D.Invoke(@params);
        }

        internal static void HookOnCollisionStay2D()
        {
            if (!HookedList.Contains("OnCollisionStay2D"))
            {
                HookedList.Add("OnCollisionStay2D");
                On.HeroController.OnCollisionStay2D += OnCollisionStay2D;
            }
        }

        internal static event Delegates.OnCollisionStay2D_BeforeArgs _beforeOnCollisionStay2D;
        internal static event Delegates.OnCollisionStay2D_NormalArgs _afterOnCollisionStay2D;

        private static void OnCollisionStay2D(On.HeroController.orig_OnCollisionStay2D orig, HeroController self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionStay2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionStay2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionStay2D != null) _afterOnCollisionStay2D.Invoke(@params);
        }

        internal static void HookOnCollisionExit2D()
        {
            if (!HookedList.Contains("OnCollisionExit2D"))
            {
                HookedList.Add("OnCollisionExit2D");
                On.HeroController.OnCollisionExit2D += OnCollisionExit2D;
            }
        }

        internal static event Delegates.OnCollisionExit2D_BeforeArgs _beforeOnCollisionExit2D;
        internal static event Delegates.OnCollisionExit2D_NormalArgs _afterOnCollisionExit2D;

        private static void OnCollisionExit2D(On.HeroController.orig_OnCollisionExit2D orig, HeroController self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionExit2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionExit2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionExit2D != null) _afterOnCollisionExit2D.Invoke(@params);
        }

        internal static void HookSetupGameRefs()
        {
            if (!HookedList.Contains("SetupGameRefs"))
            {
                HookedList.Add("SetupGameRefs");
                On.HeroController.SetupGameRefs += SetupGameRefs;
            }
        }

        internal static event Delegates.SetupGameRefs_BeforeArgs _beforeSetupGameRefs;
        internal static event Delegates.SetupGameRefs_NormalArgs _afterSetupGameRefs;

        private static void SetupGameRefs(On.HeroController.orig_SetupGameRefs orig, HeroController self)
        {
            Delegates.Params_SetupGameRefs @params = new()
            {
                self = self
            };
            _beforeSetupGameRefs?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupGameRefs != null) _afterSetupGameRefs.Invoke(@params);
        }

        internal static void HookSetupPools()
        {
            if (!HookedList.Contains("SetupPools"))
            {
                HookedList.Add("SetupPools");
                On.HeroController.SetupPools += SetupPools;
            }
        }

        internal static event Delegates.SetupPools_BeforeArgs _beforeSetupPools;
        internal static event Delegates.SetupPools_NormalArgs _afterSetupPools;

        private static void SetupPools(On.HeroController.orig_SetupPools orig, HeroController self)
        {
            Delegates.Params_SetupPools @params = new()
            {
                self = self
            };
            _beforeSetupPools?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetupPools != null) _afterSetupPools.Invoke(@params);
        }

        internal static void HookFilterInput()
        {
            if (!HookedList.Contains("FilterInput"))
            {
                HookedList.Add("FilterInput");
                On.HeroController.FilterInput += FilterInput;
            }
        }

        internal static event Delegates.FilterInput_BeforeArgs _beforeFilterInput;
        internal static event Delegates.FilterInput_NormalArgs _afterFilterInput;

        private static void FilterInput(On.HeroController.orig_FilterInput orig, HeroController self)
        {
            Delegates.Params_FilterInput @params = new()
            {
                self = self
            };
            _beforeFilterInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFilterInput != null) _afterFilterInput.Invoke(@params);
        }

        internal static void HookFindGroundPoint()
        {
            if (!HookedList.Contains("FindGroundPoint"))
            {
                HookedList.Add("FindGroundPoint");
                On.HeroController.FindGroundPoint += FindGroundPoint;
            }
        }

        internal static event Delegates.FindGroundPoint_BeforeArgs _beforeFindGroundPoint;
        internal static event Delegates.FindGroundPoint_NormalArgs _afterFindGroundPoint;

        private static Vector3 FindGroundPoint(On.HeroController.orig_FindGroundPoint orig, HeroController self,
            Vector2 startPoint, bool useExtended)
        {
            Delegates.Params_FindGroundPoint @params = new()
            {
                self = self, startPoint = startPoint, useExtended = useExtended
            };
            _beforeFindGroundPoint?.Invoke(@params);
            self = @params.self;
            startPoint = @params.startPoint;
            useExtended = @params.useExtended;
            var retVal = orig(self, startPoint, useExtended);
            if (_afterFindGroundPoint != null) retVal = _afterFindGroundPoint.Invoke(@params);
            return retVal;
        }

        internal static void HookFindGroundPointY()
        {
            if (!HookedList.Contains("FindGroundPointY"))
            {
                HookedList.Add("FindGroundPointY");
                On.HeroController.FindGroundPointY += FindGroundPointY;
            }
        }

        internal static event Delegates.FindGroundPointY_BeforeArgs _beforeFindGroundPointY;
        internal static event Delegates.FindGroundPointY_NormalArgs _afterFindGroundPointY;

        private static float FindGroundPointY(On.HeroController.orig_FindGroundPointY orig, HeroController self,
            float x, float y, bool useExtended)
        {
            Delegates.Params_FindGroundPointY @params = new()
            {
                self = self, x = x, y = y, useExtended = useExtended
            };
            _beforeFindGroundPointY?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            useExtended = @params.useExtended;
            var retVal = orig(self, x, y, useExtended);
            if (_afterFindGroundPointY != null) retVal = _afterFindGroundPointY.Invoke(@params);
            return retVal;
        }

        internal static void Hookorig_StartMPDrain()
        {
            if (!HookedList.Contains("orig_StartMPDrain"))
            {
                HookedList.Add("orig_StartMPDrain");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_StartMPDrain"),
                    orig_StartMPDrain);
            }
        }

        internal static event Delegates.orig_StartMPDrain_BeforeArgs _beforeorig_StartMPDrain;
        internal static event Delegates.orig_StartMPDrain_NormalArgs _afterorig_StartMPDrain;

        private static void orig_StartMPDrain(Action<HeroController, float> orig, HeroController self, float time)
        {
            Delegates.Params_orig_StartMPDrain @params = new()
            {
                self = self, time = time
            };
            _beforeorig_StartMPDrain?.Invoke(@params);
            self = @params.self;
            time = @params.time;
            orig(self, time);
            if (_afterorig_StartMPDrain != null) _afterorig_StartMPDrain.Invoke(@params);
        }

        internal static void Hookorig_Update()
        {
            if (!HookedList.Contains("orig_Update"))
            {
                HookedList.Add("orig_Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_Update"), orig_Update);
            }
        }

        internal static event Delegates.orig_Update_BeforeArgs _beforeorig_Update;
        internal static event Delegates.orig_Update_NormalArgs _afterorig_Update;

        private static void orig_Update(Action<HeroController> orig, HeroController self)
        {
            Delegates.Params_orig_Update @params = new()
            {
                self = self
            };
            _beforeorig_Update?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Update != null) _afterorig_Update.Invoke(@params);
        }

        internal static void HookOrigDashVector()
        {
            if (!HookedList.Contains("OrigDashVector"))
            {
                HookedList.Add("OrigDashVector");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "OrigDashVector"), OrigDashVector);
            }
        }

        internal static event Delegates.OrigDashVector_BeforeArgs _beforeOrigDashVector;
        internal static event Delegates.OrigDashVector_NormalArgs _afterOrigDashVector;

        private static Vector2 OrigDashVector(Func<HeroController, Vector2> orig, HeroController self)
        {
            Delegates.Params_OrigDashVector @params = new()
            {
                self = self
            };
            _beforeOrigDashVector?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterOrigDashVector != null) retVal = _afterOrigDashVector.Invoke(@params);
            return retVal;
        }

        internal static void Hookorig_Dash()
        {
            if (!HookedList.Contains("orig_Dash"))
            {
                HookedList.Add("orig_Dash");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_Dash"), orig_Dash);
            }
        }

        internal static event Delegates.orig_Dash_BeforeArgs _beforeorig_Dash;
        internal static event Delegates.orig_Dash_NormalArgs _afterorig_Dash;

        private static void orig_Dash(Action<HeroController> orig, HeroController self)
        {
            Delegates.Params_orig_Dash @params = new()
            {
                self = self
            };
            _beforeorig_Dash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Dash != null) _afterorig_Dash.Invoke(@params);
        }

        internal static void Hookorig_CharmUpdate()
        {
            if (!HookedList.Contains("orig_CharmUpdate"))
            {
                HookedList.Add("orig_CharmUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_CharmUpdate"), orig_CharmUpdate);
            }
        }

        internal static event Delegates.orig_CharmUpdate_BeforeArgs _beforeorig_CharmUpdate;
        internal static event Delegates.orig_CharmUpdate_NormalArgs _afterorig_CharmUpdate;

        private static void orig_CharmUpdate(Action<HeroController> orig, HeroController self)
        {
            Delegates.Params_orig_CharmUpdate @params = new()
            {
                self = self
            };
            _beforeorig_CharmUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_CharmUpdate != null) _afterorig_CharmUpdate.Invoke(@params);
        }

        internal static void Hookorig_DoAttack()
        {
            if (!HookedList.Contains("orig_DoAttack"))
            {
                HookedList.Add("orig_DoAttack");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_DoAttack"), orig_DoAttack);
            }
        }

        internal static event Delegates.orig_DoAttack_BeforeArgs _beforeorig_DoAttack;
        internal static event Delegates.orig_DoAttack_NormalArgs _afterorig_DoAttack;

        private static void orig_DoAttack(Action<HeroController> orig, HeroController self)
        {
            Delegates.Params_orig_DoAttack @params = new()
            {
                self = self
            };
            _beforeorig_DoAttack?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_DoAttack != null) _afterorig_DoAttack.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AcceptInput_BeforeArgs(Params_AcceptInput args);

        public delegate void AcceptInput_NormalArgs(Params_AcceptInput args);

        public delegate void AddGeo_BeforeArgs(Params_AddGeo args);

        public delegate void AddGeo_NormalArgs(Params_AddGeo args);

        public delegate void AddGeoQuietly_BeforeArgs(Params_AddGeoQuietly args);

        public delegate void AddGeoQuietly_NormalArgs(Params_AddGeoQuietly args);

        public delegate void AddGeoToCounter_BeforeArgs(Params_AddGeoToCounter args);

        public delegate void AddGeoToCounter_NormalArgs(Params_AddGeoToCounter args);

        public delegate void AddHealth_BeforeArgs(Params_AddHealth args);

        public delegate void AddHealth_NormalArgs(Params_AddHealth args);

        public delegate void AddMPCharge_BeforeArgs(Params_AddMPCharge args);

        public delegate void AddMPCharge_NormalArgs(Params_AddMPCharge args);

        public delegate void AddMPChargeSpa_BeforeArgs(Params_AddMPChargeSpa args);

        public delegate void AddMPChargeSpa_NormalArgs(Params_AddMPChargeSpa args);

        public delegate void AddToMaxHealth_BeforeArgs(Params_AddToMaxHealth args);

        public delegate void AddToMaxHealth_NormalArgs(Params_AddToMaxHealth args);

        public delegate void AddToMaxMPReserve_BeforeArgs(Params_AddToMaxMPReserve args);

        public delegate void AddToMaxMPReserve_NormalArgs(Params_AddToMaxMPReserve args);

        public delegate void AffectedByGravity_BeforeArgs(Params_AffectedByGravity args);

        public delegate void AffectedByGravity_NormalArgs(Params_AffectedByGravity args);

        public delegate void Attack_BeforeArgs(Params_Attack args);

        public delegate void Attack_NormalArgs(Params_Attack args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void BackDash_BeforeArgs(Params_BackDash args);

        public delegate void BackDash_NormalArgs(Params_BackDash args);

        public delegate void BackOnGround_BeforeArgs(Params_BackOnGround args);

        public delegate void BackOnGround_NormalArgs(Params_BackOnGround args);

        public delegate void BetaLeave_BeforeArgs(Params_BetaLeave args);

        public delegate IEnumerator BetaLeave_NormalArgs(Params_BetaLeave args);

        public delegate void BetaReturn_BeforeArgs(Params_BetaReturn args);

        public delegate IEnumerator BetaReturn_NormalArgs(Params_BetaReturn args);

        public delegate void Bounce_BeforeArgs(Params_Bounce args);

        public delegate void Bounce_NormalArgs(Params_Bounce args);

        public delegate void BounceHigh_BeforeArgs(Params_BounceHigh args);

        public delegate void BounceHigh_NormalArgs(Params_BounceHigh args);

        public delegate void CanAttack_BeforeArgs(Params_CanAttack args);

        public delegate bool CanAttack_NormalArgs(Params_CanAttack args);

        public delegate void CanBackDash_BeforeArgs(Params_CanBackDash args);

        public delegate bool CanBackDash_NormalArgs(Params_CanBackDash args);

        public delegate void CanCast_BeforeArgs(Params_CanCast args);

        public delegate bool CanCast_NormalArgs(Params_CanCast args);

        public delegate void CancelAttack_BeforeArgs(Params_CancelAttack args);

        public delegate void CancelAttack_NormalArgs(Params_CancelAttack args);

        public delegate void CancelBackDash_BeforeArgs(Params_CancelBackDash args);

        public delegate void CancelBackDash_NormalArgs(Params_CancelBackDash args);

        public delegate void CancelBounce_BeforeArgs(Params_CancelBounce args);

        public delegate void CancelBounce_NormalArgs(Params_CancelBounce args);

        public delegate void CancelDamageRecoil_BeforeArgs(Params_CancelDamageRecoil args);

        public delegate void CancelDamageRecoil_NormalArgs(Params_CancelDamageRecoil args);

        public delegate void CancelDash_BeforeArgs(Params_CancelDash args);

        public delegate void CancelDash_NormalArgs(Params_CancelDash args);

        public delegate void CancelDoubleJump_BeforeArgs(Params_CancelDoubleJump args);

        public delegate void CancelDoubleJump_NormalArgs(Params_CancelDoubleJump args);

        public delegate void CancelDownAttack_BeforeArgs(Params_CancelDownAttack args);

        public delegate void CancelDownAttack_NormalArgs(Params_CancelDownAttack args);

        public delegate void CancelFallEffects_BeforeArgs(Params_CancelFallEffects args);

        public delegate void CancelFallEffects_NormalArgs(Params_CancelFallEffects args);

        public delegate void CancelHeroJump_BeforeArgs(Params_CancelHeroJump args);

        public delegate void CancelHeroJump_NormalArgs(Params_CancelHeroJump args);

        public delegate void CancelJump_BeforeArgs(Params_CancelJump args);

        public delegate void CancelJump_NormalArgs(Params_CancelJump args);

        public delegate void CancelParryInvuln_BeforeArgs(Params_CancelParryInvuln args);

        public delegate void CancelParryInvuln_NormalArgs(Params_CancelParryInvuln args);

        public delegate void CancelRecoilHorizontal_BeforeArgs(Params_CancelRecoilHorizontal args);

        public delegate void CancelRecoilHorizontal_NormalArgs(Params_CancelRecoilHorizontal args);

        public delegate void CancelSuperDash_BeforeArgs(Params_CancelSuperDash args);

        public delegate void CancelSuperDash_NormalArgs(Params_CancelSuperDash args);

        public delegate void CancelWallsliding_BeforeArgs(Params_CancelWallsliding args);

        public delegate void CancelWallsliding_NormalArgs(Params_CancelWallsliding args);

        public delegate void CanDash_BeforeArgs(Params_CanDash args);

        public delegate bool CanDash_NormalArgs(Params_CanDash args);

        public delegate void CanDoubleJump_BeforeArgs(Params_CanDoubleJump args);

        public delegate bool CanDoubleJump_NormalArgs(Params_CanDoubleJump args);

        public delegate void CanDreamGate_BeforeArgs(Params_CanDreamGate args);

        public delegate bool CanDreamGate_NormalArgs(Params_CanDreamGate args);

        public delegate void CanDreamNail_BeforeArgs(Params_CanDreamNail args);

        public delegate bool CanDreamNail_NormalArgs(Params_CanDreamNail args);

        public delegate void CanFocus_BeforeArgs(Params_CanFocus args);

        public delegate bool CanFocus_NormalArgs(Params_CanFocus args);

        public delegate void CanInfiniteAirJump_BeforeArgs(Params_CanInfiniteAirJump args);

        public delegate bool CanInfiniteAirJump_NormalArgs(Params_CanInfiniteAirJump args);

        public delegate void CanInput_BeforeArgs(Params_CanInput args);

        public delegate bool CanInput_NormalArgs(Params_CanInput args);

        public delegate void CanInspect_BeforeArgs(Params_CanInspect args);

        public delegate bool CanInspect_NormalArgs(Params_CanInspect args);

        public delegate void CanInteract_BeforeArgs(Params_CanInteract args);

        public delegate bool CanInteract_NormalArgs(Params_CanInteract args);

        public delegate void CanJump_BeforeArgs(Params_CanJump args);

        public delegate bool CanJump_NormalArgs(Params_CanJump args);

        public delegate void CanNailArt_BeforeArgs(Params_CanNailArt args);

        public delegate bool CanNailArt_NormalArgs(Params_CanNailArt args);

        public delegate void CanNailCharge_BeforeArgs(Params_CanNailCharge args);

        public delegate bool CanNailCharge_NormalArgs(Params_CanNailCharge args);

        public delegate void CanOpenInventory_BeforeArgs(Params_CanOpenInventory args);

        public delegate bool CanOpenInventory_NormalArgs(Params_CanOpenInventory args);

        public delegate void CanQuickMap_BeforeArgs(Params_CanQuickMap args);

        public delegate bool CanQuickMap_NormalArgs(Params_CanQuickMap args);

        public delegate void CanSuperDash_BeforeArgs(Params_CanSuperDash args);

        public delegate bool CanSuperDash_NormalArgs(Params_CanSuperDash args);

        public delegate void CanSwim_BeforeArgs(Params_CanSwim args);

        public delegate bool CanSwim_NormalArgs(Params_CanSwim args);

        public delegate void CanTakeDamage_BeforeArgs(Params_CanTakeDamage args);

        public delegate bool CanTakeDamage_NormalArgs(Params_CanTakeDamage args);

        public delegate void CanTalk_BeforeArgs(Params_CanTalk args);

        public delegate bool CanTalk_NormalArgs(Params_CanTalk args);

        public delegate void CanWallJump_BeforeArgs(Params_CanWallJump args);

        public delegate bool CanWallJump_NormalArgs(Params_CanWallJump args);

        public delegate void CanWallSlide_BeforeArgs(Params_CanWallSlide args);

        public delegate bool CanWallSlide_NormalArgs(Params_CanWallSlide args);

        public delegate void CharmUpdate_BeforeArgs(Params_CharmUpdate args);

        public delegate void CharmUpdate_NormalArgs(Params_CharmUpdate args);

        public delegate void checkEnvironment_BeforeArgs(Params_checkEnvironment args);

        public delegate void checkEnvironment_NormalArgs(Params_checkEnvironment args);

        public delegate void CheckForBump_BeforeArgs(Params_CheckForBump args);

        public delegate bool CheckForBump_NormalArgs(Params_CheckForBump args);

        public delegate void CheckForTerrainThunk_BeforeArgs(Params_CheckForTerrainThunk args);

        public delegate IEnumerator CheckForTerrainThunk_NormalArgs(Params_CheckForTerrainThunk args);

        public delegate void CheckNearRoof_BeforeArgs(Params_CheckNearRoof args);

        public delegate bool CheckNearRoof_NormalArgs(Params_CheckNearRoof args);

        public delegate void CheckStillTouchingWall_BeforeArgs(Params_CheckStillTouchingWall args);

        public delegate bool CheckStillTouchingWall_NormalArgs(Params_CheckStillTouchingWall args);

        public delegate void CheckTouching_BeforeArgs(Params_CheckTouching args);

        public delegate List<CollisionSide> CheckTouching_NormalArgs(Params_CheckTouching args);

        public delegate void CheckTouchingAdvanced_BeforeArgs(Params_CheckTouchingAdvanced args);

        public delegate List<CollisionSide> CheckTouchingAdvanced_NormalArgs(Params_CheckTouchingAdvanced args);

        public delegate void CheckTouchingGround_BeforeArgs(Params_CheckTouchingGround args);

        public delegate bool CheckTouchingGround_NormalArgs(Params_CheckTouchingGround args);

        public delegate void ClearMP_BeforeArgs(Params_ClearMP args);

        public delegate void ClearMP_NormalArgs(Params_ClearMP args);

        public delegate void ClearMPSendEvents_BeforeArgs(Params_ClearMPSendEvents args);

        public delegate void ClearMPSendEvents_NormalArgs(Params_ClearMPSendEvents args);

        public delegate void ConfirmOutOfBounds_BeforeArgs(Params_ConfirmOutOfBounds args);

        public delegate void ConfirmOutOfBounds_NormalArgs(Params_ConfirmOutOfBounds args);

        public delegate void CycloneInvuln_BeforeArgs(Params_CycloneInvuln args);

        public delegate void CycloneInvuln_NormalArgs(Params_CycloneInvuln args);

        public delegate void Dash_BeforeArgs(Params_Dash args);

        public delegate void Dash_NormalArgs(Params_Dash args);

        public delegate void Die_BeforeArgs(Params_Die args);

        public delegate IEnumerator Die_NormalArgs(Params_Die args);

        public delegate void DieFromHazard_BeforeArgs(Params_DieFromHazard args);

        public delegate IEnumerator DieFromHazard_NormalArgs(Params_DieFromHazard args);

        public delegate void DoAttack_BeforeArgs(Params_DoAttack args);

        public delegate void DoAttack_NormalArgs(Params_DoAttack args);

        public delegate void DoDoubleJump_BeforeArgs(Params_DoDoubleJump args);

        public delegate void DoDoubleJump_NormalArgs(Params_DoDoubleJump args);

        public delegate void DoHardLanding_BeforeArgs(Params_DoHardLanding args);

        public delegate void DoHardLanding_NormalArgs(Params_DoHardLanding args);

        public delegate void DoubleJump_BeforeArgs(Params_DoubleJump args);

        public delegate void DoubleJump_NormalArgs(Params_DoubleJump args);

        public delegate void DoWallJump_BeforeArgs(Params_DoWallJump args);

        public delegate void DoWallJump_NormalArgs(Params_DoWallJump args);

        public delegate void EnableRenderer_BeforeArgs(Params_EnableRenderer args);

        public delegate void EnableRenderer_NormalArgs(Params_EnableRenderer args);

        public delegate void EndCyclone_BeforeArgs(Params_EndCyclone args);

        public delegate void EndCyclone_NormalArgs(Params_EndCyclone args);

        public delegate void EndTakeNoDamage_BeforeArgs(Params_EndTakeNoDamage args);

        public delegate void EndTakeNoDamage_NormalArgs(Params_EndTakeNoDamage args);

        public delegate void EnterAcid_BeforeArgs(Params_EnterAcid args);

        public delegate void EnterAcid_NormalArgs(Params_EnterAcid args);

        public delegate void EnterScene_BeforeArgs(Params_EnterScene args);

        public delegate IEnumerator EnterScene_NormalArgs(Params_EnterScene args);

        public delegate void EnterSceneDreamGate_BeforeArgs(Params_EnterSceneDreamGate args);

        public delegate void EnterSceneDreamGate_NormalArgs(Params_EnterSceneDreamGate args);

        public delegate void EnterWithoutInput_BeforeArgs(Params_EnterWithoutInput args);

        public delegate void EnterWithoutInput_NormalArgs(Params_EnterWithoutInput args);

        public delegate void ExitAcid_BeforeArgs(Params_ExitAcid args);

        public delegate void ExitAcid_NormalArgs(Params_ExitAcid args);

        public delegate void FaceLeft_BeforeArgs(Params_FaceLeft args);

        public delegate void FaceLeft_NormalArgs(Params_FaceLeft args);

        public delegate void FaceRight_BeforeArgs(Params_FaceRight args);

        public delegate void FaceRight_NormalArgs(Params_FaceRight args);

        public delegate void FailSafeChecks_BeforeArgs(Params_FailSafeChecks args);

        public delegate void FailSafeChecks_NormalArgs(Params_FailSafeChecks args);

        public delegate void FallCheck_BeforeArgs(Params_FallCheck args);

        public delegate void FallCheck_NormalArgs(Params_FallCheck args);

        public delegate void FilterInput_BeforeArgs(Params_FilterInput args);

        public delegate void FilterInput_NormalArgs(Params_FilterInput args);

        public delegate void FindCollisionDirection_BeforeArgs(Params_FindCollisionDirection args);

        public delegate CollisionSide FindCollisionDirection_NormalArgs(Params_FindCollisionDirection args);

        public delegate void FindGroundPoint_BeforeArgs(Params_FindGroundPoint args);

        public delegate Vector3 FindGroundPoint_NormalArgs(Params_FindGroundPoint args);

        public delegate void FindGroundPointY_BeforeArgs(Params_FindGroundPointY args);

        public delegate float FindGroundPointY_NormalArgs(Params_FindGroundPointY args);

        public delegate void FinishedDashing_BeforeArgs(Params_FinishedDashing args);

        public delegate void FinishedDashing_NormalArgs(Params_FinishedDashing args);

        public delegate void FinishedEnteringScene_BeforeArgs(Params_FinishedEnteringScene args);

        public delegate void FinishedEnteringScene_NormalArgs(Params_FinishedEnteringScene args);

        public delegate void FirstFadeIn_BeforeArgs(Params_FirstFadeIn args);

        public delegate IEnumerator FirstFadeIn_NormalArgs(Params_FirstFadeIn args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_NormalArgs(Params_FixedUpdate args);

        public delegate void FlipSprite_BeforeArgs(Params_FlipSprite args);

        public delegate void FlipSprite_NormalArgs(Params_FlipSprite args);

        public delegate void ForceHardLanding_BeforeArgs(Params_ForceHardLanding args);

        public delegate void ForceHardLanding_NormalArgs(Params_ForceHardLanding args);

        public delegate void get_fallTimer_BeforeArgs(Params_get_fallTimer args);

        public delegate float get_fallTimer_NormalArgs(Params_get_fallTimer args);

        public delegate void get_geoCounter_BeforeArgs(Params_get_geoCounter args);

        public delegate GeoCounter get_geoCounter_NormalArgs(Params_get_geoCounter args);

        public delegate void get_instance_BeforeArgs();

        public delegate HeroController get_instance_NormalArgs();

        public delegate void get_IsDreamReturning_BeforeArgs(Params_get_IsDreamReturning args);

        public delegate bool get_IsDreamReturning_NormalArgs(Params_get_IsDreamReturning args);

        public delegate void get_proxyFSM_BeforeArgs(Params_get_proxyFSM args);

        public delegate PlayMakerFSM get_proxyFSM_NormalArgs(Params_get_proxyFSM args);

        public delegate void get_sceneEntryGate_BeforeArgs(Params_get_sceneEntryGate args);

        public delegate TransitionPoint get_sceneEntryGate_NormalArgs(Params_get_sceneEntryGate args);

        public delegate void get_SilentInstance_BeforeArgs();

        public delegate HeroController get_SilentInstance_NormalArgs();

        public delegate void get_UnsafeInstance_BeforeArgs();

        public delegate HeroController get_UnsafeInstance_NormalArgs();

        public delegate void GetCState_BeforeArgs(Params_GetCState args);

        public delegate bool GetCState_NormalArgs(Params_GetCState args);

        public delegate void GetEntryGateName_BeforeArgs(Params_GetEntryGateName args);

        public delegate string GetEntryGateName_NormalArgs(Params_GetEntryGateName args);

        public delegate void GetState_BeforeArgs(Params_GetState args);

        public delegate bool GetState_NormalArgs(Params_GetState args);

        public delegate void HazardRespawn_BeforeArgs(Params_HazardRespawn args);

        public delegate IEnumerator HazardRespawn_NormalArgs(Params_HazardRespawn args);

        public delegate void HeroDash_BeforeArgs(Params_HeroDash args);

        public delegate void HeroDash_NormalArgs(Params_HeroDash args);

        public delegate void HeroJump_BeforeArgs(Params_HeroJump args);

        public delegate void HeroJump_NormalArgs(Params_HeroJump args);

        public delegate void HeroJumpNoEffect_BeforeArgs(Params_HeroJumpNoEffect args);

        public delegate void HeroJumpNoEffect_NormalArgs(Params_HeroJumpNoEffect args);

        public delegate void IgnoreInput_BeforeArgs(Params_IgnoreInput args);

        public delegate void IgnoreInput_NormalArgs(Params_IgnoreInput args);

        public delegate void IgnoreInputWithoutReset_BeforeArgs(Params_IgnoreInputWithoutReset args);

        public delegate void IgnoreInputWithoutReset_NormalArgs(Params_IgnoreInputWithoutReset args);

        public delegate void Invulnerable_BeforeArgs(Params_Invulnerable args);

        public delegate IEnumerator Invulnerable_NormalArgs(Params_Invulnerable args);

        public delegate void IsSwimming_BeforeArgs(Params_IsSwimming args);

        public delegate void IsSwimming_NormalArgs(Params_IsSwimming args);

        public delegate void Jump_BeforeArgs(Params_Jump args);

        public delegate void Jump_NormalArgs(Params_Jump args);

        public delegate void JumpReleased_BeforeArgs(Params_JumpReleased args);

        public delegate void JumpReleased_NormalArgs(Params_JumpReleased args);

        public delegate void LeaveScene_BeforeArgs(Params_LeaveScene args);

        public delegate void LeaveScene_NormalArgs(Params_LeaveScene args);

        public delegate void LocateSpawnPoint_BeforeArgs(Params_LocateSpawnPoint args);

        public delegate Transform LocateSpawnPoint_NormalArgs(Params_LocateSpawnPoint args);

        public delegate void LookForInput_BeforeArgs(Params_LookForInput args);

        public delegate void LookForInput_NormalArgs(Params_LookForInput args);

        public delegate void LookForQueueInput_BeforeArgs(Params_LookForQueueInput args);

        public delegate void LookForQueueInput_NormalArgs(Params_LookForQueueInput args);

        public delegate void MaxHealth_BeforeArgs(Params_MaxHealth args);

        public delegate void MaxHealth_NormalArgs(Params_MaxHealth args);

        public delegate void MaxHealthKeepBlue_BeforeArgs(Params_MaxHealthKeepBlue args);

        public delegate void MaxHealthKeepBlue_NormalArgs(Params_MaxHealthKeepBlue args);

        public delegate void Move_BeforeArgs(Params_Move args);

        public delegate void Move_NormalArgs(Params_Move args);

        public delegate void NailParry_BeforeArgs(Params_NailParry args);

        public delegate void NailParry_NormalArgs(Params_NailParry args);

        public delegate void NailParryRecover_BeforeArgs(Params_NailParryRecover args);

        public delegate void NailParryRecover_NormalArgs(Params_NailParryRecover args);

        public delegate void NearBench_BeforeArgs(Params_NearBench args);

        public delegate void NearBench_NormalArgs(Params_NearBench args);

        public delegate void NotSwimming_BeforeArgs(Params_NotSwimming args);

        public delegate void NotSwimming_NormalArgs(Params_NotSwimming args);

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_NormalArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionExit2D_BeforeArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionExit2D_NormalArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionStay2D_BeforeArgs(Params_OnCollisionStay2D args);

        public delegate void OnCollisionStay2D_NormalArgs(Params_OnCollisionStay2D args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnLevelUnload_BeforeArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_NormalArgs(Params_OnLevelUnload args);

        public delegate void orig_CharmUpdate_BeforeArgs(Params_orig_CharmUpdate args);

        public delegate void orig_CharmUpdate_NormalArgs(Params_orig_CharmUpdate args);

        public delegate void orig_Dash_BeforeArgs(Params_orig_Dash args);

        public delegate void orig_Dash_NormalArgs(Params_orig_Dash args);

        public delegate void orig_DoAttack_BeforeArgs(Params_orig_DoAttack args);

        public delegate void orig_DoAttack_NormalArgs(Params_orig_DoAttack args);

        public delegate void orig_StartMPDrain_BeforeArgs(Params_orig_StartMPDrain args);

        public delegate void orig_StartMPDrain_NormalArgs(Params_orig_StartMPDrain args);

        public delegate void orig_Update_BeforeArgs(Params_orig_Update args);

        public delegate void orig_Update_NormalArgs(Params_orig_Update args);

        public delegate void OrigDashVector_BeforeArgs(Params_OrigDashVector args);

        public delegate Vector2 OrigDashVector_NormalArgs(Params_OrigDashVector args);

        public delegate void OutOfBoundsCheck_BeforeArgs(Params_OutOfBoundsCheck args);

        public delegate void OutOfBoundsCheck_NormalArgs(Params_OutOfBoundsCheck args);

        public delegate void Pause_BeforeArgs(Params_Pause args);

        public delegate void Pause_NormalArgs(Params_Pause args);

        public delegate void PauseAudio_BeforeArgs(Params_PauseAudio args);

        public delegate void PauseAudio_NormalArgs(Params_PauseAudio args);

        public delegate void PauseInput_BeforeArgs(Params_PauseInput args);

        public delegate void PauseInput_NormalArgs(Params_PauseInput args);

        public delegate void PreventCastByDialogueEnd_BeforeArgs(Params_PreventCastByDialogueEnd args);

        public delegate void PreventCastByDialogueEnd_NormalArgs(Params_PreventCastByDialogueEnd args);

        public delegate void QuakeInvuln_BeforeArgs(Params_QuakeInvuln args);

        public delegate void QuakeInvuln_NormalArgs(Params_QuakeInvuln args);

        public delegate void RecoilDown_BeforeArgs(Params_RecoilDown args);

        public delegate void RecoilDown_NormalArgs(Params_RecoilDown args);

        public delegate void RecoilLeft_BeforeArgs(Params_RecoilLeft args);

        public delegate void RecoilLeft_NormalArgs(Params_RecoilLeft args);

        public delegate void RecoilLeftLong_BeforeArgs(Params_RecoilLeftLong args);

        public delegate void RecoilLeftLong_NormalArgs(Params_RecoilLeftLong args);

        public delegate void RecoilRight_BeforeArgs(Params_RecoilRight args);

        public delegate void RecoilRight_NormalArgs(Params_RecoilRight args);

        public delegate void RecoilRightLong_BeforeArgs(Params_RecoilRightLong args);

        public delegate void RecoilRightLong_NormalArgs(Params_RecoilRightLong args);

        public delegate void RegainControl_BeforeArgs(Params_RegainControl args);

        public delegate void RegainControl_NormalArgs(Params_RegainControl args);

        public delegate void RelinquishControl_BeforeArgs(Params_RelinquishControl args);

        public delegate void RelinquishControl_NormalArgs(Params_RelinquishControl args);

        public delegate void RelinquishControlNotVelocity_BeforeArgs(Params_RelinquishControlNotVelocity args);

        public delegate void RelinquishControlNotVelocity_NormalArgs(Params_RelinquishControlNotVelocity args);

        public delegate void ResetAirMoves_BeforeArgs(Params_ResetAirMoves args);

        public delegate void ResetAirMoves_NormalArgs(Params_ResetAirMoves args);

        public delegate void ResetAttacks_BeforeArgs(Params_ResetAttacks args);

        public delegate void ResetAttacks_NormalArgs(Params_ResetAttacks args);

        public delegate void ResetAttacksDash_BeforeArgs(Params_ResetAttacksDash args);

        public delegate void ResetAttacksDash_NormalArgs(Params_ResetAttacksDash args);

        public delegate void ResetHardLandingTimer_BeforeArgs(Params_ResetHardLandingTimer args);

        public delegate void ResetHardLandingTimer_NormalArgs(Params_ResetHardLandingTimer args);

        public delegate void ResetInput_BeforeArgs(Params_ResetInput args);

        public delegate void ResetInput_NormalArgs(Params_ResetInput args);

        public delegate void ResetLook_BeforeArgs(Params_ResetLook args);

        public delegate void ResetLook_NormalArgs(Params_ResetLook args);

        public delegate void ResetMotion_BeforeArgs(Params_ResetMotion args);

        public delegate void ResetMotion_NormalArgs(Params_ResetMotion args);

        public delegate void ResetMotionNotVelocity_BeforeArgs(Params_ResetMotionNotVelocity args);

        public delegate void ResetMotionNotVelocity_NormalArgs(Params_ResetMotionNotVelocity args);

        public delegate void ResetQuakeDamage_BeforeArgs(Params_ResetQuakeDamage args);

        public delegate void ResetQuakeDamage_NormalArgs(Params_ResetQuakeDamage args);

        public delegate void ResetState_BeforeArgs(Params_ResetState args);

        public delegate void ResetState_NormalArgs(Params_ResetState args);

        public delegate void Respawn_BeforeArgs(Params_Respawn args);

        public delegate IEnumerator Respawn_NormalArgs(Params_Respawn args);

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_NormalArgs(Params_SceneInit args);

        public delegate void set_fallTimer_BeforeArgs(Params_set_fallTimer args);

        public delegate void set_fallTimer_NormalArgs(Params_set_fallTimer args);

        public delegate void set_geoCounter_BeforeArgs(Params_set_geoCounter args);

        public delegate void set_geoCounter_NormalArgs(Params_set_geoCounter args);

        public delegate void set_proxyFSM_BeforeArgs(Params_set_proxyFSM args);

        public delegate void set_proxyFSM_NormalArgs(Params_set_proxyFSM args);

        public delegate void set_sceneEntryGate_BeforeArgs(Params_set_sceneEntryGate args);

        public delegate void set_sceneEntryGate_NormalArgs(Params_set_sceneEntryGate args);

        public delegate void SetBackOnGround_BeforeArgs(Params_SetBackOnGround args);

        public delegate void SetBackOnGround_NormalArgs(Params_SetBackOnGround args);

        public delegate void SetBenchRespawn_BeforeArgs(Params_SetBenchRespawn args);

        public delegate void SetBenchRespawn_NormalArgs(Params_SetBenchRespawn args);

        public delegate void SetConveyorSpeed_BeforeArgs(Params_SetConveyorSpeed args);

        public delegate void SetConveyorSpeed_NormalArgs(Params_SetConveyorSpeed args);

        public delegate void SetConveyorSpeedV_BeforeArgs(Params_SetConveyorSpeedV args);

        public delegate void SetConveyorSpeedV_NormalArgs(Params_SetConveyorSpeedV args);

        public delegate void SetCState_BeforeArgs(Params_SetCState args);

        public delegate void SetCState_NormalArgs(Params_SetCState args);

        public delegate void SetDamageMode_DamageMode_BeforeArgs(Params_SetDamageMode_DamageMode args);

        public delegate void SetDamageMode_DamageMode_NormalArgs(Params_SetDamageMode_DamageMode args);

        public delegate void SetDamageMode_int_BeforeArgs(Params_SetDamageMode_int args);

        public delegate void SetDamageMode_int_NormalArgs(Params_SetDamageMode_int args);

        public delegate void SetDamageModeFSM_BeforeArgs(Params_SetDamageModeFSM args);

        public delegate void SetDamageModeFSM_NormalArgs(Params_SetDamageModeFSM args);

        public delegate void SetDarkness_BeforeArgs(Params_SetDarkness args);

        public delegate void SetDarkness_NormalArgs(Params_SetDarkness args);

        public delegate void SetHazardRespawn_BeforeArgs(Params_SetHazardRespawn args);

        public delegate void SetHazardRespawn_NormalArgs(Params_SetHazardRespawn args);

        public delegate void SetHeroParent_BeforeArgs(Params_SetHeroParent args);

        public delegate void SetHeroParent_NormalArgs(Params_SetHeroParent args);

        public delegate void SetMPCharge_BeforeArgs(Params_SetMPCharge args);

        public delegate void SetMPCharge_NormalArgs(Params_SetMPCharge args);

        public delegate void SetQuakeExit_BeforeArgs(Params_SetQuakeExit args);

        public delegate void SetQuakeExit_NormalArgs(Params_SetQuakeExit args);

        public delegate void SetStartingMotionState_BeforeArgs(Params_SetStartingMotionState args);

        public delegate void SetStartingMotionState_bool_BeforeArgs(Params_SetStartingMotionState_bool args);

        public delegate void SetStartingMotionState_bool_NormalArgs(Params_SetStartingMotionState_bool args);

        public delegate void SetStartingMotionState_NormalArgs(Params_SetStartingMotionState args);

        public delegate void SetStartWithAttack_BeforeArgs(Params_SetStartWithAttack args);

        public delegate void SetStartWithAttack_NormalArgs(Params_SetStartWithAttack args);

        public delegate void SetStartWithDash_BeforeArgs(Params_SetStartWithDash args);

        public delegate void SetStartWithDash_NormalArgs(Params_SetStartWithDash args);

        public delegate void SetStartWithFullJump_BeforeArgs(Params_SetStartWithFullJump args);

        public delegate void SetStartWithFullJump_NormalArgs(Params_SetStartWithFullJump args);

        public delegate void SetStartWithJump_BeforeArgs(Params_SetStartWithJump args);

        public delegate void SetStartWithJump_NormalArgs(Params_SetStartWithJump args);

        public delegate void SetStartWithWallslide_BeforeArgs(Params_SetStartWithWallslide args);

        public delegate void SetStartWithWallslide_NormalArgs(Params_SetStartWithWallslide args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_NormalArgs(Params_SetState args);

        public delegate void SetSuperDashExit_BeforeArgs(Params_SetSuperDashExit args);

        public delegate void SetSuperDashExit_NormalArgs(Params_SetSuperDashExit args);

        public delegate void SetTakeNoDamage_BeforeArgs(Params_SetTakeNoDamage args);

        public delegate void SetTakeNoDamage_NormalArgs(Params_SetTakeNoDamage args);

        public delegate void SetupGameRefs_BeforeArgs(Params_SetupGameRefs args);

        public delegate void SetupGameRefs_NormalArgs(Params_SetupGameRefs args);

        public delegate void SetupPools_BeforeArgs(Params_SetupPools args);

        public delegate void SetupPools_NormalArgs(Params_SetupPools args);

        public delegate void SetWalkZone_BeforeArgs(Params_SetWalkZone args);

        public delegate void SetWalkZone_NormalArgs(Params_SetWalkZone args);

        public delegate void SetWieldingLantern_BeforeArgs(Params_SetWieldingLantern args);

        public delegate void SetWieldingLantern_NormalArgs(Params_SetWieldingLantern args);

        public delegate void ShadowDash_BeforeArgs(Params_ShadowDash args);

        public delegate void ShadowDash_NormalArgs(Params_ShadowDash args);

        public delegate void ShouldHardLand_BeforeArgs(Params_ShouldHardLand args);

        public delegate bool ShouldHardLand_NormalArgs(Params_ShouldHardLand args);

        public delegate void ShroomBounce_BeforeArgs(Params_ShroomBounce args);

        public delegate void ShroomBounce_NormalArgs(Params_ShroomBounce args);

        public delegate void SoulGain_BeforeArgs(Params_SoulGain args);

        public delegate void SoulGain_NormalArgs(Params_SoulGain args);

        public delegate void SpawnSoftLandingPrefab_BeforeArgs(Params_SpawnSoftLandingPrefab args);

        public delegate void SpawnSoftLandingPrefab_NormalArgs(Params_SpawnSoftLandingPrefab args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StartAnimationControl_BeforeArgs(Params_StartAnimationControl args);

        public delegate void StartAnimationControl_NormalArgs(Params_StartAnimationControl args);

        public delegate void StartCyclone_BeforeArgs(Params_StartCyclone args);

        public delegate void StartCyclone_NormalArgs(Params_StartCyclone args);

        public delegate void StartFallRumble_BeforeArgs(Params_StartFallRumble args);

        public delegate void StartFallRumble_NormalArgs(Params_StartFallRumble args);

        public delegate void StartMPDrain_BeforeArgs(Params_StartMPDrain args);

        public delegate void StartMPDrain_NormalArgs(Params_StartMPDrain args);

        public delegate void StartRecoil_BeforeArgs(Params_StartRecoil args);

        public delegate IEnumerator StartRecoil_NormalArgs(Params_StartRecoil args);

        public delegate void StopAnimationControl_BeforeArgs(Params_StopAnimationControl args);

        public delegate void StopAnimationControl_NormalArgs(Params_StopAnimationControl args);

        public delegate void StopMPDrain_BeforeArgs(Params_StopMPDrain args);

        public delegate void StopMPDrain_NormalArgs(Params_StopMPDrain args);

        public delegate void StopPlayingAudio_BeforeArgs(Params_StopPlayingAudio args);

        public delegate void StopPlayingAudio_NormalArgs(Params_StopPlayingAudio args);

        public delegate void StopTilemapTest_BeforeArgs(Params_StopTilemapTest args);

        public delegate void StopTilemapTest_NormalArgs(Params_StopTilemapTest args);

        public delegate void SuperDash_BeforeArgs(Params_SuperDash args);

        public delegate void SuperDash_NormalArgs(Params_SuperDash args);

        public delegate void TakeDamage_BeforeArgs(Params_TakeDamage args);

        public delegate void TakeDamage_NormalArgs(Params_TakeDamage args);

        public delegate void TakeGeo_BeforeArgs(Params_TakeGeo args);

        public delegate void TakeGeo_NormalArgs(Params_TakeGeo args);

        public delegate void TakeHealth_BeforeArgs(Params_TakeHealth args);

        public delegate void TakeHealth_NormalArgs(Params_TakeHealth args);

        public delegate void TakeMP_BeforeArgs(Params_TakeMP args);

        public delegate void TakeMP_NormalArgs(Params_TakeMP args);

        public delegate void TakeMPQuick_BeforeArgs(Params_TakeMPQuick args);

        public delegate void TakeMPQuick_NormalArgs(Params_TakeMPQuick args);

        public delegate void TakeReserveMP_BeforeArgs(Params_TakeReserveMP args);

        public delegate void TakeReserveMP_NormalArgs(Params_TakeReserveMP args);

        public delegate void TileMapTest_BeforeArgs(Params_TileMapTest args);

        public delegate void TileMapTest_NormalArgs(Params_TileMapTest args);

        public delegate void TilemapTestPause_BeforeArgs(Params_TilemapTestPause args);

        public delegate IEnumerator TilemapTestPause_NormalArgs(Params_TilemapTestPause args);

        public delegate void ToZero_BeforeArgs(Params_ToZero args);

        public delegate void ToZero_NormalArgs(Params_ToZero args);

        public delegate void TryAddMPChargeSpa_BeforeArgs(Params_TryAddMPChargeSpa args);

        public delegate bool TryAddMPChargeSpa_NormalArgs(Params_TryAddMPChargeSpa args);

        public delegate void UnPause_BeforeArgs(Params_UnPause args);

        public delegate void UnPause_NormalArgs(Params_UnPause args);

        public delegate void UnPauseAudio_BeforeArgs(Params_UnPauseAudio args);

        public delegate void UnPauseAudio_NormalArgs(Params_UnPauseAudio args);

        public delegate void UnPauseInput_BeforeArgs(Params_UnPauseInput args);

        public delegate void UnPauseInput_NormalArgs(Params_UnPauseInput args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void Update10_BeforeArgs(Params_Update10 args);

        public delegate void Update10_NormalArgs(Params_Update10 args);

        public delegate void UpdateGeo_BeforeArgs(Params_UpdateGeo args);

        public delegate void UpdateGeo_NormalArgs(Params_UpdateGeo args);

        public sealed class Params_get_fallTimer
        {
            public HeroController self;
        }

        public sealed class Params_set_fallTimer
        {
            public HeroController self;
            public float value;
        }

        public sealed class Params_get_geoCounter
        {
            public HeroController self;
        }

        public sealed class Params_set_geoCounter
        {
            public HeroController self;
            public GeoCounter value;
        }

        public sealed class Params_get_proxyFSM
        {
            public HeroController self;
        }

        public sealed class Params_set_proxyFSM
        {
            public HeroController self;
            public PlayMakerFSM value;
        }

        public sealed class Params_get_sceneEntryGate
        {
            public HeroController self;
        }

        public sealed class Params_set_sceneEntryGate
        {
            public HeroController self;
            public TransitionPoint value;
        }

        public sealed class Params_get_IsDreamReturning
        {
            public HeroController self;
        }

        public sealed class Params_Awake
        {
            public HeroController self;
        }

        public sealed class Params_Start
        {
            public HeroController self;
        }

        public sealed class Params_SceneInit
        {
            public HeroController self;
        }

        public sealed class Params_Update
        {
            public HeroController self;
        }

        public sealed class Params_FixedUpdate
        {
            public HeroController self;
        }

        public sealed class Params_Update10
        {
            public HeroController self;
        }

        public sealed class Params_OnLevelUnload
        {
            public HeroController self;
        }

        public sealed class Params_OnDisable
        {
            public HeroController self;
        }

        public sealed class Params_Move
        {
            public float move_direction;
            public HeroController self;
        }

        public sealed class Params_Jump
        {
            public HeroController self;
        }

        public sealed class Params_DoubleJump
        {
            public HeroController self;
        }

        public sealed class Params_Attack
        {
            public AttackDirection attackDir;
            public HeroController self;
        }

        public sealed class Params_Dash
        {
            public HeroController self;
        }

        public sealed class Params_BackDash
        {
            public HeroController self;
        }

        public sealed class Params_ShadowDash
        {
            public HeroController self;
        }

        public sealed class Params_SuperDash
        {
            public HeroController self;
        }

        public sealed class Params_FaceRight
        {
            public HeroController self;
        }

        public sealed class Params_FaceLeft
        {
            public HeroController self;
        }

        public sealed class Params_StartMPDrain
        {
            public HeroController self;
            public float time;
        }

        public sealed class Params_StopMPDrain
        {
            public HeroController self;
        }

        public sealed class Params_SetBackOnGround
        {
            public HeroController self;
        }

        public sealed class Params_SetStartWithWallslide
        {
            public HeroController self;
        }

        public sealed class Params_SetStartWithJump
        {
            public HeroController self;
        }

        public sealed class Params_SetStartWithFullJump
        {
            public HeroController self;
        }

        public sealed class Params_SetStartWithDash
        {
            public HeroController self;
        }

        public sealed class Params_SetStartWithAttack
        {
            public HeroController self;
        }

        public sealed class Params_SetSuperDashExit
        {
            public HeroController self;
        }

        public sealed class Params_SetQuakeExit
        {
            public HeroController self;
        }

        public sealed class Params_SetTakeNoDamage
        {
            public HeroController self;
        }

        public sealed class Params_EndTakeNoDamage
        {
            public HeroController self;
        }

        public sealed class Params_SetHeroParent
        {
            public Transform newParent;
            public HeroController self;
        }

        public sealed class Params_IsSwimming
        {
            public HeroController self;
        }

        public sealed class Params_NotSwimming
        {
            public HeroController self;
        }

        public sealed class Params_EnableRenderer
        {
            public HeroController self;
        }

        public sealed class Params_ResetAirMoves
        {
            public HeroController self;
        }

        public sealed class Params_SetConveyorSpeed
        {
            public HeroController self;
            public float speed;
        }

        public sealed class Params_SetConveyorSpeedV
        {
            public HeroController self;
            public float speed;
        }

        public sealed class Params_EnterWithoutInput
        {
            public bool flag;
            public HeroController self;
        }

        public sealed class Params_SetDarkness
        {
            public int darkness;
            public HeroController self;
        }

        public sealed class Params_CancelHeroJump
        {
            public HeroController self;
        }

        public sealed class Params_CharmUpdate
        {
            public HeroController self;
        }

        public sealed class Params_checkEnvironment
        {
            public HeroController self;
        }

        public sealed class Params_SetBenchRespawn
        {
            public bool facingRight;
            public string sceneName;
            public HeroController self;
            public string spawnMarker;
            public int spawnType;
        }

        public sealed class Params_SetHazardRespawn
        {
            public bool facingRight;
            public Vector3 position;
            public HeroController self;
        }

        public sealed class Params_AddGeo
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_ToZero
        {
            public HeroController self;
        }

        public sealed class Params_AddGeoQuietly
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_AddGeoToCounter
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_TakeGeo
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_UpdateGeo
        {
            public HeroController self;
        }

        public sealed class Params_CanInput
        {
            public HeroController self;
        }

        public sealed class Params_CanTalk
        {
            public HeroController self;
        }

        public sealed class Params_FlipSprite
        {
            public HeroController self;
        }

        public sealed class Params_NailParry
        {
            public HeroController self;
        }

        public sealed class Params_NailParryRecover
        {
            public HeroController self;
        }

        public sealed class Params_QuakeInvuln
        {
            public HeroController self;
        }

        public sealed class Params_CancelParryInvuln
        {
            public HeroController self;
        }

        public sealed class Params_CycloneInvuln
        {
            public HeroController self;
        }

        public sealed class Params_SetWieldingLantern
        {
            public HeroController self;
            public bool set;
        }

        public sealed class Params_TakeDamage
        {
            public int damageAmount;
            public CollisionSide damageSide;
            public GameObject go;
            public int hazardType;
            public HeroController self;
        }

        public sealed class Params_GetEntryGateName
        {
            public HeroController self;
        }

        public sealed class Params_AddMPCharge
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_SoulGain
        {
            public HeroController self;
        }

        public sealed class Params_AddMPChargeSpa
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_TryAddMPChargeSpa
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_SetMPCharge
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_TakeMP
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_TakeMPQuick
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_TakeReserveMP
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_AddHealth
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_TakeHealth
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_MaxHealth
        {
            public HeroController self;
        }

        public sealed class Params_MaxHealthKeepBlue
        {
            public HeroController self;
        }

        public sealed class Params_AddToMaxHealth
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_ClearMP
        {
            public HeroController self;
        }

        public sealed class Params_ClearMPSendEvents
        {
            public HeroController self;
        }

        public sealed class Params_AddToMaxMPReserve
        {
            public int amount;
            public HeroController self;
        }

        public sealed class Params_Bounce
        {
            public HeroController self;
        }

        public sealed class Params_BounceHigh
        {
            public HeroController self;
        }

        public sealed class Params_ShroomBounce
        {
            public HeroController self;
        }

        public sealed class Params_RecoilLeft
        {
            public HeroController self;
        }

        public sealed class Params_RecoilRight
        {
            public HeroController self;
        }

        public sealed class Params_RecoilRightLong
        {
            public HeroController self;
        }

        public sealed class Params_RecoilLeftLong
        {
            public HeroController self;
        }

        public sealed class Params_RecoilDown
        {
            public HeroController self;
        }

        public sealed class Params_ForceHardLanding
        {
            public HeroController self;
        }

        public sealed class Params_EnterSceneDreamGate
        {
            public HeroController self;
        }

        public sealed class Params_EnterScene
        {
            public float delayBeforeEnter;
            public TransitionPoint enterGate;
            public HeroController self;
        }

        public sealed class Params_LeaveScene
        {
            public GatePosition? gate;
            public HeroController self;
        }

        public sealed class Params_BetaLeave
        {
            public EndBeta betaEndTrigger;
            public HeroController self;
        }

        public sealed class Params_BetaReturn
        {
            public HeroController self;
        }

        public sealed class Params_Respawn
        {
            public HeroController self;
        }

        public sealed class Params_HazardRespawn
        {
            public HeroController self;
        }

        public sealed class Params_StartCyclone
        {
            public HeroController self;
        }

        public sealed class Params_EndCyclone
        {
            public HeroController self;
        }

        public sealed class Params_GetState
        {
            public HeroController self;
            public string stateName;
        }

        public sealed class Params_GetCState
        {
            public HeroController self;
            public string stateName;
        }

        public sealed class Params_SetCState
        {
            public HeroController self;
            public string stateName;
            public bool value;
        }

        public sealed class Params_ResetHardLandingTimer
        {
            public HeroController self;
        }

        public sealed class Params_CancelSuperDash
        {
            public HeroController self;
        }

        public sealed class Params_RelinquishControlNotVelocity
        {
            public HeroController self;
        }

        public sealed class Params_RelinquishControl
        {
            public HeroController self;
        }

        public sealed class Params_RegainControl
        {
            public HeroController self;
        }

        public sealed class Params_PreventCastByDialogueEnd
        {
            public HeroController self;
        }

        public sealed class Params_CanCast
        {
            public HeroController self;
        }

        public sealed class Params_CanFocus
        {
            public HeroController self;
        }

        public sealed class Params_CanNailArt
        {
            public HeroController self;
        }

        public sealed class Params_CanQuickMap
        {
            public HeroController self;
        }

        public sealed class Params_CanInspect
        {
            public HeroController self;
        }

        public sealed class Params_CanBackDash
        {
            public HeroController self;
        }

        public sealed class Params_CanSuperDash
        {
            public HeroController self;
        }

        public sealed class Params_CanDreamNail
        {
            public HeroController self;
        }

        public sealed class Params_CanDreamGate
        {
            public HeroController self;
        }

        public sealed class Params_CanInteract
        {
            public HeroController self;
        }

        public sealed class Params_CanOpenInventory
        {
            public HeroController self;
        }

        public sealed class Params_SetDamageMode_int
        {
            public int invincibilityType;
            public HeroController self;
        }

        public sealed class Params_SetDamageModeFSM
        {
            public int invincibilityType;
            public HeroController self;
        }

        public sealed class Params_ResetQuakeDamage
        {
            public HeroController self;
        }

        public sealed class Params_SetDamageMode_DamageMode
        {
            public DamageMode newDamageMode;
            public HeroController self;
        }

        public sealed class Params_StopAnimationControl
        {
            public HeroController self;
        }

        public sealed class Params_StartAnimationControl
        {
            public HeroController self;
        }

        public sealed class Params_IgnoreInput
        {
            public HeroController self;
        }

        public sealed class Params_IgnoreInputWithoutReset
        {
            public HeroController self;
        }

        public sealed class Params_AcceptInput
        {
            public HeroController self;
        }

        public sealed class Params_Pause
        {
            public HeroController self;
        }

        public sealed class Params_UnPause
        {
            public HeroController self;
        }

        public sealed class Params_NearBench
        {
            public bool isNearBench;
            public HeroController self;
        }

        public sealed class Params_SetWalkZone
        {
            public bool inWalkZone;
            public HeroController self;
        }

        public sealed class Params_ResetState
        {
            public HeroController self;
        }

        public sealed class Params_StopPlayingAudio
        {
            public HeroController self;
        }

        public sealed class Params_PauseAudio
        {
            public HeroController self;
        }

        public sealed class Params_UnPauseAudio
        {
            public HeroController self;
        }

        public sealed class Params_PauseInput
        {
            public HeroController self;
        }

        public sealed class Params_UnPauseInput
        {
            public HeroController self;
        }

        public sealed class Params_SpawnSoftLandingPrefab
        {
            public HeroController self;
        }

        public sealed class Params_AffectedByGravity
        {
            public bool gravityApplies;
            public HeroController self;
        }

        public sealed class Params_LookForInput
        {
            public HeroController self;
        }

        public sealed class Params_LookForQueueInput
        {
            public HeroController self;
        }

        public sealed class Params_HeroJump
        {
            public HeroController self;
        }

        public sealed class Params_HeroJumpNoEffect
        {
            public HeroController self;
        }

        public sealed class Params_DoWallJump
        {
            public HeroController self;
        }

        public sealed class Params_DoDoubleJump
        {
            public HeroController self;
        }

        public sealed class Params_DoHardLanding
        {
            public HeroController self;
        }

        public sealed class Params_DoAttack
        {
            public HeroController self;
        }

        public sealed class Params_HeroDash
        {
            public HeroController self;
        }

        public sealed class Params_StartFallRumble
        {
            public HeroController self;
        }

        public sealed class Params_SetState
        {
            public ActorStates newState;
            public HeroController self;
        }

        public sealed class Params_FinishedEnteringScene
        {
            public bool preventRunBob;
            public HeroController self;
            public bool setHazardMarker;
        }

        public sealed class Params_Die
        {
            public HeroController self;
        }

        public sealed class Params_DieFromHazard
        {
            public float angle;
            public HazardType hazardType;
            public HeroController self;
        }

        public sealed class Params_StartRecoil
        {
            public int damageAmount;
            public CollisionSide impactSide;
            public HeroController self;
            public bool spawnDamageEffect;
        }

        public sealed class Params_Invulnerable
        {
            public float duration;
            public HeroController self;
        }

        public sealed class Params_FirstFadeIn
        {
            public HeroController self;
        }

        public sealed class Params_FallCheck
        {
            public HeroController self;
        }

        public sealed class Params_OutOfBoundsCheck
        {
            public HeroController self;
        }

        public sealed class Params_ConfirmOutOfBounds
        {
            public HeroController self;
        }

        public sealed class Params_FailSafeChecks
        {
            public HeroController self;
        }

        public sealed class Params_LocateSpawnPoint
        {
            public HeroController self;
        }

        public sealed class Params_CancelJump
        {
            public HeroController self;
        }

        public sealed class Params_CancelDoubleJump
        {
            public HeroController self;
        }

        public sealed class Params_CancelDash
        {
            public HeroController self;
        }

        public sealed class Params_CancelWallsliding
        {
            public HeroController self;
        }

        public sealed class Params_CancelBackDash
        {
            public HeroController self;
        }

        public sealed class Params_CancelDownAttack
        {
            public HeroController self;
        }

        public sealed class Params_CancelAttack
        {
            public HeroController self;
        }

        public sealed class Params_CancelBounce
        {
            public HeroController self;
        }

        public sealed class Params_CancelRecoilHorizontal
        {
            public HeroController self;
        }

        public sealed class Params_CancelDamageRecoil
        {
            public HeroController self;
        }

        public sealed class Params_CancelFallEffects
        {
            public HeroController self;
        }

        public sealed class Params_ResetAttacks
        {
            public HeroController self;
        }

        public sealed class Params_ResetAttacksDash
        {
            public HeroController self;
        }

        public sealed class Params_ResetMotion
        {
            public HeroController self;
        }

        public sealed class Params_ResetMotionNotVelocity
        {
            public HeroController self;
        }

        public sealed class Params_ResetLook
        {
            public HeroController self;
        }

        public sealed class Params_ResetInput
        {
            public HeroController self;
        }

        public sealed class Params_BackOnGround
        {
            public HeroController self;
        }

        public sealed class Params_JumpReleased
        {
            public HeroController self;
        }

        public sealed class Params_FinishedDashing
        {
            public HeroController self;
        }

        public sealed class Params_SetStartingMotionState
        {
            public HeroController self;
        }

        public sealed class Params_SetStartingMotionState_bool
        {
            public bool preventRunDip;
            public HeroController self;
        }

        public sealed class Params_EnterAcid
        {
            public HeroController self;
        }

        public sealed class Params_ExitAcid
        {
            public HeroController self;
        }

        public sealed class Params_TileMapTest
        {
            public HeroController self;
        }

        public sealed class Params_TilemapTestPause
        {
            public HeroController self;
        }

        public sealed class Params_StopTilemapTest
        {
            public HeroController self;
        }

        public sealed class Params_CheckForTerrainThunk
        {
            public AttackDirection attackDir;
            public HeroController self;
        }

        public sealed class Params_CheckStillTouchingWall
        {
            public bool checkTop;
            public HeroController self;
            public CollisionSide side;
        }

        public sealed class Params_CheckForBump
        {
            public HeroController self;
            public CollisionSide side;
        }

        public sealed class Params_CheckNearRoof
        {
            public HeroController self;
        }

        public sealed class Params_CheckTouchingGround
        {
            public HeroController self;
        }

        public sealed class Params_CheckTouching
        {
            public PhysLayers layer;
            public HeroController self;
        }

        public sealed class Params_CheckTouchingAdvanced
        {
            public PhysLayers layer;
            public HeroController self;
        }

        public sealed class Params_FindCollisionDirection
        {
            public Collision2D collision;
            public HeroController self;
        }

        public sealed class Params_CanJump
        {
            public HeroController self;
        }

        public sealed class Params_CanDoubleJump
        {
            public HeroController self;
        }

        public sealed class Params_CanInfiniteAirJump
        {
            public HeroController self;
        }

        public sealed class Params_CanSwim
        {
            public HeroController self;
        }

        public sealed class Params_CanDash
        {
            public HeroController self;
        }

        public sealed class Params_CanAttack
        {
            public HeroController self;
        }

        public sealed class Params_CanNailCharge
        {
            public HeroController self;
        }

        public sealed class Params_CanWallSlide
        {
            public HeroController self;
        }

        public sealed class Params_CanTakeDamage
        {
            public HeroController self;
        }

        public sealed class Params_CanWallJump
        {
            public HeroController self;
        }

        public sealed class Params_ShouldHardLand
        {
            public Collision2D collision;
            public HeroController self;
        }

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D collision;
            public HeroController self;
        }

        public sealed class Params_OnCollisionStay2D
        {
            public Collision2D collision;
            public HeroController self;
        }

        public sealed class Params_OnCollisionExit2D
        {
            public Collision2D collision;
            public HeroController self;
        }

        public sealed class Params_SetupGameRefs
        {
            public HeroController self;
        }

        public sealed class Params_SetupPools
        {
            public HeroController self;
        }

        public sealed class Params_FilterInput
        {
            public HeroController self;
        }

        public sealed class Params_FindGroundPoint
        {
            public HeroController self;
            public Vector2 startPoint;
            public bool useExtended;
        }

        public sealed class Params_FindGroundPointY
        {
            public HeroController self;
            public bool useExtended;
            public float x;
            public float y;
        }

        public sealed class Params_orig_StartMPDrain
        {
            public HeroController self;
            public float time;
        }

        public sealed class Params_orig_Update
        {
            public HeroController self;
        }

        public sealed class Params_OrigDashVector
        {
            public HeroController self;
        }

        public sealed class Params_orig_Dash
        {
            public HeroController self;
        }

        public sealed class Params_orig_CharmUpdate
        {
            public HeroController self;
        }

        public sealed class Params_orig_DoAttack
        {
            public HeroController self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_fallTimer_BeforeArgs get_fallTimer
        {
            add
            {
                HookHandler._beforeget_fallTimer += value;
                HookHandler.Hookget_fallTimer();
            }
            remove => HookHandler._beforeget_fallTimer -= value;
        }

        public static event Delegates.set_fallTimer_BeforeArgs set_fallTimer
        {
            add
            {
                HookHandler._beforeset_fallTimer += value;
                HookHandler.Hookset_fallTimer();
            }
            remove => HookHandler._beforeset_fallTimer -= value;
        }

        public static event Delegates.get_geoCounter_BeforeArgs get_geoCounter
        {
            add
            {
                HookHandler._beforeget_geoCounter += value;
                HookHandler.Hookget_geoCounter();
            }
            remove => HookHandler._beforeget_geoCounter -= value;
        }

        public static event Delegates.set_geoCounter_BeforeArgs set_geoCounter
        {
            add
            {
                HookHandler._beforeset_geoCounter += value;
                HookHandler.Hookset_geoCounter();
            }
            remove => HookHandler._beforeset_geoCounter -= value;
        }

        public static event Delegates.get_proxyFSM_BeforeArgs get_proxyFSM
        {
            add
            {
                HookHandler._beforeget_proxyFSM += value;
                HookHandler.Hookget_proxyFSM();
            }
            remove => HookHandler._beforeget_proxyFSM -= value;
        }

        public static event Delegates.set_proxyFSM_BeforeArgs set_proxyFSM
        {
            add
            {
                HookHandler._beforeset_proxyFSM += value;
                HookHandler.Hookset_proxyFSM();
            }
            remove => HookHandler._beforeset_proxyFSM -= value;
        }

        public static event Delegates.get_sceneEntryGate_BeforeArgs get_sceneEntryGate
        {
            add
            {
                HookHandler._beforeget_sceneEntryGate += value;
                HookHandler.Hookget_sceneEntryGate();
            }
            remove => HookHandler._beforeget_sceneEntryGate -= value;
        }

        public static event Delegates.set_sceneEntryGate_BeforeArgs set_sceneEntryGate
        {
            add
            {
                HookHandler._beforeset_sceneEntryGate += value;
                HookHandler.Hookset_sceneEntryGate();
            }
            remove => HookHandler._beforeset_sceneEntryGate -= value;
        }

        public static event Delegates.get_IsDreamReturning_BeforeArgs get_IsDreamReturning
        {
            add
            {
                HookHandler._beforeget_IsDreamReturning += value;
                HookHandler.Hookget_IsDreamReturning();
            }
            remove => HookHandler._beforeget_IsDreamReturning -= value;
        }

        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.get_SilentInstance_BeforeArgs get_SilentInstance
        {
            add
            {
                HookHandler._beforeget_SilentInstance += value;
                HookHandler.Hookget_SilentInstance();
            }
            remove => HookHandler._beforeget_SilentInstance -= value;
        }

        public static event Delegates.get_UnsafeInstance_BeforeArgs get_UnsafeInstance
        {
            add
            {
                HookHandler._beforeget_UnsafeInstance += value;
                HookHandler.Hookget_UnsafeInstance();
            }
            remove => HookHandler._beforeget_UnsafeInstance -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.Update10_BeforeArgs Update10
        {
            add
            {
                HookHandler._beforeUpdate10 += value;
                HookHandler.HookUpdate10();
            }
            remove => HookHandler._beforeUpdate10 -= value;
        }

        public static event Delegates.OnLevelUnload_BeforeArgs OnLevelUnload
        {
            add
            {
                HookHandler._beforeOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._beforeOnLevelUnload -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Move_BeforeArgs Move
        {
            add
            {
                HookHandler._beforeMove += value;
                HookHandler.HookMove();
            }
            remove => HookHandler._beforeMove -= value;
        }

        public static event Delegates.Jump_BeforeArgs Jump
        {
            add
            {
                HookHandler._beforeJump += value;
                HookHandler.HookJump();
            }
            remove => HookHandler._beforeJump -= value;
        }

        public static event Delegates.DoubleJump_BeforeArgs DoubleJump
        {
            add
            {
                HookHandler._beforeDoubleJump += value;
                HookHandler.HookDoubleJump();
            }
            remove => HookHandler._beforeDoubleJump -= value;
        }

        public static event Delegates.Attack_BeforeArgs Attack
        {
            add
            {
                HookHandler._beforeAttack += value;
                HookHandler.HookAttack();
            }
            remove => HookHandler._beforeAttack -= value;
        }

        public static event Delegates.Dash_BeforeArgs Dash
        {
            add
            {
                HookHandler._beforeDash += value;
                HookHandler.HookDash();
            }
            remove => HookHandler._beforeDash -= value;
        }

        public static event Delegates.BackDash_BeforeArgs BackDash
        {
            add
            {
                HookHandler._beforeBackDash += value;
                HookHandler.HookBackDash();
            }
            remove => HookHandler._beforeBackDash -= value;
        }

        public static event Delegates.ShadowDash_BeforeArgs ShadowDash
        {
            add
            {
                HookHandler._beforeShadowDash += value;
                HookHandler.HookShadowDash();
            }
            remove => HookHandler._beforeShadowDash -= value;
        }

        public static event Delegates.SuperDash_BeforeArgs SuperDash
        {
            add
            {
                HookHandler._beforeSuperDash += value;
                HookHandler.HookSuperDash();
            }
            remove => HookHandler._beforeSuperDash -= value;
        }

        public static event Delegates.FaceRight_BeforeArgs FaceRight
        {
            add
            {
                HookHandler._beforeFaceRight += value;
                HookHandler.HookFaceRight();
            }
            remove => HookHandler._beforeFaceRight -= value;
        }

        public static event Delegates.FaceLeft_BeforeArgs FaceLeft
        {
            add
            {
                HookHandler._beforeFaceLeft += value;
                HookHandler.HookFaceLeft();
            }
            remove => HookHandler._beforeFaceLeft -= value;
        }

        public static event Delegates.StartMPDrain_BeforeArgs StartMPDrain
        {
            add
            {
                HookHandler._beforeStartMPDrain += value;
                HookHandler.HookStartMPDrain();
            }
            remove => HookHandler._beforeStartMPDrain -= value;
        }

        public static event Delegates.StopMPDrain_BeforeArgs StopMPDrain
        {
            add
            {
                HookHandler._beforeStopMPDrain += value;
                HookHandler.HookStopMPDrain();
            }
            remove => HookHandler._beforeStopMPDrain -= value;
        }

        public static event Delegates.SetBackOnGround_BeforeArgs SetBackOnGround
        {
            add
            {
                HookHandler._beforeSetBackOnGround += value;
                HookHandler.HookSetBackOnGround();
            }
            remove => HookHandler._beforeSetBackOnGround -= value;
        }

        public static event Delegates.SetStartWithWallslide_BeforeArgs SetStartWithWallslide
        {
            add
            {
                HookHandler._beforeSetStartWithWallslide += value;
                HookHandler.HookSetStartWithWallslide();
            }
            remove => HookHandler._beforeSetStartWithWallslide -= value;
        }

        public static event Delegates.SetStartWithJump_BeforeArgs SetStartWithJump
        {
            add
            {
                HookHandler._beforeSetStartWithJump += value;
                HookHandler.HookSetStartWithJump();
            }
            remove => HookHandler._beforeSetStartWithJump -= value;
        }

        public static event Delegates.SetStartWithFullJump_BeforeArgs SetStartWithFullJump
        {
            add
            {
                HookHandler._beforeSetStartWithFullJump += value;
                HookHandler.HookSetStartWithFullJump();
            }
            remove => HookHandler._beforeSetStartWithFullJump -= value;
        }

        public static event Delegates.SetStartWithDash_BeforeArgs SetStartWithDash
        {
            add
            {
                HookHandler._beforeSetStartWithDash += value;
                HookHandler.HookSetStartWithDash();
            }
            remove => HookHandler._beforeSetStartWithDash -= value;
        }

        public static event Delegates.SetStartWithAttack_BeforeArgs SetStartWithAttack
        {
            add
            {
                HookHandler._beforeSetStartWithAttack += value;
                HookHandler.HookSetStartWithAttack();
            }
            remove => HookHandler._beforeSetStartWithAttack -= value;
        }

        public static event Delegates.SetSuperDashExit_BeforeArgs SetSuperDashExit
        {
            add
            {
                HookHandler._beforeSetSuperDashExit += value;
                HookHandler.HookSetSuperDashExit();
            }
            remove => HookHandler._beforeSetSuperDashExit -= value;
        }

        public static event Delegates.SetQuakeExit_BeforeArgs SetQuakeExit
        {
            add
            {
                HookHandler._beforeSetQuakeExit += value;
                HookHandler.HookSetQuakeExit();
            }
            remove => HookHandler._beforeSetQuakeExit -= value;
        }

        public static event Delegates.SetTakeNoDamage_BeforeArgs SetTakeNoDamage
        {
            add
            {
                HookHandler._beforeSetTakeNoDamage += value;
                HookHandler.HookSetTakeNoDamage();
            }
            remove => HookHandler._beforeSetTakeNoDamage -= value;
        }

        public static event Delegates.EndTakeNoDamage_BeforeArgs EndTakeNoDamage
        {
            add
            {
                HookHandler._beforeEndTakeNoDamage += value;
                HookHandler.HookEndTakeNoDamage();
            }
            remove => HookHandler._beforeEndTakeNoDamage -= value;
        }

        public static event Delegates.SetHeroParent_BeforeArgs SetHeroParent
        {
            add
            {
                HookHandler._beforeSetHeroParent += value;
                HookHandler.HookSetHeroParent();
            }
            remove => HookHandler._beforeSetHeroParent -= value;
        }

        public static event Delegates.IsSwimming_BeforeArgs IsSwimming
        {
            add
            {
                HookHandler._beforeIsSwimming += value;
                HookHandler.HookIsSwimming();
            }
            remove => HookHandler._beforeIsSwimming -= value;
        }

        public static event Delegates.NotSwimming_BeforeArgs NotSwimming
        {
            add
            {
                HookHandler._beforeNotSwimming += value;
                HookHandler.HookNotSwimming();
            }
            remove => HookHandler._beforeNotSwimming -= value;
        }

        public static event Delegates.EnableRenderer_BeforeArgs EnableRenderer
        {
            add
            {
                HookHandler._beforeEnableRenderer += value;
                HookHandler.HookEnableRenderer();
            }
            remove => HookHandler._beforeEnableRenderer -= value;
        }

        public static event Delegates.ResetAirMoves_BeforeArgs ResetAirMoves
        {
            add
            {
                HookHandler._beforeResetAirMoves += value;
                HookHandler.HookResetAirMoves();
            }
            remove => HookHandler._beforeResetAirMoves -= value;
        }

        public static event Delegates.SetConveyorSpeed_BeforeArgs SetConveyorSpeed
        {
            add
            {
                HookHandler._beforeSetConveyorSpeed += value;
                HookHandler.HookSetConveyorSpeed();
            }
            remove => HookHandler._beforeSetConveyorSpeed -= value;
        }

        public static event Delegates.SetConveyorSpeedV_BeforeArgs SetConveyorSpeedV
        {
            add
            {
                HookHandler._beforeSetConveyorSpeedV += value;
                HookHandler.HookSetConveyorSpeedV();
            }
            remove => HookHandler._beforeSetConveyorSpeedV -= value;
        }

        public static event Delegates.EnterWithoutInput_BeforeArgs EnterWithoutInput
        {
            add
            {
                HookHandler._beforeEnterWithoutInput += value;
                HookHandler.HookEnterWithoutInput();
            }
            remove => HookHandler._beforeEnterWithoutInput -= value;
        }

        public static event Delegates.SetDarkness_BeforeArgs SetDarkness
        {
            add
            {
                HookHandler._beforeSetDarkness += value;
                HookHandler.HookSetDarkness();
            }
            remove => HookHandler._beforeSetDarkness -= value;
        }

        public static event Delegates.CancelHeroJump_BeforeArgs CancelHeroJump
        {
            add
            {
                HookHandler._beforeCancelHeroJump += value;
                HookHandler.HookCancelHeroJump();
            }
            remove => HookHandler._beforeCancelHeroJump -= value;
        }

        public static event Delegates.CharmUpdate_BeforeArgs CharmUpdate
        {
            add
            {
                HookHandler._beforeCharmUpdate += value;
                HookHandler.HookCharmUpdate();
            }
            remove => HookHandler._beforeCharmUpdate -= value;
        }

        public static event Delegates.checkEnvironment_BeforeArgs checkEnvironment
        {
            add
            {
                HookHandler._beforecheckEnvironment += value;
                HookHandler.HookcheckEnvironment();
            }
            remove => HookHandler._beforecheckEnvironment -= value;
        }

        public static event Delegates.SetBenchRespawn_BeforeArgs SetBenchRespawn
        {
            add
            {
                HookHandler._beforeSetBenchRespawn += value;
                HookHandler.HookSetBenchRespawn();
            }
            remove => HookHandler._beforeSetBenchRespawn -= value;
        }

        public static event Delegates.SetHazardRespawn_BeforeArgs SetHazardRespawn
        {
            add
            {
                HookHandler._beforeSetHazardRespawn += value;
                HookHandler.HookSetHazardRespawn();
            }
            remove => HookHandler._beforeSetHazardRespawn -= value;
        }

        public static event Delegates.AddGeo_BeforeArgs AddGeo
        {
            add
            {
                HookHandler._beforeAddGeo += value;
                HookHandler.HookAddGeo();
            }
            remove => HookHandler._beforeAddGeo -= value;
        }

        public static event Delegates.ToZero_BeforeArgs ToZero
        {
            add
            {
                HookHandler._beforeToZero += value;
                HookHandler.HookToZero();
            }
            remove => HookHandler._beforeToZero -= value;
        }

        public static event Delegates.AddGeoQuietly_BeforeArgs AddGeoQuietly
        {
            add
            {
                HookHandler._beforeAddGeoQuietly += value;
                HookHandler.HookAddGeoQuietly();
            }
            remove => HookHandler._beforeAddGeoQuietly -= value;
        }

        public static event Delegates.AddGeoToCounter_BeforeArgs AddGeoToCounter
        {
            add
            {
                HookHandler._beforeAddGeoToCounter += value;
                HookHandler.HookAddGeoToCounter();
            }
            remove => HookHandler._beforeAddGeoToCounter -= value;
        }

        public static event Delegates.TakeGeo_BeforeArgs TakeGeo
        {
            add
            {
                HookHandler._beforeTakeGeo += value;
                HookHandler.HookTakeGeo();
            }
            remove => HookHandler._beforeTakeGeo -= value;
        }

        public static event Delegates.UpdateGeo_BeforeArgs UpdateGeo
        {
            add
            {
                HookHandler._beforeUpdateGeo += value;
                HookHandler.HookUpdateGeo();
            }
            remove => HookHandler._beforeUpdateGeo -= value;
        }

        public static event Delegates.CanInput_BeforeArgs CanInput
        {
            add
            {
                HookHandler._beforeCanInput += value;
                HookHandler.HookCanInput();
            }
            remove => HookHandler._beforeCanInput -= value;
        }

        public static event Delegates.CanTalk_BeforeArgs CanTalk
        {
            add
            {
                HookHandler._beforeCanTalk += value;
                HookHandler.HookCanTalk();
            }
            remove => HookHandler._beforeCanTalk -= value;
        }

        public static event Delegates.FlipSprite_BeforeArgs FlipSprite
        {
            add
            {
                HookHandler._beforeFlipSprite += value;
                HookHandler.HookFlipSprite();
            }
            remove => HookHandler._beforeFlipSprite -= value;
        }

        public static event Delegates.NailParry_BeforeArgs NailParry
        {
            add
            {
                HookHandler._beforeNailParry += value;
                HookHandler.HookNailParry();
            }
            remove => HookHandler._beforeNailParry -= value;
        }

        public static event Delegates.NailParryRecover_BeforeArgs NailParryRecover
        {
            add
            {
                HookHandler._beforeNailParryRecover += value;
                HookHandler.HookNailParryRecover();
            }
            remove => HookHandler._beforeNailParryRecover -= value;
        }

        public static event Delegates.QuakeInvuln_BeforeArgs QuakeInvuln
        {
            add
            {
                HookHandler._beforeQuakeInvuln += value;
                HookHandler.HookQuakeInvuln();
            }
            remove => HookHandler._beforeQuakeInvuln -= value;
        }

        public static event Delegates.CancelParryInvuln_BeforeArgs CancelParryInvuln
        {
            add
            {
                HookHandler._beforeCancelParryInvuln += value;
                HookHandler.HookCancelParryInvuln();
            }
            remove => HookHandler._beforeCancelParryInvuln -= value;
        }

        public static event Delegates.CycloneInvuln_BeforeArgs CycloneInvuln
        {
            add
            {
                HookHandler._beforeCycloneInvuln += value;
                HookHandler.HookCycloneInvuln();
            }
            remove => HookHandler._beforeCycloneInvuln -= value;
        }

        public static event Delegates.SetWieldingLantern_BeforeArgs SetWieldingLantern
        {
            add
            {
                HookHandler._beforeSetWieldingLantern += value;
                HookHandler.HookSetWieldingLantern();
            }
            remove => HookHandler._beforeSetWieldingLantern -= value;
        }

        public static event Delegates.TakeDamage_BeforeArgs TakeDamage
        {
            add
            {
                HookHandler._beforeTakeDamage += value;
                HookHandler.HookTakeDamage();
            }
            remove => HookHandler._beforeTakeDamage -= value;
        }

        public static event Delegates.GetEntryGateName_BeforeArgs GetEntryGateName
        {
            add
            {
                HookHandler._beforeGetEntryGateName += value;
                HookHandler.HookGetEntryGateName();
            }
            remove => HookHandler._beforeGetEntryGateName -= value;
        }

        public static event Delegates.AddMPCharge_BeforeArgs AddMPCharge
        {
            add
            {
                HookHandler._beforeAddMPCharge += value;
                HookHandler.HookAddMPCharge();
            }
            remove => HookHandler._beforeAddMPCharge -= value;
        }

        public static event Delegates.SoulGain_BeforeArgs SoulGain
        {
            add
            {
                HookHandler._beforeSoulGain += value;
                HookHandler.HookSoulGain();
            }
            remove => HookHandler._beforeSoulGain -= value;
        }

        public static event Delegates.AddMPChargeSpa_BeforeArgs AddMPChargeSpa
        {
            add
            {
                HookHandler._beforeAddMPChargeSpa += value;
                HookHandler.HookAddMPChargeSpa();
            }
            remove => HookHandler._beforeAddMPChargeSpa -= value;
        }

        public static event Delegates.TryAddMPChargeSpa_BeforeArgs TryAddMPChargeSpa
        {
            add
            {
                HookHandler._beforeTryAddMPChargeSpa += value;
                HookHandler.HookTryAddMPChargeSpa();
            }
            remove => HookHandler._beforeTryAddMPChargeSpa -= value;
        }

        public static event Delegates.SetMPCharge_BeforeArgs SetMPCharge
        {
            add
            {
                HookHandler._beforeSetMPCharge += value;
                HookHandler.HookSetMPCharge();
            }
            remove => HookHandler._beforeSetMPCharge -= value;
        }

        public static event Delegates.TakeMP_BeforeArgs TakeMP
        {
            add
            {
                HookHandler._beforeTakeMP += value;
                HookHandler.HookTakeMP();
            }
            remove => HookHandler._beforeTakeMP -= value;
        }

        public static event Delegates.TakeMPQuick_BeforeArgs TakeMPQuick
        {
            add
            {
                HookHandler._beforeTakeMPQuick += value;
                HookHandler.HookTakeMPQuick();
            }
            remove => HookHandler._beforeTakeMPQuick -= value;
        }

        public static event Delegates.TakeReserveMP_BeforeArgs TakeReserveMP
        {
            add
            {
                HookHandler._beforeTakeReserveMP += value;
                HookHandler.HookTakeReserveMP();
            }
            remove => HookHandler._beforeTakeReserveMP -= value;
        }

        public static event Delegates.AddHealth_BeforeArgs AddHealth
        {
            add
            {
                HookHandler._beforeAddHealth += value;
                HookHandler.HookAddHealth();
            }
            remove => HookHandler._beforeAddHealth -= value;
        }

        public static event Delegates.TakeHealth_BeforeArgs TakeHealth
        {
            add
            {
                HookHandler._beforeTakeHealth += value;
                HookHandler.HookTakeHealth();
            }
            remove => HookHandler._beforeTakeHealth -= value;
        }

        public static event Delegates.MaxHealth_BeforeArgs MaxHealth
        {
            add
            {
                HookHandler._beforeMaxHealth += value;
                HookHandler.HookMaxHealth();
            }
            remove => HookHandler._beforeMaxHealth -= value;
        }

        public static event Delegates.MaxHealthKeepBlue_BeforeArgs MaxHealthKeepBlue
        {
            add
            {
                HookHandler._beforeMaxHealthKeepBlue += value;
                HookHandler.HookMaxHealthKeepBlue();
            }
            remove => HookHandler._beforeMaxHealthKeepBlue -= value;
        }

        public static event Delegates.AddToMaxHealth_BeforeArgs AddToMaxHealth
        {
            add
            {
                HookHandler._beforeAddToMaxHealth += value;
                HookHandler.HookAddToMaxHealth();
            }
            remove => HookHandler._beforeAddToMaxHealth -= value;
        }

        public static event Delegates.ClearMP_BeforeArgs ClearMP
        {
            add
            {
                HookHandler._beforeClearMP += value;
                HookHandler.HookClearMP();
            }
            remove => HookHandler._beforeClearMP -= value;
        }

        public static event Delegates.ClearMPSendEvents_BeforeArgs ClearMPSendEvents
        {
            add
            {
                HookHandler._beforeClearMPSendEvents += value;
                HookHandler.HookClearMPSendEvents();
            }
            remove => HookHandler._beforeClearMPSendEvents -= value;
        }

        public static event Delegates.AddToMaxMPReserve_BeforeArgs AddToMaxMPReserve
        {
            add
            {
                HookHandler._beforeAddToMaxMPReserve += value;
                HookHandler.HookAddToMaxMPReserve();
            }
            remove => HookHandler._beforeAddToMaxMPReserve -= value;
        }

        public static event Delegates.Bounce_BeforeArgs Bounce
        {
            add
            {
                HookHandler._beforeBounce += value;
                HookHandler.HookBounce();
            }
            remove => HookHandler._beforeBounce -= value;
        }

        public static event Delegates.BounceHigh_BeforeArgs BounceHigh
        {
            add
            {
                HookHandler._beforeBounceHigh += value;
                HookHandler.HookBounceHigh();
            }
            remove => HookHandler._beforeBounceHigh -= value;
        }

        public static event Delegates.ShroomBounce_BeforeArgs ShroomBounce
        {
            add
            {
                HookHandler._beforeShroomBounce += value;
                HookHandler.HookShroomBounce();
            }
            remove => HookHandler._beforeShroomBounce -= value;
        }

        public static event Delegates.RecoilLeft_BeforeArgs RecoilLeft
        {
            add
            {
                HookHandler._beforeRecoilLeft += value;
                HookHandler.HookRecoilLeft();
            }
            remove => HookHandler._beforeRecoilLeft -= value;
        }

        public static event Delegates.RecoilRight_BeforeArgs RecoilRight
        {
            add
            {
                HookHandler._beforeRecoilRight += value;
                HookHandler.HookRecoilRight();
            }
            remove => HookHandler._beforeRecoilRight -= value;
        }

        public static event Delegates.RecoilRightLong_BeforeArgs RecoilRightLong
        {
            add
            {
                HookHandler._beforeRecoilRightLong += value;
                HookHandler.HookRecoilRightLong();
            }
            remove => HookHandler._beforeRecoilRightLong -= value;
        }

        public static event Delegates.RecoilLeftLong_BeforeArgs RecoilLeftLong
        {
            add
            {
                HookHandler._beforeRecoilLeftLong += value;
                HookHandler.HookRecoilLeftLong();
            }
            remove => HookHandler._beforeRecoilLeftLong -= value;
        }

        public static event Delegates.RecoilDown_BeforeArgs RecoilDown
        {
            add
            {
                HookHandler._beforeRecoilDown += value;
                HookHandler.HookRecoilDown();
            }
            remove => HookHandler._beforeRecoilDown -= value;
        }

        public static event Delegates.ForceHardLanding_BeforeArgs ForceHardLanding
        {
            add
            {
                HookHandler._beforeForceHardLanding += value;
                HookHandler.HookForceHardLanding();
            }
            remove => HookHandler._beforeForceHardLanding -= value;
        }

        public static event Delegates.EnterSceneDreamGate_BeforeArgs EnterSceneDreamGate
        {
            add
            {
                HookHandler._beforeEnterSceneDreamGate += value;
                HookHandler.HookEnterSceneDreamGate();
            }
            remove => HookHandler._beforeEnterSceneDreamGate -= value;
        }

        public static event Delegates.EnterScene_BeforeArgs EnterScene
        {
            add
            {
                HookHandler._beforeEnterScene += value;
                HookHandler.HookEnterScene();
            }
            remove => HookHandler._beforeEnterScene -= value;
        }

        public static event Delegates.LeaveScene_BeforeArgs LeaveScene
        {
            add
            {
                HookHandler._beforeLeaveScene += value;
                HookHandler.HookLeaveScene();
            }
            remove => HookHandler._beforeLeaveScene -= value;
        }

        public static event Delegates.BetaLeave_BeforeArgs BetaLeave
        {
            add
            {
                HookHandler._beforeBetaLeave += value;
                HookHandler.HookBetaLeave();
            }
            remove => HookHandler._beforeBetaLeave -= value;
        }

        public static event Delegates.BetaReturn_BeforeArgs BetaReturn
        {
            add
            {
                HookHandler._beforeBetaReturn += value;
                HookHandler.HookBetaReturn();
            }
            remove => HookHandler._beforeBetaReturn -= value;
        }

        public static event Delegates.Respawn_BeforeArgs Respawn
        {
            add
            {
                HookHandler._beforeRespawn += value;
                HookHandler.HookRespawn();
            }
            remove => HookHandler._beforeRespawn -= value;
        }

        public static event Delegates.HazardRespawn_BeforeArgs HazardRespawn
        {
            add
            {
                HookHandler._beforeHazardRespawn += value;
                HookHandler.HookHazardRespawn();
            }
            remove => HookHandler._beforeHazardRespawn -= value;
        }

        public static event Delegates.StartCyclone_BeforeArgs StartCyclone
        {
            add
            {
                HookHandler._beforeStartCyclone += value;
                HookHandler.HookStartCyclone();
            }
            remove => HookHandler._beforeStartCyclone -= value;
        }

        public static event Delegates.EndCyclone_BeforeArgs EndCyclone
        {
            add
            {
                HookHandler._beforeEndCyclone += value;
                HookHandler.HookEndCyclone();
            }
            remove => HookHandler._beforeEndCyclone -= value;
        }

        public static event Delegates.GetState_BeforeArgs GetState
        {
            add
            {
                HookHandler._beforeGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._beforeGetState -= value;
        }

        public static event Delegates.GetCState_BeforeArgs GetCState
        {
            add
            {
                HookHandler._beforeGetCState += value;
                HookHandler.HookGetCState();
            }
            remove => HookHandler._beforeGetCState -= value;
        }

        public static event Delegates.SetCState_BeforeArgs SetCState
        {
            add
            {
                HookHandler._beforeSetCState += value;
                HookHandler.HookSetCState();
            }
            remove => HookHandler._beforeSetCState -= value;
        }

        public static event Delegates.ResetHardLandingTimer_BeforeArgs ResetHardLandingTimer
        {
            add
            {
                HookHandler._beforeResetHardLandingTimer += value;
                HookHandler.HookResetHardLandingTimer();
            }
            remove => HookHandler._beforeResetHardLandingTimer -= value;
        }

        public static event Delegates.CancelSuperDash_BeforeArgs CancelSuperDash
        {
            add
            {
                HookHandler._beforeCancelSuperDash += value;
                HookHandler.HookCancelSuperDash();
            }
            remove => HookHandler._beforeCancelSuperDash -= value;
        }

        public static event Delegates.RelinquishControlNotVelocity_BeforeArgs RelinquishControlNotVelocity
        {
            add
            {
                HookHandler._beforeRelinquishControlNotVelocity += value;
                HookHandler.HookRelinquishControlNotVelocity();
            }
            remove => HookHandler._beforeRelinquishControlNotVelocity -= value;
        }

        public static event Delegates.RelinquishControl_BeforeArgs RelinquishControl
        {
            add
            {
                HookHandler._beforeRelinquishControl += value;
                HookHandler.HookRelinquishControl();
            }
            remove => HookHandler._beforeRelinquishControl -= value;
        }

        public static event Delegates.RegainControl_BeforeArgs RegainControl
        {
            add
            {
                HookHandler._beforeRegainControl += value;
                HookHandler.HookRegainControl();
            }
            remove => HookHandler._beforeRegainControl -= value;
        }

        public static event Delegates.PreventCastByDialogueEnd_BeforeArgs PreventCastByDialogueEnd
        {
            add
            {
                HookHandler._beforePreventCastByDialogueEnd += value;
                HookHandler.HookPreventCastByDialogueEnd();
            }
            remove => HookHandler._beforePreventCastByDialogueEnd -= value;
        }

        public static event Delegates.CanCast_BeforeArgs CanCast
        {
            add
            {
                HookHandler._beforeCanCast += value;
                HookHandler.HookCanCast();
            }
            remove => HookHandler._beforeCanCast -= value;
        }

        public static event Delegates.CanFocus_BeforeArgs CanFocus
        {
            add
            {
                HookHandler._beforeCanFocus += value;
                HookHandler.HookCanFocus();
            }
            remove => HookHandler._beforeCanFocus -= value;
        }

        public static event Delegates.CanNailArt_BeforeArgs CanNailArt
        {
            add
            {
                HookHandler._beforeCanNailArt += value;
                HookHandler.HookCanNailArt();
            }
            remove => HookHandler._beforeCanNailArt -= value;
        }

        public static event Delegates.CanQuickMap_BeforeArgs CanQuickMap
        {
            add
            {
                HookHandler._beforeCanQuickMap += value;
                HookHandler.HookCanQuickMap();
            }
            remove => HookHandler._beforeCanQuickMap -= value;
        }

        public static event Delegates.CanInspect_BeforeArgs CanInspect
        {
            add
            {
                HookHandler._beforeCanInspect += value;
                HookHandler.HookCanInspect();
            }
            remove => HookHandler._beforeCanInspect -= value;
        }

        public static event Delegates.CanBackDash_BeforeArgs CanBackDash
        {
            add
            {
                HookHandler._beforeCanBackDash += value;
                HookHandler.HookCanBackDash();
            }
            remove => HookHandler._beforeCanBackDash -= value;
        }

        public static event Delegates.CanSuperDash_BeforeArgs CanSuperDash
        {
            add
            {
                HookHandler._beforeCanSuperDash += value;
                HookHandler.HookCanSuperDash();
            }
            remove => HookHandler._beforeCanSuperDash -= value;
        }

        public static event Delegates.CanDreamNail_BeforeArgs CanDreamNail
        {
            add
            {
                HookHandler._beforeCanDreamNail += value;
                HookHandler.HookCanDreamNail();
            }
            remove => HookHandler._beforeCanDreamNail -= value;
        }

        public static event Delegates.CanDreamGate_BeforeArgs CanDreamGate
        {
            add
            {
                HookHandler._beforeCanDreamGate += value;
                HookHandler.HookCanDreamGate();
            }
            remove => HookHandler._beforeCanDreamGate -= value;
        }

        public static event Delegates.CanInteract_BeforeArgs CanInteract
        {
            add
            {
                HookHandler._beforeCanInteract += value;
                HookHandler.HookCanInteract();
            }
            remove => HookHandler._beforeCanInteract -= value;
        }

        public static event Delegates.CanOpenInventory_BeforeArgs CanOpenInventory
        {
            add
            {
                HookHandler._beforeCanOpenInventory += value;
                HookHandler.HookCanOpenInventory();
            }
            remove => HookHandler._beforeCanOpenInventory -= value;
        }

        public static event Delegates.SetDamageMode_int_BeforeArgs SetDamageMode_int
        {
            add
            {
                HookHandler._beforeSetDamageMode_int += value;
                HookHandler.HookSetDamageMode_int();
            }
            remove => HookHandler._beforeSetDamageMode_int -= value;
        }

        public static event Delegates.SetDamageModeFSM_BeforeArgs SetDamageModeFSM
        {
            add
            {
                HookHandler._beforeSetDamageModeFSM += value;
                HookHandler.HookSetDamageModeFSM();
            }
            remove => HookHandler._beforeSetDamageModeFSM -= value;
        }

        public static event Delegates.ResetQuakeDamage_BeforeArgs ResetQuakeDamage
        {
            add
            {
                HookHandler._beforeResetQuakeDamage += value;
                HookHandler.HookResetQuakeDamage();
            }
            remove => HookHandler._beforeResetQuakeDamage -= value;
        }

        public static event Delegates.SetDamageMode_DamageMode_BeforeArgs SetDamageMode_DamageMode
        {
            add
            {
                HookHandler._beforeSetDamageMode_DamageMode += value;
                HookHandler.HookSetDamageMode_DamageMode();
            }
            remove => HookHandler._beforeSetDamageMode_DamageMode -= value;
        }

        public static event Delegates.StopAnimationControl_BeforeArgs StopAnimationControl
        {
            add
            {
                HookHandler._beforeStopAnimationControl += value;
                HookHandler.HookStopAnimationControl();
            }
            remove => HookHandler._beforeStopAnimationControl -= value;
        }

        public static event Delegates.StartAnimationControl_BeforeArgs StartAnimationControl
        {
            add
            {
                HookHandler._beforeStartAnimationControl += value;
                HookHandler.HookStartAnimationControl();
            }
            remove => HookHandler._beforeStartAnimationControl -= value;
        }

        public static event Delegates.IgnoreInput_BeforeArgs IgnoreInput
        {
            add
            {
                HookHandler._beforeIgnoreInput += value;
                HookHandler.HookIgnoreInput();
            }
            remove => HookHandler._beforeIgnoreInput -= value;
        }

        public static event Delegates.IgnoreInputWithoutReset_BeforeArgs IgnoreInputWithoutReset
        {
            add
            {
                HookHandler._beforeIgnoreInputWithoutReset += value;
                HookHandler.HookIgnoreInputWithoutReset();
            }
            remove => HookHandler._beforeIgnoreInputWithoutReset -= value;
        }

        public static event Delegates.AcceptInput_BeforeArgs AcceptInput
        {
            add
            {
                HookHandler._beforeAcceptInput += value;
                HookHandler.HookAcceptInput();
            }
            remove => HookHandler._beforeAcceptInput -= value;
        }

        public static event Delegates.Pause_BeforeArgs Pause
        {
            add
            {
                HookHandler._beforePause += value;
                HookHandler.HookPause();
            }
            remove => HookHandler._beforePause -= value;
        }

        public static event Delegates.UnPause_BeforeArgs UnPause
        {
            add
            {
                HookHandler._beforeUnPause += value;
                HookHandler.HookUnPause();
            }
            remove => HookHandler._beforeUnPause -= value;
        }

        public static event Delegates.NearBench_BeforeArgs NearBench
        {
            add
            {
                HookHandler._beforeNearBench += value;
                HookHandler.HookNearBench();
            }
            remove => HookHandler._beforeNearBench -= value;
        }

        public static event Delegates.SetWalkZone_BeforeArgs SetWalkZone
        {
            add
            {
                HookHandler._beforeSetWalkZone += value;
                HookHandler.HookSetWalkZone();
            }
            remove => HookHandler._beforeSetWalkZone -= value;
        }

        public static event Delegates.ResetState_BeforeArgs ResetState
        {
            add
            {
                HookHandler._beforeResetState += value;
                HookHandler.HookResetState();
            }
            remove => HookHandler._beforeResetState -= value;
        }

        public static event Delegates.StopPlayingAudio_BeforeArgs StopPlayingAudio
        {
            add
            {
                HookHandler._beforeStopPlayingAudio += value;
                HookHandler.HookStopPlayingAudio();
            }
            remove => HookHandler._beforeStopPlayingAudio -= value;
        }

        public static event Delegates.PauseAudio_BeforeArgs PauseAudio
        {
            add
            {
                HookHandler._beforePauseAudio += value;
                HookHandler.HookPauseAudio();
            }
            remove => HookHandler._beforePauseAudio -= value;
        }

        public static event Delegates.UnPauseAudio_BeforeArgs UnPauseAudio
        {
            add
            {
                HookHandler._beforeUnPauseAudio += value;
                HookHandler.HookUnPauseAudio();
            }
            remove => HookHandler._beforeUnPauseAudio -= value;
        }

        public static event Delegates.PauseInput_BeforeArgs PauseInput
        {
            add
            {
                HookHandler._beforePauseInput += value;
                HookHandler.HookPauseInput();
            }
            remove => HookHandler._beforePauseInput -= value;
        }

        public static event Delegates.UnPauseInput_BeforeArgs UnPauseInput
        {
            add
            {
                HookHandler._beforeUnPauseInput += value;
                HookHandler.HookUnPauseInput();
            }
            remove => HookHandler._beforeUnPauseInput -= value;
        }

        public static event Delegates.SpawnSoftLandingPrefab_BeforeArgs SpawnSoftLandingPrefab
        {
            add
            {
                HookHandler._beforeSpawnSoftLandingPrefab += value;
                HookHandler.HookSpawnSoftLandingPrefab();
            }
            remove => HookHandler._beforeSpawnSoftLandingPrefab -= value;
        }

        public static event Delegates.AffectedByGravity_BeforeArgs AffectedByGravity
        {
            add
            {
                HookHandler._beforeAffectedByGravity += value;
                HookHandler.HookAffectedByGravity();
            }
            remove => HookHandler._beforeAffectedByGravity -= value;
        }

        public static event Delegates.LookForInput_BeforeArgs LookForInput
        {
            add
            {
                HookHandler._beforeLookForInput += value;
                HookHandler.HookLookForInput();
            }
            remove => HookHandler._beforeLookForInput -= value;
        }

        public static event Delegates.LookForQueueInput_BeforeArgs LookForQueueInput
        {
            add
            {
                HookHandler._beforeLookForQueueInput += value;
                HookHandler.HookLookForQueueInput();
            }
            remove => HookHandler._beforeLookForQueueInput -= value;
        }

        public static event Delegates.HeroJump_BeforeArgs HeroJump
        {
            add
            {
                HookHandler._beforeHeroJump += value;
                HookHandler.HookHeroJump();
            }
            remove => HookHandler._beforeHeroJump -= value;
        }

        public static event Delegates.HeroJumpNoEffect_BeforeArgs HeroJumpNoEffect
        {
            add
            {
                HookHandler._beforeHeroJumpNoEffect += value;
                HookHandler.HookHeroJumpNoEffect();
            }
            remove => HookHandler._beforeHeroJumpNoEffect -= value;
        }

        public static event Delegates.DoWallJump_BeforeArgs DoWallJump
        {
            add
            {
                HookHandler._beforeDoWallJump += value;
                HookHandler.HookDoWallJump();
            }
            remove => HookHandler._beforeDoWallJump -= value;
        }

        public static event Delegates.DoDoubleJump_BeforeArgs DoDoubleJump
        {
            add
            {
                HookHandler._beforeDoDoubleJump += value;
                HookHandler.HookDoDoubleJump();
            }
            remove => HookHandler._beforeDoDoubleJump -= value;
        }

        public static event Delegates.DoHardLanding_BeforeArgs DoHardLanding
        {
            add
            {
                HookHandler._beforeDoHardLanding += value;
                HookHandler.HookDoHardLanding();
            }
            remove => HookHandler._beforeDoHardLanding -= value;
        }

        public static event Delegates.DoAttack_BeforeArgs DoAttack
        {
            add
            {
                HookHandler._beforeDoAttack += value;
                HookHandler.HookDoAttack();
            }
            remove => HookHandler._beforeDoAttack -= value;
        }

        public static event Delegates.HeroDash_BeforeArgs HeroDash
        {
            add
            {
                HookHandler._beforeHeroDash += value;
                HookHandler.HookHeroDash();
            }
            remove => HookHandler._beforeHeroDash -= value;
        }

        public static event Delegates.StartFallRumble_BeforeArgs StartFallRumble
        {
            add
            {
                HookHandler._beforeStartFallRumble += value;
                HookHandler.HookStartFallRumble();
            }
            remove => HookHandler._beforeStartFallRumble -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }

        public static event Delegates.FinishedEnteringScene_BeforeArgs FinishedEnteringScene
        {
            add
            {
                HookHandler._beforeFinishedEnteringScene += value;
                HookHandler.HookFinishedEnteringScene();
            }
            remove => HookHandler._beforeFinishedEnteringScene -= value;
        }

        public static event Delegates.Die_BeforeArgs Die
        {
            add
            {
                HookHandler._beforeDie += value;
                HookHandler.HookDie();
            }
            remove => HookHandler._beforeDie -= value;
        }

        public static event Delegates.DieFromHazard_BeforeArgs DieFromHazard
        {
            add
            {
                HookHandler._beforeDieFromHazard += value;
                HookHandler.HookDieFromHazard();
            }
            remove => HookHandler._beforeDieFromHazard -= value;
        }

        public static event Delegates.StartRecoil_BeforeArgs StartRecoil
        {
            add
            {
                HookHandler._beforeStartRecoil += value;
                HookHandler.HookStartRecoil();
            }
            remove => HookHandler._beforeStartRecoil -= value;
        }

        public static event Delegates.Invulnerable_BeforeArgs Invulnerable
        {
            add
            {
                HookHandler._beforeInvulnerable += value;
                HookHandler.HookInvulnerable();
            }
            remove => HookHandler._beforeInvulnerable -= value;
        }

        public static event Delegates.FirstFadeIn_BeforeArgs FirstFadeIn
        {
            add
            {
                HookHandler._beforeFirstFadeIn += value;
                HookHandler.HookFirstFadeIn();
            }
            remove => HookHandler._beforeFirstFadeIn -= value;
        }

        public static event Delegates.FallCheck_BeforeArgs FallCheck
        {
            add
            {
                HookHandler._beforeFallCheck += value;
                HookHandler.HookFallCheck();
            }
            remove => HookHandler._beforeFallCheck -= value;
        }

        public static event Delegates.OutOfBoundsCheck_BeforeArgs OutOfBoundsCheck
        {
            add
            {
                HookHandler._beforeOutOfBoundsCheck += value;
                HookHandler.HookOutOfBoundsCheck();
            }
            remove => HookHandler._beforeOutOfBoundsCheck -= value;
        }

        public static event Delegates.ConfirmOutOfBounds_BeforeArgs ConfirmOutOfBounds
        {
            add
            {
                HookHandler._beforeConfirmOutOfBounds += value;
                HookHandler.HookConfirmOutOfBounds();
            }
            remove => HookHandler._beforeConfirmOutOfBounds -= value;
        }

        public static event Delegates.FailSafeChecks_BeforeArgs FailSafeChecks
        {
            add
            {
                HookHandler._beforeFailSafeChecks += value;
                HookHandler.HookFailSafeChecks();
            }
            remove => HookHandler._beforeFailSafeChecks -= value;
        }

        public static event Delegates.LocateSpawnPoint_BeforeArgs LocateSpawnPoint
        {
            add
            {
                HookHandler._beforeLocateSpawnPoint += value;
                HookHandler.HookLocateSpawnPoint();
            }
            remove => HookHandler._beforeLocateSpawnPoint -= value;
        }

        public static event Delegates.CancelJump_BeforeArgs CancelJump
        {
            add
            {
                HookHandler._beforeCancelJump += value;
                HookHandler.HookCancelJump();
            }
            remove => HookHandler._beforeCancelJump -= value;
        }

        public static event Delegates.CancelDoubleJump_BeforeArgs CancelDoubleJump
        {
            add
            {
                HookHandler._beforeCancelDoubleJump += value;
                HookHandler.HookCancelDoubleJump();
            }
            remove => HookHandler._beforeCancelDoubleJump -= value;
        }

        public static event Delegates.CancelDash_BeforeArgs CancelDash
        {
            add
            {
                HookHandler._beforeCancelDash += value;
                HookHandler.HookCancelDash();
            }
            remove => HookHandler._beforeCancelDash -= value;
        }

        public static event Delegates.CancelWallsliding_BeforeArgs CancelWallsliding
        {
            add
            {
                HookHandler._beforeCancelWallsliding += value;
                HookHandler.HookCancelWallsliding();
            }
            remove => HookHandler._beforeCancelWallsliding -= value;
        }

        public static event Delegates.CancelBackDash_BeforeArgs CancelBackDash
        {
            add
            {
                HookHandler._beforeCancelBackDash += value;
                HookHandler.HookCancelBackDash();
            }
            remove => HookHandler._beforeCancelBackDash -= value;
        }

        public static event Delegates.CancelDownAttack_BeforeArgs CancelDownAttack
        {
            add
            {
                HookHandler._beforeCancelDownAttack += value;
                HookHandler.HookCancelDownAttack();
            }
            remove => HookHandler._beforeCancelDownAttack -= value;
        }

        public static event Delegates.CancelAttack_BeforeArgs CancelAttack
        {
            add
            {
                HookHandler._beforeCancelAttack += value;
                HookHandler.HookCancelAttack();
            }
            remove => HookHandler._beforeCancelAttack -= value;
        }

        public static event Delegates.CancelBounce_BeforeArgs CancelBounce
        {
            add
            {
                HookHandler._beforeCancelBounce += value;
                HookHandler.HookCancelBounce();
            }
            remove => HookHandler._beforeCancelBounce -= value;
        }

        public static event Delegates.CancelRecoilHorizontal_BeforeArgs CancelRecoilHorizontal
        {
            add
            {
                HookHandler._beforeCancelRecoilHorizontal += value;
                HookHandler.HookCancelRecoilHorizontal();
            }
            remove => HookHandler._beforeCancelRecoilHorizontal -= value;
        }

        public static event Delegates.CancelDamageRecoil_BeforeArgs CancelDamageRecoil
        {
            add
            {
                HookHandler._beforeCancelDamageRecoil += value;
                HookHandler.HookCancelDamageRecoil();
            }
            remove => HookHandler._beforeCancelDamageRecoil -= value;
        }

        public static event Delegates.CancelFallEffects_BeforeArgs CancelFallEffects
        {
            add
            {
                HookHandler._beforeCancelFallEffects += value;
                HookHandler.HookCancelFallEffects();
            }
            remove => HookHandler._beforeCancelFallEffects -= value;
        }

        public static event Delegates.ResetAttacks_BeforeArgs ResetAttacks
        {
            add
            {
                HookHandler._beforeResetAttacks += value;
                HookHandler.HookResetAttacks();
            }
            remove => HookHandler._beforeResetAttacks -= value;
        }

        public static event Delegates.ResetAttacksDash_BeforeArgs ResetAttacksDash
        {
            add
            {
                HookHandler._beforeResetAttacksDash += value;
                HookHandler.HookResetAttacksDash();
            }
            remove => HookHandler._beforeResetAttacksDash -= value;
        }

        public static event Delegates.ResetMotion_BeforeArgs ResetMotion
        {
            add
            {
                HookHandler._beforeResetMotion += value;
                HookHandler.HookResetMotion();
            }
            remove => HookHandler._beforeResetMotion -= value;
        }

        public static event Delegates.ResetMotionNotVelocity_BeforeArgs ResetMotionNotVelocity
        {
            add
            {
                HookHandler._beforeResetMotionNotVelocity += value;
                HookHandler.HookResetMotionNotVelocity();
            }
            remove => HookHandler._beforeResetMotionNotVelocity -= value;
        }

        public static event Delegates.ResetLook_BeforeArgs ResetLook
        {
            add
            {
                HookHandler._beforeResetLook += value;
                HookHandler.HookResetLook();
            }
            remove => HookHandler._beforeResetLook -= value;
        }

        public static event Delegates.ResetInput_BeforeArgs ResetInput
        {
            add
            {
                HookHandler._beforeResetInput += value;
                HookHandler.HookResetInput();
            }
            remove => HookHandler._beforeResetInput -= value;
        }

        public static event Delegates.BackOnGround_BeforeArgs BackOnGround
        {
            add
            {
                HookHandler._beforeBackOnGround += value;
                HookHandler.HookBackOnGround();
            }
            remove => HookHandler._beforeBackOnGround -= value;
        }

        public static event Delegates.JumpReleased_BeforeArgs JumpReleased
        {
            add
            {
                HookHandler._beforeJumpReleased += value;
                HookHandler.HookJumpReleased();
            }
            remove => HookHandler._beforeJumpReleased -= value;
        }

        public static event Delegates.FinishedDashing_BeforeArgs FinishedDashing
        {
            add
            {
                HookHandler._beforeFinishedDashing += value;
                HookHandler.HookFinishedDashing();
            }
            remove => HookHandler._beforeFinishedDashing -= value;
        }

        public static event Delegates.SetStartingMotionState_BeforeArgs SetStartingMotionState
        {
            add
            {
                HookHandler._beforeSetStartingMotionState += value;
                HookHandler.HookSetStartingMotionState();
            }
            remove => HookHandler._beforeSetStartingMotionState -= value;
        }

        public static event Delegates.SetStartingMotionState_bool_BeforeArgs SetStartingMotionState_bool
        {
            add
            {
                HookHandler._beforeSetStartingMotionState_bool += value;
                HookHandler.HookSetStartingMotionState_bool();
            }
            remove => HookHandler._beforeSetStartingMotionState_bool -= value;
        }

        public static event Delegates.EnterAcid_BeforeArgs EnterAcid
        {
            add
            {
                HookHandler._beforeEnterAcid += value;
                HookHandler.HookEnterAcid();
            }
            remove => HookHandler._beforeEnterAcid -= value;
        }

        public static event Delegates.ExitAcid_BeforeArgs ExitAcid
        {
            add
            {
                HookHandler._beforeExitAcid += value;
                HookHandler.HookExitAcid();
            }
            remove => HookHandler._beforeExitAcid -= value;
        }

        public static event Delegates.TileMapTest_BeforeArgs TileMapTest
        {
            add
            {
                HookHandler._beforeTileMapTest += value;
                HookHandler.HookTileMapTest();
            }
            remove => HookHandler._beforeTileMapTest -= value;
        }

        public static event Delegates.TilemapTestPause_BeforeArgs TilemapTestPause
        {
            add
            {
                HookHandler._beforeTilemapTestPause += value;
                HookHandler.HookTilemapTestPause();
            }
            remove => HookHandler._beforeTilemapTestPause -= value;
        }

        public static event Delegates.StopTilemapTest_BeforeArgs StopTilemapTest
        {
            add
            {
                HookHandler._beforeStopTilemapTest += value;
                HookHandler.HookStopTilemapTest();
            }
            remove => HookHandler._beforeStopTilemapTest -= value;
        }

        public static event Delegates.CheckForTerrainThunk_BeforeArgs CheckForTerrainThunk
        {
            add
            {
                HookHandler._beforeCheckForTerrainThunk += value;
                HookHandler.HookCheckForTerrainThunk();
            }
            remove => HookHandler._beforeCheckForTerrainThunk -= value;
        }

        public static event Delegates.CheckStillTouchingWall_BeforeArgs CheckStillTouchingWall
        {
            add
            {
                HookHandler._beforeCheckStillTouchingWall += value;
                HookHandler.HookCheckStillTouchingWall();
            }
            remove => HookHandler._beforeCheckStillTouchingWall -= value;
        }

        public static event Delegates.CheckForBump_BeforeArgs CheckForBump
        {
            add
            {
                HookHandler._beforeCheckForBump += value;
                HookHandler.HookCheckForBump();
            }
            remove => HookHandler._beforeCheckForBump -= value;
        }

        public static event Delegates.CheckNearRoof_BeforeArgs CheckNearRoof
        {
            add
            {
                HookHandler._beforeCheckNearRoof += value;
                HookHandler.HookCheckNearRoof();
            }
            remove => HookHandler._beforeCheckNearRoof -= value;
        }

        public static event Delegates.CheckTouchingGround_BeforeArgs CheckTouchingGround
        {
            add
            {
                HookHandler._beforeCheckTouchingGround += value;
                HookHandler.HookCheckTouchingGround();
            }
            remove => HookHandler._beforeCheckTouchingGround -= value;
        }

        public static event Delegates.CheckTouching_BeforeArgs CheckTouching
        {
            add
            {
                HookHandler._beforeCheckTouching += value;
                HookHandler.HookCheckTouching();
            }
            remove => HookHandler._beforeCheckTouching -= value;
        }

        public static event Delegates.CheckTouchingAdvanced_BeforeArgs CheckTouchingAdvanced
        {
            add
            {
                HookHandler._beforeCheckTouchingAdvanced += value;
                HookHandler.HookCheckTouchingAdvanced();
            }
            remove => HookHandler._beforeCheckTouchingAdvanced -= value;
        }

        public static event Delegates.FindCollisionDirection_BeforeArgs FindCollisionDirection
        {
            add
            {
                HookHandler._beforeFindCollisionDirection += value;
                HookHandler.HookFindCollisionDirection();
            }
            remove => HookHandler._beforeFindCollisionDirection -= value;
        }

        public static event Delegates.CanJump_BeforeArgs CanJump
        {
            add
            {
                HookHandler._beforeCanJump += value;
                HookHandler.HookCanJump();
            }
            remove => HookHandler._beforeCanJump -= value;
        }

        public static event Delegates.CanDoubleJump_BeforeArgs CanDoubleJump
        {
            add
            {
                HookHandler._beforeCanDoubleJump += value;
                HookHandler.HookCanDoubleJump();
            }
            remove => HookHandler._beforeCanDoubleJump -= value;
        }

        public static event Delegates.CanInfiniteAirJump_BeforeArgs CanInfiniteAirJump
        {
            add
            {
                HookHandler._beforeCanInfiniteAirJump += value;
                HookHandler.HookCanInfiniteAirJump();
            }
            remove => HookHandler._beforeCanInfiniteAirJump -= value;
        }

        public static event Delegates.CanSwim_BeforeArgs CanSwim
        {
            add
            {
                HookHandler._beforeCanSwim += value;
                HookHandler.HookCanSwim();
            }
            remove => HookHandler._beforeCanSwim -= value;
        }

        public static event Delegates.CanDash_BeforeArgs CanDash
        {
            add
            {
                HookHandler._beforeCanDash += value;
                HookHandler.HookCanDash();
            }
            remove => HookHandler._beforeCanDash -= value;
        }

        public static event Delegates.CanAttack_BeforeArgs CanAttack
        {
            add
            {
                HookHandler._beforeCanAttack += value;
                HookHandler.HookCanAttack();
            }
            remove => HookHandler._beforeCanAttack -= value;
        }

        public static event Delegates.CanNailCharge_BeforeArgs CanNailCharge
        {
            add
            {
                HookHandler._beforeCanNailCharge += value;
                HookHandler.HookCanNailCharge();
            }
            remove => HookHandler._beforeCanNailCharge -= value;
        }

        public static event Delegates.CanWallSlide_BeforeArgs CanWallSlide
        {
            add
            {
                HookHandler._beforeCanWallSlide += value;
                HookHandler.HookCanWallSlide();
            }
            remove => HookHandler._beforeCanWallSlide -= value;
        }

        public static event Delegates.CanTakeDamage_BeforeArgs CanTakeDamage
        {
            add
            {
                HookHandler._beforeCanTakeDamage += value;
                HookHandler.HookCanTakeDamage();
            }
            remove => HookHandler._beforeCanTakeDamage -= value;
        }

        public static event Delegates.CanWallJump_BeforeArgs CanWallJump
        {
            add
            {
                HookHandler._beforeCanWallJump += value;
                HookHandler.HookCanWallJump();
            }
            remove => HookHandler._beforeCanWallJump -= value;
        }

        public static event Delegates.ShouldHardLand_BeforeArgs ShouldHardLand
        {
            add
            {
                HookHandler._beforeShouldHardLand += value;
                HookHandler.HookShouldHardLand();
            }
            remove => HookHandler._beforeShouldHardLand -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionStay2D_BeforeArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._beforeOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._beforeOnCollisionStay2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_BeforeArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._beforeOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._beforeOnCollisionExit2D -= value;
        }

        public static event Delegates.SetupGameRefs_BeforeArgs SetupGameRefs
        {
            add
            {
                HookHandler._beforeSetupGameRefs += value;
                HookHandler.HookSetupGameRefs();
            }
            remove => HookHandler._beforeSetupGameRefs -= value;
        }

        public static event Delegates.SetupPools_BeforeArgs SetupPools
        {
            add
            {
                HookHandler._beforeSetupPools += value;
                HookHandler.HookSetupPools();
            }
            remove => HookHandler._beforeSetupPools -= value;
        }

        public static event Delegates.FilterInput_BeforeArgs FilterInput
        {
            add
            {
                HookHandler._beforeFilterInput += value;
                HookHandler.HookFilterInput();
            }
            remove => HookHandler._beforeFilterInput -= value;
        }

        public static event Delegates.FindGroundPoint_BeforeArgs FindGroundPoint
        {
            add
            {
                HookHandler._beforeFindGroundPoint += value;
                HookHandler.HookFindGroundPoint();
            }
            remove => HookHandler._beforeFindGroundPoint -= value;
        }

        public static event Delegates.FindGroundPointY_BeforeArgs FindGroundPointY
        {
            add
            {
                HookHandler._beforeFindGroundPointY += value;
                HookHandler.HookFindGroundPointY();
            }
            remove => HookHandler._beforeFindGroundPointY -= value;
        }

        public static event Delegates.orig_StartMPDrain_BeforeArgs orig_StartMPDrain
        {
            add
            {
                HookHandler._beforeorig_StartMPDrain += value;
                HookHandler.Hookorig_StartMPDrain();
            }
            remove => HookHandler._beforeorig_StartMPDrain -= value;
        }

        public static event Delegates.orig_Update_BeforeArgs orig_Update
        {
            add
            {
                HookHandler._beforeorig_Update += value;
                HookHandler.Hookorig_Update();
            }
            remove => HookHandler._beforeorig_Update -= value;
        }

        public static event Delegates.OrigDashVector_BeforeArgs OrigDashVector
        {
            add
            {
                HookHandler._beforeOrigDashVector += value;
                HookHandler.HookOrigDashVector();
            }
            remove => HookHandler._beforeOrigDashVector -= value;
        }

        public static event Delegates.orig_Dash_BeforeArgs orig_Dash
        {
            add
            {
                HookHandler._beforeorig_Dash += value;
                HookHandler.Hookorig_Dash();
            }
            remove => HookHandler._beforeorig_Dash -= value;
        }

        public static event Delegates.orig_CharmUpdate_BeforeArgs orig_CharmUpdate
        {
            add
            {
                HookHandler._beforeorig_CharmUpdate += value;
                HookHandler.Hookorig_CharmUpdate();
            }
            remove => HookHandler._beforeorig_CharmUpdate -= value;
        }

        public static event Delegates.orig_DoAttack_BeforeArgs orig_DoAttack
        {
            add
            {
                HookHandler._beforeorig_DoAttack += value;
                HookHandler.Hookorig_DoAttack();
            }
            remove => HookHandler._beforeorig_DoAttack -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_fallTimer_NormalArgs get_fallTimer
        {
            add
            {
                HookHandler._afterget_fallTimer += value;
                HookHandler.Hookget_fallTimer();
            }
            remove => HookHandler._afterget_fallTimer -= value;
        }

        public static event Delegates.set_fallTimer_NormalArgs set_fallTimer
        {
            add
            {
                HookHandler._afterset_fallTimer += value;
                HookHandler.Hookset_fallTimer();
            }
            remove => HookHandler._afterset_fallTimer -= value;
        }

        public static event Delegates.get_geoCounter_NormalArgs get_geoCounter
        {
            add
            {
                HookHandler._afterget_geoCounter += value;
                HookHandler.Hookget_geoCounter();
            }
            remove => HookHandler._afterget_geoCounter -= value;
        }

        public static event Delegates.set_geoCounter_NormalArgs set_geoCounter
        {
            add
            {
                HookHandler._afterset_geoCounter += value;
                HookHandler.Hookset_geoCounter();
            }
            remove => HookHandler._afterset_geoCounter -= value;
        }

        public static event Delegates.get_proxyFSM_NormalArgs get_proxyFSM
        {
            add
            {
                HookHandler._afterget_proxyFSM += value;
                HookHandler.Hookget_proxyFSM();
            }
            remove => HookHandler._afterget_proxyFSM -= value;
        }

        public static event Delegates.set_proxyFSM_NormalArgs set_proxyFSM
        {
            add
            {
                HookHandler._afterset_proxyFSM += value;
                HookHandler.Hookset_proxyFSM();
            }
            remove => HookHandler._afterset_proxyFSM -= value;
        }

        public static event Delegates.get_sceneEntryGate_NormalArgs get_sceneEntryGate
        {
            add
            {
                HookHandler._afterget_sceneEntryGate += value;
                HookHandler.Hookget_sceneEntryGate();
            }
            remove => HookHandler._afterget_sceneEntryGate -= value;
        }

        public static event Delegates.set_sceneEntryGate_NormalArgs set_sceneEntryGate
        {
            add
            {
                HookHandler._afterset_sceneEntryGate += value;
                HookHandler.Hookset_sceneEntryGate();
            }
            remove => HookHandler._afterset_sceneEntryGate -= value;
        }

        public static event Delegates.get_IsDreamReturning_NormalArgs get_IsDreamReturning
        {
            add
            {
                HookHandler._afterget_IsDreamReturning += value;
                HookHandler.Hookget_IsDreamReturning();
            }
            remove => HookHandler._afterget_IsDreamReturning -= value;
        }

        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.get_SilentInstance_NormalArgs get_SilentInstance
        {
            add
            {
                HookHandler._afterget_SilentInstance += value;
                HookHandler.Hookget_SilentInstance();
            }
            remove => HookHandler._afterget_SilentInstance -= value;
        }

        public static event Delegates.get_UnsafeInstance_NormalArgs get_UnsafeInstance
        {
            add
            {
                HookHandler._afterget_UnsafeInstance += value;
                HookHandler.Hookget_UnsafeInstance();
            }
            remove => HookHandler._afterget_UnsafeInstance -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SceneInit_NormalArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.FixedUpdate_NormalArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.Update10_NormalArgs Update10
        {
            add
            {
                HookHandler._afterUpdate10 += value;
                HookHandler.HookUpdate10();
            }
            remove => HookHandler._afterUpdate10 -= value;
        }

        public static event Delegates.OnLevelUnload_NormalArgs OnLevelUnload
        {
            add
            {
                HookHandler._afterOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._afterOnLevelUnload -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Move_NormalArgs Move
        {
            add
            {
                HookHandler._afterMove += value;
                HookHandler.HookMove();
            }
            remove => HookHandler._afterMove -= value;
        }

        public static event Delegates.Jump_NormalArgs Jump
        {
            add
            {
                HookHandler._afterJump += value;
                HookHandler.HookJump();
            }
            remove => HookHandler._afterJump -= value;
        }

        public static event Delegates.DoubleJump_NormalArgs DoubleJump
        {
            add
            {
                HookHandler._afterDoubleJump += value;
                HookHandler.HookDoubleJump();
            }
            remove => HookHandler._afterDoubleJump -= value;
        }

        public static event Delegates.Attack_NormalArgs Attack
        {
            add
            {
                HookHandler._afterAttack += value;
                HookHandler.HookAttack();
            }
            remove => HookHandler._afterAttack -= value;
        }

        public static event Delegates.Dash_NormalArgs Dash
        {
            add
            {
                HookHandler._afterDash += value;
                HookHandler.HookDash();
            }
            remove => HookHandler._afterDash -= value;
        }

        public static event Delegates.BackDash_NormalArgs BackDash
        {
            add
            {
                HookHandler._afterBackDash += value;
                HookHandler.HookBackDash();
            }
            remove => HookHandler._afterBackDash -= value;
        }

        public static event Delegates.ShadowDash_NormalArgs ShadowDash
        {
            add
            {
                HookHandler._afterShadowDash += value;
                HookHandler.HookShadowDash();
            }
            remove => HookHandler._afterShadowDash -= value;
        }

        public static event Delegates.SuperDash_NormalArgs SuperDash
        {
            add
            {
                HookHandler._afterSuperDash += value;
                HookHandler.HookSuperDash();
            }
            remove => HookHandler._afterSuperDash -= value;
        }

        public static event Delegates.FaceRight_NormalArgs FaceRight
        {
            add
            {
                HookHandler._afterFaceRight += value;
                HookHandler.HookFaceRight();
            }
            remove => HookHandler._afterFaceRight -= value;
        }

        public static event Delegates.FaceLeft_NormalArgs FaceLeft
        {
            add
            {
                HookHandler._afterFaceLeft += value;
                HookHandler.HookFaceLeft();
            }
            remove => HookHandler._afterFaceLeft -= value;
        }

        public static event Delegates.StartMPDrain_NormalArgs StartMPDrain
        {
            add
            {
                HookHandler._afterStartMPDrain += value;
                HookHandler.HookStartMPDrain();
            }
            remove => HookHandler._afterStartMPDrain -= value;
        }

        public static event Delegates.StopMPDrain_NormalArgs StopMPDrain
        {
            add
            {
                HookHandler._afterStopMPDrain += value;
                HookHandler.HookStopMPDrain();
            }
            remove => HookHandler._afterStopMPDrain -= value;
        }

        public static event Delegates.SetBackOnGround_NormalArgs SetBackOnGround
        {
            add
            {
                HookHandler._afterSetBackOnGround += value;
                HookHandler.HookSetBackOnGround();
            }
            remove => HookHandler._afterSetBackOnGround -= value;
        }

        public static event Delegates.SetStartWithWallslide_NormalArgs SetStartWithWallslide
        {
            add
            {
                HookHandler._afterSetStartWithWallslide += value;
                HookHandler.HookSetStartWithWallslide();
            }
            remove => HookHandler._afterSetStartWithWallslide -= value;
        }

        public static event Delegates.SetStartWithJump_NormalArgs SetStartWithJump
        {
            add
            {
                HookHandler._afterSetStartWithJump += value;
                HookHandler.HookSetStartWithJump();
            }
            remove => HookHandler._afterSetStartWithJump -= value;
        }

        public static event Delegates.SetStartWithFullJump_NormalArgs SetStartWithFullJump
        {
            add
            {
                HookHandler._afterSetStartWithFullJump += value;
                HookHandler.HookSetStartWithFullJump();
            }
            remove => HookHandler._afterSetStartWithFullJump -= value;
        }

        public static event Delegates.SetStartWithDash_NormalArgs SetStartWithDash
        {
            add
            {
                HookHandler._afterSetStartWithDash += value;
                HookHandler.HookSetStartWithDash();
            }
            remove => HookHandler._afterSetStartWithDash -= value;
        }

        public static event Delegates.SetStartWithAttack_NormalArgs SetStartWithAttack
        {
            add
            {
                HookHandler._afterSetStartWithAttack += value;
                HookHandler.HookSetStartWithAttack();
            }
            remove => HookHandler._afterSetStartWithAttack -= value;
        }

        public static event Delegates.SetSuperDashExit_NormalArgs SetSuperDashExit
        {
            add
            {
                HookHandler._afterSetSuperDashExit += value;
                HookHandler.HookSetSuperDashExit();
            }
            remove => HookHandler._afterSetSuperDashExit -= value;
        }

        public static event Delegates.SetQuakeExit_NormalArgs SetQuakeExit
        {
            add
            {
                HookHandler._afterSetQuakeExit += value;
                HookHandler.HookSetQuakeExit();
            }
            remove => HookHandler._afterSetQuakeExit -= value;
        }

        public static event Delegates.SetTakeNoDamage_NormalArgs SetTakeNoDamage
        {
            add
            {
                HookHandler._afterSetTakeNoDamage += value;
                HookHandler.HookSetTakeNoDamage();
            }
            remove => HookHandler._afterSetTakeNoDamage -= value;
        }

        public static event Delegates.EndTakeNoDamage_NormalArgs EndTakeNoDamage
        {
            add
            {
                HookHandler._afterEndTakeNoDamage += value;
                HookHandler.HookEndTakeNoDamage();
            }
            remove => HookHandler._afterEndTakeNoDamage -= value;
        }

        public static event Delegates.SetHeroParent_NormalArgs SetHeroParent
        {
            add
            {
                HookHandler._afterSetHeroParent += value;
                HookHandler.HookSetHeroParent();
            }
            remove => HookHandler._afterSetHeroParent -= value;
        }

        public static event Delegates.IsSwimming_NormalArgs IsSwimming
        {
            add
            {
                HookHandler._afterIsSwimming += value;
                HookHandler.HookIsSwimming();
            }
            remove => HookHandler._afterIsSwimming -= value;
        }

        public static event Delegates.NotSwimming_NormalArgs NotSwimming
        {
            add
            {
                HookHandler._afterNotSwimming += value;
                HookHandler.HookNotSwimming();
            }
            remove => HookHandler._afterNotSwimming -= value;
        }

        public static event Delegates.EnableRenderer_NormalArgs EnableRenderer
        {
            add
            {
                HookHandler._afterEnableRenderer += value;
                HookHandler.HookEnableRenderer();
            }
            remove => HookHandler._afterEnableRenderer -= value;
        }

        public static event Delegates.ResetAirMoves_NormalArgs ResetAirMoves
        {
            add
            {
                HookHandler._afterResetAirMoves += value;
                HookHandler.HookResetAirMoves();
            }
            remove => HookHandler._afterResetAirMoves -= value;
        }

        public static event Delegates.SetConveyorSpeed_NormalArgs SetConveyorSpeed
        {
            add
            {
                HookHandler._afterSetConveyorSpeed += value;
                HookHandler.HookSetConveyorSpeed();
            }
            remove => HookHandler._afterSetConveyorSpeed -= value;
        }

        public static event Delegates.SetConveyorSpeedV_NormalArgs SetConveyorSpeedV
        {
            add
            {
                HookHandler._afterSetConveyorSpeedV += value;
                HookHandler.HookSetConveyorSpeedV();
            }
            remove => HookHandler._afterSetConveyorSpeedV -= value;
        }

        public static event Delegates.EnterWithoutInput_NormalArgs EnterWithoutInput
        {
            add
            {
                HookHandler._afterEnterWithoutInput += value;
                HookHandler.HookEnterWithoutInput();
            }
            remove => HookHandler._afterEnterWithoutInput -= value;
        }

        public static event Delegates.SetDarkness_NormalArgs SetDarkness
        {
            add
            {
                HookHandler._afterSetDarkness += value;
                HookHandler.HookSetDarkness();
            }
            remove => HookHandler._afterSetDarkness -= value;
        }

        public static event Delegates.CancelHeroJump_NormalArgs CancelHeroJump
        {
            add
            {
                HookHandler._afterCancelHeroJump += value;
                HookHandler.HookCancelHeroJump();
            }
            remove => HookHandler._afterCancelHeroJump -= value;
        }

        public static event Delegates.CharmUpdate_NormalArgs CharmUpdate
        {
            add
            {
                HookHandler._afterCharmUpdate += value;
                HookHandler.HookCharmUpdate();
            }
            remove => HookHandler._afterCharmUpdate -= value;
        }

        public static event Delegates.checkEnvironment_NormalArgs checkEnvironment
        {
            add
            {
                HookHandler._aftercheckEnvironment += value;
                HookHandler.HookcheckEnvironment();
            }
            remove => HookHandler._aftercheckEnvironment -= value;
        }

        public static event Delegates.SetBenchRespawn_NormalArgs SetBenchRespawn
        {
            add
            {
                HookHandler._afterSetBenchRespawn += value;
                HookHandler.HookSetBenchRespawn();
            }
            remove => HookHandler._afterSetBenchRespawn -= value;
        }

        public static event Delegates.SetHazardRespawn_NormalArgs SetHazardRespawn
        {
            add
            {
                HookHandler._afterSetHazardRespawn += value;
                HookHandler.HookSetHazardRespawn();
            }
            remove => HookHandler._afterSetHazardRespawn -= value;
        }

        public static event Delegates.AddGeo_NormalArgs AddGeo
        {
            add
            {
                HookHandler._afterAddGeo += value;
                HookHandler.HookAddGeo();
            }
            remove => HookHandler._afterAddGeo -= value;
        }

        public static event Delegates.ToZero_NormalArgs ToZero
        {
            add
            {
                HookHandler._afterToZero += value;
                HookHandler.HookToZero();
            }
            remove => HookHandler._afterToZero -= value;
        }

        public static event Delegates.AddGeoQuietly_NormalArgs AddGeoQuietly
        {
            add
            {
                HookHandler._afterAddGeoQuietly += value;
                HookHandler.HookAddGeoQuietly();
            }
            remove => HookHandler._afterAddGeoQuietly -= value;
        }

        public static event Delegates.AddGeoToCounter_NormalArgs AddGeoToCounter
        {
            add
            {
                HookHandler._afterAddGeoToCounter += value;
                HookHandler.HookAddGeoToCounter();
            }
            remove => HookHandler._afterAddGeoToCounter -= value;
        }

        public static event Delegates.TakeGeo_NormalArgs TakeGeo
        {
            add
            {
                HookHandler._afterTakeGeo += value;
                HookHandler.HookTakeGeo();
            }
            remove => HookHandler._afterTakeGeo -= value;
        }

        public static event Delegates.UpdateGeo_NormalArgs UpdateGeo
        {
            add
            {
                HookHandler._afterUpdateGeo += value;
                HookHandler.HookUpdateGeo();
            }
            remove => HookHandler._afterUpdateGeo -= value;
        }

        public static event Delegates.CanInput_NormalArgs CanInput
        {
            add
            {
                HookHandler._afterCanInput += value;
                HookHandler.HookCanInput();
            }
            remove => HookHandler._afterCanInput -= value;
        }

        public static event Delegates.CanTalk_NormalArgs CanTalk
        {
            add
            {
                HookHandler._afterCanTalk += value;
                HookHandler.HookCanTalk();
            }
            remove => HookHandler._afterCanTalk -= value;
        }

        public static event Delegates.FlipSprite_NormalArgs FlipSprite
        {
            add
            {
                HookHandler._afterFlipSprite += value;
                HookHandler.HookFlipSprite();
            }
            remove => HookHandler._afterFlipSprite -= value;
        }

        public static event Delegates.NailParry_NormalArgs NailParry
        {
            add
            {
                HookHandler._afterNailParry += value;
                HookHandler.HookNailParry();
            }
            remove => HookHandler._afterNailParry -= value;
        }

        public static event Delegates.NailParryRecover_NormalArgs NailParryRecover
        {
            add
            {
                HookHandler._afterNailParryRecover += value;
                HookHandler.HookNailParryRecover();
            }
            remove => HookHandler._afterNailParryRecover -= value;
        }

        public static event Delegates.QuakeInvuln_NormalArgs QuakeInvuln
        {
            add
            {
                HookHandler._afterQuakeInvuln += value;
                HookHandler.HookQuakeInvuln();
            }
            remove => HookHandler._afterQuakeInvuln -= value;
        }

        public static event Delegates.CancelParryInvuln_NormalArgs CancelParryInvuln
        {
            add
            {
                HookHandler._afterCancelParryInvuln += value;
                HookHandler.HookCancelParryInvuln();
            }
            remove => HookHandler._afterCancelParryInvuln -= value;
        }

        public static event Delegates.CycloneInvuln_NormalArgs CycloneInvuln
        {
            add
            {
                HookHandler._afterCycloneInvuln += value;
                HookHandler.HookCycloneInvuln();
            }
            remove => HookHandler._afterCycloneInvuln -= value;
        }

        public static event Delegates.SetWieldingLantern_NormalArgs SetWieldingLantern
        {
            add
            {
                HookHandler._afterSetWieldingLantern += value;
                HookHandler.HookSetWieldingLantern();
            }
            remove => HookHandler._afterSetWieldingLantern -= value;
        }

        public static event Delegates.TakeDamage_NormalArgs TakeDamage
        {
            add
            {
                HookHandler._afterTakeDamage += value;
                HookHandler.HookTakeDamage();
            }
            remove => HookHandler._afterTakeDamage -= value;
        }

        public static event Delegates.GetEntryGateName_NormalArgs GetEntryGateName
        {
            add
            {
                HookHandler._afterGetEntryGateName += value;
                HookHandler.HookGetEntryGateName();
            }
            remove => HookHandler._afterGetEntryGateName -= value;
        }

        public static event Delegates.AddMPCharge_NormalArgs AddMPCharge
        {
            add
            {
                HookHandler._afterAddMPCharge += value;
                HookHandler.HookAddMPCharge();
            }
            remove => HookHandler._afterAddMPCharge -= value;
        }

        public static event Delegates.SoulGain_NormalArgs SoulGain
        {
            add
            {
                HookHandler._afterSoulGain += value;
                HookHandler.HookSoulGain();
            }
            remove => HookHandler._afterSoulGain -= value;
        }

        public static event Delegates.AddMPChargeSpa_NormalArgs AddMPChargeSpa
        {
            add
            {
                HookHandler._afterAddMPChargeSpa += value;
                HookHandler.HookAddMPChargeSpa();
            }
            remove => HookHandler._afterAddMPChargeSpa -= value;
        }

        public static event Delegates.TryAddMPChargeSpa_NormalArgs TryAddMPChargeSpa
        {
            add
            {
                HookHandler._afterTryAddMPChargeSpa += value;
                HookHandler.HookTryAddMPChargeSpa();
            }
            remove => HookHandler._afterTryAddMPChargeSpa -= value;
        }

        public static event Delegates.SetMPCharge_NormalArgs SetMPCharge
        {
            add
            {
                HookHandler._afterSetMPCharge += value;
                HookHandler.HookSetMPCharge();
            }
            remove => HookHandler._afterSetMPCharge -= value;
        }

        public static event Delegates.TakeMP_NormalArgs TakeMP
        {
            add
            {
                HookHandler._afterTakeMP += value;
                HookHandler.HookTakeMP();
            }
            remove => HookHandler._afterTakeMP -= value;
        }

        public static event Delegates.TakeMPQuick_NormalArgs TakeMPQuick
        {
            add
            {
                HookHandler._afterTakeMPQuick += value;
                HookHandler.HookTakeMPQuick();
            }
            remove => HookHandler._afterTakeMPQuick -= value;
        }

        public static event Delegates.TakeReserveMP_NormalArgs TakeReserveMP
        {
            add
            {
                HookHandler._afterTakeReserveMP += value;
                HookHandler.HookTakeReserveMP();
            }
            remove => HookHandler._afterTakeReserveMP -= value;
        }

        public static event Delegates.AddHealth_NormalArgs AddHealth
        {
            add
            {
                HookHandler._afterAddHealth += value;
                HookHandler.HookAddHealth();
            }
            remove => HookHandler._afterAddHealth -= value;
        }

        public static event Delegates.TakeHealth_NormalArgs TakeHealth
        {
            add
            {
                HookHandler._afterTakeHealth += value;
                HookHandler.HookTakeHealth();
            }
            remove => HookHandler._afterTakeHealth -= value;
        }

        public static event Delegates.MaxHealth_NormalArgs MaxHealth
        {
            add
            {
                HookHandler._afterMaxHealth += value;
                HookHandler.HookMaxHealth();
            }
            remove => HookHandler._afterMaxHealth -= value;
        }

        public static event Delegates.MaxHealthKeepBlue_NormalArgs MaxHealthKeepBlue
        {
            add
            {
                HookHandler._afterMaxHealthKeepBlue += value;
                HookHandler.HookMaxHealthKeepBlue();
            }
            remove => HookHandler._afterMaxHealthKeepBlue -= value;
        }

        public static event Delegates.AddToMaxHealth_NormalArgs AddToMaxHealth
        {
            add
            {
                HookHandler._afterAddToMaxHealth += value;
                HookHandler.HookAddToMaxHealth();
            }
            remove => HookHandler._afterAddToMaxHealth -= value;
        }

        public static event Delegates.ClearMP_NormalArgs ClearMP
        {
            add
            {
                HookHandler._afterClearMP += value;
                HookHandler.HookClearMP();
            }
            remove => HookHandler._afterClearMP -= value;
        }

        public static event Delegates.ClearMPSendEvents_NormalArgs ClearMPSendEvents
        {
            add
            {
                HookHandler._afterClearMPSendEvents += value;
                HookHandler.HookClearMPSendEvents();
            }
            remove => HookHandler._afterClearMPSendEvents -= value;
        }

        public static event Delegates.AddToMaxMPReserve_NormalArgs AddToMaxMPReserve
        {
            add
            {
                HookHandler._afterAddToMaxMPReserve += value;
                HookHandler.HookAddToMaxMPReserve();
            }
            remove => HookHandler._afterAddToMaxMPReserve -= value;
        }

        public static event Delegates.Bounce_NormalArgs Bounce
        {
            add
            {
                HookHandler._afterBounce += value;
                HookHandler.HookBounce();
            }
            remove => HookHandler._afterBounce -= value;
        }

        public static event Delegates.BounceHigh_NormalArgs BounceHigh
        {
            add
            {
                HookHandler._afterBounceHigh += value;
                HookHandler.HookBounceHigh();
            }
            remove => HookHandler._afterBounceHigh -= value;
        }

        public static event Delegates.ShroomBounce_NormalArgs ShroomBounce
        {
            add
            {
                HookHandler._afterShroomBounce += value;
                HookHandler.HookShroomBounce();
            }
            remove => HookHandler._afterShroomBounce -= value;
        }

        public static event Delegates.RecoilLeft_NormalArgs RecoilLeft
        {
            add
            {
                HookHandler._afterRecoilLeft += value;
                HookHandler.HookRecoilLeft();
            }
            remove => HookHandler._afterRecoilLeft -= value;
        }

        public static event Delegates.RecoilRight_NormalArgs RecoilRight
        {
            add
            {
                HookHandler._afterRecoilRight += value;
                HookHandler.HookRecoilRight();
            }
            remove => HookHandler._afterRecoilRight -= value;
        }

        public static event Delegates.RecoilRightLong_NormalArgs RecoilRightLong
        {
            add
            {
                HookHandler._afterRecoilRightLong += value;
                HookHandler.HookRecoilRightLong();
            }
            remove => HookHandler._afterRecoilRightLong -= value;
        }

        public static event Delegates.RecoilLeftLong_NormalArgs RecoilLeftLong
        {
            add
            {
                HookHandler._afterRecoilLeftLong += value;
                HookHandler.HookRecoilLeftLong();
            }
            remove => HookHandler._afterRecoilLeftLong -= value;
        }

        public static event Delegates.RecoilDown_NormalArgs RecoilDown
        {
            add
            {
                HookHandler._afterRecoilDown += value;
                HookHandler.HookRecoilDown();
            }
            remove => HookHandler._afterRecoilDown -= value;
        }

        public static event Delegates.ForceHardLanding_NormalArgs ForceHardLanding
        {
            add
            {
                HookHandler._afterForceHardLanding += value;
                HookHandler.HookForceHardLanding();
            }
            remove => HookHandler._afterForceHardLanding -= value;
        }

        public static event Delegates.EnterSceneDreamGate_NormalArgs EnterSceneDreamGate
        {
            add
            {
                HookHandler._afterEnterSceneDreamGate += value;
                HookHandler.HookEnterSceneDreamGate();
            }
            remove => HookHandler._afterEnterSceneDreamGate -= value;
        }

        public static event Delegates.LeaveScene_NormalArgs LeaveScene
        {
            add
            {
                HookHandler._afterLeaveScene += value;
                HookHandler.HookLeaveScene();
            }
            remove => HookHandler._afterLeaveScene -= value;
        }

        public static event Delegates.StartCyclone_NormalArgs StartCyclone
        {
            add
            {
                HookHandler._afterStartCyclone += value;
                HookHandler.HookStartCyclone();
            }
            remove => HookHandler._afterStartCyclone -= value;
        }

        public static event Delegates.EndCyclone_NormalArgs EndCyclone
        {
            add
            {
                HookHandler._afterEndCyclone += value;
                HookHandler.HookEndCyclone();
            }
            remove => HookHandler._afterEndCyclone -= value;
        }

        public static event Delegates.GetState_NormalArgs GetState
        {
            add
            {
                HookHandler._afterGetState += value;
                HookHandler.HookGetState();
            }
            remove => HookHandler._afterGetState -= value;
        }

        public static event Delegates.GetCState_NormalArgs GetCState
        {
            add
            {
                HookHandler._afterGetCState += value;
                HookHandler.HookGetCState();
            }
            remove => HookHandler._afterGetCState -= value;
        }

        public static event Delegates.SetCState_NormalArgs SetCState
        {
            add
            {
                HookHandler._afterSetCState += value;
                HookHandler.HookSetCState();
            }
            remove => HookHandler._afterSetCState -= value;
        }

        public static event Delegates.ResetHardLandingTimer_NormalArgs ResetHardLandingTimer
        {
            add
            {
                HookHandler._afterResetHardLandingTimer += value;
                HookHandler.HookResetHardLandingTimer();
            }
            remove => HookHandler._afterResetHardLandingTimer -= value;
        }

        public static event Delegates.CancelSuperDash_NormalArgs CancelSuperDash
        {
            add
            {
                HookHandler._afterCancelSuperDash += value;
                HookHandler.HookCancelSuperDash();
            }
            remove => HookHandler._afterCancelSuperDash -= value;
        }

        public static event Delegates.RelinquishControlNotVelocity_NormalArgs RelinquishControlNotVelocity
        {
            add
            {
                HookHandler._afterRelinquishControlNotVelocity += value;
                HookHandler.HookRelinquishControlNotVelocity();
            }
            remove => HookHandler._afterRelinquishControlNotVelocity -= value;
        }

        public static event Delegates.RelinquishControl_NormalArgs RelinquishControl
        {
            add
            {
                HookHandler._afterRelinquishControl += value;
                HookHandler.HookRelinquishControl();
            }
            remove => HookHandler._afterRelinquishControl -= value;
        }

        public static event Delegates.RegainControl_NormalArgs RegainControl
        {
            add
            {
                HookHandler._afterRegainControl += value;
                HookHandler.HookRegainControl();
            }
            remove => HookHandler._afterRegainControl -= value;
        }

        public static event Delegates.PreventCastByDialogueEnd_NormalArgs PreventCastByDialogueEnd
        {
            add
            {
                HookHandler._afterPreventCastByDialogueEnd += value;
                HookHandler.HookPreventCastByDialogueEnd();
            }
            remove => HookHandler._afterPreventCastByDialogueEnd -= value;
        }

        public static event Delegates.CanCast_NormalArgs CanCast
        {
            add
            {
                HookHandler._afterCanCast += value;
                HookHandler.HookCanCast();
            }
            remove => HookHandler._afterCanCast -= value;
        }

        public static event Delegates.CanFocus_NormalArgs CanFocus
        {
            add
            {
                HookHandler._afterCanFocus += value;
                HookHandler.HookCanFocus();
            }
            remove => HookHandler._afterCanFocus -= value;
        }

        public static event Delegates.CanNailArt_NormalArgs CanNailArt
        {
            add
            {
                HookHandler._afterCanNailArt += value;
                HookHandler.HookCanNailArt();
            }
            remove => HookHandler._afterCanNailArt -= value;
        }

        public static event Delegates.CanQuickMap_NormalArgs CanQuickMap
        {
            add
            {
                HookHandler._afterCanQuickMap += value;
                HookHandler.HookCanQuickMap();
            }
            remove => HookHandler._afterCanQuickMap -= value;
        }

        public static event Delegates.CanInspect_NormalArgs CanInspect
        {
            add
            {
                HookHandler._afterCanInspect += value;
                HookHandler.HookCanInspect();
            }
            remove => HookHandler._afterCanInspect -= value;
        }

        public static event Delegates.CanBackDash_NormalArgs CanBackDash
        {
            add
            {
                HookHandler._afterCanBackDash += value;
                HookHandler.HookCanBackDash();
            }
            remove => HookHandler._afterCanBackDash -= value;
        }

        public static event Delegates.CanSuperDash_NormalArgs CanSuperDash
        {
            add
            {
                HookHandler._afterCanSuperDash += value;
                HookHandler.HookCanSuperDash();
            }
            remove => HookHandler._afterCanSuperDash -= value;
        }

        public static event Delegates.CanDreamNail_NormalArgs CanDreamNail
        {
            add
            {
                HookHandler._afterCanDreamNail += value;
                HookHandler.HookCanDreamNail();
            }
            remove => HookHandler._afterCanDreamNail -= value;
        }

        public static event Delegates.CanDreamGate_NormalArgs CanDreamGate
        {
            add
            {
                HookHandler._afterCanDreamGate += value;
                HookHandler.HookCanDreamGate();
            }
            remove => HookHandler._afterCanDreamGate -= value;
        }

        public static event Delegates.CanInteract_NormalArgs CanInteract
        {
            add
            {
                HookHandler._afterCanInteract += value;
                HookHandler.HookCanInteract();
            }
            remove => HookHandler._afterCanInteract -= value;
        }

        public static event Delegates.CanOpenInventory_NormalArgs CanOpenInventory
        {
            add
            {
                HookHandler._afterCanOpenInventory += value;
                HookHandler.HookCanOpenInventory();
            }
            remove => HookHandler._afterCanOpenInventory -= value;
        }

        public static event Delegates.SetDamageMode_int_NormalArgs SetDamageMode_int
        {
            add
            {
                HookHandler._afterSetDamageMode_int += value;
                HookHandler.HookSetDamageMode_int();
            }
            remove => HookHandler._afterSetDamageMode_int -= value;
        }

        public static event Delegates.SetDamageModeFSM_NormalArgs SetDamageModeFSM
        {
            add
            {
                HookHandler._afterSetDamageModeFSM += value;
                HookHandler.HookSetDamageModeFSM();
            }
            remove => HookHandler._afterSetDamageModeFSM -= value;
        }

        public static event Delegates.ResetQuakeDamage_NormalArgs ResetQuakeDamage
        {
            add
            {
                HookHandler._afterResetQuakeDamage += value;
                HookHandler.HookResetQuakeDamage();
            }
            remove => HookHandler._afterResetQuakeDamage -= value;
        }

        public static event Delegates.SetDamageMode_DamageMode_NormalArgs SetDamageMode_DamageMode
        {
            add
            {
                HookHandler._afterSetDamageMode_DamageMode += value;
                HookHandler.HookSetDamageMode_DamageMode();
            }
            remove => HookHandler._afterSetDamageMode_DamageMode -= value;
        }

        public static event Delegates.StopAnimationControl_NormalArgs StopAnimationControl
        {
            add
            {
                HookHandler._afterStopAnimationControl += value;
                HookHandler.HookStopAnimationControl();
            }
            remove => HookHandler._afterStopAnimationControl -= value;
        }

        public static event Delegates.StartAnimationControl_NormalArgs StartAnimationControl
        {
            add
            {
                HookHandler._afterStartAnimationControl += value;
                HookHandler.HookStartAnimationControl();
            }
            remove => HookHandler._afterStartAnimationControl -= value;
        }

        public static event Delegates.IgnoreInput_NormalArgs IgnoreInput
        {
            add
            {
                HookHandler._afterIgnoreInput += value;
                HookHandler.HookIgnoreInput();
            }
            remove => HookHandler._afterIgnoreInput -= value;
        }

        public static event Delegates.IgnoreInputWithoutReset_NormalArgs IgnoreInputWithoutReset
        {
            add
            {
                HookHandler._afterIgnoreInputWithoutReset += value;
                HookHandler.HookIgnoreInputWithoutReset();
            }
            remove => HookHandler._afterIgnoreInputWithoutReset -= value;
        }

        public static event Delegates.AcceptInput_NormalArgs AcceptInput
        {
            add
            {
                HookHandler._afterAcceptInput += value;
                HookHandler.HookAcceptInput();
            }
            remove => HookHandler._afterAcceptInput -= value;
        }

        public static event Delegates.Pause_NormalArgs Pause
        {
            add
            {
                HookHandler._afterPause += value;
                HookHandler.HookPause();
            }
            remove => HookHandler._afterPause -= value;
        }

        public static event Delegates.UnPause_NormalArgs UnPause
        {
            add
            {
                HookHandler._afterUnPause += value;
                HookHandler.HookUnPause();
            }
            remove => HookHandler._afterUnPause -= value;
        }

        public static event Delegates.NearBench_NormalArgs NearBench
        {
            add
            {
                HookHandler._afterNearBench += value;
                HookHandler.HookNearBench();
            }
            remove => HookHandler._afterNearBench -= value;
        }

        public static event Delegates.SetWalkZone_NormalArgs SetWalkZone
        {
            add
            {
                HookHandler._afterSetWalkZone += value;
                HookHandler.HookSetWalkZone();
            }
            remove => HookHandler._afterSetWalkZone -= value;
        }

        public static event Delegates.ResetState_NormalArgs ResetState
        {
            add
            {
                HookHandler._afterResetState += value;
                HookHandler.HookResetState();
            }
            remove => HookHandler._afterResetState -= value;
        }

        public static event Delegates.StopPlayingAudio_NormalArgs StopPlayingAudio
        {
            add
            {
                HookHandler._afterStopPlayingAudio += value;
                HookHandler.HookStopPlayingAudio();
            }
            remove => HookHandler._afterStopPlayingAudio -= value;
        }

        public static event Delegates.PauseAudio_NormalArgs PauseAudio
        {
            add
            {
                HookHandler._afterPauseAudio += value;
                HookHandler.HookPauseAudio();
            }
            remove => HookHandler._afterPauseAudio -= value;
        }

        public static event Delegates.UnPauseAudio_NormalArgs UnPauseAudio
        {
            add
            {
                HookHandler._afterUnPauseAudio += value;
                HookHandler.HookUnPauseAudio();
            }
            remove => HookHandler._afterUnPauseAudio -= value;
        }

        public static event Delegates.PauseInput_NormalArgs PauseInput
        {
            add
            {
                HookHandler._afterPauseInput += value;
                HookHandler.HookPauseInput();
            }
            remove => HookHandler._afterPauseInput -= value;
        }

        public static event Delegates.UnPauseInput_NormalArgs UnPauseInput
        {
            add
            {
                HookHandler._afterUnPauseInput += value;
                HookHandler.HookUnPauseInput();
            }
            remove => HookHandler._afterUnPauseInput -= value;
        }

        public static event Delegates.SpawnSoftLandingPrefab_NormalArgs SpawnSoftLandingPrefab
        {
            add
            {
                HookHandler._afterSpawnSoftLandingPrefab += value;
                HookHandler.HookSpawnSoftLandingPrefab();
            }
            remove => HookHandler._afterSpawnSoftLandingPrefab -= value;
        }

        public static event Delegates.AffectedByGravity_NormalArgs AffectedByGravity
        {
            add
            {
                HookHandler._afterAffectedByGravity += value;
                HookHandler.HookAffectedByGravity();
            }
            remove => HookHandler._afterAffectedByGravity -= value;
        }

        public static event Delegates.LookForInput_NormalArgs LookForInput
        {
            add
            {
                HookHandler._afterLookForInput += value;
                HookHandler.HookLookForInput();
            }
            remove => HookHandler._afterLookForInput -= value;
        }

        public static event Delegates.LookForQueueInput_NormalArgs LookForQueueInput
        {
            add
            {
                HookHandler._afterLookForQueueInput += value;
                HookHandler.HookLookForQueueInput();
            }
            remove => HookHandler._afterLookForQueueInput -= value;
        }

        public static event Delegates.HeroJump_NormalArgs HeroJump
        {
            add
            {
                HookHandler._afterHeroJump += value;
                HookHandler.HookHeroJump();
            }
            remove => HookHandler._afterHeroJump -= value;
        }

        public static event Delegates.HeroJumpNoEffect_NormalArgs HeroJumpNoEffect
        {
            add
            {
                HookHandler._afterHeroJumpNoEffect += value;
                HookHandler.HookHeroJumpNoEffect();
            }
            remove => HookHandler._afterHeroJumpNoEffect -= value;
        }

        public static event Delegates.DoWallJump_NormalArgs DoWallJump
        {
            add
            {
                HookHandler._afterDoWallJump += value;
                HookHandler.HookDoWallJump();
            }
            remove => HookHandler._afterDoWallJump -= value;
        }

        public static event Delegates.DoDoubleJump_NormalArgs DoDoubleJump
        {
            add
            {
                HookHandler._afterDoDoubleJump += value;
                HookHandler.HookDoDoubleJump();
            }
            remove => HookHandler._afterDoDoubleJump -= value;
        }

        public static event Delegates.DoHardLanding_NormalArgs DoHardLanding
        {
            add
            {
                HookHandler._afterDoHardLanding += value;
                HookHandler.HookDoHardLanding();
            }
            remove => HookHandler._afterDoHardLanding -= value;
        }

        public static event Delegates.DoAttack_NormalArgs DoAttack
        {
            add
            {
                HookHandler._afterDoAttack += value;
                HookHandler.HookDoAttack();
            }
            remove => HookHandler._afterDoAttack -= value;
        }

        public static event Delegates.HeroDash_NormalArgs HeroDash
        {
            add
            {
                HookHandler._afterHeroDash += value;
                HookHandler.HookHeroDash();
            }
            remove => HookHandler._afterHeroDash -= value;
        }

        public static event Delegates.StartFallRumble_NormalArgs StartFallRumble
        {
            add
            {
                HookHandler._afterStartFallRumble += value;
                HookHandler.HookStartFallRumble();
            }
            remove => HookHandler._afterStartFallRumble -= value;
        }

        public static event Delegates.SetState_NormalArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }

        public static event Delegates.FinishedEnteringScene_NormalArgs FinishedEnteringScene
        {
            add
            {
                HookHandler._afterFinishedEnteringScene += value;
                HookHandler.HookFinishedEnteringScene();
            }
            remove => HookHandler._afterFinishedEnteringScene -= value;
        }

        public static event Delegates.FallCheck_NormalArgs FallCheck
        {
            add
            {
                HookHandler._afterFallCheck += value;
                HookHandler.HookFallCheck();
            }
            remove => HookHandler._afterFallCheck -= value;
        }

        public static event Delegates.OutOfBoundsCheck_NormalArgs OutOfBoundsCheck
        {
            add
            {
                HookHandler._afterOutOfBoundsCheck += value;
                HookHandler.HookOutOfBoundsCheck();
            }
            remove => HookHandler._afterOutOfBoundsCheck -= value;
        }

        public static event Delegates.ConfirmOutOfBounds_NormalArgs ConfirmOutOfBounds
        {
            add
            {
                HookHandler._afterConfirmOutOfBounds += value;
                HookHandler.HookConfirmOutOfBounds();
            }
            remove => HookHandler._afterConfirmOutOfBounds -= value;
        }

        public static event Delegates.FailSafeChecks_NormalArgs FailSafeChecks
        {
            add
            {
                HookHandler._afterFailSafeChecks += value;
                HookHandler.HookFailSafeChecks();
            }
            remove => HookHandler._afterFailSafeChecks -= value;
        }

        public static event Delegates.LocateSpawnPoint_NormalArgs LocateSpawnPoint
        {
            add
            {
                HookHandler._afterLocateSpawnPoint += value;
                HookHandler.HookLocateSpawnPoint();
            }
            remove => HookHandler._afterLocateSpawnPoint -= value;
        }

        public static event Delegates.CancelJump_NormalArgs CancelJump
        {
            add
            {
                HookHandler._afterCancelJump += value;
                HookHandler.HookCancelJump();
            }
            remove => HookHandler._afterCancelJump -= value;
        }

        public static event Delegates.CancelDoubleJump_NormalArgs CancelDoubleJump
        {
            add
            {
                HookHandler._afterCancelDoubleJump += value;
                HookHandler.HookCancelDoubleJump();
            }
            remove => HookHandler._afterCancelDoubleJump -= value;
        }

        public static event Delegates.CancelDash_NormalArgs CancelDash
        {
            add
            {
                HookHandler._afterCancelDash += value;
                HookHandler.HookCancelDash();
            }
            remove => HookHandler._afterCancelDash -= value;
        }

        public static event Delegates.CancelWallsliding_NormalArgs CancelWallsliding
        {
            add
            {
                HookHandler._afterCancelWallsliding += value;
                HookHandler.HookCancelWallsliding();
            }
            remove => HookHandler._afterCancelWallsliding -= value;
        }

        public static event Delegates.CancelBackDash_NormalArgs CancelBackDash
        {
            add
            {
                HookHandler._afterCancelBackDash += value;
                HookHandler.HookCancelBackDash();
            }
            remove => HookHandler._afterCancelBackDash -= value;
        }

        public static event Delegates.CancelDownAttack_NormalArgs CancelDownAttack
        {
            add
            {
                HookHandler._afterCancelDownAttack += value;
                HookHandler.HookCancelDownAttack();
            }
            remove => HookHandler._afterCancelDownAttack -= value;
        }

        public static event Delegates.CancelAttack_NormalArgs CancelAttack
        {
            add
            {
                HookHandler._afterCancelAttack += value;
                HookHandler.HookCancelAttack();
            }
            remove => HookHandler._afterCancelAttack -= value;
        }

        public static event Delegates.CancelBounce_NormalArgs CancelBounce
        {
            add
            {
                HookHandler._afterCancelBounce += value;
                HookHandler.HookCancelBounce();
            }
            remove => HookHandler._afterCancelBounce -= value;
        }

        public static event Delegates.CancelRecoilHorizontal_NormalArgs CancelRecoilHorizontal
        {
            add
            {
                HookHandler._afterCancelRecoilHorizontal += value;
                HookHandler.HookCancelRecoilHorizontal();
            }
            remove => HookHandler._afterCancelRecoilHorizontal -= value;
        }

        public static event Delegates.CancelDamageRecoil_NormalArgs CancelDamageRecoil
        {
            add
            {
                HookHandler._afterCancelDamageRecoil += value;
                HookHandler.HookCancelDamageRecoil();
            }
            remove => HookHandler._afterCancelDamageRecoil -= value;
        }

        public static event Delegates.CancelFallEffects_NormalArgs CancelFallEffects
        {
            add
            {
                HookHandler._afterCancelFallEffects += value;
                HookHandler.HookCancelFallEffects();
            }
            remove => HookHandler._afterCancelFallEffects -= value;
        }

        public static event Delegates.ResetAttacks_NormalArgs ResetAttacks
        {
            add
            {
                HookHandler._afterResetAttacks += value;
                HookHandler.HookResetAttacks();
            }
            remove => HookHandler._afterResetAttacks -= value;
        }

        public static event Delegates.ResetAttacksDash_NormalArgs ResetAttacksDash
        {
            add
            {
                HookHandler._afterResetAttacksDash += value;
                HookHandler.HookResetAttacksDash();
            }
            remove => HookHandler._afterResetAttacksDash -= value;
        }

        public static event Delegates.ResetMotion_NormalArgs ResetMotion
        {
            add
            {
                HookHandler._afterResetMotion += value;
                HookHandler.HookResetMotion();
            }
            remove => HookHandler._afterResetMotion -= value;
        }

        public static event Delegates.ResetMotionNotVelocity_NormalArgs ResetMotionNotVelocity
        {
            add
            {
                HookHandler._afterResetMotionNotVelocity += value;
                HookHandler.HookResetMotionNotVelocity();
            }
            remove => HookHandler._afterResetMotionNotVelocity -= value;
        }

        public static event Delegates.ResetLook_NormalArgs ResetLook
        {
            add
            {
                HookHandler._afterResetLook += value;
                HookHandler.HookResetLook();
            }
            remove => HookHandler._afterResetLook -= value;
        }

        public static event Delegates.ResetInput_NormalArgs ResetInput
        {
            add
            {
                HookHandler._afterResetInput += value;
                HookHandler.HookResetInput();
            }
            remove => HookHandler._afterResetInput -= value;
        }

        public static event Delegates.BackOnGround_NormalArgs BackOnGround
        {
            add
            {
                HookHandler._afterBackOnGround += value;
                HookHandler.HookBackOnGround();
            }
            remove => HookHandler._afterBackOnGround -= value;
        }

        public static event Delegates.JumpReleased_NormalArgs JumpReleased
        {
            add
            {
                HookHandler._afterJumpReleased += value;
                HookHandler.HookJumpReleased();
            }
            remove => HookHandler._afterJumpReleased -= value;
        }

        public static event Delegates.FinishedDashing_NormalArgs FinishedDashing
        {
            add
            {
                HookHandler._afterFinishedDashing += value;
                HookHandler.HookFinishedDashing();
            }
            remove => HookHandler._afterFinishedDashing -= value;
        }

        public static event Delegates.SetStartingMotionState_NormalArgs SetStartingMotionState
        {
            add
            {
                HookHandler._afterSetStartingMotionState += value;
                HookHandler.HookSetStartingMotionState();
            }
            remove => HookHandler._afterSetStartingMotionState -= value;
        }

        public static event Delegates.SetStartingMotionState_bool_NormalArgs SetStartingMotionState_bool
        {
            add
            {
                HookHandler._afterSetStartingMotionState_bool += value;
                HookHandler.HookSetStartingMotionState_bool();
            }
            remove => HookHandler._afterSetStartingMotionState_bool -= value;
        }

        public static event Delegates.EnterAcid_NormalArgs EnterAcid
        {
            add
            {
                HookHandler._afterEnterAcid += value;
                HookHandler.HookEnterAcid();
            }
            remove => HookHandler._afterEnterAcid -= value;
        }

        public static event Delegates.ExitAcid_NormalArgs ExitAcid
        {
            add
            {
                HookHandler._afterExitAcid += value;
                HookHandler.HookExitAcid();
            }
            remove => HookHandler._afterExitAcid -= value;
        }

        public static event Delegates.TileMapTest_NormalArgs TileMapTest
        {
            add
            {
                HookHandler._afterTileMapTest += value;
                HookHandler.HookTileMapTest();
            }
            remove => HookHandler._afterTileMapTest -= value;
        }

        public static event Delegates.StopTilemapTest_NormalArgs StopTilemapTest
        {
            add
            {
                HookHandler._afterStopTilemapTest += value;
                HookHandler.HookStopTilemapTest();
            }
            remove => HookHandler._afterStopTilemapTest -= value;
        }

        public static event Delegates.CheckStillTouchingWall_NormalArgs CheckStillTouchingWall
        {
            add
            {
                HookHandler._afterCheckStillTouchingWall += value;
                HookHandler.HookCheckStillTouchingWall();
            }
            remove => HookHandler._afterCheckStillTouchingWall -= value;
        }

        public static event Delegates.CheckForBump_NormalArgs CheckForBump
        {
            add
            {
                HookHandler._afterCheckForBump += value;
                HookHandler.HookCheckForBump();
            }
            remove => HookHandler._afterCheckForBump -= value;
        }

        public static event Delegates.CheckNearRoof_NormalArgs CheckNearRoof
        {
            add
            {
                HookHandler._afterCheckNearRoof += value;
                HookHandler.HookCheckNearRoof();
            }
            remove => HookHandler._afterCheckNearRoof -= value;
        }

        public static event Delegates.CheckTouchingGround_NormalArgs CheckTouchingGround
        {
            add
            {
                HookHandler._afterCheckTouchingGround += value;
                HookHandler.HookCheckTouchingGround();
            }
            remove => HookHandler._afterCheckTouchingGround -= value;
        }

        public static event Delegates.CheckTouching_NormalArgs CheckTouching
        {
            add
            {
                HookHandler._afterCheckTouching += value;
                HookHandler.HookCheckTouching();
            }
            remove => HookHandler._afterCheckTouching -= value;
        }

        public static event Delegates.CheckTouchingAdvanced_NormalArgs CheckTouchingAdvanced
        {
            add
            {
                HookHandler._afterCheckTouchingAdvanced += value;
                HookHandler.HookCheckTouchingAdvanced();
            }
            remove => HookHandler._afterCheckTouchingAdvanced -= value;
        }

        public static event Delegates.FindCollisionDirection_NormalArgs FindCollisionDirection
        {
            add
            {
                HookHandler._afterFindCollisionDirection += value;
                HookHandler.HookFindCollisionDirection();
            }
            remove => HookHandler._afterFindCollisionDirection -= value;
        }

        public static event Delegates.CanJump_NormalArgs CanJump
        {
            add
            {
                HookHandler._afterCanJump += value;
                HookHandler.HookCanJump();
            }
            remove => HookHandler._afterCanJump -= value;
        }

        public static event Delegates.CanDoubleJump_NormalArgs CanDoubleJump
        {
            add
            {
                HookHandler._afterCanDoubleJump += value;
                HookHandler.HookCanDoubleJump();
            }
            remove => HookHandler._afterCanDoubleJump -= value;
        }

        public static event Delegates.CanInfiniteAirJump_NormalArgs CanInfiniteAirJump
        {
            add
            {
                HookHandler._afterCanInfiniteAirJump += value;
                HookHandler.HookCanInfiniteAirJump();
            }
            remove => HookHandler._afterCanInfiniteAirJump -= value;
        }

        public static event Delegates.CanSwim_NormalArgs CanSwim
        {
            add
            {
                HookHandler._afterCanSwim += value;
                HookHandler.HookCanSwim();
            }
            remove => HookHandler._afterCanSwim -= value;
        }

        public static event Delegates.CanDash_NormalArgs CanDash
        {
            add
            {
                HookHandler._afterCanDash += value;
                HookHandler.HookCanDash();
            }
            remove => HookHandler._afterCanDash -= value;
        }

        public static event Delegates.CanAttack_NormalArgs CanAttack
        {
            add
            {
                HookHandler._afterCanAttack += value;
                HookHandler.HookCanAttack();
            }
            remove => HookHandler._afterCanAttack -= value;
        }

        public static event Delegates.CanNailCharge_NormalArgs CanNailCharge
        {
            add
            {
                HookHandler._afterCanNailCharge += value;
                HookHandler.HookCanNailCharge();
            }
            remove => HookHandler._afterCanNailCharge -= value;
        }

        public static event Delegates.CanWallSlide_NormalArgs CanWallSlide
        {
            add
            {
                HookHandler._afterCanWallSlide += value;
                HookHandler.HookCanWallSlide();
            }
            remove => HookHandler._afterCanWallSlide -= value;
        }

        public static event Delegates.CanTakeDamage_NormalArgs CanTakeDamage
        {
            add
            {
                HookHandler._afterCanTakeDamage += value;
                HookHandler.HookCanTakeDamage();
            }
            remove => HookHandler._afterCanTakeDamage -= value;
        }

        public static event Delegates.CanWallJump_NormalArgs CanWallJump
        {
            add
            {
                HookHandler._afterCanWallJump += value;
                HookHandler.HookCanWallJump();
            }
            remove => HookHandler._afterCanWallJump -= value;
        }

        public static event Delegates.ShouldHardLand_NormalArgs ShouldHardLand
        {
            add
            {
                HookHandler._afterShouldHardLand += value;
                HookHandler.HookShouldHardLand();
            }
            remove => HookHandler._afterShouldHardLand -= value;
        }

        public static event Delegates.OnCollisionEnter2D_NormalArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionStay2D_NormalArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._afterOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._afterOnCollisionStay2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_NormalArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._afterOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._afterOnCollisionExit2D -= value;
        }

        public static event Delegates.SetupGameRefs_NormalArgs SetupGameRefs
        {
            add
            {
                HookHandler._afterSetupGameRefs += value;
                HookHandler.HookSetupGameRefs();
            }
            remove => HookHandler._afterSetupGameRefs -= value;
        }

        public static event Delegates.SetupPools_NormalArgs SetupPools
        {
            add
            {
                HookHandler._afterSetupPools += value;
                HookHandler.HookSetupPools();
            }
            remove => HookHandler._afterSetupPools -= value;
        }

        public static event Delegates.FilterInput_NormalArgs FilterInput
        {
            add
            {
                HookHandler._afterFilterInput += value;
                HookHandler.HookFilterInput();
            }
            remove => HookHandler._afterFilterInput -= value;
        }

        public static event Delegates.FindGroundPoint_NormalArgs FindGroundPoint
        {
            add
            {
                HookHandler._afterFindGroundPoint += value;
                HookHandler.HookFindGroundPoint();
            }
            remove => HookHandler._afterFindGroundPoint -= value;
        }

        public static event Delegates.FindGroundPointY_NormalArgs FindGroundPointY
        {
            add
            {
                HookHandler._afterFindGroundPointY += value;
                HookHandler.HookFindGroundPointY();
            }
            remove => HookHandler._afterFindGroundPointY -= value;
        }

        public static event Delegates.orig_StartMPDrain_NormalArgs orig_StartMPDrain
        {
            add
            {
                HookHandler._afterorig_StartMPDrain += value;
                HookHandler.Hookorig_StartMPDrain();
            }
            remove => HookHandler._afterorig_StartMPDrain -= value;
        }

        public static event Delegates.orig_Update_NormalArgs orig_Update
        {
            add
            {
                HookHandler._afterorig_Update += value;
                HookHandler.Hookorig_Update();
            }
            remove => HookHandler._afterorig_Update -= value;
        }

        public static event Delegates.OrigDashVector_NormalArgs OrigDashVector
        {
            add
            {
                HookHandler._afterOrigDashVector += value;
                HookHandler.HookOrigDashVector();
            }
            remove => HookHandler._afterOrigDashVector -= value;
        }

        public static event Delegates.orig_Dash_NormalArgs orig_Dash
        {
            add
            {
                HookHandler._afterorig_Dash += value;
                HookHandler.Hookorig_Dash();
            }
            remove => HookHandler._afterorig_Dash -= value;
        }

        public static event Delegates.orig_CharmUpdate_NormalArgs orig_CharmUpdate
        {
            add
            {
                HookHandler._afterorig_CharmUpdate += value;
                HookHandler.Hookorig_CharmUpdate();
            }
            remove => HookHandler._afterorig_CharmUpdate -= value;
        }

        public static event Delegates.orig_DoAttack_NormalArgs orig_DoAttack
        {
            add
            {
                HookHandler._afterorig_DoAttack += value;
                HookHandler.Hookorig_DoAttack();
            }
            remove => HookHandler._afterorig_DoAttack -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_fallTimer_NormalArgs get_fallTimer
        {
            add => HookEndpointManager.Add<Delegates.get_fallTimer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_fallTimer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_fallTimer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_fallTimer"), value);
        }

        public static event Delegates.set_fallTimer_NormalArgs set_fallTimer
        {
            add => HookEndpointManager.Add<Delegates.set_fallTimer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_fallTimer"), value);
            remove => HookEndpointManager.Remove<Delegates.set_fallTimer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_fallTimer"), value);
        }

        public static event Delegates.get_geoCounter_NormalArgs get_geoCounter
        {
            add => HookEndpointManager.Add<Delegates.get_geoCounter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_geoCounter"), value);
            remove => HookEndpointManager.Remove<Delegates.get_geoCounter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_geoCounter"), value);
        }

        public static event Delegates.set_geoCounter_NormalArgs set_geoCounter
        {
            add => HookEndpointManager.Add<Delegates.set_geoCounter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_geoCounter"), value);
            remove => HookEndpointManager.Remove<Delegates.set_geoCounter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_geoCounter"), value);
        }

        public static event Delegates.get_proxyFSM_NormalArgs get_proxyFSM
        {
            add => HookEndpointManager.Add<Delegates.get_proxyFSM_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_proxyFSM"), value);
            remove => HookEndpointManager.Remove<Delegates.get_proxyFSM_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_proxyFSM"), value);
        }

        public static event Delegates.set_proxyFSM_NormalArgs set_proxyFSM
        {
            add => HookEndpointManager.Add<Delegates.set_proxyFSM_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_proxyFSM"), value);
            remove => HookEndpointManager.Remove<Delegates.set_proxyFSM_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_proxyFSM"), value);
        }

        public static event Delegates.get_sceneEntryGate_NormalArgs get_sceneEntryGate
        {
            add => HookEndpointManager.Add<Delegates.get_sceneEntryGate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_sceneEntryGate"), value);
            remove => HookEndpointManager.Remove<Delegates.get_sceneEntryGate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_sceneEntryGate"), value);
        }

        public static event Delegates.set_sceneEntryGate_NormalArgs set_sceneEntryGate
        {
            add => HookEndpointManager.Add<Delegates.set_sceneEntryGate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_sceneEntryGate"), value);
            remove => HookEndpointManager.Remove<Delegates.set_sceneEntryGate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "set_sceneEntryGate"), value);
        }

        public static event Delegates.get_IsDreamReturning_NormalArgs get_IsDreamReturning
        {
            add => HookEndpointManager.Add<Delegates.get_IsDreamReturning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_IsDreamReturning"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsDreamReturning_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_IsDreamReturning"), value);
        }

        public static event Delegates.get_instance_NormalArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_instance", false), value);
        }

        public static event Delegates.get_SilentInstance_NormalArgs get_SilentInstance
        {
            add => HookEndpointManager.Add<Delegates.get_SilentInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_SilentInstance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_SilentInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_SilentInstance", false), value);
        }

        public static event Delegates.get_UnsafeInstance_NormalArgs get_UnsafeInstance
        {
            add => HookEndpointManager.Add<Delegates.get_UnsafeInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_UnsafeInstance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_UnsafeInstance_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "get_UnsafeInstance", false), value);
        }

        public static event On.HeroController.hook_Awake Awake
        {
            add => On.HeroController.Awake += value;
            remove => On.HeroController.Awake -= value;
        }

        public static event On.HeroController.hook_Start Start
        {
            add => On.HeroController.Start += value;
            remove => On.HeroController.Start -= value;
        }

        public static event On.HeroController.hook_SceneInit SceneInit
        {
            add => On.HeroController.SceneInit += value;
            remove => On.HeroController.SceneInit -= value;
        }

        public static event On.HeroController.hook_Update Update
        {
            add => On.HeroController.Update += value;
            remove => On.HeroController.Update -= value;
        }

        public static event On.HeroController.hook_FixedUpdate FixedUpdate
        {
            add => On.HeroController.FixedUpdate += value;
            remove => On.HeroController.FixedUpdate -= value;
        }

        public static event On.HeroController.hook_Update10 Update10
        {
            add => On.HeroController.Update10 += value;
            remove => On.HeroController.Update10 -= value;
        }

        public static event On.HeroController.hook_OnLevelUnload OnLevelUnload
        {
            add => On.HeroController.OnLevelUnload += value;
            remove => On.HeroController.OnLevelUnload -= value;
        }

        public static event On.HeroController.hook_OnDisable OnDisable
        {
            add => On.HeroController.OnDisable += value;
            remove => On.HeroController.OnDisable -= value;
        }

        public static event On.HeroController.hook_Move Move
        {
            add => On.HeroController.Move += value;
            remove => On.HeroController.Move -= value;
        }

        public static event On.HeroController.hook_Jump Jump
        {
            add => On.HeroController.Jump += value;
            remove => On.HeroController.Jump -= value;
        }

        public static event On.HeroController.hook_DoubleJump DoubleJump
        {
            add => On.HeroController.DoubleJump += value;
            remove => On.HeroController.DoubleJump -= value;
        }

        public static event On.HeroController.hook_Attack Attack
        {
            add => On.HeroController.Attack += value;
            remove => On.HeroController.Attack -= value;
        }

        public static event On.HeroController.hook_Dash Dash
        {
            add => On.HeroController.Dash += value;
            remove => On.HeroController.Dash -= value;
        }

        public static event On.HeroController.hook_BackDash BackDash
        {
            add => On.HeroController.BackDash += value;
            remove => On.HeroController.BackDash -= value;
        }

        public static event On.HeroController.hook_ShadowDash ShadowDash
        {
            add => On.HeroController.ShadowDash += value;
            remove => On.HeroController.ShadowDash -= value;
        }

        public static event On.HeroController.hook_SuperDash SuperDash
        {
            add => On.HeroController.SuperDash += value;
            remove => On.HeroController.SuperDash -= value;
        }

        public static event On.HeroController.hook_FaceRight FaceRight
        {
            add => On.HeroController.FaceRight += value;
            remove => On.HeroController.FaceRight -= value;
        }

        public static event On.HeroController.hook_FaceLeft FaceLeft
        {
            add => On.HeroController.FaceLeft += value;
            remove => On.HeroController.FaceLeft -= value;
        }

        public static event On.HeroController.hook_StartMPDrain StartMPDrain
        {
            add => On.HeroController.StartMPDrain += value;
            remove => On.HeroController.StartMPDrain -= value;
        }

        public static event On.HeroController.hook_StopMPDrain StopMPDrain
        {
            add => On.HeroController.StopMPDrain += value;
            remove => On.HeroController.StopMPDrain -= value;
        }

        public static event On.HeroController.hook_SetBackOnGround SetBackOnGround
        {
            add => On.HeroController.SetBackOnGround += value;
            remove => On.HeroController.SetBackOnGround -= value;
        }

        public static event On.HeroController.hook_SetStartWithWallslide SetStartWithWallslide
        {
            add => On.HeroController.SetStartWithWallslide += value;
            remove => On.HeroController.SetStartWithWallslide -= value;
        }

        public static event On.HeroController.hook_SetStartWithJump SetStartWithJump
        {
            add => On.HeroController.SetStartWithJump += value;
            remove => On.HeroController.SetStartWithJump -= value;
        }

        public static event On.HeroController.hook_SetStartWithFullJump SetStartWithFullJump
        {
            add => On.HeroController.SetStartWithFullJump += value;
            remove => On.HeroController.SetStartWithFullJump -= value;
        }

        public static event On.HeroController.hook_SetStartWithDash SetStartWithDash
        {
            add => On.HeroController.SetStartWithDash += value;
            remove => On.HeroController.SetStartWithDash -= value;
        }

        public static event On.HeroController.hook_SetStartWithAttack SetStartWithAttack
        {
            add => On.HeroController.SetStartWithAttack += value;
            remove => On.HeroController.SetStartWithAttack -= value;
        }

        public static event On.HeroController.hook_SetSuperDashExit SetSuperDashExit
        {
            add => On.HeroController.SetSuperDashExit += value;
            remove => On.HeroController.SetSuperDashExit -= value;
        }

        public static event On.HeroController.hook_SetQuakeExit SetQuakeExit
        {
            add => On.HeroController.SetQuakeExit += value;
            remove => On.HeroController.SetQuakeExit -= value;
        }

        public static event On.HeroController.hook_SetTakeNoDamage SetTakeNoDamage
        {
            add => On.HeroController.SetTakeNoDamage += value;
            remove => On.HeroController.SetTakeNoDamage -= value;
        }

        public static event On.HeroController.hook_EndTakeNoDamage EndTakeNoDamage
        {
            add => On.HeroController.EndTakeNoDamage += value;
            remove => On.HeroController.EndTakeNoDamage -= value;
        }

        public static event On.HeroController.hook_SetHeroParent SetHeroParent
        {
            add => On.HeroController.SetHeroParent += value;
            remove => On.HeroController.SetHeroParent -= value;
        }

        public static event On.HeroController.hook_IsSwimming IsSwimming
        {
            add => On.HeroController.IsSwimming += value;
            remove => On.HeroController.IsSwimming -= value;
        }

        public static event On.HeroController.hook_NotSwimming NotSwimming
        {
            add => On.HeroController.NotSwimming += value;
            remove => On.HeroController.NotSwimming -= value;
        }

        public static event On.HeroController.hook_EnableRenderer EnableRenderer
        {
            add => On.HeroController.EnableRenderer += value;
            remove => On.HeroController.EnableRenderer -= value;
        }

        public static event On.HeroController.hook_ResetAirMoves ResetAirMoves
        {
            add => On.HeroController.ResetAirMoves += value;
            remove => On.HeroController.ResetAirMoves -= value;
        }

        public static event On.HeroController.hook_SetConveyorSpeed SetConveyorSpeed
        {
            add => On.HeroController.SetConveyorSpeed += value;
            remove => On.HeroController.SetConveyorSpeed -= value;
        }

        public static event On.HeroController.hook_SetConveyorSpeedV SetConveyorSpeedV
        {
            add => On.HeroController.SetConveyorSpeedV += value;
            remove => On.HeroController.SetConveyorSpeedV -= value;
        }

        public static event On.HeroController.hook_EnterWithoutInput EnterWithoutInput
        {
            add => On.HeroController.EnterWithoutInput += value;
            remove => On.HeroController.EnterWithoutInput -= value;
        }

        public static event On.HeroController.hook_SetDarkness SetDarkness
        {
            add => On.HeroController.SetDarkness += value;
            remove => On.HeroController.SetDarkness -= value;
        }

        public static event On.HeroController.hook_CancelHeroJump CancelHeroJump
        {
            add => On.HeroController.CancelHeroJump += value;
            remove => On.HeroController.CancelHeroJump -= value;
        }

        public static event On.HeroController.hook_CharmUpdate CharmUpdate
        {
            add => On.HeroController.CharmUpdate += value;
            remove => On.HeroController.CharmUpdate -= value;
        }

        public static event On.HeroController.hook_checkEnvironment checkEnvironment
        {
            add => On.HeroController.checkEnvironment += value;
            remove => On.HeroController.checkEnvironment -= value;
        }

        public static event On.HeroController.hook_SetBenchRespawn SetBenchRespawn
        {
            add => On.HeroController.SetBenchRespawn += value;
            remove => On.HeroController.SetBenchRespawn -= value;
        }

        public static event On.HeroController.hook_SetHazardRespawn SetHazardRespawn
        {
            add => On.HeroController.SetHazardRespawn += value;
            remove => On.HeroController.SetHazardRespawn -= value;
        }

        public static event On.HeroController.hook_AddGeo AddGeo
        {
            add => On.HeroController.AddGeo += value;
            remove => On.HeroController.AddGeo -= value;
        }

        public static event On.HeroController.hook_ToZero ToZero
        {
            add => On.HeroController.ToZero += value;
            remove => On.HeroController.ToZero -= value;
        }

        public static event On.HeroController.hook_AddGeoQuietly AddGeoQuietly
        {
            add => On.HeroController.AddGeoQuietly += value;
            remove => On.HeroController.AddGeoQuietly -= value;
        }

        public static event On.HeroController.hook_AddGeoToCounter AddGeoToCounter
        {
            add => On.HeroController.AddGeoToCounter += value;
            remove => On.HeroController.AddGeoToCounter -= value;
        }

        public static event On.HeroController.hook_TakeGeo TakeGeo
        {
            add => On.HeroController.TakeGeo += value;
            remove => On.HeroController.TakeGeo -= value;
        }

        public static event On.HeroController.hook_UpdateGeo UpdateGeo
        {
            add => On.HeroController.UpdateGeo += value;
            remove => On.HeroController.UpdateGeo -= value;
        }

        public static event On.HeroController.hook_CanInput CanInput
        {
            add => On.HeroController.CanInput += value;
            remove => On.HeroController.CanInput -= value;
        }

        public static event On.HeroController.hook_CanTalk CanTalk
        {
            add => On.HeroController.CanTalk += value;
            remove => On.HeroController.CanTalk -= value;
        }

        public static event On.HeroController.hook_FlipSprite FlipSprite
        {
            add => On.HeroController.FlipSprite += value;
            remove => On.HeroController.FlipSprite -= value;
        }

        public static event On.HeroController.hook_NailParry NailParry
        {
            add => On.HeroController.NailParry += value;
            remove => On.HeroController.NailParry -= value;
        }

        public static event On.HeroController.hook_NailParryRecover NailParryRecover
        {
            add => On.HeroController.NailParryRecover += value;
            remove => On.HeroController.NailParryRecover -= value;
        }

        public static event On.HeroController.hook_QuakeInvuln QuakeInvuln
        {
            add => On.HeroController.QuakeInvuln += value;
            remove => On.HeroController.QuakeInvuln -= value;
        }

        public static event On.HeroController.hook_CancelParryInvuln CancelParryInvuln
        {
            add => On.HeroController.CancelParryInvuln += value;
            remove => On.HeroController.CancelParryInvuln -= value;
        }

        public static event On.HeroController.hook_CycloneInvuln CycloneInvuln
        {
            add => On.HeroController.CycloneInvuln += value;
            remove => On.HeroController.CycloneInvuln -= value;
        }

        public static event On.HeroController.hook_SetWieldingLantern SetWieldingLantern
        {
            add => On.HeroController.SetWieldingLantern += value;
            remove => On.HeroController.SetWieldingLantern -= value;
        }

        public static event On.HeroController.hook_TakeDamage TakeDamage
        {
            add => On.HeroController.TakeDamage += value;
            remove => On.HeroController.TakeDamage -= value;
        }

        public static event On.HeroController.hook_GetEntryGateName GetEntryGateName
        {
            add => On.HeroController.GetEntryGateName += value;
            remove => On.HeroController.GetEntryGateName -= value;
        }

        public static event On.HeroController.hook_AddMPCharge AddMPCharge
        {
            add => On.HeroController.AddMPCharge += value;
            remove => On.HeroController.AddMPCharge -= value;
        }

        public static event On.HeroController.hook_SoulGain SoulGain
        {
            add => On.HeroController.SoulGain += value;
            remove => On.HeroController.SoulGain -= value;
        }

        public static event On.HeroController.hook_AddMPChargeSpa AddMPChargeSpa
        {
            add => On.HeroController.AddMPChargeSpa += value;
            remove => On.HeroController.AddMPChargeSpa -= value;
        }

        public static event On.HeroController.hook_TryAddMPChargeSpa TryAddMPChargeSpa
        {
            add => On.HeroController.TryAddMPChargeSpa += value;
            remove => On.HeroController.TryAddMPChargeSpa -= value;
        }

        public static event On.HeroController.hook_SetMPCharge SetMPCharge
        {
            add => On.HeroController.SetMPCharge += value;
            remove => On.HeroController.SetMPCharge -= value;
        }

        public static event On.HeroController.hook_TakeMP TakeMP
        {
            add => On.HeroController.TakeMP += value;
            remove => On.HeroController.TakeMP -= value;
        }

        public static event On.HeroController.hook_TakeMPQuick TakeMPQuick
        {
            add => On.HeroController.TakeMPQuick += value;
            remove => On.HeroController.TakeMPQuick -= value;
        }

        public static event On.HeroController.hook_TakeReserveMP TakeReserveMP
        {
            add => On.HeroController.TakeReserveMP += value;
            remove => On.HeroController.TakeReserveMP -= value;
        }

        public static event On.HeroController.hook_AddHealth AddHealth
        {
            add => On.HeroController.AddHealth += value;
            remove => On.HeroController.AddHealth -= value;
        }

        public static event On.HeroController.hook_TakeHealth TakeHealth
        {
            add => On.HeroController.TakeHealth += value;
            remove => On.HeroController.TakeHealth -= value;
        }

        public static event On.HeroController.hook_MaxHealth MaxHealth
        {
            add => On.HeroController.MaxHealth += value;
            remove => On.HeroController.MaxHealth -= value;
        }

        public static event On.HeroController.hook_MaxHealthKeepBlue MaxHealthKeepBlue
        {
            add => On.HeroController.MaxHealthKeepBlue += value;
            remove => On.HeroController.MaxHealthKeepBlue -= value;
        }

        public static event On.HeroController.hook_AddToMaxHealth AddToMaxHealth
        {
            add => On.HeroController.AddToMaxHealth += value;
            remove => On.HeroController.AddToMaxHealth -= value;
        }

        public static event On.HeroController.hook_ClearMP ClearMP
        {
            add => On.HeroController.ClearMP += value;
            remove => On.HeroController.ClearMP -= value;
        }

        public static event On.HeroController.hook_ClearMPSendEvents ClearMPSendEvents
        {
            add => On.HeroController.ClearMPSendEvents += value;
            remove => On.HeroController.ClearMPSendEvents -= value;
        }

        public static event On.HeroController.hook_AddToMaxMPReserve AddToMaxMPReserve
        {
            add => On.HeroController.AddToMaxMPReserve += value;
            remove => On.HeroController.AddToMaxMPReserve -= value;
        }

        public static event On.HeroController.hook_Bounce Bounce
        {
            add => On.HeroController.Bounce += value;
            remove => On.HeroController.Bounce -= value;
        }

        public static event On.HeroController.hook_BounceHigh BounceHigh
        {
            add => On.HeroController.BounceHigh += value;
            remove => On.HeroController.BounceHigh -= value;
        }

        public static event On.HeroController.hook_ShroomBounce ShroomBounce
        {
            add => On.HeroController.ShroomBounce += value;
            remove => On.HeroController.ShroomBounce -= value;
        }

        public static event On.HeroController.hook_RecoilLeft RecoilLeft
        {
            add => On.HeroController.RecoilLeft += value;
            remove => On.HeroController.RecoilLeft -= value;
        }

        public static event On.HeroController.hook_RecoilRight RecoilRight
        {
            add => On.HeroController.RecoilRight += value;
            remove => On.HeroController.RecoilRight -= value;
        }

        public static event On.HeroController.hook_RecoilRightLong RecoilRightLong
        {
            add => On.HeroController.RecoilRightLong += value;
            remove => On.HeroController.RecoilRightLong -= value;
        }

        public static event On.HeroController.hook_RecoilLeftLong RecoilLeftLong
        {
            add => On.HeroController.RecoilLeftLong += value;
            remove => On.HeroController.RecoilLeftLong -= value;
        }

        public static event On.HeroController.hook_RecoilDown RecoilDown
        {
            add => On.HeroController.RecoilDown += value;
            remove => On.HeroController.RecoilDown -= value;
        }

        public static event On.HeroController.hook_ForceHardLanding ForceHardLanding
        {
            add => On.HeroController.ForceHardLanding += value;
            remove => On.HeroController.ForceHardLanding -= value;
        }

        public static event On.HeroController.hook_EnterSceneDreamGate EnterSceneDreamGate
        {
            add => On.HeroController.EnterSceneDreamGate += value;
            remove => On.HeroController.EnterSceneDreamGate -= value;
        }

        public static event On.HeroController.hook_EnterScene EnterScene
        {
            add => On.HeroController.EnterScene += value;
            remove => On.HeroController.EnterScene -= value;
        }

        public static event On.HeroController.hook_LeaveScene LeaveScene
        {
            add => On.HeroController.LeaveScene += value;
            remove => On.HeroController.LeaveScene -= value;
        }

        public static event On.HeroController.hook_BetaLeave BetaLeave
        {
            add => On.HeroController.BetaLeave += value;
            remove => On.HeroController.BetaLeave -= value;
        }

        public static event On.HeroController.hook_BetaReturn BetaReturn
        {
            add => On.HeroController.BetaReturn += value;
            remove => On.HeroController.BetaReturn -= value;
        }

        public static event On.HeroController.hook_Respawn Respawn
        {
            add => On.HeroController.Respawn += value;
            remove => On.HeroController.Respawn -= value;
        }

        public static event On.HeroController.hook_HazardRespawn HazardRespawn
        {
            add => On.HeroController.HazardRespawn += value;
            remove => On.HeroController.HazardRespawn -= value;
        }

        public static event On.HeroController.hook_StartCyclone StartCyclone
        {
            add => On.HeroController.StartCyclone += value;
            remove => On.HeroController.StartCyclone -= value;
        }

        public static event On.HeroController.hook_EndCyclone EndCyclone
        {
            add => On.HeroController.EndCyclone += value;
            remove => On.HeroController.EndCyclone -= value;
        }

        public static event On.HeroController.hook_GetState GetState
        {
            add => On.HeroController.GetState += value;
            remove => On.HeroController.GetState -= value;
        }

        public static event On.HeroController.hook_GetCState GetCState
        {
            add => On.HeroController.GetCState += value;
            remove => On.HeroController.GetCState -= value;
        }

        public static event On.HeroController.hook_SetCState SetCState
        {
            add => On.HeroController.SetCState += value;
            remove => On.HeroController.SetCState -= value;
        }

        public static event On.HeroController.hook_ResetHardLandingTimer ResetHardLandingTimer
        {
            add => On.HeroController.ResetHardLandingTimer += value;
            remove => On.HeroController.ResetHardLandingTimer -= value;
        }

        public static event On.HeroController.hook_CancelSuperDash CancelSuperDash
        {
            add => On.HeroController.CancelSuperDash += value;
            remove => On.HeroController.CancelSuperDash -= value;
        }

        public static event On.HeroController.hook_RelinquishControlNotVelocity RelinquishControlNotVelocity
        {
            add => On.HeroController.RelinquishControlNotVelocity += value;
            remove => On.HeroController.RelinquishControlNotVelocity -= value;
        }

        public static event On.HeroController.hook_RelinquishControl RelinquishControl
        {
            add => On.HeroController.RelinquishControl += value;
            remove => On.HeroController.RelinquishControl -= value;
        }

        public static event On.HeroController.hook_RegainControl RegainControl
        {
            add => On.HeroController.RegainControl += value;
            remove => On.HeroController.RegainControl -= value;
        }

        public static event On.HeroController.hook_PreventCastByDialogueEnd PreventCastByDialogueEnd
        {
            add => On.HeroController.PreventCastByDialogueEnd += value;
            remove => On.HeroController.PreventCastByDialogueEnd -= value;
        }

        public static event On.HeroController.hook_CanCast CanCast
        {
            add => On.HeroController.CanCast += value;
            remove => On.HeroController.CanCast -= value;
        }

        public static event On.HeroController.hook_CanFocus CanFocus
        {
            add => On.HeroController.CanFocus += value;
            remove => On.HeroController.CanFocus -= value;
        }

        public static event On.HeroController.hook_CanNailArt CanNailArt
        {
            add => On.HeroController.CanNailArt += value;
            remove => On.HeroController.CanNailArt -= value;
        }

        public static event On.HeroController.hook_CanQuickMap CanQuickMap
        {
            add => On.HeroController.CanQuickMap += value;
            remove => On.HeroController.CanQuickMap -= value;
        }

        public static event On.HeroController.hook_CanInspect CanInspect
        {
            add => On.HeroController.CanInspect += value;
            remove => On.HeroController.CanInspect -= value;
        }

        public static event On.HeroController.hook_CanBackDash CanBackDash
        {
            add => On.HeroController.CanBackDash += value;
            remove => On.HeroController.CanBackDash -= value;
        }

        public static event On.HeroController.hook_CanSuperDash CanSuperDash
        {
            add => On.HeroController.CanSuperDash += value;
            remove => On.HeroController.CanSuperDash -= value;
        }

        public static event On.HeroController.hook_CanDreamNail CanDreamNail
        {
            add => On.HeroController.CanDreamNail += value;
            remove => On.HeroController.CanDreamNail -= value;
        }

        public static event On.HeroController.hook_CanDreamGate CanDreamGate
        {
            add => On.HeroController.CanDreamGate += value;
            remove => On.HeroController.CanDreamGate -= value;
        }

        public static event On.HeroController.hook_CanInteract CanInteract
        {
            add => On.HeroController.CanInteract += value;
            remove => On.HeroController.CanInteract -= value;
        }

        public static event On.HeroController.hook_CanOpenInventory CanOpenInventory
        {
            add => On.HeroController.CanOpenInventory += value;
            remove => On.HeroController.CanOpenInventory -= value;
        }

        public static event On.HeroController.hook_SetDamageMode_int SetDamageMode_int
        {
            add => On.HeroController.SetDamageMode_int += value;
            remove => On.HeroController.SetDamageMode_int -= value;
        }

        public static event On.HeroController.hook_SetDamageModeFSM SetDamageModeFSM
        {
            add => On.HeroController.SetDamageModeFSM += value;
            remove => On.HeroController.SetDamageModeFSM -= value;
        }

        public static event On.HeroController.hook_ResetQuakeDamage ResetQuakeDamage
        {
            add => On.HeroController.ResetQuakeDamage += value;
            remove => On.HeroController.ResetQuakeDamage -= value;
        }

        public static event On.HeroController.hook_SetDamageMode_DamageMode SetDamageMode_DamageMode
        {
            add => On.HeroController.SetDamageMode_DamageMode += value;
            remove => On.HeroController.SetDamageMode_DamageMode -= value;
        }

        public static event On.HeroController.hook_StopAnimationControl StopAnimationControl
        {
            add => On.HeroController.StopAnimationControl += value;
            remove => On.HeroController.StopAnimationControl -= value;
        }

        public static event On.HeroController.hook_StartAnimationControl StartAnimationControl
        {
            add => On.HeroController.StartAnimationControl += value;
            remove => On.HeroController.StartAnimationControl -= value;
        }

        public static event On.HeroController.hook_IgnoreInput IgnoreInput
        {
            add => On.HeroController.IgnoreInput += value;
            remove => On.HeroController.IgnoreInput -= value;
        }

        public static event On.HeroController.hook_IgnoreInputWithoutReset IgnoreInputWithoutReset
        {
            add => On.HeroController.IgnoreInputWithoutReset += value;
            remove => On.HeroController.IgnoreInputWithoutReset -= value;
        }

        public static event On.HeroController.hook_AcceptInput AcceptInput
        {
            add => On.HeroController.AcceptInput += value;
            remove => On.HeroController.AcceptInput -= value;
        }

        public static event On.HeroController.hook_Pause Pause
        {
            add => On.HeroController.Pause += value;
            remove => On.HeroController.Pause -= value;
        }

        public static event On.HeroController.hook_UnPause UnPause
        {
            add => On.HeroController.UnPause += value;
            remove => On.HeroController.UnPause -= value;
        }

        public static event On.HeroController.hook_NearBench NearBench
        {
            add => On.HeroController.NearBench += value;
            remove => On.HeroController.NearBench -= value;
        }

        public static event On.HeroController.hook_SetWalkZone SetWalkZone
        {
            add => On.HeroController.SetWalkZone += value;
            remove => On.HeroController.SetWalkZone -= value;
        }

        public static event On.HeroController.hook_ResetState ResetState
        {
            add => On.HeroController.ResetState += value;
            remove => On.HeroController.ResetState -= value;
        }

        public static event On.HeroController.hook_StopPlayingAudio StopPlayingAudio
        {
            add => On.HeroController.StopPlayingAudio += value;
            remove => On.HeroController.StopPlayingAudio -= value;
        }

        public static event On.HeroController.hook_PauseAudio PauseAudio
        {
            add => On.HeroController.PauseAudio += value;
            remove => On.HeroController.PauseAudio -= value;
        }

        public static event On.HeroController.hook_UnPauseAudio UnPauseAudio
        {
            add => On.HeroController.UnPauseAudio += value;
            remove => On.HeroController.UnPauseAudio -= value;
        }

        public static event On.HeroController.hook_PauseInput PauseInput
        {
            add => On.HeroController.PauseInput += value;
            remove => On.HeroController.PauseInput -= value;
        }

        public static event On.HeroController.hook_UnPauseInput UnPauseInput
        {
            add => On.HeroController.UnPauseInput += value;
            remove => On.HeroController.UnPauseInput -= value;
        }

        public static event On.HeroController.hook_SpawnSoftLandingPrefab SpawnSoftLandingPrefab
        {
            add => On.HeroController.SpawnSoftLandingPrefab += value;
            remove => On.HeroController.SpawnSoftLandingPrefab -= value;
        }

        public static event On.HeroController.hook_AffectedByGravity AffectedByGravity
        {
            add => On.HeroController.AffectedByGravity += value;
            remove => On.HeroController.AffectedByGravity -= value;
        }

        public static event On.HeroController.hook_LookForInput LookForInput
        {
            add => On.HeroController.LookForInput += value;
            remove => On.HeroController.LookForInput -= value;
        }

        public static event On.HeroController.hook_LookForQueueInput LookForQueueInput
        {
            add => On.HeroController.LookForQueueInput += value;
            remove => On.HeroController.LookForQueueInput -= value;
        }

        public static event On.HeroController.hook_HeroJump HeroJump
        {
            add => On.HeroController.HeroJump += value;
            remove => On.HeroController.HeroJump -= value;
        }

        public static event On.HeroController.hook_HeroJumpNoEffect HeroJumpNoEffect
        {
            add => On.HeroController.HeroJumpNoEffect += value;
            remove => On.HeroController.HeroJumpNoEffect -= value;
        }

        public static event On.HeroController.hook_DoWallJump DoWallJump
        {
            add => On.HeroController.DoWallJump += value;
            remove => On.HeroController.DoWallJump -= value;
        }

        public static event On.HeroController.hook_DoDoubleJump DoDoubleJump
        {
            add => On.HeroController.DoDoubleJump += value;
            remove => On.HeroController.DoDoubleJump -= value;
        }

        public static event On.HeroController.hook_DoHardLanding DoHardLanding
        {
            add => On.HeroController.DoHardLanding += value;
            remove => On.HeroController.DoHardLanding -= value;
        }

        public static event On.HeroController.hook_DoAttack DoAttack
        {
            add => On.HeroController.DoAttack += value;
            remove => On.HeroController.DoAttack -= value;
        }

        public static event On.HeroController.hook_HeroDash HeroDash
        {
            add => On.HeroController.HeroDash += value;
            remove => On.HeroController.HeroDash -= value;
        }

        public static event On.HeroController.hook_StartFallRumble StartFallRumble
        {
            add => On.HeroController.StartFallRumble += value;
            remove => On.HeroController.StartFallRumble -= value;
        }

        public static event On.HeroController.hook_SetState SetState
        {
            add => On.HeroController.SetState += value;
            remove => On.HeroController.SetState -= value;
        }

        public static event On.HeroController.hook_FinishedEnteringScene FinishedEnteringScene
        {
            add => On.HeroController.FinishedEnteringScene += value;
            remove => On.HeroController.FinishedEnteringScene -= value;
        }

        public static event On.HeroController.hook_Die Die
        {
            add => On.HeroController.Die += value;
            remove => On.HeroController.Die -= value;
        }

        public static event On.HeroController.hook_DieFromHazard DieFromHazard
        {
            add => On.HeroController.DieFromHazard += value;
            remove => On.HeroController.DieFromHazard -= value;
        }

        public static event On.HeroController.hook_StartRecoil StartRecoil
        {
            add => On.HeroController.StartRecoil += value;
            remove => On.HeroController.StartRecoil -= value;
        }

        public static event On.HeroController.hook_Invulnerable Invulnerable
        {
            add => On.HeroController.Invulnerable += value;
            remove => On.HeroController.Invulnerable -= value;
        }

        public static event On.HeroController.hook_FirstFadeIn FirstFadeIn
        {
            add => On.HeroController.FirstFadeIn += value;
            remove => On.HeroController.FirstFadeIn -= value;
        }

        public static event On.HeroController.hook_FallCheck FallCheck
        {
            add => On.HeroController.FallCheck += value;
            remove => On.HeroController.FallCheck -= value;
        }

        public static event On.HeroController.hook_OutOfBoundsCheck OutOfBoundsCheck
        {
            add => On.HeroController.OutOfBoundsCheck += value;
            remove => On.HeroController.OutOfBoundsCheck -= value;
        }

        public static event On.HeroController.hook_ConfirmOutOfBounds ConfirmOutOfBounds
        {
            add => On.HeroController.ConfirmOutOfBounds += value;
            remove => On.HeroController.ConfirmOutOfBounds -= value;
        }

        public static event On.HeroController.hook_FailSafeChecks FailSafeChecks
        {
            add => On.HeroController.FailSafeChecks += value;
            remove => On.HeroController.FailSafeChecks -= value;
        }

        public static event On.HeroController.hook_LocateSpawnPoint LocateSpawnPoint
        {
            add => On.HeroController.LocateSpawnPoint += value;
            remove => On.HeroController.LocateSpawnPoint -= value;
        }

        public static event On.HeroController.hook_CancelJump CancelJump
        {
            add => On.HeroController.CancelJump += value;
            remove => On.HeroController.CancelJump -= value;
        }

        public static event On.HeroController.hook_CancelDoubleJump CancelDoubleJump
        {
            add => On.HeroController.CancelDoubleJump += value;
            remove => On.HeroController.CancelDoubleJump -= value;
        }

        public static event On.HeroController.hook_CancelDash CancelDash
        {
            add => On.HeroController.CancelDash += value;
            remove => On.HeroController.CancelDash -= value;
        }

        public static event On.HeroController.hook_CancelWallsliding CancelWallsliding
        {
            add => On.HeroController.CancelWallsliding += value;
            remove => On.HeroController.CancelWallsliding -= value;
        }

        public static event On.HeroController.hook_CancelBackDash CancelBackDash
        {
            add => On.HeroController.CancelBackDash += value;
            remove => On.HeroController.CancelBackDash -= value;
        }

        public static event On.HeroController.hook_CancelDownAttack CancelDownAttack
        {
            add => On.HeroController.CancelDownAttack += value;
            remove => On.HeroController.CancelDownAttack -= value;
        }

        public static event On.HeroController.hook_CancelAttack CancelAttack
        {
            add => On.HeroController.CancelAttack += value;
            remove => On.HeroController.CancelAttack -= value;
        }

        public static event On.HeroController.hook_CancelBounce CancelBounce
        {
            add => On.HeroController.CancelBounce += value;
            remove => On.HeroController.CancelBounce -= value;
        }

        public static event On.HeroController.hook_CancelRecoilHorizontal CancelRecoilHorizontal
        {
            add => On.HeroController.CancelRecoilHorizontal += value;
            remove => On.HeroController.CancelRecoilHorizontal -= value;
        }

        public static event On.HeroController.hook_CancelDamageRecoil CancelDamageRecoil
        {
            add => On.HeroController.CancelDamageRecoil += value;
            remove => On.HeroController.CancelDamageRecoil -= value;
        }

        public static event On.HeroController.hook_CancelFallEffects CancelFallEffects
        {
            add => On.HeroController.CancelFallEffects += value;
            remove => On.HeroController.CancelFallEffects -= value;
        }

        public static event On.HeroController.hook_ResetAttacks ResetAttacks
        {
            add => On.HeroController.ResetAttacks += value;
            remove => On.HeroController.ResetAttacks -= value;
        }

        public static event On.HeroController.hook_ResetAttacksDash ResetAttacksDash
        {
            add => On.HeroController.ResetAttacksDash += value;
            remove => On.HeroController.ResetAttacksDash -= value;
        }

        public static event On.HeroController.hook_ResetMotion ResetMotion
        {
            add => On.HeroController.ResetMotion += value;
            remove => On.HeroController.ResetMotion -= value;
        }

        public static event On.HeroController.hook_ResetMotionNotVelocity ResetMotionNotVelocity
        {
            add => On.HeroController.ResetMotionNotVelocity += value;
            remove => On.HeroController.ResetMotionNotVelocity -= value;
        }

        public static event On.HeroController.hook_ResetLook ResetLook
        {
            add => On.HeroController.ResetLook += value;
            remove => On.HeroController.ResetLook -= value;
        }

        public static event On.HeroController.hook_ResetInput ResetInput
        {
            add => On.HeroController.ResetInput += value;
            remove => On.HeroController.ResetInput -= value;
        }

        public static event On.HeroController.hook_BackOnGround BackOnGround
        {
            add => On.HeroController.BackOnGround += value;
            remove => On.HeroController.BackOnGround -= value;
        }

        public static event On.HeroController.hook_JumpReleased JumpReleased
        {
            add => On.HeroController.JumpReleased += value;
            remove => On.HeroController.JumpReleased -= value;
        }

        public static event On.HeroController.hook_FinishedDashing FinishedDashing
        {
            add => On.HeroController.FinishedDashing += value;
            remove => On.HeroController.FinishedDashing -= value;
        }

        public static event On.HeroController.hook_SetStartingMotionState SetStartingMotionState
        {
            add => On.HeroController.SetStartingMotionState += value;
            remove => On.HeroController.SetStartingMotionState -= value;
        }

        public static event On.HeroController.hook_SetStartingMotionState_bool SetStartingMotionState_bool
        {
            add => On.HeroController.SetStartingMotionState_bool += value;
            remove => On.HeroController.SetStartingMotionState_bool -= value;
        }

        public static event On.HeroController.hook_EnterAcid EnterAcid
        {
            add => On.HeroController.EnterAcid += value;
            remove => On.HeroController.EnterAcid -= value;
        }

        public static event On.HeroController.hook_ExitAcid ExitAcid
        {
            add => On.HeroController.ExitAcid += value;
            remove => On.HeroController.ExitAcid -= value;
        }

        public static event On.HeroController.hook_TileMapTest TileMapTest
        {
            add => On.HeroController.TileMapTest += value;
            remove => On.HeroController.TileMapTest -= value;
        }

        public static event On.HeroController.hook_TilemapTestPause TilemapTestPause
        {
            add => On.HeroController.TilemapTestPause += value;
            remove => On.HeroController.TilemapTestPause -= value;
        }

        public static event On.HeroController.hook_StopTilemapTest StopTilemapTest
        {
            add => On.HeroController.StopTilemapTest += value;
            remove => On.HeroController.StopTilemapTest -= value;
        }

        public static event On.HeroController.hook_CheckForTerrainThunk CheckForTerrainThunk
        {
            add => On.HeroController.CheckForTerrainThunk += value;
            remove => On.HeroController.CheckForTerrainThunk -= value;
        }

        public static event On.HeroController.hook_CheckStillTouchingWall CheckStillTouchingWall
        {
            add => On.HeroController.CheckStillTouchingWall += value;
            remove => On.HeroController.CheckStillTouchingWall -= value;
        }

        public static event On.HeroController.hook_CheckForBump CheckForBump
        {
            add => On.HeroController.CheckForBump += value;
            remove => On.HeroController.CheckForBump -= value;
        }

        public static event On.HeroController.hook_CheckNearRoof CheckNearRoof
        {
            add => On.HeroController.CheckNearRoof += value;
            remove => On.HeroController.CheckNearRoof -= value;
        }

        public static event On.HeroController.hook_CheckTouchingGround CheckTouchingGround
        {
            add => On.HeroController.CheckTouchingGround += value;
            remove => On.HeroController.CheckTouchingGround -= value;
        }

        public static event On.HeroController.hook_CheckTouching CheckTouching
        {
            add => On.HeroController.CheckTouching += value;
            remove => On.HeroController.CheckTouching -= value;
        }

        public static event On.HeroController.hook_CheckTouchingAdvanced CheckTouchingAdvanced
        {
            add => On.HeroController.CheckTouchingAdvanced += value;
            remove => On.HeroController.CheckTouchingAdvanced -= value;
        }

        public static event On.HeroController.hook_FindCollisionDirection FindCollisionDirection
        {
            add => On.HeroController.FindCollisionDirection += value;
            remove => On.HeroController.FindCollisionDirection -= value;
        }

        public static event On.HeroController.hook_CanJump CanJump
        {
            add => On.HeroController.CanJump += value;
            remove => On.HeroController.CanJump -= value;
        }

        public static event On.HeroController.hook_CanDoubleJump CanDoubleJump
        {
            add => On.HeroController.CanDoubleJump += value;
            remove => On.HeroController.CanDoubleJump -= value;
        }

        public static event On.HeroController.hook_CanInfiniteAirJump CanInfiniteAirJump
        {
            add => On.HeroController.CanInfiniteAirJump += value;
            remove => On.HeroController.CanInfiniteAirJump -= value;
        }

        public static event On.HeroController.hook_CanSwim CanSwim
        {
            add => On.HeroController.CanSwim += value;
            remove => On.HeroController.CanSwim -= value;
        }

        public static event On.HeroController.hook_CanDash CanDash
        {
            add => On.HeroController.CanDash += value;
            remove => On.HeroController.CanDash -= value;
        }

        public static event On.HeroController.hook_CanAttack CanAttack
        {
            add => On.HeroController.CanAttack += value;
            remove => On.HeroController.CanAttack -= value;
        }

        public static event On.HeroController.hook_CanNailCharge CanNailCharge
        {
            add => On.HeroController.CanNailCharge += value;
            remove => On.HeroController.CanNailCharge -= value;
        }

        public static event On.HeroController.hook_CanWallSlide CanWallSlide
        {
            add => On.HeroController.CanWallSlide += value;
            remove => On.HeroController.CanWallSlide -= value;
        }

        public static event On.HeroController.hook_CanTakeDamage CanTakeDamage
        {
            add => On.HeroController.CanTakeDamage += value;
            remove => On.HeroController.CanTakeDamage -= value;
        }

        public static event On.HeroController.hook_CanWallJump CanWallJump
        {
            add => On.HeroController.CanWallJump += value;
            remove => On.HeroController.CanWallJump -= value;
        }

        public static event On.HeroController.hook_ShouldHardLand ShouldHardLand
        {
            add => On.HeroController.ShouldHardLand += value;
            remove => On.HeroController.ShouldHardLand -= value;
        }

        public static event On.HeroController.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.HeroController.OnCollisionEnter2D += value;
            remove => On.HeroController.OnCollisionEnter2D -= value;
        }

        public static event On.HeroController.hook_OnCollisionStay2D OnCollisionStay2D
        {
            add => On.HeroController.OnCollisionStay2D += value;
            remove => On.HeroController.OnCollisionStay2D -= value;
        }

        public static event On.HeroController.hook_OnCollisionExit2D OnCollisionExit2D
        {
            add => On.HeroController.OnCollisionExit2D += value;
            remove => On.HeroController.OnCollisionExit2D -= value;
        }

        public static event On.HeroController.hook_SetupGameRefs SetupGameRefs
        {
            add => On.HeroController.SetupGameRefs += value;
            remove => On.HeroController.SetupGameRefs -= value;
        }

        public static event On.HeroController.hook_SetupPools SetupPools
        {
            add => On.HeroController.SetupPools += value;
            remove => On.HeroController.SetupPools -= value;
        }

        public static event On.HeroController.hook_FilterInput FilterInput
        {
            add => On.HeroController.FilterInput += value;
            remove => On.HeroController.FilterInput -= value;
        }

        public static event On.HeroController.hook_FindGroundPoint FindGroundPoint
        {
            add => On.HeroController.FindGroundPoint += value;
            remove => On.HeroController.FindGroundPoint -= value;
        }

        public static event On.HeroController.hook_FindGroundPointY FindGroundPointY
        {
            add => On.HeroController.FindGroundPointY += value;
            remove => On.HeroController.FindGroundPointY -= value;
        }

        public static event Delegates.orig_StartMPDrain_NormalArgs orig_StartMPDrain
        {
            add => HookEndpointManager.Add<Delegates.orig_StartMPDrain_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_StartMPDrain"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_StartMPDrain_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_StartMPDrain"), value);
        }

        public static event Delegates.orig_Update_NormalArgs orig_Update
        {
            add => HookEndpointManager.Add<Delegates.orig_Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_Update"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_Update"), value);
        }

        public static event Delegates.OrigDashVector_NormalArgs OrigDashVector
        {
            add => HookEndpointManager.Add<Delegates.OrigDashVector_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "OrigDashVector"), value);
            remove => HookEndpointManager.Remove<Delegates.OrigDashVector_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "OrigDashVector"), value);
        }

        public static event Delegates.orig_Dash_NormalArgs orig_Dash
        {
            add => HookEndpointManager.Add<Delegates.orig_Dash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_Dash"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Dash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_Dash"), value);
        }

        public static event Delegates.orig_CharmUpdate_NormalArgs orig_CharmUpdate
        {
            add => HookEndpointManager.Add<Delegates.orig_CharmUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_CharmUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_CharmUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_CharmUpdate"), value);
        }

        public static event Delegates.orig_DoAttack_NormalArgs orig_DoAttack
        {
            add => HookEndpointManager.Add<Delegates.orig_DoAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_DoAttack"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_DoAttack_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroController), "orig_DoAttack"), value);
        }
    }
}