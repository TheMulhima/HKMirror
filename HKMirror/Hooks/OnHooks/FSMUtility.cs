namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for FSMUtility class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnFSMUtility
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookObtainFsmList()
        {
            if (!HookedList.Contains("ObtainFsmList"))
            {
                HookedList.Add("ObtainFsmList");
                On.FSMUtility.ObtainFsmList += ObtainFsmList;
            }
        }

        internal static event Delegates.ObtainFsmList_BeforeArgs _beforeObtainFsmList;
        internal static event Delegates.ObtainFsmList_AfterArgs _afterObtainFsmList;

        private static List<PlayMakerFSM> ObtainFsmList(On.FSMUtility.orig_ObtainFsmList orig)
        {
            if (_beforeObtainFsmList != null)
                foreach (Delegates.ObtainFsmList_BeforeArgs toInvoke in _beforeObtainFsmList.GetInvocationList())
                    try
                    {
                        _beforeObtainFsmList?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterObtainFsmList != null)
                foreach (Delegates.ObtainFsmList_AfterArgs toInvoke in _afterObtainFsmList.GetInvocationList())
                    try
                    {
                        retVal = _afterObtainFsmList.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookReleaseFsmList()
        {
            if (!HookedList.Contains("ReleaseFsmList"))
            {
                HookedList.Add("ReleaseFsmList");
                On.FSMUtility.ReleaseFsmList += ReleaseFsmList;
            }
        }

        internal static event Delegates.ReleaseFsmList_BeforeArgs _beforeReleaseFsmList;
        internal static event Delegates.ReleaseFsmList_AfterArgs _afterReleaseFsmList;

        private static void ReleaseFsmList(On.FSMUtility.orig_ReleaseFsmList orig, List<PlayMakerFSM> fsmList)
        {
            Delegates.Params_ReleaseFsmList @params = new()
            {
                fsmList = fsmList
            };
            if (_beforeReleaseFsmList != null)
                foreach (Delegates.ReleaseFsmList_BeforeArgs toInvoke in _beforeReleaseFsmList.GetInvocationList())
                    try
                    {
                        _beforeReleaseFsmList?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsmList = @params.fsmList;
            orig(fsmList);
            if (_afterReleaseFsmList != null)
                foreach (Delegates.ReleaseFsmList_AfterArgs toInvoke in _afterReleaseFsmList.GetInvocationList())
                    try
                    {
                        _afterReleaseFsmList.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookContainsFSM()
        {
            if (!HookedList.Contains("ContainsFSM"))
            {
                HookedList.Add("ContainsFSM");
                On.FSMUtility.ContainsFSM += ContainsFSM;
            }
        }

        internal static event Delegates.ContainsFSM_BeforeArgs _beforeContainsFSM;
        internal static event Delegates.ContainsFSM_AfterArgs _afterContainsFSM;

        private static bool ContainsFSM(On.FSMUtility.orig_ContainsFSM orig, GameObject go, string fsmName)
        {
            Delegates.Params_ContainsFSM @params = new()
            {
                go = go, fsmName = fsmName
            };
            if (_beforeContainsFSM != null)
                foreach (Delegates.ContainsFSM_BeforeArgs toInvoke in _beforeContainsFSM.GetInvocationList())
                    try
                    {
                        _beforeContainsFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmName = @params.fsmName;
            var retVal = orig(go, fsmName);
            if (_afterContainsFSM != null)
                foreach (Delegates.ContainsFSM_AfterArgs toInvoke in _afterContainsFSM.GetInvocationList())
                    try
                    {
                        retVal = _afterContainsFSM.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLocateFSM()
        {
            if (!HookedList.Contains("LocateFSM"))
            {
                HookedList.Add("LocateFSM");
                On.FSMUtility.LocateFSM += LocateFSM;
            }
        }

        internal static event Delegates.LocateFSM_BeforeArgs _beforeLocateFSM;
        internal static event Delegates.LocateFSM_AfterArgs _afterLocateFSM;

        private static PlayMakerFSM LocateFSM(On.FSMUtility.orig_LocateFSM orig, GameObject go, string fsmName)
        {
            Delegates.Params_LocateFSM @params = new()
            {
                go = go, fsmName = fsmName
            };
            if (_beforeLocateFSM != null)
                foreach (Delegates.LocateFSM_BeforeArgs toInvoke in _beforeLocateFSM.GetInvocationList())
                    try
                    {
                        _beforeLocateFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmName = @params.fsmName;
            var retVal = orig(go, fsmName);
            if (_afterLocateFSM != null)
                foreach (Delegates.LocateFSM_AfterArgs toInvoke in _afterLocateFSM.GetInvocationList())
                    try
                    {
                        retVal = _afterLocateFSM.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLocateMyFSM()
        {
            if (!HookedList.Contains("LocateMyFSM"))
            {
                HookedList.Add("LocateMyFSM");
                On.FSMUtility.LocateMyFSM += LocateMyFSM;
            }
        }

        internal static event Delegates.LocateMyFSM_BeforeArgs _beforeLocateMyFSM;
        internal static event Delegates.LocateMyFSM_AfterArgs _afterLocateMyFSM;

        private static PlayMakerFSM LocateMyFSM(On.FSMUtility.orig_LocateMyFSM orig, GameObject go, string fsmName)
        {
            Delegates.Params_LocateMyFSM @params = new()
            {
                go = go, fsmName = fsmName
            };
            if (_beforeLocateMyFSM != null)
                foreach (Delegates.LocateMyFSM_BeforeArgs toInvoke in _beforeLocateMyFSM.GetInvocationList())
                    try
                    {
                        _beforeLocateMyFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            fsmName = @params.fsmName;
            var retVal = orig(go, fsmName);
            if (_afterLocateMyFSM != null)
                foreach (Delegates.LocateMyFSM_AfterArgs toInvoke in _afterLocateMyFSM.GetInvocationList())
                    try
                    {
                        retVal = _afterLocateMyFSM.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFSM()
        {
            if (!HookedList.Contains("GetFSM"))
            {
                HookedList.Add("GetFSM");
                On.FSMUtility.GetFSM += GetFSM;
            }
        }

        internal static event Delegates.GetFSM_BeforeArgs _beforeGetFSM;
        internal static event Delegates.GetFSM_AfterArgs _afterGetFSM;

        private static PlayMakerFSM GetFSM(On.FSMUtility.orig_GetFSM orig, GameObject go)
        {
            Delegates.Params_GetFSM @params = new()
            {
                go = go
            };
            if (_beforeGetFSM != null)
                foreach (Delegates.GetFSM_BeforeArgs toInvoke in _beforeGetFSM.GetInvocationList())
                    try
                    {
                        _beforeGetFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            var retVal = orig(go);
            if (_afterGetFSM != null)
                foreach (Delegates.GetFSM_AfterArgs toInvoke in _afterGetFSM.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFSM.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSendEventToGameObject_GameObject_string_bool()
        {
            if (!HookedList.Contains("SendEventToGameObject_GameObject_string_bool"))
            {
                HookedList.Add("SendEventToGameObject_GameObject_string_bool");
                On.FSMUtility.SendEventToGameObject_GameObject_string_bool +=
                    SendEventToGameObject_GameObject_string_bool;
            }
        }

        internal static event Delegates.SendEventToGameObject_GameObject_string_bool_BeforeArgs
            _beforeSendEventToGameObject_GameObject_string_bool;

        internal static event Delegates.SendEventToGameObject_GameObject_string_bool_AfterArgs
            _afterSendEventToGameObject_GameObject_string_bool;

        private static void SendEventToGameObject_GameObject_string_bool(
            On.FSMUtility.orig_SendEventToGameObject_GameObject_string_bool orig, GameObject go, string eventName,
            bool isRecursive)
        {
            Delegates.Params_SendEventToGameObject_GameObject_string_bool @params = new()
            {
                go = go, eventName = eventName, isRecursive = isRecursive
            };
            if (_beforeSendEventToGameObject_GameObject_string_bool != null)
                foreach (Delegates.SendEventToGameObject_GameObject_string_bool_BeforeArgs toInvoke in
                         _beforeSendEventToGameObject_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _beforeSendEventToGameObject_GameObject_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            eventName = @params.eventName;
            isRecursive = @params.isRecursive;
            orig(go, eventName, isRecursive);
            if (_afterSendEventToGameObject_GameObject_string_bool != null)
                foreach (Delegates.SendEventToGameObject_GameObject_string_bool_AfterArgs toInvoke in
                         _afterSendEventToGameObject_GameObject_string_bool.GetInvocationList())
                    try
                    {
                        _afterSendEventToGameObject_GameObject_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSendEventToGameObject_GameObject_FsmEvent_bool()
        {
            if (!HookedList.Contains("SendEventToGameObject_GameObject_FsmEvent_bool"))
            {
                HookedList.Add("SendEventToGameObject_GameObject_FsmEvent_bool");
                On.FSMUtility.SendEventToGameObject_GameObject_FsmEvent_bool +=
                    SendEventToGameObject_GameObject_FsmEvent_bool;
            }
        }

        internal static event Delegates.SendEventToGameObject_GameObject_FsmEvent_bool_BeforeArgs
            _beforeSendEventToGameObject_GameObject_FsmEvent_bool;

        internal static event Delegates.SendEventToGameObject_GameObject_FsmEvent_bool_AfterArgs
            _afterSendEventToGameObject_GameObject_FsmEvent_bool;

        private static void SendEventToGameObject_GameObject_FsmEvent_bool(
            On.FSMUtility.orig_SendEventToGameObject_GameObject_FsmEvent_bool orig, GameObject go, FsmEvent ev,
            bool isRecursive)
        {
            Delegates.Params_SendEventToGameObject_GameObject_FsmEvent_bool @params = new()
            {
                go = go, ev = ev, isRecursive = isRecursive
            };
            if (_beforeSendEventToGameObject_GameObject_FsmEvent_bool != null)
                foreach (Delegates.SendEventToGameObject_GameObject_FsmEvent_bool_BeforeArgs toInvoke in
                         _beforeSendEventToGameObject_GameObject_FsmEvent_bool.GetInvocationList())
                    try
                    {
                        _beforeSendEventToGameObject_GameObject_FsmEvent_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            ev = @params.ev;
            isRecursive = @params.isRecursive;
            orig(go, ev, isRecursive);
            if (_afterSendEventToGameObject_GameObject_FsmEvent_bool != null)
                foreach (Delegates.SendEventToGameObject_GameObject_FsmEvent_bool_AfterArgs toInvoke in
                         _afterSendEventToGameObject_GameObject_FsmEvent_bool.GetInvocationList())
                    try
                    {
                        _afterSendEventToGameObject_GameObject_FsmEvent_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetSafe()
        {
            if (!HookedList.Contains("GetSafe"))
            {
                HookedList.Add("GetSafe");
                On.FSMUtility.GetSafe += GetSafe;
            }
        }

        internal static event Delegates.GetSafe_BeforeArgs _beforeGetSafe;
        internal static event Delegates.GetSafe_AfterArgs _afterGetSafe;

        private static GameObject GetSafe(On.FSMUtility.orig_GetSafe orig, FsmOwnerDefault ownerDefault,
            FsmStateAction stateAction)
        {
            Delegates.Params_GetSafe @params = new()
            {
                ownerDefault = ownerDefault, stateAction = stateAction
            };
            if (_beforeGetSafe != null)
                foreach (Delegates.GetSafe_BeforeArgs toInvoke in _beforeGetSafe.GetInvocationList())
                    try
                    {
                        _beforeGetSafe?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            ownerDefault = @params.ownerDefault;
            stateAction = @params.stateAction;
            var retVal = orig(ownerDefault, stateAction);
            if (_afterGetSafe != null)
                foreach (Delegates.GetSafe_AfterArgs toInvoke in _afterGetSafe.GetInvocationList())
                    try
                    {
                        retVal = _afterGetSafe.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetBool()
        {
            if (!HookedList.Contains("GetBool"))
            {
                HookedList.Add("GetBool");
                On.FSMUtility.GetBool += GetBool;
            }
        }

        internal static event Delegates.GetBool_BeforeArgs _beforeGetBool;
        internal static event Delegates.GetBool_AfterArgs _afterGetBool;

        private static bool GetBool(On.FSMUtility.orig_GetBool orig, PlayMakerFSM fsm, string variableName)
        {
            Delegates.Params_GetBool @params = new()
            {
                fsm = fsm, variableName = variableName
            };
            if (_beforeGetBool != null)
                foreach (Delegates.GetBool_BeforeArgs toInvoke in _beforeGetBool.GetInvocationList())
                    try
                    {
                        _beforeGetBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            var retVal = orig(fsm, variableName);
            if (_afterGetBool != null)
                foreach (Delegates.GetBool_AfterArgs toInvoke in _afterGetBool.GetInvocationList())
                    try
                    {
                        retVal = _afterGetBool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetInt()
        {
            if (!HookedList.Contains("GetInt"))
            {
                HookedList.Add("GetInt");
                On.FSMUtility.GetInt += GetInt;
            }
        }

        internal static event Delegates.GetInt_BeforeArgs _beforeGetInt;
        internal static event Delegates.GetInt_AfterArgs _afterGetInt;

        private static int GetInt(On.FSMUtility.orig_GetInt orig, PlayMakerFSM fsm, string variableName)
        {
            Delegates.Params_GetInt @params = new()
            {
                fsm = fsm, variableName = variableName
            };
            if (_beforeGetInt != null)
                foreach (Delegates.GetInt_BeforeArgs toInvoke in _beforeGetInt.GetInvocationList())
                    try
                    {
                        _beforeGetInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            var retVal = orig(fsm, variableName);
            if (_afterGetInt != null)
                foreach (Delegates.GetInt_AfterArgs toInvoke in _afterGetInt.GetInvocationList())
                    try
                    {
                        retVal = _afterGetInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFloat()
        {
            if (!HookedList.Contains("GetFloat"))
            {
                HookedList.Add("GetFloat");
                On.FSMUtility.GetFloat += GetFloat;
            }
        }

        internal static event Delegates.GetFloat_BeforeArgs _beforeGetFloat;
        internal static event Delegates.GetFloat_AfterArgs _afterGetFloat;

        private static float GetFloat(On.FSMUtility.orig_GetFloat orig, PlayMakerFSM fsm, string variableName)
        {
            Delegates.Params_GetFloat @params = new()
            {
                fsm = fsm, variableName = variableName
            };
            if (_beforeGetFloat != null)
                foreach (Delegates.GetFloat_BeforeArgs toInvoke in _beforeGetFloat.GetInvocationList())
                    try
                    {
                        _beforeGetFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            var retVal = orig(fsm, variableName);
            if (_afterGetFloat != null)
                foreach (Delegates.GetFloat_AfterArgs toInvoke in _afterGetFloat.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFloat.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetString()
        {
            if (!HookedList.Contains("GetString"))
            {
                HookedList.Add("GetString");
                On.FSMUtility.GetString += GetString;
            }
        }

        internal static event Delegates.GetString_BeforeArgs _beforeGetString;
        internal static event Delegates.GetString_AfterArgs _afterGetString;

        private static string GetString(On.FSMUtility.orig_GetString orig, PlayMakerFSM fsm, string variableName)
        {
            Delegates.Params_GetString @params = new()
            {
                fsm = fsm, variableName = variableName
            };
            if (_beforeGetString != null)
                foreach (Delegates.GetString_BeforeArgs toInvoke in _beforeGetString.GetInvocationList())
                    try
                    {
                        _beforeGetString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            var retVal = orig(fsm, variableName);
            if (_afterGetString != null)
                foreach (Delegates.GetString_AfterArgs toInvoke in _afterGetString.GetInvocationList())
                    try
                    {
                        retVal = _afterGetString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetVector3()
        {
            if (!HookedList.Contains("GetVector3"))
            {
                HookedList.Add("GetVector3");
                On.FSMUtility.GetVector3 += GetVector3;
            }
        }

        internal static event Delegates.GetVector3_BeforeArgs _beforeGetVector3;
        internal static event Delegates.GetVector3_AfterArgs _afterGetVector3;

        private static Vector3 GetVector3(On.FSMUtility.orig_GetVector3 orig, PlayMakerFSM fsm, string variableName)
        {
            Delegates.Params_GetVector3 @params = new()
            {
                fsm = fsm, variableName = variableName
            };
            if (_beforeGetVector3 != null)
                foreach (Delegates.GetVector3_BeforeArgs toInvoke in _beforeGetVector3.GetInvocationList())
                    try
                    {
                        _beforeGetVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            var retVal = orig(fsm, variableName);
            if (_afterGetVector3 != null)
                foreach (Delegates.GetVector3_AfterArgs toInvoke in _afterGetVector3.GetInvocationList())
                    try
                    {
                        retVal = _afterGetVector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetBool()
        {
            if (!HookedList.Contains("SetBool"))
            {
                HookedList.Add("SetBool");
                On.FSMUtility.SetBool += SetBool;
            }
        }

        internal static event Delegates.SetBool_BeforeArgs _beforeSetBool;
        internal static event Delegates.SetBool_AfterArgs _afterSetBool;

        private static void SetBool(On.FSMUtility.orig_SetBool orig, PlayMakerFSM fsm, string variableName, bool value)
        {
            Delegates.Params_SetBool @params = new()
            {
                fsm = fsm, variableName = variableName, value = value
            };
            if (_beforeSetBool != null)
                foreach (Delegates.SetBool_BeforeArgs toInvoke in _beforeSetBool.GetInvocationList())
                    try
                    {
                        _beforeSetBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            value = @params.value;
            orig(fsm, variableName, value);
            if (_afterSetBool != null)
                foreach (Delegates.SetBool_AfterArgs toInvoke in _afterSetBool.GetInvocationList())
                    try
                    {
                        _afterSetBool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetInt()
        {
            if (!HookedList.Contains("SetInt"))
            {
                HookedList.Add("SetInt");
                On.FSMUtility.SetInt += SetInt;
            }
        }

        internal static event Delegates.SetInt_BeforeArgs _beforeSetInt;
        internal static event Delegates.SetInt_AfterArgs _afterSetInt;

        private static void SetInt(On.FSMUtility.orig_SetInt orig, PlayMakerFSM fsm, string variableName, int value)
        {
            Delegates.Params_SetInt @params = new()
            {
                fsm = fsm, variableName = variableName, value = value
            };
            if (_beforeSetInt != null)
                foreach (Delegates.SetInt_BeforeArgs toInvoke in _beforeSetInt.GetInvocationList())
                    try
                    {
                        _beforeSetInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            value = @params.value;
            orig(fsm, variableName, value);
            if (_afterSetInt != null)
                foreach (Delegates.SetInt_AfterArgs toInvoke in _afterSetInt.GetInvocationList())
                    try
                    {
                        _afterSetInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetFloat()
        {
            if (!HookedList.Contains("SetFloat"))
            {
                HookedList.Add("SetFloat");
                On.FSMUtility.SetFloat += SetFloat;
            }
        }

        internal static event Delegates.SetFloat_BeforeArgs _beforeSetFloat;
        internal static event Delegates.SetFloat_AfterArgs _afterSetFloat;

        private static void SetFloat(On.FSMUtility.orig_SetFloat orig, PlayMakerFSM fsm, string variableName,
            float value)
        {
            Delegates.Params_SetFloat @params = new()
            {
                fsm = fsm, variableName = variableName, value = value
            };
            if (_beforeSetFloat != null)
                foreach (Delegates.SetFloat_BeforeArgs toInvoke in _beforeSetFloat.GetInvocationList())
                    try
                    {
                        _beforeSetFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            value = @params.value;
            orig(fsm, variableName, value);
            if (_afterSetFloat != null)
                foreach (Delegates.SetFloat_AfterArgs toInvoke in _afterSetFloat.GetInvocationList())
                    try
                    {
                        _afterSetFloat.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetString()
        {
            if (!HookedList.Contains("SetString"))
            {
                HookedList.Add("SetString");
                On.FSMUtility.SetString += SetString;
            }
        }

        internal static event Delegates.SetString_BeforeArgs _beforeSetString;
        internal static event Delegates.SetString_AfterArgs _afterSetString;

        private static void SetString(On.FSMUtility.orig_SetString orig, PlayMakerFSM fsm, string variableName,
            string value)
        {
            Delegates.Params_SetString @params = new()
            {
                fsm = fsm, variableName = variableName, value = value
            };
            if (_beforeSetString != null)
                foreach (Delegates.SetString_BeforeArgs toInvoke in _beforeSetString.GetInvocationList())
                    try
                    {
                        _beforeSetString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsm = @params.fsm;
            variableName = @params.variableName;
            value = @params.value;
            orig(fsm, variableName, value);
            if (_afterSetString != null)
                foreach (Delegates.SetString_AfterArgs toInvoke in _afterSetString.GetInvocationList())
                    try
                    {
                        _afterSetString.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFindFSMWithPersistentBool()
        {
            if (!HookedList.Contains("FindFSMWithPersistentBool"))
            {
                HookedList.Add("FindFSMWithPersistentBool");
                On.FSMUtility.FindFSMWithPersistentBool += FindFSMWithPersistentBool;
            }
        }

        internal static event Delegates.FindFSMWithPersistentBool_BeforeArgs _beforeFindFSMWithPersistentBool;
        internal static event Delegates.FindFSMWithPersistentBool_AfterArgs _afterFindFSMWithPersistentBool;

        private static PlayMakerFSM FindFSMWithPersistentBool(On.FSMUtility.orig_FindFSMWithPersistentBool orig,
            PlayMakerFSM[] fsmArray)
        {
            Delegates.Params_FindFSMWithPersistentBool @params = new()
            {
                fsmArray = fsmArray
            };
            if (_beforeFindFSMWithPersistentBool != null)
                foreach (Delegates.FindFSMWithPersistentBool_BeforeArgs toInvoke in _beforeFindFSMWithPersistentBool
                             .GetInvocationList())
                    try
                    {
                        _beforeFindFSMWithPersistentBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsmArray = @params.fsmArray;
            var retVal = orig(fsmArray);
            if (_afterFindFSMWithPersistentBool != null)
                foreach (Delegates.FindFSMWithPersistentBool_AfterArgs toInvoke in _afterFindFSMWithPersistentBool
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindFSMWithPersistentBool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookFindFSMWithPersistentInt()
        {
            if (!HookedList.Contains("FindFSMWithPersistentInt"))
            {
                HookedList.Add("FindFSMWithPersistentInt");
                On.FSMUtility.FindFSMWithPersistentInt += FindFSMWithPersistentInt;
            }
        }

        internal static event Delegates.FindFSMWithPersistentInt_BeforeArgs _beforeFindFSMWithPersistentInt;
        internal static event Delegates.FindFSMWithPersistentInt_AfterArgs _afterFindFSMWithPersistentInt;

        private static PlayMakerFSM FindFSMWithPersistentInt(On.FSMUtility.orig_FindFSMWithPersistentInt orig,
            PlayMakerFSM[] fsmArray)
        {
            Delegates.Params_FindFSMWithPersistentInt @params = new()
            {
                fsmArray = fsmArray
            };
            if (_beforeFindFSMWithPersistentInt != null)
                foreach (Delegates.FindFSMWithPersistentInt_BeforeArgs toInvoke in _beforeFindFSMWithPersistentInt
                             .GetInvocationList())
                    try
                    {
                        _beforeFindFSMWithPersistentInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            fsmArray = @params.fsmArray;
            var retVal = orig(fsmArray);
            if (_afterFindFSMWithPersistentInt != null)
                foreach (Delegates.FindFSMWithPersistentInt_AfterArgs toInvoke in _afterFindFSMWithPersistentInt
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterFindFSMWithPersistentInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool ContainsFSM_AfterArgs(Params_ContainsFSM args, bool ret);

        public delegate void ContainsFSM_BeforeArgs(Params_ContainsFSM args);

        public delegate bool ContainsFSM_WithArgs(Func<GameObject, string, bool> orig, GameObject go, string fsmName);

        public delegate PlayMakerFSM FindFSMWithPersistentBool_AfterArgs(Params_FindFSMWithPersistentBool args,
            PlayMakerFSM ret);

        public delegate void FindFSMWithPersistentBool_BeforeArgs(Params_FindFSMWithPersistentBool args);

        public delegate PlayMakerFSM FindFSMWithPersistentBool_WithArgs(Func<PlayMakerFSM[], PlayMakerFSM> orig,
            PlayMakerFSM[] fsmArray);

        public delegate PlayMakerFSM FindFSMWithPersistentInt_AfterArgs(Params_FindFSMWithPersistentInt args,
            PlayMakerFSM ret);

        public delegate void FindFSMWithPersistentInt_BeforeArgs(Params_FindFSMWithPersistentInt args);

        public delegate PlayMakerFSM FindFSMWithPersistentInt_WithArgs(Func<PlayMakerFSM[], PlayMakerFSM> orig,
            PlayMakerFSM[] fsmArray);

        public delegate bool GetBool_AfterArgs(Params_GetBool args, bool ret);

        public delegate void GetBool_BeforeArgs(Params_GetBool args);

        public delegate bool GetBool_WithArgs(Func<PlayMakerFSM, string, bool> orig, PlayMakerFSM fsm,
            string variableName);

        public delegate float GetFloat_AfterArgs(Params_GetFloat args, float ret);

        public delegate void GetFloat_BeforeArgs(Params_GetFloat args);

        public delegate float GetFloat_WithArgs(Func<PlayMakerFSM, string, float> orig, PlayMakerFSM fsm,
            string variableName);

        public delegate PlayMakerFSM GetFSM_AfterArgs(Params_GetFSM args, PlayMakerFSM ret);

        public delegate void GetFSM_BeforeArgs(Params_GetFSM args);

        public delegate PlayMakerFSM GetFSM_WithArgs(Func<GameObject, PlayMakerFSM> orig, GameObject go);

        public delegate int GetInt_AfterArgs(Params_GetInt args, int ret);

        public delegate void GetInt_BeforeArgs(Params_GetInt args);

        public delegate int GetInt_WithArgs(Func<PlayMakerFSM, string, int> orig, PlayMakerFSM fsm,
            string variableName);

        public delegate GameObject GetSafe_AfterArgs(Params_GetSafe args, GameObject ret);

        public delegate void GetSafe_BeforeArgs(Params_GetSafe args);

        public delegate GameObject GetSafe_WithArgs(Func<FsmOwnerDefault, FsmStateAction, GameObject> orig,
            FsmOwnerDefault ownerDefault, FsmStateAction stateAction);

        public delegate string GetString_AfterArgs(Params_GetString args, string ret);

        public delegate void GetString_BeforeArgs(Params_GetString args);

        public delegate string GetString_WithArgs(Func<PlayMakerFSM, string, string> orig, PlayMakerFSM fsm,
            string variableName);

        public delegate Vector3 GetVector3_AfterArgs(Params_GetVector3 args, Vector3 ret);

        public delegate void GetVector3_BeforeArgs(Params_GetVector3 args);

        public delegate Vector3 GetVector3_WithArgs(Func<PlayMakerFSM, string, Vector3> orig, PlayMakerFSM fsm,
            string variableName);

        public delegate PlayMakerFSM LocateFSM_AfterArgs(Params_LocateFSM args, PlayMakerFSM ret);

        public delegate void LocateFSM_BeforeArgs(Params_LocateFSM args);

        public delegate PlayMakerFSM LocateFSM_WithArgs(Func<GameObject, string, PlayMakerFSM> orig, GameObject go,
            string fsmName);

        public delegate PlayMakerFSM LocateMyFSM_AfterArgs(Params_LocateMyFSM args, PlayMakerFSM ret);

        public delegate void LocateMyFSM_BeforeArgs(Params_LocateMyFSM args);

        public delegate PlayMakerFSM LocateMyFSM_WithArgs(Func<GameObject, string, PlayMakerFSM> orig, GameObject go,
            string fsmName);

        public delegate List<PlayMakerFSM> ObtainFsmList_AfterArgs(List<PlayMakerFSM> ret);

        public delegate void ObtainFsmList_BeforeArgs();

        public delegate List<PlayMakerFSM> ObtainFsmList_WithArgs(Func<List<PlayMakerFSM>> orig);

        public delegate void ReleaseFsmList_AfterArgs(Params_ReleaseFsmList args);

        public delegate void ReleaseFsmList_BeforeArgs(Params_ReleaseFsmList args);

        public delegate void ReleaseFsmList_WithArgs(Action<List<PlayMakerFSM>> orig, List<PlayMakerFSM> fsmList);

        public delegate void SendEventToGameObject_GameObject_FsmEvent_bool_AfterArgs(
            Params_SendEventToGameObject_GameObject_FsmEvent_bool args);

        public delegate void SendEventToGameObject_GameObject_FsmEvent_bool_BeforeArgs(
            Params_SendEventToGameObject_GameObject_FsmEvent_bool args);

        public delegate void SendEventToGameObject_GameObject_FsmEvent_bool_WithArgs(
            Action<GameObject, FsmEvent, bool> orig, GameObject go, FsmEvent ev, bool isRecursive);

        public delegate void SendEventToGameObject_GameObject_string_bool_AfterArgs(
            Params_SendEventToGameObject_GameObject_string_bool args);

        public delegate void SendEventToGameObject_GameObject_string_bool_BeforeArgs(
            Params_SendEventToGameObject_GameObject_string_bool args);

        public delegate void SendEventToGameObject_GameObject_string_bool_WithArgs(
            Action<GameObject, string, bool> orig, GameObject go, string eventName, bool isRecursive);

        public delegate void SetBool_AfterArgs(Params_SetBool args);

        public delegate void SetBool_BeforeArgs(Params_SetBool args);

        public delegate void SetBool_WithArgs(Action<PlayMakerFSM, string, bool> orig, PlayMakerFSM fsm,
            string variableName, bool value);

        public delegate void SetFloat_AfterArgs(Params_SetFloat args);

        public delegate void SetFloat_BeforeArgs(Params_SetFloat args);

        public delegate void SetFloat_WithArgs(Action<PlayMakerFSM, string, float> orig, PlayMakerFSM fsm,
            string variableName, float value);

        public delegate void SetInt_AfterArgs(Params_SetInt args);

        public delegate void SetInt_BeforeArgs(Params_SetInt args);

        public delegate void SetInt_WithArgs(Action<PlayMakerFSM, string, int> orig, PlayMakerFSM fsm,
            string variableName, int value);

        public delegate void SetString_AfterArgs(Params_SetString args);

        public delegate void SetString_BeforeArgs(Params_SetString args);

        public delegate void SetString_WithArgs(Action<PlayMakerFSM, string, string> orig, PlayMakerFSM fsm,
            string variableName, string value);

        public sealed class Params_ReleaseFsmList
        {
            public List<PlayMakerFSM> fsmList;
        }

        public sealed class Params_ContainsFSM
        {
            public string fsmName;
            public GameObject go;
        }

        public sealed class Params_LocateFSM
        {
            public string fsmName;
            public GameObject go;
        }

        public sealed class Params_LocateMyFSM
        {
            public string fsmName;
            public GameObject go;
        }

        public sealed class Params_GetFSM
        {
            public GameObject go;
        }

        public sealed class Params_SendEventToGameObject_GameObject_string_bool
        {
            public string eventName;
            public GameObject go;
            public bool isRecursive;
        }

        public sealed class Params_SendEventToGameObject_GameObject_FsmEvent_bool
        {
            public FsmEvent ev;
            public GameObject go;
            public bool isRecursive;
        }

        public sealed class Params_GetSafe
        {
            public FsmOwnerDefault ownerDefault;
            public FsmStateAction stateAction;
        }

        public sealed class Params_GetBool
        {
            public PlayMakerFSM fsm;
            public string variableName;
        }

        public sealed class Params_GetInt
        {
            public PlayMakerFSM fsm;
            public string variableName;
        }

        public sealed class Params_GetFloat
        {
            public PlayMakerFSM fsm;
            public string variableName;
        }

        public sealed class Params_GetString
        {
            public PlayMakerFSM fsm;
            public string variableName;
        }

        public sealed class Params_GetVector3
        {
            public PlayMakerFSM fsm;
            public string variableName;
        }

        public sealed class Params_SetBool
        {
            public PlayMakerFSM fsm;
            public bool value;
            public string variableName;
        }

        public sealed class Params_SetInt
        {
            public PlayMakerFSM fsm;
            public int value;
            public string variableName;
        }

        public sealed class Params_SetFloat
        {
            public PlayMakerFSM fsm;
            public float value;
            public string variableName;
        }

        public sealed class Params_SetString
        {
            public PlayMakerFSM fsm;
            public string value;
            public string variableName;
        }

        public sealed class Params_FindFSMWithPersistentBool
        {
            public PlayMakerFSM[] fsmArray;
        }

        public sealed class Params_FindFSMWithPersistentInt
        {
            public PlayMakerFSM[] fsmArray;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.ObtainFsmList_BeforeArgs ObtainFsmList
        {
            add
            {
                HookHandler._beforeObtainFsmList += value;
                HookHandler.HookObtainFsmList();
            }
            remove => HookHandler._beforeObtainFsmList -= value;
        }

        public static event Delegates.ReleaseFsmList_BeforeArgs ReleaseFsmList
        {
            add
            {
                HookHandler._beforeReleaseFsmList += value;
                HookHandler.HookReleaseFsmList();
            }
            remove => HookHandler._beforeReleaseFsmList -= value;
        }

        public static event Delegates.ContainsFSM_BeforeArgs ContainsFSM
        {
            add
            {
                HookHandler._beforeContainsFSM += value;
                HookHandler.HookContainsFSM();
            }
            remove => HookHandler._beforeContainsFSM -= value;
        }

        public static event Delegates.LocateFSM_BeforeArgs LocateFSM
        {
            add
            {
                HookHandler._beforeLocateFSM += value;
                HookHandler.HookLocateFSM();
            }
            remove => HookHandler._beforeLocateFSM -= value;
        }

        public static event Delegates.LocateMyFSM_BeforeArgs LocateMyFSM
        {
            add
            {
                HookHandler._beforeLocateMyFSM += value;
                HookHandler.HookLocateMyFSM();
            }
            remove => HookHandler._beforeLocateMyFSM -= value;
        }

        public static event Delegates.GetFSM_BeforeArgs GetFSM
        {
            add
            {
                HookHandler._beforeGetFSM += value;
                HookHandler.HookGetFSM();
            }
            remove => HookHandler._beforeGetFSM -= value;
        }

        public static event Delegates.SendEventToGameObject_GameObject_string_bool_BeforeArgs
            SendEventToGameObject_GameObject_string_bool
            {
                add
                {
                    HookHandler._beforeSendEventToGameObject_GameObject_string_bool += value;
                    HookHandler.HookSendEventToGameObject_GameObject_string_bool();
                }
                remove => HookHandler._beforeSendEventToGameObject_GameObject_string_bool -= value;
            }

        public static event Delegates.SendEventToGameObject_GameObject_FsmEvent_bool_BeforeArgs
            SendEventToGameObject_GameObject_FsmEvent_bool
            {
                add
                {
                    HookHandler._beforeSendEventToGameObject_GameObject_FsmEvent_bool += value;
                    HookHandler.HookSendEventToGameObject_GameObject_FsmEvent_bool();
                }
                remove => HookHandler._beforeSendEventToGameObject_GameObject_FsmEvent_bool -= value;
            }

        public static event Delegates.GetSafe_BeforeArgs GetSafe
        {
            add
            {
                HookHandler._beforeGetSafe += value;
                HookHandler.HookGetSafe();
            }
            remove => HookHandler._beforeGetSafe -= value;
        }

        public static event Delegates.GetBool_BeforeArgs GetBool
        {
            add
            {
                HookHandler._beforeGetBool += value;
                HookHandler.HookGetBool();
            }
            remove => HookHandler._beforeGetBool -= value;
        }

        public static event Delegates.GetInt_BeforeArgs GetInt
        {
            add
            {
                HookHandler._beforeGetInt += value;
                HookHandler.HookGetInt();
            }
            remove => HookHandler._beforeGetInt -= value;
        }

        public static event Delegates.GetFloat_BeforeArgs GetFloat
        {
            add
            {
                HookHandler._beforeGetFloat += value;
                HookHandler.HookGetFloat();
            }
            remove => HookHandler._beforeGetFloat -= value;
        }

        public static event Delegates.GetString_BeforeArgs GetString
        {
            add
            {
                HookHandler._beforeGetString += value;
                HookHandler.HookGetString();
            }
            remove => HookHandler._beforeGetString -= value;
        }

        public static event Delegates.GetVector3_BeforeArgs GetVector3
        {
            add
            {
                HookHandler._beforeGetVector3 += value;
                HookHandler.HookGetVector3();
            }
            remove => HookHandler._beforeGetVector3 -= value;
        }

        public static event Delegates.SetBool_BeforeArgs SetBool
        {
            add
            {
                HookHandler._beforeSetBool += value;
                HookHandler.HookSetBool();
            }
            remove => HookHandler._beforeSetBool -= value;
        }

        public static event Delegates.SetInt_BeforeArgs SetInt
        {
            add
            {
                HookHandler._beforeSetInt += value;
                HookHandler.HookSetInt();
            }
            remove => HookHandler._beforeSetInt -= value;
        }

        public static event Delegates.SetFloat_BeforeArgs SetFloat
        {
            add
            {
                HookHandler._beforeSetFloat += value;
                HookHandler.HookSetFloat();
            }
            remove => HookHandler._beforeSetFloat -= value;
        }

        public static event Delegates.SetString_BeforeArgs SetString
        {
            add
            {
                HookHandler._beforeSetString += value;
                HookHandler.HookSetString();
            }
            remove => HookHandler._beforeSetString -= value;
        }

        public static event Delegates.FindFSMWithPersistentBool_BeforeArgs FindFSMWithPersistentBool
        {
            add
            {
                HookHandler._beforeFindFSMWithPersistentBool += value;
                HookHandler.HookFindFSMWithPersistentBool();
            }
            remove => HookHandler._beforeFindFSMWithPersistentBool -= value;
        }

        public static event Delegates.FindFSMWithPersistentInt_BeforeArgs FindFSMWithPersistentInt
        {
            add
            {
                HookHandler._beforeFindFSMWithPersistentInt += value;
                HookHandler.HookFindFSMWithPersistentInt();
            }
            remove => HookHandler._beforeFindFSMWithPersistentInt -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.ObtainFsmList_AfterArgs ObtainFsmList
        {
            add
            {
                HookHandler._afterObtainFsmList += value;
                HookHandler.HookObtainFsmList();
            }
            remove => HookHandler._afterObtainFsmList -= value;
        }

        public static event Delegates.ReleaseFsmList_AfterArgs ReleaseFsmList
        {
            add
            {
                HookHandler._afterReleaseFsmList += value;
                HookHandler.HookReleaseFsmList();
            }
            remove => HookHandler._afterReleaseFsmList -= value;
        }

        public static event Delegates.ContainsFSM_AfterArgs ContainsFSM
        {
            add
            {
                HookHandler._afterContainsFSM += value;
                HookHandler.HookContainsFSM();
            }
            remove => HookHandler._afterContainsFSM -= value;
        }

        public static event Delegates.LocateFSM_AfterArgs LocateFSM
        {
            add
            {
                HookHandler._afterLocateFSM += value;
                HookHandler.HookLocateFSM();
            }
            remove => HookHandler._afterLocateFSM -= value;
        }

        public static event Delegates.LocateMyFSM_AfterArgs LocateMyFSM
        {
            add
            {
                HookHandler._afterLocateMyFSM += value;
                HookHandler.HookLocateMyFSM();
            }
            remove => HookHandler._afterLocateMyFSM -= value;
        }

        public static event Delegates.GetFSM_AfterArgs GetFSM
        {
            add
            {
                HookHandler._afterGetFSM += value;
                HookHandler.HookGetFSM();
            }
            remove => HookHandler._afterGetFSM -= value;
        }

        public static event Delegates.SendEventToGameObject_GameObject_string_bool_AfterArgs
            SendEventToGameObject_GameObject_string_bool
            {
                add
                {
                    HookHandler._afterSendEventToGameObject_GameObject_string_bool += value;
                    HookHandler.HookSendEventToGameObject_GameObject_string_bool();
                }
                remove => HookHandler._afterSendEventToGameObject_GameObject_string_bool -= value;
            }

        public static event Delegates.SendEventToGameObject_GameObject_FsmEvent_bool_AfterArgs
            SendEventToGameObject_GameObject_FsmEvent_bool
            {
                add
                {
                    HookHandler._afterSendEventToGameObject_GameObject_FsmEvent_bool += value;
                    HookHandler.HookSendEventToGameObject_GameObject_FsmEvent_bool();
                }
                remove => HookHandler._afterSendEventToGameObject_GameObject_FsmEvent_bool -= value;
            }

        public static event Delegates.GetSafe_AfterArgs GetSafe
        {
            add
            {
                HookHandler._afterGetSafe += value;
                HookHandler.HookGetSafe();
            }
            remove => HookHandler._afterGetSafe -= value;
        }

        public static event Delegates.GetBool_AfterArgs GetBool
        {
            add
            {
                HookHandler._afterGetBool += value;
                HookHandler.HookGetBool();
            }
            remove => HookHandler._afterGetBool -= value;
        }

        public static event Delegates.GetInt_AfterArgs GetInt
        {
            add
            {
                HookHandler._afterGetInt += value;
                HookHandler.HookGetInt();
            }
            remove => HookHandler._afterGetInt -= value;
        }

        public static event Delegates.GetFloat_AfterArgs GetFloat
        {
            add
            {
                HookHandler._afterGetFloat += value;
                HookHandler.HookGetFloat();
            }
            remove => HookHandler._afterGetFloat -= value;
        }

        public static event Delegates.GetString_AfterArgs GetString
        {
            add
            {
                HookHandler._afterGetString += value;
                HookHandler.HookGetString();
            }
            remove => HookHandler._afterGetString -= value;
        }

        public static event Delegates.GetVector3_AfterArgs GetVector3
        {
            add
            {
                HookHandler._afterGetVector3 += value;
                HookHandler.HookGetVector3();
            }
            remove => HookHandler._afterGetVector3 -= value;
        }

        public static event Delegates.SetBool_AfterArgs SetBool
        {
            add
            {
                HookHandler._afterSetBool += value;
                HookHandler.HookSetBool();
            }
            remove => HookHandler._afterSetBool -= value;
        }

        public static event Delegates.SetInt_AfterArgs SetInt
        {
            add
            {
                HookHandler._afterSetInt += value;
                HookHandler.HookSetInt();
            }
            remove => HookHandler._afterSetInt -= value;
        }

        public static event Delegates.SetFloat_AfterArgs SetFloat
        {
            add
            {
                HookHandler._afterSetFloat += value;
                HookHandler.HookSetFloat();
            }
            remove => HookHandler._afterSetFloat -= value;
        }

        public static event Delegates.SetString_AfterArgs SetString
        {
            add
            {
                HookHandler._afterSetString += value;
                HookHandler.HookSetString();
            }
            remove => HookHandler._afterSetString -= value;
        }

        public static event Delegates.FindFSMWithPersistentBool_AfterArgs FindFSMWithPersistentBool
        {
            add
            {
                HookHandler._afterFindFSMWithPersistentBool += value;
                HookHandler.HookFindFSMWithPersistentBool();
            }
            remove => HookHandler._afterFindFSMWithPersistentBool -= value;
        }

        public static event Delegates.FindFSMWithPersistentInt_AfterArgs FindFSMWithPersistentInt
        {
            add
            {
                HookHandler._afterFindFSMWithPersistentInt += value;
                HookHandler.HookFindFSMWithPersistentInt();
            }
            remove => HookHandler._afterFindFSMWithPersistentInt -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.FSMUtility.hook_ObtainFsmList ObtainFsmList
        {
            add => On.FSMUtility.ObtainFsmList += value;
            remove => On.FSMUtility.ObtainFsmList -= value;
        }

        public static event On.FSMUtility.hook_ReleaseFsmList ReleaseFsmList
        {
            add => On.FSMUtility.ReleaseFsmList += value;
            remove => On.FSMUtility.ReleaseFsmList -= value;
        }

        public static event On.FSMUtility.hook_ContainsFSM ContainsFSM
        {
            add => On.FSMUtility.ContainsFSM += value;
            remove => On.FSMUtility.ContainsFSM -= value;
        }

        public static event On.FSMUtility.hook_LocateFSM LocateFSM
        {
            add => On.FSMUtility.LocateFSM += value;
            remove => On.FSMUtility.LocateFSM -= value;
        }

        public static event On.FSMUtility.hook_LocateMyFSM LocateMyFSM
        {
            add => On.FSMUtility.LocateMyFSM += value;
            remove => On.FSMUtility.LocateMyFSM -= value;
        }

        public static event On.FSMUtility.hook_GetFSM GetFSM
        {
            add => On.FSMUtility.GetFSM += value;
            remove => On.FSMUtility.GetFSM -= value;
        }

        public static event On.FSMUtility.hook_SendEventToGameObject_GameObject_string_bool
            SendEventToGameObject_GameObject_string_bool
            {
                add => On.FSMUtility.SendEventToGameObject_GameObject_string_bool += value;
                remove => On.FSMUtility.SendEventToGameObject_GameObject_string_bool -= value;
            }

        public static event On.FSMUtility.hook_SendEventToGameObject_GameObject_FsmEvent_bool
            SendEventToGameObject_GameObject_FsmEvent_bool
            {
                add => On.FSMUtility.SendEventToGameObject_GameObject_FsmEvent_bool += value;
                remove => On.FSMUtility.SendEventToGameObject_GameObject_FsmEvent_bool -= value;
            }

        public static event On.FSMUtility.hook_GetSafe GetSafe
        {
            add => On.FSMUtility.GetSafe += value;
            remove => On.FSMUtility.GetSafe -= value;
        }

        public static event On.FSMUtility.hook_GetBool GetBool
        {
            add => On.FSMUtility.GetBool += value;
            remove => On.FSMUtility.GetBool -= value;
        }

        public static event On.FSMUtility.hook_GetInt GetInt
        {
            add => On.FSMUtility.GetInt += value;
            remove => On.FSMUtility.GetInt -= value;
        }

        public static event On.FSMUtility.hook_GetFloat GetFloat
        {
            add => On.FSMUtility.GetFloat += value;
            remove => On.FSMUtility.GetFloat -= value;
        }

        public static event On.FSMUtility.hook_GetString GetString
        {
            add => On.FSMUtility.GetString += value;
            remove => On.FSMUtility.GetString -= value;
        }

        public static event On.FSMUtility.hook_GetVector3 GetVector3
        {
            add => On.FSMUtility.GetVector3 += value;
            remove => On.FSMUtility.GetVector3 -= value;
        }

        public static event On.FSMUtility.hook_SetBool SetBool
        {
            add => On.FSMUtility.SetBool += value;
            remove => On.FSMUtility.SetBool -= value;
        }

        public static event On.FSMUtility.hook_SetInt SetInt
        {
            add => On.FSMUtility.SetInt += value;
            remove => On.FSMUtility.SetInt -= value;
        }

        public static event On.FSMUtility.hook_SetFloat SetFloat
        {
            add => On.FSMUtility.SetFloat += value;
            remove => On.FSMUtility.SetFloat -= value;
        }

        public static event On.FSMUtility.hook_SetString SetString
        {
            add => On.FSMUtility.SetString += value;
            remove => On.FSMUtility.SetString -= value;
        }

        public static event On.FSMUtility.hook_FindFSMWithPersistentBool FindFSMWithPersistentBool
        {
            add => On.FSMUtility.FindFSMWithPersistentBool += value;
            remove => On.FSMUtility.FindFSMWithPersistentBool -= value;
        }

        public static event On.FSMUtility.hook_FindFSMWithPersistentInt FindFSMWithPersistentInt
        {
            add => On.FSMUtility.FindFSMWithPersistentInt += value;
            remove => On.FSMUtility.FindFSMWithPersistentInt -= value;
        }
    }
}