using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Tk2dSpriteSetScale class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTk2dSpriteSetScale
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hook_getSprite()
        {
            if (!HookedList.Contains("_getSprite"))
            {
                HookedList.Add("_getSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "_getSprite"), _getSprite);
            }
        }

        internal static event Delegates._getSprite_BeforeArgs _before_getSprite;
        internal static event Delegates._getSprite_NormalArgs _after_getSprite;

        private static void _getSprite(Action<Tk2dSpriteSetScale> orig, Tk2dSpriteSetScale self)
        {
            Delegates.Params__getSprite @params = new()
            {
                self = self
            };
            _before_getSprite?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_after_getSprite != null) _after_getSprite.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<Tk2dSpriteSetScale> orig, Tk2dSpriteSetScale self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<Tk2dSpriteSetScale> orig, Tk2dSpriteSetScale self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<Tk2dSpriteSetScale> orig, Tk2dSpriteSetScale self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookDoSetSpriteScale()
        {
            if (!HookedList.Contains("DoSetSpriteScale"))
            {
                HookedList.Add("DoSetSpriteScale");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "DoSetSpriteScale"),
                    DoSetSpriteScale);
            }
        }

        internal static event Delegates.DoSetSpriteScale_BeforeArgs _beforeDoSetSpriteScale;
        internal static event Delegates.DoSetSpriteScale_NormalArgs _afterDoSetSpriteScale;

        private static void DoSetSpriteScale(Action<Tk2dSpriteSetScale> orig, Tk2dSpriteSetScale self)
        {
            Delegates.Params_DoSetSpriteScale @params = new()
            {
                self = self
            };
            _beforeDoSetSpriteScale?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoSetSpriteScale != null) _afterDoSetSpriteScale.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void _getSprite_BeforeArgs(Params__getSprite args);

        public delegate void _getSprite_NormalArgs(Params__getSprite args);

        public delegate void DoSetSpriteScale_BeforeArgs(Params_DoSetSpriteScale args);

        public delegate void DoSetSpriteScale_NormalArgs(Params_DoSetSpriteScale args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params__getSprite
        {
            public Tk2dSpriteSetScale self;
        }

        public sealed class Params_Reset
        {
            public Tk2dSpriteSetScale self;
        }

        public sealed class Params_OnEnter
        {
            public Tk2dSpriteSetScale self;
        }

        public sealed class Params_OnUpdate
        {
            public Tk2dSpriteSetScale self;
        }

        public sealed class Params_DoSetSpriteScale
        {
            public Tk2dSpriteSetScale self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates._getSprite_BeforeArgs _getSprite
        {
            add
            {
                HookHandler._before_getSprite += value;
                HookHandler.Hook_getSprite();
            }
            remove => HookHandler._before_getSprite -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoSetSpriteScale_BeforeArgs DoSetSpriteScale
        {
            add
            {
                HookHandler._beforeDoSetSpriteScale += value;
                HookHandler.HookDoSetSpriteScale();
            }
            remove => HookHandler._beforeDoSetSpriteScale -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates._getSprite_NormalArgs _getSprite
        {
            add
            {
                HookHandler._after_getSprite += value;
                HookHandler.Hook_getSprite();
            }
            remove => HookHandler._after_getSprite -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoSetSpriteScale_NormalArgs DoSetSpriteScale
        {
            add
            {
                HookHandler._afterDoSetSpriteScale += value;
                HookHandler.HookDoSetSpriteScale();
            }
            remove => HookHandler._afterDoSetSpriteScale -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates._getSprite_NormalArgs _getSprite
        {
            add => HookEndpointManager.Add<Delegates._getSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "_getSprite"), value);
            remove => HookEndpointManager.Remove<Delegates._getSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "_getSprite"), value);
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "OnEnter"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "OnUpdate"), value);
        }

        public static event Delegates.DoSetSpriteScale_NormalArgs DoSetSpriteScale
        {
            add => HookEndpointManager.Add<Delegates.DoSetSpriteScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "DoSetSpriteScale"), value);
            remove => HookEndpointManager.Remove<Delegates.DoSetSpriteScale_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dSpriteSetScale), "DoSetSpriteScale"), value);
        }
    }
}