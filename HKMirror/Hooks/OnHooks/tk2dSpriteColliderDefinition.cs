using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteColliderDefinition class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteColliderDefinition
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Radius()
        {
            if (!HookedList.Contains("get_Radius"))
            {
                HookedList.Add("get_Radius");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteColliderDefinition), "get_Radius"),
                    get_Radius);
            }
        }

        internal static event Delegates.get_Radius_BeforeArgs _beforeget_Radius;
        internal static event Delegates.get_Radius_NormalArgs _afterget_Radius;

        private static float get_Radius(Func<tk2dSpriteColliderDefinition, float> orig,
            tk2dSpriteColliderDefinition self)
        {
            Delegates.Params_get_Radius @params = new()
            {
                self = self
            };
            _beforeget_Radius?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Radius != null) retVal = _afterget_Radius.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Size()
        {
            if (!HookedList.Contains("get_Size"))
            {
                HookedList.Add("get_Size");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteColliderDefinition), "get_Size"), get_Size);
            }
        }

        internal static event Delegates.get_Size_BeforeArgs _beforeget_Size;
        internal static event Delegates.get_Size_NormalArgs _afterget_Size;

        private static Vector3 get_Size(Func<tk2dSpriteColliderDefinition, Vector3> orig,
            tk2dSpriteColliderDefinition self)
        {
            Delegates.Params_get_Size @params = new()
            {
                self = self
            };
            _beforeget_Size?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Size != null) retVal = _afterget_Size.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Radius_BeforeArgs(Params_get_Radius args);

        public delegate float get_Radius_NormalArgs(Params_get_Radius args);

        public delegate void get_Size_BeforeArgs(Params_get_Size args);

        public delegate Vector3 get_Size_NormalArgs(Params_get_Size args);

        public sealed class Params_get_Radius
        {
            public tk2dSpriteColliderDefinition self;
        }

        public sealed class Params_get_Size
        {
            public tk2dSpriteColliderDefinition self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Radius_BeforeArgs get_Radius
        {
            add
            {
                HookHandler._beforeget_Radius += value;
                HookHandler.Hookget_Radius();
            }
            remove => HookHandler._beforeget_Radius -= value;
        }

        public static event Delegates.get_Size_BeforeArgs get_Size
        {
            add
            {
                HookHandler._beforeget_Size += value;
                HookHandler.Hookget_Size();
            }
            remove => HookHandler._beforeget_Size -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Radius_NormalArgs get_Radius
        {
            add
            {
                HookHandler._afterget_Radius += value;
                HookHandler.Hookget_Radius();
            }
            remove => HookHandler._afterget_Radius -= value;
        }

        public static event Delegates.get_Size_NormalArgs get_Size
        {
            add
            {
                HookHandler._afterget_Size += value;
                HookHandler.Hookget_Size();
            }
            remove => HookHandler._afterget_Size -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Radius_NormalArgs get_Radius
        {
            add => HookEndpointManager.Add<Delegates.get_Radius_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteColliderDefinition), "get_Radius"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Radius_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteColliderDefinition), "get_Radius"), value);
        }

        public static event Delegates.get_Size_NormalArgs get_Size
        {
            add => HookEndpointManager.Add<Delegates.get_Size_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteColliderDefinition), "get_Size"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Size_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteColliderDefinition), "get_Size"), value);
        }
    }
}