namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InvulnerablePulse class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInvulnerablePulse
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.InvulnerablePulse.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.InvulnerablePulse.orig_Start orig, InvulnerablePulse self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.InvulnerablePulse.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.InvulnerablePulse.orig_Update orig, InvulnerablePulse self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookstartInvulnerablePulse()
        {
            if (!HookedList.Contains("startInvulnerablePulse"))
            {
                HookedList.Add("startInvulnerablePulse");
                On.InvulnerablePulse.startInvulnerablePulse += startInvulnerablePulse;
            }
        }

        internal static event Delegates.startInvulnerablePulse_BeforeArgs _beforestartInvulnerablePulse;
        internal static event Delegates.startInvulnerablePulse_NormalArgs _afterstartInvulnerablePulse;

        private static void startInvulnerablePulse(On.InvulnerablePulse.orig_startInvulnerablePulse orig,
            InvulnerablePulse self)
        {
            Delegates.Params_startInvulnerablePulse @params = new()
            {
                self = self
            };
            _beforestartInvulnerablePulse?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterstartInvulnerablePulse != null) _afterstartInvulnerablePulse.Invoke(@params);
        }

        internal static void HookstopInvulnerablePulse()
        {
            if (!HookedList.Contains("stopInvulnerablePulse"))
            {
                HookedList.Add("stopInvulnerablePulse");
                On.InvulnerablePulse.stopInvulnerablePulse += stopInvulnerablePulse;
            }
        }

        internal static event Delegates.stopInvulnerablePulse_BeforeArgs _beforestopInvulnerablePulse;
        internal static event Delegates.stopInvulnerablePulse_NormalArgs _afterstopInvulnerablePulse;

        private static void stopInvulnerablePulse(On.InvulnerablePulse.orig_stopInvulnerablePulse orig,
            InvulnerablePulse self)
        {
            Delegates.Params_stopInvulnerablePulse @params = new()
            {
                self = self
            };
            _beforestopInvulnerablePulse?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterstopInvulnerablePulse != null) _afterstopInvulnerablePulse.Invoke(@params);
        }

        internal static void HookupdateSpriteColor()
        {
            if (!HookedList.Contains("updateSpriteColor"))
            {
                HookedList.Add("updateSpriteColor");
                On.InvulnerablePulse.updateSpriteColor += updateSpriteColor;
            }
        }

        internal static event Delegates.updateSpriteColor_BeforeArgs _beforeupdateSpriteColor;
        internal static event Delegates.updateSpriteColor_NormalArgs _afterupdateSpriteColor;

        private static void updateSpriteColor(On.InvulnerablePulse.orig_updateSpriteColor orig, InvulnerablePulse self,
            Color color)
        {
            Delegates.Params_updateSpriteColor @params = new()
            {
                self = self, color = color
            };
            _beforeupdateSpriteColor?.Invoke(@params);
            self = @params.self;
            color = @params.color;
            orig(self, color);
            if (_afterupdateSpriteColor != null) _afterupdateSpriteColor.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void startInvulnerablePulse_BeforeArgs(Params_startInvulnerablePulse args);

        public delegate void startInvulnerablePulse_NormalArgs(Params_startInvulnerablePulse args);

        public delegate void stopInvulnerablePulse_BeforeArgs(Params_stopInvulnerablePulse args);

        public delegate void stopInvulnerablePulse_NormalArgs(Params_stopInvulnerablePulse args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void updateSpriteColor_BeforeArgs(Params_updateSpriteColor args);

        public delegate void updateSpriteColor_NormalArgs(Params_updateSpriteColor args);

        public sealed class Params_Start
        {
            public InvulnerablePulse self;
        }

        public sealed class Params_Update
        {
            public InvulnerablePulse self;
        }

        public sealed class Params_startInvulnerablePulse
        {
            public InvulnerablePulse self;
        }

        public sealed class Params_stopInvulnerablePulse
        {
            public InvulnerablePulse self;
        }

        public sealed class Params_updateSpriteColor
        {
            public Color color;
            public InvulnerablePulse self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.startInvulnerablePulse_BeforeArgs startInvulnerablePulse
        {
            add
            {
                HookHandler._beforestartInvulnerablePulse += value;
                HookHandler.HookstartInvulnerablePulse();
            }
            remove => HookHandler._beforestartInvulnerablePulse -= value;
        }

        public static event Delegates.stopInvulnerablePulse_BeforeArgs stopInvulnerablePulse
        {
            add
            {
                HookHandler._beforestopInvulnerablePulse += value;
                HookHandler.HookstopInvulnerablePulse();
            }
            remove => HookHandler._beforestopInvulnerablePulse -= value;
        }

        public static event Delegates.updateSpriteColor_BeforeArgs updateSpriteColor
        {
            add
            {
                HookHandler._beforeupdateSpriteColor += value;
                HookHandler.HookupdateSpriteColor();
            }
            remove => HookHandler._beforeupdateSpriteColor -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.startInvulnerablePulse_NormalArgs startInvulnerablePulse
        {
            add
            {
                HookHandler._afterstartInvulnerablePulse += value;
                HookHandler.HookstartInvulnerablePulse();
            }
            remove => HookHandler._afterstartInvulnerablePulse -= value;
        }

        public static event Delegates.stopInvulnerablePulse_NormalArgs stopInvulnerablePulse
        {
            add
            {
                HookHandler._afterstopInvulnerablePulse += value;
                HookHandler.HookstopInvulnerablePulse();
            }
            remove => HookHandler._afterstopInvulnerablePulse -= value;
        }

        public static event Delegates.updateSpriteColor_NormalArgs updateSpriteColor
        {
            add
            {
                HookHandler._afterupdateSpriteColor += value;
                HookHandler.HookupdateSpriteColor();
            }
            remove => HookHandler._afterupdateSpriteColor -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.InvulnerablePulse.hook_Start Start
        {
            add => On.InvulnerablePulse.Start += value;
            remove => On.InvulnerablePulse.Start -= value;
        }

        public static event On.InvulnerablePulse.hook_Update Update
        {
            add => On.InvulnerablePulse.Update += value;
            remove => On.InvulnerablePulse.Update -= value;
        }

        public static event On.InvulnerablePulse.hook_startInvulnerablePulse startInvulnerablePulse
        {
            add => On.InvulnerablePulse.startInvulnerablePulse += value;
            remove => On.InvulnerablePulse.startInvulnerablePulse -= value;
        }

        public static event On.InvulnerablePulse.hook_stopInvulnerablePulse stopInvulnerablePulse
        {
            add => On.InvulnerablePulse.stopInvulnerablePulse += value;
            remove => On.InvulnerablePulse.stopInvulnerablePulse -= value;
        }

        public static event On.InvulnerablePulse.hook_updateSpriteColor updateSpriteColor
        {
            add => On.InvulnerablePulse.updateSpriteColor += value;
            remove => On.InvulnerablePulse.updateSpriteColor -= value;
        }
    }
}