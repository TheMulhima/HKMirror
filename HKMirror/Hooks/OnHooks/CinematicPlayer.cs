using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for CinematicPlayer class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCinematicPlayer
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.CinematicPlayer.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.CinematicPlayer.orig_Awake orig, CinematicPlayer self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.CinematicPlayer.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;

        private static void OnDestroy(On.CinematicPlayer.orig_OnDestroy orig, CinematicPlayer self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            if (_beforeOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDestroy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null)
            {
                foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
                {
                    try
                    {
                        _afterOnDestroy.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CinematicPlayer.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.CinematicPlayer.orig_Start orig, CinematicPlayer self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.CinematicPlayer.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.CinematicPlayer.orig_Update orig, CinematicPlayer self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate10()
        {
            if (!HookedList.Contains("Update10"))
            {
                HookedList.Add("Update10");
                On.CinematicPlayer.Update10 += Update10;
            }
        }

        internal static event Delegates.Update10_BeforeArgs _beforeUpdate10;
        internal static event Delegates.Update10_AfterArgs _afterUpdate10;

        private static void Update10(On.CinematicPlayer.orig_Update10 orig, CinematicPlayer self)
        {
            Delegates.Params_Update10 @params = new()
            {
                self = self
            };
            if (_beforeUpdate10 != null)
            {
                foreach (Delegates.Update10_BeforeArgs toInvoke in _beforeUpdate10.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate10?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate10 != null)
            {
                foreach (Delegates.Update10_AfterArgs toInvoke in _afterUpdate10.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate10.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSkipVideo()
        {
            if (!HookedList.Contains("SkipVideo"))
            {
                HookedList.Add("SkipVideo");
                On.CinematicPlayer.SkipVideo += SkipVideo;
            }
        }

        internal static event Delegates.SkipVideo_BeforeArgs _beforeSkipVideo;

        private static System.Collections.IEnumerator SkipVideo(On.CinematicPlayer.orig_SkipVideo orig,
            CinematicPlayer self)
        {
            Delegates.Params_SkipVideo @params = new()
            {
                self = self
            };
            if (_beforeSkipVideo != null)
            {
                foreach (Delegates.SkipVideo_BeforeArgs toInvoke in _beforeSkipVideo.GetInvocationList())
                {
                    try
                    {
                        _beforeSkipVideo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookTriggerStartVideo()
        {
            if (!HookedList.Contains("TriggerStartVideo"))
            {
                HookedList.Add("TriggerStartVideo");
                On.CinematicPlayer.TriggerStartVideo += TriggerStartVideo;
            }
        }

        internal static event Delegates.TriggerStartVideo_BeforeArgs _beforeTriggerStartVideo;
        internal static event Delegates.TriggerStartVideo_AfterArgs _afterTriggerStartVideo;

        private static void TriggerStartVideo(On.CinematicPlayer.orig_TriggerStartVideo orig, CinematicPlayer self)
        {
            Delegates.Params_TriggerStartVideo @params = new()
            {
                self = self
            };
            if (_beforeTriggerStartVideo != null)
            {
                foreach (Delegates.TriggerStartVideo_BeforeArgs toInvoke in
                         _beforeTriggerStartVideo.GetInvocationList())
                {
                    try
                    {
                        _beforeTriggerStartVideo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterTriggerStartVideo != null)
            {
                foreach (Delegates.TriggerStartVideo_AfterArgs toInvoke in _afterTriggerStartVideo.GetInvocationList())
                {
                    try
                    {
                        _afterTriggerStartVideo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookTriggerStopVideo()
        {
            if (!HookedList.Contains("TriggerStopVideo"))
            {
                HookedList.Add("TriggerStopVideo");
                On.CinematicPlayer.TriggerStopVideo += TriggerStopVideo;
            }
        }

        internal static event Delegates.TriggerStopVideo_BeforeArgs _beforeTriggerStopVideo;
        internal static event Delegates.TriggerStopVideo_AfterArgs _afterTriggerStopVideo;

        private static void TriggerStopVideo(On.CinematicPlayer.orig_TriggerStopVideo orig, CinematicPlayer self)
        {
            Delegates.Params_TriggerStopVideo @params = new()
            {
                self = self
            };
            if (_beforeTriggerStopVideo != null)
            {
                foreach (Delegates.TriggerStopVideo_BeforeArgs toInvoke in _beforeTriggerStopVideo.GetInvocationList())
                {
                    try
                    {
                        _beforeTriggerStopVideo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterTriggerStopVideo != null)
            {
                foreach (Delegates.TriggerStopVideo_AfterArgs toInvoke in _afterTriggerStopVideo.GetInvocationList())
                {
                    try
                    {
                        _afterTriggerStopVideo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUnlockSkip()
        {
            if (!HookedList.Contains("UnlockSkip"))
            {
                HookedList.Add("UnlockSkip");
                On.CinematicPlayer.UnlockSkip += UnlockSkip;
            }
        }

        internal static event Delegates.UnlockSkip_BeforeArgs _beforeUnlockSkip;
        internal static event Delegates.UnlockSkip_AfterArgs _afterUnlockSkip;

        private static void UnlockSkip(On.CinematicPlayer.orig_UnlockSkip orig, CinematicPlayer self)
        {
            Delegates.Params_UnlockSkip @params = new()
            {
                self = self
            };
            if (_beforeUnlockSkip != null)
            {
                foreach (Delegates.UnlockSkip_BeforeArgs toInvoke in _beforeUnlockSkip.GetInvocationList())
                {
                    try
                    {
                        _beforeUnlockSkip?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUnlockSkip != null)
            {
                foreach (Delegates.UnlockSkip_AfterArgs toInvoke in _afterUnlockSkip.GetInvocationList())
                {
                    try
                    {
                        _afterUnlockSkip.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStartVideo()
        {
            if (!HookedList.Contains("StartVideo"))
            {
                HookedList.Add("StartVideo");
                On.CinematicPlayer.StartVideo += StartVideo;
            }
        }

        internal static event Delegates.StartVideo_BeforeArgs _beforeStartVideo;

        private static System.Collections.IEnumerator StartVideo(On.CinematicPlayer.orig_StartVideo orig,
            CinematicPlayer self)
        {
            Delegates.Params_StartVideo @params = new()
            {
                self = self
            };
            if (_beforeStartVideo != null)
            {
                foreach (Delegates.StartVideo_BeforeArgs toInvoke in _beforeStartVideo.GetInvocationList())
                {
                    try
                    {
                        _beforeStartVideo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFinishVideo()
        {
            if (!HookedList.Contains("FinishVideo"))
            {
                HookedList.Add("FinishVideo");
                On.CinematicPlayer.FinishVideo += FinishVideo;
            }
        }

        internal static event Delegates.FinishVideo_BeforeArgs _beforeFinishVideo;
        internal static event Delegates.FinishVideo_AfterArgs _afterFinishVideo;

        private static void FinishVideo(On.CinematicPlayer.orig_FinishVideo orig, CinematicPlayer self)
        {
            Delegates.Params_FinishVideo @params = new()
            {
                self = self
            };
            if (_beforeFinishVideo != null)
            {
                foreach (Delegates.FinishVideo_BeforeArgs toInvoke in _beforeFinishVideo.GetInvocationList())
                {
                    try
                    {
                        _beforeFinishVideo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFinishVideo != null)
            {
                foreach (Delegates.FinishVideo_AfterArgs toInvoke in _afterFinishVideo.GetInvocationList())
                {
                    try
                    {
                        _afterFinishVideo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFinishInGameVideo()
        {
            if (!HookedList.Contains("FinishInGameVideo"))
            {
                HookedList.Add("FinishInGameVideo");
                On.CinematicPlayer.FinishInGameVideo += FinishInGameVideo;
            }
        }

        internal static event Delegates.FinishInGameVideo_BeforeArgs _beforeFinishInGameVideo;
        internal static event Delegates.FinishInGameVideo_AfterArgs _afterFinishInGameVideo;

        private static void FinishInGameVideo(On.CinematicPlayer.orig_FinishInGameVideo orig, CinematicPlayer self)
        {
            Delegates.Params_FinishInGameVideo @params = new()
            {
                self = self
            };
            if (_beforeFinishInGameVideo != null)
            {
                foreach (Delegates.FinishInGameVideo_BeforeArgs toInvoke in
                         _beforeFinishInGameVideo.GetInvocationList())
                {
                    try
                    {
                        _beforeFinishInGameVideo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterFinishInGameVideo != null)
            {
                foreach (Delegates.FinishInGameVideo_AfterArgs toInvoke in _afterFinishInGameVideo.GetInvocationList())
                {
                    try
                    {
                        _afterFinishInGameVideo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookWaitForStagFadeOut()
        {
            if (!HookedList.Contains("WaitForStagFadeOut"))
            {
                HookedList.Add("WaitForStagFadeOut");
                On.CinematicPlayer.WaitForStagFadeOut += WaitForStagFadeOut;
            }
        }

        internal static event Delegates.WaitForStagFadeOut_BeforeArgs _beforeWaitForStagFadeOut;

        private static System.Collections.IEnumerator WaitForStagFadeOut(
            On.CinematicPlayer.orig_WaitForStagFadeOut orig, CinematicPlayer self)
        {
            Delegates.Params_WaitForStagFadeOut @params = new()
            {
                self = self
            };
            if (_beforeWaitForStagFadeOut != null)
            {
                foreach (Delegates.WaitForStagFadeOut_BeforeArgs toInvoke in
                         _beforeWaitForStagFadeOut.GetInvocationList())
                {
                    try
                    {
                        _beforeWaitForStagFadeOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public CinematicPlayer self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_OnDestroy
        {
            public CinematicPlayer self;
        }

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);

        public delegate void OnDestroy_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_Start
        {
            public CinematicPlayer self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_Update
        {
            public CinematicPlayer self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_Update10
        {
            public CinematicPlayer self;
        }

        public delegate void Update10_BeforeArgs(Params_Update10 args);

        public delegate void Update10_AfterArgs(Params_Update10 args);

        public delegate void Update10_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_SkipVideo
        {
            public CinematicPlayer self;
        }

        public delegate void SkipVideo_BeforeArgs(Params_SkipVideo args);

        public delegate System.Collections.IEnumerator SkipVideo_AfterArgs(Params_SkipVideo args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator SkipVideo_WithArgs(
            Func<CinematicPlayer, System.Collections.IEnumerator> orig, CinematicPlayer self);

        public sealed class Params_TriggerStartVideo
        {
            public CinematicPlayer self;
        }

        public delegate void TriggerStartVideo_BeforeArgs(Params_TriggerStartVideo args);

        public delegate void TriggerStartVideo_AfterArgs(Params_TriggerStartVideo args);

        public delegate void TriggerStartVideo_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_TriggerStopVideo
        {
            public CinematicPlayer self;
        }

        public delegate void TriggerStopVideo_BeforeArgs(Params_TriggerStopVideo args);

        public delegate void TriggerStopVideo_AfterArgs(Params_TriggerStopVideo args);

        public delegate void TriggerStopVideo_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_UnlockSkip
        {
            public CinematicPlayer self;
        }

        public delegate void UnlockSkip_BeforeArgs(Params_UnlockSkip args);

        public delegate void UnlockSkip_AfterArgs(Params_UnlockSkip args);

        public delegate void UnlockSkip_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_StartVideo
        {
            public CinematicPlayer self;
        }

        public delegate void StartVideo_BeforeArgs(Params_StartVideo args);

        public delegate System.Collections.IEnumerator StartVideo_AfterArgs(Params_StartVideo args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator StartVideo_WithArgs(
            Func<CinematicPlayer, System.Collections.IEnumerator> orig, CinematicPlayer self);

        public sealed class Params_FinishVideo
        {
            public CinematicPlayer self;
        }

        public delegate void FinishVideo_BeforeArgs(Params_FinishVideo args);

        public delegate void FinishVideo_AfterArgs(Params_FinishVideo args);

        public delegate void FinishVideo_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_FinishInGameVideo
        {
            public CinematicPlayer self;
        }

        public delegate void FinishInGameVideo_BeforeArgs(Params_FinishInGameVideo args);

        public delegate void FinishInGameVideo_AfterArgs(Params_FinishInGameVideo args);

        public delegate void FinishInGameVideo_WithArgs(Action<CinematicPlayer> orig, CinematicPlayer self);

        public sealed class Params_WaitForStagFadeOut
        {
            public CinematicPlayer self;
        }

        public delegate void WaitForStagFadeOut_BeforeArgs(Params_WaitForStagFadeOut args);

        public delegate System.Collections.IEnumerator WaitForStagFadeOut_AfterArgs(Params_WaitForStagFadeOut args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator WaitForStagFadeOut_WithArgs(
            Func<CinematicPlayer, System.Collections.IEnumerator> orig, CinematicPlayer self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Update10_BeforeArgs Update10
        {
            add
            {
                HookHandler._beforeUpdate10 += value;
                HookHandler.HookUpdate10();
            }
            remove => HookHandler._beforeUpdate10 -= value;
        }

        public static event Delegates.SkipVideo_BeforeArgs SkipVideo
        {
            add
            {
                HookHandler._beforeSkipVideo += value;
                HookHandler.HookSkipVideo();
            }
            remove => HookHandler._beforeSkipVideo -= value;
        }

        public static event Delegates.TriggerStartVideo_BeforeArgs TriggerStartVideo
        {
            add
            {
                HookHandler._beforeTriggerStartVideo += value;
                HookHandler.HookTriggerStartVideo();
            }
            remove => HookHandler._beforeTriggerStartVideo -= value;
        }

        public static event Delegates.TriggerStopVideo_BeforeArgs TriggerStopVideo
        {
            add
            {
                HookHandler._beforeTriggerStopVideo += value;
                HookHandler.HookTriggerStopVideo();
            }
            remove => HookHandler._beforeTriggerStopVideo -= value;
        }

        public static event Delegates.UnlockSkip_BeforeArgs UnlockSkip
        {
            add
            {
                HookHandler._beforeUnlockSkip += value;
                HookHandler.HookUnlockSkip();
            }
            remove => HookHandler._beforeUnlockSkip -= value;
        }

        public static event Delegates.StartVideo_BeforeArgs StartVideo
        {
            add
            {
                HookHandler._beforeStartVideo += value;
                HookHandler.HookStartVideo();
            }
            remove => HookHandler._beforeStartVideo -= value;
        }

        public static event Delegates.FinishVideo_BeforeArgs FinishVideo
        {
            add
            {
                HookHandler._beforeFinishVideo += value;
                HookHandler.HookFinishVideo();
            }
            remove => HookHandler._beforeFinishVideo -= value;
        }

        public static event Delegates.FinishInGameVideo_BeforeArgs FinishInGameVideo
        {
            add
            {
                HookHandler._beforeFinishInGameVideo += value;
                HookHandler.HookFinishInGameVideo();
            }
            remove => HookHandler._beforeFinishInGameVideo -= value;
        }

        public static event Delegates.WaitForStagFadeOut_BeforeArgs WaitForStagFadeOut
        {
            add
            {
                HookHandler._beforeWaitForStagFadeOut += value;
                HookHandler.HookWaitForStagFadeOut();
            }
            remove => HookHandler._beforeWaitForStagFadeOut -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_AfterArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Update10_AfterArgs Update10
        {
            add
            {
                HookHandler._afterUpdate10 += value;
                HookHandler.HookUpdate10();
            }
            remove => HookHandler._afterUpdate10 -= value;
        }

        public static event Delegates.TriggerStartVideo_AfterArgs TriggerStartVideo
        {
            add
            {
                HookHandler._afterTriggerStartVideo += value;
                HookHandler.HookTriggerStartVideo();
            }
            remove => HookHandler._afterTriggerStartVideo -= value;
        }

        public static event Delegates.TriggerStopVideo_AfterArgs TriggerStopVideo
        {
            add
            {
                HookHandler._afterTriggerStopVideo += value;
                HookHandler.HookTriggerStopVideo();
            }
            remove => HookHandler._afterTriggerStopVideo -= value;
        }

        public static event Delegates.UnlockSkip_AfterArgs UnlockSkip
        {
            add
            {
                HookHandler._afterUnlockSkip += value;
                HookHandler.HookUnlockSkip();
            }
            remove => HookHandler._afterUnlockSkip -= value;
        }

        public static event Delegates.FinishVideo_AfterArgs FinishVideo
        {
            add
            {
                HookHandler._afterFinishVideo += value;
                HookHandler.HookFinishVideo();
            }
            remove => HookHandler._afterFinishVideo -= value;
        }

        public static event Delegates.FinishInGameVideo_AfterArgs FinishInGameVideo
        {
            add
            {
                HookHandler._afterFinishInGameVideo += value;
                HookHandler.HookFinishInGameVideo();
            }
            remove => HookHandler._afterFinishInGameVideo -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CinematicPlayer.hook_Awake Awake
        {
            add => On.CinematicPlayer.Awake += value;
            remove => On.CinematicPlayer.Awake -= value;
        }

        public static event On.CinematicPlayer.hook_OnDestroy OnDestroy
        {
            add => On.CinematicPlayer.OnDestroy += value;
            remove => On.CinematicPlayer.OnDestroy -= value;
        }

        public static event On.CinematicPlayer.hook_Start Start
        {
            add => On.CinematicPlayer.Start += value;
            remove => On.CinematicPlayer.Start -= value;
        }

        public static event On.CinematicPlayer.hook_Update Update
        {
            add => On.CinematicPlayer.Update += value;
            remove => On.CinematicPlayer.Update -= value;
        }

        public static event On.CinematicPlayer.hook_Update10 Update10
        {
            add => On.CinematicPlayer.Update10 += value;
            remove => On.CinematicPlayer.Update10 -= value;
        }

        public static event On.CinematicPlayer.hook_SkipVideo SkipVideo
        {
            add => On.CinematicPlayer.SkipVideo += value;
            remove => On.CinematicPlayer.SkipVideo -= value;
        }

        public static event On.CinematicPlayer.hook_TriggerStartVideo TriggerStartVideo
        {
            add => On.CinematicPlayer.TriggerStartVideo += value;
            remove => On.CinematicPlayer.TriggerStartVideo -= value;
        }

        public static event On.CinematicPlayer.hook_TriggerStopVideo TriggerStopVideo
        {
            add => On.CinematicPlayer.TriggerStopVideo += value;
            remove => On.CinematicPlayer.TriggerStopVideo -= value;
        }

        public static event On.CinematicPlayer.hook_UnlockSkip UnlockSkip
        {
            add => On.CinematicPlayer.UnlockSkip += value;
            remove => On.CinematicPlayer.UnlockSkip -= value;
        }

        public static event On.CinematicPlayer.hook_StartVideo StartVideo
        {
            add => On.CinematicPlayer.StartVideo += value;
            remove => On.CinematicPlayer.StartVideo -= value;
        }

        public static event On.CinematicPlayer.hook_FinishVideo FinishVideo
        {
            add => On.CinematicPlayer.FinishVideo += value;
            remove => On.CinematicPlayer.FinishVideo -= value;
        }

        public static event On.CinematicPlayer.hook_FinishInGameVideo FinishInGameVideo
        {
            add => On.CinematicPlayer.FinishInGameVideo += value;
            remove => On.CinematicPlayer.FinishInGameVideo -= value;
        }

        public static event On.CinematicPlayer.hook_WaitForStagFadeOut WaitForStagFadeOut
        {
            add => On.CinematicPlayer.WaitForStagFadeOut += value;
            remove => On.CinematicPlayer.WaitForStagFadeOut -= value;
        }
    }
}