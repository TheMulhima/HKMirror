using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SceneColorManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSceneColorManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_markerActive()
        {
            if (!HookedList.Contains("get_markerActive"))
            {
                HookedList.Add("get_markerActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "get_markerActive"),
                    get_markerActive);
            }
        }

        internal static event Delegates.get_markerActive_BeforeArgs _beforeget_markerActive;
        internal static event Delegates.get_markerActive_AfterArgs _afterget_markerActive;

        private static bool get_markerActive(Func<SceneColorManager, bool> orig, SceneColorManager self)
        {
            Delegates.Params_get_markerActive @params = new()
            {
                self = self
            };
            if (_beforeget_markerActive != null)
                foreach (Delegates.get_markerActive_BeforeArgs toInvoke in _beforeget_markerActive.GetInvocationList())
                    try
                    {
                        _beforeget_markerActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_markerActive != null)
                foreach (Delegates.get_markerActive_AfterArgs toInvoke in _afterget_markerActive.GetInvocationList())
                    try
                    {
                        retVal = _afterget_markerActive.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_markerActive()
        {
            if (!HookedList.Contains("set_markerActive"))
            {
                HookedList.Add("set_markerActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "set_markerActive"),
                    set_markerActive);
            }
        }

        internal static event Delegates.set_markerActive_BeforeArgs _beforeset_markerActive;
        internal static event Delegates.set_markerActive_AfterArgs _afterset_markerActive;

        private static void set_markerActive(Action<SceneColorManager, bool> orig, SceneColorManager self, bool value)
        {
            Delegates.Params_set_markerActive @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_markerActive != null)
                foreach (Delegates.set_markerActive_BeforeArgs toInvoke in _beforeset_markerActive.GetInvocationList())
                    try
                    {
                        _beforeset_markerActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_markerActive != null)
                foreach (Delegates.set_markerActive_AfterArgs toInvoke in _afterset_markerActive.GetInvocationList())
                    try
                    {
                        _afterset_markerActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetFactor()
        {
            if (!HookedList.Contains("SetFactor"))
            {
                HookedList.Add("SetFactor");
                On.SceneColorManager.SetFactor += SetFactor;
            }
        }

        internal static event Delegates.SetFactor_BeforeArgs _beforeSetFactor;
        internal static event Delegates.SetFactor_AfterArgs _afterSetFactor;

        private static void SetFactor(On.SceneColorManager.orig_SetFactor orig, SceneColorManager self, float factor)
        {
            Delegates.Params_SetFactor @params = new()
            {
                self = self, factor = factor
            };
            if (_beforeSetFactor != null)
                foreach (Delegates.SetFactor_BeforeArgs toInvoke in _beforeSetFactor.GetInvocationList())
                    try
                    {
                        _beforeSetFactor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            factor = @params.factor;
            orig(self, factor);
            if (_afterSetFactor != null)
                foreach (Delegates.SetFactor_AfterArgs toInvoke in _afterSetFactor.GetInvocationList())
                    try
                    {
                        _afterSetFactor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSaturationA()
        {
            if (!HookedList.Contains("SetSaturationA"))
            {
                HookedList.Add("SetSaturationA");
                On.SceneColorManager.SetSaturationA += SetSaturationA;
            }
        }

        internal static event Delegates.SetSaturationA_BeforeArgs _beforeSetSaturationA;
        internal static event Delegates.SetSaturationA_AfterArgs _afterSetSaturationA;

        private static void SetSaturationA(On.SceneColorManager.orig_SetSaturationA orig, SceneColorManager self,
            float saturationA)
        {
            Delegates.Params_SetSaturationA @params = new()
            {
                self = self, saturationA = saturationA
            };
            if (_beforeSetSaturationA != null)
                foreach (Delegates.SetSaturationA_BeforeArgs toInvoke in _beforeSetSaturationA.GetInvocationList())
                    try
                    {
                        _beforeSetSaturationA?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saturationA = @params.saturationA;
            orig(self, saturationA);
            if (_afterSetSaturationA != null)
                foreach (Delegates.SetSaturationA_AfterArgs toInvoke in _afterSetSaturationA.GetInvocationList())
                    try
                    {
                        _afterSetSaturationA.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetSaturationB()
        {
            if (!HookedList.Contains("SetSaturationB"))
            {
                HookedList.Add("SetSaturationB");
                On.SceneColorManager.SetSaturationB += SetSaturationB;
            }
        }

        internal static event Delegates.SetSaturationB_BeforeArgs _beforeSetSaturationB;
        internal static event Delegates.SetSaturationB_AfterArgs _afterSetSaturationB;

        private static void SetSaturationB(On.SceneColorManager.orig_SetSaturationB orig, SceneColorManager self,
            float saturationB)
        {
            Delegates.Params_SetSaturationB @params = new()
            {
                self = self, saturationB = saturationB
            };
            if (_beforeSetSaturationB != null)
                foreach (Delegates.SetSaturationB_BeforeArgs toInvoke in _beforeSetSaturationB.GetInvocationList())
                    try
                    {
                        _beforeSetSaturationB?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            saturationB = @params.saturationB;
            orig(self, saturationB);
            if (_afterSetSaturationB != null)
                foreach (Delegates.SetSaturationB_AfterArgs toInvoke in _afterSetSaturationB.GetInvocationList())
                    try
                    {
                        _afterSetSaturationB.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_startBufferActive()
        {
            if (!HookedList.Contains("get_startBufferActive"))
            {
                HookedList.Add("get_startBufferActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "get_startBufferActive"),
                    get_startBufferActive);
            }
        }

        internal static event Delegates.get_startBufferActive_BeforeArgs _beforeget_startBufferActive;
        internal static event Delegates.get_startBufferActive_AfterArgs _afterget_startBufferActive;

        private static bool get_startBufferActive(Func<SceneColorManager, bool> orig, SceneColorManager self)
        {
            Delegates.Params_get_startBufferActive @params = new()
            {
                self = self
            };
            if (_beforeget_startBufferActive != null)
                foreach (Delegates.get_startBufferActive_BeforeArgs toInvoke in _beforeget_startBufferActive
                             .GetInvocationList())
                    try
                    {
                        _beforeget_startBufferActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_startBufferActive != null)
                foreach (Delegates.get_startBufferActive_AfterArgs toInvoke in _afterget_startBufferActive
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_startBufferActive.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_startBufferActive()
        {
            if (!HookedList.Contains("set_startBufferActive"))
            {
                HookedList.Add("set_startBufferActive");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "set_startBufferActive"),
                    set_startBufferActive);
            }
        }

        internal static event Delegates.set_startBufferActive_BeforeArgs _beforeset_startBufferActive;
        internal static event Delegates.set_startBufferActive_AfterArgs _afterset_startBufferActive;

        private static void set_startBufferActive(Action<SceneColorManager, bool> orig, SceneColorManager self,
            bool value)
        {
            Delegates.Params_set_startBufferActive @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_startBufferActive != null)
                foreach (Delegates.set_startBufferActive_BeforeArgs toInvoke in _beforeset_startBufferActive
                             .GetInvocationList())
                    try
                    {
                        _beforeset_startBufferActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_startBufferActive != null)
                foreach (Delegates.set_startBufferActive_AfterArgs toInvoke in _afterset_startBufferActive
                             .GetInvocationList())
                    try
                    {
                        _afterset_startBufferActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGameInit()
        {
            if (!HookedList.Contains("GameInit"))
            {
                HookedList.Add("GameInit");
                On.SceneColorManager.GameInit += GameInit;
            }
        }

        internal static event Delegates.GameInit_BeforeArgs _beforeGameInit;
        internal static event Delegates.GameInit_AfterArgs _afterGameInit;

        private static void GameInit(On.SceneColorManager.orig_GameInit orig, SceneColorManager self)
        {
            Delegates.Params_GameInit @params = new()
            {
                self = self
            };
            if (_beforeGameInit != null)
                foreach (Delegates.GameInit_BeforeArgs toInvoke in _beforeGameInit.GetInvocationList())
                    try
                    {
                        _beforeGameInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGameInit != null)
                foreach (Delegates.GameInit_AfterArgs toInvoke in _afterGameInit.GetInvocationList())
                    try
                    {
                        _afterGameInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.SceneColorManager.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_AfterArgs _afterSceneInit;

        private static void SceneInit(On.SceneColorManager.orig_SceneInit orig, SceneColorManager self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            if (_beforeSceneInit != null)
                foreach (Delegates.SceneInit_BeforeArgs toInvoke in _beforeSceneInit.GetInvocationList())
                    try
                    {
                        _beforeSceneInit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSceneInit != null)
                foreach (Delegates.SceneInit_AfterArgs toInvoke in _afterSceneInit.GetInvocationList())
                    try
                    {
                        _afterSceneInit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.SceneColorManager.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.SceneColorManager.orig_Update orig, SceneColorManager self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnLevelUnload()
        {
            if (!HookedList.Contains("OnLevelUnload"))
            {
                HookedList.Add("OnLevelUnload");
                On.SceneColorManager.OnLevelUnload += OnLevelUnload;
            }
        }

        internal static event Delegates.OnLevelUnload_BeforeArgs _beforeOnLevelUnload;
        internal static event Delegates.OnLevelUnload_AfterArgs _afterOnLevelUnload;

        private static void OnLevelUnload(On.SceneColorManager.orig_OnLevelUnload orig, SceneColorManager self)
        {
            Delegates.Params_OnLevelUnload @params = new()
            {
                self = self
            };
            if (_beforeOnLevelUnload != null)
                foreach (Delegates.OnLevelUnload_BeforeArgs toInvoke in _beforeOnLevelUnload.GetInvocationList())
                    try
                    {
                        _beforeOnLevelUnload?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnLevelUnload != null)
                foreach (Delegates.OnLevelUnload_AfterArgs toInvoke in _afterOnLevelUnload.GetInvocationList())
                    try
                    {
                        _afterOnLevelUnload.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.SceneColorManager.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.SceneColorManager.orig_OnDisable orig, SceneColorManager self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookForceRefresh()
        {
            if (!HookedList.Contains("ForceRefresh"))
            {
                HookedList.Add("ForceRefresh");
                On.SceneColorManager.ForceRefresh += ForceRefresh;
            }
        }

        internal static event Delegates.ForceRefresh_BeforeArgs _beforeForceRefresh;

        private static IEnumerator ForceRefresh(On.SceneColorManager.orig_ForceRefresh orig, SceneColorManager self)
        {
            Delegates.Params_ForceRefresh @params = new()
            {
                self = self
            };
            if (_beforeForceRefresh != null)
                foreach (Delegates.ForceRefresh_BeforeArgs toInvoke in _beforeForceRefresh.GetInvocationList())
                    try
                    {
                        _beforeForceRefresh?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookFinishBufferPeriod()
        {
            if (!HookedList.Contains("FinishBufferPeriod"))
            {
                HookedList.Add("FinishBufferPeriod");
                On.SceneColorManager.FinishBufferPeriod += FinishBufferPeriod;
            }
        }

        internal static event Delegates.FinishBufferPeriod_BeforeArgs _beforeFinishBufferPeriod;
        internal static event Delegates.FinishBufferPeriod_AfterArgs _afterFinishBufferPeriod;

        private static void FinishBufferPeriod(On.SceneColorManager.orig_FinishBufferPeriod orig,
            SceneColorManager self)
        {
            Delegates.Params_FinishBufferPeriod @params = new()
            {
                self = self
            };
            if (_beforeFinishBufferPeriod != null)
                foreach (Delegates.FinishBufferPeriod_BeforeArgs toInvoke in
                         _beforeFinishBufferPeriod.GetInvocationList())
                    try
                    {
                        _beforeFinishBufferPeriod?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFinishBufferPeriod != null)
                foreach (Delegates.FinishBufferPeriod_AfterArgs toInvoke in
                         _afterFinishBufferPeriod.GetInvocationList())
                    try
                    {
                        _afterFinishBufferPeriod.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMarkerActive()
        {
            if (!HookedList.Contains("MarkerActive"))
            {
                HookedList.Add("MarkerActive");
                On.SceneColorManager.MarkerActive += MarkerActive;
            }
        }

        internal static event Delegates.MarkerActive_BeforeArgs _beforeMarkerActive;
        internal static event Delegates.MarkerActive_AfterArgs _afterMarkerActive;

        private static void MarkerActive(On.SceneColorManager.orig_MarkerActive orig, SceneColorManager self,
            bool active)
        {
            Delegates.Params_MarkerActive @params = new()
            {
                self = self, active = active
            };
            if (_beforeMarkerActive != null)
                foreach (Delegates.MarkerActive_BeforeArgs toInvoke in _beforeMarkerActive.GetInvocationList())
                    try
                    {
                        _beforeMarkerActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            active = @params.active;
            orig(self, active);
            if (_afterMarkerActive != null)
                foreach (Delegates.MarkerActive_AfterArgs toInvoke in _afterMarkerActive.GetInvocationList())
                    try
                    {
                        _afterMarkerActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateScript()
        {
            if (!HookedList.Contains("UpdateScript"))
            {
                HookedList.Add("UpdateScript");
                On.SceneColorManager.UpdateScript += UpdateScript;
            }
        }

        internal static event Delegates.UpdateScript_BeforeArgs _beforeUpdateScript;
        internal static event Delegates.UpdateScript_AfterArgs _afterUpdateScript;

        private static void UpdateScript(On.SceneColorManager.orig_UpdateScript orig, SceneColorManager self,
            bool forceUpdate)
        {
            Delegates.Params_UpdateScript @params = new()
            {
                self = self, forceUpdate = forceUpdate
            };
            if (_beforeUpdateScript != null)
                foreach (Delegates.UpdateScript_BeforeArgs toInvoke in _beforeUpdateScript.GetInvocationList())
                    try
                    {
                        _beforeUpdateScript?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            forceUpdate = @params.forceUpdate;
            orig(self, forceUpdate);
            if (_afterUpdateScript != null)
                foreach (Delegates.UpdateScript_AfterArgs toInvoke in _afterUpdateScript.GetInvocationList())
                    try
                    {
                        _afterUpdateScript.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEditorHasChanged()
        {
            if (!HookedList.Contains("EditorHasChanged"))
            {
                HookedList.Add("EditorHasChanged");
                On.SceneColorManager.EditorHasChanged += EditorHasChanged;
            }
        }

        internal static event Delegates.EditorHasChanged_BeforeArgs _beforeEditorHasChanged;
        internal static event Delegates.EditorHasChanged_AfterArgs _afterEditorHasChanged;

        private static void EditorHasChanged(On.SceneColorManager.orig_EditorHasChanged orig, SceneColorManager self)
        {
            Delegates.Params_EditorHasChanged @params = new()
            {
                self = self
            };
            if (_beforeEditorHasChanged != null)
                foreach (Delegates.EditorHasChanged_BeforeArgs toInvoke in _beforeEditorHasChanged.GetInvocationList())
                    try
                    {
                        _beforeEditorHasChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEditorHasChanged != null)
                foreach (Delegates.EditorHasChanged_AfterArgs toInvoke in _afterEditorHasChanged.GetInvocationList())
                    try
                    {
                        _afterEditorHasChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPairKeyframes()
        {
            if (!HookedList.Contains("PairKeyframes"))
            {
                HookedList.Add("PairKeyframes");
                On.SceneColorManager.PairKeyframes += PairKeyframes;
            }
        }

        internal static event Delegates.PairKeyframes_BeforeArgs _beforePairKeyframes;
        internal static event Delegates.PairKeyframes_AfterArgs _afterPairKeyframes;

        private static List<Keyframe[]> PairKeyframes(On.SceneColorManager.orig_PairKeyframes orig,
            AnimationCurve curveA, AnimationCurve curveB)
        {
            Delegates.Params_PairKeyframes @params = new()
            {
                curveA = curveA, curveB = curveB
            };
            if (_beforePairKeyframes != null)
                foreach (Delegates.PairKeyframes_BeforeArgs toInvoke in _beforePairKeyframes.GetInvocationList())
                    try
                    {
                        _beforePairKeyframes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            curveA = @params.curveA;
            curveB = @params.curveB;
            var retVal = orig(curveA, curveB);
            if (_afterPairKeyframes != null)
                foreach (Delegates.PairKeyframes_AfterArgs toInvoke in _afterPairKeyframes.GetInvocationList())
                    try
                    {
                        retVal = _afterPairKeyframes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSimplePairKeyframes()
        {
            if (!HookedList.Contains("SimplePairKeyframes"))
            {
                HookedList.Add("SimplePairKeyframes");
                On.SceneColorManager.SimplePairKeyframes += SimplePairKeyframes;
            }
        }

        internal static event Delegates.SimplePairKeyframes_BeforeArgs _beforeSimplePairKeyframes;
        internal static event Delegates.SimplePairKeyframes_AfterArgs _afterSimplePairKeyframes;

        private static List<Keyframe[]> SimplePairKeyframes(On.SceneColorManager.orig_SimplePairKeyframes orig,
            AnimationCurve curveA, AnimationCurve curveB)
        {
            Delegates.Params_SimplePairKeyframes @params = new()
            {
                curveA = curveA, curveB = curveB
            };
            if (_beforeSimplePairKeyframes != null)
                foreach (Delegates.SimplePairKeyframes_BeforeArgs toInvoke in _beforeSimplePairKeyframes
                             .GetInvocationList())
                    try
                    {
                        _beforeSimplePairKeyframes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            curveA = @params.curveA;
            curveB = @params.curveB;
            var retVal = orig(curveA, curveB);
            if (_afterSimplePairKeyframes != null)
                foreach (Delegates.SimplePairKeyframes_AfterArgs toInvoke in
                         _afterSimplePairKeyframes.GetInvocationList())
                    try
                    {
                        retVal = _afterSimplePairKeyframes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreatePair()
        {
            if (!HookedList.Contains("CreatePair"))
            {
                HookedList.Add("CreatePair");
                On.SceneColorManager.CreatePair += CreatePair;
            }
        }

        internal static event Delegates.CreatePair_BeforeArgs _beforeCreatePair;
        internal static event Delegates.CreatePair_AfterArgs _afterCreatePair;

        private static Keyframe CreatePair(On.SceneColorManager.orig_CreatePair orig, Keyframe kf, AnimationCurve curve)
        {
            Delegates.Params_CreatePair @params = new()
            {
                kf = kf, curve = curve
            };
            if (_beforeCreatePair != null)
                foreach (Delegates.CreatePair_BeforeArgs toInvoke in _beforeCreatePair.GetInvocationList())
                    try
                    {
                        _beforeCreatePair?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            kf = @params.kf;
            curve = @params.curve;
            var retVal = orig(kf, curve);
            if (_afterCreatePair != null)
                foreach (Delegates.CreatePair_AfterArgs toInvoke in _afterCreatePair.GetInvocationList())
                    try
                    {
                        retVal = _afterCreatePair.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateCurveFromKeyframes()
        {
            if (!HookedList.Contains("CreateCurveFromKeyframes"))
            {
                HookedList.Add("CreateCurveFromKeyframes");
                On.SceneColorManager.CreateCurveFromKeyframes += CreateCurveFromKeyframes;
            }
        }

        internal static event Delegates.CreateCurveFromKeyframes_BeforeArgs _beforeCreateCurveFromKeyframes;
        internal static event Delegates.CreateCurveFromKeyframes_AfterArgs _afterCreateCurveFromKeyframes;

        private static AnimationCurve CreateCurveFromKeyframes(On.SceneColorManager.orig_CreateCurveFromKeyframes orig,
            IList<Keyframe[]> keyframePairs, float factor)
        {
            Delegates.Params_CreateCurveFromKeyframes @params = new()
            {
                keyframePairs = keyframePairs, factor = factor
            };
            if (_beforeCreateCurveFromKeyframes != null)
                foreach (Delegates.CreateCurveFromKeyframes_BeforeArgs toInvoke in _beforeCreateCurveFromKeyframes
                             .GetInvocationList())
                    try
                    {
                        _beforeCreateCurveFromKeyframes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            keyframePairs = @params.keyframePairs;
            factor = @params.factor;
            var retVal = orig(keyframePairs, factor);
            if (_afterCreateCurveFromKeyframes != null)
                foreach (Delegates.CreateCurveFromKeyframes_AfterArgs toInvoke in _afterCreateCurveFromKeyframes
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCreateCurveFromKeyframes.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAverageKeyframe()
        {
            if (!HookedList.Contains("AverageKeyframe"))
            {
                HookedList.Add("AverageKeyframe");
                On.SceneColorManager.AverageKeyframe += AverageKeyframe;
            }
        }

        internal static event Delegates.AverageKeyframe_BeforeArgs _beforeAverageKeyframe;
        internal static event Delegates.AverageKeyframe_AfterArgs _afterAverageKeyframe;

        private static Keyframe AverageKeyframe(On.SceneColorManager.orig_AverageKeyframe orig, Keyframe a, Keyframe b,
            float factor)
        {
            Delegates.Params_AverageKeyframe @params = new()
            {
                a = a, b = b, factor = factor
            };
            if (_beforeAverageKeyframe != null)
                foreach (Delegates.AverageKeyframe_BeforeArgs toInvoke in _beforeAverageKeyframe.GetInvocationList())
                    try
                    {
                        _beforeAverageKeyframe?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            a = @params.a;
            b = @params.b;
            factor = @params.factor;
            var retVal = orig(a, b, factor);
            if (_afterAverageKeyframe != null)
                foreach (Delegates.AverageKeyframe_AfterArgs toInvoke in _afterAverageKeyframe.GetInvocationList())
                    try
                    {
                        retVal = _afterAverageKeyframe.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookPairCurvesKeyframes()
        {
            if (!HookedList.Contains("PairCurvesKeyframes"))
            {
                HookedList.Add("PairCurvesKeyframes");
                On.SceneColorManager.PairCurvesKeyframes += PairCurvesKeyframes;
            }
        }

        internal static event Delegates.PairCurvesKeyframes_BeforeArgs _beforePairCurvesKeyframes;
        internal static event Delegates.PairCurvesKeyframes_AfterArgs _afterPairCurvesKeyframes;

        private static void PairCurvesKeyframes(On.SceneColorManager.orig_PairCurvesKeyframes orig,
            SceneColorManager self)
        {
            Delegates.Params_PairCurvesKeyframes @params = new()
            {
                self = self
            };
            if (_beforePairCurvesKeyframes != null)
                foreach (Delegates.PairCurvesKeyframes_BeforeArgs toInvoke in _beforePairCurvesKeyframes
                             .GetInvocationList())
                    try
                    {
                        _beforePairCurvesKeyframes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPairCurvesKeyframes != null)
                foreach (Delegates.PairCurvesKeyframes_AfterArgs toInvoke in
                         _afterPairCurvesKeyframes.GetInvocationList())
                    try
                    {
                        _afterPairCurvesKeyframes.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateScriptParameters()
        {
            if (!HookedList.Contains("UpdateScriptParameters"))
            {
                HookedList.Add("UpdateScriptParameters");
                On.SceneColorManager.UpdateScriptParameters += UpdateScriptParameters;
            }
        }

        internal static event Delegates.UpdateScriptParameters_BeforeArgs _beforeUpdateScriptParameters;
        internal static event Delegates.UpdateScriptParameters_AfterArgs _afterUpdateScriptParameters;

        private static void UpdateScriptParameters(On.SceneColorManager.orig_UpdateScriptParameters orig,
            SceneColorManager self)
        {
            Delegates.Params_UpdateScriptParameters @params = new()
            {
                self = self
            };
            if (_beforeUpdateScriptParameters != null)
                foreach (Delegates.UpdateScriptParameters_BeforeArgs toInvoke in _beforeUpdateScriptParameters
                             .GetInvocationList())
                    try
                    {
                        _beforeUpdateScriptParameters?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateScriptParameters != null)
                foreach (Delegates.UpdateScriptParameters_AfterArgs toInvoke in _afterUpdateScriptParameters
                             .GetInvocationList())
                    try
                    {
                        _afterUpdateScriptParameters.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPairedListsInitiated()
        {
            if (!HookedList.Contains("PairedListsInitiated"))
            {
                HookedList.Add("PairedListsInitiated");
                On.SceneColorManager.PairedListsInitiated += PairedListsInitiated;
            }
        }

        internal static event Delegates.PairedListsInitiated_BeforeArgs _beforePairedListsInitiated;
        internal static event Delegates.PairedListsInitiated_AfterArgs _afterPairedListsInitiated;

        private static bool PairedListsInitiated(On.SceneColorManager.orig_PairedListsInitiated orig,
            SceneColorManager self)
        {
            Delegates.Params_PairedListsInitiated @params = new()
            {
                self = self
            };
            if (_beforePairedListsInitiated != null)
                foreach (Delegates.PairedListsInitiated_BeforeArgs toInvoke in _beforePairedListsInitiated
                             .GetInvocationList())
                    try
                    {
                        _beforePairedListsInitiated?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterPairedListsInitiated != null)
                foreach (Delegates.PairedListsInitiated_AfterArgs toInvoke in _afterPairedListsInitiated
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterPairedListsInitiated.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateSceneType()
        {
            if (!HookedList.Contains("UpdateSceneType"))
            {
                HookedList.Add("UpdateSceneType");
                On.SceneColorManager.UpdateSceneType += UpdateSceneType;
            }
        }

        internal static event Delegates.UpdateSceneType_BeforeArgs _beforeUpdateSceneType;
        internal static event Delegates.UpdateSceneType_AfterArgs _afterUpdateSceneType;

        private static void UpdateSceneType(On.SceneColorManager.orig_UpdateSceneType orig, SceneColorManager self)
        {
            Delegates.Params_UpdateSceneType @params = new()
            {
                self = self
            };
            if (_beforeUpdateSceneType != null)
                foreach (Delegates.UpdateSceneType_BeforeArgs toInvoke in _beforeUpdateSceneType.GetInvocationList())
                    try
                    {
                        _beforeUpdateSceneType?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateSceneType != null)
                foreach (Delegates.UpdateSceneType_AfterArgs toInvoke in _afterUpdateSceneType.GetInvocationList())
                    try
                    {
                        _afterUpdateSceneType.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate Keyframe AverageKeyframe_AfterArgs(Params_AverageKeyframe args, Keyframe ret);

        public delegate void AverageKeyframe_BeforeArgs(Params_AverageKeyframe args);

        public delegate Keyframe AverageKeyframe_WithArgs(Func<Keyframe, Keyframe, float, Keyframe> orig, Keyframe a,
            Keyframe b, float factor);

        public delegate AnimationCurve CreateCurveFromKeyframes_AfterArgs(Params_CreateCurveFromKeyframes args,
            AnimationCurve ret);

        public delegate void CreateCurveFromKeyframes_BeforeArgs(Params_CreateCurveFromKeyframes args);

        public delegate AnimationCurve CreateCurveFromKeyframes_WithArgs(
            Func<IList<Keyframe[]>, float, AnimationCurve> orig, IList<Keyframe[]> keyframePairs, float factor);

        public delegate Keyframe CreatePair_AfterArgs(Params_CreatePair args, Keyframe ret);

        public delegate void CreatePair_BeforeArgs(Params_CreatePair args);

        public delegate Keyframe CreatePair_WithArgs(Func<Keyframe, AnimationCurve, Keyframe> orig, Keyframe kf,
            AnimationCurve curve);

        public delegate void EditorHasChanged_AfterArgs(Params_EditorHasChanged args);

        public delegate void EditorHasChanged_BeforeArgs(Params_EditorHasChanged args);

        public delegate void EditorHasChanged_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate void FinishBufferPeriod_AfterArgs(Params_FinishBufferPeriod args);

        public delegate void FinishBufferPeriod_BeforeArgs(Params_FinishBufferPeriod args);

        public delegate void FinishBufferPeriod_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate IEnumerator ForceRefresh_AfterArgs(Params_ForceRefresh args, IEnumerator ret);

        public delegate void ForceRefresh_BeforeArgs(Params_ForceRefresh args);

        public delegate IEnumerator ForceRefresh_WithArgs(Func<SceneColorManager, IEnumerator> orig,
            SceneColorManager self);

        public delegate void GameInit_AfterArgs(Params_GameInit args);

        public delegate void GameInit_BeforeArgs(Params_GameInit args);

        public delegate void GameInit_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate bool get_markerActive_AfterArgs(Params_get_markerActive args, bool ret);

        public delegate void get_markerActive_BeforeArgs(Params_get_markerActive args);

        public delegate bool get_markerActive_WithArgs(Func<SceneColorManager, bool> orig, SceneColorManager self);

        public delegate bool get_startBufferActive_AfterArgs(Params_get_startBufferActive args, bool ret);

        public delegate void get_startBufferActive_BeforeArgs(Params_get_startBufferActive args);

        public delegate bool get_startBufferActive_WithArgs(Func<SceneColorManager, bool> orig, SceneColorManager self);

        public delegate void MarkerActive_AfterArgs(Params_MarkerActive args);

        public delegate void MarkerActive_BeforeArgs(Params_MarkerActive args);

        public delegate void MarkerActive_WithArgs(Action<SceneColorManager, bool> orig, SceneColorManager self,
            bool active);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate void OnLevelUnload_AfterArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_BeforeArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate void PairCurvesKeyframes_AfterArgs(Params_PairCurvesKeyframes args);

        public delegate void PairCurvesKeyframes_BeforeArgs(Params_PairCurvesKeyframes args);

        public delegate void PairCurvesKeyframes_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate bool PairedListsInitiated_AfterArgs(Params_PairedListsInitiated args, bool ret);

        public delegate void PairedListsInitiated_BeforeArgs(Params_PairedListsInitiated args);

        public delegate bool PairedListsInitiated_WithArgs(Func<SceneColorManager, bool> orig, SceneColorManager self);

        public delegate List<Keyframe[]> PairKeyframes_AfterArgs(Params_PairKeyframes args, List<Keyframe[]> ret);

        public delegate void PairKeyframes_BeforeArgs(Params_PairKeyframes args);

        public delegate List<Keyframe[]> PairKeyframes_WithArgs(
            Func<AnimationCurve, AnimationCurve, List<Keyframe[]>> orig, AnimationCurve curveA, AnimationCurve curveB);

        public delegate void SceneInit_AfterArgs(Params_SceneInit args);

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate void set_markerActive_AfterArgs(Params_set_markerActive args);

        public delegate void set_markerActive_BeforeArgs(Params_set_markerActive args);

        public delegate void set_markerActive_WithArgs(Action<SceneColorManager, bool> orig, SceneColorManager self,
            bool value);

        public delegate void set_startBufferActive_AfterArgs(Params_set_startBufferActive args);

        public delegate void set_startBufferActive_BeforeArgs(Params_set_startBufferActive args);

        public delegate void set_startBufferActive_WithArgs(Action<SceneColorManager, bool> orig,
            SceneColorManager self, bool value);

        public delegate void SetFactor_AfterArgs(Params_SetFactor args);

        public delegate void SetFactor_BeforeArgs(Params_SetFactor args);

        public delegate void SetFactor_WithArgs(Action<SceneColorManager, float> orig, SceneColorManager self,
            float factor);

        public delegate void SetSaturationA_AfterArgs(Params_SetSaturationA args);

        public delegate void SetSaturationA_BeforeArgs(Params_SetSaturationA args);

        public delegate void SetSaturationA_WithArgs(Action<SceneColorManager, float> orig, SceneColorManager self,
            float saturationA);

        public delegate void SetSaturationB_AfterArgs(Params_SetSaturationB args);

        public delegate void SetSaturationB_BeforeArgs(Params_SetSaturationB args);

        public delegate void SetSaturationB_WithArgs(Action<SceneColorManager, float> orig, SceneColorManager self,
            float saturationB);

        public delegate List<Keyframe[]> SimplePairKeyframes_AfterArgs(Params_SimplePairKeyframes args,
            List<Keyframe[]> ret);

        public delegate void SimplePairKeyframes_BeforeArgs(Params_SimplePairKeyframes args);

        public delegate List<Keyframe[]> SimplePairKeyframes_WithArgs(
            Func<AnimationCurve, AnimationCurve, List<Keyframe[]>> orig, AnimationCurve curveA, AnimationCurve curveB);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate void UpdateSceneType_AfterArgs(Params_UpdateSceneType args);

        public delegate void UpdateSceneType_BeforeArgs(Params_UpdateSceneType args);

        public delegate void UpdateSceneType_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public delegate void UpdateScript_AfterArgs(Params_UpdateScript args);

        public delegate void UpdateScript_BeforeArgs(Params_UpdateScript args);

        public delegate void UpdateScript_WithArgs(Action<SceneColorManager, bool> orig, SceneColorManager self,
            bool forceUpdate);

        public delegate void UpdateScriptParameters_AfterArgs(Params_UpdateScriptParameters args);

        public delegate void UpdateScriptParameters_BeforeArgs(Params_UpdateScriptParameters args);

        public delegate void UpdateScriptParameters_WithArgs(Action<SceneColorManager> orig, SceneColorManager self);

        public sealed class Params_get_markerActive
        {
            public SceneColorManager self;
        }

        public sealed class Params_set_markerActive
        {
            public SceneColorManager self;
            public bool value;
        }

        public sealed class Params_SetFactor
        {
            public float factor;
            public SceneColorManager self;
        }

        public sealed class Params_SetSaturationA
        {
            public float saturationA;
            public SceneColorManager self;
        }

        public sealed class Params_SetSaturationB
        {
            public float saturationB;
            public SceneColorManager self;
        }

        public sealed class Params_get_startBufferActive
        {
            public SceneColorManager self;
        }

        public sealed class Params_set_startBufferActive
        {
            public SceneColorManager self;
            public bool value;
        }

        public sealed class Params_GameInit
        {
            public SceneColorManager self;
        }

        public sealed class Params_SceneInit
        {
            public SceneColorManager self;
        }

        public sealed class Params_Update
        {
            public SceneColorManager self;
        }

        public sealed class Params_OnLevelUnload
        {
            public SceneColorManager self;
        }

        public sealed class Params_OnDisable
        {
            public SceneColorManager self;
        }

        public sealed class Params_ForceRefresh
        {
            public SceneColorManager self;
        }

        public sealed class Params_FinishBufferPeriod
        {
            public SceneColorManager self;
        }

        public sealed class Params_MarkerActive
        {
            public bool active;
            public SceneColorManager self;
        }

        public sealed class Params_UpdateScript
        {
            public bool forceUpdate;
            public SceneColorManager self;
        }

        public sealed class Params_EditorHasChanged
        {
            public SceneColorManager self;
        }

        public sealed class Params_PairKeyframes
        {
            public AnimationCurve curveA;
            public AnimationCurve curveB;
        }

        public sealed class Params_SimplePairKeyframes
        {
            public AnimationCurve curveA;
            public AnimationCurve curveB;
        }

        public sealed class Params_CreatePair
        {
            public AnimationCurve curve;
            public Keyframe kf;
        }

        public sealed class Params_CreateCurveFromKeyframes
        {
            public float factor;
            public IList<Keyframe[]> keyframePairs;
        }

        public sealed class Params_AverageKeyframe
        {
            public Keyframe a;
            public Keyframe b;
            public float factor;
        }

        public sealed class Params_PairCurvesKeyframes
        {
            public SceneColorManager self;
        }

        public sealed class Params_UpdateScriptParameters
        {
            public SceneColorManager self;
        }

        public sealed class Params_PairedListsInitiated
        {
            public SceneColorManager self;
        }

        public sealed class Params_UpdateSceneType
        {
            public SceneColorManager self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_markerActive_BeforeArgs get_markerActive
        {
            add
            {
                HookHandler._beforeget_markerActive += value;
                HookHandler.Hookget_markerActive();
            }
            remove => HookHandler._beforeget_markerActive -= value;
        }

        public static event Delegates.set_markerActive_BeforeArgs set_markerActive
        {
            add
            {
                HookHandler._beforeset_markerActive += value;
                HookHandler.Hookset_markerActive();
            }
            remove => HookHandler._beforeset_markerActive -= value;
        }

        public static event Delegates.SetFactor_BeforeArgs SetFactor
        {
            add
            {
                HookHandler._beforeSetFactor += value;
                HookHandler.HookSetFactor();
            }
            remove => HookHandler._beforeSetFactor -= value;
        }

        public static event Delegates.SetSaturationA_BeforeArgs SetSaturationA
        {
            add
            {
                HookHandler._beforeSetSaturationA += value;
                HookHandler.HookSetSaturationA();
            }
            remove => HookHandler._beforeSetSaturationA -= value;
        }

        public static event Delegates.SetSaturationB_BeforeArgs SetSaturationB
        {
            add
            {
                HookHandler._beforeSetSaturationB += value;
                HookHandler.HookSetSaturationB();
            }
            remove => HookHandler._beforeSetSaturationB -= value;
        }

        public static event Delegates.get_startBufferActive_BeforeArgs get_startBufferActive
        {
            add
            {
                HookHandler._beforeget_startBufferActive += value;
                HookHandler.Hookget_startBufferActive();
            }
            remove => HookHandler._beforeget_startBufferActive -= value;
        }

        public static event Delegates.set_startBufferActive_BeforeArgs set_startBufferActive
        {
            add
            {
                HookHandler._beforeset_startBufferActive += value;
                HookHandler.Hookset_startBufferActive();
            }
            remove => HookHandler._beforeset_startBufferActive -= value;
        }

        public static event Delegates.GameInit_BeforeArgs GameInit
        {
            add
            {
                HookHandler._beforeGameInit += value;
                HookHandler.HookGameInit();
            }
            remove => HookHandler._beforeGameInit -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.OnLevelUnload_BeforeArgs OnLevelUnload
        {
            add
            {
                HookHandler._beforeOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._beforeOnLevelUnload -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.ForceRefresh_BeforeArgs ForceRefresh
        {
            add
            {
                HookHandler._beforeForceRefresh += value;
                HookHandler.HookForceRefresh();
            }
            remove => HookHandler._beforeForceRefresh -= value;
        }

        public static event Delegates.FinishBufferPeriod_BeforeArgs FinishBufferPeriod
        {
            add
            {
                HookHandler._beforeFinishBufferPeriod += value;
                HookHandler.HookFinishBufferPeriod();
            }
            remove => HookHandler._beforeFinishBufferPeriod -= value;
        }

        public static event Delegates.MarkerActive_BeforeArgs MarkerActive
        {
            add
            {
                HookHandler._beforeMarkerActive += value;
                HookHandler.HookMarkerActive();
            }
            remove => HookHandler._beforeMarkerActive -= value;
        }

        public static event Delegates.UpdateScript_BeforeArgs UpdateScript
        {
            add
            {
                HookHandler._beforeUpdateScript += value;
                HookHandler.HookUpdateScript();
            }
            remove => HookHandler._beforeUpdateScript -= value;
        }

        public static event Delegates.EditorHasChanged_BeforeArgs EditorHasChanged
        {
            add
            {
                HookHandler._beforeEditorHasChanged += value;
                HookHandler.HookEditorHasChanged();
            }
            remove => HookHandler._beforeEditorHasChanged -= value;
        }

        public static event Delegates.PairKeyframes_BeforeArgs PairKeyframes
        {
            add
            {
                HookHandler._beforePairKeyframes += value;
                HookHandler.HookPairKeyframes();
            }
            remove => HookHandler._beforePairKeyframes -= value;
        }

        public static event Delegates.SimplePairKeyframes_BeforeArgs SimplePairKeyframes
        {
            add
            {
                HookHandler._beforeSimplePairKeyframes += value;
                HookHandler.HookSimplePairKeyframes();
            }
            remove => HookHandler._beforeSimplePairKeyframes -= value;
        }

        public static event Delegates.CreatePair_BeforeArgs CreatePair
        {
            add
            {
                HookHandler._beforeCreatePair += value;
                HookHandler.HookCreatePair();
            }
            remove => HookHandler._beforeCreatePair -= value;
        }

        public static event Delegates.CreateCurveFromKeyframes_BeforeArgs CreateCurveFromKeyframes
        {
            add
            {
                HookHandler._beforeCreateCurveFromKeyframes += value;
                HookHandler.HookCreateCurveFromKeyframes();
            }
            remove => HookHandler._beforeCreateCurveFromKeyframes -= value;
        }

        public static event Delegates.AverageKeyframe_BeforeArgs AverageKeyframe
        {
            add
            {
                HookHandler._beforeAverageKeyframe += value;
                HookHandler.HookAverageKeyframe();
            }
            remove => HookHandler._beforeAverageKeyframe -= value;
        }

        public static event Delegates.PairCurvesKeyframes_BeforeArgs PairCurvesKeyframes
        {
            add
            {
                HookHandler._beforePairCurvesKeyframes += value;
                HookHandler.HookPairCurvesKeyframes();
            }
            remove => HookHandler._beforePairCurvesKeyframes -= value;
        }

        public static event Delegates.UpdateScriptParameters_BeforeArgs UpdateScriptParameters
        {
            add
            {
                HookHandler._beforeUpdateScriptParameters += value;
                HookHandler.HookUpdateScriptParameters();
            }
            remove => HookHandler._beforeUpdateScriptParameters -= value;
        }

        public static event Delegates.PairedListsInitiated_BeforeArgs PairedListsInitiated
        {
            add
            {
                HookHandler._beforePairedListsInitiated += value;
                HookHandler.HookPairedListsInitiated();
            }
            remove => HookHandler._beforePairedListsInitiated -= value;
        }

        public static event Delegates.UpdateSceneType_BeforeArgs UpdateSceneType
        {
            add
            {
                HookHandler._beforeUpdateSceneType += value;
                HookHandler.HookUpdateSceneType();
            }
            remove => HookHandler._beforeUpdateSceneType -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_markerActive_AfterArgs get_markerActive
        {
            add
            {
                HookHandler._afterget_markerActive += value;
                HookHandler.Hookget_markerActive();
            }
            remove => HookHandler._afterget_markerActive -= value;
        }

        public static event Delegates.set_markerActive_AfterArgs set_markerActive
        {
            add
            {
                HookHandler._afterset_markerActive += value;
                HookHandler.Hookset_markerActive();
            }
            remove => HookHandler._afterset_markerActive -= value;
        }

        public static event Delegates.SetFactor_AfterArgs SetFactor
        {
            add
            {
                HookHandler._afterSetFactor += value;
                HookHandler.HookSetFactor();
            }
            remove => HookHandler._afterSetFactor -= value;
        }

        public static event Delegates.SetSaturationA_AfterArgs SetSaturationA
        {
            add
            {
                HookHandler._afterSetSaturationA += value;
                HookHandler.HookSetSaturationA();
            }
            remove => HookHandler._afterSetSaturationA -= value;
        }

        public static event Delegates.SetSaturationB_AfterArgs SetSaturationB
        {
            add
            {
                HookHandler._afterSetSaturationB += value;
                HookHandler.HookSetSaturationB();
            }
            remove => HookHandler._afterSetSaturationB -= value;
        }

        public static event Delegates.get_startBufferActive_AfterArgs get_startBufferActive
        {
            add
            {
                HookHandler._afterget_startBufferActive += value;
                HookHandler.Hookget_startBufferActive();
            }
            remove => HookHandler._afterget_startBufferActive -= value;
        }

        public static event Delegates.set_startBufferActive_AfterArgs set_startBufferActive
        {
            add
            {
                HookHandler._afterset_startBufferActive += value;
                HookHandler.Hookset_startBufferActive();
            }
            remove => HookHandler._afterset_startBufferActive -= value;
        }

        public static event Delegates.GameInit_AfterArgs GameInit
        {
            add
            {
                HookHandler._afterGameInit += value;
                HookHandler.HookGameInit();
            }
            remove => HookHandler._afterGameInit -= value;
        }

        public static event Delegates.SceneInit_AfterArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.OnLevelUnload_AfterArgs OnLevelUnload
        {
            add
            {
                HookHandler._afterOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._afterOnLevelUnload -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.FinishBufferPeriod_AfterArgs FinishBufferPeriod
        {
            add
            {
                HookHandler._afterFinishBufferPeriod += value;
                HookHandler.HookFinishBufferPeriod();
            }
            remove => HookHandler._afterFinishBufferPeriod -= value;
        }

        public static event Delegates.MarkerActive_AfterArgs MarkerActive
        {
            add
            {
                HookHandler._afterMarkerActive += value;
                HookHandler.HookMarkerActive();
            }
            remove => HookHandler._afterMarkerActive -= value;
        }

        public static event Delegates.UpdateScript_AfterArgs UpdateScript
        {
            add
            {
                HookHandler._afterUpdateScript += value;
                HookHandler.HookUpdateScript();
            }
            remove => HookHandler._afterUpdateScript -= value;
        }

        public static event Delegates.EditorHasChanged_AfterArgs EditorHasChanged
        {
            add
            {
                HookHandler._afterEditorHasChanged += value;
                HookHandler.HookEditorHasChanged();
            }
            remove => HookHandler._afterEditorHasChanged -= value;
        }

        public static event Delegates.PairKeyframes_AfterArgs PairKeyframes
        {
            add
            {
                HookHandler._afterPairKeyframes += value;
                HookHandler.HookPairKeyframes();
            }
            remove => HookHandler._afterPairKeyframes -= value;
        }

        public static event Delegates.SimplePairKeyframes_AfterArgs SimplePairKeyframes
        {
            add
            {
                HookHandler._afterSimplePairKeyframes += value;
                HookHandler.HookSimplePairKeyframes();
            }
            remove => HookHandler._afterSimplePairKeyframes -= value;
        }

        public static event Delegates.CreatePair_AfterArgs CreatePair
        {
            add
            {
                HookHandler._afterCreatePair += value;
                HookHandler.HookCreatePair();
            }
            remove => HookHandler._afterCreatePair -= value;
        }

        public static event Delegates.CreateCurveFromKeyframes_AfterArgs CreateCurveFromKeyframes
        {
            add
            {
                HookHandler._afterCreateCurveFromKeyframes += value;
                HookHandler.HookCreateCurveFromKeyframes();
            }
            remove => HookHandler._afterCreateCurveFromKeyframes -= value;
        }

        public static event Delegates.AverageKeyframe_AfterArgs AverageKeyframe
        {
            add
            {
                HookHandler._afterAverageKeyframe += value;
                HookHandler.HookAverageKeyframe();
            }
            remove => HookHandler._afterAverageKeyframe -= value;
        }

        public static event Delegates.PairCurvesKeyframes_AfterArgs PairCurvesKeyframes
        {
            add
            {
                HookHandler._afterPairCurvesKeyframes += value;
                HookHandler.HookPairCurvesKeyframes();
            }
            remove => HookHandler._afterPairCurvesKeyframes -= value;
        }

        public static event Delegates.UpdateScriptParameters_AfterArgs UpdateScriptParameters
        {
            add
            {
                HookHandler._afterUpdateScriptParameters += value;
                HookHandler.HookUpdateScriptParameters();
            }
            remove => HookHandler._afterUpdateScriptParameters -= value;
        }

        public static event Delegates.PairedListsInitiated_AfterArgs PairedListsInitiated
        {
            add
            {
                HookHandler._afterPairedListsInitiated += value;
                HookHandler.HookPairedListsInitiated();
            }
            remove => HookHandler._afterPairedListsInitiated -= value;
        }

        public static event Delegates.UpdateSceneType_AfterArgs UpdateSceneType
        {
            add
            {
                HookHandler._afterUpdateSceneType += value;
                HookHandler.HookUpdateSceneType();
            }
            remove => HookHandler._afterUpdateSceneType -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_markerActive_WithArgs get_markerActive
        {
            add => HookEndpointManager.Add<Delegates.get_markerActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "get_markerActive"), value);
            remove => HookEndpointManager.Remove<Delegates.get_markerActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "get_markerActive"), value);
        }

        public static event Delegates.set_markerActive_WithArgs set_markerActive
        {
            add => HookEndpointManager.Add<Delegates.set_markerActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "set_markerActive"), value);
            remove => HookEndpointManager.Remove<Delegates.set_markerActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "set_markerActive"), value);
        }

        public static event On.SceneColorManager.hook_SetFactor SetFactor
        {
            add => On.SceneColorManager.SetFactor += value;
            remove => On.SceneColorManager.SetFactor -= value;
        }

        public static event On.SceneColorManager.hook_SetSaturationA SetSaturationA
        {
            add => On.SceneColorManager.SetSaturationA += value;
            remove => On.SceneColorManager.SetSaturationA -= value;
        }

        public static event On.SceneColorManager.hook_SetSaturationB SetSaturationB
        {
            add => On.SceneColorManager.SetSaturationB += value;
            remove => On.SceneColorManager.SetSaturationB -= value;
        }

        public static event Delegates.get_startBufferActive_WithArgs get_startBufferActive
        {
            add => HookEndpointManager.Add<Delegates.get_startBufferActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "get_startBufferActive"), value);
            remove => HookEndpointManager.Remove<Delegates.get_startBufferActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "get_startBufferActive"), value);
        }

        public static event Delegates.set_startBufferActive_WithArgs set_startBufferActive
        {
            add => HookEndpointManager.Add<Delegates.set_startBufferActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "set_startBufferActive"), value);
            remove => HookEndpointManager.Remove<Delegates.set_startBufferActive_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SceneColorManager), "set_startBufferActive"), value);
        }

        public static event On.SceneColorManager.hook_GameInit GameInit
        {
            add => On.SceneColorManager.GameInit += value;
            remove => On.SceneColorManager.GameInit -= value;
        }

        public static event On.SceneColorManager.hook_SceneInit SceneInit
        {
            add => On.SceneColorManager.SceneInit += value;
            remove => On.SceneColorManager.SceneInit -= value;
        }

        public static event On.SceneColorManager.hook_Update Update
        {
            add => On.SceneColorManager.Update += value;
            remove => On.SceneColorManager.Update -= value;
        }

        public static event On.SceneColorManager.hook_OnLevelUnload OnLevelUnload
        {
            add => On.SceneColorManager.OnLevelUnload += value;
            remove => On.SceneColorManager.OnLevelUnload -= value;
        }

        public static event On.SceneColorManager.hook_OnDisable OnDisable
        {
            add => On.SceneColorManager.OnDisable += value;
            remove => On.SceneColorManager.OnDisable -= value;
        }

        public static event On.SceneColorManager.hook_ForceRefresh ForceRefresh
        {
            add => On.SceneColorManager.ForceRefresh += value;
            remove => On.SceneColorManager.ForceRefresh -= value;
        }

        public static event On.SceneColorManager.hook_FinishBufferPeriod FinishBufferPeriod
        {
            add => On.SceneColorManager.FinishBufferPeriod += value;
            remove => On.SceneColorManager.FinishBufferPeriod -= value;
        }

        public static event On.SceneColorManager.hook_MarkerActive MarkerActive
        {
            add => On.SceneColorManager.MarkerActive += value;
            remove => On.SceneColorManager.MarkerActive -= value;
        }

        public static event On.SceneColorManager.hook_UpdateScript UpdateScript
        {
            add => On.SceneColorManager.UpdateScript += value;
            remove => On.SceneColorManager.UpdateScript -= value;
        }

        public static event On.SceneColorManager.hook_EditorHasChanged EditorHasChanged
        {
            add => On.SceneColorManager.EditorHasChanged += value;
            remove => On.SceneColorManager.EditorHasChanged -= value;
        }

        public static event On.SceneColorManager.hook_PairKeyframes PairKeyframes
        {
            add => On.SceneColorManager.PairKeyframes += value;
            remove => On.SceneColorManager.PairKeyframes -= value;
        }

        public static event On.SceneColorManager.hook_SimplePairKeyframes SimplePairKeyframes
        {
            add => On.SceneColorManager.SimplePairKeyframes += value;
            remove => On.SceneColorManager.SimplePairKeyframes -= value;
        }

        public static event On.SceneColorManager.hook_CreatePair CreatePair
        {
            add => On.SceneColorManager.CreatePair += value;
            remove => On.SceneColorManager.CreatePair -= value;
        }

        public static event On.SceneColorManager.hook_CreateCurveFromKeyframes CreateCurveFromKeyframes
        {
            add => On.SceneColorManager.CreateCurveFromKeyframes += value;
            remove => On.SceneColorManager.CreateCurveFromKeyframes -= value;
        }

        public static event On.SceneColorManager.hook_AverageKeyframe AverageKeyframe
        {
            add => On.SceneColorManager.AverageKeyframe += value;
            remove => On.SceneColorManager.AverageKeyframe -= value;
        }

        public static event On.SceneColorManager.hook_PairCurvesKeyframes PairCurvesKeyframes
        {
            add => On.SceneColorManager.PairCurvesKeyframes += value;
            remove => On.SceneColorManager.PairCurvesKeyframes -= value;
        }

        public static event On.SceneColorManager.hook_UpdateScriptParameters UpdateScriptParameters
        {
            add => On.SceneColorManager.UpdateScriptParameters += value;
            remove => On.SceneColorManager.UpdateScriptParameters -= value;
        }

        public static event On.SceneColorManager.hook_PairedListsInitiated PairedListsInitiated
        {
            add => On.SceneColorManager.PairedListsInitiated += value;
            remove => On.SceneColorManager.PairedListsInitiated -= value;
        }

        public static event On.SceneColorManager.hook_UpdateSceneType UpdateSceneType
        {
            add => On.SceneColorManager.UpdateSceneType += value;
            remove => On.SceneColorManager.UpdateSceneType -= value;
        }
    }
}