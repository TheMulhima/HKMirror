using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ShopItemStats class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShopItemStats
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.ShopItemStats.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.ShopItemStats.orig_Awake orig,ShopItemStats self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.ShopItemStats.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.ShopItemStats.orig_OnEnable orig,ShopItemStats self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.ShopItemStats.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.ShopItemStats.orig_Update orig,ShopItemStats self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetCost()
{
if (!HookedList.Contains("GetCost"))
{
HookedList.Add("GetCost");
On.ShopItemStats.GetCost += GetCost;

}
}
internal static event Delegates.GetCost_BeforeArgs _beforeGetCost;
internal static event Delegates.GetCost_AfterArgs _afterGetCost;
private static int GetCost(On.ShopItemStats.orig_GetCost orig,ShopItemStats self)
{
Delegates.Params_GetCost @params = new() 
{
self = self
};
if (_beforeGetCost != null)
{
foreach (Delegates.GetCost_BeforeArgs toInvoke in _beforeGetCost.GetInvocationList())
{
try
{
_beforeGetCost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetCost != null)
{
foreach (Delegates.GetCost_AfterArgs toInvoke in _afterGetCost.GetInvocationList())
{
try
{
retVal = _afterGetCost.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetNotchCost()
{
if (!HookedList.Contains("GetNotchCost"))
{
HookedList.Add("GetNotchCost");
On.ShopItemStats.GetNotchCost += GetNotchCost;

}
}
internal static event Delegates.GetNotchCost_BeforeArgs _beforeGetNotchCost;
internal static event Delegates.GetNotchCost_AfterArgs _afterGetNotchCost;
private static int GetNotchCost(On.ShopItemStats.orig_GetNotchCost orig,ShopItemStats self)
{
Delegates.Params_GetNotchCost @params = new() 
{
self = self
};
if (_beforeGetNotchCost != null)
{
foreach (Delegates.GetNotchCost_BeforeArgs toInvoke in _beforeGetNotchCost.GetInvocationList())
{
try
{
_beforeGetNotchCost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetNotchCost != null)
{
foreach (Delegates.GetNotchCost_AfterArgs toInvoke in _afterGetNotchCost.GetInvocationList())
{
try
{
retVal = _afterGetNotchCost.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetCharmsRequired()
{
if (!HookedList.Contains("GetCharmsRequired"))
{
HookedList.Add("GetCharmsRequired");
On.ShopItemStats.GetCharmsRequired += GetCharmsRequired;

}
}
internal static event Delegates.GetCharmsRequired_BeforeArgs _beforeGetCharmsRequired;
internal static event Delegates.GetCharmsRequired_AfterArgs _afterGetCharmsRequired;
private static int GetCharmsRequired(On.ShopItemStats.orig_GetCharmsRequired orig,ShopItemStats self)
{
Delegates.Params_GetCharmsRequired @params = new() 
{
self = self
};
if (_beforeGetCharmsRequired != null)
{
foreach (Delegates.GetCharmsRequired_BeforeArgs toInvoke in _beforeGetCharmsRequired.GetInvocationList())
{
try
{
_beforeGetCharmsRequired?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetCharmsRequired != null)
{
foreach (Delegates.GetCharmsRequired_AfterArgs toInvoke in _afterGetCharmsRequired.GetInvocationList())
{
try
{
retVal = _afterGetCharmsRequired.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRelicNumber()
{
if (!HookedList.Contains("GetRelicNumber"))
{
HookedList.Add("GetRelicNumber");
On.ShopItemStats.GetRelicNumber += GetRelicNumber;

}
}
internal static event Delegates.GetRelicNumber_BeforeArgs _beforeGetRelicNumber;
internal static event Delegates.GetRelicNumber_AfterArgs _afterGetRelicNumber;
private static int GetRelicNumber(On.ShopItemStats.orig_GetRelicNumber orig,ShopItemStats self)
{
Delegates.Params_GetRelicNumber @params = new() 
{
self = self
};
if (_beforeGetRelicNumber != null)
{
foreach (Delegates.GetRelicNumber_BeforeArgs toInvoke in _beforeGetRelicNumber.GetInvocationList())
{
try
{
_beforeGetRelicNumber?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetRelicNumber != null)
{
foreach (Delegates.GetRelicNumber_AfterArgs toInvoke in _afterGetRelicNumber.GetInvocationList())
{
try
{
retVal = _afterGetRelicNumber.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetNameConvo()
{
if (!HookedList.Contains("GetNameConvo"))
{
HookedList.Add("GetNameConvo");
On.ShopItemStats.GetNameConvo += GetNameConvo;

}
}
internal static event Delegates.GetNameConvo_BeforeArgs _beforeGetNameConvo;
internal static event Delegates.GetNameConvo_AfterArgs _afterGetNameConvo;
private static string GetNameConvo(On.ShopItemStats.orig_GetNameConvo orig,ShopItemStats self)
{
Delegates.Params_GetNameConvo @params = new() 
{
self = self
};
if (_beforeGetNameConvo != null)
{
foreach (Delegates.GetNameConvo_BeforeArgs toInvoke in _beforeGetNameConvo.GetInvocationList())
{
try
{
_beforeGetNameConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetNameConvo != null)
{
foreach (Delegates.GetNameConvo_AfterArgs toInvoke in _afterGetNameConvo.GetInvocationList())
{
try
{
retVal = _afterGetNameConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetDescConvo()
{
if (!HookedList.Contains("GetDescConvo"))
{
HookedList.Add("GetDescConvo");
On.ShopItemStats.GetDescConvo += GetDescConvo;

}
}
internal static event Delegates.GetDescConvo_BeforeArgs _beforeGetDescConvo;
internal static event Delegates.GetDescConvo_AfterArgs _afterGetDescConvo;
private static string GetDescConvo(On.ShopItemStats.orig_GetDescConvo orig,ShopItemStats self)
{
Delegates.Params_GetDescConvo @params = new() 
{
self = self
};
if (_beforeGetDescConvo != null)
{
foreach (Delegates.GetDescConvo_BeforeArgs toInvoke in _beforeGetDescConvo.GetInvocationList())
{
try
{
_beforeGetDescConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetDescConvo != null)
{
foreach (Delegates.GetDescConvo_AfterArgs toInvoke in _afterGetDescConvo.GetInvocationList())
{
try
{
retVal = _afterGetDescConvo.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPlayerDataBoolName()
{
if (!HookedList.Contains("GetPlayerDataBoolName"))
{
HookedList.Add("GetPlayerDataBoolName");
On.ShopItemStats.GetPlayerDataBoolName += GetPlayerDataBoolName;

}
}
internal static event Delegates.GetPlayerDataBoolName_BeforeArgs _beforeGetPlayerDataBoolName;
internal static event Delegates.GetPlayerDataBoolName_AfterArgs _afterGetPlayerDataBoolName;
private static string GetPlayerDataBoolName(On.ShopItemStats.orig_GetPlayerDataBoolName orig,ShopItemStats self)
{
Delegates.Params_GetPlayerDataBoolName @params = new() 
{
self = self
};
if (_beforeGetPlayerDataBoolName != null)
{
foreach (Delegates.GetPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetPlayerDataBoolName.GetInvocationList())
{
try
{
_beforeGetPlayerDataBoolName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPlayerDataBoolName != null)
{
foreach (Delegates.GetPlayerDataBoolName_AfterArgs toInvoke in _afterGetPlayerDataBoolName.GetInvocationList())
{
try
{
retVal = _afterGetPlayerDataBoolName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRequiredPlayerDataBoolName()
{
if (!HookedList.Contains("GetRequiredPlayerDataBoolName"))
{
HookedList.Add("GetRequiredPlayerDataBoolName");
On.ShopItemStats.GetRequiredPlayerDataBoolName += GetRequiredPlayerDataBoolName;

}
}
internal static event Delegates.GetRequiredPlayerDataBoolName_BeforeArgs _beforeGetRequiredPlayerDataBoolName;
internal static event Delegates.GetRequiredPlayerDataBoolName_AfterArgs _afterGetRequiredPlayerDataBoolName;
private static string GetRequiredPlayerDataBoolName(On.ShopItemStats.orig_GetRequiredPlayerDataBoolName orig,ShopItemStats self)
{
Delegates.Params_GetRequiredPlayerDataBoolName @params = new() 
{
self = self
};
if (_beforeGetRequiredPlayerDataBoolName != null)
{
foreach (Delegates.GetRequiredPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetRequiredPlayerDataBoolName.GetInvocationList())
{
try
{
_beforeGetRequiredPlayerDataBoolName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetRequiredPlayerDataBoolName != null)
{
foreach (Delegates.GetRequiredPlayerDataBoolName_AfterArgs toInvoke in _afterGetRequiredPlayerDataBoolName.GetInvocationList())
{
try
{
retVal = _afterGetRequiredPlayerDataBoolName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetRemovalPlayerDataBoolName()
{
if (!HookedList.Contains("GetRemovalPlayerDataBoolName"))
{
HookedList.Add("GetRemovalPlayerDataBoolName");
On.ShopItemStats.GetRemovalPlayerDataBoolName += GetRemovalPlayerDataBoolName;

}
}
internal static event Delegates.GetRemovalPlayerDataBoolName_BeforeArgs _beforeGetRemovalPlayerDataBoolName;
internal static event Delegates.GetRemovalPlayerDataBoolName_AfterArgs _afterGetRemovalPlayerDataBoolName;
private static string GetRemovalPlayerDataBoolName(On.ShopItemStats.orig_GetRemovalPlayerDataBoolName orig,ShopItemStats self)
{
Delegates.Params_GetRemovalPlayerDataBoolName @params = new() 
{
self = self
};
if (_beforeGetRemovalPlayerDataBoolName != null)
{
foreach (Delegates.GetRemovalPlayerDataBoolName_BeforeArgs toInvoke in _beforeGetRemovalPlayerDataBoolName.GetInvocationList())
{
try
{
_beforeGetRemovalPlayerDataBoolName?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetRemovalPlayerDataBoolName != null)
{
foreach (Delegates.GetRemovalPlayerDataBoolName_AfterArgs toInvoke in _afterGetRemovalPlayerDataBoolName.GetInvocationList())
{
try
{
retVal = _afterGetRemovalPlayerDataBoolName.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetItemNumber()
{
if (!HookedList.Contains("GetItemNumber"))
{
HookedList.Add("GetItemNumber");
On.ShopItemStats.GetItemNumber += GetItemNumber;

}
}
internal static event Delegates.GetItemNumber_BeforeArgs _beforeGetItemNumber;
internal static event Delegates.GetItemNumber_AfterArgs _afterGetItemNumber;
private static int GetItemNumber(On.ShopItemStats.orig_GetItemNumber orig,ShopItemStats self)
{
Delegates.Params_GetItemNumber @params = new() 
{
self = self
};
if (_beforeGetItemNumber != null)
{
foreach (Delegates.GetItemNumber_BeforeArgs toInvoke in _beforeGetItemNumber.GetInvocationList())
{
try
{
_beforeGetItemNumber?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetItemNumber != null)
{
foreach (Delegates.GetItemNumber_AfterArgs toInvoke in _afterGetItemNumber.GetInvocationList())
{
try
{
retVal = _afterGetItemNumber.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSpecialType()
{
if (!HookedList.Contains("GetSpecialType"))
{
HookedList.Add("GetSpecialType");
On.ShopItemStats.GetSpecialType += GetSpecialType;

}
}
internal static event Delegates.GetSpecialType_BeforeArgs _beforeGetSpecialType;
internal static event Delegates.GetSpecialType_AfterArgs _afterGetSpecialType;
private static int GetSpecialType(On.ShopItemStats.orig_GetSpecialType orig,ShopItemStats self)
{
Delegates.Params_GetSpecialType @params = new() 
{
self = self
};
if (_beforeGetSpecialType != null)
{
foreach (Delegates.GetSpecialType_BeforeArgs toInvoke in _beforeGetSpecialType.GetInvocationList())
{
try
{
_beforeGetSpecialType?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetSpecialType != null)
{
foreach (Delegates.GetSpecialType_AfterArgs toInvoke in _afterGetSpecialType.GetInvocationList())
{
try
{
retVal = _afterGetSpecialType.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCanBuy()
{
if (!HookedList.Contains("CanBuy"))
{
HookedList.Add("CanBuy");
On.ShopItemStats.CanBuy += CanBuy;

}
}
internal static event Delegates.CanBuy_BeforeArgs _beforeCanBuy;
internal static event Delegates.CanBuy_AfterArgs _afterCanBuy;
private static bool CanBuy(On.ShopItemStats.orig_CanBuy orig,ShopItemStats self)
{
Delegates.Params_CanBuy @params = new() 
{
self = self
};
if (_beforeCanBuy != null)
{
foreach (Delegates.CanBuy_BeforeArgs toInvoke in _beforeCanBuy.GetInvocationList())
{
try
{
_beforeCanBuy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterCanBuy != null)
{
foreach (Delegates.CanBuy_AfterArgs toInvoke in _afterCanBuy.GetInvocationList())
{
try
{
retVal = _afterCanBuy.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetCanBuy()
{
if (!HookedList.Contains("SetCanBuy"))
{
HookedList.Add("SetCanBuy");
On.ShopItemStats.SetCanBuy += SetCanBuy;

}
}
internal static event Delegates.SetCanBuy_BeforeArgs _beforeSetCanBuy;
internal static event Delegates.SetCanBuy_AfterArgs _afterSetCanBuy;
private static void SetCanBuy(On.ShopItemStats.orig_SetCanBuy orig,ShopItemStats self,  bool can)
{
Delegates.Params_SetCanBuy @params = new() 
{
self = self
, can = can
};
if (_beforeSetCanBuy != null)
{
foreach (Delegates.SetCanBuy_BeforeArgs toInvoke in _beforeSetCanBuy.GetInvocationList())
{
try
{
_beforeSetCanBuy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
can = @params.can;
orig(self, can);
if (_afterSetCanBuy != null)
{
foreach (Delegates.SetCanBuy_AfterArgs toInvoke in _afterSetCanBuy.GetInvocationList())
{
try
{
_afterSetCanBuy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetDescConvo()
{
if (!HookedList.Contains("SetDescConvo"))
{
HookedList.Add("SetDescConvo");
On.ShopItemStats.SetDescConvo += SetDescConvo;

}
}
internal static event Delegates.SetDescConvo_BeforeArgs _beforeSetDescConvo;
internal static event Delegates.SetDescConvo_AfterArgs _afterSetDescConvo;
private static void SetDescConvo(On.ShopItemStats.orig_SetDescConvo orig,ShopItemStats self,  string convo)
{
Delegates.Params_SetDescConvo @params = new() 
{
self = self
, convo = convo
};
if (_beforeSetDescConvo != null)
{
foreach (Delegates.SetDescConvo_BeforeArgs toInvoke in _beforeSetDescConvo.GetInvocationList())
{
try
{
_beforeSetDescConvo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
convo = @params.convo;
orig(self, convo);
if (_afterSetDescConvo != null)
{
foreach (Delegates.SetDescConvo_AfterArgs toInvoke in _afterSetDescConvo.GetInvocationList())
{
try
{
_afterSetDescConvo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetCost()
{
if (!HookedList.Contains("SetCost"))
{
HookedList.Add("SetCost");
On.ShopItemStats.SetCost += SetCost;

}
}
internal static event Delegates.SetCost_BeforeArgs _beforeSetCost;
internal static event Delegates.SetCost_AfterArgs _afterSetCost;
private static void SetCost(On.ShopItemStats.orig_SetCost orig,ShopItemStats self,  int newCost)
{
Delegates.Params_SetCost @params = new() 
{
self = self
, newCost = newCost
};
if (_beforeSetCost != null)
{
foreach (Delegates.SetCost_BeforeArgs toInvoke in _beforeSetCost.GetInvocationList())
{
try
{
_beforeSetCost?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
newCost = @params.newCost;
orig(self, newCost);
if (_afterSetCost != null)
{
foreach (Delegates.SetCost_AfterArgs toInvoke in _afterSetCost.GetInvocationList())
{
try
{
_afterSetCost.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public ShopItemStats self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<ShopItemStats> orig, ShopItemStats self);
public sealed class Params_OnEnable
{
public ShopItemStats self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<ShopItemStats> orig, ShopItemStats self);
public sealed class Params_Update
{
public ShopItemStats self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<ShopItemStats> orig, ShopItemStats self);
public sealed class Params_GetCost
{
public ShopItemStats self;
}
public delegate void GetCost_BeforeArgs(Params_GetCost args);
public delegate int GetCost_AfterArgs(Params_GetCost args, int ret);
public delegate int GetCost_WithArgs (Func<ShopItemStats, int> orig, ShopItemStats self);
public sealed class Params_GetNotchCost
{
public ShopItemStats self;
}
public delegate void GetNotchCost_BeforeArgs(Params_GetNotchCost args);
public delegate int GetNotchCost_AfterArgs(Params_GetNotchCost args, int ret);
public delegate int GetNotchCost_WithArgs (Func<ShopItemStats, int> orig, ShopItemStats self);
public sealed class Params_GetCharmsRequired
{
public ShopItemStats self;
}
public delegate void GetCharmsRequired_BeforeArgs(Params_GetCharmsRequired args);
public delegate int GetCharmsRequired_AfterArgs(Params_GetCharmsRequired args, int ret);
public delegate int GetCharmsRequired_WithArgs (Func<ShopItemStats, int> orig, ShopItemStats self);
public sealed class Params_GetRelicNumber
{
public ShopItemStats self;
}
public delegate void GetRelicNumber_BeforeArgs(Params_GetRelicNumber args);
public delegate int GetRelicNumber_AfterArgs(Params_GetRelicNumber args, int ret);
public delegate int GetRelicNumber_WithArgs (Func<ShopItemStats, int> orig, ShopItemStats self);
public sealed class Params_GetNameConvo
{
public ShopItemStats self;
}
public delegate void GetNameConvo_BeforeArgs(Params_GetNameConvo args);
public delegate string GetNameConvo_AfterArgs(Params_GetNameConvo args, string ret);
public delegate string GetNameConvo_WithArgs (Func<ShopItemStats, string> orig, ShopItemStats self);
public sealed class Params_GetDescConvo
{
public ShopItemStats self;
}
public delegate void GetDescConvo_BeforeArgs(Params_GetDescConvo args);
public delegate string GetDescConvo_AfterArgs(Params_GetDescConvo args, string ret);
public delegate string GetDescConvo_WithArgs (Func<ShopItemStats, string> orig, ShopItemStats self);
public sealed class Params_GetPlayerDataBoolName
{
public ShopItemStats self;
}
public delegate void GetPlayerDataBoolName_BeforeArgs(Params_GetPlayerDataBoolName args);
public delegate string GetPlayerDataBoolName_AfterArgs(Params_GetPlayerDataBoolName args, string ret);
public delegate string GetPlayerDataBoolName_WithArgs (Func<ShopItemStats, string> orig, ShopItemStats self);
public sealed class Params_GetRequiredPlayerDataBoolName
{
public ShopItemStats self;
}
public delegate void GetRequiredPlayerDataBoolName_BeforeArgs(Params_GetRequiredPlayerDataBoolName args);
public delegate string GetRequiredPlayerDataBoolName_AfterArgs(Params_GetRequiredPlayerDataBoolName args, string ret);
public delegate string GetRequiredPlayerDataBoolName_WithArgs (Func<ShopItemStats, string> orig, ShopItemStats self);
public sealed class Params_GetRemovalPlayerDataBoolName
{
public ShopItemStats self;
}
public delegate void GetRemovalPlayerDataBoolName_BeforeArgs(Params_GetRemovalPlayerDataBoolName args);
public delegate string GetRemovalPlayerDataBoolName_AfterArgs(Params_GetRemovalPlayerDataBoolName args, string ret);
public delegate string GetRemovalPlayerDataBoolName_WithArgs (Func<ShopItemStats, string> orig, ShopItemStats self);
public sealed class Params_GetItemNumber
{
public ShopItemStats self;
}
public delegate void GetItemNumber_BeforeArgs(Params_GetItemNumber args);
public delegate int GetItemNumber_AfterArgs(Params_GetItemNumber args, int ret);
public delegate int GetItemNumber_WithArgs (Func<ShopItemStats, int> orig, ShopItemStats self);
public sealed class Params_GetSpecialType
{
public ShopItemStats self;
}
public delegate void GetSpecialType_BeforeArgs(Params_GetSpecialType args);
public delegate int GetSpecialType_AfterArgs(Params_GetSpecialType args, int ret);
public delegate int GetSpecialType_WithArgs (Func<ShopItemStats, int> orig, ShopItemStats self);
public sealed class Params_CanBuy
{
public ShopItemStats self;
}
public delegate void CanBuy_BeforeArgs(Params_CanBuy args);
public delegate bool CanBuy_AfterArgs(Params_CanBuy args, bool ret);
public delegate bool CanBuy_WithArgs (Func<ShopItemStats, bool> orig, ShopItemStats self);
public sealed class Params_SetCanBuy
{
public ShopItemStats self;
public bool can;
}
public delegate void SetCanBuy_BeforeArgs(Params_SetCanBuy args);
public delegate void SetCanBuy_AfterArgs(Params_SetCanBuy args);
public delegate void SetCanBuy_WithArgs (Action<ShopItemStats,  bool> orig, ShopItemStats self,  bool can);
public sealed class Params_SetDescConvo
{
public ShopItemStats self;
public string convo;
}
public delegate void SetDescConvo_BeforeArgs(Params_SetDescConvo args);
public delegate void SetDescConvo_AfterArgs(Params_SetDescConvo args);
public delegate void SetDescConvo_WithArgs (Action<ShopItemStats,  string> orig, ShopItemStats self,  string convo);
public sealed class Params_SetCost
{
public ShopItemStats self;
public int newCost;
}
public delegate void SetCost_BeforeArgs(Params_SetCost args);
public delegate void SetCost_AfterArgs(Params_SetCost args);
public delegate void SetCost_WithArgs (Action<ShopItemStats,  int> orig, ShopItemStats self,  int newCost);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.GetCost_BeforeArgs GetCost
{
add
{

HookHandler._beforeGetCost += value;
HookHandler.HookGetCost();
}
remove => HookHandler._beforeGetCost -= value;
}
public static event Delegates.GetNotchCost_BeforeArgs GetNotchCost
{
add
{

HookHandler._beforeGetNotchCost += value;
HookHandler.HookGetNotchCost();
}
remove => HookHandler._beforeGetNotchCost -= value;
}
public static event Delegates.GetCharmsRequired_BeforeArgs GetCharmsRequired
{
add
{

HookHandler._beforeGetCharmsRequired += value;
HookHandler.HookGetCharmsRequired();
}
remove => HookHandler._beforeGetCharmsRequired -= value;
}
public static event Delegates.GetRelicNumber_BeforeArgs GetRelicNumber
{
add
{

HookHandler._beforeGetRelicNumber += value;
HookHandler.HookGetRelicNumber();
}
remove => HookHandler._beforeGetRelicNumber -= value;
}
public static event Delegates.GetNameConvo_BeforeArgs GetNameConvo
{
add
{

HookHandler._beforeGetNameConvo += value;
HookHandler.HookGetNameConvo();
}
remove => HookHandler._beforeGetNameConvo -= value;
}
public static event Delegates.GetDescConvo_BeforeArgs GetDescConvo
{
add
{

HookHandler._beforeGetDescConvo += value;
HookHandler.HookGetDescConvo();
}
remove => HookHandler._beforeGetDescConvo -= value;
}
public static event Delegates.GetPlayerDataBoolName_BeforeArgs GetPlayerDataBoolName
{
add
{

HookHandler._beforeGetPlayerDataBoolName += value;
HookHandler.HookGetPlayerDataBoolName();
}
remove => HookHandler._beforeGetPlayerDataBoolName -= value;
}
public static event Delegates.GetRequiredPlayerDataBoolName_BeforeArgs GetRequiredPlayerDataBoolName
{
add
{

HookHandler._beforeGetRequiredPlayerDataBoolName += value;
HookHandler.HookGetRequiredPlayerDataBoolName();
}
remove => HookHandler._beforeGetRequiredPlayerDataBoolName -= value;
}
public static event Delegates.GetRemovalPlayerDataBoolName_BeforeArgs GetRemovalPlayerDataBoolName
{
add
{

HookHandler._beforeGetRemovalPlayerDataBoolName += value;
HookHandler.HookGetRemovalPlayerDataBoolName();
}
remove => HookHandler._beforeGetRemovalPlayerDataBoolName -= value;
}
public static event Delegates.GetItemNumber_BeforeArgs GetItemNumber
{
add
{

HookHandler._beforeGetItemNumber += value;
HookHandler.HookGetItemNumber();
}
remove => HookHandler._beforeGetItemNumber -= value;
}
public static event Delegates.GetSpecialType_BeforeArgs GetSpecialType
{
add
{

HookHandler._beforeGetSpecialType += value;
HookHandler.HookGetSpecialType();
}
remove => HookHandler._beforeGetSpecialType -= value;
}
public static event Delegates.CanBuy_BeforeArgs CanBuy
{
add
{

HookHandler._beforeCanBuy += value;
HookHandler.HookCanBuy();
}
remove => HookHandler._beforeCanBuy -= value;
}
public static event Delegates.SetCanBuy_BeforeArgs SetCanBuy
{
add
{

HookHandler._beforeSetCanBuy += value;
HookHandler.HookSetCanBuy();
}
remove => HookHandler._beforeSetCanBuy -= value;
}
public static event Delegates.SetDescConvo_BeforeArgs SetDescConvo
{
add
{

HookHandler._beforeSetDescConvo += value;
HookHandler.HookSetDescConvo();
}
remove => HookHandler._beforeSetDescConvo -= value;
}
public static event Delegates.SetCost_BeforeArgs SetCost
{
add
{

HookHandler._beforeSetCost += value;
HookHandler.HookSetCost();
}
remove => HookHandler._beforeSetCost -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.GetCost_AfterArgs GetCost
{
add
{

HookHandler._afterGetCost += value;
HookHandler.HookGetCost();
}
remove => HookHandler._afterGetCost -= value;
}
public static event Delegates.GetNotchCost_AfterArgs GetNotchCost
{
add
{

HookHandler._afterGetNotchCost += value;
HookHandler.HookGetNotchCost();
}
remove => HookHandler._afterGetNotchCost -= value;
}
public static event Delegates.GetCharmsRequired_AfterArgs GetCharmsRequired
{
add
{

HookHandler._afterGetCharmsRequired += value;
HookHandler.HookGetCharmsRequired();
}
remove => HookHandler._afterGetCharmsRequired -= value;
}
public static event Delegates.GetRelicNumber_AfterArgs GetRelicNumber
{
add
{

HookHandler._afterGetRelicNumber += value;
HookHandler.HookGetRelicNumber();
}
remove => HookHandler._afterGetRelicNumber -= value;
}
public static event Delegates.GetNameConvo_AfterArgs GetNameConvo
{
add
{

HookHandler._afterGetNameConvo += value;
HookHandler.HookGetNameConvo();
}
remove => HookHandler._afterGetNameConvo -= value;
}
public static event Delegates.GetDescConvo_AfterArgs GetDescConvo
{
add
{

HookHandler._afterGetDescConvo += value;
HookHandler.HookGetDescConvo();
}
remove => HookHandler._afterGetDescConvo -= value;
}
public static event Delegates.GetPlayerDataBoolName_AfterArgs GetPlayerDataBoolName
{
add
{

HookHandler._afterGetPlayerDataBoolName += value;
HookHandler.HookGetPlayerDataBoolName();
}
remove => HookHandler._afterGetPlayerDataBoolName -= value;
}
public static event Delegates.GetRequiredPlayerDataBoolName_AfterArgs GetRequiredPlayerDataBoolName
{
add
{

HookHandler._afterGetRequiredPlayerDataBoolName += value;
HookHandler.HookGetRequiredPlayerDataBoolName();
}
remove => HookHandler._afterGetRequiredPlayerDataBoolName -= value;
}
public static event Delegates.GetRemovalPlayerDataBoolName_AfterArgs GetRemovalPlayerDataBoolName
{
add
{

HookHandler._afterGetRemovalPlayerDataBoolName += value;
HookHandler.HookGetRemovalPlayerDataBoolName();
}
remove => HookHandler._afterGetRemovalPlayerDataBoolName -= value;
}
public static event Delegates.GetItemNumber_AfterArgs GetItemNumber
{
add
{

HookHandler._afterGetItemNumber += value;
HookHandler.HookGetItemNumber();
}
remove => HookHandler._afterGetItemNumber -= value;
}
public static event Delegates.GetSpecialType_AfterArgs GetSpecialType
{
add
{

HookHandler._afterGetSpecialType += value;
HookHandler.HookGetSpecialType();
}
remove => HookHandler._afterGetSpecialType -= value;
}
public static event Delegates.CanBuy_AfterArgs CanBuy
{
add
{

HookHandler._afterCanBuy += value;
HookHandler.HookCanBuy();
}
remove => HookHandler._afterCanBuy -= value;
}
public static event Delegates.SetCanBuy_AfterArgs SetCanBuy
{
add
{

HookHandler._afterSetCanBuy += value;
HookHandler.HookSetCanBuy();
}
remove => HookHandler._afterSetCanBuy -= value;
}
public static event Delegates.SetDescConvo_AfterArgs SetDescConvo
{
add
{

HookHandler._afterSetDescConvo += value;
HookHandler.HookSetDescConvo();
}
remove => HookHandler._afterSetDescConvo -= value;
}
public static event Delegates.SetCost_AfterArgs SetCost
{
add
{

HookHandler._afterSetCost += value;
HookHandler.HookSetCost();
}
remove => HookHandler._afterSetCost -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.ShopItemStats.hook_Awake Awake
{
add => On.ShopItemStats.Awake += value;
remove => On.ShopItemStats.Awake -= value;
}
public static event On.ShopItemStats.hook_OnEnable OnEnable
{
add => On.ShopItemStats.OnEnable += value;
remove => On.ShopItemStats.OnEnable -= value;
}
public static event On.ShopItemStats.hook_Update Update
{
add => On.ShopItemStats.Update += value;
remove => On.ShopItemStats.Update -= value;
}
public static event On.ShopItemStats.hook_GetCost GetCost
{
add => On.ShopItemStats.GetCost += value;
remove => On.ShopItemStats.GetCost -= value;
}
public static event On.ShopItemStats.hook_GetNotchCost GetNotchCost
{
add => On.ShopItemStats.GetNotchCost += value;
remove => On.ShopItemStats.GetNotchCost -= value;
}
public static event On.ShopItemStats.hook_GetCharmsRequired GetCharmsRequired
{
add => On.ShopItemStats.GetCharmsRequired += value;
remove => On.ShopItemStats.GetCharmsRequired -= value;
}
public static event On.ShopItemStats.hook_GetRelicNumber GetRelicNumber
{
add => On.ShopItemStats.GetRelicNumber += value;
remove => On.ShopItemStats.GetRelicNumber -= value;
}
public static event On.ShopItemStats.hook_GetNameConvo GetNameConvo
{
add => On.ShopItemStats.GetNameConvo += value;
remove => On.ShopItemStats.GetNameConvo -= value;
}
public static event On.ShopItemStats.hook_GetDescConvo GetDescConvo
{
add => On.ShopItemStats.GetDescConvo += value;
remove => On.ShopItemStats.GetDescConvo -= value;
}
public static event On.ShopItemStats.hook_GetPlayerDataBoolName GetPlayerDataBoolName
{
add => On.ShopItemStats.GetPlayerDataBoolName += value;
remove => On.ShopItemStats.GetPlayerDataBoolName -= value;
}
public static event On.ShopItemStats.hook_GetRequiredPlayerDataBoolName GetRequiredPlayerDataBoolName
{
add => On.ShopItemStats.GetRequiredPlayerDataBoolName += value;
remove => On.ShopItemStats.GetRequiredPlayerDataBoolName -= value;
}
public static event On.ShopItemStats.hook_GetRemovalPlayerDataBoolName GetRemovalPlayerDataBoolName
{
add => On.ShopItemStats.GetRemovalPlayerDataBoolName += value;
remove => On.ShopItemStats.GetRemovalPlayerDataBoolName -= value;
}
public static event On.ShopItemStats.hook_GetItemNumber GetItemNumber
{
add => On.ShopItemStats.GetItemNumber += value;
remove => On.ShopItemStats.GetItemNumber -= value;
}
public static event On.ShopItemStats.hook_GetSpecialType GetSpecialType
{
add => On.ShopItemStats.GetSpecialType += value;
remove => On.ShopItemStats.GetSpecialType -= value;
}
public static event On.ShopItemStats.hook_CanBuy CanBuy
{
add => On.ShopItemStats.CanBuy += value;
remove => On.ShopItemStats.CanBuy -= value;
}
public static event On.ShopItemStats.hook_SetCanBuy SetCanBuy
{
add => On.ShopItemStats.SetCanBuy += value;
remove => On.ShopItemStats.SetCanBuy -= value;
}
public static event On.ShopItemStats.hook_SetDescConvo SetDescConvo
{
add => On.ShopItemStats.SetDescConvo += value;
remove => On.ShopItemStats.SetDescConvo -= value;
}
public static event On.ShopItemStats.hook_SetCost SetCost
{
add => On.ShopItemStats.SetCost += value;
remove => On.ShopItemStats.SetCost -= value;
}
}

}
