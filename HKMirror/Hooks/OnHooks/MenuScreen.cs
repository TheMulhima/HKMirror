using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for MenuScreen class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuScreen
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_screenCanvasGroup()
{
if (!HookedList.Contains("get_screenCanvasGroup"))
{
HookedList.Add("get_screenCanvasGroup");
new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuScreen), "get_screenCanvasGroup", true), get_screenCanvasGroup);

}
}
internal static event Delegates.get_screenCanvasGroup_BeforeArgs _beforeget_screenCanvasGroup;
internal static event Delegates.get_screenCanvasGroup_AfterArgs _afterget_screenCanvasGroup;
private static UnityEngine.CanvasGroup get_screenCanvasGroup(Func<MenuScreen, UnityEngine.CanvasGroup> orig, MenuScreen self)
{
Delegates.Params_get_screenCanvasGroup @params = new() 
{
self = self
};
if (_beforeget_screenCanvasGroup != null)
{
foreach (Delegates.get_screenCanvasGroup_BeforeArgs toInvoke in _beforeget_screenCanvasGroup.GetInvocationList())
{
try
{
_beforeget_screenCanvasGroup?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_screenCanvasGroup != null)
{
foreach (Delegates.get_screenCanvasGroup_AfterArgs toInvoke in _afterget_screenCanvasGroup.GetInvocationList())
{
try
{
retVal = _afterget_screenCanvasGroup.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHighlightDefault()
{
if (!HookedList.Contains("HighlightDefault"))
{
HookedList.Add("HighlightDefault");
On.MenuScreen.HighlightDefault += HighlightDefault;

}
}
internal static event Delegates.HighlightDefault_BeforeArgs _beforeHighlightDefault;
internal static event Delegates.HighlightDefault_AfterArgs _afterHighlightDefault;
private static void HighlightDefault(On.MenuScreen.orig_HighlightDefault orig,MenuScreen self)
{
Delegates.Params_HighlightDefault @params = new() 
{
self = self
};
if (_beforeHighlightDefault != null)
{
foreach (Delegates.HighlightDefault_BeforeArgs toInvoke in _beforeHighlightDefault.GetInvocationList())
{
try
{
_beforeHighlightDefault?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterHighlightDefault != null)
{
foreach (Delegates.HighlightDefault_AfterArgs toInvoke in _afterHighlightDefault.GetInvocationList())
{
try
{
_afterHighlightDefault.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_screenCanvasGroup
{
public MenuScreen self;
}
public delegate void get_screenCanvasGroup_BeforeArgs(Params_get_screenCanvasGroup args);
public delegate UnityEngine.CanvasGroup get_screenCanvasGroup_AfterArgs(Params_get_screenCanvasGroup args, UnityEngine.CanvasGroup ret);
public delegate UnityEngine.CanvasGroup get_screenCanvasGroup_WithArgs (Func<MenuScreen, UnityEngine.CanvasGroup> orig, MenuScreen self);
public sealed class Params_HighlightDefault
{
public MenuScreen self;
}
public delegate void HighlightDefault_BeforeArgs(Params_HighlightDefault args);
public delegate void HighlightDefault_AfterArgs(Params_HighlightDefault args);
public delegate void HighlightDefault_WithArgs (Action<MenuScreen> orig, MenuScreen self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_screenCanvasGroup_BeforeArgs get_screenCanvasGroup
{
add
{

HookHandler._beforeget_screenCanvasGroup += value;
HookHandler.Hookget_screenCanvasGroup();
}
remove => HookHandler._beforeget_screenCanvasGroup -= value;
}
public static event Delegates.HighlightDefault_BeforeArgs HighlightDefault
{
add
{

HookHandler._beforeHighlightDefault += value;
HookHandler.HookHighlightDefault();
}
remove => HookHandler._beforeHighlightDefault -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_screenCanvasGroup_AfterArgs get_screenCanvasGroup
{
add
{

HookHandler._afterget_screenCanvasGroup += value;
HookHandler.Hookget_screenCanvasGroup();
}
remove => HookHandler._afterget_screenCanvasGroup -= value;
}
public static event Delegates.HighlightDefault_AfterArgs HighlightDefault
{
add
{

HookHandler._afterHighlightDefault += value;
HookHandler.HookHighlightDefault();
}
remove => HookHandler._afterHighlightDefault -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_screenCanvasGroup_WithArgs get_screenCanvasGroup
{
add => HookEndpointManager.Add<Delegates.get_screenCanvasGroup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(MenuScreen), "get_screenCanvasGroup", true), value);
remove => HookEndpointManager.Remove<Delegates.get_screenCanvasGroup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(MenuScreen), "get_screenCanvasGroup", true), value);
}
public static event On.MenuScreen.hook_HighlightDefault HighlightDefault
{
add => On.MenuScreen.HighlightDefault += value;
remove => On.MenuScreen.HighlightDefault -= value;
}
}

}
