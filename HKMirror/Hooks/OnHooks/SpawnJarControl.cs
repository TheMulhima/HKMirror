namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SpawnJarControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSpawnJarControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.SpawnJarControl.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.SpawnJarControl.orig_Awake orig, SpawnJarControl self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.SpawnJarControl.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.SpawnJarControl.orig_OnEnable orig, SpawnJarControl self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookBehaviour()
        {
            if (!HookedList.Contains("Behaviour"))
            {
                HookedList.Add("Behaviour");
                On.SpawnJarControl.Behaviour += Behaviour;
            }
        }

        internal static event Delegates.Behaviour_BeforeArgs _beforeBehaviour;

        private static IEnumerator Behaviour(On.SpawnJarControl.orig_Behaviour orig, SpawnJarControl self)
        {
            Delegates.Params_Behaviour @params = new()
            {
                self = self
            };
            _beforeBehaviour?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookSetEnemySpawn()
        {
            if (!HookedList.Contains("SetEnemySpawn"))
            {
                HookedList.Add("SetEnemySpawn");
                On.SpawnJarControl.SetEnemySpawn += SetEnemySpawn;
            }
        }

        internal static event Delegates.SetEnemySpawn_BeforeArgs _beforeSetEnemySpawn;
        internal static event Delegates.SetEnemySpawn_NormalArgs _afterSetEnemySpawn;

        private static void SetEnemySpawn(On.SpawnJarControl.orig_SetEnemySpawn orig, SpawnJarControl self,
            GameObject prefab, int health)
        {
            Delegates.Params_SetEnemySpawn @params = new()
            {
                self = self, prefab = prefab, health = health
            };
            _beforeSetEnemySpawn?.Invoke(@params);
            self = @params.self;
            prefab = @params.prefab;
            health = @params.health;
            orig(self, prefab, health);
            if (_afterSetEnemySpawn != null) _afterSetEnemySpawn.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Behaviour_BeforeArgs(Params_Behaviour args);

        public delegate IEnumerator Behaviour_NormalArgs(Params_Behaviour args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void SetEnemySpawn_BeforeArgs(Params_SetEnemySpawn args);

        public delegate void SetEnemySpawn_NormalArgs(Params_SetEnemySpawn args);

        public sealed class Params_Awake
        {
            public SpawnJarControl self;
        }

        public sealed class Params_OnEnable
        {
            public SpawnJarControl self;
        }

        public sealed class Params_Behaviour
        {
            public SpawnJarControl self;
        }

        public sealed class Params_SetEnemySpawn
        {
            public int health;
            public GameObject prefab;
            public SpawnJarControl self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Behaviour_BeforeArgs Behaviour
        {
            add
            {
                HookHandler._beforeBehaviour += value;
                HookHandler.HookBehaviour();
            }
            remove => HookHandler._beforeBehaviour -= value;
        }

        public static event Delegates.SetEnemySpawn_BeforeArgs SetEnemySpawn
        {
            add
            {
                HookHandler._beforeSetEnemySpawn += value;
                HookHandler.HookSetEnemySpawn();
            }
            remove => HookHandler._beforeSetEnemySpawn -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.SetEnemySpawn_NormalArgs SetEnemySpawn
        {
            add
            {
                HookHandler._afterSetEnemySpawn += value;
                HookHandler.HookSetEnemySpawn();
            }
            remove => HookHandler._afterSetEnemySpawn -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SpawnJarControl.hook_Awake Awake
        {
            add => On.SpawnJarControl.Awake += value;
            remove => On.SpawnJarControl.Awake -= value;
        }

        public static event On.SpawnJarControl.hook_OnEnable OnEnable
        {
            add => On.SpawnJarControl.OnEnable += value;
            remove => On.SpawnJarControl.OnEnable -= value;
        }

        public static event On.SpawnJarControl.hook_Behaviour Behaviour
        {
            add => On.SpawnJarControl.Behaviour += value;
            remove => On.SpawnJarControl.Behaviour -= value;
        }

        public static event On.SpawnJarControl.hook_SetEnemySpawn SetEnemySpawn
        {
            add => On.SpawnJarControl.SetEnemySpawn += value;
            remove => On.SpawnJarControl.SetEnemySpawn -= value;
        }
    }
}