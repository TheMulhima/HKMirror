using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for GodfinderIcon class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGodfinderIcon
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.GodfinderIcon.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.GodfinderIcon.orig_Awake orig, GodfinderIcon self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.GodfinderIcon.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.GodfinderIcon.orig_Start orig, GodfinderIcon self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.GodfinderIcon.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.GodfinderIcon.orig_Update orig, GodfinderIcon self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowIcon()
        {
            if (!HookedList.Contains("ShowIcon"))
            {
                HookedList.Add("ShowIcon");
                On.GodfinderIcon.ShowIcon += ShowIcon;
            }
        }

        internal static event Delegates.ShowIcon_BeforeArgs _beforeShowIcon;
        internal static event Delegates.ShowIcon_AfterArgs _afterShowIcon;

        private static void ShowIcon(On.GodfinderIcon.orig_ShowIcon orig, float delay, BossScene bossScene)
        {
            Delegates.Params_ShowIcon @params = new()
            {
                delay = delay, bossScene = bossScene
            };
            if (_beforeShowIcon != null)
            {
                foreach (Delegates.ShowIcon_BeforeArgs toInvoke in _beforeShowIcon.GetInvocationList())
                {
                    try
                    {
                        _beforeShowIcon?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            delay = @params.delay;
            bossScene = @params.bossScene;
            orig(delay, bossScene);
            if (_afterShowIcon != null)
            {
                foreach (Delegates.ShowIcon_AfterArgs toInvoke in _afterShowIcon.GetInvocationList())
                {
                    try
                    {
                        _afterShowIcon.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShowIconQueued()
        {
            if (!HookedList.Contains("ShowIconQueued"))
            {
                HookedList.Add("ShowIconQueued");
                On.GodfinderIcon.ShowIconQueued += ShowIconQueued;
            }
        }

        internal static event Delegates.ShowIconQueued_BeforeArgs _beforeShowIconQueued;
        internal static event Delegates.ShowIconQueued_AfterArgs _afterShowIconQueued;

        private static void ShowIconQueued(On.GodfinderIcon.orig_ShowIconQueued orig, float delay)
        {
            Delegates.Params_ShowIconQueued @params = new()
            {
                delay = delay
            };
            if (_beforeShowIconQueued != null)
            {
                foreach (Delegates.ShowIconQueued_BeforeArgs toInvoke in _beforeShowIconQueued.GetInvocationList())
                {
                    try
                    {
                        _beforeShowIconQueued?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            delay = @params.delay;
            orig(delay);
            if (_afterShowIconQueued != null)
            {
                foreach (Delegates.ShowIconQueued_AfterArgs toInvoke in _afterShowIconQueued.GetInvocationList())
                {
                    try
                    {
                        _afterShowIconQueued.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookShow()
        {
            if (!HookedList.Contains("Show"))
            {
                HookedList.Add("Show");
                On.GodfinderIcon.Show += Show;
            }
        }

        internal static event Delegates.Show_BeforeArgs _beforeShow;

        private static System.Collections.IEnumerator Show(On.GodfinderIcon.orig_Show orig, GodfinderIcon self,
            float delay)
        {
            Delegates.Params_Show @params = new()
            {
                self = self, delay = delay
            };
            if (_beforeShow != null)
            {
                foreach (Delegates.Show_BeforeArgs toInvoke in _beforeShow.GetInvocationList())
                {
                    try
                    {
                        _beforeShow?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            delay = @params.delay;
            return orig(self, delay);
        }

        internal static void HookHide()
        {
            if (!HookedList.Contains("Hide"))
            {
                HookedList.Add("Hide");
                On.GodfinderIcon.Hide += Hide;
            }
        }

        internal static event Delegates.Hide_BeforeArgs _beforeHide;
        internal static event Delegates.Hide_AfterArgs _afterHide;

        private static void Hide(On.GodfinderIcon.orig_Hide orig, GodfinderIcon self)
        {
            Delegates.Params_Hide @params = new()
            {
                self = self
            };
            if (_beforeHide != null)
            {
                foreach (Delegates.Hide_BeforeArgs toInvoke in _beforeHide.GetInvocationList())
                {
                    try
                    {
                        _beforeHide?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterHide != null)
            {
                foreach (Delegates.Hide_AfterArgs toInvoke in _afterHide.GetInvocationList())
                {
                    try
                    {
                        _afterHide.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Awake
        {
            public GodfinderIcon self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<GodfinderIcon> orig, GodfinderIcon self);

        public sealed class Params_Start
        {
            public GodfinderIcon self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<GodfinderIcon> orig, GodfinderIcon self);

        public sealed class Params_Update
        {
            public GodfinderIcon self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<GodfinderIcon> orig, GodfinderIcon self);

        public sealed class Params_ShowIcon
        {
            public float delay;
            public BossScene bossScene;
        }

        public delegate void ShowIcon_BeforeArgs(Params_ShowIcon args);

        public delegate void ShowIcon_AfterArgs(Params_ShowIcon args);

        public delegate void ShowIcon_WithArgs(Action<float, BossScene> orig, float delay, BossScene bossScene);

        public sealed class Params_ShowIconQueued
        {
            public float delay;
        }

        public delegate void ShowIconQueued_BeforeArgs(Params_ShowIconQueued args);

        public delegate void ShowIconQueued_AfterArgs(Params_ShowIconQueued args);

        public delegate void ShowIconQueued_WithArgs(Action<float> orig, float delay);

        public sealed class Params_Show
        {
            public GodfinderIcon self;
            public float delay;
        }

        public delegate void Show_BeforeArgs(Params_Show args);

        public delegate System.Collections.IEnumerator Show_AfterArgs(Params_Show args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator Show_WithArgs(
            Func<GodfinderIcon, float, System.Collections.IEnumerator> orig, GodfinderIcon self, float delay);

        public sealed class Params_Hide
        {
            public GodfinderIcon self;
        }

        public delegate void Hide_BeforeArgs(Params_Hide args);

        public delegate void Hide_AfterArgs(Params_Hide args);

        public delegate void Hide_WithArgs(Action<GodfinderIcon> orig, GodfinderIcon self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ShowIcon_BeforeArgs ShowIcon
        {
            add
            {
                HookHandler._beforeShowIcon += value;
                HookHandler.HookShowIcon();
            }
            remove => HookHandler._beforeShowIcon -= value;
        }

        public static event Delegates.ShowIconQueued_BeforeArgs ShowIconQueued
        {
            add
            {
                HookHandler._beforeShowIconQueued += value;
                HookHandler.HookShowIconQueued();
            }
            remove => HookHandler._beforeShowIconQueued -= value;
        }

        public static event Delegates.Show_BeforeArgs Show
        {
            add
            {
                HookHandler._beforeShow += value;
                HookHandler.HookShow();
            }
            remove => HookHandler._beforeShow -= value;
        }

        public static event Delegates.Hide_BeforeArgs Hide
        {
            add
            {
                HookHandler._beforeHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._beforeHide -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ShowIcon_AfterArgs ShowIcon
        {
            add
            {
                HookHandler._afterShowIcon += value;
                HookHandler.HookShowIcon();
            }
            remove => HookHandler._afterShowIcon -= value;
        }

        public static event Delegates.ShowIconQueued_AfterArgs ShowIconQueued
        {
            add
            {
                HookHandler._afterShowIconQueued += value;
                HookHandler.HookShowIconQueued();
            }
            remove => HookHandler._afterShowIconQueued -= value;
        }

        public static event Delegates.Hide_AfterArgs Hide
        {
            add
            {
                HookHandler._afterHide += value;
                HookHandler.HookHide();
            }
            remove => HookHandler._afterHide -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GodfinderIcon.hook_Awake Awake
        {
            add => On.GodfinderIcon.Awake += value;
            remove => On.GodfinderIcon.Awake -= value;
        }

        public static event On.GodfinderIcon.hook_Start Start
        {
            add => On.GodfinderIcon.Start += value;
            remove => On.GodfinderIcon.Start -= value;
        }

        public static event On.GodfinderIcon.hook_Update Update
        {
            add => On.GodfinderIcon.Update += value;
            remove => On.GodfinderIcon.Update -= value;
        }

        public static event On.GodfinderIcon.hook_ShowIcon ShowIcon
        {
            add => On.GodfinderIcon.ShowIcon += value;
            remove => On.GodfinderIcon.ShowIcon -= value;
        }

        public static event On.GodfinderIcon.hook_ShowIconQueued ShowIconQueued
        {
            add => On.GodfinderIcon.ShowIconQueued += value;
            remove => On.GodfinderIcon.ShowIconQueued -= value;
        }

        public static event On.GodfinderIcon.hook_Show Show
        {
            add => On.GodfinderIcon.Show += value;
            remove => On.GodfinderIcon.Show -= value;
        }

        public static event On.GodfinderIcon.hook_Hide Hide
        {
            add => On.GodfinderIcon.Hide += value;
            remove => On.GodfinderIcon.Hide -= value;
        }
    }
}