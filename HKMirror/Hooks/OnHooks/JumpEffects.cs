namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for JumpEffects class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnJumpEffects
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.JumpEffects.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.JumpEffects.orig_OnEnable orig, JumpEffects self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.JumpEffects.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.JumpEffects.orig_Update orig, JumpEffects self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetHero()
        {
            if (!HookedList.Contains("GetHero"))
            {
                HookedList.Add("GetHero");
                On.JumpEffects.GetHero += GetHero;
            }
        }

        internal static event Delegates.GetHero_BeforeArgs _beforeGetHero;
        internal static event Delegates.GetHero_AfterArgs _afterGetHero;

        private static void GetHero(On.JumpEffects.orig_GetHero orig, JumpEffects self)
        {
            Delegates.Params_GetHero @params = new()
            {
                self = self
            };
            if (_beforeGetHero != null)
                foreach (Delegates.GetHero_BeforeArgs toInvoke in _beforeGetHero.GetInvocationList())
                    try
                    {
                        _beforeGetHero?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGetHero != null)
                foreach (Delegates.GetHero_AfterArgs toInvoke in _afterGetHero.GetInvocationList())
                    try
                    {
                        _afterGetHero.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckForFall()
        {
            if (!HookedList.Contains("CheckForFall"))
            {
                HookedList.Add("CheckForFall");
                On.JumpEffects.CheckForFall += CheckForFall;
            }
        }

        internal static event Delegates.CheckForFall_BeforeArgs _beforeCheckForFall;
        internal static event Delegates.CheckForFall_AfterArgs _afterCheckForFall;

        private static void CheckForFall(On.JumpEffects.orig_CheckForFall orig, JumpEffects self)
        {
            Delegates.Params_CheckForFall @params = new()
            {
                self = self
            };
            if (_beforeCheckForFall != null)
                foreach (Delegates.CheckForFall_BeforeArgs toInvoke in _beforeCheckForFall.GetInvocationList())
                    try
                    {
                        _beforeCheckForFall?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckForFall != null)
                foreach (Delegates.CheckForFall_AfterArgs toInvoke in _afterCheckForFall.GetInvocationList())
                    try
                    {
                        _afterCheckForFall.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlayTrail()
        {
            if (!HookedList.Contains("PlayTrail"))
            {
                HookedList.Add("PlayTrail");
                On.JumpEffects.PlayTrail += PlayTrail;
            }
        }

        internal static event Delegates.PlayTrail_BeforeArgs _beforePlayTrail;
        internal static event Delegates.PlayTrail_AfterArgs _afterPlayTrail;

        private static void PlayTrail(On.JumpEffects.orig_PlayTrail orig, JumpEffects self)
        {
            Delegates.Params_PlayTrail @params = new()
            {
                self = self
            };
            if (_beforePlayTrail != null)
                foreach (Delegates.PlayTrail_BeforeArgs toInvoke in _beforePlayTrail.GetInvocationList())
                    try
                    {
                        _beforePlayTrail?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPlayTrail != null)
                foreach (Delegates.PlayTrail_AfterArgs toInvoke in _afterPlayTrail.GetInvocationList())
                    try
                    {
                        _afterPlayTrail.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPlayJumpPuff()
        {
            if (!HookedList.Contains("PlayJumpPuff"))
            {
                HookedList.Add("PlayJumpPuff");
                On.JumpEffects.PlayJumpPuff += PlayJumpPuff;
            }
        }

        internal static event Delegates.PlayJumpPuff_BeforeArgs _beforePlayJumpPuff;
        internal static event Delegates.PlayJumpPuff_AfterArgs _afterPlayJumpPuff;

        private static void PlayJumpPuff(On.JumpEffects.orig_PlayJumpPuff orig, JumpEffects self)
        {
            Delegates.Params_PlayJumpPuff @params = new()
            {
                self = self
            };
            if (_beforePlayJumpPuff != null)
                foreach (Delegates.PlayJumpPuff_BeforeArgs toInvoke in _beforePlayJumpPuff.GetInvocationList())
                    try
                    {
                        _beforePlayJumpPuff?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPlayJumpPuff != null)
                foreach (Delegates.PlayJumpPuff_AfterArgs toInvoke in _afterPlayJumpPuff.GetInvocationList())
                    try
                    {
                        _afterPlayJumpPuff.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSplashOut()
        {
            if (!HookedList.Contains("SplashOut"))
            {
                HookedList.Add("SplashOut");
                On.JumpEffects.SplashOut += SplashOut;
            }
        }

        internal static event Delegates.SplashOut_BeforeArgs _beforeSplashOut;
        internal static event Delegates.SplashOut_AfterArgs _afterSplashOut;

        private static void SplashOut(On.JumpEffects.orig_SplashOut orig, JumpEffects self)
        {
            Delegates.Params_SplashOut @params = new()
            {
                self = self
            };
            if (_beforeSplashOut != null)
                foreach (Delegates.SplashOut_BeforeArgs toInvoke in _beforeSplashOut.GetInvocationList())
                    try
                    {
                        _beforeSplashOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSplashOut != null)
                foreach (Delegates.SplashOut_AfterArgs toInvoke in _afterSplashOut.GetInvocationList())
                    try
                    {
                        _afterSplashOut.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CheckForFall_AfterArgs(Params_CheckForFall args);

        public delegate void CheckForFall_BeforeArgs(Params_CheckForFall args);

        public delegate void CheckForFall_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public delegate void GetHero_AfterArgs(Params_GetHero args);

        public delegate void GetHero_BeforeArgs(Params_GetHero args);

        public delegate void GetHero_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public delegate void PlayJumpPuff_AfterArgs(Params_PlayJumpPuff args);

        public delegate void PlayJumpPuff_BeforeArgs(Params_PlayJumpPuff args);

        public delegate void PlayJumpPuff_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public delegate void PlayTrail_AfterArgs(Params_PlayTrail args);

        public delegate void PlayTrail_BeforeArgs(Params_PlayTrail args);

        public delegate void PlayTrail_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public delegate void SplashOut_AfterArgs(Params_SplashOut args);

        public delegate void SplashOut_BeforeArgs(Params_SplashOut args);

        public delegate void SplashOut_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<JumpEffects> orig, JumpEffects self);

        public sealed class Params_OnEnable
        {
            public JumpEffects self;
        }

        public sealed class Params_Update
        {
            public JumpEffects self;
        }

        public sealed class Params_GetHero
        {
            public JumpEffects self;
        }

        public sealed class Params_CheckForFall
        {
            public JumpEffects self;
        }

        public sealed class Params_PlayTrail
        {
            public JumpEffects self;
        }

        public sealed class Params_PlayJumpPuff
        {
            public JumpEffects self;
        }

        public sealed class Params_SplashOut
        {
            public JumpEffects self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.GetHero_BeforeArgs GetHero
        {
            add
            {
                HookHandler._beforeGetHero += value;
                HookHandler.HookGetHero();
            }
            remove => HookHandler._beforeGetHero -= value;
        }

        public static event Delegates.CheckForFall_BeforeArgs CheckForFall
        {
            add
            {
                HookHandler._beforeCheckForFall += value;
                HookHandler.HookCheckForFall();
            }
            remove => HookHandler._beforeCheckForFall -= value;
        }

        public static event Delegates.PlayTrail_BeforeArgs PlayTrail
        {
            add
            {
                HookHandler._beforePlayTrail += value;
                HookHandler.HookPlayTrail();
            }
            remove => HookHandler._beforePlayTrail -= value;
        }

        public static event Delegates.PlayJumpPuff_BeforeArgs PlayJumpPuff
        {
            add
            {
                HookHandler._beforePlayJumpPuff += value;
                HookHandler.HookPlayJumpPuff();
            }
            remove => HookHandler._beforePlayJumpPuff -= value;
        }

        public static event Delegates.SplashOut_BeforeArgs SplashOut
        {
            add
            {
                HookHandler._beforeSplashOut += value;
                HookHandler.HookSplashOut();
            }
            remove => HookHandler._beforeSplashOut -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.GetHero_AfterArgs GetHero
        {
            add
            {
                HookHandler._afterGetHero += value;
                HookHandler.HookGetHero();
            }
            remove => HookHandler._afterGetHero -= value;
        }

        public static event Delegates.CheckForFall_AfterArgs CheckForFall
        {
            add
            {
                HookHandler._afterCheckForFall += value;
                HookHandler.HookCheckForFall();
            }
            remove => HookHandler._afterCheckForFall -= value;
        }

        public static event Delegates.PlayTrail_AfterArgs PlayTrail
        {
            add
            {
                HookHandler._afterPlayTrail += value;
                HookHandler.HookPlayTrail();
            }
            remove => HookHandler._afterPlayTrail -= value;
        }

        public static event Delegates.PlayJumpPuff_AfterArgs PlayJumpPuff
        {
            add
            {
                HookHandler._afterPlayJumpPuff += value;
                HookHandler.HookPlayJumpPuff();
            }
            remove => HookHandler._afterPlayJumpPuff -= value;
        }

        public static event Delegates.SplashOut_AfterArgs SplashOut
        {
            add
            {
                HookHandler._afterSplashOut += value;
                HookHandler.HookSplashOut();
            }
            remove => HookHandler._afterSplashOut -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.JumpEffects.hook_OnEnable OnEnable
        {
            add => On.JumpEffects.OnEnable += value;
            remove => On.JumpEffects.OnEnable -= value;
        }

        public static event On.JumpEffects.hook_Update Update
        {
            add => On.JumpEffects.Update += value;
            remove => On.JumpEffects.Update -= value;
        }

        public static event On.JumpEffects.hook_GetHero GetHero
        {
            add => On.JumpEffects.GetHero += value;
            remove => On.JumpEffects.GetHero -= value;
        }

        public static event On.JumpEffects.hook_CheckForFall CheckForFall
        {
            add => On.JumpEffects.CheckForFall += value;
            remove => On.JumpEffects.CheckForFall -= value;
        }

        public static event On.JumpEffects.hook_PlayTrail PlayTrail
        {
            add => On.JumpEffects.PlayTrail += value;
            remove => On.JumpEffects.PlayTrail -= value;
        }

        public static event On.JumpEffects.hook_PlayJumpPuff PlayJumpPuff
        {
            add => On.JumpEffects.PlayJumpPuff += value;
            remove => On.JumpEffects.PlayJumpPuff -= value;
        }

        public static event On.JumpEffects.hook_SplashOut SplashOut
        {
            add => On.JumpEffects.SplashOut += value;
            remove => On.JumpEffects.SplashOut -= value;
        }
    }
}