namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dStaticSpriteBatcher class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dStaticSpriteBatcher
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dStaticSpriteBatcher.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dStaticSpriteBatcher.orig_Awake orig, tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookUpgradeData()
        {
            if (!HookedList.Contains("UpgradeData"))
            {
                HookedList.Add("UpgradeData");
                On.tk2dStaticSpriteBatcher.UpgradeData += UpgradeData;
            }
        }

        internal static event Delegates.UpgradeData_BeforeArgs _beforeUpgradeData;
        internal static event Delegates.UpgradeData_NormalArgs _afterUpgradeData;

        private static bool UpgradeData(On.tk2dStaticSpriteBatcher.orig_UpgradeData orig, tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_UpgradeData @params = new()
            {
                self = self
            };
            _beforeUpgradeData?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterUpgradeData != null) retVal = _afterUpgradeData.Invoke(@params);
            return retVal;
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dStaticSpriteBatcher.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dStaticSpriteBatcher.orig_OnDestroy orig, tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookUpdateMatrices()
        {
            if (!HookedList.Contains("UpdateMatrices"))
            {
                HookedList.Add("UpdateMatrices");
                On.tk2dStaticSpriteBatcher.UpdateMatrices += UpdateMatrices;
            }
        }

        internal static event Delegates.UpdateMatrices_BeforeArgs _beforeUpdateMatrices;
        internal static event Delegates.UpdateMatrices_NormalArgs _afterUpdateMatrices;

        private static void UpdateMatrices(On.tk2dStaticSpriteBatcher.orig_UpdateMatrices orig,
            tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_UpdateMatrices @params = new()
            {
                self = self
            };
            _beforeUpdateMatrices?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMatrices != null) _afterUpdateMatrices.Invoke(@params);
        }

        internal static void HookBuild()
        {
            if (!HookedList.Contains("Build"))
            {
                HookedList.Add("Build");
                On.tk2dStaticSpriteBatcher.Build += Build;
            }
        }

        internal static event Delegates.Build_BeforeArgs _beforeBuild;
        internal static event Delegates.Build_NormalArgs _afterBuild;

        private static void Build(On.tk2dStaticSpriteBatcher.orig_Build orig, tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_Build @params = new()
            {
                self = self
            };
            _beforeBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuild != null) _afterBuild.Invoke(@params);
        }

        internal static void HookSortBatchedSprites()
        {
            if (!HookedList.Contains("SortBatchedSprites"))
            {
                HookedList.Add("SortBatchedSprites");
                On.tk2dStaticSpriteBatcher.SortBatchedSprites += SortBatchedSprites;
            }
        }

        internal static event Delegates.SortBatchedSprites_BeforeArgs _beforeSortBatchedSprites;
        internal static event Delegates.SortBatchedSprites_NormalArgs _afterSortBatchedSprites;

        private static void SortBatchedSprites(On.tk2dStaticSpriteBatcher.orig_SortBatchedSprites orig,
            tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_SortBatchedSprites @params = new()
            {
                self = self
            };
            _beforeSortBatchedSprites?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSortBatchedSprites != null) _afterSortBatchedSprites.Invoke(@params);
        }

        internal static void HookGetMaterial()
        {
            if (!HookedList.Contains("GetMaterial"))
            {
                HookedList.Add("GetMaterial");
                On.tk2dStaticSpriteBatcher.GetMaterial += GetMaterial;
            }
        }

        internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
        internal static event Delegates.GetMaterial_NormalArgs _afterGetMaterial;

        private static Material GetMaterial(On.tk2dStaticSpriteBatcher.orig_GetMaterial orig,
            tk2dStaticSpriteBatcher self, tk2dBatchedSprite bs)
        {
            Delegates.Params_GetMaterial @params = new()
            {
                self = self, bs = bs
            };
            _beforeGetMaterial?.Invoke(@params);
            self = @params.self;
            bs = @params.bs;
            var retVal = orig(self, bs);
            if (_afterGetMaterial != null) retVal = _afterGetMaterial.Invoke(@params);
            return retVal;
        }

        internal static void HookBuildRenderMesh()
        {
            if (!HookedList.Contains("BuildRenderMesh"))
            {
                HookedList.Add("BuildRenderMesh");
                On.tk2dStaticSpriteBatcher.BuildRenderMesh += BuildRenderMesh;
            }
        }

        internal static event Delegates.BuildRenderMesh_BeforeArgs _beforeBuildRenderMesh;
        internal static event Delegates.BuildRenderMesh_NormalArgs _afterBuildRenderMesh;

        private static void BuildRenderMesh(On.tk2dStaticSpriteBatcher.orig_BuildRenderMesh orig,
            tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_BuildRenderMesh @params = new()
            {
                self = self
            };
            _beforeBuildRenderMesh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuildRenderMesh != null) _afterBuildRenderMesh.Invoke(@params);
        }

        internal static void HookBuildPhysicsMesh()
        {
            if (!HookedList.Contains("BuildPhysicsMesh"))
            {
                HookedList.Add("BuildPhysicsMesh");
                On.tk2dStaticSpriteBatcher.BuildPhysicsMesh += BuildPhysicsMesh;
            }
        }

        internal static event Delegates.BuildPhysicsMesh_BeforeArgs _beforeBuildPhysicsMesh;
        internal static event Delegates.BuildPhysicsMesh_NormalArgs _afterBuildPhysicsMesh;

        private static void BuildPhysicsMesh(On.tk2dStaticSpriteBatcher.orig_BuildPhysicsMesh orig,
            tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_BuildPhysicsMesh @params = new()
            {
                self = self
            };
            _beforeBuildPhysicsMesh?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBuildPhysicsMesh != null) _afterBuildPhysicsMesh.Invoke(@params);
        }

        internal static void HookBuildPhysicsMesh2D()
        {
            if (!HookedList.Contains("BuildPhysicsMesh2D"))
            {
                HookedList.Add("BuildPhysicsMesh2D");
                On.tk2dStaticSpriteBatcher.BuildPhysicsMesh2D += BuildPhysicsMesh2D;
            }
        }

        internal static event Delegates.BuildPhysicsMesh2D_BeforeArgs _beforeBuildPhysicsMesh2D;
        internal static event Delegates.BuildPhysicsMesh2D_NormalArgs _afterBuildPhysicsMesh2D;

        private static void BuildPhysicsMesh2D(On.tk2dStaticSpriteBatcher.orig_BuildPhysicsMesh2D orig,
            tk2dStaticSpriteBatcher self, EdgeCollider2D[] edgeColliders, int numEdgeColliders)
        {
            Delegates.Params_BuildPhysicsMesh2D @params = new()
            {
                self = self, edgeColliders = edgeColliders, numEdgeColliders = numEdgeColliders
            };
            _beforeBuildPhysicsMesh2D?.Invoke(@params);
            self = @params.self;
            edgeColliders = @params.edgeColliders;
            numEdgeColliders = @params.numEdgeColliders;
            orig(self, edgeColliders, numEdgeColliders);
            if (_afterBuildPhysicsMesh2D != null) _afterBuildPhysicsMesh2D.Invoke(@params);
        }

        internal static void HookBuildPhysicsMesh3D()
        {
            if (!HookedList.Contains("BuildPhysicsMesh3D"))
            {
                HookedList.Add("BuildPhysicsMesh3D");
                On.tk2dStaticSpriteBatcher.BuildPhysicsMesh3D += BuildPhysicsMesh3D;
            }
        }

        internal static event Delegates.BuildPhysicsMesh3D_BeforeArgs _beforeBuildPhysicsMesh3D;
        internal static event Delegates.BuildPhysicsMesh3D_NormalArgs _afterBuildPhysicsMesh3D;

        private static void BuildPhysicsMesh3D(On.tk2dStaticSpriteBatcher.orig_BuildPhysicsMesh3D orig,
            tk2dStaticSpriteBatcher self, MeshCollider meshCollider, bool flattenDepth, int numVertices, int numIndices)
        {
            Delegates.Params_BuildPhysicsMesh3D @params = new()
            {
                self = self, meshCollider = meshCollider, flattenDepth = flattenDepth, numVertices = numVertices,
                numIndices = numIndices
            };
            _beforeBuildPhysicsMesh3D?.Invoke(@params);
            self = @params.self;
            meshCollider = @params.meshCollider;
            flattenDepth = @params.flattenDepth;
            numVertices = @params.numVertices;
            numIndices = @params.numIndices;
            orig(self, meshCollider, flattenDepth, numVertices, numIndices);
            if (_afterBuildPhysicsMesh3D != null) _afterBuildPhysicsMesh3D.Invoke(@params);
        }

        internal static void HookUsesSpriteCollection()
        {
            if (!HookedList.Contains("UsesSpriteCollection"))
            {
                HookedList.Add("UsesSpriteCollection");
                On.tk2dStaticSpriteBatcher.UsesSpriteCollection += UsesSpriteCollection;
            }
        }

        internal static event Delegates.UsesSpriteCollection_BeforeArgs _beforeUsesSpriteCollection;
        internal static event Delegates.UsesSpriteCollection_NormalArgs _afterUsesSpriteCollection;

        private static bool UsesSpriteCollection(On.tk2dStaticSpriteBatcher.orig_UsesSpriteCollection orig,
            tk2dStaticSpriteBatcher self, tk2dSpriteCollectionData spriteCollection)
        {
            Delegates.Params_UsesSpriteCollection @params = new()
            {
                self = self, spriteCollection = spriteCollection
            };
            _beforeUsesSpriteCollection?.Invoke(@params);
            self = @params.self;
            spriteCollection = @params.spriteCollection;
            var retVal = orig(self, spriteCollection);
            if (_afterUsesSpriteCollection != null) retVal = _afterUsesSpriteCollection.Invoke(@params);
            return retVal;
        }

        internal static void HookForceBuild()
        {
            if (!HookedList.Contains("ForceBuild"))
            {
                HookedList.Add("ForceBuild");
                On.tk2dStaticSpriteBatcher.ForceBuild += ForceBuild;
            }
        }

        internal static event Delegates.ForceBuild_BeforeArgs _beforeForceBuild;
        internal static event Delegates.ForceBuild_NormalArgs _afterForceBuild;

        private static void ForceBuild(On.tk2dStaticSpriteBatcher.orig_ForceBuild orig, tk2dStaticSpriteBatcher self)
        {
            Delegates.Params_ForceBuild @params = new()
            {
                self = self
            };
            _beforeForceBuild?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterForceBuild != null) _afterForceBuild.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Build_BeforeArgs(Params_Build args);

        public delegate void Build_NormalArgs(Params_Build args);

        public delegate void BuildPhysicsMesh_BeforeArgs(Params_BuildPhysicsMesh args);

        public delegate void BuildPhysicsMesh_NormalArgs(Params_BuildPhysicsMesh args);

        public delegate void BuildPhysicsMesh2D_BeforeArgs(Params_BuildPhysicsMesh2D args);

        public delegate void BuildPhysicsMesh2D_NormalArgs(Params_BuildPhysicsMesh2D args);

        public delegate void BuildPhysicsMesh3D_BeforeArgs(Params_BuildPhysicsMesh3D args);

        public delegate void BuildPhysicsMesh3D_NormalArgs(Params_BuildPhysicsMesh3D args);

        public delegate void BuildRenderMesh_BeforeArgs(Params_BuildRenderMesh args);

        public delegate void BuildRenderMesh_NormalArgs(Params_BuildRenderMesh args);

        public delegate void ForceBuild_BeforeArgs(Params_ForceBuild args);

        public delegate void ForceBuild_NormalArgs(Params_ForceBuild args);

        public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);

        public delegate Material GetMaterial_NormalArgs(Params_GetMaterial args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void SortBatchedSprites_BeforeArgs(Params_SortBatchedSprites args);

        public delegate void SortBatchedSprites_NormalArgs(Params_SortBatchedSprites args);

        public delegate void UpdateMatrices_BeforeArgs(Params_UpdateMatrices args);

        public delegate void UpdateMatrices_NormalArgs(Params_UpdateMatrices args);

        public delegate void UpgradeData_BeforeArgs(Params_UpgradeData args);

        public delegate bool UpgradeData_NormalArgs(Params_UpgradeData args);

        public delegate void UsesSpriteCollection_BeforeArgs(Params_UsesSpriteCollection args);

        public delegate bool UsesSpriteCollection_NormalArgs(Params_UsesSpriteCollection args);

        public sealed class Params_Awake
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_UpgradeData
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_UpdateMatrices
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_Build
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_SortBatchedSprites
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_GetMaterial
        {
            public tk2dBatchedSprite bs;
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_BuildRenderMesh
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_BuildPhysicsMesh
        {
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_BuildPhysicsMesh2D
        {
            public EdgeCollider2D[] edgeColliders;
            public int numEdgeColliders;
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_BuildPhysicsMesh3D
        {
            public bool flattenDepth;
            public MeshCollider meshCollider;
            public int numIndices;
            public int numVertices;
            public tk2dStaticSpriteBatcher self;
        }

        public sealed class Params_UsesSpriteCollection
        {
            public tk2dStaticSpriteBatcher self;
            public tk2dSpriteCollectionData spriteCollection;
        }

        public sealed class Params_ForceBuild
        {
            public tk2dStaticSpriteBatcher self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.UpgradeData_BeforeArgs UpgradeData
        {
            add
            {
                HookHandler._beforeUpgradeData += value;
                HookHandler.HookUpgradeData();
            }
            remove => HookHandler._beforeUpgradeData -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.UpdateMatrices_BeforeArgs UpdateMatrices
        {
            add
            {
                HookHandler._beforeUpdateMatrices += value;
                HookHandler.HookUpdateMatrices();
            }
            remove => HookHandler._beforeUpdateMatrices -= value;
        }

        public static event Delegates.Build_BeforeArgs Build
        {
            add
            {
                HookHandler._beforeBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._beforeBuild -= value;
        }

        public static event Delegates.SortBatchedSprites_BeforeArgs SortBatchedSprites
        {
            add
            {
                HookHandler._beforeSortBatchedSprites += value;
                HookHandler.HookSortBatchedSprites();
            }
            remove => HookHandler._beforeSortBatchedSprites -= value;
        }

        public static event Delegates.GetMaterial_BeforeArgs GetMaterial
        {
            add
            {
                HookHandler._beforeGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._beforeGetMaterial -= value;
        }

        public static event Delegates.BuildRenderMesh_BeforeArgs BuildRenderMesh
        {
            add
            {
                HookHandler._beforeBuildRenderMesh += value;
                HookHandler.HookBuildRenderMesh();
            }
            remove => HookHandler._beforeBuildRenderMesh -= value;
        }

        public static event Delegates.BuildPhysicsMesh_BeforeArgs BuildPhysicsMesh
        {
            add
            {
                HookHandler._beforeBuildPhysicsMesh += value;
                HookHandler.HookBuildPhysicsMesh();
            }
            remove => HookHandler._beforeBuildPhysicsMesh -= value;
        }

        public static event Delegates.BuildPhysicsMesh2D_BeforeArgs BuildPhysicsMesh2D
        {
            add
            {
                HookHandler._beforeBuildPhysicsMesh2D += value;
                HookHandler.HookBuildPhysicsMesh2D();
            }
            remove => HookHandler._beforeBuildPhysicsMesh2D -= value;
        }

        public static event Delegates.BuildPhysicsMesh3D_BeforeArgs BuildPhysicsMesh3D
        {
            add
            {
                HookHandler._beforeBuildPhysicsMesh3D += value;
                HookHandler.HookBuildPhysicsMesh3D();
            }
            remove => HookHandler._beforeBuildPhysicsMesh3D -= value;
        }

        public static event Delegates.UsesSpriteCollection_BeforeArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._beforeUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._beforeUsesSpriteCollection -= value;
        }

        public static event Delegates.ForceBuild_BeforeArgs ForceBuild
        {
            add
            {
                HookHandler._beforeForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._beforeForceBuild -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.UpgradeData_NormalArgs UpgradeData
        {
            add
            {
                HookHandler._afterUpgradeData += value;
                HookHandler.HookUpgradeData();
            }
            remove => HookHandler._afterUpgradeData -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.UpdateMatrices_NormalArgs UpdateMatrices
        {
            add
            {
                HookHandler._afterUpdateMatrices += value;
                HookHandler.HookUpdateMatrices();
            }
            remove => HookHandler._afterUpdateMatrices -= value;
        }

        public static event Delegates.Build_NormalArgs Build
        {
            add
            {
                HookHandler._afterBuild += value;
                HookHandler.HookBuild();
            }
            remove => HookHandler._afterBuild -= value;
        }

        public static event Delegates.SortBatchedSprites_NormalArgs SortBatchedSprites
        {
            add
            {
                HookHandler._afterSortBatchedSprites += value;
                HookHandler.HookSortBatchedSprites();
            }
            remove => HookHandler._afterSortBatchedSprites -= value;
        }

        public static event Delegates.GetMaterial_NormalArgs GetMaterial
        {
            add
            {
                HookHandler._afterGetMaterial += value;
                HookHandler.HookGetMaterial();
            }
            remove => HookHandler._afterGetMaterial -= value;
        }

        public static event Delegates.BuildRenderMesh_NormalArgs BuildRenderMesh
        {
            add
            {
                HookHandler._afterBuildRenderMesh += value;
                HookHandler.HookBuildRenderMesh();
            }
            remove => HookHandler._afterBuildRenderMesh -= value;
        }

        public static event Delegates.BuildPhysicsMesh_NormalArgs BuildPhysicsMesh
        {
            add
            {
                HookHandler._afterBuildPhysicsMesh += value;
                HookHandler.HookBuildPhysicsMesh();
            }
            remove => HookHandler._afterBuildPhysicsMesh -= value;
        }

        public static event Delegates.BuildPhysicsMesh2D_NormalArgs BuildPhysicsMesh2D
        {
            add
            {
                HookHandler._afterBuildPhysicsMesh2D += value;
                HookHandler.HookBuildPhysicsMesh2D();
            }
            remove => HookHandler._afterBuildPhysicsMesh2D -= value;
        }

        public static event Delegates.BuildPhysicsMesh3D_NormalArgs BuildPhysicsMesh3D
        {
            add
            {
                HookHandler._afterBuildPhysicsMesh3D += value;
                HookHandler.HookBuildPhysicsMesh3D();
            }
            remove => HookHandler._afterBuildPhysicsMesh3D -= value;
        }

        public static event Delegates.UsesSpriteCollection_NormalArgs UsesSpriteCollection
        {
            add
            {
                HookHandler._afterUsesSpriteCollection += value;
                HookHandler.HookUsesSpriteCollection();
            }
            remove => HookHandler._afterUsesSpriteCollection -= value;
        }

        public static event Delegates.ForceBuild_NormalArgs ForceBuild
        {
            add
            {
                HookHandler._afterForceBuild += value;
                HookHandler.HookForceBuild();
            }
            remove => HookHandler._afterForceBuild -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dStaticSpriteBatcher.hook_Awake Awake
        {
            add => On.tk2dStaticSpriteBatcher.Awake += value;
            remove => On.tk2dStaticSpriteBatcher.Awake -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_UpgradeData UpgradeData
        {
            add => On.tk2dStaticSpriteBatcher.UpgradeData += value;
            remove => On.tk2dStaticSpriteBatcher.UpgradeData -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_OnDestroy OnDestroy
        {
            add => On.tk2dStaticSpriteBatcher.OnDestroy += value;
            remove => On.tk2dStaticSpriteBatcher.OnDestroy -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_UpdateMatrices UpdateMatrices
        {
            add => On.tk2dStaticSpriteBatcher.UpdateMatrices += value;
            remove => On.tk2dStaticSpriteBatcher.UpdateMatrices -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_Build Build
        {
            add => On.tk2dStaticSpriteBatcher.Build += value;
            remove => On.tk2dStaticSpriteBatcher.Build -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_SortBatchedSprites SortBatchedSprites
        {
            add => On.tk2dStaticSpriteBatcher.SortBatchedSprites += value;
            remove => On.tk2dStaticSpriteBatcher.SortBatchedSprites -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_GetMaterial GetMaterial
        {
            add => On.tk2dStaticSpriteBatcher.GetMaterial += value;
            remove => On.tk2dStaticSpriteBatcher.GetMaterial -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_BuildRenderMesh BuildRenderMesh
        {
            add => On.tk2dStaticSpriteBatcher.BuildRenderMesh += value;
            remove => On.tk2dStaticSpriteBatcher.BuildRenderMesh -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_BuildPhysicsMesh BuildPhysicsMesh
        {
            add => On.tk2dStaticSpriteBatcher.BuildPhysicsMesh += value;
            remove => On.tk2dStaticSpriteBatcher.BuildPhysicsMesh -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_BuildPhysicsMesh2D BuildPhysicsMesh2D
        {
            add => On.tk2dStaticSpriteBatcher.BuildPhysicsMesh2D += value;
            remove => On.tk2dStaticSpriteBatcher.BuildPhysicsMesh2D -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_BuildPhysicsMesh3D BuildPhysicsMesh3D
        {
            add => On.tk2dStaticSpriteBatcher.BuildPhysicsMesh3D += value;
            remove => On.tk2dStaticSpriteBatcher.BuildPhysicsMesh3D -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_UsesSpriteCollection UsesSpriteCollection
        {
            add => On.tk2dStaticSpriteBatcher.UsesSpriteCollection += value;
            remove => On.tk2dStaticSpriteBatcher.UsesSpriteCollection -= value;
        }

        public static event On.tk2dStaticSpriteBatcher.hook_ForceBuild ForceBuild
        {
            add => On.tk2dStaticSpriteBatcher.ForceBuild += value;
            remove => On.tk2dStaticSpriteBatcher.ForceBuild -= value;
        }
    }
}