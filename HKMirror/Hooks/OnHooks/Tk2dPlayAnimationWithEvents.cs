using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Tk2dPlayAnimationWithEvents class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTk2dPlayAnimationWithEvents
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hook_getSprite()
        {
            if (!HookedList.Contains("_getSprite"))
            {
                HookedList.Add("_getSprite");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "_getSprite"), _getSprite);
            }
        }

        internal static event Delegates._getSprite_BeforeArgs _before_getSprite;
        internal static event Delegates._getSprite_NormalArgs _after_getSprite;

        private static void _getSprite(Action<Tk2dPlayAnimationWithEvents> orig, Tk2dPlayAnimationWithEvents self)
        {
            Delegates.Params__getSprite @params = new()
            {
                self = self
            };
            _before_getSprite?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_after_getSprite != null) _after_getSprite.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<Tk2dPlayAnimationWithEvents> orig, Tk2dPlayAnimationWithEvents self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<Tk2dPlayAnimationWithEvents> orig, Tk2dPlayAnimationWithEvents self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookDoPlayAnimationWithEvents()
        {
            if (!HookedList.Contains("DoPlayAnimationWithEvents"))
            {
                HookedList.Add("DoPlayAnimationWithEvents");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "DoPlayAnimationWithEvents"),
                    DoPlayAnimationWithEvents);
            }
        }

        internal static event Delegates.DoPlayAnimationWithEvents_BeforeArgs _beforeDoPlayAnimationWithEvents;
        internal static event Delegates.DoPlayAnimationWithEvents_NormalArgs _afterDoPlayAnimationWithEvents;

        private static void DoPlayAnimationWithEvents(Action<Tk2dPlayAnimationWithEvents> orig,
            Tk2dPlayAnimationWithEvents self)
        {
            Delegates.Params_DoPlayAnimationWithEvents @params = new()
            {
                self = self
            };
            _beforeDoPlayAnimationWithEvents?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoPlayAnimationWithEvents != null) _afterDoPlayAnimationWithEvents.Invoke(@params);
        }

        internal static void HookAnimationEventDelegate()
        {
            if (!HookedList.Contains("AnimationEventDelegate"))
            {
                HookedList.Add("AnimationEventDelegate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "AnimationEventDelegate"),
                    AnimationEventDelegate);
            }
        }

        internal static event Delegates.AnimationEventDelegate_BeforeArgs _beforeAnimationEventDelegate;
        internal static event Delegates.AnimationEventDelegate_NormalArgs _afterAnimationEventDelegate;

        private static void AnimationEventDelegate(
            Action<Tk2dPlayAnimationWithEvents, tk2dSpriteAnimator, tk2dSpriteAnimationClip, int> orig,
            Tk2dPlayAnimationWithEvents self, tk2dSpriteAnimator sprite, tk2dSpriteAnimationClip clip, int frameNum)
        {
            Delegates.Params_AnimationEventDelegate @params = new()
            {
                self = self, sprite = sprite, clip = clip, frameNum = frameNum
            };
            _beforeAnimationEventDelegate?.Invoke(@params);
            self = @params.self;
            sprite = @params.sprite;
            clip = @params.clip;
            frameNum = @params.frameNum;
            orig(self, sprite, clip, frameNum);
            if (_afterAnimationEventDelegate != null) _afterAnimationEventDelegate.Invoke(@params);
        }

        internal static void HookAnimationCompleteDelegate()
        {
            if (!HookedList.Contains("AnimationCompleteDelegate"))
            {
                HookedList.Add("AnimationCompleteDelegate");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "AnimationCompleteDelegate"),
                    AnimationCompleteDelegate);
            }
        }

        internal static event Delegates.AnimationCompleteDelegate_BeforeArgs _beforeAnimationCompleteDelegate;
        internal static event Delegates.AnimationCompleteDelegate_NormalArgs _afterAnimationCompleteDelegate;

        private static void AnimationCompleteDelegate(
            Action<Tk2dPlayAnimationWithEvents, tk2dSpriteAnimator, tk2dSpriteAnimationClip> orig,
            Tk2dPlayAnimationWithEvents self, tk2dSpriteAnimator sprite, tk2dSpriteAnimationClip clip)
        {
            Delegates.Params_AnimationCompleteDelegate @params = new()
            {
                self = self, sprite = sprite, clip = clip
            };
            _beforeAnimationCompleteDelegate?.Invoke(@params);
            self = @params.self;
            sprite = @params.sprite;
            clip = @params.clip;
            orig(self, sprite, clip);
            if (_afterAnimationCompleteDelegate != null) _afterAnimationCompleteDelegate.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void _getSprite_BeforeArgs(Params__getSprite args);

        public delegate void _getSprite_NormalArgs(Params__getSprite args);

        public delegate void AnimationCompleteDelegate_BeforeArgs(Params_AnimationCompleteDelegate args);

        public delegate void AnimationCompleteDelegate_NormalArgs(Params_AnimationCompleteDelegate args);

        public delegate void AnimationEventDelegate_BeforeArgs(Params_AnimationEventDelegate args);

        public delegate void AnimationEventDelegate_NormalArgs(Params_AnimationEventDelegate args);

        public delegate void DoPlayAnimationWithEvents_BeforeArgs(Params_DoPlayAnimationWithEvents args);

        public delegate void DoPlayAnimationWithEvents_NormalArgs(Params_DoPlayAnimationWithEvents args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params__getSprite
        {
            public Tk2dPlayAnimationWithEvents self;
        }

        public sealed class Params_Reset
        {
            public Tk2dPlayAnimationWithEvents self;
        }

        public sealed class Params_OnEnter
        {
            public Tk2dPlayAnimationWithEvents self;
        }

        public sealed class Params_DoPlayAnimationWithEvents
        {
            public Tk2dPlayAnimationWithEvents self;
        }

        public sealed class Params_AnimationEventDelegate
        {
            public tk2dSpriteAnimationClip clip;
            public int frameNum;
            public Tk2dPlayAnimationWithEvents self;
            public tk2dSpriteAnimator sprite;
        }

        public sealed class Params_AnimationCompleteDelegate
        {
            public tk2dSpriteAnimationClip clip;
            public Tk2dPlayAnimationWithEvents self;
            public tk2dSpriteAnimator sprite;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates._getSprite_BeforeArgs _getSprite
        {
            add
            {
                HookHandler._before_getSprite += value;
                HookHandler.Hook_getSprite();
            }
            remove => HookHandler._before_getSprite -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoPlayAnimationWithEvents_BeforeArgs DoPlayAnimationWithEvents
        {
            add
            {
                HookHandler._beforeDoPlayAnimationWithEvents += value;
                HookHandler.HookDoPlayAnimationWithEvents();
            }
            remove => HookHandler._beforeDoPlayAnimationWithEvents -= value;
        }

        public static event Delegates.AnimationEventDelegate_BeforeArgs AnimationEventDelegate
        {
            add
            {
                HookHandler._beforeAnimationEventDelegate += value;
                HookHandler.HookAnimationEventDelegate();
            }
            remove => HookHandler._beforeAnimationEventDelegate -= value;
        }

        public static event Delegates.AnimationCompleteDelegate_BeforeArgs AnimationCompleteDelegate
        {
            add
            {
                HookHandler._beforeAnimationCompleteDelegate += value;
                HookHandler.HookAnimationCompleteDelegate();
            }
            remove => HookHandler._beforeAnimationCompleteDelegate -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates._getSprite_NormalArgs _getSprite
        {
            add
            {
                HookHandler._after_getSprite += value;
                HookHandler.Hook_getSprite();
            }
            remove => HookHandler._after_getSprite -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoPlayAnimationWithEvents_NormalArgs DoPlayAnimationWithEvents
        {
            add
            {
                HookHandler._afterDoPlayAnimationWithEvents += value;
                HookHandler.HookDoPlayAnimationWithEvents();
            }
            remove => HookHandler._afterDoPlayAnimationWithEvents -= value;
        }

        public static event Delegates.AnimationEventDelegate_NormalArgs AnimationEventDelegate
        {
            add
            {
                HookHandler._afterAnimationEventDelegate += value;
                HookHandler.HookAnimationEventDelegate();
            }
            remove => HookHandler._afterAnimationEventDelegate -= value;
        }

        public static event Delegates.AnimationCompleteDelegate_NormalArgs AnimationCompleteDelegate
        {
            add
            {
                HookHandler._afterAnimationCompleteDelegate += value;
                HookHandler.HookAnimationCompleteDelegate();
            }
            remove => HookHandler._afterAnimationCompleteDelegate -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates._getSprite_NormalArgs _getSprite
        {
            add => HookEndpointManager.Add<Delegates._getSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "_getSprite"), value);
            remove => HookEndpointManager.Remove<Delegates._getSprite_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "_getSprite"), value);
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "OnEnter"), value);
        }

        public static event Delegates.DoPlayAnimationWithEvents_NormalArgs DoPlayAnimationWithEvents
        {
            add => HookEndpointManager.Add<Delegates.DoPlayAnimationWithEvents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "DoPlayAnimationWithEvents"),
                value);
            remove => HookEndpointManager.Remove<Delegates.DoPlayAnimationWithEvents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "DoPlayAnimationWithEvents"),
                value);
        }

        public static event Delegates.AnimationEventDelegate_NormalArgs AnimationEventDelegate
        {
            add => HookEndpointManager.Add<Delegates.AnimationEventDelegate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "AnimationEventDelegate"), value);
            remove => HookEndpointManager.Remove<Delegates.AnimationEventDelegate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "AnimationEventDelegate"), value);
        }

        public static event Delegates.AnimationCompleteDelegate_NormalArgs AnimationCompleteDelegate
        {
            add => HookEndpointManager.Add<Delegates.AnimationCompleteDelegate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "AnimationCompleteDelegate"),
                value);
            remove => HookEndpointManager.Remove<Delegates.AnimationCompleteDelegate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(Tk2dPlayAnimationWithEvents), "AnimationCompleteDelegate"),
                value);
        }
    }
}