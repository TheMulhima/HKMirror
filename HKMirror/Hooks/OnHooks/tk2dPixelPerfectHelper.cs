using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dPixelPerfectHelper class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dPixelPerfectHelper
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_inst()
        {
            if (!HookedList.Contains("get_inst"))
            {
                HookedList.Add("get_inst");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dPixelPerfectHelper), "get_inst", false), get_inst);
            }
        }

        internal static event Delegates.get_inst_BeforeArgs _beforeget_inst;
        internal static event Delegates.get_inst_NormalArgs _afterget_inst;

        private static tk2dPixelPerfectHelper get_inst(Func<tk2dPixelPerfectHelper> orig)
        {
            _beforeget_inst?.Invoke();
            var retVal = orig();
            if (_afterget_inst != null) retVal = _afterget_inst.Invoke();
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dPixelPerfectHelper.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.tk2dPixelPerfectHelper.orig_Awake orig, tk2dPixelPerfectHelper self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.tk2dPixelPerfectHelper.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.tk2dPixelPerfectHelper.orig_Setup orig, tk2dPixelPerfectHelper self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookCalculateScaleForPerspectiveCamera()
        {
            if (!HookedList.Contains("CalculateScaleForPerspectiveCamera"))
            {
                HookedList.Add("CalculateScaleForPerspectiveCamera");
                On.tk2dPixelPerfectHelper.CalculateScaleForPerspectiveCamera += CalculateScaleForPerspectiveCamera;
            }
        }

        internal static event Delegates.CalculateScaleForPerspectiveCamera_BeforeArgs
            _beforeCalculateScaleForPerspectiveCamera;

        internal static event Delegates.CalculateScaleForPerspectiveCamera_NormalArgs
            _afterCalculateScaleForPerspectiveCamera;

        private static float CalculateScaleForPerspectiveCamera(
            On.tk2dPixelPerfectHelper.orig_CalculateScaleForPerspectiveCamera orig, float fov, float zdist)
        {
            Delegates.Params_CalculateScaleForPerspectiveCamera @params = new()
            {
                fov = fov, zdist = zdist
            };
            _beforeCalculateScaleForPerspectiveCamera?.Invoke(@params);
            fov = @params.fov;
            zdist = @params.zdist;
            var retVal = orig(fov, zdist);
            if (_afterCalculateScaleForPerspectiveCamera != null)
                retVal = _afterCalculateScaleForPerspectiveCamera.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_CameraIsOrtho()
        {
            if (!HookedList.Contains("get_CameraIsOrtho"))
            {
                HookedList.Add("get_CameraIsOrtho");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dPixelPerfectHelper), "get_CameraIsOrtho"),
                    get_CameraIsOrtho);
            }
        }

        internal static event Delegates.get_CameraIsOrtho_BeforeArgs _beforeget_CameraIsOrtho;
        internal static event Delegates.get_CameraIsOrtho_NormalArgs _afterget_CameraIsOrtho;

        private static bool get_CameraIsOrtho(Func<tk2dPixelPerfectHelper, bool> orig, tk2dPixelPerfectHelper self)
        {
            Delegates.Params_get_CameraIsOrtho @params = new()
            {
                self = self
            };
            _beforeget_CameraIsOrtho?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CameraIsOrtho != null) retVal = _afterget_CameraIsOrtho.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CalculateScaleForPerspectiveCamera_BeforeArgs(
            Params_CalculateScaleForPerspectiveCamera args);

        public delegate float CalculateScaleForPerspectiveCamera_NormalArgs(
            Params_CalculateScaleForPerspectiveCamera args);

        public delegate void get_CameraIsOrtho_BeforeArgs(Params_get_CameraIsOrtho args);

        public delegate bool get_CameraIsOrtho_NormalArgs(Params_get_CameraIsOrtho args);

        public delegate void get_inst_BeforeArgs();

        public delegate tk2dPixelPerfectHelper get_inst_NormalArgs();

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public sealed class Params_Awake
        {
            public tk2dPixelPerfectHelper self;
        }

        public sealed class Params_Setup
        {
            public tk2dPixelPerfectHelper self;
        }

        public sealed class Params_CalculateScaleForPerspectiveCamera
        {
            public float fov;
            public float zdist;
        }

        public sealed class Params_get_CameraIsOrtho
        {
            public tk2dPixelPerfectHelper self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_inst_BeforeArgs get_inst
        {
            add
            {
                HookHandler._beforeget_inst += value;
                HookHandler.Hookget_inst();
            }
            remove => HookHandler._beforeget_inst -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.CalculateScaleForPerspectiveCamera_BeforeArgs CalculateScaleForPerspectiveCamera
        {
            add
            {
                HookHandler._beforeCalculateScaleForPerspectiveCamera += value;
                HookHandler.HookCalculateScaleForPerspectiveCamera();
            }
            remove => HookHandler._beforeCalculateScaleForPerspectiveCamera -= value;
        }

        public static event Delegates.get_CameraIsOrtho_BeforeArgs get_CameraIsOrtho
        {
            add
            {
                HookHandler._beforeget_CameraIsOrtho += value;
                HookHandler.Hookget_CameraIsOrtho();
            }
            remove => HookHandler._beforeget_CameraIsOrtho -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_inst_NormalArgs get_inst
        {
            add
            {
                HookHandler._afterget_inst += value;
                HookHandler.Hookget_inst();
            }
            remove => HookHandler._afterget_inst -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.CalculateScaleForPerspectiveCamera_NormalArgs CalculateScaleForPerspectiveCamera
        {
            add
            {
                HookHandler._afterCalculateScaleForPerspectiveCamera += value;
                HookHandler.HookCalculateScaleForPerspectiveCamera();
            }
            remove => HookHandler._afterCalculateScaleForPerspectiveCamera -= value;
        }

        public static event Delegates.get_CameraIsOrtho_NormalArgs get_CameraIsOrtho
        {
            add
            {
                HookHandler._afterget_CameraIsOrtho += value;
                HookHandler.Hookget_CameraIsOrtho();
            }
            remove => HookHandler._afterget_CameraIsOrtho -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_inst_NormalArgs get_inst
        {
            add => HookEndpointManager.Add<Delegates.get_inst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dPixelPerfectHelper), "get_inst", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_inst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dPixelPerfectHelper), "get_inst", false), value);
        }

        public static event On.tk2dPixelPerfectHelper.hook_Awake Awake
        {
            add => On.tk2dPixelPerfectHelper.Awake += value;
            remove => On.tk2dPixelPerfectHelper.Awake -= value;
        }

        public static event On.tk2dPixelPerfectHelper.hook_Setup Setup
        {
            add => On.tk2dPixelPerfectHelper.Setup += value;
            remove => On.tk2dPixelPerfectHelper.Setup -= value;
        }

        public static event On.tk2dPixelPerfectHelper.hook_CalculateScaleForPerspectiveCamera
            CalculateScaleForPerspectiveCamera
            {
                add => On.tk2dPixelPerfectHelper.CalculateScaleForPerspectiveCamera += value;
                remove => On.tk2dPixelPerfectHelper.CalculateScaleForPerspectiveCamera -= value;
            }

        public static event Delegates.get_CameraIsOrtho_NormalArgs get_CameraIsOrtho
        {
            add => HookEndpointManager.Add<Delegates.get_CameraIsOrtho_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dPixelPerfectHelper), "get_CameraIsOrtho"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CameraIsOrtho_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dPixelPerfectHelper), "get_CameraIsOrtho"), value);
        }
    }
}