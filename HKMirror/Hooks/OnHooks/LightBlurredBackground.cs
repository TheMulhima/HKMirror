using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for LightBlurredBackground class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLightBlurredBackground
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_RenderTextureHeight()
{
if (!HookedList.Contains("get_RenderTextureHeight"))
{
HookedList.Add("get_RenderTextureHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_RenderTextureHeight", true), get_RenderTextureHeight);

}
}
internal static event Delegates.get_RenderTextureHeight_BeforeArgs _beforeget_RenderTextureHeight;
internal static event Delegates.get_RenderTextureHeight_AfterArgs _afterget_RenderTextureHeight;
private static int get_RenderTextureHeight(Func<LightBlurredBackground, int> orig, LightBlurredBackground self)
{
Delegates.Params_get_RenderTextureHeight @params = new() 
{
self = self
};
if (_beforeget_RenderTextureHeight != null)
{
foreach (Delegates.get_RenderTextureHeight_BeforeArgs toInvoke in _beforeget_RenderTextureHeight.GetInvocationList())
{
try
{
_beforeget_RenderTextureHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_RenderTextureHeight != null)
{
foreach (Delegates.get_RenderTextureHeight_AfterArgs toInvoke in _afterget_RenderTextureHeight.GetInvocationList())
{
try
{
retVal = _afterget_RenderTextureHeight.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_RenderTextureHeight()
{
if (!HookedList.Contains("set_RenderTextureHeight"))
{
HookedList.Add("set_RenderTextureHeight");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_RenderTextureHeight", true), set_RenderTextureHeight);

}
}
internal static event Delegates.set_RenderTextureHeight_BeforeArgs _beforeset_RenderTextureHeight;
internal static event Delegates.set_RenderTextureHeight_AfterArgs _afterset_RenderTextureHeight;
private static void set_RenderTextureHeight(Action<LightBlurredBackground,  int> orig, LightBlurredBackground self,  int value)
{
Delegates.Params_set_RenderTextureHeight @params = new() 
{
self = self
, value = value
};
if (_beforeset_RenderTextureHeight != null)
{
foreach (Delegates.set_RenderTextureHeight_BeforeArgs toInvoke in _beforeset_RenderTextureHeight.GetInvocationList())
{
try
{
_beforeset_RenderTextureHeight?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_RenderTextureHeight != null)
{
foreach (Delegates.set_RenderTextureHeight_AfterArgs toInvoke in _afterset_RenderTextureHeight.GetInvocationList())
{
try
{
_afterset_RenderTextureHeight.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.LightBlurredBackground.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.LightBlurredBackground.orig_Awake orig,LightBlurredBackground self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.LightBlurredBackground.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.LightBlurredBackground.orig_OnEnable orig,LightBlurredBackground self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnCameraAspectChanged()
{
if (!HookedList.Contains("OnCameraAspectChanged"))
{
HookedList.Add("OnCameraAspectChanged");
On.LightBlurredBackground.OnCameraAspectChanged += OnCameraAspectChanged;

}
}
internal static event Delegates.OnCameraAspectChanged_BeforeArgs _beforeOnCameraAspectChanged;
internal static event Delegates.OnCameraAspectChanged_AfterArgs _afterOnCameraAspectChanged;
private static void OnCameraAspectChanged(On.LightBlurredBackground.orig_OnCameraAspectChanged orig,LightBlurredBackground self,  float aspect)
{
Delegates.Params_OnCameraAspectChanged @params = new() 
{
self = self
, aspect = aspect
};
if (_beforeOnCameraAspectChanged != null)
{
foreach (Delegates.OnCameraAspectChanged_BeforeArgs toInvoke in _beforeOnCameraAspectChanged.GetInvocationList())
{
try
{
_beforeOnCameraAspectChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
aspect = @params.aspect;
orig(self, aspect);
if (_afterOnCameraAspectChanged != null)
{
foreach (Delegates.OnCameraAspectChanged_AfterArgs toInvoke in _afterOnCameraAspectChanged.GetInvocationList())
{
try
{
_afterOnCameraAspectChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.LightBlurredBackground.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.LightBlurredBackground.orig_OnDisable orig,LightBlurredBackground self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_PassGroupCount()
{
if (!HookedList.Contains("get_PassGroupCount"))
{
HookedList.Add("get_PassGroupCount");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_PassGroupCount", true), get_PassGroupCount);

}
}
internal static event Delegates.get_PassGroupCount_BeforeArgs _beforeget_PassGroupCount;
internal static event Delegates.get_PassGroupCount_AfterArgs _afterget_PassGroupCount;
private static int get_PassGroupCount(Func<LightBlurredBackground, int> orig, LightBlurredBackground self)
{
Delegates.Params_get_PassGroupCount @params = new() 
{
self = self
};
if (_beforeget_PassGroupCount != null)
{
foreach (Delegates.get_PassGroupCount_BeforeArgs toInvoke in _beforeget_PassGroupCount.GetInvocationList())
{
try
{
_beforeget_PassGroupCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_PassGroupCount != null)
{
foreach (Delegates.get_PassGroupCount_AfterArgs toInvoke in _afterget_PassGroupCount.GetInvocationList())
{
try
{
retVal = _afterget_PassGroupCount.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_PassGroupCount()
{
if (!HookedList.Contains("set_PassGroupCount"))
{
HookedList.Add("set_PassGroupCount");
new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_PassGroupCount", true), set_PassGroupCount);

}
}
internal static event Delegates.set_PassGroupCount_BeforeArgs _beforeset_PassGroupCount;
internal static event Delegates.set_PassGroupCount_AfterArgs _afterset_PassGroupCount;
private static void set_PassGroupCount(Action<LightBlurredBackground,  int> orig, LightBlurredBackground self,  int value)
{
Delegates.Params_set_PassGroupCount @params = new() 
{
self = self
, value = value
};
if (_beforeset_PassGroupCount != null)
{
foreach (Delegates.set_PassGroupCount_BeforeArgs toInvoke in _beforeset_PassGroupCount.GetInvocationList())
{
try
{
_beforeset_PassGroupCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_PassGroupCount != null)
{
foreach (Delegates.set_PassGroupCount_AfterArgs toInvoke in _afterset_PassGroupCount.GetInvocationList())
{
try
{
_afterset_PassGroupCount.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnBlurPlanesChanged()
{
if (!HookedList.Contains("OnBlurPlanesChanged"))
{
HookedList.Add("OnBlurPlanesChanged");
On.LightBlurredBackground.OnBlurPlanesChanged += OnBlurPlanesChanged;

}
}
internal static event Delegates.OnBlurPlanesChanged_BeforeArgs _beforeOnBlurPlanesChanged;
internal static event Delegates.OnBlurPlanesChanged_AfterArgs _afterOnBlurPlanesChanged;
private static void OnBlurPlanesChanged(On.LightBlurredBackground.orig_OnBlurPlanesChanged orig,LightBlurredBackground self)
{
Delegates.Params_OnBlurPlanesChanged @params = new() 
{
self = self
};
if (_beforeOnBlurPlanesChanged != null)
{
foreach (Delegates.OnBlurPlanesChanged_BeforeArgs toInvoke in _beforeOnBlurPlanesChanged.GetInvocationList())
{
try
{
_beforeOnBlurPlanesChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnBlurPlanesChanged != null)
{
foreach (Delegates.OnBlurPlanesChanged_AfterArgs toInvoke in _afterOnBlurPlanesChanged.GetInvocationList())
{
try
{
_afterOnBlurPlanesChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLateUpdate()
{
if (!HookedList.Contains("LateUpdate"))
{
HookedList.Add("LateUpdate");
On.LightBlurredBackground.LateUpdate += LateUpdate;

}
}
internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;
private static void LateUpdate(On.LightBlurredBackground.orig_LateUpdate orig,LightBlurredBackground self)
{
Delegates.Params_LateUpdate @params = new() 
{
self = self
};
if (_beforeLateUpdate != null)
{
foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
{
try
{
_beforeLateUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLateUpdate != null)
{
foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
{
try
{
_afterLateUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateCameraClipPlanes()
{
if (!HookedList.Contains("UpdateCameraClipPlanes"))
{
HookedList.Add("UpdateCameraClipPlanes");
On.LightBlurredBackground.UpdateCameraClipPlanes += UpdateCameraClipPlanes;

}
}
internal static event Delegates.UpdateCameraClipPlanes_BeforeArgs _beforeUpdateCameraClipPlanes;
internal static event Delegates.UpdateCameraClipPlanes_AfterArgs _afterUpdateCameraClipPlanes;
private static void UpdateCameraClipPlanes(On.LightBlurredBackground.orig_UpdateCameraClipPlanes orig,LightBlurredBackground self)
{
Delegates.Params_UpdateCameraClipPlanes @params = new() 
{
self = self
};
if (_beforeUpdateCameraClipPlanes != null)
{
foreach (Delegates.UpdateCameraClipPlanes_BeforeArgs toInvoke in _beforeUpdateCameraClipPlanes.GetInvocationList())
{
try
{
_beforeUpdateCameraClipPlanes?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateCameraClipPlanes != null)
{
foreach (Delegates.UpdateCameraClipPlanes_AfterArgs toInvoke in _afterUpdateCameraClipPlanes.GetInvocationList())
{
try
{
_afterUpdateCameraClipPlanes.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_RenderTextureHeight
{
public LightBlurredBackground self;
}
public delegate void get_RenderTextureHeight_BeforeArgs(Params_get_RenderTextureHeight args);
public delegate int get_RenderTextureHeight_AfterArgs(Params_get_RenderTextureHeight args, int ret);
public delegate int get_RenderTextureHeight_WithArgs (Func<LightBlurredBackground, int> orig, LightBlurredBackground self);
public sealed class Params_set_RenderTextureHeight
{
public LightBlurredBackground self;
public int value;
}
public delegate void set_RenderTextureHeight_BeforeArgs(Params_set_RenderTextureHeight args);
public delegate void set_RenderTextureHeight_AfterArgs(Params_set_RenderTextureHeight args);
public delegate void set_RenderTextureHeight_WithArgs (Action<LightBlurredBackground,  int> orig, LightBlurredBackground self,  int value);
public sealed class Params_Awake
{
public LightBlurredBackground self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<LightBlurredBackground> orig, LightBlurredBackground self);
public sealed class Params_OnEnable
{
public LightBlurredBackground self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<LightBlurredBackground> orig, LightBlurredBackground self);
public sealed class Params_OnCameraAspectChanged
{
public LightBlurredBackground self;
public float aspect;
}
public delegate void OnCameraAspectChanged_BeforeArgs(Params_OnCameraAspectChanged args);
public delegate void OnCameraAspectChanged_AfterArgs(Params_OnCameraAspectChanged args);
public delegate void OnCameraAspectChanged_WithArgs (Action<LightBlurredBackground,  float> orig, LightBlurredBackground self,  float aspect);
public sealed class Params_OnDisable
{
public LightBlurredBackground self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<LightBlurredBackground> orig, LightBlurredBackground self);
public sealed class Params_get_PassGroupCount
{
public LightBlurredBackground self;
}
public delegate void get_PassGroupCount_BeforeArgs(Params_get_PassGroupCount args);
public delegate int get_PassGroupCount_AfterArgs(Params_get_PassGroupCount args, int ret);
public delegate int get_PassGroupCount_WithArgs (Func<LightBlurredBackground, int> orig, LightBlurredBackground self);
public sealed class Params_set_PassGroupCount
{
public LightBlurredBackground self;
public int value;
}
public delegate void set_PassGroupCount_BeforeArgs(Params_set_PassGroupCount args);
public delegate void set_PassGroupCount_AfterArgs(Params_set_PassGroupCount args);
public delegate void set_PassGroupCount_WithArgs (Action<LightBlurredBackground,  int> orig, LightBlurredBackground self,  int value);
public sealed class Params_OnBlurPlanesChanged
{
public LightBlurredBackground self;
}
public delegate void OnBlurPlanesChanged_BeforeArgs(Params_OnBlurPlanesChanged args);
public delegate void OnBlurPlanesChanged_AfterArgs(Params_OnBlurPlanesChanged args);
public delegate void OnBlurPlanesChanged_WithArgs (Action<LightBlurredBackground> orig, LightBlurredBackground self);
public sealed class Params_LateUpdate
{
public LightBlurredBackground self;
}
public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);
public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);
public delegate void LateUpdate_WithArgs (Action<LightBlurredBackground> orig, LightBlurredBackground self);
public sealed class Params_UpdateCameraClipPlanes
{
public LightBlurredBackground self;
}
public delegate void UpdateCameraClipPlanes_BeforeArgs(Params_UpdateCameraClipPlanes args);
public delegate void UpdateCameraClipPlanes_AfterArgs(Params_UpdateCameraClipPlanes args);
public delegate void UpdateCameraClipPlanes_WithArgs (Action<LightBlurredBackground> orig, LightBlurredBackground self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_RenderTextureHeight_BeforeArgs get_RenderTextureHeight
{
add
{

HookHandler._beforeget_RenderTextureHeight += value;
HookHandler.Hookget_RenderTextureHeight();
}
remove => HookHandler._beforeget_RenderTextureHeight -= value;
}
public static event Delegates.set_RenderTextureHeight_BeforeArgs set_RenderTextureHeight
{
add
{

HookHandler._beforeset_RenderTextureHeight += value;
HookHandler.Hookset_RenderTextureHeight();
}
remove => HookHandler._beforeset_RenderTextureHeight -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnCameraAspectChanged_BeforeArgs OnCameraAspectChanged
{
add
{

HookHandler._beforeOnCameraAspectChanged += value;
HookHandler.HookOnCameraAspectChanged();
}
remove => HookHandler._beforeOnCameraAspectChanged -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.get_PassGroupCount_BeforeArgs get_PassGroupCount
{
add
{

HookHandler._beforeget_PassGroupCount += value;
HookHandler.Hookget_PassGroupCount();
}
remove => HookHandler._beforeget_PassGroupCount -= value;
}
public static event Delegates.set_PassGroupCount_BeforeArgs set_PassGroupCount
{
add
{

HookHandler._beforeset_PassGroupCount += value;
HookHandler.Hookset_PassGroupCount();
}
remove => HookHandler._beforeset_PassGroupCount -= value;
}
public static event Delegates.OnBlurPlanesChanged_BeforeArgs OnBlurPlanesChanged
{
add
{

HookHandler._beforeOnBlurPlanesChanged += value;
HookHandler.HookOnBlurPlanesChanged();
}
remove => HookHandler._beforeOnBlurPlanesChanged -= value;
}
public static event Delegates.LateUpdate_BeforeArgs LateUpdate
{
add
{

HookHandler._beforeLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._beforeLateUpdate -= value;
}
public static event Delegates.UpdateCameraClipPlanes_BeforeArgs UpdateCameraClipPlanes
{
add
{

HookHandler._beforeUpdateCameraClipPlanes += value;
HookHandler.HookUpdateCameraClipPlanes();
}
remove => HookHandler._beforeUpdateCameraClipPlanes -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_RenderTextureHeight_AfterArgs get_RenderTextureHeight
{
add
{

HookHandler._afterget_RenderTextureHeight += value;
HookHandler.Hookget_RenderTextureHeight();
}
remove => HookHandler._afterget_RenderTextureHeight -= value;
}
public static event Delegates.set_RenderTextureHeight_AfterArgs set_RenderTextureHeight
{
add
{

HookHandler._afterset_RenderTextureHeight += value;
HookHandler.Hookset_RenderTextureHeight();
}
remove => HookHandler._afterset_RenderTextureHeight -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnCameraAspectChanged_AfterArgs OnCameraAspectChanged
{
add
{

HookHandler._afterOnCameraAspectChanged += value;
HookHandler.HookOnCameraAspectChanged();
}
remove => HookHandler._afterOnCameraAspectChanged -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.get_PassGroupCount_AfterArgs get_PassGroupCount
{
add
{

HookHandler._afterget_PassGroupCount += value;
HookHandler.Hookget_PassGroupCount();
}
remove => HookHandler._afterget_PassGroupCount -= value;
}
public static event Delegates.set_PassGroupCount_AfterArgs set_PassGroupCount
{
add
{

HookHandler._afterset_PassGroupCount += value;
HookHandler.Hookset_PassGroupCount();
}
remove => HookHandler._afterset_PassGroupCount -= value;
}
public static event Delegates.OnBlurPlanesChanged_AfterArgs OnBlurPlanesChanged
{
add
{

HookHandler._afterOnBlurPlanesChanged += value;
HookHandler.HookOnBlurPlanesChanged();
}
remove => HookHandler._afterOnBlurPlanesChanged -= value;
}
public static event Delegates.LateUpdate_AfterArgs LateUpdate
{
add
{

HookHandler._afterLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._afterLateUpdate -= value;
}
public static event Delegates.UpdateCameraClipPlanes_AfterArgs UpdateCameraClipPlanes
{
add
{

HookHandler._afterUpdateCameraClipPlanes += value;
HookHandler.HookUpdateCameraClipPlanes();
}
remove => HookHandler._afterUpdateCameraClipPlanes -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_RenderTextureHeight_WithArgs get_RenderTextureHeight
{
add => HookEndpointManager.Add<Delegates.get_RenderTextureHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_RenderTextureHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.get_RenderTextureHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_RenderTextureHeight", true), value);
}
public static event Delegates.set_RenderTextureHeight_WithArgs set_RenderTextureHeight
{
add => HookEndpointManager.Add<Delegates.set_RenderTextureHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_RenderTextureHeight", true), value);
remove => HookEndpointManager.Remove<Delegates.set_RenderTextureHeight_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_RenderTextureHeight", true), value);
}
public static event On.LightBlurredBackground.hook_Awake Awake
{
add => On.LightBlurredBackground.Awake += value;
remove => On.LightBlurredBackground.Awake -= value;
}
public static event On.LightBlurredBackground.hook_OnEnable OnEnable
{
add => On.LightBlurredBackground.OnEnable += value;
remove => On.LightBlurredBackground.OnEnable -= value;
}
public static event On.LightBlurredBackground.hook_OnCameraAspectChanged OnCameraAspectChanged
{
add => On.LightBlurredBackground.OnCameraAspectChanged += value;
remove => On.LightBlurredBackground.OnCameraAspectChanged -= value;
}
public static event On.LightBlurredBackground.hook_OnDisable OnDisable
{
add => On.LightBlurredBackground.OnDisable += value;
remove => On.LightBlurredBackground.OnDisable -= value;
}
public static event Delegates.get_PassGroupCount_WithArgs get_PassGroupCount
{
add => HookEndpointManager.Add<Delegates.get_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_PassGroupCount", true), value);
remove => HookEndpointManager.Remove<Delegates.get_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_PassGroupCount", true), value);
}
public static event Delegates.set_PassGroupCount_WithArgs set_PassGroupCount
{
add => HookEndpointManager.Add<Delegates.set_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_PassGroupCount", true), value);
remove => HookEndpointManager.Remove<Delegates.set_PassGroupCount_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_PassGroupCount", true), value);
}
public static event On.LightBlurredBackground.hook_OnBlurPlanesChanged OnBlurPlanesChanged
{
add => On.LightBlurredBackground.OnBlurPlanesChanged += value;
remove => On.LightBlurredBackground.OnBlurPlanesChanged -= value;
}
public static event On.LightBlurredBackground.hook_LateUpdate LateUpdate
{
add => On.LightBlurredBackground.LateUpdate += value;
remove => On.LightBlurredBackground.LateUpdate -= value;
}
public static event On.LightBlurredBackground.hook_UpdateCameraClipPlanes UpdateCameraClipPlanes
{
add => On.LightBlurredBackground.UpdateCameraClipPlanes += value;
remove => On.LightBlurredBackground.UpdateCameraClipPlanes -= value;
}
}

}
