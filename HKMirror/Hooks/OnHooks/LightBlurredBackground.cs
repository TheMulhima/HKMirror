using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for LightBlurredBackground class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLightBlurredBackground
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_RenderTextureHeight()
        {
            if (!HookedList.Contains("get_RenderTextureHeight"))
            {
                HookedList.Add("get_RenderTextureHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_RenderTextureHeight"),
                    get_RenderTextureHeight);
            }
        }

        internal static event Delegates.get_RenderTextureHeight_BeforeArgs _beforeget_RenderTextureHeight;
        internal static event Delegates.get_RenderTextureHeight_NormalArgs _afterget_RenderTextureHeight;

        private static int get_RenderTextureHeight(Func<LightBlurredBackground, int> orig, LightBlurredBackground self)
        {
            Delegates.Params_get_RenderTextureHeight @params = new()
            {
                self = self
            };
            _beforeget_RenderTextureHeight?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RenderTextureHeight != null) retVal = _afterget_RenderTextureHeight.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_RenderTextureHeight()
        {
            if (!HookedList.Contains("set_RenderTextureHeight"))
            {
                HookedList.Add("set_RenderTextureHeight");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_RenderTextureHeight"),
                    set_RenderTextureHeight);
            }
        }

        internal static event Delegates.set_RenderTextureHeight_BeforeArgs _beforeset_RenderTextureHeight;
        internal static event Delegates.set_RenderTextureHeight_NormalArgs _afterset_RenderTextureHeight;

        private static void set_RenderTextureHeight(Action<LightBlurredBackground, int> orig,
            LightBlurredBackground self, int value)
        {
            Delegates.Params_set_RenderTextureHeight @params = new()
            {
                self = self, value = value
            };
            _beforeset_RenderTextureHeight?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_RenderTextureHeight != null) _afterset_RenderTextureHeight.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.LightBlurredBackground.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.LightBlurredBackground.orig_Awake orig, LightBlurredBackground self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.LightBlurredBackground.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.LightBlurredBackground.orig_OnEnable orig, LightBlurredBackground self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnCameraAspectChanged()
        {
            if (!HookedList.Contains("OnCameraAspectChanged"))
            {
                HookedList.Add("OnCameraAspectChanged");
                On.LightBlurredBackground.OnCameraAspectChanged += OnCameraAspectChanged;
            }
        }

        internal static event Delegates.OnCameraAspectChanged_BeforeArgs _beforeOnCameraAspectChanged;
        internal static event Delegates.OnCameraAspectChanged_NormalArgs _afterOnCameraAspectChanged;

        private static void OnCameraAspectChanged(On.LightBlurredBackground.orig_OnCameraAspectChanged orig,
            LightBlurredBackground self, float aspect)
        {
            Delegates.Params_OnCameraAspectChanged @params = new()
            {
                self = self, aspect = aspect
            };
            _beforeOnCameraAspectChanged?.Invoke(@params);
            self = @params.self;
            aspect = @params.aspect;
            orig(self, aspect);
            if (_afterOnCameraAspectChanged != null) _afterOnCameraAspectChanged.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.LightBlurredBackground.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.LightBlurredBackground.orig_OnDisable orig, LightBlurredBackground self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void Hookget_PassGroupCount()
        {
            if (!HookedList.Contains("get_PassGroupCount"))
            {
                HookedList.Add("get_PassGroupCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_PassGroupCount"),
                    get_PassGroupCount);
            }
        }

        internal static event Delegates.get_PassGroupCount_BeforeArgs _beforeget_PassGroupCount;
        internal static event Delegates.get_PassGroupCount_NormalArgs _afterget_PassGroupCount;

        private static int get_PassGroupCount(Func<LightBlurredBackground, int> orig, LightBlurredBackground self)
        {
            Delegates.Params_get_PassGroupCount @params = new()
            {
                self = self
            };
            _beforeget_PassGroupCount?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PassGroupCount != null) retVal = _afterget_PassGroupCount.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_PassGroupCount()
        {
            if (!HookedList.Contains("set_PassGroupCount"))
            {
                HookedList.Add("set_PassGroupCount");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_PassGroupCount"),
                    set_PassGroupCount);
            }
        }

        internal static event Delegates.set_PassGroupCount_BeforeArgs _beforeset_PassGroupCount;
        internal static event Delegates.set_PassGroupCount_NormalArgs _afterset_PassGroupCount;

        private static void set_PassGroupCount(Action<LightBlurredBackground, int> orig, LightBlurredBackground self,
            int value)
        {
            Delegates.Params_set_PassGroupCount @params = new()
            {
                self = self, value = value
            };
            _beforeset_PassGroupCount?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_PassGroupCount != null) _afterset_PassGroupCount.Invoke(@params);
        }

        internal static void HookOnBlurPlanesChanged()
        {
            if (!HookedList.Contains("OnBlurPlanesChanged"))
            {
                HookedList.Add("OnBlurPlanesChanged");
                On.LightBlurredBackground.OnBlurPlanesChanged += OnBlurPlanesChanged;
            }
        }

        internal static event Delegates.OnBlurPlanesChanged_BeforeArgs _beforeOnBlurPlanesChanged;
        internal static event Delegates.OnBlurPlanesChanged_NormalArgs _afterOnBlurPlanesChanged;

        private static void OnBlurPlanesChanged(On.LightBlurredBackground.orig_OnBlurPlanesChanged orig,
            LightBlurredBackground self)
        {
            Delegates.Params_OnBlurPlanesChanged @params = new()
            {
                self = self
            };
            _beforeOnBlurPlanesChanged?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnBlurPlanesChanged != null) _afterOnBlurPlanesChanged.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.LightBlurredBackground.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.LightBlurredBackground.orig_LateUpdate orig, LightBlurredBackground self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookUpdateCameraClipPlanes()
        {
            if (!HookedList.Contains("UpdateCameraClipPlanes"))
            {
                HookedList.Add("UpdateCameraClipPlanes");
                On.LightBlurredBackground.UpdateCameraClipPlanes += UpdateCameraClipPlanes;
            }
        }

        internal static event Delegates.UpdateCameraClipPlanes_BeforeArgs _beforeUpdateCameraClipPlanes;
        internal static event Delegates.UpdateCameraClipPlanes_NormalArgs _afterUpdateCameraClipPlanes;

        private static void UpdateCameraClipPlanes(On.LightBlurredBackground.orig_UpdateCameraClipPlanes orig,
            LightBlurredBackground self)
        {
            Delegates.Params_UpdateCameraClipPlanes @params = new()
            {
                self = self
            };
            _beforeUpdateCameraClipPlanes?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateCameraClipPlanes != null) _afterUpdateCameraClipPlanes.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_PassGroupCount_BeforeArgs(Params_get_PassGroupCount args);

        public delegate int get_PassGroupCount_NormalArgs(Params_get_PassGroupCount args);

        public delegate void get_RenderTextureHeight_BeforeArgs(Params_get_RenderTextureHeight args);

        public delegate int get_RenderTextureHeight_NormalArgs(Params_get_RenderTextureHeight args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void OnBlurPlanesChanged_BeforeArgs(Params_OnBlurPlanesChanged args);

        public delegate void OnBlurPlanesChanged_NormalArgs(Params_OnBlurPlanesChanged args);

        public delegate void OnCameraAspectChanged_BeforeArgs(Params_OnCameraAspectChanged args);

        public delegate void OnCameraAspectChanged_NormalArgs(Params_OnCameraAspectChanged args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void set_PassGroupCount_BeforeArgs(Params_set_PassGroupCount args);

        public delegate void set_PassGroupCount_NormalArgs(Params_set_PassGroupCount args);

        public delegate void set_RenderTextureHeight_BeforeArgs(Params_set_RenderTextureHeight args);

        public delegate void set_RenderTextureHeight_NormalArgs(Params_set_RenderTextureHeight args);

        public delegate void UpdateCameraClipPlanes_BeforeArgs(Params_UpdateCameraClipPlanes args);

        public delegate void UpdateCameraClipPlanes_NormalArgs(Params_UpdateCameraClipPlanes args);

        public sealed class Params_get_RenderTextureHeight
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_set_RenderTextureHeight
        {
            public LightBlurredBackground self;
            public int value;
        }

        public sealed class Params_Awake
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_OnEnable
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_OnCameraAspectChanged
        {
            public float aspect;
            public LightBlurredBackground self;
        }

        public sealed class Params_OnDisable
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_get_PassGroupCount
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_set_PassGroupCount
        {
            public LightBlurredBackground self;
            public int value;
        }

        public sealed class Params_OnBlurPlanesChanged
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_LateUpdate
        {
            public LightBlurredBackground self;
        }

        public sealed class Params_UpdateCameraClipPlanes
        {
            public LightBlurredBackground self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_RenderTextureHeight_BeforeArgs get_RenderTextureHeight
        {
            add
            {
                HookHandler._beforeget_RenderTextureHeight += value;
                HookHandler.Hookget_RenderTextureHeight();
            }
            remove => HookHandler._beforeget_RenderTextureHeight -= value;
        }

        public static event Delegates.set_RenderTextureHeight_BeforeArgs set_RenderTextureHeight
        {
            add
            {
                HookHandler._beforeset_RenderTextureHeight += value;
                HookHandler.Hookset_RenderTextureHeight();
            }
            remove => HookHandler._beforeset_RenderTextureHeight -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnCameraAspectChanged_BeforeArgs OnCameraAspectChanged
        {
            add
            {
                HookHandler._beforeOnCameraAspectChanged += value;
                HookHandler.HookOnCameraAspectChanged();
            }
            remove => HookHandler._beforeOnCameraAspectChanged -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.get_PassGroupCount_BeforeArgs get_PassGroupCount
        {
            add
            {
                HookHandler._beforeget_PassGroupCount += value;
                HookHandler.Hookget_PassGroupCount();
            }
            remove => HookHandler._beforeget_PassGroupCount -= value;
        }

        public static event Delegates.set_PassGroupCount_BeforeArgs set_PassGroupCount
        {
            add
            {
                HookHandler._beforeset_PassGroupCount += value;
                HookHandler.Hookset_PassGroupCount();
            }
            remove => HookHandler._beforeset_PassGroupCount -= value;
        }

        public static event Delegates.OnBlurPlanesChanged_BeforeArgs OnBlurPlanesChanged
        {
            add
            {
                HookHandler._beforeOnBlurPlanesChanged += value;
                HookHandler.HookOnBlurPlanesChanged();
            }
            remove => HookHandler._beforeOnBlurPlanesChanged -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.UpdateCameraClipPlanes_BeforeArgs UpdateCameraClipPlanes
        {
            add
            {
                HookHandler._beforeUpdateCameraClipPlanes += value;
                HookHandler.HookUpdateCameraClipPlanes();
            }
            remove => HookHandler._beforeUpdateCameraClipPlanes -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_RenderTextureHeight_NormalArgs get_RenderTextureHeight
        {
            add
            {
                HookHandler._afterget_RenderTextureHeight += value;
                HookHandler.Hookget_RenderTextureHeight();
            }
            remove => HookHandler._afterget_RenderTextureHeight -= value;
        }

        public static event Delegates.set_RenderTextureHeight_NormalArgs set_RenderTextureHeight
        {
            add
            {
                HookHandler._afterset_RenderTextureHeight += value;
                HookHandler.Hookset_RenderTextureHeight();
            }
            remove => HookHandler._afterset_RenderTextureHeight -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnCameraAspectChanged_NormalArgs OnCameraAspectChanged
        {
            add
            {
                HookHandler._afterOnCameraAspectChanged += value;
                HookHandler.HookOnCameraAspectChanged();
            }
            remove => HookHandler._afterOnCameraAspectChanged -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.get_PassGroupCount_NormalArgs get_PassGroupCount
        {
            add
            {
                HookHandler._afterget_PassGroupCount += value;
                HookHandler.Hookget_PassGroupCount();
            }
            remove => HookHandler._afterget_PassGroupCount -= value;
        }

        public static event Delegates.set_PassGroupCount_NormalArgs set_PassGroupCount
        {
            add
            {
                HookHandler._afterset_PassGroupCount += value;
                HookHandler.Hookset_PassGroupCount();
            }
            remove => HookHandler._afterset_PassGroupCount -= value;
        }

        public static event Delegates.OnBlurPlanesChanged_NormalArgs OnBlurPlanesChanged
        {
            add
            {
                HookHandler._afterOnBlurPlanesChanged += value;
                HookHandler.HookOnBlurPlanesChanged();
            }
            remove => HookHandler._afterOnBlurPlanesChanged -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.UpdateCameraClipPlanes_NormalArgs UpdateCameraClipPlanes
        {
            add
            {
                HookHandler._afterUpdateCameraClipPlanes += value;
                HookHandler.HookUpdateCameraClipPlanes();
            }
            remove => HookHandler._afterUpdateCameraClipPlanes -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_RenderTextureHeight_NormalArgs get_RenderTextureHeight
        {
            add => HookEndpointManager.Add<Delegates.get_RenderTextureHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_RenderTextureHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RenderTextureHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_RenderTextureHeight"), value);
        }

        public static event Delegates.set_RenderTextureHeight_NormalArgs set_RenderTextureHeight
        {
            add => HookEndpointManager.Add<Delegates.set_RenderTextureHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_RenderTextureHeight"), value);
            remove => HookEndpointManager.Remove<Delegates.set_RenderTextureHeight_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_RenderTextureHeight"), value);
        }

        public static event On.LightBlurredBackground.hook_Awake Awake
        {
            add => On.LightBlurredBackground.Awake += value;
            remove => On.LightBlurredBackground.Awake -= value;
        }

        public static event On.LightBlurredBackground.hook_OnEnable OnEnable
        {
            add => On.LightBlurredBackground.OnEnable += value;
            remove => On.LightBlurredBackground.OnEnable -= value;
        }

        public static event On.LightBlurredBackground.hook_OnCameraAspectChanged OnCameraAspectChanged
        {
            add => On.LightBlurredBackground.OnCameraAspectChanged += value;
            remove => On.LightBlurredBackground.OnCameraAspectChanged -= value;
        }

        public static event On.LightBlurredBackground.hook_OnDisable OnDisable
        {
            add => On.LightBlurredBackground.OnDisable += value;
            remove => On.LightBlurredBackground.OnDisable -= value;
        }

        public static event Delegates.get_PassGroupCount_NormalArgs get_PassGroupCount
        {
            add => HookEndpointManager.Add<Delegates.get_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_PassGroupCount"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "get_PassGroupCount"), value);
        }

        public static event Delegates.set_PassGroupCount_NormalArgs set_PassGroupCount
        {
            add => HookEndpointManager.Add<Delegates.set_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_PassGroupCount"), value);
            remove => HookEndpointManager.Remove<Delegates.set_PassGroupCount_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LightBlurredBackground), "set_PassGroupCount"), value);
        }

        public static event On.LightBlurredBackground.hook_OnBlurPlanesChanged OnBlurPlanesChanged
        {
            add => On.LightBlurredBackground.OnBlurPlanesChanged += value;
            remove => On.LightBlurredBackground.OnBlurPlanesChanged -= value;
        }

        public static event On.LightBlurredBackground.hook_LateUpdate LateUpdate
        {
            add => On.LightBlurredBackground.LateUpdate += value;
            remove => On.LightBlurredBackground.LateUpdate -= value;
        }

        public static event On.LightBlurredBackground.hook_UpdateCameraClipPlanes UpdateCameraClipPlanes
        {
            add => On.LightBlurredBackground.UpdateCameraClipPlanes += value;
            remove => On.LightBlurredBackground.UpdateCameraClipPlanes -= value;
        }
    }
}