using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GUILayoutBeginAreaFollowObject class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGUILayoutBeginAreaFollowObject
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<GUILayoutBeginAreaFollowObject> orig, GUILayoutBeginAreaFollowObject self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "OnGUI"), OnGUI);
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_NormalArgs _afterOnGUI;

        private static void OnGUI(Action<GUILayoutBeginAreaFollowObject> orig, GUILayoutBeginAreaFollowObject self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            _beforeOnGUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnGUI != null) _afterOnGUI.Invoke(@params);
        }

        internal static void HookDummyBeginArea()
        {
            if (!HookedList.Contains("DummyBeginArea"))
            {
                HookedList.Add("DummyBeginArea");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "DummyBeginArea", false),
                    DummyBeginArea);
            }
        }

        internal static event Delegates.DummyBeginArea_BeforeArgs _beforeDummyBeginArea;
        internal static event Delegates.DummyBeginArea_NormalArgs _afterDummyBeginArea;

        private static void DummyBeginArea(Action orig)
        {
            _beforeDummyBeginArea?.Invoke();
            orig();
            if (_afterDummyBeginArea != null) _afterDummyBeginArea.Invoke();
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DummyBeginArea_BeforeArgs();

        public delegate void DummyBeginArea_NormalArgs();

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_NormalArgs(Params_OnGUI args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public GUILayoutBeginAreaFollowObject self;
        }

        public sealed class Params_OnGUI
        {
            public GUILayoutBeginAreaFollowObject self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.DummyBeginArea_BeforeArgs DummyBeginArea
        {
            add
            {
                HookHandler._beforeDummyBeginArea += value;
                HookHandler.HookDummyBeginArea();
            }
            remove => HookHandler._beforeDummyBeginArea -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.DummyBeginArea_NormalArgs DummyBeginArea
        {
            add
            {
                HookHandler._afterDummyBeginArea += value;
                HookHandler.HookDummyBeginArea();
            }
            remove => HookHandler._afterDummyBeginArea -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "Reset"), value);
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add => HookEndpointManager.Add<Delegates.OnGUI_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "OnGUI"), value);
            remove => HookEndpointManager.Remove<Delegates.OnGUI_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "OnGUI"), value);
        }

        public static event Delegates.DummyBeginArea_NormalArgs DummyBeginArea
        {
            add => HookEndpointManager.Add<Delegates.DummyBeginArea_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "DummyBeginArea", false), value);
            remove => HookEndpointManager.Remove<Delegates.DummyBeginArea_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutBeginAreaFollowObject), "DummyBeginArea", false), value);
        }
    }
}