using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for GUILayoutBeginAreaFollowObject class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGUILayoutBeginAreaFollowObject
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject> orig, HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnGUI()
{
if (!HookedList.Contains("OnGUI"))
{
HookedList.Add("OnGUI");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "OnGUI", true), OnGUI);

}
}
internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;
private static void OnGUI(Action<HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject> orig, HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject self)
{
Delegates.Params_OnGUI @params = new() 
{
self = self
};
if (_beforeOnGUI != null)
{
foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
{
try
{
_beforeOnGUI?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnGUI != null)
{
foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
{
try
{
_afterOnGUI.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDummyBeginArea()
{
if (!HookedList.Contains("DummyBeginArea"))
{
HookedList.Add("DummyBeginArea");
new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "DummyBeginArea", false), DummyBeginArea);

}
}
internal static event Delegates.DummyBeginArea_BeforeArgs _beforeDummyBeginArea;
internal static event Delegates.DummyBeginArea_AfterArgs _afterDummyBeginArea;
private static void DummyBeginArea(Action orig)
{
if (_beforeDummyBeginArea != null)
{
foreach (Delegates.DummyBeginArea_BeforeArgs toInvoke in _beforeDummyBeginArea.GetInvocationList())
{
try
{
_beforeDummyBeginArea?.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
orig();
if (_afterDummyBeginArea != null)
{
foreach (Delegates.DummyBeginArea_AfterArgs toInvoke in _afterDummyBeginArea.GetInvocationList())
{
try
{
_afterDummyBeginArea.Invoke();
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject> orig, HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject self);
public sealed class Params_OnGUI
{
public HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject self;
}
public delegate void OnGUI_BeforeArgs(Params_OnGUI args);
public delegate void OnGUI_AfterArgs(Params_OnGUI args);
public delegate void OnGUI_WithArgs (Action<HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject> orig, HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject self);
public delegate void DummyBeginArea_BeforeArgs();
public delegate void DummyBeginArea_AfterArgs();
public delegate void DummyBeginArea_WithArgs (Action orig);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.OnGUI_BeforeArgs OnGUI
{
add
{

HookHandler._beforeOnGUI += value;
HookHandler.HookOnGUI();
}
remove => HookHandler._beforeOnGUI -= value;
}
public static event Delegates.DummyBeginArea_BeforeArgs DummyBeginArea
{
add
{

HookHandler._beforeDummyBeginArea += value;
HookHandler.HookDummyBeginArea();
}
remove => HookHandler._beforeDummyBeginArea -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.OnGUI_AfterArgs OnGUI
{
add
{

HookHandler._afterOnGUI += value;
HookHandler.HookOnGUI();
}
remove => HookHandler._afterOnGUI -= value;
}
public static event Delegates.DummyBeginArea_AfterArgs DummyBeginArea
{
add
{

HookHandler._afterDummyBeginArea += value;
HookHandler.HookDummyBeginArea();
}
remove => HookHandler._afterDummyBeginArea -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "Reset", true), value);
}
public static event Delegates.OnGUI_WithArgs OnGUI
{
add => HookEndpointManager.Add<Delegates.OnGUI_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "OnGUI", true), value);
remove => HookEndpointManager.Remove<Delegates.OnGUI_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "OnGUI", true), value);
}
public static event Delegates.DummyBeginArea_WithArgs DummyBeginArea
{
add => HookEndpointManager.Add<Delegates.DummyBeginArea_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "DummyBeginArea", false), value);
remove => HookEndpointManager.Remove<Delegates.DummyBeginArea_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.GUILayoutBeginAreaFollowObject), "DummyBeginArea", false), value);
}
}

}
