namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PersistentIntItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPersistentIntItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PersistentIntItem.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.PersistentIntItem.orig_Awake orig, PersistentIntItem self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PersistentIntItem.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.PersistentIntItem.orig_OnEnable orig, PersistentIntItem self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.PersistentIntItem.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.PersistentIntItem.orig_OnDisable orig, PersistentIntItem self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.PersistentIntItem.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.PersistentIntItem.orig_Start orig, PersistentIntItem self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveState()
        {
            if (!HookedList.Contains("SaveState"))
            {
                HookedList.Add("SaveState");
                On.PersistentIntItem.SaveState += SaveState;
            }
        }

        internal static event Delegates.SaveState_BeforeArgs _beforeSaveState;
        internal static event Delegates.SaveState_AfterArgs _afterSaveState;

        private static void SaveState(On.PersistentIntItem.orig_SaveState orig, PersistentIntItem self)
        {
            Delegates.Params_SaveState @params = new()
            {
                self = self
            };
            if (_beforeSaveState != null)
                foreach (Delegates.SaveState_BeforeArgs toInvoke in _beforeSaveState.GetInvocationList())
                    try
                    {
                        _beforeSaveState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveState != null)
                foreach (Delegates.SaveState_AfterArgs toInvoke in _afterSaveState.GetInvocationList())
                    try
                    {
                        _afterSaveState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetState()
        {
            if (!HookedList.Contains("ResetState"))
            {
                HookedList.Add("ResetState");
                On.PersistentIntItem.ResetState += ResetState;
            }
        }

        internal static event Delegates.ResetState_BeforeArgs _beforeResetState;
        internal static event Delegates.ResetState_AfterArgs _afterResetState;

        private static void ResetState(On.PersistentIntItem.orig_ResetState orig, PersistentIntItem self)
        {
            Delegates.Params_ResetState @params = new()
            {
                self = self
            };
            if (_beforeResetState != null)
                foreach (Delegates.ResetState_BeforeArgs toInvoke in _beforeResetState.GetInvocationList())
                    try
                    {
                        _beforeResetState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetState != null)
                foreach (Delegates.ResetState_AfterArgs toInvoke in _afterResetState.GetInvocationList())
                    try
                    {
                        _afterResetState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetMyID()
        {
            if (!HookedList.Contains("SetMyID"))
            {
                HookedList.Add("SetMyID");
                On.PersistentIntItem.SetMyID += SetMyID;
            }
        }

        internal static event Delegates.SetMyID_BeforeArgs _beforeSetMyID;
        internal static event Delegates.SetMyID_AfterArgs _afterSetMyID;

        private static void SetMyID(On.PersistentIntItem.orig_SetMyID orig, PersistentIntItem self)
        {
            Delegates.Params_SetMyID @params = new()
            {
                self = self
            };
            if (_beforeSetMyID != null)
                foreach (Delegates.SetMyID_BeforeArgs toInvoke in _beforeSetMyID.GetInvocationList())
                    try
                    {
                        _beforeSetMyID?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetMyID != null)
                foreach (Delegates.SetMyID_AfterArgs toInvoke in _afterSetMyID.GetInvocationList())
                    try
                    {
                        _afterSetMyID.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateValueFromFSM()
        {
            if (!HookedList.Contains("UpdateValueFromFSM"))
            {
                HookedList.Add("UpdateValueFromFSM");
                On.PersistentIntItem.UpdateValueFromFSM += UpdateValueFromFSM;
            }
        }

        internal static event Delegates.UpdateValueFromFSM_BeforeArgs _beforeUpdateValueFromFSM;
        internal static event Delegates.UpdateValueFromFSM_AfterArgs _afterUpdateValueFromFSM;

        private static void UpdateValueFromFSM(On.PersistentIntItem.orig_UpdateValueFromFSM orig,
            PersistentIntItem self)
        {
            Delegates.Params_UpdateValueFromFSM @params = new()
            {
                self = self
            };
            if (_beforeUpdateValueFromFSM != null)
                foreach (Delegates.UpdateValueFromFSM_BeforeArgs toInvoke in
                         _beforeUpdateValueFromFSM.GetInvocationList())
                    try
                    {
                        _beforeUpdateValueFromFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateValueFromFSM != null)
                foreach (Delegates.UpdateValueFromFSM_AfterArgs toInvoke in
                         _afterUpdateValueFromFSM.GetInvocationList())
                    try
                    {
                        _afterUpdateValueFromFSM.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetValueOnFSM()
        {
            if (!HookedList.Contains("SetValueOnFSM"))
            {
                HookedList.Add("SetValueOnFSM");
                On.PersistentIntItem.SetValueOnFSM += SetValueOnFSM;
            }
        }

        internal static event Delegates.SetValueOnFSM_BeforeArgs _beforeSetValueOnFSM;
        internal static event Delegates.SetValueOnFSM_AfterArgs _afterSetValueOnFSM;

        private static void SetValueOnFSM(On.PersistentIntItem.orig_SetValueOnFSM orig, PersistentIntItem self,
            int newValue)
        {
            Delegates.Params_SetValueOnFSM @params = new()
            {
                self = self, newValue = newValue
            };
            if (_beforeSetValueOnFSM != null)
                foreach (Delegates.SetValueOnFSM_BeforeArgs toInvoke in _beforeSetValueOnFSM.GetInvocationList())
                    try
                    {
                        _beforeSetValueOnFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newValue = @params.newValue;
            orig(self, newValue);
            if (_afterSetValueOnFSM != null)
                foreach (Delegates.SetValueOnFSM_AfterArgs toInvoke in _afterSetValueOnFSM.GetInvocationList())
                    try
                    {
                        _afterSetValueOnFSM.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLookForMyFSM()
        {
            if (!HookedList.Contains("LookForMyFSM"))
            {
                HookedList.Add("LookForMyFSM");
                On.PersistentIntItem.LookForMyFSM += LookForMyFSM;
            }
        }

        internal static event Delegates.LookForMyFSM_BeforeArgs _beforeLookForMyFSM;
        internal static event Delegates.LookForMyFSM_AfterArgs _afterLookForMyFSM;

        private static void LookForMyFSM(On.PersistentIntItem.orig_LookForMyFSM orig, PersistentIntItem self)
        {
            Delegates.Params_LookForMyFSM @params = new()
            {
                self = self
            };
            if (_beforeLookForMyFSM != null)
                foreach (Delegates.LookForMyFSM_BeforeArgs toInvoke in _beforeLookForMyFSM.GetInvocationList())
                    try
                    {
                        _beforeLookForMyFSM?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLookForMyFSM != null)
                foreach (Delegates.LookForMyFSM_AfterArgs toInvoke in _afterLookForMyFSM.GetInvocationList())
                    try
                    {
                        _afterLookForMyFSM.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void LookForMyFSM_AfterArgs(Params_LookForMyFSM args);

        public delegate void LookForMyFSM_BeforeArgs(Params_LookForMyFSM args);

        public delegate void LookForMyFSM_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void ResetState_AfterArgs(Params_ResetState args);

        public delegate void ResetState_BeforeArgs(Params_ResetState args);

        public delegate void ResetState_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void SaveState_AfterArgs(Params_SaveState args);

        public delegate void SaveState_BeforeArgs(Params_SaveState args);

        public delegate void SaveState_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void SetMyID_AfterArgs(Params_SetMyID args);

        public delegate void SetMyID_BeforeArgs(Params_SetMyID args);

        public delegate void SetMyID_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void SetValueOnFSM_AfterArgs(Params_SetValueOnFSM args);

        public delegate void SetValueOnFSM_BeforeArgs(Params_SetValueOnFSM args);

        public delegate void SetValueOnFSM_WithArgs(Action<PersistentIntItem, int> orig, PersistentIntItem self,
            int newValue);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public delegate void UpdateValueFromFSM_AfterArgs(Params_UpdateValueFromFSM args);

        public delegate void UpdateValueFromFSM_BeforeArgs(Params_UpdateValueFromFSM args);

        public delegate void UpdateValueFromFSM_WithArgs(Action<PersistentIntItem> orig, PersistentIntItem self);

        public sealed class Params_Awake
        {
            public PersistentIntItem self;
        }

        public sealed class Params_OnEnable
        {
            public PersistentIntItem self;
        }

        public sealed class Params_OnDisable
        {
            public PersistentIntItem self;
        }

        public sealed class Params_Start
        {
            public PersistentIntItem self;
        }

        public sealed class Params_SaveState
        {
            public PersistentIntItem self;
        }

        public sealed class Params_ResetState
        {
            public PersistentIntItem self;
        }

        public sealed class Params_SetMyID
        {
            public PersistentIntItem self;
        }

        public sealed class Params_UpdateValueFromFSM
        {
            public PersistentIntItem self;
        }

        public sealed class Params_SetValueOnFSM
        {
            public int newValue;
            public PersistentIntItem self;
        }

        public sealed class Params_LookForMyFSM
        {
            public PersistentIntItem self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.SaveState_BeforeArgs SaveState
        {
            add
            {
                HookHandler._beforeSaveState += value;
                HookHandler.HookSaveState();
            }
            remove => HookHandler._beforeSaveState -= value;
        }

        public static event Delegates.ResetState_BeforeArgs ResetState
        {
            add
            {
                HookHandler._beforeResetState += value;
                HookHandler.HookResetState();
            }
            remove => HookHandler._beforeResetState -= value;
        }

        public static event Delegates.SetMyID_BeforeArgs SetMyID
        {
            add
            {
                HookHandler._beforeSetMyID += value;
                HookHandler.HookSetMyID();
            }
            remove => HookHandler._beforeSetMyID -= value;
        }

        public static event Delegates.UpdateValueFromFSM_BeforeArgs UpdateValueFromFSM
        {
            add
            {
                HookHandler._beforeUpdateValueFromFSM += value;
                HookHandler.HookUpdateValueFromFSM();
            }
            remove => HookHandler._beforeUpdateValueFromFSM -= value;
        }

        public static event Delegates.SetValueOnFSM_BeforeArgs SetValueOnFSM
        {
            add
            {
                HookHandler._beforeSetValueOnFSM += value;
                HookHandler.HookSetValueOnFSM();
            }
            remove => HookHandler._beforeSetValueOnFSM -= value;
        }

        public static event Delegates.LookForMyFSM_BeforeArgs LookForMyFSM
        {
            add
            {
                HookHandler._beforeLookForMyFSM += value;
                HookHandler.HookLookForMyFSM();
            }
            remove => HookHandler._beforeLookForMyFSM -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.SaveState_AfterArgs SaveState
        {
            add
            {
                HookHandler._afterSaveState += value;
                HookHandler.HookSaveState();
            }
            remove => HookHandler._afterSaveState -= value;
        }

        public static event Delegates.ResetState_AfterArgs ResetState
        {
            add
            {
                HookHandler._afterResetState += value;
                HookHandler.HookResetState();
            }
            remove => HookHandler._afterResetState -= value;
        }

        public static event Delegates.SetMyID_AfterArgs SetMyID
        {
            add
            {
                HookHandler._afterSetMyID += value;
                HookHandler.HookSetMyID();
            }
            remove => HookHandler._afterSetMyID -= value;
        }

        public static event Delegates.UpdateValueFromFSM_AfterArgs UpdateValueFromFSM
        {
            add
            {
                HookHandler._afterUpdateValueFromFSM += value;
                HookHandler.HookUpdateValueFromFSM();
            }
            remove => HookHandler._afterUpdateValueFromFSM -= value;
        }

        public static event Delegates.SetValueOnFSM_AfterArgs SetValueOnFSM
        {
            add
            {
                HookHandler._afterSetValueOnFSM += value;
                HookHandler.HookSetValueOnFSM();
            }
            remove => HookHandler._afterSetValueOnFSM -= value;
        }

        public static event Delegates.LookForMyFSM_AfterArgs LookForMyFSM
        {
            add
            {
                HookHandler._afterLookForMyFSM += value;
                HookHandler.HookLookForMyFSM();
            }
            remove => HookHandler._afterLookForMyFSM -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PersistentIntItem.hook_Awake Awake
        {
            add => On.PersistentIntItem.Awake += value;
            remove => On.PersistentIntItem.Awake -= value;
        }

        public static event On.PersistentIntItem.hook_OnEnable OnEnable
        {
            add => On.PersistentIntItem.OnEnable += value;
            remove => On.PersistentIntItem.OnEnable -= value;
        }

        public static event On.PersistentIntItem.hook_OnDisable OnDisable
        {
            add => On.PersistentIntItem.OnDisable += value;
            remove => On.PersistentIntItem.OnDisable -= value;
        }

        public static event On.PersistentIntItem.hook_Start Start
        {
            add => On.PersistentIntItem.Start += value;
            remove => On.PersistentIntItem.Start -= value;
        }

        public static event On.PersistentIntItem.hook_SaveState SaveState
        {
            add => On.PersistentIntItem.SaveState += value;
            remove => On.PersistentIntItem.SaveState -= value;
        }

        public static event On.PersistentIntItem.hook_ResetState ResetState
        {
            add => On.PersistentIntItem.ResetState += value;
            remove => On.PersistentIntItem.ResetState -= value;
        }

        public static event On.PersistentIntItem.hook_SetMyID SetMyID
        {
            add => On.PersistentIntItem.SetMyID += value;
            remove => On.PersistentIntItem.SetMyID -= value;
        }

        public static event On.PersistentIntItem.hook_UpdateValueFromFSM UpdateValueFromFSM
        {
            add => On.PersistentIntItem.UpdateValueFromFSM += value;
            remove => On.PersistentIntItem.UpdateValueFromFSM -= value;
        }

        public static event On.PersistentIntItem.hook_SetValueOnFSM SetValueOnFSM
        {
            add => On.PersistentIntItem.SetValueOnFSM += value;
            remove => On.PersistentIntItem.SetValueOnFSM -= value;
        }

        public static event On.PersistentIntItem.hook_LookForMyFSM LookForMyFSM
        {
            add => On.PersistentIntItem.LookForMyFSM += value;
            remove => On.PersistentIntItem.LookForMyFSM -= value;
        }
    }
}