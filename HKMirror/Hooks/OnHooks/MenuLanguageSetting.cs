using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuLanguageSetting class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuLanguageSetting
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnEnable"), OnEnable);
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookUpdateAlpha()
        {
            if (!HookedList.Contains("UpdateAlpha"))
            {
                HookedList.Add("UpdateAlpha");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateAlpha"), UpdateAlpha);
            }
        }

        internal static event Delegates.UpdateAlpha_BeforeArgs _beforeUpdateAlpha;
        internal static event Delegates.UpdateAlpha_NormalArgs _afterUpdateAlpha;

        private static void UpdateAlpha(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_UpdateAlpha @params = new()
            {
                self = self
            };
            _beforeUpdateAlpha?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateAlpha != null) _afterUpdateAlpha.Invoke(@params);
        }

        internal static void HookOnMove()
        {
            if (!HookedList.Contains("OnMove"))
            {
                HookedList.Add("OnMove");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnMove"), OnMove);
            }
        }

        internal static event Delegates.OnMove_BeforeArgs _beforeOnMove;
        internal static event Delegates.OnMove_NormalArgs _afterOnMove;

        private static void OnMove(Action<MenuLanguageSetting, AxisEventData> orig, MenuLanguageSetting self,
            AxisEventData move)
        {
            Delegates.Params_OnMove @params = new()
            {
                self = self, move = move
            };
            _beforeOnMove?.Invoke(@params);
            self = @params.self;
            move = @params.move;
            orig(self, move);
            if (_afterOnMove != null) _afterOnMove.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<MenuLanguageSetting, PointerEventData> orig, MenuLanguageSetting self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }

        internal static void HookRectTransformToScreenSpace()
        {
            if (!HookedList.Contains("RectTransformToScreenSpace"))
            {
                HookedList.Add("RectTransformToScreenSpace");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RectTransformToScreenSpace", false),
                    RectTransformToScreenSpace);
            }
        }

        internal static event Delegates.RectTransformToScreenSpace_BeforeArgs _beforeRectTransformToScreenSpace;
        internal static event Delegates.RectTransformToScreenSpace_NormalArgs _afterRectTransformToScreenSpace;

        private static Rect RectTransformToScreenSpace(Func<RectTransform, Rect> orig, RectTransform transform)
        {
            Delegates.Params_RectTransformToScreenSpace @params = new()
            {
                transform = transform
            };
            _beforeRectTransformToScreenSpace?.Invoke(@params);
            transform = @params.transform;
            var retVal = orig(transform);
            if (_afterRectTransformToScreenSpace != null) retVal = _afterRectTransformToScreenSpace.Invoke(@params);
            return retVal;
        }

        internal static void HookRefreshControls()
        {
            if (!HookedList.Contains("RefreshControls"))
            {
                HookedList.Add("RefreshControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshControls"),
                    RefreshControls);
            }
        }

        internal static event Delegates.RefreshControls_BeforeArgs _beforeRefreshControls;
        internal static event Delegates.RefreshControls_NormalArgs _afterRefreshControls;

        private static void RefreshControls(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_RefreshControls @params = new()
            {
                self = self
            };
            _beforeRefreshControls?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshControls != null) _afterRefreshControls.Invoke(@params);
        }

        internal static void HookUpdateLanguageSetting()
        {
            if (!HookedList.Contains("UpdateLanguageSetting"))
            {
                HookedList.Add("UpdateLanguageSetting");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateLanguageSetting"),
                    UpdateLanguageSetting);
            }
        }

        internal static event Delegates.UpdateLanguageSetting_BeforeArgs _beforeUpdateLanguageSetting;
        internal static event Delegates.UpdateLanguageSetting_NormalArgs _afterUpdateLanguageSetting;

        private static void UpdateLanguageSetting(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_UpdateLanguageSetting @params = new()
            {
                self = self
            };
            _beforeUpdateLanguageSetting?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateLanguageSetting != null) _afterUpdateLanguageSetting.Invoke(@params);
        }

        internal static void HookRefreshAvailableLanguages()
        {
            if (!HookedList.Contains("RefreshAvailableLanguages"))
            {
                HookedList.Add("RefreshAvailableLanguages");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshAvailableLanguages"),
                    RefreshAvailableLanguages);
            }
        }

        internal static event Delegates.RefreshAvailableLanguages_BeforeArgs _beforeRefreshAvailableLanguages;
        internal static event Delegates.RefreshAvailableLanguages_NormalArgs _afterRefreshAvailableLanguages;

        private static void RefreshAvailableLanguages(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_RefreshAvailableLanguages @params = new()
            {
                self = self
            };
            _beforeRefreshAvailableLanguages?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshAvailableLanguages != null) _afterRefreshAvailableLanguages.Invoke(@params);
        }

        internal static void HookRefreshCurrentIndex()
        {
            if (!HookedList.Contains("RefreshCurrentIndex"))
            {
                HookedList.Add("RefreshCurrentIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshCurrentIndex"),
                    RefreshCurrentIndex);
            }
        }

        internal static event Delegates.RefreshCurrentIndex_BeforeArgs _beforeRefreshCurrentIndex;
        internal static event Delegates.RefreshCurrentIndex_NormalArgs _afterRefreshCurrentIndex;

        private static void RefreshCurrentIndex(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_RefreshCurrentIndex @params = new()
            {
                self = self
            };
            _beforeRefreshCurrentIndex?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRefreshCurrentIndex != null) _afterRefreshCurrentIndex.Invoke(@params);
        }

        internal static void HookPushUpdateOptionList()
        {
            if (!HookedList.Contains("PushUpdateOptionList"))
            {
                HookedList.Add("PushUpdateOptionList");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "PushUpdateOptionList"),
                    PushUpdateOptionList);
            }
        }

        internal static event Delegates.PushUpdateOptionList_BeforeArgs _beforePushUpdateOptionList;
        internal static event Delegates.PushUpdateOptionList_NormalArgs _afterPushUpdateOptionList;

        private static void PushUpdateOptionList(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_PushUpdateOptionList @params = new()
            {
                self = self
            };
            _beforePushUpdateOptionList?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPushUpdateOptionList != null) _afterPushUpdateOptionList.Invoke(@params);
        }

        internal static void HookUpdateText()
        {
            if (!HookedList.Contains("UpdateText"))
            {
                HookedList.Add("UpdateText");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateText"), UpdateText);
            }
        }

        internal static event Delegates.UpdateText_BeforeArgs _beforeUpdateText;
        internal static event Delegates.UpdateText_NormalArgs _afterUpdateText;

        private static void UpdateText(Action<MenuLanguageSetting> orig, MenuLanguageSetting self)
        {
            Delegates.Params_UpdateText @params = new()
            {
                self = self
            };
            _beforeUpdateText?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateText != null) _afterUpdateText.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnMove_BeforeArgs(Params_OnMove args);

        public delegate void OnMove_NormalArgs(Params_OnMove args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void PushUpdateOptionList_BeforeArgs(Params_PushUpdateOptionList args);

        public delegate void PushUpdateOptionList_NormalArgs(Params_PushUpdateOptionList args);

        public delegate void RectTransformToScreenSpace_BeforeArgs(Params_RectTransformToScreenSpace args);

        public delegate Rect RectTransformToScreenSpace_NormalArgs(Params_RectTransformToScreenSpace args);

        public delegate void RefreshAvailableLanguages_BeforeArgs(Params_RefreshAvailableLanguages args);

        public delegate void RefreshAvailableLanguages_NormalArgs(Params_RefreshAvailableLanguages args);

        public delegate void RefreshControls_BeforeArgs(Params_RefreshControls args);

        public delegate void RefreshControls_NormalArgs(Params_RefreshControls args);

        public delegate void RefreshCurrentIndex_BeforeArgs(Params_RefreshCurrentIndex args);

        public delegate void RefreshCurrentIndex_NormalArgs(Params_RefreshCurrentIndex args);

        public delegate void UpdateAlpha_BeforeArgs(Params_UpdateAlpha args);

        public delegate void UpdateAlpha_NormalArgs(Params_UpdateAlpha args);

        public delegate void UpdateLanguageSetting_BeforeArgs(Params_UpdateLanguageSetting args);

        public delegate void UpdateLanguageSetting_NormalArgs(Params_UpdateLanguageSetting args);

        public delegate void UpdateText_BeforeArgs(Params_UpdateText args);

        public delegate void UpdateText_NormalArgs(Params_UpdateText args);

        public sealed class Params_OnEnable
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_UpdateAlpha
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_OnMove
        {
            public AxisEventData move;
            public MenuLanguageSetting self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public MenuLanguageSetting self;
        }

        public sealed class Params_RectTransformToScreenSpace
        {
            public RectTransform transform;
        }

        public sealed class Params_RefreshControls
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_UpdateLanguageSetting
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_RefreshAvailableLanguages
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_RefreshCurrentIndex
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_PushUpdateOptionList
        {
            public MenuLanguageSetting self;
        }

        public sealed class Params_UpdateText
        {
            public MenuLanguageSetting self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.UpdateAlpha_BeforeArgs UpdateAlpha
        {
            add
            {
                HookHandler._beforeUpdateAlpha += value;
                HookHandler.HookUpdateAlpha();
            }
            remove => HookHandler._beforeUpdateAlpha -= value;
        }

        public static event Delegates.OnMove_BeforeArgs OnMove
        {
            add
            {
                HookHandler._beforeOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._beforeOnMove -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.RectTransformToScreenSpace_BeforeArgs RectTransformToScreenSpace
        {
            add
            {
                HookHandler._beforeRectTransformToScreenSpace += value;
                HookHandler.HookRectTransformToScreenSpace();
            }
            remove => HookHandler._beforeRectTransformToScreenSpace -= value;
        }

        public static event Delegates.RefreshControls_BeforeArgs RefreshControls
        {
            add
            {
                HookHandler._beforeRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._beforeRefreshControls -= value;
        }

        public static event Delegates.UpdateLanguageSetting_BeforeArgs UpdateLanguageSetting
        {
            add
            {
                HookHandler._beforeUpdateLanguageSetting += value;
                HookHandler.HookUpdateLanguageSetting();
            }
            remove => HookHandler._beforeUpdateLanguageSetting -= value;
        }

        public static event Delegates.RefreshAvailableLanguages_BeforeArgs RefreshAvailableLanguages
        {
            add
            {
                HookHandler._beforeRefreshAvailableLanguages += value;
                HookHandler.HookRefreshAvailableLanguages();
            }
            remove => HookHandler._beforeRefreshAvailableLanguages -= value;
        }

        public static event Delegates.RefreshCurrentIndex_BeforeArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._beforeRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._beforeRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_BeforeArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._beforePushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._beforePushUpdateOptionList -= value;
        }

        public static event Delegates.UpdateText_BeforeArgs UpdateText
        {
            add
            {
                HookHandler._beforeUpdateText += value;
                HookHandler.HookUpdateText();
            }
            remove => HookHandler._beforeUpdateText -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.UpdateAlpha_NormalArgs UpdateAlpha
        {
            add
            {
                HookHandler._afterUpdateAlpha += value;
                HookHandler.HookUpdateAlpha();
            }
            remove => HookHandler._afterUpdateAlpha -= value;
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add
            {
                HookHandler._afterOnMove += value;
                HookHandler.HookOnMove();
            }
            remove => HookHandler._afterOnMove -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.RectTransformToScreenSpace_NormalArgs RectTransformToScreenSpace
        {
            add
            {
                HookHandler._afterRectTransformToScreenSpace += value;
                HookHandler.HookRectTransformToScreenSpace();
            }
            remove => HookHandler._afterRectTransformToScreenSpace -= value;
        }

        public static event Delegates.RefreshControls_NormalArgs RefreshControls
        {
            add
            {
                HookHandler._afterRefreshControls += value;
                HookHandler.HookRefreshControls();
            }
            remove => HookHandler._afterRefreshControls -= value;
        }

        public static event Delegates.UpdateLanguageSetting_NormalArgs UpdateLanguageSetting
        {
            add
            {
                HookHandler._afterUpdateLanguageSetting += value;
                HookHandler.HookUpdateLanguageSetting();
            }
            remove => HookHandler._afterUpdateLanguageSetting -= value;
        }

        public static event Delegates.RefreshAvailableLanguages_NormalArgs RefreshAvailableLanguages
        {
            add
            {
                HookHandler._afterRefreshAvailableLanguages += value;
                HookHandler.HookRefreshAvailableLanguages();
            }
            remove => HookHandler._afterRefreshAvailableLanguages -= value;
        }

        public static event Delegates.RefreshCurrentIndex_NormalArgs RefreshCurrentIndex
        {
            add
            {
                HookHandler._afterRefreshCurrentIndex += value;
                HookHandler.HookRefreshCurrentIndex();
            }
            remove => HookHandler._afterRefreshCurrentIndex -= value;
        }

        public static event Delegates.PushUpdateOptionList_NormalArgs PushUpdateOptionList
        {
            add
            {
                HookHandler._afterPushUpdateOptionList += value;
                HookHandler.HookPushUpdateOptionList();
            }
            remove => HookHandler._afterPushUpdateOptionList -= value;
        }

        public static event Delegates.UpdateText_NormalArgs UpdateText
        {
            add
            {
                HookHandler._afterUpdateText += value;
                HookHandler.HookUpdateText();
            }
            remove => HookHandler._afterUpdateText -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add => HookEndpointManager.Add<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnEnable"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnable_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnEnable"), value);
        }

        public static event Delegates.UpdateAlpha_NormalArgs UpdateAlpha
        {
            add => HookEndpointManager.Add<Delegates.UpdateAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateAlpha"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateAlpha_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateAlpha"), value);
        }

        public static event Delegates.OnMove_NormalArgs OnMove
        {
            add => HookEndpointManager.Add<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnMove"), value);
            remove => HookEndpointManager.Remove<Delegates.OnMove_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnMove"), value);
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "OnPointerClick"), value);
        }

        public static event Delegates.RectTransformToScreenSpace_NormalArgs RectTransformToScreenSpace
        {
            add => HookEndpointManager.Add<Delegates.RectTransformToScreenSpace_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RectTransformToScreenSpace", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.RectTransformToScreenSpace_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RectTransformToScreenSpace", false),
                value);
        }

        public static event Delegates.RefreshControls_NormalArgs RefreshControls
        {
            add => HookEndpointManager.Add<Delegates.RefreshControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshControls"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshControls_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshControls"), value);
        }

        public static event Delegates.UpdateLanguageSetting_NormalArgs UpdateLanguageSetting
        {
            add => HookEndpointManager.Add<Delegates.UpdateLanguageSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateLanguageSetting"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateLanguageSetting_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateLanguageSetting"), value);
        }

        public static event Delegates.RefreshAvailableLanguages_NormalArgs RefreshAvailableLanguages
        {
            add => HookEndpointManager.Add<Delegates.RefreshAvailableLanguages_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshAvailableLanguages"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshAvailableLanguages_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshAvailableLanguages"), value);
        }

        public static event Delegates.RefreshCurrentIndex_NormalArgs RefreshCurrentIndex
        {
            add => HookEndpointManager.Add<Delegates.RefreshCurrentIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshCurrentIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.RefreshCurrentIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "RefreshCurrentIndex"), value);
        }

        public static event Delegates.PushUpdateOptionList_NormalArgs PushUpdateOptionList
        {
            add => HookEndpointManager.Add<Delegates.PushUpdateOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "PushUpdateOptionList"), value);
            remove => HookEndpointManager.Remove<Delegates.PushUpdateOptionList_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "PushUpdateOptionList"), value);
        }

        public static event Delegates.UpdateText_NormalArgs UpdateText
        {
            add => HookEndpointManager.Add<Delegates.UpdateText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateText"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateText_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MenuLanguageSetting), "UpdateText"), value);
        }
    }
}