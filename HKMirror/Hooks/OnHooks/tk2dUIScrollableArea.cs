using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dUIScrollableArea class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIScrollableArea
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_ContentLength()
{
if (!HookedList.Contains("get_ContentLength"))
{
HookedList.Add("get_ContentLength");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLength", true), get_ContentLength);

}
}
internal static event Delegates.get_ContentLength_BeforeArgs _beforeget_ContentLength;
internal static event Delegates.get_ContentLength_AfterArgs _afterget_ContentLength;
private static float get_ContentLength(Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_ContentLength @params = new() 
{
self = self
};
if (_beforeget_ContentLength != null)
{
foreach (Delegates.get_ContentLength_BeforeArgs toInvoke in _beforeget_ContentLength.GetInvocationList())
{
try
{
_beforeget_ContentLength?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ContentLength != null)
{
foreach (Delegates.get_ContentLength_AfterArgs toInvoke in _afterget_ContentLength.GetInvocationList())
{
try
{
retVal = _afterget_ContentLength.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ContentLength()
{
if (!HookedList.Contains("set_ContentLength"))
{
HookedList.Add("set_ContentLength");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLength", true), set_ContentLength);

}
}
internal static event Delegates.set_ContentLength_BeforeArgs _beforeset_ContentLength;
internal static event Delegates.set_ContentLength_AfterArgs _afterset_ContentLength;
private static void set_ContentLength(Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float value)
{
Delegates.Params_set_ContentLength @params = new() 
{
self = self
, value = value
};
if (_beforeset_ContentLength != null)
{
foreach (Delegates.set_ContentLength_BeforeArgs toInvoke in _beforeset_ContentLength.GetInvocationList())
{
try
{
_beforeset_ContentLength?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ContentLength != null)
{
foreach (Delegates.set_ContentLength_AfterArgs toInvoke in _afterset_ContentLength.GetInvocationList())
{
try
{
_afterset_ContentLength.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_VisibleAreaLength()
{
if (!HookedList.Contains("get_VisibleAreaLength"))
{
HookedList.Add("get_VisibleAreaLength");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_VisibleAreaLength", true), get_VisibleAreaLength);

}
}
internal static event Delegates.get_VisibleAreaLength_BeforeArgs _beforeget_VisibleAreaLength;
internal static event Delegates.get_VisibleAreaLength_AfterArgs _afterget_VisibleAreaLength;
private static float get_VisibleAreaLength(Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_VisibleAreaLength @params = new() 
{
self = self
};
if (_beforeget_VisibleAreaLength != null)
{
foreach (Delegates.get_VisibleAreaLength_BeforeArgs toInvoke in _beforeget_VisibleAreaLength.GetInvocationList())
{
try
{
_beforeget_VisibleAreaLength?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_VisibleAreaLength != null)
{
foreach (Delegates.get_VisibleAreaLength_AfterArgs toInvoke in _afterget_VisibleAreaLength.GetInvocationList())
{
try
{
retVal = _afterget_VisibleAreaLength.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_VisibleAreaLength()
{
if (!HookedList.Contains("set_VisibleAreaLength"))
{
HookedList.Add("set_VisibleAreaLength");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_VisibleAreaLength", true), set_VisibleAreaLength);

}
}
internal static event Delegates.set_VisibleAreaLength_BeforeArgs _beforeset_VisibleAreaLength;
internal static event Delegates.set_VisibleAreaLength_AfterArgs _afterset_VisibleAreaLength;
private static void set_VisibleAreaLength(Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float value)
{
Delegates.Params_set_VisibleAreaLength @params = new() 
{
self = self
, value = value
};
if (_beforeset_VisibleAreaLength != null)
{
foreach (Delegates.set_VisibleAreaLength_BeforeArgs toInvoke in _beforeset_VisibleAreaLength.GetInvocationList())
{
try
{
_beforeset_VisibleAreaLength?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_VisibleAreaLength != null)
{
foreach (Delegates.set_VisibleAreaLength_AfterArgs toInvoke in _afterset_VisibleAreaLength.GetInvocationList())
{
try
{
_afterset_VisibleAreaLength.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_BackgroundLayoutItem()
{
if (!HookedList.Contains("get_BackgroundLayoutItem"))
{
HookedList.Add("get_BackgroundLayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_BackgroundLayoutItem", true), get_BackgroundLayoutItem);

}
}
internal static event Delegates.get_BackgroundLayoutItem_BeforeArgs _beforeget_BackgroundLayoutItem;
internal static event Delegates.get_BackgroundLayoutItem_AfterArgs _afterget_BackgroundLayoutItem;
private static tk2dUILayout get_BackgroundLayoutItem(Func<tk2dUIScrollableArea, tk2dUILayout> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_BackgroundLayoutItem @params = new() 
{
self = self
};
if (_beforeget_BackgroundLayoutItem != null)
{
foreach (Delegates.get_BackgroundLayoutItem_BeforeArgs toInvoke in _beforeget_BackgroundLayoutItem.GetInvocationList())
{
try
{
_beforeget_BackgroundLayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_BackgroundLayoutItem != null)
{
foreach (Delegates.get_BackgroundLayoutItem_AfterArgs toInvoke in _afterget_BackgroundLayoutItem.GetInvocationList())
{
try
{
retVal = _afterget_BackgroundLayoutItem.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_BackgroundLayoutItem()
{
if (!HookedList.Contains("set_BackgroundLayoutItem"))
{
HookedList.Add("set_BackgroundLayoutItem");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_BackgroundLayoutItem", true), set_BackgroundLayoutItem);

}
}
internal static event Delegates.set_BackgroundLayoutItem_BeforeArgs _beforeset_BackgroundLayoutItem;
internal static event Delegates.set_BackgroundLayoutItem_AfterArgs _afterset_BackgroundLayoutItem;
private static void set_BackgroundLayoutItem(Action<tk2dUIScrollableArea,  tk2dUILayout> orig, tk2dUIScrollableArea self,  tk2dUILayout value)
{
Delegates.Params_set_BackgroundLayoutItem @params = new() 
{
self = self
, value = value
};
if (_beforeset_BackgroundLayoutItem != null)
{
foreach (Delegates.set_BackgroundLayoutItem_BeforeArgs toInvoke in _beforeset_BackgroundLayoutItem.GetInvocationList())
{
try
{
_beforeset_BackgroundLayoutItem?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_BackgroundLayoutItem != null)
{
foreach (Delegates.set_BackgroundLayoutItem_AfterArgs toInvoke in _afterset_BackgroundLayoutItem.GetInvocationList())
{
try
{
_afterset_BackgroundLayoutItem.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ContentLayoutContainer()
{
if (!HookedList.Contains("get_ContentLayoutContainer"))
{
HookedList.Add("get_ContentLayoutContainer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLayoutContainer", true), get_ContentLayoutContainer);

}
}
internal static event Delegates.get_ContentLayoutContainer_BeforeArgs _beforeget_ContentLayoutContainer;
internal static event Delegates.get_ContentLayoutContainer_AfterArgs _afterget_ContentLayoutContainer;
private static tk2dUILayoutContainer get_ContentLayoutContainer(Func<tk2dUIScrollableArea, tk2dUILayoutContainer> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_ContentLayoutContainer @params = new() 
{
self = self
};
if (_beforeget_ContentLayoutContainer != null)
{
foreach (Delegates.get_ContentLayoutContainer_BeforeArgs toInvoke in _beforeget_ContentLayoutContainer.GetInvocationList())
{
try
{
_beforeget_ContentLayoutContainer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ContentLayoutContainer != null)
{
foreach (Delegates.get_ContentLayoutContainer_AfterArgs toInvoke in _afterget_ContentLayoutContainer.GetInvocationList())
{
try
{
retVal = _afterget_ContentLayoutContainer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ContentLayoutContainer()
{
if (!HookedList.Contains("set_ContentLayoutContainer"))
{
HookedList.Add("set_ContentLayoutContainer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLayoutContainer", true), set_ContentLayoutContainer);

}
}
internal static event Delegates.set_ContentLayoutContainer_BeforeArgs _beforeset_ContentLayoutContainer;
internal static event Delegates.set_ContentLayoutContainer_AfterArgs _afterset_ContentLayoutContainer;
private static void set_ContentLayoutContainer(Action<tk2dUIScrollableArea,  tk2dUILayoutContainer> orig, tk2dUIScrollableArea self,  tk2dUILayoutContainer value)
{
Delegates.Params_set_ContentLayoutContainer @params = new() 
{
self = self
, value = value
};
if (_beforeset_ContentLayoutContainer != null)
{
foreach (Delegates.set_ContentLayoutContainer_BeforeArgs toInvoke in _beforeset_ContentLayoutContainer.GetInvocationList())
{
try
{
_beforeset_ContentLayoutContainer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ContentLayoutContainer != null)
{
foreach (Delegates.set_ContentLayoutContainer_AfterArgs toInvoke in _afterset_ContentLayoutContainer.GetInvocationList())
{
try
{
_afterset_ContentLayoutContainer.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_SendMessageTarget()
{
if (!HookedList.Contains("get_SendMessageTarget"))
{
HookedList.Add("get_SendMessageTarget");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_SendMessageTarget", true), get_SendMessageTarget);

}
}
internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
internal static event Delegates.get_SendMessageTarget_AfterArgs _afterget_SendMessageTarget;
private static UnityEngine.GameObject get_SendMessageTarget(Func<tk2dUIScrollableArea, UnityEngine.GameObject> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_SendMessageTarget @params = new() 
{
self = self
};
if (_beforeget_SendMessageTarget != null)
{
foreach (Delegates.get_SendMessageTarget_BeforeArgs toInvoke in _beforeget_SendMessageTarget.GetInvocationList())
{
try
{
_beforeget_SendMessageTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SendMessageTarget != null)
{
foreach (Delegates.get_SendMessageTarget_AfterArgs toInvoke in _afterget_SendMessageTarget.GetInvocationList())
{
try
{
retVal = _afterget_SendMessageTarget.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_SendMessageTarget()
{
if (!HookedList.Contains("set_SendMessageTarget"))
{
HookedList.Add("set_SendMessageTarget");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_SendMessageTarget", true), set_SendMessageTarget);

}
}
internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
internal static event Delegates.set_SendMessageTarget_AfterArgs _afterset_SendMessageTarget;
private static void set_SendMessageTarget(Action<tk2dUIScrollableArea,  UnityEngine.GameObject> orig, tk2dUIScrollableArea self,  UnityEngine.GameObject value)
{
Delegates.Params_set_SendMessageTarget @params = new() 
{
self = self
, value = value
};
if (_beforeset_SendMessageTarget != null)
{
foreach (Delegates.set_SendMessageTarget_BeforeArgs toInvoke in _beforeset_SendMessageTarget.GetInvocationList())
{
try
{
_beforeset_SendMessageTarget?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_SendMessageTarget != null)
{
foreach (Delegates.set_SendMessageTarget_AfterArgs toInvoke in _afterset_SendMessageTarget.GetInvocationList())
{
try
{
_afterset_SendMessageTarget.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Value()
{
if (!HookedList.Contains("get_Value"))
{
HookedList.Add("get_Value");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_Value", true), get_Value);

}
}
internal static event Delegates.get_Value_BeforeArgs _beforeget_Value;
internal static event Delegates.get_Value_AfterArgs _afterget_Value;
private static float get_Value(Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_Value @params = new() 
{
self = self
};
if (_beforeget_Value != null)
{
foreach (Delegates.get_Value_BeforeArgs toInvoke in _beforeget_Value.GetInvocationList())
{
try
{
_beforeget_Value?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Value != null)
{
foreach (Delegates.get_Value_AfterArgs toInvoke in _afterget_Value.GetInvocationList())
{
try
{
retVal = _afterget_Value.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Value()
{
if (!HookedList.Contains("set_Value"))
{
HookedList.Add("set_Value");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_Value", true), set_Value);

}
}
internal static event Delegates.set_Value_BeforeArgs _beforeset_Value;
internal static event Delegates.set_Value_AfterArgs _afterset_Value;
private static void set_Value(Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float value)
{
Delegates.Params_set_Value @params = new() 
{
self = self
, value = value
};
if (_beforeset_Value != null)
{
foreach (Delegates.set_Value_BeforeArgs toInvoke in _beforeset_Value.GetInvocationList())
{
try
{
_beforeset_Value?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Value != null)
{
foreach (Delegates.set_Value_AfterArgs toInvoke in _afterset_Value.GetInvocationList())
{
try
{
_afterset_Value.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetScrollPercentWithoutEvent()
{
if (!HookedList.Contains("SetScrollPercentWithoutEvent"))
{
HookedList.Add("SetScrollPercentWithoutEvent");
On.tk2dUIScrollableArea.SetScrollPercentWithoutEvent += SetScrollPercentWithoutEvent;

}
}
internal static event Delegates.SetScrollPercentWithoutEvent_BeforeArgs _beforeSetScrollPercentWithoutEvent;
internal static event Delegates.SetScrollPercentWithoutEvent_AfterArgs _afterSetScrollPercentWithoutEvent;
private static void SetScrollPercentWithoutEvent(On.tk2dUIScrollableArea.orig_SetScrollPercentWithoutEvent orig,tk2dUIScrollableArea self,  float newScrollPercent)
{
Delegates.Params_SetScrollPercentWithoutEvent @params = new() 
{
self = self
, newScrollPercent = newScrollPercent
};
if (_beforeSetScrollPercentWithoutEvent != null)
{
foreach (Delegates.SetScrollPercentWithoutEvent_BeforeArgs toInvoke in _beforeSetScrollPercentWithoutEvent.GetInvocationList())
{
try
{
_beforeSetScrollPercentWithoutEvent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
newScrollPercent = @params.newScrollPercent;
orig(self, newScrollPercent);
if (_afterSetScrollPercentWithoutEvent != null)
{
foreach (Delegates.SetScrollPercentWithoutEvent_AfterArgs toInvoke in _afterSetScrollPercentWithoutEvent.GetInvocationList())
{
try
{
_afterSetScrollPercentWithoutEvent.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookMeasureContentLength()
{
if (!HookedList.Contains("MeasureContentLength"))
{
HookedList.Add("MeasureContentLength");
On.tk2dUIScrollableArea.MeasureContentLength += MeasureContentLength;

}
}
internal static event Delegates.MeasureContentLength_BeforeArgs _beforeMeasureContentLength;
internal static event Delegates.MeasureContentLength_AfterArgs _afterMeasureContentLength;
private static float MeasureContentLength(On.tk2dUIScrollableArea.orig_MeasureContentLength orig,tk2dUIScrollableArea self)
{
Delegates.Params_MeasureContentLength @params = new() 
{
self = self
};
if (_beforeMeasureContentLength != null)
{
foreach (Delegates.MeasureContentLength_BeforeArgs toInvoke in _beforeMeasureContentLength.GetInvocationList())
{
try
{
_beforeMeasureContentLength?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterMeasureContentLength != null)
{
foreach (Delegates.MeasureContentLength_AfterArgs toInvoke in _afterMeasureContentLength.GetInvocationList())
{
try
{
retVal = _afterMeasureContentLength.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.tk2dUIScrollableArea.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.tk2dUIScrollableArea.orig_OnEnable orig,tk2dUIScrollableArea self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.tk2dUIScrollableArea.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.tk2dUIScrollableArea.orig_OnDisable orig,tk2dUIScrollableArea self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.tk2dUIScrollableArea.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.tk2dUIScrollableArea.orig_Start orig,tk2dUIScrollableArea self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackgroundHoverOverScrollWheelChange()
{
if (!HookedList.Contains("BackgroundHoverOverScrollWheelChange"))
{
HookedList.Add("BackgroundHoverOverScrollWheelChange");
On.tk2dUIScrollableArea.BackgroundHoverOverScrollWheelChange += BackgroundHoverOverScrollWheelChange;

}
}
internal static event Delegates.BackgroundHoverOverScrollWheelChange_BeforeArgs _beforeBackgroundHoverOverScrollWheelChange;
internal static event Delegates.BackgroundHoverOverScrollWheelChange_AfterArgs _afterBackgroundHoverOverScrollWheelChange;
private static void BackgroundHoverOverScrollWheelChange(On.tk2dUIScrollableArea.orig_BackgroundHoverOverScrollWheelChange orig,tk2dUIScrollableArea self,  float mouseWheelChange)
{
Delegates.Params_BackgroundHoverOverScrollWheelChange @params = new() 
{
self = self
, mouseWheelChange = mouseWheelChange
};
if (_beforeBackgroundHoverOverScrollWheelChange != null)
{
foreach (Delegates.BackgroundHoverOverScrollWheelChange_BeforeArgs toInvoke in _beforeBackgroundHoverOverScrollWheelChange.GetInvocationList())
{
try
{
_beforeBackgroundHoverOverScrollWheelChange?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mouseWheelChange = @params.mouseWheelChange;
orig(self, mouseWheelChange);
if (_afterBackgroundHoverOverScrollWheelChange != null)
{
foreach (Delegates.BackgroundHoverOverScrollWheelChange_AfterArgs toInvoke in _afterBackgroundHoverOverScrollWheelChange.GetInvocationList())
{
try
{
_afterBackgroundHoverOverScrollWheelChange.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookScrollBarMove()
{
if (!HookedList.Contains("ScrollBarMove"))
{
HookedList.Add("ScrollBarMove");
On.tk2dUIScrollableArea.ScrollBarMove += ScrollBarMove;

}
}
internal static event Delegates.ScrollBarMove_BeforeArgs _beforeScrollBarMove;
internal static event Delegates.ScrollBarMove_AfterArgs _afterScrollBarMove;
private static void ScrollBarMove(On.tk2dUIScrollableArea.orig_ScrollBarMove orig,tk2dUIScrollableArea self,  tk2dUIScrollbar scrollBar)
{
Delegates.Params_ScrollBarMove @params = new() 
{
self = self
, scrollBar = scrollBar
};
if (_beforeScrollBarMove != null)
{
foreach (Delegates.ScrollBarMove_BeforeArgs toInvoke in _beforeScrollBarMove.GetInvocationList())
{
try
{
_beforeScrollBarMove?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
scrollBar = @params.scrollBar;
orig(self, scrollBar);
if (_afterScrollBarMove != null)
{
foreach (Delegates.ScrollBarMove_AfterArgs toInvoke in _afterScrollBarMove.GetInvocationList())
{
try
{
_afterScrollBarMove.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ContentContainerOffset()
{
if (!HookedList.Contains("get_ContentContainerOffset"))
{
HookedList.Add("get_ContentContainerOffset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentContainerOffset", true), get_ContentContainerOffset);

}
}
internal static event Delegates.get_ContentContainerOffset_BeforeArgs _beforeget_ContentContainerOffset;
internal static event Delegates.get_ContentContainerOffset_AfterArgs _afterget_ContentContainerOffset;
private static UnityEngine.Vector3 get_ContentContainerOffset(Func<tk2dUIScrollableArea, UnityEngine.Vector3> orig, tk2dUIScrollableArea self)
{
Delegates.Params_get_ContentContainerOffset @params = new() 
{
self = self
};
if (_beforeget_ContentContainerOffset != null)
{
foreach (Delegates.get_ContentContainerOffset_BeforeArgs toInvoke in _beforeget_ContentContainerOffset.GetInvocationList())
{
try
{
_beforeget_ContentContainerOffset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ContentContainerOffset != null)
{
foreach (Delegates.get_ContentContainerOffset_AfterArgs toInvoke in _afterget_ContentContainerOffset.GetInvocationList())
{
try
{
retVal = _afterget_ContentContainerOffset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ContentContainerOffset()
{
if (!HookedList.Contains("set_ContentContainerOffset"))
{
HookedList.Add("set_ContentContainerOffset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentContainerOffset", true), set_ContentContainerOffset);

}
}
internal static event Delegates.set_ContentContainerOffset_BeforeArgs _beforeset_ContentContainerOffset;
internal static event Delegates.set_ContentContainerOffset_AfterArgs _afterset_ContentContainerOffset;
private static void set_ContentContainerOffset(Action<tk2dUIScrollableArea,  UnityEngine.Vector3> orig, tk2dUIScrollableArea self,  UnityEngine.Vector3 value)
{
Delegates.Params_set_ContentContainerOffset @params = new() 
{
self = self
, value = value
};
if (_beforeset_ContentContainerOffset != null)
{
foreach (Delegates.set_ContentContainerOffset_BeforeArgs toInvoke in _beforeset_ContentContainerOffset.GetInvocationList())
{
try
{
_beforeset_ContentContainerOffset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ContentContainerOffset != null)
{
foreach (Delegates.set_ContentContainerOffset_AfterArgs toInvoke in _afterset_ContentContainerOffset.GetInvocationList())
{
try
{
_afterset_ContentContainerOffset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetContentPosition()
{
if (!HookedList.Contains("SetContentPosition"))
{
HookedList.Add("SetContentPosition");
On.tk2dUIScrollableArea.SetContentPosition += SetContentPosition;

}
}
internal static event Delegates.SetContentPosition_BeforeArgs _beforeSetContentPosition;
internal static event Delegates.SetContentPosition_AfterArgs _afterSetContentPosition;
private static void SetContentPosition(On.tk2dUIScrollableArea.orig_SetContentPosition orig,tk2dUIScrollableArea self)
{
Delegates.Params_SetContentPosition @params = new() 
{
self = self
};
if (_beforeSetContentPosition != null)
{
foreach (Delegates.SetContentPosition_BeforeArgs toInvoke in _beforeSetContentPosition.GetInvocationList())
{
try
{
_beforeSetContentPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetContentPosition != null)
{
foreach (Delegates.SetContentPosition_AfterArgs toInvoke in _afterSetContentPosition.GetInvocationList())
{
try
{
_afterSetContentPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackgroundButtonDown()
{
if (!HookedList.Contains("BackgroundButtonDown"))
{
HookedList.Add("BackgroundButtonDown");
On.tk2dUIScrollableArea.BackgroundButtonDown += BackgroundButtonDown;

}
}
internal static event Delegates.BackgroundButtonDown_BeforeArgs _beforeBackgroundButtonDown;
internal static event Delegates.BackgroundButtonDown_AfterArgs _afterBackgroundButtonDown;
private static void BackgroundButtonDown(On.tk2dUIScrollableArea.orig_BackgroundButtonDown orig,tk2dUIScrollableArea self)
{
Delegates.Params_BackgroundButtonDown @params = new() 
{
self = self
};
if (_beforeBackgroundButtonDown != null)
{
foreach (Delegates.BackgroundButtonDown_BeforeArgs toInvoke in _beforeBackgroundButtonDown.GetInvocationList())
{
try
{
_beforeBackgroundButtonDown?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBackgroundButtonDown != null)
{
foreach (Delegates.BackgroundButtonDown_AfterArgs toInvoke in _afterBackgroundButtonDown.GetInvocationList())
{
try
{
_afterBackgroundButtonDown.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackgroundOverUpdate()
{
if (!HookedList.Contains("BackgroundOverUpdate"))
{
HookedList.Add("BackgroundOverUpdate");
On.tk2dUIScrollableArea.BackgroundOverUpdate += BackgroundOverUpdate;

}
}
internal static event Delegates.BackgroundOverUpdate_BeforeArgs _beforeBackgroundOverUpdate;
internal static event Delegates.BackgroundOverUpdate_AfterArgs _afterBackgroundOverUpdate;
private static void BackgroundOverUpdate(On.tk2dUIScrollableArea.orig_BackgroundOverUpdate orig,tk2dUIScrollableArea self)
{
Delegates.Params_BackgroundOverUpdate @params = new() 
{
self = self
};
if (_beforeBackgroundOverUpdate != null)
{
foreach (Delegates.BackgroundOverUpdate_BeforeArgs toInvoke in _beforeBackgroundOverUpdate.GetInvocationList())
{
try
{
_beforeBackgroundOverUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBackgroundOverUpdate != null)
{
foreach (Delegates.BackgroundOverUpdate_AfterArgs toInvoke in _afterBackgroundOverUpdate.GetInvocationList())
{
try
{
_afterBackgroundOverUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateSwipeScrollDestintationPosition()
{
if (!HookedList.Contains("UpdateSwipeScrollDestintationPosition"))
{
HookedList.Add("UpdateSwipeScrollDestintationPosition");
On.tk2dUIScrollableArea.UpdateSwipeScrollDestintationPosition += UpdateSwipeScrollDestintationPosition;

}
}
internal static event Delegates.UpdateSwipeScrollDestintationPosition_BeforeArgs _beforeUpdateSwipeScrollDestintationPosition;
internal static event Delegates.UpdateSwipeScrollDestintationPosition_AfterArgs _afterUpdateSwipeScrollDestintationPosition;
private static void UpdateSwipeScrollDestintationPosition(On.tk2dUIScrollableArea.orig_UpdateSwipeScrollDestintationPosition orig,tk2dUIScrollableArea self)
{
Delegates.Params_UpdateSwipeScrollDestintationPosition @params = new() 
{
self = self
};
if (_beforeUpdateSwipeScrollDestintationPosition != null)
{
foreach (Delegates.UpdateSwipeScrollDestintationPosition_BeforeArgs toInvoke in _beforeUpdateSwipeScrollDestintationPosition.GetInvocationList())
{
try
{
_beforeUpdateSwipeScrollDestintationPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateSwipeScrollDestintationPosition != null)
{
foreach (Delegates.UpdateSwipeScrollDestintationPosition_AfterArgs toInvoke in _afterUpdateSwipeScrollDestintationPosition.GetInvocationList())
{
try
{
_afterUpdateSwipeScrollDestintationPosition.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackgroundButtonRelease()
{
if (!HookedList.Contains("BackgroundButtonRelease"))
{
HookedList.Add("BackgroundButtonRelease");
On.tk2dUIScrollableArea.BackgroundButtonRelease += BackgroundButtonRelease;

}
}
internal static event Delegates.BackgroundButtonRelease_BeforeArgs _beforeBackgroundButtonRelease;
internal static event Delegates.BackgroundButtonRelease_AfterArgs _afterBackgroundButtonRelease;
private static void BackgroundButtonRelease(On.tk2dUIScrollableArea.orig_BackgroundButtonRelease orig,tk2dUIScrollableArea self)
{
Delegates.Params_BackgroundButtonRelease @params = new() 
{
self = self
};
if (_beforeBackgroundButtonRelease != null)
{
foreach (Delegates.BackgroundButtonRelease_BeforeArgs toInvoke in _beforeBackgroundButtonRelease.GetInvocationList())
{
try
{
_beforeBackgroundButtonRelease?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBackgroundButtonRelease != null)
{
foreach (Delegates.BackgroundButtonRelease_AfterArgs toInvoke in _afterBackgroundButtonRelease.GetInvocationList())
{
try
{
_afterBackgroundButtonRelease.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackgroundButtonHoverOver()
{
if (!HookedList.Contains("BackgroundButtonHoverOver"))
{
HookedList.Add("BackgroundButtonHoverOver");
On.tk2dUIScrollableArea.BackgroundButtonHoverOver += BackgroundButtonHoverOver;

}
}
internal static event Delegates.BackgroundButtonHoverOver_BeforeArgs _beforeBackgroundButtonHoverOver;
internal static event Delegates.BackgroundButtonHoverOver_AfterArgs _afterBackgroundButtonHoverOver;
private static void BackgroundButtonHoverOver(On.tk2dUIScrollableArea.orig_BackgroundButtonHoverOver orig,tk2dUIScrollableArea self)
{
Delegates.Params_BackgroundButtonHoverOver @params = new() 
{
self = self
};
if (_beforeBackgroundButtonHoverOver != null)
{
foreach (Delegates.BackgroundButtonHoverOver_BeforeArgs toInvoke in _beforeBackgroundButtonHoverOver.GetInvocationList())
{
try
{
_beforeBackgroundButtonHoverOver?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBackgroundButtonHoverOver != null)
{
foreach (Delegates.BackgroundButtonHoverOver_AfterArgs toInvoke in _afterBackgroundButtonHoverOver.GetInvocationList())
{
try
{
_afterBackgroundButtonHoverOver.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBackgroundButtonHoverOut()
{
if (!HookedList.Contains("BackgroundButtonHoverOut"))
{
HookedList.Add("BackgroundButtonHoverOut");
On.tk2dUIScrollableArea.BackgroundButtonHoverOut += BackgroundButtonHoverOut;

}
}
internal static event Delegates.BackgroundButtonHoverOut_BeforeArgs _beforeBackgroundButtonHoverOut;
internal static event Delegates.BackgroundButtonHoverOut_AfterArgs _afterBackgroundButtonHoverOut;
private static void BackgroundButtonHoverOut(On.tk2dUIScrollableArea.orig_BackgroundButtonHoverOut orig,tk2dUIScrollableArea self)
{
Delegates.Params_BackgroundButtonHoverOut @params = new() 
{
self = self
};
if (_beforeBackgroundButtonHoverOut != null)
{
foreach (Delegates.BackgroundButtonHoverOut_BeforeArgs toInvoke in _beforeBackgroundButtonHoverOut.GetInvocationList())
{
try
{
_beforeBackgroundButtonHoverOut?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBackgroundButtonHoverOut != null)
{
foreach (Delegates.BackgroundButtonHoverOut_AfterArgs toInvoke in _afterBackgroundButtonHoverOut.GetInvocationList())
{
try
{
_afterBackgroundButtonHoverOut.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCalculateClickWorldPos()
{
if (!HookedList.Contains("CalculateClickWorldPos"))
{
HookedList.Add("CalculateClickWorldPos");
On.tk2dUIScrollableArea.CalculateClickWorldPos += CalculateClickWorldPos;

}
}
internal static event Delegates.CalculateClickWorldPos_BeforeArgs _beforeCalculateClickWorldPos;
internal static event Delegates.CalculateClickWorldPos_AfterArgs _afterCalculateClickWorldPos;
private static UnityEngine.Vector3 CalculateClickWorldPos(On.tk2dUIScrollableArea.orig_CalculateClickWorldPos orig,tk2dUIScrollableArea self,  tk2dUIItem btn)
{
Delegates.Params_CalculateClickWorldPos @params = new() 
{
self = self
, btn = btn
};
if (_beforeCalculateClickWorldPos != null)
{
foreach (Delegates.CalculateClickWorldPos_BeforeArgs toInvoke in _beforeCalculateClickWorldPos.GetInvocationList())
{
try
{
_beforeCalculateClickWorldPos?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
btn = @params.btn;
var retVal = orig(self, btn);
if (_afterCalculateClickWorldPos != null)
{
foreach (Delegates.CalculateClickWorldPos_AfterArgs toInvoke in _afterCalculateClickWorldPos.GetInvocationList())
{
try
{
retVal = _afterCalculateClickWorldPos.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookUpdateScrollbarActiveState()
{
if (!HookedList.Contains("UpdateScrollbarActiveState"))
{
HookedList.Add("UpdateScrollbarActiveState");
On.tk2dUIScrollableArea.UpdateScrollbarActiveState += UpdateScrollbarActiveState;

}
}
internal static event Delegates.UpdateScrollbarActiveState_BeforeArgs _beforeUpdateScrollbarActiveState;
internal static event Delegates.UpdateScrollbarActiveState_AfterArgs _afterUpdateScrollbarActiveState;
private static void UpdateScrollbarActiveState(On.tk2dUIScrollableArea.orig_UpdateScrollbarActiveState orig,tk2dUIScrollableArea self)
{
Delegates.Params_UpdateScrollbarActiveState @params = new() 
{
self = self
};
if (_beforeUpdateScrollbarActiveState != null)
{
foreach (Delegates.UpdateScrollbarActiveState_BeforeArgs toInvoke in _beforeUpdateScrollbarActiveState.GetInvocationList())
{
try
{
_beforeUpdateScrollbarActiveState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateScrollbarActiveState != null)
{
foreach (Delegates.UpdateScrollbarActiveState_AfterArgs toInvoke in _afterUpdateScrollbarActiveState.GetInvocationList())
{
try
{
_afterUpdateScrollbarActiveState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookContentLengthVisibleAreaLengthChange()
{
if (!HookedList.Contains("ContentLengthVisibleAreaLengthChange"))
{
HookedList.Add("ContentLengthVisibleAreaLengthChange");
On.tk2dUIScrollableArea.ContentLengthVisibleAreaLengthChange += ContentLengthVisibleAreaLengthChange;

}
}
internal static event Delegates.ContentLengthVisibleAreaLengthChange_BeforeArgs _beforeContentLengthVisibleAreaLengthChange;
internal static event Delegates.ContentLengthVisibleAreaLengthChange_AfterArgs _afterContentLengthVisibleAreaLengthChange;
private static void ContentLengthVisibleAreaLengthChange(On.tk2dUIScrollableArea.orig_ContentLengthVisibleAreaLengthChange orig,tk2dUIScrollableArea self,  float prevContentLength,  float newContentLength,  float prevVisibleAreaLength,  float newVisibleAreaLength)
{
Delegates.Params_ContentLengthVisibleAreaLengthChange @params = new() 
{
self = self
, prevContentLength = prevContentLength
, newContentLength = newContentLength
, prevVisibleAreaLength = prevVisibleAreaLength
, newVisibleAreaLength = newVisibleAreaLength
};
if (_beforeContentLengthVisibleAreaLengthChange != null)
{
foreach (Delegates.ContentLengthVisibleAreaLengthChange_BeforeArgs toInvoke in _beforeContentLengthVisibleAreaLengthChange.GetInvocationList())
{
try
{
_beforeContentLengthVisibleAreaLengthChange?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
prevContentLength = @params.prevContentLength;
newContentLength = @params.newContentLength;
prevVisibleAreaLength = @params.prevVisibleAreaLength;
newVisibleAreaLength = @params.newVisibleAreaLength;
orig(self, prevContentLength, newContentLength, prevVisibleAreaLength, newVisibleAreaLength);
if (_afterContentLengthVisibleAreaLengthChange != null)
{
foreach (Delegates.ContentLengthVisibleAreaLengthChange_AfterArgs toInvoke in _afterContentLengthVisibleAreaLengthChange.GetInvocationList())
{
try
{
_afterContentLengthVisibleAreaLengthChange.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUnpressAllUIItemChildren()
{
if (!HookedList.Contains("UnpressAllUIItemChildren"))
{
HookedList.Add("UnpressAllUIItemChildren");
On.tk2dUIScrollableArea.UnpressAllUIItemChildren += UnpressAllUIItemChildren;

}
}
internal static event Delegates.UnpressAllUIItemChildren_BeforeArgs _beforeUnpressAllUIItemChildren;
internal static event Delegates.UnpressAllUIItemChildren_AfterArgs _afterUnpressAllUIItemChildren;
private static void UnpressAllUIItemChildren(On.tk2dUIScrollableArea.orig_UnpressAllUIItemChildren orig,tk2dUIScrollableArea self)
{
Delegates.Params_UnpressAllUIItemChildren @params = new() 
{
self = self
};
if (_beforeUnpressAllUIItemChildren != null)
{
foreach (Delegates.UnpressAllUIItemChildren_BeforeArgs toInvoke in _beforeUnpressAllUIItemChildren.GetInvocationList())
{
try
{
_beforeUnpressAllUIItemChildren?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUnpressAllUIItemChildren != null)
{
foreach (Delegates.UnpressAllUIItemChildren_AfterArgs toInvoke in _afterUnpressAllUIItemChildren.GetInvocationList())
{
try
{
_afterUnpressAllUIItemChildren.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookTargetOnScrollCallback()
{
if (!HookedList.Contains("TargetOnScrollCallback"))
{
HookedList.Add("TargetOnScrollCallback");
On.tk2dUIScrollableArea.TargetOnScrollCallback += TargetOnScrollCallback;

}
}
internal static event Delegates.TargetOnScrollCallback_BeforeArgs _beforeTargetOnScrollCallback;
internal static event Delegates.TargetOnScrollCallback_AfterArgs _afterTargetOnScrollCallback;
private static void TargetOnScrollCallback(On.tk2dUIScrollableArea.orig_TargetOnScrollCallback orig,tk2dUIScrollableArea self)
{
Delegates.Params_TargetOnScrollCallback @params = new() 
{
self = self
};
if (_beforeTargetOnScrollCallback != null)
{
foreach (Delegates.TargetOnScrollCallback_BeforeArgs toInvoke in _beforeTargetOnScrollCallback.GetInvocationList())
{
try
{
_beforeTargetOnScrollCallback?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterTargetOnScrollCallback != null)
{
foreach (Delegates.TargetOnScrollCallback_AfterArgs toInvoke in _afterTargetOnScrollCallback.GetInvocationList())
{
try
{
_afterTargetOnScrollCallback.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetRendererBoundsInChildren()
{
if (!HookedList.Contains("GetRendererBoundsInChildren"))
{
HookedList.Add("GetRendererBoundsInChildren");
On.tk2dUIScrollableArea.GetRendererBoundsInChildren += GetRendererBoundsInChildren;

}
}
internal static event Delegates.GetRendererBoundsInChildren_BeforeArgs _beforeGetRendererBoundsInChildren;
internal static event Delegates.GetRendererBoundsInChildren_AfterArgs _afterGetRendererBoundsInChildren;
private static void GetRendererBoundsInChildren(On.tk2dUIScrollableArea.orig_GetRendererBoundsInChildren orig, UnityEngine.Matrix4x4 rootWorldToLocal,  UnityEngine.Vector3[] minMax,  UnityEngine.Transform t)
{
Delegates.Params_GetRendererBoundsInChildren @params = new() 
{
rootWorldToLocal = rootWorldToLocal
, minMax = minMax
, t = t
};
if (_beforeGetRendererBoundsInChildren != null)
{
foreach (Delegates.GetRendererBoundsInChildren_BeforeArgs toInvoke in _beforeGetRendererBoundsInChildren.GetInvocationList())
{
try
{
_beforeGetRendererBoundsInChildren?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
rootWorldToLocal = @params.rootWorldToLocal;
minMax = @params.minMax;
t = @params.t;
orig(rootWorldToLocal, minMax, t);
if (_afterGetRendererBoundsInChildren != null)
{
foreach (Delegates.GetRendererBoundsInChildren_AfterArgs toInvoke in _afterGetRendererBoundsInChildren.GetInvocationList())
{
try
{
_afterGetRendererBoundsInChildren.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLayoutReshaped()
{
if (!HookedList.Contains("LayoutReshaped"))
{
HookedList.Add("LayoutReshaped");
On.tk2dUIScrollableArea.LayoutReshaped += LayoutReshaped;

}
}
internal static event Delegates.LayoutReshaped_BeforeArgs _beforeLayoutReshaped;
internal static event Delegates.LayoutReshaped_AfterArgs _afterLayoutReshaped;
private static void LayoutReshaped(On.tk2dUIScrollableArea.orig_LayoutReshaped orig,tk2dUIScrollableArea self,  UnityEngine.Vector3 dMin,  UnityEngine.Vector3 dMax)
{
Delegates.Params_LayoutReshaped @params = new() 
{
self = self
, dMin = dMin
, dMax = dMax
};
if (_beforeLayoutReshaped != null)
{
foreach (Delegates.LayoutReshaped_BeforeArgs toInvoke in _beforeLayoutReshaped.GetInvocationList())
{
try
{
_beforeLayoutReshaped?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
dMin = @params.dMin;
dMax = @params.dMax;
orig(self, dMin, dMax);
if (_afterLayoutReshaped != null)
{
foreach (Delegates.LayoutReshaped_AfterArgs toInvoke in _afterLayoutReshaped.GetInvocationList())
{
try
{
_afterLayoutReshaped.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookContentLayoutChangeCallback()
{
if (!HookedList.Contains("ContentLayoutChangeCallback"))
{
HookedList.Add("ContentLayoutChangeCallback");
On.tk2dUIScrollableArea.ContentLayoutChangeCallback += ContentLayoutChangeCallback;

}
}
internal static event Delegates.ContentLayoutChangeCallback_BeforeArgs _beforeContentLayoutChangeCallback;
internal static event Delegates.ContentLayoutChangeCallback_AfterArgs _afterContentLayoutChangeCallback;
private static void ContentLayoutChangeCallback(On.tk2dUIScrollableArea.orig_ContentLayoutChangeCallback orig,tk2dUIScrollableArea self)
{
Delegates.Params_ContentLayoutChangeCallback @params = new() 
{
self = self
};
if (_beforeContentLayoutChangeCallback != null)
{
foreach (Delegates.ContentLayoutChangeCallback_BeforeArgs toInvoke in _beforeContentLayoutChangeCallback.GetInvocationList())
{
try
{
_beforeContentLayoutChangeCallback?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterContentLayoutChangeCallback != null)
{
foreach (Delegates.ContentLayoutChangeCallback_AfterArgs toInvoke in _afterContentLayoutChangeCallback.GetInvocationList())
{
try
{
_afterContentLayoutChangeCallback.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_ContentLength
{
public tk2dUIScrollableArea self;
}
public delegate void get_ContentLength_BeforeArgs(Params_get_ContentLength args);
public delegate float get_ContentLength_AfterArgs(Params_get_ContentLength args, float ret);
public delegate float get_ContentLength_WithArgs (Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self);
public sealed class Params_set_ContentLength
{
public tk2dUIScrollableArea self;
public float value;
}
public delegate void set_ContentLength_BeforeArgs(Params_set_ContentLength args);
public delegate void set_ContentLength_AfterArgs(Params_set_ContentLength args);
public delegate void set_ContentLength_WithArgs (Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float value);
public sealed class Params_get_VisibleAreaLength
{
public tk2dUIScrollableArea self;
}
public delegate void get_VisibleAreaLength_BeforeArgs(Params_get_VisibleAreaLength args);
public delegate float get_VisibleAreaLength_AfterArgs(Params_get_VisibleAreaLength args, float ret);
public delegate float get_VisibleAreaLength_WithArgs (Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self);
public sealed class Params_set_VisibleAreaLength
{
public tk2dUIScrollableArea self;
public float value;
}
public delegate void set_VisibleAreaLength_BeforeArgs(Params_set_VisibleAreaLength args);
public delegate void set_VisibleAreaLength_AfterArgs(Params_set_VisibleAreaLength args);
public delegate void set_VisibleAreaLength_WithArgs (Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float value);
public sealed class Params_get_BackgroundLayoutItem
{
public tk2dUIScrollableArea self;
}
public delegate void get_BackgroundLayoutItem_BeforeArgs(Params_get_BackgroundLayoutItem args);
public delegate tk2dUILayout get_BackgroundLayoutItem_AfterArgs(Params_get_BackgroundLayoutItem args, tk2dUILayout ret);
public delegate tk2dUILayout get_BackgroundLayoutItem_WithArgs (Func<tk2dUIScrollableArea, tk2dUILayout> orig, tk2dUIScrollableArea self);
public sealed class Params_set_BackgroundLayoutItem
{
public tk2dUIScrollableArea self;
public tk2dUILayout value;
}
public delegate void set_BackgroundLayoutItem_BeforeArgs(Params_set_BackgroundLayoutItem args);
public delegate void set_BackgroundLayoutItem_AfterArgs(Params_set_BackgroundLayoutItem args);
public delegate void set_BackgroundLayoutItem_WithArgs (Action<tk2dUIScrollableArea,  tk2dUILayout> orig, tk2dUIScrollableArea self,  tk2dUILayout value);
public sealed class Params_get_ContentLayoutContainer
{
public tk2dUIScrollableArea self;
}
public delegate void get_ContentLayoutContainer_BeforeArgs(Params_get_ContentLayoutContainer args);
public delegate tk2dUILayoutContainer get_ContentLayoutContainer_AfterArgs(Params_get_ContentLayoutContainer args, tk2dUILayoutContainer ret);
public delegate tk2dUILayoutContainer get_ContentLayoutContainer_WithArgs (Func<tk2dUIScrollableArea, tk2dUILayoutContainer> orig, tk2dUIScrollableArea self);
public sealed class Params_set_ContentLayoutContainer
{
public tk2dUIScrollableArea self;
public tk2dUILayoutContainer value;
}
public delegate void set_ContentLayoutContainer_BeforeArgs(Params_set_ContentLayoutContainer args);
public delegate void set_ContentLayoutContainer_AfterArgs(Params_set_ContentLayoutContainer args);
public delegate void set_ContentLayoutContainer_WithArgs (Action<tk2dUIScrollableArea,  tk2dUILayoutContainer> orig, tk2dUIScrollableArea self,  tk2dUILayoutContainer value);
public sealed class Params_get_SendMessageTarget
{
public tk2dUIScrollableArea self;
}
public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);
public delegate UnityEngine.GameObject get_SendMessageTarget_AfterArgs(Params_get_SendMessageTarget args, UnityEngine.GameObject ret);
public delegate UnityEngine.GameObject get_SendMessageTarget_WithArgs (Func<tk2dUIScrollableArea, UnityEngine.GameObject> orig, tk2dUIScrollableArea self);
public sealed class Params_set_SendMessageTarget
{
public tk2dUIScrollableArea self;
public UnityEngine.GameObject value;
}
public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);
public delegate void set_SendMessageTarget_AfterArgs(Params_set_SendMessageTarget args);
public delegate void set_SendMessageTarget_WithArgs (Action<tk2dUIScrollableArea,  UnityEngine.GameObject> orig, tk2dUIScrollableArea self,  UnityEngine.GameObject value);
public sealed class Params_get_Value
{
public tk2dUIScrollableArea self;
}
public delegate void get_Value_BeforeArgs(Params_get_Value args);
public delegate float get_Value_AfterArgs(Params_get_Value args, float ret);
public delegate float get_Value_WithArgs (Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self);
public sealed class Params_set_Value
{
public tk2dUIScrollableArea self;
public float value;
}
public delegate void set_Value_BeforeArgs(Params_set_Value args);
public delegate void set_Value_AfterArgs(Params_set_Value args);
public delegate void set_Value_WithArgs (Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float value);
public sealed class Params_SetScrollPercentWithoutEvent
{
public tk2dUIScrollableArea self;
public float newScrollPercent;
}
public delegate void SetScrollPercentWithoutEvent_BeforeArgs(Params_SetScrollPercentWithoutEvent args);
public delegate void SetScrollPercentWithoutEvent_AfterArgs(Params_SetScrollPercentWithoutEvent args);
public delegate void SetScrollPercentWithoutEvent_WithArgs (Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float newScrollPercent);
public sealed class Params_MeasureContentLength
{
public tk2dUIScrollableArea self;
}
public delegate void MeasureContentLength_BeforeArgs(Params_MeasureContentLength args);
public delegate float MeasureContentLength_AfterArgs(Params_MeasureContentLength args, float ret);
public delegate float MeasureContentLength_WithArgs (Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self);
public sealed class Params_OnEnable
{
public tk2dUIScrollableArea self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_OnDisable
{
public tk2dUIScrollableArea self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_Start
{
public tk2dUIScrollableArea self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_BackgroundHoverOverScrollWheelChange
{
public tk2dUIScrollableArea self;
public float mouseWheelChange;
}
public delegate void BackgroundHoverOverScrollWheelChange_BeforeArgs(Params_BackgroundHoverOverScrollWheelChange args);
public delegate void BackgroundHoverOverScrollWheelChange_AfterArgs(Params_BackgroundHoverOverScrollWheelChange args);
public delegate void BackgroundHoverOverScrollWheelChange_WithArgs (Action<tk2dUIScrollableArea,  float> orig, tk2dUIScrollableArea self,  float mouseWheelChange);
public sealed class Params_ScrollBarMove
{
public tk2dUIScrollableArea self;
public tk2dUIScrollbar scrollBar;
}
public delegate void ScrollBarMove_BeforeArgs(Params_ScrollBarMove args);
public delegate void ScrollBarMove_AfterArgs(Params_ScrollBarMove args);
public delegate void ScrollBarMove_WithArgs (Action<tk2dUIScrollableArea,  tk2dUIScrollbar> orig, tk2dUIScrollableArea self,  tk2dUIScrollbar scrollBar);
public sealed class Params_get_ContentContainerOffset
{
public tk2dUIScrollableArea self;
}
public delegate void get_ContentContainerOffset_BeforeArgs(Params_get_ContentContainerOffset args);
public delegate UnityEngine.Vector3 get_ContentContainerOffset_AfterArgs(Params_get_ContentContainerOffset args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 get_ContentContainerOffset_WithArgs (Func<tk2dUIScrollableArea, UnityEngine.Vector3> orig, tk2dUIScrollableArea self);
public sealed class Params_set_ContentContainerOffset
{
public tk2dUIScrollableArea self;
public UnityEngine.Vector3 value;
}
public delegate void set_ContentContainerOffset_BeforeArgs(Params_set_ContentContainerOffset args);
public delegate void set_ContentContainerOffset_AfterArgs(Params_set_ContentContainerOffset args);
public delegate void set_ContentContainerOffset_WithArgs (Action<tk2dUIScrollableArea,  UnityEngine.Vector3> orig, tk2dUIScrollableArea self,  UnityEngine.Vector3 value);
public sealed class Params_SetContentPosition
{
public tk2dUIScrollableArea self;
}
public delegate void SetContentPosition_BeforeArgs(Params_SetContentPosition args);
public delegate void SetContentPosition_AfterArgs(Params_SetContentPosition args);
public delegate void SetContentPosition_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_BackgroundButtonDown
{
public tk2dUIScrollableArea self;
}
public delegate void BackgroundButtonDown_BeforeArgs(Params_BackgroundButtonDown args);
public delegate void BackgroundButtonDown_AfterArgs(Params_BackgroundButtonDown args);
public delegate void BackgroundButtonDown_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_BackgroundOverUpdate
{
public tk2dUIScrollableArea self;
}
public delegate void BackgroundOverUpdate_BeforeArgs(Params_BackgroundOverUpdate args);
public delegate void BackgroundOverUpdate_AfterArgs(Params_BackgroundOverUpdate args);
public delegate void BackgroundOverUpdate_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_UpdateSwipeScrollDestintationPosition
{
public tk2dUIScrollableArea self;
}
public delegate void UpdateSwipeScrollDestintationPosition_BeforeArgs(Params_UpdateSwipeScrollDestintationPosition args);
public delegate void UpdateSwipeScrollDestintationPosition_AfterArgs(Params_UpdateSwipeScrollDestintationPosition args);
public delegate void UpdateSwipeScrollDestintationPosition_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_BackgroundButtonRelease
{
public tk2dUIScrollableArea self;
}
public delegate void BackgroundButtonRelease_BeforeArgs(Params_BackgroundButtonRelease args);
public delegate void BackgroundButtonRelease_AfterArgs(Params_BackgroundButtonRelease args);
public delegate void BackgroundButtonRelease_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_BackgroundButtonHoverOver
{
public tk2dUIScrollableArea self;
}
public delegate void BackgroundButtonHoverOver_BeforeArgs(Params_BackgroundButtonHoverOver args);
public delegate void BackgroundButtonHoverOver_AfterArgs(Params_BackgroundButtonHoverOver args);
public delegate void BackgroundButtonHoverOver_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_BackgroundButtonHoverOut
{
public tk2dUIScrollableArea self;
}
public delegate void BackgroundButtonHoverOut_BeforeArgs(Params_BackgroundButtonHoverOut args);
public delegate void BackgroundButtonHoverOut_AfterArgs(Params_BackgroundButtonHoverOut args);
public delegate void BackgroundButtonHoverOut_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_CalculateClickWorldPos
{
public tk2dUIScrollableArea self;
public tk2dUIItem btn;
}
public delegate void CalculateClickWorldPos_BeforeArgs(Params_CalculateClickWorldPos args);
public delegate UnityEngine.Vector3 CalculateClickWorldPos_AfterArgs(Params_CalculateClickWorldPos args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 CalculateClickWorldPos_WithArgs (Func<tk2dUIScrollableArea,  tk2dUIItem, UnityEngine.Vector3> orig, tk2dUIScrollableArea self,  tk2dUIItem btn);
public sealed class Params_UpdateScrollbarActiveState
{
public tk2dUIScrollableArea self;
}
public delegate void UpdateScrollbarActiveState_BeforeArgs(Params_UpdateScrollbarActiveState args);
public delegate void UpdateScrollbarActiveState_AfterArgs(Params_UpdateScrollbarActiveState args);
public delegate void UpdateScrollbarActiveState_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_ContentLengthVisibleAreaLengthChange
{
public tk2dUIScrollableArea self;
public float prevContentLength;
public float newContentLength;
public float prevVisibleAreaLength;
public float newVisibleAreaLength;
}
public delegate void ContentLengthVisibleAreaLengthChange_BeforeArgs(Params_ContentLengthVisibleAreaLengthChange args);
public delegate void ContentLengthVisibleAreaLengthChange_AfterArgs(Params_ContentLengthVisibleAreaLengthChange args);
public delegate void ContentLengthVisibleAreaLengthChange_WithArgs (Action<tk2dUIScrollableArea,  float,  float,  float,  float> orig, tk2dUIScrollableArea self,  float prevContentLength,  float newContentLength,  float prevVisibleAreaLength,  float newVisibleAreaLength);
public sealed class Params_UnpressAllUIItemChildren
{
public tk2dUIScrollableArea self;
}
public delegate void UnpressAllUIItemChildren_BeforeArgs(Params_UnpressAllUIItemChildren args);
public delegate void UnpressAllUIItemChildren_AfterArgs(Params_UnpressAllUIItemChildren args);
public delegate void UnpressAllUIItemChildren_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_TargetOnScrollCallback
{
public tk2dUIScrollableArea self;
}
public delegate void TargetOnScrollCallback_BeforeArgs(Params_TargetOnScrollCallback args);
public delegate void TargetOnScrollCallback_AfterArgs(Params_TargetOnScrollCallback args);
public delegate void TargetOnScrollCallback_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
public sealed class Params_GetRendererBoundsInChildren
{
public UnityEngine.Matrix4x4 rootWorldToLocal;
public UnityEngine.Vector3[] minMax;
public UnityEngine.Transform t;
}
public delegate void GetRendererBoundsInChildren_BeforeArgs(Params_GetRendererBoundsInChildren args);
public delegate void GetRendererBoundsInChildren_AfterArgs(Params_GetRendererBoundsInChildren args);
public delegate void GetRendererBoundsInChildren_WithArgs (Action< UnityEngine.Matrix4x4,  UnityEngine.Vector3[],  UnityEngine.Transform> orig,  UnityEngine.Matrix4x4 rootWorldToLocal,  UnityEngine.Vector3[] minMax,  UnityEngine.Transform t);
public sealed class Params_LayoutReshaped
{
public tk2dUIScrollableArea self;
public UnityEngine.Vector3 dMin;
public UnityEngine.Vector3 dMax;
}
public delegate void LayoutReshaped_BeforeArgs(Params_LayoutReshaped args);
public delegate void LayoutReshaped_AfterArgs(Params_LayoutReshaped args);
public delegate void LayoutReshaped_WithArgs (Action<tk2dUIScrollableArea,  UnityEngine.Vector3,  UnityEngine.Vector3> orig, tk2dUIScrollableArea self,  UnityEngine.Vector3 dMin,  UnityEngine.Vector3 dMax);
public sealed class Params_ContentLayoutChangeCallback
{
public tk2dUIScrollableArea self;
}
public delegate void ContentLayoutChangeCallback_BeforeArgs(Params_ContentLayoutChangeCallback args);
public delegate void ContentLayoutChangeCallback_AfterArgs(Params_ContentLayoutChangeCallback args);
public delegate void ContentLayoutChangeCallback_WithArgs (Action<tk2dUIScrollableArea> orig, tk2dUIScrollableArea self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_ContentLength_BeforeArgs get_ContentLength
{
add
{

HookHandler._beforeget_ContentLength += value;
HookHandler.Hookget_ContentLength();
}
remove => HookHandler._beforeget_ContentLength -= value;
}
public static event Delegates.set_ContentLength_BeforeArgs set_ContentLength
{
add
{

HookHandler._beforeset_ContentLength += value;
HookHandler.Hookset_ContentLength();
}
remove => HookHandler._beforeset_ContentLength -= value;
}
public static event Delegates.get_VisibleAreaLength_BeforeArgs get_VisibleAreaLength
{
add
{

HookHandler._beforeget_VisibleAreaLength += value;
HookHandler.Hookget_VisibleAreaLength();
}
remove => HookHandler._beforeget_VisibleAreaLength -= value;
}
public static event Delegates.set_VisibleAreaLength_BeforeArgs set_VisibleAreaLength
{
add
{

HookHandler._beforeset_VisibleAreaLength += value;
HookHandler.Hookset_VisibleAreaLength();
}
remove => HookHandler._beforeset_VisibleAreaLength -= value;
}
public static event Delegates.get_BackgroundLayoutItem_BeforeArgs get_BackgroundLayoutItem
{
add
{

HookHandler._beforeget_BackgroundLayoutItem += value;
HookHandler.Hookget_BackgroundLayoutItem();
}
remove => HookHandler._beforeget_BackgroundLayoutItem -= value;
}
public static event Delegates.set_BackgroundLayoutItem_BeforeArgs set_BackgroundLayoutItem
{
add
{

HookHandler._beforeset_BackgroundLayoutItem += value;
HookHandler.Hookset_BackgroundLayoutItem();
}
remove => HookHandler._beforeset_BackgroundLayoutItem -= value;
}
public static event Delegates.get_ContentLayoutContainer_BeforeArgs get_ContentLayoutContainer
{
add
{

HookHandler._beforeget_ContentLayoutContainer += value;
HookHandler.Hookget_ContentLayoutContainer();
}
remove => HookHandler._beforeget_ContentLayoutContainer -= value;
}
public static event Delegates.set_ContentLayoutContainer_BeforeArgs set_ContentLayoutContainer
{
add
{

HookHandler._beforeset_ContentLayoutContainer += value;
HookHandler.Hookset_ContentLayoutContainer();
}
remove => HookHandler._beforeset_ContentLayoutContainer -= value;
}
public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
{
add
{

HookHandler._beforeget_SendMessageTarget += value;
HookHandler.Hookget_SendMessageTarget();
}
remove => HookHandler._beforeget_SendMessageTarget -= value;
}
public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
{
add
{

HookHandler._beforeset_SendMessageTarget += value;
HookHandler.Hookset_SendMessageTarget();
}
remove => HookHandler._beforeset_SendMessageTarget -= value;
}
public static event Delegates.get_Value_BeforeArgs get_Value
{
add
{

HookHandler._beforeget_Value += value;
HookHandler.Hookget_Value();
}
remove => HookHandler._beforeget_Value -= value;
}
public static event Delegates.set_Value_BeforeArgs set_Value
{
add
{

HookHandler._beforeset_Value += value;
HookHandler.Hookset_Value();
}
remove => HookHandler._beforeset_Value -= value;
}
public static event Delegates.SetScrollPercentWithoutEvent_BeforeArgs SetScrollPercentWithoutEvent
{
add
{

HookHandler._beforeSetScrollPercentWithoutEvent += value;
HookHandler.HookSetScrollPercentWithoutEvent();
}
remove => HookHandler._beforeSetScrollPercentWithoutEvent -= value;
}
public static event Delegates.MeasureContentLength_BeforeArgs MeasureContentLength
{
add
{

HookHandler._beforeMeasureContentLength += value;
HookHandler.HookMeasureContentLength();
}
remove => HookHandler._beforeMeasureContentLength -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.BackgroundHoverOverScrollWheelChange_BeforeArgs BackgroundHoverOverScrollWheelChange
{
add
{

HookHandler._beforeBackgroundHoverOverScrollWheelChange += value;
HookHandler.HookBackgroundHoverOverScrollWheelChange();
}
remove => HookHandler._beforeBackgroundHoverOverScrollWheelChange -= value;
}
public static event Delegates.ScrollBarMove_BeforeArgs ScrollBarMove
{
add
{

HookHandler._beforeScrollBarMove += value;
HookHandler.HookScrollBarMove();
}
remove => HookHandler._beforeScrollBarMove -= value;
}
public static event Delegates.get_ContentContainerOffset_BeforeArgs get_ContentContainerOffset
{
add
{

HookHandler._beforeget_ContentContainerOffset += value;
HookHandler.Hookget_ContentContainerOffset();
}
remove => HookHandler._beforeget_ContentContainerOffset -= value;
}
public static event Delegates.set_ContentContainerOffset_BeforeArgs set_ContentContainerOffset
{
add
{

HookHandler._beforeset_ContentContainerOffset += value;
HookHandler.Hookset_ContentContainerOffset();
}
remove => HookHandler._beforeset_ContentContainerOffset -= value;
}
public static event Delegates.SetContentPosition_BeforeArgs SetContentPosition
{
add
{

HookHandler._beforeSetContentPosition += value;
HookHandler.HookSetContentPosition();
}
remove => HookHandler._beforeSetContentPosition -= value;
}
public static event Delegates.BackgroundButtonDown_BeforeArgs BackgroundButtonDown
{
add
{

HookHandler._beforeBackgroundButtonDown += value;
HookHandler.HookBackgroundButtonDown();
}
remove => HookHandler._beforeBackgroundButtonDown -= value;
}
public static event Delegates.BackgroundOverUpdate_BeforeArgs BackgroundOverUpdate
{
add
{

HookHandler._beforeBackgroundOverUpdate += value;
HookHandler.HookBackgroundOverUpdate();
}
remove => HookHandler._beforeBackgroundOverUpdate -= value;
}
public static event Delegates.UpdateSwipeScrollDestintationPosition_BeforeArgs UpdateSwipeScrollDestintationPosition
{
add
{

HookHandler._beforeUpdateSwipeScrollDestintationPosition += value;
HookHandler.HookUpdateSwipeScrollDestintationPosition();
}
remove => HookHandler._beforeUpdateSwipeScrollDestintationPosition -= value;
}
public static event Delegates.BackgroundButtonRelease_BeforeArgs BackgroundButtonRelease
{
add
{

HookHandler._beforeBackgroundButtonRelease += value;
HookHandler.HookBackgroundButtonRelease();
}
remove => HookHandler._beforeBackgroundButtonRelease -= value;
}
public static event Delegates.BackgroundButtonHoverOver_BeforeArgs BackgroundButtonHoverOver
{
add
{

HookHandler._beforeBackgroundButtonHoverOver += value;
HookHandler.HookBackgroundButtonHoverOver();
}
remove => HookHandler._beforeBackgroundButtonHoverOver -= value;
}
public static event Delegates.BackgroundButtonHoverOut_BeforeArgs BackgroundButtonHoverOut
{
add
{

HookHandler._beforeBackgroundButtonHoverOut += value;
HookHandler.HookBackgroundButtonHoverOut();
}
remove => HookHandler._beforeBackgroundButtonHoverOut -= value;
}
public static event Delegates.CalculateClickWorldPos_BeforeArgs CalculateClickWorldPos
{
add
{

HookHandler._beforeCalculateClickWorldPos += value;
HookHandler.HookCalculateClickWorldPos();
}
remove => HookHandler._beforeCalculateClickWorldPos -= value;
}
public static event Delegates.UpdateScrollbarActiveState_BeforeArgs UpdateScrollbarActiveState
{
add
{

HookHandler._beforeUpdateScrollbarActiveState += value;
HookHandler.HookUpdateScrollbarActiveState();
}
remove => HookHandler._beforeUpdateScrollbarActiveState -= value;
}
public static event Delegates.ContentLengthVisibleAreaLengthChange_BeforeArgs ContentLengthVisibleAreaLengthChange
{
add
{

HookHandler._beforeContentLengthVisibleAreaLengthChange += value;
HookHandler.HookContentLengthVisibleAreaLengthChange();
}
remove => HookHandler._beforeContentLengthVisibleAreaLengthChange -= value;
}
public static event Delegates.UnpressAllUIItemChildren_BeforeArgs UnpressAllUIItemChildren
{
add
{

HookHandler._beforeUnpressAllUIItemChildren += value;
HookHandler.HookUnpressAllUIItemChildren();
}
remove => HookHandler._beforeUnpressAllUIItemChildren -= value;
}
public static event Delegates.TargetOnScrollCallback_BeforeArgs TargetOnScrollCallback
{
add
{

HookHandler._beforeTargetOnScrollCallback += value;
HookHandler.HookTargetOnScrollCallback();
}
remove => HookHandler._beforeTargetOnScrollCallback -= value;
}
public static event Delegates.GetRendererBoundsInChildren_BeforeArgs GetRendererBoundsInChildren
{
add
{

HookHandler._beforeGetRendererBoundsInChildren += value;
HookHandler.HookGetRendererBoundsInChildren();
}
remove => HookHandler._beforeGetRendererBoundsInChildren -= value;
}
public static event Delegates.LayoutReshaped_BeforeArgs LayoutReshaped
{
add
{

HookHandler._beforeLayoutReshaped += value;
HookHandler.HookLayoutReshaped();
}
remove => HookHandler._beforeLayoutReshaped -= value;
}
public static event Delegates.ContentLayoutChangeCallback_BeforeArgs ContentLayoutChangeCallback
{
add
{

HookHandler._beforeContentLayoutChangeCallback += value;
HookHandler.HookContentLayoutChangeCallback();
}
remove => HookHandler._beforeContentLayoutChangeCallback -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_ContentLength_AfterArgs get_ContentLength
{
add
{

HookHandler._afterget_ContentLength += value;
HookHandler.Hookget_ContentLength();
}
remove => HookHandler._afterget_ContentLength -= value;
}
public static event Delegates.set_ContentLength_AfterArgs set_ContentLength
{
add
{

HookHandler._afterset_ContentLength += value;
HookHandler.Hookset_ContentLength();
}
remove => HookHandler._afterset_ContentLength -= value;
}
public static event Delegates.get_VisibleAreaLength_AfterArgs get_VisibleAreaLength
{
add
{

HookHandler._afterget_VisibleAreaLength += value;
HookHandler.Hookget_VisibleAreaLength();
}
remove => HookHandler._afterget_VisibleAreaLength -= value;
}
public static event Delegates.set_VisibleAreaLength_AfterArgs set_VisibleAreaLength
{
add
{

HookHandler._afterset_VisibleAreaLength += value;
HookHandler.Hookset_VisibleAreaLength();
}
remove => HookHandler._afterset_VisibleAreaLength -= value;
}
public static event Delegates.get_BackgroundLayoutItem_AfterArgs get_BackgroundLayoutItem
{
add
{

HookHandler._afterget_BackgroundLayoutItem += value;
HookHandler.Hookget_BackgroundLayoutItem();
}
remove => HookHandler._afterget_BackgroundLayoutItem -= value;
}
public static event Delegates.set_BackgroundLayoutItem_AfterArgs set_BackgroundLayoutItem
{
add
{

HookHandler._afterset_BackgroundLayoutItem += value;
HookHandler.Hookset_BackgroundLayoutItem();
}
remove => HookHandler._afterset_BackgroundLayoutItem -= value;
}
public static event Delegates.get_ContentLayoutContainer_AfterArgs get_ContentLayoutContainer
{
add
{

HookHandler._afterget_ContentLayoutContainer += value;
HookHandler.Hookget_ContentLayoutContainer();
}
remove => HookHandler._afterget_ContentLayoutContainer -= value;
}
public static event Delegates.set_ContentLayoutContainer_AfterArgs set_ContentLayoutContainer
{
add
{

HookHandler._afterset_ContentLayoutContainer += value;
HookHandler.Hookset_ContentLayoutContainer();
}
remove => HookHandler._afterset_ContentLayoutContainer -= value;
}
public static event Delegates.get_SendMessageTarget_AfterArgs get_SendMessageTarget
{
add
{

HookHandler._afterget_SendMessageTarget += value;
HookHandler.Hookget_SendMessageTarget();
}
remove => HookHandler._afterget_SendMessageTarget -= value;
}
public static event Delegates.set_SendMessageTarget_AfterArgs set_SendMessageTarget
{
add
{

HookHandler._afterset_SendMessageTarget += value;
HookHandler.Hookset_SendMessageTarget();
}
remove => HookHandler._afterset_SendMessageTarget -= value;
}
public static event Delegates.get_Value_AfterArgs get_Value
{
add
{

HookHandler._afterget_Value += value;
HookHandler.Hookget_Value();
}
remove => HookHandler._afterget_Value -= value;
}
public static event Delegates.set_Value_AfterArgs set_Value
{
add
{

HookHandler._afterset_Value += value;
HookHandler.Hookset_Value();
}
remove => HookHandler._afterset_Value -= value;
}
public static event Delegates.SetScrollPercentWithoutEvent_AfterArgs SetScrollPercentWithoutEvent
{
add
{

HookHandler._afterSetScrollPercentWithoutEvent += value;
HookHandler.HookSetScrollPercentWithoutEvent();
}
remove => HookHandler._afterSetScrollPercentWithoutEvent -= value;
}
public static event Delegates.MeasureContentLength_AfterArgs MeasureContentLength
{
add
{

HookHandler._afterMeasureContentLength += value;
HookHandler.HookMeasureContentLength();
}
remove => HookHandler._afterMeasureContentLength -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.BackgroundHoverOverScrollWheelChange_AfterArgs BackgroundHoverOverScrollWheelChange
{
add
{

HookHandler._afterBackgroundHoverOverScrollWheelChange += value;
HookHandler.HookBackgroundHoverOverScrollWheelChange();
}
remove => HookHandler._afterBackgroundHoverOverScrollWheelChange -= value;
}
public static event Delegates.ScrollBarMove_AfterArgs ScrollBarMove
{
add
{

HookHandler._afterScrollBarMove += value;
HookHandler.HookScrollBarMove();
}
remove => HookHandler._afterScrollBarMove -= value;
}
public static event Delegates.get_ContentContainerOffset_AfterArgs get_ContentContainerOffset
{
add
{

HookHandler._afterget_ContentContainerOffset += value;
HookHandler.Hookget_ContentContainerOffset();
}
remove => HookHandler._afterget_ContentContainerOffset -= value;
}
public static event Delegates.set_ContentContainerOffset_AfterArgs set_ContentContainerOffset
{
add
{

HookHandler._afterset_ContentContainerOffset += value;
HookHandler.Hookset_ContentContainerOffset();
}
remove => HookHandler._afterset_ContentContainerOffset -= value;
}
public static event Delegates.SetContentPosition_AfterArgs SetContentPosition
{
add
{

HookHandler._afterSetContentPosition += value;
HookHandler.HookSetContentPosition();
}
remove => HookHandler._afterSetContentPosition -= value;
}
public static event Delegates.BackgroundButtonDown_AfterArgs BackgroundButtonDown
{
add
{

HookHandler._afterBackgroundButtonDown += value;
HookHandler.HookBackgroundButtonDown();
}
remove => HookHandler._afterBackgroundButtonDown -= value;
}
public static event Delegates.BackgroundOverUpdate_AfterArgs BackgroundOverUpdate
{
add
{

HookHandler._afterBackgroundOverUpdate += value;
HookHandler.HookBackgroundOverUpdate();
}
remove => HookHandler._afterBackgroundOverUpdate -= value;
}
public static event Delegates.UpdateSwipeScrollDestintationPosition_AfterArgs UpdateSwipeScrollDestintationPosition
{
add
{

HookHandler._afterUpdateSwipeScrollDestintationPosition += value;
HookHandler.HookUpdateSwipeScrollDestintationPosition();
}
remove => HookHandler._afterUpdateSwipeScrollDestintationPosition -= value;
}
public static event Delegates.BackgroundButtonRelease_AfterArgs BackgroundButtonRelease
{
add
{

HookHandler._afterBackgroundButtonRelease += value;
HookHandler.HookBackgroundButtonRelease();
}
remove => HookHandler._afterBackgroundButtonRelease -= value;
}
public static event Delegates.BackgroundButtonHoverOver_AfterArgs BackgroundButtonHoverOver
{
add
{

HookHandler._afterBackgroundButtonHoverOver += value;
HookHandler.HookBackgroundButtonHoverOver();
}
remove => HookHandler._afterBackgroundButtonHoverOver -= value;
}
public static event Delegates.BackgroundButtonHoverOut_AfterArgs BackgroundButtonHoverOut
{
add
{

HookHandler._afterBackgroundButtonHoverOut += value;
HookHandler.HookBackgroundButtonHoverOut();
}
remove => HookHandler._afterBackgroundButtonHoverOut -= value;
}
public static event Delegates.CalculateClickWorldPos_AfterArgs CalculateClickWorldPos
{
add
{

HookHandler._afterCalculateClickWorldPos += value;
HookHandler.HookCalculateClickWorldPos();
}
remove => HookHandler._afterCalculateClickWorldPos -= value;
}
public static event Delegates.UpdateScrollbarActiveState_AfterArgs UpdateScrollbarActiveState
{
add
{

HookHandler._afterUpdateScrollbarActiveState += value;
HookHandler.HookUpdateScrollbarActiveState();
}
remove => HookHandler._afterUpdateScrollbarActiveState -= value;
}
public static event Delegates.ContentLengthVisibleAreaLengthChange_AfterArgs ContentLengthVisibleAreaLengthChange
{
add
{

HookHandler._afterContentLengthVisibleAreaLengthChange += value;
HookHandler.HookContentLengthVisibleAreaLengthChange();
}
remove => HookHandler._afterContentLengthVisibleAreaLengthChange -= value;
}
public static event Delegates.UnpressAllUIItemChildren_AfterArgs UnpressAllUIItemChildren
{
add
{

HookHandler._afterUnpressAllUIItemChildren += value;
HookHandler.HookUnpressAllUIItemChildren();
}
remove => HookHandler._afterUnpressAllUIItemChildren -= value;
}
public static event Delegates.TargetOnScrollCallback_AfterArgs TargetOnScrollCallback
{
add
{

HookHandler._afterTargetOnScrollCallback += value;
HookHandler.HookTargetOnScrollCallback();
}
remove => HookHandler._afterTargetOnScrollCallback -= value;
}
public static event Delegates.GetRendererBoundsInChildren_AfterArgs GetRendererBoundsInChildren
{
add
{

HookHandler._afterGetRendererBoundsInChildren += value;
HookHandler.HookGetRendererBoundsInChildren();
}
remove => HookHandler._afterGetRendererBoundsInChildren -= value;
}
public static event Delegates.LayoutReshaped_AfterArgs LayoutReshaped
{
add
{

HookHandler._afterLayoutReshaped += value;
HookHandler.HookLayoutReshaped();
}
remove => HookHandler._afterLayoutReshaped -= value;
}
public static event Delegates.ContentLayoutChangeCallback_AfterArgs ContentLayoutChangeCallback
{
add
{

HookHandler._afterContentLayoutChangeCallback += value;
HookHandler.HookContentLayoutChangeCallback();
}
remove => HookHandler._afterContentLayoutChangeCallback -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_ContentLength_WithArgs get_ContentLength
{
add => HookEndpointManager.Add<Delegates.get_ContentLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLength", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ContentLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLength", true), value);
}
public static event Delegates.set_ContentLength_WithArgs set_ContentLength
{
add => HookEndpointManager.Add<Delegates.set_ContentLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLength", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ContentLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLength", true), value);
}
public static event Delegates.get_VisibleAreaLength_WithArgs get_VisibleAreaLength
{
add => HookEndpointManager.Add<Delegates.get_VisibleAreaLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_VisibleAreaLength", true), value);
remove => HookEndpointManager.Remove<Delegates.get_VisibleAreaLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_VisibleAreaLength", true), value);
}
public static event Delegates.set_VisibleAreaLength_WithArgs set_VisibleAreaLength
{
add => HookEndpointManager.Add<Delegates.set_VisibleAreaLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_VisibleAreaLength", true), value);
remove => HookEndpointManager.Remove<Delegates.set_VisibleAreaLength_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_VisibleAreaLength", true), value);
}
public static event Delegates.get_BackgroundLayoutItem_WithArgs get_BackgroundLayoutItem
{
add => HookEndpointManager.Add<Delegates.get_BackgroundLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_BackgroundLayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.get_BackgroundLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_BackgroundLayoutItem", true), value);
}
public static event Delegates.set_BackgroundLayoutItem_WithArgs set_BackgroundLayoutItem
{
add => HookEndpointManager.Add<Delegates.set_BackgroundLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_BackgroundLayoutItem", true), value);
remove => HookEndpointManager.Remove<Delegates.set_BackgroundLayoutItem_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_BackgroundLayoutItem", true), value);
}
public static event Delegates.get_ContentLayoutContainer_WithArgs get_ContentLayoutContainer
{
add => HookEndpointManager.Add<Delegates.get_ContentLayoutContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLayoutContainer", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ContentLayoutContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLayoutContainer", true), value);
}
public static event Delegates.set_ContentLayoutContainer_WithArgs set_ContentLayoutContainer
{
add => HookEndpointManager.Add<Delegates.set_ContentLayoutContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLayoutContainer", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ContentLayoutContainer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLayoutContainer", true), value);
}
public static event Delegates.get_SendMessageTarget_WithArgs get_SendMessageTarget
{
add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_SendMessageTarget", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_SendMessageTarget", true), value);
}
public static event Delegates.set_SendMessageTarget_WithArgs set_SendMessageTarget
{
add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_SendMessageTarget", true), value);
remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_SendMessageTarget", true), value);
}
public static event Delegates.get_Value_WithArgs get_Value
{
add => HookEndpointManager.Add<Delegates.get_Value_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_Value", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Value_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_Value", true), value);
}
public static event Delegates.set_Value_WithArgs set_Value
{
add => HookEndpointManager.Add<Delegates.set_Value_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_Value", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Value_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_Value", true), value);
}
public static event On.tk2dUIScrollableArea.hook_SetScrollPercentWithoutEvent SetScrollPercentWithoutEvent
{
add => On.tk2dUIScrollableArea.SetScrollPercentWithoutEvent += value;
remove => On.tk2dUIScrollableArea.SetScrollPercentWithoutEvent -= value;
}
public static event On.tk2dUIScrollableArea.hook_MeasureContentLength MeasureContentLength
{
add => On.tk2dUIScrollableArea.MeasureContentLength += value;
remove => On.tk2dUIScrollableArea.MeasureContentLength -= value;
}
public static event On.tk2dUIScrollableArea.hook_OnEnable OnEnable
{
add => On.tk2dUIScrollableArea.OnEnable += value;
remove => On.tk2dUIScrollableArea.OnEnable -= value;
}
public static event On.tk2dUIScrollableArea.hook_OnDisable OnDisable
{
add => On.tk2dUIScrollableArea.OnDisable += value;
remove => On.tk2dUIScrollableArea.OnDisable -= value;
}
public static event On.tk2dUIScrollableArea.hook_Start Start
{
add => On.tk2dUIScrollableArea.Start += value;
remove => On.tk2dUIScrollableArea.Start -= value;
}
public static event On.tk2dUIScrollableArea.hook_BackgroundHoverOverScrollWheelChange BackgroundHoverOverScrollWheelChange
{
add => On.tk2dUIScrollableArea.BackgroundHoverOverScrollWheelChange += value;
remove => On.tk2dUIScrollableArea.BackgroundHoverOverScrollWheelChange -= value;
}
public static event On.tk2dUIScrollableArea.hook_ScrollBarMove ScrollBarMove
{
add => On.tk2dUIScrollableArea.ScrollBarMove += value;
remove => On.tk2dUIScrollableArea.ScrollBarMove -= value;
}
public static event Delegates.get_ContentContainerOffset_WithArgs get_ContentContainerOffset
{
add => HookEndpointManager.Add<Delegates.get_ContentContainerOffset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentContainerOffset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ContentContainerOffset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentContainerOffset", true), value);
}
public static event Delegates.set_ContentContainerOffset_WithArgs set_ContentContainerOffset
{
add => HookEndpointManager.Add<Delegates.set_ContentContainerOffset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentContainerOffset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ContentContainerOffset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentContainerOffset", true), value);
}
public static event On.tk2dUIScrollableArea.hook_SetContentPosition SetContentPosition
{
add => On.tk2dUIScrollableArea.SetContentPosition += value;
remove => On.tk2dUIScrollableArea.SetContentPosition -= value;
}
public static event On.tk2dUIScrollableArea.hook_BackgroundButtonDown BackgroundButtonDown
{
add => On.tk2dUIScrollableArea.BackgroundButtonDown += value;
remove => On.tk2dUIScrollableArea.BackgroundButtonDown -= value;
}
public static event On.tk2dUIScrollableArea.hook_BackgroundOverUpdate BackgroundOverUpdate
{
add => On.tk2dUIScrollableArea.BackgroundOverUpdate += value;
remove => On.tk2dUIScrollableArea.BackgroundOverUpdate -= value;
}
public static event On.tk2dUIScrollableArea.hook_UpdateSwipeScrollDestintationPosition UpdateSwipeScrollDestintationPosition
{
add => On.tk2dUIScrollableArea.UpdateSwipeScrollDestintationPosition += value;
remove => On.tk2dUIScrollableArea.UpdateSwipeScrollDestintationPosition -= value;
}
public static event On.tk2dUIScrollableArea.hook_BackgroundButtonRelease BackgroundButtonRelease
{
add => On.tk2dUIScrollableArea.BackgroundButtonRelease += value;
remove => On.tk2dUIScrollableArea.BackgroundButtonRelease -= value;
}
public static event On.tk2dUIScrollableArea.hook_BackgroundButtonHoverOver BackgroundButtonHoverOver
{
add => On.tk2dUIScrollableArea.BackgroundButtonHoverOver += value;
remove => On.tk2dUIScrollableArea.BackgroundButtonHoverOver -= value;
}
public static event On.tk2dUIScrollableArea.hook_BackgroundButtonHoverOut BackgroundButtonHoverOut
{
add => On.tk2dUIScrollableArea.BackgroundButtonHoverOut += value;
remove => On.tk2dUIScrollableArea.BackgroundButtonHoverOut -= value;
}
public static event On.tk2dUIScrollableArea.hook_CalculateClickWorldPos CalculateClickWorldPos
{
add => On.tk2dUIScrollableArea.CalculateClickWorldPos += value;
remove => On.tk2dUIScrollableArea.CalculateClickWorldPos -= value;
}
public static event On.tk2dUIScrollableArea.hook_UpdateScrollbarActiveState UpdateScrollbarActiveState
{
add => On.tk2dUIScrollableArea.UpdateScrollbarActiveState += value;
remove => On.tk2dUIScrollableArea.UpdateScrollbarActiveState -= value;
}
public static event On.tk2dUIScrollableArea.hook_ContentLengthVisibleAreaLengthChange ContentLengthVisibleAreaLengthChange
{
add => On.tk2dUIScrollableArea.ContentLengthVisibleAreaLengthChange += value;
remove => On.tk2dUIScrollableArea.ContentLengthVisibleAreaLengthChange -= value;
}
public static event On.tk2dUIScrollableArea.hook_UnpressAllUIItemChildren UnpressAllUIItemChildren
{
add => On.tk2dUIScrollableArea.UnpressAllUIItemChildren += value;
remove => On.tk2dUIScrollableArea.UnpressAllUIItemChildren -= value;
}
public static event On.tk2dUIScrollableArea.hook_TargetOnScrollCallback TargetOnScrollCallback
{
add => On.tk2dUIScrollableArea.TargetOnScrollCallback += value;
remove => On.tk2dUIScrollableArea.TargetOnScrollCallback -= value;
}
public static event On.tk2dUIScrollableArea.hook_GetRendererBoundsInChildren GetRendererBoundsInChildren
{
add => On.tk2dUIScrollableArea.GetRendererBoundsInChildren += value;
remove => On.tk2dUIScrollableArea.GetRendererBoundsInChildren -= value;
}
public static event On.tk2dUIScrollableArea.hook_LayoutReshaped LayoutReshaped
{
add => On.tk2dUIScrollableArea.LayoutReshaped += value;
remove => On.tk2dUIScrollableArea.LayoutReshaped -= value;
}
public static event On.tk2dUIScrollableArea.hook_ContentLayoutChangeCallback ContentLayoutChangeCallback
{
add => On.tk2dUIScrollableArea.ContentLayoutChangeCallback += value;
remove => On.tk2dUIScrollableArea.ContentLayoutChangeCallback -= value;
}
}

}
