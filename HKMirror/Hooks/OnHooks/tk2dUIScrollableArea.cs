using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIScrollableArea class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIScrollableArea
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ContentLength()
        {
            if (!HookedList.Contains("get_ContentLength"))
            {
                HookedList.Add("get_ContentLength");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLength"),
                    get_ContentLength);
            }
        }

        internal static event Delegates.get_ContentLength_BeforeArgs _beforeget_ContentLength;
        internal static event Delegates.get_ContentLength_NormalArgs _afterget_ContentLength;

        private static float get_ContentLength(Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_get_ContentLength @params = new()
            {
                self = self
            };
            _beforeget_ContentLength?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ContentLength != null) retVal = _afterget_ContentLength.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ContentLength()
        {
            if (!HookedList.Contains("set_ContentLength"))
            {
                HookedList.Add("set_ContentLength");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLength"),
                    set_ContentLength);
            }
        }

        internal static event Delegates.set_ContentLength_BeforeArgs _beforeset_ContentLength;
        internal static event Delegates.set_ContentLength_NormalArgs _afterset_ContentLength;

        private static void set_ContentLength(Action<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self,
            float value)
        {
            Delegates.Params_set_ContentLength @params = new()
            {
                self = self, value = value
            };
            _beforeset_ContentLength?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ContentLength != null) _afterset_ContentLength.Invoke(@params);
        }

        internal static void Hookget_VisibleAreaLength()
        {
            if (!HookedList.Contains("get_VisibleAreaLength"))
            {
                HookedList.Add("get_VisibleAreaLength");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_VisibleAreaLength"),
                    get_VisibleAreaLength);
            }
        }

        internal static event Delegates.get_VisibleAreaLength_BeforeArgs _beforeget_VisibleAreaLength;
        internal static event Delegates.get_VisibleAreaLength_NormalArgs _afterget_VisibleAreaLength;

        private static float get_VisibleAreaLength(Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_get_VisibleAreaLength @params = new()
            {
                self = self
            };
            _beforeget_VisibleAreaLength?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VisibleAreaLength != null) retVal = _afterget_VisibleAreaLength.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_VisibleAreaLength()
        {
            if (!HookedList.Contains("set_VisibleAreaLength"))
            {
                HookedList.Add("set_VisibleAreaLength");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_VisibleAreaLength"),
                    set_VisibleAreaLength);
            }
        }

        internal static event Delegates.set_VisibleAreaLength_BeforeArgs _beforeset_VisibleAreaLength;
        internal static event Delegates.set_VisibleAreaLength_NormalArgs _afterset_VisibleAreaLength;

        private static void set_VisibleAreaLength(Action<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self,
            float value)
        {
            Delegates.Params_set_VisibleAreaLength @params = new()
            {
                self = self, value = value
            };
            _beforeset_VisibleAreaLength?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_VisibleAreaLength != null) _afterset_VisibleAreaLength.Invoke(@params);
        }

        internal static void Hookget_BackgroundLayoutItem()
        {
            if (!HookedList.Contains("get_BackgroundLayoutItem"))
            {
                HookedList.Add("get_BackgroundLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_BackgroundLayoutItem"),
                    get_BackgroundLayoutItem);
            }
        }

        internal static event Delegates.get_BackgroundLayoutItem_BeforeArgs _beforeget_BackgroundLayoutItem;
        internal static event Delegates.get_BackgroundLayoutItem_NormalArgs _afterget_BackgroundLayoutItem;

        private static tk2dUILayout get_BackgroundLayoutItem(Func<tk2dUIScrollableArea, tk2dUILayout> orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_get_BackgroundLayoutItem @params = new()
            {
                self = self
            };
            _beforeget_BackgroundLayoutItem?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BackgroundLayoutItem != null) retVal = _afterget_BackgroundLayoutItem.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_BackgroundLayoutItem()
        {
            if (!HookedList.Contains("set_BackgroundLayoutItem"))
            {
                HookedList.Add("set_BackgroundLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_BackgroundLayoutItem"),
                    set_BackgroundLayoutItem);
            }
        }

        internal static event Delegates.set_BackgroundLayoutItem_BeforeArgs _beforeset_BackgroundLayoutItem;
        internal static event Delegates.set_BackgroundLayoutItem_NormalArgs _afterset_BackgroundLayoutItem;

        private static void set_BackgroundLayoutItem(Action<tk2dUIScrollableArea, tk2dUILayout> orig,
            tk2dUIScrollableArea self, tk2dUILayout value)
        {
            Delegates.Params_set_BackgroundLayoutItem @params = new()
            {
                self = self, value = value
            };
            _beforeset_BackgroundLayoutItem?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BackgroundLayoutItem != null) _afterset_BackgroundLayoutItem.Invoke(@params);
        }

        internal static void Hookget_ContentLayoutContainer()
        {
            if (!HookedList.Contains("get_ContentLayoutContainer"))
            {
                HookedList.Add("get_ContentLayoutContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLayoutContainer"),
                    get_ContentLayoutContainer);
            }
        }

        internal static event Delegates.get_ContentLayoutContainer_BeforeArgs _beforeget_ContentLayoutContainer;
        internal static event Delegates.get_ContentLayoutContainer_NormalArgs _afterget_ContentLayoutContainer;

        private static tk2dUILayoutContainer get_ContentLayoutContainer(
            Func<tk2dUIScrollableArea, tk2dUILayoutContainer> orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_get_ContentLayoutContainer @params = new()
            {
                self = self
            };
            _beforeget_ContentLayoutContainer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ContentLayoutContainer != null) retVal = _afterget_ContentLayoutContainer.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ContentLayoutContainer()
        {
            if (!HookedList.Contains("set_ContentLayoutContainer"))
            {
                HookedList.Add("set_ContentLayoutContainer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLayoutContainer"),
                    set_ContentLayoutContainer);
            }
        }

        internal static event Delegates.set_ContentLayoutContainer_BeforeArgs _beforeset_ContentLayoutContainer;
        internal static event Delegates.set_ContentLayoutContainer_NormalArgs _afterset_ContentLayoutContainer;

        private static void set_ContentLayoutContainer(Action<tk2dUIScrollableArea, tk2dUILayoutContainer> orig,
            tk2dUIScrollableArea self, tk2dUILayoutContainer value)
        {
            Delegates.Params_set_ContentLayoutContainer @params = new()
            {
                self = self, value = value
            };
            _beforeset_ContentLayoutContainer?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ContentLayoutContainer != null) _afterset_ContentLayoutContainer.Invoke(@params);
        }

        internal static void Hookget_SendMessageTarget()
        {
            if (!HookedList.Contains("get_SendMessageTarget"))
            {
                HookedList.Add("get_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_SendMessageTarget"),
                    get_SendMessageTarget);
            }
        }

        internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
        internal static event Delegates.get_SendMessageTarget_NormalArgs _afterget_SendMessageTarget;

        private static GameObject get_SendMessageTarget(Func<tk2dUIScrollableArea, GameObject> orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_get_SendMessageTarget @params = new()
            {
                self = self
            };
            _beforeget_SendMessageTarget?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SendMessageTarget != null) retVal = _afterget_SendMessageTarget.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SendMessageTarget()
        {
            if (!HookedList.Contains("set_SendMessageTarget"))
            {
                HookedList.Add("set_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_SendMessageTarget"),
                    set_SendMessageTarget);
            }
        }

        internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
        internal static event Delegates.set_SendMessageTarget_NormalArgs _afterset_SendMessageTarget;

        private static void set_SendMessageTarget(Action<tk2dUIScrollableArea, GameObject> orig,
            tk2dUIScrollableArea self, GameObject value)
        {
            Delegates.Params_set_SendMessageTarget @params = new()
            {
                self = self, value = value
            };
            _beforeset_SendMessageTarget?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SendMessageTarget != null) _afterset_SendMessageTarget.Invoke(@params);
        }

        internal static void Hookget_Value()
        {
            if (!HookedList.Contains("get_Value"))
            {
                HookedList.Add("get_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_Value"), get_Value);
            }
        }

        internal static event Delegates.get_Value_BeforeArgs _beforeget_Value;
        internal static event Delegates.get_Value_NormalArgs _afterget_Value;

        private static float get_Value(Func<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_get_Value @params = new()
            {
                self = self
            };
            _beforeget_Value?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Value != null) retVal = _afterget_Value.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Value()
        {
            if (!HookedList.Contains("set_Value"))
            {
                HookedList.Add("set_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_Value"), set_Value);
            }
        }

        internal static event Delegates.set_Value_BeforeArgs _beforeset_Value;
        internal static event Delegates.set_Value_NormalArgs _afterset_Value;

        private static void set_Value(Action<tk2dUIScrollableArea, float> orig, tk2dUIScrollableArea self, float value)
        {
            Delegates.Params_set_Value @params = new()
            {
                self = self, value = value
            };
            _beforeset_Value?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Value != null) _afterset_Value.Invoke(@params);
        }

        internal static void HookSetScrollPercentWithoutEvent()
        {
            if (!HookedList.Contains("SetScrollPercentWithoutEvent"))
            {
                HookedList.Add("SetScrollPercentWithoutEvent");
                On.tk2dUIScrollableArea.SetScrollPercentWithoutEvent += SetScrollPercentWithoutEvent;
            }
        }

        internal static event Delegates.SetScrollPercentWithoutEvent_BeforeArgs _beforeSetScrollPercentWithoutEvent;
        internal static event Delegates.SetScrollPercentWithoutEvent_NormalArgs _afterSetScrollPercentWithoutEvent;

        private static void SetScrollPercentWithoutEvent(On.tk2dUIScrollableArea.orig_SetScrollPercentWithoutEvent orig,
            tk2dUIScrollableArea self, float newScrollPercent)
        {
            Delegates.Params_SetScrollPercentWithoutEvent @params = new()
            {
                self = self, newScrollPercent = newScrollPercent
            };
            _beforeSetScrollPercentWithoutEvent?.Invoke(@params);
            self = @params.self;
            newScrollPercent = @params.newScrollPercent;
            orig(self, newScrollPercent);
            if (_afterSetScrollPercentWithoutEvent != null) _afterSetScrollPercentWithoutEvent.Invoke(@params);
        }

        internal static void HookMeasureContentLength()
        {
            if (!HookedList.Contains("MeasureContentLength"))
            {
                HookedList.Add("MeasureContentLength");
                On.tk2dUIScrollableArea.MeasureContentLength += MeasureContentLength;
            }
        }

        internal static event Delegates.MeasureContentLength_BeforeArgs _beforeMeasureContentLength;
        internal static event Delegates.MeasureContentLength_NormalArgs _afterMeasureContentLength;

        private static float MeasureContentLength(On.tk2dUIScrollableArea.orig_MeasureContentLength orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_MeasureContentLength @params = new()
            {
                self = self
            };
            _beforeMeasureContentLength?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterMeasureContentLength != null) retVal = _afterMeasureContentLength.Invoke(@params);
            return retVal;
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIScrollableArea.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIScrollableArea.orig_OnEnable orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIScrollableArea.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIScrollableArea.orig_OnDisable orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIScrollableArea.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dUIScrollableArea.orig_Start orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookBackgroundHoverOverScrollWheelChange()
        {
            if (!HookedList.Contains("BackgroundHoverOverScrollWheelChange"))
            {
                HookedList.Add("BackgroundHoverOverScrollWheelChange");
                On.tk2dUIScrollableArea.BackgroundHoverOverScrollWheelChange += BackgroundHoverOverScrollWheelChange;
            }
        }

        internal static event Delegates.BackgroundHoverOverScrollWheelChange_BeforeArgs
            _beforeBackgroundHoverOverScrollWheelChange;

        internal static event Delegates.BackgroundHoverOverScrollWheelChange_NormalArgs
            _afterBackgroundHoverOverScrollWheelChange;

        private static void BackgroundHoverOverScrollWheelChange(
            On.tk2dUIScrollableArea.orig_BackgroundHoverOverScrollWheelChange orig, tk2dUIScrollableArea self,
            float mouseWheelChange)
        {
            Delegates.Params_BackgroundHoverOverScrollWheelChange @params = new()
            {
                self = self, mouseWheelChange = mouseWheelChange
            };
            _beforeBackgroundHoverOverScrollWheelChange?.Invoke(@params);
            self = @params.self;
            mouseWheelChange = @params.mouseWheelChange;
            orig(self, mouseWheelChange);
            if (_afterBackgroundHoverOverScrollWheelChange != null)
                _afterBackgroundHoverOverScrollWheelChange.Invoke(@params);
        }

        internal static void HookScrollBarMove()
        {
            if (!HookedList.Contains("ScrollBarMove"))
            {
                HookedList.Add("ScrollBarMove");
                On.tk2dUIScrollableArea.ScrollBarMove += ScrollBarMove;
            }
        }

        internal static event Delegates.ScrollBarMove_BeforeArgs _beforeScrollBarMove;
        internal static event Delegates.ScrollBarMove_NormalArgs _afterScrollBarMove;

        private static void ScrollBarMove(On.tk2dUIScrollableArea.orig_ScrollBarMove orig, tk2dUIScrollableArea self,
            tk2dUIScrollbar scrollBar)
        {
            Delegates.Params_ScrollBarMove @params = new()
            {
                self = self, scrollBar = scrollBar
            };
            _beforeScrollBarMove?.Invoke(@params);
            self = @params.self;
            scrollBar = @params.scrollBar;
            orig(self, scrollBar);
            if (_afterScrollBarMove != null) _afterScrollBarMove.Invoke(@params);
        }

        internal static void Hookget_ContentContainerOffset()
        {
            if (!HookedList.Contains("get_ContentContainerOffset"))
            {
                HookedList.Add("get_ContentContainerOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentContainerOffset"),
                    get_ContentContainerOffset);
            }
        }

        internal static event Delegates.get_ContentContainerOffset_BeforeArgs _beforeget_ContentContainerOffset;
        internal static event Delegates.get_ContentContainerOffset_NormalArgs _afterget_ContentContainerOffset;

        private static Vector3 get_ContentContainerOffset(Func<tk2dUIScrollableArea, Vector3> orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_get_ContentContainerOffset @params = new()
            {
                self = self
            };
            _beforeget_ContentContainerOffset?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ContentContainerOffset != null) retVal = _afterget_ContentContainerOffset.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ContentContainerOffset()
        {
            if (!HookedList.Contains("set_ContentContainerOffset"))
            {
                HookedList.Add("set_ContentContainerOffset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentContainerOffset"),
                    set_ContentContainerOffset);
            }
        }

        internal static event Delegates.set_ContentContainerOffset_BeforeArgs _beforeset_ContentContainerOffset;
        internal static event Delegates.set_ContentContainerOffset_NormalArgs _afterset_ContentContainerOffset;

        private static void set_ContentContainerOffset(Action<tk2dUIScrollableArea, Vector3> orig,
            tk2dUIScrollableArea self, Vector3 value)
        {
            Delegates.Params_set_ContentContainerOffset @params = new()
            {
                self = self, value = value
            };
            _beforeset_ContentContainerOffset?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ContentContainerOffset != null) _afterset_ContentContainerOffset.Invoke(@params);
        }

        internal static void HookSetContentPosition()
        {
            if (!HookedList.Contains("SetContentPosition"))
            {
                HookedList.Add("SetContentPosition");
                On.tk2dUIScrollableArea.SetContentPosition += SetContentPosition;
            }
        }

        internal static event Delegates.SetContentPosition_BeforeArgs _beforeSetContentPosition;
        internal static event Delegates.SetContentPosition_NormalArgs _afterSetContentPosition;

        private static void SetContentPosition(On.tk2dUIScrollableArea.orig_SetContentPosition orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_SetContentPosition @params = new()
            {
                self = self
            };
            _beforeSetContentPosition?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetContentPosition != null) _afterSetContentPosition.Invoke(@params);
        }

        internal static void HookBackgroundButtonDown()
        {
            if (!HookedList.Contains("BackgroundButtonDown"))
            {
                HookedList.Add("BackgroundButtonDown");
                On.tk2dUIScrollableArea.BackgroundButtonDown += BackgroundButtonDown;
            }
        }

        internal static event Delegates.BackgroundButtonDown_BeforeArgs _beforeBackgroundButtonDown;
        internal static event Delegates.BackgroundButtonDown_NormalArgs _afterBackgroundButtonDown;

        private static void BackgroundButtonDown(On.tk2dUIScrollableArea.orig_BackgroundButtonDown orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_BackgroundButtonDown @params = new()
            {
                self = self
            };
            _beforeBackgroundButtonDown?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackgroundButtonDown != null) _afterBackgroundButtonDown.Invoke(@params);
        }

        internal static void HookBackgroundOverUpdate()
        {
            if (!HookedList.Contains("BackgroundOverUpdate"))
            {
                HookedList.Add("BackgroundOverUpdate");
                On.tk2dUIScrollableArea.BackgroundOverUpdate += BackgroundOverUpdate;
            }
        }

        internal static event Delegates.BackgroundOverUpdate_BeforeArgs _beforeBackgroundOverUpdate;
        internal static event Delegates.BackgroundOverUpdate_NormalArgs _afterBackgroundOverUpdate;

        private static void BackgroundOverUpdate(On.tk2dUIScrollableArea.orig_BackgroundOverUpdate orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_BackgroundOverUpdate @params = new()
            {
                self = self
            };
            _beforeBackgroundOverUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackgroundOverUpdate != null) _afterBackgroundOverUpdate.Invoke(@params);
        }

        internal static void HookUpdateSwipeScrollDestintationPosition()
        {
            if (!HookedList.Contains("UpdateSwipeScrollDestintationPosition"))
            {
                HookedList.Add("UpdateSwipeScrollDestintationPosition");
                On.tk2dUIScrollableArea.UpdateSwipeScrollDestintationPosition += UpdateSwipeScrollDestintationPosition;
            }
        }

        internal static event Delegates.UpdateSwipeScrollDestintationPosition_BeforeArgs
            _beforeUpdateSwipeScrollDestintationPosition;

        internal static event Delegates.UpdateSwipeScrollDestintationPosition_NormalArgs
            _afterUpdateSwipeScrollDestintationPosition;

        private static void UpdateSwipeScrollDestintationPosition(
            On.tk2dUIScrollableArea.orig_UpdateSwipeScrollDestintationPosition orig, tk2dUIScrollableArea self)
        {
            Delegates.Params_UpdateSwipeScrollDestintationPosition @params = new()
            {
                self = self
            };
            _beforeUpdateSwipeScrollDestintationPosition?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateSwipeScrollDestintationPosition != null)
                _afterUpdateSwipeScrollDestintationPosition.Invoke(@params);
        }

        internal static void HookBackgroundButtonRelease()
        {
            if (!HookedList.Contains("BackgroundButtonRelease"))
            {
                HookedList.Add("BackgroundButtonRelease");
                On.tk2dUIScrollableArea.BackgroundButtonRelease += BackgroundButtonRelease;
            }
        }

        internal static event Delegates.BackgroundButtonRelease_BeforeArgs _beforeBackgroundButtonRelease;
        internal static event Delegates.BackgroundButtonRelease_NormalArgs _afterBackgroundButtonRelease;

        private static void BackgroundButtonRelease(On.tk2dUIScrollableArea.orig_BackgroundButtonRelease orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_BackgroundButtonRelease @params = new()
            {
                self = self
            };
            _beforeBackgroundButtonRelease?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackgroundButtonRelease != null) _afterBackgroundButtonRelease.Invoke(@params);
        }

        internal static void HookBackgroundButtonHoverOver()
        {
            if (!HookedList.Contains("BackgroundButtonHoverOver"))
            {
                HookedList.Add("BackgroundButtonHoverOver");
                On.tk2dUIScrollableArea.BackgroundButtonHoverOver += BackgroundButtonHoverOver;
            }
        }

        internal static event Delegates.BackgroundButtonHoverOver_BeforeArgs _beforeBackgroundButtonHoverOver;
        internal static event Delegates.BackgroundButtonHoverOver_NormalArgs _afterBackgroundButtonHoverOver;

        private static void BackgroundButtonHoverOver(On.tk2dUIScrollableArea.orig_BackgroundButtonHoverOver orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_BackgroundButtonHoverOver @params = new()
            {
                self = self
            };
            _beforeBackgroundButtonHoverOver?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackgroundButtonHoverOver != null) _afterBackgroundButtonHoverOver.Invoke(@params);
        }

        internal static void HookBackgroundButtonHoverOut()
        {
            if (!HookedList.Contains("BackgroundButtonHoverOut"))
            {
                HookedList.Add("BackgroundButtonHoverOut");
                On.tk2dUIScrollableArea.BackgroundButtonHoverOut += BackgroundButtonHoverOut;
            }
        }

        internal static event Delegates.BackgroundButtonHoverOut_BeforeArgs _beforeBackgroundButtonHoverOut;
        internal static event Delegates.BackgroundButtonHoverOut_NormalArgs _afterBackgroundButtonHoverOut;

        private static void BackgroundButtonHoverOut(On.tk2dUIScrollableArea.orig_BackgroundButtonHoverOut orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_BackgroundButtonHoverOut @params = new()
            {
                self = self
            };
            _beforeBackgroundButtonHoverOut?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBackgroundButtonHoverOut != null) _afterBackgroundButtonHoverOut.Invoke(@params);
        }

        internal static void HookCalculateClickWorldPos()
        {
            if (!HookedList.Contains("CalculateClickWorldPos"))
            {
                HookedList.Add("CalculateClickWorldPos");
                On.tk2dUIScrollableArea.CalculateClickWorldPos += CalculateClickWorldPos;
            }
        }

        internal static event Delegates.CalculateClickWorldPos_BeforeArgs _beforeCalculateClickWorldPos;
        internal static event Delegates.CalculateClickWorldPos_NormalArgs _afterCalculateClickWorldPos;

        private static Vector3 CalculateClickWorldPos(On.tk2dUIScrollableArea.orig_CalculateClickWorldPos orig,
            tk2dUIScrollableArea self, tk2dUIItem btn)
        {
            Delegates.Params_CalculateClickWorldPos @params = new()
            {
                self = self, btn = btn
            };
            _beforeCalculateClickWorldPos?.Invoke(@params);
            self = @params.self;
            btn = @params.btn;
            var retVal = orig(self, btn);
            if (_afterCalculateClickWorldPos != null) retVal = _afterCalculateClickWorldPos.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateScrollbarActiveState()
        {
            if (!HookedList.Contains("UpdateScrollbarActiveState"))
            {
                HookedList.Add("UpdateScrollbarActiveState");
                On.tk2dUIScrollableArea.UpdateScrollbarActiveState += UpdateScrollbarActiveState;
            }
        }

        internal static event Delegates.UpdateScrollbarActiveState_BeforeArgs _beforeUpdateScrollbarActiveState;
        internal static event Delegates.UpdateScrollbarActiveState_NormalArgs _afterUpdateScrollbarActiveState;

        private static void UpdateScrollbarActiveState(On.tk2dUIScrollableArea.orig_UpdateScrollbarActiveState orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_UpdateScrollbarActiveState @params = new()
            {
                self = self
            };
            _beforeUpdateScrollbarActiveState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateScrollbarActiveState != null) _afterUpdateScrollbarActiveState.Invoke(@params);
        }

        internal static void HookContentLengthVisibleAreaLengthChange()
        {
            if (!HookedList.Contains("ContentLengthVisibleAreaLengthChange"))
            {
                HookedList.Add("ContentLengthVisibleAreaLengthChange");
                On.tk2dUIScrollableArea.ContentLengthVisibleAreaLengthChange += ContentLengthVisibleAreaLengthChange;
            }
        }

        internal static event Delegates.ContentLengthVisibleAreaLengthChange_BeforeArgs
            _beforeContentLengthVisibleAreaLengthChange;

        internal static event Delegates.ContentLengthVisibleAreaLengthChange_NormalArgs
            _afterContentLengthVisibleAreaLengthChange;

        private static void ContentLengthVisibleAreaLengthChange(
            On.tk2dUIScrollableArea.orig_ContentLengthVisibleAreaLengthChange orig, tk2dUIScrollableArea self,
            float prevContentLength, float newContentLength, float prevVisibleAreaLength, float newVisibleAreaLength)
        {
            Delegates.Params_ContentLengthVisibleAreaLengthChange @params = new()
            {
                self = self, prevContentLength = prevContentLength, newContentLength = newContentLength,
                prevVisibleAreaLength = prevVisibleAreaLength, newVisibleAreaLength = newVisibleAreaLength
            };
            _beforeContentLengthVisibleAreaLengthChange?.Invoke(@params);
            self = @params.self;
            prevContentLength = @params.prevContentLength;
            newContentLength = @params.newContentLength;
            prevVisibleAreaLength = @params.prevVisibleAreaLength;
            newVisibleAreaLength = @params.newVisibleAreaLength;
            orig(self, prevContentLength, newContentLength, prevVisibleAreaLength, newVisibleAreaLength);
            if (_afterContentLengthVisibleAreaLengthChange != null)
                _afterContentLengthVisibleAreaLengthChange.Invoke(@params);
        }

        internal static void HookUnpressAllUIItemChildren()
        {
            if (!HookedList.Contains("UnpressAllUIItemChildren"))
            {
                HookedList.Add("UnpressAllUIItemChildren");
                On.tk2dUIScrollableArea.UnpressAllUIItemChildren += UnpressAllUIItemChildren;
            }
        }

        internal static event Delegates.UnpressAllUIItemChildren_BeforeArgs _beforeUnpressAllUIItemChildren;
        internal static event Delegates.UnpressAllUIItemChildren_NormalArgs _afterUnpressAllUIItemChildren;

        private static void UnpressAllUIItemChildren(On.tk2dUIScrollableArea.orig_UnpressAllUIItemChildren orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_UnpressAllUIItemChildren @params = new()
            {
                self = self
            };
            _beforeUnpressAllUIItemChildren?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnpressAllUIItemChildren != null) _afterUnpressAllUIItemChildren.Invoke(@params);
        }

        internal static void HookTargetOnScrollCallback()
        {
            if (!HookedList.Contains("TargetOnScrollCallback"))
            {
                HookedList.Add("TargetOnScrollCallback");
                On.tk2dUIScrollableArea.TargetOnScrollCallback += TargetOnScrollCallback;
            }
        }

        internal static event Delegates.TargetOnScrollCallback_BeforeArgs _beforeTargetOnScrollCallback;
        internal static event Delegates.TargetOnScrollCallback_NormalArgs _afterTargetOnScrollCallback;

        private static void TargetOnScrollCallback(On.tk2dUIScrollableArea.orig_TargetOnScrollCallback orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_TargetOnScrollCallback @params = new()
            {
                self = self
            };
            _beforeTargetOnScrollCallback?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterTargetOnScrollCallback != null) _afterTargetOnScrollCallback.Invoke(@params);
        }

        internal static void HookGetRendererBoundsInChildren()
        {
            if (!HookedList.Contains("GetRendererBoundsInChildren"))
            {
                HookedList.Add("GetRendererBoundsInChildren");
                On.tk2dUIScrollableArea.GetRendererBoundsInChildren += GetRendererBoundsInChildren;
            }
        }

        internal static event Delegates.GetRendererBoundsInChildren_BeforeArgs _beforeGetRendererBoundsInChildren;
        internal static event Delegates.GetRendererBoundsInChildren_NormalArgs _afterGetRendererBoundsInChildren;

        private static void GetRendererBoundsInChildren(On.tk2dUIScrollableArea.orig_GetRendererBoundsInChildren orig,
            Matrix4x4 rootWorldToLocal, Vector3[] minMax, Transform t)
        {
            Delegates.Params_GetRendererBoundsInChildren @params = new()
            {
                rootWorldToLocal = rootWorldToLocal, minMax = minMax, t = t
            };
            _beforeGetRendererBoundsInChildren?.Invoke(@params);
            rootWorldToLocal = @params.rootWorldToLocal;
            minMax = @params.minMax;
            t = @params.t;
            orig(rootWorldToLocal, minMax, t);
            if (_afterGetRendererBoundsInChildren != null) _afterGetRendererBoundsInChildren.Invoke(@params);
        }

        internal static void HookLayoutReshaped()
        {
            if (!HookedList.Contains("LayoutReshaped"))
            {
                HookedList.Add("LayoutReshaped");
                On.tk2dUIScrollableArea.LayoutReshaped += LayoutReshaped;
            }
        }

        internal static event Delegates.LayoutReshaped_BeforeArgs _beforeLayoutReshaped;
        internal static event Delegates.LayoutReshaped_NormalArgs _afterLayoutReshaped;

        private static void LayoutReshaped(On.tk2dUIScrollableArea.orig_LayoutReshaped orig, tk2dUIScrollableArea self,
            Vector3 dMin, Vector3 dMax)
        {
            Delegates.Params_LayoutReshaped @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            _beforeLayoutReshaped?.Invoke(@params);
            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterLayoutReshaped != null) _afterLayoutReshaped.Invoke(@params);
        }

        internal static void HookContentLayoutChangeCallback()
        {
            if (!HookedList.Contains("ContentLayoutChangeCallback"))
            {
                HookedList.Add("ContentLayoutChangeCallback");
                On.tk2dUIScrollableArea.ContentLayoutChangeCallback += ContentLayoutChangeCallback;
            }
        }

        internal static event Delegates.ContentLayoutChangeCallback_BeforeArgs _beforeContentLayoutChangeCallback;
        internal static event Delegates.ContentLayoutChangeCallback_NormalArgs _afterContentLayoutChangeCallback;

        private static void ContentLayoutChangeCallback(On.tk2dUIScrollableArea.orig_ContentLayoutChangeCallback orig,
            tk2dUIScrollableArea self)
        {
            Delegates.Params_ContentLayoutChangeCallback @params = new()
            {
                self = self
            };
            _beforeContentLayoutChangeCallback?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterContentLayoutChangeCallback != null) _afterContentLayoutChangeCallback.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BackgroundButtonDown_BeforeArgs(Params_BackgroundButtonDown args);

        public delegate void BackgroundButtonDown_NormalArgs(Params_BackgroundButtonDown args);

        public delegate void BackgroundButtonHoverOut_BeforeArgs(Params_BackgroundButtonHoverOut args);

        public delegate void BackgroundButtonHoverOut_NormalArgs(Params_BackgroundButtonHoverOut args);

        public delegate void BackgroundButtonHoverOver_BeforeArgs(Params_BackgroundButtonHoverOver args);

        public delegate void BackgroundButtonHoverOver_NormalArgs(Params_BackgroundButtonHoverOver args);

        public delegate void BackgroundButtonRelease_BeforeArgs(Params_BackgroundButtonRelease args);

        public delegate void BackgroundButtonRelease_NormalArgs(Params_BackgroundButtonRelease args);

        public delegate void BackgroundHoverOverScrollWheelChange_BeforeArgs(
            Params_BackgroundHoverOverScrollWheelChange args);

        public delegate void BackgroundHoverOverScrollWheelChange_NormalArgs(
            Params_BackgroundHoverOverScrollWheelChange args);

        public delegate void BackgroundOverUpdate_BeforeArgs(Params_BackgroundOverUpdate args);

        public delegate void BackgroundOverUpdate_NormalArgs(Params_BackgroundOverUpdate args);

        public delegate void CalculateClickWorldPos_BeforeArgs(Params_CalculateClickWorldPos args);

        public delegate Vector3 CalculateClickWorldPos_NormalArgs(Params_CalculateClickWorldPos args);

        public delegate void ContentLayoutChangeCallback_BeforeArgs(Params_ContentLayoutChangeCallback args);

        public delegate void ContentLayoutChangeCallback_NormalArgs(Params_ContentLayoutChangeCallback args);

        public delegate void ContentLengthVisibleAreaLengthChange_BeforeArgs(
            Params_ContentLengthVisibleAreaLengthChange args);

        public delegate void ContentLengthVisibleAreaLengthChange_NormalArgs(
            Params_ContentLengthVisibleAreaLengthChange args);

        public delegate void get_BackgroundLayoutItem_BeforeArgs(Params_get_BackgroundLayoutItem args);

        public delegate tk2dUILayout get_BackgroundLayoutItem_NormalArgs(Params_get_BackgroundLayoutItem args);

        public delegate void get_ContentContainerOffset_BeforeArgs(Params_get_ContentContainerOffset args);

        public delegate Vector3 get_ContentContainerOffset_NormalArgs(Params_get_ContentContainerOffset args);

        public delegate void get_ContentLayoutContainer_BeforeArgs(Params_get_ContentLayoutContainer args);

        public delegate tk2dUILayoutContainer get_ContentLayoutContainer_NormalArgs(
            Params_get_ContentLayoutContainer args);

        public delegate void get_ContentLength_BeforeArgs(Params_get_ContentLength args);

        public delegate float get_ContentLength_NormalArgs(Params_get_ContentLength args);

        public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);

        public delegate GameObject get_SendMessageTarget_NormalArgs(Params_get_SendMessageTarget args);

        public delegate void get_Value_BeforeArgs(Params_get_Value args);

        public delegate float get_Value_NormalArgs(Params_get_Value args);

        public delegate void get_VisibleAreaLength_BeforeArgs(Params_get_VisibleAreaLength args);

        public delegate float get_VisibleAreaLength_NormalArgs(Params_get_VisibleAreaLength args);

        public delegate void GetRendererBoundsInChildren_BeforeArgs(Params_GetRendererBoundsInChildren args);

        public delegate void GetRendererBoundsInChildren_NormalArgs(Params_GetRendererBoundsInChildren args);

        public delegate void LayoutReshaped_BeforeArgs(Params_LayoutReshaped args);

        public delegate void LayoutReshaped_NormalArgs(Params_LayoutReshaped args);

        public delegate void MeasureContentLength_BeforeArgs(Params_MeasureContentLength args);

        public delegate float MeasureContentLength_NormalArgs(Params_MeasureContentLength args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void ScrollBarMove_BeforeArgs(Params_ScrollBarMove args);

        public delegate void ScrollBarMove_NormalArgs(Params_ScrollBarMove args);

        public delegate void set_BackgroundLayoutItem_BeforeArgs(Params_set_BackgroundLayoutItem args);

        public delegate void set_BackgroundLayoutItem_NormalArgs(Params_set_BackgroundLayoutItem args);

        public delegate void set_ContentContainerOffset_BeforeArgs(Params_set_ContentContainerOffset args);

        public delegate void set_ContentContainerOffset_NormalArgs(Params_set_ContentContainerOffset args);

        public delegate void set_ContentLayoutContainer_BeforeArgs(Params_set_ContentLayoutContainer args);

        public delegate void set_ContentLayoutContainer_NormalArgs(Params_set_ContentLayoutContainer args);

        public delegate void set_ContentLength_BeforeArgs(Params_set_ContentLength args);

        public delegate void set_ContentLength_NormalArgs(Params_set_ContentLength args);

        public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);

        public delegate void set_SendMessageTarget_NormalArgs(Params_set_SendMessageTarget args);

        public delegate void set_Value_BeforeArgs(Params_set_Value args);

        public delegate void set_Value_NormalArgs(Params_set_Value args);

        public delegate void set_VisibleAreaLength_BeforeArgs(Params_set_VisibleAreaLength args);

        public delegate void set_VisibleAreaLength_NormalArgs(Params_set_VisibleAreaLength args);

        public delegate void SetContentPosition_BeforeArgs(Params_SetContentPosition args);

        public delegate void SetContentPosition_NormalArgs(Params_SetContentPosition args);

        public delegate void SetScrollPercentWithoutEvent_BeforeArgs(Params_SetScrollPercentWithoutEvent args);

        public delegate void SetScrollPercentWithoutEvent_NormalArgs(Params_SetScrollPercentWithoutEvent args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void TargetOnScrollCallback_BeforeArgs(Params_TargetOnScrollCallback args);

        public delegate void TargetOnScrollCallback_NormalArgs(Params_TargetOnScrollCallback args);

        public delegate void UnpressAllUIItemChildren_BeforeArgs(Params_UnpressAllUIItemChildren args);

        public delegate void UnpressAllUIItemChildren_NormalArgs(Params_UnpressAllUIItemChildren args);

        public delegate void UpdateScrollbarActiveState_BeforeArgs(Params_UpdateScrollbarActiveState args);

        public delegate void UpdateScrollbarActiveState_NormalArgs(Params_UpdateScrollbarActiveState args);

        public delegate void UpdateSwipeScrollDestintationPosition_BeforeArgs(
            Params_UpdateSwipeScrollDestintationPosition args);

        public delegate void UpdateSwipeScrollDestintationPosition_NormalArgs(
            Params_UpdateSwipeScrollDestintationPosition args);

        public sealed class Params_get_ContentLength
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_ContentLength
        {
            public tk2dUIScrollableArea self;
            public float value;
        }

        public sealed class Params_get_VisibleAreaLength
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_VisibleAreaLength
        {
            public tk2dUIScrollableArea self;
            public float value;
        }

        public sealed class Params_get_BackgroundLayoutItem
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_BackgroundLayoutItem
        {
            public tk2dUIScrollableArea self;
            public tk2dUILayout value;
        }

        public sealed class Params_get_ContentLayoutContainer
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_ContentLayoutContainer
        {
            public tk2dUIScrollableArea self;
            public tk2dUILayoutContainer value;
        }

        public sealed class Params_get_SendMessageTarget
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_SendMessageTarget
        {
            public tk2dUIScrollableArea self;
            public GameObject value;
        }

        public sealed class Params_get_Value
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_Value
        {
            public tk2dUIScrollableArea self;
            public float value;
        }

        public sealed class Params_SetScrollPercentWithoutEvent
        {
            public float newScrollPercent;
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_MeasureContentLength
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_Start
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_BackgroundHoverOverScrollWheelChange
        {
            public float mouseWheelChange;
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_ScrollBarMove
        {
            public tk2dUIScrollbar scrollBar;
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_get_ContentContainerOffset
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_set_ContentContainerOffset
        {
            public tk2dUIScrollableArea self;
            public Vector3 value;
        }

        public sealed class Params_SetContentPosition
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_BackgroundButtonDown
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_BackgroundOverUpdate
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_UpdateSwipeScrollDestintationPosition
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_BackgroundButtonRelease
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_BackgroundButtonHoverOver
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_BackgroundButtonHoverOut
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_CalculateClickWorldPos
        {
            public tk2dUIItem btn;
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_UpdateScrollbarActiveState
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_ContentLengthVisibleAreaLengthChange
        {
            public float newContentLength;
            public float newVisibleAreaLength;
            public float prevContentLength;
            public float prevVisibleAreaLength;
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_UnpressAllUIItemChildren
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_TargetOnScrollCallback
        {
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_GetRendererBoundsInChildren
        {
            public Vector3[] minMax;
            public Matrix4x4 rootWorldToLocal;
            public Transform t;
        }

        public sealed class Params_LayoutReshaped
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dUIScrollableArea self;
        }

        public sealed class Params_ContentLayoutChangeCallback
        {
            public tk2dUIScrollableArea self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ContentLength_BeforeArgs get_ContentLength
        {
            add
            {
                HookHandler._beforeget_ContentLength += value;
                HookHandler.Hookget_ContentLength();
            }
            remove => HookHandler._beforeget_ContentLength -= value;
        }

        public static event Delegates.set_ContentLength_BeforeArgs set_ContentLength
        {
            add
            {
                HookHandler._beforeset_ContentLength += value;
                HookHandler.Hookset_ContentLength();
            }
            remove => HookHandler._beforeset_ContentLength -= value;
        }

        public static event Delegates.get_VisibleAreaLength_BeforeArgs get_VisibleAreaLength
        {
            add
            {
                HookHandler._beforeget_VisibleAreaLength += value;
                HookHandler.Hookget_VisibleAreaLength();
            }
            remove => HookHandler._beforeget_VisibleAreaLength -= value;
        }

        public static event Delegates.set_VisibleAreaLength_BeforeArgs set_VisibleAreaLength
        {
            add
            {
                HookHandler._beforeset_VisibleAreaLength += value;
                HookHandler.Hookset_VisibleAreaLength();
            }
            remove => HookHandler._beforeset_VisibleAreaLength -= value;
        }

        public static event Delegates.get_BackgroundLayoutItem_BeforeArgs get_BackgroundLayoutItem
        {
            add
            {
                HookHandler._beforeget_BackgroundLayoutItem += value;
                HookHandler.Hookget_BackgroundLayoutItem();
            }
            remove => HookHandler._beforeget_BackgroundLayoutItem -= value;
        }

        public static event Delegates.set_BackgroundLayoutItem_BeforeArgs set_BackgroundLayoutItem
        {
            add
            {
                HookHandler._beforeset_BackgroundLayoutItem += value;
                HookHandler.Hookset_BackgroundLayoutItem();
            }
            remove => HookHandler._beforeset_BackgroundLayoutItem -= value;
        }

        public static event Delegates.get_ContentLayoutContainer_BeforeArgs get_ContentLayoutContainer
        {
            add
            {
                HookHandler._beforeget_ContentLayoutContainer += value;
                HookHandler.Hookget_ContentLayoutContainer();
            }
            remove => HookHandler._beforeget_ContentLayoutContainer -= value;
        }

        public static event Delegates.set_ContentLayoutContainer_BeforeArgs set_ContentLayoutContainer
        {
            add
            {
                HookHandler._beforeset_ContentLayoutContainer += value;
                HookHandler.Hookset_ContentLayoutContainer();
            }
            remove => HookHandler._beforeset_ContentLayoutContainer -= value;
        }

        public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._beforeget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._beforeget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._beforeset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._beforeset_SendMessageTarget -= value;
        }

        public static event Delegates.get_Value_BeforeArgs get_Value
        {
            add
            {
                HookHandler._beforeget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._beforeget_Value -= value;
        }

        public static event Delegates.set_Value_BeforeArgs set_Value
        {
            add
            {
                HookHandler._beforeset_Value += value;
                HookHandler.Hookset_Value();
            }
            remove => HookHandler._beforeset_Value -= value;
        }

        public static event Delegates.SetScrollPercentWithoutEvent_BeforeArgs SetScrollPercentWithoutEvent
        {
            add
            {
                HookHandler._beforeSetScrollPercentWithoutEvent += value;
                HookHandler.HookSetScrollPercentWithoutEvent();
            }
            remove => HookHandler._beforeSetScrollPercentWithoutEvent -= value;
        }

        public static event Delegates.MeasureContentLength_BeforeArgs MeasureContentLength
        {
            add
            {
                HookHandler._beforeMeasureContentLength += value;
                HookHandler.HookMeasureContentLength();
            }
            remove => HookHandler._beforeMeasureContentLength -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.BackgroundHoverOverScrollWheelChange_BeforeArgs
            BackgroundHoverOverScrollWheelChange
            {
                add
                {
                    HookHandler._beforeBackgroundHoverOverScrollWheelChange += value;
                    HookHandler.HookBackgroundHoverOverScrollWheelChange();
                }
                remove => HookHandler._beforeBackgroundHoverOverScrollWheelChange -= value;
            }

        public static event Delegates.ScrollBarMove_BeforeArgs ScrollBarMove
        {
            add
            {
                HookHandler._beforeScrollBarMove += value;
                HookHandler.HookScrollBarMove();
            }
            remove => HookHandler._beforeScrollBarMove -= value;
        }

        public static event Delegates.get_ContentContainerOffset_BeforeArgs get_ContentContainerOffset
        {
            add
            {
                HookHandler._beforeget_ContentContainerOffset += value;
                HookHandler.Hookget_ContentContainerOffset();
            }
            remove => HookHandler._beforeget_ContentContainerOffset -= value;
        }

        public static event Delegates.set_ContentContainerOffset_BeforeArgs set_ContentContainerOffset
        {
            add
            {
                HookHandler._beforeset_ContentContainerOffset += value;
                HookHandler.Hookset_ContentContainerOffset();
            }
            remove => HookHandler._beforeset_ContentContainerOffset -= value;
        }

        public static event Delegates.SetContentPosition_BeforeArgs SetContentPosition
        {
            add
            {
                HookHandler._beforeSetContentPosition += value;
                HookHandler.HookSetContentPosition();
            }
            remove => HookHandler._beforeSetContentPosition -= value;
        }

        public static event Delegates.BackgroundButtonDown_BeforeArgs BackgroundButtonDown
        {
            add
            {
                HookHandler._beforeBackgroundButtonDown += value;
                HookHandler.HookBackgroundButtonDown();
            }
            remove => HookHandler._beforeBackgroundButtonDown -= value;
        }

        public static event Delegates.BackgroundOverUpdate_BeforeArgs BackgroundOverUpdate
        {
            add
            {
                HookHandler._beforeBackgroundOverUpdate += value;
                HookHandler.HookBackgroundOverUpdate();
            }
            remove => HookHandler._beforeBackgroundOverUpdate -= value;
        }

        public static event Delegates.UpdateSwipeScrollDestintationPosition_BeforeArgs
            UpdateSwipeScrollDestintationPosition
            {
                add
                {
                    HookHandler._beforeUpdateSwipeScrollDestintationPosition += value;
                    HookHandler.HookUpdateSwipeScrollDestintationPosition();
                }
                remove => HookHandler._beforeUpdateSwipeScrollDestintationPosition -= value;
            }

        public static event Delegates.BackgroundButtonRelease_BeforeArgs BackgroundButtonRelease
        {
            add
            {
                HookHandler._beforeBackgroundButtonRelease += value;
                HookHandler.HookBackgroundButtonRelease();
            }
            remove => HookHandler._beforeBackgroundButtonRelease -= value;
        }

        public static event Delegates.BackgroundButtonHoverOver_BeforeArgs BackgroundButtonHoverOver
        {
            add
            {
                HookHandler._beforeBackgroundButtonHoverOver += value;
                HookHandler.HookBackgroundButtonHoverOver();
            }
            remove => HookHandler._beforeBackgroundButtonHoverOver -= value;
        }

        public static event Delegates.BackgroundButtonHoverOut_BeforeArgs BackgroundButtonHoverOut
        {
            add
            {
                HookHandler._beforeBackgroundButtonHoverOut += value;
                HookHandler.HookBackgroundButtonHoverOut();
            }
            remove => HookHandler._beforeBackgroundButtonHoverOut -= value;
        }

        public static event Delegates.CalculateClickWorldPos_BeforeArgs CalculateClickWorldPos
        {
            add
            {
                HookHandler._beforeCalculateClickWorldPos += value;
                HookHandler.HookCalculateClickWorldPos();
            }
            remove => HookHandler._beforeCalculateClickWorldPos -= value;
        }

        public static event Delegates.UpdateScrollbarActiveState_BeforeArgs UpdateScrollbarActiveState
        {
            add
            {
                HookHandler._beforeUpdateScrollbarActiveState += value;
                HookHandler.HookUpdateScrollbarActiveState();
            }
            remove => HookHandler._beforeUpdateScrollbarActiveState -= value;
        }

        public static event Delegates.ContentLengthVisibleAreaLengthChange_BeforeArgs
            ContentLengthVisibleAreaLengthChange
            {
                add
                {
                    HookHandler._beforeContentLengthVisibleAreaLengthChange += value;
                    HookHandler.HookContentLengthVisibleAreaLengthChange();
                }
                remove => HookHandler._beforeContentLengthVisibleAreaLengthChange -= value;
            }

        public static event Delegates.UnpressAllUIItemChildren_BeforeArgs UnpressAllUIItemChildren
        {
            add
            {
                HookHandler._beforeUnpressAllUIItemChildren += value;
                HookHandler.HookUnpressAllUIItemChildren();
            }
            remove => HookHandler._beforeUnpressAllUIItemChildren -= value;
        }

        public static event Delegates.TargetOnScrollCallback_BeforeArgs TargetOnScrollCallback
        {
            add
            {
                HookHandler._beforeTargetOnScrollCallback += value;
                HookHandler.HookTargetOnScrollCallback();
            }
            remove => HookHandler._beforeTargetOnScrollCallback -= value;
        }

        public static event Delegates.GetRendererBoundsInChildren_BeforeArgs GetRendererBoundsInChildren
        {
            add
            {
                HookHandler._beforeGetRendererBoundsInChildren += value;
                HookHandler.HookGetRendererBoundsInChildren();
            }
            remove => HookHandler._beforeGetRendererBoundsInChildren -= value;
        }

        public static event Delegates.LayoutReshaped_BeforeArgs LayoutReshaped
        {
            add
            {
                HookHandler._beforeLayoutReshaped += value;
                HookHandler.HookLayoutReshaped();
            }
            remove => HookHandler._beforeLayoutReshaped -= value;
        }

        public static event Delegates.ContentLayoutChangeCallback_BeforeArgs ContentLayoutChangeCallback
        {
            add
            {
                HookHandler._beforeContentLayoutChangeCallback += value;
                HookHandler.HookContentLayoutChangeCallback();
            }
            remove => HookHandler._beforeContentLayoutChangeCallback -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ContentLength_NormalArgs get_ContentLength
        {
            add
            {
                HookHandler._afterget_ContentLength += value;
                HookHandler.Hookget_ContentLength();
            }
            remove => HookHandler._afterget_ContentLength -= value;
        }

        public static event Delegates.set_ContentLength_NormalArgs set_ContentLength
        {
            add
            {
                HookHandler._afterset_ContentLength += value;
                HookHandler.Hookset_ContentLength();
            }
            remove => HookHandler._afterset_ContentLength -= value;
        }

        public static event Delegates.get_VisibleAreaLength_NormalArgs get_VisibleAreaLength
        {
            add
            {
                HookHandler._afterget_VisibleAreaLength += value;
                HookHandler.Hookget_VisibleAreaLength();
            }
            remove => HookHandler._afterget_VisibleAreaLength -= value;
        }

        public static event Delegates.set_VisibleAreaLength_NormalArgs set_VisibleAreaLength
        {
            add
            {
                HookHandler._afterset_VisibleAreaLength += value;
                HookHandler.Hookset_VisibleAreaLength();
            }
            remove => HookHandler._afterset_VisibleAreaLength -= value;
        }

        public static event Delegates.get_BackgroundLayoutItem_NormalArgs get_BackgroundLayoutItem
        {
            add
            {
                HookHandler._afterget_BackgroundLayoutItem += value;
                HookHandler.Hookget_BackgroundLayoutItem();
            }
            remove => HookHandler._afterget_BackgroundLayoutItem -= value;
        }

        public static event Delegates.set_BackgroundLayoutItem_NormalArgs set_BackgroundLayoutItem
        {
            add
            {
                HookHandler._afterset_BackgroundLayoutItem += value;
                HookHandler.Hookset_BackgroundLayoutItem();
            }
            remove => HookHandler._afterset_BackgroundLayoutItem -= value;
        }

        public static event Delegates.get_ContentLayoutContainer_NormalArgs get_ContentLayoutContainer
        {
            add
            {
                HookHandler._afterget_ContentLayoutContainer += value;
                HookHandler.Hookget_ContentLayoutContainer();
            }
            remove => HookHandler._afterget_ContentLayoutContainer -= value;
        }

        public static event Delegates.set_ContentLayoutContainer_NormalArgs set_ContentLayoutContainer
        {
            add
            {
                HookHandler._afterset_ContentLayoutContainer += value;
                HookHandler.Hookset_ContentLayoutContainer();
            }
            remove => HookHandler._afterset_ContentLayoutContainer -= value;
        }

        public static event Delegates.get_SendMessageTarget_NormalArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._afterget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._afterget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_NormalArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._afterset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._afterset_SendMessageTarget -= value;
        }

        public static event Delegates.get_Value_NormalArgs get_Value
        {
            add
            {
                HookHandler._afterget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._afterget_Value -= value;
        }

        public static event Delegates.set_Value_NormalArgs set_Value
        {
            add
            {
                HookHandler._afterset_Value += value;
                HookHandler.Hookset_Value();
            }
            remove => HookHandler._afterset_Value -= value;
        }

        public static event Delegates.SetScrollPercentWithoutEvent_NormalArgs SetScrollPercentWithoutEvent
        {
            add
            {
                HookHandler._afterSetScrollPercentWithoutEvent += value;
                HookHandler.HookSetScrollPercentWithoutEvent();
            }
            remove => HookHandler._afterSetScrollPercentWithoutEvent -= value;
        }

        public static event Delegates.MeasureContentLength_NormalArgs MeasureContentLength
        {
            add
            {
                HookHandler._afterMeasureContentLength += value;
                HookHandler.HookMeasureContentLength();
            }
            remove => HookHandler._afterMeasureContentLength -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.BackgroundHoverOverScrollWheelChange_NormalArgs
            BackgroundHoverOverScrollWheelChange
            {
                add
                {
                    HookHandler._afterBackgroundHoverOverScrollWheelChange += value;
                    HookHandler.HookBackgroundHoverOverScrollWheelChange();
                }
                remove => HookHandler._afterBackgroundHoverOverScrollWheelChange -= value;
            }

        public static event Delegates.ScrollBarMove_NormalArgs ScrollBarMove
        {
            add
            {
                HookHandler._afterScrollBarMove += value;
                HookHandler.HookScrollBarMove();
            }
            remove => HookHandler._afterScrollBarMove -= value;
        }

        public static event Delegates.get_ContentContainerOffset_NormalArgs get_ContentContainerOffset
        {
            add
            {
                HookHandler._afterget_ContentContainerOffset += value;
                HookHandler.Hookget_ContentContainerOffset();
            }
            remove => HookHandler._afterget_ContentContainerOffset -= value;
        }

        public static event Delegates.set_ContentContainerOffset_NormalArgs set_ContentContainerOffset
        {
            add
            {
                HookHandler._afterset_ContentContainerOffset += value;
                HookHandler.Hookset_ContentContainerOffset();
            }
            remove => HookHandler._afterset_ContentContainerOffset -= value;
        }

        public static event Delegates.SetContentPosition_NormalArgs SetContentPosition
        {
            add
            {
                HookHandler._afterSetContentPosition += value;
                HookHandler.HookSetContentPosition();
            }
            remove => HookHandler._afterSetContentPosition -= value;
        }

        public static event Delegates.BackgroundButtonDown_NormalArgs BackgroundButtonDown
        {
            add
            {
                HookHandler._afterBackgroundButtonDown += value;
                HookHandler.HookBackgroundButtonDown();
            }
            remove => HookHandler._afterBackgroundButtonDown -= value;
        }

        public static event Delegates.BackgroundOverUpdate_NormalArgs BackgroundOverUpdate
        {
            add
            {
                HookHandler._afterBackgroundOverUpdate += value;
                HookHandler.HookBackgroundOverUpdate();
            }
            remove => HookHandler._afterBackgroundOverUpdate -= value;
        }

        public static event Delegates.UpdateSwipeScrollDestintationPosition_NormalArgs
            UpdateSwipeScrollDestintationPosition
            {
                add
                {
                    HookHandler._afterUpdateSwipeScrollDestintationPosition += value;
                    HookHandler.HookUpdateSwipeScrollDestintationPosition();
                }
                remove => HookHandler._afterUpdateSwipeScrollDestintationPosition -= value;
            }

        public static event Delegates.BackgroundButtonRelease_NormalArgs BackgroundButtonRelease
        {
            add
            {
                HookHandler._afterBackgroundButtonRelease += value;
                HookHandler.HookBackgroundButtonRelease();
            }
            remove => HookHandler._afterBackgroundButtonRelease -= value;
        }

        public static event Delegates.BackgroundButtonHoverOver_NormalArgs BackgroundButtonHoverOver
        {
            add
            {
                HookHandler._afterBackgroundButtonHoverOver += value;
                HookHandler.HookBackgroundButtonHoverOver();
            }
            remove => HookHandler._afterBackgroundButtonHoverOver -= value;
        }

        public static event Delegates.BackgroundButtonHoverOut_NormalArgs BackgroundButtonHoverOut
        {
            add
            {
                HookHandler._afterBackgroundButtonHoverOut += value;
                HookHandler.HookBackgroundButtonHoverOut();
            }
            remove => HookHandler._afterBackgroundButtonHoverOut -= value;
        }

        public static event Delegates.CalculateClickWorldPos_NormalArgs CalculateClickWorldPos
        {
            add
            {
                HookHandler._afterCalculateClickWorldPos += value;
                HookHandler.HookCalculateClickWorldPos();
            }
            remove => HookHandler._afterCalculateClickWorldPos -= value;
        }

        public static event Delegates.UpdateScrollbarActiveState_NormalArgs UpdateScrollbarActiveState
        {
            add
            {
                HookHandler._afterUpdateScrollbarActiveState += value;
                HookHandler.HookUpdateScrollbarActiveState();
            }
            remove => HookHandler._afterUpdateScrollbarActiveState -= value;
        }

        public static event Delegates.ContentLengthVisibleAreaLengthChange_NormalArgs
            ContentLengthVisibleAreaLengthChange
            {
                add
                {
                    HookHandler._afterContentLengthVisibleAreaLengthChange += value;
                    HookHandler.HookContentLengthVisibleAreaLengthChange();
                }
                remove => HookHandler._afterContentLengthVisibleAreaLengthChange -= value;
            }

        public static event Delegates.UnpressAllUIItemChildren_NormalArgs UnpressAllUIItemChildren
        {
            add
            {
                HookHandler._afterUnpressAllUIItemChildren += value;
                HookHandler.HookUnpressAllUIItemChildren();
            }
            remove => HookHandler._afterUnpressAllUIItemChildren -= value;
        }

        public static event Delegates.TargetOnScrollCallback_NormalArgs TargetOnScrollCallback
        {
            add
            {
                HookHandler._afterTargetOnScrollCallback += value;
                HookHandler.HookTargetOnScrollCallback();
            }
            remove => HookHandler._afterTargetOnScrollCallback -= value;
        }

        public static event Delegates.GetRendererBoundsInChildren_NormalArgs GetRendererBoundsInChildren
        {
            add
            {
                HookHandler._afterGetRendererBoundsInChildren += value;
                HookHandler.HookGetRendererBoundsInChildren();
            }
            remove => HookHandler._afterGetRendererBoundsInChildren -= value;
        }

        public static event Delegates.LayoutReshaped_NormalArgs LayoutReshaped
        {
            add
            {
                HookHandler._afterLayoutReshaped += value;
                HookHandler.HookLayoutReshaped();
            }
            remove => HookHandler._afterLayoutReshaped -= value;
        }

        public static event Delegates.ContentLayoutChangeCallback_NormalArgs ContentLayoutChangeCallback
        {
            add
            {
                HookHandler._afterContentLayoutChangeCallback += value;
                HookHandler.HookContentLayoutChangeCallback();
            }
            remove => HookHandler._afterContentLayoutChangeCallback -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ContentLength_NormalArgs get_ContentLength
        {
            add => HookEndpointManager.Add<Delegates.get_ContentLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLength"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ContentLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLength"), value);
        }

        public static event Delegates.set_ContentLength_NormalArgs set_ContentLength
        {
            add => HookEndpointManager.Add<Delegates.set_ContentLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLength"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ContentLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLength"), value);
        }

        public static event Delegates.get_VisibleAreaLength_NormalArgs get_VisibleAreaLength
        {
            add => HookEndpointManager.Add<Delegates.get_VisibleAreaLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_VisibleAreaLength"), value);
            remove => HookEndpointManager.Remove<Delegates.get_VisibleAreaLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_VisibleAreaLength"), value);
        }

        public static event Delegates.set_VisibleAreaLength_NormalArgs set_VisibleAreaLength
        {
            add => HookEndpointManager.Add<Delegates.set_VisibleAreaLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_VisibleAreaLength"), value);
            remove => HookEndpointManager.Remove<Delegates.set_VisibleAreaLength_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_VisibleAreaLength"), value);
        }

        public static event Delegates.get_BackgroundLayoutItem_NormalArgs get_BackgroundLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.get_BackgroundLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_BackgroundLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BackgroundLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_BackgroundLayoutItem"), value);
        }

        public static event Delegates.set_BackgroundLayoutItem_NormalArgs set_BackgroundLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.set_BackgroundLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_BackgroundLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BackgroundLayoutItem_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_BackgroundLayoutItem"), value);
        }

        public static event Delegates.get_ContentLayoutContainer_NormalArgs get_ContentLayoutContainer
        {
            add => HookEndpointManager.Add<Delegates.get_ContentLayoutContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLayoutContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ContentLayoutContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentLayoutContainer"), value);
        }

        public static event Delegates.set_ContentLayoutContainer_NormalArgs set_ContentLayoutContainer
        {
            add => HookEndpointManager.Add<Delegates.set_ContentLayoutContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLayoutContainer"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ContentLayoutContainer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentLayoutContainer"), value);
        }

        public static event Delegates.get_SendMessageTarget_NormalArgs get_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_SendMessageTarget"), value);
        }

        public static event Delegates.set_SendMessageTarget_NormalArgs set_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_SendMessageTarget"), value);
        }

        public static event Delegates.get_Value_NormalArgs get_Value
        {
            add => HookEndpointManager.Add<Delegates.get_Value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_Value"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_Value"), value);
        }

        public static event Delegates.set_Value_NormalArgs set_Value
        {
            add => HookEndpointManager.Add<Delegates.set_Value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_Value"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Value_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_Value"), value);
        }

        public static event On.tk2dUIScrollableArea.hook_SetScrollPercentWithoutEvent SetScrollPercentWithoutEvent
        {
            add => On.tk2dUIScrollableArea.SetScrollPercentWithoutEvent += value;
            remove => On.tk2dUIScrollableArea.SetScrollPercentWithoutEvent -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_MeasureContentLength MeasureContentLength
        {
            add => On.tk2dUIScrollableArea.MeasureContentLength += value;
            remove => On.tk2dUIScrollableArea.MeasureContentLength -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_OnEnable OnEnable
        {
            add => On.tk2dUIScrollableArea.OnEnable += value;
            remove => On.tk2dUIScrollableArea.OnEnable -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_OnDisable OnDisable
        {
            add => On.tk2dUIScrollableArea.OnDisable += value;
            remove => On.tk2dUIScrollableArea.OnDisable -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_Start Start
        {
            add => On.tk2dUIScrollableArea.Start += value;
            remove => On.tk2dUIScrollableArea.Start -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_BackgroundHoverOverScrollWheelChange
            BackgroundHoverOverScrollWheelChange
            {
                add => On.tk2dUIScrollableArea.BackgroundHoverOverScrollWheelChange += value;
                remove => On.tk2dUIScrollableArea.BackgroundHoverOverScrollWheelChange -= value;
            }

        public static event On.tk2dUIScrollableArea.hook_ScrollBarMove ScrollBarMove
        {
            add => On.tk2dUIScrollableArea.ScrollBarMove += value;
            remove => On.tk2dUIScrollableArea.ScrollBarMove -= value;
        }

        public static event Delegates.get_ContentContainerOffset_NormalArgs get_ContentContainerOffset
        {
            add => HookEndpointManager.Add<Delegates.get_ContentContainerOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentContainerOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ContentContainerOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "get_ContentContainerOffset"), value);
        }

        public static event Delegates.set_ContentContainerOffset_NormalArgs set_ContentContainerOffset
        {
            add => HookEndpointManager.Add<Delegates.set_ContentContainerOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentContainerOffset"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ContentContainerOffset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollableArea), "set_ContentContainerOffset"), value);
        }

        public static event On.tk2dUIScrollableArea.hook_SetContentPosition SetContentPosition
        {
            add => On.tk2dUIScrollableArea.SetContentPosition += value;
            remove => On.tk2dUIScrollableArea.SetContentPosition -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_BackgroundButtonDown BackgroundButtonDown
        {
            add => On.tk2dUIScrollableArea.BackgroundButtonDown += value;
            remove => On.tk2dUIScrollableArea.BackgroundButtonDown -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_BackgroundOverUpdate BackgroundOverUpdate
        {
            add => On.tk2dUIScrollableArea.BackgroundOverUpdate += value;
            remove => On.tk2dUIScrollableArea.BackgroundOverUpdate -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_UpdateSwipeScrollDestintationPosition
            UpdateSwipeScrollDestintationPosition
            {
                add => On.tk2dUIScrollableArea.UpdateSwipeScrollDestintationPosition += value;
                remove => On.tk2dUIScrollableArea.UpdateSwipeScrollDestintationPosition -= value;
            }

        public static event On.tk2dUIScrollableArea.hook_BackgroundButtonRelease BackgroundButtonRelease
        {
            add => On.tk2dUIScrollableArea.BackgroundButtonRelease += value;
            remove => On.tk2dUIScrollableArea.BackgroundButtonRelease -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_BackgroundButtonHoverOver BackgroundButtonHoverOver
        {
            add => On.tk2dUIScrollableArea.BackgroundButtonHoverOver += value;
            remove => On.tk2dUIScrollableArea.BackgroundButtonHoverOver -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_BackgroundButtonHoverOut BackgroundButtonHoverOut
        {
            add => On.tk2dUIScrollableArea.BackgroundButtonHoverOut += value;
            remove => On.tk2dUIScrollableArea.BackgroundButtonHoverOut -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_CalculateClickWorldPos CalculateClickWorldPos
        {
            add => On.tk2dUIScrollableArea.CalculateClickWorldPos += value;
            remove => On.tk2dUIScrollableArea.CalculateClickWorldPos -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_UpdateScrollbarActiveState UpdateScrollbarActiveState
        {
            add => On.tk2dUIScrollableArea.UpdateScrollbarActiveState += value;
            remove => On.tk2dUIScrollableArea.UpdateScrollbarActiveState -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_ContentLengthVisibleAreaLengthChange
            ContentLengthVisibleAreaLengthChange
            {
                add => On.tk2dUIScrollableArea.ContentLengthVisibleAreaLengthChange += value;
                remove => On.tk2dUIScrollableArea.ContentLengthVisibleAreaLengthChange -= value;
            }

        public static event On.tk2dUIScrollableArea.hook_UnpressAllUIItemChildren UnpressAllUIItemChildren
        {
            add => On.tk2dUIScrollableArea.UnpressAllUIItemChildren += value;
            remove => On.tk2dUIScrollableArea.UnpressAllUIItemChildren -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_TargetOnScrollCallback TargetOnScrollCallback
        {
            add => On.tk2dUIScrollableArea.TargetOnScrollCallback += value;
            remove => On.tk2dUIScrollableArea.TargetOnScrollCallback -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_GetRendererBoundsInChildren GetRendererBoundsInChildren
        {
            add => On.tk2dUIScrollableArea.GetRendererBoundsInChildren += value;
            remove => On.tk2dUIScrollableArea.GetRendererBoundsInChildren -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_LayoutReshaped LayoutReshaped
        {
            add => On.tk2dUIScrollableArea.LayoutReshaped += value;
            remove => On.tk2dUIScrollableArea.LayoutReshaped -= value;
        }

        public static event On.tk2dUIScrollableArea.hook_ContentLayoutChangeCallback ContentLayoutChangeCallback
        {
            add => On.tk2dUIScrollableArea.ContentLayoutChangeCallback += value;
            remove => On.tk2dUIScrollableArea.ContentLayoutChangeCallback -= value;
        }
    }
}