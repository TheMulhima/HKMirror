using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for CutsceneHelper class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCutsceneHelper
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.CutsceneHelper.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;

        private static System.Collections.IEnumerator Start(On.CutsceneHelper.orig_Start orig, CutsceneHelper self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookLoadNextScene()
        {
            if (!HookedList.Contains("LoadNextScene"))
            {
                HookedList.Add("LoadNextScene");
                On.CutsceneHelper.LoadNextScene += LoadNextScene;
            }
        }

        internal static event Delegates.LoadNextScene_BeforeArgs _beforeLoadNextScene;
        internal static event Delegates.LoadNextScene_AfterArgs _afterLoadNextScene;

        private static void LoadNextScene(On.CutsceneHelper.orig_LoadNextScene orig, CutsceneHelper self)
        {
            Delegates.Params_LoadNextScene @params = new()
            {
                self = self
            };
            if (_beforeLoadNextScene != null)
            {
                foreach (Delegates.LoadNextScene_BeforeArgs toInvoke in _beforeLoadNextScene.GetInvocationList())
                {
                    try
                    {
                        _beforeLoadNextScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterLoadNextScene != null)
            {
                foreach (Delegates.LoadNextScene_AfterArgs toInvoke in _afterLoadNextScene.GetInvocationList())
                {
                    try
                    {
                        _afterLoadNextScene.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSkipCutscene()
        {
            if (!HookedList.Contains("SkipCutscene"))
            {
                HookedList.Add("SkipCutscene");
                On.CutsceneHelper.SkipCutscene += SkipCutscene;
            }
        }

        internal static event Delegates.SkipCutscene_BeforeArgs _beforeSkipCutscene;

        private static System.Collections.IEnumerator SkipCutscene(On.CutsceneHelper.orig_SkipCutscene orig,
            CutsceneHelper self)
        {
            Delegates.Params_SkipCutscene @params = new()
            {
                self = self
            };
            if (_beforeSkipCutscene != null)
            {
                foreach (Delegates.SkipCutscene_BeforeArgs toInvoke in _beforeSkipCutscene.GetInvocationList())
                {
                    try
                    {
                        _beforeSkipCutscene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            return orig(self);
        }

        internal static void HookUnlockSkip()
        {
            if (!HookedList.Contains("UnlockSkip"))
            {
                HookedList.Add("UnlockSkip");
                On.CutsceneHelper.UnlockSkip += UnlockSkip;
            }
        }

        internal static event Delegates.UnlockSkip_BeforeArgs _beforeUnlockSkip;
        internal static event Delegates.UnlockSkip_AfterArgs _afterUnlockSkip;

        private static void UnlockSkip(On.CutsceneHelper.orig_UnlockSkip orig, CutsceneHelper self)
        {
            Delegates.Params_UnlockSkip @params = new()
            {
                self = self
            };
            if (_beforeUnlockSkip != null)
            {
                foreach (Delegates.UnlockSkip_BeforeArgs toInvoke in _beforeUnlockSkip.GetInvocationList())
                {
                    try
                    {
                        _beforeUnlockSkip?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUnlockSkip != null)
            {
                foreach (Delegates.UnlockSkip_AfterArgs toInvoke in _afterUnlockSkip.GetInvocationList())
                {
                    try
                    {
                        _afterUnlockSkip.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoSceneLoad()
        {
            if (!HookedList.Contains("DoSceneLoad"))
            {
                HookedList.Add("DoSceneLoad");
                On.CutsceneHelper.DoSceneLoad += DoSceneLoad;
            }
        }

        internal static event Delegates.DoSceneLoad_BeforeArgs _beforeDoSceneLoad;
        internal static event Delegates.DoSceneLoad_AfterArgs _afterDoSceneLoad;

        private static void DoSceneLoad(On.CutsceneHelper.orig_DoSceneLoad orig, CutsceneHelper self)
        {
            Delegates.Params_DoSceneLoad @params = new()
            {
                self = self
            };
            if (_beforeDoSceneLoad != null)
            {
                foreach (Delegates.DoSceneLoad_BeforeArgs toInvoke in _beforeDoSceneLoad.GetInvocationList())
                {
                    try
                    {
                        _beforeDoSceneLoad?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoSceneLoad != null)
            {
                foreach (Delegates.DoSceneLoad_AfterArgs toInvoke in _afterDoSceneLoad.GetInvocationList())
                {
                    try
                    {
                        _afterDoSceneLoad.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public CutsceneHelper self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate System.Collections.IEnumerator Start_AfterArgs(Params_Start args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator Start_WithArgs(
            Func<CutsceneHelper, System.Collections.IEnumerator> orig, CutsceneHelper self);

        public sealed class Params_LoadNextScene
        {
            public CutsceneHelper self;
        }

        public delegate void LoadNextScene_BeforeArgs(Params_LoadNextScene args);

        public delegate void LoadNextScene_AfterArgs(Params_LoadNextScene args);

        public delegate void LoadNextScene_WithArgs(Action<CutsceneHelper> orig, CutsceneHelper self);

        public sealed class Params_SkipCutscene
        {
            public CutsceneHelper self;
        }

        public delegate void SkipCutscene_BeforeArgs(Params_SkipCutscene args);

        public delegate System.Collections.IEnumerator SkipCutscene_AfterArgs(Params_SkipCutscene args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator SkipCutscene_WithArgs(
            Func<CutsceneHelper, System.Collections.IEnumerator> orig, CutsceneHelper self);

        public sealed class Params_UnlockSkip
        {
            public CutsceneHelper self;
        }

        public delegate void UnlockSkip_BeforeArgs(Params_UnlockSkip args);

        public delegate void UnlockSkip_AfterArgs(Params_UnlockSkip args);

        public delegate void UnlockSkip_WithArgs(Action<CutsceneHelper> orig, CutsceneHelper self);

        public sealed class Params_DoSceneLoad
        {
            public CutsceneHelper self;
        }

        public delegate void DoSceneLoad_BeforeArgs(Params_DoSceneLoad args);

        public delegate void DoSceneLoad_AfterArgs(Params_DoSceneLoad args);

        public delegate void DoSceneLoad_WithArgs(Action<CutsceneHelper> orig, CutsceneHelper self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.LoadNextScene_BeforeArgs LoadNextScene
        {
            add
            {
                HookHandler._beforeLoadNextScene += value;
                HookHandler.HookLoadNextScene();
            }
            remove => HookHandler._beforeLoadNextScene -= value;
        }

        public static event Delegates.SkipCutscene_BeforeArgs SkipCutscene
        {
            add
            {
                HookHandler._beforeSkipCutscene += value;
                HookHandler.HookSkipCutscene();
            }
            remove => HookHandler._beforeSkipCutscene -= value;
        }

        public static event Delegates.UnlockSkip_BeforeArgs UnlockSkip
        {
            add
            {
                HookHandler._beforeUnlockSkip += value;
                HookHandler.HookUnlockSkip();
            }
            remove => HookHandler._beforeUnlockSkip -= value;
        }

        public static event Delegates.DoSceneLoad_BeforeArgs DoSceneLoad
        {
            add
            {
                HookHandler._beforeDoSceneLoad += value;
                HookHandler.HookDoSceneLoad();
            }
            remove => HookHandler._beforeDoSceneLoad -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.LoadNextScene_AfterArgs LoadNextScene
        {
            add
            {
                HookHandler._afterLoadNextScene += value;
                HookHandler.HookLoadNextScene();
            }
            remove => HookHandler._afterLoadNextScene -= value;
        }

        public static event Delegates.UnlockSkip_AfterArgs UnlockSkip
        {
            add
            {
                HookHandler._afterUnlockSkip += value;
                HookHandler.HookUnlockSkip();
            }
            remove => HookHandler._afterUnlockSkip -= value;
        }

        public static event Delegates.DoSceneLoad_AfterArgs DoSceneLoad
        {
            add
            {
                HookHandler._afterDoSceneLoad += value;
                HookHandler.HookDoSceneLoad();
            }
            remove => HookHandler._afterDoSceneLoad -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CutsceneHelper.hook_Start Start
        {
            add => On.CutsceneHelper.Start += value;
            remove => On.CutsceneHelper.Start -= value;
        }

        public static event On.CutsceneHelper.hook_LoadNextScene LoadNextScene
        {
            add => On.CutsceneHelper.LoadNextScene += value;
            remove => On.CutsceneHelper.LoadNextScene -= value;
        }

        public static event On.CutsceneHelper.hook_SkipCutscene SkipCutscene
        {
            add => On.CutsceneHelper.SkipCutscene += value;
            remove => On.CutsceneHelper.SkipCutscene -= value;
        }

        public static event On.CutsceneHelper.hook_UnlockSkip UnlockSkip
        {
            add => On.CutsceneHelper.UnlockSkip += value;
            remove => On.CutsceneHelper.UnlockSkip -= value;
        }

        public static event On.CutsceneHelper.hook_DoSceneLoad DoSceneLoad
        {
            add => On.CutsceneHelper.DoSceneLoad += value;
            remove => On.CutsceneHelper.DoSceneLoad -= value;
        }
    }
}