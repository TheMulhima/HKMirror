using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for BindingListenOptions class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBindingListenOptions
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookCallOnBindingFound()
        {
            if (!HookedList.Contains("CallOnBindingFound"))
            {
                HookedList.Add("CallOnBindingFound");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingFound", true),
                    CallOnBindingFound);
            }
        }

        internal static event Delegates.CallOnBindingFound_BeforeArgs _beforeCallOnBindingFound;
        internal static event Delegates.CallOnBindingFound_AfterArgs _afterCallOnBindingFound;

        private static bool CallOnBindingFound(
            Func<InControl.BindingListenOptions, InControl.PlayerAction, InControl.BindingSource, bool> orig,
            InControl.BindingListenOptions self, InControl.PlayerAction playerAction,
            InControl.BindingSource bindingSource)
        {
            Delegates.Params_CallOnBindingFound @params = new()
            {
                self = self, playerAction = playerAction, bindingSource = bindingSource
            };
            if (_beforeCallOnBindingFound != null)
            {
                foreach (Delegates.CallOnBindingFound_BeforeArgs toInvoke in
                         _beforeCallOnBindingFound.GetInvocationList())
                {
                    try
                    {
                        _beforeCallOnBindingFound?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            playerAction = @params.playerAction;
            bindingSource = @params.bindingSource;
            var retVal = orig(self, playerAction, bindingSource);
            if (_afterCallOnBindingFound != null)
            {
                foreach (Delegates.CallOnBindingFound_AfterArgs toInvoke in
                         _afterCallOnBindingFound.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterCallOnBindingFound.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookCallOnBindingAdded()
        {
            if (!HookedList.Contains("CallOnBindingAdded"))
            {
                HookedList.Add("CallOnBindingAdded");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingAdded", true),
                    CallOnBindingAdded);
            }
        }

        internal static event Delegates.CallOnBindingAdded_BeforeArgs _beforeCallOnBindingAdded;
        internal static event Delegates.CallOnBindingAdded_AfterArgs _afterCallOnBindingAdded;

        private static void CallOnBindingAdded(
            Action<InControl.BindingListenOptions, InControl.PlayerAction, InControl.BindingSource> orig,
            InControl.BindingListenOptions self, InControl.PlayerAction playerAction,
            InControl.BindingSource bindingSource)
        {
            Delegates.Params_CallOnBindingAdded @params = new()
            {
                self = self, playerAction = playerAction, bindingSource = bindingSource
            };
            if (_beforeCallOnBindingAdded != null)
            {
                foreach (Delegates.CallOnBindingAdded_BeforeArgs toInvoke in
                         _beforeCallOnBindingAdded.GetInvocationList())
                {
                    try
                    {
                        _beforeCallOnBindingAdded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            playerAction = @params.playerAction;
            bindingSource = @params.bindingSource;
            orig(self, playerAction, bindingSource);
            if (_afterCallOnBindingAdded != null)
            {
                foreach (Delegates.CallOnBindingAdded_AfterArgs toInvoke in
                         _afterCallOnBindingAdded.GetInvocationList())
                {
                    try
                    {
                        _afterCallOnBindingAdded.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCallOnBindingRejected()
        {
            if (!HookedList.Contains("CallOnBindingRejected"))
            {
                HookedList.Add("CallOnBindingRejected");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingRejected",
                        true), CallOnBindingRejected);
            }
        }

        internal static event Delegates.CallOnBindingRejected_BeforeArgs _beforeCallOnBindingRejected;
        internal static event Delegates.CallOnBindingRejected_AfterArgs _afterCallOnBindingRejected;

        private static void CallOnBindingRejected(
            Action<InControl.BindingListenOptions, InControl.PlayerAction, InControl.BindingSource,
                InControl.BindingSourceRejectionType> orig, InControl.BindingListenOptions self,
            InControl.PlayerAction playerAction, InControl.BindingSource bindingSource,
            InControl.BindingSourceRejectionType bindingSourceRejectionType)
        {
            Delegates.Params_CallOnBindingRejected @params = new()
            {
                self = self, playerAction = playerAction, bindingSource = bindingSource,
                bindingSourceRejectionType = bindingSourceRejectionType
            };
            if (_beforeCallOnBindingRejected != null)
            {
                foreach (Delegates.CallOnBindingRejected_BeforeArgs toInvoke in _beforeCallOnBindingRejected
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeCallOnBindingRejected?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            playerAction = @params.playerAction;
            bindingSource = @params.bindingSource;
            bindingSourceRejectionType = @params.bindingSourceRejectionType;
            orig(self, playerAction, bindingSource, bindingSourceRejectionType);
            if (_afterCallOnBindingRejected != null)
            {
                foreach (Delegates.CallOnBindingRejected_AfterArgs toInvoke in _afterCallOnBindingRejected
                             .GetInvocationList())
                {
                    try
                    {
                        _afterCallOnBindingRejected.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookCallOnBindingEnded()
        {
            if (!HookedList.Contains("CallOnBindingEnded"))
            {
                HookedList.Add("CallOnBindingEnded");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingEnded", true),
                    CallOnBindingEnded);
            }
        }

        internal static event Delegates.CallOnBindingEnded_BeforeArgs _beforeCallOnBindingEnded;
        internal static event Delegates.CallOnBindingEnded_AfterArgs _afterCallOnBindingEnded;

        private static void CallOnBindingEnded(Action<InControl.BindingListenOptions, InControl.PlayerAction> orig,
            InControl.BindingListenOptions self, InControl.PlayerAction playerAction)
        {
            Delegates.Params_CallOnBindingEnded @params = new()
            {
                self = self, playerAction = playerAction
            };
            if (_beforeCallOnBindingEnded != null)
            {
                foreach (Delegates.CallOnBindingEnded_BeforeArgs toInvoke in
                         _beforeCallOnBindingEnded.GetInvocationList())
                {
                    try
                    {
                        _beforeCallOnBindingEnded?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            playerAction = @params.playerAction;
            orig(self, playerAction);
            if (_afterCallOnBindingEnded != null)
            {
                foreach (Delegates.CallOnBindingEnded_AfterArgs toInvoke in
                         _afterCallOnBindingEnded.GetInvocationList())
                {
                    try
                    {
                        _afterCallOnBindingEnded.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_CallOnBindingFound
        {
            public InControl.BindingListenOptions self;
            public InControl.PlayerAction playerAction;
            public InControl.BindingSource bindingSource;
        }

        public delegate void CallOnBindingFound_BeforeArgs(Params_CallOnBindingFound args);

        public delegate bool CallOnBindingFound_AfterArgs(Params_CallOnBindingFound args, bool ret);

        public delegate bool CallOnBindingFound_WithArgs(
            Func<InControl.BindingListenOptions, InControl.PlayerAction, InControl.BindingSource, bool> orig,
            InControl.BindingListenOptions self, InControl.PlayerAction playerAction,
            InControl.BindingSource bindingSource);

        public sealed class Params_CallOnBindingAdded
        {
            public InControl.BindingListenOptions self;
            public InControl.PlayerAction playerAction;
            public InControl.BindingSource bindingSource;
        }

        public delegate void CallOnBindingAdded_BeforeArgs(Params_CallOnBindingAdded args);

        public delegate void CallOnBindingAdded_AfterArgs(Params_CallOnBindingAdded args);

        public delegate void CallOnBindingAdded_WithArgs(
            Action<InControl.BindingListenOptions, InControl.PlayerAction, InControl.BindingSource> orig,
            InControl.BindingListenOptions self, InControl.PlayerAction playerAction,
            InControl.BindingSource bindingSource);

        public sealed class Params_CallOnBindingRejected
        {
            public InControl.BindingListenOptions self;
            public InControl.PlayerAction playerAction;
            public InControl.BindingSource bindingSource;
            public InControl.BindingSourceRejectionType bindingSourceRejectionType;
        }

        public delegate void CallOnBindingRejected_BeforeArgs(Params_CallOnBindingRejected args);

        public delegate void CallOnBindingRejected_AfterArgs(Params_CallOnBindingRejected args);

        public delegate void CallOnBindingRejected_WithArgs(
            Action<InControl.BindingListenOptions, InControl.PlayerAction, InControl.BindingSource,
                InControl.BindingSourceRejectionType> orig, InControl.BindingListenOptions self,
            InControl.PlayerAction playerAction, InControl.BindingSource bindingSource,
            InControl.BindingSourceRejectionType bindingSourceRejectionType);

        public sealed class Params_CallOnBindingEnded
        {
            public InControl.BindingListenOptions self;
            public InControl.PlayerAction playerAction;
        }

        public delegate void CallOnBindingEnded_BeforeArgs(Params_CallOnBindingEnded args);

        public delegate void CallOnBindingEnded_AfterArgs(Params_CallOnBindingEnded args);

        public delegate void CallOnBindingEnded_WithArgs(
            Action<InControl.BindingListenOptions, InControl.PlayerAction> orig, InControl.BindingListenOptions self,
            InControl.PlayerAction playerAction);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CallOnBindingFound_BeforeArgs CallOnBindingFound
        {
            add
            {
                HookHandler._beforeCallOnBindingFound += value;
                HookHandler.HookCallOnBindingFound();
            }
            remove => HookHandler._beforeCallOnBindingFound -= value;
        }

        public static event Delegates.CallOnBindingAdded_BeforeArgs CallOnBindingAdded
        {
            add
            {
                HookHandler._beforeCallOnBindingAdded += value;
                HookHandler.HookCallOnBindingAdded();
            }
            remove => HookHandler._beforeCallOnBindingAdded -= value;
        }

        public static event Delegates.CallOnBindingRejected_BeforeArgs CallOnBindingRejected
        {
            add
            {
                HookHandler._beforeCallOnBindingRejected += value;
                HookHandler.HookCallOnBindingRejected();
            }
            remove => HookHandler._beforeCallOnBindingRejected -= value;
        }

        public static event Delegates.CallOnBindingEnded_BeforeArgs CallOnBindingEnded
        {
            add
            {
                HookHandler._beforeCallOnBindingEnded += value;
                HookHandler.HookCallOnBindingEnded();
            }
            remove => HookHandler._beforeCallOnBindingEnded -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CallOnBindingFound_AfterArgs CallOnBindingFound
        {
            add
            {
                HookHandler._afterCallOnBindingFound += value;
                HookHandler.HookCallOnBindingFound();
            }
            remove => HookHandler._afterCallOnBindingFound -= value;
        }

        public static event Delegates.CallOnBindingAdded_AfterArgs CallOnBindingAdded
        {
            add
            {
                HookHandler._afterCallOnBindingAdded += value;
                HookHandler.HookCallOnBindingAdded();
            }
            remove => HookHandler._afterCallOnBindingAdded -= value;
        }

        public static event Delegates.CallOnBindingRejected_AfterArgs CallOnBindingRejected
        {
            add
            {
                HookHandler._afterCallOnBindingRejected += value;
                HookHandler.HookCallOnBindingRejected();
            }
            remove => HookHandler._afterCallOnBindingRejected -= value;
        }

        public static event Delegates.CallOnBindingEnded_AfterArgs CallOnBindingEnded
        {
            add
            {
                HookHandler._afterCallOnBindingEnded += value;
                HookHandler.HookCallOnBindingEnded();
            }
            remove => HookHandler._afterCallOnBindingEnded -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CallOnBindingFound_WithArgs CallOnBindingFound
        {
            add => HookEndpointManager.Add<Delegates.CallOnBindingFound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingFound", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.CallOnBindingFound_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingFound", true),
                value);
        }

        public static event Delegates.CallOnBindingAdded_WithArgs CallOnBindingAdded
        {
            add => HookEndpointManager.Add<Delegates.CallOnBindingAdded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingAdded", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.CallOnBindingAdded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingAdded", true),
                value);
        }

        public static event Delegates.CallOnBindingRejected_WithArgs CallOnBindingRejected
        {
            add => HookEndpointManager.Add<Delegates.CallOnBindingRejected_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingRejected", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.CallOnBindingRejected_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingRejected", true),
                value);
        }

        public static event Delegates.CallOnBindingEnded_WithArgs CallOnBindingEnded
        {
            add => HookEndpointManager.Add<Delegates.CallOnBindingEnded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingEnded", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.CallOnBindingEnded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.BindingListenOptions), "CallOnBindingEnded", true),
                value);
        }
    }
}