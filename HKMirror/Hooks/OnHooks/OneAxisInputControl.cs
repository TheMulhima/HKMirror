using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for OneAxisInputControl class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOneAxisInputControl
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_UpdateTick()
        {
            if (!HookedList.Contains("get_UpdateTick"))
            {
                HookedList.Add("get_UpdateTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_UpdateTick"), get_UpdateTick);
            }
        }

        internal static event Delegates.get_UpdateTick_BeforeArgs _beforeget_UpdateTick;
        internal static event Delegates.get_UpdateTick_AfterArgs _afterget_UpdateTick;

        private static ulong get_UpdateTick(Func<OneAxisInputControl, ulong> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_UpdateTick @params = new()
            {
                self = self
            };
            if (_beforeget_UpdateTick != null)
                foreach (Delegates.get_UpdateTick_BeforeArgs toInvoke in _beforeget_UpdateTick.GetInvocationList())
                    try
                    {
                        _beforeget_UpdateTick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpdateTick != null)
                foreach (Delegates.get_UpdateTick_AfterArgs toInvoke in _afterget_UpdateTick.GetInvocationList())
                    try
                    {
                        retVal = _afterget_UpdateTick.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_UpdateTick()
        {
            if (!HookedList.Contains("set_UpdateTick"))
            {
                HookedList.Add("set_UpdateTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_UpdateTick"), set_UpdateTick);
            }
        }

        internal static event Delegates.set_UpdateTick_BeforeArgs _beforeset_UpdateTick;
        internal static event Delegates.set_UpdateTick_AfterArgs _afterset_UpdateTick;

        private static void set_UpdateTick(Action<OneAxisInputControl, ulong> orig, OneAxisInputControl self,
            ulong value)
        {
            Delegates.Params_set_UpdateTick @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_UpdateTick != null)
                foreach (Delegates.set_UpdateTick_BeforeArgs toInvoke in _beforeset_UpdateTick.GetInvocationList())
                    try
                    {
                        _beforeset_UpdateTick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpdateTick != null)
                foreach (Delegates.set_UpdateTick_AfterArgs toInvoke in _afterset_UpdateTick.GetInvocationList())
                    try
                    {
                        _afterset_UpdateTick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPrepareForUpdate()
        {
            if (!HookedList.Contains("PrepareForUpdate"))
            {
                HookedList.Add("PrepareForUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "PrepareForUpdate"),
                    PrepareForUpdate);
            }
        }

        internal static event Delegates.PrepareForUpdate_BeforeArgs _beforePrepareForUpdate;
        internal static event Delegates.PrepareForUpdate_AfterArgs _afterPrepareForUpdate;

        private static void PrepareForUpdate(Action<OneAxisInputControl, ulong> orig, OneAxisInputControl self,
            ulong updateTick)
        {
            Delegates.Params_PrepareForUpdate @params = new()
            {
                self = self, updateTick = updateTick
            };
            if (_beforePrepareForUpdate != null)
                foreach (Delegates.PrepareForUpdate_BeforeArgs toInvoke in _beforePrepareForUpdate.GetInvocationList())
                    try
                    {
                        _beforePrepareForUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            updateTick = @params.updateTick;
            orig(self, updateTick);
            if (_afterPrepareForUpdate != null)
                foreach (Delegates.PrepareForUpdate_AfterArgs toInvoke in _afterPrepareForUpdate.GetInvocationList())
                    try
                    {
                        _afterPrepareForUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateWithState()
        {
            if (!HookedList.Contains("UpdateWithState"))
            {
                HookedList.Add("UpdateWithState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithState"),
                    UpdateWithState);
            }
        }

        internal static event Delegates.UpdateWithState_BeforeArgs _beforeUpdateWithState;
        internal static event Delegates.UpdateWithState_AfterArgs _afterUpdateWithState;

        private static bool UpdateWithState(Func<OneAxisInputControl, bool, ulong, float, bool> orig,
            OneAxisInputControl self, bool state, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateWithState @params = new()
            {
                self = self, state = state, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeUpdateWithState != null)
                foreach (Delegates.UpdateWithState_BeforeArgs toInvoke in _beforeUpdateWithState.GetInvocationList())
                    try
                    {
                        _beforeUpdateWithState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            state = @params.state;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            var retVal = orig(self, state, updateTick, deltaTime);
            if (_afterUpdateWithState != null)
                foreach (Delegates.UpdateWithState_AfterArgs toInvoke in _afterUpdateWithState.GetInvocationList())
                    try
                    {
                        retVal = _afterUpdateWithState.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateWithValue()
        {
            if (!HookedList.Contains("UpdateWithValue"))
            {
                HookedList.Add("UpdateWithValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithValue"),
                    UpdateWithValue);
            }
        }

        internal static event Delegates.UpdateWithValue_BeforeArgs _beforeUpdateWithValue;
        internal static event Delegates.UpdateWithValue_AfterArgs _afterUpdateWithValue;

        private static bool UpdateWithValue(Func<OneAxisInputControl, float, ulong, float, bool> orig,
            OneAxisInputControl self, float value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateWithValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeUpdateWithValue != null)
                foreach (Delegates.UpdateWithValue_BeforeArgs toInvoke in _beforeUpdateWithValue.GetInvocationList())
                    try
                    {
                        _beforeUpdateWithValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            var retVal = orig(self, value, updateTick, deltaTime);
            if (_afterUpdateWithValue != null)
                foreach (Delegates.UpdateWithValue_AfterArgs toInvoke in _afterUpdateWithValue.GetInvocationList())
                    try
                    {
                        retVal = _afterUpdateWithValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookUpdateWithRawValue()
        {
            if (!HookedList.Contains("UpdateWithRawValue"))
            {
                HookedList.Add("UpdateWithRawValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithRawValue"),
                    UpdateWithRawValue);
            }
        }

        internal static event Delegates.UpdateWithRawValue_BeforeArgs _beforeUpdateWithRawValue;
        internal static event Delegates.UpdateWithRawValue_AfterArgs _afterUpdateWithRawValue;

        private static bool UpdateWithRawValue(Func<OneAxisInputControl, float, ulong, float, bool> orig,
            OneAxisInputControl self, float value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateWithRawValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeUpdateWithRawValue != null)
                foreach (Delegates.UpdateWithRawValue_BeforeArgs toInvoke in
                         _beforeUpdateWithRawValue.GetInvocationList())
                    try
                    {
                        _beforeUpdateWithRawValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            var retVal = orig(self, value, updateTick, deltaTime);
            if (_afterUpdateWithRawValue != null)
                foreach (Delegates.UpdateWithRawValue_AfterArgs toInvoke in
                         _afterUpdateWithRawValue.GetInvocationList())
                    try
                    {
                        retVal = _afterUpdateWithRawValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetValue()
        {
            if (!HookedList.Contains("SetValue"))
            {
                HookedList.Add("SetValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "SetValue"), SetValue);
            }
        }

        internal static event Delegates.SetValue_BeforeArgs _beforeSetValue;
        internal static event Delegates.SetValue_AfterArgs _afterSetValue;

        private static void SetValue(Action<OneAxisInputControl, float, ulong> orig, OneAxisInputControl self,
            float value, ulong updateTick)
        {
            Delegates.Params_SetValue @params = new()
            {
                self = self, value = value, updateTick = updateTick
            };
            if (_beforeSetValue != null)
                foreach (Delegates.SetValue_BeforeArgs toInvoke in _beforeSetValue.GetInvocationList())
                    try
                    {
                        _beforeSetValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            orig(self, value, updateTick);
            if (_afterSetValue != null)
                foreach (Delegates.SetValue_AfterArgs toInvoke in _afterSetValue.GetInvocationList())
                    try
                    {
                        _afterSetValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearInputState()
        {
            if (!HookedList.Contains("ClearInputState"))
            {
                HookedList.Add("ClearInputState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "ClearInputState"),
                    ClearInputState);
            }
        }

        internal static event Delegates.ClearInputState_BeforeArgs _beforeClearInputState;
        internal static event Delegates.ClearInputState_AfterArgs _afterClearInputState;

        private static void ClearInputState(Action<OneAxisInputControl> orig, OneAxisInputControl self)
        {
            Delegates.Params_ClearInputState @params = new()
            {
                self = self
            };
            if (_beforeClearInputState != null)
                foreach (Delegates.ClearInputState_BeforeArgs toInvoke in _beforeClearInputState.GetInvocationList())
                    try
                    {
                        _beforeClearInputState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterClearInputState != null)
                foreach (Delegates.ClearInputState_AfterArgs toInvoke in _afterClearInputState.GetInvocationList())
                    try
                    {
                        _afterClearInputState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCommit()
        {
            if (!HookedList.Contains("Commit"))
            {
                HookedList.Add("Commit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "Commit"), Commit);
            }
        }

        internal static event Delegates.Commit_BeforeArgs _beforeCommit;
        internal static event Delegates.Commit_AfterArgs _afterCommit;

        private static void Commit(Action<OneAxisInputControl> orig, OneAxisInputControl self)
        {
            Delegates.Params_Commit @params = new()
            {
                self = self
            };
            if (_beforeCommit != null)
                foreach (Delegates.Commit_BeforeArgs toInvoke in _beforeCommit.GetInvocationList())
                    try
                    {
                        _beforeCommit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCommit != null)
                foreach (Delegates.Commit_AfterArgs toInvoke in _afterCommit.GetInvocationList())
                    try
                    {
                        _afterCommit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCommitWithState()
        {
            if (!HookedList.Contains("CommitWithState"))
            {
                HookedList.Add("CommitWithState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithState"),
                    CommitWithState);
            }
        }

        internal static event Delegates.CommitWithState_BeforeArgs _beforeCommitWithState;
        internal static event Delegates.CommitWithState_AfterArgs _afterCommitWithState;

        private static void CommitWithState(Action<OneAxisInputControl, bool, ulong, float> orig,
            OneAxisInputControl self, bool state, ulong updateTick, float deltaTime)
        {
            Delegates.Params_CommitWithState @params = new()
            {
                self = self, state = state, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeCommitWithState != null)
                foreach (Delegates.CommitWithState_BeforeArgs toInvoke in _beforeCommitWithState.GetInvocationList())
                    try
                    {
                        _beforeCommitWithState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            state = @params.state;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, state, updateTick, deltaTime);
            if (_afterCommitWithState != null)
                foreach (Delegates.CommitWithState_AfterArgs toInvoke in _afterCommitWithState.GetInvocationList())
                    try
                    {
                        _afterCommitWithState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCommitWithValue()
        {
            if (!HookedList.Contains("CommitWithValue"))
            {
                HookedList.Add("CommitWithValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithValue"),
                    CommitWithValue);
            }
        }

        internal static event Delegates.CommitWithValue_BeforeArgs _beforeCommitWithValue;
        internal static event Delegates.CommitWithValue_AfterArgs _afterCommitWithValue;

        private static void CommitWithValue(Action<OneAxisInputControl, float, ulong, float> orig,
            OneAxisInputControl self, float value, ulong updateTick, float deltaTime)
        {
            Delegates.Params_CommitWithValue @params = new()
            {
                self = self, value = value, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeCommitWithValue != null)
                foreach (Delegates.CommitWithValue_BeforeArgs toInvoke in _beforeCommitWithValue.GetInvocationList())
                    try
                    {
                        _beforeCommitWithValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, value, updateTick, deltaTime);
            if (_afterCommitWithValue != null)
                foreach (Delegates.CommitWithValue_AfterArgs toInvoke in _afterCommitWithValue.GetInvocationList())
                    try
                    {
                        _afterCommitWithValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCommitWithSides()
        {
            if (!HookedList.Contains("CommitWithSides"))
            {
                HookedList.Add("CommitWithSides");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithSides"),
                    CommitWithSides);
            }
        }

        internal static event Delegates.CommitWithSides_BeforeArgs _beforeCommitWithSides;
        internal static event Delegates.CommitWithSides_AfterArgs _afterCommitWithSides;

        private static void CommitWithSides(Action<OneAxisInputControl, InputControl, InputControl, ulong, float> orig,
            OneAxisInputControl self, InputControl negativeSide, InputControl positiveSide, ulong updateTick,
            float deltaTime)
        {
            Delegates.Params_CommitWithSides @params = new()
            {
                self = self, negativeSide = negativeSide, positiveSide = positiveSide, updateTick = updateTick,
                deltaTime = deltaTime
            };
            if (_beforeCommitWithSides != null)
                foreach (Delegates.CommitWithSides_BeforeArgs toInvoke in _beforeCommitWithSides.GetInvocationList())
                    try
                    {
                        _beforeCommitWithSides?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            negativeSide = @params.negativeSide;
            positiveSide = @params.positiveSide;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, negativeSide, positiveSide, updateTick, deltaTime);
            if (_afterCommitWithSides != null)
                foreach (Delegates.CommitWithSides_AfterArgs toInvoke in _afterCommitWithSides.GetInvocationList())
                    try
                    {
                        _afterCommitWithSides.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_State()
        {
            if (!HookedList.Contains("get_State"))
            {
                HookedList.Add("get_State");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_State"), get_State);
            }
        }

        internal static event Delegates.get_State_BeforeArgs _beforeget_State;
        internal static event Delegates.get_State_AfterArgs _afterget_State;

        private static bool get_State(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_State @params = new()
            {
                self = self
            };
            if (_beforeget_State != null)
                foreach (Delegates.get_State_BeforeArgs toInvoke in _beforeget_State.GetInvocationList())
                    try
                    {
                        _beforeget_State?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_State != null)
                foreach (Delegates.get_State_AfterArgs toInvoke in _afterget_State.GetInvocationList())
                    try
                    {
                        retVal = _afterget_State.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_LastState()
        {
            if (!HookedList.Contains("get_LastState"))
            {
                HookedList.Add("get_LastState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LastState"), get_LastState);
            }
        }

        internal static event Delegates.get_LastState_BeforeArgs _beforeget_LastState;
        internal static event Delegates.get_LastState_AfterArgs _afterget_LastState;

        private static bool get_LastState(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_LastState @params = new()
            {
                self = self
            };
            if (_beforeget_LastState != null)
                foreach (Delegates.get_LastState_BeforeArgs toInvoke in _beforeget_LastState.GetInvocationList())
                    try
                    {
                        _beforeget_LastState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastState != null)
                foreach (Delegates.get_LastState_AfterArgs toInvoke in _afterget_LastState.GetInvocationList())
                    try
                    {
                        retVal = _afterget_LastState.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Value()
        {
            if (!HookedList.Contains("get_Value"))
            {
                HookedList.Add("get_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Value"), get_Value);
            }
        }

        internal static event Delegates.get_Value_BeforeArgs _beforeget_Value;
        internal static event Delegates.get_Value_AfterArgs _afterget_Value;

        private static float get_Value(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_Value @params = new()
            {
                self = self
            };
            if (_beforeget_Value != null)
                foreach (Delegates.get_Value_BeforeArgs toInvoke in _beforeget_Value.GetInvocationList())
                    try
                    {
                        _beforeget_Value?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Value != null)
                foreach (Delegates.get_Value_AfterArgs toInvoke in _afterget_Value.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Value.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_LastValue()
        {
            if (!HookedList.Contains("get_LastValue"))
            {
                HookedList.Add("get_LastValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LastValue"), get_LastValue);
            }
        }

        internal static event Delegates.get_LastValue_BeforeArgs _beforeget_LastValue;
        internal static event Delegates.get_LastValue_AfterArgs _afterget_LastValue;

        private static float get_LastValue(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_LastValue @params = new()
            {
                self = self
            };
            if (_beforeget_LastValue != null)
                foreach (Delegates.get_LastValue_BeforeArgs toInvoke in _beforeget_LastValue.GetInvocationList())
                    try
                    {
                        _beforeget_LastValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastValue != null)
                foreach (Delegates.get_LastValue_AfterArgs toInvoke in _afterget_LastValue.GetInvocationList())
                    try
                    {
                        retVal = _afterget_LastValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_RawValue()
        {
            if (!HookedList.Contains("get_RawValue"))
            {
                HookedList.Add("get_RawValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_RawValue"), get_RawValue);
            }
        }

        internal static event Delegates.get_RawValue_BeforeArgs _beforeget_RawValue;
        internal static event Delegates.get_RawValue_AfterArgs _afterget_RawValue;

        private static float get_RawValue(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_RawValue @params = new()
            {
                self = self
            };
            if (_beforeget_RawValue != null)
                foreach (Delegates.get_RawValue_BeforeArgs toInvoke in _beforeget_RawValue.GetInvocationList())
                    try
                    {
                        _beforeget_RawValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_RawValue != null)
                foreach (Delegates.get_RawValue_AfterArgs toInvoke in _afterget_RawValue.GetInvocationList())
                    try
                    {
                        retVal = _afterget_RawValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_NextRawValue()
        {
            if (!HookedList.Contains("get_NextRawValue"))
            {
                HookedList.Add("get_NextRawValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_NextRawValue"),
                    get_NextRawValue);
            }
        }

        internal static event Delegates.get_NextRawValue_BeforeArgs _beforeget_NextRawValue;
        internal static event Delegates.get_NextRawValue_AfterArgs _afterget_NextRawValue;

        private static float get_NextRawValue(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_NextRawValue @params = new()
            {
                self = self
            };
            if (_beforeget_NextRawValue != null)
                foreach (Delegates.get_NextRawValue_BeforeArgs toInvoke in _beforeget_NextRawValue.GetInvocationList())
                    try
                    {
                        _beforeget_NextRawValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NextRawValue != null)
                foreach (Delegates.get_NextRawValue_AfterArgs toInvoke in _afterget_NextRawValue.GetInvocationList())
                    try
                    {
                        retVal = _afterget_NextRawValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_HasInput()
        {
            if (!HookedList.Contains("get_HasInput"))
            {
                HookedList.Add("get_HasInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_HasInput"), get_HasInput);
            }
        }

        internal static event Delegates.get_HasInput_BeforeArgs _beforeget_HasInput;
        internal static event Delegates.get_HasInput_AfterArgs _afterget_HasInput;

        private static bool get_HasInput(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_HasInput @params = new()
            {
                self = self
            };
            if (_beforeget_HasInput != null)
                foreach (Delegates.get_HasInput_BeforeArgs toInvoke in _beforeget_HasInput.GetInvocationList())
                    try
                    {
                        _beforeget_HasInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasInput != null)
                foreach (Delegates.get_HasInput_AfterArgs toInvoke in _afterget_HasInput.GetInvocationList())
                    try
                    {
                        retVal = _afterget_HasInput.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_HasChanged()
        {
            if (!HookedList.Contains("get_HasChanged"))
            {
                HookedList.Add("get_HasChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_HasChanged"), get_HasChanged);
            }
        }

        internal static event Delegates.get_HasChanged_BeforeArgs _beforeget_HasChanged;
        internal static event Delegates.get_HasChanged_AfterArgs _afterget_HasChanged;

        private static bool get_HasChanged(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_HasChanged @params = new()
            {
                self = self
            };
            if (_beforeget_HasChanged != null)
                foreach (Delegates.get_HasChanged_BeforeArgs toInvoke in _beforeget_HasChanged.GetInvocationList())
                    try
                    {
                        _beforeget_HasChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasChanged != null)
                foreach (Delegates.get_HasChanged_AfterArgs toInvoke in _afterget_HasChanged.GetInvocationList())
                    try
                    {
                        retVal = _afterget_HasChanged.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsPressed()
        {
            if (!HookedList.Contains("get_IsPressed"))
            {
                HookedList.Add("get_IsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_IsPressed"), get_IsPressed);
            }
        }

        internal static event Delegates.get_IsPressed_BeforeArgs _beforeget_IsPressed;
        internal static event Delegates.get_IsPressed_AfterArgs _afterget_IsPressed;

        private static bool get_IsPressed(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_IsPressed @params = new()
            {
                self = self
            };
            if (_beforeget_IsPressed != null)
                foreach (Delegates.get_IsPressed_BeforeArgs toInvoke in _beforeget_IsPressed.GetInvocationList())
                    try
                    {
                        _beforeget_IsPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsPressed != null)
                foreach (Delegates.get_IsPressed_AfterArgs toInvoke in _afterget_IsPressed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsPressed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_WasPressed()
        {
            if (!HookedList.Contains("get_WasPressed"))
            {
                HookedList.Add("get_WasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasPressed"), get_WasPressed);
            }
        }

        internal static event Delegates.get_WasPressed_BeforeArgs _beforeget_WasPressed;
        internal static event Delegates.get_WasPressed_AfterArgs _afterget_WasPressed;

        private static bool get_WasPressed(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_WasPressed @params = new()
            {
                self = self
            };
            if (_beforeget_WasPressed != null)
                foreach (Delegates.get_WasPressed_BeforeArgs toInvoke in _beforeget_WasPressed.GetInvocationList())
                    try
                    {
                        _beforeget_WasPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WasPressed != null)
                foreach (Delegates.get_WasPressed_AfterArgs toInvoke in _afterget_WasPressed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WasPressed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_WasReleased()
        {
            if (!HookedList.Contains("get_WasReleased"))
            {
                HookedList.Add("get_WasReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasReleased"),
                    get_WasReleased);
            }
        }

        internal static event Delegates.get_WasReleased_BeforeArgs _beforeget_WasReleased;
        internal static event Delegates.get_WasReleased_AfterArgs _afterget_WasReleased;

        private static bool get_WasReleased(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_WasReleased @params = new()
            {
                self = self
            };
            if (_beforeget_WasReleased != null)
                foreach (Delegates.get_WasReleased_BeforeArgs toInvoke in _beforeget_WasReleased.GetInvocationList())
                    try
                    {
                        _beforeget_WasReleased?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WasReleased != null)
                foreach (Delegates.get_WasReleased_AfterArgs toInvoke in _afterget_WasReleased.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WasReleased.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_WasRepeated()
        {
            if (!HookedList.Contains("get_WasRepeated"))
            {
                HookedList.Add("get_WasRepeated");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasRepeated"),
                    get_WasRepeated);
            }
        }

        internal static event Delegates.get_WasRepeated_BeforeArgs _beforeget_WasRepeated;
        internal static event Delegates.get_WasRepeated_AfterArgs _afterget_WasRepeated;

        private static bool get_WasRepeated(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_WasRepeated @params = new()
            {
                self = self
            };
            if (_beforeget_WasRepeated != null)
                foreach (Delegates.get_WasRepeated_BeforeArgs toInvoke in _beforeget_WasRepeated.GetInvocationList())
                    try
                    {
                        _beforeget_WasRepeated?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WasRepeated != null)
                foreach (Delegates.get_WasRepeated_AfterArgs toInvoke in _afterget_WasRepeated.GetInvocationList())
                    try
                    {
                        retVal = _afterget_WasRepeated.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Sensitivity()
        {
            if (!HookedList.Contains("get_Sensitivity"))
            {
                HookedList.Add("get_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Sensitivity"),
                    get_Sensitivity);
            }
        }

        internal static event Delegates.get_Sensitivity_BeforeArgs _beforeget_Sensitivity;
        internal static event Delegates.get_Sensitivity_AfterArgs _afterget_Sensitivity;

        private static float get_Sensitivity(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_Sensitivity @params = new()
            {
                self = self
            };
            if (_beforeget_Sensitivity != null)
                foreach (Delegates.get_Sensitivity_BeforeArgs toInvoke in _beforeget_Sensitivity.GetInvocationList())
                    try
                    {
                        _beforeget_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Sensitivity != null)
                foreach (Delegates.get_Sensitivity_AfterArgs toInvoke in _afterget_Sensitivity.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Sensitivity.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Sensitivity()
        {
            if (!HookedList.Contains("set_Sensitivity"))
            {
                HookedList.Add("set_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_Sensitivity"),
                    set_Sensitivity);
            }
        }

        internal static event Delegates.set_Sensitivity_BeforeArgs _beforeset_Sensitivity;
        internal static event Delegates.set_Sensitivity_AfterArgs _afterset_Sensitivity;

        private static void set_Sensitivity(Action<OneAxisInputControl, float> orig, OneAxisInputControl self,
            float value)
        {
            Delegates.Params_set_Sensitivity @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Sensitivity != null)
                foreach (Delegates.set_Sensitivity_BeforeArgs toInvoke in _beforeset_Sensitivity.GetInvocationList())
                    try
                    {
                        _beforeset_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Sensitivity != null)
                foreach (Delegates.set_Sensitivity_AfterArgs toInvoke in _afterset_Sensitivity.GetInvocationList())
                    try
                    {
                        _afterset_Sensitivity.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_LowerDeadZone()
        {
            if (!HookedList.Contains("get_LowerDeadZone"))
            {
                HookedList.Add("get_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LowerDeadZone"),
                    get_LowerDeadZone);
            }
        }

        internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
        internal static event Delegates.get_LowerDeadZone_AfterArgs _afterget_LowerDeadZone;

        private static float get_LowerDeadZone(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_LowerDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_LowerDeadZone != null)
                foreach (Delegates.get_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeget_LowerDeadZone.GetInvocationList())
                    try
                    {
                        _beforeget_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LowerDeadZone != null)
                foreach (Delegates.get_LowerDeadZone_AfterArgs toInvoke in _afterget_LowerDeadZone.GetInvocationList())
                    try
                    {
                        retVal = _afterget_LowerDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_LowerDeadZone()
        {
            if (!HookedList.Contains("set_LowerDeadZone"))
            {
                HookedList.Add("set_LowerDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_LowerDeadZone"),
                    set_LowerDeadZone);
            }
        }

        internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
        internal static event Delegates.set_LowerDeadZone_AfterArgs _afterset_LowerDeadZone;

        private static void set_LowerDeadZone(Action<OneAxisInputControl, float> orig, OneAxisInputControl self,
            float value)
        {
            Delegates.Params_set_LowerDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_LowerDeadZone != null)
                foreach (Delegates.set_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeset_LowerDeadZone.GetInvocationList())
                    try
                    {
                        _beforeset_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LowerDeadZone != null)
                foreach (Delegates.set_LowerDeadZone_AfterArgs toInvoke in _afterset_LowerDeadZone.GetInvocationList())
                    try
                    {
                        _afterset_LowerDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_UpperDeadZone()
        {
            if (!HookedList.Contains("get_UpperDeadZone"))
            {
                HookedList.Add("get_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_UpperDeadZone"),
                    get_UpperDeadZone);
            }
        }

        internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
        internal static event Delegates.get_UpperDeadZone_AfterArgs _afterget_UpperDeadZone;

        private static float get_UpperDeadZone(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_UpperDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_UpperDeadZone != null)
                foreach (Delegates.get_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeget_UpperDeadZone.GetInvocationList())
                    try
                    {
                        _beforeget_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpperDeadZone != null)
                foreach (Delegates.get_UpperDeadZone_AfterArgs toInvoke in _afterget_UpperDeadZone.GetInvocationList())
                    try
                    {
                        retVal = _afterget_UpperDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_UpperDeadZone()
        {
            if (!HookedList.Contains("set_UpperDeadZone"))
            {
                HookedList.Add("set_UpperDeadZone");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_UpperDeadZone"),
                    set_UpperDeadZone);
            }
        }

        internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
        internal static event Delegates.set_UpperDeadZone_AfterArgs _afterset_UpperDeadZone;

        private static void set_UpperDeadZone(Action<OneAxisInputControl, float> orig, OneAxisInputControl self,
            float value)
        {
            Delegates.Params_set_UpperDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_UpperDeadZone != null)
                foreach (Delegates.set_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeset_UpperDeadZone.GetInvocationList())
                    try
                    {
                        _beforeset_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpperDeadZone != null)
                foreach (Delegates.set_UpperDeadZone_AfterArgs toInvoke in _afterset_UpperDeadZone.GetInvocationList())
                    try
                    {
                        _afterset_UpperDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_StateThreshold()
        {
            if (!HookedList.Contains("get_StateThreshold"))
            {
                HookedList.Add("get_StateThreshold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_StateThreshold"),
                    get_StateThreshold);
            }
        }

        internal static event Delegates.get_StateThreshold_BeforeArgs _beforeget_StateThreshold;
        internal static event Delegates.get_StateThreshold_AfterArgs _afterget_StateThreshold;

        private static float get_StateThreshold(Func<OneAxisInputControl, float> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_StateThreshold @params = new()
            {
                self = self
            };
            if (_beforeget_StateThreshold != null)
                foreach (Delegates.get_StateThreshold_BeforeArgs toInvoke in
                         _beforeget_StateThreshold.GetInvocationList())
                    try
                    {
                        _beforeget_StateThreshold?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_StateThreshold != null)
                foreach (Delegates.get_StateThreshold_AfterArgs toInvoke in
                         _afterget_StateThreshold.GetInvocationList())
                    try
                    {
                        retVal = _afterget_StateThreshold.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_StateThreshold()
        {
            if (!HookedList.Contains("set_StateThreshold"))
            {
                HookedList.Add("set_StateThreshold");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_StateThreshold"),
                    set_StateThreshold);
            }
        }

        internal static event Delegates.set_StateThreshold_BeforeArgs _beforeset_StateThreshold;
        internal static event Delegates.set_StateThreshold_AfterArgs _afterset_StateThreshold;

        private static void set_StateThreshold(Action<OneAxisInputControl, float> orig, OneAxisInputControl self,
            float value)
        {
            Delegates.Params_set_StateThreshold @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_StateThreshold != null)
                foreach (Delegates.set_StateThreshold_BeforeArgs toInvoke in
                         _beforeset_StateThreshold.GetInvocationList())
                    try
                    {
                        _beforeset_StateThreshold?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_StateThreshold != null)
                foreach (Delegates.set_StateThreshold_AfterArgs toInvoke in
                         _afterset_StateThreshold.GetInvocationList())
                    try
                    {
                        _afterset_StateThreshold.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsNullControl()
        {
            if (!HookedList.Contains("get_IsNullControl"))
            {
                HookedList.Add("get_IsNullControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_IsNullControl"),
                    get_IsNullControl);
            }
        }

        internal static event Delegates.get_IsNullControl_BeforeArgs _beforeget_IsNullControl;
        internal static event Delegates.get_IsNullControl_AfterArgs _afterget_IsNullControl;

        private static bool get_IsNullControl(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_IsNullControl @params = new()
            {
                self = self
            };
            if (_beforeget_IsNullControl != null)
                foreach (Delegates.get_IsNullControl_BeforeArgs toInvoke in
                         _beforeget_IsNullControl.GetInvocationList())
                    try
                    {
                        _beforeget_IsNullControl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsNullControl != null)
                foreach (Delegates.get_IsNullControl_AfterArgs toInvoke in _afterget_IsNullControl.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsNullControl.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_Enabled()
        {
            if (!HookedList.Contains("get_Enabled"))
            {
                HookedList.Add("get_Enabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Enabled"), get_Enabled);
            }
        }

        internal static event Delegates.get_Enabled_BeforeArgs _beforeget_Enabled;
        internal static event Delegates.get_Enabled_AfterArgs _afterget_Enabled;

        private static bool get_Enabled(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_Enabled @params = new()
            {
                self = self
            };
            if (_beforeget_Enabled != null)
                foreach (Delegates.get_Enabled_BeforeArgs toInvoke in _beforeget_Enabled.GetInvocationList())
                    try
                    {
                        _beforeget_Enabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Enabled != null)
                foreach (Delegates.get_Enabled_AfterArgs toInvoke in _afterget_Enabled.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Enabled.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Enabled()
        {
            if (!HookedList.Contains("set_Enabled"))
            {
                HookedList.Add("set_Enabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_Enabled"), set_Enabled);
            }
        }

        internal static event Delegates.set_Enabled_BeforeArgs _beforeset_Enabled;
        internal static event Delegates.set_Enabled_AfterArgs _afterset_Enabled;

        private static void set_Enabled(Action<OneAxisInputControl, bool> orig, OneAxisInputControl self, bool value)
        {
            Delegates.Params_set_Enabled @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Enabled != null)
                foreach (Delegates.set_Enabled_BeforeArgs toInvoke in _beforeset_Enabled.GetInvocationList())
                    try
                    {
                        _beforeset_Enabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Enabled != null)
                foreach (Delegates.set_Enabled_AfterArgs toInvoke in _afterset_Enabled.GetInvocationList())
                    try
                    {
                        _afterset_Enabled.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_EnabledInHierarchy()
        {
            if (!HookedList.Contains("get_EnabledInHierarchy"))
            {
                HookedList.Add("get_EnabledInHierarchy");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_EnabledInHierarchy"),
                    get_EnabledInHierarchy);
            }
        }

        internal static event Delegates.get_EnabledInHierarchy_BeforeArgs _beforeget_EnabledInHierarchy;
        internal static event Delegates.get_EnabledInHierarchy_AfterArgs _afterget_EnabledInHierarchy;

        private static bool get_EnabledInHierarchy(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self)
        {
            Delegates.Params_get_EnabledInHierarchy @params = new()
            {
                self = self
            };
            if (_beforeget_EnabledInHierarchy != null)
                foreach (Delegates.get_EnabledInHierarchy_BeforeArgs toInvoke in _beforeget_EnabledInHierarchy
                             .GetInvocationList())
                    try
                    {
                        _beforeget_EnabledInHierarchy?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_EnabledInHierarchy != null)
                foreach (Delegates.get_EnabledInHierarchy_AfterArgs toInvoke in _afterget_EnabledInHierarchy
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_EnabledInHierarchy.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookop_Implicit_OneAxisInputControl()
        {
            if (!HookedList.Contains("op_Implicit_OneAxisInputControl"))
            {
                HookedList.Add("op_Implicit_OneAxisInputControl");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "op_Implicit_OneAxisInputControl",
                        false), op_Implicit_OneAxisInputControl);
            }
        }

        internal static event Delegates.op_Implicit_OneAxisInputControl_BeforeArgs
            _beforeop_Implicit_OneAxisInputControl;

        internal static event Delegates.op_Implicit_OneAxisInputControl_AfterArgs _afterop_Implicit_OneAxisInputControl;

        private static bool op_Implicit_OneAxisInputControl(Func<OneAxisInputControl, bool> orig,
            OneAxisInputControl instance)
        {
            Delegates.Params_op_Implicit_OneAxisInputControl @params = new()
            {
                instance = instance
            };
            if (_beforeop_Implicit_OneAxisInputControl != null)
                foreach (Delegates.op_Implicit_OneAxisInputControl_BeforeArgs toInvoke in
                         _beforeop_Implicit_OneAxisInputControl.GetInvocationList())
                    try
                    {
                        _beforeop_Implicit_OneAxisInputControl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            instance = @params.instance;
            var retVal = orig(instance);
            if (_afterop_Implicit_OneAxisInputControl != null)
                foreach (Delegates.op_Implicit_OneAxisInputControl_AfterArgs toInvoke in
                         _afterop_Implicit_OneAxisInputControl.GetInvocationList())
                    try
                    {
                        retVal = _afterop_Implicit_OneAxisInputControl.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ClearInputState_AfterArgs(Params_ClearInputState args);

        public delegate void ClearInputState_BeforeArgs(Params_ClearInputState args);

        public delegate void ClearInputState_WithArgs(Action<OneAxisInputControl> orig, OneAxisInputControl self);

        public delegate void Commit_AfterArgs(Params_Commit args);

        public delegate void Commit_BeforeArgs(Params_Commit args);

        public delegate void Commit_WithArgs(Action<OneAxisInputControl> orig, OneAxisInputControl self);

        public delegate void CommitWithSides_AfterArgs(Params_CommitWithSides args);

        public delegate void CommitWithSides_BeforeArgs(Params_CommitWithSides args);

        public delegate void CommitWithSides_WithArgs(
            Action<OneAxisInputControl, InputControl, InputControl, ulong, float> orig, OneAxisInputControl self,
            InputControl negativeSide, InputControl positiveSide, ulong updateTick, float deltaTime);

        public delegate void CommitWithState_AfterArgs(Params_CommitWithState args);

        public delegate void CommitWithState_BeforeArgs(Params_CommitWithState args);

        public delegate void CommitWithState_WithArgs(Action<OneAxisInputControl, bool, ulong, float> orig,
            OneAxisInputControl self, bool state, ulong updateTick, float deltaTime);

        public delegate void CommitWithValue_AfterArgs(Params_CommitWithValue args);

        public delegate void CommitWithValue_BeforeArgs(Params_CommitWithValue args);

        public delegate void CommitWithValue_WithArgs(Action<OneAxisInputControl, float, ulong, float> orig,
            OneAxisInputControl self, float value, ulong updateTick, float deltaTime);

        public delegate bool get_Enabled_AfterArgs(Params_get_Enabled args, bool ret);

        public delegate void get_Enabled_BeforeArgs(Params_get_Enabled args);

        public delegate bool get_Enabled_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_EnabledInHierarchy_AfterArgs(Params_get_EnabledInHierarchy args, bool ret);

        public delegate void get_EnabledInHierarchy_BeforeArgs(Params_get_EnabledInHierarchy args);

        public delegate bool get_EnabledInHierarchy_WithArgs(Func<OneAxisInputControl, bool> orig,
            OneAxisInputControl self);

        public delegate bool get_HasChanged_AfterArgs(Params_get_HasChanged args, bool ret);

        public delegate void get_HasChanged_BeforeArgs(Params_get_HasChanged args);

        public delegate bool get_HasChanged_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_HasInput_AfterArgs(Params_get_HasInput args, bool ret);

        public delegate void get_HasInput_BeforeArgs(Params_get_HasInput args);

        public delegate bool get_HasInput_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_IsNullControl_AfterArgs(Params_get_IsNullControl args, bool ret);

        public delegate void get_IsNullControl_BeforeArgs(Params_get_IsNullControl args);

        public delegate bool get_IsNullControl_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_IsPressed_AfterArgs(Params_get_IsPressed args, bool ret);

        public delegate void get_IsPressed_BeforeArgs(Params_get_IsPressed args);

        public delegate bool get_IsPressed_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_LastState_AfterArgs(Params_get_LastState args, bool ret);

        public delegate void get_LastState_BeforeArgs(Params_get_LastState args);

        public delegate bool get_LastState_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate float get_LastValue_AfterArgs(Params_get_LastValue args, float ret);

        public delegate void get_LastValue_BeforeArgs(Params_get_LastValue args);

        public delegate float get_LastValue_WithArgs(Func<OneAxisInputControl, float> orig, OneAxisInputControl self);

        public delegate float get_LowerDeadZone_AfterArgs(Params_get_LowerDeadZone args, float ret);

        public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);

        public delegate float get_LowerDeadZone_WithArgs(Func<OneAxisInputControl, float> orig,
            OneAxisInputControl self);

        public delegate float get_NextRawValue_AfterArgs(Params_get_NextRawValue args, float ret);

        public delegate void get_NextRawValue_BeforeArgs(Params_get_NextRawValue args);

        public delegate float
            get_NextRawValue_WithArgs(Func<OneAxisInputControl, float> orig, OneAxisInputControl self);

        public delegate float get_RawValue_AfterArgs(Params_get_RawValue args, float ret);

        public delegate void get_RawValue_BeforeArgs(Params_get_RawValue args);

        public delegate float get_RawValue_WithArgs(Func<OneAxisInputControl, float> orig, OneAxisInputControl self);

        public delegate float get_Sensitivity_AfterArgs(Params_get_Sensitivity args, float ret);

        public delegate void get_Sensitivity_BeforeArgs(Params_get_Sensitivity args);

        public delegate float get_Sensitivity_WithArgs(Func<OneAxisInputControl, float> orig, OneAxisInputControl self);

        public delegate bool get_State_AfterArgs(Params_get_State args, bool ret);

        public delegate void get_State_BeforeArgs(Params_get_State args);

        public delegate bool get_State_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate float get_StateThreshold_AfterArgs(Params_get_StateThreshold args, float ret);

        public delegate void get_StateThreshold_BeforeArgs(Params_get_StateThreshold args);

        public delegate float get_StateThreshold_WithArgs(Func<OneAxisInputControl, float> orig,
            OneAxisInputControl self);

        public delegate ulong get_UpdateTick_AfterArgs(Params_get_UpdateTick args, ulong ret);

        public delegate void get_UpdateTick_BeforeArgs(Params_get_UpdateTick args);

        public delegate ulong get_UpdateTick_WithArgs(Func<OneAxisInputControl, ulong> orig, OneAxisInputControl self);

        public delegate float get_UpperDeadZone_AfterArgs(Params_get_UpperDeadZone args, float ret);

        public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);

        public delegate float get_UpperDeadZone_WithArgs(Func<OneAxisInputControl, float> orig,
            OneAxisInputControl self);

        public delegate float get_Value_AfterArgs(Params_get_Value args, float ret);

        public delegate void get_Value_BeforeArgs(Params_get_Value args);

        public delegate float get_Value_WithArgs(Func<OneAxisInputControl, float> orig, OneAxisInputControl self);

        public delegate bool get_WasPressed_AfterArgs(Params_get_WasPressed args, bool ret);

        public delegate void get_WasPressed_BeforeArgs(Params_get_WasPressed args);

        public delegate bool get_WasPressed_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_WasReleased_AfterArgs(Params_get_WasReleased args, bool ret);

        public delegate void get_WasReleased_BeforeArgs(Params_get_WasReleased args);

        public delegate bool get_WasReleased_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool get_WasRepeated_AfterArgs(Params_get_WasRepeated args, bool ret);

        public delegate void get_WasRepeated_BeforeArgs(Params_get_WasRepeated args);

        public delegate bool get_WasRepeated_WithArgs(Func<OneAxisInputControl, bool> orig, OneAxisInputControl self);

        public delegate bool op_Implicit_OneAxisInputControl_AfterArgs(Params_op_Implicit_OneAxisInputControl args,
            bool ret);

        public delegate void op_Implicit_OneAxisInputControl_BeforeArgs(Params_op_Implicit_OneAxisInputControl args);

        public delegate bool op_Implicit_OneAxisInputControl_WithArgs(Func<OneAxisInputControl, bool> orig,
            OneAxisInputControl instance);

        public delegate void PrepareForUpdate_AfterArgs(Params_PrepareForUpdate args);

        public delegate void PrepareForUpdate_BeforeArgs(Params_PrepareForUpdate args);

        public delegate void PrepareForUpdate_WithArgs(Action<OneAxisInputControl, ulong> orig,
            OneAxisInputControl self, ulong updateTick);

        public delegate void set_Enabled_AfterArgs(Params_set_Enabled args);

        public delegate void set_Enabled_BeforeArgs(Params_set_Enabled args);

        public delegate void set_Enabled_WithArgs(Action<OneAxisInputControl, bool> orig, OneAxisInputControl self,
            bool value);

        public delegate void set_LowerDeadZone_AfterArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_WithArgs(Action<OneAxisInputControl, float> orig,
            OneAxisInputControl self, float value);

        public delegate void set_Sensitivity_AfterArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_BeforeArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_WithArgs(Action<OneAxisInputControl, float> orig, OneAxisInputControl self,
            float value);

        public delegate void set_StateThreshold_AfterArgs(Params_set_StateThreshold args);

        public delegate void set_StateThreshold_BeforeArgs(Params_set_StateThreshold args);

        public delegate void set_StateThreshold_WithArgs(Action<OneAxisInputControl, float> orig,
            OneAxisInputControl self, float value);

        public delegate void set_UpdateTick_AfterArgs(Params_set_UpdateTick args);

        public delegate void set_UpdateTick_BeforeArgs(Params_set_UpdateTick args);

        public delegate void set_UpdateTick_WithArgs(Action<OneAxisInputControl, ulong> orig, OneAxisInputControl self,
            ulong value);

        public delegate void set_UpperDeadZone_AfterArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_WithArgs(Action<OneAxisInputControl, float> orig,
            OneAxisInputControl self, float value);

        public delegate void SetValue_AfterArgs(Params_SetValue args);

        public delegate void SetValue_BeforeArgs(Params_SetValue args);

        public delegate void SetValue_WithArgs(Action<OneAxisInputControl, float, ulong> orig, OneAxisInputControl self,
            float value, ulong updateTick);

        public delegate bool UpdateWithRawValue_AfterArgs(Params_UpdateWithRawValue args, bool ret);

        public delegate void UpdateWithRawValue_BeforeArgs(Params_UpdateWithRawValue args);

        public delegate bool UpdateWithRawValue_WithArgs(Func<OneAxisInputControl, float, ulong, float, bool> orig,
            OneAxisInputControl self, float value, ulong updateTick, float deltaTime);

        public delegate bool UpdateWithState_AfterArgs(Params_UpdateWithState args, bool ret);

        public delegate void UpdateWithState_BeforeArgs(Params_UpdateWithState args);

        public delegate bool UpdateWithState_WithArgs(Func<OneAxisInputControl, bool, ulong, float, bool> orig,
            OneAxisInputControl self, bool state, ulong updateTick, float deltaTime);

        public delegate bool UpdateWithValue_AfterArgs(Params_UpdateWithValue args, bool ret);

        public delegate void UpdateWithValue_BeforeArgs(Params_UpdateWithValue args);

        public delegate bool UpdateWithValue_WithArgs(Func<OneAxisInputControl, float, ulong, float, bool> orig,
            OneAxisInputControl self, float value, ulong updateTick, float deltaTime);

        public sealed class Params_get_UpdateTick
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_set_UpdateTick
        {
            public OneAxisInputControl self;
            public ulong value;
        }

        public sealed class Params_PrepareForUpdate
        {
            public OneAxisInputControl self;
            public ulong updateTick;
        }

        public sealed class Params_UpdateWithState
        {
            public float deltaTime;
            public OneAxisInputControl self;
            public bool state;
            public ulong updateTick;
        }

        public sealed class Params_UpdateWithValue
        {
            public float deltaTime;
            public OneAxisInputControl self;
            public ulong updateTick;
            public float value;
        }

        public sealed class Params_UpdateWithRawValue
        {
            public float deltaTime;
            public OneAxisInputControl self;
            public ulong updateTick;
            public float value;
        }

        public sealed class Params_SetValue
        {
            public OneAxisInputControl self;
            public ulong updateTick;
            public float value;
        }

        public sealed class Params_ClearInputState
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_Commit
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_CommitWithState
        {
            public float deltaTime;
            public OneAxisInputControl self;
            public bool state;
            public ulong updateTick;
        }

        public sealed class Params_CommitWithValue
        {
            public float deltaTime;
            public OneAxisInputControl self;
            public ulong updateTick;
            public float value;
        }

        public sealed class Params_CommitWithSides
        {
            public float deltaTime;
            public InputControl negativeSide;
            public InputControl positiveSide;
            public OneAxisInputControl self;
            public ulong updateTick;
        }

        public sealed class Params_get_State
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_LastState
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_Value
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_LastValue
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_RawValue
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_NextRawValue
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_HasInput
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_HasChanged
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_IsPressed
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_WasPressed
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_WasReleased
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_WasRepeated
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_Sensitivity
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_set_Sensitivity
        {
            public OneAxisInputControl self;
            public float value;
        }

        public sealed class Params_get_LowerDeadZone
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_set_LowerDeadZone
        {
            public OneAxisInputControl self;
            public float value;
        }

        public sealed class Params_get_UpperDeadZone
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_set_UpperDeadZone
        {
            public OneAxisInputControl self;
            public float value;
        }

        public sealed class Params_get_StateThreshold
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_set_StateThreshold
        {
            public OneAxisInputControl self;
            public float value;
        }

        public sealed class Params_get_IsNullControl
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_get_Enabled
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_set_Enabled
        {
            public OneAxisInputControl self;
            public bool value;
        }

        public sealed class Params_get_EnabledInHierarchy
        {
            public OneAxisInputControl self;
        }

        public sealed class Params_op_Implicit_OneAxisInputControl
        {
            public OneAxisInputControl instance;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_UpdateTick_BeforeArgs get_UpdateTick
        {
            add
            {
                HookHandler._beforeget_UpdateTick += value;
                HookHandler.Hookget_UpdateTick();
            }
            remove => HookHandler._beforeget_UpdateTick -= value;
        }

        public static event Delegates.set_UpdateTick_BeforeArgs set_UpdateTick
        {
            add
            {
                HookHandler._beforeset_UpdateTick += value;
                HookHandler.Hookset_UpdateTick();
            }
            remove => HookHandler._beforeset_UpdateTick -= value;
        }

        public static event Delegates.PrepareForUpdate_BeforeArgs PrepareForUpdate
        {
            add
            {
                HookHandler._beforePrepareForUpdate += value;
                HookHandler.HookPrepareForUpdate();
            }
            remove => HookHandler._beforePrepareForUpdate -= value;
        }

        public static event Delegates.UpdateWithState_BeforeArgs UpdateWithState
        {
            add
            {
                HookHandler._beforeUpdateWithState += value;
                HookHandler.HookUpdateWithState();
            }
            remove => HookHandler._beforeUpdateWithState -= value;
        }

        public static event Delegates.UpdateWithValue_BeforeArgs UpdateWithValue
        {
            add
            {
                HookHandler._beforeUpdateWithValue += value;
                HookHandler.HookUpdateWithValue();
            }
            remove => HookHandler._beforeUpdateWithValue -= value;
        }

        public static event Delegates.UpdateWithRawValue_BeforeArgs UpdateWithRawValue
        {
            add
            {
                HookHandler._beforeUpdateWithRawValue += value;
                HookHandler.HookUpdateWithRawValue();
            }
            remove => HookHandler._beforeUpdateWithRawValue -= value;
        }

        public static event Delegates.SetValue_BeforeArgs SetValue
        {
            add
            {
                HookHandler._beforeSetValue += value;
                HookHandler.HookSetValue();
            }
            remove => HookHandler._beforeSetValue -= value;
        }

        public static event Delegates.ClearInputState_BeforeArgs ClearInputState
        {
            add
            {
                HookHandler._beforeClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._beforeClearInputState -= value;
        }

        public static event Delegates.Commit_BeforeArgs Commit
        {
            add
            {
                HookHandler._beforeCommit += value;
                HookHandler.HookCommit();
            }
            remove => HookHandler._beforeCommit -= value;
        }

        public static event Delegates.CommitWithState_BeforeArgs CommitWithState
        {
            add
            {
                HookHandler._beforeCommitWithState += value;
                HookHandler.HookCommitWithState();
            }
            remove => HookHandler._beforeCommitWithState -= value;
        }

        public static event Delegates.CommitWithValue_BeforeArgs CommitWithValue
        {
            add
            {
                HookHandler._beforeCommitWithValue += value;
                HookHandler.HookCommitWithValue();
            }
            remove => HookHandler._beforeCommitWithValue -= value;
        }

        public static event Delegates.CommitWithSides_BeforeArgs CommitWithSides
        {
            add
            {
                HookHandler._beforeCommitWithSides += value;
                HookHandler.HookCommitWithSides();
            }
            remove => HookHandler._beforeCommitWithSides -= value;
        }

        public static event Delegates.get_State_BeforeArgs get_State
        {
            add
            {
                HookHandler._beforeget_State += value;
                HookHandler.Hookget_State();
            }
            remove => HookHandler._beforeget_State -= value;
        }

        public static event Delegates.get_LastState_BeforeArgs get_LastState
        {
            add
            {
                HookHandler._beforeget_LastState += value;
                HookHandler.Hookget_LastState();
            }
            remove => HookHandler._beforeget_LastState -= value;
        }

        public static event Delegates.get_Value_BeforeArgs get_Value
        {
            add
            {
                HookHandler._beforeget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._beforeget_Value -= value;
        }

        public static event Delegates.get_LastValue_BeforeArgs get_LastValue
        {
            add
            {
                HookHandler._beforeget_LastValue += value;
                HookHandler.Hookget_LastValue();
            }
            remove => HookHandler._beforeget_LastValue -= value;
        }

        public static event Delegates.get_RawValue_BeforeArgs get_RawValue
        {
            add
            {
                HookHandler._beforeget_RawValue += value;
                HookHandler.Hookget_RawValue();
            }
            remove => HookHandler._beforeget_RawValue -= value;
        }

        public static event Delegates.get_NextRawValue_BeforeArgs get_NextRawValue
        {
            add
            {
                HookHandler._beforeget_NextRawValue += value;
                HookHandler.Hookget_NextRawValue();
            }
            remove => HookHandler._beforeget_NextRawValue -= value;
        }

        public static event Delegates.get_HasInput_BeforeArgs get_HasInput
        {
            add
            {
                HookHandler._beforeget_HasInput += value;
                HookHandler.Hookget_HasInput();
            }
            remove => HookHandler._beforeget_HasInput -= value;
        }

        public static event Delegates.get_HasChanged_BeforeArgs get_HasChanged
        {
            add
            {
                HookHandler._beforeget_HasChanged += value;
                HookHandler.Hookget_HasChanged();
            }
            remove => HookHandler._beforeget_HasChanged -= value;
        }

        public static event Delegates.get_IsPressed_BeforeArgs get_IsPressed
        {
            add
            {
                HookHandler._beforeget_IsPressed += value;
                HookHandler.Hookget_IsPressed();
            }
            remove => HookHandler._beforeget_IsPressed -= value;
        }

        public static event Delegates.get_WasPressed_BeforeArgs get_WasPressed
        {
            add
            {
                HookHandler._beforeget_WasPressed += value;
                HookHandler.Hookget_WasPressed();
            }
            remove => HookHandler._beforeget_WasPressed -= value;
        }

        public static event Delegates.get_WasReleased_BeforeArgs get_WasReleased
        {
            add
            {
                HookHandler._beforeget_WasReleased += value;
                HookHandler.Hookget_WasReleased();
            }
            remove => HookHandler._beforeget_WasReleased -= value;
        }

        public static event Delegates.get_WasRepeated_BeforeArgs get_WasRepeated
        {
            add
            {
                HookHandler._beforeget_WasRepeated += value;
                HookHandler.Hookget_WasRepeated();
            }
            remove => HookHandler._beforeget_WasRepeated -= value;
        }

        public static event Delegates.get_Sensitivity_BeforeArgs get_Sensitivity
        {
            add
            {
                HookHandler._beforeget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._beforeget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_BeforeArgs set_Sensitivity
        {
            add
            {
                HookHandler._beforeset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._beforeset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._beforeget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._beforeget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._beforeset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._beforeset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._beforeget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._beforeget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._beforeset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._beforeset_UpperDeadZone -= value;
        }

        public static event Delegates.get_StateThreshold_BeforeArgs get_StateThreshold
        {
            add
            {
                HookHandler._beforeget_StateThreshold += value;
                HookHandler.Hookget_StateThreshold();
            }
            remove => HookHandler._beforeget_StateThreshold -= value;
        }

        public static event Delegates.set_StateThreshold_BeforeArgs set_StateThreshold
        {
            add
            {
                HookHandler._beforeset_StateThreshold += value;
                HookHandler.Hookset_StateThreshold();
            }
            remove => HookHandler._beforeset_StateThreshold -= value;
        }

        public static event Delegates.get_IsNullControl_BeforeArgs get_IsNullControl
        {
            add
            {
                HookHandler._beforeget_IsNullControl += value;
                HookHandler.Hookget_IsNullControl();
            }
            remove => HookHandler._beforeget_IsNullControl -= value;
        }

        public static event Delegates.get_Enabled_BeforeArgs get_Enabled
        {
            add
            {
                HookHandler._beforeget_Enabled += value;
                HookHandler.Hookget_Enabled();
            }
            remove => HookHandler._beforeget_Enabled -= value;
        }

        public static event Delegates.set_Enabled_BeforeArgs set_Enabled
        {
            add
            {
                HookHandler._beforeset_Enabled += value;
                HookHandler.Hookset_Enabled();
            }
            remove => HookHandler._beforeset_Enabled -= value;
        }

        public static event Delegates.get_EnabledInHierarchy_BeforeArgs get_EnabledInHierarchy
        {
            add
            {
                HookHandler._beforeget_EnabledInHierarchy += value;
                HookHandler.Hookget_EnabledInHierarchy();
            }
            remove => HookHandler._beforeget_EnabledInHierarchy -= value;
        }

        public static event Delegates.op_Implicit_OneAxisInputControl_BeforeArgs op_Implicit_OneAxisInputControl
        {
            add
            {
                HookHandler._beforeop_Implicit_OneAxisInputControl += value;
                HookHandler.Hookop_Implicit_OneAxisInputControl();
            }
            remove => HookHandler._beforeop_Implicit_OneAxisInputControl -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_UpdateTick_AfterArgs get_UpdateTick
        {
            add
            {
                HookHandler._afterget_UpdateTick += value;
                HookHandler.Hookget_UpdateTick();
            }
            remove => HookHandler._afterget_UpdateTick -= value;
        }

        public static event Delegates.set_UpdateTick_AfterArgs set_UpdateTick
        {
            add
            {
                HookHandler._afterset_UpdateTick += value;
                HookHandler.Hookset_UpdateTick();
            }
            remove => HookHandler._afterset_UpdateTick -= value;
        }

        public static event Delegates.PrepareForUpdate_AfterArgs PrepareForUpdate
        {
            add
            {
                HookHandler._afterPrepareForUpdate += value;
                HookHandler.HookPrepareForUpdate();
            }
            remove => HookHandler._afterPrepareForUpdate -= value;
        }

        public static event Delegates.UpdateWithState_AfterArgs UpdateWithState
        {
            add
            {
                HookHandler._afterUpdateWithState += value;
                HookHandler.HookUpdateWithState();
            }
            remove => HookHandler._afterUpdateWithState -= value;
        }

        public static event Delegates.UpdateWithValue_AfterArgs UpdateWithValue
        {
            add
            {
                HookHandler._afterUpdateWithValue += value;
                HookHandler.HookUpdateWithValue();
            }
            remove => HookHandler._afterUpdateWithValue -= value;
        }

        public static event Delegates.UpdateWithRawValue_AfterArgs UpdateWithRawValue
        {
            add
            {
                HookHandler._afterUpdateWithRawValue += value;
                HookHandler.HookUpdateWithRawValue();
            }
            remove => HookHandler._afterUpdateWithRawValue -= value;
        }

        public static event Delegates.SetValue_AfterArgs SetValue
        {
            add
            {
                HookHandler._afterSetValue += value;
                HookHandler.HookSetValue();
            }
            remove => HookHandler._afterSetValue -= value;
        }

        public static event Delegates.ClearInputState_AfterArgs ClearInputState
        {
            add
            {
                HookHandler._afterClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._afterClearInputState -= value;
        }

        public static event Delegates.Commit_AfterArgs Commit
        {
            add
            {
                HookHandler._afterCommit += value;
                HookHandler.HookCommit();
            }
            remove => HookHandler._afterCommit -= value;
        }

        public static event Delegates.CommitWithState_AfterArgs CommitWithState
        {
            add
            {
                HookHandler._afterCommitWithState += value;
                HookHandler.HookCommitWithState();
            }
            remove => HookHandler._afterCommitWithState -= value;
        }

        public static event Delegates.CommitWithValue_AfterArgs CommitWithValue
        {
            add
            {
                HookHandler._afterCommitWithValue += value;
                HookHandler.HookCommitWithValue();
            }
            remove => HookHandler._afterCommitWithValue -= value;
        }

        public static event Delegates.CommitWithSides_AfterArgs CommitWithSides
        {
            add
            {
                HookHandler._afterCommitWithSides += value;
                HookHandler.HookCommitWithSides();
            }
            remove => HookHandler._afterCommitWithSides -= value;
        }

        public static event Delegates.get_State_AfterArgs get_State
        {
            add
            {
                HookHandler._afterget_State += value;
                HookHandler.Hookget_State();
            }
            remove => HookHandler._afterget_State -= value;
        }

        public static event Delegates.get_LastState_AfterArgs get_LastState
        {
            add
            {
                HookHandler._afterget_LastState += value;
                HookHandler.Hookget_LastState();
            }
            remove => HookHandler._afterget_LastState -= value;
        }

        public static event Delegates.get_Value_AfterArgs get_Value
        {
            add
            {
                HookHandler._afterget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._afterget_Value -= value;
        }

        public static event Delegates.get_LastValue_AfterArgs get_LastValue
        {
            add
            {
                HookHandler._afterget_LastValue += value;
                HookHandler.Hookget_LastValue();
            }
            remove => HookHandler._afterget_LastValue -= value;
        }

        public static event Delegates.get_RawValue_AfterArgs get_RawValue
        {
            add
            {
                HookHandler._afterget_RawValue += value;
                HookHandler.Hookget_RawValue();
            }
            remove => HookHandler._afterget_RawValue -= value;
        }

        public static event Delegates.get_NextRawValue_AfterArgs get_NextRawValue
        {
            add
            {
                HookHandler._afterget_NextRawValue += value;
                HookHandler.Hookget_NextRawValue();
            }
            remove => HookHandler._afterget_NextRawValue -= value;
        }

        public static event Delegates.get_HasInput_AfterArgs get_HasInput
        {
            add
            {
                HookHandler._afterget_HasInput += value;
                HookHandler.Hookget_HasInput();
            }
            remove => HookHandler._afterget_HasInput -= value;
        }

        public static event Delegates.get_HasChanged_AfterArgs get_HasChanged
        {
            add
            {
                HookHandler._afterget_HasChanged += value;
                HookHandler.Hookget_HasChanged();
            }
            remove => HookHandler._afterget_HasChanged -= value;
        }

        public static event Delegates.get_IsPressed_AfterArgs get_IsPressed
        {
            add
            {
                HookHandler._afterget_IsPressed += value;
                HookHandler.Hookget_IsPressed();
            }
            remove => HookHandler._afterget_IsPressed -= value;
        }

        public static event Delegates.get_WasPressed_AfterArgs get_WasPressed
        {
            add
            {
                HookHandler._afterget_WasPressed += value;
                HookHandler.Hookget_WasPressed();
            }
            remove => HookHandler._afterget_WasPressed -= value;
        }

        public static event Delegates.get_WasReleased_AfterArgs get_WasReleased
        {
            add
            {
                HookHandler._afterget_WasReleased += value;
                HookHandler.Hookget_WasReleased();
            }
            remove => HookHandler._afterget_WasReleased -= value;
        }

        public static event Delegates.get_WasRepeated_AfterArgs get_WasRepeated
        {
            add
            {
                HookHandler._afterget_WasRepeated += value;
                HookHandler.Hookget_WasRepeated();
            }
            remove => HookHandler._afterget_WasRepeated -= value;
        }

        public static event Delegates.get_Sensitivity_AfterArgs get_Sensitivity
        {
            add
            {
                HookHandler._afterget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._afterget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_AfterArgs set_Sensitivity
        {
            add
            {
                HookHandler._afterset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._afterset_Sensitivity -= value;
        }

        public static event Delegates.get_LowerDeadZone_AfterArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._afterget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._afterget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_AfterArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._afterset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._afterset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_AfterArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._afterget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._afterget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_AfterArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._afterset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._afterset_UpperDeadZone -= value;
        }

        public static event Delegates.get_StateThreshold_AfterArgs get_StateThreshold
        {
            add
            {
                HookHandler._afterget_StateThreshold += value;
                HookHandler.Hookget_StateThreshold();
            }
            remove => HookHandler._afterget_StateThreshold -= value;
        }

        public static event Delegates.set_StateThreshold_AfterArgs set_StateThreshold
        {
            add
            {
                HookHandler._afterset_StateThreshold += value;
                HookHandler.Hookset_StateThreshold();
            }
            remove => HookHandler._afterset_StateThreshold -= value;
        }

        public static event Delegates.get_IsNullControl_AfterArgs get_IsNullControl
        {
            add
            {
                HookHandler._afterget_IsNullControl += value;
                HookHandler.Hookget_IsNullControl();
            }
            remove => HookHandler._afterget_IsNullControl -= value;
        }

        public static event Delegates.get_Enabled_AfterArgs get_Enabled
        {
            add
            {
                HookHandler._afterget_Enabled += value;
                HookHandler.Hookget_Enabled();
            }
            remove => HookHandler._afterget_Enabled -= value;
        }

        public static event Delegates.set_Enabled_AfterArgs set_Enabled
        {
            add
            {
                HookHandler._afterset_Enabled += value;
                HookHandler.Hookset_Enabled();
            }
            remove => HookHandler._afterset_Enabled -= value;
        }

        public static event Delegates.get_EnabledInHierarchy_AfterArgs get_EnabledInHierarchy
        {
            add
            {
                HookHandler._afterget_EnabledInHierarchy += value;
                HookHandler.Hookget_EnabledInHierarchy();
            }
            remove => HookHandler._afterget_EnabledInHierarchy -= value;
        }

        public static event Delegates.op_Implicit_OneAxisInputControl_AfterArgs op_Implicit_OneAxisInputControl
        {
            add
            {
                HookHandler._afterop_Implicit_OneAxisInputControl += value;
                HookHandler.Hookop_Implicit_OneAxisInputControl();
            }
            remove => HookHandler._afterop_Implicit_OneAxisInputControl -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_UpdateTick_WithArgs get_UpdateTick
        {
            add => HookEndpointManager.Add<Delegates.get_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_UpdateTick"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_UpdateTick"), value);
        }

        public static event Delegates.set_UpdateTick_WithArgs set_UpdateTick
        {
            add => HookEndpointManager.Add<Delegates.set_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_UpdateTick"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_UpdateTick"), value);
        }

        public static event Delegates.PrepareForUpdate_WithArgs PrepareForUpdate
        {
            add => HookEndpointManager.Add<Delegates.PrepareForUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "PrepareForUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.PrepareForUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "PrepareForUpdate"), value);
        }

        public static event Delegates.UpdateWithState_WithArgs UpdateWithState
        {
            add => HookEndpointManager.Add<Delegates.UpdateWithState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithState"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateWithState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithState"), value);
        }

        public static event Delegates.UpdateWithValue_WithArgs UpdateWithValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateWithValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateWithValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithValue"), value);
        }

        public static event Delegates.UpdateWithRawValue_WithArgs UpdateWithRawValue
        {
            add => HookEndpointManager.Add<Delegates.UpdateWithRawValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithRawValue"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateWithRawValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "UpdateWithRawValue"), value);
        }

        public static event Delegates.SetValue_WithArgs SetValue
        {
            add => HookEndpointManager.Add<Delegates.SetValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "SetValue"), value);
            remove => HookEndpointManager.Remove<Delegates.SetValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "SetValue"), value);
        }

        public static event Delegates.ClearInputState_WithArgs ClearInputState
        {
            add => HookEndpointManager.Add<Delegates.ClearInputState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "ClearInputState"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearInputState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "ClearInputState"), value);
        }

        public static event Delegates.Commit_WithArgs Commit
        {
            add => HookEndpointManager.Add<Delegates.Commit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "Commit"), value);
            remove => HookEndpointManager.Remove<Delegates.Commit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "Commit"), value);
        }

        public static event Delegates.CommitWithState_WithArgs CommitWithState
        {
            add => HookEndpointManager.Add<Delegates.CommitWithState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithState"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitWithState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithState"), value);
        }

        public static event Delegates.CommitWithValue_WithArgs CommitWithValue
        {
            add => HookEndpointManager.Add<Delegates.CommitWithValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithValue"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitWithValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithValue"), value);
        }

        public static event Delegates.CommitWithSides_WithArgs CommitWithSides
        {
            add => HookEndpointManager.Add<Delegates.CommitWithSides_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithSides"), value);
            remove => HookEndpointManager.Remove<Delegates.CommitWithSides_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "CommitWithSides"), value);
        }

        public static event Delegates.get_State_WithArgs get_State
        {
            add => HookEndpointManager.Add<Delegates.get_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_State"), value);
            remove => HookEndpointManager.Remove<Delegates.get_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_State"), value);
        }

        public static event Delegates.get_LastState_WithArgs get_LastState
        {
            add => HookEndpointManager.Add<Delegates.get_LastState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LastState"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LastState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LastState"), value);
        }

        public static event Delegates.get_Value_WithArgs get_Value
        {
            add => HookEndpointManager.Add<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Value"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Value"), value);
        }

        public static event Delegates.get_LastValue_WithArgs get_LastValue
        {
            add => HookEndpointManager.Add<Delegates.get_LastValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LastValue"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LastValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LastValue"), value);
        }

        public static event Delegates.get_RawValue_WithArgs get_RawValue
        {
            add => HookEndpointManager.Add<Delegates.get_RawValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_RawValue"), value);
            remove => HookEndpointManager.Remove<Delegates.get_RawValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_RawValue"), value);
        }

        public static event Delegates.get_NextRawValue_WithArgs get_NextRawValue
        {
            add => HookEndpointManager.Add<Delegates.get_NextRawValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_NextRawValue"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NextRawValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_NextRawValue"), value);
        }

        public static event Delegates.get_HasInput_WithArgs get_HasInput
        {
            add => HookEndpointManager.Add<Delegates.get_HasInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_HasInput"), value);
            remove => HookEndpointManager.Remove<Delegates.get_HasInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_HasInput"), value);
        }

        public static event Delegates.get_HasChanged_WithArgs get_HasChanged
        {
            add => HookEndpointManager.Add<Delegates.get_HasChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_HasChanged"), value);
            remove => HookEndpointManager.Remove<Delegates.get_HasChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_HasChanged"), value);
        }

        public static event Delegates.get_IsPressed_WithArgs get_IsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_IsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_IsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_IsPressed"), value);
        }

        public static event Delegates.get_WasPressed_WithArgs get_WasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_WasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasPressed"), value);
        }

        public static event Delegates.get_WasReleased_WithArgs get_WasReleased
        {
            add => HookEndpointManager.Add<Delegates.get_WasReleased_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasReleased"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WasReleased_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasReleased"), value);
        }

        public static event Delegates.get_WasRepeated_WithArgs get_WasRepeated
        {
            add => HookEndpointManager.Add<Delegates.get_WasRepeated_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasRepeated"), value);
            remove => HookEndpointManager.Remove<Delegates.get_WasRepeated_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_WasRepeated"), value);
        }

        public static event Delegates.get_Sensitivity_WithArgs get_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Sensitivity"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Sensitivity"), value);
        }

        public static event Delegates.set_Sensitivity_WithArgs set_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_Sensitivity"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_Sensitivity"), value);
        }

        public static event Delegates.get_LowerDeadZone_WithArgs get_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_LowerDeadZone"), value);
        }

        public static event Delegates.set_LowerDeadZone_WithArgs set_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_LowerDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_LowerDeadZone"), value);
        }

        public static event Delegates.get_UpperDeadZone_WithArgs get_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_UpperDeadZone"), value);
        }

        public static event Delegates.set_UpperDeadZone_WithArgs set_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_UpperDeadZone"), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_UpperDeadZone"), value);
        }

        public static event Delegates.get_StateThreshold_WithArgs get_StateThreshold
        {
            add => HookEndpointManager.Add<Delegates.get_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_StateThreshold"), value);
            remove => HookEndpointManager.Remove<Delegates.get_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_StateThreshold"), value);
        }

        public static event Delegates.set_StateThreshold_WithArgs set_StateThreshold
        {
            add => HookEndpointManager.Add<Delegates.set_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_StateThreshold"), value);
            remove => HookEndpointManager.Remove<Delegates.set_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_StateThreshold"), value);
        }

        public static event Delegates.get_IsNullControl_WithArgs get_IsNullControl
        {
            add => HookEndpointManager.Add<Delegates.get_IsNullControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_IsNullControl"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsNullControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_IsNullControl"), value);
        }

        public static event Delegates.get_Enabled_WithArgs get_Enabled
        {
            add => HookEndpointManager.Add<Delegates.get_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Enabled"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_Enabled"), value);
        }

        public static event Delegates.set_Enabled_WithArgs set_Enabled
        {
            add => HookEndpointManager.Add<Delegates.set_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_Enabled"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "set_Enabled"), value);
        }

        public static event Delegates.get_EnabledInHierarchy_WithArgs get_EnabledInHierarchy
        {
            add => HookEndpointManager.Add<Delegates.get_EnabledInHierarchy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_EnabledInHierarchy"), value);
            remove => HookEndpointManager.Remove<Delegates.get_EnabledInHierarchy_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "get_EnabledInHierarchy"), value);
        }

        public static event Delegates.op_Implicit_OneAxisInputControl_WithArgs op_Implicit_OneAxisInputControl
        {
            add => HookEndpointManager.Add<Delegates.op_Implicit_OneAxisInputControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "op_Implicit", false), value);
            remove => HookEndpointManager.Remove<Delegates.op_Implicit_OneAxisInputControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OneAxisInputControl), "op_Implicit", false), value);
        }
    }
}