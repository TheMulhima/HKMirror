using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;
using Object = UnityEngine.Object;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMPro_EventManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMPro_EventManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookON_PRE_RENDER_OBJECT_CHANGED()
        {
            if (!HookedList.Contains("ON_PRE_RENDER_OBJECT_CHANGED"))
            {
                HookedList.Add("ON_PRE_RENDER_OBJECT_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_PRE_RENDER_OBJECT_CHANGED", false),
                    ON_PRE_RENDER_OBJECT_CHANGED);
            }
        }

        internal static event Delegates.ON_PRE_RENDER_OBJECT_CHANGED_BeforeArgs _beforeON_PRE_RENDER_OBJECT_CHANGED;
        internal static event Delegates.ON_PRE_RENDER_OBJECT_CHANGED_AfterArgs _afterON_PRE_RENDER_OBJECT_CHANGED;

        private static void ON_PRE_RENDER_OBJECT_CHANGED(Action orig)
        {
            if (_beforeON_PRE_RENDER_OBJECT_CHANGED != null)
                foreach (Delegates.ON_PRE_RENDER_OBJECT_CHANGED_BeforeArgs toInvoke in
                         _beforeON_PRE_RENDER_OBJECT_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_PRE_RENDER_OBJECT_CHANGED?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterON_PRE_RENDER_OBJECT_CHANGED != null)
                foreach (Delegates.ON_PRE_RENDER_OBJECT_CHANGED_AfterArgs toInvoke in _afterON_PRE_RENDER_OBJECT_CHANGED
                             .GetInvocationList())
                    try
                    {
                        _afterON_PRE_RENDER_OBJECT_CHANGED.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_MATERIAL_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_MATERIAL_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_MATERIAL_PROPERTY_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_MATERIAL_PROPERTY_CHANGED", false),
                    ON_MATERIAL_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_MATERIAL_PROPERTY_CHANGED_BeforeArgs _beforeON_MATERIAL_PROPERTY_CHANGED;
        internal static event Delegates.ON_MATERIAL_PROPERTY_CHANGED_AfterArgs _afterON_MATERIAL_PROPERTY_CHANGED;

        private static void ON_MATERIAL_PROPERTY_CHANGED(Action<bool, Material> orig, bool isChanged, Material mat)
        {
            Delegates.Params_ON_MATERIAL_PROPERTY_CHANGED @params = new()
            {
                isChanged = isChanged, mat = mat
            };
            if (_beforeON_MATERIAL_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_MATERIAL_PROPERTY_CHANGED_BeforeArgs toInvoke in
                         _beforeON_MATERIAL_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_MATERIAL_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            isChanged = @params.isChanged;
            mat = @params.mat;
            orig(isChanged, mat);
            if (_afterON_MATERIAL_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_MATERIAL_PROPERTY_CHANGED_AfterArgs toInvoke in _afterON_MATERIAL_PROPERTY_CHANGED
                             .GetInvocationList())
                    try
                    {
                        _afterON_MATERIAL_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_FONT_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_FONT_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_FONT_PROPERTY_CHANGED");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_FONT_PROPERTY_CHANGED", false),
                    ON_FONT_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_FONT_PROPERTY_CHANGED_BeforeArgs _beforeON_FONT_PROPERTY_CHANGED;
        internal static event Delegates.ON_FONT_PROPERTY_CHANGED_AfterArgs _afterON_FONT_PROPERTY_CHANGED;

        private static void ON_FONT_PROPERTY_CHANGED(Action<bool, TMP_FontAsset> orig, bool isChanged,
            TMP_FontAsset font)
        {
            Delegates.Params_ON_FONT_PROPERTY_CHANGED @params = new()
            {
                isChanged = isChanged, font = font
            };
            if (_beforeON_FONT_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_FONT_PROPERTY_CHANGED_BeforeArgs toInvoke in _beforeON_FONT_PROPERTY_CHANGED
                             .GetInvocationList())
                    try
                    {
                        _beforeON_FONT_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            isChanged = @params.isChanged;
            font = @params.font;
            orig(isChanged, font);
            if (_afterON_FONT_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_FONT_PROPERTY_CHANGED_AfterArgs toInvoke in _afterON_FONT_PROPERTY_CHANGED
                             .GetInvocationList())
                    try
                    {
                        _afterON_FONT_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_SPRITE_ASSET_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_SPRITE_ASSET_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_SPRITE_ASSET_PROPERTY_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_SPRITE_ASSET_PROPERTY_CHANGED",
                        false), ON_SPRITE_ASSET_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_BeforeArgs
            _beforeON_SPRITE_ASSET_PROPERTY_CHANGED;

        internal static event Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_AfterArgs
            _afterON_SPRITE_ASSET_PROPERTY_CHANGED;

        private static void ON_SPRITE_ASSET_PROPERTY_CHANGED(Action<bool, Object> orig, bool isChanged, Object obj)
        {
            Delegates.Params_ON_SPRITE_ASSET_PROPERTY_CHANGED @params = new()
            {
                isChanged = isChanged, obj = obj
            };
            if (_beforeON_SPRITE_ASSET_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_BeforeArgs toInvoke in
                         _beforeON_SPRITE_ASSET_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_SPRITE_ASSET_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            isChanged = @params.isChanged;
            obj = @params.obj;
            orig(isChanged, obj);
            if (_afterON_SPRITE_ASSET_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_AfterArgs toInvoke in
                         _afterON_SPRITE_ASSET_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_SPRITE_ASSET_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_TEXTMESHPRO_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_TEXTMESHPRO_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_TEXTMESHPRO_PROPERTY_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXTMESHPRO_PROPERTY_CHANGED",
                        false), ON_TEXTMESHPRO_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_BeforeArgs
            _beforeON_TEXTMESHPRO_PROPERTY_CHANGED;

        internal static event Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_AfterArgs _afterON_TEXTMESHPRO_PROPERTY_CHANGED;

        private static void ON_TEXTMESHPRO_PROPERTY_CHANGED(Action<bool, TextMeshPro> orig, bool isChanged,
            TextMeshPro obj)
        {
            Delegates.Params_ON_TEXTMESHPRO_PROPERTY_CHANGED @params = new()
            {
                isChanged = isChanged, obj = obj
            };
            if (_beforeON_TEXTMESHPRO_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_BeforeArgs toInvoke in
                         _beforeON_TEXTMESHPRO_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_TEXTMESHPRO_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            isChanged = @params.isChanged;
            obj = @params.obj;
            orig(isChanged, obj);
            if (_afterON_TEXTMESHPRO_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_AfterArgs toInvoke in
                         _afterON_TEXTMESHPRO_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_TEXTMESHPRO_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_DRAG_AND_DROP_MATERIAL_CHANGED()
        {
            if (!HookedList.Contains("ON_DRAG_AND_DROP_MATERIAL_CHANGED"))
            {
                HookedList.Add("ON_DRAG_AND_DROP_MATERIAL_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_DRAG_AND_DROP_MATERIAL_CHANGED",
                        false), ON_DRAG_AND_DROP_MATERIAL_CHANGED);
            }
        }

        internal static event Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_BeforeArgs
            _beforeON_DRAG_AND_DROP_MATERIAL_CHANGED;

        internal static event Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_AfterArgs
            _afterON_DRAG_AND_DROP_MATERIAL_CHANGED;

        private static void ON_DRAG_AND_DROP_MATERIAL_CHANGED(Action<GameObject, Material, Material> orig,
            GameObject sender, Material currentMaterial, Material newMaterial)
        {
            Delegates.Params_ON_DRAG_AND_DROP_MATERIAL_CHANGED @params = new()
            {
                sender = sender, currentMaterial = currentMaterial, newMaterial = newMaterial
            };
            if (_beforeON_DRAG_AND_DROP_MATERIAL_CHANGED != null)
                foreach (Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_BeforeArgs toInvoke in
                         _beforeON_DRAG_AND_DROP_MATERIAL_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_DRAG_AND_DROP_MATERIAL_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            sender = @params.sender;
            currentMaterial = @params.currentMaterial;
            newMaterial = @params.newMaterial;
            orig(sender, currentMaterial, newMaterial);
            if (_afterON_DRAG_AND_DROP_MATERIAL_CHANGED != null)
                foreach (Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_AfterArgs toInvoke in
                         _afterON_DRAG_AND_DROP_MATERIAL_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_DRAG_AND_DROP_MATERIAL_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_TEXT_STYLE_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_TEXT_STYLE_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_TEXT_STYLE_PROPERTY_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXT_STYLE_PROPERTY_CHANGED", false),
                    ON_TEXT_STYLE_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_BeforeArgs _beforeON_TEXT_STYLE_PROPERTY_CHANGED;
        internal static event Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_AfterArgs _afterON_TEXT_STYLE_PROPERTY_CHANGED;

        private static void ON_TEXT_STYLE_PROPERTY_CHANGED(Action<bool> orig, bool isChanged)
        {
            Delegates.Params_ON_TEXT_STYLE_PROPERTY_CHANGED @params = new()
            {
                isChanged = isChanged
            };
            if (_beforeON_TEXT_STYLE_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_BeforeArgs toInvoke in
                         _beforeON_TEXT_STYLE_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_TEXT_STYLE_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            isChanged = @params.isChanged;
            orig(isChanged);
            if (_afterON_TEXT_STYLE_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_AfterArgs toInvoke in
                         _afterON_TEXT_STYLE_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_TEXT_STYLE_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_COLOR_GRAIDENT_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_COLOR_GRAIDENT_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_COLOR_GRAIDENT_PROPERTY_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_COLOR_GRAIDENT_PROPERTY_CHANGED",
                        false), ON_COLOR_GRAIDENT_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_BeforeArgs
            _beforeON_COLOR_GRAIDENT_PROPERTY_CHANGED;

        internal static event Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_AfterArgs
            _afterON_COLOR_GRAIDENT_PROPERTY_CHANGED;

        private static void ON_COLOR_GRAIDENT_PROPERTY_CHANGED(Action<TMP_ColorGradient> orig,
            TMP_ColorGradient gradient)
        {
            Delegates.Params_ON_COLOR_GRAIDENT_PROPERTY_CHANGED @params = new()
            {
                gradient = gradient
            };
            if (_beforeON_COLOR_GRAIDENT_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_BeforeArgs toInvoke in
                         _beforeON_COLOR_GRAIDENT_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_COLOR_GRAIDENT_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            gradient = @params.gradient;
            orig(gradient);
            if (_afterON_COLOR_GRAIDENT_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_AfterArgs toInvoke in
                         _afterON_COLOR_GRAIDENT_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_COLOR_GRAIDENT_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_TEXT_CHANGED()
        {
            if (!HookedList.Contains("ON_TEXT_CHANGED"))
            {
                HookedList.Add("ON_TEXT_CHANGED");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXT_CHANGED", false),
                    ON_TEXT_CHANGED);
            }
        }

        internal static event Delegates.ON_TEXT_CHANGED_BeforeArgs _beforeON_TEXT_CHANGED;
        internal static event Delegates.ON_TEXT_CHANGED_AfterArgs _afterON_TEXT_CHANGED;

        private static void ON_TEXT_CHANGED(Action<Object> orig, Object obj)
        {
            Delegates.Params_ON_TEXT_CHANGED @params = new()
            {
                obj = obj
            };
            if (_beforeON_TEXT_CHANGED != null)
                foreach (Delegates.ON_TEXT_CHANGED_BeforeArgs toInvoke in _beforeON_TEXT_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_TEXT_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            obj = @params.obj;
            orig(obj);
            if (_afterON_TEXT_CHANGED != null)
                foreach (Delegates.ON_TEXT_CHANGED_AfterArgs toInvoke in _afterON_TEXT_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_TEXT_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_TMP_SETTINGS_CHANGED()
        {
            if (!HookedList.Contains("ON_TMP_SETTINGS_CHANGED"))
            {
                HookedList.Add("ON_TMP_SETTINGS_CHANGED");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TMP_SETTINGS_CHANGED", false),
                    ON_TMP_SETTINGS_CHANGED);
            }
        }

        internal static event Delegates.ON_TMP_SETTINGS_CHANGED_BeforeArgs _beforeON_TMP_SETTINGS_CHANGED;
        internal static event Delegates.ON_TMP_SETTINGS_CHANGED_AfterArgs _afterON_TMP_SETTINGS_CHANGED;

        private static void ON_TMP_SETTINGS_CHANGED(Action orig)
        {
            if (_beforeON_TMP_SETTINGS_CHANGED != null)
                foreach (Delegates.ON_TMP_SETTINGS_CHANGED_BeforeArgs toInvoke in _beforeON_TMP_SETTINGS_CHANGED
                             .GetInvocationList())
                    try
                    {
                        _beforeON_TMP_SETTINGS_CHANGED?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterON_TMP_SETTINGS_CHANGED != null)
                foreach (Delegates.ON_TMP_SETTINGS_CHANGED_AfterArgs toInvoke in _afterON_TMP_SETTINGS_CHANGED
                             .GetInvocationList())
                    try
                    {
                        _afterON_TMP_SETTINGS_CHANGED.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED()
        {
            if (!HookedList.Contains("ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED"))
            {
                HookedList.Add("ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED",
                        false), ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED);
            }
        }

        internal static event Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_BeforeArgs
            _beforeON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED;

        internal static event Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_AfterArgs
            _afterON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED;

        private static void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED(Action<bool, TextMeshProUGUI> orig, bool isChanged,
            TextMeshProUGUI obj)
        {
            Delegates.Params_ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED @params = new()
            {
                isChanged = isChanged, obj = obj
            };
            if (_beforeON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_BeforeArgs toInvoke in
                         _beforeON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _beforeON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            isChanged = @params.isChanged;
            obj = @params.obj;
            orig(isChanged, obj);
            if (_afterON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED != null)
                foreach (Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_AfterArgs toInvoke in
                         _afterON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED.GetInvocationList())
                    try
                    {
                        _afterON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookON_COMPUTE_DT_EVENT()
        {
            if (!HookedList.Contains("ON_COMPUTE_DT_EVENT"))
            {
                HookedList.Add("ON_COMPUTE_DT_EVENT");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_COMPUTE_DT_EVENT", false),
                    ON_COMPUTE_DT_EVENT);
            }
        }

        internal static event Delegates.ON_COMPUTE_DT_EVENT_BeforeArgs _beforeON_COMPUTE_DT_EVENT;
        internal static event Delegates.ON_COMPUTE_DT_EVENT_AfterArgs _afterON_COMPUTE_DT_EVENT;

        private static void ON_COMPUTE_DT_EVENT(Action<object, Compute_DT_EventArgs> orig, object Sender,
            Compute_DT_EventArgs e)
        {
            Delegates.Params_ON_COMPUTE_DT_EVENT @params = new()
            {
                Sender = Sender, e = e
            };
            if (_beforeON_COMPUTE_DT_EVENT != null)
                foreach (Delegates.ON_COMPUTE_DT_EVENT_BeforeArgs toInvoke in _beforeON_COMPUTE_DT_EVENT
                             .GetInvocationList())
                    try
                    {
                        _beforeON_COMPUTE_DT_EVENT?.Invoke(@params);
                    }
                    catch (Exception ex)
                    {
                        HKMirrorMod.DoLogError(ex);
                    }

            Sender = @params.Sender;
            e = @params.e;
            orig(Sender, e);
            if (_afterON_COMPUTE_DT_EVENT != null)
                foreach (Delegates.ON_COMPUTE_DT_EVENT_AfterArgs toInvoke in
                         _afterON_COMPUTE_DT_EVENT.GetInvocationList())
                    try
                    {
                        _afterON_COMPUTE_DT_EVENT.Invoke(@params);
                    }
                    catch (Exception ex)
                    {
                        HKMirrorMod.DoLogError(ex);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ON_COLOR_GRAIDENT_PROPERTY_CHANGED_AfterArgs(
            Params_ON_COLOR_GRAIDENT_PROPERTY_CHANGED args);

        public delegate void ON_COLOR_GRAIDENT_PROPERTY_CHANGED_BeforeArgs(
            Params_ON_COLOR_GRAIDENT_PROPERTY_CHANGED args);

        public delegate void ON_COLOR_GRAIDENT_PROPERTY_CHANGED_WithArgs(Action<TMP_ColorGradient> orig,
            TMP_ColorGradient gradient);

        public delegate void ON_COMPUTE_DT_EVENT_AfterArgs(Params_ON_COMPUTE_DT_EVENT args);

        public delegate void ON_COMPUTE_DT_EVENT_BeforeArgs(Params_ON_COMPUTE_DT_EVENT args);

        public delegate void ON_COMPUTE_DT_EVENT_WithArgs(Action<object, Compute_DT_EventArgs> orig, object Sender,
            Compute_DT_EventArgs e);

        public delegate void ON_DRAG_AND_DROP_MATERIAL_CHANGED_AfterArgs(Params_ON_DRAG_AND_DROP_MATERIAL_CHANGED args);

        public delegate void
            ON_DRAG_AND_DROP_MATERIAL_CHANGED_BeforeArgs(Params_ON_DRAG_AND_DROP_MATERIAL_CHANGED args);

        public delegate void ON_DRAG_AND_DROP_MATERIAL_CHANGED_WithArgs(Action<GameObject, Material, Material> orig,
            GameObject sender, Material currentMaterial, Material newMaterial);

        public delegate void ON_FONT_PROPERTY_CHANGED_AfterArgs(Params_ON_FONT_PROPERTY_CHANGED args);

        public delegate void ON_FONT_PROPERTY_CHANGED_BeforeArgs(Params_ON_FONT_PROPERTY_CHANGED args);

        public delegate void ON_FONT_PROPERTY_CHANGED_WithArgs(Action<bool, TMP_FontAsset> orig, bool isChanged,
            TMP_FontAsset font);

        public delegate void ON_MATERIAL_PROPERTY_CHANGED_AfterArgs(Params_ON_MATERIAL_PROPERTY_CHANGED args);

        public delegate void ON_MATERIAL_PROPERTY_CHANGED_BeforeArgs(Params_ON_MATERIAL_PROPERTY_CHANGED args);

        public delegate void ON_MATERIAL_PROPERTY_CHANGED_WithArgs(Action<bool, Material> orig, bool isChanged,
            Material mat);

        public delegate void ON_PRE_RENDER_OBJECT_CHANGED_AfterArgs();

        public delegate void ON_PRE_RENDER_OBJECT_CHANGED_BeforeArgs();

        public delegate void ON_PRE_RENDER_OBJECT_CHANGED_WithArgs(Action orig);

        public delegate void ON_SPRITE_ASSET_PROPERTY_CHANGED_AfterArgs(Params_ON_SPRITE_ASSET_PROPERTY_CHANGED args);

        public delegate void ON_SPRITE_ASSET_PROPERTY_CHANGED_BeforeArgs(Params_ON_SPRITE_ASSET_PROPERTY_CHANGED args);

        public delegate void ON_SPRITE_ASSET_PROPERTY_CHANGED_WithArgs(Action<bool, Object> orig, bool isChanged,
            Object obj);

        public delegate void ON_TEXT_CHANGED_AfterArgs(Params_ON_TEXT_CHANGED args);

        public delegate void ON_TEXT_CHANGED_BeforeArgs(Params_ON_TEXT_CHANGED args);

        public delegate void ON_TEXT_CHANGED_WithArgs(Action<Object> orig, Object obj);

        public delegate void ON_TEXT_STYLE_PROPERTY_CHANGED_AfterArgs(Params_ON_TEXT_STYLE_PROPERTY_CHANGED args);

        public delegate void ON_TEXT_STYLE_PROPERTY_CHANGED_BeforeArgs(Params_ON_TEXT_STYLE_PROPERTY_CHANGED args);

        public delegate void ON_TEXT_STYLE_PROPERTY_CHANGED_WithArgs(Action<bool> orig, bool isChanged);

        public delegate void ON_TEXTMESHPRO_PROPERTY_CHANGED_AfterArgs(Params_ON_TEXTMESHPRO_PROPERTY_CHANGED args);

        public delegate void ON_TEXTMESHPRO_PROPERTY_CHANGED_BeforeArgs(Params_ON_TEXTMESHPRO_PROPERTY_CHANGED args);

        public delegate void ON_TEXTMESHPRO_PROPERTY_CHANGED_WithArgs(Action<bool, TextMeshPro> orig, bool isChanged,
            TextMeshPro obj);

        public delegate void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_AfterArgs(
            Params_ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED args);

        public delegate void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_BeforeArgs(
            Params_ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED args);

        public delegate void ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_WithArgs(Action<bool, TextMeshProUGUI> orig,
            bool isChanged, TextMeshProUGUI obj);

        public delegate void ON_TMP_SETTINGS_CHANGED_AfterArgs();

        public delegate void ON_TMP_SETTINGS_CHANGED_BeforeArgs();

        public delegate void ON_TMP_SETTINGS_CHANGED_WithArgs(Action orig);

        public sealed class Params_ON_MATERIAL_PROPERTY_CHANGED
        {
            public bool isChanged;
            public Material mat;
        }

        public sealed class Params_ON_FONT_PROPERTY_CHANGED
        {
            public TMP_FontAsset font;
            public bool isChanged;
        }

        public sealed class Params_ON_SPRITE_ASSET_PROPERTY_CHANGED
        {
            public bool isChanged;
            public Object obj;
        }

        public sealed class Params_ON_TEXTMESHPRO_PROPERTY_CHANGED
        {
            public bool isChanged;
            public TextMeshPro obj;
        }

        public sealed class Params_ON_DRAG_AND_DROP_MATERIAL_CHANGED
        {
            public Material currentMaterial;
            public Material newMaterial;
            public GameObject sender;
        }

        public sealed class Params_ON_TEXT_STYLE_PROPERTY_CHANGED
        {
            public bool isChanged;
        }

        public sealed class Params_ON_COLOR_GRAIDENT_PROPERTY_CHANGED
        {
            public TMP_ColorGradient gradient;
        }

        public sealed class Params_ON_TEXT_CHANGED
        {
            public Object obj;
        }

        public sealed class Params_ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
        {
            public bool isChanged;
            public TextMeshProUGUI obj;
        }

        public sealed class Params_ON_COMPUTE_DT_EVENT
        {
            public Compute_DT_EventArgs e;
            public object Sender;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.ON_PRE_RENDER_OBJECT_CHANGED_BeforeArgs ON_PRE_RENDER_OBJECT_CHANGED
        {
            add
            {
                HookHandler._beforeON_PRE_RENDER_OBJECT_CHANGED += value;
                HookHandler.HookON_PRE_RENDER_OBJECT_CHANGED();
            }
            remove => HookHandler._beforeON_PRE_RENDER_OBJECT_CHANGED -= value;
        }

        public static event Delegates.ON_MATERIAL_PROPERTY_CHANGED_BeforeArgs ON_MATERIAL_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._beforeON_MATERIAL_PROPERTY_CHANGED += value;
                HookHandler.HookON_MATERIAL_PROPERTY_CHANGED();
            }
            remove => HookHandler._beforeON_MATERIAL_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_FONT_PROPERTY_CHANGED_BeforeArgs ON_FONT_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._beforeON_FONT_PROPERTY_CHANGED += value;
                HookHandler.HookON_FONT_PROPERTY_CHANGED();
            }
            remove => HookHandler._beforeON_FONT_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_BeforeArgs ON_SPRITE_ASSET_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._beforeON_SPRITE_ASSET_PROPERTY_CHANGED += value;
                HookHandler.HookON_SPRITE_ASSET_PROPERTY_CHANGED();
            }
            remove => HookHandler._beforeON_SPRITE_ASSET_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_BeforeArgs ON_TEXTMESHPRO_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._beforeON_TEXTMESHPRO_PROPERTY_CHANGED += value;
                HookHandler.HookON_TEXTMESHPRO_PROPERTY_CHANGED();
            }
            remove => HookHandler._beforeON_TEXTMESHPRO_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_BeforeArgs ON_DRAG_AND_DROP_MATERIAL_CHANGED
        {
            add
            {
                HookHandler._beforeON_DRAG_AND_DROP_MATERIAL_CHANGED += value;
                HookHandler.HookON_DRAG_AND_DROP_MATERIAL_CHANGED();
            }
            remove => HookHandler._beforeON_DRAG_AND_DROP_MATERIAL_CHANGED -= value;
        }

        public static event Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_BeforeArgs ON_TEXT_STYLE_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._beforeON_TEXT_STYLE_PROPERTY_CHANGED += value;
                HookHandler.HookON_TEXT_STYLE_PROPERTY_CHANGED();
            }
            remove => HookHandler._beforeON_TEXT_STYLE_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_BeforeArgs ON_COLOR_GRAIDENT_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._beforeON_COLOR_GRAIDENT_PROPERTY_CHANGED += value;
                HookHandler.HookON_COLOR_GRAIDENT_PROPERTY_CHANGED();
            }
            remove => HookHandler._beforeON_COLOR_GRAIDENT_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_TEXT_CHANGED_BeforeArgs ON_TEXT_CHANGED
        {
            add
            {
                HookHandler._beforeON_TEXT_CHANGED += value;
                HookHandler.HookON_TEXT_CHANGED();
            }
            remove => HookHandler._beforeON_TEXT_CHANGED -= value;
        }

        public static event Delegates.ON_TMP_SETTINGS_CHANGED_BeforeArgs ON_TMP_SETTINGS_CHANGED
        {
            add
            {
                HookHandler._beforeON_TMP_SETTINGS_CHANGED += value;
                HookHandler.HookON_TMP_SETTINGS_CHANGED();
            }
            remove => HookHandler._beforeON_TMP_SETTINGS_CHANGED -= value;
        }

        public static event Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_BeforeArgs
            ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
            {
                add
                {
                    HookHandler._beforeON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED += value;
                    HookHandler.HookON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED();
                }
                remove => HookHandler._beforeON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED -= value;
            }

        public static event Delegates.ON_COMPUTE_DT_EVENT_BeforeArgs ON_COMPUTE_DT_EVENT
        {
            add
            {
                HookHandler._beforeON_COMPUTE_DT_EVENT += value;
                HookHandler.HookON_COMPUTE_DT_EVENT();
            }
            remove => HookHandler._beforeON_COMPUTE_DT_EVENT -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.ON_PRE_RENDER_OBJECT_CHANGED_AfterArgs ON_PRE_RENDER_OBJECT_CHANGED
        {
            add
            {
                HookHandler._afterON_PRE_RENDER_OBJECT_CHANGED += value;
                HookHandler.HookON_PRE_RENDER_OBJECT_CHANGED();
            }
            remove => HookHandler._afterON_PRE_RENDER_OBJECT_CHANGED -= value;
        }

        public static event Delegates.ON_MATERIAL_PROPERTY_CHANGED_AfterArgs ON_MATERIAL_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._afterON_MATERIAL_PROPERTY_CHANGED += value;
                HookHandler.HookON_MATERIAL_PROPERTY_CHANGED();
            }
            remove => HookHandler._afterON_MATERIAL_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_FONT_PROPERTY_CHANGED_AfterArgs ON_FONT_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._afterON_FONT_PROPERTY_CHANGED += value;
                HookHandler.HookON_FONT_PROPERTY_CHANGED();
            }
            remove => HookHandler._afterON_FONT_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_AfterArgs ON_SPRITE_ASSET_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._afterON_SPRITE_ASSET_PROPERTY_CHANGED += value;
                HookHandler.HookON_SPRITE_ASSET_PROPERTY_CHANGED();
            }
            remove => HookHandler._afterON_SPRITE_ASSET_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_AfterArgs ON_TEXTMESHPRO_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._afterON_TEXTMESHPRO_PROPERTY_CHANGED += value;
                HookHandler.HookON_TEXTMESHPRO_PROPERTY_CHANGED();
            }
            remove => HookHandler._afterON_TEXTMESHPRO_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_AfterArgs ON_DRAG_AND_DROP_MATERIAL_CHANGED
        {
            add
            {
                HookHandler._afterON_DRAG_AND_DROP_MATERIAL_CHANGED += value;
                HookHandler.HookON_DRAG_AND_DROP_MATERIAL_CHANGED();
            }
            remove => HookHandler._afterON_DRAG_AND_DROP_MATERIAL_CHANGED -= value;
        }

        public static event Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_AfterArgs ON_TEXT_STYLE_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._afterON_TEXT_STYLE_PROPERTY_CHANGED += value;
                HookHandler.HookON_TEXT_STYLE_PROPERTY_CHANGED();
            }
            remove => HookHandler._afterON_TEXT_STYLE_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_AfterArgs ON_COLOR_GRAIDENT_PROPERTY_CHANGED
        {
            add
            {
                HookHandler._afterON_COLOR_GRAIDENT_PROPERTY_CHANGED += value;
                HookHandler.HookON_COLOR_GRAIDENT_PROPERTY_CHANGED();
            }
            remove => HookHandler._afterON_COLOR_GRAIDENT_PROPERTY_CHANGED -= value;
        }

        public static event Delegates.ON_TEXT_CHANGED_AfterArgs ON_TEXT_CHANGED
        {
            add
            {
                HookHandler._afterON_TEXT_CHANGED += value;
                HookHandler.HookON_TEXT_CHANGED();
            }
            remove => HookHandler._afterON_TEXT_CHANGED -= value;
        }

        public static event Delegates.ON_TMP_SETTINGS_CHANGED_AfterArgs ON_TMP_SETTINGS_CHANGED
        {
            add
            {
                HookHandler._afterON_TMP_SETTINGS_CHANGED += value;
                HookHandler.HookON_TMP_SETTINGS_CHANGED();
            }
            remove => HookHandler._afterON_TMP_SETTINGS_CHANGED -= value;
        }

        public static event Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_AfterArgs
            ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
            {
                add
                {
                    HookHandler._afterON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED += value;
                    HookHandler.HookON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED();
                }
                remove => HookHandler._afterON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED -= value;
            }

        public static event Delegates.ON_COMPUTE_DT_EVENT_AfterArgs ON_COMPUTE_DT_EVENT
        {
            add
            {
                HookHandler._afterON_COMPUTE_DT_EVENT += value;
                HookHandler.HookON_COMPUTE_DT_EVENT();
            }
            remove => HookHandler._afterON_COMPUTE_DT_EVENT -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.ON_PRE_RENDER_OBJECT_CHANGED_WithArgs ON_PRE_RENDER_OBJECT_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_PRE_RENDER_OBJECT_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_PRE_RENDER_OBJECT_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_PRE_RENDER_OBJECT_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_PRE_RENDER_OBJECT_CHANGED", false),
                value);
        }

        public static event Delegates.ON_MATERIAL_PROPERTY_CHANGED_WithArgs ON_MATERIAL_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_MATERIAL_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_MATERIAL_PROPERTY_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_MATERIAL_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_MATERIAL_PROPERTY_CHANGED", false),
                value);
        }

        public static event Delegates.ON_FONT_PROPERTY_CHANGED_WithArgs ON_FONT_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_FONT_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_FONT_PROPERTY_CHANGED", false), value);
            remove => HookEndpointManager.Remove<Delegates.ON_FONT_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_FONT_PROPERTY_CHANGED", false), value);
        }

        public static event Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_WithArgs ON_SPRITE_ASSET_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_SPRITE_ASSET_PROPERTY_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_SPRITE_ASSET_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_SPRITE_ASSET_PROPERTY_CHANGED", false),
                value);
        }

        public static event Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_WithArgs ON_TEXTMESHPRO_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXTMESHPRO_PROPERTY_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_TEXTMESHPRO_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXTMESHPRO_PROPERTY_CHANGED", false),
                value);
        }

        public static event Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_WithArgs ON_DRAG_AND_DROP_MATERIAL_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_DRAG_AND_DROP_MATERIAL_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_DRAG_AND_DROP_MATERIAL_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_DRAG_AND_DROP_MATERIAL_CHANGED", false),
                value);
        }

        public static event Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_WithArgs ON_TEXT_STYLE_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXT_STYLE_PROPERTY_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_TEXT_STYLE_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXT_STYLE_PROPERTY_CHANGED", false),
                value);
        }

        public static event Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_WithArgs ON_COLOR_GRAIDENT_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_COLOR_GRAIDENT_PROPERTY_CHANGED", false),
                value);
            remove => HookEndpointManager.Remove<Delegates.ON_COLOR_GRAIDENT_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_COLOR_GRAIDENT_PROPERTY_CHANGED", false),
                value);
        }

        public static event Delegates.ON_TEXT_CHANGED_WithArgs ON_TEXT_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_TEXT_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXT_CHANGED", false), value);
            remove => HookEndpointManager.Remove<Delegates.ON_TEXT_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXT_CHANGED", false), value);
        }

        public static event Delegates.ON_TMP_SETTINGS_CHANGED_WithArgs ON_TMP_SETTINGS_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_TMP_SETTINGS_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TMP_SETTINGS_CHANGED", false), value);
            remove => HookEndpointManager.Remove<Delegates.ON_TMP_SETTINGS_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TMP_SETTINGS_CHANGED", false), value);
        }

        public static event Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_WithArgs ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED
        {
            add => HookEndpointManager.Add<Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED",
                    false), value);
            remove => HookEndpointManager.Remove<Delegates.ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_TEXTMESHPRO_UGUI_PROPERTY_CHANGED",
                    false), value);
        }

        public static event Delegates.ON_COMPUTE_DT_EVENT_WithArgs ON_COMPUTE_DT_EVENT
        {
            add => HookEndpointManager.Add<Delegates.ON_COMPUTE_DT_EVENT_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_COMPUTE_DT_EVENT", false), value);
            remove => HookEndpointManager.Remove<Delegates.ON_COMPUTE_DT_EVENT_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMPro_EventManager), "ON_COMPUTE_DT_EVENT", false), value);
        }
    }
}