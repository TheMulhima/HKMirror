namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SteepSlope class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSteepSlope
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.SteepSlope.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.SteepSlope.orig_Start orig, SteepSlope self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookOnCollisionStay2D()
        {
            if (!HookedList.Contains("OnCollisionStay2D"))
            {
                HookedList.Add("OnCollisionStay2D");
                On.SteepSlope.OnCollisionStay2D += OnCollisionStay2D;
            }
        }

        internal static event Delegates.OnCollisionStay2D_BeforeArgs _beforeOnCollisionStay2D;
        internal static event Delegates.OnCollisionStay2D_NormalArgs _afterOnCollisionStay2D;

        private static void OnCollisionStay2D(On.SteepSlope.orig_OnCollisionStay2D orig, SteepSlope self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionStay2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionStay2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionStay2D != null) _afterOnCollisionStay2D.Invoke(@params);
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.SteepSlope.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_NormalArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.SteepSlope.orig_OnCollisionEnter2D orig, SteepSlope self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionEnter2D != null) _afterOnCollisionEnter2D.Invoke(@params);
        }

        internal static void HookOnCollisionExit2D()
        {
            if (!HookedList.Contains("OnCollisionExit2D"))
            {
                HookedList.Add("OnCollisionExit2D");
                On.SteepSlope.OnCollisionExit2D += OnCollisionExit2D;
            }
        }

        internal static event Delegates.OnCollisionExit2D_BeforeArgs _beforeOnCollisionExit2D;
        internal static event Delegates.OnCollisionExit2D_NormalArgs _afterOnCollisionExit2D;

        private static void OnCollisionExit2D(On.SteepSlope.orig_OnCollisionExit2D orig, SteepSlope self,
            Collision2D collision)
        {
            Delegates.Params_OnCollisionExit2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnCollisionExit2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnCollisionExit2D != null) _afterOnCollisionExit2D.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_NormalArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionExit2D_BeforeArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionExit2D_NormalArgs(Params_OnCollisionExit2D args);

        public delegate void OnCollisionStay2D_BeforeArgs(Params_OnCollisionStay2D args);

        public delegate void OnCollisionStay2D_NormalArgs(Params_OnCollisionStay2D args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Start
        {
            public SteepSlope self;
        }

        public sealed class Params_OnCollisionStay2D
        {
            public Collision2D collision;
            public SteepSlope self;
        }

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D collision;
            public SteepSlope self;
        }

        public sealed class Params_OnCollisionExit2D
        {
            public Collision2D collision;
            public SteepSlope self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnCollisionStay2D_BeforeArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._beforeOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._beforeOnCollisionStay2D -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_BeforeArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._beforeOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._beforeOnCollisionExit2D -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnCollisionStay2D_NormalArgs OnCollisionStay2D
        {
            add
            {
                HookHandler._afterOnCollisionStay2D += value;
                HookHandler.HookOnCollisionStay2D();
            }
            remove => HookHandler._afterOnCollisionStay2D -= value;
        }

        public static event Delegates.OnCollisionEnter2D_NormalArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.OnCollisionExit2D_NormalArgs OnCollisionExit2D
        {
            add
            {
                HookHandler._afterOnCollisionExit2D += value;
                HookHandler.HookOnCollisionExit2D();
            }
            remove => HookHandler._afterOnCollisionExit2D -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.SteepSlope.hook_Start Start
        {
            add => On.SteepSlope.Start += value;
            remove => On.SteepSlope.Start -= value;
        }

        public static event On.SteepSlope.hook_OnCollisionStay2D OnCollisionStay2D
        {
            add => On.SteepSlope.OnCollisionStay2D += value;
            remove => On.SteepSlope.OnCollisionStay2D -= value;
        }

        public static event On.SteepSlope.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.SteepSlope.OnCollisionEnter2D += value;
            remove => On.SteepSlope.OnCollisionEnter2D -= value;
        }

        public static event On.SteepSlope.hook_OnCollisionExit2D OnCollisionExit2D
        {
            add => On.SteepSlope.OnCollisionExit2D += value;
            remove => On.SteepSlope.OnCollisionExit2D -= value;
        }
    }
}