using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for PlayMakerUGuiDragEventsProxy class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerUGuiDragEventsProxy
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnBeginDrag()
{
if (!HookedList.Contains("OnBeginDrag"))
{
HookedList.Add("OnBeginDrag");
On.PlayMakerUGuiDragEventsProxy.OnBeginDrag += OnBeginDrag;

}
}
internal static event Delegates.OnBeginDrag_BeforeArgs _beforeOnBeginDrag;
internal static event Delegates.OnBeginDrag_AfterArgs _afterOnBeginDrag;
private static void OnBeginDrag(On.PlayMakerUGuiDragEventsProxy.orig_OnBeginDrag orig,PlayMakerUGuiDragEventsProxy self,  UnityEngine.EventSystems.PointerEventData data)
{
Delegates.Params_OnBeginDrag @params = new() 
{
self = self
, data = data
};
if (_beforeOnBeginDrag != null)
{
foreach (Delegates.OnBeginDrag_BeforeArgs toInvoke in _beforeOnBeginDrag.GetInvocationList())
{
try
{
_beforeOnBeginDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
data = @params.data;
orig(self, data);
if (_afterOnBeginDrag != null)
{
foreach (Delegates.OnBeginDrag_AfterArgs toInvoke in _afterOnBeginDrag.GetInvocationList())
{
try
{
_afterOnBeginDrag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDrag()
{
if (!HookedList.Contains("OnDrag"))
{
HookedList.Add("OnDrag");
On.PlayMakerUGuiDragEventsProxy.OnDrag += OnDrag;

}
}
internal static event Delegates.OnDrag_BeforeArgs _beforeOnDrag;
internal static event Delegates.OnDrag_AfterArgs _afterOnDrag;
private static void OnDrag(On.PlayMakerUGuiDragEventsProxy.orig_OnDrag orig,PlayMakerUGuiDragEventsProxy self,  UnityEngine.EventSystems.PointerEventData data)
{
Delegates.Params_OnDrag @params = new() 
{
self = self
, data = data
};
if (_beforeOnDrag != null)
{
foreach (Delegates.OnDrag_BeforeArgs toInvoke in _beforeOnDrag.GetInvocationList())
{
try
{
_beforeOnDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
data = @params.data;
orig(self, data);
if (_afterOnDrag != null)
{
foreach (Delegates.OnDrag_AfterArgs toInvoke in _afterOnDrag.GetInvocationList())
{
try
{
_afterOnDrag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEndDrag()
{
if (!HookedList.Contains("OnEndDrag"))
{
HookedList.Add("OnEndDrag");
On.PlayMakerUGuiDragEventsProxy.OnEndDrag += OnEndDrag;

}
}
internal static event Delegates.OnEndDrag_BeforeArgs _beforeOnEndDrag;
internal static event Delegates.OnEndDrag_AfterArgs _afterOnEndDrag;
private static void OnEndDrag(On.PlayMakerUGuiDragEventsProxy.orig_OnEndDrag orig,PlayMakerUGuiDragEventsProxy self,  UnityEngine.EventSystems.PointerEventData data)
{
Delegates.Params_OnEndDrag @params = new() 
{
self = self
, data = data
};
if (_beforeOnEndDrag != null)
{
foreach (Delegates.OnEndDrag_BeforeArgs toInvoke in _beforeOnEndDrag.GetInvocationList())
{
try
{
_beforeOnEndDrag?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
data = @params.data;
orig(self, data);
if (_afterOnEndDrag != null)
{
foreach (Delegates.OnEndDrag_AfterArgs toInvoke in _afterOnEndDrag.GetInvocationList())
{
try
{
_afterOnEndDrag.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnBeginDrag
{
public PlayMakerUGuiDragEventsProxy self;
public UnityEngine.EventSystems.PointerEventData data;
}
public delegate void OnBeginDrag_BeforeArgs(Params_OnBeginDrag args);
public delegate void OnBeginDrag_AfterArgs(Params_OnBeginDrag args);
public delegate void OnBeginDrag_WithArgs (Action<PlayMakerUGuiDragEventsProxy,  UnityEngine.EventSystems.PointerEventData> orig, PlayMakerUGuiDragEventsProxy self,  UnityEngine.EventSystems.PointerEventData data);
public sealed class Params_OnDrag
{
public PlayMakerUGuiDragEventsProxy self;
public UnityEngine.EventSystems.PointerEventData data;
}
public delegate void OnDrag_BeforeArgs(Params_OnDrag args);
public delegate void OnDrag_AfterArgs(Params_OnDrag args);
public delegate void OnDrag_WithArgs (Action<PlayMakerUGuiDragEventsProxy,  UnityEngine.EventSystems.PointerEventData> orig, PlayMakerUGuiDragEventsProxy self,  UnityEngine.EventSystems.PointerEventData data);
public sealed class Params_OnEndDrag
{
public PlayMakerUGuiDragEventsProxy self;
public UnityEngine.EventSystems.PointerEventData data;
}
public delegate void OnEndDrag_BeforeArgs(Params_OnEndDrag args);
public delegate void OnEndDrag_AfterArgs(Params_OnEndDrag args);
public delegate void OnEndDrag_WithArgs (Action<PlayMakerUGuiDragEventsProxy,  UnityEngine.EventSystems.PointerEventData> orig, PlayMakerUGuiDragEventsProxy self,  UnityEngine.EventSystems.PointerEventData data);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnBeginDrag_BeforeArgs OnBeginDrag
{
add
{

HookHandler._beforeOnBeginDrag += value;
HookHandler.HookOnBeginDrag();
}
remove => HookHandler._beforeOnBeginDrag -= value;
}
public static event Delegates.OnDrag_BeforeArgs OnDrag
{
add
{

HookHandler._beforeOnDrag += value;
HookHandler.HookOnDrag();
}
remove => HookHandler._beforeOnDrag -= value;
}
public static event Delegates.OnEndDrag_BeforeArgs OnEndDrag
{
add
{

HookHandler._beforeOnEndDrag += value;
HookHandler.HookOnEndDrag();
}
remove => HookHandler._beforeOnEndDrag -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnBeginDrag_AfterArgs OnBeginDrag
{
add
{

HookHandler._afterOnBeginDrag += value;
HookHandler.HookOnBeginDrag();
}
remove => HookHandler._afterOnBeginDrag -= value;
}
public static event Delegates.OnDrag_AfterArgs OnDrag
{
add
{

HookHandler._afterOnDrag += value;
HookHandler.HookOnDrag();
}
remove => HookHandler._afterOnDrag -= value;
}
public static event Delegates.OnEndDrag_AfterArgs OnEndDrag
{
add
{

HookHandler._afterOnEndDrag += value;
HookHandler.HookOnEndDrag();
}
remove => HookHandler._afterOnEndDrag -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.PlayMakerUGuiDragEventsProxy.hook_OnBeginDrag OnBeginDrag
{
add => On.PlayMakerUGuiDragEventsProxy.OnBeginDrag += value;
remove => On.PlayMakerUGuiDragEventsProxy.OnBeginDrag -= value;
}
public static event On.PlayMakerUGuiDragEventsProxy.hook_OnDrag OnDrag
{
add => On.PlayMakerUGuiDragEventsProxy.OnDrag += value;
remove => On.PlayMakerUGuiDragEventsProxy.OnDrag -= value;
}
public static event On.PlayMakerUGuiDragEventsProxy.hook_OnEndDrag OnEndDrag
{
add => On.PlayMakerUGuiDragEventsProxy.OnEndDrag += value;
remove => On.PlayMakerUGuiDragEventsProxy.OnEndDrag -= value;
}
}

}
