using UnityEngine.EventSystems;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayMakerUGuiDragEventsProxy class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayMakerUGuiDragEventsProxy
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnBeginDrag()
        {
            if (!HookedList.Contains("OnBeginDrag"))
            {
                HookedList.Add("OnBeginDrag");
                On.PlayMakerUGuiDragEventsProxy.OnBeginDrag += OnBeginDrag;
            }
        }

        internal static event Delegates.OnBeginDrag_BeforeArgs _beforeOnBeginDrag;
        internal static event Delegates.OnBeginDrag_NormalArgs _afterOnBeginDrag;

        private static void OnBeginDrag(On.PlayMakerUGuiDragEventsProxy.orig_OnBeginDrag orig,
            PlayMakerUGuiDragEventsProxy self, PointerEventData data)
        {
            Delegates.Params_OnBeginDrag @params = new()
            {
                self = self, data = data
            };
            _beforeOnBeginDrag?.Invoke(@params);
            self = @params.self;
            data = @params.data;
            orig(self, data);
            if (_afterOnBeginDrag != null) _afterOnBeginDrag.Invoke(@params);
        }

        internal static void HookOnDrag()
        {
            if (!HookedList.Contains("OnDrag"))
            {
                HookedList.Add("OnDrag");
                On.PlayMakerUGuiDragEventsProxy.OnDrag += OnDrag;
            }
        }

        internal static event Delegates.OnDrag_BeforeArgs _beforeOnDrag;
        internal static event Delegates.OnDrag_NormalArgs _afterOnDrag;

        private static void OnDrag(On.PlayMakerUGuiDragEventsProxy.orig_OnDrag orig, PlayMakerUGuiDragEventsProxy self,
            PointerEventData data)
        {
            Delegates.Params_OnDrag @params = new()
            {
                self = self, data = data
            };
            _beforeOnDrag?.Invoke(@params);
            self = @params.self;
            data = @params.data;
            orig(self, data);
            if (_afterOnDrag != null) _afterOnDrag.Invoke(@params);
        }

        internal static void HookOnEndDrag()
        {
            if (!HookedList.Contains("OnEndDrag"))
            {
                HookedList.Add("OnEndDrag");
                On.PlayMakerUGuiDragEventsProxy.OnEndDrag += OnEndDrag;
            }
        }

        internal static event Delegates.OnEndDrag_BeforeArgs _beforeOnEndDrag;
        internal static event Delegates.OnEndDrag_NormalArgs _afterOnEndDrag;

        private static void OnEndDrag(On.PlayMakerUGuiDragEventsProxy.orig_OnEndDrag orig,
            PlayMakerUGuiDragEventsProxy self, PointerEventData data)
        {
            Delegates.Params_OnEndDrag @params = new()
            {
                self = self, data = data
            };
            _beforeOnEndDrag?.Invoke(@params);
            self = @params.self;
            data = @params.data;
            orig(self, data);
            if (_afterOnEndDrag != null) _afterOnEndDrag.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnBeginDrag_BeforeArgs(Params_OnBeginDrag args);

        public delegate void OnBeginDrag_NormalArgs(Params_OnBeginDrag args);

        public delegate void OnDrag_BeforeArgs(Params_OnDrag args);

        public delegate void OnDrag_NormalArgs(Params_OnDrag args);

        public delegate void OnEndDrag_BeforeArgs(Params_OnEndDrag args);

        public delegate void OnEndDrag_NormalArgs(Params_OnEndDrag args);

        public sealed class Params_OnBeginDrag
        {
            public PointerEventData data;
            public PlayMakerUGuiDragEventsProxy self;
        }

        public sealed class Params_OnDrag
        {
            public PointerEventData data;
            public PlayMakerUGuiDragEventsProxy self;
        }

        public sealed class Params_OnEndDrag
        {
            public PointerEventData data;
            public PlayMakerUGuiDragEventsProxy self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnBeginDrag_BeforeArgs OnBeginDrag
        {
            add
            {
                HookHandler._beforeOnBeginDrag += value;
                HookHandler.HookOnBeginDrag();
            }
            remove => HookHandler._beforeOnBeginDrag -= value;
        }

        public static event Delegates.OnDrag_BeforeArgs OnDrag
        {
            add
            {
                HookHandler._beforeOnDrag += value;
                HookHandler.HookOnDrag();
            }
            remove => HookHandler._beforeOnDrag -= value;
        }

        public static event Delegates.OnEndDrag_BeforeArgs OnEndDrag
        {
            add
            {
                HookHandler._beforeOnEndDrag += value;
                HookHandler.HookOnEndDrag();
            }
            remove => HookHandler._beforeOnEndDrag -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnBeginDrag_NormalArgs OnBeginDrag
        {
            add
            {
                HookHandler._afterOnBeginDrag += value;
                HookHandler.HookOnBeginDrag();
            }
            remove => HookHandler._afterOnBeginDrag -= value;
        }

        public static event Delegates.OnDrag_NormalArgs OnDrag
        {
            add
            {
                HookHandler._afterOnDrag += value;
                HookHandler.HookOnDrag();
            }
            remove => HookHandler._afterOnDrag -= value;
        }

        public static event Delegates.OnEndDrag_NormalArgs OnEndDrag
        {
            add
            {
                HookHandler._afterOnEndDrag += value;
                HookHandler.HookOnEndDrag();
            }
            remove => HookHandler._afterOnEndDrag -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayMakerUGuiDragEventsProxy.hook_OnBeginDrag OnBeginDrag
        {
            add => On.PlayMakerUGuiDragEventsProxy.OnBeginDrag += value;
            remove => On.PlayMakerUGuiDragEventsProxy.OnBeginDrag -= value;
        }

        public static event On.PlayMakerUGuiDragEventsProxy.hook_OnDrag OnDrag
        {
            add => On.PlayMakerUGuiDragEventsProxy.OnDrag += value;
            remove => On.PlayMakerUGuiDragEventsProxy.OnDrag -= value;
        }

        public static event On.PlayMakerUGuiDragEventsProxy.hook_OnEndDrag OnEndDrag
        {
            add => On.PlayMakerUGuiDragEventsProxy.OnEndDrag += value;
            remove => On.PlayMakerUGuiDragEventsProxy.OnEndDrag -= value;
        }
    }
}