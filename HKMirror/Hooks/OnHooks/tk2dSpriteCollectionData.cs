using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dSpriteCollectionData class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteCollectionData
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Transient()
        {
            if (!HookedList.Contains("get_Transient"))
            {
                HookedList.Add("get_Transient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Transient"),
                    get_Transient);
            }
        }

        internal static event Delegates.get_Transient_BeforeArgs _beforeget_Transient;
        internal static event Delegates.get_Transient_NormalArgs _afterget_Transient;

        private static bool get_Transient(Func<tk2dSpriteCollectionData, bool> orig, tk2dSpriteCollectionData self)
        {
            Delegates.Params_get_Transient @params = new()
            {
                self = self
            };
            _beforeget_Transient?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Transient != null) retVal = _afterget_Transient.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Transient()
        {
            if (!HookedList.Contains("set_Transient"))
            {
                HookedList.Add("set_Transient");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "set_Transient"),
                    set_Transient);
            }
        }

        internal static event Delegates.set_Transient_BeforeArgs _beforeset_Transient;
        internal static event Delegates.set_Transient_NormalArgs _afterset_Transient;

        private static void set_Transient(Action<tk2dSpriteCollectionData, bool> orig, tk2dSpriteCollectionData self,
            bool value)
        {
            Delegates.Params_set_Transient @params = new()
            {
                self = self, value = value
            };
            _beforeset_Transient?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Transient != null) _afterset_Transient.Invoke(@params);
        }

        internal static void Hookget_Count()
        {
            if (!HookedList.Contains("get_Count"))
            {
                HookedList.Add("get_Count");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Count"), get_Count);
            }
        }

        internal static event Delegates.get_Count_BeforeArgs _beforeget_Count;
        internal static event Delegates.get_Count_NormalArgs _afterget_Count;

        private static int get_Count(Func<tk2dSpriteCollectionData, int> orig, tk2dSpriteCollectionData self)
        {
            Delegates.Params_get_Count @params = new()
            {
                self = self
            };
            _beforeget_Count?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Count != null) retVal = _afterget_Count.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSpriteIdByName_string()
        {
            if (!HookedList.Contains("GetSpriteIdByName_string"))
            {
                HookedList.Add("GetSpriteIdByName_string");
                On.tk2dSpriteCollectionData.GetSpriteIdByName_string += GetSpriteIdByName_string;
            }
        }

        internal static event Delegates.GetSpriteIdByName_string_BeforeArgs _beforeGetSpriteIdByName_string;
        internal static event Delegates.GetSpriteIdByName_string_NormalArgs _afterGetSpriteIdByName_string;

        private static int GetSpriteIdByName_string(On.tk2dSpriteCollectionData.orig_GetSpriteIdByName_string orig,
            tk2dSpriteCollectionData self, string name)
        {
            Delegates.Params_GetSpriteIdByName_string @params = new()
            {
                self = self, name = name
            };
            _beforeGetSpriteIdByName_string?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            var retVal = orig(self, name);
            if (_afterGetSpriteIdByName_string != null) retVal = _afterGetSpriteIdByName_string.Invoke(@params);
            return retVal;
        }

        internal static void HookGetSpriteIdByName_string_int()
        {
            if (!HookedList.Contains("GetSpriteIdByName_string_int"))
            {
                HookedList.Add("GetSpriteIdByName_string_int");
                On.tk2dSpriteCollectionData.GetSpriteIdByName_string_int += GetSpriteIdByName_string_int;
            }
        }

        internal static event Delegates.GetSpriteIdByName_string_int_BeforeArgs _beforeGetSpriteIdByName_string_int;
        internal static event Delegates.GetSpriteIdByName_string_int_NormalArgs _afterGetSpriteIdByName_string_int;

        private static int GetSpriteIdByName_string_int(
            On.tk2dSpriteCollectionData.orig_GetSpriteIdByName_string_int orig, tk2dSpriteCollectionData self,
            string name, int defaultValue)
        {
            Delegates.Params_GetSpriteIdByName_string_int @params = new()
            {
                self = self, name = name, defaultValue = defaultValue
            };
            _beforeGetSpriteIdByName_string_int?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            defaultValue = @params.defaultValue;
            var retVal = orig(self, name, defaultValue);
            if (_afterGetSpriteIdByName_string_int != null) retVal = _afterGetSpriteIdByName_string_int.Invoke(@params);
            return retVal;
        }

        internal static void HookClearDictionary()
        {
            if (!HookedList.Contains("ClearDictionary"))
            {
                HookedList.Add("ClearDictionary");
                On.tk2dSpriteCollectionData.ClearDictionary += ClearDictionary;
            }
        }

        internal static event Delegates.ClearDictionary_BeforeArgs _beforeClearDictionary;
        internal static event Delegates.ClearDictionary_NormalArgs _afterClearDictionary;

        private static void ClearDictionary(On.tk2dSpriteCollectionData.orig_ClearDictionary orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_ClearDictionary @params = new()
            {
                self = self
            };
            _beforeClearDictionary?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearDictionary != null) _afterClearDictionary.Invoke(@params);
        }

        internal static void HookGetSpriteDefinition()
        {
            if (!HookedList.Contains("GetSpriteDefinition"))
            {
                HookedList.Add("GetSpriteDefinition");
                On.tk2dSpriteCollectionData.GetSpriteDefinition += GetSpriteDefinition;
            }
        }

        internal static event Delegates.GetSpriteDefinition_BeforeArgs _beforeGetSpriteDefinition;
        internal static event Delegates.GetSpriteDefinition_NormalArgs _afterGetSpriteDefinition;

        private static tk2dSpriteDefinition GetSpriteDefinition(
            On.tk2dSpriteCollectionData.orig_GetSpriteDefinition orig, tk2dSpriteCollectionData self, string name)
        {
            Delegates.Params_GetSpriteDefinition @params = new()
            {
                self = self, name = name
            };
            _beforeGetSpriteDefinition?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            var retVal = orig(self, name);
            if (_afterGetSpriteDefinition != null) retVal = _afterGetSpriteDefinition.Invoke(@params);
            return retVal;
        }

        internal static void HookInitDictionary()
        {
            if (!HookedList.Contains("InitDictionary"))
            {
                HookedList.Add("InitDictionary");
                On.tk2dSpriteCollectionData.InitDictionary += InitDictionary;
            }
        }

        internal static event Delegates.InitDictionary_BeforeArgs _beforeInitDictionary;
        internal static event Delegates.InitDictionary_NormalArgs _afterInitDictionary;

        private static void InitDictionary(On.tk2dSpriteCollectionData.orig_InitDictionary orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_InitDictionary @params = new()
            {
                self = self
            };
            _beforeInitDictionary?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInitDictionary != null) _afterInitDictionary.Invoke(@params);
        }

        internal static void Hookget_FirstValidDefinition()
        {
            if (!HookedList.Contains("get_FirstValidDefinition"))
            {
                HookedList.Add("get_FirstValidDefinition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinition"),
                    get_FirstValidDefinition);
            }
        }

        internal static event Delegates.get_FirstValidDefinition_BeforeArgs _beforeget_FirstValidDefinition;
        internal static event Delegates.get_FirstValidDefinition_NormalArgs _afterget_FirstValidDefinition;

        private static tk2dSpriteDefinition get_FirstValidDefinition(
            Func<tk2dSpriteCollectionData, tk2dSpriteDefinition> orig, tk2dSpriteCollectionData self)
        {
            Delegates.Params_get_FirstValidDefinition @params = new()
            {
                self = self
            };
            _beforeget_FirstValidDefinition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FirstValidDefinition != null) retVal = _afterget_FirstValidDefinition.Invoke(@params);
            return retVal;
        }

        internal static void HookIsValidSpriteId()
        {
            if (!HookedList.Contains("IsValidSpriteId"))
            {
                HookedList.Add("IsValidSpriteId");
                On.tk2dSpriteCollectionData.IsValidSpriteId += IsValidSpriteId;
            }
        }

        internal static event Delegates.IsValidSpriteId_BeforeArgs _beforeIsValidSpriteId;
        internal static event Delegates.IsValidSpriteId_NormalArgs _afterIsValidSpriteId;

        private static bool IsValidSpriteId(On.tk2dSpriteCollectionData.orig_IsValidSpriteId orig,
            tk2dSpriteCollectionData self, int id)
        {
            Delegates.Params_IsValidSpriteId @params = new()
            {
                self = self, id = id
            };
            _beforeIsValidSpriteId?.Invoke(@params);
            self = @params.self;
            id = @params.id;
            var retVal = orig(self, id);
            if (_afterIsValidSpriteId != null) retVal = _afterIsValidSpriteId.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_FirstValidDefinitionIndex()
        {
            if (!HookedList.Contains("get_FirstValidDefinitionIndex"))
            {
                HookedList.Add("get_FirstValidDefinitionIndex");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinitionIndex"),
                    get_FirstValidDefinitionIndex);
            }
        }

        internal static event Delegates.get_FirstValidDefinitionIndex_BeforeArgs _beforeget_FirstValidDefinitionIndex;
        internal static event Delegates.get_FirstValidDefinitionIndex_NormalArgs _afterget_FirstValidDefinitionIndex;

        private static int get_FirstValidDefinitionIndex(Func<tk2dSpriteCollectionData, int> orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_get_FirstValidDefinitionIndex @params = new()
            {
                self = self
            };
            _beforeget_FirstValidDefinitionIndex?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FirstValidDefinitionIndex != null)
                retVal = _afterget_FirstValidDefinitionIndex.Invoke(@params);
            return retVal;
        }

        internal static void HookInitMaterialIds()
        {
            if (!HookedList.Contains("InitMaterialIds"))
            {
                HookedList.Add("InitMaterialIds");
                On.tk2dSpriteCollectionData.InitMaterialIds += InitMaterialIds;
            }
        }

        internal static event Delegates.InitMaterialIds_BeforeArgs _beforeInitMaterialIds;
        internal static event Delegates.InitMaterialIds_NormalArgs _afterInitMaterialIds;

        private static void InitMaterialIds(On.tk2dSpriteCollectionData.orig_InitMaterialIds orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_InitMaterialIds @params = new()
            {
                self = self
            };
            _beforeInitMaterialIds?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInitMaterialIds != null) _afterInitMaterialIds.Invoke(@params);
        }

        internal static void Hookget_inst()
        {
            if (!HookedList.Contains("get_inst"))
            {
                HookedList.Add("get_inst");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_inst"), get_inst);
            }
        }

        internal static event Delegates.get_inst_BeforeArgs _beforeget_inst;
        internal static event Delegates.get_inst_NormalArgs _afterget_inst;

        private static tk2dSpriteCollectionData get_inst(Func<tk2dSpriteCollectionData, tk2dSpriteCollectionData> orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_get_inst @params = new()
            {
                self = self
            };
            _beforeget_inst?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_inst != null) retVal = _afterget_inst.Invoke(@params);
            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.tk2dSpriteCollectionData.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_NormalArgs _afterInit;

        private static void Init(On.tk2dSpriteCollectionData.orig_Init orig, tk2dSpriteCollectionData self)
        {
            Delegates.Params_Init @params = new()
            {
                self = self
            };
            _beforeInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterInit != null) _afterInit.Invoke(@params);
        }

        internal static void HookCreateFromTexture()
        {
            if (!HookedList.Contains("CreateFromTexture"))
            {
                HookedList.Add("CreateFromTexture");
                On.tk2dSpriteCollectionData.CreateFromTexture += CreateFromTexture;
            }
        }

        internal static event Delegates.CreateFromTexture_BeforeArgs _beforeCreateFromTexture;
        internal static event Delegates.CreateFromTexture_NormalArgs _afterCreateFromTexture;

        private static tk2dSpriteCollectionData CreateFromTexture(
            On.tk2dSpriteCollectionData.orig_CreateFromTexture orig, Texture texture, tk2dSpriteCollectionSize size,
            string[] names, Rect[] regions, Vector2[] anchors)
        {
            Delegates.Params_CreateFromTexture @params = new()
            {
                texture = texture, size = size, names = names, regions = regions, anchors = anchors
            };
            _beforeCreateFromTexture?.Invoke(@params);
            texture = @params.texture;
            size = @params.size;
            names = @params.names;
            regions = @params.regions;
            anchors = @params.anchors;
            var retVal = orig(texture, size, names, regions, anchors);
            if (_afterCreateFromTexture != null) retVal = _afterCreateFromTexture.Invoke(@params);
            return retVal;
        }

        internal static void HookCreateFromTexturePacker()
        {
            if (!HookedList.Contains("CreateFromTexturePacker"))
            {
                HookedList.Add("CreateFromTexturePacker");
                On.tk2dSpriteCollectionData.CreateFromTexturePacker += CreateFromTexturePacker;
            }
        }

        internal static event Delegates.CreateFromTexturePacker_BeforeArgs _beforeCreateFromTexturePacker;
        internal static event Delegates.CreateFromTexturePacker_NormalArgs _afterCreateFromTexturePacker;

        private static tk2dSpriteCollectionData CreateFromTexturePacker(
            On.tk2dSpriteCollectionData.orig_CreateFromTexturePacker orig, tk2dSpriteCollectionSize size,
            string texturePackerData, Texture texture)
        {
            Delegates.Params_CreateFromTexturePacker @params = new()
            {
                size = size, texturePackerData = texturePackerData, texture = texture
            };
            _beforeCreateFromTexturePacker?.Invoke(@params);
            size = @params.size;
            texturePackerData = @params.texturePackerData;
            texture = @params.texture;
            var retVal = orig(size, texturePackerData, texture);
            if (_afterCreateFromTexturePacker != null) retVal = _afterCreateFromTexturePacker.Invoke(@params);
            return retVal;
        }

        internal static void HookResetPlatformData()
        {
            if (!HookedList.Contains("ResetPlatformData"))
            {
                HookedList.Add("ResetPlatformData");
                On.tk2dSpriteCollectionData.ResetPlatformData += ResetPlatformData;
            }
        }

        internal static event Delegates.ResetPlatformData_BeforeArgs _beforeResetPlatformData;
        internal static event Delegates.ResetPlatformData_NormalArgs _afterResetPlatformData;

        private static void ResetPlatformData(On.tk2dSpriteCollectionData.orig_ResetPlatformData orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_ResetPlatformData @params = new()
            {
                self = self
            };
            _beforeResetPlatformData?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetPlatformData != null) _afterResetPlatformData.Invoke(@params);
        }

        internal static void HookDestroyTextureInsts()
        {
            if (!HookedList.Contains("DestroyTextureInsts"))
            {
                HookedList.Add("DestroyTextureInsts");
                On.tk2dSpriteCollectionData.DestroyTextureInsts += DestroyTextureInsts;
            }
        }

        internal static event Delegates.DestroyTextureInsts_BeforeArgs _beforeDestroyTextureInsts;
        internal static event Delegates.DestroyTextureInsts_NormalArgs _afterDestroyTextureInsts;

        private static void DestroyTextureInsts(On.tk2dSpriteCollectionData.orig_DestroyTextureInsts orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_DestroyTextureInsts @params = new()
            {
                self = self
            };
            _beforeDestroyTextureInsts?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDestroyTextureInsts != null) _afterDestroyTextureInsts.Invoke(@params);
        }

        internal static void HookUnloadTextures()
        {
            if (!HookedList.Contains("UnloadTextures"))
            {
                HookedList.Add("UnloadTextures");
                On.tk2dSpriteCollectionData.UnloadTextures += UnloadTextures;
            }
        }

        internal static event Delegates.UnloadTextures_BeforeArgs _beforeUnloadTextures;
        internal static event Delegates.UnloadTextures_NormalArgs _afterUnloadTextures;

        private static void UnloadTextures(On.tk2dSpriteCollectionData.orig_UnloadTextures orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_UnloadTextures @params = new()
            {
                self = self
            };
            _beforeUnloadTextures?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUnloadTextures != null) _afterUnloadTextures.Invoke(@params);
        }

        internal static void HookDestroyMaterialInsts()
        {
            if (!HookedList.Contains("DestroyMaterialInsts"))
            {
                HookedList.Add("DestroyMaterialInsts");
                On.tk2dSpriteCollectionData.DestroyMaterialInsts += DestroyMaterialInsts;
            }
        }

        internal static event Delegates.DestroyMaterialInsts_BeforeArgs _beforeDestroyMaterialInsts;
        internal static event Delegates.DestroyMaterialInsts_NormalArgs _afterDestroyMaterialInsts;

        private static void DestroyMaterialInsts(On.tk2dSpriteCollectionData.orig_DestroyMaterialInsts orig,
            tk2dSpriteCollectionData self)
        {
            Delegates.Params_DestroyMaterialInsts @params = new()
            {
                self = self
            };
            _beforeDestroyMaterialInsts?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDestroyMaterialInsts != null) _afterDestroyMaterialInsts.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.tk2dSpriteCollectionData.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.tk2dSpriteCollectionData.orig_OnDestroy orig, tk2dSpriteCollectionData self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ClearDictionary_BeforeArgs(Params_ClearDictionary args);

        public delegate void ClearDictionary_NormalArgs(Params_ClearDictionary args);

        public delegate void CreateFromTexture_BeforeArgs(Params_CreateFromTexture args);

        public delegate tk2dSpriteCollectionData CreateFromTexture_NormalArgs(Params_CreateFromTexture args);

        public delegate void CreateFromTexturePacker_BeforeArgs(Params_CreateFromTexturePacker args);

        public delegate tk2dSpriteCollectionData
            CreateFromTexturePacker_NormalArgs(Params_CreateFromTexturePacker args);

        public delegate void DestroyMaterialInsts_BeforeArgs(Params_DestroyMaterialInsts args);

        public delegate void DestroyMaterialInsts_NormalArgs(Params_DestroyMaterialInsts args);

        public delegate void DestroyTextureInsts_BeforeArgs(Params_DestroyTextureInsts args);

        public delegate void DestroyTextureInsts_NormalArgs(Params_DestroyTextureInsts args);

        public delegate void get_Count_BeforeArgs(Params_get_Count args);

        public delegate int get_Count_NormalArgs(Params_get_Count args);

        public delegate void get_FirstValidDefinition_BeforeArgs(Params_get_FirstValidDefinition args);

        public delegate tk2dSpriteDefinition get_FirstValidDefinition_NormalArgs(Params_get_FirstValidDefinition args);

        public delegate void get_FirstValidDefinitionIndex_BeforeArgs(Params_get_FirstValidDefinitionIndex args);

        public delegate int get_FirstValidDefinitionIndex_NormalArgs(Params_get_FirstValidDefinitionIndex args);

        public delegate void get_inst_BeforeArgs(Params_get_inst args);

        public delegate tk2dSpriteCollectionData get_inst_NormalArgs(Params_get_inst args);

        public delegate void get_Transient_BeforeArgs(Params_get_Transient args);

        public delegate bool get_Transient_NormalArgs(Params_get_Transient args);

        public delegate void GetSpriteDefinition_BeforeArgs(Params_GetSpriteDefinition args);

        public delegate tk2dSpriteDefinition GetSpriteDefinition_NormalArgs(Params_GetSpriteDefinition args);

        public delegate void GetSpriteIdByName_string_BeforeArgs(Params_GetSpriteIdByName_string args);

        public delegate void GetSpriteIdByName_string_int_BeforeArgs(Params_GetSpriteIdByName_string_int args);

        public delegate int GetSpriteIdByName_string_int_NormalArgs(Params_GetSpriteIdByName_string_int args);

        public delegate int GetSpriteIdByName_string_NormalArgs(Params_GetSpriteIdByName_string args);

        public delegate void Init_BeforeArgs(Params_Init args);

        public delegate void Init_NormalArgs(Params_Init args);

        public delegate void InitDictionary_BeforeArgs(Params_InitDictionary args);

        public delegate void InitDictionary_NormalArgs(Params_InitDictionary args);

        public delegate void InitMaterialIds_BeforeArgs(Params_InitMaterialIds args);

        public delegate void InitMaterialIds_NormalArgs(Params_InitMaterialIds args);

        public delegate void IsValidSpriteId_BeforeArgs(Params_IsValidSpriteId args);

        public delegate bool IsValidSpriteId_NormalArgs(Params_IsValidSpriteId args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void ResetPlatformData_BeforeArgs(Params_ResetPlatformData args);

        public delegate void ResetPlatformData_NormalArgs(Params_ResetPlatformData args);

        public delegate void set_Transient_BeforeArgs(Params_set_Transient args);

        public delegate void set_Transient_NormalArgs(Params_set_Transient args);

        public delegate void UnloadTextures_BeforeArgs(Params_UnloadTextures args);

        public delegate void UnloadTextures_NormalArgs(Params_UnloadTextures args);

        public sealed class Params_get_Transient
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_set_Transient
        {
            public tk2dSpriteCollectionData self;
            public bool value;
        }

        public sealed class Params_get_Count
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_GetSpriteIdByName_string
        {
            public string name;
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_GetSpriteIdByName_string_int
        {
            public int defaultValue;
            public string name;
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_ClearDictionary
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_GetSpriteDefinition
        {
            public string name;
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_InitDictionary
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_get_FirstValidDefinition
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_IsValidSpriteId
        {
            public int id;
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_get_FirstValidDefinitionIndex
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_InitMaterialIds
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_get_inst
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_Init
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_CreateFromTexture
        {
            public Vector2[] anchors;
            public string[] names;
            public Rect[] regions;
            public tk2dSpriteCollectionSize size;
            public Texture texture;
        }

        public sealed class Params_CreateFromTexturePacker
        {
            public tk2dSpriteCollectionSize size;
            public Texture texture;
            public string texturePackerData;
        }

        public sealed class Params_ResetPlatformData
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_DestroyTextureInsts
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_UnloadTextures
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_DestroyMaterialInsts
        {
            public tk2dSpriteCollectionData self;
        }

        public sealed class Params_OnDestroy
        {
            public tk2dSpriteCollectionData self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Transient_BeforeArgs get_Transient
        {
            add
            {
                HookHandler._beforeget_Transient += value;
                HookHandler.Hookget_Transient();
            }
            remove => HookHandler._beforeget_Transient -= value;
        }

        public static event Delegates.set_Transient_BeforeArgs set_Transient
        {
            add
            {
                HookHandler._beforeset_Transient += value;
                HookHandler.Hookset_Transient();
            }
            remove => HookHandler._beforeset_Transient -= value;
        }

        public static event Delegates.get_Count_BeforeArgs get_Count
        {
            add
            {
                HookHandler._beforeget_Count += value;
                HookHandler.Hookget_Count();
            }
            remove => HookHandler._beforeget_Count -= value;
        }

        public static event Delegates.GetSpriteIdByName_string_BeforeArgs GetSpriteIdByName_string
        {
            add
            {
                HookHandler._beforeGetSpriteIdByName_string += value;
                HookHandler.HookGetSpriteIdByName_string();
            }
            remove => HookHandler._beforeGetSpriteIdByName_string -= value;
        }

        public static event Delegates.GetSpriteIdByName_string_int_BeforeArgs GetSpriteIdByName_string_int
        {
            add
            {
                HookHandler._beforeGetSpriteIdByName_string_int += value;
                HookHandler.HookGetSpriteIdByName_string_int();
            }
            remove => HookHandler._beforeGetSpriteIdByName_string_int -= value;
        }

        public static event Delegates.ClearDictionary_BeforeArgs ClearDictionary
        {
            add
            {
                HookHandler._beforeClearDictionary += value;
                HookHandler.HookClearDictionary();
            }
            remove => HookHandler._beforeClearDictionary -= value;
        }

        public static event Delegates.GetSpriteDefinition_BeforeArgs GetSpriteDefinition
        {
            add
            {
                HookHandler._beforeGetSpriteDefinition += value;
                HookHandler.HookGetSpriteDefinition();
            }
            remove => HookHandler._beforeGetSpriteDefinition -= value;
        }

        public static event Delegates.InitDictionary_BeforeArgs InitDictionary
        {
            add
            {
                HookHandler._beforeInitDictionary += value;
                HookHandler.HookInitDictionary();
            }
            remove => HookHandler._beforeInitDictionary -= value;
        }

        public static event Delegates.get_FirstValidDefinition_BeforeArgs get_FirstValidDefinition
        {
            add
            {
                HookHandler._beforeget_FirstValidDefinition += value;
                HookHandler.Hookget_FirstValidDefinition();
            }
            remove => HookHandler._beforeget_FirstValidDefinition -= value;
        }

        public static event Delegates.IsValidSpriteId_BeforeArgs IsValidSpriteId
        {
            add
            {
                HookHandler._beforeIsValidSpriteId += value;
                HookHandler.HookIsValidSpriteId();
            }
            remove => HookHandler._beforeIsValidSpriteId -= value;
        }

        public static event Delegates.get_FirstValidDefinitionIndex_BeforeArgs get_FirstValidDefinitionIndex
        {
            add
            {
                HookHandler._beforeget_FirstValidDefinitionIndex += value;
                HookHandler.Hookget_FirstValidDefinitionIndex();
            }
            remove => HookHandler._beforeget_FirstValidDefinitionIndex -= value;
        }

        public static event Delegates.InitMaterialIds_BeforeArgs InitMaterialIds
        {
            add
            {
                HookHandler._beforeInitMaterialIds += value;
                HookHandler.HookInitMaterialIds();
            }
            remove => HookHandler._beforeInitMaterialIds -= value;
        }

        public static event Delegates.get_inst_BeforeArgs get_inst
        {
            add
            {
                HookHandler._beforeget_inst += value;
                HookHandler.Hookget_inst();
            }
            remove => HookHandler._beforeget_inst -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.CreateFromTexture_BeforeArgs CreateFromTexture
        {
            add
            {
                HookHandler._beforeCreateFromTexture += value;
                HookHandler.HookCreateFromTexture();
            }
            remove => HookHandler._beforeCreateFromTexture -= value;
        }

        public static event Delegates.CreateFromTexturePacker_BeforeArgs CreateFromTexturePacker
        {
            add
            {
                HookHandler._beforeCreateFromTexturePacker += value;
                HookHandler.HookCreateFromTexturePacker();
            }
            remove => HookHandler._beforeCreateFromTexturePacker -= value;
        }

        public static event Delegates.ResetPlatformData_BeforeArgs ResetPlatformData
        {
            add
            {
                HookHandler._beforeResetPlatformData += value;
                HookHandler.HookResetPlatformData();
            }
            remove => HookHandler._beforeResetPlatformData -= value;
        }

        public static event Delegates.DestroyTextureInsts_BeforeArgs DestroyTextureInsts
        {
            add
            {
                HookHandler._beforeDestroyTextureInsts += value;
                HookHandler.HookDestroyTextureInsts();
            }
            remove => HookHandler._beforeDestroyTextureInsts -= value;
        }

        public static event Delegates.UnloadTextures_BeforeArgs UnloadTextures
        {
            add
            {
                HookHandler._beforeUnloadTextures += value;
                HookHandler.HookUnloadTextures();
            }
            remove => HookHandler._beforeUnloadTextures -= value;
        }

        public static event Delegates.DestroyMaterialInsts_BeforeArgs DestroyMaterialInsts
        {
            add
            {
                HookHandler._beforeDestroyMaterialInsts += value;
                HookHandler.HookDestroyMaterialInsts();
            }
            remove => HookHandler._beforeDestroyMaterialInsts -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Transient_NormalArgs get_Transient
        {
            add
            {
                HookHandler._afterget_Transient += value;
                HookHandler.Hookget_Transient();
            }
            remove => HookHandler._afterget_Transient -= value;
        }

        public static event Delegates.set_Transient_NormalArgs set_Transient
        {
            add
            {
                HookHandler._afterset_Transient += value;
                HookHandler.Hookset_Transient();
            }
            remove => HookHandler._afterset_Transient -= value;
        }

        public static event Delegates.get_Count_NormalArgs get_Count
        {
            add
            {
                HookHandler._afterget_Count += value;
                HookHandler.Hookget_Count();
            }
            remove => HookHandler._afterget_Count -= value;
        }

        public static event Delegates.GetSpriteIdByName_string_NormalArgs GetSpriteIdByName_string
        {
            add
            {
                HookHandler._afterGetSpriteIdByName_string += value;
                HookHandler.HookGetSpriteIdByName_string();
            }
            remove => HookHandler._afterGetSpriteIdByName_string -= value;
        }

        public static event Delegates.GetSpriteIdByName_string_int_NormalArgs GetSpriteIdByName_string_int
        {
            add
            {
                HookHandler._afterGetSpriteIdByName_string_int += value;
                HookHandler.HookGetSpriteIdByName_string_int();
            }
            remove => HookHandler._afterGetSpriteIdByName_string_int -= value;
        }

        public static event Delegates.ClearDictionary_NormalArgs ClearDictionary
        {
            add
            {
                HookHandler._afterClearDictionary += value;
                HookHandler.HookClearDictionary();
            }
            remove => HookHandler._afterClearDictionary -= value;
        }

        public static event Delegates.GetSpriteDefinition_NormalArgs GetSpriteDefinition
        {
            add
            {
                HookHandler._afterGetSpriteDefinition += value;
                HookHandler.HookGetSpriteDefinition();
            }
            remove => HookHandler._afterGetSpriteDefinition -= value;
        }

        public static event Delegates.InitDictionary_NormalArgs InitDictionary
        {
            add
            {
                HookHandler._afterInitDictionary += value;
                HookHandler.HookInitDictionary();
            }
            remove => HookHandler._afterInitDictionary -= value;
        }

        public static event Delegates.get_FirstValidDefinition_NormalArgs get_FirstValidDefinition
        {
            add
            {
                HookHandler._afterget_FirstValidDefinition += value;
                HookHandler.Hookget_FirstValidDefinition();
            }
            remove => HookHandler._afterget_FirstValidDefinition -= value;
        }

        public static event Delegates.IsValidSpriteId_NormalArgs IsValidSpriteId
        {
            add
            {
                HookHandler._afterIsValidSpriteId += value;
                HookHandler.HookIsValidSpriteId();
            }
            remove => HookHandler._afterIsValidSpriteId -= value;
        }

        public static event Delegates.get_FirstValidDefinitionIndex_NormalArgs get_FirstValidDefinitionIndex
        {
            add
            {
                HookHandler._afterget_FirstValidDefinitionIndex += value;
                HookHandler.Hookget_FirstValidDefinitionIndex();
            }
            remove => HookHandler._afterget_FirstValidDefinitionIndex -= value;
        }

        public static event Delegates.InitMaterialIds_NormalArgs InitMaterialIds
        {
            add
            {
                HookHandler._afterInitMaterialIds += value;
                HookHandler.HookInitMaterialIds();
            }
            remove => HookHandler._afterInitMaterialIds -= value;
        }

        public static event Delegates.get_inst_NormalArgs get_inst
        {
            add
            {
                HookHandler._afterget_inst += value;
                HookHandler.Hookget_inst();
            }
            remove => HookHandler._afterget_inst -= value;
        }

        public static event Delegates.Init_NormalArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.CreateFromTexture_NormalArgs CreateFromTexture
        {
            add
            {
                HookHandler._afterCreateFromTexture += value;
                HookHandler.HookCreateFromTexture();
            }
            remove => HookHandler._afterCreateFromTexture -= value;
        }

        public static event Delegates.CreateFromTexturePacker_NormalArgs CreateFromTexturePacker
        {
            add
            {
                HookHandler._afterCreateFromTexturePacker += value;
                HookHandler.HookCreateFromTexturePacker();
            }
            remove => HookHandler._afterCreateFromTexturePacker -= value;
        }

        public static event Delegates.ResetPlatformData_NormalArgs ResetPlatformData
        {
            add
            {
                HookHandler._afterResetPlatformData += value;
                HookHandler.HookResetPlatformData();
            }
            remove => HookHandler._afterResetPlatformData -= value;
        }

        public static event Delegates.DestroyTextureInsts_NormalArgs DestroyTextureInsts
        {
            add
            {
                HookHandler._afterDestroyTextureInsts += value;
                HookHandler.HookDestroyTextureInsts();
            }
            remove => HookHandler._afterDestroyTextureInsts -= value;
        }

        public static event Delegates.UnloadTextures_NormalArgs UnloadTextures
        {
            add
            {
                HookHandler._afterUnloadTextures += value;
                HookHandler.HookUnloadTextures();
            }
            remove => HookHandler._afterUnloadTextures -= value;
        }

        public static event Delegates.DestroyMaterialInsts_NormalArgs DestroyMaterialInsts
        {
            add
            {
                HookHandler._afterDestroyMaterialInsts += value;
                HookHandler.HookDestroyMaterialInsts();
            }
            remove => HookHandler._afterDestroyMaterialInsts -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Transient_NormalArgs get_Transient
        {
            add => HookEndpointManager.Add<Delegates.get_Transient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Transient"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Transient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Transient"), value);
        }

        public static event Delegates.set_Transient_NormalArgs set_Transient
        {
            add => HookEndpointManager.Add<Delegates.set_Transient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "set_Transient"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Transient_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "set_Transient"), value);
        }

        public static event Delegates.get_Count_NormalArgs get_Count
        {
            add => HookEndpointManager.Add<Delegates.get_Count_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Count"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Count_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Count"), value);
        }

        public static event On.tk2dSpriteCollectionData.hook_GetSpriteIdByName_string GetSpriteIdByName_string
        {
            add => On.tk2dSpriteCollectionData.GetSpriteIdByName_string += value;
            remove => On.tk2dSpriteCollectionData.GetSpriteIdByName_string -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_GetSpriteIdByName_string_int GetSpriteIdByName_string_int
        {
            add => On.tk2dSpriteCollectionData.GetSpriteIdByName_string_int += value;
            remove => On.tk2dSpriteCollectionData.GetSpriteIdByName_string_int -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_ClearDictionary ClearDictionary
        {
            add => On.tk2dSpriteCollectionData.ClearDictionary += value;
            remove => On.tk2dSpriteCollectionData.ClearDictionary -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_GetSpriteDefinition GetSpriteDefinition
        {
            add => On.tk2dSpriteCollectionData.GetSpriteDefinition += value;
            remove => On.tk2dSpriteCollectionData.GetSpriteDefinition -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_InitDictionary InitDictionary
        {
            add => On.tk2dSpriteCollectionData.InitDictionary += value;
            remove => On.tk2dSpriteCollectionData.InitDictionary -= value;
        }

        public static event Delegates.get_FirstValidDefinition_NormalArgs get_FirstValidDefinition
        {
            add => HookEndpointManager.Add<Delegates.get_FirstValidDefinition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinition"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FirstValidDefinition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinition"), value);
        }

        public static event On.tk2dSpriteCollectionData.hook_IsValidSpriteId IsValidSpriteId
        {
            add => On.tk2dSpriteCollectionData.IsValidSpriteId += value;
            remove => On.tk2dSpriteCollectionData.IsValidSpriteId -= value;
        }

        public static event Delegates.get_FirstValidDefinitionIndex_NormalArgs get_FirstValidDefinitionIndex
        {
            add => HookEndpointManager.Add<Delegates.get_FirstValidDefinitionIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinitionIndex"),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_FirstValidDefinitionIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinitionIndex"),
                value);
        }

        public static event On.tk2dSpriteCollectionData.hook_InitMaterialIds InitMaterialIds
        {
            add => On.tk2dSpriteCollectionData.InitMaterialIds += value;
            remove => On.tk2dSpriteCollectionData.InitMaterialIds -= value;
        }

        public static event Delegates.get_inst_NormalArgs get_inst
        {
            add => HookEndpointManager.Add<Delegates.get_inst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_inst"), value);
            remove => HookEndpointManager.Remove<Delegates.get_inst_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_inst"), value);
        }

        public static event On.tk2dSpriteCollectionData.hook_Init Init
        {
            add => On.tk2dSpriteCollectionData.Init += value;
            remove => On.tk2dSpriteCollectionData.Init -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_CreateFromTexture CreateFromTexture
        {
            add => On.tk2dSpriteCollectionData.CreateFromTexture += value;
            remove => On.tk2dSpriteCollectionData.CreateFromTexture -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_CreateFromTexturePacker CreateFromTexturePacker
        {
            add => On.tk2dSpriteCollectionData.CreateFromTexturePacker += value;
            remove => On.tk2dSpriteCollectionData.CreateFromTexturePacker -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_ResetPlatformData ResetPlatformData
        {
            add => On.tk2dSpriteCollectionData.ResetPlatformData += value;
            remove => On.tk2dSpriteCollectionData.ResetPlatformData -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_DestroyTextureInsts DestroyTextureInsts
        {
            add => On.tk2dSpriteCollectionData.DestroyTextureInsts += value;
            remove => On.tk2dSpriteCollectionData.DestroyTextureInsts -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_UnloadTextures UnloadTextures
        {
            add => On.tk2dSpriteCollectionData.UnloadTextures += value;
            remove => On.tk2dSpriteCollectionData.UnloadTextures -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_DestroyMaterialInsts DestroyMaterialInsts
        {
            add => On.tk2dSpriteCollectionData.DestroyMaterialInsts += value;
            remove => On.tk2dSpriteCollectionData.DestroyMaterialInsts -= value;
        }

        public static event On.tk2dSpriteCollectionData.hook_OnDestroy OnDestroy
        {
            add => On.tk2dSpriteCollectionData.OnDestroy += value;
            remove => On.tk2dSpriteCollectionData.OnDestroy -= value;
        }
    }
}