using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dSpriteCollectionData class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSpriteCollectionData
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_Transient()
{
if (!HookedList.Contains("get_Transient"))
{
HookedList.Add("get_Transient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Transient", true), get_Transient);

}
}
internal static event Delegates.get_Transient_BeforeArgs _beforeget_Transient;
internal static event Delegates.get_Transient_AfterArgs _afterget_Transient;
private static bool get_Transient(Func<tk2dSpriteCollectionData, bool> orig, tk2dSpriteCollectionData self)
{
Delegates.Params_get_Transient @params = new() 
{
self = self
};
if (_beforeget_Transient != null)
{
foreach (Delegates.get_Transient_BeforeArgs toInvoke in _beforeget_Transient.GetInvocationList())
{
try
{
_beforeget_Transient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Transient != null)
{
foreach (Delegates.get_Transient_AfterArgs toInvoke in _afterget_Transient.GetInvocationList())
{
try
{
retVal = _afterget_Transient.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Transient()
{
if (!HookedList.Contains("set_Transient"))
{
HookedList.Add("set_Transient");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "set_Transient", true), set_Transient);

}
}
internal static event Delegates.set_Transient_BeforeArgs _beforeset_Transient;
internal static event Delegates.set_Transient_AfterArgs _afterset_Transient;
private static void set_Transient(Action<tk2dSpriteCollectionData,  bool> orig, tk2dSpriteCollectionData self,  bool value)
{
Delegates.Params_set_Transient @params = new() 
{
self = self
, value = value
};
if (_beforeset_Transient != null)
{
foreach (Delegates.set_Transient_BeforeArgs toInvoke in _beforeset_Transient.GetInvocationList())
{
try
{
_beforeset_Transient?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Transient != null)
{
foreach (Delegates.set_Transient_AfterArgs toInvoke in _afterset_Transient.GetInvocationList())
{
try
{
_afterset_Transient.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Count()
{
if (!HookedList.Contains("get_Count"))
{
HookedList.Add("get_Count");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Count", true), get_Count);

}
}
internal static event Delegates.get_Count_BeforeArgs _beforeget_Count;
internal static event Delegates.get_Count_AfterArgs _afterget_Count;
private static int get_Count(Func<tk2dSpriteCollectionData, int> orig, tk2dSpriteCollectionData self)
{
Delegates.Params_get_Count @params = new() 
{
self = self
};
if (_beforeget_Count != null)
{
foreach (Delegates.get_Count_BeforeArgs toInvoke in _beforeget_Count.GetInvocationList())
{
try
{
_beforeget_Count?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Count != null)
{
foreach (Delegates.get_Count_AfterArgs toInvoke in _afterget_Count.GetInvocationList())
{
try
{
retVal = _afterget_Count.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSpriteIdByName_string()
{
if (!HookedList.Contains("GetSpriteIdByName_string"))
{
HookedList.Add("GetSpriteIdByName_string");
On.tk2dSpriteCollectionData.GetSpriteIdByName_string += GetSpriteIdByName_string;

}
}
internal static event Delegates.GetSpriteIdByName_string_BeforeArgs _beforeGetSpriteIdByName_string;
internal static event Delegates.GetSpriteIdByName_string_AfterArgs _afterGetSpriteIdByName_string;
private static int GetSpriteIdByName_string(On.tk2dSpriteCollectionData.orig_GetSpriteIdByName_string orig,tk2dSpriteCollectionData self,  string name)
{
Delegates.Params_GetSpriteIdByName_string @params = new() 
{
self = self
, name = name
};
if (_beforeGetSpriteIdByName_string != null)
{
foreach (Delegates.GetSpriteIdByName_string_BeforeArgs toInvoke in _beforeGetSpriteIdByName_string.GetInvocationList())
{
try
{
_beforeGetSpriteIdByName_string?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
name = @params.name;
var retVal = orig(self, name);
if (_afterGetSpriteIdByName_string != null)
{
foreach (Delegates.GetSpriteIdByName_string_AfterArgs toInvoke in _afterGetSpriteIdByName_string.GetInvocationList())
{
try
{
retVal = _afterGetSpriteIdByName_string.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSpriteIdByName_string_int()
{
if (!HookedList.Contains("GetSpriteIdByName_string_int"))
{
HookedList.Add("GetSpriteIdByName_string_int");
On.tk2dSpriteCollectionData.GetSpriteIdByName_string_int += GetSpriteIdByName_string_int;

}
}
internal static event Delegates.GetSpriteIdByName_string_int_BeforeArgs _beforeGetSpriteIdByName_string_int;
internal static event Delegates.GetSpriteIdByName_string_int_AfterArgs _afterGetSpriteIdByName_string_int;
private static int GetSpriteIdByName_string_int(On.tk2dSpriteCollectionData.orig_GetSpriteIdByName_string_int orig,tk2dSpriteCollectionData self,  string name,  int defaultValue)
{
Delegates.Params_GetSpriteIdByName_string_int @params = new() 
{
self = self
, name = name
, defaultValue = defaultValue
};
if (_beforeGetSpriteIdByName_string_int != null)
{
foreach (Delegates.GetSpriteIdByName_string_int_BeforeArgs toInvoke in _beforeGetSpriteIdByName_string_int.GetInvocationList())
{
try
{
_beforeGetSpriteIdByName_string_int?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
name = @params.name;
defaultValue = @params.defaultValue;
var retVal = orig(self, name, defaultValue);
if (_afterGetSpriteIdByName_string_int != null)
{
foreach (Delegates.GetSpriteIdByName_string_int_AfterArgs toInvoke in _afterGetSpriteIdByName_string_int.GetInvocationList())
{
try
{
retVal = _afterGetSpriteIdByName_string_int.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookClearDictionary()
{
if (!HookedList.Contains("ClearDictionary"))
{
HookedList.Add("ClearDictionary");
On.tk2dSpriteCollectionData.ClearDictionary += ClearDictionary;

}
}
internal static event Delegates.ClearDictionary_BeforeArgs _beforeClearDictionary;
internal static event Delegates.ClearDictionary_AfterArgs _afterClearDictionary;
private static void ClearDictionary(On.tk2dSpriteCollectionData.orig_ClearDictionary orig,tk2dSpriteCollectionData self)
{
Delegates.Params_ClearDictionary @params = new() 
{
self = self
};
if (_beforeClearDictionary != null)
{
foreach (Delegates.ClearDictionary_BeforeArgs toInvoke in _beforeClearDictionary.GetInvocationList())
{
try
{
_beforeClearDictionary?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterClearDictionary != null)
{
foreach (Delegates.ClearDictionary_AfterArgs toInvoke in _afterClearDictionary.GetInvocationList())
{
try
{
_afterClearDictionary.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetSpriteDefinition()
{
if (!HookedList.Contains("GetSpriteDefinition"))
{
HookedList.Add("GetSpriteDefinition");
On.tk2dSpriteCollectionData.GetSpriteDefinition += GetSpriteDefinition;

}
}
internal static event Delegates.GetSpriteDefinition_BeforeArgs _beforeGetSpriteDefinition;
internal static event Delegates.GetSpriteDefinition_AfterArgs _afterGetSpriteDefinition;
private static tk2dSpriteDefinition GetSpriteDefinition(On.tk2dSpriteCollectionData.orig_GetSpriteDefinition orig,tk2dSpriteCollectionData self,  string name)
{
Delegates.Params_GetSpriteDefinition @params = new() 
{
self = self
, name = name
};
if (_beforeGetSpriteDefinition != null)
{
foreach (Delegates.GetSpriteDefinition_BeforeArgs toInvoke in _beforeGetSpriteDefinition.GetInvocationList())
{
try
{
_beforeGetSpriteDefinition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
name = @params.name;
var retVal = orig(self, name);
if (_afterGetSpriteDefinition != null)
{
foreach (Delegates.GetSpriteDefinition_AfterArgs toInvoke in _afterGetSpriteDefinition.GetInvocationList())
{
try
{
retVal = _afterGetSpriteDefinition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookInitDictionary()
{
if (!HookedList.Contains("InitDictionary"))
{
HookedList.Add("InitDictionary");
On.tk2dSpriteCollectionData.InitDictionary += InitDictionary;

}
}
internal static event Delegates.InitDictionary_BeforeArgs _beforeInitDictionary;
internal static event Delegates.InitDictionary_AfterArgs _afterInitDictionary;
private static void InitDictionary(On.tk2dSpriteCollectionData.orig_InitDictionary orig,tk2dSpriteCollectionData self)
{
Delegates.Params_InitDictionary @params = new() 
{
self = self
};
if (_beforeInitDictionary != null)
{
foreach (Delegates.InitDictionary_BeforeArgs toInvoke in _beforeInitDictionary.GetInvocationList())
{
try
{
_beforeInitDictionary?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInitDictionary != null)
{
foreach (Delegates.InitDictionary_AfterArgs toInvoke in _afterInitDictionary.GetInvocationList())
{
try
{
_afterInitDictionary.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_FirstValidDefinition()
{
if (!HookedList.Contains("get_FirstValidDefinition"))
{
HookedList.Add("get_FirstValidDefinition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinition", true), get_FirstValidDefinition);

}
}
internal static event Delegates.get_FirstValidDefinition_BeforeArgs _beforeget_FirstValidDefinition;
internal static event Delegates.get_FirstValidDefinition_AfterArgs _afterget_FirstValidDefinition;
private static tk2dSpriteDefinition get_FirstValidDefinition(Func<tk2dSpriteCollectionData, tk2dSpriteDefinition> orig, tk2dSpriteCollectionData self)
{
Delegates.Params_get_FirstValidDefinition @params = new() 
{
self = self
};
if (_beforeget_FirstValidDefinition != null)
{
foreach (Delegates.get_FirstValidDefinition_BeforeArgs toInvoke in _beforeget_FirstValidDefinition.GetInvocationList())
{
try
{
_beforeget_FirstValidDefinition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_FirstValidDefinition != null)
{
foreach (Delegates.get_FirstValidDefinition_AfterArgs toInvoke in _afterget_FirstValidDefinition.GetInvocationList())
{
try
{
retVal = _afterget_FirstValidDefinition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsValidSpriteId()
{
if (!HookedList.Contains("IsValidSpriteId"))
{
HookedList.Add("IsValidSpriteId");
On.tk2dSpriteCollectionData.IsValidSpriteId += IsValidSpriteId;

}
}
internal static event Delegates.IsValidSpriteId_BeforeArgs _beforeIsValidSpriteId;
internal static event Delegates.IsValidSpriteId_AfterArgs _afterIsValidSpriteId;
private static bool IsValidSpriteId(On.tk2dSpriteCollectionData.orig_IsValidSpriteId orig,tk2dSpriteCollectionData self,  int id)
{
Delegates.Params_IsValidSpriteId @params = new() 
{
self = self
, id = id
};
if (_beforeIsValidSpriteId != null)
{
foreach (Delegates.IsValidSpriteId_BeforeArgs toInvoke in _beforeIsValidSpriteId.GetInvocationList())
{
try
{
_beforeIsValidSpriteId?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
id = @params.id;
var retVal = orig(self, id);
if (_afterIsValidSpriteId != null)
{
foreach (Delegates.IsValidSpriteId_AfterArgs toInvoke in _afterIsValidSpriteId.GetInvocationList())
{
try
{
retVal = _afterIsValidSpriteId.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_FirstValidDefinitionIndex()
{
if (!HookedList.Contains("get_FirstValidDefinitionIndex"))
{
HookedList.Add("get_FirstValidDefinitionIndex");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinitionIndex", true), get_FirstValidDefinitionIndex);

}
}
internal static event Delegates.get_FirstValidDefinitionIndex_BeforeArgs _beforeget_FirstValidDefinitionIndex;
internal static event Delegates.get_FirstValidDefinitionIndex_AfterArgs _afterget_FirstValidDefinitionIndex;
private static int get_FirstValidDefinitionIndex(Func<tk2dSpriteCollectionData, int> orig, tk2dSpriteCollectionData self)
{
Delegates.Params_get_FirstValidDefinitionIndex @params = new() 
{
self = self
};
if (_beforeget_FirstValidDefinitionIndex != null)
{
foreach (Delegates.get_FirstValidDefinitionIndex_BeforeArgs toInvoke in _beforeget_FirstValidDefinitionIndex.GetInvocationList())
{
try
{
_beforeget_FirstValidDefinitionIndex?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_FirstValidDefinitionIndex != null)
{
foreach (Delegates.get_FirstValidDefinitionIndex_AfterArgs toInvoke in _afterget_FirstValidDefinitionIndex.GetInvocationList())
{
try
{
retVal = _afterget_FirstValidDefinitionIndex.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookInitMaterialIds()
{
if (!HookedList.Contains("InitMaterialIds"))
{
HookedList.Add("InitMaterialIds");
On.tk2dSpriteCollectionData.InitMaterialIds += InitMaterialIds;

}
}
internal static event Delegates.InitMaterialIds_BeforeArgs _beforeInitMaterialIds;
internal static event Delegates.InitMaterialIds_AfterArgs _afterInitMaterialIds;
private static void InitMaterialIds(On.tk2dSpriteCollectionData.orig_InitMaterialIds orig,tk2dSpriteCollectionData self)
{
Delegates.Params_InitMaterialIds @params = new() 
{
self = self
};
if (_beforeInitMaterialIds != null)
{
foreach (Delegates.InitMaterialIds_BeforeArgs toInvoke in _beforeInitMaterialIds.GetInvocationList())
{
try
{
_beforeInitMaterialIds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInitMaterialIds != null)
{
foreach (Delegates.InitMaterialIds_AfterArgs toInvoke in _afterInitMaterialIds.GetInvocationList())
{
try
{
_afterInitMaterialIds.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_inst()
{
if (!HookedList.Contains("get_inst"))
{
HookedList.Add("get_inst");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_inst", true), get_inst);

}
}
internal static event Delegates.get_inst_BeforeArgs _beforeget_inst;
internal static event Delegates.get_inst_AfterArgs _afterget_inst;
private static tk2dSpriteCollectionData get_inst(Func<tk2dSpriteCollectionData, tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self)
{
Delegates.Params_get_inst @params = new() 
{
self = self
};
if (_beforeget_inst != null)
{
foreach (Delegates.get_inst_BeforeArgs toInvoke in _beforeget_inst.GetInvocationList())
{
try
{
_beforeget_inst?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_inst != null)
{
foreach (Delegates.get_inst_AfterArgs toInvoke in _afterget_inst.GetInvocationList())
{
try
{
retVal = _afterget_inst.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookInit()
{
if (!HookedList.Contains("Init"))
{
HookedList.Add("Init");
On.tk2dSpriteCollectionData.Init += Init;

}
}
internal static event Delegates.Init_BeforeArgs _beforeInit;
internal static event Delegates.Init_AfterArgs _afterInit;
private static void Init(On.tk2dSpriteCollectionData.orig_Init orig,tk2dSpriteCollectionData self)
{
Delegates.Params_Init @params = new() 
{
self = self
};
if (_beforeInit != null)
{
foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
{
try
{
_beforeInit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInit != null)
{
foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
{
try
{
_afterInit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateFromTexture()
{
if (!HookedList.Contains("CreateFromTexture"))
{
HookedList.Add("CreateFromTexture");
On.tk2dSpriteCollectionData.CreateFromTexture += CreateFromTexture;

}
}
internal static event Delegates.CreateFromTexture_BeforeArgs _beforeCreateFromTexture;
internal static event Delegates.CreateFromTexture_AfterArgs _afterCreateFromTexture;
private static tk2dSpriteCollectionData CreateFromTexture(On.tk2dSpriteCollectionData.orig_CreateFromTexture orig, UnityEngine.Texture texture,  tk2dSpriteCollectionSize size,  string[] names,  UnityEngine.Rect[] regions,  UnityEngine.Vector2[] anchors)
{
Delegates.Params_CreateFromTexture @params = new() 
{
texture = texture
, size = size
, names = names
, regions = regions
, anchors = anchors
};
if (_beforeCreateFromTexture != null)
{
foreach (Delegates.CreateFromTexture_BeforeArgs toInvoke in _beforeCreateFromTexture.GetInvocationList())
{
try
{
_beforeCreateFromTexture?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
texture = @params.texture;
size = @params.size;
names = @params.names;
regions = @params.regions;
anchors = @params.anchors;
var retVal = orig(texture, size, names, regions, anchors);
if (_afterCreateFromTexture != null)
{
foreach (Delegates.CreateFromTexture_AfterArgs toInvoke in _afterCreateFromTexture.GetInvocationList())
{
try
{
retVal = _afterCreateFromTexture.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCreateFromTexturePacker()
{
if (!HookedList.Contains("CreateFromTexturePacker"))
{
HookedList.Add("CreateFromTexturePacker");
On.tk2dSpriteCollectionData.CreateFromTexturePacker += CreateFromTexturePacker;

}
}
internal static event Delegates.CreateFromTexturePacker_BeforeArgs _beforeCreateFromTexturePacker;
internal static event Delegates.CreateFromTexturePacker_AfterArgs _afterCreateFromTexturePacker;
private static tk2dSpriteCollectionData CreateFromTexturePacker(On.tk2dSpriteCollectionData.orig_CreateFromTexturePacker orig, tk2dSpriteCollectionSize size,  string texturePackerData,  UnityEngine.Texture texture)
{
Delegates.Params_CreateFromTexturePacker @params = new() 
{
size = size
, texturePackerData = texturePackerData
, texture = texture
};
if (_beforeCreateFromTexturePacker != null)
{
foreach (Delegates.CreateFromTexturePacker_BeforeArgs toInvoke in _beforeCreateFromTexturePacker.GetInvocationList())
{
try
{
_beforeCreateFromTexturePacker?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
size = @params.size;
texturePackerData = @params.texturePackerData;
texture = @params.texture;
var retVal = orig(size, texturePackerData, texture);
if (_afterCreateFromTexturePacker != null)
{
foreach (Delegates.CreateFromTexturePacker_AfterArgs toInvoke in _afterCreateFromTexturePacker.GetInvocationList())
{
try
{
retVal = _afterCreateFromTexturePacker.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookResetPlatformData()
{
if (!HookedList.Contains("ResetPlatformData"))
{
HookedList.Add("ResetPlatformData");
On.tk2dSpriteCollectionData.ResetPlatformData += ResetPlatformData;

}
}
internal static event Delegates.ResetPlatformData_BeforeArgs _beforeResetPlatformData;
internal static event Delegates.ResetPlatformData_AfterArgs _afterResetPlatformData;
private static void ResetPlatformData(On.tk2dSpriteCollectionData.orig_ResetPlatformData orig,tk2dSpriteCollectionData self)
{
Delegates.Params_ResetPlatformData @params = new() 
{
self = self
};
if (_beforeResetPlatformData != null)
{
foreach (Delegates.ResetPlatformData_BeforeArgs toInvoke in _beforeResetPlatformData.GetInvocationList())
{
try
{
_beforeResetPlatformData?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterResetPlatformData != null)
{
foreach (Delegates.ResetPlatformData_AfterArgs toInvoke in _afterResetPlatformData.GetInvocationList())
{
try
{
_afterResetPlatformData.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDestroyTextureInsts()
{
if (!HookedList.Contains("DestroyTextureInsts"))
{
HookedList.Add("DestroyTextureInsts");
On.tk2dSpriteCollectionData.DestroyTextureInsts += DestroyTextureInsts;

}
}
internal static event Delegates.DestroyTextureInsts_BeforeArgs _beforeDestroyTextureInsts;
internal static event Delegates.DestroyTextureInsts_AfterArgs _afterDestroyTextureInsts;
private static void DestroyTextureInsts(On.tk2dSpriteCollectionData.orig_DestroyTextureInsts orig,tk2dSpriteCollectionData self)
{
Delegates.Params_DestroyTextureInsts @params = new() 
{
self = self
};
if (_beforeDestroyTextureInsts != null)
{
foreach (Delegates.DestroyTextureInsts_BeforeArgs toInvoke in _beforeDestroyTextureInsts.GetInvocationList())
{
try
{
_beforeDestroyTextureInsts?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDestroyTextureInsts != null)
{
foreach (Delegates.DestroyTextureInsts_AfterArgs toInvoke in _afterDestroyTextureInsts.GetInvocationList())
{
try
{
_afterDestroyTextureInsts.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUnloadTextures()
{
if (!HookedList.Contains("UnloadTextures"))
{
HookedList.Add("UnloadTextures");
On.tk2dSpriteCollectionData.UnloadTextures += UnloadTextures;

}
}
internal static event Delegates.UnloadTextures_BeforeArgs _beforeUnloadTextures;
internal static event Delegates.UnloadTextures_AfterArgs _afterUnloadTextures;
private static void UnloadTextures(On.tk2dSpriteCollectionData.orig_UnloadTextures orig,tk2dSpriteCollectionData self)
{
Delegates.Params_UnloadTextures @params = new() 
{
self = self
};
if (_beforeUnloadTextures != null)
{
foreach (Delegates.UnloadTextures_BeforeArgs toInvoke in _beforeUnloadTextures.GetInvocationList())
{
try
{
_beforeUnloadTextures?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUnloadTextures != null)
{
foreach (Delegates.UnloadTextures_AfterArgs toInvoke in _afterUnloadTextures.GetInvocationList())
{
try
{
_afterUnloadTextures.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDestroyMaterialInsts()
{
if (!HookedList.Contains("DestroyMaterialInsts"))
{
HookedList.Add("DestroyMaterialInsts");
On.tk2dSpriteCollectionData.DestroyMaterialInsts += DestroyMaterialInsts;

}
}
internal static event Delegates.DestroyMaterialInsts_BeforeArgs _beforeDestroyMaterialInsts;
internal static event Delegates.DestroyMaterialInsts_AfterArgs _afterDestroyMaterialInsts;
private static void DestroyMaterialInsts(On.tk2dSpriteCollectionData.orig_DestroyMaterialInsts orig,tk2dSpriteCollectionData self)
{
Delegates.Params_DestroyMaterialInsts @params = new() 
{
self = self
};
if (_beforeDestroyMaterialInsts != null)
{
foreach (Delegates.DestroyMaterialInsts_BeforeArgs toInvoke in _beforeDestroyMaterialInsts.GetInvocationList())
{
try
{
_beforeDestroyMaterialInsts?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterDestroyMaterialInsts != null)
{
foreach (Delegates.DestroyMaterialInsts_AfterArgs toInvoke in _afterDestroyMaterialInsts.GetInvocationList())
{
try
{
_afterDestroyMaterialInsts.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.tk2dSpriteCollectionData.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.tk2dSpriteCollectionData.orig_OnDestroy orig,tk2dSpriteCollectionData self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_Transient
{
public tk2dSpriteCollectionData self;
}
public delegate void get_Transient_BeforeArgs(Params_get_Transient args);
public delegate bool get_Transient_AfterArgs(Params_get_Transient args, bool ret);
public delegate bool get_Transient_WithArgs (Func<tk2dSpriteCollectionData, bool> orig, tk2dSpriteCollectionData self);
public sealed class Params_set_Transient
{
public tk2dSpriteCollectionData self;
public bool value;
}
public delegate void set_Transient_BeforeArgs(Params_set_Transient args);
public delegate void set_Transient_AfterArgs(Params_set_Transient args);
public delegate void set_Transient_WithArgs (Action<tk2dSpriteCollectionData,  bool> orig, tk2dSpriteCollectionData self,  bool value);
public sealed class Params_get_Count
{
public tk2dSpriteCollectionData self;
}
public delegate void get_Count_BeforeArgs(Params_get_Count args);
public delegate int get_Count_AfterArgs(Params_get_Count args, int ret);
public delegate int get_Count_WithArgs (Func<tk2dSpriteCollectionData, int> orig, tk2dSpriteCollectionData self);
public sealed class Params_GetSpriteIdByName_string
{
public tk2dSpriteCollectionData self;
public string name;
}
public delegate void GetSpriteIdByName_string_BeforeArgs(Params_GetSpriteIdByName_string args);
public delegate int GetSpriteIdByName_string_AfterArgs(Params_GetSpriteIdByName_string args, int ret);
public delegate int GetSpriteIdByName_string_WithArgs (Func<tk2dSpriteCollectionData,  string, int> orig, tk2dSpriteCollectionData self,  string name);
public sealed class Params_GetSpriteIdByName_string_int
{
public tk2dSpriteCollectionData self;
public string name;
public int defaultValue;
}
public delegate void GetSpriteIdByName_string_int_BeforeArgs(Params_GetSpriteIdByName_string_int args);
public delegate int GetSpriteIdByName_string_int_AfterArgs(Params_GetSpriteIdByName_string_int args, int ret);
public delegate int GetSpriteIdByName_string_int_WithArgs (Func<tk2dSpriteCollectionData,  string,  int, int> orig, tk2dSpriteCollectionData self,  string name,  int defaultValue);
public sealed class Params_ClearDictionary
{
public tk2dSpriteCollectionData self;
}
public delegate void ClearDictionary_BeforeArgs(Params_ClearDictionary args);
public delegate void ClearDictionary_AfterArgs(Params_ClearDictionary args);
public delegate void ClearDictionary_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_GetSpriteDefinition
{
public tk2dSpriteCollectionData self;
public string name;
}
public delegate void GetSpriteDefinition_BeforeArgs(Params_GetSpriteDefinition args);
public delegate tk2dSpriteDefinition GetSpriteDefinition_AfterArgs(Params_GetSpriteDefinition args, tk2dSpriteDefinition ret);
public delegate tk2dSpriteDefinition GetSpriteDefinition_WithArgs (Func<tk2dSpriteCollectionData,  string, tk2dSpriteDefinition> orig, tk2dSpriteCollectionData self,  string name);
public sealed class Params_InitDictionary
{
public tk2dSpriteCollectionData self;
}
public delegate void InitDictionary_BeforeArgs(Params_InitDictionary args);
public delegate void InitDictionary_AfterArgs(Params_InitDictionary args);
public delegate void InitDictionary_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_get_FirstValidDefinition
{
public tk2dSpriteCollectionData self;
}
public delegate void get_FirstValidDefinition_BeforeArgs(Params_get_FirstValidDefinition args);
public delegate tk2dSpriteDefinition get_FirstValidDefinition_AfterArgs(Params_get_FirstValidDefinition args, tk2dSpriteDefinition ret);
public delegate tk2dSpriteDefinition get_FirstValidDefinition_WithArgs (Func<tk2dSpriteCollectionData, tk2dSpriteDefinition> orig, tk2dSpriteCollectionData self);
public sealed class Params_IsValidSpriteId
{
public tk2dSpriteCollectionData self;
public int id;
}
public delegate void IsValidSpriteId_BeforeArgs(Params_IsValidSpriteId args);
public delegate bool IsValidSpriteId_AfterArgs(Params_IsValidSpriteId args, bool ret);
public delegate bool IsValidSpriteId_WithArgs (Func<tk2dSpriteCollectionData,  int, bool> orig, tk2dSpriteCollectionData self,  int id);
public sealed class Params_get_FirstValidDefinitionIndex
{
public tk2dSpriteCollectionData self;
}
public delegate void get_FirstValidDefinitionIndex_BeforeArgs(Params_get_FirstValidDefinitionIndex args);
public delegate int get_FirstValidDefinitionIndex_AfterArgs(Params_get_FirstValidDefinitionIndex args, int ret);
public delegate int get_FirstValidDefinitionIndex_WithArgs (Func<tk2dSpriteCollectionData, int> orig, tk2dSpriteCollectionData self);
public sealed class Params_InitMaterialIds
{
public tk2dSpriteCollectionData self;
}
public delegate void InitMaterialIds_BeforeArgs(Params_InitMaterialIds args);
public delegate void InitMaterialIds_AfterArgs(Params_InitMaterialIds args);
public delegate void InitMaterialIds_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_get_inst
{
public tk2dSpriteCollectionData self;
}
public delegate void get_inst_BeforeArgs(Params_get_inst args);
public delegate tk2dSpriteCollectionData get_inst_AfterArgs(Params_get_inst args, tk2dSpriteCollectionData ret);
public delegate tk2dSpriteCollectionData get_inst_WithArgs (Func<tk2dSpriteCollectionData, tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_Init
{
public tk2dSpriteCollectionData self;
}
public delegate void Init_BeforeArgs(Params_Init args);
public delegate void Init_AfterArgs(Params_Init args);
public delegate void Init_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_CreateFromTexture
{
public UnityEngine.Texture texture;
public tk2dSpriteCollectionSize size;
public string[] names;
public UnityEngine.Rect[] regions;
public UnityEngine.Vector2[] anchors;
}
public delegate void CreateFromTexture_BeforeArgs(Params_CreateFromTexture args);
public delegate tk2dSpriteCollectionData CreateFromTexture_AfterArgs(Params_CreateFromTexture args, tk2dSpriteCollectionData ret);
public delegate tk2dSpriteCollectionData CreateFromTexture_WithArgs (Func< UnityEngine.Texture,  tk2dSpriteCollectionSize,  string[],  UnityEngine.Rect[],  UnityEngine.Vector2[], tk2dSpriteCollectionData> orig,  UnityEngine.Texture texture,  tk2dSpriteCollectionSize size,  string[] names,  UnityEngine.Rect[] regions,  UnityEngine.Vector2[] anchors);
public sealed class Params_CreateFromTexturePacker
{
public tk2dSpriteCollectionSize size;
public string texturePackerData;
public UnityEngine.Texture texture;
}
public delegate void CreateFromTexturePacker_BeforeArgs(Params_CreateFromTexturePacker args);
public delegate tk2dSpriteCollectionData CreateFromTexturePacker_AfterArgs(Params_CreateFromTexturePacker args, tk2dSpriteCollectionData ret);
public delegate tk2dSpriteCollectionData CreateFromTexturePacker_WithArgs (Func< tk2dSpriteCollectionSize,  string,  UnityEngine.Texture, tk2dSpriteCollectionData> orig,  tk2dSpriteCollectionSize size,  string texturePackerData,  UnityEngine.Texture texture);
public sealed class Params_ResetPlatformData
{
public tk2dSpriteCollectionData self;
}
public delegate void ResetPlatformData_BeforeArgs(Params_ResetPlatformData args);
public delegate void ResetPlatformData_AfterArgs(Params_ResetPlatformData args);
public delegate void ResetPlatformData_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_DestroyTextureInsts
{
public tk2dSpriteCollectionData self;
}
public delegate void DestroyTextureInsts_BeforeArgs(Params_DestroyTextureInsts args);
public delegate void DestroyTextureInsts_AfterArgs(Params_DestroyTextureInsts args);
public delegate void DestroyTextureInsts_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_UnloadTextures
{
public tk2dSpriteCollectionData self;
}
public delegate void UnloadTextures_BeforeArgs(Params_UnloadTextures args);
public delegate void UnloadTextures_AfterArgs(Params_UnloadTextures args);
public delegate void UnloadTextures_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_DestroyMaterialInsts
{
public tk2dSpriteCollectionData self;
}
public delegate void DestroyMaterialInsts_BeforeArgs(Params_DestroyMaterialInsts args);
public delegate void DestroyMaterialInsts_AfterArgs(Params_DestroyMaterialInsts args);
public delegate void DestroyMaterialInsts_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
public sealed class Params_OnDestroy
{
public tk2dSpriteCollectionData self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<tk2dSpriteCollectionData> orig, tk2dSpriteCollectionData self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_Transient_BeforeArgs get_Transient
{
add
{

HookHandler._beforeget_Transient += value;
HookHandler.Hookget_Transient();
}
remove => HookHandler._beforeget_Transient -= value;
}
public static event Delegates.set_Transient_BeforeArgs set_Transient
{
add
{

HookHandler._beforeset_Transient += value;
HookHandler.Hookset_Transient();
}
remove => HookHandler._beforeset_Transient -= value;
}
public static event Delegates.get_Count_BeforeArgs get_Count
{
add
{

HookHandler._beforeget_Count += value;
HookHandler.Hookget_Count();
}
remove => HookHandler._beforeget_Count -= value;
}
public static event Delegates.GetSpriteIdByName_string_BeforeArgs GetSpriteIdByName_string
{
add
{

HookHandler._beforeGetSpriteIdByName_string += value;
HookHandler.HookGetSpriteIdByName_string();
}
remove => HookHandler._beforeGetSpriteIdByName_string -= value;
}
public static event Delegates.GetSpriteIdByName_string_int_BeforeArgs GetSpriteIdByName_string_int
{
add
{

HookHandler._beforeGetSpriteIdByName_string_int += value;
HookHandler.HookGetSpriteIdByName_string_int();
}
remove => HookHandler._beforeGetSpriteIdByName_string_int -= value;
}
public static event Delegates.ClearDictionary_BeforeArgs ClearDictionary
{
add
{

HookHandler._beforeClearDictionary += value;
HookHandler.HookClearDictionary();
}
remove => HookHandler._beforeClearDictionary -= value;
}
public static event Delegates.GetSpriteDefinition_BeforeArgs GetSpriteDefinition
{
add
{

HookHandler._beforeGetSpriteDefinition += value;
HookHandler.HookGetSpriteDefinition();
}
remove => HookHandler._beforeGetSpriteDefinition -= value;
}
public static event Delegates.InitDictionary_BeforeArgs InitDictionary
{
add
{

HookHandler._beforeInitDictionary += value;
HookHandler.HookInitDictionary();
}
remove => HookHandler._beforeInitDictionary -= value;
}
public static event Delegates.get_FirstValidDefinition_BeforeArgs get_FirstValidDefinition
{
add
{

HookHandler._beforeget_FirstValidDefinition += value;
HookHandler.Hookget_FirstValidDefinition();
}
remove => HookHandler._beforeget_FirstValidDefinition -= value;
}
public static event Delegates.IsValidSpriteId_BeforeArgs IsValidSpriteId
{
add
{

HookHandler._beforeIsValidSpriteId += value;
HookHandler.HookIsValidSpriteId();
}
remove => HookHandler._beforeIsValidSpriteId -= value;
}
public static event Delegates.get_FirstValidDefinitionIndex_BeforeArgs get_FirstValidDefinitionIndex
{
add
{

HookHandler._beforeget_FirstValidDefinitionIndex += value;
HookHandler.Hookget_FirstValidDefinitionIndex();
}
remove => HookHandler._beforeget_FirstValidDefinitionIndex -= value;
}
public static event Delegates.InitMaterialIds_BeforeArgs InitMaterialIds
{
add
{

HookHandler._beforeInitMaterialIds += value;
HookHandler.HookInitMaterialIds();
}
remove => HookHandler._beforeInitMaterialIds -= value;
}
public static event Delegates.get_inst_BeforeArgs get_inst
{
add
{

HookHandler._beforeget_inst += value;
HookHandler.Hookget_inst();
}
remove => HookHandler._beforeget_inst -= value;
}
public static event Delegates.Init_BeforeArgs Init
{
add
{

HookHandler._beforeInit += value;
HookHandler.HookInit();
}
remove => HookHandler._beforeInit -= value;
}
public static event Delegates.CreateFromTexture_BeforeArgs CreateFromTexture
{
add
{

HookHandler._beforeCreateFromTexture += value;
HookHandler.HookCreateFromTexture();
}
remove => HookHandler._beforeCreateFromTexture -= value;
}
public static event Delegates.CreateFromTexturePacker_BeforeArgs CreateFromTexturePacker
{
add
{

HookHandler._beforeCreateFromTexturePacker += value;
HookHandler.HookCreateFromTexturePacker();
}
remove => HookHandler._beforeCreateFromTexturePacker -= value;
}
public static event Delegates.ResetPlatformData_BeforeArgs ResetPlatformData
{
add
{

HookHandler._beforeResetPlatformData += value;
HookHandler.HookResetPlatformData();
}
remove => HookHandler._beforeResetPlatformData -= value;
}
public static event Delegates.DestroyTextureInsts_BeforeArgs DestroyTextureInsts
{
add
{

HookHandler._beforeDestroyTextureInsts += value;
HookHandler.HookDestroyTextureInsts();
}
remove => HookHandler._beforeDestroyTextureInsts -= value;
}
public static event Delegates.UnloadTextures_BeforeArgs UnloadTextures
{
add
{

HookHandler._beforeUnloadTextures += value;
HookHandler.HookUnloadTextures();
}
remove => HookHandler._beforeUnloadTextures -= value;
}
public static event Delegates.DestroyMaterialInsts_BeforeArgs DestroyMaterialInsts
{
add
{

HookHandler._beforeDestroyMaterialInsts += value;
HookHandler.HookDestroyMaterialInsts();
}
remove => HookHandler._beforeDestroyMaterialInsts -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_Transient_AfterArgs get_Transient
{
add
{

HookHandler._afterget_Transient += value;
HookHandler.Hookget_Transient();
}
remove => HookHandler._afterget_Transient -= value;
}
public static event Delegates.set_Transient_AfterArgs set_Transient
{
add
{

HookHandler._afterset_Transient += value;
HookHandler.Hookset_Transient();
}
remove => HookHandler._afterset_Transient -= value;
}
public static event Delegates.get_Count_AfterArgs get_Count
{
add
{

HookHandler._afterget_Count += value;
HookHandler.Hookget_Count();
}
remove => HookHandler._afterget_Count -= value;
}
public static event Delegates.GetSpriteIdByName_string_AfterArgs GetSpriteIdByName_string
{
add
{

HookHandler._afterGetSpriteIdByName_string += value;
HookHandler.HookGetSpriteIdByName_string();
}
remove => HookHandler._afterGetSpriteIdByName_string -= value;
}
public static event Delegates.GetSpriteIdByName_string_int_AfterArgs GetSpriteIdByName_string_int
{
add
{

HookHandler._afterGetSpriteIdByName_string_int += value;
HookHandler.HookGetSpriteIdByName_string_int();
}
remove => HookHandler._afterGetSpriteIdByName_string_int -= value;
}
public static event Delegates.ClearDictionary_AfterArgs ClearDictionary
{
add
{

HookHandler._afterClearDictionary += value;
HookHandler.HookClearDictionary();
}
remove => HookHandler._afterClearDictionary -= value;
}
public static event Delegates.GetSpriteDefinition_AfterArgs GetSpriteDefinition
{
add
{

HookHandler._afterGetSpriteDefinition += value;
HookHandler.HookGetSpriteDefinition();
}
remove => HookHandler._afterGetSpriteDefinition -= value;
}
public static event Delegates.InitDictionary_AfterArgs InitDictionary
{
add
{

HookHandler._afterInitDictionary += value;
HookHandler.HookInitDictionary();
}
remove => HookHandler._afterInitDictionary -= value;
}
public static event Delegates.get_FirstValidDefinition_AfterArgs get_FirstValidDefinition
{
add
{

HookHandler._afterget_FirstValidDefinition += value;
HookHandler.Hookget_FirstValidDefinition();
}
remove => HookHandler._afterget_FirstValidDefinition -= value;
}
public static event Delegates.IsValidSpriteId_AfterArgs IsValidSpriteId
{
add
{

HookHandler._afterIsValidSpriteId += value;
HookHandler.HookIsValidSpriteId();
}
remove => HookHandler._afterIsValidSpriteId -= value;
}
public static event Delegates.get_FirstValidDefinitionIndex_AfterArgs get_FirstValidDefinitionIndex
{
add
{

HookHandler._afterget_FirstValidDefinitionIndex += value;
HookHandler.Hookget_FirstValidDefinitionIndex();
}
remove => HookHandler._afterget_FirstValidDefinitionIndex -= value;
}
public static event Delegates.InitMaterialIds_AfterArgs InitMaterialIds
{
add
{

HookHandler._afterInitMaterialIds += value;
HookHandler.HookInitMaterialIds();
}
remove => HookHandler._afterInitMaterialIds -= value;
}
public static event Delegates.get_inst_AfterArgs get_inst
{
add
{

HookHandler._afterget_inst += value;
HookHandler.Hookget_inst();
}
remove => HookHandler._afterget_inst -= value;
}
public static event Delegates.Init_AfterArgs Init
{
add
{

HookHandler._afterInit += value;
HookHandler.HookInit();
}
remove => HookHandler._afterInit -= value;
}
public static event Delegates.CreateFromTexture_AfterArgs CreateFromTexture
{
add
{

HookHandler._afterCreateFromTexture += value;
HookHandler.HookCreateFromTexture();
}
remove => HookHandler._afterCreateFromTexture -= value;
}
public static event Delegates.CreateFromTexturePacker_AfterArgs CreateFromTexturePacker
{
add
{

HookHandler._afterCreateFromTexturePacker += value;
HookHandler.HookCreateFromTexturePacker();
}
remove => HookHandler._afterCreateFromTexturePacker -= value;
}
public static event Delegates.ResetPlatformData_AfterArgs ResetPlatformData
{
add
{

HookHandler._afterResetPlatformData += value;
HookHandler.HookResetPlatformData();
}
remove => HookHandler._afterResetPlatformData -= value;
}
public static event Delegates.DestroyTextureInsts_AfterArgs DestroyTextureInsts
{
add
{

HookHandler._afterDestroyTextureInsts += value;
HookHandler.HookDestroyTextureInsts();
}
remove => HookHandler._afterDestroyTextureInsts -= value;
}
public static event Delegates.UnloadTextures_AfterArgs UnloadTextures
{
add
{

HookHandler._afterUnloadTextures += value;
HookHandler.HookUnloadTextures();
}
remove => HookHandler._afterUnloadTextures -= value;
}
public static event Delegates.DestroyMaterialInsts_AfterArgs DestroyMaterialInsts
{
add
{

HookHandler._afterDestroyMaterialInsts += value;
HookHandler.HookDestroyMaterialInsts();
}
remove => HookHandler._afterDestroyMaterialInsts -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_Transient_WithArgs get_Transient
{
add => HookEndpointManager.Add<Delegates.get_Transient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Transient", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Transient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Transient", true), value);
}
public static event Delegates.set_Transient_WithArgs set_Transient
{
add => HookEndpointManager.Add<Delegates.set_Transient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "set_Transient", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Transient_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "set_Transient", true), value);
}
public static event Delegates.get_Count_WithArgs get_Count
{
add => HookEndpointManager.Add<Delegates.get_Count_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Count", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Count_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_Count", true), value);
}
public static event On.tk2dSpriteCollectionData.hook_GetSpriteIdByName_string GetSpriteIdByName_string
{
add => On.tk2dSpriteCollectionData.GetSpriteIdByName_string += value;
remove => On.tk2dSpriteCollectionData.GetSpriteIdByName_string -= value;
}
public static event On.tk2dSpriteCollectionData.hook_GetSpriteIdByName_string_int GetSpriteIdByName_string_int
{
add => On.tk2dSpriteCollectionData.GetSpriteIdByName_string_int += value;
remove => On.tk2dSpriteCollectionData.GetSpriteIdByName_string_int -= value;
}
public static event On.tk2dSpriteCollectionData.hook_ClearDictionary ClearDictionary
{
add => On.tk2dSpriteCollectionData.ClearDictionary += value;
remove => On.tk2dSpriteCollectionData.ClearDictionary -= value;
}
public static event On.tk2dSpriteCollectionData.hook_GetSpriteDefinition GetSpriteDefinition
{
add => On.tk2dSpriteCollectionData.GetSpriteDefinition += value;
remove => On.tk2dSpriteCollectionData.GetSpriteDefinition -= value;
}
public static event On.tk2dSpriteCollectionData.hook_InitDictionary InitDictionary
{
add => On.tk2dSpriteCollectionData.InitDictionary += value;
remove => On.tk2dSpriteCollectionData.InitDictionary -= value;
}
public static event Delegates.get_FirstValidDefinition_WithArgs get_FirstValidDefinition
{
add => HookEndpointManager.Add<Delegates.get_FirstValidDefinition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinition", true), value);
remove => HookEndpointManager.Remove<Delegates.get_FirstValidDefinition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinition", true), value);
}
public static event On.tk2dSpriteCollectionData.hook_IsValidSpriteId IsValidSpriteId
{
add => On.tk2dSpriteCollectionData.IsValidSpriteId += value;
remove => On.tk2dSpriteCollectionData.IsValidSpriteId -= value;
}
public static event Delegates.get_FirstValidDefinitionIndex_WithArgs get_FirstValidDefinitionIndex
{
add => HookEndpointManager.Add<Delegates.get_FirstValidDefinitionIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinitionIndex", true), value);
remove => HookEndpointManager.Remove<Delegates.get_FirstValidDefinitionIndex_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_FirstValidDefinitionIndex", true), value);
}
public static event On.tk2dSpriteCollectionData.hook_InitMaterialIds InitMaterialIds
{
add => On.tk2dSpriteCollectionData.InitMaterialIds += value;
remove => On.tk2dSpriteCollectionData.InitMaterialIds -= value;
}
public static event Delegates.get_inst_WithArgs get_inst
{
add => HookEndpointManager.Add<Delegates.get_inst_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_inst", true), value);
remove => HookEndpointManager.Remove<Delegates.get_inst_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSpriteCollectionData), "get_inst", true), value);
}
public static event On.tk2dSpriteCollectionData.hook_Init Init
{
add => On.tk2dSpriteCollectionData.Init += value;
remove => On.tk2dSpriteCollectionData.Init -= value;
}
public static event On.tk2dSpriteCollectionData.hook_CreateFromTexture CreateFromTexture
{
add => On.tk2dSpriteCollectionData.CreateFromTexture += value;
remove => On.tk2dSpriteCollectionData.CreateFromTexture -= value;
}
public static event On.tk2dSpriteCollectionData.hook_CreateFromTexturePacker CreateFromTexturePacker
{
add => On.tk2dSpriteCollectionData.CreateFromTexturePacker += value;
remove => On.tk2dSpriteCollectionData.CreateFromTexturePacker -= value;
}
public static event On.tk2dSpriteCollectionData.hook_ResetPlatformData ResetPlatformData
{
add => On.tk2dSpriteCollectionData.ResetPlatformData += value;
remove => On.tk2dSpriteCollectionData.ResetPlatformData -= value;
}
public static event On.tk2dSpriteCollectionData.hook_DestroyTextureInsts DestroyTextureInsts
{
add => On.tk2dSpriteCollectionData.DestroyTextureInsts += value;
remove => On.tk2dSpriteCollectionData.DestroyTextureInsts -= value;
}
public static event On.tk2dSpriteCollectionData.hook_UnloadTextures UnloadTextures
{
add => On.tk2dSpriteCollectionData.UnloadTextures += value;
remove => On.tk2dSpriteCollectionData.UnloadTextures -= value;
}
public static event On.tk2dSpriteCollectionData.hook_DestroyMaterialInsts DestroyMaterialInsts
{
add => On.tk2dSpriteCollectionData.DestroyMaterialInsts += value;
remove => On.tk2dSpriteCollectionData.DestroyMaterialInsts -= value;
}
public static event On.tk2dSpriteCollectionData.hook_OnDestroy OnDestroy
{
add => On.tk2dSpriteCollectionData.OnDestroy += value;
remove => On.tk2dSpriteCollectionData.OnDestroy -= value;
}
}

}
