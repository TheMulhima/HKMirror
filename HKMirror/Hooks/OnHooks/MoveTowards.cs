using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MoveTowards class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMoveTowards
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<MoveTowards> orig, MoveTowards self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "OnUpdate"), OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_NormalArgs _afterOnUpdate;

        private static void OnUpdate(Action<MoveTowards> orig, MoveTowards self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            _beforeOnUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null) _afterOnUpdate.Invoke(@params);
        }

        internal static void HookDoMoveTowards()
        {
            if (!HookedList.Contains("DoMoveTowards"))
            {
                HookedList.Add("DoMoveTowards");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "DoMoveTowards"), DoMoveTowards);
            }
        }

        internal static event Delegates.DoMoveTowards_BeforeArgs _beforeDoMoveTowards;
        internal static event Delegates.DoMoveTowards_NormalArgs _afterDoMoveTowards;

        private static void DoMoveTowards(Action<MoveTowards> orig, MoveTowards self)
        {
            Delegates.Params_DoMoveTowards @params = new()
            {
                self = self
            };
            _beforeDoMoveTowards?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoMoveTowards != null) _afterDoMoveTowards.Invoke(@params);
        }

        internal static void HookUpdateTargetPos()
        {
            if (!HookedList.Contains("UpdateTargetPos"))
            {
                HookedList.Add("UpdateTargetPos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "UpdateTargetPos"), UpdateTargetPos);
            }
        }

        internal static event Delegates.UpdateTargetPos_BeforeArgs _beforeUpdateTargetPos;
        internal static event Delegates.UpdateTargetPos_NormalArgs _afterUpdateTargetPos;

        private static bool UpdateTargetPos(Func<MoveTowards, bool> orig, MoveTowards self)
        {
            Delegates.Params_UpdateTargetPos @params = new()
            {
                self = self
            };
            _beforeUpdateTargetPos?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterUpdateTargetPos != null) retVal = _afterUpdateTargetPos.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTargetPos()
        {
            if (!HookedList.Contains("GetTargetPos"))
            {
                HookedList.Add("GetTargetPos");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "GetTargetPos"), GetTargetPos);
            }
        }

        internal static event Delegates.GetTargetPos_BeforeArgs _beforeGetTargetPos;
        internal static event Delegates.GetTargetPos_NormalArgs _afterGetTargetPos;

        private static Vector3 GetTargetPos(Func<MoveTowards, Vector3> orig, MoveTowards self)
        {
            Delegates.Params_GetTargetPos @params = new()
            {
                self = self
            };
            _beforeGetTargetPos?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTargetPos != null) retVal = _afterGetTargetPos.Invoke(@params);
            return retVal;
        }

        internal static void HookGetTargetPosWithVertical()
        {
            if (!HookedList.Contains("GetTargetPosWithVertical"))
            {
                HookedList.Add("GetTargetPosWithVertical");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "GetTargetPosWithVertical"),
                    GetTargetPosWithVertical);
            }
        }

        internal static event Delegates.GetTargetPosWithVertical_BeforeArgs _beforeGetTargetPosWithVertical;
        internal static event Delegates.GetTargetPosWithVertical_NormalArgs _afterGetTargetPosWithVertical;

        private static Vector3 GetTargetPosWithVertical(Func<MoveTowards, Vector3> orig, MoveTowards self)
        {
            Delegates.Params_GetTargetPosWithVertical @params = new()
            {
                self = self
            };
            _beforeGetTargetPosWithVertical?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTargetPosWithVertical != null) retVal = _afterGetTargetPosWithVertical.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoMoveTowards_BeforeArgs(Params_DoMoveTowards args);

        public delegate void DoMoveTowards_NormalArgs(Params_DoMoveTowards args);

        public delegate void GetTargetPos_BeforeArgs(Params_GetTargetPos args);

        public delegate Vector3 GetTargetPos_NormalArgs(Params_GetTargetPos args);

        public delegate void GetTargetPosWithVertical_BeforeArgs(Params_GetTargetPosWithVertical args);

        public delegate Vector3 GetTargetPosWithVertical_NormalArgs(Params_GetTargetPosWithVertical args);

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_NormalArgs(Params_OnUpdate args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void UpdateTargetPos_BeforeArgs(Params_UpdateTargetPos args);

        public delegate bool UpdateTargetPos_NormalArgs(Params_UpdateTargetPos args);

        public sealed class Params_Reset
        {
            public MoveTowards self;
        }

        public sealed class Params_OnUpdate
        {
            public MoveTowards self;
        }

        public sealed class Params_DoMoveTowards
        {
            public MoveTowards self;
        }

        public sealed class Params_UpdateTargetPos
        {
            public MoveTowards self;
        }

        public sealed class Params_GetTargetPos
        {
            public MoveTowards self;
        }

        public sealed class Params_GetTargetPosWithVertical
        {
            public MoveTowards self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoMoveTowards_BeforeArgs DoMoveTowards
        {
            add
            {
                HookHandler._beforeDoMoveTowards += value;
                HookHandler.HookDoMoveTowards();
            }
            remove => HookHandler._beforeDoMoveTowards -= value;
        }

        public static event Delegates.UpdateTargetPos_BeforeArgs UpdateTargetPos
        {
            add
            {
                HookHandler._beforeUpdateTargetPos += value;
                HookHandler.HookUpdateTargetPos();
            }
            remove => HookHandler._beforeUpdateTargetPos -= value;
        }

        public static event Delegates.GetTargetPos_BeforeArgs GetTargetPos
        {
            add
            {
                HookHandler._beforeGetTargetPos += value;
                HookHandler.HookGetTargetPos();
            }
            remove => HookHandler._beforeGetTargetPos -= value;
        }

        public static event Delegates.GetTargetPosWithVertical_BeforeArgs GetTargetPosWithVertical
        {
            add
            {
                HookHandler._beforeGetTargetPosWithVertical += value;
                HookHandler.HookGetTargetPosWithVertical();
            }
            remove => HookHandler._beforeGetTargetPosWithVertical -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoMoveTowards_NormalArgs DoMoveTowards
        {
            add
            {
                HookHandler._afterDoMoveTowards += value;
                HookHandler.HookDoMoveTowards();
            }
            remove => HookHandler._afterDoMoveTowards -= value;
        }

        public static event Delegates.UpdateTargetPos_NormalArgs UpdateTargetPos
        {
            add
            {
                HookHandler._afterUpdateTargetPos += value;
                HookHandler.HookUpdateTargetPos();
            }
            remove => HookHandler._afterUpdateTargetPos -= value;
        }

        public static event Delegates.GetTargetPos_NormalArgs GetTargetPos
        {
            add
            {
                HookHandler._afterGetTargetPos += value;
                HookHandler.HookGetTargetPos();
            }
            remove => HookHandler._afterGetTargetPos -= value;
        }

        public static event Delegates.GetTargetPosWithVertical_NormalArgs GetTargetPosWithVertical
        {
            add
            {
                HookHandler._afterGetTargetPosWithVertical += value;
                HookHandler.HookGetTargetPosWithVertical();
            }
            remove => HookHandler._afterGetTargetPosWithVertical -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "Reset"), value);
        }

        public static event Delegates.OnUpdate_NormalArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "OnUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "OnUpdate"), value);
        }

        public static event Delegates.DoMoveTowards_NormalArgs DoMoveTowards
        {
            add => HookEndpointManager.Add<Delegates.DoMoveTowards_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "DoMoveTowards"), value);
            remove => HookEndpointManager.Remove<Delegates.DoMoveTowards_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "DoMoveTowards"), value);
        }

        public static event Delegates.UpdateTargetPos_NormalArgs UpdateTargetPos
        {
            add => HookEndpointManager.Add<Delegates.UpdateTargetPos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "UpdateTargetPos"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateTargetPos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "UpdateTargetPos"), value);
        }

        public static event Delegates.GetTargetPos_NormalArgs GetTargetPos
        {
            add => HookEndpointManager.Add<Delegates.GetTargetPos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "GetTargetPos"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTargetPos_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "GetTargetPos"), value);
        }

        public static event Delegates.GetTargetPosWithVertical_NormalArgs GetTargetPosWithVertical
        {
            add => HookEndpointManager.Add<Delegates.GetTargetPosWithVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "GetTargetPosWithVertical"), value);
            remove => HookEndpointManager.Remove<Delegates.GetTargetPosWithVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MoveTowards), "GetTargetPosWithVertical"), value);
        }
    }
}