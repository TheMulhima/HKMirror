using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MoveTowards class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMoveTowards
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "Reset", true),
                    Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.MoveTowards> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnUpdate()
        {
            if (!HookedList.Contains("OnUpdate"))
            {
                HookedList.Add("OnUpdate");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "OnUpdate", true),
                    OnUpdate);
            }
        }

        internal static event Delegates.OnUpdate_BeforeArgs _beforeOnUpdate;
        internal static event Delegates.OnUpdate_AfterArgs _afterOnUpdate;

        private static void OnUpdate(Action<HutongGames.PlayMaker.Actions.MoveTowards> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self)
        {
            Delegates.Params_OnUpdate @params = new()
            {
                self = self
            };
            if (_beforeOnUpdate != null)
            {
                foreach (Delegates.OnUpdate_BeforeArgs toInvoke in _beforeOnUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeOnUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnUpdate != null)
            {
                foreach (Delegates.OnUpdate_AfterArgs toInvoke in _afterOnUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterOnUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoMoveTowards()
        {
            if (!HookedList.Contains("DoMoveTowards"))
            {
                HookedList.Add("DoMoveTowards");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "DoMoveTowards",
                        true), DoMoveTowards);
            }
        }

        internal static event Delegates.DoMoveTowards_BeforeArgs _beforeDoMoveTowards;
        internal static event Delegates.DoMoveTowards_AfterArgs _afterDoMoveTowards;

        private static void DoMoveTowards(Action<HutongGames.PlayMaker.Actions.MoveTowards> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self)
        {
            Delegates.Params_DoMoveTowards @params = new()
            {
                self = self
            };
            if (_beforeDoMoveTowards != null)
            {
                foreach (Delegates.DoMoveTowards_BeforeArgs toInvoke in _beforeDoMoveTowards.GetInvocationList())
                {
                    try
                    {
                        _beforeDoMoveTowards?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoMoveTowards != null)
            {
                foreach (Delegates.DoMoveTowards_AfterArgs toInvoke in _afterDoMoveTowards.GetInvocationList())
                {
                    try
                    {
                        _afterDoMoveTowards.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateTargetPos()
        {
            if (!HookedList.Contains("UpdateTargetPos"))
            {
                HookedList.Add("UpdateTargetPos");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "UpdateTargetPos",
                        true), UpdateTargetPos);
            }
        }

        internal static event Delegates.UpdateTargetPos_BeforeArgs _beforeUpdateTargetPos;
        internal static event Delegates.UpdateTargetPos_AfterArgs _afterUpdateTargetPos;

        private static bool UpdateTargetPos(Func<HutongGames.PlayMaker.Actions.MoveTowards, bool> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self)
        {
            Delegates.Params_UpdateTargetPos @params = new()
            {
                self = self
            };
            if (_beforeUpdateTargetPos != null)
            {
                foreach (Delegates.UpdateTargetPos_BeforeArgs toInvoke in _beforeUpdateTargetPos.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateTargetPos?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterUpdateTargetPos != null)
            {
                foreach (Delegates.UpdateTargetPos_AfterArgs toInvoke in _afterUpdateTargetPos.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterUpdateTargetPos.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetTargetPos()
        {
            if (!HookedList.Contains("GetTargetPos"))
            {
                HookedList.Add("GetTargetPos");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "GetTargetPos",
                        true), GetTargetPos);
            }
        }

        internal static event Delegates.GetTargetPos_BeforeArgs _beforeGetTargetPos;
        internal static event Delegates.GetTargetPos_AfterArgs _afterGetTargetPos;

        private static UnityEngine.Vector3 GetTargetPos(
            Func<HutongGames.PlayMaker.Actions.MoveTowards, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self)
        {
            Delegates.Params_GetTargetPos @params = new()
            {
                self = self
            };
            if (_beforeGetTargetPos != null)
            {
                foreach (Delegates.GetTargetPos_BeforeArgs toInvoke in _beforeGetTargetPos.GetInvocationList())
                {
                    try
                    {
                        _beforeGetTargetPos?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTargetPos != null)
            {
                foreach (Delegates.GetTargetPos_AfterArgs toInvoke in _afterGetTargetPos.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTargetPos.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetTargetPosWithVertical()
        {
            if (!HookedList.Contains("GetTargetPosWithVertical"))
            {
                HookedList.Add("GetTargetPosWithVertical");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards),
                        "GetTargetPosWithVertical", true), GetTargetPosWithVertical);
            }
        }

        internal static event Delegates.GetTargetPosWithVertical_BeforeArgs _beforeGetTargetPosWithVertical;
        internal static event Delegates.GetTargetPosWithVertical_AfterArgs _afterGetTargetPosWithVertical;

        private static UnityEngine.Vector3 GetTargetPosWithVertical(
            Func<HutongGames.PlayMaker.Actions.MoveTowards, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self)
        {
            Delegates.Params_GetTargetPosWithVertical @params = new()
            {
                self = self
            };
            if (_beforeGetTargetPosWithVertical != null)
            {
                foreach (Delegates.GetTargetPosWithVertical_BeforeArgs toInvoke in _beforeGetTargetPosWithVertical
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetTargetPosWithVertical?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetTargetPosWithVertical != null)
            {
                foreach (Delegates.GetTargetPosWithVertical_AfterArgs toInvoke in _afterGetTargetPosWithVertical
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTargetPosWithVertical.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.MoveTowards self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.MoveTowards> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self);

        public sealed class Params_OnUpdate
        {
            public HutongGames.PlayMaker.Actions.MoveTowards self;
        }

        public delegate void OnUpdate_BeforeArgs(Params_OnUpdate args);

        public delegate void OnUpdate_AfterArgs(Params_OnUpdate args);

        public delegate void OnUpdate_WithArgs(Action<HutongGames.PlayMaker.Actions.MoveTowards> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self);

        public sealed class Params_DoMoveTowards
        {
            public HutongGames.PlayMaker.Actions.MoveTowards self;
        }

        public delegate void DoMoveTowards_BeforeArgs(Params_DoMoveTowards args);

        public delegate void DoMoveTowards_AfterArgs(Params_DoMoveTowards args);

        public delegate void DoMoveTowards_WithArgs(Action<HutongGames.PlayMaker.Actions.MoveTowards> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self);

        public sealed class Params_UpdateTargetPos
        {
            public HutongGames.PlayMaker.Actions.MoveTowards self;
        }

        public delegate void UpdateTargetPos_BeforeArgs(Params_UpdateTargetPos args);

        public delegate bool UpdateTargetPos_AfterArgs(Params_UpdateTargetPos args, bool ret);

        public delegate bool UpdateTargetPos_WithArgs(Func<HutongGames.PlayMaker.Actions.MoveTowards, bool> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self);

        public sealed class Params_GetTargetPos
        {
            public HutongGames.PlayMaker.Actions.MoveTowards self;
        }

        public delegate void GetTargetPos_BeforeArgs(Params_GetTargetPos args);

        public delegate UnityEngine.Vector3 GetTargetPos_AfterArgs(Params_GetTargetPos args, UnityEngine.Vector3 ret);

        public delegate UnityEngine.Vector3 GetTargetPos_WithArgs(
            Func<HutongGames.PlayMaker.Actions.MoveTowards, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self);

        public sealed class Params_GetTargetPosWithVertical
        {
            public HutongGames.PlayMaker.Actions.MoveTowards self;
        }

        public delegate void GetTargetPosWithVertical_BeforeArgs(Params_GetTargetPosWithVertical args);

        public delegate UnityEngine.Vector3 GetTargetPosWithVertical_AfterArgs(Params_GetTargetPosWithVertical args,
            UnityEngine.Vector3 ret);

        public delegate UnityEngine.Vector3 GetTargetPosWithVertical_WithArgs(
            Func<HutongGames.PlayMaker.Actions.MoveTowards, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.MoveTowards self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnUpdate_BeforeArgs OnUpdate
        {
            add
            {
                HookHandler._beforeOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._beforeOnUpdate -= value;
        }

        public static event Delegates.DoMoveTowards_BeforeArgs DoMoveTowards
        {
            add
            {
                HookHandler._beforeDoMoveTowards += value;
                HookHandler.HookDoMoveTowards();
            }
            remove => HookHandler._beforeDoMoveTowards -= value;
        }

        public static event Delegates.UpdateTargetPos_BeforeArgs UpdateTargetPos
        {
            add
            {
                HookHandler._beforeUpdateTargetPos += value;
                HookHandler.HookUpdateTargetPos();
            }
            remove => HookHandler._beforeUpdateTargetPos -= value;
        }

        public static event Delegates.GetTargetPos_BeforeArgs GetTargetPos
        {
            add
            {
                HookHandler._beforeGetTargetPos += value;
                HookHandler.HookGetTargetPos();
            }
            remove => HookHandler._beforeGetTargetPos -= value;
        }

        public static event Delegates.GetTargetPosWithVertical_BeforeArgs GetTargetPosWithVertical
        {
            add
            {
                HookHandler._beforeGetTargetPosWithVertical += value;
                HookHandler.HookGetTargetPosWithVertical();
            }
            remove => HookHandler._beforeGetTargetPosWithVertical -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnUpdate_AfterArgs OnUpdate
        {
            add
            {
                HookHandler._afterOnUpdate += value;
                HookHandler.HookOnUpdate();
            }
            remove => HookHandler._afterOnUpdate -= value;
        }

        public static event Delegates.DoMoveTowards_AfterArgs DoMoveTowards
        {
            add
            {
                HookHandler._afterDoMoveTowards += value;
                HookHandler.HookDoMoveTowards();
            }
            remove => HookHandler._afterDoMoveTowards -= value;
        }

        public static event Delegates.UpdateTargetPos_AfterArgs UpdateTargetPos
        {
            add
            {
                HookHandler._afterUpdateTargetPos += value;
                HookHandler.HookUpdateTargetPos();
            }
            remove => HookHandler._afterUpdateTargetPos -= value;
        }

        public static event Delegates.GetTargetPos_AfterArgs GetTargetPos
        {
            add
            {
                HookHandler._afterGetTargetPos += value;
                HookHandler.HookGetTargetPos();
            }
            remove => HookHandler._afterGetTargetPos -= value;
        }

        public static event Delegates.GetTargetPosWithVertical_AfterArgs GetTargetPosWithVertical
        {
            add
            {
                HookHandler._afterGetTargetPosWithVertical += value;
                HookHandler.HookGetTargetPosWithVertical();
            }
            remove => HookHandler._afterGetTargetPosWithVertical -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "Reset", true),
                value);
        }

        public static event Delegates.OnUpdate_WithArgs OnUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "OnUpdate", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "OnUpdate", true),
                value);
        }

        public static event Delegates.DoMoveTowards_WithArgs DoMoveTowards
        {
            add => HookEndpointManager.Add<Delegates.DoMoveTowards_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "DoMoveTowards",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoMoveTowards_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "DoMoveTowards",
                    true), value);
        }

        public static event Delegates.UpdateTargetPos_WithArgs UpdateTargetPos
        {
            add => HookEndpointManager.Add<Delegates.UpdateTargetPos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "UpdateTargetPos",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateTargetPos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "UpdateTargetPos",
                    true), value);
        }

        public static event Delegates.GetTargetPos_WithArgs GetTargetPos
        {
            add => HookEndpointManager.Add<Delegates.GetTargetPos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "GetTargetPos", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.GetTargetPos_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards), "GetTargetPos", true),
                value);
        }

        public static event Delegates.GetTargetPosWithVertical_WithArgs GetTargetPosWithVertical
        {
            add => HookEndpointManager.Add<Delegates.GetTargetPosWithVertical_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards),
                    "GetTargetPosWithVertical", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetTargetPosWithVertical_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.MoveTowards),
                    "GetTargetPosWithVertical", true), value);
        }
    }
}