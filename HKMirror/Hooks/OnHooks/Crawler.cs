namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for Crawler class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCrawler
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.Crawler.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.Crawler.orig_Awake orig, Crawler self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.Crawler.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.Crawler.orig_Start orig, Crawler self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookWalk()
        {
            if (!HookedList.Contains("Walk"))
            {
                HookedList.Add("Walk");
                On.Crawler.Walk += Walk;
            }
        }

        internal static event Delegates.Walk_BeforeArgs _beforeWalk;

        private static IEnumerator Walk(On.Crawler.orig_Walk orig, Crawler self)
        {
            Delegates.Params_Walk @params = new()
            {
                self = self
            };
            _beforeWalk?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookTurn()
        {
            if (!HookedList.Contains("Turn"))
            {
                HookedList.Add("Turn");
                On.Crawler.Turn += Turn;
            }
        }

        internal static event Delegates.Turn_BeforeArgs _beforeTurn;

        private static IEnumerator Turn(On.Crawler.orig_Turn orig, Crawler self)
        {
            Delegates.Params_Turn @params = new()
            {
                self = self
            };
            _beforeTurn?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookCheckRayLocal()
        {
            if (!HookedList.Contains("CheckRayLocal"))
            {
                HookedList.Add("CheckRayLocal");
                On.Crawler.CheckRayLocal += CheckRayLocal;
            }
        }

        internal static event Delegates.CheckRayLocal_BeforeArgs _beforeCheckRayLocal;
        internal static event Delegates.CheckRayLocal_NormalArgs _afterCheckRayLocal;

        private static bool CheckRayLocal(On.Crawler.orig_CheckRayLocal orig, Crawler self, Vector2 originLocal,
            Vector2 directionLocal, float length)
        {
            Delegates.Params_CheckRayLocal @params = new()
            {
                self = self, originLocal = originLocal, directionLocal = directionLocal, length = length
            };
            _beforeCheckRayLocal?.Invoke(@params);
            self = @params.self;
            originLocal = @params.originLocal;
            directionLocal = @params.directionLocal;
            length = @params.length;
            var retVal = orig(self, originLocal, directionLocal, length);
            if (_afterCheckRayLocal != null) retVal = _afterCheckRayLocal.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CheckRayLocal_BeforeArgs(Params_CheckRayLocal args);

        public delegate bool CheckRayLocal_NormalArgs(Params_CheckRayLocal args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Turn_BeforeArgs(Params_Turn args);

        public delegate IEnumerator Turn_NormalArgs(Params_Turn args);

        public delegate void Walk_BeforeArgs(Params_Walk args);

        public delegate IEnumerator Walk_NormalArgs(Params_Walk args);

        public sealed class Params_Awake
        {
            public Crawler self;
        }

        public sealed class Params_Start
        {
            public Crawler self;
        }

        public sealed class Params_Walk
        {
            public Crawler self;
        }

        public sealed class Params_Turn
        {
            public Crawler self;
        }

        public sealed class Params_CheckRayLocal
        {
            public Vector2 directionLocal;
            public float length;
            public Vector2 originLocal;
            public Crawler self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Walk_BeforeArgs Walk
        {
            add
            {
                HookHandler._beforeWalk += value;
                HookHandler.HookWalk();
            }
            remove => HookHandler._beforeWalk -= value;
        }

        public static event Delegates.Turn_BeforeArgs Turn
        {
            add
            {
                HookHandler._beforeTurn += value;
                HookHandler.HookTurn();
            }
            remove => HookHandler._beforeTurn -= value;
        }

        public static event Delegates.CheckRayLocal_BeforeArgs CheckRayLocal
        {
            add
            {
                HookHandler._beforeCheckRayLocal += value;
                HookHandler.HookCheckRayLocal();
            }
            remove => HookHandler._beforeCheckRayLocal -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.CheckRayLocal_NormalArgs CheckRayLocal
        {
            add
            {
                HookHandler._afterCheckRayLocal += value;
                HookHandler.HookCheckRayLocal();
            }
            remove => HookHandler._afterCheckRayLocal -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.Crawler.hook_Awake Awake
        {
            add => On.Crawler.Awake += value;
            remove => On.Crawler.Awake -= value;
        }

        public static event On.Crawler.hook_Start Start
        {
            add => On.Crawler.Start += value;
            remove => On.Crawler.Start -= value;
        }

        public static event On.Crawler.hook_Walk Walk
        {
            add => On.Crawler.Walk += value;
            remove => On.Crawler.Walk -= value;
        }

        public static event On.Crawler.hook_Turn Turn
        {
            add => On.Crawler.Turn += value;
            remove => On.Crawler.Turn -= value;
        }

        public static event On.Crawler.hook_CheckRayLocal CheckRayLocal
        {
            add => On.Crawler.CheckRayLocal += value;
            remove => On.Crawler.CheckRayLocal -= value;
        }
    }
}