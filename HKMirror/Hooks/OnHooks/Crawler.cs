using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for Crawler class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCrawler
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.Crawler.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.Crawler.orig_Awake orig,Crawler self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.Crawler.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.Crawler.orig_Start orig,Crawler self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookWalk()
{
if (!HookedList.Contains("Walk"))
{
HookedList.Add("Walk");
On.Crawler.Walk += Walk;

}
}
internal static event Delegates.Walk_BeforeArgs _beforeWalk;
private static System.Collections.IEnumerator Walk(On.Crawler.orig_Walk orig,Crawler self)
{
Delegates.Params_Walk @params = new() 
{
self = self
};
if (_beforeWalk != null)
{
foreach (Delegates.Walk_BeforeArgs toInvoke in _beforeWalk.GetInvocationList())
{
try
{
_beforeWalk?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookTurn()
{
if (!HookedList.Contains("Turn"))
{
HookedList.Add("Turn");
On.Crawler.Turn += Turn;

}
}
internal static event Delegates.Turn_BeforeArgs _beforeTurn;
private static System.Collections.IEnumerator Turn(On.Crawler.orig_Turn orig,Crawler self)
{
Delegates.Params_Turn @params = new() 
{
self = self
};
if (_beforeTurn != null)
{
foreach (Delegates.Turn_BeforeArgs toInvoke in _beforeTurn.GetInvocationList())
{
try
{
_beforeTurn?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookCheckRayLocal()
{
if (!HookedList.Contains("CheckRayLocal"))
{
HookedList.Add("CheckRayLocal");
On.Crawler.CheckRayLocal += CheckRayLocal;

}
}
internal static event Delegates.CheckRayLocal_BeforeArgs _beforeCheckRayLocal;
internal static event Delegates.CheckRayLocal_AfterArgs _afterCheckRayLocal;
private static bool CheckRayLocal(On.Crawler.orig_CheckRayLocal orig,Crawler self,  UnityEngine.Vector2 originLocal,  UnityEngine.Vector2 directionLocal,  float length)
{
Delegates.Params_CheckRayLocal @params = new() 
{
self = self
, originLocal = originLocal
, directionLocal = directionLocal
, length = length
};
if (_beforeCheckRayLocal != null)
{
foreach (Delegates.CheckRayLocal_BeforeArgs toInvoke in _beforeCheckRayLocal.GetInvocationList())
{
try
{
_beforeCheckRayLocal?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
originLocal = @params.originLocal;
directionLocal = @params.directionLocal;
length = @params.length;
var retVal = orig(self, originLocal, directionLocal, length);
if (_afterCheckRayLocal != null)
{
foreach (Delegates.CheckRayLocal_AfterArgs toInvoke in _afterCheckRayLocal.GetInvocationList())
{
try
{
retVal = _afterCheckRayLocal.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public Crawler self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<Crawler> orig, Crawler self);
public sealed class Params_Start
{
public Crawler self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<Crawler> orig, Crawler self);
public sealed class Params_Walk
{
public Crawler self;
}
public delegate void Walk_BeforeArgs(Params_Walk args);
public delegate System.Collections.IEnumerator Walk_AfterArgs(Params_Walk args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Walk_WithArgs (Func<Crawler, System.Collections.IEnumerator> orig, Crawler self);
public sealed class Params_Turn
{
public Crawler self;
}
public delegate void Turn_BeforeArgs(Params_Turn args);
public delegate System.Collections.IEnumerator Turn_AfterArgs(Params_Turn args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Turn_WithArgs (Func<Crawler, System.Collections.IEnumerator> orig, Crawler self);
public sealed class Params_CheckRayLocal
{
public Crawler self;
public UnityEngine.Vector2 originLocal;
public UnityEngine.Vector2 directionLocal;
public float length;
}
public delegate void CheckRayLocal_BeforeArgs(Params_CheckRayLocal args);
public delegate bool CheckRayLocal_AfterArgs(Params_CheckRayLocal args, bool ret);
public delegate bool CheckRayLocal_WithArgs (Func<Crawler,  UnityEngine.Vector2,  UnityEngine.Vector2,  float, bool> orig, Crawler self,  UnityEngine.Vector2 originLocal,  UnityEngine.Vector2 directionLocal,  float length);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Walk_BeforeArgs Walk
{
add
{

HookHandler._beforeWalk += value;
HookHandler.HookWalk();
}
remove => HookHandler._beforeWalk -= value;
}
public static event Delegates.Turn_BeforeArgs Turn
{
add
{

HookHandler._beforeTurn += value;
HookHandler.HookTurn();
}
remove => HookHandler._beforeTurn -= value;
}
public static event Delegates.CheckRayLocal_BeforeArgs CheckRayLocal
{
add
{

HookHandler._beforeCheckRayLocal += value;
HookHandler.HookCheckRayLocal();
}
remove => HookHandler._beforeCheckRayLocal -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.CheckRayLocal_AfterArgs CheckRayLocal
{
add
{

HookHandler._afterCheckRayLocal += value;
HookHandler.HookCheckRayLocal();
}
remove => HookHandler._afterCheckRayLocal -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.Crawler.hook_Awake Awake
{
add => On.Crawler.Awake += value;
remove => On.Crawler.Awake -= value;
}
public static event On.Crawler.hook_Start Start
{
add => On.Crawler.Start += value;
remove => On.Crawler.Start -= value;
}
public static event On.Crawler.hook_Walk Walk
{
add => On.Crawler.Walk += value;
remove => On.Crawler.Walk -= value;
}
public static event On.Crawler.hook_Turn Turn
{
add => On.Crawler.Turn += value;
remove => On.Crawler.Turn -= value;
}
public static event On.Crawler.hook_CheckRayLocal CheckRayLocal
{
add => On.Crawler.CheckRayLocal += value;
remove => On.Crawler.CheckRayLocal -= value;
}
}

}
