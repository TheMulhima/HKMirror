namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUILayoutItem class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUILayoutItem
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookFixedSizeLayoutItem()
        {
            if (!HookedList.Contains("FixedSizeLayoutItem"))
            {
                HookedList.Add("FixedSizeLayoutItem");
                On.tk2dUILayoutItem.FixedSizeLayoutItem += FixedSizeLayoutItem;
            }
        }

        internal static event Delegates.FixedSizeLayoutItem_BeforeArgs _beforeFixedSizeLayoutItem;
        internal static event Delegates.FixedSizeLayoutItem_AfterArgs _afterFixedSizeLayoutItem;

        private static tk2dUILayoutItem FixedSizeLayoutItem(On.tk2dUILayoutItem.orig_FixedSizeLayoutItem orig)
        {
            if (_beforeFixedSizeLayoutItem != null)
                foreach (Delegates.FixedSizeLayoutItem_BeforeArgs toInvoke in _beforeFixedSizeLayoutItem
                             .GetInvocationList())
                    try
                    {
                        _beforeFixedSizeLayoutItem?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterFixedSizeLayoutItem != null)
                foreach (Delegates.FixedSizeLayoutItem_AfterArgs toInvoke in
                         _afterFixedSizeLayoutItem.GetInvocationList())
                    try
                    {
                        retVal = _afterFixedSizeLayoutItem.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate tk2dUILayoutItem FixedSizeLayoutItem_AfterArgs(tk2dUILayoutItem ret);

        public delegate void FixedSizeLayoutItem_BeforeArgs();

        public delegate tk2dUILayoutItem FixedSizeLayoutItem_WithArgs(Func<tk2dUILayoutItem> orig);
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.FixedSizeLayoutItem_BeforeArgs FixedSizeLayoutItem
        {
            add
            {
                HookHandler._beforeFixedSizeLayoutItem += value;
                HookHandler.HookFixedSizeLayoutItem();
            }
            remove => HookHandler._beforeFixedSizeLayoutItem -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.FixedSizeLayoutItem_AfterArgs FixedSizeLayoutItem
        {
            add
            {
                HookHandler._afterFixedSizeLayoutItem += value;
                HookHandler.HookFixedSizeLayoutItem();
            }
            remove => HookHandler._afterFixedSizeLayoutItem -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.tk2dUILayoutItem.hook_FixedSizeLayoutItem FixedSizeLayoutItem
        {
            add => On.tk2dUILayoutItem.FixedSizeLayoutItem += value;
            remove => On.tk2dUILayoutItem.FixedSizeLayoutItem -= value;
        }
    }
}