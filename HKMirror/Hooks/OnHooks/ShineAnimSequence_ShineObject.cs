using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ShineAnimSequence_ShineObject class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShineAnimSequence_ShineObject
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookShineAnim()
{
if (!HookedList.Contains("ShineAnim"))
{
HookedList.Add("ShineAnim");
new Hook(ReflectionHelper.GetMethodInfo(typeof(ShineAnimSequence.ShineObject), "ShineAnim", true), ShineAnim);

}
}
internal static event Delegates.ShineAnim_BeforeArgs _beforeShineAnim;
private static System.Collections.IEnumerator ShineAnim(Func<ShineAnimSequence.ShineObject, System.Collections.IEnumerator> orig, ShineAnimSequence.ShineObject self)
{
Delegates.Params_ShineAnim @params = new() 
{
self = self
};
if (_beforeShineAnim != null)
{
foreach (Delegates.ShineAnim_BeforeArgs toInvoke in _beforeShineAnim.GetInvocationList())
{
try
{
_beforeShineAnim?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_ShineAnim
{
public ShineAnimSequence.ShineObject self;
}
public delegate void ShineAnim_BeforeArgs(Params_ShineAnim args);
public delegate System.Collections.IEnumerator ShineAnim_AfterArgs(Params_ShineAnim args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator ShineAnim_WithArgs (Func<ShineAnimSequence.ShineObject, System.Collections.IEnumerator> orig, ShineAnimSequence.ShineObject self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.ShineAnim_BeforeArgs ShineAnim
{
add
{

HookHandler._beforeShineAnim += value;
HookHandler.HookShineAnim();
}
remove => HookHandler._beforeShineAnim -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.ShineAnim_WithArgs ShineAnim
{
add => HookEndpointManager.Add<Delegates.ShineAnim_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(ShineAnimSequence.ShineObject), "ShineAnim", true), value);
remove => HookEndpointManager.Remove<Delegates.ShineAnim_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(ShineAnimSequence.ShineObject), "ShineAnim", true), value);
}
}

}
