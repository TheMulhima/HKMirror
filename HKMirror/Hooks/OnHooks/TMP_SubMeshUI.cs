using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TMP_SubMeshUI class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_SubMeshUI
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_fontAsset()
{
if (!HookedList.Contains("get_fontAsset"))
{
HookedList.Add("get_fontAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fontAsset", true), get_fontAsset);

}
}
internal static event Delegates.get_fontAsset_BeforeArgs _beforeget_fontAsset;
internal static event Delegates.get_fontAsset_AfterArgs _afterget_fontAsset;
private static TMPro.TMP_FontAsset get_fontAsset(Func<TMPro.TMP_SubMeshUI, TMPro.TMP_FontAsset> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_fontAsset @params = new() 
{
self = self
};
if (_beforeget_fontAsset != null)
{
foreach (Delegates.get_fontAsset_BeforeArgs toInvoke in _beforeget_fontAsset.GetInvocationList())
{
try
{
_beforeget_fontAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fontAsset != null)
{
foreach (Delegates.get_fontAsset_AfterArgs toInvoke in _afterget_fontAsset.GetInvocationList())
{
try
{
retVal = _afterget_fontAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fontAsset()
{
if (!HookedList.Contains("set_fontAsset"))
{
HookedList.Add("set_fontAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fontAsset", true), set_fontAsset);

}
}
internal static event Delegates.set_fontAsset_BeforeArgs _beforeset_fontAsset;
internal static event Delegates.set_fontAsset_AfterArgs _afterset_fontAsset;
private static void set_fontAsset(Action<TMPro.TMP_SubMeshUI,  TMPro.TMP_FontAsset> orig, TMPro.TMP_SubMeshUI self,  TMPro.TMP_FontAsset value)
{
Delegates.Params_set_fontAsset @params = new() 
{
self = self
, value = value
};
if (_beforeset_fontAsset != null)
{
foreach (Delegates.set_fontAsset_BeforeArgs toInvoke in _beforeset_fontAsset.GetInvocationList())
{
try
{
_beforeset_fontAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fontAsset != null)
{
foreach (Delegates.set_fontAsset_AfterArgs toInvoke in _afterset_fontAsset.GetInvocationList())
{
try
{
_afterset_fontAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_spriteAsset()
{
if (!HookedList.Contains("get_spriteAsset"))
{
HookedList.Add("get_spriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_spriteAsset", true), get_spriteAsset);

}
}
internal static event Delegates.get_spriteAsset_BeforeArgs _beforeget_spriteAsset;
internal static event Delegates.get_spriteAsset_AfterArgs _afterget_spriteAsset;
private static TMPro.TMP_SpriteAsset get_spriteAsset(Func<TMPro.TMP_SubMeshUI, TMPro.TMP_SpriteAsset> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_spriteAsset @params = new() 
{
self = self
};
if (_beforeget_spriteAsset != null)
{
foreach (Delegates.get_spriteAsset_BeforeArgs toInvoke in _beforeget_spriteAsset.GetInvocationList())
{
try
{
_beforeget_spriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_spriteAsset != null)
{
foreach (Delegates.get_spriteAsset_AfterArgs toInvoke in _afterget_spriteAsset.GetInvocationList())
{
try
{
retVal = _afterget_spriteAsset.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_spriteAsset()
{
if (!HookedList.Contains("set_spriteAsset"))
{
HookedList.Add("set_spriteAsset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_spriteAsset", true), set_spriteAsset);

}
}
internal static event Delegates.set_spriteAsset_BeforeArgs _beforeset_spriteAsset;
internal static event Delegates.set_spriteAsset_AfterArgs _afterset_spriteAsset;
private static void set_spriteAsset(Action<TMPro.TMP_SubMeshUI,  TMPro.TMP_SpriteAsset> orig, TMPro.TMP_SubMeshUI self,  TMPro.TMP_SpriteAsset value)
{
Delegates.Params_set_spriteAsset @params = new() 
{
self = self
, value = value
};
if (_beforeset_spriteAsset != null)
{
foreach (Delegates.set_spriteAsset_BeforeArgs toInvoke in _beforeset_spriteAsset.GetInvocationList())
{
try
{
_beforeset_spriteAsset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_spriteAsset != null)
{
foreach (Delegates.set_spriteAsset_AfterArgs toInvoke in _afterset_spriteAsset.GetInvocationList())
{
try
{
_afterset_spriteAsset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_mainTexture()
{
if (!HookedList.Contains("get_mainTexture"))
{
HookedList.Add("get_mainTexture");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_mainTexture", true), get_mainTexture);

}
}
internal static event Delegates.get_mainTexture_BeforeArgs _beforeget_mainTexture;
internal static event Delegates.get_mainTexture_AfterArgs _afterget_mainTexture;
private static UnityEngine.Texture get_mainTexture(Func<TMPro.TMP_SubMeshUI, UnityEngine.Texture> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_mainTexture @params = new() 
{
self = self
};
if (_beforeget_mainTexture != null)
{
foreach (Delegates.get_mainTexture_BeforeArgs toInvoke in _beforeget_mainTexture.GetInvocationList())
{
try
{
_beforeget_mainTexture?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_mainTexture != null)
{
foreach (Delegates.get_mainTexture_AfterArgs toInvoke in _afterget_mainTexture.GetInvocationList())
{
try
{
retVal = _afterget_mainTexture.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_material()
{
if (!HookedList.Contains("get_material"))
{
HookedList.Add("get_material");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_material", true), get_material);

}
}
internal static event Delegates.get_material_BeforeArgs _beforeget_material;
internal static event Delegates.get_material_AfterArgs _afterget_material;
private static UnityEngine.Material get_material(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_material @params = new() 
{
self = self
};
if (_beforeget_material != null)
{
foreach (Delegates.get_material_BeforeArgs toInvoke in _beforeget_material.GetInvocationList())
{
try
{
_beforeget_material?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_material != null)
{
foreach (Delegates.get_material_AfterArgs toInvoke in _afterget_material.GetInvocationList())
{
try
{
retVal = _afterget_material.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_material()
{
if (!HookedList.Contains("set_material"))
{
HookedList.Add("set_material");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_material", true), set_material);

}
}
internal static event Delegates.set_material_BeforeArgs _beforeset_material;
internal static event Delegates.set_material_AfterArgs _afterset_material;
private static void set_material(Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value)
{
Delegates.Params_set_material @params = new() 
{
self = self
, value = value
};
if (_beforeset_material != null)
{
foreach (Delegates.set_material_BeforeArgs toInvoke in _beforeset_material.GetInvocationList())
{
try
{
_beforeset_material?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_material != null)
{
foreach (Delegates.set_material_AfterArgs toInvoke in _afterset_material.GetInvocationList())
{
try
{
_afterset_material.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_sharedMaterial()
{
if (!HookedList.Contains("get_sharedMaterial"))
{
HookedList.Add("get_sharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_sharedMaterial", true), get_sharedMaterial);

}
}
internal static event Delegates.get_sharedMaterial_BeforeArgs _beforeget_sharedMaterial;
internal static event Delegates.get_sharedMaterial_AfterArgs _afterget_sharedMaterial;
private static UnityEngine.Material get_sharedMaterial(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_sharedMaterial @params = new() 
{
self = self
};
if (_beforeget_sharedMaterial != null)
{
foreach (Delegates.get_sharedMaterial_BeforeArgs toInvoke in _beforeget_sharedMaterial.GetInvocationList())
{
try
{
_beforeget_sharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_sharedMaterial != null)
{
foreach (Delegates.get_sharedMaterial_AfterArgs toInvoke in _afterget_sharedMaterial.GetInvocationList())
{
try
{
retVal = _afterget_sharedMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_sharedMaterial()
{
if (!HookedList.Contains("set_sharedMaterial"))
{
HookedList.Add("set_sharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_sharedMaterial", true), set_sharedMaterial);

}
}
internal static event Delegates.set_sharedMaterial_BeforeArgs _beforeset_sharedMaterial;
internal static event Delegates.set_sharedMaterial_AfterArgs _afterset_sharedMaterial;
private static void set_sharedMaterial(Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value)
{
Delegates.Params_set_sharedMaterial @params = new() 
{
self = self
, value = value
};
if (_beforeset_sharedMaterial != null)
{
foreach (Delegates.set_sharedMaterial_BeforeArgs toInvoke in _beforeset_sharedMaterial.GetInvocationList())
{
try
{
_beforeset_sharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_sharedMaterial != null)
{
foreach (Delegates.set_sharedMaterial_AfterArgs toInvoke in _afterset_sharedMaterial.GetInvocationList())
{
try
{
_afterset_sharedMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fallbackMaterial()
{
if (!HookedList.Contains("get_fallbackMaterial"))
{
HookedList.Add("get_fallbackMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fallbackMaterial", true), get_fallbackMaterial);

}
}
internal static event Delegates.get_fallbackMaterial_BeforeArgs _beforeget_fallbackMaterial;
internal static event Delegates.get_fallbackMaterial_AfterArgs _afterget_fallbackMaterial;
private static UnityEngine.Material get_fallbackMaterial(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_fallbackMaterial @params = new() 
{
self = self
};
if (_beforeget_fallbackMaterial != null)
{
foreach (Delegates.get_fallbackMaterial_BeforeArgs toInvoke in _beforeget_fallbackMaterial.GetInvocationList())
{
try
{
_beforeget_fallbackMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fallbackMaterial != null)
{
foreach (Delegates.get_fallbackMaterial_AfterArgs toInvoke in _afterget_fallbackMaterial.GetInvocationList())
{
try
{
retVal = _afterget_fallbackMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fallbackMaterial()
{
if (!HookedList.Contains("set_fallbackMaterial"))
{
HookedList.Add("set_fallbackMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fallbackMaterial", true), set_fallbackMaterial);

}
}
internal static event Delegates.set_fallbackMaterial_BeforeArgs _beforeset_fallbackMaterial;
internal static event Delegates.set_fallbackMaterial_AfterArgs _afterset_fallbackMaterial;
private static void set_fallbackMaterial(Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value)
{
Delegates.Params_set_fallbackMaterial @params = new() 
{
self = self
, value = value
};
if (_beforeset_fallbackMaterial != null)
{
foreach (Delegates.set_fallbackMaterial_BeforeArgs toInvoke in _beforeset_fallbackMaterial.GetInvocationList())
{
try
{
_beforeset_fallbackMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fallbackMaterial != null)
{
foreach (Delegates.set_fallbackMaterial_AfterArgs toInvoke in _afterset_fallbackMaterial.GetInvocationList())
{
try
{
_afterset_fallbackMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_fallbackSourceMaterial()
{
if (!HookedList.Contains("get_fallbackSourceMaterial"))
{
HookedList.Add("get_fallbackSourceMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fallbackSourceMaterial", true), get_fallbackSourceMaterial);

}
}
internal static event Delegates.get_fallbackSourceMaterial_BeforeArgs _beforeget_fallbackSourceMaterial;
internal static event Delegates.get_fallbackSourceMaterial_AfterArgs _afterget_fallbackSourceMaterial;
private static UnityEngine.Material get_fallbackSourceMaterial(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_fallbackSourceMaterial @params = new() 
{
self = self
};
if (_beforeget_fallbackSourceMaterial != null)
{
foreach (Delegates.get_fallbackSourceMaterial_BeforeArgs toInvoke in _beforeget_fallbackSourceMaterial.GetInvocationList())
{
try
{
_beforeget_fallbackSourceMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_fallbackSourceMaterial != null)
{
foreach (Delegates.get_fallbackSourceMaterial_AfterArgs toInvoke in _afterget_fallbackSourceMaterial.GetInvocationList())
{
try
{
retVal = _afterget_fallbackSourceMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_fallbackSourceMaterial()
{
if (!HookedList.Contains("set_fallbackSourceMaterial"))
{
HookedList.Add("set_fallbackSourceMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fallbackSourceMaterial", true), set_fallbackSourceMaterial);

}
}
internal static event Delegates.set_fallbackSourceMaterial_BeforeArgs _beforeset_fallbackSourceMaterial;
internal static event Delegates.set_fallbackSourceMaterial_AfterArgs _afterset_fallbackSourceMaterial;
private static void set_fallbackSourceMaterial(Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value)
{
Delegates.Params_set_fallbackSourceMaterial @params = new() 
{
self = self
, value = value
};
if (_beforeset_fallbackSourceMaterial != null)
{
foreach (Delegates.set_fallbackSourceMaterial_BeforeArgs toInvoke in _beforeset_fallbackSourceMaterial.GetInvocationList())
{
try
{
_beforeset_fallbackSourceMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_fallbackSourceMaterial != null)
{
foreach (Delegates.set_fallbackSourceMaterial_AfterArgs toInvoke in _afterset_fallbackSourceMaterial.GetInvocationList())
{
try
{
_afterset_fallbackSourceMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_materialForRendering()
{
if (!HookedList.Contains("get_materialForRendering"))
{
HookedList.Add("get_materialForRendering");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_materialForRendering", true), get_materialForRendering);

}
}
internal static event Delegates.get_materialForRendering_BeforeArgs _beforeget_materialForRendering;
internal static event Delegates.get_materialForRendering_AfterArgs _afterget_materialForRendering;
private static UnityEngine.Material get_materialForRendering(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_materialForRendering @params = new() 
{
self = self
};
if (_beforeget_materialForRendering != null)
{
foreach (Delegates.get_materialForRendering_BeforeArgs toInvoke in _beforeget_materialForRendering.GetInvocationList())
{
try
{
_beforeget_materialForRendering?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_materialForRendering != null)
{
foreach (Delegates.get_materialForRendering_AfterArgs toInvoke in _afterget_materialForRendering.GetInvocationList())
{
try
{
retVal = _afterget_materialForRendering.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_isDefaultMaterial()
{
if (!HookedList.Contains("get_isDefaultMaterial"))
{
HookedList.Add("get_isDefaultMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_isDefaultMaterial", true), get_isDefaultMaterial);

}
}
internal static event Delegates.get_isDefaultMaterial_BeforeArgs _beforeget_isDefaultMaterial;
internal static event Delegates.get_isDefaultMaterial_AfterArgs _afterget_isDefaultMaterial;
private static bool get_isDefaultMaterial(Func<TMPro.TMP_SubMeshUI, bool> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_isDefaultMaterial @params = new() 
{
self = self
};
if (_beforeget_isDefaultMaterial != null)
{
foreach (Delegates.get_isDefaultMaterial_BeforeArgs toInvoke in _beforeget_isDefaultMaterial.GetInvocationList())
{
try
{
_beforeget_isDefaultMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_isDefaultMaterial != null)
{
foreach (Delegates.get_isDefaultMaterial_AfterArgs toInvoke in _afterget_isDefaultMaterial.GetInvocationList())
{
try
{
retVal = _afterget_isDefaultMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_isDefaultMaterial()
{
if (!HookedList.Contains("set_isDefaultMaterial"))
{
HookedList.Add("set_isDefaultMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_isDefaultMaterial", true), set_isDefaultMaterial);

}
}
internal static event Delegates.set_isDefaultMaterial_BeforeArgs _beforeset_isDefaultMaterial;
internal static event Delegates.set_isDefaultMaterial_AfterArgs _afterset_isDefaultMaterial;
private static void set_isDefaultMaterial(Action<TMPro.TMP_SubMeshUI,  bool> orig, TMPro.TMP_SubMeshUI self,  bool value)
{
Delegates.Params_set_isDefaultMaterial @params = new() 
{
self = self
, value = value
};
if (_beforeset_isDefaultMaterial != null)
{
foreach (Delegates.set_isDefaultMaterial_BeforeArgs toInvoke in _beforeset_isDefaultMaterial.GetInvocationList())
{
try
{
_beforeset_isDefaultMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_isDefaultMaterial != null)
{
foreach (Delegates.set_isDefaultMaterial_AfterArgs toInvoke in _afterset_isDefaultMaterial.GetInvocationList())
{
try
{
_afterset_isDefaultMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_padding()
{
if (!HookedList.Contains("get_padding"))
{
HookedList.Add("get_padding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_padding", true), get_padding);

}
}
internal static event Delegates.get_padding_BeforeArgs _beforeget_padding;
internal static event Delegates.get_padding_AfterArgs _afterget_padding;
private static float get_padding(Func<TMPro.TMP_SubMeshUI, float> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_padding @params = new() 
{
self = self
};
if (_beforeget_padding != null)
{
foreach (Delegates.get_padding_BeforeArgs toInvoke in _beforeget_padding.GetInvocationList())
{
try
{
_beforeget_padding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_padding != null)
{
foreach (Delegates.get_padding_AfterArgs toInvoke in _afterget_padding.GetInvocationList())
{
try
{
retVal = _afterget_padding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_padding()
{
if (!HookedList.Contains("set_padding"))
{
HookedList.Add("set_padding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_padding", true), set_padding);

}
}
internal static event Delegates.set_padding_BeforeArgs _beforeset_padding;
internal static event Delegates.set_padding_AfterArgs _afterset_padding;
private static void set_padding(Action<TMPro.TMP_SubMeshUI,  float> orig, TMPro.TMP_SubMeshUI self,  float value)
{
Delegates.Params_set_padding @params = new() 
{
self = self
, value = value
};
if (_beforeset_padding != null)
{
foreach (Delegates.set_padding_BeforeArgs toInvoke in _beforeset_padding.GetInvocationList())
{
try
{
_beforeset_padding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_padding != null)
{
foreach (Delegates.set_padding_AfterArgs toInvoke in _afterset_padding.GetInvocationList())
{
try
{
_afterset_padding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_canvasRenderer()
{
if (!HookedList.Contains("get_canvasRenderer"))
{
HookedList.Add("get_canvasRenderer");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_canvasRenderer", true), get_canvasRenderer);

}
}
internal static event Delegates.get_canvasRenderer_BeforeArgs _beforeget_canvasRenderer;
internal static event Delegates.get_canvasRenderer_AfterArgs _afterget_canvasRenderer;
private static UnityEngine.CanvasRenderer get_canvasRenderer(Func<TMPro.TMP_SubMeshUI, UnityEngine.CanvasRenderer> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_canvasRenderer @params = new() 
{
self = self
};
if (_beforeget_canvasRenderer != null)
{
foreach (Delegates.get_canvasRenderer_BeforeArgs toInvoke in _beforeget_canvasRenderer.GetInvocationList())
{
try
{
_beforeget_canvasRenderer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_canvasRenderer != null)
{
foreach (Delegates.get_canvasRenderer_AfterArgs toInvoke in _afterget_canvasRenderer.GetInvocationList())
{
try
{
retVal = _afterget_canvasRenderer.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_mesh()
{
if (!HookedList.Contains("get_mesh"))
{
HookedList.Add("get_mesh");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_mesh", true), get_mesh);

}
}
internal static event Delegates.get_mesh_BeforeArgs _beforeget_mesh;
internal static event Delegates.get_mesh_AfterArgs _afterget_mesh;
private static UnityEngine.Mesh get_mesh(Func<TMPro.TMP_SubMeshUI, UnityEngine.Mesh> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_get_mesh @params = new() 
{
self = self
};
if (_beforeget_mesh != null)
{
foreach (Delegates.get_mesh_BeforeArgs toInvoke in _beforeget_mesh.GetInvocationList())
{
try
{
_beforeget_mesh?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_mesh != null)
{
foreach (Delegates.get_mesh_AfterArgs toInvoke in _afterget_mesh.GetInvocationList())
{
try
{
retVal = _afterget_mesh.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_mesh()
{
if (!HookedList.Contains("set_mesh"))
{
HookedList.Add("set_mesh");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_mesh", true), set_mesh);

}
}
internal static event Delegates.set_mesh_BeforeArgs _beforeset_mesh;
internal static event Delegates.set_mesh_AfterArgs _afterset_mesh;
private static void set_mesh(Action<TMPro.TMP_SubMeshUI,  UnityEngine.Mesh> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Mesh value)
{
Delegates.Params_set_mesh @params = new() 
{
self = self
, value = value
};
if (_beforeset_mesh != null)
{
foreach (Delegates.set_mesh_BeforeArgs toInvoke in _beforeset_mesh.GetInvocationList())
{
try
{
_beforeset_mesh?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_mesh != null)
{
foreach (Delegates.set_mesh_AfterArgs toInvoke in _afterset_mesh.GetInvocationList())
{
try
{
_afterset_mesh.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAddSubTextObject()
{
if (!HookedList.Contains("AddSubTextObject"))
{
HookedList.Add("AddSubTextObject");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "AddSubTextObject", false), AddSubTextObject);

}
}
internal static event Delegates.AddSubTextObject_BeforeArgs _beforeAddSubTextObject;
internal static event Delegates.AddSubTextObject_AfterArgs _afterAddSubTextObject;
private static TMPro.TMP_SubMeshUI AddSubTextObject(Func< TMPro.TextMeshProUGUI,  TMPro.MaterialReference, TMPro.TMP_SubMeshUI> orig,  TMPro.TextMeshProUGUI textComponent,  TMPro.MaterialReference materialReference)
{
Delegates.Params_AddSubTextObject @params = new() 
{
textComponent = textComponent
, materialReference = materialReference
};
if (_beforeAddSubTextObject != null)
{
foreach (Delegates.AddSubTextObject_BeforeArgs toInvoke in _beforeAddSubTextObject.GetInvocationList())
{
try
{
_beforeAddSubTextObject?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
textComponent = @params.textComponent;
materialReference = @params.materialReference;
var retVal = orig(textComponent, materialReference);
if (_afterAddSubTextObject != null)
{
foreach (Delegates.AddSubTextObject_AfterArgs toInvoke in _afterAddSubTextObject.GetInvocationList())
{
try
{
retVal = _afterAddSubTextObject.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnEnable", true), OnEnable);

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnDisable", true), OnDisable);

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnDestroy", true), OnDestroy);

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnTransformParentChanged()
{
if (!HookedList.Contains("OnTransformParentChanged"))
{
HookedList.Add("OnTransformParentChanged");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnTransformParentChanged", true), OnTransformParentChanged);

}
}
internal static event Delegates.OnTransformParentChanged_BeforeArgs _beforeOnTransformParentChanged;
internal static event Delegates.OnTransformParentChanged_AfterArgs _afterOnTransformParentChanged;
private static void OnTransformParentChanged(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_OnTransformParentChanged @params = new() 
{
self = self
};
if (_beforeOnTransformParentChanged != null)
{
foreach (Delegates.OnTransformParentChanged_BeforeArgs toInvoke in _beforeOnTransformParentChanged.GetInvocationList())
{
try
{
_beforeOnTransformParentChanged?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnTransformParentChanged != null)
{
foreach (Delegates.OnTransformParentChanged_AfterArgs toInvoke in _afterOnTransformParentChanged.GetInvocationList())
{
try
{
_afterOnTransformParentChanged.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetModifiedMaterial()
{
if (!HookedList.Contains("GetModifiedMaterial"))
{
HookedList.Add("GetModifiedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetModifiedMaterial", true), GetModifiedMaterial);

}
}
internal static event Delegates.GetModifiedMaterial_BeforeArgs _beforeGetModifiedMaterial;
internal static event Delegates.GetModifiedMaterial_AfterArgs _afterGetModifiedMaterial;
private static UnityEngine.Material GetModifiedMaterial(Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material baseMaterial)
{
Delegates.Params_GetModifiedMaterial @params = new() 
{
self = self
, baseMaterial = baseMaterial
};
if (_beforeGetModifiedMaterial != null)
{
foreach (Delegates.GetModifiedMaterial_BeforeArgs toInvoke in _beforeGetModifiedMaterial.GetInvocationList())
{
try
{
_beforeGetModifiedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
baseMaterial = @params.baseMaterial;
var retVal = orig(self, baseMaterial);
if (_afterGetModifiedMaterial != null)
{
foreach (Delegates.GetModifiedMaterial_AfterArgs toInvoke in _afterGetModifiedMaterial.GetInvocationList())
{
try
{
retVal = _afterGetModifiedMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPaddingForMaterial()
{
if (!HookedList.Contains("GetPaddingForMaterial"))
{
HookedList.Add("GetPaddingForMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetPaddingForMaterial", true), GetPaddingForMaterial);

}
}
internal static event Delegates.GetPaddingForMaterial_BeforeArgs _beforeGetPaddingForMaterial;
internal static event Delegates.GetPaddingForMaterial_AfterArgs _afterGetPaddingForMaterial;
private static float GetPaddingForMaterial(Func<TMPro.TMP_SubMeshUI, float> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_GetPaddingForMaterial @params = new() 
{
self = self
};
if (_beforeGetPaddingForMaterial != null)
{
foreach (Delegates.GetPaddingForMaterial_BeforeArgs toInvoke in _beforeGetPaddingForMaterial.GetInvocationList())
{
try
{
_beforeGetPaddingForMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPaddingForMaterial != null)
{
foreach (Delegates.GetPaddingForMaterial_AfterArgs toInvoke in _afterGetPaddingForMaterial.GetInvocationList())
{
try
{
retVal = _afterGetPaddingForMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetPaddingForMaterial_Material()
{
if (!HookedList.Contains("GetPaddingForMaterial_Material"))
{
HookedList.Add("GetPaddingForMaterial_Material");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetPaddingForMaterial_Material", true), GetPaddingForMaterial_Material);

}
}
internal static event Delegates.GetPaddingForMaterial_Material_BeforeArgs _beforeGetPaddingForMaterial_Material;
internal static event Delegates.GetPaddingForMaterial_Material_AfterArgs _afterGetPaddingForMaterial_Material;
private static float GetPaddingForMaterial_Material(Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, float> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material mat)
{
Delegates.Params_GetPaddingForMaterial_Material @params = new() 
{
self = self
, mat = mat
};
if (_beforeGetPaddingForMaterial_Material != null)
{
foreach (Delegates.GetPaddingForMaterial_Material_BeforeArgs toInvoke in _beforeGetPaddingForMaterial_Material.GetInvocationList())
{
try
{
_beforeGetPaddingForMaterial_Material?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
var retVal = orig(self, mat);
if (_afterGetPaddingForMaterial_Material != null)
{
foreach (Delegates.GetPaddingForMaterial_Material_AfterArgs toInvoke in _afterGetPaddingForMaterial_Material.GetInvocationList())
{
try
{
retVal = _afterGetPaddingForMaterial_Material.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookUpdateMeshPadding()
{
if (!HookedList.Contains("UpdateMeshPadding"))
{
HookedList.Add("UpdateMeshPadding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateMeshPadding", true), UpdateMeshPadding);

}
}
internal static event Delegates.UpdateMeshPadding_BeforeArgs _beforeUpdateMeshPadding;
internal static event Delegates.UpdateMeshPadding_AfterArgs _afterUpdateMeshPadding;
private static void UpdateMeshPadding(Action<TMPro.TMP_SubMeshUI,  bool,  bool> orig, TMPro.TMP_SubMeshUI self,  bool isExtraPadding,  bool isUsingBold)
{
Delegates.Params_UpdateMeshPadding @params = new() 
{
self = self
, isExtraPadding = isExtraPadding
, isUsingBold = isUsingBold
};
if (_beforeUpdateMeshPadding != null)
{
foreach (Delegates.UpdateMeshPadding_BeforeArgs toInvoke in _beforeUpdateMeshPadding.GetInvocationList())
{
try
{
_beforeUpdateMeshPadding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
isExtraPadding = @params.isExtraPadding;
isUsingBold = @params.isUsingBold;
orig(self, isExtraPadding, isUsingBold);
if (_afterUpdateMeshPadding != null)
{
foreach (Delegates.UpdateMeshPadding_AfterArgs toInvoke in _afterUpdateMeshPadding.GetInvocationList())
{
try
{
_afterUpdateMeshPadding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetAllDirty()
{
if (!HookedList.Contains("SetAllDirty"))
{
HookedList.Add("SetAllDirty");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetAllDirty", true), SetAllDirty);

}
}
internal static event Delegates.SetAllDirty_BeforeArgs _beforeSetAllDirty;
internal static event Delegates.SetAllDirty_AfterArgs _afterSetAllDirty;
private static void SetAllDirty(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_SetAllDirty @params = new() 
{
self = self
};
if (_beforeSetAllDirty != null)
{
foreach (Delegates.SetAllDirty_BeforeArgs toInvoke in _beforeSetAllDirty.GetInvocationList())
{
try
{
_beforeSetAllDirty?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetAllDirty != null)
{
foreach (Delegates.SetAllDirty_AfterArgs toInvoke in _afterSetAllDirty.GetInvocationList())
{
try
{
_afterSetAllDirty.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetVerticesDirty()
{
if (!HookedList.Contains("SetVerticesDirty"))
{
HookedList.Add("SetVerticesDirty");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetVerticesDirty", true), SetVerticesDirty);

}
}
internal static event Delegates.SetVerticesDirty_BeforeArgs _beforeSetVerticesDirty;
internal static event Delegates.SetVerticesDirty_AfterArgs _afterSetVerticesDirty;
private static void SetVerticesDirty(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_SetVerticesDirty @params = new() 
{
self = self
};
if (_beforeSetVerticesDirty != null)
{
foreach (Delegates.SetVerticesDirty_BeforeArgs toInvoke in _beforeSetVerticesDirty.GetInvocationList())
{
try
{
_beforeSetVerticesDirty?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetVerticesDirty != null)
{
foreach (Delegates.SetVerticesDirty_AfterArgs toInvoke in _afterSetVerticesDirty.GetInvocationList())
{
try
{
_afterSetVerticesDirty.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetLayoutDirty()
{
if (!HookedList.Contains("SetLayoutDirty"))
{
HookedList.Add("SetLayoutDirty");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetLayoutDirty", true), SetLayoutDirty);

}
}
internal static event Delegates.SetLayoutDirty_BeforeArgs _beforeSetLayoutDirty;
internal static event Delegates.SetLayoutDirty_AfterArgs _afterSetLayoutDirty;
private static void SetLayoutDirty(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_SetLayoutDirty @params = new() 
{
self = self
};
if (_beforeSetLayoutDirty != null)
{
foreach (Delegates.SetLayoutDirty_BeforeArgs toInvoke in _beforeSetLayoutDirty.GetInvocationList())
{
try
{
_beforeSetLayoutDirty?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetLayoutDirty != null)
{
foreach (Delegates.SetLayoutDirty_AfterArgs toInvoke in _afterSetLayoutDirty.GetInvocationList())
{
try
{
_afterSetLayoutDirty.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetMaterialDirty()
{
if (!HookedList.Contains("SetMaterialDirty"))
{
HookedList.Add("SetMaterialDirty");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetMaterialDirty", true), SetMaterialDirty);

}
}
internal static event Delegates.SetMaterialDirty_BeforeArgs _beforeSetMaterialDirty;
internal static event Delegates.SetMaterialDirty_AfterArgs _afterSetMaterialDirty;
private static void SetMaterialDirty(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_SetMaterialDirty @params = new() 
{
self = self
};
if (_beforeSetMaterialDirty != null)
{
foreach (Delegates.SetMaterialDirty_BeforeArgs toInvoke in _beforeSetMaterialDirty.GetInvocationList())
{
try
{
_beforeSetMaterialDirty?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetMaterialDirty != null)
{
foreach (Delegates.SetMaterialDirty_AfterArgs toInvoke in _afterSetMaterialDirty.GetInvocationList())
{
try
{
_afterSetMaterialDirty.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetPivotDirty()
{
if (!HookedList.Contains("SetPivotDirty"))
{
HookedList.Add("SetPivotDirty");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetPivotDirty", true), SetPivotDirty);

}
}
internal static event Delegates.SetPivotDirty_BeforeArgs _beforeSetPivotDirty;
internal static event Delegates.SetPivotDirty_AfterArgs _afterSetPivotDirty;
private static void SetPivotDirty(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_SetPivotDirty @params = new() 
{
self = self
};
if (_beforeSetPivotDirty != null)
{
foreach (Delegates.SetPivotDirty_BeforeArgs toInvoke in _beforeSetPivotDirty.GetInvocationList())
{
try
{
_beforeSetPivotDirty?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetPivotDirty != null)
{
foreach (Delegates.SetPivotDirty_AfterArgs toInvoke in _afterSetPivotDirty.GetInvocationList())
{
try
{
_afterSetPivotDirty.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateGeometry()
{
if (!HookedList.Contains("UpdateGeometry"))
{
HookedList.Add("UpdateGeometry");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateGeometry", true), UpdateGeometry);

}
}
internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;
private static void UpdateGeometry(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_UpdateGeometry @params = new() 
{
self = self
};
if (_beforeUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
{
try
{
_beforeUpdateGeometry?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
{
try
{
_afterUpdateGeometry.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRebuild()
{
if (!HookedList.Contains("Rebuild"))
{
HookedList.Add("Rebuild");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "Rebuild", true), Rebuild);

}
}
internal static event Delegates.Rebuild_BeforeArgs _beforeRebuild;
internal static event Delegates.Rebuild_AfterArgs _afterRebuild;
private static void Rebuild(Action<TMPro.TMP_SubMeshUI,  UnityEngine.UI.CanvasUpdate> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.UI.CanvasUpdate update)
{
Delegates.Params_Rebuild @params = new() 
{
self = self
, update = update
};
if (_beforeRebuild != null)
{
foreach (Delegates.Rebuild_BeforeArgs toInvoke in _beforeRebuild.GetInvocationList())
{
try
{
_beforeRebuild?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
update = @params.update;
orig(self, update);
if (_afterRebuild != null)
{
foreach (Delegates.Rebuild_AfterArgs toInvoke in _afterRebuild.GetInvocationList())
{
try
{
_afterRebuild.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRefreshMaterial()
{
if (!HookedList.Contains("RefreshMaterial"))
{
HookedList.Add("RefreshMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RefreshMaterial", true), RefreshMaterial);

}
}
internal static event Delegates.RefreshMaterial_BeforeArgs _beforeRefreshMaterial;
internal static event Delegates.RefreshMaterial_AfterArgs _afterRefreshMaterial;
private static void RefreshMaterial(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_RefreshMaterial @params = new() 
{
self = self
};
if (_beforeRefreshMaterial != null)
{
foreach (Delegates.RefreshMaterial_BeforeArgs toInvoke in _beforeRefreshMaterial.GetInvocationList())
{
try
{
_beforeRefreshMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRefreshMaterial != null)
{
foreach (Delegates.RefreshMaterial_AfterArgs toInvoke in _afterRefreshMaterial.GetInvocationList())
{
try
{
_afterRefreshMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateMaterial()
{
if (!HookedList.Contains("UpdateMaterial"))
{
HookedList.Add("UpdateMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateMaterial", true), UpdateMaterial);

}
}
internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
internal static event Delegates.UpdateMaterial_AfterArgs _afterUpdateMaterial;
private static void UpdateMaterial(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_UpdateMaterial @params = new() 
{
self = self
};
if (_beforeUpdateMaterial != null)
{
foreach (Delegates.UpdateMaterial_BeforeArgs toInvoke in _beforeUpdateMaterial.GetInvocationList())
{
try
{
_beforeUpdateMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateMaterial != null)
{
foreach (Delegates.UpdateMaterial_AfterArgs toInvoke in _afterUpdateMaterial.GetInvocationList())
{
try
{
_afterUpdateMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRecalculateClipping()
{
if (!HookedList.Contains("RecalculateClipping"))
{
HookedList.Add("RecalculateClipping");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RecalculateClipping", true), RecalculateClipping);

}
}
internal static event Delegates.RecalculateClipping_BeforeArgs _beforeRecalculateClipping;
internal static event Delegates.RecalculateClipping_AfterArgs _afterRecalculateClipping;
private static void RecalculateClipping(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_RecalculateClipping @params = new() 
{
self = self
};
if (_beforeRecalculateClipping != null)
{
foreach (Delegates.RecalculateClipping_BeforeArgs toInvoke in _beforeRecalculateClipping.GetInvocationList())
{
try
{
_beforeRecalculateClipping?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRecalculateClipping != null)
{
foreach (Delegates.RecalculateClipping_AfterArgs toInvoke in _afterRecalculateClipping.GetInvocationList())
{
try
{
_afterRecalculateClipping.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookRecalculateMasking()
{
if (!HookedList.Contains("RecalculateMasking"))
{
HookedList.Add("RecalculateMasking");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RecalculateMasking", true), RecalculateMasking);

}
}
internal static event Delegates.RecalculateMasking_BeforeArgs _beforeRecalculateMasking;
internal static event Delegates.RecalculateMasking_AfterArgs _afterRecalculateMasking;
private static void RecalculateMasking(Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_RecalculateMasking @params = new() 
{
self = self
};
if (_beforeRecalculateMasking != null)
{
foreach (Delegates.RecalculateMasking_BeforeArgs toInvoke in _beforeRecalculateMasking.GetInvocationList())
{
try
{
_beforeRecalculateMasking?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterRecalculateMasking != null)
{
foreach (Delegates.RecalculateMasking_AfterArgs toInvoke in _afterRecalculateMasking.GetInvocationList())
{
try
{
_afterRecalculateMasking.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetMaterial()
{
if (!HookedList.Contains("GetMaterial"))
{
HookedList.Add("GetMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetMaterial", true), GetMaterial);

}
}
internal static event Delegates.GetMaterial_BeforeArgs _beforeGetMaterial;
internal static event Delegates.GetMaterial_AfterArgs _afterGetMaterial;
private static UnityEngine.Material GetMaterial(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_GetMaterial @params = new() 
{
self = self
};
if (_beforeGetMaterial != null)
{
foreach (Delegates.GetMaterial_BeforeArgs toInvoke in _beforeGetMaterial.GetInvocationList())
{
try
{
_beforeGetMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetMaterial != null)
{
foreach (Delegates.GetMaterial_AfterArgs toInvoke in _afterGetMaterial.GetInvocationList())
{
try
{
retVal = _afterGetMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetMaterial_Material()
{
if (!HookedList.Contains("GetMaterial_Material"))
{
HookedList.Add("GetMaterial_Material");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetMaterial_Material", true), GetMaterial_Material);

}
}
internal static event Delegates.GetMaterial_Material_BeforeArgs _beforeGetMaterial_Material;
internal static event Delegates.GetMaterial_Material_AfterArgs _afterGetMaterial_Material;
private static UnityEngine.Material GetMaterial_Material(Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material mat)
{
Delegates.Params_GetMaterial_Material @params = new() 
{
self = self
, mat = mat
};
if (_beforeGetMaterial_Material != null)
{
foreach (Delegates.GetMaterial_Material_BeforeArgs toInvoke in _beforeGetMaterial_Material.GetInvocationList())
{
try
{
_beforeGetMaterial_Material?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
var retVal = orig(self, mat);
if (_afterGetMaterial_Material != null)
{
foreach (Delegates.GetMaterial_Material_AfterArgs toInvoke in _afterGetMaterial_Material.GetInvocationList())
{
try
{
retVal = _afterGetMaterial_Material.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookCreateMaterialInstance()
{
if (!HookedList.Contains("CreateMaterialInstance"))
{
HookedList.Add("CreateMaterialInstance");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "CreateMaterialInstance", true), CreateMaterialInstance);

}
}
internal static event Delegates.CreateMaterialInstance_BeforeArgs _beforeCreateMaterialInstance;
internal static event Delegates.CreateMaterialInstance_AfterArgs _afterCreateMaterialInstance;
private static UnityEngine.Material CreateMaterialInstance(Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material source)
{
Delegates.Params_CreateMaterialInstance @params = new() 
{
self = self
, source = source
};
if (_beforeCreateMaterialInstance != null)
{
foreach (Delegates.CreateMaterialInstance_BeforeArgs toInvoke in _beforeCreateMaterialInstance.GetInvocationList())
{
try
{
_beforeCreateMaterialInstance?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
source = @params.source;
var retVal = orig(self, source);
if (_afterCreateMaterialInstance != null)
{
foreach (Delegates.CreateMaterialInstance_AfterArgs toInvoke in _afterCreateMaterialInstance.GetInvocationList())
{
try
{
retVal = _afterCreateMaterialInstance.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetSharedMaterial()
{
if (!HookedList.Contains("GetSharedMaterial"))
{
HookedList.Add("GetSharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetSharedMaterial", true), GetSharedMaterial);

}
}
internal static event Delegates.GetSharedMaterial_BeforeArgs _beforeGetSharedMaterial;
internal static event Delegates.GetSharedMaterial_AfterArgs _afterGetSharedMaterial;
private static UnityEngine.Material GetSharedMaterial(Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_GetSharedMaterial @params = new() 
{
self = self
};
if (_beforeGetSharedMaterial != null)
{
foreach (Delegates.GetSharedMaterial_BeforeArgs toInvoke in _beforeGetSharedMaterial.GetInvocationList())
{
try
{
_beforeGetSharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetSharedMaterial != null)
{
foreach (Delegates.GetSharedMaterial_AfterArgs toInvoke in _afterGetSharedMaterial.GetInvocationList())
{
try
{
retVal = _afterGetSharedMaterial.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSetSharedMaterial()
{
if (!HookedList.Contains("SetSharedMaterial"))
{
HookedList.Add("SetSharedMaterial");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetSharedMaterial", true), SetSharedMaterial);

}
}
internal static event Delegates.SetSharedMaterial_BeforeArgs _beforeSetSharedMaterial;
internal static event Delegates.SetSharedMaterial_AfterArgs _afterSetSharedMaterial;
private static void SetSharedMaterial(Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material mat)
{
Delegates.Params_SetSharedMaterial @params = new() 
{
self = self
, mat = mat
};
if (_beforeSetSharedMaterial != null)
{
foreach (Delegates.SetSharedMaterial_BeforeArgs toInvoke in _beforeSetSharedMaterial.GetInvocationList())
{
try
{
_beforeSetSharedMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
mat = @params.mat;
orig(self, mat);
if (_afterSetSharedMaterial != null)
{
foreach (Delegates.SetSharedMaterial_AfterArgs toInvoke in _afterSetSharedMaterial.GetInvocationList())
{
try
{
_afterSetSharedMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetInstanceID()
{
if (!HookedList.Contains("GetInstanceID"))
{
HookedList.Add("GetInstanceID");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetInstanceID", true), GetInstanceID);

}
}
internal static event Delegates.GetInstanceID_BeforeArgs _beforeGetInstanceID;
internal static event Delegates.GetInstanceID_AfterArgs _afterGetInstanceID;
private static int GetInstanceID(Func<TMPro.TMP_SubMeshUI, int> orig, TMPro.TMP_SubMeshUI self)
{
Delegates.Params_GetInstanceID @params = new() 
{
self = self
};
if (_beforeGetInstanceID != null)
{
foreach (Delegates.GetInstanceID_BeforeArgs toInvoke in _beforeGetInstanceID.GetInvocationList())
{
try
{
_beforeGetInstanceID?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetInstanceID != null)
{
foreach (Delegates.GetInstanceID_AfterArgs toInvoke in _afterGetInstanceID.GetInvocationList())
{
try
{
retVal = _afterGetInstanceID.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_fontAsset
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_fontAsset_BeforeArgs(Params_get_fontAsset args);
public delegate TMPro.TMP_FontAsset get_fontAsset_AfterArgs(Params_get_fontAsset args, TMPro.TMP_FontAsset ret);
public delegate TMPro.TMP_FontAsset get_fontAsset_WithArgs (Func<TMPro.TMP_SubMeshUI, TMPro.TMP_FontAsset> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_fontAsset
{
public TMPro.TMP_SubMeshUI self;
public TMPro.TMP_FontAsset value;
}
public delegate void set_fontAsset_BeforeArgs(Params_set_fontAsset args);
public delegate void set_fontAsset_AfterArgs(Params_set_fontAsset args);
public delegate void set_fontAsset_WithArgs (Action<TMPro.TMP_SubMeshUI,  TMPro.TMP_FontAsset> orig, TMPro.TMP_SubMeshUI self,  TMPro.TMP_FontAsset value);
public sealed class Params_get_spriteAsset
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_spriteAsset_BeforeArgs(Params_get_spriteAsset args);
public delegate TMPro.TMP_SpriteAsset get_spriteAsset_AfterArgs(Params_get_spriteAsset args, TMPro.TMP_SpriteAsset ret);
public delegate TMPro.TMP_SpriteAsset get_spriteAsset_WithArgs (Func<TMPro.TMP_SubMeshUI, TMPro.TMP_SpriteAsset> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_spriteAsset
{
public TMPro.TMP_SubMeshUI self;
public TMPro.TMP_SpriteAsset value;
}
public delegate void set_spriteAsset_BeforeArgs(Params_set_spriteAsset args);
public delegate void set_spriteAsset_AfterArgs(Params_set_spriteAsset args);
public delegate void set_spriteAsset_WithArgs (Action<TMPro.TMP_SubMeshUI,  TMPro.TMP_SpriteAsset> orig, TMPro.TMP_SubMeshUI self,  TMPro.TMP_SpriteAsset value);
public sealed class Params_get_mainTexture
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_mainTexture_BeforeArgs(Params_get_mainTexture args);
public delegate UnityEngine.Texture get_mainTexture_AfterArgs(Params_get_mainTexture args, UnityEngine.Texture ret);
public delegate UnityEngine.Texture get_mainTexture_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Texture> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_get_material
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_material_BeforeArgs(Params_get_material args);
public delegate UnityEngine.Material get_material_AfterArgs(Params_get_material args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_material_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_material
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material value;
}
public delegate void set_material_BeforeArgs(Params_set_material args);
public delegate void set_material_AfterArgs(Params_set_material args);
public delegate void set_material_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value);
public sealed class Params_get_sharedMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_sharedMaterial_BeforeArgs(Params_get_sharedMaterial args);
public delegate UnityEngine.Material get_sharedMaterial_AfterArgs(Params_get_sharedMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_sharedMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_sharedMaterial
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material value;
}
public delegate void set_sharedMaterial_BeforeArgs(Params_set_sharedMaterial args);
public delegate void set_sharedMaterial_AfterArgs(Params_set_sharedMaterial args);
public delegate void set_sharedMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value);
public sealed class Params_get_fallbackMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_fallbackMaterial_BeforeArgs(Params_get_fallbackMaterial args);
public delegate UnityEngine.Material get_fallbackMaterial_AfterArgs(Params_get_fallbackMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_fallbackMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_fallbackMaterial
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material value;
}
public delegate void set_fallbackMaterial_BeforeArgs(Params_set_fallbackMaterial args);
public delegate void set_fallbackMaterial_AfterArgs(Params_set_fallbackMaterial args);
public delegate void set_fallbackMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value);
public sealed class Params_get_fallbackSourceMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_fallbackSourceMaterial_BeforeArgs(Params_get_fallbackSourceMaterial args);
public delegate UnityEngine.Material get_fallbackSourceMaterial_AfterArgs(Params_get_fallbackSourceMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_fallbackSourceMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_fallbackSourceMaterial
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material value;
}
public delegate void set_fallbackSourceMaterial_BeforeArgs(Params_set_fallbackSourceMaterial args);
public delegate void set_fallbackSourceMaterial_AfterArgs(Params_set_fallbackSourceMaterial args);
public delegate void set_fallbackSourceMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material value);
public sealed class Params_get_materialForRendering
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_materialForRendering_BeforeArgs(Params_get_materialForRendering args);
public delegate UnityEngine.Material get_materialForRendering_AfterArgs(Params_get_materialForRendering args, UnityEngine.Material ret);
public delegate UnityEngine.Material get_materialForRendering_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_get_isDefaultMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_isDefaultMaterial_BeforeArgs(Params_get_isDefaultMaterial args);
public delegate bool get_isDefaultMaterial_AfterArgs(Params_get_isDefaultMaterial args, bool ret);
public delegate bool get_isDefaultMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, bool> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_isDefaultMaterial
{
public TMPro.TMP_SubMeshUI self;
public bool value;
}
public delegate void set_isDefaultMaterial_BeforeArgs(Params_set_isDefaultMaterial args);
public delegate void set_isDefaultMaterial_AfterArgs(Params_set_isDefaultMaterial args);
public delegate void set_isDefaultMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI,  bool> orig, TMPro.TMP_SubMeshUI self,  bool value);
public sealed class Params_get_padding
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_padding_BeforeArgs(Params_get_padding args);
public delegate float get_padding_AfterArgs(Params_get_padding args, float ret);
public delegate float get_padding_WithArgs (Func<TMPro.TMP_SubMeshUI, float> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_padding
{
public TMPro.TMP_SubMeshUI self;
public float value;
}
public delegate void set_padding_BeforeArgs(Params_set_padding args);
public delegate void set_padding_AfterArgs(Params_set_padding args);
public delegate void set_padding_WithArgs (Action<TMPro.TMP_SubMeshUI,  float> orig, TMPro.TMP_SubMeshUI self,  float value);
public sealed class Params_get_canvasRenderer
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_canvasRenderer_BeforeArgs(Params_get_canvasRenderer args);
public delegate UnityEngine.CanvasRenderer get_canvasRenderer_AfterArgs(Params_get_canvasRenderer args, UnityEngine.CanvasRenderer ret);
public delegate UnityEngine.CanvasRenderer get_canvasRenderer_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.CanvasRenderer> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_get_mesh
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void get_mesh_BeforeArgs(Params_get_mesh args);
public delegate UnityEngine.Mesh get_mesh_AfterArgs(Params_get_mesh args, UnityEngine.Mesh ret);
public delegate UnityEngine.Mesh get_mesh_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Mesh> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_set_mesh
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Mesh value;
}
public delegate void set_mesh_BeforeArgs(Params_set_mesh args);
public delegate void set_mesh_AfterArgs(Params_set_mesh args);
public delegate void set_mesh_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.Mesh> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Mesh value);
public sealed class Params_AddSubTextObject
{
public TMPro.TextMeshProUGUI textComponent;
public TMPro.MaterialReference materialReference;
}
public delegate void AddSubTextObject_BeforeArgs(Params_AddSubTextObject args);
public delegate TMPro.TMP_SubMeshUI AddSubTextObject_AfterArgs(Params_AddSubTextObject args, TMPro.TMP_SubMeshUI ret);
public delegate TMPro.TMP_SubMeshUI AddSubTextObject_WithArgs (Func< TMPro.TextMeshProUGUI,  TMPro.MaterialReference, TMPro.TMP_SubMeshUI> orig,  TMPro.TextMeshProUGUI textComponent,  TMPro.MaterialReference materialReference);
public sealed class Params_OnEnable
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_OnDisable
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_OnDestroy
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_OnTransformParentChanged
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void OnTransformParentChanged_BeforeArgs(Params_OnTransformParentChanged args);
public delegate void OnTransformParentChanged_AfterArgs(Params_OnTransformParentChanged args);
public delegate void OnTransformParentChanged_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_GetModifiedMaterial
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material baseMaterial;
}
public delegate void GetModifiedMaterial_BeforeArgs(Params_GetModifiedMaterial args);
public delegate UnityEngine.Material GetModifiedMaterial_AfterArgs(Params_GetModifiedMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material GetModifiedMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material baseMaterial);
public sealed class Params_GetPaddingForMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void GetPaddingForMaterial_BeforeArgs(Params_GetPaddingForMaterial args);
public delegate float GetPaddingForMaterial_AfterArgs(Params_GetPaddingForMaterial args, float ret);
public delegate float GetPaddingForMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, float> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_GetPaddingForMaterial_Material
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material mat;
}
public delegate void GetPaddingForMaterial_Material_BeforeArgs(Params_GetPaddingForMaterial_Material args);
public delegate float GetPaddingForMaterial_Material_AfterArgs(Params_GetPaddingForMaterial_Material args, float ret);
public delegate float GetPaddingForMaterial_Material_WithArgs (Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, float> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material mat);
public sealed class Params_UpdateMeshPadding
{
public TMPro.TMP_SubMeshUI self;
public bool isExtraPadding;
public bool isUsingBold;
}
public delegate void UpdateMeshPadding_BeforeArgs(Params_UpdateMeshPadding args);
public delegate void UpdateMeshPadding_AfterArgs(Params_UpdateMeshPadding args);
public delegate void UpdateMeshPadding_WithArgs (Action<TMPro.TMP_SubMeshUI,  bool,  bool> orig, TMPro.TMP_SubMeshUI self,  bool isExtraPadding,  bool isUsingBold);
public sealed class Params_SetAllDirty
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void SetAllDirty_BeforeArgs(Params_SetAllDirty args);
public delegate void SetAllDirty_AfterArgs(Params_SetAllDirty args);
public delegate void SetAllDirty_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_SetVerticesDirty
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void SetVerticesDirty_BeforeArgs(Params_SetVerticesDirty args);
public delegate void SetVerticesDirty_AfterArgs(Params_SetVerticesDirty args);
public delegate void SetVerticesDirty_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_SetLayoutDirty
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void SetLayoutDirty_BeforeArgs(Params_SetLayoutDirty args);
public delegate void SetLayoutDirty_AfterArgs(Params_SetLayoutDirty args);
public delegate void SetLayoutDirty_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_SetMaterialDirty
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void SetMaterialDirty_BeforeArgs(Params_SetMaterialDirty args);
public delegate void SetMaterialDirty_AfterArgs(Params_SetMaterialDirty args);
public delegate void SetMaterialDirty_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_SetPivotDirty
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void SetPivotDirty_BeforeArgs(Params_SetPivotDirty args);
public delegate void SetPivotDirty_AfterArgs(Params_SetPivotDirty args);
public delegate void SetPivotDirty_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_UpdateGeometry
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_Rebuild
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.UI.CanvasUpdate update;
}
public delegate void Rebuild_BeforeArgs(Params_Rebuild args);
public delegate void Rebuild_AfterArgs(Params_Rebuild args);
public delegate void Rebuild_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.UI.CanvasUpdate> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.UI.CanvasUpdate update);
public sealed class Params_RefreshMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void RefreshMaterial_BeforeArgs(Params_RefreshMaterial args);
public delegate void RefreshMaterial_AfterArgs(Params_RefreshMaterial args);
public delegate void RefreshMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_UpdateMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);
public delegate void UpdateMaterial_AfterArgs(Params_UpdateMaterial args);
public delegate void UpdateMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_RecalculateClipping
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void RecalculateClipping_BeforeArgs(Params_RecalculateClipping args);
public delegate void RecalculateClipping_AfterArgs(Params_RecalculateClipping args);
public delegate void RecalculateClipping_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_RecalculateMasking
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void RecalculateMasking_BeforeArgs(Params_RecalculateMasking args);
public delegate void RecalculateMasking_AfterArgs(Params_RecalculateMasking args);
public delegate void RecalculateMasking_WithArgs (Action<TMPro.TMP_SubMeshUI> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_GetMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void GetMaterial_BeforeArgs(Params_GetMaterial args);
public delegate UnityEngine.Material GetMaterial_AfterArgs(Params_GetMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material GetMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_GetMaterial_Material
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material mat;
}
public delegate void GetMaterial_Material_BeforeArgs(Params_GetMaterial_Material args);
public delegate UnityEngine.Material GetMaterial_Material_AfterArgs(Params_GetMaterial_Material args, UnityEngine.Material ret);
public delegate UnityEngine.Material GetMaterial_Material_WithArgs (Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material mat);
public sealed class Params_CreateMaterialInstance
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material source;
}
public delegate void CreateMaterialInstance_BeforeArgs(Params_CreateMaterialInstance args);
public delegate UnityEngine.Material CreateMaterialInstance_AfterArgs(Params_CreateMaterialInstance args, UnityEngine.Material ret);
public delegate UnityEngine.Material CreateMaterialInstance_WithArgs (Func<TMPro.TMP_SubMeshUI,  UnityEngine.Material, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material source);
public sealed class Params_GetSharedMaterial
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void GetSharedMaterial_BeforeArgs(Params_GetSharedMaterial args);
public delegate UnityEngine.Material GetSharedMaterial_AfterArgs(Params_GetSharedMaterial args, UnityEngine.Material ret);
public delegate UnityEngine.Material GetSharedMaterial_WithArgs (Func<TMPro.TMP_SubMeshUI, UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self);
public sealed class Params_SetSharedMaterial
{
public TMPro.TMP_SubMeshUI self;
public UnityEngine.Material mat;
}
public delegate void SetSharedMaterial_BeforeArgs(Params_SetSharedMaterial args);
public delegate void SetSharedMaterial_AfterArgs(Params_SetSharedMaterial args);
public delegate void SetSharedMaterial_WithArgs (Action<TMPro.TMP_SubMeshUI,  UnityEngine.Material> orig, TMPro.TMP_SubMeshUI self,  UnityEngine.Material mat);
public sealed class Params_GetInstanceID
{
public TMPro.TMP_SubMeshUI self;
}
public delegate void GetInstanceID_BeforeArgs(Params_GetInstanceID args);
public delegate int GetInstanceID_AfterArgs(Params_GetInstanceID args, int ret);
public delegate int GetInstanceID_WithArgs (Func<TMPro.TMP_SubMeshUI, int> orig, TMPro.TMP_SubMeshUI self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_fontAsset_BeforeArgs get_fontAsset
{
add
{

HookHandler._beforeget_fontAsset += value;
HookHandler.Hookget_fontAsset();
}
remove => HookHandler._beforeget_fontAsset -= value;
}
public static event Delegates.set_fontAsset_BeforeArgs set_fontAsset
{
add
{

HookHandler._beforeset_fontAsset += value;
HookHandler.Hookset_fontAsset();
}
remove => HookHandler._beforeset_fontAsset -= value;
}
public static event Delegates.get_spriteAsset_BeforeArgs get_spriteAsset
{
add
{

HookHandler._beforeget_spriteAsset += value;
HookHandler.Hookget_spriteAsset();
}
remove => HookHandler._beforeget_spriteAsset -= value;
}
public static event Delegates.set_spriteAsset_BeforeArgs set_spriteAsset
{
add
{

HookHandler._beforeset_spriteAsset += value;
HookHandler.Hookset_spriteAsset();
}
remove => HookHandler._beforeset_spriteAsset -= value;
}
public static event Delegates.get_mainTexture_BeforeArgs get_mainTexture
{
add
{

HookHandler._beforeget_mainTexture += value;
HookHandler.Hookget_mainTexture();
}
remove => HookHandler._beforeget_mainTexture -= value;
}
public static event Delegates.get_material_BeforeArgs get_material
{
add
{

HookHandler._beforeget_material += value;
HookHandler.Hookget_material();
}
remove => HookHandler._beforeget_material -= value;
}
public static event Delegates.set_material_BeforeArgs set_material
{
add
{

HookHandler._beforeset_material += value;
HookHandler.Hookset_material();
}
remove => HookHandler._beforeset_material -= value;
}
public static event Delegates.get_sharedMaterial_BeforeArgs get_sharedMaterial
{
add
{

HookHandler._beforeget_sharedMaterial += value;
HookHandler.Hookget_sharedMaterial();
}
remove => HookHandler._beforeget_sharedMaterial -= value;
}
public static event Delegates.set_sharedMaterial_BeforeArgs set_sharedMaterial
{
add
{

HookHandler._beforeset_sharedMaterial += value;
HookHandler.Hookset_sharedMaterial();
}
remove => HookHandler._beforeset_sharedMaterial -= value;
}
public static event Delegates.get_fallbackMaterial_BeforeArgs get_fallbackMaterial
{
add
{

HookHandler._beforeget_fallbackMaterial += value;
HookHandler.Hookget_fallbackMaterial();
}
remove => HookHandler._beforeget_fallbackMaterial -= value;
}
public static event Delegates.set_fallbackMaterial_BeforeArgs set_fallbackMaterial
{
add
{

HookHandler._beforeset_fallbackMaterial += value;
HookHandler.Hookset_fallbackMaterial();
}
remove => HookHandler._beforeset_fallbackMaterial -= value;
}
public static event Delegates.get_fallbackSourceMaterial_BeforeArgs get_fallbackSourceMaterial
{
add
{

HookHandler._beforeget_fallbackSourceMaterial += value;
HookHandler.Hookget_fallbackSourceMaterial();
}
remove => HookHandler._beforeget_fallbackSourceMaterial -= value;
}
public static event Delegates.set_fallbackSourceMaterial_BeforeArgs set_fallbackSourceMaterial
{
add
{

HookHandler._beforeset_fallbackSourceMaterial += value;
HookHandler.Hookset_fallbackSourceMaterial();
}
remove => HookHandler._beforeset_fallbackSourceMaterial -= value;
}
public static event Delegates.get_materialForRendering_BeforeArgs get_materialForRendering
{
add
{

HookHandler._beforeget_materialForRendering += value;
HookHandler.Hookget_materialForRendering();
}
remove => HookHandler._beforeget_materialForRendering -= value;
}
public static event Delegates.get_isDefaultMaterial_BeforeArgs get_isDefaultMaterial
{
add
{

HookHandler._beforeget_isDefaultMaterial += value;
HookHandler.Hookget_isDefaultMaterial();
}
remove => HookHandler._beforeget_isDefaultMaterial -= value;
}
public static event Delegates.set_isDefaultMaterial_BeforeArgs set_isDefaultMaterial
{
add
{

HookHandler._beforeset_isDefaultMaterial += value;
HookHandler.Hookset_isDefaultMaterial();
}
remove => HookHandler._beforeset_isDefaultMaterial -= value;
}
public static event Delegates.get_padding_BeforeArgs get_padding
{
add
{

HookHandler._beforeget_padding += value;
HookHandler.Hookget_padding();
}
remove => HookHandler._beforeget_padding -= value;
}
public static event Delegates.set_padding_BeforeArgs set_padding
{
add
{

HookHandler._beforeset_padding += value;
HookHandler.Hookset_padding();
}
remove => HookHandler._beforeset_padding -= value;
}
public static event Delegates.get_canvasRenderer_BeforeArgs get_canvasRenderer
{
add
{

HookHandler._beforeget_canvasRenderer += value;
HookHandler.Hookget_canvasRenderer();
}
remove => HookHandler._beforeget_canvasRenderer -= value;
}
public static event Delegates.get_mesh_BeforeArgs get_mesh
{
add
{

HookHandler._beforeget_mesh += value;
HookHandler.Hookget_mesh();
}
remove => HookHandler._beforeget_mesh -= value;
}
public static event Delegates.set_mesh_BeforeArgs set_mesh
{
add
{

HookHandler._beforeset_mesh += value;
HookHandler.Hookset_mesh();
}
remove => HookHandler._beforeset_mesh -= value;
}
public static event Delegates.AddSubTextObject_BeforeArgs AddSubTextObject
{
add
{

HookHandler._beforeAddSubTextObject += value;
HookHandler.HookAddSubTextObject();
}
remove => HookHandler._beforeAddSubTextObject -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
public static event Delegates.OnTransformParentChanged_BeforeArgs OnTransformParentChanged
{
add
{

HookHandler._beforeOnTransformParentChanged += value;
HookHandler.HookOnTransformParentChanged();
}
remove => HookHandler._beforeOnTransformParentChanged -= value;
}
public static event Delegates.GetModifiedMaterial_BeforeArgs GetModifiedMaterial
{
add
{

HookHandler._beforeGetModifiedMaterial += value;
HookHandler.HookGetModifiedMaterial();
}
remove => HookHandler._beforeGetModifiedMaterial -= value;
}
public static event Delegates.GetPaddingForMaterial_BeforeArgs GetPaddingForMaterial
{
add
{

HookHandler._beforeGetPaddingForMaterial += value;
HookHandler.HookGetPaddingForMaterial();
}
remove => HookHandler._beforeGetPaddingForMaterial -= value;
}
public static event Delegates.GetPaddingForMaterial_Material_BeforeArgs GetPaddingForMaterial_Material
{
add
{

HookHandler._beforeGetPaddingForMaterial_Material += value;
HookHandler.HookGetPaddingForMaterial_Material();
}
remove => HookHandler._beforeGetPaddingForMaterial_Material -= value;
}
public static event Delegates.UpdateMeshPadding_BeforeArgs UpdateMeshPadding
{
add
{

HookHandler._beforeUpdateMeshPadding += value;
HookHandler.HookUpdateMeshPadding();
}
remove => HookHandler._beforeUpdateMeshPadding -= value;
}
public static event Delegates.SetAllDirty_BeforeArgs SetAllDirty
{
add
{

HookHandler._beforeSetAllDirty += value;
HookHandler.HookSetAllDirty();
}
remove => HookHandler._beforeSetAllDirty -= value;
}
public static event Delegates.SetVerticesDirty_BeforeArgs SetVerticesDirty
{
add
{

HookHandler._beforeSetVerticesDirty += value;
HookHandler.HookSetVerticesDirty();
}
remove => HookHandler._beforeSetVerticesDirty -= value;
}
public static event Delegates.SetLayoutDirty_BeforeArgs SetLayoutDirty
{
add
{

HookHandler._beforeSetLayoutDirty += value;
HookHandler.HookSetLayoutDirty();
}
remove => HookHandler._beforeSetLayoutDirty -= value;
}
public static event Delegates.SetMaterialDirty_BeforeArgs SetMaterialDirty
{
add
{

HookHandler._beforeSetMaterialDirty += value;
HookHandler.HookSetMaterialDirty();
}
remove => HookHandler._beforeSetMaterialDirty -= value;
}
public static event Delegates.SetPivotDirty_BeforeArgs SetPivotDirty
{
add
{

HookHandler._beforeSetPivotDirty += value;
HookHandler.HookSetPivotDirty();
}
remove => HookHandler._beforeSetPivotDirty -= value;
}
public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
{
add
{

HookHandler._beforeUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._beforeUpdateGeometry -= value;
}
public static event Delegates.Rebuild_BeforeArgs Rebuild
{
add
{

HookHandler._beforeRebuild += value;
HookHandler.HookRebuild();
}
remove => HookHandler._beforeRebuild -= value;
}
public static event Delegates.RefreshMaterial_BeforeArgs RefreshMaterial
{
add
{

HookHandler._beforeRefreshMaterial += value;
HookHandler.HookRefreshMaterial();
}
remove => HookHandler._beforeRefreshMaterial -= value;
}
public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
{
add
{

HookHandler._beforeUpdateMaterial += value;
HookHandler.HookUpdateMaterial();
}
remove => HookHandler._beforeUpdateMaterial -= value;
}
public static event Delegates.RecalculateClipping_BeforeArgs RecalculateClipping
{
add
{

HookHandler._beforeRecalculateClipping += value;
HookHandler.HookRecalculateClipping();
}
remove => HookHandler._beforeRecalculateClipping -= value;
}
public static event Delegates.RecalculateMasking_BeforeArgs RecalculateMasking
{
add
{

HookHandler._beforeRecalculateMasking += value;
HookHandler.HookRecalculateMasking();
}
remove => HookHandler._beforeRecalculateMasking -= value;
}
public static event Delegates.GetMaterial_BeforeArgs GetMaterial
{
add
{

HookHandler._beforeGetMaterial += value;
HookHandler.HookGetMaterial();
}
remove => HookHandler._beforeGetMaterial -= value;
}
public static event Delegates.GetMaterial_Material_BeforeArgs GetMaterial_Material
{
add
{

HookHandler._beforeGetMaterial_Material += value;
HookHandler.HookGetMaterial_Material();
}
remove => HookHandler._beforeGetMaterial_Material -= value;
}
public static event Delegates.CreateMaterialInstance_BeforeArgs CreateMaterialInstance
{
add
{

HookHandler._beforeCreateMaterialInstance += value;
HookHandler.HookCreateMaterialInstance();
}
remove => HookHandler._beforeCreateMaterialInstance -= value;
}
public static event Delegates.GetSharedMaterial_BeforeArgs GetSharedMaterial
{
add
{

HookHandler._beforeGetSharedMaterial += value;
HookHandler.HookGetSharedMaterial();
}
remove => HookHandler._beforeGetSharedMaterial -= value;
}
public static event Delegates.SetSharedMaterial_BeforeArgs SetSharedMaterial
{
add
{

HookHandler._beforeSetSharedMaterial += value;
HookHandler.HookSetSharedMaterial();
}
remove => HookHandler._beforeSetSharedMaterial -= value;
}
public static event Delegates.GetInstanceID_BeforeArgs GetInstanceID
{
add
{

HookHandler._beforeGetInstanceID += value;
HookHandler.HookGetInstanceID();
}
remove => HookHandler._beforeGetInstanceID -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_fontAsset_AfterArgs get_fontAsset
{
add
{

HookHandler._afterget_fontAsset += value;
HookHandler.Hookget_fontAsset();
}
remove => HookHandler._afterget_fontAsset -= value;
}
public static event Delegates.set_fontAsset_AfterArgs set_fontAsset
{
add
{

HookHandler._afterset_fontAsset += value;
HookHandler.Hookset_fontAsset();
}
remove => HookHandler._afterset_fontAsset -= value;
}
public static event Delegates.get_spriteAsset_AfterArgs get_spriteAsset
{
add
{

HookHandler._afterget_spriteAsset += value;
HookHandler.Hookget_spriteAsset();
}
remove => HookHandler._afterget_spriteAsset -= value;
}
public static event Delegates.set_spriteAsset_AfterArgs set_spriteAsset
{
add
{

HookHandler._afterset_spriteAsset += value;
HookHandler.Hookset_spriteAsset();
}
remove => HookHandler._afterset_spriteAsset -= value;
}
public static event Delegates.get_mainTexture_AfterArgs get_mainTexture
{
add
{

HookHandler._afterget_mainTexture += value;
HookHandler.Hookget_mainTexture();
}
remove => HookHandler._afterget_mainTexture -= value;
}
public static event Delegates.get_material_AfterArgs get_material
{
add
{

HookHandler._afterget_material += value;
HookHandler.Hookget_material();
}
remove => HookHandler._afterget_material -= value;
}
public static event Delegates.set_material_AfterArgs set_material
{
add
{

HookHandler._afterset_material += value;
HookHandler.Hookset_material();
}
remove => HookHandler._afterset_material -= value;
}
public static event Delegates.get_sharedMaterial_AfterArgs get_sharedMaterial
{
add
{

HookHandler._afterget_sharedMaterial += value;
HookHandler.Hookget_sharedMaterial();
}
remove => HookHandler._afterget_sharedMaterial -= value;
}
public static event Delegates.set_sharedMaterial_AfterArgs set_sharedMaterial
{
add
{

HookHandler._afterset_sharedMaterial += value;
HookHandler.Hookset_sharedMaterial();
}
remove => HookHandler._afterset_sharedMaterial -= value;
}
public static event Delegates.get_fallbackMaterial_AfterArgs get_fallbackMaterial
{
add
{

HookHandler._afterget_fallbackMaterial += value;
HookHandler.Hookget_fallbackMaterial();
}
remove => HookHandler._afterget_fallbackMaterial -= value;
}
public static event Delegates.set_fallbackMaterial_AfterArgs set_fallbackMaterial
{
add
{

HookHandler._afterset_fallbackMaterial += value;
HookHandler.Hookset_fallbackMaterial();
}
remove => HookHandler._afterset_fallbackMaterial -= value;
}
public static event Delegates.get_fallbackSourceMaterial_AfterArgs get_fallbackSourceMaterial
{
add
{

HookHandler._afterget_fallbackSourceMaterial += value;
HookHandler.Hookget_fallbackSourceMaterial();
}
remove => HookHandler._afterget_fallbackSourceMaterial -= value;
}
public static event Delegates.set_fallbackSourceMaterial_AfterArgs set_fallbackSourceMaterial
{
add
{

HookHandler._afterset_fallbackSourceMaterial += value;
HookHandler.Hookset_fallbackSourceMaterial();
}
remove => HookHandler._afterset_fallbackSourceMaterial -= value;
}
public static event Delegates.get_materialForRendering_AfterArgs get_materialForRendering
{
add
{

HookHandler._afterget_materialForRendering += value;
HookHandler.Hookget_materialForRendering();
}
remove => HookHandler._afterget_materialForRendering -= value;
}
public static event Delegates.get_isDefaultMaterial_AfterArgs get_isDefaultMaterial
{
add
{

HookHandler._afterget_isDefaultMaterial += value;
HookHandler.Hookget_isDefaultMaterial();
}
remove => HookHandler._afterget_isDefaultMaterial -= value;
}
public static event Delegates.set_isDefaultMaterial_AfterArgs set_isDefaultMaterial
{
add
{

HookHandler._afterset_isDefaultMaterial += value;
HookHandler.Hookset_isDefaultMaterial();
}
remove => HookHandler._afterset_isDefaultMaterial -= value;
}
public static event Delegates.get_padding_AfterArgs get_padding
{
add
{

HookHandler._afterget_padding += value;
HookHandler.Hookget_padding();
}
remove => HookHandler._afterget_padding -= value;
}
public static event Delegates.set_padding_AfterArgs set_padding
{
add
{

HookHandler._afterset_padding += value;
HookHandler.Hookset_padding();
}
remove => HookHandler._afterset_padding -= value;
}
public static event Delegates.get_canvasRenderer_AfterArgs get_canvasRenderer
{
add
{

HookHandler._afterget_canvasRenderer += value;
HookHandler.Hookget_canvasRenderer();
}
remove => HookHandler._afterget_canvasRenderer -= value;
}
public static event Delegates.get_mesh_AfterArgs get_mesh
{
add
{

HookHandler._afterget_mesh += value;
HookHandler.Hookget_mesh();
}
remove => HookHandler._afterget_mesh -= value;
}
public static event Delegates.set_mesh_AfterArgs set_mesh
{
add
{

HookHandler._afterset_mesh += value;
HookHandler.Hookset_mesh();
}
remove => HookHandler._afterset_mesh -= value;
}
public static event Delegates.AddSubTextObject_AfterArgs AddSubTextObject
{
add
{

HookHandler._afterAddSubTextObject += value;
HookHandler.HookAddSubTextObject();
}
remove => HookHandler._afterAddSubTextObject -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
public static event Delegates.OnTransformParentChanged_AfterArgs OnTransformParentChanged
{
add
{

HookHandler._afterOnTransformParentChanged += value;
HookHandler.HookOnTransformParentChanged();
}
remove => HookHandler._afterOnTransformParentChanged -= value;
}
public static event Delegates.GetModifiedMaterial_AfterArgs GetModifiedMaterial
{
add
{

HookHandler._afterGetModifiedMaterial += value;
HookHandler.HookGetModifiedMaterial();
}
remove => HookHandler._afterGetModifiedMaterial -= value;
}
public static event Delegates.GetPaddingForMaterial_AfterArgs GetPaddingForMaterial
{
add
{

HookHandler._afterGetPaddingForMaterial += value;
HookHandler.HookGetPaddingForMaterial();
}
remove => HookHandler._afterGetPaddingForMaterial -= value;
}
public static event Delegates.GetPaddingForMaterial_Material_AfterArgs GetPaddingForMaterial_Material
{
add
{

HookHandler._afterGetPaddingForMaterial_Material += value;
HookHandler.HookGetPaddingForMaterial_Material();
}
remove => HookHandler._afterGetPaddingForMaterial_Material -= value;
}
public static event Delegates.UpdateMeshPadding_AfterArgs UpdateMeshPadding
{
add
{

HookHandler._afterUpdateMeshPadding += value;
HookHandler.HookUpdateMeshPadding();
}
remove => HookHandler._afterUpdateMeshPadding -= value;
}
public static event Delegates.SetAllDirty_AfterArgs SetAllDirty
{
add
{

HookHandler._afterSetAllDirty += value;
HookHandler.HookSetAllDirty();
}
remove => HookHandler._afterSetAllDirty -= value;
}
public static event Delegates.SetVerticesDirty_AfterArgs SetVerticesDirty
{
add
{

HookHandler._afterSetVerticesDirty += value;
HookHandler.HookSetVerticesDirty();
}
remove => HookHandler._afterSetVerticesDirty -= value;
}
public static event Delegates.SetLayoutDirty_AfterArgs SetLayoutDirty
{
add
{

HookHandler._afterSetLayoutDirty += value;
HookHandler.HookSetLayoutDirty();
}
remove => HookHandler._afterSetLayoutDirty -= value;
}
public static event Delegates.SetMaterialDirty_AfterArgs SetMaterialDirty
{
add
{

HookHandler._afterSetMaterialDirty += value;
HookHandler.HookSetMaterialDirty();
}
remove => HookHandler._afterSetMaterialDirty -= value;
}
public static event Delegates.SetPivotDirty_AfterArgs SetPivotDirty
{
add
{

HookHandler._afterSetPivotDirty += value;
HookHandler.HookSetPivotDirty();
}
remove => HookHandler._afterSetPivotDirty -= value;
}
public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
{
add
{

HookHandler._afterUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._afterUpdateGeometry -= value;
}
public static event Delegates.Rebuild_AfterArgs Rebuild
{
add
{

HookHandler._afterRebuild += value;
HookHandler.HookRebuild();
}
remove => HookHandler._afterRebuild -= value;
}
public static event Delegates.RefreshMaterial_AfterArgs RefreshMaterial
{
add
{

HookHandler._afterRefreshMaterial += value;
HookHandler.HookRefreshMaterial();
}
remove => HookHandler._afterRefreshMaterial -= value;
}
public static event Delegates.UpdateMaterial_AfterArgs UpdateMaterial
{
add
{

HookHandler._afterUpdateMaterial += value;
HookHandler.HookUpdateMaterial();
}
remove => HookHandler._afterUpdateMaterial -= value;
}
public static event Delegates.RecalculateClipping_AfterArgs RecalculateClipping
{
add
{

HookHandler._afterRecalculateClipping += value;
HookHandler.HookRecalculateClipping();
}
remove => HookHandler._afterRecalculateClipping -= value;
}
public static event Delegates.RecalculateMasking_AfterArgs RecalculateMasking
{
add
{

HookHandler._afterRecalculateMasking += value;
HookHandler.HookRecalculateMasking();
}
remove => HookHandler._afterRecalculateMasking -= value;
}
public static event Delegates.GetMaterial_AfterArgs GetMaterial
{
add
{

HookHandler._afterGetMaterial += value;
HookHandler.HookGetMaterial();
}
remove => HookHandler._afterGetMaterial -= value;
}
public static event Delegates.GetMaterial_Material_AfterArgs GetMaterial_Material
{
add
{

HookHandler._afterGetMaterial_Material += value;
HookHandler.HookGetMaterial_Material();
}
remove => HookHandler._afterGetMaterial_Material -= value;
}
public static event Delegates.CreateMaterialInstance_AfterArgs CreateMaterialInstance
{
add
{

HookHandler._afterCreateMaterialInstance += value;
HookHandler.HookCreateMaterialInstance();
}
remove => HookHandler._afterCreateMaterialInstance -= value;
}
public static event Delegates.GetSharedMaterial_AfterArgs GetSharedMaterial
{
add
{

HookHandler._afterGetSharedMaterial += value;
HookHandler.HookGetSharedMaterial();
}
remove => HookHandler._afterGetSharedMaterial -= value;
}
public static event Delegates.SetSharedMaterial_AfterArgs SetSharedMaterial
{
add
{

HookHandler._afterSetSharedMaterial += value;
HookHandler.HookSetSharedMaterial();
}
remove => HookHandler._afterSetSharedMaterial -= value;
}
public static event Delegates.GetInstanceID_AfterArgs GetInstanceID
{
add
{

HookHandler._afterGetInstanceID += value;
HookHandler.HookGetInstanceID();
}
remove => HookHandler._afterGetInstanceID -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_fontAsset_WithArgs get_fontAsset
{
add => HookEndpointManager.Add<Delegates.get_fontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fontAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fontAsset", true), value);
}
public static event Delegates.set_fontAsset_WithArgs set_fontAsset
{
add => HookEndpointManager.Add<Delegates.set_fontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fontAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fontAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fontAsset", true), value);
}
public static event Delegates.get_spriteAsset_WithArgs get_spriteAsset
{
add => HookEndpointManager.Add<Delegates.get_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_spriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.get_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_spriteAsset", true), value);
}
public static event Delegates.set_spriteAsset_WithArgs set_spriteAsset
{
add => HookEndpointManager.Add<Delegates.set_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_spriteAsset", true), value);
remove => HookEndpointManager.Remove<Delegates.set_spriteAsset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_spriteAsset", true), value);
}
public static event Delegates.get_mainTexture_WithArgs get_mainTexture
{
add => HookEndpointManager.Add<Delegates.get_mainTexture_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_mainTexture", true), value);
remove => HookEndpointManager.Remove<Delegates.get_mainTexture_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_mainTexture", true), value);
}
public static event Delegates.get_material_WithArgs get_material
{
add => HookEndpointManager.Add<Delegates.get_material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_material", true), value);
remove => HookEndpointManager.Remove<Delegates.get_material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_material", true), value);
}
public static event Delegates.set_material_WithArgs set_material
{
add => HookEndpointManager.Add<Delegates.set_material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_material", true), value);
remove => HookEndpointManager.Remove<Delegates.set_material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_material", true), value);
}
public static event Delegates.get_sharedMaterial_WithArgs get_sharedMaterial
{
add => HookEndpointManager.Add<Delegates.get_sharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_sharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.get_sharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_sharedMaterial", true), value);
}
public static event Delegates.set_sharedMaterial_WithArgs set_sharedMaterial
{
add => HookEndpointManager.Add<Delegates.set_sharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_sharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.set_sharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_sharedMaterial", true), value);
}
public static event Delegates.get_fallbackMaterial_WithArgs get_fallbackMaterial
{
add => HookEndpointManager.Add<Delegates.get_fallbackMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fallbackMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fallbackMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fallbackMaterial", true), value);
}
public static event Delegates.set_fallbackMaterial_WithArgs set_fallbackMaterial
{
add => HookEndpointManager.Add<Delegates.set_fallbackMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fallbackMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fallbackMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fallbackMaterial", true), value);
}
public static event Delegates.get_fallbackSourceMaterial_WithArgs get_fallbackSourceMaterial
{
add => HookEndpointManager.Add<Delegates.get_fallbackSourceMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fallbackSourceMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.get_fallbackSourceMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_fallbackSourceMaterial", true), value);
}
public static event Delegates.set_fallbackSourceMaterial_WithArgs set_fallbackSourceMaterial
{
add => HookEndpointManager.Add<Delegates.set_fallbackSourceMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fallbackSourceMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.set_fallbackSourceMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_fallbackSourceMaterial", true), value);
}
public static event Delegates.get_materialForRendering_WithArgs get_materialForRendering
{
add => HookEndpointManager.Add<Delegates.get_materialForRendering_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_materialForRendering", true), value);
remove => HookEndpointManager.Remove<Delegates.get_materialForRendering_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_materialForRendering", true), value);
}
public static event Delegates.get_isDefaultMaterial_WithArgs get_isDefaultMaterial
{
add => HookEndpointManager.Add<Delegates.get_isDefaultMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_isDefaultMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.get_isDefaultMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_isDefaultMaterial", true), value);
}
public static event Delegates.set_isDefaultMaterial_WithArgs set_isDefaultMaterial
{
add => HookEndpointManager.Add<Delegates.set_isDefaultMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_isDefaultMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.set_isDefaultMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_isDefaultMaterial", true), value);
}
public static event Delegates.get_padding_WithArgs get_padding
{
add => HookEndpointManager.Add<Delegates.get_padding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_padding", true), value);
remove => HookEndpointManager.Remove<Delegates.get_padding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_padding", true), value);
}
public static event Delegates.set_padding_WithArgs set_padding
{
add => HookEndpointManager.Add<Delegates.set_padding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_padding", true), value);
remove => HookEndpointManager.Remove<Delegates.set_padding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_padding", true), value);
}
public static event Delegates.get_canvasRenderer_WithArgs get_canvasRenderer
{
add => HookEndpointManager.Add<Delegates.get_canvasRenderer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_canvasRenderer", true), value);
remove => HookEndpointManager.Remove<Delegates.get_canvasRenderer_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_canvasRenderer", true), value);
}
public static event Delegates.get_mesh_WithArgs get_mesh
{
add => HookEndpointManager.Add<Delegates.get_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_mesh", true), value);
remove => HookEndpointManager.Remove<Delegates.get_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "get_mesh", true), value);
}
public static event Delegates.set_mesh_WithArgs set_mesh
{
add => HookEndpointManager.Add<Delegates.set_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_mesh", true), value);
remove => HookEndpointManager.Remove<Delegates.set_mesh_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "set_mesh", true), value);
}
public static event Delegates.AddSubTextObject_WithArgs AddSubTextObject
{
add => HookEndpointManager.Add<Delegates.AddSubTextObject_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "AddSubTextObject", false), value);
remove => HookEndpointManager.Remove<Delegates.AddSubTextObject_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "AddSubTextObject", false), value);
}
public static event Delegates.OnEnable_WithArgs OnEnable
{
add => HookEndpointManager.Add<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnEnable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnEnable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnEnable", true), value);
}
public static event Delegates.OnDisable_WithArgs OnDisable
{
add => HookEndpointManager.Add<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnDisable", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDisable_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnDisable", true), value);
}
public static event Delegates.OnDestroy_WithArgs OnDestroy
{
add => HookEndpointManager.Add<Delegates.OnDestroy_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnDestroy", true), value);
remove => HookEndpointManager.Remove<Delegates.OnDestroy_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnDestroy", true), value);
}
public static event Delegates.OnTransformParentChanged_WithArgs OnTransformParentChanged
{
add => HookEndpointManager.Add<Delegates.OnTransformParentChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnTransformParentChanged", true), value);
remove => HookEndpointManager.Remove<Delegates.OnTransformParentChanged_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "OnTransformParentChanged", true), value);
}
public static event Delegates.GetModifiedMaterial_WithArgs GetModifiedMaterial
{
add => HookEndpointManager.Add<Delegates.GetModifiedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetModifiedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetModifiedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetModifiedMaterial", true), value);
}
public static event Delegates.GetPaddingForMaterial_WithArgs GetPaddingForMaterial
{
add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetPaddingForMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetPaddingForMaterial", true), value);
}
public static event Delegates.GetPaddingForMaterial_Material_WithArgs GetPaddingForMaterial_Material
{
add => HookEndpointManager.Add<Delegates.GetPaddingForMaterial_Material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetPaddingForMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPaddingForMaterial_Material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetPaddingForMaterial", true), value);
}
public static event Delegates.UpdateMeshPadding_WithArgs UpdateMeshPadding
{
add => HookEndpointManager.Add<Delegates.UpdateMeshPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateMeshPadding", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateMeshPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateMeshPadding", true), value);
}
public static event Delegates.SetAllDirty_WithArgs SetAllDirty
{
add => HookEndpointManager.Add<Delegates.SetAllDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetAllDirty", true), value);
remove => HookEndpointManager.Remove<Delegates.SetAllDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetAllDirty", true), value);
}
public static event Delegates.SetVerticesDirty_WithArgs SetVerticesDirty
{
add => HookEndpointManager.Add<Delegates.SetVerticesDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetVerticesDirty", true), value);
remove => HookEndpointManager.Remove<Delegates.SetVerticesDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetVerticesDirty", true), value);
}
public static event Delegates.SetLayoutDirty_WithArgs SetLayoutDirty
{
add => HookEndpointManager.Add<Delegates.SetLayoutDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetLayoutDirty", true), value);
remove => HookEndpointManager.Remove<Delegates.SetLayoutDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetLayoutDirty", true), value);
}
public static event Delegates.SetMaterialDirty_WithArgs SetMaterialDirty
{
add => HookEndpointManager.Add<Delegates.SetMaterialDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetMaterialDirty", true), value);
remove => HookEndpointManager.Remove<Delegates.SetMaterialDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetMaterialDirty", true), value);
}
public static event Delegates.SetPivotDirty_WithArgs SetPivotDirty
{
add => HookEndpointManager.Add<Delegates.SetPivotDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetPivotDirty", true), value);
remove => HookEndpointManager.Remove<Delegates.SetPivotDirty_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetPivotDirty", true), value);
}
public static event Delegates.UpdateGeometry_WithArgs UpdateGeometry
{
add => HookEndpointManager.Add<Delegates.UpdateGeometry_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateGeometry", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateGeometry_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateGeometry", true), value);
}
public static event Delegates.Rebuild_WithArgs Rebuild
{
add => HookEndpointManager.Add<Delegates.Rebuild_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "Rebuild", true), value);
remove => HookEndpointManager.Remove<Delegates.Rebuild_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "Rebuild", true), value);
}
public static event Delegates.RefreshMaterial_WithArgs RefreshMaterial
{
add => HookEndpointManager.Add<Delegates.RefreshMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RefreshMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.RefreshMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RefreshMaterial", true), value);
}
public static event Delegates.UpdateMaterial_WithArgs UpdateMaterial
{
add => HookEndpointManager.Add<Delegates.UpdateMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.UpdateMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "UpdateMaterial", true), value);
}
public static event Delegates.RecalculateClipping_WithArgs RecalculateClipping
{
add => HookEndpointManager.Add<Delegates.RecalculateClipping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RecalculateClipping", true), value);
remove => HookEndpointManager.Remove<Delegates.RecalculateClipping_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RecalculateClipping", true), value);
}
public static event Delegates.RecalculateMasking_WithArgs RecalculateMasking
{
add => HookEndpointManager.Add<Delegates.RecalculateMasking_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RecalculateMasking", true), value);
remove => HookEndpointManager.Remove<Delegates.RecalculateMasking_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "RecalculateMasking", true), value);
}
public static event Delegates.GetMaterial_WithArgs GetMaterial
{
add => HookEndpointManager.Add<Delegates.GetMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetMaterial", true), value);
}
public static event Delegates.GetMaterial_Material_WithArgs GetMaterial_Material
{
add => HookEndpointManager.Add<Delegates.GetMaterial_Material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetMaterial_Material_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetMaterial", true), value);
}
public static event Delegates.CreateMaterialInstance_WithArgs CreateMaterialInstance
{
add => HookEndpointManager.Add<Delegates.CreateMaterialInstance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "CreateMaterialInstance", true), value);
remove => HookEndpointManager.Remove<Delegates.CreateMaterialInstance_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "CreateMaterialInstance", true), value);
}
public static event Delegates.GetSharedMaterial_WithArgs GetSharedMaterial
{
add => HookEndpointManager.Add<Delegates.GetSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetSharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.GetSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "GetSharedMaterial", true), value);
}
public static event Delegates.SetSharedMaterial_WithArgs SetSharedMaterial
{
add => HookEndpointManager.Add<Delegates.SetSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetSharedMaterial", true), value);
remove => HookEndpointManager.Remove<Delegates.SetSharedMaterial_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "SetSharedMaterial", true), value);
}
public static event Delegates.GetInstanceID_WithArgs GetInstanceID
{
add => HookEndpointManager.Add<Delegates.GetInstanceID_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "TMPro.ITextElement.GetInstanceID", true), value);
remove => HookEndpointManager.Remove<Delegates.GetInstanceID_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_SubMeshUI), "TMPro.ITextElement.GetInstanceID", true), value);
}
}

}
