using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using TMPro;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for TMP_Math class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMP_Math
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookApproximately()
        {
            if (!HookedList.Contains("Approximately"))
            {
                HookedList.Add("Approximately");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(TMP_Math), "Approximately", false), Approximately);
            }
        }

        internal static event Delegates.Approximately_BeforeArgs _beforeApproximately;
        internal static event Delegates.Approximately_AfterArgs _afterApproximately;

        private static bool Approximately(Func<float, float, bool> orig, float a, float b)
        {
            Delegates.Params_Approximately @params = new()
            {
                a = a, b = b
            };
            if (_beforeApproximately != null)
                foreach (Delegates.Approximately_BeforeArgs toInvoke in _beforeApproximately.GetInvocationList())
                    try
                    {
                        _beforeApproximately?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            a = @params.a;
            b = @params.b;
            var retVal = orig(a, b);
            if (_afterApproximately != null)
                foreach (Delegates.Approximately_AfterArgs toInvoke in _afterApproximately.GetInvocationList())
                    try
                    {
                        retVal = _afterApproximately.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool Approximately_AfterArgs(Params_Approximately args, bool ret);

        public delegate void Approximately_BeforeArgs(Params_Approximately args);

        public delegate bool Approximately_WithArgs(Func<float, float, bool> orig, float a, float b);

        public sealed class Params_Approximately
        {
            public float a;
            public float b;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Approximately_BeforeArgs Approximately
        {
            add
            {
                HookHandler._beforeApproximately += value;
                HookHandler.HookApproximately();
            }
            remove => HookHandler._beforeApproximately -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Approximately_AfterArgs Approximately
        {
            add
            {
                HookHandler._afterApproximately += value;
                HookHandler.HookApproximately();
            }
            remove => HookHandler._afterApproximately -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Approximately_WithArgs Approximately
        {
            add => HookEndpointManager.Add<Delegates.Approximately_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Math), "Approximately", false), value);
            remove => HookEndpointManager.Remove<Delegates.Approximately_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(TMP_Math), "Approximately", false), value);
        }
    }
}