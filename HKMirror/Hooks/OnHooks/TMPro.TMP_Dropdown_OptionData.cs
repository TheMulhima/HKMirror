using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for TMPro.TMP_Dropdown_OptionData class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTMPro_TMP_Dropdown_OptionData
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_text()
{
if (!HookedList.Contains("get_text"))
{
HookedList.Add("get_text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "get_text", true), get_text);

}
}
internal static event Delegates.get_text_BeforeArgs _beforeget_text;
internal static event Delegates.get_text_AfterArgs _afterget_text;
private static string get_text(Func<TMPro.TMP_Dropdown.OptionData, string> orig, TMPro.TMP_Dropdown.OptionData self)
{
Delegates.Params_get_text @params = new() 
{
self = self
};
if (_beforeget_text != null)
{
foreach (Delegates.get_text_BeforeArgs toInvoke in _beforeget_text.GetInvocationList())
{
try
{
_beforeget_text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_text != null)
{
foreach (Delegates.get_text_AfterArgs toInvoke in _afterget_text.GetInvocationList())
{
try
{
retVal = _afterget_text.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_text()
{
if (!HookedList.Contains("set_text"))
{
HookedList.Add("set_text");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "set_text", true), set_text);

}
}
internal static event Delegates.set_text_BeforeArgs _beforeset_text;
internal static event Delegates.set_text_AfterArgs _afterset_text;
private static void set_text(Action<TMPro.TMP_Dropdown.OptionData,  string> orig, TMPro.TMP_Dropdown.OptionData self,  string value)
{
Delegates.Params_set_text @params = new() 
{
self = self
, value = value
};
if (_beforeset_text != null)
{
foreach (Delegates.set_text_BeforeArgs toInvoke in _beforeset_text.GetInvocationList())
{
try
{
_beforeset_text?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_text != null)
{
foreach (Delegates.set_text_AfterArgs toInvoke in _afterset_text.GetInvocationList())
{
try
{
_afterset_text.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_image()
{
if (!HookedList.Contains("get_image"))
{
HookedList.Add("get_image");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "get_image", true), get_image);

}
}
internal static event Delegates.get_image_BeforeArgs _beforeget_image;
internal static event Delegates.get_image_AfterArgs _afterget_image;
private static UnityEngine.Sprite get_image(Func<TMPro.TMP_Dropdown.OptionData, UnityEngine.Sprite> orig, TMPro.TMP_Dropdown.OptionData self)
{
Delegates.Params_get_image @params = new() 
{
self = self
};
if (_beforeget_image != null)
{
foreach (Delegates.get_image_BeforeArgs toInvoke in _beforeget_image.GetInvocationList())
{
try
{
_beforeget_image?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_image != null)
{
foreach (Delegates.get_image_AfterArgs toInvoke in _afterget_image.GetInvocationList())
{
try
{
retVal = _afterget_image.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_image()
{
if (!HookedList.Contains("set_image"))
{
HookedList.Add("set_image");
new Hook(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "set_image", true), set_image);

}
}
internal static event Delegates.set_image_BeforeArgs _beforeset_image;
internal static event Delegates.set_image_AfterArgs _afterset_image;
private static void set_image(Action<TMPro.TMP_Dropdown.OptionData,  UnityEngine.Sprite> orig, TMPro.TMP_Dropdown.OptionData self,  UnityEngine.Sprite value)
{
Delegates.Params_set_image @params = new() 
{
self = self
, value = value
};
if (_beforeset_image != null)
{
foreach (Delegates.set_image_BeforeArgs toInvoke in _beforeset_image.GetInvocationList())
{
try
{
_beforeset_image?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_image != null)
{
foreach (Delegates.set_image_AfterArgs toInvoke in _afterset_image.GetInvocationList())
{
try
{
_afterset_image.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_text
{
public TMPro.TMP_Dropdown.OptionData self;
}
public delegate void get_text_BeforeArgs(Params_get_text args);
public delegate string get_text_AfterArgs(Params_get_text args, string ret);
public delegate string get_text_WithArgs (Func<TMPro.TMP_Dropdown.OptionData, string> orig, TMPro.TMP_Dropdown.OptionData self);
public sealed class Params_set_text
{
public TMPro.TMP_Dropdown.OptionData self;
public string value;
}
public delegate void set_text_BeforeArgs(Params_set_text args);
public delegate void set_text_AfterArgs(Params_set_text args);
public delegate void set_text_WithArgs (Action<TMPro.TMP_Dropdown.OptionData,  string> orig, TMPro.TMP_Dropdown.OptionData self,  string value);
public sealed class Params_get_image
{
public TMPro.TMP_Dropdown.OptionData self;
}
public delegate void get_image_BeforeArgs(Params_get_image args);
public delegate UnityEngine.Sprite get_image_AfterArgs(Params_get_image args, UnityEngine.Sprite ret);
public delegate UnityEngine.Sprite get_image_WithArgs (Func<TMPro.TMP_Dropdown.OptionData, UnityEngine.Sprite> orig, TMPro.TMP_Dropdown.OptionData self);
public sealed class Params_set_image
{
public TMPro.TMP_Dropdown.OptionData self;
public UnityEngine.Sprite value;
}
public delegate void set_image_BeforeArgs(Params_set_image args);
public delegate void set_image_AfterArgs(Params_set_image args);
public delegate void set_image_WithArgs (Action<TMPro.TMP_Dropdown.OptionData,  UnityEngine.Sprite> orig, TMPro.TMP_Dropdown.OptionData self,  UnityEngine.Sprite value);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_text_BeforeArgs get_text
{
add
{

HookHandler._beforeget_text += value;
HookHandler.Hookget_text();
}
remove => HookHandler._beforeget_text -= value;
}
public static event Delegates.set_text_BeforeArgs set_text
{
add
{

HookHandler._beforeset_text += value;
HookHandler.Hookset_text();
}
remove => HookHandler._beforeset_text -= value;
}
public static event Delegates.get_image_BeforeArgs get_image
{
add
{

HookHandler._beforeget_image += value;
HookHandler.Hookget_image();
}
remove => HookHandler._beforeget_image -= value;
}
public static event Delegates.set_image_BeforeArgs set_image
{
add
{

HookHandler._beforeset_image += value;
HookHandler.Hookset_image();
}
remove => HookHandler._beforeset_image -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_text_AfterArgs get_text
{
add
{

HookHandler._afterget_text += value;
HookHandler.Hookget_text();
}
remove => HookHandler._afterget_text -= value;
}
public static event Delegates.set_text_AfterArgs set_text
{
add
{

HookHandler._afterset_text += value;
HookHandler.Hookset_text();
}
remove => HookHandler._afterset_text -= value;
}
public static event Delegates.get_image_AfterArgs get_image
{
add
{

HookHandler._afterget_image += value;
HookHandler.Hookget_image();
}
remove => HookHandler._afterget_image -= value;
}
public static event Delegates.set_image_AfterArgs set_image
{
add
{

HookHandler._afterset_image += value;
HookHandler.Hookset_image();
}
remove => HookHandler._afterset_image -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_text_WithArgs get_text
{
add => HookEndpointManager.Add<Delegates.get_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "get_text", true), value);
remove => HookEndpointManager.Remove<Delegates.get_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "get_text", true), value);
}
public static event Delegates.set_text_WithArgs set_text
{
add => HookEndpointManager.Add<Delegates.set_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "set_text", true), value);
remove => HookEndpointManager.Remove<Delegates.set_text_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "set_text", true), value);
}
public static event Delegates.get_image_WithArgs get_image
{
add => HookEndpointManager.Add<Delegates.get_image_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "get_image", true), value);
remove => HookEndpointManager.Remove<Delegates.get_image_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "get_image", true), value);
}
public static event Delegates.set_image_WithArgs set_image
{
add => HookEndpointManager.Add<Delegates.set_image_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "set_image", true), value);
remove => HookEndpointManager.Remove<Delegates.set_image_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(TMPro.TMP_Dropdown.OptionData), "set_image", true), value);
}
}

}
