using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossDoorChallengeUIBindingButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossDoorChallengeUIBindingButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Selected()
        {
            if (!HookedList.Contains("get_Selected"))
            {
                HookedList.Add("get_Selected");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeUIBindingButton), "get_Selected"),
                    get_Selected);
            }
        }

        internal static event Delegates.get_Selected_BeforeArgs _beforeget_Selected;
        internal static event Delegates.get_Selected_NormalArgs _afterget_Selected;

        private static bool get_Selected(Func<BossDoorChallengeUIBindingButton, bool> orig,
            BossDoorChallengeUIBindingButton self)
        {
            Delegates.Params_get_Selected @params = new()
            {
                self = self
            };
            _beforeget_Selected?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Selected != null) retVal = _afterget_Selected.Invoke(@params);
            return retVal;
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BossDoorChallengeUIBindingButton.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BossDoorChallengeUIBindingButton.orig_Awake orig,
            BossDoorChallengeUIBindingButton self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.BossDoorChallengeUIBindingButton.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.BossDoorChallengeUIBindingButton.orig_Reset orig,
            BossDoorChallengeUIBindingButton self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.BossDoorChallengeUIBindingButton.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.BossDoorChallengeUIBindingButton.orig_OnDisable orig,
            BossDoorChallengeUIBindingButton self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                On.BossDoorChallengeUIBindingButton.OnSubmit += OnSubmit;
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_NormalArgs _afterOnSubmit;

        private static void OnSubmit(On.BossDoorChallengeUIBindingButton.orig_OnSubmit orig,
            BossDoorChallengeUIBindingButton self, BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSubmit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null) _afterOnSubmit.Invoke(@params);
        }

        internal static void HookSetAllSelected()
        {
            if (!HookedList.Contains("SetAllSelected"))
            {
                HookedList.Add("SetAllSelected");
                On.BossDoorChallengeUIBindingButton.SetAllSelected += SetAllSelected;
            }
        }

        internal static event Delegates.SetAllSelected_BeforeArgs _beforeSetAllSelected;
        internal static event Delegates.SetAllSelected_NormalArgs _afterSetAllSelected;

        private static void SetAllSelected(On.BossDoorChallengeUIBindingButton.orig_SetAllSelected orig,
            BossDoorChallengeUIBindingButton self, bool value)
        {
            Delegates.Params_SetAllSelected @params = new()
            {
                self = self, value = value
            };
            _beforeSetAllSelected?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterSetAllSelected != null) _afterSetAllSelected.Invoke(@params);
        }

        internal static void HookSetAnimSizeDelayed()
        {
            if (!HookedList.Contains("SetAnimSizeDelayed"))
            {
                HookedList.Add("SetAnimSizeDelayed");
                On.BossDoorChallengeUIBindingButton.SetAnimSizeDelayed += SetAnimSizeDelayed;
            }
        }

        internal static event Delegates.SetAnimSizeDelayed_BeforeArgs _beforeSetAnimSizeDelayed;

        private static IEnumerator SetAnimSizeDelayed(On.BossDoorChallengeUIBindingButton.orig_SetAnimSizeDelayed orig,
            BossDoorChallengeUIBindingButton self, string anim, float normalizedTime)
        {
            Delegates.Params_SetAnimSizeDelayed @params = new()
            {
                self = self, anim = anim, normalizedTime = normalizedTime
            };
            _beforeSetAnimSizeDelayed?.Invoke(@params);
            self = @params.self;
            anim = @params.anim;
            normalizedTime = @params.normalizedTime;
            return orig(self, anim, normalizedTime);
        }

        internal static void HookOnCancel()
        {
            if (!HookedList.Contains("OnCancel"))
            {
                HookedList.Add("OnCancel");
                On.BossDoorChallengeUIBindingButton.OnCancel += OnCancel;
            }
        }

        internal static event Delegates.OnCancel_BeforeArgs _beforeOnCancel;
        internal static event Delegates.OnCancel_NormalArgs _afterOnCancel;

        private static void OnCancel(On.BossDoorChallengeUIBindingButton.orig_OnCancel orig,
            BossDoorChallengeUIBindingButton self, BaseEventData eventData)
        {
            Delegates.Params_OnCancel @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnCancel?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnCancel != null) _afterOnCancel.Invoke(@params);
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                On.BossDoorChallengeUIBindingButton.OnPointerClick += OnPointerClick;
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_NormalArgs _afterOnPointerClick;

        private static void OnPointerClick(On.BossDoorChallengeUIBindingButton.orig_OnPointerClick orig,
            BossDoorChallengeUIBindingButton self, PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerClick?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null) _afterOnPointerClick.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void get_Selected_BeforeArgs(Params_get_Selected args);

        public delegate bool get_Selected_NormalArgs(Params_get_Selected args);

        public delegate void OnCancel_BeforeArgs(Params_OnCancel args);

        public delegate void OnCancel_NormalArgs(Params_OnCancel args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_NormalArgs(Params_OnPointerClick args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_NormalArgs(Params_OnSubmit args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SetAllSelected_BeforeArgs(Params_SetAllSelected args);

        public delegate void SetAllSelected_NormalArgs(Params_SetAllSelected args);

        public delegate void SetAnimSizeDelayed_BeforeArgs(Params_SetAnimSizeDelayed args);

        public delegate IEnumerator SetAnimSizeDelayed_NormalArgs(Params_SetAnimSizeDelayed args);

        public sealed class Params_get_Selected
        {
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_Awake
        {
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_Reset
        {
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_OnDisable
        {
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_SetAllSelected
        {
            public BossDoorChallengeUIBindingButton self;
            public bool value;
        }

        public sealed class Params_SetAnimSizeDelayed
        {
            public string anim;
            public float normalizedTime;
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_OnCancel
        {
            public BaseEventData eventData;
            public BossDoorChallengeUIBindingButton self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public BossDoorChallengeUIBindingButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Selected_BeforeArgs get_Selected
        {
            add
            {
                HookHandler._beforeget_Selected += value;
                HookHandler.Hookget_Selected();
            }
            remove => HookHandler._beforeget_Selected -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.SetAllSelected_BeforeArgs SetAllSelected
        {
            add
            {
                HookHandler._beforeSetAllSelected += value;
                HookHandler.HookSetAllSelected();
            }
            remove => HookHandler._beforeSetAllSelected -= value;
        }

        public static event Delegates.SetAnimSizeDelayed_BeforeArgs SetAnimSizeDelayed
        {
            add
            {
                HookHandler._beforeSetAnimSizeDelayed += value;
                HookHandler.HookSetAnimSizeDelayed();
            }
            remove => HookHandler._beforeSetAnimSizeDelayed -= value;
        }

        public static event Delegates.OnCancel_BeforeArgs OnCancel
        {
            add
            {
                HookHandler._beforeOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._beforeOnCancel -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Selected_NormalArgs get_Selected
        {
            add
            {
                HookHandler._afterget_Selected += value;
                HookHandler.Hookget_Selected();
            }
            remove => HookHandler._afterget_Selected -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnSubmit_NormalArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.SetAllSelected_NormalArgs SetAllSelected
        {
            add
            {
                HookHandler._afterSetAllSelected += value;
                HookHandler.HookSetAllSelected();
            }
            remove => HookHandler._afterSetAllSelected -= value;
        }

        public static event Delegates.OnCancel_NormalArgs OnCancel
        {
            add
            {
                HookHandler._afterOnCancel += value;
                HookHandler.HookOnCancel();
            }
            remove => HookHandler._afterOnCancel -= value;
        }

        public static event Delegates.OnPointerClick_NormalArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Selected_NormalArgs get_Selected
        {
            add => HookEndpointManager.Add<Delegates.get_Selected_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeUIBindingButton), "get_Selected"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Selected_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossDoorChallengeUIBindingButton), "get_Selected"), value);
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_Awake Awake
        {
            add => On.BossDoorChallengeUIBindingButton.Awake += value;
            remove => On.BossDoorChallengeUIBindingButton.Awake -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_Reset Reset
        {
            add => On.BossDoorChallengeUIBindingButton.Reset += value;
            remove => On.BossDoorChallengeUIBindingButton.Reset -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_OnDisable OnDisable
        {
            add => On.BossDoorChallengeUIBindingButton.OnDisable += value;
            remove => On.BossDoorChallengeUIBindingButton.OnDisable -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_OnSubmit OnSubmit
        {
            add => On.BossDoorChallengeUIBindingButton.OnSubmit += value;
            remove => On.BossDoorChallengeUIBindingButton.OnSubmit -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_SetAllSelected SetAllSelected
        {
            add => On.BossDoorChallengeUIBindingButton.SetAllSelected += value;
            remove => On.BossDoorChallengeUIBindingButton.SetAllSelected -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_SetAnimSizeDelayed SetAnimSizeDelayed
        {
            add => On.BossDoorChallengeUIBindingButton.SetAnimSizeDelayed += value;
            remove => On.BossDoorChallengeUIBindingButton.SetAnimSizeDelayed -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_OnCancel OnCancel
        {
            add => On.BossDoorChallengeUIBindingButton.OnCancel += value;
            remove => On.BossDoorChallengeUIBindingButton.OnCancel -= value;
        }

        public static event On.BossDoorChallengeUIBindingButton.hook_OnPointerClick OnPointerClick
        {
            add => On.BossDoorChallengeUIBindingButton.OnPointerClick += value;
            remove => On.BossDoorChallengeUIBindingButton.OnPointerClick -= value;
        }
    }
}