using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Object = UnityEngine.Object;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUtil class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUtil
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_UndoEnabled()
        {
            if (!HookedList.Contains("get_UndoEnabled"))
            {
                HookedList.Add("get_UndoEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUtil), "get_UndoEnabled", false), get_UndoEnabled);
            }
        }

        internal static event Delegates.get_UndoEnabled_BeforeArgs _beforeget_UndoEnabled;
        internal static event Delegates.get_UndoEnabled_AfterArgs _afterget_UndoEnabled;

        private static bool get_UndoEnabled(Func<bool> orig)
        {
            if (_beforeget_UndoEnabled != null)
                foreach (Delegates.get_UndoEnabled_BeforeArgs toInvoke in _beforeget_UndoEnabled.GetInvocationList())
                    try
                    {
                        _beforeget_UndoEnabled?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_UndoEnabled != null)
                foreach (Delegates.get_UndoEnabled_AfterArgs toInvoke in _afterget_UndoEnabled.GetInvocationList())
                    try
                    {
                        retVal = _afterget_UndoEnabled.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_UndoEnabled()
        {
            if (!HookedList.Contains("set_UndoEnabled"))
            {
                HookedList.Add("set_UndoEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUtil), "set_UndoEnabled", false), set_UndoEnabled);
            }
        }

        internal static event Delegates.set_UndoEnabled_BeforeArgs _beforeset_UndoEnabled;
        internal static event Delegates.set_UndoEnabled_AfterArgs _afterset_UndoEnabled;

        private static void set_UndoEnabled(Action<bool> orig, bool value)
        {
            Delegates.Params_set_UndoEnabled @params = new()
            {
                value = value
            };
            if (_beforeset_UndoEnabled != null)
                foreach (Delegates.set_UndoEnabled_BeforeArgs toInvoke in _beforeset_UndoEnabled.GetInvocationList())
                    try
                    {
                        _beforeset_UndoEnabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_UndoEnabled != null)
                foreach (Delegates.set_UndoEnabled_AfterArgs toInvoke in _afterset_UndoEnabled.GetInvocationList())
                    try
                    {
                        _afterset_UndoEnabled.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookBeginGroup()
        {
            if (!HookedList.Contains("BeginGroup"))
            {
                HookedList.Add("BeginGroup");
                On.tk2dUtil.BeginGroup += BeginGroup;
            }
        }

        internal static event Delegates.BeginGroup_BeforeArgs _beforeBeginGroup;
        internal static event Delegates.BeginGroup_AfterArgs _afterBeginGroup;

        private static void BeginGroup(On.tk2dUtil.orig_BeginGroup orig, string name)
        {
            Delegates.Params_BeginGroup @params = new()
            {
                name = name
            };
            if (_beforeBeginGroup != null)
                foreach (Delegates.BeginGroup_BeforeArgs toInvoke in _beforeBeginGroup.GetInvocationList())
                    try
                    {
                        _beforeBeginGroup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            name = @params.name;
            orig(name);
            if (_afterBeginGroup != null)
                foreach (Delegates.BeginGroup_AfterArgs toInvoke in _afterBeginGroup.GetInvocationList())
                    try
                    {
                        _afterBeginGroup.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEndGroup()
        {
            if (!HookedList.Contains("EndGroup"))
            {
                HookedList.Add("EndGroup");
                On.tk2dUtil.EndGroup += EndGroup;
            }
        }

        internal static event Delegates.EndGroup_BeforeArgs _beforeEndGroup;
        internal static event Delegates.EndGroup_AfterArgs _afterEndGroup;

        private static void EndGroup(On.tk2dUtil.orig_EndGroup orig)
        {
            if (_beforeEndGroup != null)
                foreach (Delegates.EndGroup_BeforeArgs toInvoke in _beforeEndGroup.GetInvocationList())
                    try
                    {
                        _beforeEndGroup?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterEndGroup != null)
                foreach (Delegates.EndGroup_AfterArgs toInvoke in _afterEndGroup.GetInvocationList())
                    try
                    {
                        _afterEndGroup.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDestroyImmediate()
        {
            if (!HookedList.Contains("DestroyImmediate"))
            {
                HookedList.Add("DestroyImmediate");
                On.tk2dUtil.DestroyImmediate += DestroyImmediate;
            }
        }

        internal static event Delegates.DestroyImmediate_BeforeArgs _beforeDestroyImmediate;
        internal static event Delegates.DestroyImmediate_AfterArgs _afterDestroyImmediate;

        private static void DestroyImmediate(On.tk2dUtil.orig_DestroyImmediate orig, Object obj)
        {
            Delegates.Params_DestroyImmediate @params = new()
            {
                obj = obj
            };
            if (_beforeDestroyImmediate != null)
                foreach (Delegates.DestroyImmediate_BeforeArgs toInvoke in _beforeDestroyImmediate.GetInvocationList())
                    try
                    {
                        _beforeDestroyImmediate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            obj = @params.obj;
            orig(obj);
            if (_afterDestroyImmediate != null)
                foreach (Delegates.DestroyImmediate_AfterArgs toInvoke in _afterDestroyImmediate.GetInvocationList())
                    try
                    {
                        _afterDestroyImmediate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCreateGameObject()
        {
            if (!HookedList.Contains("CreateGameObject"))
            {
                HookedList.Add("CreateGameObject");
                On.tk2dUtil.CreateGameObject += CreateGameObject;
            }
        }

        internal static event Delegates.CreateGameObject_BeforeArgs _beforeCreateGameObject;
        internal static event Delegates.CreateGameObject_AfterArgs _afterCreateGameObject;

        private static GameObject CreateGameObject(On.tk2dUtil.orig_CreateGameObject orig, string name)
        {
            Delegates.Params_CreateGameObject @params = new()
            {
                name = name
            };
            if (_beforeCreateGameObject != null)
                foreach (Delegates.CreateGameObject_BeforeArgs toInvoke in _beforeCreateGameObject.GetInvocationList())
                    try
                    {
                        _beforeCreateGameObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            name = @params.name;
            var retVal = orig(name);
            if (_afterCreateGameObject != null)
                foreach (Delegates.CreateGameObject_AfterArgs toInvoke in _afterCreateGameObject.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateGameObject.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCreateMesh()
        {
            if (!HookedList.Contains("CreateMesh"))
            {
                HookedList.Add("CreateMesh");
                On.tk2dUtil.CreateMesh += CreateMesh;
            }
        }

        internal static event Delegates.CreateMesh_BeforeArgs _beforeCreateMesh;
        internal static event Delegates.CreateMesh_AfterArgs _afterCreateMesh;

        private static Mesh CreateMesh(On.tk2dUtil.orig_CreateMesh orig)
        {
            if (_beforeCreateMesh != null)
                foreach (Delegates.CreateMesh_BeforeArgs toInvoke in _beforeCreateMesh.GetInvocationList())
                    try
                    {
                        _beforeCreateMesh?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterCreateMesh != null)
                foreach (Delegates.CreateMesh_AfterArgs toInvoke in _afterCreateMesh.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateMesh.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetActive()
        {
            if (!HookedList.Contains("SetActive"))
            {
                HookedList.Add("SetActive");
                On.tk2dUtil.SetActive += SetActive;
            }
        }

        internal static event Delegates.SetActive_BeforeArgs _beforeSetActive;
        internal static event Delegates.SetActive_AfterArgs _afterSetActive;

        private static void SetActive(On.tk2dUtil.orig_SetActive orig, GameObject go, bool active)
        {
            Delegates.Params_SetActive @params = new()
            {
                go = go, active = active
            };
            if (_beforeSetActive != null)
                foreach (Delegates.SetActive_BeforeArgs toInvoke in _beforeSetActive.GetInvocationList())
                    try
                    {
                        _beforeSetActive?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            go = @params.go;
            active = @params.active;
            orig(go, active);
            if (_afterSetActive != null)
                foreach (Delegates.SetActive_AfterArgs toInvoke in _afterSetActive.GetInvocationList())
                    try
                    {
                        _afterSetActive.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetTransformParent()
        {
            if (!HookedList.Contains("SetTransformParent"))
            {
                HookedList.Add("SetTransformParent");
                On.tk2dUtil.SetTransformParent += SetTransformParent;
            }
        }

        internal static event Delegates.SetTransformParent_BeforeArgs _beforeSetTransformParent;
        internal static event Delegates.SetTransformParent_AfterArgs _afterSetTransformParent;

        private static void SetTransformParent(On.tk2dUtil.orig_SetTransformParent orig, Transform t, Transform parent)
        {
            Delegates.Params_SetTransformParent @params = new()
            {
                t = t, parent = parent
            };
            if (_beforeSetTransformParent != null)
                foreach (Delegates.SetTransformParent_BeforeArgs toInvoke in
                         _beforeSetTransformParent.GetInvocationList())
                    try
                    {
                        _beforeSetTransformParent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            t = @params.t;
            parent = @params.parent;
            orig(t, parent);
            if (_afterSetTransformParent != null)
                foreach (Delegates.SetTransformParent_AfterArgs toInvoke in
                         _afterSetTransformParent.GetInvocationList())
                    try
                    {
                        _afterSetTransformParent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetDirty()
        {
            if (!HookedList.Contains("SetDirty"))
            {
                HookedList.Add("SetDirty");
                On.tk2dUtil.SetDirty += SetDirty;
            }
        }

        internal static event Delegates.SetDirty_BeforeArgs _beforeSetDirty;
        internal static event Delegates.SetDirty_AfterArgs _afterSetDirty;

        private static void SetDirty(On.tk2dUtil.orig_SetDirty orig, Object @object)
        {
            Delegates.Params_SetDirty @params = new()
            {
                @object = @object
            };
            if (_beforeSetDirty != null)
                foreach (Delegates.SetDirty_BeforeArgs toInvoke in _beforeSetDirty.GetInvocationList())
                    try
                    {
                        _beforeSetDirty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            @object = @params.@object;
            orig(@object);
            if (_afterSetDirty != null)
                foreach (Delegates.SetDirty_AfterArgs toInvoke in _afterSetDirty.GetInvocationList())
                    try
                    {
                        _afterSetDirty.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BeginGroup_AfterArgs(Params_BeginGroup args);

        public delegate void BeginGroup_BeforeArgs(Params_BeginGroup args);

        public delegate void BeginGroup_WithArgs(Action<string> orig, string name);

        public delegate GameObject CreateGameObject_AfterArgs(Params_CreateGameObject args, GameObject ret);

        public delegate void CreateGameObject_BeforeArgs(Params_CreateGameObject args);

        public delegate GameObject CreateGameObject_WithArgs(Func<string, GameObject> orig, string name);

        public delegate Mesh CreateMesh_AfterArgs(Mesh ret);

        public delegate void CreateMesh_BeforeArgs();

        public delegate Mesh CreateMesh_WithArgs(Func<Mesh> orig);

        public delegate void DestroyImmediate_AfterArgs(Params_DestroyImmediate args);

        public delegate void DestroyImmediate_BeforeArgs(Params_DestroyImmediate args);

        public delegate void DestroyImmediate_WithArgs(Action<Object> orig, Object obj);

        public delegate void EndGroup_AfterArgs();

        public delegate void EndGroup_BeforeArgs();

        public delegate void EndGroup_WithArgs(Action orig);

        public delegate bool get_UndoEnabled_AfterArgs(bool ret);

        public delegate void get_UndoEnabled_BeforeArgs();

        public delegate bool get_UndoEnabled_WithArgs(Func<bool> orig);

        public delegate void set_UndoEnabled_AfterArgs(Params_set_UndoEnabled args);

        public delegate void set_UndoEnabled_BeforeArgs(Params_set_UndoEnabled args);

        public delegate void set_UndoEnabled_WithArgs(Action<bool> orig, bool value);

        public delegate void SetActive_AfterArgs(Params_SetActive args);

        public delegate void SetActive_BeforeArgs(Params_SetActive args);

        public delegate void SetActive_WithArgs(Action<GameObject, bool> orig, GameObject go, bool active);

        public delegate void SetDirty_AfterArgs(Params_SetDirty args);

        public delegate void SetDirty_BeforeArgs(Params_SetDirty args);

        public delegate void SetDirty_WithArgs(Action<Object> orig, Object @object);

        public delegate void SetTransformParent_AfterArgs(Params_SetTransformParent args);

        public delegate void SetTransformParent_BeforeArgs(Params_SetTransformParent args);

        public delegate void SetTransformParent_WithArgs(Action<Transform, Transform> orig, Transform t,
            Transform parent);

        public sealed class Params_set_UndoEnabled
        {
            public bool value;
        }

        public sealed class Params_BeginGroup
        {
            public string name;
        }

        public sealed class Params_DestroyImmediate
        {
            public Object obj;
        }

        public sealed class Params_CreateGameObject
        {
            public string name;
        }

        public sealed class Params_SetActive
        {
            public bool active;
            public GameObject go;
        }

        public sealed class Params_SetTransformParent
        {
            public Transform parent;
            public Transform t;
        }

        public sealed class Params_SetDirty
        {
            public Object @object;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_UndoEnabled_BeforeArgs get_UndoEnabled
        {
            add
            {
                HookHandler._beforeget_UndoEnabled += value;
                HookHandler.Hookget_UndoEnabled();
            }
            remove => HookHandler._beforeget_UndoEnabled -= value;
        }

        public static event Delegates.set_UndoEnabled_BeforeArgs set_UndoEnabled
        {
            add
            {
                HookHandler._beforeset_UndoEnabled += value;
                HookHandler.Hookset_UndoEnabled();
            }
            remove => HookHandler._beforeset_UndoEnabled -= value;
        }

        public static event Delegates.BeginGroup_BeforeArgs BeginGroup
        {
            add
            {
                HookHandler._beforeBeginGroup += value;
                HookHandler.HookBeginGroup();
            }
            remove => HookHandler._beforeBeginGroup -= value;
        }

        public static event Delegates.EndGroup_BeforeArgs EndGroup
        {
            add
            {
                HookHandler._beforeEndGroup += value;
                HookHandler.HookEndGroup();
            }
            remove => HookHandler._beforeEndGroup -= value;
        }

        public static event Delegates.DestroyImmediate_BeforeArgs DestroyImmediate
        {
            add
            {
                HookHandler._beforeDestroyImmediate += value;
                HookHandler.HookDestroyImmediate();
            }
            remove => HookHandler._beforeDestroyImmediate -= value;
        }

        public static event Delegates.CreateGameObject_BeforeArgs CreateGameObject
        {
            add
            {
                HookHandler._beforeCreateGameObject += value;
                HookHandler.HookCreateGameObject();
            }
            remove => HookHandler._beforeCreateGameObject -= value;
        }

        public static event Delegates.CreateMesh_BeforeArgs CreateMesh
        {
            add
            {
                HookHandler._beforeCreateMesh += value;
                HookHandler.HookCreateMesh();
            }
            remove => HookHandler._beforeCreateMesh -= value;
        }

        public static event Delegates.SetActive_BeforeArgs SetActive
        {
            add
            {
                HookHandler._beforeSetActive += value;
                HookHandler.HookSetActive();
            }
            remove => HookHandler._beforeSetActive -= value;
        }

        public static event Delegates.SetTransformParent_BeforeArgs SetTransformParent
        {
            add
            {
                HookHandler._beforeSetTransformParent += value;
                HookHandler.HookSetTransformParent();
            }
            remove => HookHandler._beforeSetTransformParent -= value;
        }

        public static event Delegates.SetDirty_BeforeArgs SetDirty
        {
            add
            {
                HookHandler._beforeSetDirty += value;
                HookHandler.HookSetDirty();
            }
            remove => HookHandler._beforeSetDirty -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_UndoEnabled_AfterArgs get_UndoEnabled
        {
            add
            {
                HookHandler._afterget_UndoEnabled += value;
                HookHandler.Hookget_UndoEnabled();
            }
            remove => HookHandler._afterget_UndoEnabled -= value;
        }

        public static event Delegates.set_UndoEnabled_AfterArgs set_UndoEnabled
        {
            add
            {
                HookHandler._afterset_UndoEnabled += value;
                HookHandler.Hookset_UndoEnabled();
            }
            remove => HookHandler._afterset_UndoEnabled -= value;
        }

        public static event Delegates.BeginGroup_AfterArgs BeginGroup
        {
            add
            {
                HookHandler._afterBeginGroup += value;
                HookHandler.HookBeginGroup();
            }
            remove => HookHandler._afterBeginGroup -= value;
        }

        public static event Delegates.EndGroup_AfterArgs EndGroup
        {
            add
            {
                HookHandler._afterEndGroup += value;
                HookHandler.HookEndGroup();
            }
            remove => HookHandler._afterEndGroup -= value;
        }

        public static event Delegates.DestroyImmediate_AfterArgs DestroyImmediate
        {
            add
            {
                HookHandler._afterDestroyImmediate += value;
                HookHandler.HookDestroyImmediate();
            }
            remove => HookHandler._afterDestroyImmediate -= value;
        }

        public static event Delegates.CreateGameObject_AfterArgs CreateGameObject
        {
            add
            {
                HookHandler._afterCreateGameObject += value;
                HookHandler.HookCreateGameObject();
            }
            remove => HookHandler._afterCreateGameObject -= value;
        }

        public static event Delegates.CreateMesh_AfterArgs CreateMesh
        {
            add
            {
                HookHandler._afterCreateMesh += value;
                HookHandler.HookCreateMesh();
            }
            remove => HookHandler._afterCreateMesh -= value;
        }

        public static event Delegates.SetActive_AfterArgs SetActive
        {
            add
            {
                HookHandler._afterSetActive += value;
                HookHandler.HookSetActive();
            }
            remove => HookHandler._afterSetActive -= value;
        }

        public static event Delegates.SetTransformParent_AfterArgs SetTransformParent
        {
            add
            {
                HookHandler._afterSetTransformParent += value;
                HookHandler.HookSetTransformParent();
            }
            remove => HookHandler._afterSetTransformParent -= value;
        }

        public static event Delegates.SetDirty_AfterArgs SetDirty
        {
            add
            {
                HookHandler._afterSetDirty += value;
                HookHandler.HookSetDirty();
            }
            remove => HookHandler._afterSetDirty -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_UndoEnabled_WithArgs get_UndoEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_UndoEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUtil), "get_UndoEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_UndoEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUtil), "get_UndoEnabled", false), value);
        }

        public static event Delegates.set_UndoEnabled_WithArgs set_UndoEnabled
        {
            add => HookEndpointManager.Add<Delegates.set_UndoEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUtil), "set_UndoEnabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_UndoEnabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUtil), "set_UndoEnabled", false), value);
        }

        public static event On.tk2dUtil.hook_BeginGroup BeginGroup
        {
            add => On.tk2dUtil.BeginGroup += value;
            remove => On.tk2dUtil.BeginGroup -= value;
        }

        public static event On.tk2dUtil.hook_EndGroup EndGroup
        {
            add => On.tk2dUtil.EndGroup += value;
            remove => On.tk2dUtil.EndGroup -= value;
        }

        public static event On.tk2dUtil.hook_DestroyImmediate DestroyImmediate
        {
            add => On.tk2dUtil.DestroyImmediate += value;
            remove => On.tk2dUtil.DestroyImmediate -= value;
        }

        public static event On.tk2dUtil.hook_CreateGameObject CreateGameObject
        {
            add => On.tk2dUtil.CreateGameObject += value;
            remove => On.tk2dUtil.CreateGameObject -= value;
        }

        public static event On.tk2dUtil.hook_CreateMesh CreateMesh
        {
            add => On.tk2dUtil.CreateMesh += value;
            remove => On.tk2dUtil.CreateMesh -= value;
        }

        public static event On.tk2dUtil.hook_SetActive SetActive
        {
            add => On.tk2dUtil.SetActive += value;
            remove => On.tk2dUtil.SetActive -= value;
        }

        public static event On.tk2dUtil.hook_SetTransformParent SetTransformParent
        {
            add => On.tk2dUtil.SetTransformParent += value;
            remove => On.tk2dUtil.SetTransformParent -= value;
        }

        public static event On.tk2dUtil.hook_SetDirty SetDirty
        {
            add => On.tk2dUtil.SetDirty += value;
            remove => On.tk2dUtil.SetDirty -= value;
        }
    }
}