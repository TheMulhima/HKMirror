using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for TwoAxisInputControl class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnTwoAxisInputControl
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_X()
        {
            if (!HookedList.Contains("get_X"))
            {
                HookedList.Add("get_X");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_X", true), get_X);
            }
        }

        internal static event Delegates.get_X_BeforeArgs _beforeget_X;
        internal static event Delegates.get_X_AfterArgs _afterget_X;

        private static float get_X(Func<InControl.TwoAxisInputControl, float> orig, InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_X @params = new()
            {
                self = self
            };
            if (_beforeget_X != null)
            {
                foreach (Delegates.get_X_BeforeArgs toInvoke in _beforeget_X.GetInvocationList())
                {
                    try
                    {
                        _beforeget_X?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_X != null)
            {
                foreach (Delegates.get_X_AfterArgs toInvoke in _afterget_X.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_X.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_X()
        {
            if (!HookedList.Contains("set_X"))
            {
                HookedList.Add("set_X");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_X", true), set_X);
            }
        }

        internal static event Delegates.set_X_BeforeArgs _beforeset_X;
        internal static event Delegates.set_X_AfterArgs _afterset_X;

        private static void set_X(Action<InControl.TwoAxisInputControl, float> orig, InControl.TwoAxisInputControl self,
            float value)
        {
            Delegates.Params_set_X @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_X != null)
            {
                foreach (Delegates.set_X_BeforeArgs toInvoke in _beforeset_X.GetInvocationList())
                {
                    try
                    {
                        _beforeset_X?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_X != null)
            {
                foreach (Delegates.set_X_AfterArgs toInvoke in _afterset_X.GetInvocationList())
                {
                    try
                    {
                        _afterset_X.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Y()
        {
            if (!HookedList.Contains("get_Y"))
            {
                HookedList.Add("get_Y");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Y", true), get_Y);
            }
        }

        internal static event Delegates.get_Y_BeforeArgs _beforeget_Y;
        internal static event Delegates.get_Y_AfterArgs _afterget_Y;

        private static float get_Y(Func<InControl.TwoAxisInputControl, float> orig, InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Y @params = new()
            {
                self = self
            };
            if (_beforeget_Y != null)
            {
                foreach (Delegates.get_Y_BeforeArgs toInvoke in _beforeget_Y.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Y?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Y != null)
            {
                foreach (Delegates.get_Y_AfterArgs toInvoke in _afterget_Y.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Y.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Y()
        {
            if (!HookedList.Contains("set_Y"))
            {
                HookedList.Add("set_Y");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Y", true), set_Y);
            }
        }

        internal static event Delegates.set_Y_BeforeArgs _beforeset_Y;
        internal static event Delegates.set_Y_AfterArgs _afterset_Y;

        private static void set_Y(Action<InControl.TwoAxisInputControl, float> orig, InControl.TwoAxisInputControl self,
            float value)
        {
            Delegates.Params_set_Y @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Y != null)
            {
                foreach (Delegates.set_Y_BeforeArgs toInvoke in _beforeset_Y.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Y?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Y != null)
            {
                foreach (Delegates.set_Y_AfterArgs toInvoke in _afterset_Y.GetInvocationList())
                {
                    try
                    {
                        _afterset_Y.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Left()
        {
            if (!HookedList.Contains("get_Left"))
            {
                HookedList.Add("get_Left");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Left", true),
                    get_Left);
            }
        }

        internal static event Delegates.get_Left_BeforeArgs _beforeget_Left;
        internal static event Delegates.get_Left_AfterArgs _afterget_Left;

        private static InControl.OneAxisInputControl get_Left(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig, InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Left @params = new()
            {
                self = self
            };
            if (_beforeget_Left != null)
            {
                foreach (Delegates.get_Left_BeforeArgs toInvoke in _beforeget_Left.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Left?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Left != null)
            {
                foreach (Delegates.get_Left_AfterArgs toInvoke in _afterget_Left.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Left.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Left()
        {
            if (!HookedList.Contains("set_Left"))
            {
                HookedList.Add("set_Left");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Left", true),
                    set_Left);
            }
        }

        internal static event Delegates.set_Left_BeforeArgs _beforeset_Left;
        internal static event Delegates.set_Left_AfterArgs _afterset_Left;

        private static void set_Left(Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value)
        {
            Delegates.Params_set_Left @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Left != null)
            {
                foreach (Delegates.set_Left_BeforeArgs toInvoke in _beforeset_Left.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Left?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Left != null)
            {
                foreach (Delegates.set_Left_AfterArgs toInvoke in _afterset_Left.GetInvocationList())
                {
                    try
                    {
                        _afterset_Left.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Right()
        {
            if (!HookedList.Contains("get_Right"))
            {
                HookedList.Add("get_Right");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Right", true),
                    get_Right);
            }
        }

        internal static event Delegates.get_Right_BeforeArgs _beforeget_Right;
        internal static event Delegates.get_Right_AfterArgs _afterget_Right;

        private static InControl.OneAxisInputControl get_Right(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig, InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Right @params = new()
            {
                self = self
            };
            if (_beforeget_Right != null)
            {
                foreach (Delegates.get_Right_BeforeArgs toInvoke in _beforeget_Right.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Right?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Right != null)
            {
                foreach (Delegates.get_Right_AfterArgs toInvoke in _afterget_Right.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Right.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Right()
        {
            if (!HookedList.Contains("set_Right"))
            {
                HookedList.Add("set_Right");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Right", true),
                    set_Right);
            }
        }

        internal static event Delegates.set_Right_BeforeArgs _beforeset_Right;
        internal static event Delegates.set_Right_AfterArgs _afterset_Right;

        private static void set_Right(Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value)
        {
            Delegates.Params_set_Right @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Right != null)
            {
                foreach (Delegates.set_Right_BeforeArgs toInvoke in _beforeset_Right.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Right?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Right != null)
            {
                foreach (Delegates.set_Right_AfterArgs toInvoke in _afterset_Right.GetInvocationList())
                {
                    try
                    {
                        _afterset_Right.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Up()
        {
            if (!HookedList.Contains("get_Up"))
            {
                HookedList.Add("get_Up");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Up", true), get_Up);
            }
        }

        internal static event Delegates.get_Up_BeforeArgs _beforeget_Up;
        internal static event Delegates.get_Up_AfterArgs _afterget_Up;

        private static InControl.OneAxisInputControl get_Up(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig, InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Up @params = new()
            {
                self = self
            };
            if (_beforeget_Up != null)
            {
                foreach (Delegates.get_Up_BeforeArgs toInvoke in _beforeget_Up.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Up?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Up != null)
            {
                foreach (Delegates.get_Up_AfterArgs toInvoke in _afterget_Up.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Up.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Up()
        {
            if (!HookedList.Contains("set_Up"))
            {
                HookedList.Add("set_Up");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Up", true), set_Up);
            }
        }

        internal static event Delegates.set_Up_BeforeArgs _beforeset_Up;
        internal static event Delegates.set_Up_AfterArgs _afterset_Up;

        private static void set_Up(Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value)
        {
            Delegates.Params_set_Up @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Up != null)
            {
                foreach (Delegates.set_Up_BeforeArgs toInvoke in _beforeset_Up.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Up?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Up != null)
            {
                foreach (Delegates.set_Up_AfterArgs toInvoke in _afterset_Up.GetInvocationList())
                {
                    try
                    {
                        _afterset_Up.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Down()
        {
            if (!HookedList.Contains("get_Down"))
            {
                HookedList.Add("get_Down");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Down", true),
                    get_Down);
            }
        }

        internal static event Delegates.get_Down_BeforeArgs _beforeget_Down;
        internal static event Delegates.get_Down_AfterArgs _afterget_Down;

        private static InControl.OneAxisInputControl get_Down(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig, InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Down @params = new()
            {
                self = self
            };
            if (_beforeget_Down != null)
            {
                foreach (Delegates.get_Down_BeforeArgs toInvoke in _beforeget_Down.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Down?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Down != null)
            {
                foreach (Delegates.get_Down_AfterArgs toInvoke in _afterget_Down.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Down.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Down()
        {
            if (!HookedList.Contains("set_Down"))
            {
                HookedList.Add("set_Down");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Down", true),
                    set_Down);
            }
        }

        internal static event Delegates.set_Down_BeforeArgs _beforeset_Down;
        internal static event Delegates.set_Down_AfterArgs _afterset_Down;

        private static void set_Down(Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value)
        {
            Delegates.Params_set_Down @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Down != null)
            {
                foreach (Delegates.set_Down_BeforeArgs toInvoke in _beforeset_Down.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Down?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Down != null)
            {
                foreach (Delegates.set_Down_AfterArgs toInvoke in _afterset_Down.GetInvocationList())
                {
                    try
                    {
                        _afterset_Down.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_UpdateTick()
        {
            if (!HookedList.Contains("get_UpdateTick"))
            {
                HookedList.Add("get_UpdateTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_UpdateTick", true),
                    get_UpdateTick);
            }
        }

        internal static event Delegates.get_UpdateTick_BeforeArgs _beforeget_UpdateTick;
        internal static event Delegates.get_UpdateTick_AfterArgs _afterget_UpdateTick;

        private static ulong get_UpdateTick(Func<InControl.TwoAxisInputControl, ulong> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_UpdateTick @params = new()
            {
                self = self
            };
            if (_beforeget_UpdateTick != null)
            {
                foreach (Delegates.get_UpdateTick_BeforeArgs toInvoke in _beforeget_UpdateTick.GetInvocationList())
                {
                    try
                    {
                        _beforeget_UpdateTick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpdateTick != null)
            {
                foreach (Delegates.get_UpdateTick_AfterArgs toInvoke in _afterget_UpdateTick.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_UpdateTick.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_UpdateTick()
        {
            if (!HookedList.Contains("set_UpdateTick"))
            {
                HookedList.Add("set_UpdateTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_UpdateTick", true),
                    set_UpdateTick);
            }
        }

        internal static event Delegates.set_UpdateTick_BeforeArgs _beforeset_UpdateTick;
        internal static event Delegates.set_UpdateTick_AfterArgs _afterset_UpdateTick;

        private static void set_UpdateTick(Action<InControl.TwoAxisInputControl, ulong> orig,
            InControl.TwoAxisInputControl self, ulong value)
        {
            Delegates.Params_set_UpdateTick @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_UpdateTick != null)
            {
                foreach (Delegates.set_UpdateTick_BeforeArgs toInvoke in _beforeset_UpdateTick.GetInvocationList())
                {
                    try
                    {
                        _beforeset_UpdateTick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpdateTick != null)
            {
                foreach (Delegates.set_UpdateTick_AfterArgs toInvoke in _afterset_UpdateTick.GetInvocationList())
                {
                    try
                    {
                        _afterset_UpdateTick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookClearInputState()
        {
            if (!HookedList.Contains("ClearInputState"))
            {
                HookedList.Add("ClearInputState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "ClearInputState", true),
                    ClearInputState);
            }
        }

        internal static event Delegates.ClearInputState_BeforeArgs _beforeClearInputState;
        internal static event Delegates.ClearInputState_AfterArgs _afterClearInputState;

        private static void ClearInputState(Action<InControl.TwoAxisInputControl> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_ClearInputState @params = new()
            {
                self = self
            };
            if (_beforeClearInputState != null)
            {
                foreach (Delegates.ClearInputState_BeforeArgs toInvoke in _beforeClearInputState.GetInvocationList())
                {
                    try
                    {
                        _beforeClearInputState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterClearInputState != null)
            {
                foreach (Delegates.ClearInputState_AfterArgs toInvoke in _afterClearInputState.GetInvocationList())
                {
                    try
                    {
                        _afterClearInputState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookFilter()
        {
            if (!HookedList.Contains("Filter"))
            {
                HookedList.Add("Filter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "Filter", true), Filter);
            }
        }

        internal static event Delegates.Filter_BeforeArgs _beforeFilter;
        internal static event Delegates.Filter_AfterArgs _afterFilter;

        private static void Filter(Action<InControl.TwoAxisInputControl, InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, InControl.TwoAxisInputControl twoAxisInputControl, float deltaTime)
        {
            Delegates.Params_Filter @params = new()
            {
                self = self, twoAxisInputControl = twoAxisInputControl, deltaTime = deltaTime
            };
            if (_beforeFilter != null)
            {
                foreach (Delegates.Filter_BeforeArgs toInvoke in _beforeFilter.GetInvocationList())
                {
                    try
                    {
                        _beforeFilter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            twoAxisInputControl = @params.twoAxisInputControl;
            deltaTime = @params.deltaTime;
            orig(self, twoAxisInputControl, deltaTime);
            if (_afterFilter != null)
            {
                foreach (Delegates.Filter_AfterArgs toInvoke in _afterFilter.GetInvocationList())
                {
                    try
                    {
                        _afterFilter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateWithAxes()
        {
            if (!HookedList.Contains("UpdateWithAxes"))
            {
                HookedList.Add("UpdateWithAxes");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "UpdateWithAxes", true),
                    UpdateWithAxes);
            }
        }

        internal static event Delegates.UpdateWithAxes_BeforeArgs _beforeUpdateWithAxes;
        internal static event Delegates.UpdateWithAxes_AfterArgs _afterUpdateWithAxes;

        private static void UpdateWithAxes(Action<InControl.TwoAxisInputControl, float, float, ulong, float> orig,
            InControl.TwoAxisInputControl self, float x, float y, ulong updateTick, float deltaTime)
        {
            Delegates.Params_UpdateWithAxes @params = new()
            {
                self = self, x = x, y = y, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeUpdateWithAxes != null)
            {
                foreach (Delegates.UpdateWithAxes_BeforeArgs toInvoke in _beforeUpdateWithAxes.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateWithAxes?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            y = @params.y;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, x, y, updateTick, deltaTime);
            if (_afterUpdateWithAxes != null)
            {
                foreach (Delegates.UpdateWithAxes_AfterArgs toInvoke in _afterUpdateWithAxes.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateWithAxes.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Sensitivity()
        {
            if (!HookedList.Contains("get_Sensitivity"))
            {
                HookedList.Add("get_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Sensitivity", true),
                    get_Sensitivity);
            }
        }

        internal static event Delegates.get_Sensitivity_BeforeArgs _beforeget_Sensitivity;
        internal static event Delegates.get_Sensitivity_AfterArgs _afterget_Sensitivity;

        private static float get_Sensitivity(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Sensitivity @params = new()
            {
                self = self
            };
            if (_beforeget_Sensitivity != null)
            {
                foreach (Delegates.get_Sensitivity_BeforeArgs toInvoke in _beforeget_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Sensitivity != null)
            {
                foreach (Delegates.get_Sensitivity_AfterArgs toInvoke in _afterget_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Sensitivity.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Sensitivity()
        {
            if (!HookedList.Contains("set_Sensitivity"))
            {
                HookedList.Add("set_Sensitivity");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Sensitivity", true),
                    set_Sensitivity);
            }
        }

        internal static event Delegates.set_Sensitivity_BeforeArgs _beforeset_Sensitivity;
        internal static event Delegates.set_Sensitivity_AfterArgs _afterset_Sensitivity;

        private static void set_Sensitivity(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value)
        {
            Delegates.Params_set_Sensitivity @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Sensitivity != null)
            {
                foreach (Delegates.set_Sensitivity_BeforeArgs toInvoke in _beforeset_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Sensitivity?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Sensitivity != null)
            {
                foreach (Delegates.set_Sensitivity_AfterArgs toInvoke in _afterset_Sensitivity.GetInvocationList())
                {
                    try
                    {
                        _afterset_Sensitivity.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_StateThreshold()
        {
            if (!HookedList.Contains("get_StateThreshold"))
            {
                HookedList.Add("get_StateThreshold");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_StateThreshold", true),
                    get_StateThreshold);
            }
        }

        internal static event Delegates.get_StateThreshold_BeforeArgs _beforeget_StateThreshold;
        internal static event Delegates.get_StateThreshold_AfterArgs _afterget_StateThreshold;

        private static float get_StateThreshold(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_StateThreshold @params = new()
            {
                self = self
            };
            if (_beforeget_StateThreshold != null)
            {
                foreach (Delegates.get_StateThreshold_BeforeArgs toInvoke in
                         _beforeget_StateThreshold.GetInvocationList())
                {
                    try
                    {
                        _beforeget_StateThreshold?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_StateThreshold != null)
            {
                foreach (Delegates.get_StateThreshold_AfterArgs toInvoke in
                         _afterget_StateThreshold.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_StateThreshold.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_StateThreshold()
        {
            if (!HookedList.Contains("set_StateThreshold"))
            {
                HookedList.Add("set_StateThreshold");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_StateThreshold", true),
                    set_StateThreshold);
            }
        }

        internal static event Delegates.set_StateThreshold_BeforeArgs _beforeset_StateThreshold;
        internal static event Delegates.set_StateThreshold_AfterArgs _afterset_StateThreshold;

        private static void set_StateThreshold(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value)
        {
            Delegates.Params_set_StateThreshold @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_StateThreshold != null)
            {
                foreach (Delegates.set_StateThreshold_BeforeArgs toInvoke in
                         _beforeset_StateThreshold.GetInvocationList())
                {
                    try
                    {
                        _beforeset_StateThreshold?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_StateThreshold != null)
            {
                foreach (Delegates.set_StateThreshold_AfterArgs toInvoke in
                         _afterset_StateThreshold.GetInvocationList())
                {
                    try
                    {
                        _afterset_StateThreshold.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_LowerDeadZone()
        {
            if (!HookedList.Contains("get_LowerDeadZone"))
            {
                HookedList.Add("get_LowerDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LowerDeadZone", true),
                    get_LowerDeadZone);
            }
        }

        internal static event Delegates.get_LowerDeadZone_BeforeArgs _beforeget_LowerDeadZone;
        internal static event Delegates.get_LowerDeadZone_AfterArgs _afterget_LowerDeadZone;

        private static float get_LowerDeadZone(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_LowerDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_LowerDeadZone != null)
            {
                foreach (Delegates.get_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeget_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeget_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LowerDeadZone != null)
            {
                foreach (Delegates.get_LowerDeadZone_AfterArgs toInvoke in _afterget_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_LowerDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_LowerDeadZone()
        {
            if (!HookedList.Contains("set_LowerDeadZone"))
            {
                HookedList.Add("set_LowerDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_LowerDeadZone", true),
                    set_LowerDeadZone);
            }
        }

        internal static event Delegates.set_LowerDeadZone_BeforeArgs _beforeset_LowerDeadZone;
        internal static event Delegates.set_LowerDeadZone_AfterArgs _afterset_LowerDeadZone;

        private static void set_LowerDeadZone(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value)
        {
            Delegates.Params_set_LowerDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_LowerDeadZone != null)
            {
                foreach (Delegates.set_LowerDeadZone_BeforeArgs toInvoke in
                         _beforeset_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeset_LowerDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_LowerDeadZone != null)
            {
                foreach (Delegates.set_LowerDeadZone_AfterArgs toInvoke in _afterset_LowerDeadZone.GetInvocationList())
                {
                    try
                    {
                        _afterset_LowerDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_UpperDeadZone()
        {
            if (!HookedList.Contains("get_UpperDeadZone"))
            {
                HookedList.Add("get_UpperDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_UpperDeadZone", true),
                    get_UpperDeadZone);
            }
        }

        internal static event Delegates.get_UpperDeadZone_BeforeArgs _beforeget_UpperDeadZone;
        internal static event Delegates.get_UpperDeadZone_AfterArgs _afterget_UpperDeadZone;

        private static float get_UpperDeadZone(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_UpperDeadZone @params = new()
            {
                self = self
            };
            if (_beforeget_UpperDeadZone != null)
            {
                foreach (Delegates.get_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeget_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeget_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_UpperDeadZone != null)
            {
                foreach (Delegates.get_UpperDeadZone_AfterArgs toInvoke in _afterget_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_UpperDeadZone.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_UpperDeadZone()
        {
            if (!HookedList.Contains("set_UpperDeadZone"))
            {
                HookedList.Add("set_UpperDeadZone");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_UpperDeadZone", true),
                    set_UpperDeadZone);
            }
        }

        internal static event Delegates.set_UpperDeadZone_BeforeArgs _beforeset_UpperDeadZone;
        internal static event Delegates.set_UpperDeadZone_AfterArgs _afterset_UpperDeadZone;

        private static void set_UpperDeadZone(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value)
        {
            Delegates.Params_set_UpperDeadZone @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_UpperDeadZone != null)
            {
                foreach (Delegates.set_UpperDeadZone_BeforeArgs toInvoke in
                         _beforeset_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        _beforeset_UpperDeadZone?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_UpperDeadZone != null)
            {
                foreach (Delegates.set_UpperDeadZone_AfterArgs toInvoke in _afterset_UpperDeadZone.GetInvocationList())
                {
                    try
                    {
                        _afterset_UpperDeadZone.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_State()
        {
            if (!HookedList.Contains("get_State"))
            {
                HookedList.Add("get_State");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_State", true),
                    get_State);
            }
        }

        internal static event Delegates.get_State_BeforeArgs _beforeget_State;
        internal static event Delegates.get_State_AfterArgs _afterget_State;

        private static bool get_State(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_State @params = new()
            {
                self = self
            };
            if (_beforeget_State != null)
            {
                foreach (Delegates.get_State_BeforeArgs toInvoke in _beforeget_State.GetInvocationList())
                {
                    try
                    {
                        _beforeget_State?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_State != null)
            {
                foreach (Delegates.get_State_AfterArgs toInvoke in _afterget_State.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_State.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_LastState()
        {
            if (!HookedList.Contains("get_LastState"))
            {
                HookedList.Add("get_LastState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LastState", true),
                    get_LastState);
            }
        }

        internal static event Delegates.get_LastState_BeforeArgs _beforeget_LastState;
        internal static event Delegates.get_LastState_AfterArgs _afterget_LastState;

        private static bool get_LastState(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_LastState @params = new()
            {
                self = self
            };
            if (_beforeget_LastState != null)
            {
                foreach (Delegates.get_LastState_BeforeArgs toInvoke in _beforeget_LastState.GetInvocationList())
                {
                    try
                    {
                        _beforeget_LastState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastState != null)
            {
                foreach (Delegates.get_LastState_AfterArgs toInvoke in _afterget_LastState.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_LastState.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_Value()
        {
            if (!HookedList.Contains("get_Value"))
            {
                HookedList.Add("get_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Value", true),
                    get_Value);
            }
        }

        internal static event Delegates.get_Value_BeforeArgs _beforeget_Value;
        internal static event Delegates.get_Value_AfterArgs _afterget_Value;

        private static UnityEngine.Vector2 get_Value(Func<InControl.TwoAxisInputControl, UnityEngine.Vector2> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Value @params = new()
            {
                self = self
            };
            if (_beforeget_Value != null)
            {
                foreach (Delegates.get_Value_BeforeArgs toInvoke in _beforeget_Value.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Value?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Value != null)
            {
                foreach (Delegates.get_Value_AfterArgs toInvoke in _afterget_Value.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Value.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_LastValue()
        {
            if (!HookedList.Contains("get_LastValue"))
            {
                HookedList.Add("get_LastValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LastValue", true),
                    get_LastValue);
            }
        }

        internal static event Delegates.get_LastValue_BeforeArgs _beforeget_LastValue;
        internal static event Delegates.get_LastValue_AfterArgs _afterget_LastValue;

        private static UnityEngine.Vector2 get_LastValue(Func<InControl.TwoAxisInputControl, UnityEngine.Vector2> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_LastValue @params = new()
            {
                self = self
            };
            if (_beforeget_LastValue != null)
            {
                foreach (Delegates.get_LastValue_BeforeArgs toInvoke in _beforeget_LastValue.GetInvocationList())
                {
                    try
                    {
                        _beforeget_LastValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_LastValue != null)
            {
                foreach (Delegates.get_LastValue_AfterArgs toInvoke in _afterget_LastValue.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_LastValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_Vector()
        {
            if (!HookedList.Contains("get_Vector"))
            {
                HookedList.Add("get_Vector");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Vector", true),
                    get_Vector);
            }
        }

        internal static event Delegates.get_Vector_BeforeArgs _beforeget_Vector;
        internal static event Delegates.get_Vector_AfterArgs _afterget_Vector;

        private static UnityEngine.Vector2 get_Vector(Func<InControl.TwoAxisInputControl, UnityEngine.Vector2> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Vector @params = new()
            {
                self = self
            };
            if (_beforeget_Vector != null)
            {
                foreach (Delegates.get_Vector_BeforeArgs toInvoke in _beforeget_Vector.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Vector?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Vector != null)
            {
                foreach (Delegates.get_Vector_AfterArgs toInvoke in _afterget_Vector.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Vector.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_HasChanged()
        {
            if (!HookedList.Contains("get_HasChanged"))
            {
                HookedList.Add("get_HasChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_HasChanged", true),
                    get_HasChanged);
            }
        }

        internal static event Delegates.get_HasChanged_BeforeArgs _beforeget_HasChanged;
        internal static event Delegates.get_HasChanged_AfterArgs _afterget_HasChanged;

        private static bool get_HasChanged(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_HasChanged @params = new()
            {
                self = self
            };
            if (_beforeget_HasChanged != null)
            {
                foreach (Delegates.get_HasChanged_BeforeArgs toInvoke in _beforeget_HasChanged.GetInvocationList())
                {
                    try
                    {
                        _beforeget_HasChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_HasChanged != null)
            {
                foreach (Delegates.get_HasChanged_AfterArgs toInvoke in _afterget_HasChanged.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_HasChanged.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_HasChanged()
        {
            if (!HookedList.Contains("set_HasChanged"))
            {
                HookedList.Add("set_HasChanged");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_HasChanged", true),
                    set_HasChanged);
            }
        }

        internal static event Delegates.set_HasChanged_BeforeArgs _beforeset_HasChanged;
        internal static event Delegates.set_HasChanged_AfterArgs _afterset_HasChanged;

        private static void set_HasChanged(Action<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self, bool value)
        {
            Delegates.Params_set_HasChanged @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_HasChanged != null)
            {
                foreach (Delegates.set_HasChanged_BeforeArgs toInvoke in _beforeset_HasChanged.GetInvocationList())
                {
                    try
                    {
                        _beforeset_HasChanged?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_HasChanged != null)
            {
                foreach (Delegates.set_HasChanged_AfterArgs toInvoke in _afterset_HasChanged.GetInvocationList())
                {
                    try
                    {
                        _afterset_HasChanged.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_IsPressed()
        {
            if (!HookedList.Contains("get_IsPressed"))
            {
                HookedList.Add("get_IsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_IsPressed", true),
                    get_IsPressed);
            }
        }

        internal static event Delegates.get_IsPressed_BeforeArgs _beforeget_IsPressed;
        internal static event Delegates.get_IsPressed_AfterArgs _afterget_IsPressed;

        private static bool get_IsPressed(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_IsPressed @params = new()
            {
                self = self
            };
            if (_beforeget_IsPressed != null)
            {
                foreach (Delegates.get_IsPressed_BeforeArgs toInvoke in _beforeget_IsPressed.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsPressed != null)
            {
                foreach (Delegates.get_IsPressed_AfterArgs toInvoke in _afterget_IsPressed.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsPressed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_WasPressed()
        {
            if (!HookedList.Contains("get_WasPressed"))
            {
                HookedList.Add("get_WasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_WasPressed", true),
                    get_WasPressed);
            }
        }

        internal static event Delegates.get_WasPressed_BeforeArgs _beforeget_WasPressed;
        internal static event Delegates.get_WasPressed_AfterArgs _afterget_WasPressed;

        private static bool get_WasPressed(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_WasPressed @params = new()
            {
                self = self
            };
            if (_beforeget_WasPressed != null)
            {
                foreach (Delegates.get_WasPressed_BeforeArgs toInvoke in _beforeget_WasPressed.GetInvocationList())
                {
                    try
                    {
                        _beforeget_WasPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WasPressed != null)
            {
                foreach (Delegates.get_WasPressed_AfterArgs toInvoke in _afterget_WasPressed.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_WasPressed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_WasReleased()
        {
            if (!HookedList.Contains("get_WasReleased"))
            {
                HookedList.Add("get_WasReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_WasReleased", true),
                    get_WasReleased);
            }
        }

        internal static event Delegates.get_WasReleased_BeforeArgs _beforeget_WasReleased;
        internal static event Delegates.get_WasReleased_AfterArgs _afterget_WasReleased;

        private static bool get_WasReleased(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_WasReleased @params = new()
            {
                self = self
            };
            if (_beforeget_WasReleased != null)
            {
                foreach (Delegates.get_WasReleased_BeforeArgs toInvoke in _beforeget_WasReleased.GetInvocationList())
                {
                    try
                    {
                        _beforeget_WasReleased?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_WasReleased != null)
            {
                foreach (Delegates.get_WasReleased_AfterArgs toInvoke in _afterget_WasReleased.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_WasReleased.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_Angle()
        {
            if (!HookedList.Contains("get_Angle"))
            {
                HookedList.Add("get_Angle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Angle", true),
                    get_Angle);
            }
        }

        internal static event Delegates.get_Angle_BeforeArgs _beforeget_Angle;
        internal static event Delegates.get_Angle_AfterArgs _afterget_Angle;

        private static float get_Angle(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self)
        {
            Delegates.Params_get_Angle @params = new()
            {
                self = self
            };
            if (_beforeget_Angle != null)
            {
                foreach (Delegates.get_Angle_BeforeArgs toInvoke in _beforeget_Angle.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Angle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Angle != null)
            {
                foreach (Delegates.get_Angle_AfterArgs toInvoke in _afterget_Angle.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Angle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookop_Implicit_TwoAxisInputControl()
        {
            if (!HookedList.Contains("op_Implicit_TwoAxisInputControl"))
            {
                HookedList.Add("op_Implicit_TwoAxisInputControl");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl),
                        "op_Implicit_TwoAxisInputControl", false), op_Implicit_TwoAxisInputControl);
            }
        }

        internal static event Delegates.op_Implicit_TwoAxisInputControl_BeforeArgs
            _beforeop_Implicit_TwoAxisInputControl;

        internal static event Delegates.op_Implicit_TwoAxisInputControl_AfterArgs _afterop_Implicit_TwoAxisInputControl;

        private static bool op_Implicit_TwoAxisInputControl(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl instance)
        {
            Delegates.Params_op_Implicit_TwoAxisInputControl @params = new()
            {
                instance = instance
            };
            if (_beforeop_Implicit_TwoAxisInputControl != null)
            {
                foreach (Delegates.op_Implicit_TwoAxisInputControl_BeforeArgs toInvoke in
                         _beforeop_Implicit_TwoAxisInputControl.GetInvocationList())
                {
                    try
                    {
                        _beforeop_Implicit_TwoAxisInputControl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            instance = @params.instance;
            var retVal = orig(instance);
            if (_afterop_Implicit_TwoAxisInputControl != null)
            {
                foreach (Delegates.op_Implicit_TwoAxisInputControl_AfterArgs toInvoke in
                         _afterop_Implicit_TwoAxisInputControl.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterop_Implicit_TwoAxisInputControl.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_X
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_X_BeforeArgs(Params_get_X args);

        public delegate float get_X_AfterArgs(Params_get_X args, float ret);

        public delegate float get_X_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_X
        {
            public InControl.TwoAxisInputControl self;
            public float value;
        }

        public delegate void set_X_BeforeArgs(Params_set_X args);

        public delegate void set_X_AfterArgs(Params_set_X args);

        public delegate void set_X_WithArgs(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value);

        public sealed class Params_get_Y
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Y_BeforeArgs(Params_get_Y args);

        public delegate float get_Y_AfterArgs(Params_get_Y args, float ret);

        public delegate float get_Y_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_Y
        {
            public InControl.TwoAxisInputControl self;
            public float value;
        }

        public delegate void set_Y_BeforeArgs(Params_set_Y args);

        public delegate void set_Y_AfterArgs(Params_set_Y args);

        public delegate void set_Y_WithArgs(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value);

        public sealed class Params_get_Left
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Left_BeforeArgs(Params_get_Left args);

        public delegate InControl.OneAxisInputControl get_Left_AfterArgs(Params_get_Left args,
            InControl.OneAxisInputControl ret);

        public delegate InControl.OneAxisInputControl get_Left_WithArgs(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_Left
        {
            public InControl.TwoAxisInputControl self;
            public InControl.OneAxisInputControl value;
        }

        public delegate void set_Left_BeforeArgs(Params_set_Left args);

        public delegate void set_Left_AfterArgs(Params_set_Left args);

        public delegate void set_Left_WithArgs(
            Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value);

        public sealed class Params_get_Right
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Right_BeforeArgs(Params_get_Right args);

        public delegate InControl.OneAxisInputControl get_Right_AfterArgs(Params_get_Right args,
            InControl.OneAxisInputControl ret);

        public delegate InControl.OneAxisInputControl get_Right_WithArgs(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_Right
        {
            public InControl.TwoAxisInputControl self;
            public InControl.OneAxisInputControl value;
        }

        public delegate void set_Right_BeforeArgs(Params_set_Right args);

        public delegate void set_Right_AfterArgs(Params_set_Right args);

        public delegate void set_Right_WithArgs(
            Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value);

        public sealed class Params_get_Up
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Up_BeforeArgs(Params_get_Up args);

        public delegate InControl.OneAxisInputControl get_Up_AfterArgs(Params_get_Up args,
            InControl.OneAxisInputControl ret);

        public delegate InControl.OneAxisInputControl get_Up_WithArgs(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_Up
        {
            public InControl.TwoAxisInputControl self;
            public InControl.OneAxisInputControl value;
        }

        public delegate void set_Up_BeforeArgs(Params_set_Up args);

        public delegate void set_Up_AfterArgs(Params_set_Up args);

        public delegate void set_Up_WithArgs(Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value);

        public sealed class Params_get_Down
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Down_BeforeArgs(Params_get_Down args);

        public delegate InControl.OneAxisInputControl get_Down_AfterArgs(Params_get_Down args,
            InControl.OneAxisInputControl ret);

        public delegate InControl.OneAxisInputControl get_Down_WithArgs(
            Func<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_Down
        {
            public InControl.TwoAxisInputControl self;
            public InControl.OneAxisInputControl value;
        }

        public delegate void set_Down_BeforeArgs(Params_set_Down args);

        public delegate void set_Down_AfterArgs(Params_set_Down args);

        public delegate void set_Down_WithArgs(
            Action<InControl.TwoAxisInputControl, InControl.OneAxisInputControl> orig,
            InControl.TwoAxisInputControl self, InControl.OneAxisInputControl value);

        public sealed class Params_get_UpdateTick
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_UpdateTick_BeforeArgs(Params_get_UpdateTick args);

        public delegate ulong get_UpdateTick_AfterArgs(Params_get_UpdateTick args, ulong ret);

        public delegate ulong get_UpdateTick_WithArgs(Func<InControl.TwoAxisInputControl, ulong> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_UpdateTick
        {
            public InControl.TwoAxisInputControl self;
            public ulong value;
        }

        public delegate void set_UpdateTick_BeforeArgs(Params_set_UpdateTick args);

        public delegate void set_UpdateTick_AfterArgs(Params_set_UpdateTick args);

        public delegate void set_UpdateTick_WithArgs(Action<InControl.TwoAxisInputControl, ulong> orig,
            InControl.TwoAxisInputControl self, ulong value);

        public sealed class Params_ClearInputState
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void ClearInputState_BeforeArgs(Params_ClearInputState args);

        public delegate void ClearInputState_AfterArgs(Params_ClearInputState args);

        public delegate void ClearInputState_WithArgs(Action<InControl.TwoAxisInputControl> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_Filter
        {
            public InControl.TwoAxisInputControl self;
            public InControl.TwoAxisInputControl twoAxisInputControl;
            public float deltaTime;
        }

        public delegate void Filter_BeforeArgs(Params_Filter args);

        public delegate void Filter_AfterArgs(Params_Filter args);

        public delegate void Filter_WithArgs(
            Action<InControl.TwoAxisInputControl, InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, InControl.TwoAxisInputControl twoAxisInputControl, float deltaTime);

        public sealed class Params_UpdateWithAxes
        {
            public InControl.TwoAxisInputControl self;
            public float x;
            public float y;
            public ulong updateTick;
            public float deltaTime;
        }

        public delegate void UpdateWithAxes_BeforeArgs(Params_UpdateWithAxes args);

        public delegate void UpdateWithAxes_AfterArgs(Params_UpdateWithAxes args);

        public delegate void UpdateWithAxes_WithArgs(
            Action<InControl.TwoAxisInputControl, float, float, ulong, float> orig, InControl.TwoAxisInputControl self,
            float x, float y, ulong updateTick, float deltaTime);

        public sealed class Params_get_Sensitivity
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Sensitivity_BeforeArgs(Params_get_Sensitivity args);

        public delegate float get_Sensitivity_AfterArgs(Params_get_Sensitivity args, float ret);

        public delegate float get_Sensitivity_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_Sensitivity
        {
            public InControl.TwoAxisInputControl self;
            public float value;
        }

        public delegate void set_Sensitivity_BeforeArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_AfterArgs(Params_set_Sensitivity args);

        public delegate void set_Sensitivity_WithArgs(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value);

        public sealed class Params_get_StateThreshold
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_StateThreshold_BeforeArgs(Params_get_StateThreshold args);

        public delegate float get_StateThreshold_AfterArgs(Params_get_StateThreshold args, float ret);

        public delegate float get_StateThreshold_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_StateThreshold
        {
            public InControl.TwoAxisInputControl self;
            public float value;
        }

        public delegate void set_StateThreshold_BeforeArgs(Params_set_StateThreshold args);

        public delegate void set_StateThreshold_AfterArgs(Params_set_StateThreshold args);

        public delegate void set_StateThreshold_WithArgs(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value);

        public sealed class Params_get_LowerDeadZone
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_LowerDeadZone_BeforeArgs(Params_get_LowerDeadZone args);

        public delegate float get_LowerDeadZone_AfterArgs(Params_get_LowerDeadZone args, float ret);

        public delegate float get_LowerDeadZone_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_LowerDeadZone
        {
            public InControl.TwoAxisInputControl self;
            public float value;
        }

        public delegate void set_LowerDeadZone_BeforeArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_AfterArgs(Params_set_LowerDeadZone args);

        public delegate void set_LowerDeadZone_WithArgs(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value);

        public sealed class Params_get_UpperDeadZone
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_UpperDeadZone_BeforeArgs(Params_get_UpperDeadZone args);

        public delegate float get_UpperDeadZone_AfterArgs(Params_get_UpperDeadZone args, float ret);

        public delegate float get_UpperDeadZone_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_UpperDeadZone
        {
            public InControl.TwoAxisInputControl self;
            public float value;
        }

        public delegate void set_UpperDeadZone_BeforeArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_AfterArgs(Params_set_UpperDeadZone args);

        public delegate void set_UpperDeadZone_WithArgs(Action<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self, float value);

        public sealed class Params_get_State
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_State_BeforeArgs(Params_get_State args);

        public delegate bool get_State_AfterArgs(Params_get_State args, bool ret);

        public delegate bool get_State_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_get_LastState
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_LastState_BeforeArgs(Params_get_LastState args);

        public delegate bool get_LastState_AfterArgs(Params_get_LastState args, bool ret);

        public delegate bool get_LastState_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_get_Value
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Value_BeforeArgs(Params_get_Value args);

        public delegate UnityEngine.Vector2 get_Value_AfterArgs(Params_get_Value args, UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_Value_WithArgs(
            Func<InControl.TwoAxisInputControl, UnityEngine.Vector2> orig, InControl.TwoAxisInputControl self);

        public sealed class Params_get_LastValue
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_LastValue_BeforeArgs(Params_get_LastValue args);

        public delegate UnityEngine.Vector2 get_LastValue_AfterArgs(Params_get_LastValue args, UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_LastValue_WithArgs(
            Func<InControl.TwoAxisInputControl, UnityEngine.Vector2> orig, InControl.TwoAxisInputControl self);

        public sealed class Params_get_Vector
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Vector_BeforeArgs(Params_get_Vector args);

        public delegate UnityEngine.Vector2 get_Vector_AfterArgs(Params_get_Vector args, UnityEngine.Vector2 ret);

        public delegate UnityEngine.Vector2 get_Vector_WithArgs(
            Func<InControl.TwoAxisInputControl, UnityEngine.Vector2> orig, InControl.TwoAxisInputControl self);

        public sealed class Params_get_HasChanged
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_HasChanged_BeforeArgs(Params_get_HasChanged args);

        public delegate bool get_HasChanged_AfterArgs(Params_get_HasChanged args, bool ret);

        public delegate bool get_HasChanged_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_set_HasChanged
        {
            public InControl.TwoAxisInputControl self;
            public bool value;
        }

        public delegate void set_HasChanged_BeforeArgs(Params_set_HasChanged args);

        public delegate void set_HasChanged_AfterArgs(Params_set_HasChanged args);

        public delegate void set_HasChanged_WithArgs(Action<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self, bool value);

        public sealed class Params_get_IsPressed
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_IsPressed_BeforeArgs(Params_get_IsPressed args);

        public delegate bool get_IsPressed_AfterArgs(Params_get_IsPressed args, bool ret);

        public delegate bool get_IsPressed_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_get_WasPressed
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_WasPressed_BeforeArgs(Params_get_WasPressed args);

        public delegate bool get_WasPressed_AfterArgs(Params_get_WasPressed args, bool ret);

        public delegate bool get_WasPressed_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_get_WasReleased
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_WasReleased_BeforeArgs(Params_get_WasReleased args);

        public delegate bool get_WasReleased_AfterArgs(Params_get_WasReleased args, bool ret);

        public delegate bool get_WasReleased_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_get_Angle
        {
            public InControl.TwoAxisInputControl self;
        }

        public delegate void get_Angle_BeforeArgs(Params_get_Angle args);

        public delegate float get_Angle_AfterArgs(Params_get_Angle args, float ret);

        public delegate float get_Angle_WithArgs(Func<InControl.TwoAxisInputControl, float> orig,
            InControl.TwoAxisInputControl self);

        public sealed class Params_op_Implicit_TwoAxisInputControl
        {
            public InControl.TwoAxisInputControl instance;
        }

        public delegate void op_Implicit_TwoAxisInputControl_BeforeArgs(Params_op_Implicit_TwoAxisInputControl args);

        public delegate bool op_Implicit_TwoAxisInputControl_AfterArgs(Params_op_Implicit_TwoAxisInputControl args,
            bool ret);

        public delegate bool op_Implicit_TwoAxisInputControl_WithArgs(Func<InControl.TwoAxisInputControl, bool> orig,
            InControl.TwoAxisInputControl instance);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_X_BeforeArgs get_X
        {
            add
            {
                HookHandler._beforeget_X += value;
                HookHandler.Hookget_X();
            }
            remove => HookHandler._beforeget_X -= value;
        }

        public static event Delegates.set_X_BeforeArgs set_X
        {
            add
            {
                HookHandler._beforeset_X += value;
                HookHandler.Hookset_X();
            }
            remove => HookHandler._beforeset_X -= value;
        }

        public static event Delegates.get_Y_BeforeArgs get_Y
        {
            add
            {
                HookHandler._beforeget_Y += value;
                HookHandler.Hookget_Y();
            }
            remove => HookHandler._beforeget_Y -= value;
        }

        public static event Delegates.set_Y_BeforeArgs set_Y
        {
            add
            {
                HookHandler._beforeset_Y += value;
                HookHandler.Hookset_Y();
            }
            remove => HookHandler._beforeset_Y -= value;
        }

        public static event Delegates.get_Left_BeforeArgs get_Left
        {
            add
            {
                HookHandler._beforeget_Left += value;
                HookHandler.Hookget_Left();
            }
            remove => HookHandler._beforeget_Left -= value;
        }

        public static event Delegates.set_Left_BeforeArgs set_Left
        {
            add
            {
                HookHandler._beforeset_Left += value;
                HookHandler.Hookset_Left();
            }
            remove => HookHandler._beforeset_Left -= value;
        }

        public static event Delegates.get_Right_BeforeArgs get_Right
        {
            add
            {
                HookHandler._beforeget_Right += value;
                HookHandler.Hookget_Right();
            }
            remove => HookHandler._beforeget_Right -= value;
        }

        public static event Delegates.set_Right_BeforeArgs set_Right
        {
            add
            {
                HookHandler._beforeset_Right += value;
                HookHandler.Hookset_Right();
            }
            remove => HookHandler._beforeset_Right -= value;
        }

        public static event Delegates.get_Up_BeforeArgs get_Up
        {
            add
            {
                HookHandler._beforeget_Up += value;
                HookHandler.Hookget_Up();
            }
            remove => HookHandler._beforeget_Up -= value;
        }

        public static event Delegates.set_Up_BeforeArgs set_Up
        {
            add
            {
                HookHandler._beforeset_Up += value;
                HookHandler.Hookset_Up();
            }
            remove => HookHandler._beforeset_Up -= value;
        }

        public static event Delegates.get_Down_BeforeArgs get_Down
        {
            add
            {
                HookHandler._beforeget_Down += value;
                HookHandler.Hookget_Down();
            }
            remove => HookHandler._beforeget_Down -= value;
        }

        public static event Delegates.set_Down_BeforeArgs set_Down
        {
            add
            {
                HookHandler._beforeset_Down += value;
                HookHandler.Hookset_Down();
            }
            remove => HookHandler._beforeset_Down -= value;
        }

        public static event Delegates.get_UpdateTick_BeforeArgs get_UpdateTick
        {
            add
            {
                HookHandler._beforeget_UpdateTick += value;
                HookHandler.Hookget_UpdateTick();
            }
            remove => HookHandler._beforeget_UpdateTick -= value;
        }

        public static event Delegates.set_UpdateTick_BeforeArgs set_UpdateTick
        {
            add
            {
                HookHandler._beforeset_UpdateTick += value;
                HookHandler.Hookset_UpdateTick();
            }
            remove => HookHandler._beforeset_UpdateTick -= value;
        }

        public static event Delegates.ClearInputState_BeforeArgs ClearInputState
        {
            add
            {
                HookHandler._beforeClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._beforeClearInputState -= value;
        }

        public static event Delegates.Filter_BeforeArgs Filter
        {
            add
            {
                HookHandler._beforeFilter += value;
                HookHandler.HookFilter();
            }
            remove => HookHandler._beforeFilter -= value;
        }

        public static event Delegates.UpdateWithAxes_BeforeArgs UpdateWithAxes
        {
            add
            {
                HookHandler._beforeUpdateWithAxes += value;
                HookHandler.HookUpdateWithAxes();
            }
            remove => HookHandler._beforeUpdateWithAxes -= value;
        }

        public static event Delegates.get_Sensitivity_BeforeArgs get_Sensitivity
        {
            add
            {
                HookHandler._beforeget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._beforeget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_BeforeArgs set_Sensitivity
        {
            add
            {
                HookHandler._beforeset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._beforeset_Sensitivity -= value;
        }

        public static event Delegates.get_StateThreshold_BeforeArgs get_StateThreshold
        {
            add
            {
                HookHandler._beforeget_StateThreshold += value;
                HookHandler.Hookget_StateThreshold();
            }
            remove => HookHandler._beforeget_StateThreshold -= value;
        }

        public static event Delegates.set_StateThreshold_BeforeArgs set_StateThreshold
        {
            add
            {
                HookHandler._beforeset_StateThreshold += value;
                HookHandler.Hookset_StateThreshold();
            }
            remove => HookHandler._beforeset_StateThreshold -= value;
        }

        public static event Delegates.get_LowerDeadZone_BeforeArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._beforeget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._beforeget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_BeforeArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._beforeset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._beforeset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_BeforeArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._beforeget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._beforeget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_BeforeArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._beforeset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._beforeset_UpperDeadZone -= value;
        }

        public static event Delegates.get_State_BeforeArgs get_State
        {
            add
            {
                HookHandler._beforeget_State += value;
                HookHandler.Hookget_State();
            }
            remove => HookHandler._beforeget_State -= value;
        }

        public static event Delegates.get_LastState_BeforeArgs get_LastState
        {
            add
            {
                HookHandler._beforeget_LastState += value;
                HookHandler.Hookget_LastState();
            }
            remove => HookHandler._beforeget_LastState -= value;
        }

        public static event Delegates.get_Value_BeforeArgs get_Value
        {
            add
            {
                HookHandler._beforeget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._beforeget_Value -= value;
        }

        public static event Delegates.get_LastValue_BeforeArgs get_LastValue
        {
            add
            {
                HookHandler._beforeget_LastValue += value;
                HookHandler.Hookget_LastValue();
            }
            remove => HookHandler._beforeget_LastValue -= value;
        }

        public static event Delegates.get_Vector_BeforeArgs get_Vector
        {
            add
            {
                HookHandler._beforeget_Vector += value;
                HookHandler.Hookget_Vector();
            }
            remove => HookHandler._beforeget_Vector -= value;
        }

        public static event Delegates.get_HasChanged_BeforeArgs get_HasChanged
        {
            add
            {
                HookHandler._beforeget_HasChanged += value;
                HookHandler.Hookget_HasChanged();
            }
            remove => HookHandler._beforeget_HasChanged -= value;
        }

        public static event Delegates.set_HasChanged_BeforeArgs set_HasChanged
        {
            add
            {
                HookHandler._beforeset_HasChanged += value;
                HookHandler.Hookset_HasChanged();
            }
            remove => HookHandler._beforeset_HasChanged -= value;
        }

        public static event Delegates.get_IsPressed_BeforeArgs get_IsPressed
        {
            add
            {
                HookHandler._beforeget_IsPressed += value;
                HookHandler.Hookget_IsPressed();
            }
            remove => HookHandler._beforeget_IsPressed -= value;
        }

        public static event Delegates.get_WasPressed_BeforeArgs get_WasPressed
        {
            add
            {
                HookHandler._beforeget_WasPressed += value;
                HookHandler.Hookget_WasPressed();
            }
            remove => HookHandler._beforeget_WasPressed -= value;
        }

        public static event Delegates.get_WasReleased_BeforeArgs get_WasReleased
        {
            add
            {
                HookHandler._beforeget_WasReleased += value;
                HookHandler.Hookget_WasReleased();
            }
            remove => HookHandler._beforeget_WasReleased -= value;
        }

        public static event Delegates.get_Angle_BeforeArgs get_Angle
        {
            add
            {
                HookHandler._beforeget_Angle += value;
                HookHandler.Hookget_Angle();
            }
            remove => HookHandler._beforeget_Angle -= value;
        }

        public static event Delegates.op_Implicit_TwoAxisInputControl_BeforeArgs op_Implicit_TwoAxisInputControl
        {
            add
            {
                HookHandler._beforeop_Implicit_TwoAxisInputControl += value;
                HookHandler.Hookop_Implicit_TwoAxisInputControl();
            }
            remove => HookHandler._beforeop_Implicit_TwoAxisInputControl -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_X_AfterArgs get_X
        {
            add
            {
                HookHandler._afterget_X += value;
                HookHandler.Hookget_X();
            }
            remove => HookHandler._afterget_X -= value;
        }

        public static event Delegates.set_X_AfterArgs set_X
        {
            add
            {
                HookHandler._afterset_X += value;
                HookHandler.Hookset_X();
            }
            remove => HookHandler._afterset_X -= value;
        }

        public static event Delegates.get_Y_AfterArgs get_Y
        {
            add
            {
                HookHandler._afterget_Y += value;
                HookHandler.Hookget_Y();
            }
            remove => HookHandler._afterget_Y -= value;
        }

        public static event Delegates.set_Y_AfterArgs set_Y
        {
            add
            {
                HookHandler._afterset_Y += value;
                HookHandler.Hookset_Y();
            }
            remove => HookHandler._afterset_Y -= value;
        }

        public static event Delegates.get_Left_AfterArgs get_Left
        {
            add
            {
                HookHandler._afterget_Left += value;
                HookHandler.Hookget_Left();
            }
            remove => HookHandler._afterget_Left -= value;
        }

        public static event Delegates.set_Left_AfterArgs set_Left
        {
            add
            {
                HookHandler._afterset_Left += value;
                HookHandler.Hookset_Left();
            }
            remove => HookHandler._afterset_Left -= value;
        }

        public static event Delegates.get_Right_AfterArgs get_Right
        {
            add
            {
                HookHandler._afterget_Right += value;
                HookHandler.Hookget_Right();
            }
            remove => HookHandler._afterget_Right -= value;
        }

        public static event Delegates.set_Right_AfterArgs set_Right
        {
            add
            {
                HookHandler._afterset_Right += value;
                HookHandler.Hookset_Right();
            }
            remove => HookHandler._afterset_Right -= value;
        }

        public static event Delegates.get_Up_AfterArgs get_Up
        {
            add
            {
                HookHandler._afterget_Up += value;
                HookHandler.Hookget_Up();
            }
            remove => HookHandler._afterget_Up -= value;
        }

        public static event Delegates.set_Up_AfterArgs set_Up
        {
            add
            {
                HookHandler._afterset_Up += value;
                HookHandler.Hookset_Up();
            }
            remove => HookHandler._afterset_Up -= value;
        }

        public static event Delegates.get_Down_AfterArgs get_Down
        {
            add
            {
                HookHandler._afterget_Down += value;
                HookHandler.Hookget_Down();
            }
            remove => HookHandler._afterget_Down -= value;
        }

        public static event Delegates.set_Down_AfterArgs set_Down
        {
            add
            {
                HookHandler._afterset_Down += value;
                HookHandler.Hookset_Down();
            }
            remove => HookHandler._afterset_Down -= value;
        }

        public static event Delegates.get_UpdateTick_AfterArgs get_UpdateTick
        {
            add
            {
                HookHandler._afterget_UpdateTick += value;
                HookHandler.Hookget_UpdateTick();
            }
            remove => HookHandler._afterget_UpdateTick -= value;
        }

        public static event Delegates.set_UpdateTick_AfterArgs set_UpdateTick
        {
            add
            {
                HookHandler._afterset_UpdateTick += value;
                HookHandler.Hookset_UpdateTick();
            }
            remove => HookHandler._afterset_UpdateTick -= value;
        }

        public static event Delegates.ClearInputState_AfterArgs ClearInputState
        {
            add
            {
                HookHandler._afterClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._afterClearInputState -= value;
        }

        public static event Delegates.Filter_AfterArgs Filter
        {
            add
            {
                HookHandler._afterFilter += value;
                HookHandler.HookFilter();
            }
            remove => HookHandler._afterFilter -= value;
        }

        public static event Delegates.UpdateWithAxes_AfterArgs UpdateWithAxes
        {
            add
            {
                HookHandler._afterUpdateWithAxes += value;
                HookHandler.HookUpdateWithAxes();
            }
            remove => HookHandler._afterUpdateWithAxes -= value;
        }

        public static event Delegates.get_Sensitivity_AfterArgs get_Sensitivity
        {
            add
            {
                HookHandler._afterget_Sensitivity += value;
                HookHandler.Hookget_Sensitivity();
            }
            remove => HookHandler._afterget_Sensitivity -= value;
        }

        public static event Delegates.set_Sensitivity_AfterArgs set_Sensitivity
        {
            add
            {
                HookHandler._afterset_Sensitivity += value;
                HookHandler.Hookset_Sensitivity();
            }
            remove => HookHandler._afterset_Sensitivity -= value;
        }

        public static event Delegates.get_StateThreshold_AfterArgs get_StateThreshold
        {
            add
            {
                HookHandler._afterget_StateThreshold += value;
                HookHandler.Hookget_StateThreshold();
            }
            remove => HookHandler._afterget_StateThreshold -= value;
        }

        public static event Delegates.set_StateThreshold_AfterArgs set_StateThreshold
        {
            add
            {
                HookHandler._afterset_StateThreshold += value;
                HookHandler.Hookset_StateThreshold();
            }
            remove => HookHandler._afterset_StateThreshold -= value;
        }

        public static event Delegates.get_LowerDeadZone_AfterArgs get_LowerDeadZone
        {
            add
            {
                HookHandler._afterget_LowerDeadZone += value;
                HookHandler.Hookget_LowerDeadZone();
            }
            remove => HookHandler._afterget_LowerDeadZone -= value;
        }

        public static event Delegates.set_LowerDeadZone_AfterArgs set_LowerDeadZone
        {
            add
            {
                HookHandler._afterset_LowerDeadZone += value;
                HookHandler.Hookset_LowerDeadZone();
            }
            remove => HookHandler._afterset_LowerDeadZone -= value;
        }

        public static event Delegates.get_UpperDeadZone_AfterArgs get_UpperDeadZone
        {
            add
            {
                HookHandler._afterget_UpperDeadZone += value;
                HookHandler.Hookget_UpperDeadZone();
            }
            remove => HookHandler._afterget_UpperDeadZone -= value;
        }

        public static event Delegates.set_UpperDeadZone_AfterArgs set_UpperDeadZone
        {
            add
            {
                HookHandler._afterset_UpperDeadZone += value;
                HookHandler.Hookset_UpperDeadZone();
            }
            remove => HookHandler._afterset_UpperDeadZone -= value;
        }

        public static event Delegates.get_State_AfterArgs get_State
        {
            add
            {
                HookHandler._afterget_State += value;
                HookHandler.Hookget_State();
            }
            remove => HookHandler._afterget_State -= value;
        }

        public static event Delegates.get_LastState_AfterArgs get_LastState
        {
            add
            {
                HookHandler._afterget_LastState += value;
                HookHandler.Hookget_LastState();
            }
            remove => HookHandler._afterget_LastState -= value;
        }

        public static event Delegates.get_Value_AfterArgs get_Value
        {
            add
            {
                HookHandler._afterget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._afterget_Value -= value;
        }

        public static event Delegates.get_LastValue_AfterArgs get_LastValue
        {
            add
            {
                HookHandler._afterget_LastValue += value;
                HookHandler.Hookget_LastValue();
            }
            remove => HookHandler._afterget_LastValue -= value;
        }

        public static event Delegates.get_Vector_AfterArgs get_Vector
        {
            add
            {
                HookHandler._afterget_Vector += value;
                HookHandler.Hookget_Vector();
            }
            remove => HookHandler._afterget_Vector -= value;
        }

        public static event Delegates.get_HasChanged_AfterArgs get_HasChanged
        {
            add
            {
                HookHandler._afterget_HasChanged += value;
                HookHandler.Hookget_HasChanged();
            }
            remove => HookHandler._afterget_HasChanged -= value;
        }

        public static event Delegates.set_HasChanged_AfterArgs set_HasChanged
        {
            add
            {
                HookHandler._afterset_HasChanged += value;
                HookHandler.Hookset_HasChanged();
            }
            remove => HookHandler._afterset_HasChanged -= value;
        }

        public static event Delegates.get_IsPressed_AfterArgs get_IsPressed
        {
            add
            {
                HookHandler._afterget_IsPressed += value;
                HookHandler.Hookget_IsPressed();
            }
            remove => HookHandler._afterget_IsPressed -= value;
        }

        public static event Delegates.get_WasPressed_AfterArgs get_WasPressed
        {
            add
            {
                HookHandler._afterget_WasPressed += value;
                HookHandler.Hookget_WasPressed();
            }
            remove => HookHandler._afterget_WasPressed -= value;
        }

        public static event Delegates.get_WasReleased_AfterArgs get_WasReleased
        {
            add
            {
                HookHandler._afterget_WasReleased += value;
                HookHandler.Hookget_WasReleased();
            }
            remove => HookHandler._afterget_WasReleased -= value;
        }

        public static event Delegates.get_Angle_AfterArgs get_Angle
        {
            add
            {
                HookHandler._afterget_Angle += value;
                HookHandler.Hookget_Angle();
            }
            remove => HookHandler._afterget_Angle -= value;
        }

        public static event Delegates.op_Implicit_TwoAxisInputControl_AfterArgs op_Implicit_TwoAxisInputControl
        {
            add
            {
                HookHandler._afterop_Implicit_TwoAxisInputControl += value;
                HookHandler.Hookop_Implicit_TwoAxisInputControl();
            }
            remove => HookHandler._afterop_Implicit_TwoAxisInputControl -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_X_WithArgs get_X
        {
            add => HookEndpointManager.Add<Delegates.get_X_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_X", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_X_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_X", true), value);
        }

        public static event Delegates.set_X_WithArgs set_X
        {
            add => HookEndpointManager.Add<Delegates.set_X_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_X", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_X_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_X", true), value);
        }

        public static event Delegates.get_Y_WithArgs get_Y
        {
            add => HookEndpointManager.Add<Delegates.get_Y_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Y", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Y_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Y", true), value);
        }

        public static event Delegates.set_Y_WithArgs set_Y
        {
            add => HookEndpointManager.Add<Delegates.set_Y_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Y", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Y_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Y", true), value);
        }

        public static event Delegates.get_Left_WithArgs get_Left
        {
            add => HookEndpointManager.Add<Delegates.get_Left_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Left", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Left_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Left", true), value);
        }

        public static event Delegates.set_Left_WithArgs set_Left
        {
            add => HookEndpointManager.Add<Delegates.set_Left_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Left", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Left_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Left", true), value);
        }

        public static event Delegates.get_Right_WithArgs get_Right
        {
            add => HookEndpointManager.Add<Delegates.get_Right_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Right", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Right_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Right", true), value);
        }

        public static event Delegates.set_Right_WithArgs set_Right
        {
            add => HookEndpointManager.Add<Delegates.set_Right_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Right", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Right_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Right", true), value);
        }

        public static event Delegates.get_Up_WithArgs get_Up
        {
            add => HookEndpointManager.Add<Delegates.get_Up_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Up", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Up_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Up", true), value);
        }

        public static event Delegates.set_Up_WithArgs set_Up
        {
            add => HookEndpointManager.Add<Delegates.set_Up_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Up", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Up_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Up", true), value);
        }

        public static event Delegates.get_Down_WithArgs get_Down
        {
            add => HookEndpointManager.Add<Delegates.get_Down_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Down", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Down_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Down", true), value);
        }

        public static event Delegates.set_Down_WithArgs set_Down
        {
            add => HookEndpointManager.Add<Delegates.set_Down_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Down", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Down_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Down", true), value);
        }

        public static event Delegates.get_UpdateTick_WithArgs get_UpdateTick
        {
            add => HookEndpointManager.Add<Delegates.get_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_UpdateTick", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_UpdateTick", true), value);
        }

        public static event Delegates.set_UpdateTick_WithArgs set_UpdateTick
        {
            add => HookEndpointManager.Add<Delegates.set_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_UpdateTick", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_UpdateTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_UpdateTick", true), value);
        }

        public static event Delegates.ClearInputState_WithArgs ClearInputState
        {
            add => HookEndpointManager.Add<Delegates.ClearInputState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "ClearInputState", true), value);
            remove => HookEndpointManager.Remove<Delegates.ClearInputState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "ClearInputState", true), value);
        }

        public static event Delegates.Filter_WithArgs Filter
        {
            add => HookEndpointManager.Add<Delegates.Filter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "Filter", true), value);
            remove => HookEndpointManager.Remove<Delegates.Filter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "Filter", true), value);
        }

        public static event Delegates.UpdateWithAxes_WithArgs UpdateWithAxes
        {
            add => HookEndpointManager.Add<Delegates.UpdateWithAxes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "UpdateWithAxes", true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateWithAxes_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "UpdateWithAxes", true), value);
        }

        public static event Delegates.get_Sensitivity_WithArgs get_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Sensitivity", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Sensitivity", true), value);
        }

        public static event Delegates.set_Sensitivity_WithArgs set_Sensitivity
        {
            add => HookEndpointManager.Add<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Sensitivity", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Sensitivity_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_Sensitivity", true), value);
        }

        public static event Delegates.get_StateThreshold_WithArgs get_StateThreshold
        {
            add => HookEndpointManager.Add<Delegates.get_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_StateThreshold", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_StateThreshold", true),
                value);
        }

        public static event Delegates.set_StateThreshold_WithArgs set_StateThreshold
        {
            add => HookEndpointManager.Add<Delegates.set_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_StateThreshold", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_StateThreshold_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_StateThreshold", true),
                value);
        }

        public static event Delegates.get_LowerDeadZone_WithArgs get_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LowerDeadZone", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LowerDeadZone", true),
                value);
        }

        public static event Delegates.set_LowerDeadZone_WithArgs set_LowerDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_LowerDeadZone", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_LowerDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_LowerDeadZone", true),
                value);
        }

        public static event Delegates.get_UpperDeadZone_WithArgs get_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_UpperDeadZone", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_UpperDeadZone", true),
                value);
        }

        public static event Delegates.set_UpperDeadZone_WithArgs set_UpperDeadZone
        {
            add => HookEndpointManager.Add<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_UpperDeadZone", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.set_UpperDeadZone_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_UpperDeadZone", true),
                value);
        }

        public static event Delegates.get_State_WithArgs get_State
        {
            add => HookEndpointManager.Add<Delegates.get_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_State", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_State_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_State", true), value);
        }

        public static event Delegates.get_LastState_WithArgs get_LastState
        {
            add => HookEndpointManager.Add<Delegates.get_LastState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LastState", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_LastState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LastState", true), value);
        }

        public static event Delegates.get_Value_WithArgs get_Value
        {
            add => HookEndpointManager.Add<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Value", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Value", true), value);
        }

        public static event Delegates.get_LastValue_WithArgs get_LastValue
        {
            add => HookEndpointManager.Add<Delegates.get_LastValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LastValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_LastValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_LastValue", true), value);
        }

        public static event Delegates.get_Vector_WithArgs get_Vector
        {
            add => HookEndpointManager.Add<Delegates.get_Vector_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Vector", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Vector_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Vector", true), value);
        }

        public static event Delegates.get_HasChanged_WithArgs get_HasChanged
        {
            add => HookEndpointManager.Add<Delegates.get_HasChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_HasChanged", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_HasChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_HasChanged", true), value);
        }

        public static event Delegates.set_HasChanged_WithArgs set_HasChanged
        {
            add => HookEndpointManager.Add<Delegates.set_HasChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_HasChanged", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_HasChanged_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "set_HasChanged", true), value);
        }

        public static event Delegates.get_IsPressed_WithArgs get_IsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_IsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_IsPressed", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_IsPressed", true), value);
        }

        public static event Delegates.get_WasPressed_WithArgs get_WasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_WasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_WasPressed", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_WasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_WasPressed", true), value);
        }

        public static event Delegates.get_WasReleased_WithArgs get_WasReleased
        {
            add => HookEndpointManager.Add<Delegates.get_WasReleased_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_WasReleased", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_WasReleased_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_WasReleased", true), value);
        }

        public static event Delegates.get_Angle_WithArgs get_Angle
        {
            add => HookEndpointManager.Add<Delegates.get_Angle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Angle", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Angle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "get_Angle", true), value);
        }

        public static event Delegates.op_Implicit_TwoAxisInputControl_WithArgs op_Implicit_TwoAxisInputControl
        {
            add => HookEndpointManager.Add<Delegates.op_Implicit_TwoAxisInputControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "op_Implicit", false), value);
            remove => HookEndpointManager.Remove<Delegates.op_Implicit_TwoAxisInputControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.TwoAxisInputControl), "op_Implicit", false), value);
        }
    }
}