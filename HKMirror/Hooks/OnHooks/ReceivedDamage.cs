using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for ReceivedDamage class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnReceivedDamage
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "Reset", true),
                    Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.ReceivedDamage> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "OnEnter",
                        true), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.ReceivedDamage> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "OnExit",
                        true), OnExit);
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_AfterArgs _afterOnExit;

        private static void OnExit(Action<HutongGames.PlayMaker.Actions.ReceivedDamage> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            if (_beforeOnExit != null)
            {
                foreach (Delegates.OnExit_BeforeArgs toInvoke in _beforeOnExit.GetInvocationList())
                {
                    try
                    {
                        _beforeOnExit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnExit != null)
            {
                foreach (Delegates.OnExit_AfterArgs toInvoke in _afterOnExit.GetInvocationList())
                {
                    try
                    {
                        _afterOnExit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoCollisionEnter2D()
        {
            if (!HookedList.Contains("DoCollisionEnter2D"))
            {
                HookedList.Add("DoCollisionEnter2D");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                        "DoCollisionEnter2D", true), DoCollisionEnter2D);
            }
        }

        internal static event Delegates.DoCollisionEnter2D_BeforeArgs _beforeDoCollisionEnter2D;
        internal static event Delegates.DoCollisionEnter2D_AfterArgs _afterDoCollisionEnter2D;

        private static void DoCollisionEnter2D(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collision2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collision2D collisionInfo)
        {
            Delegates.Params_DoCollisionEnter2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            if (_beforeDoCollisionEnter2D != null)
            {
                foreach (Delegates.DoCollisionEnter2D_BeforeArgs toInvoke in
                         _beforeDoCollisionEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeDoCollisionEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoCollisionEnter2D != null)
            {
                foreach (Delegates.DoCollisionEnter2D_AfterArgs toInvoke in
                         _afterDoCollisionEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterDoCollisionEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoTriggerEnter2D()
        {
            if (!HookedList.Contains("DoTriggerEnter2D"))
            {
                HookedList.Add("DoTriggerEnter2D");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                        "DoTriggerEnter2D", true), DoTriggerEnter2D);
            }
        }

        internal static event Delegates.DoTriggerEnter2D_BeforeArgs _beforeDoTriggerEnter2D;
        internal static event Delegates.DoTriggerEnter2D_AfterArgs _afterDoTriggerEnter2D;

        private static void DoTriggerEnter2D(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collider2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collider2D collisionInfo)
        {
            Delegates.Params_DoTriggerEnter2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            if (_beforeDoTriggerEnter2D != null)
            {
                foreach (Delegates.DoTriggerEnter2D_BeforeArgs toInvoke in _beforeDoTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _beforeDoTriggerEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoTriggerEnter2D != null)
            {
                foreach (Delegates.DoTriggerEnter2D_AfterArgs toInvoke in _afterDoTriggerEnter2D.GetInvocationList())
                {
                    try
                    {
                        _afterDoTriggerEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoTriggerStay2D()
        {
            if (!HookedList.Contains("DoTriggerStay2D"))
            {
                HookedList.Add("DoTriggerStay2D");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                        "DoTriggerStay2D", true), DoTriggerStay2D);
            }
        }

        internal static event Delegates.DoTriggerStay2D_BeforeArgs _beforeDoTriggerStay2D;
        internal static event Delegates.DoTriggerStay2D_AfterArgs _afterDoTriggerStay2D;

        private static void DoTriggerStay2D(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collider2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collider2D collisionInfo)
        {
            Delegates.Params_DoTriggerStay2D @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            if (_beforeDoTriggerStay2D != null)
            {
                foreach (Delegates.DoTriggerStay2D_BeforeArgs toInvoke in _beforeDoTriggerStay2D.GetInvocationList())
                {
                    try
                    {
                        _beforeDoTriggerStay2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterDoTriggerStay2D != null)
            {
                foreach (Delegates.DoTriggerStay2D_AfterArgs toInvoke in _afterDoTriggerStay2D.GetInvocationList())
                {
                    try
                    {
                        _afterDoTriggerStay2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStoreCollisionInfo()
        {
            if (!HookedList.Contains("StoreCollisionInfo"))
            {
                HookedList.Add("StoreCollisionInfo");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                        "StoreCollisionInfo", true), StoreCollisionInfo);
            }
        }

        internal static event Delegates.StoreCollisionInfo_BeforeArgs _beforeStoreCollisionInfo;
        internal static event Delegates.StoreCollisionInfo_AfterArgs _afterStoreCollisionInfo;

        private static void StoreCollisionInfo(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collision2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collision2D collisionInfo)
        {
            Delegates.Params_StoreCollisionInfo @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            if (_beforeStoreCollisionInfo != null)
            {
                foreach (Delegates.StoreCollisionInfo_BeforeArgs toInvoke in
                         _beforeStoreCollisionInfo.GetInvocationList())
                {
                    try
                    {
                        _beforeStoreCollisionInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterStoreCollisionInfo != null)
            {
                foreach (Delegates.StoreCollisionInfo_AfterArgs toInvoke in
                         _afterStoreCollisionInfo.GetInvocationList())
                {
                    try
                    {
                        _afterStoreCollisionInfo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStoreTriggerInfo()
        {
            if (!HookedList.Contains("StoreTriggerInfo"))
            {
                HookedList.Add("StoreTriggerInfo");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                        "StoreTriggerInfo", true), StoreTriggerInfo);
            }
        }

        internal static event Delegates.StoreTriggerInfo_BeforeArgs _beforeStoreTriggerInfo;
        internal static event Delegates.StoreTriggerInfo_AfterArgs _afterStoreTriggerInfo;

        private static void StoreTriggerInfo(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collider2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collider2D collisionInfo)
        {
            Delegates.Params_StoreTriggerInfo @params = new()
            {
                self = self, collisionInfo = collisionInfo
            };
            if (_beforeStoreTriggerInfo != null)
            {
                foreach (Delegates.StoreTriggerInfo_BeforeArgs toInvoke in _beforeStoreTriggerInfo.GetInvocationList())
                {
                    try
                    {
                        _beforeStoreTriggerInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            collisionInfo = @params.collisionInfo;
            orig(self, collisionInfo);
            if (_afterStoreTriggerInfo != null)
            {
                foreach (Delegates.StoreTriggerInfo_AfterArgs toInvoke in _afterStoreTriggerInfo.GetInvocationList())
                {
                    try
                    {
                        _afterStoreTriggerInfo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookStoreIfDamagingObject()
        {
            if (!HookedList.Contains("StoreIfDamagingObject"))
            {
                HookedList.Add("StoreIfDamagingObject");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                        "StoreIfDamagingObject", true), StoreIfDamagingObject);
            }
        }

        internal static event Delegates.StoreIfDamagingObject_BeforeArgs _beforeStoreIfDamagingObject;
        internal static event Delegates.StoreIfDamagingObject_AfterArgs _afterStoreIfDamagingObject;

        private static void StoreIfDamagingObject(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.GameObject> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.GameObject go)
        {
            Delegates.Params_StoreIfDamagingObject @params = new()
            {
                self = self, go = go
            };
            if (_beforeStoreIfDamagingObject != null)
            {
                foreach (Delegates.StoreIfDamagingObject_BeforeArgs toInvoke in _beforeStoreIfDamagingObject
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeStoreIfDamagingObject?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterStoreIfDamagingObject != null)
            {
                foreach (Delegates.StoreIfDamagingObject_AfterArgs toInvoke in _afterStoreIfDamagingObject
                             .GetInvocationList())
                {
                    try
                    {
                        _afterStoreIfDamagingObject.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "ErrorCheck",
                        true), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_AfterArgs _afterErrorCheck;

        private static string ErrorCheck(Func<HutongGames.PlayMaker.Actions.ReceivedDamage, string> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            if (_beforeErrorCheck != null)
            {
                foreach (Delegates.ErrorCheck_BeforeArgs toInvoke in _beforeErrorCheck.GetInvocationList())
                {
                    try
                    {
                        _beforeErrorCheck?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null)
            {
                foreach (Delegates.ErrorCheck_AfterArgs toInvoke in _afterErrorCheck.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterErrorCheck.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.ReceivedDamage> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.ReceivedDamage> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self);

        public sealed class Params_OnExit
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
        }

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_AfterArgs(Params_OnExit args);

        public delegate void OnExit_WithArgs(Action<HutongGames.PlayMaker.Actions.ReceivedDamage> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self);

        public sealed class Params_DoCollisionEnter2D
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
            public UnityEngine.Collision2D collisionInfo;
        }

        public delegate void DoCollisionEnter2D_BeforeArgs(Params_DoCollisionEnter2D args);

        public delegate void DoCollisionEnter2D_AfterArgs(Params_DoCollisionEnter2D args);

        public delegate void DoCollisionEnter2D_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collision2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collision2D collisionInfo);

        public sealed class Params_DoTriggerEnter2D
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
            public UnityEngine.Collider2D collisionInfo;
        }

        public delegate void DoTriggerEnter2D_BeforeArgs(Params_DoTriggerEnter2D args);

        public delegate void DoTriggerEnter2D_AfterArgs(Params_DoTriggerEnter2D args);

        public delegate void DoTriggerEnter2D_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collider2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collider2D collisionInfo);

        public sealed class Params_DoTriggerStay2D
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
            public UnityEngine.Collider2D collisionInfo;
        }

        public delegate void DoTriggerStay2D_BeforeArgs(Params_DoTriggerStay2D args);

        public delegate void DoTriggerStay2D_AfterArgs(Params_DoTriggerStay2D args);

        public delegate void DoTriggerStay2D_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collider2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collider2D collisionInfo);

        public sealed class Params_StoreCollisionInfo
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
            public UnityEngine.Collision2D collisionInfo;
        }

        public delegate void StoreCollisionInfo_BeforeArgs(Params_StoreCollisionInfo args);

        public delegate void StoreCollisionInfo_AfterArgs(Params_StoreCollisionInfo args);

        public delegate void StoreCollisionInfo_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collision2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collision2D collisionInfo);

        public sealed class Params_StoreTriggerInfo
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
            public UnityEngine.Collider2D collisionInfo;
        }

        public delegate void StoreTriggerInfo_BeforeArgs(Params_StoreTriggerInfo args);

        public delegate void StoreTriggerInfo_AfterArgs(Params_StoreTriggerInfo args);

        public delegate void StoreTriggerInfo_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.Collider2D> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.Collider2D collisionInfo);

        public sealed class Params_StoreIfDamagingObject
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
            public UnityEngine.GameObject go;
        }

        public delegate void StoreIfDamagingObject_BeforeArgs(Params_StoreIfDamagingObject args);

        public delegate void StoreIfDamagingObject_AfterArgs(Params_StoreIfDamagingObject args);

        public delegate void StoreIfDamagingObject_WithArgs(
            Action<HutongGames.PlayMaker.Actions.ReceivedDamage, UnityEngine.GameObject> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self, UnityEngine.GameObject go);

        public sealed class Params_ErrorCheck
        {
            public HutongGames.PlayMaker.Actions.ReceivedDamage self;
        }

        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_AfterArgs(Params_ErrorCheck args, string ret);

        public delegate string ErrorCheck_WithArgs(Func<HutongGames.PlayMaker.Actions.ReceivedDamage, string> orig,
            HutongGames.PlayMaker.Actions.ReceivedDamage self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.DoCollisionEnter2D_BeforeArgs DoCollisionEnter2D
        {
            add
            {
                HookHandler._beforeDoCollisionEnter2D += value;
                HookHandler.HookDoCollisionEnter2D();
            }
            remove => HookHandler._beforeDoCollisionEnter2D -= value;
        }

        public static event Delegates.DoTriggerEnter2D_BeforeArgs DoTriggerEnter2D
        {
            add
            {
                HookHandler._beforeDoTriggerEnter2D += value;
                HookHandler.HookDoTriggerEnter2D();
            }
            remove => HookHandler._beforeDoTriggerEnter2D -= value;
        }

        public static event Delegates.DoTriggerStay2D_BeforeArgs DoTriggerStay2D
        {
            add
            {
                HookHandler._beforeDoTriggerStay2D += value;
                HookHandler.HookDoTriggerStay2D();
            }
            remove => HookHandler._beforeDoTriggerStay2D -= value;
        }

        public static event Delegates.StoreCollisionInfo_BeforeArgs StoreCollisionInfo
        {
            add
            {
                HookHandler._beforeStoreCollisionInfo += value;
                HookHandler.HookStoreCollisionInfo();
            }
            remove => HookHandler._beforeStoreCollisionInfo -= value;
        }

        public static event Delegates.StoreTriggerInfo_BeforeArgs StoreTriggerInfo
        {
            add
            {
                HookHandler._beforeStoreTriggerInfo += value;
                HookHandler.HookStoreTriggerInfo();
            }
            remove => HookHandler._beforeStoreTriggerInfo -= value;
        }

        public static event Delegates.StoreIfDamagingObject_BeforeArgs StoreIfDamagingObject
        {
            add
            {
                HookHandler._beforeStoreIfDamagingObject += value;
                HookHandler.HookStoreIfDamagingObject();
            }
            remove => HookHandler._beforeStoreIfDamagingObject -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnExit_AfterArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.DoCollisionEnter2D_AfterArgs DoCollisionEnter2D
        {
            add
            {
                HookHandler._afterDoCollisionEnter2D += value;
                HookHandler.HookDoCollisionEnter2D();
            }
            remove => HookHandler._afterDoCollisionEnter2D -= value;
        }

        public static event Delegates.DoTriggerEnter2D_AfterArgs DoTriggerEnter2D
        {
            add
            {
                HookHandler._afterDoTriggerEnter2D += value;
                HookHandler.HookDoTriggerEnter2D();
            }
            remove => HookHandler._afterDoTriggerEnter2D -= value;
        }

        public static event Delegates.DoTriggerStay2D_AfterArgs DoTriggerStay2D
        {
            add
            {
                HookHandler._afterDoTriggerStay2D += value;
                HookHandler.HookDoTriggerStay2D();
            }
            remove => HookHandler._afterDoTriggerStay2D -= value;
        }

        public static event Delegates.StoreCollisionInfo_AfterArgs StoreCollisionInfo
        {
            add
            {
                HookHandler._afterStoreCollisionInfo += value;
                HookHandler.HookStoreCollisionInfo();
            }
            remove => HookHandler._afterStoreCollisionInfo -= value;
        }

        public static event Delegates.StoreTriggerInfo_AfterArgs StoreTriggerInfo
        {
            add
            {
                HookHandler._afterStoreTriggerInfo += value;
                HookHandler.HookStoreTriggerInfo();
            }
            remove => HookHandler._afterStoreTriggerInfo -= value;
        }

        public static event Delegates.StoreIfDamagingObject_AfterArgs StoreIfDamagingObject
        {
            add
            {
                HookHandler._afterStoreIfDamagingObject += value;
                HookHandler.HookStoreIfDamagingObject();
            }
            remove => HookHandler._afterStoreIfDamagingObject -= value;
        }

        public static event Delegates.ErrorCheck_AfterArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "Reset", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "Reset", true),
                value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "OnEnter", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "OnEnter", true),
                value);
        }

        public static event Delegates.OnExit_WithArgs OnExit
        {
            add => HookEndpointManager.Add<Delegates.OnExit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "OnExit", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnExit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "OnExit", true),
                value);
        }

        public static event Delegates.DoCollisionEnter2D_WithArgs DoCollisionEnter2D
        {
            add => HookEndpointManager.Add<Delegates.DoCollisionEnter2D_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                    "DoCollisionEnter2D", true), value);
            remove => HookEndpointManager.Remove<Delegates.DoCollisionEnter2D_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                    "DoCollisionEnter2D", true), value);
        }

        public static event Delegates.DoTriggerEnter2D_WithArgs DoTriggerEnter2D
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerEnter2D_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "DoTriggerEnter2D",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerEnter2D_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "DoTriggerEnter2D",
                    true), value);
        }

        public static event Delegates.DoTriggerStay2D_WithArgs DoTriggerStay2D
        {
            add => HookEndpointManager.Add<Delegates.DoTriggerStay2D_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "DoTriggerStay2D",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.DoTriggerStay2D_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "DoTriggerStay2D",
                    true), value);
        }

        public static event Delegates.StoreCollisionInfo_WithArgs StoreCollisionInfo
        {
            add => HookEndpointManager.Add<Delegates.StoreCollisionInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                    "StoreCollisionInfo", true), value);
            remove => HookEndpointManager.Remove<Delegates.StoreCollisionInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                    "StoreCollisionInfo", true), value);
        }

        public static event Delegates.StoreTriggerInfo_WithArgs StoreTriggerInfo
        {
            add => HookEndpointManager.Add<Delegates.StoreTriggerInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "StoreTriggerInfo",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.StoreTriggerInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "StoreTriggerInfo",
                    true), value);
        }

        public static event Delegates.StoreIfDamagingObject_WithArgs StoreIfDamagingObject
        {
            add => HookEndpointManager.Add<Delegates.StoreIfDamagingObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                    "StoreIfDamagingObject", true), value);
            remove => HookEndpointManager.Remove<Delegates.StoreIfDamagingObject_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage),
                    "StoreIfDamagingObject", true), value);
        }

        public static event Delegates.ErrorCheck_WithArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "ErrorCheck",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.ReceivedDamage), "ErrorCheck",
                    true), value);
        }
    }
}