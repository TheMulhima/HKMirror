using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for tk2dSlicedSprite class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dSlicedSprite
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_BorderOnly()
{
if (!HookedList.Contains("get_BorderOnly"))
{
HookedList.Add("get_BorderOnly");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_BorderOnly", true), get_BorderOnly);

}
}
internal static event Delegates.get_BorderOnly_BeforeArgs _beforeget_BorderOnly;
internal static event Delegates.get_BorderOnly_AfterArgs _afterget_BorderOnly;
private static bool get_BorderOnly(Func<tk2dSlicedSprite, bool> orig, tk2dSlicedSprite self)
{
Delegates.Params_get_BorderOnly @params = new() 
{
self = self
};
if (_beforeget_BorderOnly != null)
{
foreach (Delegates.get_BorderOnly_BeforeArgs toInvoke in _beforeget_BorderOnly.GetInvocationList())
{
try
{
_beforeget_BorderOnly?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_BorderOnly != null)
{
foreach (Delegates.get_BorderOnly_AfterArgs toInvoke in _afterget_BorderOnly.GetInvocationList())
{
try
{
retVal = _afterget_BorderOnly.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_BorderOnly()
{
if (!HookedList.Contains("set_BorderOnly"))
{
HookedList.Add("set_BorderOnly");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_BorderOnly", true), set_BorderOnly);

}
}
internal static event Delegates.set_BorderOnly_BeforeArgs _beforeset_BorderOnly;
internal static event Delegates.set_BorderOnly_AfterArgs _afterset_BorderOnly;
private static void set_BorderOnly(Action<tk2dSlicedSprite,  bool> orig, tk2dSlicedSprite self,  bool value)
{
Delegates.Params_set_BorderOnly @params = new() 
{
self = self
, value = value
};
if (_beforeset_BorderOnly != null)
{
foreach (Delegates.set_BorderOnly_BeforeArgs toInvoke in _beforeset_BorderOnly.GetInvocationList())
{
try
{
_beforeset_BorderOnly?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_BorderOnly != null)
{
foreach (Delegates.set_BorderOnly_AfterArgs toInvoke in _afterset_BorderOnly.GetInvocationList())
{
try
{
_afterset_BorderOnly.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_dimensions()
{
if (!HookedList.Contains("get_dimensions"))
{
HookedList.Add("get_dimensions");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_dimensions", true), get_dimensions);

}
}
internal static event Delegates.get_dimensions_BeforeArgs _beforeget_dimensions;
internal static event Delegates.get_dimensions_AfterArgs _afterget_dimensions;
private static UnityEngine.Vector2 get_dimensions(Func<tk2dSlicedSprite, UnityEngine.Vector2> orig, tk2dSlicedSprite self)
{
Delegates.Params_get_dimensions @params = new() 
{
self = self
};
if (_beforeget_dimensions != null)
{
foreach (Delegates.get_dimensions_BeforeArgs toInvoke in _beforeget_dimensions.GetInvocationList())
{
try
{
_beforeget_dimensions?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_dimensions != null)
{
foreach (Delegates.get_dimensions_AfterArgs toInvoke in _afterget_dimensions.GetInvocationList())
{
try
{
retVal = _afterget_dimensions.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_dimensions()
{
if (!HookedList.Contains("set_dimensions"))
{
HookedList.Add("set_dimensions");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_dimensions", true), set_dimensions);

}
}
internal static event Delegates.set_dimensions_BeforeArgs _beforeset_dimensions;
internal static event Delegates.set_dimensions_AfterArgs _afterset_dimensions;
private static void set_dimensions(Action<tk2dSlicedSprite,  UnityEngine.Vector2> orig, tk2dSlicedSprite self,  UnityEngine.Vector2 value)
{
Delegates.Params_set_dimensions @params = new() 
{
self = self
, value = value
};
if (_beforeset_dimensions != null)
{
foreach (Delegates.set_dimensions_BeforeArgs toInvoke in _beforeset_dimensions.GetInvocationList())
{
try
{
_beforeset_dimensions?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_dimensions != null)
{
foreach (Delegates.set_dimensions_AfterArgs toInvoke in _afterset_dimensions.GetInvocationList())
{
try
{
_afterset_dimensions.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetBorder()
{
if (!HookedList.Contains("SetBorder"))
{
HookedList.Add("SetBorder");
On.tk2dSlicedSprite.SetBorder += SetBorder;

}
}
internal static event Delegates.SetBorder_BeforeArgs _beforeSetBorder;
internal static event Delegates.SetBorder_AfterArgs _afterSetBorder;
private static void SetBorder(On.tk2dSlicedSprite.orig_SetBorder orig,tk2dSlicedSprite self,  float left,  float bottom,  float right,  float top)
{
Delegates.Params_SetBorder @params = new() 
{
self = self
, left = left
, bottom = bottom
, right = right
, top = top
};
if (_beforeSetBorder != null)
{
foreach (Delegates.SetBorder_BeforeArgs toInvoke in _beforeSetBorder.GetInvocationList())
{
try
{
_beforeSetBorder?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
left = @params.left;
bottom = @params.bottom;
right = @params.right;
top = @params.top;
orig(self, left, bottom, right, top);
if (_afterSetBorder != null)
{
foreach (Delegates.SetBorder_AfterArgs toInvoke in _afterSetBorder.GetInvocationList())
{
try
{
_afterSetBorder.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_CreateBoxCollider()
{
if (!HookedList.Contains("get_CreateBoxCollider"))
{
HookedList.Add("get_CreateBoxCollider");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_CreateBoxCollider", true), get_CreateBoxCollider);

}
}
internal static event Delegates.get_CreateBoxCollider_BeforeArgs _beforeget_CreateBoxCollider;
internal static event Delegates.get_CreateBoxCollider_AfterArgs _afterget_CreateBoxCollider;
private static bool get_CreateBoxCollider(Func<tk2dSlicedSprite, bool> orig, tk2dSlicedSprite self)
{
Delegates.Params_get_CreateBoxCollider @params = new() 
{
self = self
};
if (_beforeget_CreateBoxCollider != null)
{
foreach (Delegates.get_CreateBoxCollider_BeforeArgs toInvoke in _beforeget_CreateBoxCollider.GetInvocationList())
{
try
{
_beforeget_CreateBoxCollider?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_CreateBoxCollider != null)
{
foreach (Delegates.get_CreateBoxCollider_AfterArgs toInvoke in _afterget_CreateBoxCollider.GetInvocationList())
{
try
{
retVal = _afterget_CreateBoxCollider.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_CreateBoxCollider()
{
if (!HookedList.Contains("set_CreateBoxCollider"))
{
HookedList.Add("set_CreateBoxCollider");
new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_CreateBoxCollider", true), set_CreateBoxCollider);

}
}
internal static event Delegates.set_CreateBoxCollider_BeforeArgs _beforeset_CreateBoxCollider;
internal static event Delegates.set_CreateBoxCollider_AfterArgs _afterset_CreateBoxCollider;
private static void set_CreateBoxCollider(Action<tk2dSlicedSprite,  bool> orig, tk2dSlicedSprite self,  bool value)
{
Delegates.Params_set_CreateBoxCollider @params = new() 
{
self = self
, value = value
};
if (_beforeset_CreateBoxCollider != null)
{
foreach (Delegates.set_CreateBoxCollider_BeforeArgs toInvoke in _beforeset_CreateBoxCollider.GetInvocationList())
{
try
{
_beforeset_CreateBoxCollider?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_CreateBoxCollider != null)
{
foreach (Delegates.set_CreateBoxCollider_AfterArgs toInvoke in _afterset_CreateBoxCollider.GetInvocationList())
{
try
{
_afterset_CreateBoxCollider.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.tk2dSlicedSprite.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.tk2dSlicedSprite.orig_Awake orig,tk2dSlicedSprite self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.tk2dSlicedSprite.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.tk2dSlicedSprite.orig_OnDestroy orig,tk2dSlicedSprite self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetColors()
{
if (!HookedList.Contains("SetColors"))
{
HookedList.Add("SetColors");
On.tk2dSlicedSprite.SetColors += SetColors;

}
}
internal static event Delegates.SetColors_BeforeArgs _beforeSetColors;
internal static event Delegates.SetColors_AfterArgs _afterSetColors;
private static void SetColors(On.tk2dSlicedSprite.orig_SetColors orig,tk2dSlicedSprite self,  UnityEngine.Color32[] dest)
{
Delegates.Params_SetColors @params = new() 
{
self = self
, dest = dest
};
if (_beforeSetColors != null)
{
foreach (Delegates.SetColors_BeforeArgs toInvoke in _beforeSetColors.GetInvocationList())
{
try
{
_beforeSetColors?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
dest = @params.dest;
orig(self, dest);
if (_afterSetColors != null)
{
foreach (Delegates.SetColors_AfterArgs toInvoke in _afterSetColors.GetInvocationList())
{
try
{
_afterSetColors.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetGeometry()
{
if (!HookedList.Contains("SetGeometry"))
{
HookedList.Add("SetGeometry");
On.tk2dSlicedSprite.SetGeometry += SetGeometry;

}
}
internal static event Delegates.SetGeometry_BeforeArgs _beforeSetGeometry;
internal static event Delegates.SetGeometry_AfterArgs _afterSetGeometry;
private static void SetGeometry(On.tk2dSlicedSprite.orig_SetGeometry orig,tk2dSlicedSprite self,  UnityEngine.Vector3[] vertices,  UnityEngine.Vector2[] uvs)
{
Delegates.Params_SetGeometry @params = new() 
{
self = self
, vertices = vertices
, uvs = uvs
};
if (_beforeSetGeometry != null)
{
foreach (Delegates.SetGeometry_BeforeArgs toInvoke in _beforeSetGeometry.GetInvocationList())
{
try
{
_beforeSetGeometry?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
vertices = @params.vertices;
uvs = @params.uvs;
orig(self, vertices, uvs);
if (_afterSetGeometry != null)
{
foreach (Delegates.SetGeometry_AfterArgs toInvoke in _afterSetGeometry.GetInvocationList())
{
try
{
_afterSetGeometry.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetIndices()
{
if (!HookedList.Contains("SetIndices"))
{
HookedList.Add("SetIndices");
On.tk2dSlicedSprite.SetIndices += SetIndices;

}
}
internal static event Delegates.SetIndices_BeforeArgs _beforeSetIndices;
internal static event Delegates.SetIndices_AfterArgs _afterSetIndices;
private static void SetIndices(On.tk2dSlicedSprite.orig_SetIndices orig,tk2dSlicedSprite self)
{
Delegates.Params_SetIndices @params = new() 
{
self = self
};
if (_beforeSetIndices != null)
{
foreach (Delegates.SetIndices_BeforeArgs toInvoke in _beforeSetIndices.GetInvocationList())
{
try
{
_beforeSetIndices?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetIndices != null)
{
foreach (Delegates.SetIndices_AfterArgs toInvoke in _afterSetIndices.GetInvocationList())
{
try
{
_afterSetIndices.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookNearEnough()
{
if (!HookedList.Contains("NearEnough"))
{
HookedList.Add("NearEnough");
On.tk2dSlicedSprite.NearEnough += NearEnough;

}
}
internal static event Delegates.NearEnough_BeforeArgs _beforeNearEnough;
internal static event Delegates.NearEnough_AfterArgs _afterNearEnough;
private static bool NearEnough(On.tk2dSlicedSprite.orig_NearEnough orig,tk2dSlicedSprite self,  float value,  float compValue,  float scale)
{
Delegates.Params_NearEnough @params = new() 
{
self = self
, value = value
, compValue = compValue
, scale = scale
};
if (_beforeNearEnough != null)
{
foreach (Delegates.NearEnough_BeforeArgs toInvoke in _beforeNearEnough.GetInvocationList())
{
try
{
_beforeNearEnough?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
compValue = @params.compValue;
scale = @params.scale;
var retVal = orig(self, value, compValue, scale);
if (_afterNearEnough != null)
{
foreach (Delegates.NearEnough_AfterArgs toInvoke in _afterNearEnough.GetInvocationList())
{
try
{
retVal = _afterNearEnough.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPermanentUpgradeLegacyMode()
{
if (!HookedList.Contains("PermanentUpgradeLegacyMode"))
{
HookedList.Add("PermanentUpgradeLegacyMode");
On.tk2dSlicedSprite.PermanentUpgradeLegacyMode += PermanentUpgradeLegacyMode;

}
}
internal static event Delegates.PermanentUpgradeLegacyMode_BeforeArgs _beforePermanentUpgradeLegacyMode;
internal static event Delegates.PermanentUpgradeLegacyMode_AfterArgs _afterPermanentUpgradeLegacyMode;
private static void PermanentUpgradeLegacyMode(On.tk2dSlicedSprite.orig_PermanentUpgradeLegacyMode orig,tk2dSlicedSprite self)
{
Delegates.Params_PermanentUpgradeLegacyMode @params = new() 
{
self = self
};
if (_beforePermanentUpgradeLegacyMode != null)
{
foreach (Delegates.PermanentUpgradeLegacyMode_BeforeArgs toInvoke in _beforePermanentUpgradeLegacyMode.GetInvocationList())
{
try
{
_beforePermanentUpgradeLegacyMode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPermanentUpgradeLegacyMode != null)
{
foreach (Delegates.PermanentUpgradeLegacyMode_AfterArgs toInvoke in _afterPermanentUpgradeLegacyMode.GetInvocationList())
{
try
{
_afterPermanentUpgradeLegacyMode.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBuild()
{
if (!HookedList.Contains("Build"))
{
HookedList.Add("Build");
On.tk2dSlicedSprite.Build += Build;

}
}
internal static event Delegates.Build_BeforeArgs _beforeBuild;
internal static event Delegates.Build_AfterArgs _afterBuild;
private static void Build(On.tk2dSlicedSprite.orig_Build orig,tk2dSlicedSprite self)
{
Delegates.Params_Build @params = new() 
{
self = self
};
if (_beforeBuild != null)
{
foreach (Delegates.Build_BeforeArgs toInvoke in _beforeBuild.GetInvocationList())
{
try
{
_beforeBuild?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBuild != null)
{
foreach (Delegates.Build_AfterArgs toInvoke in _afterBuild.GetInvocationList())
{
try
{
_afterBuild.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateGeometry()
{
if (!HookedList.Contains("UpdateGeometry"))
{
HookedList.Add("UpdateGeometry");
On.tk2dSlicedSprite.UpdateGeometry += UpdateGeometry;

}
}
internal static event Delegates.UpdateGeometry_BeforeArgs _beforeUpdateGeometry;
internal static event Delegates.UpdateGeometry_AfterArgs _afterUpdateGeometry;
private static void UpdateGeometry(On.tk2dSlicedSprite.orig_UpdateGeometry orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateGeometry @params = new() 
{
self = self
};
if (_beforeUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_BeforeArgs toInvoke in _beforeUpdateGeometry.GetInvocationList())
{
try
{
_beforeUpdateGeometry?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateGeometry != null)
{
foreach (Delegates.UpdateGeometry_AfterArgs toInvoke in _afterUpdateGeometry.GetInvocationList())
{
try
{
_afterUpdateGeometry.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateColors()
{
if (!HookedList.Contains("UpdateColors"))
{
HookedList.Add("UpdateColors");
On.tk2dSlicedSprite.UpdateColors += UpdateColors;

}
}
internal static event Delegates.UpdateColors_BeforeArgs _beforeUpdateColors;
internal static event Delegates.UpdateColors_AfterArgs _afterUpdateColors;
private static void UpdateColors(On.tk2dSlicedSprite.orig_UpdateColors orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateColors @params = new() 
{
self = self
};
if (_beforeUpdateColors != null)
{
foreach (Delegates.UpdateColors_BeforeArgs toInvoke in _beforeUpdateColors.GetInvocationList())
{
try
{
_beforeUpdateColors?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateColors != null)
{
foreach (Delegates.UpdateColors_AfterArgs toInvoke in _afterUpdateColors.GetInvocationList())
{
try
{
_afterUpdateColors.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateVertices()
{
if (!HookedList.Contains("UpdateVertices"))
{
HookedList.Add("UpdateVertices");
On.tk2dSlicedSprite.UpdateVertices += UpdateVertices;

}
}
internal static event Delegates.UpdateVertices_BeforeArgs _beforeUpdateVertices;
internal static event Delegates.UpdateVertices_AfterArgs _afterUpdateVertices;
private static void UpdateVertices(On.tk2dSlicedSprite.orig_UpdateVertices orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateVertices @params = new() 
{
self = self
};
if (_beforeUpdateVertices != null)
{
foreach (Delegates.UpdateVertices_BeforeArgs toInvoke in _beforeUpdateVertices.GetInvocationList())
{
try
{
_beforeUpdateVertices?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateVertices != null)
{
foreach (Delegates.UpdateVertices_AfterArgs toInvoke in _afterUpdateVertices.GetInvocationList())
{
try
{
_afterUpdateVertices.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateIndices()
{
if (!HookedList.Contains("UpdateIndices"))
{
HookedList.Add("UpdateIndices");
On.tk2dSlicedSprite.UpdateIndices += UpdateIndices;

}
}
internal static event Delegates.UpdateIndices_BeforeArgs _beforeUpdateIndices;
internal static event Delegates.UpdateIndices_AfterArgs _afterUpdateIndices;
private static void UpdateIndices(On.tk2dSlicedSprite.orig_UpdateIndices orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateIndices @params = new() 
{
self = self
};
if (_beforeUpdateIndices != null)
{
foreach (Delegates.UpdateIndices_BeforeArgs toInvoke in _beforeUpdateIndices.GetInvocationList())
{
try
{
_beforeUpdateIndices?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateIndices != null)
{
foreach (Delegates.UpdateIndices_AfterArgs toInvoke in _afterUpdateIndices.GetInvocationList())
{
try
{
_afterUpdateIndices.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateColorsImpl()
{
if (!HookedList.Contains("UpdateColorsImpl"))
{
HookedList.Add("UpdateColorsImpl");
On.tk2dSlicedSprite.UpdateColorsImpl += UpdateColorsImpl;

}
}
internal static event Delegates.UpdateColorsImpl_BeforeArgs _beforeUpdateColorsImpl;
internal static event Delegates.UpdateColorsImpl_AfterArgs _afterUpdateColorsImpl;
private static void UpdateColorsImpl(On.tk2dSlicedSprite.orig_UpdateColorsImpl orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateColorsImpl @params = new() 
{
self = self
};
if (_beforeUpdateColorsImpl != null)
{
foreach (Delegates.UpdateColorsImpl_BeforeArgs toInvoke in _beforeUpdateColorsImpl.GetInvocationList())
{
try
{
_beforeUpdateColorsImpl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateColorsImpl != null)
{
foreach (Delegates.UpdateColorsImpl_AfterArgs toInvoke in _afterUpdateColorsImpl.GetInvocationList())
{
try
{
_afterUpdateColorsImpl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateGeometryImpl()
{
if (!HookedList.Contains("UpdateGeometryImpl"))
{
HookedList.Add("UpdateGeometryImpl");
On.tk2dSlicedSprite.UpdateGeometryImpl += UpdateGeometryImpl;

}
}
internal static event Delegates.UpdateGeometryImpl_BeforeArgs _beforeUpdateGeometryImpl;
internal static event Delegates.UpdateGeometryImpl_AfterArgs _afterUpdateGeometryImpl;
private static void UpdateGeometryImpl(On.tk2dSlicedSprite.orig_UpdateGeometryImpl orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateGeometryImpl @params = new() 
{
self = self
};
if (_beforeUpdateGeometryImpl != null)
{
foreach (Delegates.UpdateGeometryImpl_BeforeArgs toInvoke in _beforeUpdateGeometryImpl.GetInvocationList())
{
try
{
_beforeUpdateGeometryImpl?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateGeometryImpl != null)
{
foreach (Delegates.UpdateGeometryImpl_AfterArgs toInvoke in _afterUpdateGeometryImpl.GetInvocationList())
{
try
{
_afterUpdateGeometryImpl.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateCollider()
{
if (!HookedList.Contains("UpdateCollider"))
{
HookedList.Add("UpdateCollider");
On.tk2dSlicedSprite.UpdateCollider += UpdateCollider;

}
}
internal static event Delegates.UpdateCollider_BeforeArgs _beforeUpdateCollider;
internal static event Delegates.UpdateCollider_AfterArgs _afterUpdateCollider;
private static void UpdateCollider(On.tk2dSlicedSprite.orig_UpdateCollider orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateCollider @params = new() 
{
self = self
};
if (_beforeUpdateCollider != null)
{
foreach (Delegates.UpdateCollider_BeforeArgs toInvoke in _beforeUpdateCollider.GetInvocationList())
{
try
{
_beforeUpdateCollider?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateCollider != null)
{
foreach (Delegates.UpdateCollider_AfterArgs toInvoke in _afterUpdateCollider.GetInvocationList())
{
try
{
_afterUpdateCollider.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookCreateCollider()
{
if (!HookedList.Contains("CreateCollider"))
{
HookedList.Add("CreateCollider");
On.tk2dSlicedSprite.CreateCollider += CreateCollider;

}
}
internal static event Delegates.CreateCollider_BeforeArgs _beforeCreateCollider;
internal static event Delegates.CreateCollider_AfterArgs _afterCreateCollider;
private static void CreateCollider(On.tk2dSlicedSprite.orig_CreateCollider orig,tk2dSlicedSprite self)
{
Delegates.Params_CreateCollider @params = new() 
{
self = self
};
if (_beforeCreateCollider != null)
{
foreach (Delegates.CreateCollider_BeforeArgs toInvoke in _beforeCreateCollider.GetInvocationList())
{
try
{
_beforeCreateCollider?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterCreateCollider != null)
{
foreach (Delegates.CreateCollider_AfterArgs toInvoke in _afterCreateCollider.GetInvocationList())
{
try
{
_afterCreateCollider.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateMaterial()
{
if (!HookedList.Contains("UpdateMaterial"))
{
HookedList.Add("UpdateMaterial");
On.tk2dSlicedSprite.UpdateMaterial += UpdateMaterial;

}
}
internal static event Delegates.UpdateMaterial_BeforeArgs _beforeUpdateMaterial;
internal static event Delegates.UpdateMaterial_AfterArgs _afterUpdateMaterial;
private static void UpdateMaterial(On.tk2dSlicedSprite.orig_UpdateMaterial orig,tk2dSlicedSprite self)
{
Delegates.Params_UpdateMaterial @params = new() 
{
self = self
};
if (_beforeUpdateMaterial != null)
{
foreach (Delegates.UpdateMaterial_BeforeArgs toInvoke in _beforeUpdateMaterial.GetInvocationList())
{
try
{
_beforeUpdateMaterial?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateMaterial != null)
{
foreach (Delegates.UpdateMaterial_AfterArgs toInvoke in _afterUpdateMaterial.GetInvocationList())
{
try
{
_afterUpdateMaterial.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetCurrentVertexCount()
{
if (!HookedList.Contains("GetCurrentVertexCount"))
{
HookedList.Add("GetCurrentVertexCount");
On.tk2dSlicedSprite.GetCurrentVertexCount += GetCurrentVertexCount;

}
}
internal static event Delegates.GetCurrentVertexCount_BeforeArgs _beforeGetCurrentVertexCount;
internal static event Delegates.GetCurrentVertexCount_AfterArgs _afterGetCurrentVertexCount;
private static int GetCurrentVertexCount(On.tk2dSlicedSprite.orig_GetCurrentVertexCount orig,tk2dSlicedSprite self)
{
Delegates.Params_GetCurrentVertexCount @params = new() 
{
self = self
};
if (_beforeGetCurrentVertexCount != null)
{
foreach (Delegates.GetCurrentVertexCount_BeforeArgs toInvoke in _beforeGetCurrentVertexCount.GetInvocationList())
{
try
{
_beforeGetCurrentVertexCount?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetCurrentVertexCount != null)
{
foreach (Delegates.GetCurrentVertexCount_AfterArgs toInvoke in _afterGetCurrentVertexCount.GetInvocationList())
{
try
{
retVal = _afterGetCurrentVertexCount.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookReshapeBounds()
{
if (!HookedList.Contains("ReshapeBounds"))
{
HookedList.Add("ReshapeBounds");
On.tk2dSlicedSprite.ReshapeBounds += ReshapeBounds;

}
}
internal static event Delegates.ReshapeBounds_BeforeArgs _beforeReshapeBounds;
internal static event Delegates.ReshapeBounds_AfterArgs _afterReshapeBounds;
private static void ReshapeBounds(On.tk2dSlicedSprite.orig_ReshapeBounds orig,tk2dSlicedSprite self,  UnityEngine.Vector3 dMin,  UnityEngine.Vector3 dMax)
{
Delegates.Params_ReshapeBounds @params = new() 
{
self = self
, dMin = dMin
, dMax = dMax
};
if (_beforeReshapeBounds != null)
{
foreach (Delegates.ReshapeBounds_BeforeArgs toInvoke in _beforeReshapeBounds.GetInvocationList())
{
try
{
_beforeReshapeBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
dMin = @params.dMin;
dMax = @params.dMax;
orig(self, dMin, dMax);
if (_afterReshapeBounds != null)
{
foreach (Delegates.ReshapeBounds_AfterArgs toInvoke in _afterReshapeBounds.GetInvocationList())
{
try
{
_afterReshapeBounds.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_BorderOnly
{
public tk2dSlicedSprite self;
}
public delegate void get_BorderOnly_BeforeArgs(Params_get_BorderOnly args);
public delegate bool get_BorderOnly_AfterArgs(Params_get_BorderOnly args, bool ret);
public delegate bool get_BorderOnly_WithArgs (Func<tk2dSlicedSprite, bool> orig, tk2dSlicedSprite self);
public sealed class Params_set_BorderOnly
{
public tk2dSlicedSprite self;
public bool value;
}
public delegate void set_BorderOnly_BeforeArgs(Params_set_BorderOnly args);
public delegate void set_BorderOnly_AfterArgs(Params_set_BorderOnly args);
public delegate void set_BorderOnly_WithArgs (Action<tk2dSlicedSprite,  bool> orig, tk2dSlicedSprite self,  bool value);
public sealed class Params_get_dimensions
{
public tk2dSlicedSprite self;
}
public delegate void get_dimensions_BeforeArgs(Params_get_dimensions args);
public delegate UnityEngine.Vector2 get_dimensions_AfterArgs(Params_get_dimensions args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 get_dimensions_WithArgs (Func<tk2dSlicedSprite, UnityEngine.Vector2> orig, tk2dSlicedSprite self);
public sealed class Params_set_dimensions
{
public tk2dSlicedSprite self;
public UnityEngine.Vector2 value;
}
public delegate void set_dimensions_BeforeArgs(Params_set_dimensions args);
public delegate void set_dimensions_AfterArgs(Params_set_dimensions args);
public delegate void set_dimensions_WithArgs (Action<tk2dSlicedSprite,  UnityEngine.Vector2> orig, tk2dSlicedSprite self,  UnityEngine.Vector2 value);
public sealed class Params_SetBorder
{
public tk2dSlicedSprite self;
public float left;
public float bottom;
public float right;
public float top;
}
public delegate void SetBorder_BeforeArgs(Params_SetBorder args);
public delegate void SetBorder_AfterArgs(Params_SetBorder args);
public delegate void SetBorder_WithArgs (Action<tk2dSlicedSprite,  float,  float,  float,  float> orig, tk2dSlicedSprite self,  float left,  float bottom,  float right,  float top);
public sealed class Params_get_CreateBoxCollider
{
public tk2dSlicedSprite self;
}
public delegate void get_CreateBoxCollider_BeforeArgs(Params_get_CreateBoxCollider args);
public delegate bool get_CreateBoxCollider_AfterArgs(Params_get_CreateBoxCollider args, bool ret);
public delegate bool get_CreateBoxCollider_WithArgs (Func<tk2dSlicedSprite, bool> orig, tk2dSlicedSprite self);
public sealed class Params_set_CreateBoxCollider
{
public tk2dSlicedSprite self;
public bool value;
}
public delegate void set_CreateBoxCollider_BeforeArgs(Params_set_CreateBoxCollider args);
public delegate void set_CreateBoxCollider_AfterArgs(Params_set_CreateBoxCollider args);
public delegate void set_CreateBoxCollider_WithArgs (Action<tk2dSlicedSprite,  bool> orig, tk2dSlicedSprite self,  bool value);
public sealed class Params_Awake
{
public tk2dSlicedSprite self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_OnDestroy
{
public tk2dSlicedSprite self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_SetColors
{
public tk2dSlicedSprite self;
public UnityEngine.Color32[] dest;
}
public delegate void SetColors_BeforeArgs(Params_SetColors args);
public delegate void SetColors_AfterArgs(Params_SetColors args);
public delegate void SetColors_WithArgs (Action<tk2dSlicedSprite,  UnityEngine.Color32[]> orig, tk2dSlicedSprite self,  UnityEngine.Color32[] dest);
public sealed class Params_SetGeometry
{
public tk2dSlicedSprite self;
public UnityEngine.Vector3[] vertices;
public UnityEngine.Vector2[] uvs;
}
public delegate void SetGeometry_BeforeArgs(Params_SetGeometry args);
public delegate void SetGeometry_AfterArgs(Params_SetGeometry args);
public delegate void SetGeometry_WithArgs (Action<tk2dSlicedSprite,  UnityEngine.Vector3[],  UnityEngine.Vector2[]> orig, tk2dSlicedSprite self,  UnityEngine.Vector3[] vertices,  UnityEngine.Vector2[] uvs);
public sealed class Params_SetIndices
{
public tk2dSlicedSprite self;
}
public delegate void SetIndices_BeforeArgs(Params_SetIndices args);
public delegate void SetIndices_AfterArgs(Params_SetIndices args);
public delegate void SetIndices_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_NearEnough
{
public tk2dSlicedSprite self;
public float value;
public float compValue;
public float scale;
}
public delegate void NearEnough_BeforeArgs(Params_NearEnough args);
public delegate bool NearEnough_AfterArgs(Params_NearEnough args, bool ret);
public delegate bool NearEnough_WithArgs (Func<tk2dSlicedSprite,  float,  float,  float, bool> orig, tk2dSlicedSprite self,  float value,  float compValue,  float scale);
public sealed class Params_PermanentUpgradeLegacyMode
{
public tk2dSlicedSprite self;
}
public delegate void PermanentUpgradeLegacyMode_BeforeArgs(Params_PermanentUpgradeLegacyMode args);
public delegate void PermanentUpgradeLegacyMode_AfterArgs(Params_PermanentUpgradeLegacyMode args);
public delegate void PermanentUpgradeLegacyMode_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_Build
{
public tk2dSlicedSprite self;
}
public delegate void Build_BeforeArgs(Params_Build args);
public delegate void Build_AfterArgs(Params_Build args);
public delegate void Build_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateGeometry
{
public tk2dSlicedSprite self;
}
public delegate void UpdateGeometry_BeforeArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_AfterArgs(Params_UpdateGeometry args);
public delegate void UpdateGeometry_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateColors
{
public tk2dSlicedSprite self;
}
public delegate void UpdateColors_BeforeArgs(Params_UpdateColors args);
public delegate void UpdateColors_AfterArgs(Params_UpdateColors args);
public delegate void UpdateColors_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateVertices
{
public tk2dSlicedSprite self;
}
public delegate void UpdateVertices_BeforeArgs(Params_UpdateVertices args);
public delegate void UpdateVertices_AfterArgs(Params_UpdateVertices args);
public delegate void UpdateVertices_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateIndices
{
public tk2dSlicedSprite self;
}
public delegate void UpdateIndices_BeforeArgs(Params_UpdateIndices args);
public delegate void UpdateIndices_AfterArgs(Params_UpdateIndices args);
public delegate void UpdateIndices_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateColorsImpl
{
public tk2dSlicedSprite self;
}
public delegate void UpdateColorsImpl_BeforeArgs(Params_UpdateColorsImpl args);
public delegate void UpdateColorsImpl_AfterArgs(Params_UpdateColorsImpl args);
public delegate void UpdateColorsImpl_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateGeometryImpl
{
public tk2dSlicedSprite self;
}
public delegate void UpdateGeometryImpl_BeforeArgs(Params_UpdateGeometryImpl args);
public delegate void UpdateGeometryImpl_AfterArgs(Params_UpdateGeometryImpl args);
public delegate void UpdateGeometryImpl_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateCollider
{
public tk2dSlicedSprite self;
}
public delegate void UpdateCollider_BeforeArgs(Params_UpdateCollider args);
public delegate void UpdateCollider_AfterArgs(Params_UpdateCollider args);
public delegate void UpdateCollider_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_CreateCollider
{
public tk2dSlicedSprite self;
}
public delegate void CreateCollider_BeforeArgs(Params_CreateCollider args);
public delegate void CreateCollider_AfterArgs(Params_CreateCollider args);
public delegate void CreateCollider_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_UpdateMaterial
{
public tk2dSlicedSprite self;
}
public delegate void UpdateMaterial_BeforeArgs(Params_UpdateMaterial args);
public delegate void UpdateMaterial_AfterArgs(Params_UpdateMaterial args);
public delegate void UpdateMaterial_WithArgs (Action<tk2dSlicedSprite> orig, tk2dSlicedSprite self);
public sealed class Params_GetCurrentVertexCount
{
public tk2dSlicedSprite self;
}
public delegate void GetCurrentVertexCount_BeforeArgs(Params_GetCurrentVertexCount args);
public delegate int GetCurrentVertexCount_AfterArgs(Params_GetCurrentVertexCount args, int ret);
public delegate int GetCurrentVertexCount_WithArgs (Func<tk2dSlicedSprite, int> orig, tk2dSlicedSprite self);
public sealed class Params_ReshapeBounds
{
public tk2dSlicedSprite self;
public UnityEngine.Vector3 dMin;
public UnityEngine.Vector3 dMax;
}
public delegate void ReshapeBounds_BeforeArgs(Params_ReshapeBounds args);
public delegate void ReshapeBounds_AfterArgs(Params_ReshapeBounds args);
public delegate void ReshapeBounds_WithArgs (Action<tk2dSlicedSprite,  UnityEngine.Vector3,  UnityEngine.Vector3> orig, tk2dSlicedSprite self,  UnityEngine.Vector3 dMin,  UnityEngine.Vector3 dMax);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_BorderOnly_BeforeArgs get_BorderOnly
{
add
{

HookHandler._beforeget_BorderOnly += value;
HookHandler.Hookget_BorderOnly();
}
remove => HookHandler._beforeget_BorderOnly -= value;
}
public static event Delegates.set_BorderOnly_BeforeArgs set_BorderOnly
{
add
{

HookHandler._beforeset_BorderOnly += value;
HookHandler.Hookset_BorderOnly();
}
remove => HookHandler._beforeset_BorderOnly -= value;
}
public static event Delegates.get_dimensions_BeforeArgs get_dimensions
{
add
{

HookHandler._beforeget_dimensions += value;
HookHandler.Hookget_dimensions();
}
remove => HookHandler._beforeget_dimensions -= value;
}
public static event Delegates.set_dimensions_BeforeArgs set_dimensions
{
add
{

HookHandler._beforeset_dimensions += value;
HookHandler.Hookset_dimensions();
}
remove => HookHandler._beforeset_dimensions -= value;
}
public static event Delegates.SetBorder_BeforeArgs SetBorder
{
add
{

HookHandler._beforeSetBorder += value;
HookHandler.HookSetBorder();
}
remove => HookHandler._beforeSetBorder -= value;
}
public static event Delegates.get_CreateBoxCollider_BeforeArgs get_CreateBoxCollider
{
add
{

HookHandler._beforeget_CreateBoxCollider += value;
HookHandler.Hookget_CreateBoxCollider();
}
remove => HookHandler._beforeget_CreateBoxCollider -= value;
}
public static event Delegates.set_CreateBoxCollider_BeforeArgs set_CreateBoxCollider
{
add
{

HookHandler._beforeset_CreateBoxCollider += value;
HookHandler.Hookset_CreateBoxCollider();
}
remove => HookHandler._beforeset_CreateBoxCollider -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
public static event Delegates.SetColors_BeforeArgs SetColors
{
add
{

HookHandler._beforeSetColors += value;
HookHandler.HookSetColors();
}
remove => HookHandler._beforeSetColors -= value;
}
public static event Delegates.SetGeometry_BeforeArgs SetGeometry
{
add
{

HookHandler._beforeSetGeometry += value;
HookHandler.HookSetGeometry();
}
remove => HookHandler._beforeSetGeometry -= value;
}
public static event Delegates.SetIndices_BeforeArgs SetIndices
{
add
{

HookHandler._beforeSetIndices += value;
HookHandler.HookSetIndices();
}
remove => HookHandler._beforeSetIndices -= value;
}
public static event Delegates.NearEnough_BeforeArgs NearEnough
{
add
{

HookHandler._beforeNearEnough += value;
HookHandler.HookNearEnough();
}
remove => HookHandler._beforeNearEnough -= value;
}
public static event Delegates.PermanentUpgradeLegacyMode_BeforeArgs PermanentUpgradeLegacyMode
{
add
{

HookHandler._beforePermanentUpgradeLegacyMode += value;
HookHandler.HookPermanentUpgradeLegacyMode();
}
remove => HookHandler._beforePermanentUpgradeLegacyMode -= value;
}
public static event Delegates.Build_BeforeArgs Build
{
add
{

HookHandler._beforeBuild += value;
HookHandler.HookBuild();
}
remove => HookHandler._beforeBuild -= value;
}
public static event Delegates.UpdateGeometry_BeforeArgs UpdateGeometry
{
add
{

HookHandler._beforeUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._beforeUpdateGeometry -= value;
}
public static event Delegates.UpdateColors_BeforeArgs UpdateColors
{
add
{

HookHandler._beforeUpdateColors += value;
HookHandler.HookUpdateColors();
}
remove => HookHandler._beforeUpdateColors -= value;
}
public static event Delegates.UpdateVertices_BeforeArgs UpdateVertices
{
add
{

HookHandler._beforeUpdateVertices += value;
HookHandler.HookUpdateVertices();
}
remove => HookHandler._beforeUpdateVertices -= value;
}
public static event Delegates.UpdateIndices_BeforeArgs UpdateIndices
{
add
{

HookHandler._beforeUpdateIndices += value;
HookHandler.HookUpdateIndices();
}
remove => HookHandler._beforeUpdateIndices -= value;
}
public static event Delegates.UpdateColorsImpl_BeforeArgs UpdateColorsImpl
{
add
{

HookHandler._beforeUpdateColorsImpl += value;
HookHandler.HookUpdateColorsImpl();
}
remove => HookHandler._beforeUpdateColorsImpl -= value;
}
public static event Delegates.UpdateGeometryImpl_BeforeArgs UpdateGeometryImpl
{
add
{

HookHandler._beforeUpdateGeometryImpl += value;
HookHandler.HookUpdateGeometryImpl();
}
remove => HookHandler._beforeUpdateGeometryImpl -= value;
}
public static event Delegates.UpdateCollider_BeforeArgs UpdateCollider
{
add
{

HookHandler._beforeUpdateCollider += value;
HookHandler.HookUpdateCollider();
}
remove => HookHandler._beforeUpdateCollider -= value;
}
public static event Delegates.CreateCollider_BeforeArgs CreateCollider
{
add
{

HookHandler._beforeCreateCollider += value;
HookHandler.HookCreateCollider();
}
remove => HookHandler._beforeCreateCollider -= value;
}
public static event Delegates.UpdateMaterial_BeforeArgs UpdateMaterial
{
add
{

HookHandler._beforeUpdateMaterial += value;
HookHandler.HookUpdateMaterial();
}
remove => HookHandler._beforeUpdateMaterial -= value;
}
public static event Delegates.GetCurrentVertexCount_BeforeArgs GetCurrentVertexCount
{
add
{

HookHandler._beforeGetCurrentVertexCount += value;
HookHandler.HookGetCurrentVertexCount();
}
remove => HookHandler._beforeGetCurrentVertexCount -= value;
}
public static event Delegates.ReshapeBounds_BeforeArgs ReshapeBounds
{
add
{

HookHandler._beforeReshapeBounds += value;
HookHandler.HookReshapeBounds();
}
remove => HookHandler._beforeReshapeBounds -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_BorderOnly_AfterArgs get_BorderOnly
{
add
{

HookHandler._afterget_BorderOnly += value;
HookHandler.Hookget_BorderOnly();
}
remove => HookHandler._afterget_BorderOnly -= value;
}
public static event Delegates.set_BorderOnly_AfterArgs set_BorderOnly
{
add
{

HookHandler._afterset_BorderOnly += value;
HookHandler.Hookset_BorderOnly();
}
remove => HookHandler._afterset_BorderOnly -= value;
}
public static event Delegates.get_dimensions_AfterArgs get_dimensions
{
add
{

HookHandler._afterget_dimensions += value;
HookHandler.Hookget_dimensions();
}
remove => HookHandler._afterget_dimensions -= value;
}
public static event Delegates.set_dimensions_AfterArgs set_dimensions
{
add
{

HookHandler._afterset_dimensions += value;
HookHandler.Hookset_dimensions();
}
remove => HookHandler._afterset_dimensions -= value;
}
public static event Delegates.SetBorder_AfterArgs SetBorder
{
add
{

HookHandler._afterSetBorder += value;
HookHandler.HookSetBorder();
}
remove => HookHandler._afterSetBorder -= value;
}
public static event Delegates.get_CreateBoxCollider_AfterArgs get_CreateBoxCollider
{
add
{

HookHandler._afterget_CreateBoxCollider += value;
HookHandler.Hookget_CreateBoxCollider();
}
remove => HookHandler._afterget_CreateBoxCollider -= value;
}
public static event Delegates.set_CreateBoxCollider_AfterArgs set_CreateBoxCollider
{
add
{

HookHandler._afterset_CreateBoxCollider += value;
HookHandler.Hookset_CreateBoxCollider();
}
remove => HookHandler._afterset_CreateBoxCollider -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
public static event Delegates.SetColors_AfterArgs SetColors
{
add
{

HookHandler._afterSetColors += value;
HookHandler.HookSetColors();
}
remove => HookHandler._afterSetColors -= value;
}
public static event Delegates.SetGeometry_AfterArgs SetGeometry
{
add
{

HookHandler._afterSetGeometry += value;
HookHandler.HookSetGeometry();
}
remove => HookHandler._afterSetGeometry -= value;
}
public static event Delegates.SetIndices_AfterArgs SetIndices
{
add
{

HookHandler._afterSetIndices += value;
HookHandler.HookSetIndices();
}
remove => HookHandler._afterSetIndices -= value;
}
public static event Delegates.NearEnough_AfterArgs NearEnough
{
add
{

HookHandler._afterNearEnough += value;
HookHandler.HookNearEnough();
}
remove => HookHandler._afterNearEnough -= value;
}
public static event Delegates.PermanentUpgradeLegacyMode_AfterArgs PermanentUpgradeLegacyMode
{
add
{

HookHandler._afterPermanentUpgradeLegacyMode += value;
HookHandler.HookPermanentUpgradeLegacyMode();
}
remove => HookHandler._afterPermanentUpgradeLegacyMode -= value;
}
public static event Delegates.Build_AfterArgs Build
{
add
{

HookHandler._afterBuild += value;
HookHandler.HookBuild();
}
remove => HookHandler._afterBuild -= value;
}
public static event Delegates.UpdateGeometry_AfterArgs UpdateGeometry
{
add
{

HookHandler._afterUpdateGeometry += value;
HookHandler.HookUpdateGeometry();
}
remove => HookHandler._afterUpdateGeometry -= value;
}
public static event Delegates.UpdateColors_AfterArgs UpdateColors
{
add
{

HookHandler._afterUpdateColors += value;
HookHandler.HookUpdateColors();
}
remove => HookHandler._afterUpdateColors -= value;
}
public static event Delegates.UpdateVertices_AfterArgs UpdateVertices
{
add
{

HookHandler._afterUpdateVertices += value;
HookHandler.HookUpdateVertices();
}
remove => HookHandler._afterUpdateVertices -= value;
}
public static event Delegates.UpdateIndices_AfterArgs UpdateIndices
{
add
{

HookHandler._afterUpdateIndices += value;
HookHandler.HookUpdateIndices();
}
remove => HookHandler._afterUpdateIndices -= value;
}
public static event Delegates.UpdateColorsImpl_AfterArgs UpdateColorsImpl
{
add
{

HookHandler._afterUpdateColorsImpl += value;
HookHandler.HookUpdateColorsImpl();
}
remove => HookHandler._afterUpdateColorsImpl -= value;
}
public static event Delegates.UpdateGeometryImpl_AfterArgs UpdateGeometryImpl
{
add
{

HookHandler._afterUpdateGeometryImpl += value;
HookHandler.HookUpdateGeometryImpl();
}
remove => HookHandler._afterUpdateGeometryImpl -= value;
}
public static event Delegates.UpdateCollider_AfterArgs UpdateCollider
{
add
{

HookHandler._afterUpdateCollider += value;
HookHandler.HookUpdateCollider();
}
remove => HookHandler._afterUpdateCollider -= value;
}
public static event Delegates.CreateCollider_AfterArgs CreateCollider
{
add
{

HookHandler._afterCreateCollider += value;
HookHandler.HookCreateCollider();
}
remove => HookHandler._afterCreateCollider -= value;
}
public static event Delegates.UpdateMaterial_AfterArgs UpdateMaterial
{
add
{

HookHandler._afterUpdateMaterial += value;
HookHandler.HookUpdateMaterial();
}
remove => HookHandler._afterUpdateMaterial -= value;
}
public static event Delegates.GetCurrentVertexCount_AfterArgs GetCurrentVertexCount
{
add
{

HookHandler._afterGetCurrentVertexCount += value;
HookHandler.HookGetCurrentVertexCount();
}
remove => HookHandler._afterGetCurrentVertexCount -= value;
}
public static event Delegates.ReshapeBounds_AfterArgs ReshapeBounds
{
add
{

HookHandler._afterReshapeBounds += value;
HookHandler.HookReshapeBounds();
}
remove => HookHandler._afterReshapeBounds -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_BorderOnly_WithArgs get_BorderOnly
{
add => HookEndpointManager.Add<Delegates.get_BorderOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_BorderOnly", true), value);
remove => HookEndpointManager.Remove<Delegates.get_BorderOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_BorderOnly", true), value);
}
public static event Delegates.set_BorderOnly_WithArgs set_BorderOnly
{
add => HookEndpointManager.Add<Delegates.set_BorderOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_BorderOnly", true), value);
remove => HookEndpointManager.Remove<Delegates.set_BorderOnly_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_BorderOnly", true), value);
}
public static event Delegates.get_dimensions_WithArgs get_dimensions
{
add => HookEndpointManager.Add<Delegates.get_dimensions_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_dimensions", true), value);
remove => HookEndpointManager.Remove<Delegates.get_dimensions_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_dimensions", true), value);
}
public static event Delegates.set_dimensions_WithArgs set_dimensions
{
add => HookEndpointManager.Add<Delegates.set_dimensions_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_dimensions", true), value);
remove => HookEndpointManager.Remove<Delegates.set_dimensions_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_dimensions", true), value);
}
public static event On.tk2dSlicedSprite.hook_SetBorder SetBorder
{
add => On.tk2dSlicedSprite.SetBorder += value;
remove => On.tk2dSlicedSprite.SetBorder -= value;
}
public static event Delegates.get_CreateBoxCollider_WithArgs get_CreateBoxCollider
{
add => HookEndpointManager.Add<Delegates.get_CreateBoxCollider_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_CreateBoxCollider", true), value);
remove => HookEndpointManager.Remove<Delegates.get_CreateBoxCollider_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "get_CreateBoxCollider", true), value);
}
public static event Delegates.set_CreateBoxCollider_WithArgs set_CreateBoxCollider
{
add => HookEndpointManager.Add<Delegates.set_CreateBoxCollider_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_CreateBoxCollider", true), value);
remove => HookEndpointManager.Remove<Delegates.set_CreateBoxCollider_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(tk2dSlicedSprite), "set_CreateBoxCollider", true), value);
}
public static event On.tk2dSlicedSprite.hook_Awake Awake
{
add => On.tk2dSlicedSprite.Awake += value;
remove => On.tk2dSlicedSprite.Awake -= value;
}
public static event On.tk2dSlicedSprite.hook_OnDestroy OnDestroy
{
add => On.tk2dSlicedSprite.OnDestroy += value;
remove => On.tk2dSlicedSprite.OnDestroy -= value;
}
public static event On.tk2dSlicedSprite.hook_SetColors SetColors
{
add => On.tk2dSlicedSprite.SetColors += value;
remove => On.tk2dSlicedSprite.SetColors -= value;
}
public static event On.tk2dSlicedSprite.hook_SetGeometry SetGeometry
{
add => On.tk2dSlicedSprite.SetGeometry += value;
remove => On.tk2dSlicedSprite.SetGeometry -= value;
}
public static event On.tk2dSlicedSprite.hook_SetIndices SetIndices
{
add => On.tk2dSlicedSprite.SetIndices += value;
remove => On.tk2dSlicedSprite.SetIndices -= value;
}
public static event On.tk2dSlicedSprite.hook_NearEnough NearEnough
{
add => On.tk2dSlicedSprite.NearEnough += value;
remove => On.tk2dSlicedSprite.NearEnough -= value;
}
public static event On.tk2dSlicedSprite.hook_PermanentUpgradeLegacyMode PermanentUpgradeLegacyMode
{
add => On.tk2dSlicedSprite.PermanentUpgradeLegacyMode += value;
remove => On.tk2dSlicedSprite.PermanentUpgradeLegacyMode -= value;
}
public static event On.tk2dSlicedSprite.hook_Build Build
{
add => On.tk2dSlicedSprite.Build += value;
remove => On.tk2dSlicedSprite.Build -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateGeometry UpdateGeometry
{
add => On.tk2dSlicedSprite.UpdateGeometry += value;
remove => On.tk2dSlicedSprite.UpdateGeometry -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateColors UpdateColors
{
add => On.tk2dSlicedSprite.UpdateColors += value;
remove => On.tk2dSlicedSprite.UpdateColors -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateVertices UpdateVertices
{
add => On.tk2dSlicedSprite.UpdateVertices += value;
remove => On.tk2dSlicedSprite.UpdateVertices -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateIndices UpdateIndices
{
add => On.tk2dSlicedSprite.UpdateIndices += value;
remove => On.tk2dSlicedSprite.UpdateIndices -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateColorsImpl UpdateColorsImpl
{
add => On.tk2dSlicedSprite.UpdateColorsImpl += value;
remove => On.tk2dSlicedSprite.UpdateColorsImpl -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateGeometryImpl UpdateGeometryImpl
{
add => On.tk2dSlicedSprite.UpdateGeometryImpl += value;
remove => On.tk2dSlicedSprite.UpdateGeometryImpl -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateCollider UpdateCollider
{
add => On.tk2dSlicedSprite.UpdateCollider += value;
remove => On.tk2dSlicedSprite.UpdateCollider -= value;
}
public static event On.tk2dSlicedSprite.hook_CreateCollider CreateCollider
{
add => On.tk2dSlicedSprite.CreateCollider += value;
remove => On.tk2dSlicedSprite.CreateCollider -= value;
}
public static event On.tk2dSlicedSprite.hook_UpdateMaterial UpdateMaterial
{
add => On.tk2dSlicedSprite.UpdateMaterial += value;
remove => On.tk2dSlicedSprite.UpdateMaterial -= value;
}
public static event On.tk2dSlicedSprite.hook_GetCurrentVertexCount GetCurrentVertexCount
{
add => On.tk2dSlicedSprite.GetCurrentVertexCount += value;
remove => On.tk2dSlicedSprite.GetCurrentVertexCount -= value;
}
public static event On.tk2dSlicedSprite.hook_ReshapeBounds ReshapeBounds
{
add => On.tk2dSlicedSprite.ReshapeBounds += value;
remove => On.tk2dSlicedSprite.ReshapeBounds -= value;
}
}

}
