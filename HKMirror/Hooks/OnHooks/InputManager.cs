using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for InputManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnInputManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_CommandWasPressed()
        {
            if (!HookedList.Contains("get_CommandWasPressed"))
            {
                HookedList.Add("get_CommandWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_CommandWasPressed", false),
                    get_CommandWasPressed);
            }
        }

        internal static event Delegates.get_CommandWasPressed_BeforeArgs _beforeget_CommandWasPressed;
        internal static event Delegates.get_CommandWasPressed_AfterArgs _afterget_CommandWasPressed;

        private static bool get_CommandWasPressed(Func<bool> orig)
        {
            if (_beforeget_CommandWasPressed != null)
                foreach (Delegates.get_CommandWasPressed_BeforeArgs toInvoke in _beforeget_CommandWasPressed
                             .GetInvocationList())
                    try
                    {
                        _beforeget_CommandWasPressed?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_CommandWasPressed != null)
                foreach (Delegates.get_CommandWasPressed_AfterArgs toInvoke in _afterget_CommandWasPressed
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_CommandWasPressed.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_CommandWasPressed()
        {
            if (!HookedList.Contains("set_CommandWasPressed"))
            {
                HookedList.Add("set_CommandWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_CommandWasPressed", false),
                    set_CommandWasPressed);
            }
        }

        internal static event Delegates.set_CommandWasPressed_BeforeArgs _beforeset_CommandWasPressed;
        internal static event Delegates.set_CommandWasPressed_AfterArgs _afterset_CommandWasPressed;

        private static void set_CommandWasPressed(Action<bool> orig, bool value)
        {
            Delegates.Params_set_CommandWasPressed @params = new()
            {
                value = value
            };
            if (_beforeset_CommandWasPressed != null)
                foreach (Delegates.set_CommandWasPressed_BeforeArgs toInvoke in _beforeset_CommandWasPressed
                             .GetInvocationList())
                    try
                    {
                        _beforeset_CommandWasPressed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_CommandWasPressed != null)
                foreach (Delegates.set_CommandWasPressed_AfterArgs toInvoke in _afterset_CommandWasPressed
                             .GetInvocationList())
                    try
                    {
                        _afterset_CommandWasPressed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_InvertYAxis()
        {
            if (!HookedList.Contains("get_InvertYAxis"))
            {
                HookedList.Add("get_InvertYAxis");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_InvertYAxis", false),
                    get_InvertYAxis);
            }
        }

        internal static event Delegates.get_InvertYAxis_BeforeArgs _beforeget_InvertYAxis;
        internal static event Delegates.get_InvertYAxis_AfterArgs _afterget_InvertYAxis;

        private static bool get_InvertYAxis(Func<bool> orig)
        {
            if (_beforeget_InvertYAxis != null)
                foreach (Delegates.get_InvertYAxis_BeforeArgs toInvoke in _beforeget_InvertYAxis.GetInvocationList())
                    try
                    {
                        _beforeget_InvertYAxis?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_InvertYAxis != null)
                foreach (Delegates.get_InvertYAxis_AfterArgs toInvoke in _afterget_InvertYAxis.GetInvocationList())
                    try
                    {
                        retVal = _afterget_InvertYAxis.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_InvertYAxis()
        {
            if (!HookedList.Contains("set_InvertYAxis"))
            {
                HookedList.Add("set_InvertYAxis");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_InvertYAxis", false),
                    set_InvertYAxis);
            }
        }

        internal static event Delegates.set_InvertYAxis_BeforeArgs _beforeset_InvertYAxis;
        internal static event Delegates.set_InvertYAxis_AfterArgs _afterset_InvertYAxis;

        private static void set_InvertYAxis(Action<bool> orig, bool value)
        {
            Delegates.Params_set_InvertYAxis @params = new()
            {
                value = value
            };
            if (_beforeset_InvertYAxis != null)
                foreach (Delegates.set_InvertYAxis_BeforeArgs toInvoke in _beforeset_InvertYAxis.GetInvocationList())
                    try
                    {
                        _beforeset_InvertYAxis?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_InvertYAxis != null)
                foreach (Delegates.set_InvertYAxis_AfterArgs toInvoke in _afterset_InvertYAxis.GetInvocationList())
                    try
                    {
                        _afterset_InvertYAxis.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsSetup()
        {
            if (!HookedList.Contains("get_IsSetup"))
            {
                HookedList.Add("get_IsSetup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_IsSetup", false), get_IsSetup);
            }
        }

        internal static event Delegates.get_IsSetup_BeforeArgs _beforeget_IsSetup;
        internal static event Delegates.get_IsSetup_AfterArgs _afterget_IsSetup;

        private static bool get_IsSetup(Func<bool> orig)
        {
            if (_beforeget_IsSetup != null)
                foreach (Delegates.get_IsSetup_BeforeArgs toInvoke in _beforeget_IsSetup.GetInvocationList())
                    try
                    {
                        _beforeget_IsSetup?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsSetup != null)
                foreach (Delegates.get_IsSetup_AfterArgs toInvoke in _afterget_IsSetup.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsSetup.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IsSetup()
        {
            if (!HookedList.Contains("set_IsSetup"))
            {
                HookedList.Add("set_IsSetup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_IsSetup", false), set_IsSetup);
            }
        }

        internal static event Delegates.set_IsSetup_BeforeArgs _beforeset_IsSetup;
        internal static event Delegates.set_IsSetup_AfterArgs _afterset_IsSetup;

        private static void set_IsSetup(Action<bool> orig, bool value)
        {
            Delegates.Params_set_IsSetup @params = new()
            {
                value = value
            };
            if (_beforeset_IsSetup != null)
                foreach (Delegates.set_IsSetup_BeforeArgs toInvoke in _beforeset_IsSetup.GetInvocationList())
                    try
                    {
                        _beforeset_IsSetup?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_IsSetup != null)
                foreach (Delegates.set_IsSetup_AfterArgs toInvoke in _afterset_IsSetup.GetInvocationList())
                    try
                    {
                        _afterset_IsSetup.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_MouseProvider()
        {
            if (!HookedList.Contains("get_MouseProvider"))
            {
                HookedList.Add("get_MouseProvider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_MouseProvider", false),
                    get_MouseProvider);
            }
        }

        internal static event Delegates.get_MouseProvider_BeforeArgs _beforeget_MouseProvider;
        internal static event Delegates.get_MouseProvider_AfterArgs _afterget_MouseProvider;

        private static IMouseProvider get_MouseProvider(Func<IMouseProvider> orig)
        {
            if (_beforeget_MouseProvider != null)
                foreach (Delegates.get_MouseProvider_BeforeArgs toInvoke in
                         _beforeget_MouseProvider.GetInvocationList())
                    try
                    {
                        _beforeget_MouseProvider?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_MouseProvider != null)
                foreach (Delegates.get_MouseProvider_AfterArgs toInvoke in _afterget_MouseProvider.GetInvocationList())
                    try
                    {
                        retVal = _afterget_MouseProvider.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_MouseProvider()
        {
            if (!HookedList.Contains("set_MouseProvider"))
            {
                HookedList.Add("set_MouseProvider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_MouseProvider", false),
                    set_MouseProvider);
            }
        }

        internal static event Delegates.set_MouseProvider_BeforeArgs _beforeset_MouseProvider;
        internal static event Delegates.set_MouseProvider_AfterArgs _afterset_MouseProvider;

        private static void set_MouseProvider(Action<IMouseProvider> orig, IMouseProvider value)
        {
            Delegates.Params_set_MouseProvider @params = new()
            {
                value = value
            };
            if (_beforeset_MouseProvider != null)
                foreach (Delegates.set_MouseProvider_BeforeArgs toInvoke in
                         _beforeset_MouseProvider.GetInvocationList())
                    try
                    {
                        _beforeset_MouseProvider?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_MouseProvider != null)
                foreach (Delegates.set_MouseProvider_AfterArgs toInvoke in _afterset_MouseProvider.GetInvocationList())
                    try
                    {
                        _afterset_MouseProvider.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_KeyboardProvider()
        {
            if (!HookedList.Contains("get_KeyboardProvider"))
            {
                HookedList.Add("get_KeyboardProvider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_KeyboardProvider", false),
                    get_KeyboardProvider);
            }
        }

        internal static event Delegates.get_KeyboardProvider_BeforeArgs _beforeget_KeyboardProvider;
        internal static event Delegates.get_KeyboardProvider_AfterArgs _afterget_KeyboardProvider;

        private static IKeyboardProvider get_KeyboardProvider(Func<IKeyboardProvider> orig)
        {
            if (_beforeget_KeyboardProvider != null)
                foreach (Delegates.get_KeyboardProvider_BeforeArgs toInvoke in _beforeget_KeyboardProvider
                             .GetInvocationList())
                    try
                    {
                        _beforeget_KeyboardProvider?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_KeyboardProvider != null)
                foreach (Delegates.get_KeyboardProvider_AfterArgs toInvoke in _afterget_KeyboardProvider
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_KeyboardProvider.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_KeyboardProvider()
        {
            if (!HookedList.Contains("set_KeyboardProvider"))
            {
                HookedList.Add("set_KeyboardProvider");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_KeyboardProvider", false),
                    set_KeyboardProvider);
            }
        }

        internal static event Delegates.set_KeyboardProvider_BeforeArgs _beforeset_KeyboardProvider;
        internal static event Delegates.set_KeyboardProvider_AfterArgs _afterset_KeyboardProvider;

        private static void set_KeyboardProvider(Action<IKeyboardProvider> orig, IKeyboardProvider value)
        {
            Delegates.Params_set_KeyboardProvider @params = new()
            {
                value = value
            };
            if (_beforeset_KeyboardProvider != null)
                foreach (Delegates.set_KeyboardProvider_BeforeArgs toInvoke in _beforeset_KeyboardProvider
                             .GetInvocationList())
                    try
                    {
                        _beforeset_KeyboardProvider?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_KeyboardProvider != null)
                foreach (Delegates.set_KeyboardProvider_AfterArgs toInvoke in _afterset_KeyboardProvider
                             .GetInvocationList())
                    try
                    {
                        _afterset_KeyboardProvider.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Platform()
        {
            if (!HookedList.Contains("get_Platform"))
            {
                HookedList.Add("get_Platform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_Platform", false), get_Platform);
            }
        }

        internal static event Delegates.get_Platform_BeforeArgs _beforeget_Platform;
        internal static event Delegates.get_Platform_AfterArgs _afterget_Platform;

        private static string get_Platform(Func<string> orig)
        {
            if (_beforeget_Platform != null)
                foreach (Delegates.get_Platform_BeforeArgs toInvoke in _beforeget_Platform.GetInvocationList())
                    try
                    {
                        _beforeget_Platform?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_Platform != null)
                foreach (Delegates.get_Platform_AfterArgs toInvoke in _afterget_Platform.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Platform.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Platform()
        {
            if (!HookedList.Contains("set_Platform"))
            {
                HookedList.Add("set_Platform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_Platform", false), set_Platform);
            }
        }

        internal static event Delegates.set_Platform_BeforeArgs _beforeset_Platform;
        internal static event Delegates.set_Platform_AfterArgs _afterset_Platform;

        private static void set_Platform(Action<string> orig, string value)
        {
            Delegates.Params_set_Platform @params = new()
            {
                value = value
            };
            if (_beforeset_Platform != null)
                foreach (Delegates.set_Platform_BeforeArgs toInvoke in _beforeset_Platform.GetInvocationList())
                    try
                    {
                        _beforeset_Platform?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_Platform != null)
                foreach (Delegates.set_Platform_AfterArgs toInvoke in _afterset_Platform.GetInvocationList())
                    try
                    {
                        _afterset_Platform.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_MenuWasPressed()
        {
            if (!HookedList.Contains("get_MenuWasPressed"))
            {
                HookedList.Add("get_MenuWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_MenuWasPressed", false),
                    get_MenuWasPressed);
            }
        }

        internal static event Delegates.get_MenuWasPressed_BeforeArgs _beforeget_MenuWasPressed;
        internal static event Delegates.get_MenuWasPressed_AfterArgs _afterget_MenuWasPressed;

        private static bool get_MenuWasPressed(Func<bool> orig)
        {
            if (_beforeget_MenuWasPressed != null)
                foreach (Delegates.get_MenuWasPressed_BeforeArgs toInvoke in
                         _beforeget_MenuWasPressed.GetInvocationList())
                    try
                    {
                        _beforeget_MenuWasPressed?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_MenuWasPressed != null)
                foreach (Delegates.get_MenuWasPressed_AfterArgs toInvoke in
                         _afterget_MenuWasPressed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_MenuWasPressed.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetupInternal()
        {
            if (!HookedList.Contains("SetupInternal"))
            {
                HookedList.Add("SetupInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "SetupInternal", false), SetupInternal);
            }
        }

        internal static event Delegates.SetupInternal_BeforeArgs _beforeSetupInternal;
        internal static event Delegates.SetupInternal_AfterArgs _afterSetupInternal;

        private static bool SetupInternal(Func<bool> orig)
        {
            if (_beforeSetupInternal != null)
                foreach (Delegates.SetupInternal_BeforeArgs toInvoke in _beforeSetupInternal.GetInvocationList())
                    try
                    {
                        _beforeSetupInternal?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterSetupInternal != null)
                foreach (Delegates.SetupInternal_AfterArgs toInvoke in _afterSetupInternal.GetInvocationList())
                    try
                    {
                        retVal = _afterSetupInternal.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookResetInternal()
        {
            if (!HookedList.Contains("ResetInternal"))
            {
                HookedList.Add("ResetInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "ResetInternal", false), ResetInternal);
            }
        }

        internal static event Delegates.ResetInternal_BeforeArgs _beforeResetInternal;
        internal static event Delegates.ResetInternal_AfterArgs _afterResetInternal;

        private static void ResetInternal(Action orig)
        {
            if (_beforeResetInternal != null)
                foreach (Delegates.ResetInternal_BeforeArgs toInvoke in _beforeResetInternal.GetInvocationList())
                    try
                    {
                        _beforeResetInternal?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterResetInternal != null)
                foreach (Delegates.ResetInternal_AfterArgs toInvoke in _afterResetInternal.GetInvocationList())
                    try
                    {
                        _afterResetInternal.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "Update", false), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action orig)
        {
            if (_beforeUpdate != null)
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                    try
                    {
                        _beforeUpdate?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterUpdate != null)
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                    try
                    {
                        _afterUpdate.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateInternal()
        {
            if (!HookedList.Contains("UpdateInternal"))
            {
                HookedList.Add("UpdateInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateInternal", false), UpdateInternal);
            }
        }

        internal static event Delegates.UpdateInternal_BeforeArgs _beforeUpdateInternal;
        internal static event Delegates.UpdateInternal_AfterArgs _afterUpdateInternal;

        private static void UpdateInternal(Action orig)
        {
            if (_beforeUpdateInternal != null)
                foreach (Delegates.UpdateInternal_BeforeArgs toInvoke in _beforeUpdateInternal.GetInvocationList())
                    try
                    {
                        _beforeUpdateInternal?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterUpdateInternal != null)
                foreach (Delegates.UpdateInternal_AfterArgs toInvoke in _afterUpdateInternal.GetInvocationList())
                    try
                    {
                        _afterUpdateInternal.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReload()
        {
            if (!HookedList.Contains("Reload"))
            {
                HookedList.Add("Reload");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "Reload", false), Reload);
            }
        }

        internal static event Delegates.Reload_BeforeArgs _beforeReload;
        internal static event Delegates.Reload_AfterArgs _afterReload;

        private static void Reload(Action orig)
        {
            if (_beforeReload != null)
                foreach (Delegates.Reload_BeforeArgs toInvoke in _beforeReload.GetInvocationList())
                    try
                    {
                        _beforeReload?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterReload != null)
                foreach (Delegates.Reload_AfterArgs toInvoke in _afterReload.GetInvocationList())
                    try
                    {
                        _afterReload.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAssertIsSetup()
        {
            if (!HookedList.Contains("AssertIsSetup"))
            {
                HookedList.Add("AssertIsSetup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "AssertIsSetup", false), AssertIsSetup);
            }
        }

        internal static event Delegates.AssertIsSetup_BeforeArgs _beforeAssertIsSetup;
        internal static event Delegates.AssertIsSetup_AfterArgs _afterAssertIsSetup;

        private static void AssertIsSetup(Action orig)
        {
            if (_beforeAssertIsSetup != null)
                foreach (Delegates.AssertIsSetup_BeforeArgs toInvoke in _beforeAssertIsSetup.GetInvocationList())
                    try
                    {
                        _beforeAssertIsSetup?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterAssertIsSetup != null)
                foreach (Delegates.AssertIsSetup_AfterArgs toInvoke in _afterAssertIsSetup.GetInvocationList())
                    try
                    {
                        _afterAssertIsSetup.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetZeroTickOnAllControls()
        {
            if (!HookedList.Contains("SetZeroTickOnAllControls"))
            {
                HookedList.Add("SetZeroTickOnAllControls");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "SetZeroTickOnAllControls", false),
                    SetZeroTickOnAllControls);
            }
        }

        internal static event Delegates.SetZeroTickOnAllControls_BeforeArgs _beforeSetZeroTickOnAllControls;
        internal static event Delegates.SetZeroTickOnAllControls_AfterArgs _afterSetZeroTickOnAllControls;

        private static void SetZeroTickOnAllControls(Action orig)
        {
            if (_beforeSetZeroTickOnAllControls != null)
                foreach (Delegates.SetZeroTickOnAllControls_BeforeArgs toInvoke in _beforeSetZeroTickOnAllControls
                             .GetInvocationList())
                    try
                    {
                        _beforeSetZeroTickOnAllControls?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterSetZeroTickOnAllControls != null)
                foreach (Delegates.SetZeroTickOnAllControls_AfterArgs toInvoke in _afterSetZeroTickOnAllControls
                             .GetInvocationList())
                    try
                    {
                        _afterSetZeroTickOnAllControls.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearInputState()
        {
            if (!HookedList.Contains("ClearInputState"))
            {
                HookedList.Add("ClearInputState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "ClearInputState", false),
                    ClearInputState);
            }
        }

        internal static event Delegates.ClearInputState_BeforeArgs _beforeClearInputState;
        internal static event Delegates.ClearInputState_AfterArgs _afterClearInputState;

        private static void ClearInputState(Action orig)
        {
            if (_beforeClearInputState != null)
                foreach (Delegates.ClearInputState_BeforeArgs toInvoke in _beforeClearInputState.GetInvocationList())
                    try
                    {
                        _beforeClearInputState?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterClearInputState != null)
                foreach (Delegates.ClearInputState_AfterArgs toInvoke in _afterClearInputState.GetInvocationList())
                    try
                    {
                        _afterClearInputState.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationFocus()
        {
            if (!HookedList.Contains("OnApplicationFocus"))
            {
                HookedList.Add("OnApplicationFocus");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationFocus", false),
                    OnApplicationFocus);
            }
        }

        internal static event Delegates.OnApplicationFocus_BeforeArgs _beforeOnApplicationFocus;
        internal static event Delegates.OnApplicationFocus_AfterArgs _afterOnApplicationFocus;

        private static void OnApplicationFocus(Action<bool> orig, bool focusState)
        {
            Delegates.Params_OnApplicationFocus @params = new()
            {
                focusState = focusState
            };
            if (_beforeOnApplicationFocus != null)
                foreach (Delegates.OnApplicationFocus_BeforeArgs toInvoke in
                         _beforeOnApplicationFocus.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationFocus?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            focusState = @params.focusState;
            orig(focusState);
            if (_afterOnApplicationFocus != null)
                foreach (Delegates.OnApplicationFocus_AfterArgs toInvoke in
                         _afterOnApplicationFocus.GetInvocationList())
                    try
                    {
                        _afterOnApplicationFocus.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationPause()
        {
            if (!HookedList.Contains("OnApplicationPause"))
            {
                HookedList.Add("OnApplicationPause");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationPause", false),
                    OnApplicationPause);
            }
        }

        internal static event Delegates.OnApplicationPause_BeforeArgs _beforeOnApplicationPause;
        internal static event Delegates.OnApplicationPause_AfterArgs _afterOnApplicationPause;

        private static void OnApplicationPause(Action<bool> orig, bool pauseState)
        {
            Delegates.Params_OnApplicationPause @params = new()
            {
                pauseState = pauseState
            };
            if (_beforeOnApplicationPause != null)
                foreach (Delegates.OnApplicationPause_BeforeArgs toInvoke in
                         _beforeOnApplicationPause.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationPause?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            pauseState = @params.pauseState;
            orig(pauseState);
            if (_afterOnApplicationPause != null)
                foreach (Delegates.OnApplicationPause_AfterArgs toInvoke in
                         _afterOnApplicationPause.GetInvocationList())
                    try
                    {
                        _afterOnApplicationPause.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnApplicationQuit()
        {
            if (!HookedList.Contains("OnApplicationQuit"))
            {
                HookedList.Add("OnApplicationQuit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationQuit", false),
                    OnApplicationQuit);
            }
        }

        internal static event Delegates.OnApplicationQuit_BeforeArgs _beforeOnApplicationQuit;
        internal static event Delegates.OnApplicationQuit_AfterArgs _afterOnApplicationQuit;

        private static void OnApplicationQuit(Action orig)
        {
            if (_beforeOnApplicationQuit != null)
                foreach (Delegates.OnApplicationQuit_BeforeArgs toInvoke in
                         _beforeOnApplicationQuit.GetInvocationList())
                    try
                    {
                        _beforeOnApplicationQuit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterOnApplicationQuit != null)
                foreach (Delegates.OnApplicationQuit_AfterArgs toInvoke in _afterOnApplicationQuit.GetInvocationList())
                    try
                    {
                        _afterOnApplicationQuit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnLevelWasLoaded()
        {
            if (!HookedList.Contains("OnLevelWasLoaded"))
            {
                HookedList.Add("OnLevelWasLoaded");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnLevelWasLoaded", false),
                    OnLevelWasLoaded);
            }
        }

        internal static event Delegates.OnLevelWasLoaded_BeforeArgs _beforeOnLevelWasLoaded;
        internal static event Delegates.OnLevelWasLoaded_AfterArgs _afterOnLevelWasLoaded;

        private static void OnLevelWasLoaded(Action orig)
        {
            if (_beforeOnLevelWasLoaded != null)
                foreach (Delegates.OnLevelWasLoaded_BeforeArgs toInvoke in _beforeOnLevelWasLoaded.GetInvocationList())
                    try
                    {
                        _beforeOnLevelWasLoaded?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterOnLevelWasLoaded != null)
                foreach (Delegates.OnLevelWasLoaded_AfterArgs toInvoke in _afterOnLevelWasLoaded.GetInvocationList())
                    try
                    {
                        _afterOnLevelWasLoaded.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddDeviceManager()
        {
            if (!HookedList.Contains("AddDeviceManager"))
            {
                HookedList.Add("AddDeviceManager");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "AddDeviceManager", false),
                    AddDeviceManager);
            }
        }

        internal static event Delegates.AddDeviceManager_BeforeArgs _beforeAddDeviceManager;
        internal static event Delegates.AddDeviceManager_AfterArgs _afterAddDeviceManager;

        private static void AddDeviceManager(Action<InputDeviceManager> orig, InputDeviceManager deviceManager)
        {
            Delegates.Params_AddDeviceManager @params = new()
            {
                deviceManager = deviceManager
            };
            if (_beforeAddDeviceManager != null)
                foreach (Delegates.AddDeviceManager_BeforeArgs toInvoke in _beforeAddDeviceManager.GetInvocationList())
                    try
                    {
                        _beforeAddDeviceManager?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            deviceManager = @params.deviceManager;
            orig(deviceManager);
            if (_afterAddDeviceManager != null)
                foreach (Delegates.AddDeviceManager_AfterArgs toInvoke in _afterAddDeviceManager.GetInvocationList())
                    try
                    {
                        _afterAddDeviceManager.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateCurrentTime()
        {
            if (!HookedList.Contains("UpdateCurrentTime"))
            {
                HookedList.Add("UpdateCurrentTime");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateCurrentTime", false),
                    UpdateCurrentTime);
            }
        }

        internal static event Delegates.UpdateCurrentTime_BeforeArgs _beforeUpdateCurrentTime;
        internal static event Delegates.UpdateCurrentTime_AfterArgs _afterUpdateCurrentTime;

        private static void UpdateCurrentTime(Action orig)
        {
            if (_beforeUpdateCurrentTime != null)
                foreach (Delegates.UpdateCurrentTime_BeforeArgs toInvoke in
                         _beforeUpdateCurrentTime.GetInvocationList())
                    try
                    {
                        _beforeUpdateCurrentTime?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterUpdateCurrentTime != null)
                foreach (Delegates.UpdateCurrentTime_AfterArgs toInvoke in _afterUpdateCurrentTime.GetInvocationList())
                    try
                    {
                        _afterUpdateCurrentTime.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateDeviceManagers()
        {
            if (!HookedList.Contains("UpdateDeviceManagers"))
            {
                HookedList.Add("UpdateDeviceManagers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateDeviceManagers", false),
                    UpdateDeviceManagers);
            }
        }

        internal static event Delegates.UpdateDeviceManagers_BeforeArgs _beforeUpdateDeviceManagers;
        internal static event Delegates.UpdateDeviceManagers_AfterArgs _afterUpdateDeviceManagers;

        private static void UpdateDeviceManagers(Action<float> orig, float deltaTime)
        {
            Delegates.Params_UpdateDeviceManagers @params = new()
            {
                deltaTime = deltaTime
            };
            if (_beforeUpdateDeviceManagers != null)
                foreach (Delegates.UpdateDeviceManagers_BeforeArgs toInvoke in _beforeUpdateDeviceManagers
                             .GetInvocationList())
                    try
                    {
                        _beforeUpdateDeviceManagers?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            deltaTime = @params.deltaTime;
            orig(deltaTime);
            if (_afterUpdateDeviceManagers != null)
                foreach (Delegates.UpdateDeviceManagers_AfterArgs toInvoke in _afterUpdateDeviceManagers
                             .GetInvocationList())
                    try
                    {
                        _afterUpdateDeviceManagers.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDestroyDeviceManagers()
        {
            if (!HookedList.Contains("DestroyDeviceManagers"))
            {
                HookedList.Add("DestroyDeviceManagers");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "DestroyDeviceManagers", false),
                    DestroyDeviceManagers);
            }
        }

        internal static event Delegates.DestroyDeviceManagers_BeforeArgs _beforeDestroyDeviceManagers;
        internal static event Delegates.DestroyDeviceManagers_AfterArgs _afterDestroyDeviceManagers;

        private static void DestroyDeviceManagers(Action orig)
        {
            if (_beforeDestroyDeviceManagers != null)
                foreach (Delegates.DestroyDeviceManagers_BeforeArgs toInvoke in _beforeDestroyDeviceManagers
                             .GetInvocationList())
                    try
                    {
                        _beforeDestroyDeviceManagers?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterDestroyDeviceManagers != null)
                foreach (Delegates.DestroyDeviceManagers_AfterArgs toInvoke in _afterDestroyDeviceManagers
                             .GetInvocationList())
                    try
                    {
                        _afterDestroyDeviceManagers.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDestroyDevices()
        {
            if (!HookedList.Contains("DestroyDevices"))
            {
                HookedList.Add("DestroyDevices");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "DestroyDevices", false), DestroyDevices);
            }
        }

        internal static event Delegates.DestroyDevices_BeforeArgs _beforeDestroyDevices;
        internal static event Delegates.DestroyDevices_AfterArgs _afterDestroyDevices;

        private static void DestroyDevices(Action orig)
        {
            if (_beforeDestroyDevices != null)
                foreach (Delegates.DestroyDevices_BeforeArgs toInvoke in _beforeDestroyDevices.GetInvocationList())
                    try
                    {
                        _beforeDestroyDevices?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterDestroyDevices != null)
                foreach (Delegates.DestroyDevices_AfterArgs toInvoke in _afterDestroyDevices.GetInvocationList())
                    try
                    {
                        _afterDestroyDevices.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateDevices()
        {
            if (!HookedList.Contains("UpdateDevices"))
            {
                HookedList.Add("UpdateDevices");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateDevices", false), UpdateDevices);
            }
        }

        internal static event Delegates.UpdateDevices_BeforeArgs _beforeUpdateDevices;
        internal static event Delegates.UpdateDevices_AfterArgs _afterUpdateDevices;

        private static void UpdateDevices(Action<float> orig, float deltaTime)
        {
            Delegates.Params_UpdateDevices @params = new()
            {
                deltaTime = deltaTime
            };
            if (_beforeUpdateDevices != null)
                foreach (Delegates.UpdateDevices_BeforeArgs toInvoke in _beforeUpdateDevices.GetInvocationList())
                    try
                    {
                        _beforeUpdateDevices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            deltaTime = @params.deltaTime;
            orig(deltaTime);
            if (_afterUpdateDevices != null)
                foreach (Delegates.UpdateDevices_AfterArgs toInvoke in _afterUpdateDevices.GetInvocationList())
                    try
                    {
                        _afterUpdateDevices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCommitDevices()
        {
            if (!HookedList.Contains("CommitDevices"))
            {
                HookedList.Add("CommitDevices");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "CommitDevices", false), CommitDevices);
            }
        }

        internal static event Delegates.CommitDevices_BeforeArgs _beforeCommitDevices;
        internal static event Delegates.CommitDevices_AfterArgs _afterCommitDevices;

        private static void CommitDevices(Action<float> orig, float deltaTime)
        {
            Delegates.Params_CommitDevices @params = new()
            {
                deltaTime = deltaTime
            };
            if (_beforeCommitDevices != null)
                foreach (Delegates.CommitDevices_BeforeArgs toInvoke in _beforeCommitDevices.GetInvocationList())
                    try
                    {
                        _beforeCommitDevices?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            deltaTime = @params.deltaTime;
            orig(deltaTime);
            if (_afterCommitDevices != null)
                foreach (Delegates.CommitDevices_AfterArgs toInvoke in _afterCommitDevices.GetInvocationList())
                    try
                    {
                        _afterCommitDevices.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateActiveDevice()
        {
            if (!HookedList.Contains("UpdateActiveDevice"))
            {
                HookedList.Add("UpdateActiveDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateActiveDevice", false),
                    UpdateActiveDevice);
            }
        }

        internal static event Delegates.UpdateActiveDevice_BeforeArgs _beforeUpdateActiveDevice;
        internal static event Delegates.UpdateActiveDevice_AfterArgs _afterUpdateActiveDevice;

        private static void UpdateActiveDevice(Action orig)
        {
            if (_beforeUpdateActiveDevice != null)
                foreach (Delegates.UpdateActiveDevice_BeforeArgs toInvoke in
                         _beforeUpdateActiveDevice.GetInvocationList())
                    try
                    {
                        _beforeUpdateActiveDevice?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterUpdateActiveDevice != null)
                foreach (Delegates.UpdateActiveDevice_AfterArgs toInvoke in
                         _afterUpdateActiveDevice.GetInvocationList())
                    try
                    {
                        _afterUpdateActiveDevice.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAttachDevice()
        {
            if (!HookedList.Contains("AttachDevice"))
            {
                HookedList.Add("AttachDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "AttachDevice", false), AttachDevice);
            }
        }

        internal static event Delegates.AttachDevice_BeforeArgs _beforeAttachDevice;
        internal static event Delegates.AttachDevice_AfterArgs _afterAttachDevice;

        private static void AttachDevice(Action<InputDevice> orig, InputDevice inputDevice)
        {
            Delegates.Params_AttachDevice @params = new()
            {
                inputDevice = inputDevice
            };
            if (_beforeAttachDevice != null)
                foreach (Delegates.AttachDevice_BeforeArgs toInvoke in _beforeAttachDevice.GetInvocationList())
                    try
                    {
                        _beforeAttachDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            inputDevice = @params.inputDevice;
            orig(inputDevice);
            if (_afterAttachDevice != null)
                foreach (Delegates.AttachDevice_AfterArgs toInvoke in _afterAttachDevice.GetInvocationList())
                    try
                    {
                        _afterAttachDevice.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDetachDevice()
        {
            if (!HookedList.Contains("DetachDevice"))
            {
                HookedList.Add("DetachDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "DetachDevice", false), DetachDevice);
            }
        }

        internal static event Delegates.DetachDevice_BeforeArgs _beforeDetachDevice;
        internal static event Delegates.DetachDevice_AfterArgs _afterDetachDevice;

        private static void DetachDevice(Action<InputDevice> orig, InputDevice inputDevice)
        {
            Delegates.Params_DetachDevice @params = new()
            {
                inputDevice = inputDevice
            };
            if (_beforeDetachDevice != null)
                foreach (Delegates.DetachDevice_BeforeArgs toInvoke in _beforeDetachDevice.GetInvocationList())
                    try
                    {
                        _beforeDetachDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            inputDevice = @params.inputDevice;
            orig(inputDevice);
            if (_afterDetachDevice != null)
                foreach (Delegates.DetachDevice_AfterArgs toInvoke in _afterDetachDevice.GetInvocationList())
                    try
                    {
                        _afterDetachDevice.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookHideDevicesWithProfile()
        {
            if (!HookedList.Contains("HideDevicesWithProfile"))
            {
                HookedList.Add("HideDevicesWithProfile");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "HideDevicesWithProfile", false),
                    HideDevicesWithProfile);
            }
        }

        internal static event Delegates.HideDevicesWithProfile_BeforeArgs _beforeHideDevicesWithProfile;
        internal static event Delegates.HideDevicesWithProfile_AfterArgs _afterHideDevicesWithProfile;

        private static void HideDevicesWithProfile(Action<Type> orig, Type type)
        {
            Delegates.Params_HideDevicesWithProfile @params = new()
            {
                type = type
            };
            if (_beforeHideDevicesWithProfile != null)
                foreach (Delegates.HideDevicesWithProfile_BeforeArgs toInvoke in _beforeHideDevicesWithProfile
                             .GetInvocationList())
                    try
                    {
                        _beforeHideDevicesWithProfile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            type = @params.type;
            orig(type);
            if (_afterHideDevicesWithProfile != null)
                foreach (Delegates.HideDevicesWithProfile_AfterArgs toInvoke in _afterHideDevicesWithProfile
                             .GetInvocationList())
                    try
                    {
                        _afterHideDevicesWithProfile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAttachPlayerActionSet()
        {
            if (!HookedList.Contains("AttachPlayerActionSet"))
            {
                HookedList.Add("AttachPlayerActionSet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "AttachPlayerActionSet", false),
                    AttachPlayerActionSet);
            }
        }

        internal static event Delegates.AttachPlayerActionSet_BeforeArgs _beforeAttachPlayerActionSet;
        internal static event Delegates.AttachPlayerActionSet_AfterArgs _afterAttachPlayerActionSet;

        private static void AttachPlayerActionSet(Action<PlayerActionSet> orig, PlayerActionSet playerActionSet)
        {
            Delegates.Params_AttachPlayerActionSet @params = new()
            {
                playerActionSet = playerActionSet
            };
            if (_beforeAttachPlayerActionSet != null)
                foreach (Delegates.AttachPlayerActionSet_BeforeArgs toInvoke in _beforeAttachPlayerActionSet
                             .GetInvocationList())
                    try
                    {
                        _beforeAttachPlayerActionSet?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            playerActionSet = @params.playerActionSet;
            orig(playerActionSet);
            if (_afterAttachPlayerActionSet != null)
                foreach (Delegates.AttachPlayerActionSet_AfterArgs toInvoke in _afterAttachPlayerActionSet
                             .GetInvocationList())
                    try
                    {
                        _afterAttachPlayerActionSet.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDetachPlayerActionSet()
        {
            if (!HookedList.Contains("DetachPlayerActionSet"))
            {
                HookedList.Add("DetachPlayerActionSet");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "DetachPlayerActionSet", false),
                    DetachPlayerActionSet);
            }
        }

        internal static event Delegates.DetachPlayerActionSet_BeforeArgs _beforeDetachPlayerActionSet;
        internal static event Delegates.DetachPlayerActionSet_AfterArgs _afterDetachPlayerActionSet;

        private static void DetachPlayerActionSet(Action<PlayerActionSet> orig, PlayerActionSet playerActionSet)
        {
            Delegates.Params_DetachPlayerActionSet @params = new()
            {
                playerActionSet = playerActionSet
            };
            if (_beforeDetachPlayerActionSet != null)
                foreach (Delegates.DetachPlayerActionSet_BeforeArgs toInvoke in _beforeDetachPlayerActionSet
                             .GetInvocationList())
                    try
                    {
                        _beforeDetachPlayerActionSet?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            playerActionSet = @params.playerActionSet;
            orig(playerActionSet);
            if (_afterDetachPlayerActionSet != null)
                foreach (Delegates.DetachPlayerActionSet_AfterArgs toInvoke in _afterDetachPlayerActionSet
                             .GetInvocationList())
                    try
                    {
                        _afterDetachPlayerActionSet.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdatePlayerActionSets()
        {
            if (!HookedList.Contains("UpdatePlayerActionSets"))
            {
                HookedList.Add("UpdatePlayerActionSets");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdatePlayerActionSets", false),
                    UpdatePlayerActionSets);
            }
        }

        internal static event Delegates.UpdatePlayerActionSets_BeforeArgs _beforeUpdatePlayerActionSets;
        internal static event Delegates.UpdatePlayerActionSets_AfterArgs _afterUpdatePlayerActionSets;

        private static void UpdatePlayerActionSets(Action<float> orig, float deltaTime)
        {
            Delegates.Params_UpdatePlayerActionSets @params = new()
            {
                deltaTime = deltaTime
            };
            if (_beforeUpdatePlayerActionSets != null)
                foreach (Delegates.UpdatePlayerActionSets_BeforeArgs toInvoke in _beforeUpdatePlayerActionSets
                             .GetInvocationList())
                    try
                    {
                        _beforeUpdatePlayerActionSets?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            deltaTime = @params.deltaTime;
            orig(deltaTime);
            if (_afterUpdatePlayerActionSets != null)
                foreach (Delegates.UpdatePlayerActionSets_AfterArgs toInvoke in _afterUpdatePlayerActionSets
                             .GetInvocationList())
                    try
                    {
                        _afterUpdatePlayerActionSets.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_AnyKeyIsPressed()
        {
            if (!HookedList.Contains("get_AnyKeyIsPressed"))
            {
                HookedList.Add("get_AnyKeyIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_AnyKeyIsPressed", false),
                    get_AnyKeyIsPressed);
            }
        }

        internal static event Delegates.get_AnyKeyIsPressed_BeforeArgs _beforeget_AnyKeyIsPressed;
        internal static event Delegates.get_AnyKeyIsPressed_AfterArgs _afterget_AnyKeyIsPressed;

        private static bool get_AnyKeyIsPressed(Func<bool> orig)
        {
            if (_beforeget_AnyKeyIsPressed != null)
                foreach (Delegates.get_AnyKeyIsPressed_BeforeArgs toInvoke in _beforeget_AnyKeyIsPressed
                             .GetInvocationList())
                    try
                    {
                        _beforeget_AnyKeyIsPressed?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_AnyKeyIsPressed != null)
                foreach (Delegates.get_AnyKeyIsPressed_AfterArgs toInvoke in
                         _afterget_AnyKeyIsPressed.GetInvocationList())
                    try
                    {
                        retVal = _afterget_AnyKeyIsPressed.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_ActiveDevice()
        {
            if (!HookedList.Contains("get_ActiveDevice"))
            {
                HookedList.Add("get_ActiveDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_ActiveDevice", false),
                    get_ActiveDevice);
            }
        }

        internal static event Delegates.get_ActiveDevice_BeforeArgs _beforeget_ActiveDevice;
        internal static event Delegates.get_ActiveDevice_AfterArgs _afterget_ActiveDevice;

        private static InputDevice get_ActiveDevice(Func<InputDevice> orig)
        {
            if (_beforeget_ActiveDevice != null)
                foreach (Delegates.get_ActiveDevice_BeforeArgs toInvoke in _beforeget_ActiveDevice.GetInvocationList())
                    try
                    {
                        _beforeget_ActiveDevice?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_ActiveDevice != null)
                foreach (Delegates.get_ActiveDevice_AfterArgs toInvoke in _afterget_ActiveDevice.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ActiveDevice.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_ActiveDevice()
        {
            if (!HookedList.Contains("set_ActiveDevice"))
            {
                HookedList.Add("set_ActiveDevice");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_ActiveDevice", false),
                    set_ActiveDevice);
            }
        }

        internal static event Delegates.set_ActiveDevice_BeforeArgs _beforeset_ActiveDevice;
        internal static event Delegates.set_ActiveDevice_AfterArgs _afterset_ActiveDevice;

        private static void set_ActiveDevice(Action<InputDevice> orig, InputDevice value)
        {
            Delegates.Params_set_ActiveDevice @params = new()
            {
                value = value
            };
            if (_beforeset_ActiveDevice != null)
                foreach (Delegates.set_ActiveDevice_BeforeArgs toInvoke in _beforeset_ActiveDevice.GetInvocationList())
                    try
                    {
                        _beforeset_ActiveDevice?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_ActiveDevice != null)
                foreach (Delegates.set_ActiveDevice_AfterArgs toInvoke in _afterset_ActiveDevice.GetInvocationList())
                    try
                    {
                        _afterset_ActiveDevice.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Enabled()
        {
            if (!HookedList.Contains("get_Enabled"))
            {
                HookedList.Add("get_Enabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_Enabled", false), get_Enabled);
            }
        }

        internal static event Delegates.get_Enabled_BeforeArgs _beforeget_Enabled;
        internal static event Delegates.get_Enabled_AfterArgs _afterget_Enabled;

        private static bool get_Enabled(Func<bool> orig)
        {
            if (_beforeget_Enabled != null)
                foreach (Delegates.get_Enabled_BeforeArgs toInvoke in _beforeget_Enabled.GetInvocationList())
                    try
                    {
                        _beforeget_Enabled?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_Enabled != null)
                foreach (Delegates.get_Enabled_AfterArgs toInvoke in _afterget_Enabled.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Enabled.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Enabled()
        {
            if (!HookedList.Contains("set_Enabled"))
            {
                HookedList.Add("set_Enabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_Enabled", false), set_Enabled);
            }
        }

        internal static event Delegates.set_Enabled_BeforeArgs _beforeset_Enabled;
        internal static event Delegates.set_Enabled_AfterArgs _afterset_Enabled;

        private static void set_Enabled(Action<bool> orig, bool value)
        {
            Delegates.Params_set_Enabled @params = new()
            {
                value = value
            };
            if (_beforeset_Enabled != null)
                foreach (Delegates.set_Enabled_BeforeArgs toInvoke in _beforeset_Enabled.GetInvocationList())
                    try
                    {
                        _beforeset_Enabled?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_Enabled != null)
                foreach (Delegates.set_Enabled_AfterArgs toInvoke in _afterset_Enabled.GetInvocationList())
                    try
                    {
                        _afterset_Enabled.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SuspendInBackground()
        {
            if (!HookedList.Contains("get_SuspendInBackground"))
            {
                HookedList.Add("get_SuspendInBackground");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_SuspendInBackground", false),
                    get_SuspendInBackground);
            }
        }

        internal static event Delegates.get_SuspendInBackground_BeforeArgs _beforeget_SuspendInBackground;
        internal static event Delegates.get_SuspendInBackground_AfterArgs _afterget_SuspendInBackground;

        private static bool get_SuspendInBackground(Func<bool> orig)
        {
            if (_beforeget_SuspendInBackground != null)
                foreach (Delegates.get_SuspendInBackground_BeforeArgs toInvoke in _beforeget_SuspendInBackground
                             .GetInvocationList())
                    try
                    {
                        _beforeget_SuspendInBackground?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_SuspendInBackground != null)
                foreach (Delegates.get_SuspendInBackground_AfterArgs toInvoke in _afterget_SuspendInBackground
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_SuspendInBackground.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_SuspendInBackground()
        {
            if (!HookedList.Contains("set_SuspendInBackground"))
            {
                HookedList.Add("set_SuspendInBackground");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_SuspendInBackground", false),
                    set_SuspendInBackground);
            }
        }

        internal static event Delegates.set_SuspendInBackground_BeforeArgs _beforeset_SuspendInBackground;
        internal static event Delegates.set_SuspendInBackground_AfterArgs _afterset_SuspendInBackground;

        private static void set_SuspendInBackground(Action<bool> orig, bool value)
        {
            Delegates.Params_set_SuspendInBackground @params = new()
            {
                value = value
            };
            if (_beforeset_SuspendInBackground != null)
                foreach (Delegates.set_SuspendInBackground_BeforeArgs toInvoke in _beforeset_SuspendInBackground
                             .GetInvocationList())
                    try
                    {
                        _beforeset_SuspendInBackground?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_SuspendInBackground != null)
                foreach (Delegates.set_SuspendInBackground_AfterArgs toInvoke in _afterset_SuspendInBackground
                             .GetInvocationList())
                    try
                    {
                        _afterset_SuspendInBackground.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_EnableNativeInput()
        {
            if (!HookedList.Contains("get_EnableNativeInput"))
            {
                HookedList.Add("get_EnableNativeInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableNativeInput", false),
                    get_EnableNativeInput);
            }
        }

        internal static event Delegates.get_EnableNativeInput_BeforeArgs _beforeget_EnableNativeInput;
        internal static event Delegates.get_EnableNativeInput_AfterArgs _afterget_EnableNativeInput;

        private static bool get_EnableNativeInput(Func<bool> orig)
        {
            if (_beforeget_EnableNativeInput != null)
                foreach (Delegates.get_EnableNativeInput_BeforeArgs toInvoke in _beforeget_EnableNativeInput
                             .GetInvocationList())
                    try
                    {
                        _beforeget_EnableNativeInput?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_EnableNativeInput != null)
                foreach (Delegates.get_EnableNativeInput_AfterArgs toInvoke in _afterget_EnableNativeInput
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_EnableNativeInput.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_EnableNativeInput()
        {
            if (!HookedList.Contains("set_EnableNativeInput"))
            {
                HookedList.Add("set_EnableNativeInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableNativeInput", false),
                    set_EnableNativeInput);
            }
        }

        internal static event Delegates.set_EnableNativeInput_BeforeArgs _beforeset_EnableNativeInput;
        internal static event Delegates.set_EnableNativeInput_AfterArgs _afterset_EnableNativeInput;

        private static void set_EnableNativeInput(Action<bool> orig, bool value)
        {
            Delegates.Params_set_EnableNativeInput @params = new()
            {
                value = value
            };
            if (_beforeset_EnableNativeInput != null)
                foreach (Delegates.set_EnableNativeInput_BeforeArgs toInvoke in _beforeset_EnableNativeInput
                             .GetInvocationList())
                    try
                    {
                        _beforeset_EnableNativeInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_EnableNativeInput != null)
                foreach (Delegates.set_EnableNativeInput_AfterArgs toInvoke in _afterset_EnableNativeInput
                             .GetInvocationList())
                    try
                    {
                        _afterset_EnableNativeInput.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_EnableXInput()
        {
            if (!HookedList.Contains("get_EnableXInput"))
            {
                HookedList.Add("get_EnableXInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableXInput", false),
                    get_EnableXInput);
            }
        }

        internal static event Delegates.get_EnableXInput_BeforeArgs _beforeget_EnableXInput;
        internal static event Delegates.get_EnableXInput_AfterArgs _afterget_EnableXInput;

        private static bool get_EnableXInput(Func<bool> orig)
        {
            if (_beforeget_EnableXInput != null)
                foreach (Delegates.get_EnableXInput_BeforeArgs toInvoke in _beforeget_EnableXInput.GetInvocationList())
                    try
                    {
                        _beforeget_EnableXInput?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_EnableXInput != null)
                foreach (Delegates.get_EnableXInput_AfterArgs toInvoke in _afterget_EnableXInput.GetInvocationList())
                    try
                    {
                        retVal = _afterget_EnableXInput.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_EnableXInput()
        {
            if (!HookedList.Contains("set_EnableXInput"))
            {
                HookedList.Add("set_EnableXInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableXInput", false),
                    set_EnableXInput);
            }
        }

        internal static event Delegates.set_EnableXInput_BeforeArgs _beforeset_EnableXInput;
        internal static event Delegates.set_EnableXInput_AfterArgs _afterset_EnableXInput;

        private static void set_EnableXInput(Action<bool> orig, bool value)
        {
            Delegates.Params_set_EnableXInput @params = new()
            {
                value = value
            };
            if (_beforeset_EnableXInput != null)
                foreach (Delegates.set_EnableXInput_BeforeArgs toInvoke in _beforeset_EnableXInput.GetInvocationList())
                    try
                    {
                        _beforeset_EnableXInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_EnableXInput != null)
                foreach (Delegates.set_EnableXInput_AfterArgs toInvoke in _afterset_EnableXInput.GetInvocationList())
                    try
                    {
                        _afterset_EnableXInput.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_XInputUpdateRate()
        {
            if (!HookedList.Contains("get_XInputUpdateRate"))
            {
                HookedList.Add("get_XInputUpdateRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_XInputUpdateRate", false),
                    get_XInputUpdateRate);
            }
        }

        internal static event Delegates.get_XInputUpdateRate_BeforeArgs _beforeget_XInputUpdateRate;
        internal static event Delegates.get_XInputUpdateRate_AfterArgs _afterget_XInputUpdateRate;

        private static uint get_XInputUpdateRate(Func<uint> orig)
        {
            if (_beforeget_XInputUpdateRate != null)
                foreach (Delegates.get_XInputUpdateRate_BeforeArgs toInvoke in _beforeget_XInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        _beforeget_XInputUpdateRate?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_XInputUpdateRate != null)
                foreach (Delegates.get_XInputUpdateRate_AfterArgs toInvoke in _afterget_XInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_XInputUpdateRate.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_XInputUpdateRate()
        {
            if (!HookedList.Contains("set_XInputUpdateRate"))
            {
                HookedList.Add("set_XInputUpdateRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_XInputUpdateRate", false),
                    set_XInputUpdateRate);
            }
        }

        internal static event Delegates.set_XInputUpdateRate_BeforeArgs _beforeset_XInputUpdateRate;
        internal static event Delegates.set_XInputUpdateRate_AfterArgs _afterset_XInputUpdateRate;

        private static void set_XInputUpdateRate(Action<uint> orig, uint value)
        {
            Delegates.Params_set_XInputUpdateRate @params = new()
            {
                value = value
            };
            if (_beforeset_XInputUpdateRate != null)
                foreach (Delegates.set_XInputUpdateRate_BeforeArgs toInvoke in _beforeset_XInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        _beforeset_XInputUpdateRate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_XInputUpdateRate != null)
                foreach (Delegates.set_XInputUpdateRate_AfterArgs toInvoke in _afterset_XInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        _afterset_XInputUpdateRate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_XInputBufferSize()
        {
            if (!HookedList.Contains("get_XInputBufferSize"))
            {
                HookedList.Add("get_XInputBufferSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_XInputBufferSize", false),
                    get_XInputBufferSize);
            }
        }

        internal static event Delegates.get_XInputBufferSize_BeforeArgs _beforeget_XInputBufferSize;
        internal static event Delegates.get_XInputBufferSize_AfterArgs _afterget_XInputBufferSize;

        private static uint get_XInputBufferSize(Func<uint> orig)
        {
            if (_beforeget_XInputBufferSize != null)
                foreach (Delegates.get_XInputBufferSize_BeforeArgs toInvoke in _beforeget_XInputBufferSize
                             .GetInvocationList())
                    try
                    {
                        _beforeget_XInputBufferSize?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_XInputBufferSize != null)
                foreach (Delegates.get_XInputBufferSize_AfterArgs toInvoke in _afterget_XInputBufferSize
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_XInputBufferSize.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_XInputBufferSize()
        {
            if (!HookedList.Contains("set_XInputBufferSize"))
            {
                HookedList.Add("set_XInputBufferSize");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_XInputBufferSize", false),
                    set_XInputBufferSize);
            }
        }

        internal static event Delegates.set_XInputBufferSize_BeforeArgs _beforeset_XInputBufferSize;
        internal static event Delegates.set_XInputBufferSize_AfterArgs _afterset_XInputBufferSize;

        private static void set_XInputBufferSize(Action<uint> orig, uint value)
        {
            Delegates.Params_set_XInputBufferSize @params = new()
            {
                value = value
            };
            if (_beforeset_XInputBufferSize != null)
                foreach (Delegates.set_XInputBufferSize_BeforeArgs toInvoke in _beforeset_XInputBufferSize
                             .GetInvocationList())
                    try
                    {
                        _beforeset_XInputBufferSize?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_XInputBufferSize != null)
                foreach (Delegates.set_XInputBufferSize_AfterArgs toInvoke in _afterset_XInputBufferSize
                             .GetInvocationList())
                    try
                    {
                        _afterset_XInputBufferSize.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_NativeInputEnableXInput()
        {
            if (!HookedList.Contains("get_NativeInputEnableXInput"))
            {
                HookedList.Add("get_NativeInputEnableXInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputEnableXInput", false),
                    get_NativeInputEnableXInput);
            }
        }

        internal static event Delegates.get_NativeInputEnableXInput_BeforeArgs _beforeget_NativeInputEnableXInput;
        internal static event Delegates.get_NativeInputEnableXInput_AfterArgs _afterget_NativeInputEnableXInput;

        private static bool get_NativeInputEnableXInput(Func<bool> orig)
        {
            if (_beforeget_NativeInputEnableXInput != null)
                foreach (Delegates.get_NativeInputEnableXInput_BeforeArgs toInvoke in _beforeget_NativeInputEnableXInput
                             .GetInvocationList())
                    try
                    {
                        _beforeget_NativeInputEnableXInput?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_NativeInputEnableXInput != null)
                foreach (Delegates.get_NativeInputEnableXInput_AfterArgs toInvoke in _afterget_NativeInputEnableXInput
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_NativeInputEnableXInput.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_NativeInputEnableXInput()
        {
            if (!HookedList.Contains("set_NativeInputEnableXInput"))
            {
                HookedList.Add("set_NativeInputEnableXInput");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputEnableXInput", false),
                    set_NativeInputEnableXInput);
            }
        }

        internal static event Delegates.set_NativeInputEnableXInput_BeforeArgs _beforeset_NativeInputEnableXInput;
        internal static event Delegates.set_NativeInputEnableXInput_AfterArgs _afterset_NativeInputEnableXInput;

        private static void set_NativeInputEnableXInput(Action<bool> orig, bool value)
        {
            Delegates.Params_set_NativeInputEnableXInput @params = new()
            {
                value = value
            };
            if (_beforeset_NativeInputEnableXInput != null)
                foreach (Delegates.set_NativeInputEnableXInput_BeforeArgs toInvoke in _beforeset_NativeInputEnableXInput
                             .GetInvocationList())
                    try
                    {
                        _beforeset_NativeInputEnableXInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_NativeInputEnableXInput != null)
                foreach (Delegates.set_NativeInputEnableXInput_AfterArgs toInvoke in _afterset_NativeInputEnableXInput
                             .GetInvocationList())
                    try
                    {
                        _afterset_NativeInputEnableXInput.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_NativeInputEnableMFi()
        {
            if (!HookedList.Contains("get_NativeInputEnableMFi"))
            {
                HookedList.Add("get_NativeInputEnableMFi");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputEnableMFi", false),
                    get_NativeInputEnableMFi);
            }
        }

        internal static event Delegates.get_NativeInputEnableMFi_BeforeArgs _beforeget_NativeInputEnableMFi;
        internal static event Delegates.get_NativeInputEnableMFi_AfterArgs _afterget_NativeInputEnableMFi;

        private static bool get_NativeInputEnableMFi(Func<bool> orig)
        {
            if (_beforeget_NativeInputEnableMFi != null)
                foreach (Delegates.get_NativeInputEnableMFi_BeforeArgs toInvoke in _beforeget_NativeInputEnableMFi
                             .GetInvocationList())
                    try
                    {
                        _beforeget_NativeInputEnableMFi?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_NativeInputEnableMFi != null)
                foreach (Delegates.get_NativeInputEnableMFi_AfterArgs toInvoke in _afterget_NativeInputEnableMFi
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_NativeInputEnableMFi.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_NativeInputEnableMFi()
        {
            if (!HookedList.Contains("set_NativeInputEnableMFi"))
            {
                HookedList.Add("set_NativeInputEnableMFi");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputEnableMFi", false),
                    set_NativeInputEnableMFi);
            }
        }

        internal static event Delegates.set_NativeInputEnableMFi_BeforeArgs _beforeset_NativeInputEnableMFi;
        internal static event Delegates.set_NativeInputEnableMFi_AfterArgs _afterset_NativeInputEnableMFi;

        private static void set_NativeInputEnableMFi(Action<bool> orig, bool value)
        {
            Delegates.Params_set_NativeInputEnableMFi @params = new()
            {
                value = value
            };
            if (_beforeset_NativeInputEnableMFi != null)
                foreach (Delegates.set_NativeInputEnableMFi_BeforeArgs toInvoke in _beforeset_NativeInputEnableMFi
                             .GetInvocationList())
                    try
                    {
                        _beforeset_NativeInputEnableMFi?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_NativeInputEnableMFi != null)
                foreach (Delegates.set_NativeInputEnableMFi_AfterArgs toInvoke in _afterset_NativeInputEnableMFi
                             .GetInvocationList())
                    try
                    {
                        _afterset_NativeInputEnableMFi.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_NativeInputPreventSleep()
        {
            if (!HookedList.Contains("get_NativeInputPreventSleep"))
            {
                HookedList.Add("get_NativeInputPreventSleep");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputPreventSleep", false),
                    get_NativeInputPreventSleep);
            }
        }

        internal static event Delegates.get_NativeInputPreventSleep_BeforeArgs _beforeget_NativeInputPreventSleep;
        internal static event Delegates.get_NativeInputPreventSleep_AfterArgs _afterget_NativeInputPreventSleep;

        private static bool get_NativeInputPreventSleep(Func<bool> orig)
        {
            if (_beforeget_NativeInputPreventSleep != null)
                foreach (Delegates.get_NativeInputPreventSleep_BeforeArgs toInvoke in _beforeget_NativeInputPreventSleep
                             .GetInvocationList())
                    try
                    {
                        _beforeget_NativeInputPreventSleep?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_NativeInputPreventSleep != null)
                foreach (Delegates.get_NativeInputPreventSleep_AfterArgs toInvoke in _afterget_NativeInputPreventSleep
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_NativeInputPreventSleep.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_NativeInputPreventSleep()
        {
            if (!HookedList.Contains("set_NativeInputPreventSleep"))
            {
                HookedList.Add("set_NativeInputPreventSleep");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputPreventSleep", false),
                    set_NativeInputPreventSleep);
            }
        }

        internal static event Delegates.set_NativeInputPreventSleep_BeforeArgs _beforeset_NativeInputPreventSleep;
        internal static event Delegates.set_NativeInputPreventSleep_AfterArgs _afterset_NativeInputPreventSleep;

        private static void set_NativeInputPreventSleep(Action<bool> orig, bool value)
        {
            Delegates.Params_set_NativeInputPreventSleep @params = new()
            {
                value = value
            };
            if (_beforeset_NativeInputPreventSleep != null)
                foreach (Delegates.set_NativeInputPreventSleep_BeforeArgs toInvoke in _beforeset_NativeInputPreventSleep
                             .GetInvocationList())
                    try
                    {
                        _beforeset_NativeInputPreventSleep?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_NativeInputPreventSleep != null)
                foreach (Delegates.set_NativeInputPreventSleep_AfterArgs toInvoke in _afterset_NativeInputPreventSleep
                             .GetInvocationList())
                    try
                    {
                        _afterset_NativeInputPreventSleep.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_NativeInputUpdateRate()
        {
            if (!HookedList.Contains("get_NativeInputUpdateRate"))
            {
                HookedList.Add("get_NativeInputUpdateRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputUpdateRate", false),
                    get_NativeInputUpdateRate);
            }
        }

        internal static event Delegates.get_NativeInputUpdateRate_BeforeArgs _beforeget_NativeInputUpdateRate;
        internal static event Delegates.get_NativeInputUpdateRate_AfterArgs _afterget_NativeInputUpdateRate;

        private static uint get_NativeInputUpdateRate(Func<uint> orig)
        {
            if (_beforeget_NativeInputUpdateRate != null)
                foreach (Delegates.get_NativeInputUpdateRate_BeforeArgs toInvoke in _beforeget_NativeInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        _beforeget_NativeInputUpdateRate?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_NativeInputUpdateRate != null)
                foreach (Delegates.get_NativeInputUpdateRate_AfterArgs toInvoke in _afterget_NativeInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_NativeInputUpdateRate.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_NativeInputUpdateRate()
        {
            if (!HookedList.Contains("set_NativeInputUpdateRate"))
            {
                HookedList.Add("set_NativeInputUpdateRate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputUpdateRate", false),
                    set_NativeInputUpdateRate);
            }
        }

        internal static event Delegates.set_NativeInputUpdateRate_BeforeArgs _beforeset_NativeInputUpdateRate;
        internal static event Delegates.set_NativeInputUpdateRate_AfterArgs _afterset_NativeInputUpdateRate;

        private static void set_NativeInputUpdateRate(Action<uint> orig, uint value)
        {
            Delegates.Params_set_NativeInputUpdateRate @params = new()
            {
                value = value
            };
            if (_beforeset_NativeInputUpdateRate != null)
                foreach (Delegates.set_NativeInputUpdateRate_BeforeArgs toInvoke in _beforeset_NativeInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        _beforeset_NativeInputUpdateRate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_NativeInputUpdateRate != null)
                foreach (Delegates.set_NativeInputUpdateRate_AfterArgs toInvoke in _afterset_NativeInputUpdateRate
                             .GetInvocationList())
                    try
                    {
                        _afterset_NativeInputUpdateRate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_EnableICade()
        {
            if (!HookedList.Contains("get_EnableICade"))
            {
                HookedList.Add("get_EnableICade");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableICade", false),
                    get_EnableICade);
            }
        }

        internal static event Delegates.get_EnableICade_BeforeArgs _beforeget_EnableICade;
        internal static event Delegates.get_EnableICade_AfterArgs _afterget_EnableICade;

        private static bool get_EnableICade(Func<bool> orig)
        {
            if (_beforeget_EnableICade != null)
                foreach (Delegates.get_EnableICade_BeforeArgs toInvoke in _beforeget_EnableICade.GetInvocationList())
                    try
                    {
                        _beforeget_EnableICade?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_EnableICade != null)
                foreach (Delegates.get_EnableICade_AfterArgs toInvoke in _afterget_EnableICade.GetInvocationList())
                    try
                    {
                        retVal = _afterget_EnableICade.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_EnableICade()
        {
            if (!HookedList.Contains("set_EnableICade"))
            {
                HookedList.Add("set_EnableICade");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableICade", false),
                    set_EnableICade);
            }
        }

        internal static event Delegates.set_EnableICade_BeforeArgs _beforeset_EnableICade;
        internal static event Delegates.set_EnableICade_AfterArgs _afterset_EnableICade;

        private static void set_EnableICade(Action<bool> orig, bool value)
        {
            Delegates.Params_set_EnableICade @params = new()
            {
                value = value
            };
            if (_beforeset_EnableICade != null)
                foreach (Delegates.set_EnableICade_BeforeArgs toInvoke in _beforeset_EnableICade.GetInvocationList())
                    try
                    {
                        _beforeset_EnableICade?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_EnableICade != null)
                foreach (Delegates.set_EnableICade_AfterArgs toInvoke in _afterset_EnableICade.GetInvocationList())
                    try
                    {
                        _afterset_EnableICade.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_UnityVersion()
        {
            if (!HookedList.Contains("get_UnityVersion"))
            {
                HookedList.Add("get_UnityVersion");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_UnityVersion", false),
                    get_UnityVersion);
            }
        }

        internal static event Delegates.get_UnityVersion_BeforeArgs _beforeget_UnityVersion;
        internal static event Delegates.get_UnityVersion_AfterArgs _afterget_UnityVersion;

        private static VersionInfo get_UnityVersion(Func<VersionInfo> orig)
        {
            if (_beforeget_UnityVersion != null)
                foreach (Delegates.get_UnityVersion_BeforeArgs toInvoke in _beforeget_UnityVersion.GetInvocationList())
                    try
                    {
                        _beforeget_UnityVersion?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_UnityVersion != null)
                foreach (Delegates.get_UnityVersion_AfterArgs toInvoke in _afterget_UnityVersion.GetInvocationList())
                    try
                    {
                        retVal = _afterget_UnityVersion.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_CurrentTick()
        {
            if (!HookedList.Contains("get_CurrentTick"))
            {
                HookedList.Add("get_CurrentTick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_CurrentTick", false),
                    get_CurrentTick);
            }
        }

        internal static event Delegates.get_CurrentTick_BeforeArgs _beforeget_CurrentTick;
        internal static event Delegates.get_CurrentTick_AfterArgs _afterget_CurrentTick;

        private static ulong get_CurrentTick(Func<ulong> orig)
        {
            if (_beforeget_CurrentTick != null)
                foreach (Delegates.get_CurrentTick_BeforeArgs toInvoke in _beforeget_CurrentTick.GetInvocationList())
                    try
                    {
                        _beforeget_CurrentTick?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_CurrentTick != null)
                foreach (Delegates.get_CurrentTick_AfterArgs toInvoke in _afterget_CurrentTick.GetInvocationList())
                    try
                    {
                        retVal = _afterget_CurrentTick.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddDeviceManager_AfterArgs(Params_AddDeviceManager args);

        public delegate void AddDeviceManager_BeforeArgs(Params_AddDeviceManager args);

        public delegate void AddDeviceManager_WithArgs(Action<InputDeviceManager> orig,
            InputDeviceManager deviceManager);

        public delegate void AssertIsSetup_AfterArgs();

        public delegate void AssertIsSetup_BeforeArgs();

        public delegate void AssertIsSetup_WithArgs(Action orig);

        public delegate void AttachDevice_AfterArgs(Params_AttachDevice args);

        public delegate void AttachDevice_BeforeArgs(Params_AttachDevice args);

        public delegate void AttachDevice_WithArgs(Action<InputDevice> orig, InputDevice inputDevice);

        public delegate void AttachPlayerActionSet_AfterArgs(Params_AttachPlayerActionSet args);

        public delegate void AttachPlayerActionSet_BeforeArgs(Params_AttachPlayerActionSet args);

        public delegate void AttachPlayerActionSet_WithArgs(Action<PlayerActionSet> orig,
            PlayerActionSet playerActionSet);

        public delegate void ClearInputState_AfterArgs();

        public delegate void ClearInputState_BeforeArgs();

        public delegate void ClearInputState_WithArgs(Action orig);

        public delegate void CommitDevices_AfterArgs(Params_CommitDevices args);

        public delegate void CommitDevices_BeforeArgs(Params_CommitDevices args);

        public delegate void CommitDevices_WithArgs(Action<float> orig, float deltaTime);

        public delegate void DestroyDeviceManagers_AfterArgs();

        public delegate void DestroyDeviceManagers_BeforeArgs();

        public delegate void DestroyDeviceManagers_WithArgs(Action orig);

        public delegate void DestroyDevices_AfterArgs();

        public delegate void DestroyDevices_BeforeArgs();

        public delegate void DestroyDevices_WithArgs(Action orig);

        public delegate void DetachDevice_AfterArgs(Params_DetachDevice args);

        public delegate void DetachDevice_BeforeArgs(Params_DetachDevice args);

        public delegate void DetachDevice_WithArgs(Action<InputDevice> orig, InputDevice inputDevice);

        public delegate void DetachPlayerActionSet_AfterArgs(Params_DetachPlayerActionSet args);

        public delegate void DetachPlayerActionSet_BeforeArgs(Params_DetachPlayerActionSet args);

        public delegate void DetachPlayerActionSet_WithArgs(Action<PlayerActionSet> orig,
            PlayerActionSet playerActionSet);

        public delegate InputDevice get_ActiveDevice_AfterArgs(InputDevice ret);

        public delegate void get_ActiveDevice_BeforeArgs();

        public delegate InputDevice get_ActiveDevice_WithArgs(Func<InputDevice> orig);

        public delegate bool get_AnyKeyIsPressed_AfterArgs(bool ret);

        public delegate void get_AnyKeyIsPressed_BeforeArgs();

        public delegate bool get_AnyKeyIsPressed_WithArgs(Func<bool> orig);

        public delegate bool get_CommandWasPressed_AfterArgs(bool ret);

        public delegate void get_CommandWasPressed_BeforeArgs();

        public delegate bool get_CommandWasPressed_WithArgs(Func<bool> orig);

        public delegate ulong get_CurrentTick_AfterArgs(ulong ret);

        public delegate void get_CurrentTick_BeforeArgs();

        public delegate ulong get_CurrentTick_WithArgs(Func<ulong> orig);

        public delegate bool get_Enabled_AfterArgs(bool ret);

        public delegate void get_Enabled_BeforeArgs();

        public delegate bool get_Enabled_WithArgs(Func<bool> orig);

        public delegate bool get_EnableICade_AfterArgs(bool ret);

        public delegate void get_EnableICade_BeforeArgs();

        public delegate bool get_EnableICade_WithArgs(Func<bool> orig);

        public delegate bool get_EnableNativeInput_AfterArgs(bool ret);

        public delegate void get_EnableNativeInput_BeforeArgs();

        public delegate bool get_EnableNativeInput_WithArgs(Func<bool> orig);

        public delegate bool get_EnableXInput_AfterArgs(bool ret);

        public delegate void get_EnableXInput_BeforeArgs();

        public delegate bool get_EnableXInput_WithArgs(Func<bool> orig);

        public delegate bool get_InvertYAxis_AfterArgs(bool ret);

        public delegate void get_InvertYAxis_BeforeArgs();

        public delegate bool get_InvertYAxis_WithArgs(Func<bool> orig);

        public delegate bool get_IsSetup_AfterArgs(bool ret);

        public delegate void get_IsSetup_BeforeArgs();

        public delegate bool get_IsSetup_WithArgs(Func<bool> orig);

        public delegate IKeyboardProvider get_KeyboardProvider_AfterArgs(IKeyboardProvider ret);

        public delegate void get_KeyboardProvider_BeforeArgs();

        public delegate IKeyboardProvider get_KeyboardProvider_WithArgs(Func<IKeyboardProvider> orig);

        public delegate bool get_MenuWasPressed_AfterArgs(bool ret);

        public delegate void get_MenuWasPressed_BeforeArgs();

        public delegate bool get_MenuWasPressed_WithArgs(Func<bool> orig);

        public delegate IMouseProvider get_MouseProvider_AfterArgs(IMouseProvider ret);

        public delegate void get_MouseProvider_BeforeArgs();

        public delegate IMouseProvider get_MouseProvider_WithArgs(Func<IMouseProvider> orig);

        public delegate bool get_NativeInputEnableMFi_AfterArgs(bool ret);

        public delegate void get_NativeInputEnableMFi_BeforeArgs();

        public delegate bool get_NativeInputEnableMFi_WithArgs(Func<bool> orig);

        public delegate bool get_NativeInputEnableXInput_AfterArgs(bool ret);

        public delegate void get_NativeInputEnableXInput_BeforeArgs();

        public delegate bool get_NativeInputEnableXInput_WithArgs(Func<bool> orig);

        public delegate bool get_NativeInputPreventSleep_AfterArgs(bool ret);

        public delegate void get_NativeInputPreventSleep_BeforeArgs();

        public delegate bool get_NativeInputPreventSleep_WithArgs(Func<bool> orig);

        public delegate uint get_NativeInputUpdateRate_AfterArgs(uint ret);

        public delegate void get_NativeInputUpdateRate_BeforeArgs();

        public delegate uint get_NativeInputUpdateRate_WithArgs(Func<uint> orig);

        public delegate string get_Platform_AfterArgs(string ret);

        public delegate void get_Platform_BeforeArgs();

        public delegate string get_Platform_WithArgs(Func<string> orig);

        public delegate bool get_SuspendInBackground_AfterArgs(bool ret);

        public delegate void get_SuspendInBackground_BeforeArgs();

        public delegate bool get_SuspendInBackground_WithArgs(Func<bool> orig);

        public delegate VersionInfo get_UnityVersion_AfterArgs(VersionInfo ret);

        public delegate void get_UnityVersion_BeforeArgs();

        public delegate VersionInfo get_UnityVersion_WithArgs(Func<VersionInfo> orig);

        public delegate uint get_XInputBufferSize_AfterArgs(uint ret);

        public delegate void get_XInputBufferSize_BeforeArgs();

        public delegate uint get_XInputBufferSize_WithArgs(Func<uint> orig);

        public delegate uint get_XInputUpdateRate_AfterArgs(uint ret);

        public delegate void get_XInputUpdateRate_BeforeArgs();

        public delegate uint get_XInputUpdateRate_WithArgs(Func<uint> orig);

        public delegate void HideDevicesWithProfile_AfterArgs(Params_HideDevicesWithProfile args);

        public delegate void HideDevicesWithProfile_BeforeArgs(Params_HideDevicesWithProfile args);

        public delegate void HideDevicesWithProfile_WithArgs(Action<Type> orig, Type type);

        public delegate void OnApplicationFocus_AfterArgs(Params_OnApplicationFocus args);

        public delegate void OnApplicationFocus_BeforeArgs(Params_OnApplicationFocus args);

        public delegate void OnApplicationFocus_WithArgs(Action<bool> orig, bool focusState);

        public delegate void OnApplicationPause_AfterArgs(Params_OnApplicationPause args);

        public delegate void OnApplicationPause_BeforeArgs(Params_OnApplicationPause args);

        public delegate void OnApplicationPause_WithArgs(Action<bool> orig, bool pauseState);

        public delegate void OnApplicationQuit_AfterArgs();

        public delegate void OnApplicationQuit_BeforeArgs();

        public delegate void OnApplicationQuit_WithArgs(Action orig);

        public delegate void OnLevelWasLoaded_AfterArgs();

        public delegate void OnLevelWasLoaded_BeforeArgs();

        public delegate void OnLevelWasLoaded_WithArgs(Action orig);

        public delegate void Reload_AfterArgs();

        public delegate void Reload_BeforeArgs();

        public delegate void Reload_WithArgs(Action orig);

        public delegate void ResetInternal_AfterArgs();

        public delegate void ResetInternal_BeforeArgs();

        public delegate void ResetInternal_WithArgs(Action orig);

        public delegate void set_ActiveDevice_AfterArgs(Params_set_ActiveDevice args);

        public delegate void set_ActiveDevice_BeforeArgs(Params_set_ActiveDevice args);

        public delegate void set_ActiveDevice_WithArgs(Action<InputDevice> orig, InputDevice value);

        public delegate void set_CommandWasPressed_AfterArgs(Params_set_CommandWasPressed args);

        public delegate void set_CommandWasPressed_BeforeArgs(Params_set_CommandWasPressed args);

        public delegate void set_CommandWasPressed_WithArgs(Action<bool> orig, bool value);

        public delegate void set_Enabled_AfterArgs(Params_set_Enabled args);

        public delegate void set_Enabled_BeforeArgs(Params_set_Enabled args);

        public delegate void set_Enabled_WithArgs(Action<bool> orig, bool value);

        public delegate void set_EnableICade_AfterArgs(Params_set_EnableICade args);

        public delegate void set_EnableICade_BeforeArgs(Params_set_EnableICade args);

        public delegate void set_EnableICade_WithArgs(Action<bool> orig, bool value);

        public delegate void set_EnableNativeInput_AfterArgs(Params_set_EnableNativeInput args);

        public delegate void set_EnableNativeInput_BeforeArgs(Params_set_EnableNativeInput args);

        public delegate void set_EnableNativeInput_WithArgs(Action<bool> orig, bool value);

        public delegate void set_EnableXInput_AfterArgs(Params_set_EnableXInput args);

        public delegate void set_EnableXInput_BeforeArgs(Params_set_EnableXInput args);

        public delegate void set_EnableXInput_WithArgs(Action<bool> orig, bool value);

        public delegate void set_InvertYAxis_AfterArgs(Params_set_InvertYAxis args);

        public delegate void set_InvertYAxis_BeforeArgs(Params_set_InvertYAxis args);

        public delegate void set_InvertYAxis_WithArgs(Action<bool> orig, bool value);

        public delegate void set_IsSetup_AfterArgs(Params_set_IsSetup args);

        public delegate void set_IsSetup_BeforeArgs(Params_set_IsSetup args);

        public delegate void set_IsSetup_WithArgs(Action<bool> orig, bool value);

        public delegate void set_KeyboardProvider_AfterArgs(Params_set_KeyboardProvider args);

        public delegate void set_KeyboardProvider_BeforeArgs(Params_set_KeyboardProvider args);

        public delegate void set_KeyboardProvider_WithArgs(Action<IKeyboardProvider> orig, IKeyboardProvider value);

        public delegate void set_MouseProvider_AfterArgs(Params_set_MouseProvider args);

        public delegate void set_MouseProvider_BeforeArgs(Params_set_MouseProvider args);

        public delegate void set_MouseProvider_WithArgs(Action<IMouseProvider> orig, IMouseProvider value);

        public delegate void set_NativeInputEnableMFi_AfterArgs(Params_set_NativeInputEnableMFi args);

        public delegate void set_NativeInputEnableMFi_BeforeArgs(Params_set_NativeInputEnableMFi args);

        public delegate void set_NativeInputEnableMFi_WithArgs(Action<bool> orig, bool value);

        public delegate void set_NativeInputEnableXInput_AfterArgs(Params_set_NativeInputEnableXInput args);

        public delegate void set_NativeInputEnableXInput_BeforeArgs(Params_set_NativeInputEnableXInput args);

        public delegate void set_NativeInputEnableXInput_WithArgs(Action<bool> orig, bool value);

        public delegate void set_NativeInputPreventSleep_AfterArgs(Params_set_NativeInputPreventSleep args);

        public delegate void set_NativeInputPreventSleep_BeforeArgs(Params_set_NativeInputPreventSleep args);

        public delegate void set_NativeInputPreventSleep_WithArgs(Action<bool> orig, bool value);

        public delegate void set_NativeInputUpdateRate_AfterArgs(Params_set_NativeInputUpdateRate args);

        public delegate void set_NativeInputUpdateRate_BeforeArgs(Params_set_NativeInputUpdateRate args);

        public delegate void set_NativeInputUpdateRate_WithArgs(Action<uint> orig, uint value);

        public delegate void set_Platform_AfterArgs(Params_set_Platform args);

        public delegate void set_Platform_BeforeArgs(Params_set_Platform args);

        public delegate void set_Platform_WithArgs(Action<string> orig, string value);

        public delegate void set_SuspendInBackground_AfterArgs(Params_set_SuspendInBackground args);

        public delegate void set_SuspendInBackground_BeforeArgs(Params_set_SuspendInBackground args);

        public delegate void set_SuspendInBackground_WithArgs(Action<bool> orig, bool value);

        public delegate void set_XInputBufferSize_AfterArgs(Params_set_XInputBufferSize args);

        public delegate void set_XInputBufferSize_BeforeArgs(Params_set_XInputBufferSize args);

        public delegate void set_XInputBufferSize_WithArgs(Action<uint> orig, uint value);

        public delegate void set_XInputUpdateRate_AfterArgs(Params_set_XInputUpdateRate args);

        public delegate void set_XInputUpdateRate_BeforeArgs(Params_set_XInputUpdateRate args);

        public delegate void set_XInputUpdateRate_WithArgs(Action<uint> orig, uint value);

        public delegate bool SetupInternal_AfterArgs(bool ret);

        public delegate void SetupInternal_BeforeArgs();

        public delegate bool SetupInternal_WithArgs(Func<bool> orig);

        public delegate void SetZeroTickOnAllControls_AfterArgs();

        public delegate void SetZeroTickOnAllControls_BeforeArgs();

        public delegate void SetZeroTickOnAllControls_WithArgs(Action orig);

        public delegate void Update_AfterArgs();

        public delegate void Update_BeforeArgs();

        public delegate void Update_WithArgs(Action orig);

        public delegate void UpdateActiveDevice_AfterArgs();

        public delegate void UpdateActiveDevice_BeforeArgs();

        public delegate void UpdateActiveDevice_WithArgs(Action orig);

        public delegate void UpdateCurrentTime_AfterArgs();

        public delegate void UpdateCurrentTime_BeforeArgs();

        public delegate void UpdateCurrentTime_WithArgs(Action orig);

        public delegate void UpdateDeviceManagers_AfterArgs(Params_UpdateDeviceManagers args);

        public delegate void UpdateDeviceManagers_BeforeArgs(Params_UpdateDeviceManagers args);

        public delegate void UpdateDeviceManagers_WithArgs(Action<float> orig, float deltaTime);

        public delegate void UpdateDevices_AfterArgs(Params_UpdateDevices args);

        public delegate void UpdateDevices_BeforeArgs(Params_UpdateDevices args);

        public delegate void UpdateDevices_WithArgs(Action<float> orig, float deltaTime);

        public delegate void UpdateInternal_AfterArgs();

        public delegate void UpdateInternal_BeforeArgs();

        public delegate void UpdateInternal_WithArgs(Action orig);

        public delegate void UpdatePlayerActionSets_AfterArgs(Params_UpdatePlayerActionSets args);

        public delegate void UpdatePlayerActionSets_BeforeArgs(Params_UpdatePlayerActionSets args);

        public delegate void UpdatePlayerActionSets_WithArgs(Action<float> orig, float deltaTime);

        public sealed class Params_set_CommandWasPressed
        {
            public bool value;
        }

        public sealed class Params_set_InvertYAxis
        {
            public bool value;
        }

        public sealed class Params_set_IsSetup
        {
            public bool value;
        }

        public sealed class Params_set_MouseProvider
        {
            public IMouseProvider value;
        }

        public sealed class Params_set_KeyboardProvider
        {
            public IKeyboardProvider value;
        }

        public sealed class Params_set_Platform
        {
            public string value;
        }

        public sealed class Params_OnApplicationFocus
        {
            public bool focusState;
        }

        public sealed class Params_OnApplicationPause
        {
            public bool pauseState;
        }

        public sealed class Params_AddDeviceManager
        {
            public InputDeviceManager deviceManager;
        }

        public sealed class Params_UpdateDeviceManagers
        {
            public float deltaTime;
        }

        public sealed class Params_UpdateDevices
        {
            public float deltaTime;
        }

        public sealed class Params_CommitDevices
        {
            public float deltaTime;
        }

        public sealed class Params_AttachDevice
        {
            public InputDevice inputDevice;
        }

        public sealed class Params_DetachDevice
        {
            public InputDevice inputDevice;
        }

        public sealed class Params_HideDevicesWithProfile
        {
            public Type type;
        }

        public sealed class Params_AttachPlayerActionSet
        {
            public PlayerActionSet playerActionSet;
        }

        public sealed class Params_DetachPlayerActionSet
        {
            public PlayerActionSet playerActionSet;
        }

        public sealed class Params_UpdatePlayerActionSets
        {
            public float deltaTime;
        }

        public sealed class Params_set_ActiveDevice
        {
            public InputDevice value;
        }

        public sealed class Params_set_Enabled
        {
            public bool value;
        }

        public sealed class Params_set_SuspendInBackground
        {
            public bool value;
        }

        public sealed class Params_set_EnableNativeInput
        {
            public bool value;
        }

        public sealed class Params_set_EnableXInput
        {
            public bool value;
        }

        public sealed class Params_set_XInputUpdateRate
        {
            public uint value;
        }

        public sealed class Params_set_XInputBufferSize
        {
            public uint value;
        }

        public sealed class Params_set_NativeInputEnableXInput
        {
            public bool value;
        }

        public sealed class Params_set_NativeInputEnableMFi
        {
            public bool value;
        }

        public sealed class Params_set_NativeInputPreventSleep
        {
            public bool value;
        }

        public sealed class Params_set_NativeInputUpdateRate
        {
            public uint value;
        }

        public sealed class Params_set_EnableICade
        {
            public bool value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_CommandWasPressed_BeforeArgs get_CommandWasPressed
        {
            add
            {
                HookHandler._beforeget_CommandWasPressed += value;
                HookHandler.Hookget_CommandWasPressed();
            }
            remove => HookHandler._beforeget_CommandWasPressed -= value;
        }

        public static event Delegates.set_CommandWasPressed_BeforeArgs set_CommandWasPressed
        {
            add
            {
                HookHandler._beforeset_CommandWasPressed += value;
                HookHandler.Hookset_CommandWasPressed();
            }
            remove => HookHandler._beforeset_CommandWasPressed -= value;
        }

        public static event Delegates.get_InvertYAxis_BeforeArgs get_InvertYAxis
        {
            add
            {
                HookHandler._beforeget_InvertYAxis += value;
                HookHandler.Hookget_InvertYAxis();
            }
            remove => HookHandler._beforeget_InvertYAxis -= value;
        }

        public static event Delegates.set_InvertYAxis_BeforeArgs set_InvertYAxis
        {
            add
            {
                HookHandler._beforeset_InvertYAxis += value;
                HookHandler.Hookset_InvertYAxis();
            }
            remove => HookHandler._beforeset_InvertYAxis -= value;
        }

        public static event Delegates.get_IsSetup_BeforeArgs get_IsSetup
        {
            add
            {
                HookHandler._beforeget_IsSetup += value;
                HookHandler.Hookget_IsSetup();
            }
            remove => HookHandler._beforeget_IsSetup -= value;
        }

        public static event Delegates.set_IsSetup_BeforeArgs set_IsSetup
        {
            add
            {
                HookHandler._beforeset_IsSetup += value;
                HookHandler.Hookset_IsSetup();
            }
            remove => HookHandler._beforeset_IsSetup -= value;
        }

        public static event Delegates.get_MouseProvider_BeforeArgs get_MouseProvider
        {
            add
            {
                HookHandler._beforeget_MouseProvider += value;
                HookHandler.Hookget_MouseProvider();
            }
            remove => HookHandler._beforeget_MouseProvider -= value;
        }

        public static event Delegates.set_MouseProvider_BeforeArgs set_MouseProvider
        {
            add
            {
                HookHandler._beforeset_MouseProvider += value;
                HookHandler.Hookset_MouseProvider();
            }
            remove => HookHandler._beforeset_MouseProvider -= value;
        }

        public static event Delegates.get_KeyboardProvider_BeforeArgs get_KeyboardProvider
        {
            add
            {
                HookHandler._beforeget_KeyboardProvider += value;
                HookHandler.Hookget_KeyboardProvider();
            }
            remove => HookHandler._beforeget_KeyboardProvider -= value;
        }

        public static event Delegates.set_KeyboardProvider_BeforeArgs set_KeyboardProvider
        {
            add
            {
                HookHandler._beforeset_KeyboardProvider += value;
                HookHandler.Hookset_KeyboardProvider();
            }
            remove => HookHandler._beforeset_KeyboardProvider -= value;
        }

        public static event Delegates.get_Platform_BeforeArgs get_Platform
        {
            add
            {
                HookHandler._beforeget_Platform += value;
                HookHandler.Hookget_Platform();
            }
            remove => HookHandler._beforeget_Platform -= value;
        }

        public static event Delegates.set_Platform_BeforeArgs set_Platform
        {
            add
            {
                HookHandler._beforeset_Platform += value;
                HookHandler.Hookset_Platform();
            }
            remove => HookHandler._beforeset_Platform -= value;
        }

        public static event Delegates.get_MenuWasPressed_BeforeArgs get_MenuWasPressed
        {
            add
            {
                HookHandler._beforeget_MenuWasPressed += value;
                HookHandler.Hookget_MenuWasPressed();
            }
            remove => HookHandler._beforeget_MenuWasPressed -= value;
        }

        public static event Delegates.SetupInternal_BeforeArgs SetupInternal
        {
            add
            {
                HookHandler._beforeSetupInternal += value;
                HookHandler.HookSetupInternal();
            }
            remove => HookHandler._beforeSetupInternal -= value;
        }

        public static event Delegates.ResetInternal_BeforeArgs ResetInternal
        {
            add
            {
                HookHandler._beforeResetInternal += value;
                HookHandler.HookResetInternal();
            }
            remove => HookHandler._beforeResetInternal -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.UpdateInternal_BeforeArgs UpdateInternal
        {
            add
            {
                HookHandler._beforeUpdateInternal += value;
                HookHandler.HookUpdateInternal();
            }
            remove => HookHandler._beforeUpdateInternal -= value;
        }

        public static event Delegates.Reload_BeforeArgs Reload
        {
            add
            {
                HookHandler._beforeReload += value;
                HookHandler.HookReload();
            }
            remove => HookHandler._beforeReload -= value;
        }

        public static event Delegates.AssertIsSetup_BeforeArgs AssertIsSetup
        {
            add
            {
                HookHandler._beforeAssertIsSetup += value;
                HookHandler.HookAssertIsSetup();
            }
            remove => HookHandler._beforeAssertIsSetup -= value;
        }

        public static event Delegates.SetZeroTickOnAllControls_BeforeArgs SetZeroTickOnAllControls
        {
            add
            {
                HookHandler._beforeSetZeroTickOnAllControls += value;
                HookHandler.HookSetZeroTickOnAllControls();
            }
            remove => HookHandler._beforeSetZeroTickOnAllControls -= value;
        }

        public static event Delegates.ClearInputState_BeforeArgs ClearInputState
        {
            add
            {
                HookHandler._beforeClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._beforeClearInputState -= value;
        }

        public static event Delegates.OnApplicationFocus_BeforeArgs OnApplicationFocus
        {
            add
            {
                HookHandler._beforeOnApplicationFocus += value;
                HookHandler.HookOnApplicationFocus();
            }
            remove => HookHandler._beforeOnApplicationFocus -= value;
        }

        public static event Delegates.OnApplicationPause_BeforeArgs OnApplicationPause
        {
            add
            {
                HookHandler._beforeOnApplicationPause += value;
                HookHandler.HookOnApplicationPause();
            }
            remove => HookHandler._beforeOnApplicationPause -= value;
        }

        public static event Delegates.OnApplicationQuit_BeforeArgs OnApplicationQuit
        {
            add
            {
                HookHandler._beforeOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._beforeOnApplicationQuit -= value;
        }

        public static event Delegates.OnLevelWasLoaded_BeforeArgs OnLevelWasLoaded
        {
            add
            {
                HookHandler._beforeOnLevelWasLoaded += value;
                HookHandler.HookOnLevelWasLoaded();
            }
            remove => HookHandler._beforeOnLevelWasLoaded -= value;
        }

        public static event Delegates.AddDeviceManager_BeforeArgs AddDeviceManager
        {
            add
            {
                HookHandler._beforeAddDeviceManager += value;
                HookHandler.HookAddDeviceManager();
            }
            remove => HookHandler._beforeAddDeviceManager -= value;
        }

        public static event Delegates.UpdateCurrentTime_BeforeArgs UpdateCurrentTime
        {
            add
            {
                HookHandler._beforeUpdateCurrentTime += value;
                HookHandler.HookUpdateCurrentTime();
            }
            remove => HookHandler._beforeUpdateCurrentTime -= value;
        }

        public static event Delegates.UpdateDeviceManagers_BeforeArgs UpdateDeviceManagers
        {
            add
            {
                HookHandler._beforeUpdateDeviceManagers += value;
                HookHandler.HookUpdateDeviceManagers();
            }
            remove => HookHandler._beforeUpdateDeviceManagers -= value;
        }

        public static event Delegates.DestroyDeviceManagers_BeforeArgs DestroyDeviceManagers
        {
            add
            {
                HookHandler._beforeDestroyDeviceManagers += value;
                HookHandler.HookDestroyDeviceManagers();
            }
            remove => HookHandler._beforeDestroyDeviceManagers -= value;
        }

        public static event Delegates.DestroyDevices_BeforeArgs DestroyDevices
        {
            add
            {
                HookHandler._beforeDestroyDevices += value;
                HookHandler.HookDestroyDevices();
            }
            remove => HookHandler._beforeDestroyDevices -= value;
        }

        public static event Delegates.UpdateDevices_BeforeArgs UpdateDevices
        {
            add
            {
                HookHandler._beforeUpdateDevices += value;
                HookHandler.HookUpdateDevices();
            }
            remove => HookHandler._beforeUpdateDevices -= value;
        }

        public static event Delegates.CommitDevices_BeforeArgs CommitDevices
        {
            add
            {
                HookHandler._beforeCommitDevices += value;
                HookHandler.HookCommitDevices();
            }
            remove => HookHandler._beforeCommitDevices -= value;
        }

        public static event Delegates.UpdateActiveDevice_BeforeArgs UpdateActiveDevice
        {
            add
            {
                HookHandler._beforeUpdateActiveDevice += value;
                HookHandler.HookUpdateActiveDevice();
            }
            remove => HookHandler._beforeUpdateActiveDevice -= value;
        }

        public static event Delegates.AttachDevice_BeforeArgs AttachDevice
        {
            add
            {
                HookHandler._beforeAttachDevice += value;
                HookHandler.HookAttachDevice();
            }
            remove => HookHandler._beforeAttachDevice -= value;
        }

        public static event Delegates.DetachDevice_BeforeArgs DetachDevice
        {
            add
            {
                HookHandler._beforeDetachDevice += value;
                HookHandler.HookDetachDevice();
            }
            remove => HookHandler._beforeDetachDevice -= value;
        }

        public static event Delegates.HideDevicesWithProfile_BeforeArgs HideDevicesWithProfile
        {
            add
            {
                HookHandler._beforeHideDevicesWithProfile += value;
                HookHandler.HookHideDevicesWithProfile();
            }
            remove => HookHandler._beforeHideDevicesWithProfile -= value;
        }

        public static event Delegates.AttachPlayerActionSet_BeforeArgs AttachPlayerActionSet
        {
            add
            {
                HookHandler._beforeAttachPlayerActionSet += value;
                HookHandler.HookAttachPlayerActionSet();
            }
            remove => HookHandler._beforeAttachPlayerActionSet -= value;
        }

        public static event Delegates.DetachPlayerActionSet_BeforeArgs DetachPlayerActionSet
        {
            add
            {
                HookHandler._beforeDetachPlayerActionSet += value;
                HookHandler.HookDetachPlayerActionSet();
            }
            remove => HookHandler._beforeDetachPlayerActionSet -= value;
        }

        public static event Delegates.UpdatePlayerActionSets_BeforeArgs UpdatePlayerActionSets
        {
            add
            {
                HookHandler._beforeUpdatePlayerActionSets += value;
                HookHandler.HookUpdatePlayerActionSets();
            }
            remove => HookHandler._beforeUpdatePlayerActionSets -= value;
        }

        public static event Delegates.get_AnyKeyIsPressed_BeforeArgs get_AnyKeyIsPressed
        {
            add
            {
                HookHandler._beforeget_AnyKeyIsPressed += value;
                HookHandler.Hookget_AnyKeyIsPressed();
            }
            remove => HookHandler._beforeget_AnyKeyIsPressed -= value;
        }

        public static event Delegates.get_ActiveDevice_BeforeArgs get_ActiveDevice
        {
            add
            {
                HookHandler._beforeget_ActiveDevice += value;
                HookHandler.Hookget_ActiveDevice();
            }
            remove => HookHandler._beforeget_ActiveDevice -= value;
        }

        public static event Delegates.set_ActiveDevice_BeforeArgs set_ActiveDevice
        {
            add
            {
                HookHandler._beforeset_ActiveDevice += value;
                HookHandler.Hookset_ActiveDevice();
            }
            remove => HookHandler._beforeset_ActiveDevice -= value;
        }

        public static event Delegates.get_Enabled_BeforeArgs get_Enabled
        {
            add
            {
                HookHandler._beforeget_Enabled += value;
                HookHandler.Hookget_Enabled();
            }
            remove => HookHandler._beforeget_Enabled -= value;
        }

        public static event Delegates.set_Enabled_BeforeArgs set_Enabled
        {
            add
            {
                HookHandler._beforeset_Enabled += value;
                HookHandler.Hookset_Enabled();
            }
            remove => HookHandler._beforeset_Enabled -= value;
        }

        public static event Delegates.get_SuspendInBackground_BeforeArgs get_SuspendInBackground
        {
            add
            {
                HookHandler._beforeget_SuspendInBackground += value;
                HookHandler.Hookget_SuspendInBackground();
            }
            remove => HookHandler._beforeget_SuspendInBackground -= value;
        }

        public static event Delegates.set_SuspendInBackground_BeforeArgs set_SuspendInBackground
        {
            add
            {
                HookHandler._beforeset_SuspendInBackground += value;
                HookHandler.Hookset_SuspendInBackground();
            }
            remove => HookHandler._beforeset_SuspendInBackground -= value;
        }

        public static event Delegates.get_EnableNativeInput_BeforeArgs get_EnableNativeInput
        {
            add
            {
                HookHandler._beforeget_EnableNativeInput += value;
                HookHandler.Hookget_EnableNativeInput();
            }
            remove => HookHandler._beforeget_EnableNativeInput -= value;
        }

        public static event Delegates.set_EnableNativeInput_BeforeArgs set_EnableNativeInput
        {
            add
            {
                HookHandler._beforeset_EnableNativeInput += value;
                HookHandler.Hookset_EnableNativeInput();
            }
            remove => HookHandler._beforeset_EnableNativeInput -= value;
        }

        public static event Delegates.get_EnableXInput_BeforeArgs get_EnableXInput
        {
            add
            {
                HookHandler._beforeget_EnableXInput += value;
                HookHandler.Hookget_EnableXInput();
            }
            remove => HookHandler._beforeget_EnableXInput -= value;
        }

        public static event Delegates.set_EnableXInput_BeforeArgs set_EnableXInput
        {
            add
            {
                HookHandler._beforeset_EnableXInput += value;
                HookHandler.Hookset_EnableXInput();
            }
            remove => HookHandler._beforeset_EnableXInput -= value;
        }

        public static event Delegates.get_XInputUpdateRate_BeforeArgs get_XInputUpdateRate
        {
            add
            {
                HookHandler._beforeget_XInputUpdateRate += value;
                HookHandler.Hookget_XInputUpdateRate();
            }
            remove => HookHandler._beforeget_XInputUpdateRate -= value;
        }

        public static event Delegates.set_XInputUpdateRate_BeforeArgs set_XInputUpdateRate
        {
            add
            {
                HookHandler._beforeset_XInputUpdateRate += value;
                HookHandler.Hookset_XInputUpdateRate();
            }
            remove => HookHandler._beforeset_XInputUpdateRate -= value;
        }

        public static event Delegates.get_XInputBufferSize_BeforeArgs get_XInputBufferSize
        {
            add
            {
                HookHandler._beforeget_XInputBufferSize += value;
                HookHandler.Hookget_XInputBufferSize();
            }
            remove => HookHandler._beforeget_XInputBufferSize -= value;
        }

        public static event Delegates.set_XInputBufferSize_BeforeArgs set_XInputBufferSize
        {
            add
            {
                HookHandler._beforeset_XInputBufferSize += value;
                HookHandler.Hookset_XInputBufferSize();
            }
            remove => HookHandler._beforeset_XInputBufferSize -= value;
        }

        public static event Delegates.get_NativeInputEnableXInput_BeforeArgs get_NativeInputEnableXInput
        {
            add
            {
                HookHandler._beforeget_NativeInputEnableXInput += value;
                HookHandler.Hookget_NativeInputEnableXInput();
            }
            remove => HookHandler._beforeget_NativeInputEnableXInput -= value;
        }

        public static event Delegates.set_NativeInputEnableXInput_BeforeArgs set_NativeInputEnableXInput
        {
            add
            {
                HookHandler._beforeset_NativeInputEnableXInput += value;
                HookHandler.Hookset_NativeInputEnableXInput();
            }
            remove => HookHandler._beforeset_NativeInputEnableXInput -= value;
        }

        public static event Delegates.get_NativeInputEnableMFi_BeforeArgs get_NativeInputEnableMFi
        {
            add
            {
                HookHandler._beforeget_NativeInputEnableMFi += value;
                HookHandler.Hookget_NativeInputEnableMFi();
            }
            remove => HookHandler._beforeget_NativeInputEnableMFi -= value;
        }

        public static event Delegates.set_NativeInputEnableMFi_BeforeArgs set_NativeInputEnableMFi
        {
            add
            {
                HookHandler._beforeset_NativeInputEnableMFi += value;
                HookHandler.Hookset_NativeInputEnableMFi();
            }
            remove => HookHandler._beforeset_NativeInputEnableMFi -= value;
        }

        public static event Delegates.get_NativeInputPreventSleep_BeforeArgs get_NativeInputPreventSleep
        {
            add
            {
                HookHandler._beforeget_NativeInputPreventSleep += value;
                HookHandler.Hookget_NativeInputPreventSleep();
            }
            remove => HookHandler._beforeget_NativeInputPreventSleep -= value;
        }

        public static event Delegates.set_NativeInputPreventSleep_BeforeArgs set_NativeInputPreventSleep
        {
            add
            {
                HookHandler._beforeset_NativeInputPreventSleep += value;
                HookHandler.Hookset_NativeInputPreventSleep();
            }
            remove => HookHandler._beforeset_NativeInputPreventSleep -= value;
        }

        public static event Delegates.get_NativeInputUpdateRate_BeforeArgs get_NativeInputUpdateRate
        {
            add
            {
                HookHandler._beforeget_NativeInputUpdateRate += value;
                HookHandler.Hookget_NativeInputUpdateRate();
            }
            remove => HookHandler._beforeget_NativeInputUpdateRate -= value;
        }

        public static event Delegates.set_NativeInputUpdateRate_BeforeArgs set_NativeInputUpdateRate
        {
            add
            {
                HookHandler._beforeset_NativeInputUpdateRate += value;
                HookHandler.Hookset_NativeInputUpdateRate();
            }
            remove => HookHandler._beforeset_NativeInputUpdateRate -= value;
        }

        public static event Delegates.get_EnableICade_BeforeArgs get_EnableICade
        {
            add
            {
                HookHandler._beforeget_EnableICade += value;
                HookHandler.Hookget_EnableICade();
            }
            remove => HookHandler._beforeget_EnableICade -= value;
        }

        public static event Delegates.set_EnableICade_BeforeArgs set_EnableICade
        {
            add
            {
                HookHandler._beforeset_EnableICade += value;
                HookHandler.Hookset_EnableICade();
            }
            remove => HookHandler._beforeset_EnableICade -= value;
        }

        public static event Delegates.get_UnityVersion_BeforeArgs get_UnityVersion
        {
            add
            {
                HookHandler._beforeget_UnityVersion += value;
                HookHandler.Hookget_UnityVersion();
            }
            remove => HookHandler._beforeget_UnityVersion -= value;
        }

        public static event Delegates.get_CurrentTick_BeforeArgs get_CurrentTick
        {
            add
            {
                HookHandler._beforeget_CurrentTick += value;
                HookHandler.Hookget_CurrentTick();
            }
            remove => HookHandler._beforeget_CurrentTick -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_CommandWasPressed_AfterArgs get_CommandWasPressed
        {
            add
            {
                HookHandler._afterget_CommandWasPressed += value;
                HookHandler.Hookget_CommandWasPressed();
            }
            remove => HookHandler._afterget_CommandWasPressed -= value;
        }

        public static event Delegates.set_CommandWasPressed_AfterArgs set_CommandWasPressed
        {
            add
            {
                HookHandler._afterset_CommandWasPressed += value;
                HookHandler.Hookset_CommandWasPressed();
            }
            remove => HookHandler._afterset_CommandWasPressed -= value;
        }

        public static event Delegates.get_InvertYAxis_AfterArgs get_InvertYAxis
        {
            add
            {
                HookHandler._afterget_InvertYAxis += value;
                HookHandler.Hookget_InvertYAxis();
            }
            remove => HookHandler._afterget_InvertYAxis -= value;
        }

        public static event Delegates.set_InvertYAxis_AfterArgs set_InvertYAxis
        {
            add
            {
                HookHandler._afterset_InvertYAxis += value;
                HookHandler.Hookset_InvertYAxis();
            }
            remove => HookHandler._afterset_InvertYAxis -= value;
        }

        public static event Delegates.get_IsSetup_AfterArgs get_IsSetup
        {
            add
            {
                HookHandler._afterget_IsSetup += value;
                HookHandler.Hookget_IsSetup();
            }
            remove => HookHandler._afterget_IsSetup -= value;
        }

        public static event Delegates.set_IsSetup_AfterArgs set_IsSetup
        {
            add
            {
                HookHandler._afterset_IsSetup += value;
                HookHandler.Hookset_IsSetup();
            }
            remove => HookHandler._afterset_IsSetup -= value;
        }

        public static event Delegates.get_MouseProvider_AfterArgs get_MouseProvider
        {
            add
            {
                HookHandler._afterget_MouseProvider += value;
                HookHandler.Hookget_MouseProvider();
            }
            remove => HookHandler._afterget_MouseProvider -= value;
        }

        public static event Delegates.set_MouseProvider_AfterArgs set_MouseProvider
        {
            add
            {
                HookHandler._afterset_MouseProvider += value;
                HookHandler.Hookset_MouseProvider();
            }
            remove => HookHandler._afterset_MouseProvider -= value;
        }

        public static event Delegates.get_KeyboardProvider_AfterArgs get_KeyboardProvider
        {
            add
            {
                HookHandler._afterget_KeyboardProvider += value;
                HookHandler.Hookget_KeyboardProvider();
            }
            remove => HookHandler._afterget_KeyboardProvider -= value;
        }

        public static event Delegates.set_KeyboardProvider_AfterArgs set_KeyboardProvider
        {
            add
            {
                HookHandler._afterset_KeyboardProvider += value;
                HookHandler.Hookset_KeyboardProvider();
            }
            remove => HookHandler._afterset_KeyboardProvider -= value;
        }

        public static event Delegates.get_Platform_AfterArgs get_Platform
        {
            add
            {
                HookHandler._afterget_Platform += value;
                HookHandler.Hookget_Platform();
            }
            remove => HookHandler._afterget_Platform -= value;
        }

        public static event Delegates.set_Platform_AfterArgs set_Platform
        {
            add
            {
                HookHandler._afterset_Platform += value;
                HookHandler.Hookset_Platform();
            }
            remove => HookHandler._afterset_Platform -= value;
        }

        public static event Delegates.get_MenuWasPressed_AfterArgs get_MenuWasPressed
        {
            add
            {
                HookHandler._afterget_MenuWasPressed += value;
                HookHandler.Hookget_MenuWasPressed();
            }
            remove => HookHandler._afterget_MenuWasPressed -= value;
        }

        public static event Delegates.SetupInternal_AfterArgs SetupInternal
        {
            add
            {
                HookHandler._afterSetupInternal += value;
                HookHandler.HookSetupInternal();
            }
            remove => HookHandler._afterSetupInternal -= value;
        }

        public static event Delegates.ResetInternal_AfterArgs ResetInternal
        {
            add
            {
                HookHandler._afterResetInternal += value;
                HookHandler.HookResetInternal();
            }
            remove => HookHandler._afterResetInternal -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.UpdateInternal_AfterArgs UpdateInternal
        {
            add
            {
                HookHandler._afterUpdateInternal += value;
                HookHandler.HookUpdateInternal();
            }
            remove => HookHandler._afterUpdateInternal -= value;
        }

        public static event Delegates.Reload_AfterArgs Reload
        {
            add
            {
                HookHandler._afterReload += value;
                HookHandler.HookReload();
            }
            remove => HookHandler._afterReload -= value;
        }

        public static event Delegates.AssertIsSetup_AfterArgs AssertIsSetup
        {
            add
            {
                HookHandler._afterAssertIsSetup += value;
                HookHandler.HookAssertIsSetup();
            }
            remove => HookHandler._afterAssertIsSetup -= value;
        }

        public static event Delegates.SetZeroTickOnAllControls_AfterArgs SetZeroTickOnAllControls
        {
            add
            {
                HookHandler._afterSetZeroTickOnAllControls += value;
                HookHandler.HookSetZeroTickOnAllControls();
            }
            remove => HookHandler._afterSetZeroTickOnAllControls -= value;
        }

        public static event Delegates.ClearInputState_AfterArgs ClearInputState
        {
            add
            {
                HookHandler._afterClearInputState += value;
                HookHandler.HookClearInputState();
            }
            remove => HookHandler._afterClearInputState -= value;
        }

        public static event Delegates.OnApplicationFocus_AfterArgs OnApplicationFocus
        {
            add
            {
                HookHandler._afterOnApplicationFocus += value;
                HookHandler.HookOnApplicationFocus();
            }
            remove => HookHandler._afterOnApplicationFocus -= value;
        }

        public static event Delegates.OnApplicationPause_AfterArgs OnApplicationPause
        {
            add
            {
                HookHandler._afterOnApplicationPause += value;
                HookHandler.HookOnApplicationPause();
            }
            remove => HookHandler._afterOnApplicationPause -= value;
        }

        public static event Delegates.OnApplicationQuit_AfterArgs OnApplicationQuit
        {
            add
            {
                HookHandler._afterOnApplicationQuit += value;
                HookHandler.HookOnApplicationQuit();
            }
            remove => HookHandler._afterOnApplicationQuit -= value;
        }

        public static event Delegates.OnLevelWasLoaded_AfterArgs OnLevelWasLoaded
        {
            add
            {
                HookHandler._afterOnLevelWasLoaded += value;
                HookHandler.HookOnLevelWasLoaded();
            }
            remove => HookHandler._afterOnLevelWasLoaded -= value;
        }

        public static event Delegates.AddDeviceManager_AfterArgs AddDeviceManager
        {
            add
            {
                HookHandler._afterAddDeviceManager += value;
                HookHandler.HookAddDeviceManager();
            }
            remove => HookHandler._afterAddDeviceManager -= value;
        }

        public static event Delegates.UpdateCurrentTime_AfterArgs UpdateCurrentTime
        {
            add
            {
                HookHandler._afterUpdateCurrentTime += value;
                HookHandler.HookUpdateCurrentTime();
            }
            remove => HookHandler._afterUpdateCurrentTime -= value;
        }

        public static event Delegates.UpdateDeviceManagers_AfterArgs UpdateDeviceManagers
        {
            add
            {
                HookHandler._afterUpdateDeviceManagers += value;
                HookHandler.HookUpdateDeviceManagers();
            }
            remove => HookHandler._afterUpdateDeviceManagers -= value;
        }

        public static event Delegates.DestroyDeviceManagers_AfterArgs DestroyDeviceManagers
        {
            add
            {
                HookHandler._afterDestroyDeviceManagers += value;
                HookHandler.HookDestroyDeviceManagers();
            }
            remove => HookHandler._afterDestroyDeviceManagers -= value;
        }

        public static event Delegates.DestroyDevices_AfterArgs DestroyDevices
        {
            add
            {
                HookHandler._afterDestroyDevices += value;
                HookHandler.HookDestroyDevices();
            }
            remove => HookHandler._afterDestroyDevices -= value;
        }

        public static event Delegates.UpdateDevices_AfterArgs UpdateDevices
        {
            add
            {
                HookHandler._afterUpdateDevices += value;
                HookHandler.HookUpdateDevices();
            }
            remove => HookHandler._afterUpdateDevices -= value;
        }

        public static event Delegates.CommitDevices_AfterArgs CommitDevices
        {
            add
            {
                HookHandler._afterCommitDevices += value;
                HookHandler.HookCommitDevices();
            }
            remove => HookHandler._afterCommitDevices -= value;
        }

        public static event Delegates.UpdateActiveDevice_AfterArgs UpdateActiveDevice
        {
            add
            {
                HookHandler._afterUpdateActiveDevice += value;
                HookHandler.HookUpdateActiveDevice();
            }
            remove => HookHandler._afterUpdateActiveDevice -= value;
        }

        public static event Delegates.AttachDevice_AfterArgs AttachDevice
        {
            add
            {
                HookHandler._afterAttachDevice += value;
                HookHandler.HookAttachDevice();
            }
            remove => HookHandler._afterAttachDevice -= value;
        }

        public static event Delegates.DetachDevice_AfterArgs DetachDevice
        {
            add
            {
                HookHandler._afterDetachDevice += value;
                HookHandler.HookDetachDevice();
            }
            remove => HookHandler._afterDetachDevice -= value;
        }

        public static event Delegates.HideDevicesWithProfile_AfterArgs HideDevicesWithProfile
        {
            add
            {
                HookHandler._afterHideDevicesWithProfile += value;
                HookHandler.HookHideDevicesWithProfile();
            }
            remove => HookHandler._afterHideDevicesWithProfile -= value;
        }

        public static event Delegates.AttachPlayerActionSet_AfterArgs AttachPlayerActionSet
        {
            add
            {
                HookHandler._afterAttachPlayerActionSet += value;
                HookHandler.HookAttachPlayerActionSet();
            }
            remove => HookHandler._afterAttachPlayerActionSet -= value;
        }

        public static event Delegates.DetachPlayerActionSet_AfterArgs DetachPlayerActionSet
        {
            add
            {
                HookHandler._afterDetachPlayerActionSet += value;
                HookHandler.HookDetachPlayerActionSet();
            }
            remove => HookHandler._afterDetachPlayerActionSet -= value;
        }

        public static event Delegates.UpdatePlayerActionSets_AfterArgs UpdatePlayerActionSets
        {
            add
            {
                HookHandler._afterUpdatePlayerActionSets += value;
                HookHandler.HookUpdatePlayerActionSets();
            }
            remove => HookHandler._afterUpdatePlayerActionSets -= value;
        }

        public static event Delegates.get_AnyKeyIsPressed_AfterArgs get_AnyKeyIsPressed
        {
            add
            {
                HookHandler._afterget_AnyKeyIsPressed += value;
                HookHandler.Hookget_AnyKeyIsPressed();
            }
            remove => HookHandler._afterget_AnyKeyIsPressed -= value;
        }

        public static event Delegates.get_ActiveDevice_AfterArgs get_ActiveDevice
        {
            add
            {
                HookHandler._afterget_ActiveDevice += value;
                HookHandler.Hookget_ActiveDevice();
            }
            remove => HookHandler._afterget_ActiveDevice -= value;
        }

        public static event Delegates.set_ActiveDevice_AfterArgs set_ActiveDevice
        {
            add
            {
                HookHandler._afterset_ActiveDevice += value;
                HookHandler.Hookset_ActiveDevice();
            }
            remove => HookHandler._afterset_ActiveDevice -= value;
        }

        public static event Delegates.get_Enabled_AfterArgs get_Enabled
        {
            add
            {
                HookHandler._afterget_Enabled += value;
                HookHandler.Hookget_Enabled();
            }
            remove => HookHandler._afterget_Enabled -= value;
        }

        public static event Delegates.set_Enabled_AfterArgs set_Enabled
        {
            add
            {
                HookHandler._afterset_Enabled += value;
                HookHandler.Hookset_Enabled();
            }
            remove => HookHandler._afterset_Enabled -= value;
        }

        public static event Delegates.get_SuspendInBackground_AfterArgs get_SuspendInBackground
        {
            add
            {
                HookHandler._afterget_SuspendInBackground += value;
                HookHandler.Hookget_SuspendInBackground();
            }
            remove => HookHandler._afterget_SuspendInBackground -= value;
        }

        public static event Delegates.set_SuspendInBackground_AfterArgs set_SuspendInBackground
        {
            add
            {
                HookHandler._afterset_SuspendInBackground += value;
                HookHandler.Hookset_SuspendInBackground();
            }
            remove => HookHandler._afterset_SuspendInBackground -= value;
        }

        public static event Delegates.get_EnableNativeInput_AfterArgs get_EnableNativeInput
        {
            add
            {
                HookHandler._afterget_EnableNativeInput += value;
                HookHandler.Hookget_EnableNativeInput();
            }
            remove => HookHandler._afterget_EnableNativeInput -= value;
        }

        public static event Delegates.set_EnableNativeInput_AfterArgs set_EnableNativeInput
        {
            add
            {
                HookHandler._afterset_EnableNativeInput += value;
                HookHandler.Hookset_EnableNativeInput();
            }
            remove => HookHandler._afterset_EnableNativeInput -= value;
        }

        public static event Delegates.get_EnableXInput_AfterArgs get_EnableXInput
        {
            add
            {
                HookHandler._afterget_EnableXInput += value;
                HookHandler.Hookget_EnableXInput();
            }
            remove => HookHandler._afterget_EnableXInput -= value;
        }

        public static event Delegates.set_EnableXInput_AfterArgs set_EnableXInput
        {
            add
            {
                HookHandler._afterset_EnableXInput += value;
                HookHandler.Hookset_EnableXInput();
            }
            remove => HookHandler._afterset_EnableXInput -= value;
        }

        public static event Delegates.get_XInputUpdateRate_AfterArgs get_XInputUpdateRate
        {
            add
            {
                HookHandler._afterget_XInputUpdateRate += value;
                HookHandler.Hookget_XInputUpdateRate();
            }
            remove => HookHandler._afterget_XInputUpdateRate -= value;
        }

        public static event Delegates.set_XInputUpdateRate_AfterArgs set_XInputUpdateRate
        {
            add
            {
                HookHandler._afterset_XInputUpdateRate += value;
                HookHandler.Hookset_XInputUpdateRate();
            }
            remove => HookHandler._afterset_XInputUpdateRate -= value;
        }

        public static event Delegates.get_XInputBufferSize_AfterArgs get_XInputBufferSize
        {
            add
            {
                HookHandler._afterget_XInputBufferSize += value;
                HookHandler.Hookget_XInputBufferSize();
            }
            remove => HookHandler._afterget_XInputBufferSize -= value;
        }

        public static event Delegates.set_XInputBufferSize_AfterArgs set_XInputBufferSize
        {
            add
            {
                HookHandler._afterset_XInputBufferSize += value;
                HookHandler.Hookset_XInputBufferSize();
            }
            remove => HookHandler._afterset_XInputBufferSize -= value;
        }

        public static event Delegates.get_NativeInputEnableXInput_AfterArgs get_NativeInputEnableXInput
        {
            add
            {
                HookHandler._afterget_NativeInputEnableXInput += value;
                HookHandler.Hookget_NativeInputEnableXInput();
            }
            remove => HookHandler._afterget_NativeInputEnableXInput -= value;
        }

        public static event Delegates.set_NativeInputEnableXInput_AfterArgs set_NativeInputEnableXInput
        {
            add
            {
                HookHandler._afterset_NativeInputEnableXInput += value;
                HookHandler.Hookset_NativeInputEnableXInput();
            }
            remove => HookHandler._afterset_NativeInputEnableXInput -= value;
        }

        public static event Delegates.get_NativeInputEnableMFi_AfterArgs get_NativeInputEnableMFi
        {
            add
            {
                HookHandler._afterget_NativeInputEnableMFi += value;
                HookHandler.Hookget_NativeInputEnableMFi();
            }
            remove => HookHandler._afterget_NativeInputEnableMFi -= value;
        }

        public static event Delegates.set_NativeInputEnableMFi_AfterArgs set_NativeInputEnableMFi
        {
            add
            {
                HookHandler._afterset_NativeInputEnableMFi += value;
                HookHandler.Hookset_NativeInputEnableMFi();
            }
            remove => HookHandler._afterset_NativeInputEnableMFi -= value;
        }

        public static event Delegates.get_NativeInputPreventSleep_AfterArgs get_NativeInputPreventSleep
        {
            add
            {
                HookHandler._afterget_NativeInputPreventSleep += value;
                HookHandler.Hookget_NativeInputPreventSleep();
            }
            remove => HookHandler._afterget_NativeInputPreventSleep -= value;
        }

        public static event Delegates.set_NativeInputPreventSleep_AfterArgs set_NativeInputPreventSleep
        {
            add
            {
                HookHandler._afterset_NativeInputPreventSleep += value;
                HookHandler.Hookset_NativeInputPreventSleep();
            }
            remove => HookHandler._afterset_NativeInputPreventSleep -= value;
        }

        public static event Delegates.get_NativeInputUpdateRate_AfterArgs get_NativeInputUpdateRate
        {
            add
            {
                HookHandler._afterget_NativeInputUpdateRate += value;
                HookHandler.Hookget_NativeInputUpdateRate();
            }
            remove => HookHandler._afterget_NativeInputUpdateRate -= value;
        }

        public static event Delegates.set_NativeInputUpdateRate_AfterArgs set_NativeInputUpdateRate
        {
            add
            {
                HookHandler._afterset_NativeInputUpdateRate += value;
                HookHandler.Hookset_NativeInputUpdateRate();
            }
            remove => HookHandler._afterset_NativeInputUpdateRate -= value;
        }

        public static event Delegates.get_EnableICade_AfterArgs get_EnableICade
        {
            add
            {
                HookHandler._afterget_EnableICade += value;
                HookHandler.Hookget_EnableICade();
            }
            remove => HookHandler._afterget_EnableICade -= value;
        }

        public static event Delegates.set_EnableICade_AfterArgs set_EnableICade
        {
            add
            {
                HookHandler._afterset_EnableICade += value;
                HookHandler.Hookset_EnableICade();
            }
            remove => HookHandler._afterset_EnableICade -= value;
        }

        public static event Delegates.get_UnityVersion_AfterArgs get_UnityVersion
        {
            add
            {
                HookHandler._afterget_UnityVersion += value;
                HookHandler.Hookget_UnityVersion();
            }
            remove => HookHandler._afterget_UnityVersion -= value;
        }

        public static event Delegates.get_CurrentTick_AfterArgs get_CurrentTick
        {
            add
            {
                HookHandler._afterget_CurrentTick += value;
                HookHandler.Hookget_CurrentTick();
            }
            remove => HookHandler._afterget_CurrentTick -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_CommandWasPressed_WithArgs get_CommandWasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_CommandWasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_CommandWasPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_CommandWasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_CommandWasPressed", false), value);
        }

        public static event Delegates.set_CommandWasPressed_WithArgs set_CommandWasPressed
        {
            add => HookEndpointManager.Add<Delegates.set_CommandWasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_CommandWasPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_CommandWasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_CommandWasPressed", false), value);
        }

        public static event Delegates.get_InvertYAxis_WithArgs get_InvertYAxis
        {
            add => HookEndpointManager.Add<Delegates.get_InvertYAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_InvertYAxis", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_InvertYAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_InvertYAxis", false), value);
        }

        public static event Delegates.set_InvertYAxis_WithArgs set_InvertYAxis
        {
            add => HookEndpointManager.Add<Delegates.set_InvertYAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_InvertYAxis", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_InvertYAxis_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_InvertYAxis", false), value);
        }

        public static event Delegates.get_IsSetup_WithArgs get_IsSetup
        {
            add => HookEndpointManager.Add<Delegates.get_IsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_IsSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_IsSetup", false), value);
        }

        public static event Delegates.set_IsSetup_WithArgs set_IsSetup
        {
            add => HookEndpointManager.Add<Delegates.set_IsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_IsSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_IsSetup", false), value);
        }

        public static event Delegates.get_MouseProvider_WithArgs get_MouseProvider
        {
            add => HookEndpointManager.Add<Delegates.get_MouseProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_MouseProvider", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_MouseProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_MouseProvider", false), value);
        }

        public static event Delegates.set_MouseProvider_WithArgs set_MouseProvider
        {
            add => HookEndpointManager.Add<Delegates.set_MouseProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_MouseProvider", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_MouseProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_MouseProvider", false), value);
        }

        public static event Delegates.get_KeyboardProvider_WithArgs get_KeyboardProvider
        {
            add => HookEndpointManager.Add<Delegates.get_KeyboardProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_KeyboardProvider", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_KeyboardProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_KeyboardProvider", false), value);
        }

        public static event Delegates.set_KeyboardProvider_WithArgs set_KeyboardProvider
        {
            add => HookEndpointManager.Add<Delegates.set_KeyboardProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_KeyboardProvider", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_KeyboardProvider_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_KeyboardProvider", false), value);
        }

        public static event Delegates.get_Platform_WithArgs get_Platform
        {
            add => HookEndpointManager.Add<Delegates.get_Platform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_Platform", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Platform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_Platform", false), value);
        }

        public static event Delegates.set_Platform_WithArgs set_Platform
        {
            add => HookEndpointManager.Add<Delegates.set_Platform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_Platform", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_Platform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_Platform", false), value);
        }

        public static event Delegates.get_MenuWasPressed_WithArgs get_MenuWasPressed
        {
            add => HookEndpointManager.Add<Delegates.get_MenuWasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_MenuWasPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_MenuWasPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_MenuWasPressed", false), value);
        }

        public static event Delegates.SetupInternal_WithArgs SetupInternal
        {
            add => HookEndpointManager.Add<Delegates.SetupInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "SetupInternal", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetupInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "SetupInternal", false), value);
        }

        public static event Delegates.ResetInternal_WithArgs ResetInternal
        {
            add => HookEndpointManager.Add<Delegates.ResetInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "ResetInternal", false), value);
            remove => HookEndpointManager.Remove<Delegates.ResetInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "ResetInternal", false), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "Update", false), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "Update", false), value);
        }

        public static event Delegates.UpdateInternal_WithArgs UpdateInternal
        {
            add => HookEndpointManager.Add<Delegates.UpdateInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateInternal", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateInternal", false), value);
        }

        public static event Delegates.Reload_WithArgs Reload
        {
            add => HookEndpointManager.Add<Delegates.Reload_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "Reload", false), value);
            remove => HookEndpointManager.Remove<Delegates.Reload_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "Reload", false), value);
        }

        public static event Delegates.AssertIsSetup_WithArgs AssertIsSetup
        {
            add => HookEndpointManager.Add<Delegates.AssertIsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AssertIsSetup", false), value);
            remove => HookEndpointManager.Remove<Delegates.AssertIsSetup_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AssertIsSetup", false), value);
        }

        public static event Delegates.SetZeroTickOnAllControls_WithArgs SetZeroTickOnAllControls
        {
            add => HookEndpointManager.Add<Delegates.SetZeroTickOnAllControls_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "SetZeroTickOnAllControls", false), value);
            remove => HookEndpointManager.Remove<Delegates.SetZeroTickOnAllControls_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "SetZeroTickOnAllControls", false), value);
        }

        public static event Delegates.ClearInputState_WithArgs ClearInputState
        {
            add => HookEndpointManager.Add<Delegates.ClearInputState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "ClearInputState", false), value);
            remove => HookEndpointManager.Remove<Delegates.ClearInputState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "ClearInputState", false), value);
        }

        public static event Delegates.OnApplicationFocus_WithArgs OnApplicationFocus
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationFocus_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationFocus", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationFocus_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationFocus", false), value);
        }

        public static event Delegates.OnApplicationPause_WithArgs OnApplicationPause
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationPause_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationPause", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationPause_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationPause", false), value);
        }

        public static event Delegates.OnApplicationQuit_WithArgs OnApplicationQuit
        {
            add => HookEndpointManager.Add<Delegates.OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationQuit", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnApplicationQuit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnApplicationQuit", false), value);
        }

        public static event Delegates.OnLevelWasLoaded_WithArgs OnLevelWasLoaded
        {
            add => HookEndpointManager.Add<Delegates.OnLevelWasLoaded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnLevelWasLoaded", false), value);
            remove => HookEndpointManager.Remove<Delegates.OnLevelWasLoaded_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "OnLevelWasLoaded", false), value);
        }

        public static event Delegates.AddDeviceManager_WithArgs AddDeviceManager
        {
            add => HookEndpointManager.Add<Delegates.AddDeviceManager_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AddDeviceManager", false), value);
            remove => HookEndpointManager.Remove<Delegates.AddDeviceManager_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AddDeviceManager", false), value);
        }

        public static event Delegates.UpdateCurrentTime_WithArgs UpdateCurrentTime
        {
            add => HookEndpointManager.Add<Delegates.UpdateCurrentTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateCurrentTime", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateCurrentTime_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateCurrentTime", false), value);
        }

        public static event Delegates.UpdateDeviceManagers_WithArgs UpdateDeviceManagers
        {
            add => HookEndpointManager.Add<Delegates.UpdateDeviceManagers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateDeviceManagers", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateDeviceManagers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateDeviceManagers", false), value);
        }

        public static event Delegates.DestroyDeviceManagers_WithArgs DestroyDeviceManagers
        {
            add => HookEndpointManager.Add<Delegates.DestroyDeviceManagers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DestroyDeviceManagers", false), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyDeviceManagers_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DestroyDeviceManagers", false), value);
        }

        public static event Delegates.DestroyDevices_WithArgs DestroyDevices
        {
            add => HookEndpointManager.Add<Delegates.DestroyDevices_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DestroyDevices", false), value);
            remove => HookEndpointManager.Remove<Delegates.DestroyDevices_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DestroyDevices", false), value);
        }

        public static event Delegates.UpdateDevices_WithArgs UpdateDevices
        {
            add => HookEndpointManager.Add<Delegates.UpdateDevices_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateDevices", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateDevices_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateDevices", false), value);
        }

        public static event Delegates.CommitDevices_WithArgs CommitDevices
        {
            add => HookEndpointManager.Add<Delegates.CommitDevices_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "CommitDevices", false), value);
            remove => HookEndpointManager.Remove<Delegates.CommitDevices_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "CommitDevices", false), value);
        }

        public static event Delegates.UpdateActiveDevice_WithArgs UpdateActiveDevice
        {
            add => HookEndpointManager.Add<Delegates.UpdateActiveDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateActiveDevice", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateActiveDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdateActiveDevice", false), value);
        }

        public static event Delegates.AttachDevice_WithArgs AttachDevice
        {
            add => HookEndpointManager.Add<Delegates.AttachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AttachDevice", false), value);
            remove => HookEndpointManager.Remove<Delegates.AttachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AttachDevice", false), value);
        }

        public static event Delegates.DetachDevice_WithArgs DetachDevice
        {
            add => HookEndpointManager.Add<Delegates.DetachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DetachDevice", false), value);
            remove => HookEndpointManager.Remove<Delegates.DetachDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DetachDevice", false), value);
        }

        public static event Delegates.HideDevicesWithProfile_WithArgs HideDevicesWithProfile
        {
            add => HookEndpointManager.Add<Delegates.HideDevicesWithProfile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "HideDevicesWithProfile", false), value);
            remove => HookEndpointManager.Remove<Delegates.HideDevicesWithProfile_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "HideDevicesWithProfile", false), value);
        }

        public static event Delegates.AttachPlayerActionSet_WithArgs AttachPlayerActionSet
        {
            add => HookEndpointManager.Add<Delegates.AttachPlayerActionSet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AttachPlayerActionSet", false), value);
            remove => HookEndpointManager.Remove<Delegates.AttachPlayerActionSet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "AttachPlayerActionSet", false), value);
        }

        public static event Delegates.DetachPlayerActionSet_WithArgs DetachPlayerActionSet
        {
            add => HookEndpointManager.Add<Delegates.DetachPlayerActionSet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DetachPlayerActionSet", false), value);
            remove => HookEndpointManager.Remove<Delegates.DetachPlayerActionSet_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "DetachPlayerActionSet", false), value);
        }

        public static event Delegates.UpdatePlayerActionSets_WithArgs UpdatePlayerActionSets
        {
            add => HookEndpointManager.Add<Delegates.UpdatePlayerActionSets_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdatePlayerActionSets", false), value);
            remove => HookEndpointManager.Remove<Delegates.UpdatePlayerActionSets_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "UpdatePlayerActionSets", false), value);
        }

        public static event Delegates.get_AnyKeyIsPressed_WithArgs get_AnyKeyIsPressed
        {
            add => HookEndpointManager.Add<Delegates.get_AnyKeyIsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_AnyKeyIsPressed", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_AnyKeyIsPressed_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_AnyKeyIsPressed", false), value);
        }

        public static event Delegates.get_ActiveDevice_WithArgs get_ActiveDevice
        {
            add => HookEndpointManager.Add<Delegates.get_ActiveDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_ActiveDevice", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ActiveDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_ActiveDevice", false), value);
        }

        public static event Delegates.set_ActiveDevice_WithArgs set_ActiveDevice
        {
            add => HookEndpointManager.Add<Delegates.set_ActiveDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_ActiveDevice", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_ActiveDevice_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_ActiveDevice", false), value);
        }

        public static event Delegates.get_Enabled_WithArgs get_Enabled
        {
            add => HookEndpointManager.Add<Delegates.get_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_Enabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_Enabled", false), value);
        }

        public static event Delegates.set_Enabled_WithArgs set_Enabled
        {
            add => HookEndpointManager.Add<Delegates.set_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_Enabled", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_Enabled_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_Enabled", false), value);
        }

        public static event Delegates.get_SuspendInBackground_WithArgs get_SuspendInBackground
        {
            add => HookEndpointManager.Add<Delegates.get_SuspendInBackground_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_SuspendInBackground", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_SuspendInBackground_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_SuspendInBackground", false), value);
        }

        public static event Delegates.set_SuspendInBackground_WithArgs set_SuspendInBackground
        {
            add => HookEndpointManager.Add<Delegates.set_SuspendInBackground_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_SuspendInBackground", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_SuspendInBackground_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_SuspendInBackground", false), value);
        }

        public static event Delegates.get_EnableNativeInput_WithArgs get_EnableNativeInput
        {
            add => HookEndpointManager.Add<Delegates.get_EnableNativeInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableNativeInput", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_EnableNativeInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableNativeInput", false), value);
        }

        public static event Delegates.set_EnableNativeInput_WithArgs set_EnableNativeInput
        {
            add => HookEndpointManager.Add<Delegates.set_EnableNativeInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableNativeInput", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_EnableNativeInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableNativeInput", false), value);
        }

        public static event Delegates.get_EnableXInput_WithArgs get_EnableXInput
        {
            add => HookEndpointManager.Add<Delegates.get_EnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableXInput", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_EnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableXInput", false), value);
        }

        public static event Delegates.set_EnableXInput_WithArgs set_EnableXInput
        {
            add => HookEndpointManager.Add<Delegates.set_EnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableXInput", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_EnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableXInput", false), value);
        }

        public static event Delegates.get_XInputUpdateRate_WithArgs get_XInputUpdateRate
        {
            add => HookEndpointManager.Add<Delegates.get_XInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_XInputUpdateRate", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_XInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_XInputUpdateRate", false), value);
        }

        public static event Delegates.set_XInputUpdateRate_WithArgs set_XInputUpdateRate
        {
            add => HookEndpointManager.Add<Delegates.set_XInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_XInputUpdateRate", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_XInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_XInputUpdateRate", false), value);
        }

        public static event Delegates.get_XInputBufferSize_WithArgs get_XInputBufferSize
        {
            add => HookEndpointManager.Add<Delegates.get_XInputBufferSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_XInputBufferSize", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_XInputBufferSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_XInputBufferSize", false), value);
        }

        public static event Delegates.set_XInputBufferSize_WithArgs set_XInputBufferSize
        {
            add => HookEndpointManager.Add<Delegates.set_XInputBufferSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_XInputBufferSize", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_XInputBufferSize_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_XInputBufferSize", false), value);
        }

        public static event Delegates.get_NativeInputEnableXInput_WithArgs get_NativeInputEnableXInput
        {
            add => HookEndpointManager.Add<Delegates.get_NativeInputEnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputEnableXInput", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_NativeInputEnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputEnableXInput", false), value);
        }

        public static event Delegates.set_NativeInputEnableXInput_WithArgs set_NativeInputEnableXInput
        {
            add => HookEndpointManager.Add<Delegates.set_NativeInputEnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputEnableXInput", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_NativeInputEnableXInput_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputEnableXInput", false), value);
        }

        public static event Delegates.get_NativeInputEnableMFi_WithArgs get_NativeInputEnableMFi
        {
            add => HookEndpointManager.Add<Delegates.get_NativeInputEnableMFi_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputEnableMFi", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_NativeInputEnableMFi_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputEnableMFi", false), value);
        }

        public static event Delegates.set_NativeInputEnableMFi_WithArgs set_NativeInputEnableMFi
        {
            add => HookEndpointManager.Add<Delegates.set_NativeInputEnableMFi_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputEnableMFi", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_NativeInputEnableMFi_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputEnableMFi", false), value);
        }

        public static event Delegates.get_NativeInputPreventSleep_WithArgs get_NativeInputPreventSleep
        {
            add => HookEndpointManager.Add<Delegates.get_NativeInputPreventSleep_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputPreventSleep", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_NativeInputPreventSleep_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputPreventSleep", false), value);
        }

        public static event Delegates.set_NativeInputPreventSleep_WithArgs set_NativeInputPreventSleep
        {
            add => HookEndpointManager.Add<Delegates.set_NativeInputPreventSleep_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputPreventSleep", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_NativeInputPreventSleep_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputPreventSleep", false), value);
        }

        public static event Delegates.get_NativeInputUpdateRate_WithArgs get_NativeInputUpdateRate
        {
            add => HookEndpointManager.Add<Delegates.get_NativeInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputUpdateRate", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_NativeInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_NativeInputUpdateRate", false), value);
        }

        public static event Delegates.set_NativeInputUpdateRate_WithArgs set_NativeInputUpdateRate
        {
            add => HookEndpointManager.Add<Delegates.set_NativeInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputUpdateRate", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_NativeInputUpdateRate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_NativeInputUpdateRate", false), value);
        }

        public static event Delegates.get_EnableICade_WithArgs get_EnableICade
        {
            add => HookEndpointManager.Add<Delegates.get_EnableICade_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableICade", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_EnableICade_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_EnableICade", false), value);
        }

        public static event Delegates.set_EnableICade_WithArgs set_EnableICade
        {
            add => HookEndpointManager.Add<Delegates.set_EnableICade_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableICade", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_EnableICade_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "set_EnableICade", false), value);
        }

        public static event Delegates.get_UnityVersion_WithArgs get_UnityVersion
        {
            add => HookEndpointManager.Add<Delegates.get_UnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_UnityVersion", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_UnityVersion_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_UnityVersion", false), value);
        }

        public static event Delegates.get_CurrentTick_WithArgs get_CurrentTick
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_CurrentTick", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentTick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InputManager), "get_CurrentTick", false), value);
        }
    }
}