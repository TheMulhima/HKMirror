namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HealthCocoon class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHealthCocoon
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.HealthCocoon.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.HealthCocoon.orig_Awake orig, HealthCocoon self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.HealthCocoon.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.HealthCocoon.orig_Start orig, HealthCocoon self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookPlaySound()
        {
            if (!HookedList.Contains("PlaySound"))
            {
                HookedList.Add("PlaySound");
                On.HealthCocoon.PlaySound += PlaySound;
            }
        }

        internal static event Delegates.PlaySound_BeforeArgs _beforePlaySound;
        internal static event Delegates.PlaySound_NormalArgs _afterPlaySound;

        private static void PlaySound(On.HealthCocoon.orig_PlaySound orig, HealthCocoon self, AudioClip clip)
        {
            Delegates.Params_PlaySound @params = new()
            {
                self = self, clip = clip
            };
            _beforePlaySound?.Invoke(@params);
            self = @params.self;
            clip = @params.clip;
            orig(self, clip);
            if (_afterPlaySound != null) _afterPlaySound.Invoke(@params);
        }

        internal static void HookAnimate()
        {
            if (!HookedList.Contains("Animate"))
            {
                HookedList.Add("Animate");
                On.HealthCocoon.Animate += Animate;
            }
        }

        internal static event Delegates.Animate_BeforeArgs _beforeAnimate;

        private static IEnumerator Animate(On.HealthCocoon.orig_Animate orig, HealthCocoon self)
        {
            Delegates.Params_Animate @params = new()
            {
                self = self
            };
            _beforeAnimate?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookOnTriggerEnter2D()
        {
            if (!HookedList.Contains("OnTriggerEnter2D"))
            {
                HookedList.Add("OnTriggerEnter2D");
                On.HealthCocoon.OnTriggerEnter2D += OnTriggerEnter2D;
            }
        }

        internal static event Delegates.OnTriggerEnter2D_BeforeArgs _beforeOnTriggerEnter2D;
        internal static event Delegates.OnTriggerEnter2D_NormalArgs _afterOnTriggerEnter2D;

        private static void OnTriggerEnter2D(On.HealthCocoon.orig_OnTriggerEnter2D orig, HealthCocoon self,
            Collider2D collision)
        {
            Delegates.Params_OnTriggerEnter2D @params = new()
            {
                self = self, collision = collision
            };
            _beforeOnTriggerEnter2D?.Invoke(@params);
            self = @params.self;
            collision = @params.collision;
            orig(self, collision);
            if (_afterOnTriggerEnter2D != null) _afterOnTriggerEnter2D.Invoke(@params);
        }

        internal static void HookSetBroken()
        {
            if (!HookedList.Contains("SetBroken"))
            {
                HookedList.Add("SetBroken");
                On.HealthCocoon.SetBroken += SetBroken;
            }
        }

        internal static event Delegates.SetBroken_BeforeArgs _beforeSetBroken;
        internal static event Delegates.SetBroken_NormalArgs _afterSetBroken;

        private static void SetBroken(On.HealthCocoon.orig_SetBroken orig, HealthCocoon self)
        {
            Delegates.Params_SetBroken @params = new()
            {
                self = self
            };
            _beforeSetBroken?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetBroken != null) _afterSetBroken.Invoke(@params);
        }

        internal static void HookSetScuttlerAmount()
        {
            if (!HookedList.Contains("SetScuttlerAmount"))
            {
                HookedList.Add("SetScuttlerAmount");
                On.HealthCocoon.SetScuttlerAmount += SetScuttlerAmount;
            }
        }

        internal static event Delegates.SetScuttlerAmount_BeforeArgs _beforeSetScuttlerAmount;
        internal static event Delegates.SetScuttlerAmount_NormalArgs _afterSetScuttlerAmount;

        private static void SetScuttlerAmount(On.HealthCocoon.orig_SetScuttlerAmount orig, HealthCocoon self,
            int amount)
        {
            Delegates.Params_SetScuttlerAmount @params = new()
            {
                self = self, amount = amount
            };
            _beforeSetScuttlerAmount?.Invoke(@params);
            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterSetScuttlerAmount != null) _afterSetScuttlerAmount.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Animate_BeforeArgs(Params_Animate args);

        public delegate IEnumerator Animate_NormalArgs(Params_Animate args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void OnTriggerEnter2D_BeforeArgs(Params_OnTriggerEnter2D args);

        public delegate void OnTriggerEnter2D_NormalArgs(Params_OnTriggerEnter2D args);

        public delegate void PlaySound_BeforeArgs(Params_PlaySound args);

        public delegate void PlaySound_NormalArgs(Params_PlaySound args);

        public delegate void SetBroken_BeforeArgs(Params_SetBroken args);

        public delegate void SetBroken_NormalArgs(Params_SetBroken args);

        public delegate void SetScuttlerAmount_BeforeArgs(Params_SetScuttlerAmount args);

        public delegate void SetScuttlerAmount_NormalArgs(Params_SetScuttlerAmount args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public HealthCocoon self;
        }

        public sealed class Params_Start
        {
            public HealthCocoon self;
        }

        public sealed class Params_PlaySound
        {
            public AudioClip clip;
            public HealthCocoon self;
        }

        public sealed class Params_Animate
        {
            public HealthCocoon self;
        }

        public sealed class Params_OnTriggerEnter2D
        {
            public Collider2D collision;
            public HealthCocoon self;
        }

        public sealed class Params_SetBroken
        {
            public HealthCocoon self;
        }

        public sealed class Params_SetScuttlerAmount
        {
            public int amount;
            public HealthCocoon self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.PlaySound_BeforeArgs PlaySound
        {
            add
            {
                HookHandler._beforePlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._beforePlaySound -= value;
        }

        public static event Delegates.Animate_BeforeArgs Animate
        {
            add
            {
                HookHandler._beforeAnimate += value;
                HookHandler.HookAnimate();
            }
            remove => HookHandler._beforeAnimate -= value;
        }

        public static event Delegates.OnTriggerEnter2D_BeforeArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._beforeOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._beforeOnTriggerEnter2D -= value;
        }

        public static event Delegates.SetBroken_BeforeArgs SetBroken
        {
            add
            {
                HookHandler._beforeSetBroken += value;
                HookHandler.HookSetBroken();
            }
            remove => HookHandler._beforeSetBroken -= value;
        }

        public static event Delegates.SetScuttlerAmount_BeforeArgs SetScuttlerAmount
        {
            add
            {
                HookHandler._beforeSetScuttlerAmount += value;
                HookHandler.HookSetScuttlerAmount();
            }
            remove => HookHandler._beforeSetScuttlerAmount -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.PlaySound_NormalArgs PlaySound
        {
            add
            {
                HookHandler._afterPlaySound += value;
                HookHandler.HookPlaySound();
            }
            remove => HookHandler._afterPlaySound -= value;
        }

        public static event Delegates.OnTriggerEnter2D_NormalArgs OnTriggerEnter2D
        {
            add
            {
                HookHandler._afterOnTriggerEnter2D += value;
                HookHandler.HookOnTriggerEnter2D();
            }
            remove => HookHandler._afterOnTriggerEnter2D -= value;
        }

        public static event Delegates.SetBroken_NormalArgs SetBroken
        {
            add
            {
                HookHandler._afterSetBroken += value;
                HookHandler.HookSetBroken();
            }
            remove => HookHandler._afterSetBroken -= value;
        }

        public static event Delegates.SetScuttlerAmount_NormalArgs SetScuttlerAmount
        {
            add
            {
                HookHandler._afterSetScuttlerAmount += value;
                HookHandler.HookSetScuttlerAmount();
            }
            remove => HookHandler._afterSetScuttlerAmount -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.HealthCocoon.hook_Awake Awake
        {
            add => On.HealthCocoon.Awake += value;
            remove => On.HealthCocoon.Awake -= value;
        }

        public static event On.HealthCocoon.hook_Start Start
        {
            add => On.HealthCocoon.Start += value;
            remove => On.HealthCocoon.Start -= value;
        }

        public static event On.HealthCocoon.hook_PlaySound PlaySound
        {
            add => On.HealthCocoon.PlaySound += value;
            remove => On.HealthCocoon.PlaySound -= value;
        }

        public static event On.HealthCocoon.hook_Animate Animate
        {
            add => On.HealthCocoon.Animate += value;
            remove => On.HealthCocoon.Animate -= value;
        }

        public static event On.HealthCocoon.hook_OnTriggerEnter2D OnTriggerEnter2D
        {
            add => On.HealthCocoon.OnTriggerEnter2D += value;
            remove => On.HealthCocoon.OnTriggerEnter2D -= value;
        }

        public static event On.HealthCocoon.hook_SetBroken SetBroken
        {
            add => On.HealthCocoon.SetBroken += value;
            remove => On.HealthCocoon.SetBroken -= value;
        }

        public static event On.HealthCocoon.hook_SetScuttlerAmount SetScuttlerAmount
        {
            add => On.HealthCocoon.SetScuttlerAmount += value;
            remove => On.HealthCocoon.SetScuttlerAmount -= value;
        }
    }
}