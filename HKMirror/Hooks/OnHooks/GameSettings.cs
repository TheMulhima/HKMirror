namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameSettings class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameSettings
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookLoadGameOptionsSettings()
        {
            if (!HookedList.Contains("LoadGameOptionsSettings"))
            {
                HookedList.Add("LoadGameOptionsSettings");
                On.GameSettings.LoadGameOptionsSettings += LoadGameOptionsSettings;
            }
        }

        internal static event Delegates.LoadGameOptionsSettings_BeforeArgs _beforeLoadGameOptionsSettings;
        internal static event Delegates.LoadGameOptionsSettings_NormalArgs _afterLoadGameOptionsSettings;

        private static void LoadGameOptionsSettings(On.GameSettings.orig_LoadGameOptionsSettings orig,
            GameSettings self)
        {
            Delegates.Params_LoadGameOptionsSettings @params = new()
            {
                self = self
            };
            _beforeLoadGameOptionsSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadGameOptionsSettings != null) _afterLoadGameOptionsSettings.Invoke(@params);
        }

        internal static void HookSaveGameOptionsSettings()
        {
            if (!HookedList.Contains("SaveGameOptionsSettings"))
            {
                HookedList.Add("SaveGameOptionsSettings");
                On.GameSettings.SaveGameOptionsSettings += SaveGameOptionsSettings;
            }
        }

        internal static event Delegates.SaveGameOptionsSettings_BeforeArgs _beforeSaveGameOptionsSettings;
        internal static event Delegates.SaveGameOptionsSettings_NormalArgs _afterSaveGameOptionsSettings;

        private static void SaveGameOptionsSettings(On.GameSettings.orig_SaveGameOptionsSettings orig,
            GameSettings self)
        {
            Delegates.Params_SaveGameOptionsSettings @params = new()
            {
                self = self
            };
            _beforeSaveGameOptionsSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveGameOptionsSettings != null) _afterSaveGameOptionsSettings.Invoke(@params);
        }

        internal static void HookResetGameOptionsSettings()
        {
            if (!HookedList.Contains("ResetGameOptionsSettings"))
            {
                HookedList.Add("ResetGameOptionsSettings");
                On.GameSettings.ResetGameOptionsSettings += ResetGameOptionsSettings;
            }
        }

        internal static event Delegates.ResetGameOptionsSettings_BeforeArgs _beforeResetGameOptionsSettings;
        internal static event Delegates.ResetGameOptionsSettings_NormalArgs _afterResetGameOptionsSettings;

        private static void ResetGameOptionsSettings(On.GameSettings.orig_ResetGameOptionsSettings orig,
            GameSettings self)
        {
            Delegates.Params_ResetGameOptionsSettings @params = new()
            {
                self = self
            };
            _beforeResetGameOptionsSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetGameOptionsSettings != null) _afterResetGameOptionsSettings.Invoke(@params);
        }

        internal static void HookLoadVideoSettings()
        {
            if (!HookedList.Contains("LoadVideoSettings"))
            {
                HookedList.Add("LoadVideoSettings");
                On.GameSettings.LoadVideoSettings += LoadVideoSettings;
            }
        }

        internal static event Delegates.LoadVideoSettings_BeforeArgs _beforeLoadVideoSettings;
        internal static event Delegates.LoadVideoSettings_NormalArgs _afterLoadVideoSettings;

        private static void LoadVideoSettings(On.GameSettings.orig_LoadVideoSettings orig, GameSettings self)
        {
            Delegates.Params_LoadVideoSettings @params = new()
            {
                self = self
            };
            _beforeLoadVideoSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadVideoSettings != null) _afterLoadVideoSettings.Invoke(@params);
        }

        internal static void HookSaveVideoSettings()
        {
            if (!HookedList.Contains("SaveVideoSettings"))
            {
                HookedList.Add("SaveVideoSettings");
                On.GameSettings.SaveVideoSettings += SaveVideoSettings;
            }
        }

        internal static event Delegates.SaveVideoSettings_BeforeArgs _beforeSaveVideoSettings;
        internal static event Delegates.SaveVideoSettings_NormalArgs _afterSaveVideoSettings;

        private static void SaveVideoSettings(On.GameSettings.orig_SaveVideoSettings orig, GameSettings self)
        {
            Delegates.Params_SaveVideoSettings @params = new()
            {
                self = self
            };
            _beforeSaveVideoSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveVideoSettings != null) _afterSaveVideoSettings.Invoke(@params);
        }

        internal static void HookResetVideoSettings()
        {
            if (!HookedList.Contains("ResetVideoSettings"))
            {
                HookedList.Add("ResetVideoSettings");
                On.GameSettings.ResetVideoSettings += ResetVideoSettings;
            }
        }

        internal static event Delegates.ResetVideoSettings_BeforeArgs _beforeResetVideoSettings;
        internal static event Delegates.ResetVideoSettings_NormalArgs _afterResetVideoSettings;

        private static void ResetVideoSettings(On.GameSettings.orig_ResetVideoSettings orig, GameSettings self)
        {
            Delegates.Params_ResetVideoSettings @params = new()
            {
                self = self
            };
            _beforeResetVideoSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetVideoSettings != null) _afterResetVideoSettings.Invoke(@params);
        }

        internal static void HookLoadOverscanSettings()
        {
            if (!HookedList.Contains("LoadOverscanSettings"))
            {
                HookedList.Add("LoadOverscanSettings");
                On.GameSettings.LoadOverscanSettings += LoadOverscanSettings;
            }
        }

        internal static event Delegates.LoadOverscanSettings_BeforeArgs _beforeLoadOverscanSettings;
        internal static event Delegates.LoadOverscanSettings_NormalArgs _afterLoadOverscanSettings;

        private static void LoadOverscanSettings(On.GameSettings.orig_LoadOverscanSettings orig, GameSettings self)
        {
            Delegates.Params_LoadOverscanSettings @params = new()
            {
                self = self
            };
            _beforeLoadOverscanSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadOverscanSettings != null) _afterLoadOverscanSettings.Invoke(@params);
        }

        internal static void HookSaveOverscanSettings()
        {
            if (!HookedList.Contains("SaveOverscanSettings"))
            {
                HookedList.Add("SaveOverscanSettings");
                On.GameSettings.SaveOverscanSettings += SaveOverscanSettings;
            }
        }

        internal static event Delegates.SaveOverscanSettings_BeforeArgs _beforeSaveOverscanSettings;
        internal static event Delegates.SaveOverscanSettings_NormalArgs _afterSaveOverscanSettings;

        private static void SaveOverscanSettings(On.GameSettings.orig_SaveOverscanSettings orig, GameSettings self)
        {
            Delegates.Params_SaveOverscanSettings @params = new()
            {
                self = self
            };
            _beforeSaveOverscanSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveOverscanSettings != null) _afterSaveOverscanSettings.Invoke(@params);
        }

        internal static void HookResetOverscanSettings()
        {
            if (!HookedList.Contains("ResetOverscanSettings"))
            {
                HookedList.Add("ResetOverscanSettings");
                On.GameSettings.ResetOverscanSettings += ResetOverscanSettings;
            }
        }

        internal static event Delegates.ResetOverscanSettings_BeforeArgs _beforeResetOverscanSettings;
        internal static event Delegates.ResetOverscanSettings_NormalArgs _afterResetOverscanSettings;

        private static void ResetOverscanSettings(On.GameSettings.orig_ResetOverscanSettings orig, GameSettings self)
        {
            Delegates.Params_ResetOverscanSettings @params = new()
            {
                self = self
            };
            _beforeResetOverscanSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetOverscanSettings != null) _afterResetOverscanSettings.Invoke(@params);
        }

        internal static void HookLoadOverscanConfigured()
        {
            if (!HookedList.Contains("LoadOverscanConfigured"))
            {
                HookedList.Add("LoadOverscanConfigured");
                On.GameSettings.LoadOverscanConfigured += LoadOverscanConfigured;
            }
        }

        internal static event Delegates.LoadOverscanConfigured_BeforeArgs _beforeLoadOverscanConfigured;
        internal static event Delegates.LoadOverscanConfigured_NormalArgs _afterLoadOverscanConfigured;

        private static void LoadOverscanConfigured(On.GameSettings.orig_LoadOverscanConfigured orig, GameSettings self)
        {
            Delegates.Params_LoadOverscanConfigured @params = new()
            {
                self = self
            };
            _beforeLoadOverscanConfigured?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadOverscanConfigured != null) _afterLoadOverscanConfigured.Invoke(@params);
        }

        internal static void HookLoadBrightnessSettings()
        {
            if (!HookedList.Contains("LoadBrightnessSettings"))
            {
                HookedList.Add("LoadBrightnessSettings");
                On.GameSettings.LoadBrightnessSettings += LoadBrightnessSettings;
            }
        }

        internal static event Delegates.LoadBrightnessSettings_BeforeArgs _beforeLoadBrightnessSettings;
        internal static event Delegates.LoadBrightnessSettings_NormalArgs _afterLoadBrightnessSettings;

        private static void LoadBrightnessSettings(On.GameSettings.orig_LoadBrightnessSettings orig, GameSettings self)
        {
            Delegates.Params_LoadBrightnessSettings @params = new()
            {
                self = self
            };
            _beforeLoadBrightnessSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadBrightnessSettings != null) _afterLoadBrightnessSettings.Invoke(@params);
        }

        internal static void HookSaveBrightnessSettings()
        {
            if (!HookedList.Contains("SaveBrightnessSettings"))
            {
                HookedList.Add("SaveBrightnessSettings");
                On.GameSettings.SaveBrightnessSettings += SaveBrightnessSettings;
            }
        }

        internal static event Delegates.SaveBrightnessSettings_BeforeArgs _beforeSaveBrightnessSettings;
        internal static event Delegates.SaveBrightnessSettings_NormalArgs _afterSaveBrightnessSettings;

        private static void SaveBrightnessSettings(On.GameSettings.orig_SaveBrightnessSettings orig, GameSettings self)
        {
            Delegates.Params_SaveBrightnessSettings @params = new()
            {
                self = self
            };
            _beforeSaveBrightnessSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveBrightnessSettings != null) _afterSaveBrightnessSettings.Invoke(@params);
        }

        internal static void HookResetBrightnessSettings()
        {
            if (!HookedList.Contains("ResetBrightnessSettings"))
            {
                HookedList.Add("ResetBrightnessSettings");
                On.GameSettings.ResetBrightnessSettings += ResetBrightnessSettings;
            }
        }

        internal static event Delegates.ResetBrightnessSettings_BeforeArgs _beforeResetBrightnessSettings;
        internal static event Delegates.ResetBrightnessSettings_NormalArgs _afterResetBrightnessSettings;

        private static void ResetBrightnessSettings(On.GameSettings.orig_ResetBrightnessSettings orig,
            GameSettings self)
        {
            Delegates.Params_ResetBrightnessSettings @params = new()
            {
                self = self
            };
            _beforeResetBrightnessSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetBrightnessSettings != null) _afterResetBrightnessSettings.Invoke(@params);
        }

        internal static void HookLoadBrightnessConfigured()
        {
            if (!HookedList.Contains("LoadBrightnessConfigured"))
            {
                HookedList.Add("LoadBrightnessConfigured");
                On.GameSettings.LoadBrightnessConfigured += LoadBrightnessConfigured;
            }
        }

        internal static event Delegates.LoadBrightnessConfigured_BeforeArgs _beforeLoadBrightnessConfigured;
        internal static event Delegates.LoadBrightnessConfigured_NormalArgs _afterLoadBrightnessConfigured;

        private static void LoadBrightnessConfigured(On.GameSettings.orig_LoadBrightnessConfigured orig,
            GameSettings self)
        {
            Delegates.Params_LoadBrightnessConfigured @params = new()
            {
                self = self
            };
            _beforeLoadBrightnessConfigured?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadBrightnessConfigured != null) _afterLoadBrightnessConfigured.Invoke(@params);
        }

        internal static void HookLoadAudioSettings()
        {
            if (!HookedList.Contains("LoadAudioSettings"))
            {
                HookedList.Add("LoadAudioSettings");
                On.GameSettings.LoadAudioSettings += LoadAudioSettings;
            }
        }

        internal static event Delegates.LoadAudioSettings_BeforeArgs _beforeLoadAudioSettings;
        internal static event Delegates.LoadAudioSettings_NormalArgs _afterLoadAudioSettings;

        private static void LoadAudioSettings(On.GameSettings.orig_LoadAudioSettings orig, GameSettings self)
        {
            Delegates.Params_LoadAudioSettings @params = new()
            {
                self = self
            };
            _beforeLoadAudioSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadAudioSettings != null) _afterLoadAudioSettings.Invoke(@params);
        }

        internal static void HookSaveAudioSettings()
        {
            if (!HookedList.Contains("SaveAudioSettings"))
            {
                HookedList.Add("SaveAudioSettings");
                On.GameSettings.SaveAudioSettings += SaveAudioSettings;
            }
        }

        internal static event Delegates.SaveAudioSettings_BeforeArgs _beforeSaveAudioSettings;
        internal static event Delegates.SaveAudioSettings_NormalArgs _afterSaveAudioSettings;

        private static void SaveAudioSettings(On.GameSettings.orig_SaveAudioSettings orig, GameSettings self)
        {
            Delegates.Params_SaveAudioSettings @params = new()
            {
                self = self
            };
            _beforeSaveAudioSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveAudioSettings != null) _afterSaveAudioSettings.Invoke(@params);
        }

        internal static void HookResetAudioSettings()
        {
            if (!HookedList.Contains("ResetAudioSettings"))
            {
                HookedList.Add("ResetAudioSettings");
                On.GameSettings.ResetAudioSettings += ResetAudioSettings;
            }
        }

        internal static event Delegates.ResetAudioSettings_BeforeArgs _beforeResetAudioSettings;
        internal static event Delegates.ResetAudioSettings_NormalArgs _afterResetAudioSettings;

        private static void ResetAudioSettings(On.GameSettings.orig_ResetAudioSettings orig, GameSettings self)
        {
            Delegates.Params_ResetAudioSettings @params = new()
            {
                self = self
            };
            _beforeResetAudioSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAudioSettings != null) _afterResetAudioSettings.Invoke(@params);
        }

        internal static void HookLoadKeyboardSettings()
        {
            if (!HookedList.Contains("LoadKeyboardSettings"))
            {
                HookedList.Add("LoadKeyboardSettings");
                On.GameSettings.LoadKeyboardSettings += LoadKeyboardSettings;
            }
        }

        internal static event Delegates.LoadKeyboardSettings_BeforeArgs _beforeLoadKeyboardSettings;
        internal static event Delegates.LoadKeyboardSettings_NormalArgs _afterLoadKeyboardSettings;

        private static void LoadKeyboardSettings(On.GameSettings.orig_LoadKeyboardSettings orig, GameSettings self)
        {
            Delegates.Params_LoadKeyboardSettings @params = new()
            {
                self = self
            };
            _beforeLoadKeyboardSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLoadKeyboardSettings != null) _afterLoadKeyboardSettings.Invoke(@params);
        }

        internal static void HookLoadAndUpgradeKeyboardKey()
        {
            if (!HookedList.Contains("LoadAndUpgradeKeyboardKey"))
            {
                HookedList.Add("LoadAndUpgradeKeyboardKey");
                On.GameSettings.LoadAndUpgradeKeyboardKey += LoadAndUpgradeKeyboardKey;
            }
        }

        internal static event Delegates.LoadAndUpgradeKeyboardKey_BeforeArgs _beforeLoadAndUpgradeKeyboardKey;
        internal static event Delegates.LoadAndUpgradeKeyboardKey_NormalArgs _afterLoadAndUpgradeKeyboardKey;

        private static void LoadAndUpgradeKeyboardKey(On.GameSettings.orig_LoadAndUpgradeKeyboardKey orig,
            GameSettings self, string prefsKey, ref string setString, Key defaultKey)
        {
            Delegates.Params_LoadAndUpgradeKeyboardKey @params = new()
            {
                self = self, prefsKey = prefsKey, setString = setString, defaultKey = defaultKey
            };
            _beforeLoadAndUpgradeKeyboardKey?.Invoke(@params);
            self = @params.self;
            prefsKey = @params.prefsKey;
            setString = @params.setString;
            defaultKey = @params.defaultKey;
            orig(self, prefsKey, ref setString, defaultKey);
            if (_afterLoadAndUpgradeKeyboardKey != null) _afterLoadAndUpgradeKeyboardKey.Invoke(@params);
        }

        internal static void HookSaveKeyboardSettings()
        {
            if (!HookedList.Contains("SaveKeyboardSettings"))
            {
                HookedList.Add("SaveKeyboardSettings");
                On.GameSettings.SaveKeyboardSettings += SaveKeyboardSettings;
            }
        }

        internal static event Delegates.SaveKeyboardSettings_BeforeArgs _beforeSaveKeyboardSettings;
        internal static event Delegates.SaveKeyboardSettings_NormalArgs _afterSaveKeyboardSettings;

        private static void SaveKeyboardSettings(On.GameSettings.orig_SaveKeyboardSettings orig, GameSettings self)
        {
            Delegates.Params_SaveKeyboardSettings @params = new()
            {
                self = self
            };
            _beforeSaveKeyboardSettings?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSaveKeyboardSettings != null) _afterSaveKeyboardSettings.Invoke(@params);
        }

        internal static void HookLoadGamepadSettings()
        {
            if (!HookedList.Contains("LoadGamepadSettings"))
            {
                HookedList.Add("LoadGamepadSettings");
                On.GameSettings.LoadGamepadSettings += LoadGamepadSettings;
            }
        }

        internal static event Delegates.LoadGamepadSettings_BeforeArgs _beforeLoadGamepadSettings;
        internal static event Delegates.LoadGamepadSettings_NormalArgs _afterLoadGamepadSettings;

        private static bool LoadGamepadSettings(On.GameSettings.orig_LoadGamepadSettings orig, GameSettings self,
            GamepadType gamepadType)
        {
            Delegates.Params_LoadGamepadSettings @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            _beforeLoadGamepadSettings?.Invoke(@params);
            self = @params.self;
            gamepadType = @params.gamepadType;
            var retVal = orig(self, gamepadType);
            if (_afterLoadGamepadSettings != null) retVal = _afterLoadGamepadSettings.Invoke(@params);
            return retVal;
        }

        internal static void HookSaveGamepadSettings()
        {
            if (!HookedList.Contains("SaveGamepadSettings"))
            {
                HookedList.Add("SaveGamepadSettings");
                On.GameSettings.SaveGamepadSettings += SaveGamepadSettings;
            }
        }

        internal static event Delegates.SaveGamepadSettings_BeforeArgs _beforeSaveGamepadSettings;
        internal static event Delegates.SaveGamepadSettings_NormalArgs _afterSaveGamepadSettings;

        private static void SaveGamepadSettings(On.GameSettings.orig_SaveGamepadSettings orig, GameSettings self,
            GamepadType gamepadType)
        {
            Delegates.Params_SaveGamepadSettings @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            _beforeSaveGamepadSettings?.Invoke(@params);
            self = @params.self;
            gamepadType = @params.gamepadType;
            orig(self, gamepadType);
            if (_afterSaveGamepadSettings != null) _afterSaveGamepadSettings.Invoke(@params);
        }

        internal static void HookResetGamepadSettings()
        {
            if (!HookedList.Contains("ResetGamepadSettings"))
            {
                HookedList.Add("ResetGamepadSettings");
                On.GameSettings.ResetGamepadSettings += ResetGamepadSettings;
            }
        }

        internal static event Delegates.ResetGamepadSettings_BeforeArgs _beforeResetGamepadSettings;
        internal static event Delegates.ResetGamepadSettings_NormalArgs _afterResetGamepadSettings;

        private static void ResetGamepadSettings(On.GameSettings.orig_ResetGamepadSettings orig, GameSettings self,
            GamepadType gamepadType)
        {
            Delegates.Params_ResetGamepadSettings @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            _beforeResetGamepadSettings?.Invoke(@params);
            self = @params.self;
            gamepadType = @params.gamepadType;
            orig(self, gamepadType);
            if (_afterResetGamepadSettings != null) _afterResetGamepadSettings.Invoke(@params);
        }

        internal static void HookRemapGamepadTypeForSettings()
        {
            if (!HookedList.Contains("RemapGamepadTypeForSettings"))
            {
                HookedList.Add("RemapGamepadTypeForSettings");
                On.GameSettings.RemapGamepadTypeForSettings += RemapGamepadTypeForSettings;
            }
        }

        internal static event Delegates.RemapGamepadTypeForSettings_BeforeArgs _beforeRemapGamepadTypeForSettings;
        internal static event Delegates.RemapGamepadTypeForSettings_NormalArgs _afterRemapGamepadTypeForSettings;

        private static GamepadType RemapGamepadTypeForSettings(On.GameSettings.orig_RemapGamepadTypeForSettings orig,
            GameSettings self, GamepadType sourceType)
        {
            Delegates.Params_RemapGamepadTypeForSettings @params = new()
            {
                self = self, sourceType = sourceType
            };
            _beforeRemapGamepadTypeForSettings?.Invoke(@params);
            self = @params.self;
            sourceType = @params.sourceType;
            var retVal = orig(self, sourceType);
            if (_afterRemapGamepadTypeForSettings != null) retVal = _afterRemapGamepadTypeForSettings.Invoke(@params);
            return retVal;
        }

        internal static void HookLoadInt()
        {
            if (!HookedList.Contains("LoadInt"))
            {
                HookedList.Add("LoadInt");
                On.GameSettings.LoadInt += LoadInt;
            }
        }

        internal static event Delegates.LoadInt_BeforeArgs _beforeLoadInt;
        internal static event Delegates.LoadInt_NormalArgs _afterLoadInt;

        private static bool LoadInt(On.GameSettings.orig_LoadInt orig, GameSettings self, string key, ref int val,
            int def)
        {
            Delegates.Params_LoadInt @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            _beforeLoadInt?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadInt != null) retVal = _afterLoadInt.Invoke(@params);
            return retVal;
        }

        internal static void HookHasSetting()
        {
            if (!HookedList.Contains("HasSetting"))
            {
                HookedList.Add("HasSetting");
                On.GameSettings.HasSetting += HasSetting;
            }
        }

        internal static event Delegates.HasSetting_BeforeArgs _beforeHasSetting;
        internal static event Delegates.HasSetting_NormalArgs _afterHasSetting;

        private static bool HasSetting(On.GameSettings.orig_HasSetting orig, GameSettings self, string key)
        {
            Delegates.Params_HasSetting @params = new()
            {
                self = self, key = key
            };
            _beforeHasSetting?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterHasSetting != null) retVal = _afterHasSetting.Invoke(@params);
            return retVal;
        }

        internal static void HookLoadBool()
        {
            if (!HookedList.Contains("LoadBool"))
            {
                HookedList.Add("LoadBool");
                On.GameSettings.LoadBool += LoadBool;
            }
        }

        internal static event Delegates.LoadBool_BeforeArgs _beforeLoadBool;
        internal static event Delegates.LoadBool_NormalArgs _afterLoadBool;

        private static bool LoadBool(On.GameSettings.orig_LoadBool orig, GameSettings self, string key, ref bool val,
            bool def)
        {
            Delegates.Params_LoadBool @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            _beforeLoadBool?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadBool != null) retVal = _afterLoadBool.Invoke(@params);
            return retVal;
        }

        internal static void HookLoadFloat()
        {
            if (!HookedList.Contains("LoadFloat"))
            {
                HookedList.Add("LoadFloat");
                On.GameSettings.LoadFloat += LoadFloat;
            }
        }

        internal static event Delegates.LoadFloat_BeforeArgs _beforeLoadFloat;
        internal static event Delegates.LoadFloat_NormalArgs _afterLoadFloat;

        private static bool LoadFloat(On.GameSettings.orig_LoadFloat orig, GameSettings self, string key, ref float val,
            float def)
        {
            Delegates.Params_LoadFloat @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            _beforeLoadFloat?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadFloat != null) retVal = _afterLoadFloat.Invoke(@params);
            return retVal;
        }

        internal static void HookLoadString()
        {
            if (!HookedList.Contains("LoadString"))
            {
                HookedList.Add("LoadString");
                On.GameSettings.LoadString += LoadString;
            }
        }

        internal static event Delegates.LoadString_BeforeArgs _beforeLoadString;
        internal static event Delegates.LoadString_NormalArgs _afterLoadString;

        private static bool LoadString(On.GameSettings.orig_LoadString orig, GameSettings self, string key,
            ref string val, string def)
        {
            Delegates.Params_LoadString @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            _beforeLoadString?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadString != null) retVal = _afterLoadString.Invoke(@params);
            return retVal;
        }

        internal static void HookLogMissingKey()
        {
            if (!HookedList.Contains("LogMissingKey"))
            {
                HookedList.Add("LogMissingKey");
                On.GameSettings.LogMissingKey += LogMissingKey;
            }
        }

        internal static event Delegates.LogMissingKey_BeforeArgs _beforeLogMissingKey;
        internal static event Delegates.LogMissingKey_NormalArgs _afterLogMissingKey;

        private static void LogMissingKey(On.GameSettings.orig_LogMissingKey orig, GameSettings self, string key)
        {
            Delegates.Params_LogMissingKey @params = new()
            {
                self = self, key = key
            };
            _beforeLogMissingKey?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            orig(self, key);
            if (_afterLogMissingKey != null) _afterLogMissingKey.Invoke(@params);
        }

        internal static void HookLogLoadedKey_string_int()
        {
            if (!HookedList.Contains("LogLoadedKey_string_int"))
            {
                HookedList.Add("LogLoadedKey_string_int");
                On.GameSettings.LogLoadedKey_string_int += LogLoadedKey_string_int;
            }
        }

        internal static event Delegates.LogLoadedKey_string_int_BeforeArgs _beforeLogLoadedKey_string_int;
        internal static event Delegates.LogLoadedKey_string_int_NormalArgs _afterLogLoadedKey_string_int;

        private static void LogLoadedKey_string_int(On.GameSettings.orig_LogLoadedKey_string_int orig,
            GameSettings self, string key, int value)
        {
            Delegates.Params_LogLoadedKey_string_int @params = new()
            {
                self = self, key = key, value = value
            };
            _beforeLogLoadedKey_string_int?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogLoadedKey_string_int != null) _afterLogLoadedKey_string_int.Invoke(@params);
        }

        internal static void HookLogLoadedKey_string_float()
        {
            if (!HookedList.Contains("LogLoadedKey_string_float"))
            {
                HookedList.Add("LogLoadedKey_string_float");
                On.GameSettings.LogLoadedKey_string_float += LogLoadedKey_string_float;
            }
        }

        internal static event Delegates.LogLoadedKey_string_float_BeforeArgs _beforeLogLoadedKey_string_float;
        internal static event Delegates.LogLoadedKey_string_float_NormalArgs _afterLogLoadedKey_string_float;

        private static void LogLoadedKey_string_float(On.GameSettings.orig_LogLoadedKey_string_float orig,
            GameSettings self, string key, float value)
        {
            Delegates.Params_LogLoadedKey_string_float @params = new()
            {
                self = self, key = key, value = value
            };
            _beforeLogLoadedKey_string_float?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogLoadedKey_string_float != null) _afterLogLoadedKey_string_float.Invoke(@params);
        }

        internal static void HookLogLoadedKey_string_string()
        {
            if (!HookedList.Contains("LogLoadedKey_string_string"))
            {
                HookedList.Add("LogLoadedKey_string_string");
                On.GameSettings.LogLoadedKey_string_string += LogLoadedKey_string_string;
            }
        }

        internal static event Delegates.LogLoadedKey_string_string_BeforeArgs _beforeLogLoadedKey_string_string;
        internal static event Delegates.LogLoadedKey_string_string_NormalArgs _afterLogLoadedKey_string_string;

        private static void LogLoadedKey_string_string(On.GameSettings.orig_LogLoadedKey_string_string orig,
            GameSettings self, string key, string value)
        {
            Delegates.Params_LogLoadedKey_string_string @params = new()
            {
                self = self, key = key, value = value
            };
            _beforeLogLoadedKey_string_string?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogLoadedKey_string_string != null) _afterLogLoadedKey_string_string.Invoke(@params);
        }

        internal static void HookLogSavedKey_string_int()
        {
            if (!HookedList.Contains("LogSavedKey_string_int"))
            {
                HookedList.Add("LogSavedKey_string_int");
                On.GameSettings.LogSavedKey_string_int += LogSavedKey_string_int;
            }
        }

        internal static event Delegates.LogSavedKey_string_int_BeforeArgs _beforeLogSavedKey_string_int;
        internal static event Delegates.LogSavedKey_string_int_NormalArgs _afterLogSavedKey_string_int;

        private static void LogSavedKey_string_int(On.GameSettings.orig_LogSavedKey_string_int orig, GameSettings self,
            string key, int value)
        {
            Delegates.Params_LogSavedKey_string_int @params = new()
            {
                self = self, key = key, value = value
            };
            _beforeLogSavedKey_string_int?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogSavedKey_string_int != null) _afterLogSavedKey_string_int.Invoke(@params);
        }

        internal static void HookLogSavedKey_string_float()
        {
            if (!HookedList.Contains("LogSavedKey_string_float"))
            {
                HookedList.Add("LogSavedKey_string_float");
                On.GameSettings.LogSavedKey_string_float += LogSavedKey_string_float;
            }
        }

        internal static event Delegates.LogSavedKey_string_float_BeforeArgs _beforeLogSavedKey_string_float;
        internal static event Delegates.LogSavedKey_string_float_NormalArgs _afterLogSavedKey_string_float;

        private static void LogSavedKey_string_float(On.GameSettings.orig_LogSavedKey_string_float orig,
            GameSettings self, string key, float value)
        {
            Delegates.Params_LogSavedKey_string_float @params = new()
            {
                self = self, key = key, value = value
            };
            _beforeLogSavedKey_string_float?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogSavedKey_string_float != null) _afterLogSavedKey_string_float.Invoke(@params);
        }

        internal static void HookLogSavedKey_string_string()
        {
            if (!HookedList.Contains("LogSavedKey_string_string"))
            {
                HookedList.Add("LogSavedKey_string_string");
                On.GameSettings.LogSavedKey_string_string += LogSavedKey_string_string;
            }
        }

        internal static event Delegates.LogSavedKey_string_string_BeforeArgs _beforeLogSavedKey_string_string;
        internal static event Delegates.LogSavedKey_string_string_NormalArgs _afterLogSavedKey_string_string;

        private static void LogSavedKey_string_string(On.GameSettings.orig_LogSavedKey_string_string orig,
            GameSettings self, string key, string value)
        {
            Delegates.Params_LogSavedKey_string_string @params = new()
            {
                self = self, key = key, value = value
            };
            _beforeLogSavedKey_string_string?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogSavedKey_string_string != null) _afterLogSavedKey_string_string.Invoke(@params);
        }

        internal static void HookCommandArgumentUsed()
        {
            if (!HookedList.Contains("CommandArgumentUsed"))
            {
                HookedList.Add("CommandArgumentUsed");
                On.GameSettings.CommandArgumentUsed += CommandArgumentUsed;
            }
        }

        internal static event Delegates.CommandArgumentUsed_BeforeArgs _beforeCommandArgumentUsed;
        internal static event Delegates.CommandArgumentUsed_NormalArgs _afterCommandArgumentUsed;

        private static bool CommandArgumentUsed(On.GameSettings.orig_CommandArgumentUsed orig, GameSettings self,
            string arg)
        {
            Delegates.Params_CommandArgumentUsed @params = new()
            {
                self = self, arg = arg
            };
            _beforeCommandArgumentUsed?.Invoke(@params);
            self = @params.self;
            arg = @params.arg;
            var retVal = orig(self, arg);
            if (_afterCommandArgumentUsed != null) retVal = _afterCommandArgumentUsed.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void CommandArgumentUsed_BeforeArgs(Params_CommandArgumentUsed args);

        public delegate bool CommandArgumentUsed_NormalArgs(Params_CommandArgumentUsed args);

        public delegate void HasSetting_BeforeArgs(Params_HasSetting args);

        public delegate bool HasSetting_NormalArgs(Params_HasSetting args);

        public delegate void LoadAndUpgradeKeyboardKey_BeforeArgs(Params_LoadAndUpgradeKeyboardKey args);

        public delegate void LoadAndUpgradeKeyboardKey_NormalArgs(Params_LoadAndUpgradeKeyboardKey args);

        public delegate void LoadAudioSettings_BeforeArgs(Params_LoadAudioSettings args);

        public delegate void LoadAudioSettings_NormalArgs(Params_LoadAudioSettings args);

        public delegate void LoadBool_BeforeArgs(Params_LoadBool args);

        public delegate bool LoadBool_NormalArgs(Params_LoadBool args);

        public delegate void LoadBrightnessConfigured_BeforeArgs(Params_LoadBrightnessConfigured args);

        public delegate void LoadBrightnessConfigured_NormalArgs(Params_LoadBrightnessConfigured args);

        public delegate void LoadBrightnessSettings_BeforeArgs(Params_LoadBrightnessSettings args);

        public delegate void LoadBrightnessSettings_NormalArgs(Params_LoadBrightnessSettings args);

        public delegate void LoadFloat_BeforeArgs(Params_LoadFloat args);

        public delegate bool LoadFloat_NormalArgs(Params_LoadFloat args);

        public delegate void LoadGameOptionsSettings_BeforeArgs(Params_LoadGameOptionsSettings args);

        public delegate void LoadGameOptionsSettings_NormalArgs(Params_LoadGameOptionsSettings args);

        public delegate void LoadGamepadSettings_BeforeArgs(Params_LoadGamepadSettings args);

        public delegate bool LoadGamepadSettings_NormalArgs(Params_LoadGamepadSettings args);

        public delegate void LoadInt_BeforeArgs(Params_LoadInt args);

        public delegate bool LoadInt_NormalArgs(Params_LoadInt args);

        public delegate void LoadKeyboardSettings_BeforeArgs(Params_LoadKeyboardSettings args);

        public delegate void LoadKeyboardSettings_NormalArgs(Params_LoadKeyboardSettings args);

        public delegate void LoadOverscanConfigured_BeforeArgs(Params_LoadOverscanConfigured args);

        public delegate void LoadOverscanConfigured_NormalArgs(Params_LoadOverscanConfigured args);

        public delegate void LoadOverscanSettings_BeforeArgs(Params_LoadOverscanSettings args);

        public delegate void LoadOverscanSettings_NormalArgs(Params_LoadOverscanSettings args);

        public delegate void LoadString_BeforeArgs(Params_LoadString args);

        public delegate bool LoadString_NormalArgs(Params_LoadString args);

        public delegate void LoadVideoSettings_BeforeArgs(Params_LoadVideoSettings args);

        public delegate void LoadVideoSettings_NormalArgs(Params_LoadVideoSettings args);

        public delegate void LogLoadedKey_string_float_BeforeArgs(Params_LogLoadedKey_string_float args);

        public delegate void LogLoadedKey_string_float_NormalArgs(Params_LogLoadedKey_string_float args);

        public delegate void LogLoadedKey_string_int_BeforeArgs(Params_LogLoadedKey_string_int args);

        public delegate void LogLoadedKey_string_int_NormalArgs(Params_LogLoadedKey_string_int args);

        public delegate void LogLoadedKey_string_string_BeforeArgs(Params_LogLoadedKey_string_string args);

        public delegate void LogLoadedKey_string_string_NormalArgs(Params_LogLoadedKey_string_string args);

        public delegate void LogMissingKey_BeforeArgs(Params_LogMissingKey args);

        public delegate void LogMissingKey_NormalArgs(Params_LogMissingKey args);

        public delegate void LogSavedKey_string_float_BeforeArgs(Params_LogSavedKey_string_float args);

        public delegate void LogSavedKey_string_float_NormalArgs(Params_LogSavedKey_string_float args);

        public delegate void LogSavedKey_string_int_BeforeArgs(Params_LogSavedKey_string_int args);

        public delegate void LogSavedKey_string_int_NormalArgs(Params_LogSavedKey_string_int args);

        public delegate void LogSavedKey_string_string_BeforeArgs(Params_LogSavedKey_string_string args);

        public delegate void LogSavedKey_string_string_NormalArgs(Params_LogSavedKey_string_string args);

        public delegate void RemapGamepadTypeForSettings_BeforeArgs(Params_RemapGamepadTypeForSettings args);

        public delegate GamepadType RemapGamepadTypeForSettings_NormalArgs(Params_RemapGamepadTypeForSettings args);

        public delegate void ResetAudioSettings_BeforeArgs(Params_ResetAudioSettings args);

        public delegate void ResetAudioSettings_NormalArgs(Params_ResetAudioSettings args);

        public delegate void ResetBrightnessSettings_BeforeArgs(Params_ResetBrightnessSettings args);

        public delegate void ResetBrightnessSettings_NormalArgs(Params_ResetBrightnessSettings args);

        public delegate void ResetGameOptionsSettings_BeforeArgs(Params_ResetGameOptionsSettings args);

        public delegate void ResetGameOptionsSettings_NormalArgs(Params_ResetGameOptionsSettings args);

        public delegate void ResetGamepadSettings_BeforeArgs(Params_ResetGamepadSettings args);

        public delegate void ResetGamepadSettings_NormalArgs(Params_ResetGamepadSettings args);

        public delegate void ResetOverscanSettings_BeforeArgs(Params_ResetOverscanSettings args);

        public delegate void ResetOverscanSettings_NormalArgs(Params_ResetOverscanSettings args);

        public delegate void ResetVideoSettings_BeforeArgs(Params_ResetVideoSettings args);

        public delegate void ResetVideoSettings_NormalArgs(Params_ResetVideoSettings args);

        public delegate void SaveAudioSettings_BeforeArgs(Params_SaveAudioSettings args);

        public delegate void SaveAudioSettings_NormalArgs(Params_SaveAudioSettings args);

        public delegate void SaveBrightnessSettings_BeforeArgs(Params_SaveBrightnessSettings args);

        public delegate void SaveBrightnessSettings_NormalArgs(Params_SaveBrightnessSettings args);

        public delegate void SaveGameOptionsSettings_BeforeArgs(Params_SaveGameOptionsSettings args);

        public delegate void SaveGameOptionsSettings_NormalArgs(Params_SaveGameOptionsSettings args);

        public delegate void SaveGamepadSettings_BeforeArgs(Params_SaveGamepadSettings args);

        public delegate void SaveGamepadSettings_NormalArgs(Params_SaveGamepadSettings args);

        public delegate void SaveKeyboardSettings_BeforeArgs(Params_SaveKeyboardSettings args);

        public delegate void SaveKeyboardSettings_NormalArgs(Params_SaveKeyboardSettings args);

        public delegate void SaveOverscanSettings_BeforeArgs(Params_SaveOverscanSettings args);

        public delegate void SaveOverscanSettings_NormalArgs(Params_SaveOverscanSettings args);

        public delegate void SaveVideoSettings_BeforeArgs(Params_SaveVideoSettings args);

        public delegate void SaveVideoSettings_NormalArgs(Params_SaveVideoSettings args);

        public sealed class Params_LoadGameOptionsSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveGameOptionsSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetGameOptionsSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadVideoSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveVideoSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetVideoSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadOverscanSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveOverscanSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetOverscanSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadOverscanConfigured
        {
            public GameSettings self;
        }

        public sealed class Params_LoadBrightnessSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveBrightnessSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetBrightnessSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadBrightnessConfigured
        {
            public GameSettings self;
        }

        public sealed class Params_LoadAudioSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveAudioSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetAudioSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadKeyboardSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadAndUpgradeKeyboardKey
        {
            public Key defaultKey;
            public string prefsKey;
            public GameSettings self;
            public string setString;
        }

        public sealed class Params_SaveKeyboardSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadGamepadSettings
        {
            public GamepadType gamepadType;
            public GameSettings self;
        }

        public sealed class Params_SaveGamepadSettings
        {
            public GamepadType gamepadType;
            public GameSettings self;
        }

        public sealed class Params_ResetGamepadSettings
        {
            public GamepadType gamepadType;
            public GameSettings self;
        }

        public sealed class Params_RemapGamepadTypeForSettings
        {
            public GameSettings self;
            public GamepadType sourceType;
        }

        public sealed class Params_LoadInt
        {
            public int def;
            public string key;
            public GameSettings self;
            public int val;
        }

        public sealed class Params_HasSetting
        {
            public string key;
            public GameSettings self;
        }

        public sealed class Params_LoadBool
        {
            public bool def;
            public string key;
            public GameSettings self;
            public bool val;
        }

        public sealed class Params_LoadFloat
        {
            public float def;
            public string key;
            public GameSettings self;
            public float val;
        }

        public sealed class Params_LoadString
        {
            public string def;
            public string key;
            public GameSettings self;
            public string val;
        }

        public sealed class Params_LogMissingKey
        {
            public string key;
            public GameSettings self;
        }

        public sealed class Params_LogLoadedKey_string_int
        {
            public string key;
            public GameSettings self;
            public int value;
        }

        public sealed class Params_LogLoadedKey_string_float
        {
            public string key;
            public GameSettings self;
            public float value;
        }

        public sealed class Params_LogLoadedKey_string_string
        {
            public string key;
            public GameSettings self;
            public string value;
        }

        public sealed class Params_LogSavedKey_string_int
        {
            public string key;
            public GameSettings self;
            public int value;
        }

        public sealed class Params_LogSavedKey_string_float
        {
            public string key;
            public GameSettings self;
            public float value;
        }

        public sealed class Params_LogSavedKey_string_string
        {
            public string key;
            public GameSettings self;
            public string value;
        }

        public sealed class Params_CommandArgumentUsed
        {
            public string arg;
            public GameSettings self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.LoadGameOptionsSettings_BeforeArgs LoadGameOptionsSettings
        {
            add
            {
                HookHandler._beforeLoadGameOptionsSettings += value;
                HookHandler.HookLoadGameOptionsSettings();
            }
            remove => HookHandler._beforeLoadGameOptionsSettings -= value;
        }

        public static event Delegates.SaveGameOptionsSettings_BeforeArgs SaveGameOptionsSettings
        {
            add
            {
                HookHandler._beforeSaveGameOptionsSettings += value;
                HookHandler.HookSaveGameOptionsSettings();
            }
            remove => HookHandler._beforeSaveGameOptionsSettings -= value;
        }

        public static event Delegates.ResetGameOptionsSettings_BeforeArgs ResetGameOptionsSettings
        {
            add
            {
                HookHandler._beforeResetGameOptionsSettings += value;
                HookHandler.HookResetGameOptionsSettings();
            }
            remove => HookHandler._beforeResetGameOptionsSettings -= value;
        }

        public static event Delegates.LoadVideoSettings_BeforeArgs LoadVideoSettings
        {
            add
            {
                HookHandler._beforeLoadVideoSettings += value;
                HookHandler.HookLoadVideoSettings();
            }
            remove => HookHandler._beforeLoadVideoSettings -= value;
        }

        public static event Delegates.SaveVideoSettings_BeforeArgs SaveVideoSettings
        {
            add
            {
                HookHandler._beforeSaveVideoSettings += value;
                HookHandler.HookSaveVideoSettings();
            }
            remove => HookHandler._beforeSaveVideoSettings -= value;
        }

        public static event Delegates.ResetVideoSettings_BeforeArgs ResetVideoSettings
        {
            add
            {
                HookHandler._beforeResetVideoSettings += value;
                HookHandler.HookResetVideoSettings();
            }
            remove => HookHandler._beforeResetVideoSettings -= value;
        }

        public static event Delegates.LoadOverscanSettings_BeforeArgs LoadOverscanSettings
        {
            add
            {
                HookHandler._beforeLoadOverscanSettings += value;
                HookHandler.HookLoadOverscanSettings();
            }
            remove => HookHandler._beforeLoadOverscanSettings -= value;
        }

        public static event Delegates.SaveOverscanSettings_BeforeArgs SaveOverscanSettings
        {
            add
            {
                HookHandler._beforeSaveOverscanSettings += value;
                HookHandler.HookSaveOverscanSettings();
            }
            remove => HookHandler._beforeSaveOverscanSettings -= value;
        }

        public static event Delegates.ResetOverscanSettings_BeforeArgs ResetOverscanSettings
        {
            add
            {
                HookHandler._beforeResetOverscanSettings += value;
                HookHandler.HookResetOverscanSettings();
            }
            remove => HookHandler._beforeResetOverscanSettings -= value;
        }

        public static event Delegates.LoadOverscanConfigured_BeforeArgs LoadOverscanConfigured
        {
            add
            {
                HookHandler._beforeLoadOverscanConfigured += value;
                HookHandler.HookLoadOverscanConfigured();
            }
            remove => HookHandler._beforeLoadOverscanConfigured -= value;
        }

        public static event Delegates.LoadBrightnessSettings_BeforeArgs LoadBrightnessSettings
        {
            add
            {
                HookHandler._beforeLoadBrightnessSettings += value;
                HookHandler.HookLoadBrightnessSettings();
            }
            remove => HookHandler._beforeLoadBrightnessSettings -= value;
        }

        public static event Delegates.SaveBrightnessSettings_BeforeArgs SaveBrightnessSettings
        {
            add
            {
                HookHandler._beforeSaveBrightnessSettings += value;
                HookHandler.HookSaveBrightnessSettings();
            }
            remove => HookHandler._beforeSaveBrightnessSettings -= value;
        }

        public static event Delegates.ResetBrightnessSettings_BeforeArgs ResetBrightnessSettings
        {
            add
            {
                HookHandler._beforeResetBrightnessSettings += value;
                HookHandler.HookResetBrightnessSettings();
            }
            remove => HookHandler._beforeResetBrightnessSettings -= value;
        }

        public static event Delegates.LoadBrightnessConfigured_BeforeArgs LoadBrightnessConfigured
        {
            add
            {
                HookHandler._beforeLoadBrightnessConfigured += value;
                HookHandler.HookLoadBrightnessConfigured();
            }
            remove => HookHandler._beforeLoadBrightnessConfigured -= value;
        }

        public static event Delegates.LoadAudioSettings_BeforeArgs LoadAudioSettings
        {
            add
            {
                HookHandler._beforeLoadAudioSettings += value;
                HookHandler.HookLoadAudioSettings();
            }
            remove => HookHandler._beforeLoadAudioSettings -= value;
        }

        public static event Delegates.SaveAudioSettings_BeforeArgs SaveAudioSettings
        {
            add
            {
                HookHandler._beforeSaveAudioSettings += value;
                HookHandler.HookSaveAudioSettings();
            }
            remove => HookHandler._beforeSaveAudioSettings -= value;
        }

        public static event Delegates.ResetAudioSettings_BeforeArgs ResetAudioSettings
        {
            add
            {
                HookHandler._beforeResetAudioSettings += value;
                HookHandler.HookResetAudioSettings();
            }
            remove => HookHandler._beforeResetAudioSettings -= value;
        }

        public static event Delegates.LoadKeyboardSettings_BeforeArgs LoadKeyboardSettings
        {
            add
            {
                HookHandler._beforeLoadKeyboardSettings += value;
                HookHandler.HookLoadKeyboardSettings();
            }
            remove => HookHandler._beforeLoadKeyboardSettings -= value;
        }

        public static event Delegates.LoadAndUpgradeKeyboardKey_BeforeArgs LoadAndUpgradeKeyboardKey
        {
            add
            {
                HookHandler._beforeLoadAndUpgradeKeyboardKey += value;
                HookHandler.HookLoadAndUpgradeKeyboardKey();
            }
            remove => HookHandler._beforeLoadAndUpgradeKeyboardKey -= value;
        }

        public static event Delegates.SaveKeyboardSettings_BeforeArgs SaveKeyboardSettings
        {
            add
            {
                HookHandler._beforeSaveKeyboardSettings += value;
                HookHandler.HookSaveKeyboardSettings();
            }
            remove => HookHandler._beforeSaveKeyboardSettings -= value;
        }

        public static event Delegates.LoadGamepadSettings_BeforeArgs LoadGamepadSettings
        {
            add
            {
                HookHandler._beforeLoadGamepadSettings += value;
                HookHandler.HookLoadGamepadSettings();
            }
            remove => HookHandler._beforeLoadGamepadSettings -= value;
        }

        public static event Delegates.SaveGamepadSettings_BeforeArgs SaveGamepadSettings
        {
            add
            {
                HookHandler._beforeSaveGamepadSettings += value;
                HookHandler.HookSaveGamepadSettings();
            }
            remove => HookHandler._beforeSaveGamepadSettings -= value;
        }

        public static event Delegates.ResetGamepadSettings_BeforeArgs ResetGamepadSettings
        {
            add
            {
                HookHandler._beforeResetGamepadSettings += value;
                HookHandler.HookResetGamepadSettings();
            }
            remove => HookHandler._beforeResetGamepadSettings -= value;
        }

        public static event Delegates.RemapGamepadTypeForSettings_BeforeArgs RemapGamepadTypeForSettings
        {
            add
            {
                HookHandler._beforeRemapGamepadTypeForSettings += value;
                HookHandler.HookRemapGamepadTypeForSettings();
            }
            remove => HookHandler._beforeRemapGamepadTypeForSettings -= value;
        }

        public static event Delegates.LoadInt_BeforeArgs LoadInt
        {
            add
            {
                HookHandler._beforeLoadInt += value;
                HookHandler.HookLoadInt();
            }
            remove => HookHandler._beforeLoadInt -= value;
        }

        public static event Delegates.HasSetting_BeforeArgs HasSetting
        {
            add
            {
                HookHandler._beforeHasSetting += value;
                HookHandler.HookHasSetting();
            }
            remove => HookHandler._beforeHasSetting -= value;
        }

        public static event Delegates.LoadBool_BeforeArgs LoadBool
        {
            add
            {
                HookHandler._beforeLoadBool += value;
                HookHandler.HookLoadBool();
            }
            remove => HookHandler._beforeLoadBool -= value;
        }

        public static event Delegates.LoadFloat_BeforeArgs LoadFloat
        {
            add
            {
                HookHandler._beforeLoadFloat += value;
                HookHandler.HookLoadFloat();
            }
            remove => HookHandler._beforeLoadFloat -= value;
        }

        public static event Delegates.LoadString_BeforeArgs LoadString
        {
            add
            {
                HookHandler._beforeLoadString += value;
                HookHandler.HookLoadString();
            }
            remove => HookHandler._beforeLoadString -= value;
        }

        public static event Delegates.LogMissingKey_BeforeArgs LogMissingKey
        {
            add
            {
                HookHandler._beforeLogMissingKey += value;
                HookHandler.HookLogMissingKey();
            }
            remove => HookHandler._beforeLogMissingKey -= value;
        }

        public static event Delegates.LogLoadedKey_string_int_BeforeArgs LogLoadedKey_string_int
        {
            add
            {
                HookHandler._beforeLogLoadedKey_string_int += value;
                HookHandler.HookLogLoadedKey_string_int();
            }
            remove => HookHandler._beforeLogLoadedKey_string_int -= value;
        }

        public static event Delegates.LogLoadedKey_string_float_BeforeArgs LogLoadedKey_string_float
        {
            add
            {
                HookHandler._beforeLogLoadedKey_string_float += value;
                HookHandler.HookLogLoadedKey_string_float();
            }
            remove => HookHandler._beforeLogLoadedKey_string_float -= value;
        }

        public static event Delegates.LogLoadedKey_string_string_BeforeArgs LogLoadedKey_string_string
        {
            add
            {
                HookHandler._beforeLogLoadedKey_string_string += value;
                HookHandler.HookLogLoadedKey_string_string();
            }
            remove => HookHandler._beforeLogLoadedKey_string_string -= value;
        }

        public static event Delegates.LogSavedKey_string_int_BeforeArgs LogSavedKey_string_int
        {
            add
            {
                HookHandler._beforeLogSavedKey_string_int += value;
                HookHandler.HookLogSavedKey_string_int();
            }
            remove => HookHandler._beforeLogSavedKey_string_int -= value;
        }

        public static event Delegates.LogSavedKey_string_float_BeforeArgs LogSavedKey_string_float
        {
            add
            {
                HookHandler._beforeLogSavedKey_string_float += value;
                HookHandler.HookLogSavedKey_string_float();
            }
            remove => HookHandler._beforeLogSavedKey_string_float -= value;
        }

        public static event Delegates.LogSavedKey_string_string_BeforeArgs LogSavedKey_string_string
        {
            add
            {
                HookHandler._beforeLogSavedKey_string_string += value;
                HookHandler.HookLogSavedKey_string_string();
            }
            remove => HookHandler._beforeLogSavedKey_string_string -= value;
        }

        public static event Delegates.CommandArgumentUsed_BeforeArgs CommandArgumentUsed
        {
            add
            {
                HookHandler._beforeCommandArgumentUsed += value;
                HookHandler.HookCommandArgumentUsed();
            }
            remove => HookHandler._beforeCommandArgumentUsed -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.LoadGameOptionsSettings_NormalArgs LoadGameOptionsSettings
        {
            add
            {
                HookHandler._afterLoadGameOptionsSettings += value;
                HookHandler.HookLoadGameOptionsSettings();
            }
            remove => HookHandler._afterLoadGameOptionsSettings -= value;
        }

        public static event Delegates.SaveGameOptionsSettings_NormalArgs SaveGameOptionsSettings
        {
            add
            {
                HookHandler._afterSaveGameOptionsSettings += value;
                HookHandler.HookSaveGameOptionsSettings();
            }
            remove => HookHandler._afterSaveGameOptionsSettings -= value;
        }

        public static event Delegates.ResetGameOptionsSettings_NormalArgs ResetGameOptionsSettings
        {
            add
            {
                HookHandler._afterResetGameOptionsSettings += value;
                HookHandler.HookResetGameOptionsSettings();
            }
            remove => HookHandler._afterResetGameOptionsSettings -= value;
        }

        public static event Delegates.LoadVideoSettings_NormalArgs LoadVideoSettings
        {
            add
            {
                HookHandler._afterLoadVideoSettings += value;
                HookHandler.HookLoadVideoSettings();
            }
            remove => HookHandler._afterLoadVideoSettings -= value;
        }

        public static event Delegates.SaveVideoSettings_NormalArgs SaveVideoSettings
        {
            add
            {
                HookHandler._afterSaveVideoSettings += value;
                HookHandler.HookSaveVideoSettings();
            }
            remove => HookHandler._afterSaveVideoSettings -= value;
        }

        public static event Delegates.ResetVideoSettings_NormalArgs ResetVideoSettings
        {
            add
            {
                HookHandler._afterResetVideoSettings += value;
                HookHandler.HookResetVideoSettings();
            }
            remove => HookHandler._afterResetVideoSettings -= value;
        }

        public static event Delegates.LoadOverscanSettings_NormalArgs LoadOverscanSettings
        {
            add
            {
                HookHandler._afterLoadOverscanSettings += value;
                HookHandler.HookLoadOverscanSettings();
            }
            remove => HookHandler._afterLoadOverscanSettings -= value;
        }

        public static event Delegates.SaveOverscanSettings_NormalArgs SaveOverscanSettings
        {
            add
            {
                HookHandler._afterSaveOverscanSettings += value;
                HookHandler.HookSaveOverscanSettings();
            }
            remove => HookHandler._afterSaveOverscanSettings -= value;
        }

        public static event Delegates.ResetOverscanSettings_NormalArgs ResetOverscanSettings
        {
            add
            {
                HookHandler._afterResetOverscanSettings += value;
                HookHandler.HookResetOverscanSettings();
            }
            remove => HookHandler._afterResetOverscanSettings -= value;
        }

        public static event Delegates.LoadOverscanConfigured_NormalArgs LoadOverscanConfigured
        {
            add
            {
                HookHandler._afterLoadOverscanConfigured += value;
                HookHandler.HookLoadOverscanConfigured();
            }
            remove => HookHandler._afterLoadOverscanConfigured -= value;
        }

        public static event Delegates.LoadBrightnessSettings_NormalArgs LoadBrightnessSettings
        {
            add
            {
                HookHandler._afterLoadBrightnessSettings += value;
                HookHandler.HookLoadBrightnessSettings();
            }
            remove => HookHandler._afterLoadBrightnessSettings -= value;
        }

        public static event Delegates.SaveBrightnessSettings_NormalArgs SaveBrightnessSettings
        {
            add
            {
                HookHandler._afterSaveBrightnessSettings += value;
                HookHandler.HookSaveBrightnessSettings();
            }
            remove => HookHandler._afterSaveBrightnessSettings -= value;
        }

        public static event Delegates.ResetBrightnessSettings_NormalArgs ResetBrightnessSettings
        {
            add
            {
                HookHandler._afterResetBrightnessSettings += value;
                HookHandler.HookResetBrightnessSettings();
            }
            remove => HookHandler._afterResetBrightnessSettings -= value;
        }

        public static event Delegates.LoadBrightnessConfigured_NormalArgs LoadBrightnessConfigured
        {
            add
            {
                HookHandler._afterLoadBrightnessConfigured += value;
                HookHandler.HookLoadBrightnessConfigured();
            }
            remove => HookHandler._afterLoadBrightnessConfigured -= value;
        }

        public static event Delegates.LoadAudioSettings_NormalArgs LoadAudioSettings
        {
            add
            {
                HookHandler._afterLoadAudioSettings += value;
                HookHandler.HookLoadAudioSettings();
            }
            remove => HookHandler._afterLoadAudioSettings -= value;
        }

        public static event Delegates.SaveAudioSettings_NormalArgs SaveAudioSettings
        {
            add
            {
                HookHandler._afterSaveAudioSettings += value;
                HookHandler.HookSaveAudioSettings();
            }
            remove => HookHandler._afterSaveAudioSettings -= value;
        }

        public static event Delegates.ResetAudioSettings_NormalArgs ResetAudioSettings
        {
            add
            {
                HookHandler._afterResetAudioSettings += value;
                HookHandler.HookResetAudioSettings();
            }
            remove => HookHandler._afterResetAudioSettings -= value;
        }

        public static event Delegates.LoadKeyboardSettings_NormalArgs LoadKeyboardSettings
        {
            add
            {
                HookHandler._afterLoadKeyboardSettings += value;
                HookHandler.HookLoadKeyboardSettings();
            }
            remove => HookHandler._afterLoadKeyboardSettings -= value;
        }

        public static event Delegates.LoadAndUpgradeKeyboardKey_NormalArgs LoadAndUpgradeKeyboardKey
        {
            add
            {
                HookHandler._afterLoadAndUpgradeKeyboardKey += value;
                HookHandler.HookLoadAndUpgradeKeyboardKey();
            }
            remove => HookHandler._afterLoadAndUpgradeKeyboardKey -= value;
        }

        public static event Delegates.SaveKeyboardSettings_NormalArgs SaveKeyboardSettings
        {
            add
            {
                HookHandler._afterSaveKeyboardSettings += value;
                HookHandler.HookSaveKeyboardSettings();
            }
            remove => HookHandler._afterSaveKeyboardSettings -= value;
        }

        public static event Delegates.LoadGamepadSettings_NormalArgs LoadGamepadSettings
        {
            add
            {
                HookHandler._afterLoadGamepadSettings += value;
                HookHandler.HookLoadGamepadSettings();
            }
            remove => HookHandler._afterLoadGamepadSettings -= value;
        }

        public static event Delegates.SaveGamepadSettings_NormalArgs SaveGamepadSettings
        {
            add
            {
                HookHandler._afterSaveGamepadSettings += value;
                HookHandler.HookSaveGamepadSettings();
            }
            remove => HookHandler._afterSaveGamepadSettings -= value;
        }

        public static event Delegates.ResetGamepadSettings_NormalArgs ResetGamepadSettings
        {
            add
            {
                HookHandler._afterResetGamepadSettings += value;
                HookHandler.HookResetGamepadSettings();
            }
            remove => HookHandler._afterResetGamepadSettings -= value;
        }

        public static event Delegates.RemapGamepadTypeForSettings_NormalArgs RemapGamepadTypeForSettings
        {
            add
            {
                HookHandler._afterRemapGamepadTypeForSettings += value;
                HookHandler.HookRemapGamepadTypeForSettings();
            }
            remove => HookHandler._afterRemapGamepadTypeForSettings -= value;
        }

        public static event Delegates.LoadInt_NormalArgs LoadInt
        {
            add
            {
                HookHandler._afterLoadInt += value;
                HookHandler.HookLoadInt();
            }
            remove => HookHandler._afterLoadInt -= value;
        }

        public static event Delegates.HasSetting_NormalArgs HasSetting
        {
            add
            {
                HookHandler._afterHasSetting += value;
                HookHandler.HookHasSetting();
            }
            remove => HookHandler._afterHasSetting -= value;
        }

        public static event Delegates.LoadBool_NormalArgs LoadBool
        {
            add
            {
                HookHandler._afterLoadBool += value;
                HookHandler.HookLoadBool();
            }
            remove => HookHandler._afterLoadBool -= value;
        }

        public static event Delegates.LoadFloat_NormalArgs LoadFloat
        {
            add
            {
                HookHandler._afterLoadFloat += value;
                HookHandler.HookLoadFloat();
            }
            remove => HookHandler._afterLoadFloat -= value;
        }

        public static event Delegates.LoadString_NormalArgs LoadString
        {
            add
            {
                HookHandler._afterLoadString += value;
                HookHandler.HookLoadString();
            }
            remove => HookHandler._afterLoadString -= value;
        }

        public static event Delegates.LogMissingKey_NormalArgs LogMissingKey
        {
            add
            {
                HookHandler._afterLogMissingKey += value;
                HookHandler.HookLogMissingKey();
            }
            remove => HookHandler._afterLogMissingKey -= value;
        }

        public static event Delegates.LogLoadedKey_string_int_NormalArgs LogLoadedKey_string_int
        {
            add
            {
                HookHandler._afterLogLoadedKey_string_int += value;
                HookHandler.HookLogLoadedKey_string_int();
            }
            remove => HookHandler._afterLogLoadedKey_string_int -= value;
        }

        public static event Delegates.LogLoadedKey_string_float_NormalArgs LogLoadedKey_string_float
        {
            add
            {
                HookHandler._afterLogLoadedKey_string_float += value;
                HookHandler.HookLogLoadedKey_string_float();
            }
            remove => HookHandler._afterLogLoadedKey_string_float -= value;
        }

        public static event Delegates.LogLoadedKey_string_string_NormalArgs LogLoadedKey_string_string
        {
            add
            {
                HookHandler._afterLogLoadedKey_string_string += value;
                HookHandler.HookLogLoadedKey_string_string();
            }
            remove => HookHandler._afterLogLoadedKey_string_string -= value;
        }

        public static event Delegates.LogSavedKey_string_int_NormalArgs LogSavedKey_string_int
        {
            add
            {
                HookHandler._afterLogSavedKey_string_int += value;
                HookHandler.HookLogSavedKey_string_int();
            }
            remove => HookHandler._afterLogSavedKey_string_int -= value;
        }

        public static event Delegates.LogSavedKey_string_float_NormalArgs LogSavedKey_string_float
        {
            add
            {
                HookHandler._afterLogSavedKey_string_float += value;
                HookHandler.HookLogSavedKey_string_float();
            }
            remove => HookHandler._afterLogSavedKey_string_float -= value;
        }

        public static event Delegates.LogSavedKey_string_string_NormalArgs LogSavedKey_string_string
        {
            add
            {
                HookHandler._afterLogSavedKey_string_string += value;
                HookHandler.HookLogSavedKey_string_string();
            }
            remove => HookHandler._afterLogSavedKey_string_string -= value;
        }

        public static event Delegates.CommandArgumentUsed_NormalArgs CommandArgumentUsed
        {
            add
            {
                HookHandler._afterCommandArgumentUsed += value;
                HookHandler.HookCommandArgumentUsed();
            }
            remove => HookHandler._afterCommandArgumentUsed -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GameSettings.hook_LoadGameOptionsSettings LoadGameOptionsSettings
        {
            add => On.GameSettings.LoadGameOptionsSettings += value;
            remove => On.GameSettings.LoadGameOptionsSettings -= value;
        }

        public static event On.GameSettings.hook_SaveGameOptionsSettings SaveGameOptionsSettings
        {
            add => On.GameSettings.SaveGameOptionsSettings += value;
            remove => On.GameSettings.SaveGameOptionsSettings -= value;
        }

        public static event On.GameSettings.hook_ResetGameOptionsSettings ResetGameOptionsSettings
        {
            add => On.GameSettings.ResetGameOptionsSettings += value;
            remove => On.GameSettings.ResetGameOptionsSettings -= value;
        }

        public static event On.GameSettings.hook_LoadVideoSettings LoadVideoSettings
        {
            add => On.GameSettings.LoadVideoSettings += value;
            remove => On.GameSettings.LoadVideoSettings -= value;
        }

        public static event On.GameSettings.hook_SaveVideoSettings SaveVideoSettings
        {
            add => On.GameSettings.SaveVideoSettings += value;
            remove => On.GameSettings.SaveVideoSettings -= value;
        }

        public static event On.GameSettings.hook_ResetVideoSettings ResetVideoSettings
        {
            add => On.GameSettings.ResetVideoSettings += value;
            remove => On.GameSettings.ResetVideoSettings -= value;
        }

        public static event On.GameSettings.hook_LoadOverscanSettings LoadOverscanSettings
        {
            add => On.GameSettings.LoadOverscanSettings += value;
            remove => On.GameSettings.LoadOverscanSettings -= value;
        }

        public static event On.GameSettings.hook_SaveOverscanSettings SaveOverscanSettings
        {
            add => On.GameSettings.SaveOverscanSettings += value;
            remove => On.GameSettings.SaveOverscanSettings -= value;
        }

        public static event On.GameSettings.hook_ResetOverscanSettings ResetOverscanSettings
        {
            add => On.GameSettings.ResetOverscanSettings += value;
            remove => On.GameSettings.ResetOverscanSettings -= value;
        }

        public static event On.GameSettings.hook_LoadOverscanConfigured LoadOverscanConfigured
        {
            add => On.GameSettings.LoadOverscanConfigured += value;
            remove => On.GameSettings.LoadOverscanConfigured -= value;
        }

        public static event On.GameSettings.hook_LoadBrightnessSettings LoadBrightnessSettings
        {
            add => On.GameSettings.LoadBrightnessSettings += value;
            remove => On.GameSettings.LoadBrightnessSettings -= value;
        }

        public static event On.GameSettings.hook_SaveBrightnessSettings SaveBrightnessSettings
        {
            add => On.GameSettings.SaveBrightnessSettings += value;
            remove => On.GameSettings.SaveBrightnessSettings -= value;
        }

        public static event On.GameSettings.hook_ResetBrightnessSettings ResetBrightnessSettings
        {
            add => On.GameSettings.ResetBrightnessSettings += value;
            remove => On.GameSettings.ResetBrightnessSettings -= value;
        }

        public static event On.GameSettings.hook_LoadBrightnessConfigured LoadBrightnessConfigured
        {
            add => On.GameSettings.LoadBrightnessConfigured += value;
            remove => On.GameSettings.LoadBrightnessConfigured -= value;
        }

        public static event On.GameSettings.hook_LoadAudioSettings LoadAudioSettings
        {
            add => On.GameSettings.LoadAudioSettings += value;
            remove => On.GameSettings.LoadAudioSettings -= value;
        }

        public static event On.GameSettings.hook_SaveAudioSettings SaveAudioSettings
        {
            add => On.GameSettings.SaveAudioSettings += value;
            remove => On.GameSettings.SaveAudioSettings -= value;
        }

        public static event On.GameSettings.hook_ResetAudioSettings ResetAudioSettings
        {
            add => On.GameSettings.ResetAudioSettings += value;
            remove => On.GameSettings.ResetAudioSettings -= value;
        }

        public static event On.GameSettings.hook_LoadKeyboardSettings LoadKeyboardSettings
        {
            add => On.GameSettings.LoadKeyboardSettings += value;
            remove => On.GameSettings.LoadKeyboardSettings -= value;
        }

        public static event On.GameSettings.hook_LoadAndUpgradeKeyboardKey LoadAndUpgradeKeyboardKey
        {
            add => On.GameSettings.LoadAndUpgradeKeyboardKey += value;
            remove => On.GameSettings.LoadAndUpgradeKeyboardKey -= value;
        }

        public static event On.GameSettings.hook_SaveKeyboardSettings SaveKeyboardSettings
        {
            add => On.GameSettings.SaveKeyboardSettings += value;
            remove => On.GameSettings.SaveKeyboardSettings -= value;
        }

        public static event On.GameSettings.hook_LoadGamepadSettings LoadGamepadSettings
        {
            add => On.GameSettings.LoadGamepadSettings += value;
            remove => On.GameSettings.LoadGamepadSettings -= value;
        }

        public static event On.GameSettings.hook_SaveGamepadSettings SaveGamepadSettings
        {
            add => On.GameSettings.SaveGamepadSettings += value;
            remove => On.GameSettings.SaveGamepadSettings -= value;
        }

        public static event On.GameSettings.hook_ResetGamepadSettings ResetGamepadSettings
        {
            add => On.GameSettings.ResetGamepadSettings += value;
            remove => On.GameSettings.ResetGamepadSettings -= value;
        }

        public static event On.GameSettings.hook_RemapGamepadTypeForSettings RemapGamepadTypeForSettings
        {
            add => On.GameSettings.RemapGamepadTypeForSettings += value;
            remove => On.GameSettings.RemapGamepadTypeForSettings -= value;
        }

        public static event On.GameSettings.hook_LoadInt LoadInt
        {
            add => On.GameSettings.LoadInt += value;
            remove => On.GameSettings.LoadInt -= value;
        }

        public static event On.GameSettings.hook_HasSetting HasSetting
        {
            add => On.GameSettings.HasSetting += value;
            remove => On.GameSettings.HasSetting -= value;
        }

        public static event On.GameSettings.hook_LoadBool LoadBool
        {
            add => On.GameSettings.LoadBool += value;
            remove => On.GameSettings.LoadBool -= value;
        }

        public static event On.GameSettings.hook_LoadFloat LoadFloat
        {
            add => On.GameSettings.LoadFloat += value;
            remove => On.GameSettings.LoadFloat -= value;
        }

        public static event On.GameSettings.hook_LoadString LoadString
        {
            add => On.GameSettings.LoadString += value;
            remove => On.GameSettings.LoadString -= value;
        }

        public static event On.GameSettings.hook_LogMissingKey LogMissingKey
        {
            add => On.GameSettings.LogMissingKey += value;
            remove => On.GameSettings.LogMissingKey -= value;
        }

        public static event On.GameSettings.hook_LogLoadedKey_string_int LogLoadedKey_string_int
        {
            add => On.GameSettings.LogLoadedKey_string_int += value;
            remove => On.GameSettings.LogLoadedKey_string_int -= value;
        }

        public static event On.GameSettings.hook_LogLoadedKey_string_float LogLoadedKey_string_float
        {
            add => On.GameSettings.LogLoadedKey_string_float += value;
            remove => On.GameSettings.LogLoadedKey_string_float -= value;
        }

        public static event On.GameSettings.hook_LogLoadedKey_string_string LogLoadedKey_string_string
        {
            add => On.GameSettings.LogLoadedKey_string_string += value;
            remove => On.GameSettings.LogLoadedKey_string_string -= value;
        }

        public static event On.GameSettings.hook_LogSavedKey_string_int LogSavedKey_string_int
        {
            add => On.GameSettings.LogSavedKey_string_int += value;
            remove => On.GameSettings.LogSavedKey_string_int -= value;
        }

        public static event On.GameSettings.hook_LogSavedKey_string_float LogSavedKey_string_float
        {
            add => On.GameSettings.LogSavedKey_string_float += value;
            remove => On.GameSettings.LogSavedKey_string_float -= value;
        }

        public static event On.GameSettings.hook_LogSavedKey_string_string LogSavedKey_string_string
        {
            add => On.GameSettings.LogSavedKey_string_string += value;
            remove => On.GameSettings.LogSavedKey_string_string -= value;
        }

        public static event On.GameSettings.hook_CommandArgumentUsed CommandArgumentUsed
        {
            add => On.GameSettings.CommandArgumentUsed += value;
            remove => On.GameSettings.CommandArgumentUsed -= value;
        }
    }
}