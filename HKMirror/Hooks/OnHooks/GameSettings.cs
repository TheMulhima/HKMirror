namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GameSettings class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGameSettings
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookLoadGameOptionsSettings()
        {
            if (!HookedList.Contains("LoadGameOptionsSettings"))
            {
                HookedList.Add("LoadGameOptionsSettings");
                On.GameSettings.LoadGameOptionsSettings += LoadGameOptionsSettings;
            }
        }

        internal static event Delegates.LoadGameOptionsSettings_BeforeArgs _beforeLoadGameOptionsSettings;
        internal static event Delegates.LoadGameOptionsSettings_AfterArgs _afterLoadGameOptionsSettings;

        private static void LoadGameOptionsSettings(On.GameSettings.orig_LoadGameOptionsSettings orig,
            GameSettings self)
        {
            Delegates.Params_LoadGameOptionsSettings @params = new()
            {
                self = self
            };
            if (_beforeLoadGameOptionsSettings != null)
                foreach (Delegates.LoadGameOptionsSettings_BeforeArgs toInvoke in _beforeLoadGameOptionsSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadGameOptionsSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadGameOptionsSettings != null)
                foreach (Delegates.LoadGameOptionsSettings_AfterArgs toInvoke in _afterLoadGameOptionsSettings
                             .GetInvocationList())
                    try
                    {
                        _afterLoadGameOptionsSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveGameOptionsSettings()
        {
            if (!HookedList.Contains("SaveGameOptionsSettings"))
            {
                HookedList.Add("SaveGameOptionsSettings");
                On.GameSettings.SaveGameOptionsSettings += SaveGameOptionsSettings;
            }
        }

        internal static event Delegates.SaveGameOptionsSettings_BeforeArgs _beforeSaveGameOptionsSettings;
        internal static event Delegates.SaveGameOptionsSettings_AfterArgs _afterSaveGameOptionsSettings;

        private static void SaveGameOptionsSettings(On.GameSettings.orig_SaveGameOptionsSettings orig,
            GameSettings self)
        {
            Delegates.Params_SaveGameOptionsSettings @params = new()
            {
                self = self
            };
            if (_beforeSaveGameOptionsSettings != null)
                foreach (Delegates.SaveGameOptionsSettings_BeforeArgs toInvoke in _beforeSaveGameOptionsSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveGameOptionsSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveGameOptionsSettings != null)
                foreach (Delegates.SaveGameOptionsSettings_AfterArgs toInvoke in _afterSaveGameOptionsSettings
                             .GetInvocationList())
                    try
                    {
                        _afterSaveGameOptionsSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetGameOptionsSettings()
        {
            if (!HookedList.Contains("ResetGameOptionsSettings"))
            {
                HookedList.Add("ResetGameOptionsSettings");
                On.GameSettings.ResetGameOptionsSettings += ResetGameOptionsSettings;
            }
        }

        internal static event Delegates.ResetGameOptionsSettings_BeforeArgs _beforeResetGameOptionsSettings;
        internal static event Delegates.ResetGameOptionsSettings_AfterArgs _afterResetGameOptionsSettings;

        private static void ResetGameOptionsSettings(On.GameSettings.orig_ResetGameOptionsSettings orig,
            GameSettings self)
        {
            Delegates.Params_ResetGameOptionsSettings @params = new()
            {
                self = self
            };
            if (_beforeResetGameOptionsSettings != null)
                foreach (Delegates.ResetGameOptionsSettings_BeforeArgs toInvoke in _beforeResetGameOptionsSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeResetGameOptionsSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetGameOptionsSettings != null)
                foreach (Delegates.ResetGameOptionsSettings_AfterArgs toInvoke in _afterResetGameOptionsSettings
                             .GetInvocationList())
                    try
                    {
                        _afterResetGameOptionsSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadVideoSettings()
        {
            if (!HookedList.Contains("LoadVideoSettings"))
            {
                HookedList.Add("LoadVideoSettings");
                On.GameSettings.LoadVideoSettings += LoadVideoSettings;
            }
        }

        internal static event Delegates.LoadVideoSettings_BeforeArgs _beforeLoadVideoSettings;
        internal static event Delegates.LoadVideoSettings_AfterArgs _afterLoadVideoSettings;

        private static void LoadVideoSettings(On.GameSettings.orig_LoadVideoSettings orig, GameSettings self)
        {
            Delegates.Params_LoadVideoSettings @params = new()
            {
                self = self
            };
            if (_beforeLoadVideoSettings != null)
                foreach (Delegates.LoadVideoSettings_BeforeArgs toInvoke in
                         _beforeLoadVideoSettings.GetInvocationList())
                    try
                    {
                        _beforeLoadVideoSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadVideoSettings != null)
                foreach (Delegates.LoadVideoSettings_AfterArgs toInvoke in _afterLoadVideoSettings.GetInvocationList())
                    try
                    {
                        _afterLoadVideoSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveVideoSettings()
        {
            if (!HookedList.Contains("SaveVideoSettings"))
            {
                HookedList.Add("SaveVideoSettings");
                On.GameSettings.SaveVideoSettings += SaveVideoSettings;
            }
        }

        internal static event Delegates.SaveVideoSettings_BeforeArgs _beforeSaveVideoSettings;
        internal static event Delegates.SaveVideoSettings_AfterArgs _afterSaveVideoSettings;

        private static void SaveVideoSettings(On.GameSettings.orig_SaveVideoSettings orig, GameSettings self)
        {
            Delegates.Params_SaveVideoSettings @params = new()
            {
                self = self
            };
            if (_beforeSaveVideoSettings != null)
                foreach (Delegates.SaveVideoSettings_BeforeArgs toInvoke in
                         _beforeSaveVideoSettings.GetInvocationList())
                    try
                    {
                        _beforeSaveVideoSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveVideoSettings != null)
                foreach (Delegates.SaveVideoSettings_AfterArgs toInvoke in _afterSaveVideoSettings.GetInvocationList())
                    try
                    {
                        _afterSaveVideoSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetVideoSettings()
        {
            if (!HookedList.Contains("ResetVideoSettings"))
            {
                HookedList.Add("ResetVideoSettings");
                On.GameSettings.ResetVideoSettings += ResetVideoSettings;
            }
        }

        internal static event Delegates.ResetVideoSettings_BeforeArgs _beforeResetVideoSettings;
        internal static event Delegates.ResetVideoSettings_AfterArgs _afterResetVideoSettings;

        private static void ResetVideoSettings(On.GameSettings.orig_ResetVideoSettings orig, GameSettings self)
        {
            Delegates.Params_ResetVideoSettings @params = new()
            {
                self = self
            };
            if (_beforeResetVideoSettings != null)
                foreach (Delegates.ResetVideoSettings_BeforeArgs toInvoke in
                         _beforeResetVideoSettings.GetInvocationList())
                    try
                    {
                        _beforeResetVideoSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetVideoSettings != null)
                foreach (Delegates.ResetVideoSettings_AfterArgs toInvoke in
                         _afterResetVideoSettings.GetInvocationList())
                    try
                    {
                        _afterResetVideoSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadOverscanSettings()
        {
            if (!HookedList.Contains("LoadOverscanSettings"))
            {
                HookedList.Add("LoadOverscanSettings");
                On.GameSettings.LoadOverscanSettings += LoadOverscanSettings;
            }
        }

        internal static event Delegates.LoadOverscanSettings_BeforeArgs _beforeLoadOverscanSettings;
        internal static event Delegates.LoadOverscanSettings_AfterArgs _afterLoadOverscanSettings;

        private static void LoadOverscanSettings(On.GameSettings.orig_LoadOverscanSettings orig, GameSettings self)
        {
            Delegates.Params_LoadOverscanSettings @params = new()
            {
                self = self
            };
            if (_beforeLoadOverscanSettings != null)
                foreach (Delegates.LoadOverscanSettings_BeforeArgs toInvoke in _beforeLoadOverscanSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadOverscanSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadOverscanSettings != null)
                foreach (Delegates.LoadOverscanSettings_AfterArgs toInvoke in _afterLoadOverscanSettings
                             .GetInvocationList())
                    try
                    {
                        _afterLoadOverscanSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveOverscanSettings()
        {
            if (!HookedList.Contains("SaveOverscanSettings"))
            {
                HookedList.Add("SaveOverscanSettings");
                On.GameSettings.SaveOverscanSettings += SaveOverscanSettings;
            }
        }

        internal static event Delegates.SaveOverscanSettings_BeforeArgs _beforeSaveOverscanSettings;
        internal static event Delegates.SaveOverscanSettings_AfterArgs _afterSaveOverscanSettings;

        private static void SaveOverscanSettings(On.GameSettings.orig_SaveOverscanSettings orig, GameSettings self)
        {
            Delegates.Params_SaveOverscanSettings @params = new()
            {
                self = self
            };
            if (_beforeSaveOverscanSettings != null)
                foreach (Delegates.SaveOverscanSettings_BeforeArgs toInvoke in _beforeSaveOverscanSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveOverscanSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveOverscanSettings != null)
                foreach (Delegates.SaveOverscanSettings_AfterArgs toInvoke in _afterSaveOverscanSettings
                             .GetInvocationList())
                    try
                    {
                        _afterSaveOverscanSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetOverscanSettings()
        {
            if (!HookedList.Contains("ResetOverscanSettings"))
            {
                HookedList.Add("ResetOverscanSettings");
                On.GameSettings.ResetOverscanSettings += ResetOverscanSettings;
            }
        }

        internal static event Delegates.ResetOverscanSettings_BeforeArgs _beforeResetOverscanSettings;
        internal static event Delegates.ResetOverscanSettings_AfterArgs _afterResetOverscanSettings;

        private static void ResetOverscanSettings(On.GameSettings.orig_ResetOverscanSettings orig, GameSettings self)
        {
            Delegates.Params_ResetOverscanSettings @params = new()
            {
                self = self
            };
            if (_beforeResetOverscanSettings != null)
                foreach (Delegates.ResetOverscanSettings_BeforeArgs toInvoke in _beforeResetOverscanSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeResetOverscanSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetOverscanSettings != null)
                foreach (Delegates.ResetOverscanSettings_AfterArgs toInvoke in _afterResetOverscanSettings
                             .GetInvocationList())
                    try
                    {
                        _afterResetOverscanSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadOverscanConfigured()
        {
            if (!HookedList.Contains("LoadOverscanConfigured"))
            {
                HookedList.Add("LoadOverscanConfigured");
                On.GameSettings.LoadOverscanConfigured += LoadOverscanConfigured;
            }
        }

        internal static event Delegates.LoadOverscanConfigured_BeforeArgs _beforeLoadOverscanConfigured;
        internal static event Delegates.LoadOverscanConfigured_AfterArgs _afterLoadOverscanConfigured;

        private static void LoadOverscanConfigured(On.GameSettings.orig_LoadOverscanConfigured orig, GameSettings self)
        {
            Delegates.Params_LoadOverscanConfigured @params = new()
            {
                self = self
            };
            if (_beforeLoadOverscanConfigured != null)
                foreach (Delegates.LoadOverscanConfigured_BeforeArgs toInvoke in _beforeLoadOverscanConfigured
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadOverscanConfigured?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadOverscanConfigured != null)
                foreach (Delegates.LoadOverscanConfigured_AfterArgs toInvoke in _afterLoadOverscanConfigured
                             .GetInvocationList())
                    try
                    {
                        _afterLoadOverscanConfigured.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadBrightnessSettings()
        {
            if (!HookedList.Contains("LoadBrightnessSettings"))
            {
                HookedList.Add("LoadBrightnessSettings");
                On.GameSettings.LoadBrightnessSettings += LoadBrightnessSettings;
            }
        }

        internal static event Delegates.LoadBrightnessSettings_BeforeArgs _beforeLoadBrightnessSettings;
        internal static event Delegates.LoadBrightnessSettings_AfterArgs _afterLoadBrightnessSettings;

        private static void LoadBrightnessSettings(On.GameSettings.orig_LoadBrightnessSettings orig, GameSettings self)
        {
            Delegates.Params_LoadBrightnessSettings @params = new()
            {
                self = self
            };
            if (_beforeLoadBrightnessSettings != null)
                foreach (Delegates.LoadBrightnessSettings_BeforeArgs toInvoke in _beforeLoadBrightnessSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadBrightnessSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadBrightnessSettings != null)
                foreach (Delegates.LoadBrightnessSettings_AfterArgs toInvoke in _afterLoadBrightnessSettings
                             .GetInvocationList())
                    try
                    {
                        _afterLoadBrightnessSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveBrightnessSettings()
        {
            if (!HookedList.Contains("SaveBrightnessSettings"))
            {
                HookedList.Add("SaveBrightnessSettings");
                On.GameSettings.SaveBrightnessSettings += SaveBrightnessSettings;
            }
        }

        internal static event Delegates.SaveBrightnessSettings_BeforeArgs _beforeSaveBrightnessSettings;
        internal static event Delegates.SaveBrightnessSettings_AfterArgs _afterSaveBrightnessSettings;

        private static void SaveBrightnessSettings(On.GameSettings.orig_SaveBrightnessSettings orig, GameSettings self)
        {
            Delegates.Params_SaveBrightnessSettings @params = new()
            {
                self = self
            };
            if (_beforeSaveBrightnessSettings != null)
                foreach (Delegates.SaveBrightnessSettings_BeforeArgs toInvoke in _beforeSaveBrightnessSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveBrightnessSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveBrightnessSettings != null)
                foreach (Delegates.SaveBrightnessSettings_AfterArgs toInvoke in _afterSaveBrightnessSettings
                             .GetInvocationList())
                    try
                    {
                        _afterSaveBrightnessSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetBrightnessSettings()
        {
            if (!HookedList.Contains("ResetBrightnessSettings"))
            {
                HookedList.Add("ResetBrightnessSettings");
                On.GameSettings.ResetBrightnessSettings += ResetBrightnessSettings;
            }
        }

        internal static event Delegates.ResetBrightnessSettings_BeforeArgs _beforeResetBrightnessSettings;
        internal static event Delegates.ResetBrightnessSettings_AfterArgs _afterResetBrightnessSettings;

        private static void ResetBrightnessSettings(On.GameSettings.orig_ResetBrightnessSettings orig,
            GameSettings self)
        {
            Delegates.Params_ResetBrightnessSettings @params = new()
            {
                self = self
            };
            if (_beforeResetBrightnessSettings != null)
                foreach (Delegates.ResetBrightnessSettings_BeforeArgs toInvoke in _beforeResetBrightnessSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeResetBrightnessSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetBrightnessSettings != null)
                foreach (Delegates.ResetBrightnessSettings_AfterArgs toInvoke in _afterResetBrightnessSettings
                             .GetInvocationList())
                    try
                    {
                        _afterResetBrightnessSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadBrightnessConfigured()
        {
            if (!HookedList.Contains("LoadBrightnessConfigured"))
            {
                HookedList.Add("LoadBrightnessConfigured");
                On.GameSettings.LoadBrightnessConfigured += LoadBrightnessConfigured;
            }
        }

        internal static event Delegates.LoadBrightnessConfigured_BeforeArgs _beforeLoadBrightnessConfigured;
        internal static event Delegates.LoadBrightnessConfigured_AfterArgs _afterLoadBrightnessConfigured;

        private static void LoadBrightnessConfigured(On.GameSettings.orig_LoadBrightnessConfigured orig,
            GameSettings self)
        {
            Delegates.Params_LoadBrightnessConfigured @params = new()
            {
                self = self
            };
            if (_beforeLoadBrightnessConfigured != null)
                foreach (Delegates.LoadBrightnessConfigured_BeforeArgs toInvoke in _beforeLoadBrightnessConfigured
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadBrightnessConfigured?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadBrightnessConfigured != null)
                foreach (Delegates.LoadBrightnessConfigured_AfterArgs toInvoke in _afterLoadBrightnessConfigured
                             .GetInvocationList())
                    try
                    {
                        _afterLoadBrightnessConfigured.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadAudioSettings()
        {
            if (!HookedList.Contains("LoadAudioSettings"))
            {
                HookedList.Add("LoadAudioSettings");
                On.GameSettings.LoadAudioSettings += LoadAudioSettings;
            }
        }

        internal static event Delegates.LoadAudioSettings_BeforeArgs _beforeLoadAudioSettings;
        internal static event Delegates.LoadAudioSettings_AfterArgs _afterLoadAudioSettings;

        private static void LoadAudioSettings(On.GameSettings.orig_LoadAudioSettings orig, GameSettings self)
        {
            Delegates.Params_LoadAudioSettings @params = new()
            {
                self = self
            };
            if (_beforeLoadAudioSettings != null)
                foreach (Delegates.LoadAudioSettings_BeforeArgs toInvoke in
                         _beforeLoadAudioSettings.GetInvocationList())
                    try
                    {
                        _beforeLoadAudioSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadAudioSettings != null)
                foreach (Delegates.LoadAudioSettings_AfterArgs toInvoke in _afterLoadAudioSettings.GetInvocationList())
                    try
                    {
                        _afterLoadAudioSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveAudioSettings()
        {
            if (!HookedList.Contains("SaveAudioSettings"))
            {
                HookedList.Add("SaveAudioSettings");
                On.GameSettings.SaveAudioSettings += SaveAudioSettings;
            }
        }

        internal static event Delegates.SaveAudioSettings_BeforeArgs _beforeSaveAudioSettings;
        internal static event Delegates.SaveAudioSettings_AfterArgs _afterSaveAudioSettings;

        private static void SaveAudioSettings(On.GameSettings.orig_SaveAudioSettings orig, GameSettings self)
        {
            Delegates.Params_SaveAudioSettings @params = new()
            {
                self = self
            };
            if (_beforeSaveAudioSettings != null)
                foreach (Delegates.SaveAudioSettings_BeforeArgs toInvoke in
                         _beforeSaveAudioSettings.GetInvocationList())
                    try
                    {
                        _beforeSaveAudioSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveAudioSettings != null)
                foreach (Delegates.SaveAudioSettings_AfterArgs toInvoke in _afterSaveAudioSettings.GetInvocationList())
                    try
                    {
                        _afterSaveAudioSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetAudioSettings()
        {
            if (!HookedList.Contains("ResetAudioSettings"))
            {
                HookedList.Add("ResetAudioSettings");
                On.GameSettings.ResetAudioSettings += ResetAudioSettings;
            }
        }

        internal static event Delegates.ResetAudioSettings_BeforeArgs _beforeResetAudioSettings;
        internal static event Delegates.ResetAudioSettings_AfterArgs _afterResetAudioSettings;

        private static void ResetAudioSettings(On.GameSettings.orig_ResetAudioSettings orig, GameSettings self)
        {
            Delegates.Params_ResetAudioSettings @params = new()
            {
                self = self
            };
            if (_beforeResetAudioSettings != null)
                foreach (Delegates.ResetAudioSettings_BeforeArgs toInvoke in
                         _beforeResetAudioSettings.GetInvocationList())
                    try
                    {
                        _beforeResetAudioSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetAudioSettings != null)
                foreach (Delegates.ResetAudioSettings_AfterArgs toInvoke in
                         _afterResetAudioSettings.GetInvocationList())
                    try
                    {
                        _afterResetAudioSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadKeyboardSettings()
        {
            if (!HookedList.Contains("LoadKeyboardSettings"))
            {
                HookedList.Add("LoadKeyboardSettings");
                On.GameSettings.LoadKeyboardSettings += LoadKeyboardSettings;
            }
        }

        internal static event Delegates.LoadKeyboardSettings_BeforeArgs _beforeLoadKeyboardSettings;
        internal static event Delegates.LoadKeyboardSettings_AfterArgs _afterLoadKeyboardSettings;

        private static void LoadKeyboardSettings(On.GameSettings.orig_LoadKeyboardSettings orig, GameSettings self)
        {
            Delegates.Params_LoadKeyboardSettings @params = new()
            {
                self = self
            };
            if (_beforeLoadKeyboardSettings != null)
                foreach (Delegates.LoadKeyboardSettings_BeforeArgs toInvoke in _beforeLoadKeyboardSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadKeyboardSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLoadKeyboardSettings != null)
                foreach (Delegates.LoadKeyboardSettings_AfterArgs toInvoke in _afterLoadKeyboardSettings
                             .GetInvocationList())
                    try
                    {
                        _afterLoadKeyboardSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadAndUpgradeKeyboardKey()
        {
            if (!HookedList.Contains("LoadAndUpgradeKeyboardKey"))
            {
                HookedList.Add("LoadAndUpgradeKeyboardKey");
                On.GameSettings.LoadAndUpgradeKeyboardKey += LoadAndUpgradeKeyboardKey;
            }
        }

        internal static event Delegates.LoadAndUpgradeKeyboardKey_BeforeArgs _beforeLoadAndUpgradeKeyboardKey;
        internal static event Delegates.LoadAndUpgradeKeyboardKey_AfterArgs _afterLoadAndUpgradeKeyboardKey;

        private static void LoadAndUpgradeKeyboardKey(On.GameSettings.orig_LoadAndUpgradeKeyboardKey orig,
            GameSettings self, string prefsKey, ref string setString, Key defaultKey)
        {
            Delegates.Params_LoadAndUpgradeKeyboardKey @params = new()
            {
                self = self, prefsKey = prefsKey, setString = setString, defaultKey = defaultKey
            };
            if (_beforeLoadAndUpgradeKeyboardKey != null)
                foreach (Delegates.LoadAndUpgradeKeyboardKey_BeforeArgs toInvoke in _beforeLoadAndUpgradeKeyboardKey
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadAndUpgradeKeyboardKey?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            prefsKey = @params.prefsKey;
            setString = @params.setString;
            defaultKey = @params.defaultKey;
            orig(self, prefsKey, ref setString, defaultKey);
            if (_afterLoadAndUpgradeKeyboardKey != null)
                foreach (Delegates.LoadAndUpgradeKeyboardKey_AfterArgs toInvoke in _afterLoadAndUpgradeKeyboardKey
                             .GetInvocationList())
                    try
                    {
                        _afterLoadAndUpgradeKeyboardKey.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveKeyboardSettings()
        {
            if (!HookedList.Contains("SaveKeyboardSettings"))
            {
                HookedList.Add("SaveKeyboardSettings");
                On.GameSettings.SaveKeyboardSettings += SaveKeyboardSettings;
            }
        }

        internal static event Delegates.SaveKeyboardSettings_BeforeArgs _beforeSaveKeyboardSettings;
        internal static event Delegates.SaveKeyboardSettings_AfterArgs _afterSaveKeyboardSettings;

        private static void SaveKeyboardSettings(On.GameSettings.orig_SaveKeyboardSettings orig, GameSettings self)
        {
            Delegates.Params_SaveKeyboardSettings @params = new()
            {
                self = self
            };
            if (_beforeSaveKeyboardSettings != null)
                foreach (Delegates.SaveKeyboardSettings_BeforeArgs toInvoke in _beforeSaveKeyboardSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveKeyboardSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSaveKeyboardSettings != null)
                foreach (Delegates.SaveKeyboardSettings_AfterArgs toInvoke in _afterSaveKeyboardSettings
                             .GetInvocationList())
                    try
                    {
                        _afterSaveKeyboardSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadGamepadSettings()
        {
            if (!HookedList.Contains("LoadGamepadSettings"))
            {
                HookedList.Add("LoadGamepadSettings");
                On.GameSettings.LoadGamepadSettings += LoadGamepadSettings;
            }
        }

        internal static event Delegates.LoadGamepadSettings_BeforeArgs _beforeLoadGamepadSettings;
        internal static event Delegates.LoadGamepadSettings_AfterArgs _afterLoadGamepadSettings;

        private static bool LoadGamepadSettings(On.GameSettings.orig_LoadGamepadSettings orig, GameSettings self,
            GamepadType gamepadType)
        {
            Delegates.Params_LoadGamepadSettings @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            if (_beforeLoadGamepadSettings != null)
                foreach (Delegates.LoadGamepadSettings_BeforeArgs toInvoke in _beforeLoadGamepadSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeLoadGamepadSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gamepadType = @params.gamepadType;
            var retVal = orig(self, gamepadType);
            if (_afterLoadGamepadSettings != null)
                foreach (Delegates.LoadGamepadSettings_AfterArgs toInvoke in
                         _afterLoadGamepadSettings.GetInvocationList())
                    try
                    {
                        retVal = _afterLoadGamepadSettings.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSaveGamepadSettings()
        {
            if (!HookedList.Contains("SaveGamepadSettings"))
            {
                HookedList.Add("SaveGamepadSettings");
                On.GameSettings.SaveGamepadSettings += SaveGamepadSettings;
            }
        }

        internal static event Delegates.SaveGamepadSettings_BeforeArgs _beforeSaveGamepadSettings;
        internal static event Delegates.SaveGamepadSettings_AfterArgs _afterSaveGamepadSettings;

        private static void SaveGamepadSettings(On.GameSettings.orig_SaveGamepadSettings orig, GameSettings self,
            GamepadType gamepadType)
        {
            Delegates.Params_SaveGamepadSettings @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            if (_beforeSaveGamepadSettings != null)
                foreach (Delegates.SaveGamepadSettings_BeforeArgs toInvoke in _beforeSaveGamepadSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeSaveGamepadSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gamepadType = @params.gamepadType;
            orig(self, gamepadType);
            if (_afterSaveGamepadSettings != null)
                foreach (Delegates.SaveGamepadSettings_AfterArgs toInvoke in
                         _afterSaveGamepadSettings.GetInvocationList())
                    try
                    {
                        _afterSaveGamepadSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetGamepadSettings()
        {
            if (!HookedList.Contains("ResetGamepadSettings"))
            {
                HookedList.Add("ResetGamepadSettings");
                On.GameSettings.ResetGamepadSettings += ResetGamepadSettings;
            }
        }

        internal static event Delegates.ResetGamepadSettings_BeforeArgs _beforeResetGamepadSettings;
        internal static event Delegates.ResetGamepadSettings_AfterArgs _afterResetGamepadSettings;

        private static void ResetGamepadSettings(On.GameSettings.orig_ResetGamepadSettings orig, GameSettings self,
            GamepadType gamepadType)
        {
            Delegates.Params_ResetGamepadSettings @params = new()
            {
                self = self, gamepadType = gamepadType
            };
            if (_beforeResetGamepadSettings != null)
                foreach (Delegates.ResetGamepadSettings_BeforeArgs toInvoke in _beforeResetGamepadSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeResetGamepadSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gamepadType = @params.gamepadType;
            orig(self, gamepadType);
            if (_afterResetGamepadSettings != null)
                foreach (Delegates.ResetGamepadSettings_AfterArgs toInvoke in _afterResetGamepadSettings
                             .GetInvocationList())
                    try
                    {
                        _afterResetGamepadSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRemapGamepadTypeForSettings()
        {
            if (!HookedList.Contains("RemapGamepadTypeForSettings"))
            {
                HookedList.Add("RemapGamepadTypeForSettings");
                On.GameSettings.RemapGamepadTypeForSettings += RemapGamepadTypeForSettings;
            }
        }

        internal static event Delegates.RemapGamepadTypeForSettings_BeforeArgs _beforeRemapGamepadTypeForSettings;
        internal static event Delegates.RemapGamepadTypeForSettings_AfterArgs _afterRemapGamepadTypeForSettings;

        private static GamepadType RemapGamepadTypeForSettings(On.GameSettings.orig_RemapGamepadTypeForSettings orig,
            GameSettings self, GamepadType sourceType)
        {
            Delegates.Params_RemapGamepadTypeForSettings @params = new()
            {
                self = self, sourceType = sourceType
            };
            if (_beforeRemapGamepadTypeForSettings != null)
                foreach (Delegates.RemapGamepadTypeForSettings_BeforeArgs toInvoke in _beforeRemapGamepadTypeForSettings
                             .GetInvocationList())
                    try
                    {
                        _beforeRemapGamepadTypeForSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            sourceType = @params.sourceType;
            var retVal = orig(self, sourceType);
            if (_afterRemapGamepadTypeForSettings != null)
                foreach (Delegates.RemapGamepadTypeForSettings_AfterArgs toInvoke in _afterRemapGamepadTypeForSettings
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterRemapGamepadTypeForSettings.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadInt()
        {
            if (!HookedList.Contains("LoadInt"))
            {
                HookedList.Add("LoadInt");
                On.GameSettings.LoadInt += LoadInt;
            }
        }

        internal static event Delegates.LoadInt_BeforeArgs _beforeLoadInt;
        internal static event Delegates.LoadInt_AfterArgs _afterLoadInt;

        private static bool LoadInt(On.GameSettings.orig_LoadInt orig, GameSettings self, string key, ref int val,
            int def)
        {
            Delegates.Params_LoadInt @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            if (_beforeLoadInt != null)
                foreach (Delegates.LoadInt_BeforeArgs toInvoke in _beforeLoadInt.GetInvocationList())
                    try
                    {
                        _beforeLoadInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadInt != null)
                foreach (Delegates.LoadInt_AfterArgs toInvoke in _afterLoadInt.GetInvocationList())
                    try
                    {
                        retVal = _afterLoadInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookHasSetting()
        {
            if (!HookedList.Contains("HasSetting"))
            {
                HookedList.Add("HasSetting");
                On.GameSettings.HasSetting += HasSetting;
            }
        }

        internal static event Delegates.HasSetting_BeforeArgs _beforeHasSetting;
        internal static event Delegates.HasSetting_AfterArgs _afterHasSetting;

        private static bool HasSetting(On.GameSettings.orig_HasSetting orig, GameSettings self, string key)
        {
            Delegates.Params_HasSetting @params = new()
            {
                self = self, key = key
            };
            if (_beforeHasSetting != null)
                foreach (Delegates.HasSetting_BeforeArgs toInvoke in _beforeHasSetting.GetInvocationList())
                    try
                    {
                        _beforeHasSetting?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            var retVal = orig(self, key);
            if (_afterHasSetting != null)
                foreach (Delegates.HasSetting_AfterArgs toInvoke in _afterHasSetting.GetInvocationList())
                    try
                    {
                        retVal = _afterHasSetting.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadBool()
        {
            if (!HookedList.Contains("LoadBool"))
            {
                HookedList.Add("LoadBool");
                On.GameSettings.LoadBool += LoadBool;
            }
        }

        internal static event Delegates.LoadBool_BeforeArgs _beforeLoadBool;
        internal static event Delegates.LoadBool_AfterArgs _afterLoadBool;

        private static bool LoadBool(On.GameSettings.orig_LoadBool orig, GameSettings self, string key, ref bool val,
            bool def)
        {
            Delegates.Params_LoadBool @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            if (_beforeLoadBool != null)
                foreach (Delegates.LoadBool_BeforeArgs toInvoke in _beforeLoadBool.GetInvocationList())
                    try
                    {
                        _beforeLoadBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadBool != null)
                foreach (Delegates.LoadBool_AfterArgs toInvoke in _afterLoadBool.GetInvocationList())
                    try
                    {
                        retVal = _afterLoadBool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadFloat()
        {
            if (!HookedList.Contains("LoadFloat"))
            {
                HookedList.Add("LoadFloat");
                On.GameSettings.LoadFloat += LoadFloat;
            }
        }

        internal static event Delegates.LoadFloat_BeforeArgs _beforeLoadFloat;
        internal static event Delegates.LoadFloat_AfterArgs _afterLoadFloat;

        private static bool LoadFloat(On.GameSettings.orig_LoadFloat orig, GameSettings self, string key, ref float val,
            float def)
        {
            Delegates.Params_LoadFloat @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            if (_beforeLoadFloat != null)
                foreach (Delegates.LoadFloat_BeforeArgs toInvoke in _beforeLoadFloat.GetInvocationList())
                    try
                    {
                        _beforeLoadFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadFloat != null)
                foreach (Delegates.LoadFloat_AfterArgs toInvoke in _afterLoadFloat.GetInvocationList())
                    try
                    {
                        retVal = _afterLoadFloat.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLoadString()
        {
            if (!HookedList.Contains("LoadString"))
            {
                HookedList.Add("LoadString");
                On.GameSettings.LoadString += LoadString;
            }
        }

        internal static event Delegates.LoadString_BeforeArgs _beforeLoadString;
        internal static event Delegates.LoadString_AfterArgs _afterLoadString;

        private static bool LoadString(On.GameSettings.orig_LoadString orig, GameSettings self, string key,
            ref string val, string def)
        {
            Delegates.Params_LoadString @params = new()
            {
                self = self, key = key, val = val, def = def
            };
            if (_beforeLoadString != null)
                foreach (Delegates.LoadString_BeforeArgs toInvoke in _beforeLoadString.GetInvocationList())
                    try
                    {
                        _beforeLoadString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            val = @params.val;
            def = @params.def;
            var retVal = orig(self, key, ref val, def);
            if (_afterLoadString != null)
                foreach (Delegates.LoadString_AfterArgs toInvoke in _afterLoadString.GetInvocationList())
                    try
                    {
                        retVal = _afterLoadString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLogMissingKey()
        {
            if (!HookedList.Contains("LogMissingKey"))
            {
                HookedList.Add("LogMissingKey");
                On.GameSettings.LogMissingKey += LogMissingKey;
            }
        }

        internal static event Delegates.LogMissingKey_BeforeArgs _beforeLogMissingKey;
        internal static event Delegates.LogMissingKey_AfterArgs _afterLogMissingKey;

        private static void LogMissingKey(On.GameSettings.orig_LogMissingKey orig, GameSettings self, string key)
        {
            Delegates.Params_LogMissingKey @params = new()
            {
                self = self, key = key
            };
            if (_beforeLogMissingKey != null)
                foreach (Delegates.LogMissingKey_BeforeArgs toInvoke in _beforeLogMissingKey.GetInvocationList())
                    try
                    {
                        _beforeLogMissingKey?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            orig(self, key);
            if (_afterLogMissingKey != null)
                foreach (Delegates.LogMissingKey_AfterArgs toInvoke in _afterLogMissingKey.GetInvocationList())
                    try
                    {
                        _afterLogMissingKey.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogLoadedKey_string_int()
        {
            if (!HookedList.Contains("LogLoadedKey_string_int"))
            {
                HookedList.Add("LogLoadedKey_string_int");
                On.GameSettings.LogLoadedKey_string_int += LogLoadedKey_string_int;
            }
        }

        internal static event Delegates.LogLoadedKey_string_int_BeforeArgs _beforeLogLoadedKey_string_int;
        internal static event Delegates.LogLoadedKey_string_int_AfterArgs _afterLogLoadedKey_string_int;

        private static void LogLoadedKey_string_int(On.GameSettings.orig_LogLoadedKey_string_int orig,
            GameSettings self, string key, int value)
        {
            Delegates.Params_LogLoadedKey_string_int @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeLogLoadedKey_string_int != null)
                foreach (Delegates.LogLoadedKey_string_int_BeforeArgs toInvoke in _beforeLogLoadedKey_string_int
                             .GetInvocationList())
                    try
                    {
                        _beforeLogLoadedKey_string_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogLoadedKey_string_int != null)
                foreach (Delegates.LogLoadedKey_string_int_AfterArgs toInvoke in _afterLogLoadedKey_string_int
                             .GetInvocationList())
                    try
                    {
                        _afterLogLoadedKey_string_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogLoadedKey_string_float()
        {
            if (!HookedList.Contains("LogLoadedKey_string_float"))
            {
                HookedList.Add("LogLoadedKey_string_float");
                On.GameSettings.LogLoadedKey_string_float += LogLoadedKey_string_float;
            }
        }

        internal static event Delegates.LogLoadedKey_string_float_BeforeArgs _beforeLogLoadedKey_string_float;
        internal static event Delegates.LogLoadedKey_string_float_AfterArgs _afterLogLoadedKey_string_float;

        private static void LogLoadedKey_string_float(On.GameSettings.orig_LogLoadedKey_string_float orig,
            GameSettings self, string key, float value)
        {
            Delegates.Params_LogLoadedKey_string_float @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeLogLoadedKey_string_float != null)
                foreach (Delegates.LogLoadedKey_string_float_BeforeArgs toInvoke in _beforeLogLoadedKey_string_float
                             .GetInvocationList())
                    try
                    {
                        _beforeLogLoadedKey_string_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogLoadedKey_string_float != null)
                foreach (Delegates.LogLoadedKey_string_float_AfterArgs toInvoke in _afterLogLoadedKey_string_float
                             .GetInvocationList())
                    try
                    {
                        _afterLogLoadedKey_string_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogLoadedKey_string_string()
        {
            if (!HookedList.Contains("LogLoadedKey_string_string"))
            {
                HookedList.Add("LogLoadedKey_string_string");
                On.GameSettings.LogLoadedKey_string_string += LogLoadedKey_string_string;
            }
        }

        internal static event Delegates.LogLoadedKey_string_string_BeforeArgs _beforeLogLoadedKey_string_string;
        internal static event Delegates.LogLoadedKey_string_string_AfterArgs _afterLogLoadedKey_string_string;

        private static void LogLoadedKey_string_string(On.GameSettings.orig_LogLoadedKey_string_string orig,
            GameSettings self, string key, string value)
        {
            Delegates.Params_LogLoadedKey_string_string @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeLogLoadedKey_string_string != null)
                foreach (Delegates.LogLoadedKey_string_string_BeforeArgs toInvoke in _beforeLogLoadedKey_string_string
                             .GetInvocationList())
                    try
                    {
                        _beforeLogLoadedKey_string_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogLoadedKey_string_string != null)
                foreach (Delegates.LogLoadedKey_string_string_AfterArgs toInvoke in _afterLogLoadedKey_string_string
                             .GetInvocationList())
                    try
                    {
                        _afterLogLoadedKey_string_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogSavedKey_string_int()
        {
            if (!HookedList.Contains("LogSavedKey_string_int"))
            {
                HookedList.Add("LogSavedKey_string_int");
                On.GameSettings.LogSavedKey_string_int += LogSavedKey_string_int;
            }
        }

        internal static event Delegates.LogSavedKey_string_int_BeforeArgs _beforeLogSavedKey_string_int;
        internal static event Delegates.LogSavedKey_string_int_AfterArgs _afterLogSavedKey_string_int;

        private static void LogSavedKey_string_int(On.GameSettings.orig_LogSavedKey_string_int orig, GameSettings self,
            string key, int value)
        {
            Delegates.Params_LogSavedKey_string_int @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeLogSavedKey_string_int != null)
                foreach (Delegates.LogSavedKey_string_int_BeforeArgs toInvoke in _beforeLogSavedKey_string_int
                             .GetInvocationList())
                    try
                    {
                        _beforeLogSavedKey_string_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogSavedKey_string_int != null)
                foreach (Delegates.LogSavedKey_string_int_AfterArgs toInvoke in _afterLogSavedKey_string_int
                             .GetInvocationList())
                    try
                    {
                        _afterLogSavedKey_string_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogSavedKey_string_float()
        {
            if (!HookedList.Contains("LogSavedKey_string_float"))
            {
                HookedList.Add("LogSavedKey_string_float");
                On.GameSettings.LogSavedKey_string_float += LogSavedKey_string_float;
            }
        }

        internal static event Delegates.LogSavedKey_string_float_BeforeArgs _beforeLogSavedKey_string_float;
        internal static event Delegates.LogSavedKey_string_float_AfterArgs _afterLogSavedKey_string_float;

        private static void LogSavedKey_string_float(On.GameSettings.orig_LogSavedKey_string_float orig,
            GameSettings self, string key, float value)
        {
            Delegates.Params_LogSavedKey_string_float @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeLogSavedKey_string_float != null)
                foreach (Delegates.LogSavedKey_string_float_BeforeArgs toInvoke in _beforeLogSavedKey_string_float
                             .GetInvocationList())
                    try
                    {
                        _beforeLogSavedKey_string_float?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogSavedKey_string_float != null)
                foreach (Delegates.LogSavedKey_string_float_AfterArgs toInvoke in _afterLogSavedKey_string_float
                             .GetInvocationList())
                    try
                    {
                        _afterLogSavedKey_string_float.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLogSavedKey_string_string()
        {
            if (!HookedList.Contains("LogSavedKey_string_string"))
            {
                HookedList.Add("LogSavedKey_string_string");
                On.GameSettings.LogSavedKey_string_string += LogSavedKey_string_string;
            }
        }

        internal static event Delegates.LogSavedKey_string_string_BeforeArgs _beforeLogSavedKey_string_string;
        internal static event Delegates.LogSavedKey_string_string_AfterArgs _afterLogSavedKey_string_string;

        private static void LogSavedKey_string_string(On.GameSettings.orig_LogSavedKey_string_string orig,
            GameSettings self, string key, string value)
        {
            Delegates.Params_LogSavedKey_string_string @params = new()
            {
                self = self, key = key, value = value
            };
            if (_beforeLogSavedKey_string_string != null)
                foreach (Delegates.LogSavedKey_string_string_BeforeArgs toInvoke in _beforeLogSavedKey_string_string
                             .GetInvocationList())
                    try
                    {
                        _beforeLogSavedKey_string_string?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            key = @params.key;
            value = @params.value;
            orig(self, key, value);
            if (_afterLogSavedKey_string_string != null)
                foreach (Delegates.LogSavedKey_string_string_AfterArgs toInvoke in _afterLogSavedKey_string_string
                             .GetInvocationList())
                    try
                    {
                        _afterLogSavedKey_string_string.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCommandArgumentUsed()
        {
            if (!HookedList.Contains("CommandArgumentUsed"))
            {
                HookedList.Add("CommandArgumentUsed");
                On.GameSettings.CommandArgumentUsed += CommandArgumentUsed;
            }
        }

        internal static event Delegates.CommandArgumentUsed_BeforeArgs _beforeCommandArgumentUsed;
        internal static event Delegates.CommandArgumentUsed_AfterArgs _afterCommandArgumentUsed;

        private static bool CommandArgumentUsed(On.GameSettings.orig_CommandArgumentUsed orig, GameSettings self,
            string arg)
        {
            Delegates.Params_CommandArgumentUsed @params = new()
            {
                self = self, arg = arg
            };
            if (_beforeCommandArgumentUsed != null)
                foreach (Delegates.CommandArgumentUsed_BeforeArgs toInvoke in _beforeCommandArgumentUsed
                             .GetInvocationList())
                    try
                    {
                        _beforeCommandArgumentUsed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            arg = @params.arg;
            var retVal = orig(self, arg);
            if (_afterCommandArgumentUsed != null)
                foreach (Delegates.CommandArgumentUsed_AfterArgs toInvoke in
                         _afterCommandArgumentUsed.GetInvocationList())
                    try
                    {
                        retVal = _afterCommandArgumentUsed.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate bool CommandArgumentUsed_AfterArgs(Params_CommandArgumentUsed args, bool ret);

        public delegate void CommandArgumentUsed_BeforeArgs(Params_CommandArgumentUsed args);

        public delegate bool CommandArgumentUsed_WithArgs(Func<GameSettings, string, bool> orig, GameSettings self,
            string arg);

        public delegate bool HasSetting_AfterArgs(Params_HasSetting args, bool ret);

        public delegate void HasSetting_BeforeArgs(Params_HasSetting args);

        public delegate bool HasSetting_WithArgs(Func<GameSettings, string, bool> orig, GameSettings self, string key);

        public delegate void LoadAndUpgradeKeyboardKey_AfterArgs(Params_LoadAndUpgradeKeyboardKey args);

        public delegate void LoadAndUpgradeKeyboardKey_BeforeArgs(Params_LoadAndUpgradeKeyboardKey args);

        public delegate void LoadAndUpgradeKeyboardKey_WithArgs(Action<GameSettings, string, string, Key> orig,
            GameSettings self, string prefsKey, ref string setString, Key defaultKey);

        public delegate void LoadAudioSettings_AfterArgs(Params_LoadAudioSettings args);

        public delegate void LoadAudioSettings_BeforeArgs(Params_LoadAudioSettings args);

        public delegate void LoadAudioSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate bool LoadBool_AfterArgs(Params_LoadBool args, bool ret);

        public delegate void LoadBool_BeforeArgs(Params_LoadBool args);

        public delegate bool LoadBool_WithArgs(Func<GameSettings, string, bool, bool, bool> orig, GameSettings self,
            string key, ref bool val, bool def);

        public delegate void LoadBrightnessConfigured_AfterArgs(Params_LoadBrightnessConfigured args);

        public delegate void LoadBrightnessConfigured_BeforeArgs(Params_LoadBrightnessConfigured args);

        public delegate void LoadBrightnessConfigured_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void LoadBrightnessSettings_AfterArgs(Params_LoadBrightnessSettings args);

        public delegate void LoadBrightnessSettings_BeforeArgs(Params_LoadBrightnessSettings args);

        public delegate void LoadBrightnessSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate bool LoadFloat_AfterArgs(Params_LoadFloat args, bool ret);

        public delegate void LoadFloat_BeforeArgs(Params_LoadFloat args);

        public delegate bool LoadFloat_WithArgs(Func<GameSettings, string, float, float, bool> orig, GameSettings self,
            string key, ref float val, float def);

        public delegate void LoadGameOptionsSettings_AfterArgs(Params_LoadGameOptionsSettings args);

        public delegate void LoadGameOptionsSettings_BeforeArgs(Params_LoadGameOptionsSettings args);

        public delegate void LoadGameOptionsSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate bool LoadGamepadSettings_AfterArgs(Params_LoadGamepadSettings args, bool ret);

        public delegate void LoadGamepadSettings_BeforeArgs(Params_LoadGamepadSettings args);

        public delegate bool LoadGamepadSettings_WithArgs(Func<GameSettings, GamepadType, bool> orig, GameSettings self,
            GamepadType gamepadType);

        public delegate bool LoadInt_AfterArgs(Params_LoadInt args, bool ret);

        public delegate void LoadInt_BeforeArgs(Params_LoadInt args);

        public delegate bool LoadInt_WithArgs(Func<GameSettings, string, int, int, bool> orig, GameSettings self,
            string key, ref int val, int def);

        public delegate void LoadKeyboardSettings_AfterArgs(Params_LoadKeyboardSettings args);

        public delegate void LoadKeyboardSettings_BeforeArgs(Params_LoadKeyboardSettings args);

        public delegate void LoadKeyboardSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void LoadOverscanConfigured_AfterArgs(Params_LoadOverscanConfigured args);

        public delegate void LoadOverscanConfigured_BeforeArgs(Params_LoadOverscanConfigured args);

        public delegate void LoadOverscanConfigured_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void LoadOverscanSettings_AfterArgs(Params_LoadOverscanSettings args);

        public delegate void LoadOverscanSettings_BeforeArgs(Params_LoadOverscanSettings args);

        public delegate void LoadOverscanSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate bool LoadString_AfterArgs(Params_LoadString args, bool ret);

        public delegate void LoadString_BeforeArgs(Params_LoadString args);

        public delegate bool LoadString_WithArgs(Func<GameSettings, string, string, string, bool> orig,
            GameSettings self, string key, ref string val, string def);

        public delegate void LoadVideoSettings_AfterArgs(Params_LoadVideoSettings args);

        public delegate void LoadVideoSettings_BeforeArgs(Params_LoadVideoSettings args);

        public delegate void LoadVideoSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void LogLoadedKey_string_float_AfterArgs(Params_LogLoadedKey_string_float args);

        public delegate void LogLoadedKey_string_float_BeforeArgs(Params_LogLoadedKey_string_float args);

        public delegate void LogLoadedKey_string_float_WithArgs(Action<GameSettings, string, float> orig,
            GameSettings self, string key, float value);

        public delegate void LogLoadedKey_string_int_AfterArgs(Params_LogLoadedKey_string_int args);

        public delegate void LogLoadedKey_string_int_BeforeArgs(Params_LogLoadedKey_string_int args);

        public delegate void LogLoadedKey_string_int_WithArgs(Action<GameSettings, string, int> orig, GameSettings self,
            string key, int value);

        public delegate void LogLoadedKey_string_string_AfterArgs(Params_LogLoadedKey_string_string args);

        public delegate void LogLoadedKey_string_string_BeforeArgs(Params_LogLoadedKey_string_string args);

        public delegate void LogLoadedKey_string_string_WithArgs(Action<GameSettings, string, string> orig,
            GameSettings self, string key, string value);

        public delegate void LogMissingKey_AfterArgs(Params_LogMissingKey args);

        public delegate void LogMissingKey_BeforeArgs(Params_LogMissingKey args);

        public delegate void LogMissingKey_WithArgs(Action<GameSettings, string> orig, GameSettings self, string key);

        public delegate void LogSavedKey_string_float_AfterArgs(Params_LogSavedKey_string_float args);

        public delegate void LogSavedKey_string_float_BeforeArgs(Params_LogSavedKey_string_float args);

        public delegate void LogSavedKey_string_float_WithArgs(Action<GameSettings, string, float> orig,
            GameSettings self, string key, float value);

        public delegate void LogSavedKey_string_int_AfterArgs(Params_LogSavedKey_string_int args);

        public delegate void LogSavedKey_string_int_BeforeArgs(Params_LogSavedKey_string_int args);

        public delegate void LogSavedKey_string_int_WithArgs(Action<GameSettings, string, int> orig, GameSettings self,
            string key, int value);

        public delegate void LogSavedKey_string_string_AfterArgs(Params_LogSavedKey_string_string args);

        public delegate void LogSavedKey_string_string_BeforeArgs(Params_LogSavedKey_string_string args);

        public delegate void LogSavedKey_string_string_WithArgs(Action<GameSettings, string, string> orig,
            GameSettings self, string key, string value);

        public delegate GamepadType RemapGamepadTypeForSettings_AfterArgs(Params_RemapGamepadTypeForSettings args,
            GamepadType ret);

        public delegate void RemapGamepadTypeForSettings_BeforeArgs(Params_RemapGamepadTypeForSettings args);

        public delegate GamepadType RemapGamepadTypeForSettings_WithArgs(
            Func<GameSettings, GamepadType, GamepadType> orig, GameSettings self, GamepadType sourceType);

        public delegate void ResetAudioSettings_AfterArgs(Params_ResetAudioSettings args);

        public delegate void ResetAudioSettings_BeforeArgs(Params_ResetAudioSettings args);

        public delegate void ResetAudioSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void ResetBrightnessSettings_AfterArgs(Params_ResetBrightnessSettings args);

        public delegate void ResetBrightnessSettings_BeforeArgs(Params_ResetBrightnessSettings args);

        public delegate void ResetBrightnessSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void ResetGameOptionsSettings_AfterArgs(Params_ResetGameOptionsSettings args);

        public delegate void ResetGameOptionsSettings_BeforeArgs(Params_ResetGameOptionsSettings args);

        public delegate void ResetGameOptionsSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void ResetGamepadSettings_AfterArgs(Params_ResetGamepadSettings args);

        public delegate void ResetGamepadSettings_BeforeArgs(Params_ResetGamepadSettings args);

        public delegate void ResetGamepadSettings_WithArgs(Action<GameSettings, GamepadType> orig, GameSettings self,
            GamepadType gamepadType);

        public delegate void ResetOverscanSettings_AfterArgs(Params_ResetOverscanSettings args);

        public delegate void ResetOverscanSettings_BeforeArgs(Params_ResetOverscanSettings args);

        public delegate void ResetOverscanSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void ResetVideoSettings_AfterArgs(Params_ResetVideoSettings args);

        public delegate void ResetVideoSettings_BeforeArgs(Params_ResetVideoSettings args);

        public delegate void ResetVideoSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void SaveAudioSettings_AfterArgs(Params_SaveAudioSettings args);

        public delegate void SaveAudioSettings_BeforeArgs(Params_SaveAudioSettings args);

        public delegate void SaveAudioSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void SaveBrightnessSettings_AfterArgs(Params_SaveBrightnessSettings args);

        public delegate void SaveBrightnessSettings_BeforeArgs(Params_SaveBrightnessSettings args);

        public delegate void SaveBrightnessSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void SaveGameOptionsSettings_AfterArgs(Params_SaveGameOptionsSettings args);

        public delegate void SaveGameOptionsSettings_BeforeArgs(Params_SaveGameOptionsSettings args);

        public delegate void SaveGameOptionsSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void SaveGamepadSettings_AfterArgs(Params_SaveGamepadSettings args);

        public delegate void SaveGamepadSettings_BeforeArgs(Params_SaveGamepadSettings args);

        public delegate void SaveGamepadSettings_WithArgs(Action<GameSettings, GamepadType> orig, GameSettings self,
            GamepadType gamepadType);

        public delegate void SaveKeyboardSettings_AfterArgs(Params_SaveKeyboardSettings args);

        public delegate void SaveKeyboardSettings_BeforeArgs(Params_SaveKeyboardSettings args);

        public delegate void SaveKeyboardSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void SaveOverscanSettings_AfterArgs(Params_SaveOverscanSettings args);

        public delegate void SaveOverscanSettings_BeforeArgs(Params_SaveOverscanSettings args);

        public delegate void SaveOverscanSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public delegate void SaveVideoSettings_AfterArgs(Params_SaveVideoSettings args);

        public delegate void SaveVideoSettings_BeforeArgs(Params_SaveVideoSettings args);

        public delegate void SaveVideoSettings_WithArgs(Action<GameSettings> orig, GameSettings self);

        public sealed class Params_LoadGameOptionsSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveGameOptionsSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetGameOptionsSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadVideoSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveVideoSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetVideoSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadOverscanSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveOverscanSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetOverscanSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadOverscanConfigured
        {
            public GameSettings self;
        }

        public sealed class Params_LoadBrightnessSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveBrightnessSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetBrightnessSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadBrightnessConfigured
        {
            public GameSettings self;
        }

        public sealed class Params_LoadAudioSettings
        {
            public GameSettings self;
        }

        public sealed class Params_SaveAudioSettings
        {
            public GameSettings self;
        }

        public sealed class Params_ResetAudioSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadKeyboardSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadAndUpgradeKeyboardKey
        {
            public Key defaultKey;
            public string prefsKey;
            public GameSettings self;
            public string setString;
        }

        public sealed class Params_SaveKeyboardSettings
        {
            public GameSettings self;
        }

        public sealed class Params_LoadGamepadSettings
        {
            public GamepadType gamepadType;
            public GameSettings self;
        }

        public sealed class Params_SaveGamepadSettings
        {
            public GamepadType gamepadType;
            public GameSettings self;
        }

        public sealed class Params_ResetGamepadSettings
        {
            public GamepadType gamepadType;
            public GameSettings self;
        }

        public sealed class Params_RemapGamepadTypeForSettings
        {
            public GameSettings self;
            public GamepadType sourceType;
        }

        public sealed class Params_LoadInt
        {
            public int def;
            public string key;
            public GameSettings self;
            public int val;
        }

        public sealed class Params_HasSetting
        {
            public string key;
            public GameSettings self;
        }

        public sealed class Params_LoadBool
        {
            public bool def;
            public string key;
            public GameSettings self;
            public bool val;
        }

        public sealed class Params_LoadFloat
        {
            public float def;
            public string key;
            public GameSettings self;
            public float val;
        }

        public sealed class Params_LoadString
        {
            public string def;
            public string key;
            public GameSettings self;
            public string val;
        }

        public sealed class Params_LogMissingKey
        {
            public string key;
            public GameSettings self;
        }

        public sealed class Params_LogLoadedKey_string_int
        {
            public string key;
            public GameSettings self;
            public int value;
        }

        public sealed class Params_LogLoadedKey_string_float
        {
            public string key;
            public GameSettings self;
            public float value;
        }

        public sealed class Params_LogLoadedKey_string_string
        {
            public string key;
            public GameSettings self;
            public string value;
        }

        public sealed class Params_LogSavedKey_string_int
        {
            public string key;
            public GameSettings self;
            public int value;
        }

        public sealed class Params_LogSavedKey_string_float
        {
            public string key;
            public GameSettings self;
            public float value;
        }

        public sealed class Params_LogSavedKey_string_string
        {
            public string key;
            public GameSettings self;
            public string value;
        }

        public sealed class Params_CommandArgumentUsed
        {
            public string arg;
            public GameSettings self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.LoadGameOptionsSettings_BeforeArgs LoadGameOptionsSettings
        {
            add
            {
                HookHandler._beforeLoadGameOptionsSettings += value;
                HookHandler.HookLoadGameOptionsSettings();
            }
            remove => HookHandler._beforeLoadGameOptionsSettings -= value;
        }

        public static event Delegates.SaveGameOptionsSettings_BeforeArgs SaveGameOptionsSettings
        {
            add
            {
                HookHandler._beforeSaveGameOptionsSettings += value;
                HookHandler.HookSaveGameOptionsSettings();
            }
            remove => HookHandler._beforeSaveGameOptionsSettings -= value;
        }

        public static event Delegates.ResetGameOptionsSettings_BeforeArgs ResetGameOptionsSettings
        {
            add
            {
                HookHandler._beforeResetGameOptionsSettings += value;
                HookHandler.HookResetGameOptionsSettings();
            }
            remove => HookHandler._beforeResetGameOptionsSettings -= value;
        }

        public static event Delegates.LoadVideoSettings_BeforeArgs LoadVideoSettings
        {
            add
            {
                HookHandler._beforeLoadVideoSettings += value;
                HookHandler.HookLoadVideoSettings();
            }
            remove => HookHandler._beforeLoadVideoSettings -= value;
        }

        public static event Delegates.SaveVideoSettings_BeforeArgs SaveVideoSettings
        {
            add
            {
                HookHandler._beforeSaveVideoSettings += value;
                HookHandler.HookSaveVideoSettings();
            }
            remove => HookHandler._beforeSaveVideoSettings -= value;
        }

        public static event Delegates.ResetVideoSettings_BeforeArgs ResetVideoSettings
        {
            add
            {
                HookHandler._beforeResetVideoSettings += value;
                HookHandler.HookResetVideoSettings();
            }
            remove => HookHandler._beforeResetVideoSettings -= value;
        }

        public static event Delegates.LoadOverscanSettings_BeforeArgs LoadOverscanSettings
        {
            add
            {
                HookHandler._beforeLoadOverscanSettings += value;
                HookHandler.HookLoadOverscanSettings();
            }
            remove => HookHandler._beforeLoadOverscanSettings -= value;
        }

        public static event Delegates.SaveOverscanSettings_BeforeArgs SaveOverscanSettings
        {
            add
            {
                HookHandler._beforeSaveOverscanSettings += value;
                HookHandler.HookSaveOverscanSettings();
            }
            remove => HookHandler._beforeSaveOverscanSettings -= value;
        }

        public static event Delegates.ResetOverscanSettings_BeforeArgs ResetOverscanSettings
        {
            add
            {
                HookHandler._beforeResetOverscanSettings += value;
                HookHandler.HookResetOverscanSettings();
            }
            remove => HookHandler._beforeResetOverscanSettings -= value;
        }

        public static event Delegates.LoadOverscanConfigured_BeforeArgs LoadOverscanConfigured
        {
            add
            {
                HookHandler._beforeLoadOverscanConfigured += value;
                HookHandler.HookLoadOverscanConfigured();
            }
            remove => HookHandler._beforeLoadOverscanConfigured -= value;
        }

        public static event Delegates.LoadBrightnessSettings_BeforeArgs LoadBrightnessSettings
        {
            add
            {
                HookHandler._beforeLoadBrightnessSettings += value;
                HookHandler.HookLoadBrightnessSettings();
            }
            remove => HookHandler._beforeLoadBrightnessSettings -= value;
        }

        public static event Delegates.SaveBrightnessSettings_BeforeArgs SaveBrightnessSettings
        {
            add
            {
                HookHandler._beforeSaveBrightnessSettings += value;
                HookHandler.HookSaveBrightnessSettings();
            }
            remove => HookHandler._beforeSaveBrightnessSettings -= value;
        }

        public static event Delegates.ResetBrightnessSettings_BeforeArgs ResetBrightnessSettings
        {
            add
            {
                HookHandler._beforeResetBrightnessSettings += value;
                HookHandler.HookResetBrightnessSettings();
            }
            remove => HookHandler._beforeResetBrightnessSettings -= value;
        }

        public static event Delegates.LoadBrightnessConfigured_BeforeArgs LoadBrightnessConfigured
        {
            add
            {
                HookHandler._beforeLoadBrightnessConfigured += value;
                HookHandler.HookLoadBrightnessConfigured();
            }
            remove => HookHandler._beforeLoadBrightnessConfigured -= value;
        }

        public static event Delegates.LoadAudioSettings_BeforeArgs LoadAudioSettings
        {
            add
            {
                HookHandler._beforeLoadAudioSettings += value;
                HookHandler.HookLoadAudioSettings();
            }
            remove => HookHandler._beforeLoadAudioSettings -= value;
        }

        public static event Delegates.SaveAudioSettings_BeforeArgs SaveAudioSettings
        {
            add
            {
                HookHandler._beforeSaveAudioSettings += value;
                HookHandler.HookSaveAudioSettings();
            }
            remove => HookHandler._beforeSaveAudioSettings -= value;
        }

        public static event Delegates.ResetAudioSettings_BeforeArgs ResetAudioSettings
        {
            add
            {
                HookHandler._beforeResetAudioSettings += value;
                HookHandler.HookResetAudioSettings();
            }
            remove => HookHandler._beforeResetAudioSettings -= value;
        }

        public static event Delegates.LoadKeyboardSettings_BeforeArgs LoadKeyboardSettings
        {
            add
            {
                HookHandler._beforeLoadKeyboardSettings += value;
                HookHandler.HookLoadKeyboardSettings();
            }
            remove => HookHandler._beforeLoadKeyboardSettings -= value;
        }

        public static event Delegates.LoadAndUpgradeKeyboardKey_BeforeArgs LoadAndUpgradeKeyboardKey
        {
            add
            {
                HookHandler._beforeLoadAndUpgradeKeyboardKey += value;
                HookHandler.HookLoadAndUpgradeKeyboardKey();
            }
            remove => HookHandler._beforeLoadAndUpgradeKeyboardKey -= value;
        }

        public static event Delegates.SaveKeyboardSettings_BeforeArgs SaveKeyboardSettings
        {
            add
            {
                HookHandler._beforeSaveKeyboardSettings += value;
                HookHandler.HookSaveKeyboardSettings();
            }
            remove => HookHandler._beforeSaveKeyboardSettings -= value;
        }

        public static event Delegates.LoadGamepadSettings_BeforeArgs LoadGamepadSettings
        {
            add
            {
                HookHandler._beforeLoadGamepadSettings += value;
                HookHandler.HookLoadGamepadSettings();
            }
            remove => HookHandler._beforeLoadGamepadSettings -= value;
        }

        public static event Delegates.SaveGamepadSettings_BeforeArgs SaveGamepadSettings
        {
            add
            {
                HookHandler._beforeSaveGamepadSettings += value;
                HookHandler.HookSaveGamepadSettings();
            }
            remove => HookHandler._beforeSaveGamepadSettings -= value;
        }

        public static event Delegates.ResetGamepadSettings_BeforeArgs ResetGamepadSettings
        {
            add
            {
                HookHandler._beforeResetGamepadSettings += value;
                HookHandler.HookResetGamepadSettings();
            }
            remove => HookHandler._beforeResetGamepadSettings -= value;
        }

        public static event Delegates.RemapGamepadTypeForSettings_BeforeArgs RemapGamepadTypeForSettings
        {
            add
            {
                HookHandler._beforeRemapGamepadTypeForSettings += value;
                HookHandler.HookRemapGamepadTypeForSettings();
            }
            remove => HookHandler._beforeRemapGamepadTypeForSettings -= value;
        }

        public static event Delegates.LoadInt_BeforeArgs LoadInt
        {
            add
            {
                HookHandler._beforeLoadInt += value;
                HookHandler.HookLoadInt();
            }
            remove => HookHandler._beforeLoadInt -= value;
        }

        public static event Delegates.HasSetting_BeforeArgs HasSetting
        {
            add
            {
                HookHandler._beforeHasSetting += value;
                HookHandler.HookHasSetting();
            }
            remove => HookHandler._beforeHasSetting -= value;
        }

        public static event Delegates.LoadBool_BeforeArgs LoadBool
        {
            add
            {
                HookHandler._beforeLoadBool += value;
                HookHandler.HookLoadBool();
            }
            remove => HookHandler._beforeLoadBool -= value;
        }

        public static event Delegates.LoadFloat_BeforeArgs LoadFloat
        {
            add
            {
                HookHandler._beforeLoadFloat += value;
                HookHandler.HookLoadFloat();
            }
            remove => HookHandler._beforeLoadFloat -= value;
        }

        public static event Delegates.LoadString_BeforeArgs LoadString
        {
            add
            {
                HookHandler._beforeLoadString += value;
                HookHandler.HookLoadString();
            }
            remove => HookHandler._beforeLoadString -= value;
        }

        public static event Delegates.LogMissingKey_BeforeArgs LogMissingKey
        {
            add
            {
                HookHandler._beforeLogMissingKey += value;
                HookHandler.HookLogMissingKey();
            }
            remove => HookHandler._beforeLogMissingKey -= value;
        }

        public static event Delegates.LogLoadedKey_string_int_BeforeArgs LogLoadedKey_string_int
        {
            add
            {
                HookHandler._beforeLogLoadedKey_string_int += value;
                HookHandler.HookLogLoadedKey_string_int();
            }
            remove => HookHandler._beforeLogLoadedKey_string_int -= value;
        }

        public static event Delegates.LogLoadedKey_string_float_BeforeArgs LogLoadedKey_string_float
        {
            add
            {
                HookHandler._beforeLogLoadedKey_string_float += value;
                HookHandler.HookLogLoadedKey_string_float();
            }
            remove => HookHandler._beforeLogLoadedKey_string_float -= value;
        }

        public static event Delegates.LogLoadedKey_string_string_BeforeArgs LogLoadedKey_string_string
        {
            add
            {
                HookHandler._beforeLogLoadedKey_string_string += value;
                HookHandler.HookLogLoadedKey_string_string();
            }
            remove => HookHandler._beforeLogLoadedKey_string_string -= value;
        }

        public static event Delegates.LogSavedKey_string_int_BeforeArgs LogSavedKey_string_int
        {
            add
            {
                HookHandler._beforeLogSavedKey_string_int += value;
                HookHandler.HookLogSavedKey_string_int();
            }
            remove => HookHandler._beforeLogSavedKey_string_int -= value;
        }

        public static event Delegates.LogSavedKey_string_float_BeforeArgs LogSavedKey_string_float
        {
            add
            {
                HookHandler._beforeLogSavedKey_string_float += value;
                HookHandler.HookLogSavedKey_string_float();
            }
            remove => HookHandler._beforeLogSavedKey_string_float -= value;
        }

        public static event Delegates.LogSavedKey_string_string_BeforeArgs LogSavedKey_string_string
        {
            add
            {
                HookHandler._beforeLogSavedKey_string_string += value;
                HookHandler.HookLogSavedKey_string_string();
            }
            remove => HookHandler._beforeLogSavedKey_string_string -= value;
        }

        public static event Delegates.CommandArgumentUsed_BeforeArgs CommandArgumentUsed
        {
            add
            {
                HookHandler._beforeCommandArgumentUsed += value;
                HookHandler.HookCommandArgumentUsed();
            }
            remove => HookHandler._beforeCommandArgumentUsed -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.LoadGameOptionsSettings_AfterArgs LoadGameOptionsSettings
        {
            add
            {
                HookHandler._afterLoadGameOptionsSettings += value;
                HookHandler.HookLoadGameOptionsSettings();
            }
            remove => HookHandler._afterLoadGameOptionsSettings -= value;
        }

        public static event Delegates.SaveGameOptionsSettings_AfterArgs SaveGameOptionsSettings
        {
            add
            {
                HookHandler._afterSaveGameOptionsSettings += value;
                HookHandler.HookSaveGameOptionsSettings();
            }
            remove => HookHandler._afterSaveGameOptionsSettings -= value;
        }

        public static event Delegates.ResetGameOptionsSettings_AfterArgs ResetGameOptionsSettings
        {
            add
            {
                HookHandler._afterResetGameOptionsSettings += value;
                HookHandler.HookResetGameOptionsSettings();
            }
            remove => HookHandler._afterResetGameOptionsSettings -= value;
        }

        public static event Delegates.LoadVideoSettings_AfterArgs LoadVideoSettings
        {
            add
            {
                HookHandler._afterLoadVideoSettings += value;
                HookHandler.HookLoadVideoSettings();
            }
            remove => HookHandler._afterLoadVideoSettings -= value;
        }

        public static event Delegates.SaveVideoSettings_AfterArgs SaveVideoSettings
        {
            add
            {
                HookHandler._afterSaveVideoSettings += value;
                HookHandler.HookSaveVideoSettings();
            }
            remove => HookHandler._afterSaveVideoSettings -= value;
        }

        public static event Delegates.ResetVideoSettings_AfterArgs ResetVideoSettings
        {
            add
            {
                HookHandler._afterResetVideoSettings += value;
                HookHandler.HookResetVideoSettings();
            }
            remove => HookHandler._afterResetVideoSettings -= value;
        }

        public static event Delegates.LoadOverscanSettings_AfterArgs LoadOverscanSettings
        {
            add
            {
                HookHandler._afterLoadOverscanSettings += value;
                HookHandler.HookLoadOverscanSettings();
            }
            remove => HookHandler._afterLoadOverscanSettings -= value;
        }

        public static event Delegates.SaveOverscanSettings_AfterArgs SaveOverscanSettings
        {
            add
            {
                HookHandler._afterSaveOverscanSettings += value;
                HookHandler.HookSaveOverscanSettings();
            }
            remove => HookHandler._afterSaveOverscanSettings -= value;
        }

        public static event Delegates.ResetOverscanSettings_AfterArgs ResetOverscanSettings
        {
            add
            {
                HookHandler._afterResetOverscanSettings += value;
                HookHandler.HookResetOverscanSettings();
            }
            remove => HookHandler._afterResetOverscanSettings -= value;
        }

        public static event Delegates.LoadOverscanConfigured_AfterArgs LoadOverscanConfigured
        {
            add
            {
                HookHandler._afterLoadOverscanConfigured += value;
                HookHandler.HookLoadOverscanConfigured();
            }
            remove => HookHandler._afterLoadOverscanConfigured -= value;
        }

        public static event Delegates.LoadBrightnessSettings_AfterArgs LoadBrightnessSettings
        {
            add
            {
                HookHandler._afterLoadBrightnessSettings += value;
                HookHandler.HookLoadBrightnessSettings();
            }
            remove => HookHandler._afterLoadBrightnessSettings -= value;
        }

        public static event Delegates.SaveBrightnessSettings_AfterArgs SaveBrightnessSettings
        {
            add
            {
                HookHandler._afterSaveBrightnessSettings += value;
                HookHandler.HookSaveBrightnessSettings();
            }
            remove => HookHandler._afterSaveBrightnessSettings -= value;
        }

        public static event Delegates.ResetBrightnessSettings_AfterArgs ResetBrightnessSettings
        {
            add
            {
                HookHandler._afterResetBrightnessSettings += value;
                HookHandler.HookResetBrightnessSettings();
            }
            remove => HookHandler._afterResetBrightnessSettings -= value;
        }

        public static event Delegates.LoadBrightnessConfigured_AfterArgs LoadBrightnessConfigured
        {
            add
            {
                HookHandler._afterLoadBrightnessConfigured += value;
                HookHandler.HookLoadBrightnessConfigured();
            }
            remove => HookHandler._afterLoadBrightnessConfigured -= value;
        }

        public static event Delegates.LoadAudioSettings_AfterArgs LoadAudioSettings
        {
            add
            {
                HookHandler._afterLoadAudioSettings += value;
                HookHandler.HookLoadAudioSettings();
            }
            remove => HookHandler._afterLoadAudioSettings -= value;
        }

        public static event Delegates.SaveAudioSettings_AfterArgs SaveAudioSettings
        {
            add
            {
                HookHandler._afterSaveAudioSettings += value;
                HookHandler.HookSaveAudioSettings();
            }
            remove => HookHandler._afterSaveAudioSettings -= value;
        }

        public static event Delegates.ResetAudioSettings_AfterArgs ResetAudioSettings
        {
            add
            {
                HookHandler._afterResetAudioSettings += value;
                HookHandler.HookResetAudioSettings();
            }
            remove => HookHandler._afterResetAudioSettings -= value;
        }

        public static event Delegates.LoadKeyboardSettings_AfterArgs LoadKeyboardSettings
        {
            add
            {
                HookHandler._afterLoadKeyboardSettings += value;
                HookHandler.HookLoadKeyboardSettings();
            }
            remove => HookHandler._afterLoadKeyboardSettings -= value;
        }

        public static event Delegates.LoadAndUpgradeKeyboardKey_AfterArgs LoadAndUpgradeKeyboardKey
        {
            add
            {
                HookHandler._afterLoadAndUpgradeKeyboardKey += value;
                HookHandler.HookLoadAndUpgradeKeyboardKey();
            }
            remove => HookHandler._afterLoadAndUpgradeKeyboardKey -= value;
        }

        public static event Delegates.SaveKeyboardSettings_AfterArgs SaveKeyboardSettings
        {
            add
            {
                HookHandler._afterSaveKeyboardSettings += value;
                HookHandler.HookSaveKeyboardSettings();
            }
            remove => HookHandler._afterSaveKeyboardSettings -= value;
        }

        public static event Delegates.LoadGamepadSettings_AfterArgs LoadGamepadSettings
        {
            add
            {
                HookHandler._afterLoadGamepadSettings += value;
                HookHandler.HookLoadGamepadSettings();
            }
            remove => HookHandler._afterLoadGamepadSettings -= value;
        }

        public static event Delegates.SaveGamepadSettings_AfterArgs SaveGamepadSettings
        {
            add
            {
                HookHandler._afterSaveGamepadSettings += value;
                HookHandler.HookSaveGamepadSettings();
            }
            remove => HookHandler._afterSaveGamepadSettings -= value;
        }

        public static event Delegates.ResetGamepadSettings_AfterArgs ResetGamepadSettings
        {
            add
            {
                HookHandler._afterResetGamepadSettings += value;
                HookHandler.HookResetGamepadSettings();
            }
            remove => HookHandler._afterResetGamepadSettings -= value;
        }

        public static event Delegates.RemapGamepadTypeForSettings_AfterArgs RemapGamepadTypeForSettings
        {
            add
            {
                HookHandler._afterRemapGamepadTypeForSettings += value;
                HookHandler.HookRemapGamepadTypeForSettings();
            }
            remove => HookHandler._afterRemapGamepadTypeForSettings -= value;
        }

        public static event Delegates.LoadInt_AfterArgs LoadInt
        {
            add
            {
                HookHandler._afterLoadInt += value;
                HookHandler.HookLoadInt();
            }
            remove => HookHandler._afterLoadInt -= value;
        }

        public static event Delegates.HasSetting_AfterArgs HasSetting
        {
            add
            {
                HookHandler._afterHasSetting += value;
                HookHandler.HookHasSetting();
            }
            remove => HookHandler._afterHasSetting -= value;
        }

        public static event Delegates.LoadBool_AfterArgs LoadBool
        {
            add
            {
                HookHandler._afterLoadBool += value;
                HookHandler.HookLoadBool();
            }
            remove => HookHandler._afterLoadBool -= value;
        }

        public static event Delegates.LoadFloat_AfterArgs LoadFloat
        {
            add
            {
                HookHandler._afterLoadFloat += value;
                HookHandler.HookLoadFloat();
            }
            remove => HookHandler._afterLoadFloat -= value;
        }

        public static event Delegates.LoadString_AfterArgs LoadString
        {
            add
            {
                HookHandler._afterLoadString += value;
                HookHandler.HookLoadString();
            }
            remove => HookHandler._afterLoadString -= value;
        }

        public static event Delegates.LogMissingKey_AfterArgs LogMissingKey
        {
            add
            {
                HookHandler._afterLogMissingKey += value;
                HookHandler.HookLogMissingKey();
            }
            remove => HookHandler._afterLogMissingKey -= value;
        }

        public static event Delegates.LogLoadedKey_string_int_AfterArgs LogLoadedKey_string_int
        {
            add
            {
                HookHandler._afterLogLoadedKey_string_int += value;
                HookHandler.HookLogLoadedKey_string_int();
            }
            remove => HookHandler._afterLogLoadedKey_string_int -= value;
        }

        public static event Delegates.LogLoadedKey_string_float_AfterArgs LogLoadedKey_string_float
        {
            add
            {
                HookHandler._afterLogLoadedKey_string_float += value;
                HookHandler.HookLogLoadedKey_string_float();
            }
            remove => HookHandler._afterLogLoadedKey_string_float -= value;
        }

        public static event Delegates.LogLoadedKey_string_string_AfterArgs LogLoadedKey_string_string
        {
            add
            {
                HookHandler._afterLogLoadedKey_string_string += value;
                HookHandler.HookLogLoadedKey_string_string();
            }
            remove => HookHandler._afterLogLoadedKey_string_string -= value;
        }

        public static event Delegates.LogSavedKey_string_int_AfterArgs LogSavedKey_string_int
        {
            add
            {
                HookHandler._afterLogSavedKey_string_int += value;
                HookHandler.HookLogSavedKey_string_int();
            }
            remove => HookHandler._afterLogSavedKey_string_int -= value;
        }

        public static event Delegates.LogSavedKey_string_float_AfterArgs LogSavedKey_string_float
        {
            add
            {
                HookHandler._afterLogSavedKey_string_float += value;
                HookHandler.HookLogSavedKey_string_float();
            }
            remove => HookHandler._afterLogSavedKey_string_float -= value;
        }

        public static event Delegates.LogSavedKey_string_string_AfterArgs LogSavedKey_string_string
        {
            add
            {
                HookHandler._afterLogSavedKey_string_string += value;
                HookHandler.HookLogSavedKey_string_string();
            }
            remove => HookHandler._afterLogSavedKey_string_string -= value;
        }

        public static event Delegates.CommandArgumentUsed_AfterArgs CommandArgumentUsed
        {
            add
            {
                HookHandler._afterCommandArgumentUsed += value;
                HookHandler.HookCommandArgumentUsed();
            }
            remove => HookHandler._afterCommandArgumentUsed -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.GameSettings.hook_LoadGameOptionsSettings LoadGameOptionsSettings
        {
            add => On.GameSettings.LoadGameOptionsSettings += value;
            remove => On.GameSettings.LoadGameOptionsSettings -= value;
        }

        public static event On.GameSettings.hook_SaveGameOptionsSettings SaveGameOptionsSettings
        {
            add => On.GameSettings.SaveGameOptionsSettings += value;
            remove => On.GameSettings.SaveGameOptionsSettings -= value;
        }

        public static event On.GameSettings.hook_ResetGameOptionsSettings ResetGameOptionsSettings
        {
            add => On.GameSettings.ResetGameOptionsSettings += value;
            remove => On.GameSettings.ResetGameOptionsSettings -= value;
        }

        public static event On.GameSettings.hook_LoadVideoSettings LoadVideoSettings
        {
            add => On.GameSettings.LoadVideoSettings += value;
            remove => On.GameSettings.LoadVideoSettings -= value;
        }

        public static event On.GameSettings.hook_SaveVideoSettings SaveVideoSettings
        {
            add => On.GameSettings.SaveVideoSettings += value;
            remove => On.GameSettings.SaveVideoSettings -= value;
        }

        public static event On.GameSettings.hook_ResetVideoSettings ResetVideoSettings
        {
            add => On.GameSettings.ResetVideoSettings += value;
            remove => On.GameSettings.ResetVideoSettings -= value;
        }

        public static event On.GameSettings.hook_LoadOverscanSettings LoadOverscanSettings
        {
            add => On.GameSettings.LoadOverscanSettings += value;
            remove => On.GameSettings.LoadOverscanSettings -= value;
        }

        public static event On.GameSettings.hook_SaveOverscanSettings SaveOverscanSettings
        {
            add => On.GameSettings.SaveOverscanSettings += value;
            remove => On.GameSettings.SaveOverscanSettings -= value;
        }

        public static event On.GameSettings.hook_ResetOverscanSettings ResetOverscanSettings
        {
            add => On.GameSettings.ResetOverscanSettings += value;
            remove => On.GameSettings.ResetOverscanSettings -= value;
        }

        public static event On.GameSettings.hook_LoadOverscanConfigured LoadOverscanConfigured
        {
            add => On.GameSettings.LoadOverscanConfigured += value;
            remove => On.GameSettings.LoadOverscanConfigured -= value;
        }

        public static event On.GameSettings.hook_LoadBrightnessSettings LoadBrightnessSettings
        {
            add => On.GameSettings.LoadBrightnessSettings += value;
            remove => On.GameSettings.LoadBrightnessSettings -= value;
        }

        public static event On.GameSettings.hook_SaveBrightnessSettings SaveBrightnessSettings
        {
            add => On.GameSettings.SaveBrightnessSettings += value;
            remove => On.GameSettings.SaveBrightnessSettings -= value;
        }

        public static event On.GameSettings.hook_ResetBrightnessSettings ResetBrightnessSettings
        {
            add => On.GameSettings.ResetBrightnessSettings += value;
            remove => On.GameSettings.ResetBrightnessSettings -= value;
        }

        public static event On.GameSettings.hook_LoadBrightnessConfigured LoadBrightnessConfigured
        {
            add => On.GameSettings.LoadBrightnessConfigured += value;
            remove => On.GameSettings.LoadBrightnessConfigured -= value;
        }

        public static event On.GameSettings.hook_LoadAudioSettings LoadAudioSettings
        {
            add => On.GameSettings.LoadAudioSettings += value;
            remove => On.GameSettings.LoadAudioSettings -= value;
        }

        public static event On.GameSettings.hook_SaveAudioSettings SaveAudioSettings
        {
            add => On.GameSettings.SaveAudioSettings += value;
            remove => On.GameSettings.SaveAudioSettings -= value;
        }

        public static event On.GameSettings.hook_ResetAudioSettings ResetAudioSettings
        {
            add => On.GameSettings.ResetAudioSettings += value;
            remove => On.GameSettings.ResetAudioSettings -= value;
        }

        public static event On.GameSettings.hook_LoadKeyboardSettings LoadKeyboardSettings
        {
            add => On.GameSettings.LoadKeyboardSettings += value;
            remove => On.GameSettings.LoadKeyboardSettings -= value;
        }

        public static event On.GameSettings.hook_LoadAndUpgradeKeyboardKey LoadAndUpgradeKeyboardKey
        {
            add => On.GameSettings.LoadAndUpgradeKeyboardKey += value;
            remove => On.GameSettings.LoadAndUpgradeKeyboardKey -= value;
        }

        public static event On.GameSettings.hook_SaveKeyboardSettings SaveKeyboardSettings
        {
            add => On.GameSettings.SaveKeyboardSettings += value;
            remove => On.GameSettings.SaveKeyboardSettings -= value;
        }

        public static event On.GameSettings.hook_LoadGamepadSettings LoadGamepadSettings
        {
            add => On.GameSettings.LoadGamepadSettings += value;
            remove => On.GameSettings.LoadGamepadSettings -= value;
        }

        public static event On.GameSettings.hook_SaveGamepadSettings SaveGamepadSettings
        {
            add => On.GameSettings.SaveGamepadSettings += value;
            remove => On.GameSettings.SaveGamepadSettings -= value;
        }

        public static event On.GameSettings.hook_ResetGamepadSettings ResetGamepadSettings
        {
            add => On.GameSettings.ResetGamepadSettings += value;
            remove => On.GameSettings.ResetGamepadSettings -= value;
        }

        public static event On.GameSettings.hook_RemapGamepadTypeForSettings RemapGamepadTypeForSettings
        {
            add => On.GameSettings.RemapGamepadTypeForSettings += value;
            remove => On.GameSettings.RemapGamepadTypeForSettings -= value;
        }

        public static event On.GameSettings.hook_LoadInt LoadInt
        {
            add => On.GameSettings.LoadInt += value;
            remove => On.GameSettings.LoadInt -= value;
        }

        public static event On.GameSettings.hook_HasSetting HasSetting
        {
            add => On.GameSettings.HasSetting += value;
            remove => On.GameSettings.HasSetting -= value;
        }

        public static event On.GameSettings.hook_LoadBool LoadBool
        {
            add => On.GameSettings.LoadBool += value;
            remove => On.GameSettings.LoadBool -= value;
        }

        public static event On.GameSettings.hook_LoadFloat LoadFloat
        {
            add => On.GameSettings.LoadFloat += value;
            remove => On.GameSettings.LoadFloat -= value;
        }

        public static event On.GameSettings.hook_LoadString LoadString
        {
            add => On.GameSettings.LoadString += value;
            remove => On.GameSettings.LoadString -= value;
        }

        public static event On.GameSettings.hook_LogMissingKey LogMissingKey
        {
            add => On.GameSettings.LogMissingKey += value;
            remove => On.GameSettings.LogMissingKey -= value;
        }

        public static event On.GameSettings.hook_LogLoadedKey_string_int LogLoadedKey_string_int
        {
            add => On.GameSettings.LogLoadedKey_string_int += value;
            remove => On.GameSettings.LogLoadedKey_string_int -= value;
        }

        public static event On.GameSettings.hook_LogLoadedKey_string_float LogLoadedKey_string_float
        {
            add => On.GameSettings.LogLoadedKey_string_float += value;
            remove => On.GameSettings.LogLoadedKey_string_float -= value;
        }

        public static event On.GameSettings.hook_LogLoadedKey_string_string LogLoadedKey_string_string
        {
            add => On.GameSettings.LogLoadedKey_string_string += value;
            remove => On.GameSettings.LogLoadedKey_string_string -= value;
        }

        public static event On.GameSettings.hook_LogSavedKey_string_int LogSavedKey_string_int
        {
            add => On.GameSettings.LogSavedKey_string_int += value;
            remove => On.GameSettings.LogSavedKey_string_int -= value;
        }

        public static event On.GameSettings.hook_LogSavedKey_string_float LogSavedKey_string_float
        {
            add => On.GameSettings.LogSavedKey_string_float += value;
            remove => On.GameSettings.LogSavedKey_string_float -= value;
        }

        public static event On.GameSettings.hook_LogSavedKey_string_string LogSavedKey_string_string
        {
            add => On.GameSettings.LogSavedKey_string_string += value;
            remove => On.GameSettings.LogSavedKey_string_string -= value;
        }

        public static event On.GameSettings.hook_CommandArgumentUsed CommandArgumentUsed
        {
            add => On.GameSettings.CommandArgumentUsed += value;
            remove => On.GameSettings.CommandArgumentUsed -= value;
        }
    }
}