using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for BossStatue class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossStatue
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_UsingDreamVersion()
{
if (!HookedList.Contains("get_UsingDreamVersion"))
{
HookedList.Add("get_UsingDreamVersion");
new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_UsingDreamVersion", true), get_UsingDreamVersion);

}
}
internal static event Delegates.get_UsingDreamVersion_BeforeArgs _beforeget_UsingDreamVersion;
internal static event Delegates.get_UsingDreamVersion_AfterArgs _afterget_UsingDreamVersion;
private static bool get_UsingDreamVersion(Func<BossStatue, bool> orig, BossStatue self)
{
Delegates.Params_get_UsingDreamVersion @params = new() 
{
self = self
};
if (_beforeget_UsingDreamVersion != null)
{
foreach (Delegates.get_UsingDreamVersion_BeforeArgs toInvoke in _beforeget_UsingDreamVersion.GetInvocationList())
{
try
{
_beforeget_UsingDreamVersion?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_UsingDreamVersion != null)
{
foreach (Delegates.get_UsingDreamVersion_AfterArgs toInvoke in _afterget_UsingDreamVersion.GetInvocationList())
{
try
{
retVal = _afterget_UsingDreamVersion.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_UsingDreamVersion()
{
if (!HookedList.Contains("set_UsingDreamVersion"))
{
HookedList.Add("set_UsingDreamVersion");
new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_UsingDreamVersion", true), set_UsingDreamVersion);

}
}
internal static event Delegates.set_UsingDreamVersion_BeforeArgs _beforeset_UsingDreamVersion;
internal static event Delegates.set_UsingDreamVersion_AfterArgs _afterset_UsingDreamVersion;
private static void set_UsingDreamVersion(Action<BossStatue,  bool> orig, BossStatue self,  bool value)
{
Delegates.Params_set_UsingDreamVersion @params = new() 
{
self = self
, value = value
};
if (_beforeset_UsingDreamVersion != null)
{
foreach (Delegates.set_UsingDreamVersion_BeforeArgs toInvoke in _beforeset_UsingDreamVersion.GetInvocationList())
{
try
{
_beforeset_UsingDreamVersion?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_UsingDreamVersion != null)
{
foreach (Delegates.set_UsingDreamVersion_AfterArgs toInvoke in _afterset_UsingDreamVersion.GetInvocationList())
{
try
{
_afterset_UsingDreamVersion.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookset_StatueState()
{
if (!HookedList.Contains("set_StatueState"))
{
HookedList.Add("set_StatueState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_StatueState", true), set_StatueState);

}
}
internal static event Delegates.set_StatueState_BeforeArgs _beforeset_StatueState;
internal static event Delegates.set_StatueState_AfterArgs _afterset_StatueState;
private static void set_StatueState(Action<BossStatue,  BossStatue.Completion> orig, BossStatue self,  BossStatue.Completion value)
{
Delegates.Params_set_StatueState @params = new() 
{
self = self
, value = value
};
if (_beforeset_StatueState != null)
{
foreach (Delegates.set_StatueState_BeforeArgs toInvoke in _beforeset_StatueState.GetInvocationList())
{
try
{
_beforeset_StatueState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_StatueState != null)
{
foreach (Delegates.set_StatueState_AfterArgs toInvoke in _afterset_StatueState.GetInvocationList())
{
try
{
_afterset_StatueState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookset_DreamStatueState()
{
if (!HookedList.Contains("set_DreamStatueState"))
{
HookedList.Add("set_DreamStatueState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_DreamStatueState", true), set_DreamStatueState);

}
}
internal static event Delegates.set_DreamStatueState_BeforeArgs _beforeset_DreamStatueState;
internal static event Delegates.set_DreamStatueState_AfterArgs _afterset_DreamStatueState;
private static void set_DreamStatueState(Action<BossStatue,  BossStatue.Completion> orig, BossStatue self,  BossStatue.Completion value)
{
Delegates.Params_set_DreamStatueState @params = new() 
{
self = self
, value = value
};
if (_beforeset_DreamStatueState != null)
{
foreach (Delegates.set_DreamStatueState_BeforeArgs toInvoke in _beforeset_DreamStatueState.GetInvocationList())
{
try
{
_beforeset_DreamStatueState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_DreamStatueState != null)
{
foreach (Delegates.set_DreamStatueState_AfterArgs toInvoke in _afterset_DreamStatueState.GetInvocationList())
{
try
{
_afterset_DreamStatueState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_HasRegularVersion()
{
if (!HookedList.Contains("get_HasRegularVersion"))
{
HookedList.Add("get_HasRegularVersion");
new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_HasRegularVersion", true), get_HasRegularVersion);

}
}
internal static event Delegates.get_HasRegularVersion_BeforeArgs _beforeget_HasRegularVersion;
internal static event Delegates.get_HasRegularVersion_AfterArgs _afterget_HasRegularVersion;
private static bool get_HasRegularVersion(Func<BossStatue, bool> orig, BossStatue self)
{
Delegates.Params_get_HasRegularVersion @params = new() 
{
self = self
};
if (_beforeget_HasRegularVersion != null)
{
foreach (Delegates.get_HasRegularVersion_BeforeArgs toInvoke in _beforeget_HasRegularVersion.GetInvocationList())
{
try
{
_beforeget_HasRegularVersion?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_HasRegularVersion != null)
{
foreach (Delegates.get_HasRegularVersion_AfterArgs toInvoke in _afterget_HasRegularVersion.GetInvocationList())
{
try
{
retVal = _afterget_HasRegularVersion.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookget_HasDreamVersion()
{
if (!HookedList.Contains("get_HasDreamVersion"))
{
HookedList.Add("get_HasDreamVersion");
new Hook(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_HasDreamVersion", true), get_HasDreamVersion);

}
}
internal static event Delegates.get_HasDreamVersion_BeforeArgs _beforeget_HasDreamVersion;
internal static event Delegates.get_HasDreamVersion_AfterArgs _afterget_HasDreamVersion;
private static bool get_HasDreamVersion(Func<BossStatue, bool> orig, BossStatue self)
{
Delegates.Params_get_HasDreamVersion @params = new() 
{
self = self
};
if (_beforeget_HasDreamVersion != null)
{
foreach (Delegates.get_HasDreamVersion_BeforeArgs toInvoke in _beforeget_HasDreamVersion.GetInvocationList())
{
try
{
_beforeget_HasDreamVersion?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_HasDreamVersion != null)
{
foreach (Delegates.get_HasDreamVersion_AfterArgs toInvoke in _afterget_HasDreamVersion.GetInvocationList())
{
try
{
retVal = _afterget_HasDreamVersion.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.BossStatue.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.BossStatue.orig_Awake orig,BossStatue self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.BossStatue.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.BossStatue.orig_Start orig,BossStatue self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetPlaquesVisible()
{
if (!HookedList.Contains("SetPlaquesVisible"))
{
HookedList.Add("SetPlaquesVisible");
On.BossStatue.SetPlaquesVisible += SetPlaquesVisible;

}
}
internal static event Delegates.SetPlaquesVisible_BeforeArgs _beforeSetPlaquesVisible;
internal static event Delegates.SetPlaquesVisible_AfterArgs _afterSetPlaquesVisible;
private static void SetPlaquesVisible(On.BossStatue.orig_SetPlaquesVisible orig,BossStatue self,  bool isEnabled)
{
Delegates.Params_SetPlaquesVisible @params = new() 
{
self = self
, isEnabled = isEnabled
};
if (_beforeSetPlaquesVisible != null)
{
foreach (Delegates.SetPlaquesVisible_BeforeArgs toInvoke in _beforeSetPlaquesVisible.GetInvocationList())
{
try
{
_beforeSetPlaquesVisible?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
isEnabled = @params.isEnabled;
orig(self, isEnabled);
if (_afterSetPlaquesVisible != null)
{
foreach (Delegates.SetPlaquesVisible_AfterArgs toInvoke in _afterSetPlaquesVisible.GetInvocationList())
{
try
{
_afterSetPlaquesVisible.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetPlaqueState()
{
if (!HookedList.Contains("SetPlaqueState"))
{
HookedList.Add("SetPlaqueState");
On.BossStatue.SetPlaqueState += SetPlaqueState;

}
}
internal static event Delegates.SetPlaqueState_BeforeArgs _beforeSetPlaqueState;
internal static event Delegates.SetPlaqueState_AfterArgs _afterSetPlaqueState;
private static void SetPlaqueState(On.BossStatue.orig_SetPlaqueState orig,BossStatue self,  BossStatue.Completion statueState,  BossStatueTrophyPlaque plaque,  string playerDataKey)
{
Delegates.Params_SetPlaqueState @params = new() 
{
self = self
, statueState = statueState
, plaque = plaque
, playerDataKey = playerDataKey
};
if (_beforeSetPlaqueState != null)
{
foreach (Delegates.SetPlaqueState_BeforeArgs toInvoke in _beforeSetPlaqueState.GetInvocationList())
{
try
{
_beforeSetPlaqueState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
statueState = @params.statueState;
plaque = @params.plaque;
playerDataKey = @params.playerDataKey;
orig(self, statueState, plaque, playerDataKey);
if (_afterSetPlaqueState != null)
{
foreach (Delegates.SetPlaqueState_AfterArgs toInvoke in _afterSetPlaqueState.GetInvocationList())
{
try
{
_afterSetPlaqueState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetDreamVersion()
{
if (!HookedList.Contains("SetDreamVersion"))
{
HookedList.Add("SetDreamVersion");
On.BossStatue.SetDreamVersion += SetDreamVersion;

}
}
internal static event Delegates.SetDreamVersion_BeforeArgs _beforeSetDreamVersion;
internal static event Delegates.SetDreamVersion_AfterArgs _afterSetDreamVersion;
private static void SetDreamVersion(On.BossStatue.orig_SetDreamVersion orig,BossStatue self,  bool value,  bool useAltStatue,  bool doAnim)
{
Delegates.Params_SetDreamVersion @params = new() 
{
self = self
, value = value
, useAltStatue = useAltStatue
, doAnim = doAnim
};
if (_beforeSetDreamVersion != null)
{
foreach (Delegates.SetDreamVersion_BeforeArgs toInvoke in _beforeSetDreamVersion.GetInvocationList())
{
try
{
_beforeSetDreamVersion?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
useAltStatue = @params.useAltStatue;
doAnim = @params.doAnim;
orig(self, value, useAltStatue, doAnim);
if (_afterSetDreamVersion != null)
{
foreach (Delegates.SetDreamVersion_AfterArgs toInvoke in _afterSetDreamVersion.GetInvocationList())
{
try
{
_afterSetDreamVersion.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateDetails()
{
if (!HookedList.Contains("UpdateDetails"))
{
HookedList.Add("UpdateDetails");
On.BossStatue.UpdateDetails += UpdateDetails;

}
}
internal static event Delegates.UpdateDetails_BeforeArgs _beforeUpdateDetails;
internal static event Delegates.UpdateDetails_AfterArgs _afterUpdateDetails;
private static void UpdateDetails(On.BossStatue.orig_UpdateDetails orig,BossStatue self)
{
Delegates.Params_UpdateDetails @params = new() 
{
self = self
};
if (_beforeUpdateDetails != null)
{
foreach (Delegates.UpdateDetails_BeforeArgs toInvoke in _beforeUpdateDetails.GetInvocationList())
{
try
{
_beforeUpdateDetails?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateDetails != null)
{
foreach (Delegates.UpdateDetails_AfterArgs toInvoke in _afterUpdateDetails.GetInvocationList())
{
try
{
_afterUpdateDetails.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSwapStatues()
{
if (!HookedList.Contains("SwapStatues"))
{
HookedList.Add("SwapStatues");
On.BossStatue.SwapStatues += SwapStatues;

}
}
internal static event Delegates.SwapStatues_BeforeArgs _beforeSwapStatues;
private static System.Collections.IEnumerator SwapStatues(On.BossStatue.orig_SwapStatues orig,BossStatue self,  bool doAnim)
{
Delegates.Params_SwapStatues @params = new() 
{
self = self
, doAnim = doAnim
};
if (_beforeSwapStatues != null)
{
foreach (Delegates.SwapStatues_BeforeArgs toInvoke in _beforeSwapStatues.GetInvocationList())
{
try
{
_beforeSwapStatues?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
doAnim = @params.doAnim;
return orig(self, doAnim);
}
internal static void HookJitter()
{
if (!HookedList.Contains("Jitter"))
{
HookedList.Add("Jitter");
On.BossStatue.Jitter += Jitter;

}
}
internal static event Delegates.Jitter_BeforeArgs _beforeJitter;
private static System.Collections.IEnumerator Jitter(On.BossStatue.orig_Jitter orig,BossStatue self,  float duration,  float magnitude,  UnityEngine.GameObject obj)
{
Delegates.Params_Jitter @params = new() 
{
self = self
, duration = duration
, magnitude = magnitude
, obj = obj
};
if (_beforeJitter != null)
{
foreach (Delegates.Jitter_BeforeArgs toInvoke in _beforeJitter.GetInvocationList())
{
try
{
_beforeJitter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
duration = @params.duration;
magnitude = @params.magnitude;
obj = @params.obj;
return orig(self, duration, magnitude, obj);
}
internal static void HookPlayAnimWait()
{
if (!HookedList.Contains("PlayAnimWait"))
{
HookedList.Add("PlayAnimWait");
On.BossStatue.PlayAnimWait += PlayAnimWait;

}
}
internal static event Delegates.PlayAnimWait_BeforeArgs _beforePlayAnimWait;
private static System.Collections.IEnumerator PlayAnimWait(On.BossStatue.orig_PlayAnimWait orig,BossStatue self,  UnityEngine.Animator animator,  string stateName,  float normalizedTime)
{
Delegates.Params_PlayAnimWait @params = new() 
{
self = self
, animator = animator
, stateName = stateName
, normalizedTime = normalizedTime
};
if (_beforePlayAnimWait != null)
{
foreach (Delegates.PlayAnimWait_BeforeArgs toInvoke in _beforePlayAnimWait.GetInvocationList())
{
try
{
_beforePlayAnimWait?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
animator = @params.animator;
stateName = @params.stateName;
normalizedTime = @params.normalizedTime;
return orig(self, animator, stateName, normalizedTime);
}
internal static void HookPlayParticlesDelay()
{
if (!HookedList.Contains("PlayParticlesDelay"))
{
HookedList.Add("PlayParticlesDelay");
On.BossStatue.PlayParticlesDelay += PlayParticlesDelay;

}
}
internal static event Delegates.PlayParticlesDelay_BeforeArgs _beforePlayParticlesDelay;
private static System.Collections.IEnumerator PlayParticlesDelay(On.BossStatue.orig_PlayParticlesDelay orig,BossStatue self,  UnityEngine.ParticleSystem system,  float delay)
{
Delegates.Params_PlayParticlesDelay @params = new() 
{
self = self
, system = system
, delay = delay
};
if (_beforePlayParticlesDelay != null)
{
foreach (Delegates.PlayParticlesDelay_BeforeArgs toInvoke in _beforePlayParticlesDelay.GetInvocationList())
{
try
{
_beforePlayParticlesDelay?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
system = @params.system;
delay = @params.delay;
return orig(self, system, delay);
}
internal static void HookPlayAudioEventDelayed()
{
if (!HookedList.Contains("PlayAudioEventDelayed"))
{
HookedList.Add("PlayAudioEventDelayed");
On.BossStatue.PlayAudioEventDelayed += PlayAudioEventDelayed;

}
}
internal static event Delegates.PlayAudioEventDelayed_BeforeArgs _beforePlayAudioEventDelayed;
private static System.Collections.IEnumerator PlayAudioEventDelayed(On.BossStatue.orig_PlayAudioEventDelayed orig,BossStatue self,  AudioEvent audioEvent,  float delay)
{
Delegates.Params_PlayAudioEventDelayed @params = new() 
{
self = self
, audioEvent = audioEvent
, delay = delay
};
if (_beforePlayAudioEventDelayed != null)
{
foreach (Delegates.PlayAudioEventDelayed_BeforeArgs toInvoke in _beforePlayAudioEventDelayed.GetInvocationList())
{
try
{
_beforePlayAudioEventDelayed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
audioEvent = @params.audioEvent;
delay = @params.delay;
return orig(self, audioEvent, delay);
}
internal static void HookOnDrawGizmosSelected()
{
if (!HookedList.Contains("OnDrawGizmosSelected"))
{
HookedList.Add("OnDrawGizmosSelected");
On.BossStatue.OnDrawGizmosSelected += OnDrawGizmosSelected;

}
}
internal static event Delegates.OnDrawGizmosSelected_BeforeArgs _beforeOnDrawGizmosSelected;
internal static event Delegates.OnDrawGizmosSelected_AfterArgs _afterOnDrawGizmosSelected;
private static void OnDrawGizmosSelected(On.BossStatue.orig_OnDrawGizmosSelected orig,BossStatue self)
{
Delegates.Params_OnDrawGizmosSelected @params = new() 
{
self = self
};
if (_beforeOnDrawGizmosSelected != null)
{
foreach (Delegates.OnDrawGizmosSelected_BeforeArgs toInvoke in _beforeOnDrawGizmosSelected.GetInvocationList())
{
try
{
_beforeOnDrawGizmosSelected?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDrawGizmosSelected != null)
{
foreach (Delegates.OnDrawGizmosSelected_AfterArgs toInvoke in _afterOnDrawGizmosSelected.GetInvocationList())
{
try
{
_afterOnDrawGizmosSelected.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_UsingDreamVersion
{
public BossStatue self;
}
public delegate void get_UsingDreamVersion_BeforeArgs(Params_get_UsingDreamVersion args);
public delegate bool get_UsingDreamVersion_AfterArgs(Params_get_UsingDreamVersion args, bool ret);
public delegate bool get_UsingDreamVersion_WithArgs (Func<BossStatue, bool> orig, BossStatue self);
public sealed class Params_set_UsingDreamVersion
{
public BossStatue self;
public bool value;
}
public delegate void set_UsingDreamVersion_BeforeArgs(Params_set_UsingDreamVersion args);
public delegate void set_UsingDreamVersion_AfterArgs(Params_set_UsingDreamVersion args);
public delegate void set_UsingDreamVersion_WithArgs (Action<BossStatue,  bool> orig, BossStatue self,  bool value);
public sealed class Params_set_StatueState
{
public BossStatue self;
public BossStatue.Completion value;
}
public delegate void set_StatueState_BeforeArgs(Params_set_StatueState args);
public delegate void set_StatueState_AfterArgs(Params_set_StatueState args);
public delegate void set_StatueState_WithArgs (Action<BossStatue,  BossStatue.Completion> orig, BossStatue self,  BossStatue.Completion value);
public sealed class Params_set_DreamStatueState
{
public BossStatue self;
public BossStatue.Completion value;
}
public delegate void set_DreamStatueState_BeforeArgs(Params_set_DreamStatueState args);
public delegate void set_DreamStatueState_AfterArgs(Params_set_DreamStatueState args);
public delegate void set_DreamStatueState_WithArgs (Action<BossStatue,  BossStatue.Completion> orig, BossStatue self,  BossStatue.Completion value);
public sealed class Params_get_HasRegularVersion
{
public BossStatue self;
}
public delegate void get_HasRegularVersion_BeforeArgs(Params_get_HasRegularVersion args);
public delegate bool get_HasRegularVersion_AfterArgs(Params_get_HasRegularVersion args, bool ret);
public delegate bool get_HasRegularVersion_WithArgs (Func<BossStatue, bool> orig, BossStatue self);
public sealed class Params_get_HasDreamVersion
{
public BossStatue self;
}
public delegate void get_HasDreamVersion_BeforeArgs(Params_get_HasDreamVersion args);
public delegate bool get_HasDreamVersion_AfterArgs(Params_get_HasDreamVersion args, bool ret);
public delegate bool get_HasDreamVersion_WithArgs (Func<BossStatue, bool> orig, BossStatue self);
public sealed class Params_Awake
{
public BossStatue self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<BossStatue> orig, BossStatue self);
public sealed class Params_Start
{
public BossStatue self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<BossStatue> orig, BossStatue self);
public sealed class Params_SetPlaquesVisible
{
public BossStatue self;
public bool isEnabled;
}
public delegate void SetPlaquesVisible_BeforeArgs(Params_SetPlaquesVisible args);
public delegate void SetPlaquesVisible_AfterArgs(Params_SetPlaquesVisible args);
public delegate void SetPlaquesVisible_WithArgs (Action<BossStatue,  bool> orig, BossStatue self,  bool isEnabled);
public sealed class Params_SetPlaqueState
{
public BossStatue self;
public BossStatue.Completion statueState;
public BossStatueTrophyPlaque plaque;
public string playerDataKey;
}
public delegate void SetPlaqueState_BeforeArgs(Params_SetPlaqueState args);
public delegate void SetPlaqueState_AfterArgs(Params_SetPlaqueState args);
public delegate void SetPlaqueState_WithArgs (Action<BossStatue,  BossStatue.Completion,  BossStatueTrophyPlaque,  string> orig, BossStatue self,  BossStatue.Completion statueState,  BossStatueTrophyPlaque plaque,  string playerDataKey);
public sealed class Params_SetDreamVersion
{
public BossStatue self;
public bool value;
public bool useAltStatue;
public bool doAnim;
}
public delegate void SetDreamVersion_BeforeArgs(Params_SetDreamVersion args);
public delegate void SetDreamVersion_AfterArgs(Params_SetDreamVersion args);
public delegate void SetDreamVersion_WithArgs (Action<BossStatue,  bool,  bool,  bool> orig, BossStatue self,  bool value,  bool useAltStatue,  bool doAnim);
public sealed class Params_UpdateDetails
{
public BossStatue self;
}
public delegate void UpdateDetails_BeforeArgs(Params_UpdateDetails args);
public delegate void UpdateDetails_AfterArgs(Params_UpdateDetails args);
public delegate void UpdateDetails_WithArgs (Action<BossStatue> orig, BossStatue self);
public sealed class Params_SwapStatues
{
public BossStatue self;
public bool doAnim;
}
public delegate void SwapStatues_BeforeArgs(Params_SwapStatues args);
public delegate System.Collections.IEnumerator SwapStatues_AfterArgs(Params_SwapStatues args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator SwapStatues_WithArgs (Func<BossStatue,  bool, System.Collections.IEnumerator> orig, BossStatue self,  bool doAnim);
public sealed class Params_Jitter
{
public BossStatue self;
public float duration;
public float magnitude;
public UnityEngine.GameObject obj;
}
public delegate void Jitter_BeforeArgs(Params_Jitter args);
public delegate System.Collections.IEnumerator Jitter_AfterArgs(Params_Jitter args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Jitter_WithArgs (Func<BossStatue,  float,  float,  UnityEngine.GameObject, System.Collections.IEnumerator> orig, BossStatue self,  float duration,  float magnitude,  UnityEngine.GameObject obj);
public sealed class Params_PlayAnimWait
{
public BossStatue self;
public UnityEngine.Animator animator;
public string stateName;
public float normalizedTime;
}
public delegate void PlayAnimWait_BeforeArgs(Params_PlayAnimWait args);
public delegate System.Collections.IEnumerator PlayAnimWait_AfterArgs(Params_PlayAnimWait args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator PlayAnimWait_WithArgs (Func<BossStatue,  UnityEngine.Animator,  string,  float, System.Collections.IEnumerator> orig, BossStatue self,  UnityEngine.Animator animator,  string stateName,  float normalizedTime);
public sealed class Params_PlayParticlesDelay
{
public BossStatue self;
public UnityEngine.ParticleSystem system;
public float delay;
}
public delegate void PlayParticlesDelay_BeforeArgs(Params_PlayParticlesDelay args);
public delegate System.Collections.IEnumerator PlayParticlesDelay_AfterArgs(Params_PlayParticlesDelay args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator PlayParticlesDelay_WithArgs (Func<BossStatue,  UnityEngine.ParticleSystem,  float, System.Collections.IEnumerator> orig, BossStatue self,  UnityEngine.ParticleSystem system,  float delay);
public sealed class Params_PlayAudioEventDelayed
{
public BossStatue self;
public AudioEvent audioEvent;
public float delay;
}
public delegate void PlayAudioEventDelayed_BeforeArgs(Params_PlayAudioEventDelayed args);
public delegate System.Collections.IEnumerator PlayAudioEventDelayed_AfterArgs(Params_PlayAudioEventDelayed args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator PlayAudioEventDelayed_WithArgs (Func<BossStatue,  AudioEvent,  float, System.Collections.IEnumerator> orig, BossStatue self,  AudioEvent audioEvent,  float delay);
public sealed class Params_OnDrawGizmosSelected
{
public BossStatue self;
}
public delegate void OnDrawGizmosSelected_BeforeArgs(Params_OnDrawGizmosSelected args);
public delegate void OnDrawGizmosSelected_AfterArgs(Params_OnDrawGizmosSelected args);
public delegate void OnDrawGizmosSelected_WithArgs (Action<BossStatue> orig, BossStatue self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_UsingDreamVersion_BeforeArgs get_UsingDreamVersion
{
add
{

HookHandler._beforeget_UsingDreamVersion += value;
HookHandler.Hookget_UsingDreamVersion();
}
remove => HookHandler._beforeget_UsingDreamVersion -= value;
}
public static event Delegates.set_UsingDreamVersion_BeforeArgs set_UsingDreamVersion
{
add
{

HookHandler._beforeset_UsingDreamVersion += value;
HookHandler.Hookset_UsingDreamVersion();
}
remove => HookHandler._beforeset_UsingDreamVersion -= value;
}
public static event Delegates.set_StatueState_BeforeArgs set_StatueState
{
add
{

HookHandler._beforeset_StatueState += value;
HookHandler.Hookset_StatueState();
}
remove => HookHandler._beforeset_StatueState -= value;
}
public static event Delegates.set_DreamStatueState_BeforeArgs set_DreamStatueState
{
add
{

HookHandler._beforeset_DreamStatueState += value;
HookHandler.Hookset_DreamStatueState();
}
remove => HookHandler._beforeset_DreamStatueState -= value;
}
public static event Delegates.get_HasRegularVersion_BeforeArgs get_HasRegularVersion
{
add
{

HookHandler._beforeget_HasRegularVersion += value;
HookHandler.Hookget_HasRegularVersion();
}
remove => HookHandler._beforeget_HasRegularVersion -= value;
}
public static event Delegates.get_HasDreamVersion_BeforeArgs get_HasDreamVersion
{
add
{

HookHandler._beforeget_HasDreamVersion += value;
HookHandler.Hookget_HasDreamVersion();
}
remove => HookHandler._beforeget_HasDreamVersion -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.SetPlaquesVisible_BeforeArgs SetPlaquesVisible
{
add
{

HookHandler._beforeSetPlaquesVisible += value;
HookHandler.HookSetPlaquesVisible();
}
remove => HookHandler._beforeSetPlaquesVisible -= value;
}
public static event Delegates.SetPlaqueState_BeforeArgs SetPlaqueState
{
add
{

HookHandler._beforeSetPlaqueState += value;
HookHandler.HookSetPlaqueState();
}
remove => HookHandler._beforeSetPlaqueState -= value;
}
public static event Delegates.SetDreamVersion_BeforeArgs SetDreamVersion
{
add
{

HookHandler._beforeSetDreamVersion += value;
HookHandler.HookSetDreamVersion();
}
remove => HookHandler._beforeSetDreamVersion -= value;
}
public static event Delegates.UpdateDetails_BeforeArgs UpdateDetails
{
add
{

HookHandler._beforeUpdateDetails += value;
HookHandler.HookUpdateDetails();
}
remove => HookHandler._beforeUpdateDetails -= value;
}
public static event Delegates.SwapStatues_BeforeArgs SwapStatues
{
add
{

HookHandler._beforeSwapStatues += value;
HookHandler.HookSwapStatues();
}
remove => HookHandler._beforeSwapStatues -= value;
}
public static event Delegates.Jitter_BeforeArgs Jitter
{
add
{

HookHandler._beforeJitter += value;
HookHandler.HookJitter();
}
remove => HookHandler._beforeJitter -= value;
}
public static event Delegates.PlayAnimWait_BeforeArgs PlayAnimWait
{
add
{

HookHandler._beforePlayAnimWait += value;
HookHandler.HookPlayAnimWait();
}
remove => HookHandler._beforePlayAnimWait -= value;
}
public static event Delegates.PlayParticlesDelay_BeforeArgs PlayParticlesDelay
{
add
{

HookHandler._beforePlayParticlesDelay += value;
HookHandler.HookPlayParticlesDelay();
}
remove => HookHandler._beforePlayParticlesDelay -= value;
}
public static event Delegates.PlayAudioEventDelayed_BeforeArgs PlayAudioEventDelayed
{
add
{

HookHandler._beforePlayAudioEventDelayed += value;
HookHandler.HookPlayAudioEventDelayed();
}
remove => HookHandler._beforePlayAudioEventDelayed -= value;
}
public static event Delegates.OnDrawGizmosSelected_BeforeArgs OnDrawGizmosSelected
{
add
{

HookHandler._beforeOnDrawGizmosSelected += value;
HookHandler.HookOnDrawGizmosSelected();
}
remove => HookHandler._beforeOnDrawGizmosSelected -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_UsingDreamVersion_AfterArgs get_UsingDreamVersion
{
add
{

HookHandler._afterget_UsingDreamVersion += value;
HookHandler.Hookget_UsingDreamVersion();
}
remove => HookHandler._afterget_UsingDreamVersion -= value;
}
public static event Delegates.set_UsingDreamVersion_AfterArgs set_UsingDreamVersion
{
add
{

HookHandler._afterset_UsingDreamVersion += value;
HookHandler.Hookset_UsingDreamVersion();
}
remove => HookHandler._afterset_UsingDreamVersion -= value;
}
public static event Delegates.set_StatueState_AfterArgs set_StatueState
{
add
{

HookHandler._afterset_StatueState += value;
HookHandler.Hookset_StatueState();
}
remove => HookHandler._afterset_StatueState -= value;
}
public static event Delegates.set_DreamStatueState_AfterArgs set_DreamStatueState
{
add
{

HookHandler._afterset_DreamStatueState += value;
HookHandler.Hookset_DreamStatueState();
}
remove => HookHandler._afterset_DreamStatueState -= value;
}
public static event Delegates.get_HasRegularVersion_AfterArgs get_HasRegularVersion
{
add
{

HookHandler._afterget_HasRegularVersion += value;
HookHandler.Hookget_HasRegularVersion();
}
remove => HookHandler._afterget_HasRegularVersion -= value;
}
public static event Delegates.get_HasDreamVersion_AfterArgs get_HasDreamVersion
{
add
{

HookHandler._afterget_HasDreamVersion += value;
HookHandler.Hookget_HasDreamVersion();
}
remove => HookHandler._afterget_HasDreamVersion -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.SetPlaquesVisible_AfterArgs SetPlaquesVisible
{
add
{

HookHandler._afterSetPlaquesVisible += value;
HookHandler.HookSetPlaquesVisible();
}
remove => HookHandler._afterSetPlaquesVisible -= value;
}
public static event Delegates.SetPlaqueState_AfterArgs SetPlaqueState
{
add
{

HookHandler._afterSetPlaqueState += value;
HookHandler.HookSetPlaqueState();
}
remove => HookHandler._afterSetPlaqueState -= value;
}
public static event Delegates.SetDreamVersion_AfterArgs SetDreamVersion
{
add
{

HookHandler._afterSetDreamVersion += value;
HookHandler.HookSetDreamVersion();
}
remove => HookHandler._afterSetDreamVersion -= value;
}
public static event Delegates.UpdateDetails_AfterArgs UpdateDetails
{
add
{

HookHandler._afterUpdateDetails += value;
HookHandler.HookUpdateDetails();
}
remove => HookHandler._afterUpdateDetails -= value;
}
public static event Delegates.OnDrawGizmosSelected_AfterArgs OnDrawGizmosSelected
{
add
{

HookHandler._afterOnDrawGizmosSelected += value;
HookHandler.HookOnDrawGizmosSelected();
}
remove => HookHandler._afterOnDrawGizmosSelected -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_UsingDreamVersion_WithArgs get_UsingDreamVersion
{
add => HookEndpointManager.Add<Delegates.get_UsingDreamVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_UsingDreamVersion", true), value);
remove => HookEndpointManager.Remove<Delegates.get_UsingDreamVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_UsingDreamVersion", true), value);
}
public static event Delegates.set_UsingDreamVersion_WithArgs set_UsingDreamVersion
{
add => HookEndpointManager.Add<Delegates.set_UsingDreamVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_UsingDreamVersion", true), value);
remove => HookEndpointManager.Remove<Delegates.set_UsingDreamVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_UsingDreamVersion", true), value);
}
public static event Delegates.set_StatueState_WithArgs set_StatueState
{
add => HookEndpointManager.Add<Delegates.set_StatueState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_StatueState", true), value);
remove => HookEndpointManager.Remove<Delegates.set_StatueState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_StatueState", true), value);
}
public static event Delegates.set_DreamStatueState_WithArgs set_DreamStatueState
{
add => HookEndpointManager.Add<Delegates.set_DreamStatueState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_DreamStatueState", true), value);
remove => HookEndpointManager.Remove<Delegates.set_DreamStatueState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "set_DreamStatueState", true), value);
}
public static event Delegates.get_HasRegularVersion_WithArgs get_HasRegularVersion
{
add => HookEndpointManager.Add<Delegates.get_HasRegularVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_HasRegularVersion", true), value);
remove => HookEndpointManager.Remove<Delegates.get_HasRegularVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_HasRegularVersion", true), value);
}
public static event Delegates.get_HasDreamVersion_WithArgs get_HasDreamVersion
{
add => HookEndpointManager.Add<Delegates.get_HasDreamVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_HasDreamVersion", true), value);
remove => HookEndpointManager.Remove<Delegates.get_HasDreamVersion_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(BossStatue), "get_HasDreamVersion", true), value);
}
public static event On.BossStatue.hook_Awake Awake
{
add => On.BossStatue.Awake += value;
remove => On.BossStatue.Awake -= value;
}
public static event On.BossStatue.hook_Start Start
{
add => On.BossStatue.Start += value;
remove => On.BossStatue.Start -= value;
}
public static event On.BossStatue.hook_SetPlaquesVisible SetPlaquesVisible
{
add => On.BossStatue.SetPlaquesVisible += value;
remove => On.BossStatue.SetPlaquesVisible -= value;
}
public static event On.BossStatue.hook_SetPlaqueState SetPlaqueState
{
add => On.BossStatue.SetPlaqueState += value;
remove => On.BossStatue.SetPlaqueState -= value;
}
public static event On.BossStatue.hook_SetDreamVersion SetDreamVersion
{
add => On.BossStatue.SetDreamVersion += value;
remove => On.BossStatue.SetDreamVersion -= value;
}
public static event On.BossStatue.hook_UpdateDetails UpdateDetails
{
add => On.BossStatue.UpdateDetails += value;
remove => On.BossStatue.UpdateDetails -= value;
}
public static event On.BossStatue.hook_SwapStatues SwapStatues
{
add => On.BossStatue.SwapStatues += value;
remove => On.BossStatue.SwapStatues -= value;
}
public static event On.BossStatue.hook_Jitter Jitter
{
add => On.BossStatue.Jitter += value;
remove => On.BossStatue.Jitter -= value;
}
public static event On.BossStatue.hook_PlayAnimWait PlayAnimWait
{
add => On.BossStatue.PlayAnimWait += value;
remove => On.BossStatue.PlayAnimWait -= value;
}
public static event On.BossStatue.hook_PlayParticlesDelay PlayParticlesDelay
{
add => On.BossStatue.PlayParticlesDelay += value;
remove => On.BossStatue.PlayParticlesDelay -= value;
}
public static event On.BossStatue.hook_PlayAudioEventDelayed PlayAudioEventDelayed
{
add => On.BossStatue.PlayAudioEventDelayed += value;
remove => On.BossStatue.PlayAudioEventDelayed -= value;
}
public static event On.BossStatue.hook_OnDrawGizmosSelected OnDrawGizmosSelected
{
add => On.BossStatue.OnDrawGizmosSelected += value;
remove => On.BossStatue.OnDrawGizmosSelected -= value;
}
}

}
