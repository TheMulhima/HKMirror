using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for SetVisibility class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnSetVisibility
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<SetVisibility> orig, SetVisibility self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<SetVisibility> orig, SetVisibility self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDoSetVisibility()
        {
            if (!HookedList.Contains("DoSetVisibility"))
            {
                HookedList.Add("DoSetVisibility");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "DoSetVisibility"), DoSetVisibility);
            }
        }

        internal static event Delegates.DoSetVisibility_BeforeArgs _beforeDoSetVisibility;
        internal static event Delegates.DoSetVisibility_AfterArgs _afterDoSetVisibility;

        private static void DoSetVisibility(Action<SetVisibility, GameObject> orig, SetVisibility self, GameObject go)
        {
            Delegates.Params_DoSetVisibility @params = new()
            {
                self = self, go = go
            };
            if (_beforeDoSetVisibility != null)
                foreach (Delegates.DoSetVisibility_BeforeArgs toInvoke in _beforeDoSetVisibility.GetInvocationList())
                    try
                    {
                        _beforeDoSetVisibility?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            go = @params.go;
            orig(self, go);
            if (_afterDoSetVisibility != null)
                foreach (Delegates.DoSetVisibility_AfterArgs toInvoke in _afterDoSetVisibility.GetInvocationList())
                    try
                    {
                        _afterDoSetVisibility.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnExit()
        {
            if (!HookedList.Contains("OnExit"))
            {
                HookedList.Add("OnExit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "OnExit"), OnExit);
            }
        }

        internal static event Delegates.OnExit_BeforeArgs _beforeOnExit;
        internal static event Delegates.OnExit_AfterArgs _afterOnExit;

        private static void OnExit(Action<SetVisibility> orig, SetVisibility self)
        {
            Delegates.Params_OnExit @params = new()
            {
                self = self
            };
            if (_beforeOnExit != null)
                foreach (Delegates.OnExit_BeforeArgs toInvoke in _beforeOnExit.GetInvocationList())
                    try
                    {
                        _beforeOnExit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnExit != null)
                foreach (Delegates.OnExit_AfterArgs toInvoke in _afterOnExit.GetInvocationList())
                    try
                    {
                        _afterOnExit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookResetVisibility()
        {
            if (!HookedList.Contains("ResetVisibility"))
            {
                HookedList.Add("ResetVisibility");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "ResetVisibility"), ResetVisibility);
            }
        }

        internal static event Delegates.ResetVisibility_BeforeArgs _beforeResetVisibility;
        internal static event Delegates.ResetVisibility_AfterArgs _afterResetVisibility;

        private static void ResetVisibility(Action<SetVisibility> orig, SetVisibility self)
        {
            Delegates.Params_ResetVisibility @params = new()
            {
                self = self
            };
            if (_beforeResetVisibility != null)
                foreach (Delegates.ResetVisibility_BeforeArgs toInvoke in _beforeResetVisibility.GetInvocationList())
                    try
                    {
                        _beforeResetVisibility?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterResetVisibility != null)
                foreach (Delegates.ResetVisibility_AfterArgs toInvoke in _afterResetVisibility.GetInvocationList())
                    try
                    {
                        _afterResetVisibility.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoSetVisibility_AfterArgs(Params_DoSetVisibility args);

        public delegate void DoSetVisibility_BeforeArgs(Params_DoSetVisibility args);

        public delegate void DoSetVisibility_WithArgs(Action<SetVisibility, GameObject> orig, SetVisibility self,
            GameObject go);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<SetVisibility> orig, SetVisibility self);

        public delegate void OnExit_AfterArgs(Params_OnExit args);

        public delegate void OnExit_BeforeArgs(Params_OnExit args);

        public delegate void OnExit_WithArgs(Action<SetVisibility> orig, SetVisibility self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<SetVisibility> orig, SetVisibility self);

        public delegate void ResetVisibility_AfterArgs(Params_ResetVisibility args);

        public delegate void ResetVisibility_BeforeArgs(Params_ResetVisibility args);

        public delegate void ResetVisibility_WithArgs(Action<SetVisibility> orig, SetVisibility self);

        public sealed class Params_Reset
        {
            public SetVisibility self;
        }

        public sealed class Params_OnEnter
        {
            public SetVisibility self;
        }

        public sealed class Params_DoSetVisibility
        {
            public GameObject go;
            public SetVisibility self;
        }

        public sealed class Params_OnExit
        {
            public SetVisibility self;
        }

        public sealed class Params_ResetVisibility
        {
            public SetVisibility self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.DoSetVisibility_BeforeArgs DoSetVisibility
        {
            add
            {
                HookHandler._beforeDoSetVisibility += value;
                HookHandler.HookDoSetVisibility();
            }
            remove => HookHandler._beforeDoSetVisibility -= value;
        }

        public static event Delegates.OnExit_BeforeArgs OnExit
        {
            add
            {
                HookHandler._beforeOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._beforeOnExit -= value;
        }

        public static event Delegates.ResetVisibility_BeforeArgs ResetVisibility
        {
            add
            {
                HookHandler._beforeResetVisibility += value;
                HookHandler.HookResetVisibility();
            }
            remove => HookHandler._beforeResetVisibility -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.DoSetVisibility_AfterArgs DoSetVisibility
        {
            add
            {
                HookHandler._afterDoSetVisibility += value;
                HookHandler.HookDoSetVisibility();
            }
            remove => HookHandler._afterDoSetVisibility -= value;
        }

        public static event Delegates.OnExit_AfterArgs OnExit
        {
            add
            {
                HookHandler._afterOnExit += value;
                HookHandler.HookOnExit();
            }
            remove => HookHandler._afterOnExit -= value;
        }

        public static event Delegates.ResetVisibility_AfterArgs ResetVisibility
        {
            add
            {
                HookHandler._afterResetVisibility += value;
                HookHandler.HookResetVisibility();
            }
            remove => HookHandler._afterResetVisibility -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "Reset"), value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "OnEnter"), value);
        }

        public static event Delegates.DoSetVisibility_WithArgs DoSetVisibility
        {
            add => HookEndpointManager.Add<Delegates.DoSetVisibility_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "DoSetVisibility"), value);
            remove => HookEndpointManager.Remove<Delegates.DoSetVisibility_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "DoSetVisibility"), value);
        }

        public static event Delegates.OnExit_WithArgs OnExit
        {
            add => HookEndpointManager.Add<Delegates.OnExit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "OnExit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnExit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "OnExit"), value);
        }

        public static event Delegates.ResetVisibility_WithArgs ResetVisibility
        {
            add => HookEndpointManager.Add<Delegates.ResetVisibility_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "ResetVisibility"), value);
            remove => HookEndpointManager.Remove<Delegates.ResetVisibility_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(SetVisibility), "ResetVisibility"), value);
        }
    }
}