using Microsoft.Xbox;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ErrorEventArgs class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnErrorEventArgs
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_ErrorCode()
        {
            if (!HookedList.Contains("get_ErrorCode"))
            {
                HookedList.Add("get_ErrorCode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "get_ErrorCode"), get_ErrorCode);
            }
        }

        internal static event Delegates.get_ErrorCode_BeforeArgs _beforeget_ErrorCode;
        internal static event Delegates.get_ErrorCode_NormalArgs _afterget_ErrorCode;

        private static string get_ErrorCode(Func<ErrorEventArgs, string> orig, ErrorEventArgs self)
        {
            Delegates.Params_get_ErrorCode @params = new()
            {
                self = self
            };
            _beforeget_ErrorCode?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ErrorCode != null) retVal = _afterget_ErrorCode.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ErrorCode()
        {
            if (!HookedList.Contains("set_ErrorCode"))
            {
                HookedList.Add("set_ErrorCode");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "set_ErrorCode"), set_ErrorCode);
            }
        }

        internal static event Delegates.set_ErrorCode_BeforeArgs _beforeset_ErrorCode;
        internal static event Delegates.set_ErrorCode_NormalArgs _afterset_ErrorCode;

        private static void set_ErrorCode(Action<ErrorEventArgs, string> orig, ErrorEventArgs self, string value)
        {
            Delegates.Params_set_ErrorCode @params = new()
            {
                self = self, value = value
            };
            _beforeset_ErrorCode?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ErrorCode != null) _afterset_ErrorCode.Invoke(@params);
        }

        internal static void Hookget_ErrorMessage()
        {
            if (!HookedList.Contains("get_ErrorMessage"))
            {
                HookedList.Add("get_ErrorMessage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "get_ErrorMessage"), get_ErrorMessage);
            }
        }

        internal static event Delegates.get_ErrorMessage_BeforeArgs _beforeget_ErrorMessage;
        internal static event Delegates.get_ErrorMessage_NormalArgs _afterget_ErrorMessage;

        private static string get_ErrorMessage(Func<ErrorEventArgs, string> orig, ErrorEventArgs self)
        {
            Delegates.Params_get_ErrorMessage @params = new()
            {
                self = self
            };
            _beforeget_ErrorMessage?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ErrorMessage != null) retVal = _afterget_ErrorMessage.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ErrorMessage()
        {
            if (!HookedList.Contains("set_ErrorMessage"))
            {
                HookedList.Add("set_ErrorMessage");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "set_ErrorMessage"), set_ErrorMessage);
            }
        }

        internal static event Delegates.set_ErrorMessage_BeforeArgs _beforeset_ErrorMessage;
        internal static event Delegates.set_ErrorMessage_NormalArgs _afterset_ErrorMessage;

        private static void set_ErrorMessage(Action<ErrorEventArgs, string> orig, ErrorEventArgs self, string value)
        {
            Delegates.Params_set_ErrorMessage @params = new()
            {
                self = self, value = value
            };
            _beforeset_ErrorMessage?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ErrorMessage != null) _afterset_ErrorMessage.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_ErrorCode_BeforeArgs(Params_get_ErrorCode args);

        public delegate string get_ErrorCode_NormalArgs(Params_get_ErrorCode args);

        public delegate void get_ErrorMessage_BeforeArgs(Params_get_ErrorMessage args);

        public delegate string get_ErrorMessage_NormalArgs(Params_get_ErrorMessage args);

        public delegate void set_ErrorCode_BeforeArgs(Params_set_ErrorCode args);

        public delegate void set_ErrorCode_NormalArgs(Params_set_ErrorCode args);

        public delegate void set_ErrorMessage_BeforeArgs(Params_set_ErrorMessage args);

        public delegate void set_ErrorMessage_NormalArgs(Params_set_ErrorMessage args);

        public sealed class Params_get_ErrorCode
        {
            public ErrorEventArgs self;
        }

        public sealed class Params_set_ErrorCode
        {
            public ErrorEventArgs self;
            public string value;
        }

        public sealed class Params_get_ErrorMessage
        {
            public ErrorEventArgs self;
        }

        public sealed class Params_set_ErrorMessage
        {
            public ErrorEventArgs self;
            public string value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_ErrorCode_BeforeArgs get_ErrorCode
        {
            add
            {
                HookHandler._beforeget_ErrorCode += value;
                HookHandler.Hookget_ErrorCode();
            }
            remove => HookHandler._beforeget_ErrorCode -= value;
        }

        public static event Delegates.set_ErrorCode_BeforeArgs set_ErrorCode
        {
            add
            {
                HookHandler._beforeset_ErrorCode += value;
                HookHandler.Hookset_ErrorCode();
            }
            remove => HookHandler._beforeset_ErrorCode -= value;
        }

        public static event Delegates.get_ErrorMessage_BeforeArgs get_ErrorMessage
        {
            add
            {
                HookHandler._beforeget_ErrorMessage += value;
                HookHandler.Hookget_ErrorMessage();
            }
            remove => HookHandler._beforeget_ErrorMessage -= value;
        }

        public static event Delegates.set_ErrorMessage_BeforeArgs set_ErrorMessage
        {
            add
            {
                HookHandler._beforeset_ErrorMessage += value;
                HookHandler.Hookset_ErrorMessage();
            }
            remove => HookHandler._beforeset_ErrorMessage -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_ErrorCode_NormalArgs get_ErrorCode
        {
            add
            {
                HookHandler._afterget_ErrorCode += value;
                HookHandler.Hookget_ErrorCode();
            }
            remove => HookHandler._afterget_ErrorCode -= value;
        }

        public static event Delegates.set_ErrorCode_NormalArgs set_ErrorCode
        {
            add
            {
                HookHandler._afterset_ErrorCode += value;
                HookHandler.Hookset_ErrorCode();
            }
            remove => HookHandler._afterset_ErrorCode -= value;
        }

        public static event Delegates.get_ErrorMessage_NormalArgs get_ErrorMessage
        {
            add
            {
                HookHandler._afterget_ErrorMessage += value;
                HookHandler.Hookget_ErrorMessage();
            }
            remove => HookHandler._afterget_ErrorMessage -= value;
        }

        public static event Delegates.set_ErrorMessage_NormalArgs set_ErrorMessage
        {
            add
            {
                HookHandler._afterset_ErrorMessage += value;
                HookHandler.Hookset_ErrorMessage();
            }
            remove => HookHandler._afterset_ErrorMessage -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_ErrorCode_NormalArgs get_ErrorCode
        {
            add => HookEndpointManager.Add<Delegates.get_ErrorCode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "get_ErrorCode"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ErrorCode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "get_ErrorCode"), value);
        }

        public static event Delegates.set_ErrorCode_NormalArgs set_ErrorCode
        {
            add => HookEndpointManager.Add<Delegates.set_ErrorCode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "set_ErrorCode"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ErrorCode_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "set_ErrorCode"), value);
        }

        public static event Delegates.get_ErrorMessage_NormalArgs get_ErrorMessage
        {
            add => HookEndpointManager.Add<Delegates.get_ErrorMessage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "get_ErrorMessage"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ErrorMessage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "get_ErrorMessage"), value);
        }

        public static event Delegates.set_ErrorMessage_NormalArgs set_ErrorMessage
        {
            add => HookEndpointManager.Add<Delegates.set_ErrorMessage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "set_ErrorMessage"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ErrorMessage_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ErrorEventArgs), "set_ErrorMessage"), value);
        }
    }
}