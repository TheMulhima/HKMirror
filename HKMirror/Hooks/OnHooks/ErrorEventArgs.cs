using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ErrorEventArgs class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnErrorEventArgs
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_ErrorCode()
{
if (!HookedList.Contains("get_ErrorCode"))
{
HookedList.Add("get_ErrorCode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "get_ErrorCode", true), get_ErrorCode);

}
}
internal static event Delegates.get_ErrorCode_BeforeArgs _beforeget_ErrorCode;
internal static event Delegates.get_ErrorCode_AfterArgs _afterget_ErrorCode;
private static string get_ErrorCode(Func<Microsoft.Xbox.ErrorEventArgs, string> orig, Microsoft.Xbox.ErrorEventArgs self)
{
Delegates.Params_get_ErrorCode @params = new() 
{
self = self
};
if (_beforeget_ErrorCode != null)
{
foreach (Delegates.get_ErrorCode_BeforeArgs toInvoke in _beforeget_ErrorCode.GetInvocationList())
{
try
{
_beforeget_ErrorCode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ErrorCode != null)
{
foreach (Delegates.get_ErrorCode_AfterArgs toInvoke in _afterget_ErrorCode.GetInvocationList())
{
try
{
retVal = _afterget_ErrorCode.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ErrorCode()
{
if (!HookedList.Contains("set_ErrorCode"))
{
HookedList.Add("set_ErrorCode");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "set_ErrorCode", true), set_ErrorCode);

}
}
internal static event Delegates.set_ErrorCode_BeforeArgs _beforeset_ErrorCode;
internal static event Delegates.set_ErrorCode_AfterArgs _afterset_ErrorCode;
private static void set_ErrorCode(Action<Microsoft.Xbox.ErrorEventArgs,  string> orig, Microsoft.Xbox.ErrorEventArgs self,  string value)
{
Delegates.Params_set_ErrorCode @params = new() 
{
self = self
, value = value
};
if (_beforeset_ErrorCode != null)
{
foreach (Delegates.set_ErrorCode_BeforeArgs toInvoke in _beforeset_ErrorCode.GetInvocationList())
{
try
{
_beforeset_ErrorCode?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ErrorCode != null)
{
foreach (Delegates.set_ErrorCode_AfterArgs toInvoke in _afterset_ErrorCode.GetInvocationList())
{
try
{
_afterset_ErrorCode.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_ErrorMessage()
{
if (!HookedList.Contains("get_ErrorMessage"))
{
HookedList.Add("get_ErrorMessage");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "get_ErrorMessage", true), get_ErrorMessage);

}
}
internal static event Delegates.get_ErrorMessage_BeforeArgs _beforeget_ErrorMessage;
internal static event Delegates.get_ErrorMessage_AfterArgs _afterget_ErrorMessage;
private static string get_ErrorMessage(Func<Microsoft.Xbox.ErrorEventArgs, string> orig, Microsoft.Xbox.ErrorEventArgs self)
{
Delegates.Params_get_ErrorMessage @params = new() 
{
self = self
};
if (_beforeget_ErrorMessage != null)
{
foreach (Delegates.get_ErrorMessage_BeforeArgs toInvoke in _beforeget_ErrorMessage.GetInvocationList())
{
try
{
_beforeget_ErrorMessage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_ErrorMessage != null)
{
foreach (Delegates.get_ErrorMessage_AfterArgs toInvoke in _afterget_ErrorMessage.GetInvocationList())
{
try
{
retVal = _afterget_ErrorMessage.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_ErrorMessage()
{
if (!HookedList.Contains("set_ErrorMessage"))
{
HookedList.Add("set_ErrorMessage");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "set_ErrorMessage", true), set_ErrorMessage);

}
}
internal static event Delegates.set_ErrorMessage_BeforeArgs _beforeset_ErrorMessage;
internal static event Delegates.set_ErrorMessage_AfterArgs _afterset_ErrorMessage;
private static void set_ErrorMessage(Action<Microsoft.Xbox.ErrorEventArgs,  string> orig, Microsoft.Xbox.ErrorEventArgs self,  string value)
{
Delegates.Params_set_ErrorMessage @params = new() 
{
self = self
, value = value
};
if (_beforeset_ErrorMessage != null)
{
foreach (Delegates.set_ErrorMessage_BeforeArgs toInvoke in _beforeset_ErrorMessage.GetInvocationList())
{
try
{
_beforeset_ErrorMessage?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_ErrorMessage != null)
{
foreach (Delegates.set_ErrorMessage_AfterArgs toInvoke in _afterset_ErrorMessage.GetInvocationList())
{
try
{
_afterset_ErrorMessage.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_ErrorCode
{
public Microsoft.Xbox.ErrorEventArgs self;
}
public delegate void get_ErrorCode_BeforeArgs(Params_get_ErrorCode args);
public delegate string get_ErrorCode_AfterArgs(Params_get_ErrorCode args, string ret);
public delegate string get_ErrorCode_WithArgs (Func<Microsoft.Xbox.ErrorEventArgs, string> orig, Microsoft.Xbox.ErrorEventArgs self);
public sealed class Params_set_ErrorCode
{
public Microsoft.Xbox.ErrorEventArgs self;
public string value;
}
public delegate void set_ErrorCode_BeforeArgs(Params_set_ErrorCode args);
public delegate void set_ErrorCode_AfterArgs(Params_set_ErrorCode args);
public delegate void set_ErrorCode_WithArgs (Action<Microsoft.Xbox.ErrorEventArgs,  string> orig, Microsoft.Xbox.ErrorEventArgs self,  string value);
public sealed class Params_get_ErrorMessage
{
public Microsoft.Xbox.ErrorEventArgs self;
}
public delegate void get_ErrorMessage_BeforeArgs(Params_get_ErrorMessage args);
public delegate string get_ErrorMessage_AfterArgs(Params_get_ErrorMessage args, string ret);
public delegate string get_ErrorMessage_WithArgs (Func<Microsoft.Xbox.ErrorEventArgs, string> orig, Microsoft.Xbox.ErrorEventArgs self);
public sealed class Params_set_ErrorMessage
{
public Microsoft.Xbox.ErrorEventArgs self;
public string value;
}
public delegate void set_ErrorMessage_BeforeArgs(Params_set_ErrorMessage args);
public delegate void set_ErrorMessage_AfterArgs(Params_set_ErrorMessage args);
public delegate void set_ErrorMessage_WithArgs (Action<Microsoft.Xbox.ErrorEventArgs,  string> orig, Microsoft.Xbox.ErrorEventArgs self,  string value);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_ErrorCode_BeforeArgs get_ErrorCode
{
add
{

HookHandler._beforeget_ErrorCode += value;
HookHandler.Hookget_ErrorCode();
}
remove => HookHandler._beforeget_ErrorCode -= value;
}
public static event Delegates.set_ErrorCode_BeforeArgs set_ErrorCode
{
add
{

HookHandler._beforeset_ErrorCode += value;
HookHandler.Hookset_ErrorCode();
}
remove => HookHandler._beforeset_ErrorCode -= value;
}
public static event Delegates.get_ErrorMessage_BeforeArgs get_ErrorMessage
{
add
{

HookHandler._beforeget_ErrorMessage += value;
HookHandler.Hookget_ErrorMessage();
}
remove => HookHandler._beforeget_ErrorMessage -= value;
}
public static event Delegates.set_ErrorMessage_BeforeArgs set_ErrorMessage
{
add
{

HookHandler._beforeset_ErrorMessage += value;
HookHandler.Hookset_ErrorMessage();
}
remove => HookHandler._beforeset_ErrorMessage -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_ErrorCode_AfterArgs get_ErrorCode
{
add
{

HookHandler._afterget_ErrorCode += value;
HookHandler.Hookget_ErrorCode();
}
remove => HookHandler._afterget_ErrorCode -= value;
}
public static event Delegates.set_ErrorCode_AfterArgs set_ErrorCode
{
add
{

HookHandler._afterset_ErrorCode += value;
HookHandler.Hookset_ErrorCode();
}
remove => HookHandler._afterset_ErrorCode -= value;
}
public static event Delegates.get_ErrorMessage_AfterArgs get_ErrorMessage
{
add
{

HookHandler._afterget_ErrorMessage += value;
HookHandler.Hookget_ErrorMessage();
}
remove => HookHandler._afterget_ErrorMessage -= value;
}
public static event Delegates.set_ErrorMessage_AfterArgs set_ErrorMessage
{
add
{

HookHandler._afterset_ErrorMessage += value;
HookHandler.Hookset_ErrorMessage();
}
remove => HookHandler._afterset_ErrorMessage -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_ErrorCode_WithArgs get_ErrorCode
{
add => HookEndpointManager.Add<Delegates.get_ErrorCode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "get_ErrorCode", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ErrorCode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "get_ErrorCode", true), value);
}
public static event Delegates.set_ErrorCode_WithArgs set_ErrorCode
{
add => HookEndpointManager.Add<Delegates.set_ErrorCode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "set_ErrorCode", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ErrorCode_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "set_ErrorCode", true), value);
}
public static event Delegates.get_ErrorMessage_WithArgs get_ErrorMessage
{
add => HookEndpointManager.Add<Delegates.get_ErrorMessage_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "get_ErrorMessage", true), value);
remove => HookEndpointManager.Remove<Delegates.get_ErrorMessage_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "get_ErrorMessage", true), value);
}
public static event Delegates.set_ErrorMessage_WithArgs set_ErrorMessage
{
add => HookEndpointManager.Add<Delegates.set_ErrorMessage_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "set_ErrorMessage", true), value);
remove => HookEndpointManager.Remove<Delegates.set_ErrorMessage_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Microsoft.Xbox.ErrorEventArgs), "set_ErrorMessage", true), value);
}
}

}
