using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for MainMenuOptions class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMainMenuOptions
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookConfigureNavigation()
{
if (!HookedList.Contains("ConfigureNavigation"))
{
HookedList.Add("ConfigureNavigation");
On.MainMenuOptions.ConfigureNavigation += ConfigureNavigation;

}
}
internal static event Delegates.ConfigureNavigation_BeforeArgs _beforeConfigureNavigation;
internal static event Delegates.ConfigureNavigation_AfterArgs _afterConfigureNavigation;
private static void ConfigureNavigation(On.MainMenuOptions.orig_ConfigureNavigation orig,MainMenuOptions self)
{
Delegates.Params_ConfigureNavigation @params = new() 
{
self = self
};
if (_beforeConfigureNavigation != null)
{
foreach (Delegates.ConfigureNavigation_BeforeArgs toInvoke in _beforeConfigureNavigation.GetInvocationList())
{
try
{
_beforeConfigureNavigation?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterConfigureNavigation != null)
{
foreach (Delegates.ConfigureNavigation_AfterArgs toInvoke in _afterConfigureNavigation.GetInvocationList())
{
try
{
_afterConfigureNavigation.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_ConfigureNavigation
{
public MainMenuOptions self;
}
public delegate void ConfigureNavigation_BeforeArgs(Params_ConfigureNavigation args);
public delegate void ConfigureNavigation_AfterArgs(Params_ConfigureNavigation args);
public delegate void ConfigureNavigation_WithArgs (Action<MainMenuOptions> orig, MainMenuOptions self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.ConfigureNavigation_BeforeArgs ConfigureNavigation
{
add
{

HookHandler._beforeConfigureNavigation += value;
HookHandler.HookConfigureNavigation();
}
remove => HookHandler._beforeConfigureNavigation -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.ConfigureNavigation_AfterArgs ConfigureNavigation
{
add
{

HookHandler._afterConfigureNavigation += value;
HookHandler.HookConfigureNavigation();
}
remove => HookHandler._afterConfigureNavigation -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.MainMenuOptions.hook_ConfigureNavigation ConfigureNavigation
{
add => On.MainMenuOptions.ConfigureNavigation += value;
remove => On.MainMenuOptions.ConfigureNavigation -= value;
}
}

}
