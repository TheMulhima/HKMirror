using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for UnityMouseProvider class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnityMouseProvider
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookSetup()
{
if (!HookedList.Contains("Setup"))
{
HookedList.Add("Setup");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Setup", true), Setup);

}
}
internal static event Delegates.Setup_BeforeArgs _beforeSetup;
internal static event Delegates.Setup_AfterArgs _afterSetup;
private static void Setup(Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_Setup @params = new() 
{
self = self
};
if (_beforeSetup != null)
{
foreach (Delegates.Setup_BeforeArgs toInvoke in _beforeSetup.GetInvocationList())
{
try
{
_beforeSetup?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSetup != null)
{
foreach (Delegates.Setup_AfterArgs toInvoke in _afterSetup.GetInvocationList())
{
try
{
_afterSetup.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Reset", true), Reset);

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Update", true), Update);

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSafeGetMouseButton()
{
if (!HookedList.Contains("SafeGetMouseButton"))
{
HookedList.Add("SafeGetMouseButton");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "SafeGetMouseButton", false), SafeGetMouseButton);

}
}
internal static event Delegates.SafeGetMouseButton_BeforeArgs _beforeSafeGetMouseButton;
internal static event Delegates.SafeGetMouseButton_AfterArgs _afterSafeGetMouseButton;
private static bool SafeGetMouseButton(Func< int, bool> orig,  int button)
{
Delegates.Params_SafeGetMouseButton @params = new() 
{
button = button
};
if (_beforeSafeGetMouseButton != null)
{
foreach (Delegates.SafeGetMouseButton_BeforeArgs toInvoke in _beforeSafeGetMouseButton.GetInvocationList())
{
try
{
_beforeSafeGetMouseButton?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
button = @params.button;
var retVal = orig(button);
if (_afterSafeGetMouseButton != null)
{
foreach (Delegates.SafeGetMouseButton_AfterArgs toInvoke in _afterSafeGetMouseButton.GetInvocationList())
{
try
{
retVal = _afterSafeGetMouseButton.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookClearState()
{
if (!HookedList.Contains("ClearState"))
{
HookedList.Add("ClearState");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "ClearState", true), ClearState);

}
}
internal static event Delegates.ClearState_BeforeArgs _beforeClearState;
internal static event Delegates.ClearState_AfterArgs _afterClearState;
private static void ClearState(Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_ClearState @params = new() 
{
self = self
};
if (_beforeClearState != null)
{
foreach (Delegates.ClearState_BeforeArgs toInvoke in _beforeClearState.GetInvocationList())
{
try
{
_beforeClearState?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterClearState != null)
{
foreach (Delegates.ClearState_AfterArgs toInvoke in _afterClearState.GetInvocationList())
{
try
{
_afterClearState.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetPosition()
{
if (!HookedList.Contains("GetPosition"))
{
HookedList.Add("GetPosition");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetPosition", true), GetPosition);

}
}
internal static event Delegates.GetPosition_BeforeArgs _beforeGetPosition;
internal static event Delegates.GetPosition_AfterArgs _afterGetPosition;
private static UnityEngine.Vector2 GetPosition(Func<InControl.UnityMouseProvider, UnityEngine.Vector2> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_GetPosition @params = new() 
{
self = self
};
if (_beforeGetPosition != null)
{
foreach (Delegates.GetPosition_BeforeArgs toInvoke in _beforeGetPosition.GetInvocationList())
{
try
{
_beforeGetPosition?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetPosition != null)
{
foreach (Delegates.GetPosition_AfterArgs toInvoke in _afterGetPosition.GetInvocationList())
{
try
{
retVal = _afterGetPosition.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetDeltaX()
{
if (!HookedList.Contains("GetDeltaX"))
{
HookedList.Add("GetDeltaX");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaX", true), GetDeltaX);

}
}
internal static event Delegates.GetDeltaX_BeforeArgs _beforeGetDeltaX;
internal static event Delegates.GetDeltaX_AfterArgs _afterGetDeltaX;
private static float GetDeltaX(Func<InControl.UnityMouseProvider, float> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_GetDeltaX @params = new() 
{
self = self
};
if (_beforeGetDeltaX != null)
{
foreach (Delegates.GetDeltaX_BeforeArgs toInvoke in _beforeGetDeltaX.GetInvocationList())
{
try
{
_beforeGetDeltaX?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetDeltaX != null)
{
foreach (Delegates.GetDeltaX_AfterArgs toInvoke in _afterGetDeltaX.GetInvocationList())
{
try
{
retVal = _afterGetDeltaX.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetDeltaY()
{
if (!HookedList.Contains("GetDeltaY"))
{
HookedList.Add("GetDeltaY");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaY", true), GetDeltaY);

}
}
internal static event Delegates.GetDeltaY_BeforeArgs _beforeGetDeltaY;
internal static event Delegates.GetDeltaY_AfterArgs _afterGetDeltaY;
private static float GetDeltaY(Func<InControl.UnityMouseProvider, float> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_GetDeltaY @params = new() 
{
self = self
};
if (_beforeGetDeltaY != null)
{
foreach (Delegates.GetDeltaY_BeforeArgs toInvoke in _beforeGetDeltaY.GetInvocationList())
{
try
{
_beforeGetDeltaY?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetDeltaY != null)
{
foreach (Delegates.GetDeltaY_AfterArgs toInvoke in _afterGetDeltaY.GetInvocationList())
{
try
{
retVal = _afterGetDeltaY.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetDeltaScroll()
{
if (!HookedList.Contains("GetDeltaScroll"))
{
HookedList.Add("GetDeltaScroll");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaScroll", true), GetDeltaScroll);

}
}
internal static event Delegates.GetDeltaScroll_BeforeArgs _beforeGetDeltaScroll;
internal static event Delegates.GetDeltaScroll_AfterArgs _afterGetDeltaScroll;
private static float GetDeltaScroll(Func<InControl.UnityMouseProvider, float> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_GetDeltaScroll @params = new() 
{
self = self
};
if (_beforeGetDeltaScroll != null)
{
foreach (Delegates.GetDeltaScroll_BeforeArgs toInvoke in _beforeGetDeltaScroll.GetInvocationList())
{
try
{
_beforeGetDeltaScroll?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterGetDeltaScroll != null)
{
foreach (Delegates.GetDeltaScroll_AfterArgs toInvoke in _afterGetDeltaScroll.GetInvocationList())
{
try
{
retVal = _afterGetDeltaScroll.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetButtonIsPressed()
{
if (!HookedList.Contains("GetButtonIsPressed"))
{
HookedList.Add("GetButtonIsPressed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonIsPressed", true), GetButtonIsPressed);

}
}
internal static event Delegates.GetButtonIsPressed_BeforeArgs _beforeGetButtonIsPressed;
internal static event Delegates.GetButtonIsPressed_AfterArgs _afterGetButtonIsPressed;
private static bool GetButtonIsPressed(Func<InControl.UnityMouseProvider,  InControl.Mouse, bool> orig, InControl.UnityMouseProvider self,  InControl.Mouse control)
{
Delegates.Params_GetButtonIsPressed @params = new() 
{
self = self
, control = control
};
if (_beforeGetButtonIsPressed != null)
{
foreach (Delegates.GetButtonIsPressed_BeforeArgs toInvoke in _beforeGetButtonIsPressed.GetInvocationList())
{
try
{
_beforeGetButtonIsPressed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
var retVal = orig(self, control);
if (_afterGetButtonIsPressed != null)
{
foreach (Delegates.GetButtonIsPressed_AfterArgs toInvoke in _afterGetButtonIsPressed.GetInvocationList())
{
try
{
retVal = _afterGetButtonIsPressed.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetButtonWasPressed()
{
if (!HookedList.Contains("GetButtonWasPressed"))
{
HookedList.Add("GetButtonWasPressed");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonWasPressed", true), GetButtonWasPressed);

}
}
internal static event Delegates.GetButtonWasPressed_BeforeArgs _beforeGetButtonWasPressed;
internal static event Delegates.GetButtonWasPressed_AfterArgs _afterGetButtonWasPressed;
private static bool GetButtonWasPressed(Func<InControl.UnityMouseProvider,  InControl.Mouse, bool> orig, InControl.UnityMouseProvider self,  InControl.Mouse control)
{
Delegates.Params_GetButtonWasPressed @params = new() 
{
self = self
, control = control
};
if (_beforeGetButtonWasPressed != null)
{
foreach (Delegates.GetButtonWasPressed_BeforeArgs toInvoke in _beforeGetButtonWasPressed.GetInvocationList())
{
try
{
_beforeGetButtonWasPressed?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
var retVal = orig(self, control);
if (_afterGetButtonWasPressed != null)
{
foreach (Delegates.GetButtonWasPressed_AfterArgs toInvoke in _afterGetButtonWasPressed.GetInvocationList())
{
try
{
retVal = _afterGetButtonWasPressed.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetButtonWasReleased()
{
if (!HookedList.Contains("GetButtonWasReleased"))
{
HookedList.Add("GetButtonWasReleased");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonWasReleased", true), GetButtonWasReleased);

}
}
internal static event Delegates.GetButtonWasReleased_BeforeArgs _beforeGetButtonWasReleased;
internal static event Delegates.GetButtonWasReleased_AfterArgs _afterGetButtonWasReleased;
private static bool GetButtonWasReleased(Func<InControl.UnityMouseProvider,  InControl.Mouse, bool> orig, InControl.UnityMouseProvider self,  InControl.Mouse control)
{
Delegates.Params_GetButtonWasReleased @params = new() 
{
self = self
, control = control
};
if (_beforeGetButtonWasReleased != null)
{
foreach (Delegates.GetButtonWasReleased_BeforeArgs toInvoke in _beforeGetButtonWasReleased.GetInvocationList())
{
try
{
_beforeGetButtonWasReleased?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
control = @params.control;
var retVal = orig(self, control);
if (_afterGetButtonWasReleased != null)
{
foreach (Delegates.GetButtonWasReleased_AfterArgs toInvoke in _afterGetButtonWasReleased.GetInvocationList())
{
try
{
retVal = _afterGetButtonWasReleased.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookHasMousePresent()
{
if (!HookedList.Contains("HasMousePresent"))
{
HookedList.Add("HasMousePresent");
new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "HasMousePresent", true), HasMousePresent);

}
}
internal static event Delegates.HasMousePresent_BeforeArgs _beforeHasMousePresent;
internal static event Delegates.HasMousePresent_AfterArgs _afterHasMousePresent;
private static bool HasMousePresent(Func<InControl.UnityMouseProvider, bool> orig, InControl.UnityMouseProvider self)
{
Delegates.Params_HasMousePresent @params = new() 
{
self = self
};
if (_beforeHasMousePresent != null)
{
foreach (Delegates.HasMousePresent_BeforeArgs toInvoke in _beforeHasMousePresent.GetInvocationList())
{
try
{
_beforeHasMousePresent?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterHasMousePresent != null)
{
foreach (Delegates.HasMousePresent_AfterArgs toInvoke in _afterHasMousePresent.GetInvocationList())
{
try
{
retVal = _afterHasMousePresent.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Setup
{
public InControl.UnityMouseProvider self;
}
public delegate void Setup_BeforeArgs(Params_Setup args);
public delegate void Setup_AfterArgs(Params_Setup args);
public delegate void Setup_WithArgs (Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self);
public sealed class Params_Reset
{
public InControl.UnityMouseProvider self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self);
public sealed class Params_Update
{
public InControl.UnityMouseProvider self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self);
public sealed class Params_SafeGetMouseButton
{
public int button;
}
public delegate void SafeGetMouseButton_BeforeArgs(Params_SafeGetMouseButton args);
public delegate bool SafeGetMouseButton_AfterArgs(Params_SafeGetMouseButton args, bool ret);
public delegate bool SafeGetMouseButton_WithArgs (Func< int, bool> orig,  int button);
public sealed class Params_ClearState
{
public InControl.UnityMouseProvider self;
}
public delegate void ClearState_BeforeArgs(Params_ClearState args);
public delegate void ClearState_AfterArgs(Params_ClearState args);
public delegate void ClearState_WithArgs (Action<InControl.UnityMouseProvider> orig, InControl.UnityMouseProvider self);
public sealed class Params_GetPosition
{
public InControl.UnityMouseProvider self;
}
public delegate void GetPosition_BeforeArgs(Params_GetPosition args);
public delegate UnityEngine.Vector2 GetPosition_AfterArgs(Params_GetPosition args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPosition_WithArgs (Func<InControl.UnityMouseProvider, UnityEngine.Vector2> orig, InControl.UnityMouseProvider self);
public sealed class Params_GetDeltaX
{
public InControl.UnityMouseProvider self;
}
public delegate void GetDeltaX_BeforeArgs(Params_GetDeltaX args);
public delegate float GetDeltaX_AfterArgs(Params_GetDeltaX args, float ret);
public delegate float GetDeltaX_WithArgs (Func<InControl.UnityMouseProvider, float> orig, InControl.UnityMouseProvider self);
public sealed class Params_GetDeltaY
{
public InControl.UnityMouseProvider self;
}
public delegate void GetDeltaY_BeforeArgs(Params_GetDeltaY args);
public delegate float GetDeltaY_AfterArgs(Params_GetDeltaY args, float ret);
public delegate float GetDeltaY_WithArgs (Func<InControl.UnityMouseProvider, float> orig, InControl.UnityMouseProvider self);
public sealed class Params_GetDeltaScroll
{
public InControl.UnityMouseProvider self;
}
public delegate void GetDeltaScroll_BeforeArgs(Params_GetDeltaScroll args);
public delegate float GetDeltaScroll_AfterArgs(Params_GetDeltaScroll args, float ret);
public delegate float GetDeltaScroll_WithArgs (Func<InControl.UnityMouseProvider, float> orig, InControl.UnityMouseProvider self);
public sealed class Params_GetButtonIsPressed
{
public InControl.UnityMouseProvider self;
public InControl.Mouse control;
}
public delegate void GetButtonIsPressed_BeforeArgs(Params_GetButtonIsPressed args);
public delegate bool GetButtonIsPressed_AfterArgs(Params_GetButtonIsPressed args, bool ret);
public delegate bool GetButtonIsPressed_WithArgs (Func<InControl.UnityMouseProvider,  InControl.Mouse, bool> orig, InControl.UnityMouseProvider self,  InControl.Mouse control);
public sealed class Params_GetButtonWasPressed
{
public InControl.UnityMouseProvider self;
public InControl.Mouse control;
}
public delegate void GetButtonWasPressed_BeforeArgs(Params_GetButtonWasPressed args);
public delegate bool GetButtonWasPressed_AfterArgs(Params_GetButtonWasPressed args, bool ret);
public delegate bool GetButtonWasPressed_WithArgs (Func<InControl.UnityMouseProvider,  InControl.Mouse, bool> orig, InControl.UnityMouseProvider self,  InControl.Mouse control);
public sealed class Params_GetButtonWasReleased
{
public InControl.UnityMouseProvider self;
public InControl.Mouse control;
}
public delegate void GetButtonWasReleased_BeforeArgs(Params_GetButtonWasReleased args);
public delegate bool GetButtonWasReleased_AfterArgs(Params_GetButtonWasReleased args, bool ret);
public delegate bool GetButtonWasReleased_WithArgs (Func<InControl.UnityMouseProvider,  InControl.Mouse, bool> orig, InControl.UnityMouseProvider self,  InControl.Mouse control);
public sealed class Params_HasMousePresent
{
public InControl.UnityMouseProvider self;
}
public delegate void HasMousePresent_BeforeArgs(Params_HasMousePresent args);
public delegate bool HasMousePresent_AfterArgs(Params_HasMousePresent args, bool ret);
public delegate bool HasMousePresent_WithArgs (Func<InControl.UnityMouseProvider, bool> orig, InControl.UnityMouseProvider self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Setup_BeforeArgs Setup
{
add
{

HookHandler._beforeSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._beforeSetup -= value;
}
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.SafeGetMouseButton_BeforeArgs SafeGetMouseButton
{
add
{

HookHandler._beforeSafeGetMouseButton += value;
HookHandler.HookSafeGetMouseButton();
}
remove => HookHandler._beforeSafeGetMouseButton -= value;
}
public static event Delegates.ClearState_BeforeArgs ClearState
{
add
{

HookHandler._beforeClearState += value;
HookHandler.HookClearState();
}
remove => HookHandler._beforeClearState -= value;
}
public static event Delegates.GetPosition_BeforeArgs GetPosition
{
add
{

HookHandler._beforeGetPosition += value;
HookHandler.HookGetPosition();
}
remove => HookHandler._beforeGetPosition -= value;
}
public static event Delegates.GetDeltaX_BeforeArgs GetDeltaX
{
add
{

HookHandler._beforeGetDeltaX += value;
HookHandler.HookGetDeltaX();
}
remove => HookHandler._beforeGetDeltaX -= value;
}
public static event Delegates.GetDeltaY_BeforeArgs GetDeltaY
{
add
{

HookHandler._beforeGetDeltaY += value;
HookHandler.HookGetDeltaY();
}
remove => HookHandler._beforeGetDeltaY -= value;
}
public static event Delegates.GetDeltaScroll_BeforeArgs GetDeltaScroll
{
add
{

HookHandler._beforeGetDeltaScroll += value;
HookHandler.HookGetDeltaScroll();
}
remove => HookHandler._beforeGetDeltaScroll -= value;
}
public static event Delegates.GetButtonIsPressed_BeforeArgs GetButtonIsPressed
{
add
{

HookHandler._beforeGetButtonIsPressed += value;
HookHandler.HookGetButtonIsPressed();
}
remove => HookHandler._beforeGetButtonIsPressed -= value;
}
public static event Delegates.GetButtonWasPressed_BeforeArgs GetButtonWasPressed
{
add
{

HookHandler._beforeGetButtonWasPressed += value;
HookHandler.HookGetButtonWasPressed();
}
remove => HookHandler._beforeGetButtonWasPressed -= value;
}
public static event Delegates.GetButtonWasReleased_BeforeArgs GetButtonWasReleased
{
add
{

HookHandler._beforeGetButtonWasReleased += value;
HookHandler.HookGetButtonWasReleased();
}
remove => HookHandler._beforeGetButtonWasReleased -= value;
}
public static event Delegates.HasMousePresent_BeforeArgs HasMousePresent
{
add
{

HookHandler._beforeHasMousePresent += value;
HookHandler.HookHasMousePresent();
}
remove => HookHandler._beforeHasMousePresent -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Setup_AfterArgs Setup
{
add
{

HookHandler._afterSetup += value;
HookHandler.HookSetup();
}
remove => HookHandler._afterSetup -= value;
}
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.SafeGetMouseButton_AfterArgs SafeGetMouseButton
{
add
{

HookHandler._afterSafeGetMouseButton += value;
HookHandler.HookSafeGetMouseButton();
}
remove => HookHandler._afterSafeGetMouseButton -= value;
}
public static event Delegates.ClearState_AfterArgs ClearState
{
add
{

HookHandler._afterClearState += value;
HookHandler.HookClearState();
}
remove => HookHandler._afterClearState -= value;
}
public static event Delegates.GetPosition_AfterArgs GetPosition
{
add
{

HookHandler._afterGetPosition += value;
HookHandler.HookGetPosition();
}
remove => HookHandler._afterGetPosition -= value;
}
public static event Delegates.GetDeltaX_AfterArgs GetDeltaX
{
add
{

HookHandler._afterGetDeltaX += value;
HookHandler.HookGetDeltaX();
}
remove => HookHandler._afterGetDeltaX -= value;
}
public static event Delegates.GetDeltaY_AfterArgs GetDeltaY
{
add
{

HookHandler._afterGetDeltaY += value;
HookHandler.HookGetDeltaY();
}
remove => HookHandler._afterGetDeltaY -= value;
}
public static event Delegates.GetDeltaScroll_AfterArgs GetDeltaScroll
{
add
{

HookHandler._afterGetDeltaScroll += value;
HookHandler.HookGetDeltaScroll();
}
remove => HookHandler._afterGetDeltaScroll -= value;
}
public static event Delegates.GetButtonIsPressed_AfterArgs GetButtonIsPressed
{
add
{

HookHandler._afterGetButtonIsPressed += value;
HookHandler.HookGetButtonIsPressed();
}
remove => HookHandler._afterGetButtonIsPressed -= value;
}
public static event Delegates.GetButtonWasPressed_AfterArgs GetButtonWasPressed
{
add
{

HookHandler._afterGetButtonWasPressed += value;
HookHandler.HookGetButtonWasPressed();
}
remove => HookHandler._afterGetButtonWasPressed -= value;
}
public static event Delegates.GetButtonWasReleased_AfterArgs GetButtonWasReleased
{
add
{

HookHandler._afterGetButtonWasReleased += value;
HookHandler.HookGetButtonWasReleased();
}
remove => HookHandler._afterGetButtonWasReleased -= value;
}
public static event Delegates.HasMousePresent_AfterArgs HasMousePresent
{
add
{

HookHandler._afterHasMousePresent += value;
HookHandler.HookHasMousePresent();
}
remove => HookHandler._afterHasMousePresent -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.Setup_WithArgs Setup
{
add => HookEndpointManager.Add<Delegates.Setup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Setup", true), value);
remove => HookEndpointManager.Remove<Delegates.Setup_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Setup", true), value);
}
public static event Delegates.Reset_WithArgs Reset
{
add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Reset", true), value);
remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Reset", true), value);
}
public static event Delegates.Update_WithArgs Update
{
add => HookEndpointManager.Add<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Update", true), value);
remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "Update", true), value);
}
public static event Delegates.SafeGetMouseButton_WithArgs SafeGetMouseButton
{
add => HookEndpointManager.Add<Delegates.SafeGetMouseButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "SafeGetMouseButton", false), value);
remove => HookEndpointManager.Remove<Delegates.SafeGetMouseButton_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "SafeGetMouseButton", false), value);
}
public static event Delegates.ClearState_WithArgs ClearState
{
add => HookEndpointManager.Add<Delegates.ClearState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "ClearState", true), value);
remove => HookEndpointManager.Remove<Delegates.ClearState_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "ClearState", true), value);
}
public static event Delegates.GetPosition_WithArgs GetPosition
{
add => HookEndpointManager.Add<Delegates.GetPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetPosition", true), value);
remove => HookEndpointManager.Remove<Delegates.GetPosition_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetPosition", true), value);
}
public static event Delegates.GetDeltaX_WithArgs GetDeltaX
{
add => HookEndpointManager.Add<Delegates.GetDeltaX_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaX", true), value);
remove => HookEndpointManager.Remove<Delegates.GetDeltaX_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaX", true), value);
}
public static event Delegates.GetDeltaY_WithArgs GetDeltaY
{
add => HookEndpointManager.Add<Delegates.GetDeltaY_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaY", true), value);
remove => HookEndpointManager.Remove<Delegates.GetDeltaY_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaY", true), value);
}
public static event Delegates.GetDeltaScroll_WithArgs GetDeltaScroll
{
add => HookEndpointManager.Add<Delegates.GetDeltaScroll_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaScroll", true), value);
remove => HookEndpointManager.Remove<Delegates.GetDeltaScroll_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetDeltaScroll", true), value);
}
public static event Delegates.GetButtonIsPressed_WithArgs GetButtonIsPressed
{
add => HookEndpointManager.Add<Delegates.GetButtonIsPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonIsPressed", true), value);
remove => HookEndpointManager.Remove<Delegates.GetButtonIsPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonIsPressed", true), value);
}
public static event Delegates.GetButtonWasPressed_WithArgs GetButtonWasPressed
{
add => HookEndpointManager.Add<Delegates.GetButtonWasPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonWasPressed", true), value);
remove => HookEndpointManager.Remove<Delegates.GetButtonWasPressed_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonWasPressed", true), value);
}
public static event Delegates.GetButtonWasReleased_WithArgs GetButtonWasReleased
{
add => HookEndpointManager.Add<Delegates.GetButtonWasReleased_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonWasReleased", true), value);
remove => HookEndpointManager.Remove<Delegates.GetButtonWasReleased_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "GetButtonWasReleased", true), value);
}
public static event Delegates.HasMousePresent_WithArgs HasMousePresent
{
add => HookEndpointManager.Add<Delegates.HasMousePresent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "HasMousePresent", true), value);
remove => HookEndpointManager.Remove<Delegates.HasMousePresent_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(InControl.UnityMouseProvider), "HasMousePresent", true), value);
}
}

}
