using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for UnityMouseProvider class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnUnityMouseProvider
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Setup"), Setup);
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(Action<UnityMouseProvider> orig, UnityMouseProvider self)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<UnityMouseProvider> orig, UnityMouseProvider self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<UnityMouseProvider> orig, UnityMouseProvider self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookSafeGetMouseButton()
        {
            if (!HookedList.Contains("SafeGetMouseButton"))
            {
                HookedList.Add("SafeGetMouseButton");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "SafeGetMouseButton", false),
                    SafeGetMouseButton);
            }
        }

        internal static event Delegates.SafeGetMouseButton_BeforeArgs _beforeSafeGetMouseButton;
        internal static event Delegates.SafeGetMouseButton_NormalArgs _afterSafeGetMouseButton;

        private static bool SafeGetMouseButton(Func<int, bool> orig, int button)
        {
            Delegates.Params_SafeGetMouseButton @params = new()
            {
                button = button
            };
            _beforeSafeGetMouseButton?.Invoke(@params);
            button = @params.button;
            var retVal = orig(button);
            if (_afterSafeGetMouseButton != null) retVal = _afterSafeGetMouseButton.Invoke(@params);
            return retVal;
        }

        internal static void HookClearState()
        {
            if (!HookedList.Contains("ClearState"))
            {
                HookedList.Add("ClearState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "ClearState"), ClearState);
            }
        }

        internal static event Delegates.ClearState_BeforeArgs _beforeClearState;
        internal static event Delegates.ClearState_NormalArgs _afterClearState;

        private static void ClearState(Action<UnityMouseProvider> orig, UnityMouseProvider self)
        {
            Delegates.Params_ClearState @params = new()
            {
                self = self
            };
            _beforeClearState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterClearState != null) _afterClearState.Invoke(@params);
        }

        internal static void HookGetPosition()
        {
            if (!HookedList.Contains("GetPosition"))
            {
                HookedList.Add("GetPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetPosition"), GetPosition);
            }
        }

        internal static event Delegates.GetPosition_BeforeArgs _beforeGetPosition;
        internal static event Delegates.GetPosition_NormalArgs _afterGetPosition;

        private static Vector2 GetPosition(Func<UnityMouseProvider, Vector2> orig, UnityMouseProvider self)
        {
            Delegates.Params_GetPosition @params = new()
            {
                self = self
            };
            _beforeGetPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPosition != null) retVal = _afterGetPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetDeltaX()
        {
            if (!HookedList.Contains("GetDeltaX"))
            {
                HookedList.Add("GetDeltaX");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaX"), GetDeltaX);
            }
        }

        internal static event Delegates.GetDeltaX_BeforeArgs _beforeGetDeltaX;
        internal static event Delegates.GetDeltaX_NormalArgs _afterGetDeltaX;

        private static float GetDeltaX(Func<UnityMouseProvider, float> orig, UnityMouseProvider self)
        {
            Delegates.Params_GetDeltaX @params = new()
            {
                self = self
            };
            _beforeGetDeltaX?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDeltaX != null) retVal = _afterGetDeltaX.Invoke(@params);
            return retVal;
        }

        internal static void HookGetDeltaY()
        {
            if (!HookedList.Contains("GetDeltaY"))
            {
                HookedList.Add("GetDeltaY");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaY"), GetDeltaY);
            }
        }

        internal static event Delegates.GetDeltaY_BeforeArgs _beforeGetDeltaY;
        internal static event Delegates.GetDeltaY_NormalArgs _afterGetDeltaY;

        private static float GetDeltaY(Func<UnityMouseProvider, float> orig, UnityMouseProvider self)
        {
            Delegates.Params_GetDeltaY @params = new()
            {
                self = self
            };
            _beforeGetDeltaY?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDeltaY != null) retVal = _afterGetDeltaY.Invoke(@params);
            return retVal;
        }

        internal static void HookGetDeltaScroll()
        {
            if (!HookedList.Contains("GetDeltaScroll"))
            {
                HookedList.Add("GetDeltaScroll");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaScroll"), GetDeltaScroll);
            }
        }

        internal static event Delegates.GetDeltaScroll_BeforeArgs _beforeGetDeltaScroll;
        internal static event Delegates.GetDeltaScroll_NormalArgs _afterGetDeltaScroll;

        private static float GetDeltaScroll(Func<UnityMouseProvider, float> orig, UnityMouseProvider self)
        {
            Delegates.Params_GetDeltaScroll @params = new()
            {
                self = self
            };
            _beforeGetDeltaScroll?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetDeltaScroll != null) retVal = _afterGetDeltaScroll.Invoke(@params);
            return retVal;
        }

        internal static void HookGetButtonIsPressed()
        {
            if (!HookedList.Contains("GetButtonIsPressed"))
            {
                HookedList.Add("GetButtonIsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonIsPressed"),
                    GetButtonIsPressed);
            }
        }

        internal static event Delegates.GetButtonIsPressed_BeforeArgs _beforeGetButtonIsPressed;
        internal static event Delegates.GetButtonIsPressed_NormalArgs _afterGetButtonIsPressed;

        private static bool GetButtonIsPressed(Func<UnityMouseProvider, Mouse, bool> orig, UnityMouseProvider self,
            Mouse control)
        {
            Delegates.Params_GetButtonIsPressed @params = new()
            {
                self = self, control = control
            };
            _beforeGetButtonIsPressed?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterGetButtonIsPressed != null) retVal = _afterGetButtonIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void HookGetButtonWasPressed()
        {
            if (!HookedList.Contains("GetButtonWasPressed"))
            {
                HookedList.Add("GetButtonWasPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonWasPressed"),
                    GetButtonWasPressed);
            }
        }

        internal static event Delegates.GetButtonWasPressed_BeforeArgs _beforeGetButtonWasPressed;
        internal static event Delegates.GetButtonWasPressed_NormalArgs _afterGetButtonWasPressed;

        private static bool GetButtonWasPressed(Func<UnityMouseProvider, Mouse, bool> orig, UnityMouseProvider self,
            Mouse control)
        {
            Delegates.Params_GetButtonWasPressed @params = new()
            {
                self = self, control = control
            };
            _beforeGetButtonWasPressed?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterGetButtonWasPressed != null) retVal = _afterGetButtonWasPressed.Invoke(@params);
            return retVal;
        }

        internal static void HookGetButtonWasReleased()
        {
            if (!HookedList.Contains("GetButtonWasReleased"))
            {
                HookedList.Add("GetButtonWasReleased");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonWasReleased"),
                    GetButtonWasReleased);
            }
        }

        internal static event Delegates.GetButtonWasReleased_BeforeArgs _beforeGetButtonWasReleased;
        internal static event Delegates.GetButtonWasReleased_NormalArgs _afterGetButtonWasReleased;

        private static bool GetButtonWasReleased(Func<UnityMouseProvider, Mouse, bool> orig, UnityMouseProvider self,
            Mouse control)
        {
            Delegates.Params_GetButtonWasReleased @params = new()
            {
                self = self, control = control
            };
            _beforeGetButtonWasReleased?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterGetButtonWasReleased != null) retVal = _afterGetButtonWasReleased.Invoke(@params);
            return retVal;
        }

        internal static void HookHasMousePresent()
        {
            if (!HookedList.Contains("HasMousePresent"))
            {
                HookedList.Add("HasMousePresent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "HasMousePresent"),
                    HasMousePresent);
            }
        }

        internal static event Delegates.HasMousePresent_BeforeArgs _beforeHasMousePresent;
        internal static event Delegates.HasMousePresent_NormalArgs _afterHasMousePresent;

        private static bool HasMousePresent(Func<UnityMouseProvider, bool> orig, UnityMouseProvider self)
        {
            Delegates.Params_HasMousePresent @params = new()
            {
                self = self
            };
            _beforeHasMousePresent?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterHasMousePresent != null) retVal = _afterHasMousePresent.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ClearState_BeforeArgs(Params_ClearState args);

        public delegate void ClearState_NormalArgs(Params_ClearState args);

        public delegate void GetButtonIsPressed_BeforeArgs(Params_GetButtonIsPressed args);

        public delegate bool GetButtonIsPressed_NormalArgs(Params_GetButtonIsPressed args);

        public delegate void GetButtonWasPressed_BeforeArgs(Params_GetButtonWasPressed args);

        public delegate bool GetButtonWasPressed_NormalArgs(Params_GetButtonWasPressed args);

        public delegate void GetButtonWasReleased_BeforeArgs(Params_GetButtonWasReleased args);

        public delegate bool GetButtonWasReleased_NormalArgs(Params_GetButtonWasReleased args);

        public delegate void GetDeltaScroll_BeforeArgs(Params_GetDeltaScroll args);

        public delegate float GetDeltaScroll_NormalArgs(Params_GetDeltaScroll args);

        public delegate void GetDeltaX_BeforeArgs(Params_GetDeltaX args);

        public delegate float GetDeltaX_NormalArgs(Params_GetDeltaX args);

        public delegate void GetDeltaY_BeforeArgs(Params_GetDeltaY args);

        public delegate float GetDeltaY_NormalArgs(Params_GetDeltaY args);

        public delegate void GetPosition_BeforeArgs(Params_GetPosition args);

        public delegate Vector2 GetPosition_NormalArgs(Params_GetPosition args);

        public delegate void HasMousePresent_BeforeArgs(Params_HasMousePresent args);

        public delegate bool HasMousePresent_NormalArgs(Params_HasMousePresent args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SafeGetMouseButton_BeforeArgs(Params_SafeGetMouseButton args);

        public delegate bool SafeGetMouseButton_NormalArgs(Params_SafeGetMouseButton args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_Setup
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_Reset
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_Update
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_SafeGetMouseButton
        {
            public int button;
        }

        public sealed class Params_ClearState
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_GetPosition
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_GetDeltaX
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_GetDeltaY
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_GetDeltaScroll
        {
            public UnityMouseProvider self;
        }

        public sealed class Params_GetButtonIsPressed
        {
            public Mouse control;
            public UnityMouseProvider self;
        }

        public sealed class Params_GetButtonWasPressed
        {
            public Mouse control;
            public UnityMouseProvider self;
        }

        public sealed class Params_GetButtonWasReleased
        {
            public Mouse control;
            public UnityMouseProvider self;
        }

        public sealed class Params_HasMousePresent
        {
            public UnityMouseProvider self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.SafeGetMouseButton_BeforeArgs SafeGetMouseButton
        {
            add
            {
                HookHandler._beforeSafeGetMouseButton += value;
                HookHandler.HookSafeGetMouseButton();
            }
            remove => HookHandler._beforeSafeGetMouseButton -= value;
        }

        public static event Delegates.ClearState_BeforeArgs ClearState
        {
            add
            {
                HookHandler._beforeClearState += value;
                HookHandler.HookClearState();
            }
            remove => HookHandler._beforeClearState -= value;
        }

        public static event Delegates.GetPosition_BeforeArgs GetPosition
        {
            add
            {
                HookHandler._beforeGetPosition += value;
                HookHandler.HookGetPosition();
            }
            remove => HookHandler._beforeGetPosition -= value;
        }

        public static event Delegates.GetDeltaX_BeforeArgs GetDeltaX
        {
            add
            {
                HookHandler._beforeGetDeltaX += value;
                HookHandler.HookGetDeltaX();
            }
            remove => HookHandler._beforeGetDeltaX -= value;
        }

        public static event Delegates.GetDeltaY_BeforeArgs GetDeltaY
        {
            add
            {
                HookHandler._beforeGetDeltaY += value;
                HookHandler.HookGetDeltaY();
            }
            remove => HookHandler._beforeGetDeltaY -= value;
        }

        public static event Delegates.GetDeltaScroll_BeforeArgs GetDeltaScroll
        {
            add
            {
                HookHandler._beforeGetDeltaScroll += value;
                HookHandler.HookGetDeltaScroll();
            }
            remove => HookHandler._beforeGetDeltaScroll -= value;
        }

        public static event Delegates.GetButtonIsPressed_BeforeArgs GetButtonIsPressed
        {
            add
            {
                HookHandler._beforeGetButtonIsPressed += value;
                HookHandler.HookGetButtonIsPressed();
            }
            remove => HookHandler._beforeGetButtonIsPressed -= value;
        }

        public static event Delegates.GetButtonWasPressed_BeforeArgs GetButtonWasPressed
        {
            add
            {
                HookHandler._beforeGetButtonWasPressed += value;
                HookHandler.HookGetButtonWasPressed();
            }
            remove => HookHandler._beforeGetButtonWasPressed -= value;
        }

        public static event Delegates.GetButtonWasReleased_BeforeArgs GetButtonWasReleased
        {
            add
            {
                HookHandler._beforeGetButtonWasReleased += value;
                HookHandler.HookGetButtonWasReleased();
            }
            remove => HookHandler._beforeGetButtonWasReleased -= value;
        }

        public static event Delegates.HasMousePresent_BeforeArgs HasMousePresent
        {
            add
            {
                HookHandler._beforeHasMousePresent += value;
                HookHandler.HookHasMousePresent();
            }
            remove => HookHandler._beforeHasMousePresent -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.SafeGetMouseButton_NormalArgs SafeGetMouseButton
        {
            add
            {
                HookHandler._afterSafeGetMouseButton += value;
                HookHandler.HookSafeGetMouseButton();
            }
            remove => HookHandler._afterSafeGetMouseButton -= value;
        }

        public static event Delegates.ClearState_NormalArgs ClearState
        {
            add
            {
                HookHandler._afterClearState += value;
                HookHandler.HookClearState();
            }
            remove => HookHandler._afterClearState -= value;
        }

        public static event Delegates.GetPosition_NormalArgs GetPosition
        {
            add
            {
                HookHandler._afterGetPosition += value;
                HookHandler.HookGetPosition();
            }
            remove => HookHandler._afterGetPosition -= value;
        }

        public static event Delegates.GetDeltaX_NormalArgs GetDeltaX
        {
            add
            {
                HookHandler._afterGetDeltaX += value;
                HookHandler.HookGetDeltaX();
            }
            remove => HookHandler._afterGetDeltaX -= value;
        }

        public static event Delegates.GetDeltaY_NormalArgs GetDeltaY
        {
            add
            {
                HookHandler._afterGetDeltaY += value;
                HookHandler.HookGetDeltaY();
            }
            remove => HookHandler._afterGetDeltaY -= value;
        }

        public static event Delegates.GetDeltaScroll_NormalArgs GetDeltaScroll
        {
            add
            {
                HookHandler._afterGetDeltaScroll += value;
                HookHandler.HookGetDeltaScroll();
            }
            remove => HookHandler._afterGetDeltaScroll -= value;
        }

        public static event Delegates.GetButtonIsPressed_NormalArgs GetButtonIsPressed
        {
            add
            {
                HookHandler._afterGetButtonIsPressed += value;
                HookHandler.HookGetButtonIsPressed();
            }
            remove => HookHandler._afterGetButtonIsPressed -= value;
        }

        public static event Delegates.GetButtonWasPressed_NormalArgs GetButtonWasPressed
        {
            add
            {
                HookHandler._afterGetButtonWasPressed += value;
                HookHandler.HookGetButtonWasPressed();
            }
            remove => HookHandler._afterGetButtonWasPressed -= value;
        }

        public static event Delegates.GetButtonWasReleased_NormalArgs GetButtonWasReleased
        {
            add
            {
                HookHandler._afterGetButtonWasReleased += value;
                HookHandler.HookGetButtonWasReleased();
            }
            remove => HookHandler._afterGetButtonWasReleased -= value;
        }

        public static event Delegates.HasMousePresent_NormalArgs HasMousePresent
        {
            add
            {
                HookHandler._afterHasMousePresent += value;
                HookHandler.HookHasMousePresent();
            }
            remove => HookHandler._afterHasMousePresent -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Setup_NormalArgs Setup
        {
            add => HookEndpointManager.Add<Delegates.Setup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Setup"), value);
            remove => HookEndpointManager.Remove<Delegates.Setup_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Setup"), value);
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Reset"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "Update"), value);
        }

        public static event Delegates.SafeGetMouseButton_NormalArgs SafeGetMouseButton
        {
            add => HookEndpointManager.Add<Delegates.SafeGetMouseButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "SafeGetMouseButton", false), value);
            remove => HookEndpointManager.Remove<Delegates.SafeGetMouseButton_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "SafeGetMouseButton", false), value);
        }

        public static event Delegates.ClearState_NormalArgs ClearState
        {
            add => HookEndpointManager.Add<Delegates.ClearState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "ClearState"), value);
            remove => HookEndpointManager.Remove<Delegates.ClearState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "ClearState"), value);
        }

        public static event Delegates.GetPosition_NormalArgs GetPosition
        {
            add => HookEndpointManager.Add<Delegates.GetPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.GetPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetPosition"), value);
        }

        public static event Delegates.GetDeltaX_NormalArgs GetDeltaX
        {
            add => HookEndpointManager.Add<Delegates.GetDeltaX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaX"), value);
            remove => HookEndpointManager.Remove<Delegates.GetDeltaX_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaX"), value);
        }

        public static event Delegates.GetDeltaY_NormalArgs GetDeltaY
        {
            add => HookEndpointManager.Add<Delegates.GetDeltaY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaY"), value);
            remove => HookEndpointManager.Remove<Delegates.GetDeltaY_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaY"), value);
        }

        public static event Delegates.GetDeltaScroll_NormalArgs GetDeltaScroll
        {
            add => HookEndpointManager.Add<Delegates.GetDeltaScroll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaScroll"), value);
            remove => HookEndpointManager.Remove<Delegates.GetDeltaScroll_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetDeltaScroll"), value);
        }

        public static event Delegates.GetButtonIsPressed_NormalArgs GetButtonIsPressed
        {
            add => HookEndpointManager.Add<Delegates.GetButtonIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonIsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.GetButtonIsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonIsPressed"), value);
        }

        public static event Delegates.GetButtonWasPressed_NormalArgs GetButtonWasPressed
        {
            add => HookEndpointManager.Add<Delegates.GetButtonWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonWasPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.GetButtonWasPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonWasPressed"), value);
        }

        public static event Delegates.GetButtonWasReleased_NormalArgs GetButtonWasReleased
        {
            add => HookEndpointManager.Add<Delegates.GetButtonWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonWasReleased"), value);
            remove => HookEndpointManager.Remove<Delegates.GetButtonWasReleased_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "GetButtonWasReleased"), value);
        }

        public static event Delegates.HasMousePresent_NormalArgs HasMousePresent
        {
            add => HookEndpointManager.Add<Delegates.HasMousePresent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "HasMousePresent"), value);
            remove => HookEndpointManager.Remove<Delegates.HasMousePresent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(UnityMouseProvider), "HasMousePresent"), value);
        }
    }
}