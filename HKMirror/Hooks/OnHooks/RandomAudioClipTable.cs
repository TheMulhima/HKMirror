namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for RandomAudioClipTable class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRandomAudioClipTable
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.RandomAudioClipTable.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(On.RandomAudioClipTable.orig_Reset orig, RandomAudioClipTable self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookSelectClip()
        {
            if (!HookedList.Contains("SelectClip"))
            {
                HookedList.Add("SelectClip");
                On.RandomAudioClipTable.SelectClip += SelectClip;
            }
        }

        internal static event Delegates.SelectClip_BeforeArgs _beforeSelectClip;
        internal static event Delegates.SelectClip_NormalArgs _afterSelectClip;

        private static AudioClip SelectClip(On.RandomAudioClipTable.orig_SelectClip orig, RandomAudioClipTable self)
        {
            Delegates.Params_SelectClip @params = new()
            {
                self = self
            };
            _beforeSelectClip?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterSelectClip != null) retVal = _afterSelectClip.Invoke(@params);
            return retVal;
        }

        internal static void HookSelectPitch()
        {
            if (!HookedList.Contains("SelectPitch"))
            {
                HookedList.Add("SelectPitch");
                On.RandomAudioClipTable.SelectPitch += SelectPitch;
            }
        }

        internal static event Delegates.SelectPitch_BeforeArgs _beforeSelectPitch;
        internal static event Delegates.SelectPitch_NormalArgs _afterSelectPitch;

        private static float SelectPitch(On.RandomAudioClipTable.orig_SelectPitch orig, RandomAudioClipTable self)
        {
            Delegates.Params_SelectPitch @params = new()
            {
                self = self
            };
            _beforeSelectPitch?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterSelectPitch != null) retVal = _afterSelectPitch.Invoke(@params);
            return retVal;
        }

        internal static void HookPlayOneShotUnsafe()
        {
            if (!HookedList.Contains("PlayOneShotUnsafe"))
            {
                HookedList.Add("PlayOneShotUnsafe");
                On.RandomAudioClipTable.PlayOneShotUnsafe += PlayOneShotUnsafe;
            }
        }

        internal static event Delegates.PlayOneShotUnsafe_BeforeArgs _beforePlayOneShotUnsafe;
        internal static event Delegates.PlayOneShotUnsafe_NormalArgs _afterPlayOneShotUnsafe;

        private static void PlayOneShotUnsafe(On.RandomAudioClipTable.orig_PlayOneShotUnsafe orig,
            RandomAudioClipTable self, AudioSource audioSource)
        {
            Delegates.Params_PlayOneShotUnsafe @params = new()
            {
                self = self, audioSource = audioSource
            };
            _beforePlayOneShotUnsafe?.Invoke(@params);
            self = @params.self;
            audioSource = @params.audioSource;
            orig(self, audioSource);
            if (_afterPlayOneShotUnsafe != null) _afterPlayOneShotUnsafe.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void PlayOneShotUnsafe_BeforeArgs(Params_PlayOneShotUnsafe args);

        public delegate void PlayOneShotUnsafe_NormalArgs(Params_PlayOneShotUnsafe args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SelectClip_BeforeArgs(Params_SelectClip args);

        public delegate AudioClip SelectClip_NormalArgs(Params_SelectClip args);

        public delegate void SelectPitch_BeforeArgs(Params_SelectPitch args);

        public delegate float SelectPitch_NormalArgs(Params_SelectPitch args);

        public sealed class Params_Reset
        {
            public RandomAudioClipTable self;
        }

        public sealed class Params_SelectClip
        {
            public RandomAudioClipTable self;
        }

        public sealed class Params_SelectPitch
        {
            public RandomAudioClipTable self;
        }

        public sealed class Params_PlayOneShotUnsafe
        {
            public AudioSource audioSource;
            public RandomAudioClipTable self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.SelectClip_BeforeArgs SelectClip
        {
            add
            {
                HookHandler._beforeSelectClip += value;
                HookHandler.HookSelectClip();
            }
            remove => HookHandler._beforeSelectClip -= value;
        }

        public static event Delegates.SelectPitch_BeforeArgs SelectPitch
        {
            add
            {
                HookHandler._beforeSelectPitch += value;
                HookHandler.HookSelectPitch();
            }
            remove => HookHandler._beforeSelectPitch -= value;
        }

        public static event Delegates.PlayOneShotUnsafe_BeforeArgs PlayOneShotUnsafe
        {
            add
            {
                HookHandler._beforePlayOneShotUnsafe += value;
                HookHandler.HookPlayOneShotUnsafe();
            }
            remove => HookHandler._beforePlayOneShotUnsafe -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.SelectClip_NormalArgs SelectClip
        {
            add
            {
                HookHandler._afterSelectClip += value;
                HookHandler.HookSelectClip();
            }
            remove => HookHandler._afterSelectClip -= value;
        }

        public static event Delegates.SelectPitch_NormalArgs SelectPitch
        {
            add
            {
                HookHandler._afterSelectPitch += value;
                HookHandler.HookSelectPitch();
            }
            remove => HookHandler._afterSelectPitch -= value;
        }

        public static event Delegates.PlayOneShotUnsafe_NormalArgs PlayOneShotUnsafe
        {
            add
            {
                HookHandler._afterPlayOneShotUnsafe += value;
                HookHandler.HookPlayOneShotUnsafe();
            }
            remove => HookHandler._afterPlayOneShotUnsafe -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.RandomAudioClipTable.hook_Reset Reset
        {
            add => On.RandomAudioClipTable.Reset += value;
            remove => On.RandomAudioClipTable.Reset -= value;
        }

        public static event On.RandomAudioClipTable.hook_SelectClip SelectClip
        {
            add => On.RandomAudioClipTable.SelectClip += value;
            remove => On.RandomAudioClipTable.SelectClip -= value;
        }

        public static event On.RandomAudioClipTable.hook_SelectPitch SelectPitch
        {
            add => On.RandomAudioClipTable.SelectPitch += value;
            remove => On.RandomAudioClipTable.SelectPitch -= value;
        }

        public static event On.RandomAudioClipTable.hook_PlayOneShotUnsafe PlayOneShotUnsafe
        {
            add => On.RandomAudioClipTable.PlayOneShotUnsafe += value;
            remove => On.RandomAudioClipTable.PlayOneShotUnsafe -= value;
        }
    }
}