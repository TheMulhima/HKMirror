using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for RandomAudioClipTable class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnRandomAudioClipTable
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookReset()
{
if (!HookedList.Contains("Reset"))
{
HookedList.Add("Reset");
On.RandomAudioClipTable.Reset += Reset;

}
}
internal static event Delegates.Reset_BeforeArgs _beforeReset;
internal static event Delegates.Reset_AfterArgs _afterReset;
private static void Reset(On.RandomAudioClipTable.orig_Reset orig,RandomAudioClipTable self)
{
Delegates.Params_Reset @params = new() 
{
self = self
};
if (_beforeReset != null)
{
foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
{
try
{
_beforeReset?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterReset != null)
{
foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
{
try
{
_afterReset.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSelectClip()
{
if (!HookedList.Contains("SelectClip"))
{
HookedList.Add("SelectClip");
On.RandomAudioClipTable.SelectClip += SelectClip;

}
}
internal static event Delegates.SelectClip_BeforeArgs _beforeSelectClip;
internal static event Delegates.SelectClip_AfterArgs _afterSelectClip;
private static UnityEngine.AudioClip SelectClip(On.RandomAudioClipTable.orig_SelectClip orig,RandomAudioClipTable self)
{
Delegates.Params_SelectClip @params = new() 
{
self = self
};
if (_beforeSelectClip != null)
{
foreach (Delegates.SelectClip_BeforeArgs toInvoke in _beforeSelectClip.GetInvocationList())
{
try
{
_beforeSelectClip?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterSelectClip != null)
{
foreach (Delegates.SelectClip_AfterArgs toInvoke in _afterSelectClip.GetInvocationList())
{
try
{
retVal = _afterSelectClip.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookSelectPitch()
{
if (!HookedList.Contains("SelectPitch"))
{
HookedList.Add("SelectPitch");
On.RandomAudioClipTable.SelectPitch += SelectPitch;

}
}
internal static event Delegates.SelectPitch_BeforeArgs _beforeSelectPitch;
internal static event Delegates.SelectPitch_AfterArgs _afterSelectPitch;
private static float SelectPitch(On.RandomAudioClipTable.orig_SelectPitch orig,RandomAudioClipTable self)
{
Delegates.Params_SelectPitch @params = new() 
{
self = self
};
if (_beforeSelectPitch != null)
{
foreach (Delegates.SelectPitch_BeforeArgs toInvoke in _beforeSelectPitch.GetInvocationList())
{
try
{
_beforeSelectPitch?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterSelectPitch != null)
{
foreach (Delegates.SelectPitch_AfterArgs toInvoke in _afterSelectPitch.GetInvocationList())
{
try
{
retVal = _afterSelectPitch.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookPlayOneShotUnsafe()
{
if (!HookedList.Contains("PlayOneShotUnsafe"))
{
HookedList.Add("PlayOneShotUnsafe");
On.RandomAudioClipTable.PlayOneShotUnsafe += PlayOneShotUnsafe;

}
}
internal static event Delegates.PlayOneShotUnsafe_BeforeArgs _beforePlayOneShotUnsafe;
internal static event Delegates.PlayOneShotUnsafe_AfterArgs _afterPlayOneShotUnsafe;
private static void PlayOneShotUnsafe(On.RandomAudioClipTable.orig_PlayOneShotUnsafe orig,RandomAudioClipTable self,  UnityEngine.AudioSource audioSource)
{
Delegates.Params_PlayOneShotUnsafe @params = new() 
{
self = self
, audioSource = audioSource
};
if (_beforePlayOneShotUnsafe != null)
{
foreach (Delegates.PlayOneShotUnsafe_BeforeArgs toInvoke in _beforePlayOneShotUnsafe.GetInvocationList())
{
try
{
_beforePlayOneShotUnsafe?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
audioSource = @params.audioSource;
orig(self, audioSource);
if (_afterPlayOneShotUnsafe != null)
{
foreach (Delegates.PlayOneShotUnsafe_AfterArgs toInvoke in _afterPlayOneShotUnsafe.GetInvocationList())
{
try
{
_afterPlayOneShotUnsafe.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Reset
{
public RandomAudioClipTable self;
}
public delegate void Reset_BeforeArgs(Params_Reset args);
public delegate void Reset_AfterArgs(Params_Reset args);
public delegate void Reset_WithArgs (Action<RandomAudioClipTable> orig, RandomAudioClipTable self);
public sealed class Params_SelectClip
{
public RandomAudioClipTable self;
}
public delegate void SelectClip_BeforeArgs(Params_SelectClip args);
public delegate UnityEngine.AudioClip SelectClip_AfterArgs(Params_SelectClip args, UnityEngine.AudioClip ret);
public delegate UnityEngine.AudioClip SelectClip_WithArgs (Func<RandomAudioClipTable, UnityEngine.AudioClip> orig, RandomAudioClipTable self);
public sealed class Params_SelectPitch
{
public RandomAudioClipTable self;
}
public delegate void SelectPitch_BeforeArgs(Params_SelectPitch args);
public delegate float SelectPitch_AfterArgs(Params_SelectPitch args, float ret);
public delegate float SelectPitch_WithArgs (Func<RandomAudioClipTable, float> orig, RandomAudioClipTable self);
public sealed class Params_PlayOneShotUnsafe
{
public RandomAudioClipTable self;
public UnityEngine.AudioSource audioSource;
}
public delegate void PlayOneShotUnsafe_BeforeArgs(Params_PlayOneShotUnsafe args);
public delegate void PlayOneShotUnsafe_AfterArgs(Params_PlayOneShotUnsafe args);
public delegate void PlayOneShotUnsafe_WithArgs (Action<RandomAudioClipTable,  UnityEngine.AudioSource> orig, RandomAudioClipTable self,  UnityEngine.AudioSource audioSource);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Reset_BeforeArgs Reset
{
add
{

HookHandler._beforeReset += value;
HookHandler.HookReset();
}
remove => HookHandler._beforeReset -= value;
}
public static event Delegates.SelectClip_BeforeArgs SelectClip
{
add
{

HookHandler._beforeSelectClip += value;
HookHandler.HookSelectClip();
}
remove => HookHandler._beforeSelectClip -= value;
}
public static event Delegates.SelectPitch_BeforeArgs SelectPitch
{
add
{

HookHandler._beforeSelectPitch += value;
HookHandler.HookSelectPitch();
}
remove => HookHandler._beforeSelectPitch -= value;
}
public static event Delegates.PlayOneShotUnsafe_BeforeArgs PlayOneShotUnsafe
{
add
{

HookHandler._beforePlayOneShotUnsafe += value;
HookHandler.HookPlayOneShotUnsafe();
}
remove => HookHandler._beforePlayOneShotUnsafe -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Reset_AfterArgs Reset
{
add
{

HookHandler._afterReset += value;
HookHandler.HookReset();
}
remove => HookHandler._afterReset -= value;
}
public static event Delegates.SelectClip_AfterArgs SelectClip
{
add
{

HookHandler._afterSelectClip += value;
HookHandler.HookSelectClip();
}
remove => HookHandler._afterSelectClip -= value;
}
public static event Delegates.SelectPitch_AfterArgs SelectPitch
{
add
{

HookHandler._afterSelectPitch += value;
HookHandler.HookSelectPitch();
}
remove => HookHandler._afterSelectPitch -= value;
}
public static event Delegates.PlayOneShotUnsafe_AfterArgs PlayOneShotUnsafe
{
add
{

HookHandler._afterPlayOneShotUnsafe += value;
HookHandler.HookPlayOneShotUnsafe();
}
remove => HookHandler._afterPlayOneShotUnsafe -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.RandomAudioClipTable.hook_Reset Reset
{
add => On.RandomAudioClipTable.Reset += value;
remove => On.RandomAudioClipTable.Reset -= value;
}
public static event On.RandomAudioClipTable.hook_SelectClip SelectClip
{
add => On.RandomAudioClipTable.SelectClip += value;
remove => On.RandomAudioClipTable.SelectClip -= value;
}
public static event On.RandomAudioClipTable.hook_SelectPitch SelectPitch
{
add => On.RandomAudioClipTable.SelectPitch += value;
remove => On.RandomAudioClipTable.SelectPitch -= value;
}
public static event On.RandomAudioClipTable.hook_PlayOneShotUnsafe PlayOneShotUnsafe
{
add => On.RandomAudioClipTable.PlayOneShotUnsafe += value;
remove => On.RandomAudioClipTable.PlayOneShotUnsafe -= value;
}
}

}
