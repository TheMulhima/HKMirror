using Modding.Menu;
using Modding.Menu.Config;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MenuButtonContent class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuButtonContent
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAddMenuButton_ContentArea_string_MenuButtonConfig()
        {
            if (!HookedList.Contains("AddMenuButton_ContentArea_string_MenuButtonConfig"))
            {
                HookedList.Add("AddMenuButton_ContentArea_string_MenuButtonConfig");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MenuButtonContent),
                        "AddMenuButton_ContentArea_string_MenuButtonConfig", false),
                    AddMenuButton_ContentArea_string_MenuButtonConfig);
            }
        }

        internal static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_BeforeArgs
            _beforeAddMenuButton_ContentArea_string_MenuButtonConfig;

        internal static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_AfterArgs
            _afterAddMenuButton_ContentArea_string_MenuButtonConfig;

        private static ContentArea AddMenuButton_ContentArea_string_MenuButtonConfig(
            Func<ContentArea, string, MenuButtonConfig, ContentArea> orig, ContentArea content, string name,
            MenuButtonConfig config)
        {
            Delegates.Params_AddMenuButton_ContentArea_string_MenuButtonConfig @params = new()
            {
                content = content, name = name, config = config
            };
            if (_beforeAddMenuButton_ContentArea_string_MenuButtonConfig != null)
                foreach (Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_BeforeArgs toInvoke in
                         _beforeAddMenuButton_ContentArea_string_MenuButtonConfig.GetInvocationList())
                    try
                    {
                        _beforeAddMenuButton_ContentArea_string_MenuButtonConfig?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            content = @params.content;
            name = @params.name;
            config = @params.config;
            var retVal = orig(content, name, config);
            if (_afterAddMenuButton_ContentArea_string_MenuButtonConfig != null)
                foreach (Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_AfterArgs toInvoke in
                         _afterAddMenuButton_ContentArea_string_MenuButtonConfig.GetInvocationList())
                    try
                    {
                        retVal = _afterAddMenuButton_ContentArea_string_MenuButtonConfig.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton()
        {
            if (!HookedList.Contains("AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton"))
            {
                HookedList.Add("AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(MenuButtonContent),
                        "AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton", false),
                    AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton);
            }
        }

        internal static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_BeforeArgs
            _beforeAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton;

        internal static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_AfterArgs
            _afterAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton;

        private static ContentArea AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton(
            Func<ContentArea, string, MenuButtonConfig, MenuButton, ContentArea> orig, ContentArea content, string name,
            MenuButtonConfig config, MenuButton button)
        {
            Delegates.Params_AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton @params = new()
            {
                content = content, name = name, config = config, button = button
            };
            if (_beforeAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton != null)
                foreach (Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_BeforeArgs toInvoke in
                         _beforeAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton.GetInvocationList())
                    try
                    {
                        _beforeAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            content = @params.content;
            name = @params.name;
            config = @params.config;
            button = @params.button;
            var retVal = orig(content, name, config, button);
            if (_afterAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton != null)
                foreach (Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_AfterArgs toInvoke in
                         _afterAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton.GetInvocationList())
                    try
                    {
                        retVal = _afterAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton.Invoke(@params,
                            retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate ContentArea AddMenuButton_ContentArea_string_MenuButtonConfig_AfterArgs(
            Params_AddMenuButton_ContentArea_string_MenuButtonConfig args, ContentArea ret);

        public delegate void AddMenuButton_ContentArea_string_MenuButtonConfig_BeforeArgs(
            Params_AddMenuButton_ContentArea_string_MenuButtonConfig args);

        public delegate ContentArea AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_AfterArgs(
            Params_AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton args, ContentArea ret);

        public delegate void AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_BeforeArgs(
            Params_AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton args);

        public delegate ContentArea AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_WithArgs(
            Func<ContentArea, string, MenuButtonConfig, MenuButton, ContentArea> orig, ContentArea content, string name,
            MenuButtonConfig config, MenuButton button);

        public delegate ContentArea AddMenuButton_ContentArea_string_MenuButtonConfig_WithArgs(
            Func<ContentArea, string, MenuButtonConfig, ContentArea> orig, ContentArea content, string name,
            MenuButtonConfig config);

        public sealed class Params_AddMenuButton_ContentArea_string_MenuButtonConfig
        {
            public MenuButtonConfig config;
            public ContentArea content;
            public string name;
        }

        public sealed class Params_AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton
        {
            public MenuButton button;
            public MenuButtonConfig config;
            public ContentArea content;
            public string name;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_BeforeArgs
            AddMenuButton_ContentArea_string_MenuButtonConfig
            {
                add
                {
                    HookHandler._beforeAddMenuButton_ContentArea_string_MenuButtonConfig += value;
                    HookHandler.HookAddMenuButton_ContentArea_string_MenuButtonConfig();
                }
                remove => HookHandler._beforeAddMenuButton_ContentArea_string_MenuButtonConfig -= value;
            }

        public static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_BeforeArgs
            AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton
            {
                add
                {
                    HookHandler._beforeAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton += value;
                    HookHandler.HookAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton();
                }
                remove => HookHandler._beforeAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton -= value;
            }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_AfterArgs
            AddMenuButton_ContentArea_string_MenuButtonConfig
            {
                add
                {
                    HookHandler._afterAddMenuButton_ContentArea_string_MenuButtonConfig += value;
                    HookHandler.HookAddMenuButton_ContentArea_string_MenuButtonConfig();
                }
                remove => HookHandler._afterAddMenuButton_ContentArea_string_MenuButtonConfig -= value;
            }

        public static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_AfterArgs
            AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton
            {
                add
                {
                    HookHandler._afterAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton += value;
                    HookHandler.HookAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton();
                }
                remove => HookHandler._afterAddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton -= value;
            }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_WithArgs
            AddMenuButton_ContentArea_string_MenuButtonConfig
            {
                add => HookEndpointManager.Add<Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(MenuButtonContent), "AddMenuButton", false), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(MenuButtonContent), "AddMenuButton", false), value);
            }

        public static event Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_WithArgs
            AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton
            {
                add => HookEndpointManager
                    .Add<Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(MenuButtonContent), "AddMenuButton", false), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.AddMenuButton_ContentArea_string_MenuButtonConfig_MenuButton_WithArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(MenuButtonContent), "AddMenuButton", false), value);
            }
    }
}