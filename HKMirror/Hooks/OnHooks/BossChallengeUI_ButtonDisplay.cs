using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BossChallengeUI_ButtonDisplay class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBossChallengeUI_ButtonDisplay
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookSetupNavigation()
        {
            if (!HookedList.Contains("SetupNavigation"))
            {
                HookedList.Add("SetupNavigation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossChallengeUI.ButtonDisplay), "SetupNavigation"),
                    SetupNavigation);
            }
        }

        internal static event Delegates.SetupNavigation_BeforeArgs _beforeSetupNavigation;
        internal static event Delegates.SetupNavigation_AfterArgs _afterSetupNavigation;

        private static void SetupNavigation(
            Action<BossChallengeUI.ButtonDisplay, bool, BossChallengeUI.ButtonDisplay, BossChallengeUI.ButtonDisplay>
                orig, BossChallengeUI.ButtonDisplay self, bool isActive, BossChallengeUI.ButtonDisplay selectOnUp,
            BossChallengeUI.ButtonDisplay selectOnDown)
        {
            Delegates.Params_SetupNavigation @params = new()
            {
                self = self, isActive = isActive, selectOnUp = selectOnUp, selectOnDown = selectOnDown
            };
            if (_beforeSetupNavigation != null)
                foreach (Delegates.SetupNavigation_BeforeArgs toInvoke in _beforeSetupNavigation.GetInvocationList())
                    try
                    {
                        _beforeSetupNavigation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            isActive = @params.isActive;
            selectOnUp = @params.selectOnUp;
            selectOnDown = @params.selectOnDown;
            orig(self, isActive, selectOnUp, selectOnDown);
            if (_afterSetupNavigation != null)
                foreach (Delegates.SetupNavigation_AfterArgs toInvoke in _afterSetupNavigation.GetInvocationList())
                    try
                    {
                        _afterSetupNavigation.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetState()
        {
            if (!HookedList.Contains("SetState"))
            {
                HookedList.Add("SetState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(BossChallengeUI.ButtonDisplay), "SetState"), SetState);
            }
        }

        internal static event Delegates.SetState_BeforeArgs _beforeSetState;
        internal static event Delegates.SetState_AfterArgs _afterSetState;

        private static void SetState(Action<BossChallengeUI.ButtonDisplay, bool> orig,
            BossChallengeUI.ButtonDisplay self, bool isComplete)
        {
            Delegates.Params_SetState @params = new()
            {
                self = self, isComplete = isComplete
            };
            if (_beforeSetState != null)
                foreach (Delegates.SetState_BeforeArgs toInvoke in _beforeSetState.GetInvocationList())
                    try
                    {
                        _beforeSetState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            isComplete = @params.isComplete;
            orig(self, isComplete);
            if (_afterSetState != null)
                foreach (Delegates.SetState_AfterArgs toInvoke in _afterSetState.GetInvocationList())
                    try
                    {
                        _afterSetState.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void SetState_AfterArgs(Params_SetState args);

        public delegate void SetState_BeforeArgs(Params_SetState args);

        public delegate void SetState_WithArgs(Action<BossChallengeUI.ButtonDisplay, bool> orig,
            BossChallengeUI.ButtonDisplay self, bool isComplete);

        public delegate void SetupNavigation_AfterArgs(Params_SetupNavigation args);

        public delegate void SetupNavigation_BeforeArgs(Params_SetupNavigation args);

        public delegate void SetupNavigation_WithArgs(
            Action<BossChallengeUI.ButtonDisplay, bool, BossChallengeUI.ButtonDisplay, BossChallengeUI.ButtonDisplay>
                orig, BossChallengeUI.ButtonDisplay self, bool isActive, BossChallengeUI.ButtonDisplay selectOnUp,
            BossChallengeUI.ButtonDisplay selectOnDown);

        public sealed class Params_SetupNavigation
        {
            public bool isActive;
            public BossChallengeUI.ButtonDisplay selectOnDown;
            public BossChallengeUI.ButtonDisplay selectOnUp;
            public BossChallengeUI.ButtonDisplay self;
        }

        public sealed class Params_SetState
        {
            public bool isComplete;
            public BossChallengeUI.ButtonDisplay self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.SetupNavigation_BeforeArgs SetupNavigation
        {
            add
            {
                HookHandler._beforeSetupNavigation += value;
                HookHandler.HookSetupNavigation();
            }
            remove => HookHandler._beforeSetupNavigation -= value;
        }

        public static event Delegates.SetState_BeforeArgs SetState
        {
            add
            {
                HookHandler._beforeSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._beforeSetState -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.SetupNavigation_AfterArgs SetupNavigation
        {
            add
            {
                HookHandler._afterSetupNavigation += value;
                HookHandler.HookSetupNavigation();
            }
            remove => HookHandler._afterSetupNavigation -= value;
        }

        public static event Delegates.SetState_AfterArgs SetState
        {
            add
            {
                HookHandler._afterSetState += value;
                HookHandler.HookSetState();
            }
            remove => HookHandler._afterSetState -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.SetupNavigation_WithArgs SetupNavigation
        {
            add => HookEndpointManager.Add<Delegates.SetupNavigation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossChallengeUI.ButtonDisplay), "SetupNavigation"), value);
            remove => HookEndpointManager.Remove<Delegates.SetupNavigation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossChallengeUI.ButtonDisplay), "SetupNavigation"), value);
        }

        public static event Delegates.SetState_WithArgs SetState
        {
            add => HookEndpointManager.Add<Delegates.SetState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossChallengeUI.ButtonDisplay), "SetState"), value);
            remove => HookEndpointManager.Remove<Delegates.SetState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(BossChallengeUI.ButtonDisplay), "SetState"), value);
        }
    }
}