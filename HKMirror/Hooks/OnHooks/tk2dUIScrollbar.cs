using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dUIScrollbar class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dUIScrollbar
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_BarLayoutItem()
        {
            if (!HookedList.Contains("get_BarLayoutItem"))
            {
                HookedList.Add("get_BarLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_BarLayoutItem"),
                    get_BarLayoutItem);
            }
        }

        internal static event Delegates.get_BarLayoutItem_BeforeArgs _beforeget_BarLayoutItem;
        internal static event Delegates.get_BarLayoutItem_AfterArgs _afterget_BarLayoutItem;

        private static tk2dUILayout get_BarLayoutItem(Func<tk2dUIScrollbar, tk2dUILayout> orig, tk2dUIScrollbar self)
        {
            Delegates.Params_get_BarLayoutItem @params = new()
            {
                self = self
            };
            if (_beforeget_BarLayoutItem != null)
                foreach (Delegates.get_BarLayoutItem_BeforeArgs toInvoke in
                         _beforeget_BarLayoutItem.GetInvocationList())
                    try
                    {
                        _beforeget_BarLayoutItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_BarLayoutItem != null)
                foreach (Delegates.get_BarLayoutItem_AfterArgs toInvoke in _afterget_BarLayoutItem.GetInvocationList())
                    try
                    {
                        retVal = _afterget_BarLayoutItem.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_BarLayoutItem()
        {
            if (!HookedList.Contains("set_BarLayoutItem"))
            {
                HookedList.Add("set_BarLayoutItem");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_BarLayoutItem"),
                    set_BarLayoutItem);
            }
        }

        internal static event Delegates.set_BarLayoutItem_BeforeArgs _beforeset_BarLayoutItem;
        internal static event Delegates.set_BarLayoutItem_AfterArgs _afterset_BarLayoutItem;

        private static void set_BarLayoutItem(Action<tk2dUIScrollbar, tk2dUILayout> orig, tk2dUIScrollbar self,
            tk2dUILayout value)
        {
            Delegates.Params_set_BarLayoutItem @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_BarLayoutItem != null)
                foreach (Delegates.set_BarLayoutItem_BeforeArgs toInvoke in
                         _beforeset_BarLayoutItem.GetInvocationList())
                    try
                    {
                        _beforeset_BarLayoutItem?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_BarLayoutItem != null)
                foreach (Delegates.set_BarLayoutItem_AfterArgs toInvoke in _afterset_BarLayoutItem.GetInvocationList())
                    try
                    {
                        _afterset_BarLayoutItem.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_SendMessageTarget()
        {
            if (!HookedList.Contains("get_SendMessageTarget"))
            {
                HookedList.Add("get_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_SendMessageTarget"),
                    get_SendMessageTarget);
            }
        }

        internal static event Delegates.get_SendMessageTarget_BeforeArgs _beforeget_SendMessageTarget;
        internal static event Delegates.get_SendMessageTarget_AfterArgs _afterget_SendMessageTarget;

        private static GameObject get_SendMessageTarget(Func<tk2dUIScrollbar, GameObject> orig, tk2dUIScrollbar self)
        {
            Delegates.Params_get_SendMessageTarget @params = new()
            {
                self = self
            };
            if (_beforeget_SendMessageTarget != null)
                foreach (Delegates.get_SendMessageTarget_BeforeArgs toInvoke in _beforeget_SendMessageTarget
                             .GetInvocationList())
                    try
                    {
                        _beforeget_SendMessageTarget?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SendMessageTarget != null)
                foreach (Delegates.get_SendMessageTarget_AfterArgs toInvoke in _afterget_SendMessageTarget
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_SendMessageTarget.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_SendMessageTarget()
        {
            if (!HookedList.Contains("set_SendMessageTarget"))
            {
                HookedList.Add("set_SendMessageTarget");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_SendMessageTarget"),
                    set_SendMessageTarget);
            }
        }

        internal static event Delegates.set_SendMessageTarget_BeforeArgs _beforeset_SendMessageTarget;
        internal static event Delegates.set_SendMessageTarget_AfterArgs _afterset_SendMessageTarget;

        private static void set_SendMessageTarget(Action<tk2dUIScrollbar, GameObject> orig, tk2dUIScrollbar self,
            GameObject value)
        {
            Delegates.Params_set_SendMessageTarget @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_SendMessageTarget != null)
                foreach (Delegates.set_SendMessageTarget_BeforeArgs toInvoke in _beforeset_SendMessageTarget
                             .GetInvocationList())
                    try
                    {
                        _beforeset_SendMessageTarget?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SendMessageTarget != null)
                foreach (Delegates.set_SendMessageTarget_AfterArgs toInvoke in _afterset_SendMessageTarget
                             .GetInvocationList())
                    try
                    {
                        _afterset_SendMessageTarget.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_Value()
        {
            if (!HookedList.Contains("get_Value"))
            {
                HookedList.Add("get_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_Value"), get_Value);
            }
        }

        internal static event Delegates.get_Value_BeforeArgs _beforeget_Value;
        internal static event Delegates.get_Value_AfterArgs _afterget_Value;

        private static float get_Value(Func<tk2dUIScrollbar, float> orig, tk2dUIScrollbar self)
        {
            Delegates.Params_get_Value @params = new()
            {
                self = self
            };
            if (_beforeget_Value != null)
                foreach (Delegates.get_Value_BeforeArgs toInvoke in _beforeget_Value.GetInvocationList())
                    try
                    {
                        _beforeget_Value?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Value != null)
                foreach (Delegates.get_Value_AfterArgs toInvoke in _afterget_Value.GetInvocationList())
                    try
                    {
                        retVal = _afterget_Value.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_Value()
        {
            if (!HookedList.Contains("set_Value"))
            {
                HookedList.Add("set_Value");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_Value"), set_Value);
            }
        }

        internal static event Delegates.set_Value_BeforeArgs _beforeset_Value;
        internal static event Delegates.set_Value_AfterArgs _afterset_Value;

        private static void set_Value(Action<tk2dUIScrollbar, float> orig, tk2dUIScrollbar self, float value)
        {
            Delegates.Params_set_Value @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Value != null)
                foreach (Delegates.set_Value_BeforeArgs toInvoke in _beforeset_Value.GetInvocationList())
                    try
                    {
                        _beforeset_Value?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Value != null)
                foreach (Delegates.set_Value_AfterArgs toInvoke in _afterset_Value.GetInvocationList())
                    try
                    {
                        _afterset_Value.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetScrollPercentWithoutEvent()
        {
            if (!HookedList.Contains("SetScrollPercentWithoutEvent"))
            {
                HookedList.Add("SetScrollPercentWithoutEvent");
                On.tk2dUIScrollbar.SetScrollPercentWithoutEvent += SetScrollPercentWithoutEvent;
            }
        }

        internal static event Delegates.SetScrollPercentWithoutEvent_BeforeArgs _beforeSetScrollPercentWithoutEvent;
        internal static event Delegates.SetScrollPercentWithoutEvent_AfterArgs _afterSetScrollPercentWithoutEvent;

        private static void SetScrollPercentWithoutEvent(On.tk2dUIScrollbar.orig_SetScrollPercentWithoutEvent orig,
            tk2dUIScrollbar self, float newScrollPercent)
        {
            Delegates.Params_SetScrollPercentWithoutEvent @params = new()
            {
                self = self, newScrollPercent = newScrollPercent
            };
            if (_beforeSetScrollPercentWithoutEvent != null)
                foreach (Delegates.SetScrollPercentWithoutEvent_BeforeArgs toInvoke in
                         _beforeSetScrollPercentWithoutEvent.GetInvocationList())
                    try
                    {
                        _beforeSetScrollPercentWithoutEvent?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            newScrollPercent = @params.newScrollPercent;
            orig(self, newScrollPercent);
            if (_afterSetScrollPercentWithoutEvent != null)
                foreach (Delegates.SetScrollPercentWithoutEvent_AfterArgs toInvoke in _afterSetScrollPercentWithoutEvent
                             .GetInvocationList())
                    try
                    {
                        _afterSetScrollPercentWithoutEvent.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dUIScrollbar.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.tk2dUIScrollbar.orig_OnEnable orig, tk2dUIScrollbar self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dUIScrollbar.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.tk2dUIScrollbar.orig_OnDisable orig, tk2dUIScrollbar self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.tk2dUIScrollbar.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.tk2dUIScrollbar.orig_Awake orig, tk2dUIScrollbar self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dUIScrollbar.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.tk2dUIScrollbar.orig_Start orig, tk2dUIScrollbar self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTrackHoverScrollWheelChange()
        {
            if (!HookedList.Contains("TrackHoverScrollWheelChange"))
            {
                HookedList.Add("TrackHoverScrollWheelChange");
                On.tk2dUIScrollbar.TrackHoverScrollWheelChange += TrackHoverScrollWheelChange;
            }
        }

        internal static event Delegates.TrackHoverScrollWheelChange_BeforeArgs _beforeTrackHoverScrollWheelChange;
        internal static event Delegates.TrackHoverScrollWheelChange_AfterArgs _afterTrackHoverScrollWheelChange;

        private static void TrackHoverScrollWheelChange(On.tk2dUIScrollbar.orig_TrackHoverScrollWheelChange orig,
            tk2dUIScrollbar self, float mouseWheelChange)
        {
            Delegates.Params_TrackHoverScrollWheelChange @params = new()
            {
                self = self, mouseWheelChange = mouseWheelChange
            };
            if (_beforeTrackHoverScrollWheelChange != null)
                foreach (Delegates.TrackHoverScrollWheelChange_BeforeArgs toInvoke in _beforeTrackHoverScrollWheelChange
                             .GetInvocationList())
                    try
                    {
                        _beforeTrackHoverScrollWheelChange?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            mouseWheelChange = @params.mouseWheelChange;
            orig(self, mouseWheelChange);
            if (_afterTrackHoverScrollWheelChange != null)
                foreach (Delegates.TrackHoverScrollWheelChange_AfterArgs toInvoke in _afterTrackHoverScrollWheelChange
                             .GetInvocationList())
                    try
                    {
                        _afterTrackHoverScrollWheelChange.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetScrollThumbPosition()
        {
            if (!HookedList.Contains("SetScrollThumbPosition"))
            {
                HookedList.Add("SetScrollThumbPosition");
                On.tk2dUIScrollbar.SetScrollThumbPosition += SetScrollThumbPosition;
            }
        }

        internal static event Delegates.SetScrollThumbPosition_BeforeArgs _beforeSetScrollThumbPosition;
        internal static event Delegates.SetScrollThumbPosition_AfterArgs _afterSetScrollThumbPosition;

        private static void SetScrollThumbPosition(On.tk2dUIScrollbar.orig_SetScrollThumbPosition orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_SetScrollThumbPosition @params = new()
            {
                self = self
            };
            if (_beforeSetScrollThumbPosition != null)
                foreach (Delegates.SetScrollThumbPosition_BeforeArgs toInvoke in _beforeSetScrollThumbPosition
                             .GetInvocationList())
                    try
                    {
                        _beforeSetScrollThumbPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetScrollThumbPosition != null)
                foreach (Delegates.SetScrollThumbPosition_AfterArgs toInvoke in _afterSetScrollThumbPosition
                             .GetInvocationList())
                    try
                    {
                        _afterSetScrollThumbPosition.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMoveScrollThumbButton()
        {
            if (!HookedList.Contains("MoveScrollThumbButton"))
            {
                HookedList.Add("MoveScrollThumbButton");
                On.tk2dUIScrollbar.MoveScrollThumbButton += MoveScrollThumbButton;
            }
        }

        internal static event Delegates.MoveScrollThumbButton_BeforeArgs _beforeMoveScrollThumbButton;
        internal static event Delegates.MoveScrollThumbButton_AfterArgs _afterMoveScrollThumbButton;

        private static void MoveScrollThumbButton(On.tk2dUIScrollbar.orig_MoveScrollThumbButton orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_MoveScrollThumbButton @params = new()
            {
                self = self
            };
            if (_beforeMoveScrollThumbButton != null)
                foreach (Delegates.MoveScrollThumbButton_BeforeArgs toInvoke in _beforeMoveScrollThumbButton
                             .GetInvocationList())
                    try
                    {
                        _beforeMoveScrollThumbButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterMoveScrollThumbButton != null)
                foreach (Delegates.MoveScrollThumbButton_AfterArgs toInvoke in _afterMoveScrollThumbButton
                             .GetInvocationList())
                    try
                    {
                        _afterMoveScrollThumbButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCalculateClickWorldPos()
        {
            if (!HookedList.Contains("CalculateClickWorldPos"))
            {
                HookedList.Add("CalculateClickWorldPos");
                On.tk2dUIScrollbar.CalculateClickWorldPos += CalculateClickWorldPos;
            }
        }

        internal static event Delegates.CalculateClickWorldPos_BeforeArgs _beforeCalculateClickWorldPos;
        internal static event Delegates.CalculateClickWorldPos_AfterArgs _afterCalculateClickWorldPos;

        private static Vector3 CalculateClickWorldPos(On.tk2dUIScrollbar.orig_CalculateClickWorldPos orig,
            tk2dUIScrollbar self, tk2dUIItem btn)
        {
            Delegates.Params_CalculateClickWorldPos @params = new()
            {
                self = self, btn = btn
            };
            if (_beforeCalculateClickWorldPos != null)
                foreach (Delegates.CalculateClickWorldPos_BeforeArgs toInvoke in _beforeCalculateClickWorldPos
                             .GetInvocationList())
                    try
                    {
                        _beforeCalculateClickWorldPos?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            btn = @params.btn;
            var retVal = orig(self, btn);
            if (_afterCalculateClickWorldPos != null)
                foreach (Delegates.CalculateClickWorldPos_AfterArgs toInvoke in _afterCalculateClickWorldPos
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterCalculateClickWorldPos.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookScrollToPosition()
        {
            if (!HookedList.Contains("ScrollToPosition"))
            {
                HookedList.Add("ScrollToPosition");
                On.tk2dUIScrollbar.ScrollToPosition += ScrollToPosition;
            }
        }

        internal static event Delegates.ScrollToPosition_BeforeArgs _beforeScrollToPosition;
        internal static event Delegates.ScrollToPosition_AfterArgs _afterScrollToPosition;

        private static void ScrollToPosition(On.tk2dUIScrollbar.orig_ScrollToPosition orig, tk2dUIScrollbar self,
            Vector3 worldPos)
        {
            Delegates.Params_ScrollToPosition @params = new()
            {
                self = self, worldPos = worldPos
            };
            if (_beforeScrollToPosition != null)
                foreach (Delegates.ScrollToPosition_BeforeArgs toInvoke in _beforeScrollToPosition.GetInvocationList())
                    try
                    {
                        _beforeScrollToPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            worldPos = @params.worldPos;
            orig(self, worldPos);
            if (_afterScrollToPosition != null)
                foreach (Delegates.ScrollToPosition_AfterArgs toInvoke in _afterScrollToPosition.GetInvocationList())
                    try
                    {
                        _afterScrollToPosition.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollTrackButtonDown()
        {
            if (!HookedList.Contains("ScrollTrackButtonDown"))
            {
                HookedList.Add("ScrollTrackButtonDown");
                On.tk2dUIScrollbar.ScrollTrackButtonDown += ScrollTrackButtonDown;
            }
        }

        internal static event Delegates.ScrollTrackButtonDown_BeforeArgs _beforeScrollTrackButtonDown;
        internal static event Delegates.ScrollTrackButtonDown_AfterArgs _afterScrollTrackButtonDown;

        private static void ScrollTrackButtonDown(On.tk2dUIScrollbar.orig_ScrollTrackButtonDown orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollTrackButtonDown @params = new()
            {
                self = self
            };
            if (_beforeScrollTrackButtonDown != null)
                foreach (Delegates.ScrollTrackButtonDown_BeforeArgs toInvoke in _beforeScrollTrackButtonDown
                             .GetInvocationList())
                    try
                    {
                        _beforeScrollTrackButtonDown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollTrackButtonDown != null)
                foreach (Delegates.ScrollTrackButtonDown_AfterArgs toInvoke in _afterScrollTrackButtonDown
                             .GetInvocationList())
                    try
                    {
                        _afterScrollTrackButtonDown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollTrackButtonHoverOver()
        {
            if (!HookedList.Contains("ScrollTrackButtonHoverOver"))
            {
                HookedList.Add("ScrollTrackButtonHoverOver");
                On.tk2dUIScrollbar.ScrollTrackButtonHoverOver += ScrollTrackButtonHoverOver;
            }
        }

        internal static event Delegates.ScrollTrackButtonHoverOver_BeforeArgs _beforeScrollTrackButtonHoverOver;
        internal static event Delegates.ScrollTrackButtonHoverOver_AfterArgs _afterScrollTrackButtonHoverOver;

        private static void ScrollTrackButtonHoverOver(On.tk2dUIScrollbar.orig_ScrollTrackButtonHoverOver orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollTrackButtonHoverOver @params = new()
            {
                self = self
            };
            if (_beforeScrollTrackButtonHoverOver != null)
                foreach (Delegates.ScrollTrackButtonHoverOver_BeforeArgs toInvoke in _beforeScrollTrackButtonHoverOver
                             .GetInvocationList())
                    try
                    {
                        _beforeScrollTrackButtonHoverOver?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollTrackButtonHoverOver != null)
                foreach (Delegates.ScrollTrackButtonHoverOver_AfterArgs toInvoke in _afterScrollTrackButtonHoverOver
                             .GetInvocationList())
                    try
                    {
                        _afterScrollTrackButtonHoverOver.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollTrackButtonHoverOut()
        {
            if (!HookedList.Contains("ScrollTrackButtonHoverOut"))
            {
                HookedList.Add("ScrollTrackButtonHoverOut");
                On.tk2dUIScrollbar.ScrollTrackButtonHoverOut += ScrollTrackButtonHoverOut;
            }
        }

        internal static event Delegates.ScrollTrackButtonHoverOut_BeforeArgs _beforeScrollTrackButtonHoverOut;
        internal static event Delegates.ScrollTrackButtonHoverOut_AfterArgs _afterScrollTrackButtonHoverOut;

        private static void ScrollTrackButtonHoverOut(On.tk2dUIScrollbar.orig_ScrollTrackButtonHoverOut orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollTrackButtonHoverOut @params = new()
            {
                self = self
            };
            if (_beforeScrollTrackButtonHoverOut != null)
                foreach (Delegates.ScrollTrackButtonHoverOut_BeforeArgs toInvoke in _beforeScrollTrackButtonHoverOut
                             .GetInvocationList())
                    try
                    {
                        _beforeScrollTrackButtonHoverOut?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollTrackButtonHoverOut != null)
                foreach (Delegates.ScrollTrackButtonHoverOut_AfterArgs toInvoke in _afterScrollTrackButtonHoverOut
                             .GetInvocationList())
                    try
                    {
                        _afterScrollTrackButtonHoverOut.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollThumbButtonDown()
        {
            if (!HookedList.Contains("ScrollThumbButtonDown"))
            {
                HookedList.Add("ScrollThumbButtonDown");
                On.tk2dUIScrollbar.ScrollThumbButtonDown += ScrollThumbButtonDown;
            }
        }

        internal static event Delegates.ScrollThumbButtonDown_BeforeArgs _beforeScrollThumbButtonDown;
        internal static event Delegates.ScrollThumbButtonDown_AfterArgs _afterScrollThumbButtonDown;

        private static void ScrollThumbButtonDown(On.tk2dUIScrollbar.orig_ScrollThumbButtonDown orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollThumbButtonDown @params = new()
            {
                self = self
            };
            if (_beforeScrollThumbButtonDown != null)
                foreach (Delegates.ScrollThumbButtonDown_BeforeArgs toInvoke in _beforeScrollThumbButtonDown
                             .GetInvocationList())
                    try
                    {
                        _beforeScrollThumbButtonDown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollThumbButtonDown != null)
                foreach (Delegates.ScrollThumbButtonDown_AfterArgs toInvoke in _afterScrollThumbButtonDown
                             .GetInvocationList())
                    try
                    {
                        _afterScrollThumbButtonDown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollThumbButtonRelease()
        {
            if (!HookedList.Contains("ScrollThumbButtonRelease"))
            {
                HookedList.Add("ScrollThumbButtonRelease");
                On.tk2dUIScrollbar.ScrollThumbButtonRelease += ScrollThumbButtonRelease;
            }
        }

        internal static event Delegates.ScrollThumbButtonRelease_BeforeArgs _beforeScrollThumbButtonRelease;
        internal static event Delegates.ScrollThumbButtonRelease_AfterArgs _afterScrollThumbButtonRelease;

        private static void ScrollThumbButtonRelease(On.tk2dUIScrollbar.orig_ScrollThumbButtonRelease orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollThumbButtonRelease @params = new()
            {
                self = self
            };
            if (_beforeScrollThumbButtonRelease != null)
                foreach (Delegates.ScrollThumbButtonRelease_BeforeArgs toInvoke in _beforeScrollThumbButtonRelease
                             .GetInvocationList())
                    try
                    {
                        _beforeScrollThumbButtonRelease?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollThumbButtonRelease != null)
                foreach (Delegates.ScrollThumbButtonRelease_AfterArgs toInvoke in _afterScrollThumbButtonRelease
                             .GetInvocationList())
                    try
                    {
                        _afterScrollThumbButtonRelease.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollUpButtonDown()
        {
            if (!HookedList.Contains("ScrollUpButtonDown"))
            {
                HookedList.Add("ScrollUpButtonDown");
                On.tk2dUIScrollbar.ScrollUpButtonDown += ScrollUpButtonDown;
            }
        }

        internal static event Delegates.ScrollUpButtonDown_BeforeArgs _beforeScrollUpButtonDown;
        internal static event Delegates.ScrollUpButtonDown_AfterArgs _afterScrollUpButtonDown;

        private static void ScrollUpButtonDown(On.tk2dUIScrollbar.orig_ScrollUpButtonDown orig, tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollUpButtonDown @params = new()
            {
                self = self
            };
            if (_beforeScrollUpButtonDown != null)
                foreach (Delegates.ScrollUpButtonDown_BeforeArgs toInvoke in
                         _beforeScrollUpButtonDown.GetInvocationList())
                    try
                    {
                        _beforeScrollUpButtonDown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollUpButtonDown != null)
                foreach (Delegates.ScrollUpButtonDown_AfterArgs toInvoke in
                         _afterScrollUpButtonDown.GetInvocationList())
                    try
                    {
                        _afterScrollUpButtonDown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollUpButtonUp()
        {
            if (!HookedList.Contains("ScrollUpButtonUp"))
            {
                HookedList.Add("ScrollUpButtonUp");
                On.tk2dUIScrollbar.ScrollUpButtonUp += ScrollUpButtonUp;
            }
        }

        internal static event Delegates.ScrollUpButtonUp_BeforeArgs _beforeScrollUpButtonUp;
        internal static event Delegates.ScrollUpButtonUp_AfterArgs _afterScrollUpButtonUp;

        private static void ScrollUpButtonUp(On.tk2dUIScrollbar.orig_ScrollUpButtonUp orig, tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollUpButtonUp @params = new()
            {
                self = self
            };
            if (_beforeScrollUpButtonUp != null)
                foreach (Delegates.ScrollUpButtonUp_BeforeArgs toInvoke in _beforeScrollUpButtonUp.GetInvocationList())
                    try
                    {
                        _beforeScrollUpButtonUp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollUpButtonUp != null)
                foreach (Delegates.ScrollUpButtonUp_AfterArgs toInvoke in _afterScrollUpButtonUp.GetInvocationList())
                    try
                    {
                        _afterScrollUpButtonUp.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollDownButtonDown()
        {
            if (!HookedList.Contains("ScrollDownButtonDown"))
            {
                HookedList.Add("ScrollDownButtonDown");
                On.tk2dUIScrollbar.ScrollDownButtonDown += ScrollDownButtonDown;
            }
        }

        internal static event Delegates.ScrollDownButtonDown_BeforeArgs _beforeScrollDownButtonDown;
        internal static event Delegates.ScrollDownButtonDown_AfterArgs _afterScrollDownButtonDown;

        private static void ScrollDownButtonDown(On.tk2dUIScrollbar.orig_ScrollDownButtonDown orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollDownButtonDown @params = new()
            {
                self = self
            };
            if (_beforeScrollDownButtonDown != null)
                foreach (Delegates.ScrollDownButtonDown_BeforeArgs toInvoke in _beforeScrollDownButtonDown
                             .GetInvocationList())
                    try
                    {
                        _beforeScrollDownButtonDown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollDownButtonDown != null)
                foreach (Delegates.ScrollDownButtonDown_AfterArgs toInvoke in _afterScrollDownButtonDown
                             .GetInvocationList())
                    try
                    {
                        _afterScrollDownButtonDown.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollDownButtonUp()
        {
            if (!HookedList.Contains("ScrollDownButtonUp"))
            {
                HookedList.Add("ScrollDownButtonUp");
                On.tk2dUIScrollbar.ScrollDownButtonUp += ScrollDownButtonUp;
            }
        }

        internal static event Delegates.ScrollDownButtonUp_BeforeArgs _beforeScrollDownButtonUp;
        internal static event Delegates.ScrollDownButtonUp_AfterArgs _afterScrollDownButtonUp;

        private static void ScrollDownButtonUp(On.tk2dUIScrollbar.orig_ScrollDownButtonUp orig, tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollDownButtonUp @params = new()
            {
                self = self
            };
            if (_beforeScrollDownButtonUp != null)
                foreach (Delegates.ScrollDownButtonUp_BeforeArgs toInvoke in
                         _beforeScrollDownButtonUp.GetInvocationList())
                    try
                    {
                        _beforeScrollDownButtonUp?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollDownButtonUp != null)
                foreach (Delegates.ScrollDownButtonUp_AfterArgs toInvoke in
                         _afterScrollDownButtonUp.GetInvocationList())
                    try
                    {
                        _afterScrollDownButtonUp.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollUpFixed()
        {
            if (!HookedList.Contains("ScrollUpFixed"))
            {
                HookedList.Add("ScrollUpFixed");
                On.tk2dUIScrollbar.ScrollUpFixed += ScrollUpFixed;
            }
        }

        internal static event Delegates.ScrollUpFixed_BeforeArgs _beforeScrollUpFixed;
        internal static event Delegates.ScrollUpFixed_AfterArgs _afterScrollUpFixed;

        private static void ScrollUpFixed(On.tk2dUIScrollbar.orig_ScrollUpFixed orig, tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollUpFixed @params = new()
            {
                self = self
            };
            if (_beforeScrollUpFixed != null)
                foreach (Delegates.ScrollUpFixed_BeforeArgs toInvoke in _beforeScrollUpFixed.GetInvocationList())
                    try
                    {
                        _beforeScrollUpFixed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollUpFixed != null)
                foreach (Delegates.ScrollUpFixed_AfterArgs toInvoke in _afterScrollUpFixed.GetInvocationList())
                    try
                    {
                        _afterScrollUpFixed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollDownFixed()
        {
            if (!HookedList.Contains("ScrollDownFixed"))
            {
                HookedList.Add("ScrollDownFixed");
                On.tk2dUIScrollbar.ScrollDownFixed += ScrollDownFixed;
            }
        }

        internal static event Delegates.ScrollDownFixed_BeforeArgs _beforeScrollDownFixed;
        internal static event Delegates.ScrollDownFixed_AfterArgs _afterScrollDownFixed;

        private static void ScrollDownFixed(On.tk2dUIScrollbar.orig_ScrollDownFixed orig, tk2dUIScrollbar self)
        {
            Delegates.Params_ScrollDownFixed @params = new()
            {
                self = self
            };
            if (_beforeScrollDownFixed != null)
                foreach (Delegates.ScrollDownFixed_BeforeArgs toInvoke in _beforeScrollDownFixed.GetInvocationList())
                    try
                    {
                        _beforeScrollDownFixed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterScrollDownFixed != null)
                foreach (Delegates.ScrollDownFixed_AfterArgs toInvoke in _afterScrollDownFixed.GetInvocationList())
                    try
                    {
                        _afterScrollDownFixed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCheckRepeatScrollUpDownButton()
        {
            if (!HookedList.Contains("CheckRepeatScrollUpDownButton"))
            {
                HookedList.Add("CheckRepeatScrollUpDownButton");
                On.tk2dUIScrollbar.CheckRepeatScrollUpDownButton += CheckRepeatScrollUpDownButton;
            }
        }

        internal static event Delegates.CheckRepeatScrollUpDownButton_BeforeArgs _beforeCheckRepeatScrollUpDownButton;
        internal static event Delegates.CheckRepeatScrollUpDownButton_AfterArgs _afterCheckRepeatScrollUpDownButton;

        private static void CheckRepeatScrollUpDownButton(On.tk2dUIScrollbar.orig_CheckRepeatScrollUpDownButton orig,
            tk2dUIScrollbar self)
        {
            Delegates.Params_CheckRepeatScrollUpDownButton @params = new()
            {
                self = self
            };
            if (_beforeCheckRepeatScrollUpDownButton != null)
                foreach (Delegates.CheckRepeatScrollUpDownButton_BeforeArgs toInvoke in
                         _beforeCheckRepeatScrollUpDownButton.GetInvocationList())
                    try
                    {
                        _beforeCheckRepeatScrollUpDownButton?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckRepeatScrollUpDownButton != null)
                foreach (Delegates.CheckRepeatScrollUpDownButton_AfterArgs toInvoke in
                         _afterCheckRepeatScrollUpDownButton.GetInvocationList())
                    try
                    {
                        _afterCheckRepeatScrollUpDownButton.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookScrollDirection()
        {
            if (!HookedList.Contains("ScrollDirection"))
            {
                HookedList.Add("ScrollDirection");
                On.tk2dUIScrollbar.ScrollDirection += ScrollDirection;
            }
        }

        internal static event Delegates.ScrollDirection_BeforeArgs _beforeScrollDirection;
        internal static event Delegates.ScrollDirection_AfterArgs _afterScrollDirection;

        private static void ScrollDirection(On.tk2dUIScrollbar.orig_ScrollDirection orig, tk2dUIScrollbar self, int dir)
        {
            Delegates.Params_ScrollDirection @params = new()
            {
                self = self, dir = dir
            };
            if (_beforeScrollDirection != null)
                foreach (Delegates.ScrollDirection_BeforeArgs toInvoke in _beforeScrollDirection.GetInvocationList())
                    try
                    {
                        _beforeScrollDirection?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            dir = @params.dir;
            orig(self, dir);
            if (_afterScrollDirection != null)
                foreach (Delegates.ScrollDirection_AfterArgs toInvoke in _afterScrollDirection.GetInvocationList())
                    try
                    {
                        _afterScrollDirection.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCalcScrollPercentOffsetButtonScrollDistance()
        {
            if (!HookedList.Contains("CalcScrollPercentOffsetButtonScrollDistance"))
            {
                HookedList.Add("CalcScrollPercentOffsetButtonScrollDistance");
                On.tk2dUIScrollbar.CalcScrollPercentOffsetButtonScrollDistance +=
                    CalcScrollPercentOffsetButtonScrollDistance;
            }
        }

        internal static event Delegates.CalcScrollPercentOffsetButtonScrollDistance_BeforeArgs
            _beforeCalcScrollPercentOffsetButtonScrollDistance;

        internal static event Delegates.CalcScrollPercentOffsetButtonScrollDistance_AfterArgs
            _afterCalcScrollPercentOffsetButtonScrollDistance;

        private static float CalcScrollPercentOffsetButtonScrollDistance(
            On.tk2dUIScrollbar.orig_CalcScrollPercentOffsetButtonScrollDistance orig, tk2dUIScrollbar self)
        {
            Delegates.Params_CalcScrollPercentOffsetButtonScrollDistance @params = new()
            {
                self = self
            };
            if (_beforeCalcScrollPercentOffsetButtonScrollDistance != null)
                foreach (Delegates.CalcScrollPercentOffsetButtonScrollDistance_BeforeArgs toInvoke in
                         _beforeCalcScrollPercentOffsetButtonScrollDistance.GetInvocationList())
                    try
                    {
                        _beforeCalcScrollPercentOffsetButtonScrollDistance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterCalcScrollPercentOffsetButtonScrollDistance != null)
                foreach (Delegates.CalcScrollPercentOffsetButtonScrollDistance_AfterArgs toInvoke in
                         _afterCalcScrollPercentOffsetButtonScrollDistance.GetInvocationList())
                    try
                    {
                        retVal = _afterCalcScrollPercentOffsetButtonScrollDistance.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookLayoutReshaped()
        {
            if (!HookedList.Contains("LayoutReshaped"))
            {
                HookedList.Add("LayoutReshaped");
                On.tk2dUIScrollbar.LayoutReshaped += LayoutReshaped;
            }
        }

        internal static event Delegates.LayoutReshaped_BeforeArgs _beforeLayoutReshaped;
        internal static event Delegates.LayoutReshaped_AfterArgs _afterLayoutReshaped;

        private static void LayoutReshaped(On.tk2dUIScrollbar.orig_LayoutReshaped orig, tk2dUIScrollbar self,
            Vector3 dMin, Vector3 dMax)
        {
            Delegates.Params_LayoutReshaped @params = new()
            {
                self = self, dMin = dMin, dMax = dMax
            };
            if (_beforeLayoutReshaped != null)
                foreach (Delegates.LayoutReshaped_BeforeArgs toInvoke in _beforeLayoutReshaped.GetInvocationList())
                    try
                    {
                        _beforeLayoutReshaped?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            dMin = @params.dMin;
            dMax = @params.dMax;
            orig(self, dMin, dMax);
            if (_afterLayoutReshaped != null)
                foreach (Delegates.LayoutReshaped_AfterArgs toInvoke in _afterLayoutReshaped.GetInvocationList())
                    try
                    {
                        _afterLayoutReshaped.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate float CalcScrollPercentOffsetButtonScrollDistance_AfterArgs(
            Params_CalcScrollPercentOffsetButtonScrollDistance args, float ret);

        public delegate void CalcScrollPercentOffsetButtonScrollDistance_BeforeArgs(
            Params_CalcScrollPercentOffsetButtonScrollDistance args);

        public delegate float CalcScrollPercentOffsetButtonScrollDistance_WithArgs(Func<tk2dUIScrollbar, float> orig,
            tk2dUIScrollbar self);

        public delegate Vector3 CalculateClickWorldPos_AfterArgs(Params_CalculateClickWorldPos args, Vector3 ret);

        public delegate void CalculateClickWorldPos_BeforeArgs(Params_CalculateClickWorldPos args);

        public delegate Vector3 CalculateClickWorldPos_WithArgs(Func<tk2dUIScrollbar, tk2dUIItem, Vector3> orig,
            tk2dUIScrollbar self, tk2dUIItem btn);

        public delegate void CheckRepeatScrollUpDownButton_AfterArgs(Params_CheckRepeatScrollUpDownButton args);

        public delegate void CheckRepeatScrollUpDownButton_BeforeArgs(Params_CheckRepeatScrollUpDownButton args);

        public delegate void CheckRepeatScrollUpDownButton_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate tk2dUILayout get_BarLayoutItem_AfterArgs(Params_get_BarLayoutItem args, tk2dUILayout ret);

        public delegate void get_BarLayoutItem_BeforeArgs(Params_get_BarLayoutItem args);

        public delegate tk2dUILayout get_BarLayoutItem_WithArgs(Func<tk2dUIScrollbar, tk2dUILayout> orig,
            tk2dUIScrollbar self);

        public delegate GameObject get_SendMessageTarget_AfterArgs(Params_get_SendMessageTarget args, GameObject ret);

        public delegate void get_SendMessageTarget_BeforeArgs(Params_get_SendMessageTarget args);

        public delegate GameObject get_SendMessageTarget_WithArgs(Func<tk2dUIScrollbar, GameObject> orig,
            tk2dUIScrollbar self);

        public delegate float get_Value_AfterArgs(Params_get_Value args, float ret);

        public delegate void get_Value_BeforeArgs(Params_get_Value args);

        public delegate float get_Value_WithArgs(Func<tk2dUIScrollbar, float> orig, tk2dUIScrollbar self);

        public delegate void LayoutReshaped_AfterArgs(Params_LayoutReshaped args);

        public delegate void LayoutReshaped_BeforeArgs(Params_LayoutReshaped args);

        public delegate void LayoutReshaped_WithArgs(Action<tk2dUIScrollbar, Vector3, Vector3> orig,
            tk2dUIScrollbar self, Vector3 dMin, Vector3 dMax);

        public delegate void MoveScrollThumbButton_AfterArgs(Params_MoveScrollThumbButton args);

        public delegate void MoveScrollThumbButton_BeforeArgs(Params_MoveScrollThumbButton args);

        public delegate void MoveScrollThumbButton_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollDirection_AfterArgs(Params_ScrollDirection args);

        public delegate void ScrollDirection_BeforeArgs(Params_ScrollDirection args);

        public delegate void ScrollDirection_WithArgs(Action<tk2dUIScrollbar, int> orig, tk2dUIScrollbar self, int dir);

        public delegate void ScrollDownButtonDown_AfterArgs(Params_ScrollDownButtonDown args);

        public delegate void ScrollDownButtonDown_BeforeArgs(Params_ScrollDownButtonDown args);

        public delegate void ScrollDownButtonDown_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollDownButtonUp_AfterArgs(Params_ScrollDownButtonUp args);

        public delegate void ScrollDownButtonUp_BeforeArgs(Params_ScrollDownButtonUp args);

        public delegate void ScrollDownButtonUp_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollDownFixed_AfterArgs(Params_ScrollDownFixed args);

        public delegate void ScrollDownFixed_BeforeArgs(Params_ScrollDownFixed args);

        public delegate void ScrollDownFixed_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollThumbButtonDown_AfterArgs(Params_ScrollThumbButtonDown args);

        public delegate void ScrollThumbButtonDown_BeforeArgs(Params_ScrollThumbButtonDown args);

        public delegate void ScrollThumbButtonDown_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollThumbButtonRelease_AfterArgs(Params_ScrollThumbButtonRelease args);

        public delegate void ScrollThumbButtonRelease_BeforeArgs(Params_ScrollThumbButtonRelease args);

        public delegate void ScrollThumbButtonRelease_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollToPosition_AfterArgs(Params_ScrollToPosition args);

        public delegate void ScrollToPosition_BeforeArgs(Params_ScrollToPosition args);

        public delegate void ScrollToPosition_WithArgs(Action<tk2dUIScrollbar, Vector3> orig, tk2dUIScrollbar self,
            Vector3 worldPos);

        public delegate void ScrollTrackButtonDown_AfterArgs(Params_ScrollTrackButtonDown args);

        public delegate void ScrollTrackButtonDown_BeforeArgs(Params_ScrollTrackButtonDown args);

        public delegate void ScrollTrackButtonDown_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollTrackButtonHoverOut_AfterArgs(Params_ScrollTrackButtonHoverOut args);

        public delegate void ScrollTrackButtonHoverOut_BeforeArgs(Params_ScrollTrackButtonHoverOut args);

        public delegate void ScrollTrackButtonHoverOut_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollTrackButtonHoverOver_AfterArgs(Params_ScrollTrackButtonHoverOver args);

        public delegate void ScrollTrackButtonHoverOver_BeforeArgs(Params_ScrollTrackButtonHoverOver args);

        public delegate void ScrollTrackButtonHoverOver_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollUpButtonDown_AfterArgs(Params_ScrollUpButtonDown args);

        public delegate void ScrollUpButtonDown_BeforeArgs(Params_ScrollUpButtonDown args);

        public delegate void ScrollUpButtonDown_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollUpButtonUp_AfterArgs(Params_ScrollUpButtonUp args);

        public delegate void ScrollUpButtonUp_BeforeArgs(Params_ScrollUpButtonUp args);

        public delegate void ScrollUpButtonUp_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void ScrollUpFixed_AfterArgs(Params_ScrollUpFixed args);

        public delegate void ScrollUpFixed_BeforeArgs(Params_ScrollUpFixed args);

        public delegate void ScrollUpFixed_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void set_BarLayoutItem_AfterArgs(Params_set_BarLayoutItem args);

        public delegate void set_BarLayoutItem_BeforeArgs(Params_set_BarLayoutItem args);

        public delegate void set_BarLayoutItem_WithArgs(Action<tk2dUIScrollbar, tk2dUILayout> orig,
            tk2dUIScrollbar self, tk2dUILayout value);

        public delegate void set_SendMessageTarget_AfterArgs(Params_set_SendMessageTarget args);

        public delegate void set_SendMessageTarget_BeforeArgs(Params_set_SendMessageTarget args);

        public delegate void set_SendMessageTarget_WithArgs(Action<tk2dUIScrollbar, GameObject> orig,
            tk2dUIScrollbar self, GameObject value);

        public delegate void set_Value_AfterArgs(Params_set_Value args);

        public delegate void set_Value_BeforeArgs(Params_set_Value args);

        public delegate void set_Value_WithArgs(Action<tk2dUIScrollbar, float> orig, tk2dUIScrollbar self, float value);

        public delegate void SetScrollPercentWithoutEvent_AfterArgs(Params_SetScrollPercentWithoutEvent args);

        public delegate void SetScrollPercentWithoutEvent_BeforeArgs(Params_SetScrollPercentWithoutEvent args);

        public delegate void SetScrollPercentWithoutEvent_WithArgs(Action<tk2dUIScrollbar, float> orig,
            tk2dUIScrollbar self, float newScrollPercent);

        public delegate void SetScrollThumbPosition_AfterArgs(Params_SetScrollThumbPosition args);

        public delegate void SetScrollThumbPosition_BeforeArgs(Params_SetScrollThumbPosition args);

        public delegate void SetScrollThumbPosition_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<tk2dUIScrollbar> orig, tk2dUIScrollbar self);

        public delegate void TrackHoverScrollWheelChange_AfterArgs(Params_TrackHoverScrollWheelChange args);

        public delegate void TrackHoverScrollWheelChange_BeforeArgs(Params_TrackHoverScrollWheelChange args);

        public delegate void TrackHoverScrollWheelChange_WithArgs(Action<tk2dUIScrollbar, float> orig,
            tk2dUIScrollbar self, float mouseWheelChange);

        public sealed class Params_get_BarLayoutItem
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_set_BarLayoutItem
        {
            public tk2dUIScrollbar self;
            public tk2dUILayout value;
        }

        public sealed class Params_get_SendMessageTarget
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_set_SendMessageTarget
        {
            public tk2dUIScrollbar self;
            public GameObject value;
        }

        public sealed class Params_get_Value
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_set_Value
        {
            public tk2dUIScrollbar self;
            public float value;
        }

        public sealed class Params_SetScrollPercentWithoutEvent
        {
            public float newScrollPercent;
            public tk2dUIScrollbar self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_Awake
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_Start
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_TrackHoverScrollWheelChange
        {
            public float mouseWheelChange;
            public tk2dUIScrollbar self;
        }

        public sealed class Params_SetScrollThumbPosition
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_MoveScrollThumbButton
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_CalculateClickWorldPos
        {
            public tk2dUIItem btn;
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollToPosition
        {
            public tk2dUIScrollbar self;
            public Vector3 worldPos;
        }

        public sealed class Params_ScrollTrackButtonDown
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollTrackButtonHoverOver
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollTrackButtonHoverOut
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollThumbButtonDown
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollThumbButtonRelease
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollUpButtonDown
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollUpButtonUp
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollDownButtonDown
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollDownButtonUp
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollUpFixed
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollDownFixed
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_CheckRepeatScrollUpDownButton
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_ScrollDirection
        {
            public int dir;
            public tk2dUIScrollbar self;
        }

        public sealed class Params_CalcScrollPercentOffsetButtonScrollDistance
        {
            public tk2dUIScrollbar self;
        }

        public sealed class Params_LayoutReshaped
        {
            public Vector3 dMax;
            public Vector3 dMin;
            public tk2dUIScrollbar self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_BarLayoutItem_BeforeArgs get_BarLayoutItem
        {
            add
            {
                HookHandler._beforeget_BarLayoutItem += value;
                HookHandler.Hookget_BarLayoutItem();
            }
            remove => HookHandler._beforeget_BarLayoutItem -= value;
        }

        public static event Delegates.set_BarLayoutItem_BeforeArgs set_BarLayoutItem
        {
            add
            {
                HookHandler._beforeset_BarLayoutItem += value;
                HookHandler.Hookset_BarLayoutItem();
            }
            remove => HookHandler._beforeset_BarLayoutItem -= value;
        }

        public static event Delegates.get_SendMessageTarget_BeforeArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._beforeget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._beforeget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_BeforeArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._beforeset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._beforeset_SendMessageTarget -= value;
        }

        public static event Delegates.get_Value_BeforeArgs get_Value
        {
            add
            {
                HookHandler._beforeget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._beforeget_Value -= value;
        }

        public static event Delegates.set_Value_BeforeArgs set_Value
        {
            add
            {
                HookHandler._beforeset_Value += value;
                HookHandler.Hookset_Value();
            }
            remove => HookHandler._beforeset_Value -= value;
        }

        public static event Delegates.SetScrollPercentWithoutEvent_BeforeArgs SetScrollPercentWithoutEvent
        {
            add
            {
                HookHandler._beforeSetScrollPercentWithoutEvent += value;
                HookHandler.HookSetScrollPercentWithoutEvent();
            }
            remove => HookHandler._beforeSetScrollPercentWithoutEvent -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.TrackHoverScrollWheelChange_BeforeArgs TrackHoverScrollWheelChange
        {
            add
            {
                HookHandler._beforeTrackHoverScrollWheelChange += value;
                HookHandler.HookTrackHoverScrollWheelChange();
            }
            remove => HookHandler._beforeTrackHoverScrollWheelChange -= value;
        }

        public static event Delegates.SetScrollThumbPosition_BeforeArgs SetScrollThumbPosition
        {
            add
            {
                HookHandler._beforeSetScrollThumbPosition += value;
                HookHandler.HookSetScrollThumbPosition();
            }
            remove => HookHandler._beforeSetScrollThumbPosition -= value;
        }

        public static event Delegates.MoveScrollThumbButton_BeforeArgs MoveScrollThumbButton
        {
            add
            {
                HookHandler._beforeMoveScrollThumbButton += value;
                HookHandler.HookMoveScrollThumbButton();
            }
            remove => HookHandler._beforeMoveScrollThumbButton -= value;
        }

        public static event Delegates.CalculateClickWorldPos_BeforeArgs CalculateClickWorldPos
        {
            add
            {
                HookHandler._beforeCalculateClickWorldPos += value;
                HookHandler.HookCalculateClickWorldPos();
            }
            remove => HookHandler._beforeCalculateClickWorldPos -= value;
        }

        public static event Delegates.ScrollToPosition_BeforeArgs ScrollToPosition
        {
            add
            {
                HookHandler._beforeScrollToPosition += value;
                HookHandler.HookScrollToPosition();
            }
            remove => HookHandler._beforeScrollToPosition -= value;
        }

        public static event Delegates.ScrollTrackButtonDown_BeforeArgs ScrollTrackButtonDown
        {
            add
            {
                HookHandler._beforeScrollTrackButtonDown += value;
                HookHandler.HookScrollTrackButtonDown();
            }
            remove => HookHandler._beforeScrollTrackButtonDown -= value;
        }

        public static event Delegates.ScrollTrackButtonHoverOver_BeforeArgs ScrollTrackButtonHoverOver
        {
            add
            {
                HookHandler._beforeScrollTrackButtonHoverOver += value;
                HookHandler.HookScrollTrackButtonHoverOver();
            }
            remove => HookHandler._beforeScrollTrackButtonHoverOver -= value;
        }

        public static event Delegates.ScrollTrackButtonHoverOut_BeforeArgs ScrollTrackButtonHoverOut
        {
            add
            {
                HookHandler._beforeScrollTrackButtonHoverOut += value;
                HookHandler.HookScrollTrackButtonHoverOut();
            }
            remove => HookHandler._beforeScrollTrackButtonHoverOut -= value;
        }

        public static event Delegates.ScrollThumbButtonDown_BeforeArgs ScrollThumbButtonDown
        {
            add
            {
                HookHandler._beforeScrollThumbButtonDown += value;
                HookHandler.HookScrollThumbButtonDown();
            }
            remove => HookHandler._beforeScrollThumbButtonDown -= value;
        }

        public static event Delegates.ScrollThumbButtonRelease_BeforeArgs ScrollThumbButtonRelease
        {
            add
            {
                HookHandler._beforeScrollThumbButtonRelease += value;
                HookHandler.HookScrollThumbButtonRelease();
            }
            remove => HookHandler._beforeScrollThumbButtonRelease -= value;
        }

        public static event Delegates.ScrollUpButtonDown_BeforeArgs ScrollUpButtonDown
        {
            add
            {
                HookHandler._beforeScrollUpButtonDown += value;
                HookHandler.HookScrollUpButtonDown();
            }
            remove => HookHandler._beforeScrollUpButtonDown -= value;
        }

        public static event Delegates.ScrollUpButtonUp_BeforeArgs ScrollUpButtonUp
        {
            add
            {
                HookHandler._beforeScrollUpButtonUp += value;
                HookHandler.HookScrollUpButtonUp();
            }
            remove => HookHandler._beforeScrollUpButtonUp -= value;
        }

        public static event Delegates.ScrollDownButtonDown_BeforeArgs ScrollDownButtonDown
        {
            add
            {
                HookHandler._beforeScrollDownButtonDown += value;
                HookHandler.HookScrollDownButtonDown();
            }
            remove => HookHandler._beforeScrollDownButtonDown -= value;
        }

        public static event Delegates.ScrollDownButtonUp_BeforeArgs ScrollDownButtonUp
        {
            add
            {
                HookHandler._beforeScrollDownButtonUp += value;
                HookHandler.HookScrollDownButtonUp();
            }
            remove => HookHandler._beforeScrollDownButtonUp -= value;
        }

        public static event Delegates.ScrollUpFixed_BeforeArgs ScrollUpFixed
        {
            add
            {
                HookHandler._beforeScrollUpFixed += value;
                HookHandler.HookScrollUpFixed();
            }
            remove => HookHandler._beforeScrollUpFixed -= value;
        }

        public static event Delegates.ScrollDownFixed_BeforeArgs ScrollDownFixed
        {
            add
            {
                HookHandler._beforeScrollDownFixed += value;
                HookHandler.HookScrollDownFixed();
            }
            remove => HookHandler._beforeScrollDownFixed -= value;
        }

        public static event Delegates.CheckRepeatScrollUpDownButton_BeforeArgs CheckRepeatScrollUpDownButton
        {
            add
            {
                HookHandler._beforeCheckRepeatScrollUpDownButton += value;
                HookHandler.HookCheckRepeatScrollUpDownButton();
            }
            remove => HookHandler._beforeCheckRepeatScrollUpDownButton -= value;
        }

        public static event Delegates.ScrollDirection_BeforeArgs ScrollDirection
        {
            add
            {
                HookHandler._beforeScrollDirection += value;
                HookHandler.HookScrollDirection();
            }
            remove => HookHandler._beforeScrollDirection -= value;
        }

        public static event Delegates.CalcScrollPercentOffsetButtonScrollDistance_BeforeArgs
            CalcScrollPercentOffsetButtonScrollDistance
            {
                add
                {
                    HookHandler._beforeCalcScrollPercentOffsetButtonScrollDistance += value;
                    HookHandler.HookCalcScrollPercentOffsetButtonScrollDistance();
                }
                remove => HookHandler._beforeCalcScrollPercentOffsetButtonScrollDistance -= value;
            }

        public static event Delegates.LayoutReshaped_BeforeArgs LayoutReshaped
        {
            add
            {
                HookHandler._beforeLayoutReshaped += value;
                HookHandler.HookLayoutReshaped();
            }
            remove => HookHandler._beforeLayoutReshaped -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_BarLayoutItem_AfterArgs get_BarLayoutItem
        {
            add
            {
                HookHandler._afterget_BarLayoutItem += value;
                HookHandler.Hookget_BarLayoutItem();
            }
            remove => HookHandler._afterget_BarLayoutItem -= value;
        }

        public static event Delegates.set_BarLayoutItem_AfterArgs set_BarLayoutItem
        {
            add
            {
                HookHandler._afterset_BarLayoutItem += value;
                HookHandler.Hookset_BarLayoutItem();
            }
            remove => HookHandler._afterset_BarLayoutItem -= value;
        }

        public static event Delegates.get_SendMessageTarget_AfterArgs get_SendMessageTarget
        {
            add
            {
                HookHandler._afterget_SendMessageTarget += value;
                HookHandler.Hookget_SendMessageTarget();
            }
            remove => HookHandler._afterget_SendMessageTarget -= value;
        }

        public static event Delegates.set_SendMessageTarget_AfterArgs set_SendMessageTarget
        {
            add
            {
                HookHandler._afterset_SendMessageTarget += value;
                HookHandler.Hookset_SendMessageTarget();
            }
            remove => HookHandler._afterset_SendMessageTarget -= value;
        }

        public static event Delegates.get_Value_AfterArgs get_Value
        {
            add
            {
                HookHandler._afterget_Value += value;
                HookHandler.Hookget_Value();
            }
            remove => HookHandler._afterget_Value -= value;
        }

        public static event Delegates.set_Value_AfterArgs set_Value
        {
            add
            {
                HookHandler._afterset_Value += value;
                HookHandler.Hookset_Value();
            }
            remove => HookHandler._afterset_Value -= value;
        }

        public static event Delegates.SetScrollPercentWithoutEvent_AfterArgs SetScrollPercentWithoutEvent
        {
            add
            {
                HookHandler._afterSetScrollPercentWithoutEvent += value;
                HookHandler.HookSetScrollPercentWithoutEvent();
            }
            remove => HookHandler._afterSetScrollPercentWithoutEvent -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.TrackHoverScrollWheelChange_AfterArgs TrackHoverScrollWheelChange
        {
            add
            {
                HookHandler._afterTrackHoverScrollWheelChange += value;
                HookHandler.HookTrackHoverScrollWheelChange();
            }
            remove => HookHandler._afterTrackHoverScrollWheelChange -= value;
        }

        public static event Delegates.SetScrollThumbPosition_AfterArgs SetScrollThumbPosition
        {
            add
            {
                HookHandler._afterSetScrollThumbPosition += value;
                HookHandler.HookSetScrollThumbPosition();
            }
            remove => HookHandler._afterSetScrollThumbPosition -= value;
        }

        public static event Delegates.MoveScrollThumbButton_AfterArgs MoveScrollThumbButton
        {
            add
            {
                HookHandler._afterMoveScrollThumbButton += value;
                HookHandler.HookMoveScrollThumbButton();
            }
            remove => HookHandler._afterMoveScrollThumbButton -= value;
        }

        public static event Delegates.CalculateClickWorldPos_AfterArgs CalculateClickWorldPos
        {
            add
            {
                HookHandler._afterCalculateClickWorldPos += value;
                HookHandler.HookCalculateClickWorldPos();
            }
            remove => HookHandler._afterCalculateClickWorldPos -= value;
        }

        public static event Delegates.ScrollToPosition_AfterArgs ScrollToPosition
        {
            add
            {
                HookHandler._afterScrollToPosition += value;
                HookHandler.HookScrollToPosition();
            }
            remove => HookHandler._afterScrollToPosition -= value;
        }

        public static event Delegates.ScrollTrackButtonDown_AfterArgs ScrollTrackButtonDown
        {
            add
            {
                HookHandler._afterScrollTrackButtonDown += value;
                HookHandler.HookScrollTrackButtonDown();
            }
            remove => HookHandler._afterScrollTrackButtonDown -= value;
        }

        public static event Delegates.ScrollTrackButtonHoverOver_AfterArgs ScrollTrackButtonHoverOver
        {
            add
            {
                HookHandler._afterScrollTrackButtonHoverOver += value;
                HookHandler.HookScrollTrackButtonHoverOver();
            }
            remove => HookHandler._afterScrollTrackButtonHoverOver -= value;
        }

        public static event Delegates.ScrollTrackButtonHoverOut_AfterArgs ScrollTrackButtonHoverOut
        {
            add
            {
                HookHandler._afterScrollTrackButtonHoverOut += value;
                HookHandler.HookScrollTrackButtonHoverOut();
            }
            remove => HookHandler._afterScrollTrackButtonHoverOut -= value;
        }

        public static event Delegates.ScrollThumbButtonDown_AfterArgs ScrollThumbButtonDown
        {
            add
            {
                HookHandler._afterScrollThumbButtonDown += value;
                HookHandler.HookScrollThumbButtonDown();
            }
            remove => HookHandler._afterScrollThumbButtonDown -= value;
        }

        public static event Delegates.ScrollThumbButtonRelease_AfterArgs ScrollThumbButtonRelease
        {
            add
            {
                HookHandler._afterScrollThumbButtonRelease += value;
                HookHandler.HookScrollThumbButtonRelease();
            }
            remove => HookHandler._afterScrollThumbButtonRelease -= value;
        }

        public static event Delegates.ScrollUpButtonDown_AfterArgs ScrollUpButtonDown
        {
            add
            {
                HookHandler._afterScrollUpButtonDown += value;
                HookHandler.HookScrollUpButtonDown();
            }
            remove => HookHandler._afterScrollUpButtonDown -= value;
        }

        public static event Delegates.ScrollUpButtonUp_AfterArgs ScrollUpButtonUp
        {
            add
            {
                HookHandler._afterScrollUpButtonUp += value;
                HookHandler.HookScrollUpButtonUp();
            }
            remove => HookHandler._afterScrollUpButtonUp -= value;
        }

        public static event Delegates.ScrollDownButtonDown_AfterArgs ScrollDownButtonDown
        {
            add
            {
                HookHandler._afterScrollDownButtonDown += value;
                HookHandler.HookScrollDownButtonDown();
            }
            remove => HookHandler._afterScrollDownButtonDown -= value;
        }

        public static event Delegates.ScrollDownButtonUp_AfterArgs ScrollDownButtonUp
        {
            add
            {
                HookHandler._afterScrollDownButtonUp += value;
                HookHandler.HookScrollDownButtonUp();
            }
            remove => HookHandler._afterScrollDownButtonUp -= value;
        }

        public static event Delegates.ScrollUpFixed_AfterArgs ScrollUpFixed
        {
            add
            {
                HookHandler._afterScrollUpFixed += value;
                HookHandler.HookScrollUpFixed();
            }
            remove => HookHandler._afterScrollUpFixed -= value;
        }

        public static event Delegates.ScrollDownFixed_AfterArgs ScrollDownFixed
        {
            add
            {
                HookHandler._afterScrollDownFixed += value;
                HookHandler.HookScrollDownFixed();
            }
            remove => HookHandler._afterScrollDownFixed -= value;
        }

        public static event Delegates.CheckRepeatScrollUpDownButton_AfterArgs CheckRepeatScrollUpDownButton
        {
            add
            {
                HookHandler._afterCheckRepeatScrollUpDownButton += value;
                HookHandler.HookCheckRepeatScrollUpDownButton();
            }
            remove => HookHandler._afterCheckRepeatScrollUpDownButton -= value;
        }

        public static event Delegates.ScrollDirection_AfterArgs ScrollDirection
        {
            add
            {
                HookHandler._afterScrollDirection += value;
                HookHandler.HookScrollDirection();
            }
            remove => HookHandler._afterScrollDirection -= value;
        }

        public static event Delegates.CalcScrollPercentOffsetButtonScrollDistance_AfterArgs
            CalcScrollPercentOffsetButtonScrollDistance
            {
                add
                {
                    HookHandler._afterCalcScrollPercentOffsetButtonScrollDistance += value;
                    HookHandler.HookCalcScrollPercentOffsetButtonScrollDistance();
                }
                remove => HookHandler._afterCalcScrollPercentOffsetButtonScrollDistance -= value;
            }

        public static event Delegates.LayoutReshaped_AfterArgs LayoutReshaped
        {
            add
            {
                HookHandler._afterLayoutReshaped += value;
                HookHandler.HookLayoutReshaped();
            }
            remove => HookHandler._afterLayoutReshaped -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_BarLayoutItem_WithArgs get_BarLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.get_BarLayoutItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_BarLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.get_BarLayoutItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_BarLayoutItem"), value);
        }

        public static event Delegates.set_BarLayoutItem_WithArgs set_BarLayoutItem
        {
            add => HookEndpointManager.Add<Delegates.set_BarLayoutItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_BarLayoutItem"), value);
            remove => HookEndpointManager.Remove<Delegates.set_BarLayoutItem_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_BarLayoutItem"), value);
        }

        public static event Delegates.get_SendMessageTarget_WithArgs get_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.get_SendMessageTarget_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SendMessageTarget_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_SendMessageTarget"), value);
        }

        public static event Delegates.set_SendMessageTarget_WithArgs set_SendMessageTarget
        {
            add => HookEndpointManager.Add<Delegates.set_SendMessageTarget_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_SendMessageTarget"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SendMessageTarget_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_SendMessageTarget"), value);
        }

        public static event Delegates.get_Value_WithArgs get_Value
        {
            add => HookEndpointManager.Add<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_Value"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "get_Value"), value);
        }

        public static event Delegates.set_Value_WithArgs set_Value
        {
            add => HookEndpointManager.Add<Delegates.set_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_Value"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Value_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dUIScrollbar), "set_Value"), value);
        }

        public static event On.tk2dUIScrollbar.hook_SetScrollPercentWithoutEvent SetScrollPercentWithoutEvent
        {
            add => On.tk2dUIScrollbar.SetScrollPercentWithoutEvent += value;
            remove => On.tk2dUIScrollbar.SetScrollPercentWithoutEvent -= value;
        }

        public static event On.tk2dUIScrollbar.hook_OnEnable OnEnable
        {
            add => On.tk2dUIScrollbar.OnEnable += value;
            remove => On.tk2dUIScrollbar.OnEnable -= value;
        }

        public static event On.tk2dUIScrollbar.hook_OnDisable OnDisable
        {
            add => On.tk2dUIScrollbar.OnDisable += value;
            remove => On.tk2dUIScrollbar.OnDisable -= value;
        }

        public static event On.tk2dUIScrollbar.hook_Awake Awake
        {
            add => On.tk2dUIScrollbar.Awake += value;
            remove => On.tk2dUIScrollbar.Awake -= value;
        }

        public static event On.tk2dUIScrollbar.hook_Start Start
        {
            add => On.tk2dUIScrollbar.Start += value;
            remove => On.tk2dUIScrollbar.Start -= value;
        }

        public static event On.tk2dUIScrollbar.hook_TrackHoverScrollWheelChange TrackHoverScrollWheelChange
        {
            add => On.tk2dUIScrollbar.TrackHoverScrollWheelChange += value;
            remove => On.tk2dUIScrollbar.TrackHoverScrollWheelChange -= value;
        }

        public static event On.tk2dUIScrollbar.hook_SetScrollThumbPosition SetScrollThumbPosition
        {
            add => On.tk2dUIScrollbar.SetScrollThumbPosition += value;
            remove => On.tk2dUIScrollbar.SetScrollThumbPosition -= value;
        }

        public static event On.tk2dUIScrollbar.hook_MoveScrollThumbButton MoveScrollThumbButton
        {
            add => On.tk2dUIScrollbar.MoveScrollThumbButton += value;
            remove => On.tk2dUIScrollbar.MoveScrollThumbButton -= value;
        }

        public static event On.tk2dUIScrollbar.hook_CalculateClickWorldPos CalculateClickWorldPos
        {
            add => On.tk2dUIScrollbar.CalculateClickWorldPos += value;
            remove => On.tk2dUIScrollbar.CalculateClickWorldPos -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollToPosition ScrollToPosition
        {
            add => On.tk2dUIScrollbar.ScrollToPosition += value;
            remove => On.tk2dUIScrollbar.ScrollToPosition -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollTrackButtonDown ScrollTrackButtonDown
        {
            add => On.tk2dUIScrollbar.ScrollTrackButtonDown += value;
            remove => On.tk2dUIScrollbar.ScrollTrackButtonDown -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollTrackButtonHoverOver ScrollTrackButtonHoverOver
        {
            add => On.tk2dUIScrollbar.ScrollTrackButtonHoverOver += value;
            remove => On.tk2dUIScrollbar.ScrollTrackButtonHoverOver -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollTrackButtonHoverOut ScrollTrackButtonHoverOut
        {
            add => On.tk2dUIScrollbar.ScrollTrackButtonHoverOut += value;
            remove => On.tk2dUIScrollbar.ScrollTrackButtonHoverOut -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollThumbButtonDown ScrollThumbButtonDown
        {
            add => On.tk2dUIScrollbar.ScrollThumbButtonDown += value;
            remove => On.tk2dUIScrollbar.ScrollThumbButtonDown -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollThumbButtonRelease ScrollThumbButtonRelease
        {
            add => On.tk2dUIScrollbar.ScrollThumbButtonRelease += value;
            remove => On.tk2dUIScrollbar.ScrollThumbButtonRelease -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollUpButtonDown ScrollUpButtonDown
        {
            add => On.tk2dUIScrollbar.ScrollUpButtonDown += value;
            remove => On.tk2dUIScrollbar.ScrollUpButtonDown -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollUpButtonUp ScrollUpButtonUp
        {
            add => On.tk2dUIScrollbar.ScrollUpButtonUp += value;
            remove => On.tk2dUIScrollbar.ScrollUpButtonUp -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollDownButtonDown ScrollDownButtonDown
        {
            add => On.tk2dUIScrollbar.ScrollDownButtonDown += value;
            remove => On.tk2dUIScrollbar.ScrollDownButtonDown -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollDownButtonUp ScrollDownButtonUp
        {
            add => On.tk2dUIScrollbar.ScrollDownButtonUp += value;
            remove => On.tk2dUIScrollbar.ScrollDownButtonUp -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollUpFixed ScrollUpFixed
        {
            add => On.tk2dUIScrollbar.ScrollUpFixed += value;
            remove => On.tk2dUIScrollbar.ScrollUpFixed -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollDownFixed ScrollDownFixed
        {
            add => On.tk2dUIScrollbar.ScrollDownFixed += value;
            remove => On.tk2dUIScrollbar.ScrollDownFixed -= value;
        }

        public static event On.tk2dUIScrollbar.hook_CheckRepeatScrollUpDownButton CheckRepeatScrollUpDownButton
        {
            add => On.tk2dUIScrollbar.CheckRepeatScrollUpDownButton += value;
            remove => On.tk2dUIScrollbar.CheckRepeatScrollUpDownButton -= value;
        }

        public static event On.tk2dUIScrollbar.hook_ScrollDirection ScrollDirection
        {
            add => On.tk2dUIScrollbar.ScrollDirection += value;
            remove => On.tk2dUIScrollbar.ScrollDirection -= value;
        }

        public static event On.tk2dUIScrollbar.hook_CalcScrollPercentOffsetButtonScrollDistance
            CalcScrollPercentOffsetButtonScrollDistance
            {
                add => On.tk2dUIScrollbar.CalcScrollPercentOffsetButtonScrollDistance += value;
                remove => On.tk2dUIScrollbar.CalcScrollPercentOffsetButtonScrollDistance -= value;
            }

        public static event On.tk2dUIScrollbar.hook_LayoutReshaped LayoutReshaped
        {
            add => On.tk2dUIScrollbar.LayoutReshaped += value;
            remove => On.tk2dUIScrollbar.LayoutReshaped -= value;
        }
    }
}