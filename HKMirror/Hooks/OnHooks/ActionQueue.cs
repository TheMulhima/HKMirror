using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ActionQueue class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnActionQueue
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookNext()
{
if (!HookedList.Contains("Next"))
{
HookedList.Add("Next");
On.ActionQueue.Next += Next;

}
}
internal static event Delegates.Next_BeforeArgs _beforeNext;
internal static event Delegates.Next_AfterArgs _afterNext;
private static void Next(On.ActionQueue.orig_Next orig,ActionQueue self)
{
Delegates.Params_Next @params = new() 
{
self = self
};
if (_beforeNext != null)
{
foreach (Delegates.Next_BeforeArgs toInvoke in _beforeNext.GetInvocationList())
{
try
{
_beforeNext?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterNext != null)
{
foreach (Delegates.Next_AfterArgs toInvoke in _afterNext.GetInvocationList())
{
try
{
_afterNext.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Next
{
public ActionQueue self;
}
public delegate void Next_BeforeArgs(Params_Next args);
public delegate void Next_AfterArgs(Params_Next args);
public delegate void Next_WithArgs (Action<ActionQueue> orig, ActionQueue self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Next_BeforeArgs Next
{
add
{

HookHandler._beforeNext += value;
HookHandler.HookNext();
}
remove => HookHandler._beforeNext -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Next_AfterArgs Next
{
add
{

HookHandler._afterNext += value;
HookHandler.HookNext();
}
remove => HookHandler._afterNext -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.ActionQueue.hook_Next Next
{
add => On.ActionQueue.Next += value;
remove => On.ActionQueue.Next -= value;
}
}

}
