using Modding.Patches;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using Newtonsoft.Json.Serialization;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ShouldSerializeContractResolver class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnShouldSerializeContractResolver
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookCreateProperty()
        {
            if (!HookedList.Contains("CreateProperty"))
            {
                HookedList.Add("CreateProperty");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ShouldSerializeContractResolver), "CreateProperty"),
                    CreateProperty);
            }
        }

        internal static event Delegates.CreateProperty_BeforeArgs _beforeCreateProperty;
        internal static event Delegates.CreateProperty_AfterArgs _afterCreateProperty;

        private static JsonProperty CreateProperty(
            Func<ShouldSerializeContractResolver, MemberInfo, MemberSerialization, JsonProperty> orig,
            ShouldSerializeContractResolver self, MemberInfo member, MemberSerialization memberSerialization)
        {
            Delegates.Params_CreateProperty @params = new()
            {
                self = self, member = member, memberSerialization = memberSerialization
            };
            if (_beforeCreateProperty != null)
                foreach (Delegates.CreateProperty_BeforeArgs toInvoke in _beforeCreateProperty.GetInvocationList())
                    try
                    {
                        _beforeCreateProperty?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            member = @params.member;
            memberSerialization = @params.memberSerialization;
            var retVal = orig(self, member, memberSerialization);
            if (_afterCreateProperty != null)
                foreach (Delegates.CreateProperty_AfterArgs toInvoke in _afterCreateProperty.GetInvocationList())
                    try
                    {
                        retVal = _afterCreateProperty.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate JsonProperty CreateProperty_AfterArgs(Params_CreateProperty args, JsonProperty ret);

        public delegate void CreateProperty_BeforeArgs(Params_CreateProperty args);

        public delegate JsonProperty CreateProperty_WithArgs(
            Func<ShouldSerializeContractResolver, MemberInfo, MemberSerialization, JsonProperty> orig,
            ShouldSerializeContractResolver self, MemberInfo member, MemberSerialization memberSerialization);

        public sealed class Params_CreateProperty
        {
            public MemberInfo member;
            public MemberSerialization memberSerialization;
            public ShouldSerializeContractResolver self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.CreateProperty_BeforeArgs CreateProperty
        {
            add
            {
                HookHandler._beforeCreateProperty += value;
                HookHandler.HookCreateProperty();
            }
            remove => HookHandler._beforeCreateProperty -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.CreateProperty_AfterArgs CreateProperty
        {
            add
            {
                HookHandler._afterCreateProperty += value;
                HookHandler.HookCreateProperty();
            }
            remove => HookHandler._afterCreateProperty -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.CreateProperty_WithArgs CreateProperty
        {
            add => HookEndpointManager.Add<Delegates.CreateProperty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShouldSerializeContractResolver), "CreateProperty"), value);
            remove => HookEndpointManager.Remove<Delegates.CreateProperty_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ShouldSerializeContractResolver), "CreateProperty"), value);
        }
    }
}