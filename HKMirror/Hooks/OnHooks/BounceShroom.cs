namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for BounceShroom class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBounceShroom
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.BounceShroom.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.BounceShroom.orig_Awake orig, BounceShroom self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.BounceShroom.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.BounceShroom.orig_Start orig, BounceShroom self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookIdle()
        {
            if (!HookedList.Contains("Idle"))
            {
                HookedList.Add("Idle");
                On.BounceShroom.Idle += Idle;
            }
        }

        internal static event Delegates.Idle_BeforeArgs _beforeIdle;

        private static IEnumerator Idle(On.BounceShroom.orig_Idle orig, BounceShroom self)
        {
            Delegates.Params_Idle @params = new()
            {
                self = self
            };
            _beforeIdle?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookBounceSmall()
        {
            if (!HookedList.Contains("BounceSmall"))
            {
                HookedList.Add("BounceSmall");
                On.BounceShroom.BounceSmall += BounceSmall;
            }
        }

        internal static event Delegates.BounceSmall_BeforeArgs _beforeBounceSmall;
        internal static event Delegates.BounceSmall_NormalArgs _afterBounceSmall;

        private static void BounceSmall(On.BounceShroom.orig_BounceSmall orig, BounceShroom self)
        {
            Delegates.Params_BounceSmall @params = new()
            {
                self = self
            };
            _beforeBounceSmall?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBounceSmall != null) _afterBounceSmall.Invoke(@params);
        }

        internal static void HookBounce()
        {
            if (!HookedList.Contains("Bounce"))
            {
                HookedList.Add("Bounce");
                On.BounceShroom.Bounce += Bounce;
            }
        }

        internal static event Delegates.Bounce_BeforeArgs _beforeBounce;

        private static IEnumerator Bounce(On.BounceShroom.orig_Bounce orig, BounceShroom self)
        {
            Delegates.Params_Bounce @params = new()
            {
                self = self
            };
            _beforeBounce?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookBounceLarge()
        {
            if (!HookedList.Contains("BounceLarge"))
            {
                HookedList.Add("BounceLarge");
                On.BounceShroom.BounceLarge += BounceLarge;
            }
        }

        internal static event Delegates.BounceLarge_BeforeArgs _beforeBounceLarge;
        internal static event Delegates.BounceLarge_NormalArgs _afterBounceLarge;

        private static void BounceLarge(On.BounceShroom.orig_BounceLarge orig, BounceShroom self, bool useEffects)
        {
            Delegates.Params_BounceLarge @params = new()
            {
                self = self, useEffects = useEffects
            };
            _beforeBounceLarge?.Invoke(@params);
            self = @params.self;
            useEffects = @params.useEffects;
            orig(self, useEffects);
            if (_afterBounceLarge != null) _afterBounceLarge.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Bounce_BeforeArgs(Params_Bounce args);

        public delegate IEnumerator Bounce_NormalArgs(Params_Bounce args);

        public delegate void BounceLarge_BeforeArgs(Params_BounceLarge args);

        public delegate void BounceLarge_NormalArgs(Params_BounceLarge args);

        public delegate void BounceSmall_BeforeArgs(Params_BounceSmall args);

        public delegate void BounceSmall_NormalArgs(Params_BounceSmall args);

        public delegate void Idle_BeforeArgs(Params_Idle args);

        public delegate IEnumerator Idle_NormalArgs(Params_Idle args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public BounceShroom self;
        }

        public sealed class Params_Start
        {
            public BounceShroom self;
        }

        public sealed class Params_Idle
        {
            public BounceShroom self;
        }

        public sealed class Params_BounceSmall
        {
            public BounceShroom self;
        }

        public sealed class Params_Bounce
        {
            public BounceShroom self;
        }

        public sealed class Params_BounceLarge
        {
            public BounceShroom self;
            public bool useEffects;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Idle_BeforeArgs Idle
        {
            add
            {
                HookHandler._beforeIdle += value;
                HookHandler.HookIdle();
            }
            remove => HookHandler._beforeIdle -= value;
        }

        public static event Delegates.BounceSmall_BeforeArgs BounceSmall
        {
            add
            {
                HookHandler._beforeBounceSmall += value;
                HookHandler.HookBounceSmall();
            }
            remove => HookHandler._beforeBounceSmall -= value;
        }

        public static event Delegates.Bounce_BeforeArgs Bounce
        {
            add
            {
                HookHandler._beforeBounce += value;
                HookHandler.HookBounce();
            }
            remove => HookHandler._beforeBounce -= value;
        }

        public static event Delegates.BounceLarge_BeforeArgs BounceLarge
        {
            add
            {
                HookHandler._beforeBounceLarge += value;
                HookHandler.HookBounceLarge();
            }
            remove => HookHandler._beforeBounceLarge -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.BounceSmall_NormalArgs BounceSmall
        {
            add
            {
                HookHandler._afterBounceSmall += value;
                HookHandler.HookBounceSmall();
            }
            remove => HookHandler._afterBounceSmall -= value;
        }

        public static event Delegates.BounceLarge_NormalArgs BounceLarge
        {
            add
            {
                HookHandler._afterBounceLarge += value;
                HookHandler.HookBounceLarge();
            }
            remove => HookHandler._afterBounceLarge -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.BounceShroom.hook_Awake Awake
        {
            add => On.BounceShroom.Awake += value;
            remove => On.BounceShroom.Awake -= value;
        }

        public static event On.BounceShroom.hook_Start Start
        {
            add => On.BounceShroom.Start += value;
            remove => On.BounceShroom.Start -= value;
        }

        public static event On.BounceShroom.hook_Idle Idle
        {
            add => On.BounceShroom.Idle += value;
            remove => On.BounceShroom.Idle -= value;
        }

        public static event On.BounceShroom.hook_BounceSmall BounceSmall
        {
            add => On.BounceShroom.BounceSmall += value;
            remove => On.BounceShroom.BounceSmall -= value;
        }

        public static event On.BounceShroom.hook_Bounce Bounce
        {
            add => On.BounceShroom.Bounce += value;
            remove => On.BounceShroom.Bounce -= value;
        }

        public static event On.BounceShroom.hook_BounceLarge BounceLarge
        {
            add => On.BounceShroom.BounceLarge += value;
            remove => On.BounceShroom.BounceLarge -= value;
        }
    }
}