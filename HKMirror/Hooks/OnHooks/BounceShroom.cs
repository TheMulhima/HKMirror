using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for BounceShroom class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnBounceShroom
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.BounceShroom.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.BounceShroom.orig_Awake orig,BounceShroom self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.BounceShroom.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.BounceShroom.orig_Start orig,BounceShroom self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookIdle()
{
if (!HookedList.Contains("Idle"))
{
HookedList.Add("Idle");
On.BounceShroom.Idle += Idle;

}
}
internal static event Delegates.Idle_BeforeArgs _beforeIdle;
private static System.Collections.IEnumerator Idle(On.BounceShroom.orig_Idle orig,BounceShroom self)
{
Delegates.Params_Idle @params = new() 
{
self = self
};
if (_beforeIdle != null)
{
foreach (Delegates.Idle_BeforeArgs toInvoke in _beforeIdle.GetInvocationList())
{
try
{
_beforeIdle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookBounceSmall()
{
if (!HookedList.Contains("BounceSmall"))
{
HookedList.Add("BounceSmall");
On.BounceShroom.BounceSmall += BounceSmall;

}
}
internal static event Delegates.BounceSmall_BeforeArgs _beforeBounceSmall;
internal static event Delegates.BounceSmall_AfterArgs _afterBounceSmall;
private static void BounceSmall(On.BounceShroom.orig_BounceSmall orig,BounceShroom self)
{
Delegates.Params_BounceSmall @params = new() 
{
self = self
};
if (_beforeBounceSmall != null)
{
foreach (Delegates.BounceSmall_BeforeArgs toInvoke in _beforeBounceSmall.GetInvocationList())
{
try
{
_beforeBounceSmall?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterBounceSmall != null)
{
foreach (Delegates.BounceSmall_AfterArgs toInvoke in _afterBounceSmall.GetInvocationList())
{
try
{
_afterBounceSmall.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookBounce()
{
if (!HookedList.Contains("Bounce"))
{
HookedList.Add("Bounce");
On.BounceShroom.Bounce += Bounce;

}
}
internal static event Delegates.Bounce_BeforeArgs _beforeBounce;
private static System.Collections.IEnumerator Bounce(On.BounceShroom.orig_Bounce orig,BounceShroom self)
{
Delegates.Params_Bounce @params = new() 
{
self = self
};
if (_beforeBounce != null)
{
foreach (Delegates.Bounce_BeforeArgs toInvoke in _beforeBounce.GetInvocationList())
{
try
{
_beforeBounce?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookBounceLarge()
{
if (!HookedList.Contains("BounceLarge"))
{
HookedList.Add("BounceLarge");
On.BounceShroom.BounceLarge += BounceLarge;

}
}
internal static event Delegates.BounceLarge_BeforeArgs _beforeBounceLarge;
internal static event Delegates.BounceLarge_AfterArgs _afterBounceLarge;
private static void BounceLarge(On.BounceShroom.orig_BounceLarge orig,BounceShroom self,  bool useEffects)
{
Delegates.Params_BounceLarge @params = new() 
{
self = self
, useEffects = useEffects
};
if (_beforeBounceLarge != null)
{
foreach (Delegates.BounceLarge_BeforeArgs toInvoke in _beforeBounceLarge.GetInvocationList())
{
try
{
_beforeBounceLarge?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
useEffects = @params.useEffects;
orig(self, useEffects);
if (_afterBounceLarge != null)
{
foreach (Delegates.BounceLarge_AfterArgs toInvoke in _afterBounceLarge.GetInvocationList())
{
try
{
_afterBounceLarge.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Awake
{
public BounceShroom self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<BounceShroom> orig, BounceShroom self);
public sealed class Params_Start
{
public BounceShroom self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<BounceShroom> orig, BounceShroom self);
public sealed class Params_Idle
{
public BounceShroom self;
}
public delegate void Idle_BeforeArgs(Params_Idle args);
public delegate System.Collections.IEnumerator Idle_AfterArgs(Params_Idle args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Idle_WithArgs (Func<BounceShroom, System.Collections.IEnumerator> orig, BounceShroom self);
public sealed class Params_BounceSmall
{
public BounceShroom self;
}
public delegate void BounceSmall_BeforeArgs(Params_BounceSmall args);
public delegate void BounceSmall_AfterArgs(Params_BounceSmall args);
public delegate void BounceSmall_WithArgs (Action<BounceShroom> orig, BounceShroom self);
public sealed class Params_Bounce
{
public BounceShroom self;
}
public delegate void Bounce_BeforeArgs(Params_Bounce args);
public delegate System.Collections.IEnumerator Bounce_AfterArgs(Params_Bounce args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator Bounce_WithArgs (Func<BounceShroom, System.Collections.IEnumerator> orig, BounceShroom self);
public sealed class Params_BounceLarge
{
public BounceShroom self;
public bool useEffects;
}
public delegate void BounceLarge_BeforeArgs(Params_BounceLarge args);
public delegate void BounceLarge_AfterArgs(Params_BounceLarge args);
public delegate void BounceLarge_WithArgs (Action<BounceShroom,  bool> orig, BounceShroom self,  bool useEffects);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Idle_BeforeArgs Idle
{
add
{

HookHandler._beforeIdle += value;
HookHandler.HookIdle();
}
remove => HookHandler._beforeIdle -= value;
}
public static event Delegates.BounceSmall_BeforeArgs BounceSmall
{
add
{

HookHandler._beforeBounceSmall += value;
HookHandler.HookBounceSmall();
}
remove => HookHandler._beforeBounceSmall -= value;
}
public static event Delegates.Bounce_BeforeArgs Bounce
{
add
{

HookHandler._beforeBounce += value;
HookHandler.HookBounce();
}
remove => HookHandler._beforeBounce -= value;
}
public static event Delegates.BounceLarge_BeforeArgs BounceLarge
{
add
{

HookHandler._beforeBounceLarge += value;
HookHandler.HookBounceLarge();
}
remove => HookHandler._beforeBounceLarge -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.BounceSmall_AfterArgs BounceSmall
{
add
{

HookHandler._afterBounceSmall += value;
HookHandler.HookBounceSmall();
}
remove => HookHandler._afterBounceSmall -= value;
}
public static event Delegates.BounceLarge_AfterArgs BounceLarge
{
add
{

HookHandler._afterBounceLarge += value;
HookHandler.HookBounceLarge();
}
remove => HookHandler._afterBounceLarge -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.BounceShroom.hook_Awake Awake
{
add => On.BounceShroom.Awake += value;
remove => On.BounceShroom.Awake -= value;
}
public static event On.BounceShroom.hook_Start Start
{
add => On.BounceShroom.Start += value;
remove => On.BounceShroom.Start -= value;
}
public static event On.BounceShroom.hook_Idle Idle
{
add => On.BounceShroom.Idle += value;
remove => On.BounceShroom.Idle -= value;
}
public static event On.BounceShroom.hook_BounceSmall BounceSmall
{
add => On.BounceShroom.BounceSmall += value;
remove => On.BounceShroom.BounceSmall -= value;
}
public static event On.BounceShroom.hook_Bounce Bounce
{
add => On.BounceShroom.Bounce += value;
remove => On.BounceShroom.Bounce -= value;
}
public static event On.BounceShroom.hook_BounceLarge BounceLarge
{
add => On.BounceShroom.BounceLarge += value;
remove => On.BounceShroom.BounceLarge -= value;
}
}

}
