using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MouseBindingSourceListener class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMouseBindingSourceListener
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<MouseBindingSourceListener> orig, MouseBindingSourceListener self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookListen()
        {
            if (!HookedList.Contains("Listen"))
            {
                HookedList.Add("Listen");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "Listen"), Listen);
            }
        }

        internal static event Delegates.Listen_BeforeArgs _beforeListen;
        internal static event Delegates.Listen_NormalArgs _afterListen;

        private static BindingSource Listen(
            Func<MouseBindingSourceListener, BindingListenOptions, InputDevice, BindingSource> orig,
            MouseBindingSourceListener self, BindingListenOptions listenOptions, InputDevice device)
        {
            Delegates.Params_Listen @params = new()
            {
                self = self, listenOptions = listenOptions, device = device
            };
            _beforeListen?.Invoke(@params);
            self = @params.self;
            listenOptions = @params.listenOptions;
            device = @params.device;
            var retVal = orig(self, listenOptions, device);
            if (_afterListen != null) retVal = _afterListen.Invoke(@params);
            return retVal;
        }

        internal static void HookIsPressed()
        {
            if (!HookedList.Contains("IsPressed"))
            {
                HookedList.Add("IsPressed");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "IsPressed"), IsPressed);
            }
        }

        internal static event Delegates.IsPressed_BeforeArgs _beforeIsPressed;
        internal static event Delegates.IsPressed_NormalArgs _afterIsPressed;

        private static bool IsPressed(Func<MouseBindingSourceListener, Mouse, bool> orig,
            MouseBindingSourceListener self, Mouse control)
        {
            Delegates.Params_IsPressed @params = new()
            {
                self = self, control = control
            };
            _beforeIsPressed?.Invoke(@params);
            self = @params.self;
            control = @params.control;
            var retVal = orig(self, control);
            if (_afterIsPressed != null) retVal = _afterIsPressed.Invoke(@params);
            return retVal;
        }

        internal static void HookListenForControl()
        {
            if (!HookedList.Contains("ListenForControl"))
            {
                HookedList.Add("ListenForControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "ListenForControl"),
                    ListenForControl);
            }
        }

        internal static event Delegates.ListenForControl_BeforeArgs _beforeListenForControl;
        internal static event Delegates.ListenForControl_NormalArgs _afterListenForControl;

        private static Mouse ListenForControl(Func<MouseBindingSourceListener, BindingListenOptions, Mouse> orig,
            MouseBindingSourceListener self, BindingListenOptions listenOptions)
        {
            Delegates.Params_ListenForControl @params = new()
            {
                self = self, listenOptions = listenOptions
            };
            _beforeListenForControl?.Invoke(@params);
            self = @params.self;
            listenOptions = @params.listenOptions;
            var retVal = orig(self, listenOptions);
            if (_afterListenForControl != null) retVal = _afterListenForControl.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void IsPressed_BeforeArgs(Params_IsPressed args);

        public delegate bool IsPressed_NormalArgs(Params_IsPressed args);

        public delegate void Listen_BeforeArgs(Params_Listen args);

        public delegate BindingSource Listen_NormalArgs(Params_Listen args);

        public delegate void ListenForControl_BeforeArgs(Params_ListenForControl args);

        public delegate Mouse ListenForControl_NormalArgs(Params_ListenForControl args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public sealed class Params_Reset
        {
            public MouseBindingSourceListener self;
        }

        public sealed class Params_Listen
        {
            public InputDevice device;
            public BindingListenOptions listenOptions;
            public MouseBindingSourceListener self;
        }

        public sealed class Params_IsPressed
        {
            public Mouse control;
            public MouseBindingSourceListener self;
        }

        public sealed class Params_ListenForControl
        {
            public BindingListenOptions listenOptions;
            public MouseBindingSourceListener self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.Listen_BeforeArgs Listen
        {
            add
            {
                HookHandler._beforeListen += value;
                HookHandler.HookListen();
            }
            remove => HookHandler._beforeListen -= value;
        }

        public static event Delegates.IsPressed_BeforeArgs IsPressed
        {
            add
            {
                HookHandler._beforeIsPressed += value;
                HookHandler.HookIsPressed();
            }
            remove => HookHandler._beforeIsPressed -= value;
        }

        public static event Delegates.ListenForControl_BeforeArgs ListenForControl
        {
            add
            {
                HookHandler._beforeListenForControl += value;
                HookHandler.HookListenForControl();
            }
            remove => HookHandler._beforeListenForControl -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.Listen_NormalArgs Listen
        {
            add
            {
                HookHandler._afterListen += value;
                HookHandler.HookListen();
            }
            remove => HookHandler._afterListen -= value;
        }

        public static event Delegates.IsPressed_NormalArgs IsPressed
        {
            add
            {
                HookHandler._afterIsPressed += value;
                HookHandler.HookIsPressed();
            }
            remove => HookHandler._afterIsPressed -= value;
        }

        public static event Delegates.ListenForControl_NormalArgs ListenForControl
        {
            add
            {
                HookHandler._afterListenForControl += value;
                HookHandler.HookListenForControl();
            }
            remove => HookHandler._afterListenForControl -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "Reset"), value);
        }

        public static event Delegates.Listen_NormalArgs Listen
        {
            add => HookEndpointManager.Add<Delegates.Listen_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "Listen"), value);
            remove => HookEndpointManager.Remove<Delegates.Listen_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "Listen"), value);
        }

        public static event Delegates.IsPressed_NormalArgs IsPressed
        {
            add => HookEndpointManager.Add<Delegates.IsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "IsPressed"), value);
            remove => HookEndpointManager.Remove<Delegates.IsPressed_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "IsPressed"), value);
        }

        public static event Delegates.ListenForControl_NormalArgs ListenForControl
        {
            add => HookEndpointManager.Add<Delegates.ListenForControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "ListenForControl"), value);
            remove => HookEndpointManager.Remove<Delegates.ListenForControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(MouseBindingSourceListener), "ListenForControl"), value);
        }
    }
}