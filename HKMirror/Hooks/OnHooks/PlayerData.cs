using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PlayerData class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPlayerData
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookHasMapForScene()
        {
            if (!HookedList.Contains("HasMapForScene"))
            {
                HookedList.Add("HasMapForScene");
                On.PlayerData.HasMapForScene += HasMapForScene;
            }
        }

        internal static event Delegates.HasMapForScene_BeforeArgs _beforeHasMapForScene;
        internal static event Delegates.HasMapForScene_AfterArgs _afterHasMapForScene;

        private static bool HasMapForScene(On.PlayerData.orig_HasMapForScene orig, PlayerData self, string sceneName)
        {
            Delegates.Params_HasMapForScene @params = new()
            {
                self = self, sceneName = sceneName
            };
            if (_beforeHasMapForScene != null)
                foreach (Delegates.HasMapForScene_BeforeArgs toInvoke in _beforeHasMapForScene.GetInvocationList())
                    try
                    {
                        _beforeHasMapForScene?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            sceneName = @params.sceneName;
            var retVal = orig(self, sceneName);
            if (_afterHasMapForScene != null)
                foreach (Delegates.HasMapForScene_AfterArgs toInvoke in _afterHasMapForScene.GetInvocationList())
                    try
                    {
                        retVal = _afterHasMapForScene.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_CurrentMaxHealth()
        {
            if (!HookedList.Contains("get_CurrentMaxHealth"))
            {
                HookedList.Add("get_CurrentMaxHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "get_CurrentMaxHealth"),
                    get_CurrentMaxHealth);
            }
        }

        internal static event Delegates.get_CurrentMaxHealth_BeforeArgs _beforeget_CurrentMaxHealth;
        internal static event Delegates.get_CurrentMaxHealth_AfterArgs _afterget_CurrentMaxHealth;

        private static int get_CurrentMaxHealth(Func<PlayerData, int> orig, PlayerData self)
        {
            Delegates.Params_get_CurrentMaxHealth @params = new()
            {
                self = self
            };
            if (_beforeget_CurrentMaxHealth != null)
                foreach (Delegates.get_CurrentMaxHealth_BeforeArgs toInvoke in _beforeget_CurrentMaxHealth
                             .GetInvocationList())
                    try
                    {
                        _beforeget_CurrentMaxHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CurrentMaxHealth != null)
                foreach (Delegates.get_CurrentMaxHealth_AfterArgs toInvoke in _afterget_CurrentMaxHealth
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_CurrentMaxHealth.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_instance()
        {
            if (!HookedList.Contains("get_instance"))
            {
                HookedList.Add("get_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "get_instance", false), get_instance);
            }
        }

        internal static event Delegates.get_instance_BeforeArgs _beforeget_instance;
        internal static event Delegates.get_instance_AfterArgs _afterget_instance;

        private static PlayerData get_instance(Func<PlayerData> orig)
        {
            if (_beforeget_instance != null)
                foreach (Delegates.get_instance_BeforeArgs toInvoke in _beforeget_instance.GetInvocationList())
                    try
                    {
                        _beforeget_instance?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_instance != null)
                foreach (Delegates.get_instance_AfterArgs toInvoke in _afterget_instance.GetInvocationList())
                    try
                    {
                        retVal = _afterget_instance.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_instance()
        {
            if (!HookedList.Contains("set_instance"))
            {
                HookedList.Add("set_instance");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "set_instance", false), set_instance);
            }
        }

        internal static event Delegates.set_instance_BeforeArgs _beforeset_instance;
        internal static event Delegates.set_instance_AfterArgs _afterset_instance;

        private static void set_instance(Action<PlayerData> orig, PlayerData value)
        {
            Delegates.Params_set_instance @params = new()
            {
                value = value
            };
            if (_beforeset_instance != null)
                foreach (Delegates.set_instance_BeforeArgs toInvoke in _beforeset_instance.GetInvocationList())
                    try
                    {
                        _beforeset_instance?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_instance != null)
                foreach (Delegates.set_instance_AfterArgs toInvoke in _afterset_instance.GetInvocationList())
                    try
                    {
                        _afterset_instance.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookPrintStory()
        {
            if (!HookedList.Contains("PrintStory"))
            {
                HookedList.Add("PrintStory");
                On.PlayerData.PrintStory += PrintStory;
            }
        }

        internal static event Delegates.PrintStory_BeforeArgs _beforePrintStory;
        internal static event Delegates.PrintStory_AfterArgs _afterPrintStory;

        private static void PrintStory(On.PlayerData.orig_PrintStory orig, PlayerData self)
        {
            Delegates.Params_PrintStory @params = new()
            {
                self = self
            };
            if (_beforePrintStory != null)
                foreach (Delegates.PrintStory_BeforeArgs toInvoke in _beforePrintStory.GetInvocationList())
                    try
                    {
                        _beforePrintStory?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterPrintStory != null)
                foreach (Delegates.PrintStory_AfterArgs toInvoke in _afterPrintStory.GetInvocationList())
                    try
                    {
                        _afterPrintStory.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                On.PlayerData.Reset += Reset;
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(On.PlayerData.orig_Reset orig, PlayerData self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateGameMap()
        {
            if (!HookedList.Contains("UpdateGameMap"))
            {
                HookedList.Add("UpdateGameMap");
                On.PlayerData.UpdateGameMap += UpdateGameMap;
            }
        }

        internal static event Delegates.UpdateGameMap_BeforeArgs _beforeUpdateGameMap;
        internal static event Delegates.UpdateGameMap_AfterArgs _afterUpdateGameMap;

        private static bool UpdateGameMap(On.PlayerData.orig_UpdateGameMap orig, PlayerData self)
        {
            Delegates.Params_UpdateGameMap @params = new()
            {
                self = self
            };
            if (_beforeUpdateGameMap != null)
                foreach (Delegates.UpdateGameMap_BeforeArgs toInvoke in _beforeUpdateGameMap.GetInvocationList())
                    try
                    {
                        _beforeUpdateGameMap?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterUpdateGameMap != null)
                foreach (Delegates.UpdateGameMap_AfterArgs toInvoke in _afterUpdateGameMap.GetInvocationList())
                    try
                    {
                        retVal = _afterUpdateGameMap.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookCheckAllMaps()
        {
            if (!HookedList.Contains("CheckAllMaps"))
            {
                HookedList.Add("CheckAllMaps");
                On.PlayerData.CheckAllMaps += CheckAllMaps;
            }
        }

        internal static event Delegates.CheckAllMaps_BeforeArgs _beforeCheckAllMaps;
        internal static event Delegates.CheckAllMaps_AfterArgs _afterCheckAllMaps;

        private static void CheckAllMaps(On.PlayerData.orig_CheckAllMaps orig, PlayerData self)
        {
            Delegates.Params_CheckAllMaps @params = new()
            {
                self = self
            };
            if (_beforeCheckAllMaps != null)
                foreach (Delegates.CheckAllMaps_BeforeArgs toInvoke in _beforeCheckAllMaps.GetInvocationList())
                    try
                    {
                        _beforeCheckAllMaps?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCheckAllMaps != null)
                foreach (Delegates.CheckAllMaps_AfterArgs toInvoke in _afterCheckAllMaps.GetInvocationList())
                    try
                    {
                        _afterCheckAllMaps.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBool()
        {
            if (!HookedList.Contains("SetBool"))
            {
                HookedList.Add("SetBool");
                On.PlayerData.SetBool += SetBool;
            }
        }

        internal static event Delegates.SetBool_BeforeArgs _beforeSetBool;
        internal static event Delegates.SetBool_AfterArgs _afterSetBool;

        private static void SetBool(On.PlayerData.orig_SetBool orig, PlayerData self, string boolName, bool value)
        {
            Delegates.Params_SetBool @params = new()
            {
                self = self, boolName = boolName, value = value
            };
            if (_beforeSetBool != null)
                foreach (Delegates.SetBool_BeforeArgs toInvoke in _beforeSetBool.GetInvocationList())
                    try
                    {
                        _beforeSetBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            boolName = @params.boolName;
            value = @params.value;
            orig(self, boolName, value);
            if (_afterSetBool != null)
                foreach (Delegates.SetBool_AfterArgs toInvoke in _afterSetBool.GetInvocationList())
                    try
                    {
                        _afterSetBool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetInt()
        {
            if (!HookedList.Contains("SetInt"))
            {
                HookedList.Add("SetInt");
                On.PlayerData.SetInt += SetInt;
            }
        }

        internal static event Delegates.SetInt_BeforeArgs _beforeSetInt;
        internal static event Delegates.SetInt_AfterArgs _afterSetInt;

        private static void SetInt(On.PlayerData.orig_SetInt orig, PlayerData self, string intName, int value)
        {
            Delegates.Params_SetInt @params = new()
            {
                self = self, intName = intName, value = value
            };
            if (_beforeSetInt != null)
                foreach (Delegates.SetInt_BeforeArgs toInvoke in _beforeSetInt.GetInvocationList())
                    try
                    {
                        _beforeSetInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            value = @params.value;
            orig(self, intName, value);
            if (_afterSetInt != null)
                foreach (Delegates.SetInt_AfterArgs toInvoke in _afterSetInt.GetInvocationList())
                    try
                    {
                        _afterSetInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIncrementInt()
        {
            if (!HookedList.Contains("IncrementInt"))
            {
                HookedList.Add("IncrementInt");
                On.PlayerData.IncrementInt += IncrementInt;
            }
        }

        internal static event Delegates.IncrementInt_BeforeArgs _beforeIncrementInt;
        internal static event Delegates.IncrementInt_AfterArgs _afterIncrementInt;

        private static void IncrementInt(On.PlayerData.orig_IncrementInt orig, PlayerData self, string intName)
        {
            Delegates.Params_IncrementInt @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeIncrementInt != null)
                foreach (Delegates.IncrementInt_BeforeArgs toInvoke in _beforeIncrementInt.GetInvocationList())
                    try
                    {
                        _beforeIncrementInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            orig(self, intName);
            if (_afterIncrementInt != null)
                foreach (Delegates.IncrementInt_AfterArgs toInvoke in _afterIncrementInt.GetInvocationList())
                    try
                    {
                        _afterIncrementInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIntAdd()
        {
            if (!HookedList.Contains("IntAdd"))
            {
                HookedList.Add("IntAdd");
                On.PlayerData.IntAdd += IntAdd;
            }
        }

        internal static event Delegates.IntAdd_BeforeArgs _beforeIntAdd;
        internal static event Delegates.IntAdd_AfterArgs _afterIntAdd;

        private static void IntAdd(On.PlayerData.orig_IntAdd orig, PlayerData self, string intName, int amount)
        {
            Delegates.Params_IntAdd @params = new()
            {
                self = self, intName = intName, amount = amount
            };
            if (_beforeIntAdd != null)
                foreach (Delegates.IntAdd_BeforeArgs toInvoke in _beforeIntAdd.GetInvocationList())
                    try
                    {
                        _beforeIntAdd?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            amount = @params.amount;
            orig(self, intName, amount);
            if (_afterIntAdd != null)
                foreach (Delegates.IntAdd_AfterArgs toInvoke in _afterIntAdd.GetInvocationList())
                    try
                    {
                        _afterIntAdd.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetFloat()
        {
            if (!HookedList.Contains("SetFloat"))
            {
                HookedList.Add("SetFloat");
                On.PlayerData.SetFloat += SetFloat;
            }
        }

        internal static event Delegates.SetFloat_BeforeArgs _beforeSetFloat;
        internal static event Delegates.SetFloat_AfterArgs _afterSetFloat;

        private static void SetFloat(On.PlayerData.orig_SetFloat orig, PlayerData self, string floatName, float value)
        {
            Delegates.Params_SetFloat @params = new()
            {
                self = self, floatName = floatName, value = value
            };
            if (_beforeSetFloat != null)
                foreach (Delegates.SetFloat_BeforeArgs toInvoke in _beforeSetFloat.GetInvocationList())
                    try
                    {
                        _beforeSetFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            floatName = @params.floatName;
            value = @params.value;
            orig(self, floatName, value);
            if (_afterSetFloat != null)
                foreach (Delegates.SetFloat_AfterArgs toInvoke in _afterSetFloat.GetInvocationList())
                    try
                    {
                        _afterSetFloat.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookDecrementInt()
        {
            if (!HookedList.Contains("DecrementInt"))
            {
                HookedList.Add("DecrementInt");
                On.PlayerData.DecrementInt += DecrementInt;
            }
        }

        internal static event Delegates.DecrementInt_BeforeArgs _beforeDecrementInt;
        internal static event Delegates.DecrementInt_AfterArgs _afterDecrementInt;

        private static void DecrementInt(On.PlayerData.orig_DecrementInt orig, PlayerData self, string intName)
        {
            Delegates.Params_DecrementInt @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeDecrementInt != null)
                foreach (Delegates.DecrementInt_BeforeArgs toInvoke in _beforeDecrementInt.GetInvocationList())
                    try
                    {
                        _beforeDecrementInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            orig(self, intName);
            if (_afterDecrementInt != null)
                foreach (Delegates.DecrementInt_AfterArgs toInvoke in _afterDecrementInt.GetInvocationList())
                    try
                    {
                        _afterDecrementInt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetBool()
        {
            if (!HookedList.Contains("GetBool"))
            {
                HookedList.Add("GetBool");
                On.PlayerData.GetBool += GetBool;
            }
        }

        internal static event Delegates.GetBool_BeforeArgs _beforeGetBool;
        internal static event Delegates.GetBool_AfterArgs _afterGetBool;

        private static bool GetBool(On.PlayerData.orig_GetBool orig, PlayerData self, string boolName)
        {
            Delegates.Params_GetBool @params = new()
            {
                self = self, boolName = boolName
            };
            if (_beforeGetBool != null)
                foreach (Delegates.GetBool_BeforeArgs toInvoke in _beforeGetBool.GetInvocationList())
                    try
                    {
                        _beforeGetBool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            boolName = @params.boolName;
            var retVal = orig(self, boolName);
            if (_afterGetBool != null)
                foreach (Delegates.GetBool_AfterArgs toInvoke in _afterGetBool.GetInvocationList())
                    try
                    {
                        retVal = _afterGetBool.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetInt()
        {
            if (!HookedList.Contains("GetInt"))
            {
                HookedList.Add("GetInt");
                On.PlayerData.GetInt += GetInt;
            }
        }

        internal static event Delegates.GetInt_BeforeArgs _beforeGetInt;
        internal static event Delegates.GetInt_AfterArgs _afterGetInt;

        private static int GetInt(On.PlayerData.orig_GetInt orig, PlayerData self, string intName)
        {
            Delegates.Params_GetInt @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeGetInt != null)
                foreach (Delegates.GetInt_BeforeArgs toInvoke in _beforeGetInt.GetInvocationList())
                    try
                    {
                        _beforeGetInt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            var retVal = orig(self, intName);
            if (_afterGetInt != null)
                foreach (Delegates.GetInt_AfterArgs toInvoke in _afterGetInt.GetInvocationList())
                    try
                    {
                        retVal = _afterGetInt.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetFloat()
        {
            if (!HookedList.Contains("GetFloat"))
            {
                HookedList.Add("GetFloat");
                On.PlayerData.GetFloat += GetFloat;
            }
        }

        internal static event Delegates.GetFloat_BeforeArgs _beforeGetFloat;
        internal static event Delegates.GetFloat_AfterArgs _afterGetFloat;

        private static float GetFloat(On.PlayerData.orig_GetFloat orig, PlayerData self, string floatName)
        {
            Delegates.Params_GetFloat @params = new()
            {
                self = self, floatName = floatName
            };
            if (_beforeGetFloat != null)
                foreach (Delegates.GetFloat_BeforeArgs toInvoke in _beforeGetFloat.GetInvocationList())
                    try
                    {
                        _beforeGetFloat?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            floatName = @params.floatName;
            var retVal = orig(self, floatName);
            if (_afterGetFloat != null)
                foreach (Delegates.GetFloat_AfterArgs toInvoke in _afterGetFloat.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFloat.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookGetString()
        {
            if (!HookedList.Contains("GetString"))
            {
                HookedList.Add("GetString");
                On.PlayerData.GetString += GetString;
            }
        }

        internal static event Delegates.GetString_BeforeArgs _beforeGetString;
        internal static event Delegates.GetString_AfterArgs _afterGetString;

        private static string GetString(On.PlayerData.orig_GetString orig, PlayerData self, string stringName)
        {
            Delegates.Params_GetString @params = new()
            {
                self = self, stringName = stringName
            };
            if (_beforeGetString != null)
                foreach (Delegates.GetString_BeforeArgs toInvoke in _beforeGetString.GetInvocationList())
                    try
                    {
                        _beforeGetString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            stringName = @params.stringName;
            var retVal = orig(self, stringName);
            if (_afterGetString != null)
                foreach (Delegates.GetString_AfterArgs toInvoke in _afterGetString.GetInvocationList())
                    try
                    {
                        retVal = _afterGetString.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetString()
        {
            if (!HookedList.Contains("SetString"))
            {
                HookedList.Add("SetString");
                On.PlayerData.SetString += SetString;
            }
        }

        internal static event Delegates.SetString_BeforeArgs _beforeSetString;
        internal static event Delegates.SetString_AfterArgs _afterSetString;

        private static void SetString(On.PlayerData.orig_SetString orig, PlayerData self, string stringName,
            string value)
        {
            Delegates.Params_SetString @params = new()
            {
                self = self, stringName = stringName, value = value
            };
            if (_beforeSetString != null)
                foreach (Delegates.SetString_BeforeArgs toInvoke in _beforeSetString.GetInvocationList())
                    try
                    {
                        _beforeSetString?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            stringName = @params.stringName;
            value = @params.value;
            orig(self, stringName, value);
            if (_afterSetString != null)
                foreach (Delegates.SetString_AfterArgs toInvoke in _afterSetString.GetInvocationList())
                    try
                    {
                        _afterSetString.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetVector3()
        {
            if (!HookedList.Contains("SetVector3"))
            {
                HookedList.Add("SetVector3");
                On.PlayerData.SetVector3 += SetVector3;
            }
        }

        internal static event Delegates.SetVector3_BeforeArgs _beforeSetVector3;
        internal static event Delegates.SetVector3_AfterArgs _afterSetVector3;

        private static void SetVector3(On.PlayerData.orig_SetVector3 orig, PlayerData self, string vectorName,
            Vector3 value)
        {
            Delegates.Params_SetVector3 @params = new()
            {
                self = self, vectorName = vectorName, value = value
            };
            if (_beforeSetVector3 != null)
                foreach (Delegates.SetVector3_BeforeArgs toInvoke in _beforeSetVector3.GetInvocationList())
                    try
                    {
                        _beforeSetVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            vectorName = @params.vectorName;
            value = @params.value;
            orig(self, vectorName, value);
            if (_afterSetVector3 != null)
                foreach (Delegates.SetVector3_AfterArgs toInvoke in _afterSetVector3.GetInvocationList())
                    try
                    {
                        _afterSetVector3.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetVector3()
        {
            if (!HookedList.Contains("GetVector3"))
            {
                HookedList.Add("GetVector3");
                On.PlayerData.GetVector3 += GetVector3;
            }
        }

        internal static event Delegates.GetVector3_BeforeArgs _beforeGetVector3;
        internal static event Delegates.GetVector3_AfterArgs _afterGetVector3;

        private static Vector3 GetVector3(On.PlayerData.orig_GetVector3 orig, PlayerData self,
            string vectorName)
        {
            Delegates.Params_GetVector3 @params = new()
            {
                self = self, vectorName = vectorName
            };
            if (_beforeGetVector3 != null)
                foreach (Delegates.GetVector3_BeforeArgs toInvoke in _beforeGetVector3.GetInvocationList())
                    try
                    {
                        _beforeGetVector3?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            vectorName = @params.vectorName;
            var retVal = orig(self, vectorName);
            if (_afterGetVector3 != null)
                foreach (Delegates.GetVector3_AfterArgs toInvoke in _afterGetVector3.GetInvocationList())
                    try
                    {
                        retVal = _afterGetVector3.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddHealth()
        {
            if (!HookedList.Contains("AddHealth"))
            {
                HookedList.Add("AddHealth");
                On.PlayerData.AddHealth += AddHealth;
            }
        }

        internal static event Delegates.AddHealth_BeforeArgs _beforeAddHealth;
        internal static event Delegates.AddHealth_AfterArgs _afterAddHealth;

        private static void AddHealth(On.PlayerData.orig_AddHealth orig, PlayerData self, int amount)
        {
            Delegates.Params_AddHealth @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeAddHealth != null)
                foreach (Delegates.AddHealth_BeforeArgs toInvoke in _beforeAddHealth.GetInvocationList())
                    try
                    {
                        _beforeAddHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddHealth != null)
                foreach (Delegates.AddHealth_AfterArgs toInvoke in _afterAddHealth.GetInvocationList())
                    try
                    {
                        _afterAddHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTakeHealth()
        {
            if (!HookedList.Contains("TakeHealth"))
            {
                HookedList.Add("TakeHealth");
                On.PlayerData.TakeHealth += TakeHealth;
            }
        }

        internal static event Delegates.TakeHealth_BeforeArgs _beforeTakeHealth;
        internal static event Delegates.TakeHealth_AfterArgs _afterTakeHealth;

        private static void TakeHealth(On.PlayerData.orig_TakeHealth orig, PlayerData self, int amount)
        {
            Delegates.Params_TakeHealth @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeTakeHealth != null)
                foreach (Delegates.TakeHealth_BeforeArgs toInvoke in _beforeTakeHealth.GetInvocationList())
                    try
                    {
                        _beforeTakeHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeHealth != null)
                foreach (Delegates.TakeHealth_AfterArgs toInvoke in _afterTakeHealth.GetInvocationList())
                    try
                    {
                        _afterTakeHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookMaxHealth()
        {
            if (!HookedList.Contains("MaxHealth"))
            {
                HookedList.Add("MaxHealth");
                On.PlayerData.MaxHealth += MaxHealth;
            }
        }

        internal static event Delegates.MaxHealth_BeforeArgs _beforeMaxHealth;
        internal static event Delegates.MaxHealth_AfterArgs _afterMaxHealth;

        private static void MaxHealth(On.PlayerData.orig_MaxHealth orig, PlayerData self)
        {
            Delegates.Params_MaxHealth @params = new()
            {
                self = self
            };
            if (_beforeMaxHealth != null)
                foreach (Delegates.MaxHealth_BeforeArgs toInvoke in _beforeMaxHealth.GetInvocationList())
                    try
                    {
                        _beforeMaxHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterMaxHealth != null)
                foreach (Delegates.MaxHealth_AfterArgs toInvoke in _afterMaxHealth.GetInvocationList())
                    try
                    {
                        _afterMaxHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookActivateTestingCheats()
        {
            if (!HookedList.Contains("ActivateTestingCheats"))
            {
                HookedList.Add("ActivateTestingCheats");
                On.PlayerData.ActivateTestingCheats += ActivateTestingCheats;
            }
        }

        internal static event Delegates.ActivateTestingCheats_BeforeArgs _beforeActivateTestingCheats;
        internal static event Delegates.ActivateTestingCheats_AfterArgs _afterActivateTestingCheats;

        private static void ActivateTestingCheats(On.PlayerData.orig_ActivateTestingCheats orig, PlayerData self)
        {
            Delegates.Params_ActivateTestingCheats @params = new()
            {
                self = self
            };
            if (_beforeActivateTestingCheats != null)
                foreach (Delegates.ActivateTestingCheats_BeforeArgs toInvoke in _beforeActivateTestingCheats
                             .GetInvocationList())
                    try
                    {
                        _beforeActivateTestingCheats?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterActivateTestingCheats != null)
                foreach (Delegates.ActivateTestingCheats_AfterArgs toInvoke in _afterActivateTestingCheats
                             .GetInvocationList())
                    try
                    {
                        _afterActivateTestingCheats.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetAllPowerups()
        {
            if (!HookedList.Contains("GetAllPowerups"))
            {
                HookedList.Add("GetAllPowerups");
                On.PlayerData.GetAllPowerups += GetAllPowerups;
            }
        }

        internal static event Delegates.GetAllPowerups_BeforeArgs _beforeGetAllPowerups;
        internal static event Delegates.GetAllPowerups_AfterArgs _afterGetAllPowerups;

        private static void GetAllPowerups(On.PlayerData.orig_GetAllPowerups orig, PlayerData self)
        {
            Delegates.Params_GetAllPowerups @params = new()
            {
                self = self
            };
            if (_beforeGetAllPowerups != null)
                foreach (Delegates.GetAllPowerups_BeforeArgs toInvoke in _beforeGetAllPowerups.GetInvocationList())
                    try
                    {
                        _beforeGetAllPowerups?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterGetAllPowerups != null)
                foreach (Delegates.GetAllPowerups_AfterArgs toInvoke in _afterGetAllPowerups.GetInvocationList())
                    try
                    {
                        _afterGetAllPowerups.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToMaxHealth()
        {
            if (!HookedList.Contains("AddToMaxHealth"))
            {
                HookedList.Add("AddToMaxHealth");
                On.PlayerData.AddToMaxHealth += AddToMaxHealth;
            }
        }

        internal static event Delegates.AddToMaxHealth_BeforeArgs _beforeAddToMaxHealth;
        internal static event Delegates.AddToMaxHealth_AfterArgs _afterAddToMaxHealth;

        private static void AddToMaxHealth(On.PlayerData.orig_AddToMaxHealth orig, PlayerData self, int amount)
        {
            Delegates.Params_AddToMaxHealth @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeAddToMaxHealth != null)
                foreach (Delegates.AddToMaxHealth_BeforeArgs toInvoke in _beforeAddToMaxHealth.GetInvocationList())
                    try
                    {
                        _beforeAddToMaxHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddToMaxHealth != null)
                foreach (Delegates.AddToMaxHealth_AfterArgs toInvoke in _afterAddToMaxHealth.GetInvocationList())
                    try
                    {
                        _afterAddToMaxHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUpdateBlueHealth()
        {
            if (!HookedList.Contains("UpdateBlueHealth"))
            {
                HookedList.Add("UpdateBlueHealth");
                On.PlayerData.UpdateBlueHealth += UpdateBlueHealth;
            }
        }

        internal static event Delegates.UpdateBlueHealth_BeforeArgs _beforeUpdateBlueHealth;
        internal static event Delegates.UpdateBlueHealth_AfterArgs _afterUpdateBlueHealth;

        private static void UpdateBlueHealth(On.PlayerData.orig_UpdateBlueHealth orig, PlayerData self)
        {
            Delegates.Params_UpdateBlueHealth @params = new()
            {
                self = self
            };
            if (_beforeUpdateBlueHealth != null)
                foreach (Delegates.UpdateBlueHealth_BeforeArgs toInvoke in _beforeUpdateBlueHealth.GetInvocationList())
                    try
                    {
                        _beforeUpdateBlueHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterUpdateBlueHealth != null)
                foreach (Delegates.UpdateBlueHealth_AfterArgs toInvoke in _afterUpdateBlueHealth.GetInvocationList())
                    try
                    {
                        _afterUpdateBlueHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddGeo()
        {
            if (!HookedList.Contains("AddGeo"))
            {
                HookedList.Add("AddGeo");
                On.PlayerData.AddGeo += AddGeo;
            }
        }

        internal static event Delegates.AddGeo_BeforeArgs _beforeAddGeo;
        internal static event Delegates.AddGeo_AfterArgs _afterAddGeo;

        private static void AddGeo(On.PlayerData.orig_AddGeo orig, PlayerData self, int amount)
        {
            Delegates.Params_AddGeo @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeAddGeo != null)
                foreach (Delegates.AddGeo_BeforeArgs toInvoke in _beforeAddGeo.GetInvocationList())
                    try
                    {
                        _beforeAddGeo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddGeo != null)
                foreach (Delegates.AddGeo_AfterArgs toInvoke in _afterAddGeo.GetInvocationList())
                    try
                    {
                        _afterAddGeo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTakeGeo()
        {
            if (!HookedList.Contains("TakeGeo"))
            {
                HookedList.Add("TakeGeo");
                On.PlayerData.TakeGeo += TakeGeo;
            }
        }

        internal static event Delegates.TakeGeo_BeforeArgs _beforeTakeGeo;
        internal static event Delegates.TakeGeo_AfterArgs _afterTakeGeo;

        private static void TakeGeo(On.PlayerData.orig_TakeGeo orig, PlayerData self, int amount)
        {
            Delegates.Params_TakeGeo @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeTakeGeo != null)
                foreach (Delegates.TakeGeo_BeforeArgs toInvoke in _beforeTakeGeo.GetInvocationList())
                    try
                    {
                        _beforeTakeGeo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeGeo != null)
                foreach (Delegates.TakeGeo_AfterArgs toInvoke in _afterTakeGeo.GetInvocationList())
                    try
                    {
                        _afterTakeGeo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookWouldDie()
        {
            if (!HookedList.Contains("WouldDie"))
            {
                HookedList.Add("WouldDie");
                On.PlayerData.WouldDie += WouldDie;
            }
        }

        internal static event Delegates.WouldDie_BeforeArgs _beforeWouldDie;
        internal static event Delegates.WouldDie_AfterArgs _afterWouldDie;

        private static bool WouldDie(On.PlayerData.orig_WouldDie orig, PlayerData self, int damage)
        {
            Delegates.Params_WouldDie @params = new()
            {
                self = self, damage = damage
            };
            if (_beforeWouldDie != null)
                foreach (Delegates.WouldDie_BeforeArgs toInvoke in _beforeWouldDie.GetInvocationList())
                    try
                    {
                        _beforeWouldDie?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            damage = @params.damage;
            var retVal = orig(self, damage);
            if (_afterWouldDie != null)
                foreach (Delegates.WouldDie_AfterArgs toInvoke in _afterWouldDie.GetInvocationList())
                    try
                    {
                        retVal = _afterWouldDie.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookAddMPCharge()
        {
            if (!HookedList.Contains("AddMPCharge"))
            {
                HookedList.Add("AddMPCharge");
                On.PlayerData.AddMPCharge += AddMPCharge;
            }
        }

        internal static event Delegates.AddMPCharge_BeforeArgs _beforeAddMPCharge;
        internal static event Delegates.AddMPCharge_AfterArgs _afterAddMPCharge;

        private static bool AddMPCharge(On.PlayerData.orig_AddMPCharge orig, PlayerData self, int amount)
        {
            Delegates.Params_AddMPCharge @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeAddMPCharge != null)
                foreach (Delegates.AddMPCharge_BeforeArgs toInvoke in _beforeAddMPCharge.GetInvocationList())
                    try
                    {
                        _beforeAddMPCharge?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            var retVal = orig(self, amount);
            if (_afterAddMPCharge != null)
                foreach (Delegates.AddMPCharge_AfterArgs toInvoke in _afterAddMPCharge.GetInvocationList())
                    try
                    {
                        retVal = _afterAddMPCharge.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTakeMP()
        {
            if (!HookedList.Contains("TakeMP"))
            {
                HookedList.Add("TakeMP");
                On.PlayerData.TakeMP += TakeMP;
            }
        }

        internal static event Delegates.TakeMP_BeforeArgs _beforeTakeMP;
        internal static event Delegates.TakeMP_AfterArgs _afterTakeMP;

        private static void TakeMP(On.PlayerData.orig_TakeMP orig, PlayerData self, int amount)
        {
            Delegates.Params_TakeMP @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeTakeMP != null)
                foreach (Delegates.TakeMP_BeforeArgs toInvoke in _beforeTakeMP.GetInvocationList())
                    try
                    {
                        _beforeTakeMP?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeMP != null)
                foreach (Delegates.TakeMP_AfterArgs toInvoke in _afterTakeMP.GetInvocationList())
                    try
                    {
                        _afterTakeMP.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookTakeReserveMP()
        {
            if (!HookedList.Contains("TakeReserveMP"))
            {
                HookedList.Add("TakeReserveMP");
                On.PlayerData.TakeReserveMP += TakeReserveMP;
            }
        }

        internal static event Delegates.TakeReserveMP_BeforeArgs _beforeTakeReserveMP;
        internal static event Delegates.TakeReserveMP_AfterArgs _afterTakeReserveMP;

        private static void TakeReserveMP(On.PlayerData.orig_TakeReserveMP orig, PlayerData self, int amount)
        {
            Delegates.Params_TakeReserveMP @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeTakeReserveMP != null)
                foreach (Delegates.TakeReserveMP_BeforeArgs toInvoke in _beforeTakeReserveMP.GetInvocationList())
                    try
                    {
                        _beforeTakeReserveMP?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeReserveMP != null)
                foreach (Delegates.TakeReserveMP_AfterArgs toInvoke in _afterTakeReserveMP.GetInvocationList())
                    try
                    {
                        _afterTakeReserveMP.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookClearMP()
        {
            if (!HookedList.Contains("ClearMP"))
            {
                HookedList.Add("ClearMP");
                On.PlayerData.ClearMP += ClearMP;
            }
        }

        internal static event Delegates.ClearMP_BeforeArgs _beforeClearMP;
        internal static event Delegates.ClearMP_AfterArgs _afterClearMP;

        private static void ClearMP(On.PlayerData.orig_ClearMP orig, PlayerData self)
        {
            Delegates.Params_ClearMP @params = new()
            {
                self = self
            };
            if (_beforeClearMP != null)
                foreach (Delegates.ClearMP_BeforeArgs toInvoke in _beforeClearMP.GetInvocationList())
                    try
                    {
                        _beforeClearMP?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterClearMP != null)
                foreach (Delegates.ClearMP_AfterArgs toInvoke in _afterClearMP.GetInvocationList())
                    try
                    {
                        _afterClearMP.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddToMaxMPReserve()
        {
            if (!HookedList.Contains("AddToMaxMPReserve"))
            {
                HookedList.Add("AddToMaxMPReserve");
                On.PlayerData.AddToMaxMPReserve += AddToMaxMPReserve;
            }
        }

        internal static event Delegates.AddToMaxMPReserve_BeforeArgs _beforeAddToMaxMPReserve;
        internal static event Delegates.AddToMaxMPReserve_AfterArgs _afterAddToMaxMPReserve;

        private static void AddToMaxMPReserve(On.PlayerData.orig_AddToMaxMPReserve orig, PlayerData self, int amount)
        {
            Delegates.Params_AddToMaxMPReserve @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeAddToMaxMPReserve != null)
                foreach (Delegates.AddToMaxMPReserve_BeforeArgs toInvoke in
                         _beforeAddToMaxMPReserve.GetInvocationList())
                    try
                    {
                        _beforeAddToMaxMPReserve?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterAddToMaxMPReserve != null)
                foreach (Delegates.AddToMaxMPReserve_AfterArgs toInvoke in _afterAddToMaxMPReserve.GetInvocationList())
                    try
                    {
                        _afterAddToMaxMPReserve.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStartSoulLimiter()
        {
            if (!HookedList.Contains("StartSoulLimiter"))
            {
                HookedList.Add("StartSoulLimiter");
                On.PlayerData.StartSoulLimiter += StartSoulLimiter;
            }
        }

        internal static event Delegates.StartSoulLimiter_BeforeArgs _beforeStartSoulLimiter;
        internal static event Delegates.StartSoulLimiter_AfterArgs _afterStartSoulLimiter;

        private static void StartSoulLimiter(On.PlayerData.orig_StartSoulLimiter orig, PlayerData self)
        {
            Delegates.Params_StartSoulLimiter @params = new()
            {
                self = self
            };
            if (_beforeStartSoulLimiter != null)
                foreach (Delegates.StartSoulLimiter_BeforeArgs toInvoke in _beforeStartSoulLimiter.GetInvocationList())
                    try
                    {
                        _beforeStartSoulLimiter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStartSoulLimiter != null)
                foreach (Delegates.StartSoulLimiter_AfterArgs toInvoke in _afterStartSoulLimiter.GetInvocationList())
                    try
                    {
                        _afterStartSoulLimiter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEndSoulLimiter()
        {
            if (!HookedList.Contains("EndSoulLimiter"))
            {
                HookedList.Add("EndSoulLimiter");
                On.PlayerData.EndSoulLimiter += EndSoulLimiter;
            }
        }

        internal static event Delegates.EndSoulLimiter_BeforeArgs _beforeEndSoulLimiter;
        internal static event Delegates.EndSoulLimiter_AfterArgs _afterEndSoulLimiter;

        private static void EndSoulLimiter(On.PlayerData.orig_EndSoulLimiter orig, PlayerData self)
        {
            Delegates.Params_EndSoulLimiter @params = new()
            {
                self = self
            };
            if (_beforeEndSoulLimiter != null)
                foreach (Delegates.EndSoulLimiter_BeforeArgs toInvoke in _beforeEndSoulLimiter.GetInvocationList())
                    try
                    {
                        _beforeEndSoulLimiter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterEndSoulLimiter != null)
                foreach (Delegates.EndSoulLimiter_AfterArgs toInvoke in _afterEndSoulLimiter.GetInvocationList())
                    try
                    {
                        _afterEndSoulLimiter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookEquipCharm()
        {
            if (!HookedList.Contains("EquipCharm"))
            {
                HookedList.Add("EquipCharm");
                On.PlayerData.EquipCharm += EquipCharm;
            }
        }

        internal static event Delegates.EquipCharm_BeforeArgs _beforeEquipCharm;
        internal static event Delegates.EquipCharm_AfterArgs _afterEquipCharm;

        private static void EquipCharm(On.PlayerData.orig_EquipCharm orig, PlayerData self, int charmNum)
        {
            Delegates.Params_EquipCharm @params = new()
            {
                self = self, charmNum = charmNum
            };
            if (_beforeEquipCharm != null)
                foreach (Delegates.EquipCharm_BeforeArgs toInvoke in _beforeEquipCharm.GetInvocationList())
                    try
                    {
                        _beforeEquipCharm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            charmNum = @params.charmNum;
            orig(self, charmNum);
            if (_afterEquipCharm != null)
                foreach (Delegates.EquipCharm_AfterArgs toInvoke in _afterEquipCharm.GetInvocationList())
                    try
                    {
                        _afterEquipCharm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookUnequipCharm()
        {
            if (!HookedList.Contains("UnequipCharm"))
            {
                HookedList.Add("UnequipCharm");
                On.PlayerData.UnequipCharm += UnequipCharm;
            }
        }

        internal static event Delegates.UnequipCharm_BeforeArgs _beforeUnequipCharm;
        internal static event Delegates.UnequipCharm_AfterArgs _afterUnequipCharm;

        private static void UnequipCharm(On.PlayerData.orig_UnequipCharm orig, PlayerData self, int charmNum)
        {
            Delegates.Params_UnequipCharm @params = new()
            {
                self = self, charmNum = charmNum
            };
            if (_beforeUnequipCharm != null)
                foreach (Delegates.UnequipCharm_BeforeArgs toInvoke in _beforeUnequipCharm.GetInvocationList())
                    try
                    {
                        _beforeUnequipCharm?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            charmNum = @params.charmNum;
            orig(self, charmNum);
            if (_afterUnequipCharm != null)
                foreach (Delegates.UnequipCharm_AfterArgs toInvoke in _afterUnequipCharm.GetInvocationList())
                    try
                    {
                        _afterUnequipCharm.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCalculateNotchesUsed()
        {
            if (!HookedList.Contains("CalculateNotchesUsed"))
            {
                HookedList.Add("CalculateNotchesUsed");
                On.PlayerData.CalculateNotchesUsed += CalculateNotchesUsed;
            }
        }

        internal static event Delegates.CalculateNotchesUsed_BeforeArgs _beforeCalculateNotchesUsed;
        internal static event Delegates.CalculateNotchesUsed_AfterArgs _afterCalculateNotchesUsed;

        private static void CalculateNotchesUsed(On.PlayerData.orig_CalculateNotchesUsed orig, PlayerData self)
        {
            Delegates.Params_CalculateNotchesUsed @params = new()
            {
                self = self
            };
            if (_beforeCalculateNotchesUsed != null)
                foreach (Delegates.CalculateNotchesUsed_BeforeArgs toInvoke in _beforeCalculateNotchesUsed
                             .GetInvocationList())
                    try
                    {
                        _beforeCalculateNotchesUsed?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCalculateNotchesUsed != null)
                foreach (Delegates.CalculateNotchesUsed_AfterArgs toInvoke in _afterCalculateNotchesUsed
                             .GetInvocationList())
                    try
                    {
                        _afterCalculateNotchesUsed.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBenchRespawn_RespawnMarker_string_int()
        {
            if (!HookedList.Contains("SetBenchRespawn_RespawnMarker_string_int"))
            {
                HookedList.Add("SetBenchRespawn_RespawnMarker_string_int");
                On.PlayerData.SetBenchRespawn_RespawnMarker_string_int += SetBenchRespawn_RespawnMarker_string_int;
            }
        }

        internal static event Delegates.SetBenchRespawn_RespawnMarker_string_int_BeforeArgs
            _beforeSetBenchRespawn_RespawnMarker_string_int;

        internal static event Delegates.SetBenchRespawn_RespawnMarker_string_int_AfterArgs
            _afterSetBenchRespawn_RespawnMarker_string_int;

        private static void SetBenchRespawn_RespawnMarker_string_int(
            On.PlayerData.orig_SetBenchRespawn_RespawnMarker_string_int orig, PlayerData self,
            RespawnMarker spawnMarker, string sceneName, int spawnType)
        {
            Delegates.Params_SetBenchRespawn_RespawnMarker_string_int @params = new()
            {
                self = self, spawnMarker = spawnMarker, sceneName = sceneName, spawnType = spawnType
            };
            if (_beforeSetBenchRespawn_RespawnMarker_string_int != null)
                foreach (Delegates.SetBenchRespawn_RespawnMarker_string_int_BeforeArgs toInvoke in
                         _beforeSetBenchRespawn_RespawnMarker_string_int.GetInvocationList())
                    try
                    {
                        _beforeSetBenchRespawn_RespawnMarker_string_int?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spawnMarker = @params.spawnMarker;
            sceneName = @params.sceneName;
            spawnType = @params.spawnType;
            orig(self, spawnMarker, sceneName, spawnType);
            if (_afterSetBenchRespawn_RespawnMarker_string_int != null)
                foreach (Delegates.SetBenchRespawn_RespawnMarker_string_int_AfterArgs toInvoke in
                         _afterSetBenchRespawn_RespawnMarker_string_int.GetInvocationList())
                    try
                    {
                        _afterSetBenchRespawn_RespawnMarker_string_int.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBenchRespawn_string_string_bool()
        {
            if (!HookedList.Contains("SetBenchRespawn_string_string_bool"))
            {
                HookedList.Add("SetBenchRespawn_string_string_bool");
                On.PlayerData.SetBenchRespawn_string_string_bool += SetBenchRespawn_string_string_bool;
            }
        }

        internal static event Delegates.SetBenchRespawn_string_string_bool_BeforeArgs
            _beforeSetBenchRespawn_string_string_bool;

        internal static event Delegates.SetBenchRespawn_string_string_bool_AfterArgs
            _afterSetBenchRespawn_string_string_bool;

        private static void SetBenchRespawn_string_string_bool(
            On.PlayerData.orig_SetBenchRespawn_string_string_bool orig, PlayerData self, string spawnMarker,
            string sceneName, bool facingRight)
        {
            Delegates.Params_SetBenchRespawn_string_string_bool @params = new()
            {
                self = self, spawnMarker = spawnMarker, sceneName = sceneName, facingRight = facingRight
            };
            if (_beforeSetBenchRespawn_string_string_bool != null)
                foreach (Delegates.SetBenchRespawn_string_string_bool_BeforeArgs toInvoke in
                         _beforeSetBenchRespawn_string_string_bool.GetInvocationList())
                    try
                    {
                        _beforeSetBenchRespawn_string_string_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spawnMarker = @params.spawnMarker;
            sceneName = @params.sceneName;
            facingRight = @params.facingRight;
            orig(self, spawnMarker, sceneName, facingRight);
            if (_afterSetBenchRespawn_string_string_bool != null)
                foreach (Delegates.SetBenchRespawn_string_string_bool_AfterArgs toInvoke in
                         _afterSetBenchRespawn_string_string_bool.GetInvocationList())
                    try
                    {
                        _afterSetBenchRespawn_string_string_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBenchRespawn_string_string_int_bool()
        {
            if (!HookedList.Contains("SetBenchRespawn_string_string_int_bool"))
            {
                HookedList.Add("SetBenchRespawn_string_string_int_bool");
                On.PlayerData.SetBenchRespawn_string_string_int_bool += SetBenchRespawn_string_string_int_bool;
            }
        }

        internal static event Delegates.SetBenchRespawn_string_string_int_bool_BeforeArgs
            _beforeSetBenchRespawn_string_string_int_bool;

        internal static event Delegates.SetBenchRespawn_string_string_int_bool_AfterArgs
            _afterSetBenchRespawn_string_string_int_bool;

        private static void SetBenchRespawn_string_string_int_bool(
            On.PlayerData.orig_SetBenchRespawn_string_string_int_bool orig, PlayerData self, string spawnMarker,
            string sceneName, int spawnType, bool facingRight)
        {
            Delegates.Params_SetBenchRespawn_string_string_int_bool @params = new()
            {
                self = self, spawnMarker = spawnMarker, sceneName = sceneName, spawnType = spawnType,
                facingRight = facingRight
            };
            if (_beforeSetBenchRespawn_string_string_int_bool != null)
                foreach (Delegates.SetBenchRespawn_string_string_int_bool_BeforeArgs toInvoke in
                         _beforeSetBenchRespawn_string_string_int_bool.GetInvocationList())
                    try
                    {
                        _beforeSetBenchRespawn_string_string_int_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            spawnMarker = @params.spawnMarker;
            sceneName = @params.sceneName;
            spawnType = @params.spawnType;
            facingRight = @params.facingRight;
            orig(self, spawnMarker, sceneName, spawnType, facingRight);
            if (_afterSetBenchRespawn_string_string_int_bool != null)
                foreach (Delegates.SetBenchRespawn_string_string_int_bool_AfterArgs toInvoke in
                         _afterSetBenchRespawn_string_string_int_bool.GetInvocationList())
                    try
                    {
                        _afterSetBenchRespawn_string_string_int_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetHazardRespawn_HazardRespawnMarker()
        {
            if (!HookedList.Contains("SetHazardRespawn_HazardRespawnMarker"))
            {
                HookedList.Add("SetHazardRespawn_HazardRespawnMarker");
                On.PlayerData.SetHazardRespawn_HazardRespawnMarker += SetHazardRespawn_HazardRespawnMarker;
            }
        }

        internal static event Delegates.SetHazardRespawn_HazardRespawnMarker_BeforeArgs
            _beforeSetHazardRespawn_HazardRespawnMarker;

        internal static event Delegates.SetHazardRespawn_HazardRespawnMarker_AfterArgs
            _afterSetHazardRespawn_HazardRespawnMarker;

        private static void SetHazardRespawn_HazardRespawnMarker(
            On.PlayerData.orig_SetHazardRespawn_HazardRespawnMarker orig, PlayerData self, HazardRespawnMarker location)
        {
            Delegates.Params_SetHazardRespawn_HazardRespawnMarker @params = new()
            {
                self = self, location = location
            };
            if (_beforeSetHazardRespawn_HazardRespawnMarker != null)
                foreach (Delegates.SetHazardRespawn_HazardRespawnMarker_BeforeArgs toInvoke in
                         _beforeSetHazardRespawn_HazardRespawnMarker.GetInvocationList())
                    try
                    {
                        _beforeSetHazardRespawn_HazardRespawnMarker?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            location = @params.location;
            orig(self, location);
            if (_afterSetHazardRespawn_HazardRespawnMarker != null)
                foreach (Delegates.SetHazardRespawn_HazardRespawnMarker_AfterArgs toInvoke in
                         _afterSetHazardRespawn_HazardRespawnMarker.GetInvocationList())
                    try
                    {
                        _afterSetHazardRespawn_HazardRespawnMarker.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetHazardRespawn_Vector3_bool()
        {
            if (!HookedList.Contains("SetHazardRespawn_Vector3_bool"))
            {
                HookedList.Add("SetHazardRespawn_Vector3_bool");
                On.PlayerData.SetHazardRespawn_Vector3_bool += SetHazardRespawn_Vector3_bool;
            }
        }

        internal static event Delegates.SetHazardRespawn_Vector3_bool_BeforeArgs _beforeSetHazardRespawn_Vector3_bool;
        internal static event Delegates.SetHazardRespawn_Vector3_bool_AfterArgs _afterSetHazardRespawn_Vector3_bool;

        private static void SetHazardRespawn_Vector3_bool(On.PlayerData.orig_SetHazardRespawn_Vector3_bool orig,
            PlayerData self, Vector3 position, bool facingRight)
        {
            Delegates.Params_SetHazardRespawn_Vector3_bool @params = new()
            {
                self = self, position = position, facingRight = facingRight
            };
            if (_beforeSetHazardRespawn_Vector3_bool != null)
                foreach (Delegates.SetHazardRespawn_Vector3_bool_BeforeArgs toInvoke in
                         _beforeSetHazardRespawn_Vector3_bool.GetInvocationList())
                    try
                    {
                        _beforeSetHazardRespawn_Vector3_bool?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            position = @params.position;
            facingRight = @params.facingRight;
            orig(self, position, facingRight);
            if (_afterSetHazardRespawn_Vector3_bool != null)
                foreach (Delegates.SetHazardRespawn_Vector3_bool_AfterArgs toInvoke in
                         _afterSetHazardRespawn_Vector3_bool.GetInvocationList())
                    try
                    {
                        _afterSetHazardRespawn_Vector3_bool.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountGameCompletion()
        {
            if (!HookedList.Contains("CountGameCompletion"))
            {
                HookedList.Add("CountGameCompletion");
                On.PlayerData.CountGameCompletion += CountGameCompletion;
            }
        }

        internal static event Delegates.CountGameCompletion_BeforeArgs _beforeCountGameCompletion;
        internal static event Delegates.CountGameCompletion_AfterArgs _afterCountGameCompletion;

        private static void CountGameCompletion(On.PlayerData.orig_CountGameCompletion orig, PlayerData self)
        {
            Delegates.Params_CountGameCompletion @params = new()
            {
                self = self
            };
            if (_beforeCountGameCompletion != null)
                foreach (Delegates.CountGameCompletion_BeforeArgs toInvoke in _beforeCountGameCompletion
                             .GetInvocationList())
                    try
                    {
                        _beforeCountGameCompletion?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCountGameCompletion != null)
                foreach (Delegates.CountGameCompletion_AfterArgs toInvoke in
                         _afterCountGameCompletion.GetInvocationList())
                    try
                    {
                        _afterCountGameCompletion.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountCharms()
        {
            if (!HookedList.Contains("CountCharms"))
            {
                HookedList.Add("CountCharms");
                On.PlayerData.CountCharms += CountCharms;
            }
        }

        internal static event Delegates.CountCharms_BeforeArgs _beforeCountCharms;
        internal static event Delegates.CountCharms_AfterArgs _afterCountCharms;

        private static void CountCharms(On.PlayerData.orig_CountCharms orig, PlayerData self)
        {
            Delegates.Params_CountCharms @params = new()
            {
                self = self
            };
            if (_beforeCountCharms != null)
                foreach (Delegates.CountCharms_BeforeArgs toInvoke in _beforeCountCharms.GetInvocationList())
                    try
                    {
                        _beforeCountCharms?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCountCharms != null)
                foreach (Delegates.CountCharms_AfterArgs toInvoke in _afterCountCharms.GetInvocationList())
                    try
                    {
                        _afterCountCharms.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookCountJournalEntries()
        {
            if (!HookedList.Contains("CountJournalEntries"))
            {
                HookedList.Add("CountJournalEntries");
                On.PlayerData.CountJournalEntries += CountJournalEntries;
            }
        }

        internal static event Delegates.CountJournalEntries_BeforeArgs _beforeCountJournalEntries;
        internal static event Delegates.CountJournalEntries_AfterArgs _afterCountJournalEntries;

        private static void CountJournalEntries(On.PlayerData.orig_CountJournalEntries orig, PlayerData self)
        {
            Delegates.Params_CountJournalEntries @params = new()
            {
                self = self
            };
            if (_beforeCountJournalEntries != null)
                foreach (Delegates.CountJournalEntries_BeforeArgs toInvoke in _beforeCountJournalEntries
                             .GetInvocationList())
                    try
                    {
                        _beforeCountJournalEntries?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterCountJournalEntries != null)
                foreach (Delegates.CountJournalEntries_AfterArgs toInvoke in
                         _afterCountJournalEntries.GetInvocationList())
                    try
                    {
                        _afterCountJournalEntries.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetupNewPlayerData()
        {
            if (!HookedList.Contains("SetupNewPlayerData"))
            {
                HookedList.Add("SetupNewPlayerData");
                On.PlayerData.SetupNewPlayerData += SetupNewPlayerData;
            }
        }

        internal static event Delegates.SetupNewPlayerData_BeforeArgs _beforeSetupNewPlayerData;
        internal static event Delegates.SetupNewPlayerData_AfterArgs _afterSetupNewPlayerData;

        private static void SetupNewPlayerData(On.PlayerData.orig_SetupNewPlayerData orig, PlayerData self)
        {
            Delegates.Params_SetupNewPlayerData @params = new()
            {
                self = self
            };
            if (_beforeSetupNewPlayerData != null)
                foreach (Delegates.SetupNewPlayerData_BeforeArgs toInvoke in
                         _beforeSetupNewPlayerData.GetInvocationList())
                    try
                    {
                        _beforeSetupNewPlayerData?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterSetupNewPlayerData != null)
                foreach (Delegates.SetupNewPlayerData_AfterArgs toInvoke in
                         _afterSetupNewPlayerData.GetInvocationList())
                    try
                    {
                        _afterSetupNewPlayerData.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookAddGGPlayerDataOverrides()
        {
            if (!HookedList.Contains("AddGGPlayerDataOverrides"))
            {
                HookedList.Add("AddGGPlayerDataOverrides");
                On.PlayerData.AddGGPlayerDataOverrides += AddGGPlayerDataOverrides;
            }
        }

        internal static event Delegates.AddGGPlayerDataOverrides_BeforeArgs _beforeAddGGPlayerDataOverrides;
        internal static event Delegates.AddGGPlayerDataOverrides_AfterArgs _afterAddGGPlayerDataOverrides;

        private static void AddGGPlayerDataOverrides(On.PlayerData.orig_AddGGPlayerDataOverrides orig, PlayerData self)
        {
            Delegates.Params_AddGGPlayerDataOverrides @params = new()
            {
                self = self
            };
            if (_beforeAddGGPlayerDataOverrides != null)
                foreach (Delegates.AddGGPlayerDataOverrides_BeforeArgs toInvoke in _beforeAddGGPlayerDataOverrides
                             .GetInvocationList())
                    try
                    {
                        _beforeAddGGPlayerDataOverrides?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAddGGPlayerDataOverrides != null)
                foreach (Delegates.AddGGPlayerDataOverrides_AfterArgs toInvoke in _afterAddGGPlayerDataOverrides
                             .GetInvocationList())
                    try
                    {
                        _afterAddGGPlayerDataOverrides.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBoolSwappedArgs()
        {
            if (!HookedList.Contains("SetBoolSwappedArgs"))
            {
                HookedList.Add("SetBoolSwappedArgs");
                On.PlayerData.SetBoolSwappedArgs += SetBoolSwappedArgs;
            }
        }

        internal static event Delegates.SetBoolSwappedArgs_BeforeArgs _beforeSetBoolSwappedArgs;
        internal static event Delegates.SetBoolSwappedArgs_AfterArgs _afterSetBoolSwappedArgs;

        private static void SetBoolSwappedArgs(On.PlayerData.orig_SetBoolSwappedArgs orig, PlayerData self, bool value,
            string name)
        {
            Delegates.Params_SetBoolSwappedArgs @params = new()
            {
                self = self, value = value, name = name
            };
            if (_beforeSetBoolSwappedArgs != null)
                foreach (Delegates.SetBoolSwappedArgs_BeforeArgs toInvoke in
                         _beforeSetBoolSwappedArgs.GetInvocationList())
                    try
                    {
                        _beforeSetBoolSwappedArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            name = @params.name;
            orig(self, value, name);
            if (_afterSetBoolSwappedArgs != null)
                foreach (Delegates.SetBoolSwappedArgs_AfterArgs toInvoke in
                         _afterSetBoolSwappedArgs.GetInvocationList())
                    try
                    {
                        _afterSetBoolSwappedArgs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetFloatSwappedArgs()
        {
            if (!HookedList.Contains("SetFloatSwappedArgs"))
            {
                HookedList.Add("SetFloatSwappedArgs");
                On.PlayerData.SetFloatSwappedArgs += SetFloatSwappedArgs;
            }
        }

        internal static event Delegates.SetFloatSwappedArgs_BeforeArgs _beforeSetFloatSwappedArgs;
        internal static event Delegates.SetFloatSwappedArgs_AfterArgs _afterSetFloatSwappedArgs;

        private static void SetFloatSwappedArgs(On.PlayerData.orig_SetFloatSwappedArgs orig, PlayerData self,
            float value, string name)
        {
            Delegates.Params_SetFloatSwappedArgs @params = new()
            {
                self = self, value = value, name = name
            };
            if (_beforeSetFloatSwappedArgs != null)
                foreach (Delegates.SetFloatSwappedArgs_BeforeArgs toInvoke in _beforeSetFloatSwappedArgs
                             .GetInvocationList())
                    try
                    {
                        _beforeSetFloatSwappedArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            name = @params.name;
            orig(self, value, name);
            if (_afterSetFloatSwappedArgs != null)
                foreach (Delegates.SetFloatSwappedArgs_AfterArgs toInvoke in
                         _afterSetFloatSwappedArgs.GetInvocationList())
                    try
                    {
                        _afterSetFloatSwappedArgs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetIntSwappedArgs()
        {
            if (!HookedList.Contains("SetIntSwappedArgs"))
            {
                HookedList.Add("SetIntSwappedArgs");
                On.PlayerData.SetIntSwappedArgs += SetIntSwappedArgs;
            }
        }

        internal static event Delegates.SetIntSwappedArgs_BeforeArgs _beforeSetIntSwappedArgs;
        internal static event Delegates.SetIntSwappedArgs_AfterArgs _afterSetIntSwappedArgs;

        private static void SetIntSwappedArgs(On.PlayerData.orig_SetIntSwappedArgs orig, PlayerData self, int value,
            string name)
        {
            Delegates.Params_SetIntSwappedArgs @params = new()
            {
                self = self, value = value, name = name
            };
            if (_beforeSetIntSwappedArgs != null)
                foreach (Delegates.SetIntSwappedArgs_BeforeArgs toInvoke in
                         _beforeSetIntSwappedArgs.GetInvocationList())
                    try
                    {
                        _beforeSetIntSwappedArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            name = @params.name;
            orig(self, value, name);
            if (_afterSetIntSwappedArgs != null)
                foreach (Delegates.SetIntSwappedArgs_AfterArgs toInvoke in _afterSetIntSwappedArgs.GetInvocationList())
                    try
                    {
                        _afterSetIntSwappedArgs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetStringSwappedArgs()
        {
            if (!HookedList.Contains("SetStringSwappedArgs"))
            {
                HookedList.Add("SetStringSwappedArgs");
                On.PlayerData.SetStringSwappedArgs += SetStringSwappedArgs;
            }
        }

        internal static event Delegates.SetStringSwappedArgs_BeforeArgs _beforeSetStringSwappedArgs;
        internal static event Delegates.SetStringSwappedArgs_AfterArgs _afterSetStringSwappedArgs;

        private static void SetStringSwappedArgs(On.PlayerData.orig_SetStringSwappedArgs orig, PlayerData self,
            string value, string name)
        {
            Delegates.Params_SetStringSwappedArgs @params = new()
            {
                self = self, value = value, name = name
            };
            if (_beforeSetStringSwappedArgs != null)
                foreach (Delegates.SetStringSwappedArgs_BeforeArgs toInvoke in _beforeSetStringSwappedArgs
                             .GetInvocationList())
                    try
                    {
                        _beforeSetStringSwappedArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            name = @params.name;
            orig(self, value, name);
            if (_afterSetStringSwappedArgs != null)
                foreach (Delegates.SetStringSwappedArgs_AfterArgs toInvoke in _afterSetStringSwappedArgs
                             .GetInvocationList())
                    try
                    {
                        _afterSetStringSwappedArgs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetVector3SwappedArgs()
        {
            if (!HookedList.Contains("SetVector3SwappedArgs"))
            {
                HookedList.Add("SetVector3SwappedArgs");
                On.PlayerData.SetVector3SwappedArgs += SetVector3SwappedArgs;
            }
        }

        internal static event Delegates.SetVector3SwappedArgs_BeforeArgs _beforeSetVector3SwappedArgs;
        internal static event Delegates.SetVector3SwappedArgs_AfterArgs _afterSetVector3SwappedArgs;

        private static void SetVector3SwappedArgs(On.PlayerData.orig_SetVector3SwappedArgs orig, PlayerData self,
            Vector3 value, string name)
        {
            Delegates.Params_SetVector3SwappedArgs @params = new()
            {
                self = self, value = value, name = name
            };
            if (_beforeSetVector3SwappedArgs != null)
                foreach (Delegates.SetVector3SwappedArgs_BeforeArgs toInvoke in _beforeSetVector3SwappedArgs
                             .GetInvocationList())
                    try
                    {
                        _beforeSetVector3SwappedArgs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            value = @params.value;
            name = @params.name;
            orig(self, value, name);
            if (_afterSetVector3SwappedArgs != null)
                foreach (Delegates.SetVector3SwappedArgs_AfterArgs toInvoke in _afterSetVector3SwappedArgs
                             .GetInvocationList())
                    try
                    {
                        _afterSetVector3SwappedArgs.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetBoolInternal()
        {
            if (!HookedList.Contains("SetBoolInternal"))
            {
                HookedList.Add("SetBoolInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetBoolInternal"), SetBoolInternal);
            }
        }

        internal static event Delegates.SetBoolInternal_BeforeArgs _beforeSetBoolInternal;
        internal static event Delegates.SetBoolInternal_AfterArgs _afterSetBoolInternal;

        private static void SetBoolInternal(Action<PlayerData, string, bool> orig, PlayerData self, string boolName,
            bool value)
        {
            Delegates.Params_SetBoolInternal @params = new()
            {
                self = self, boolName = boolName, value = value
            };
            if (_beforeSetBoolInternal != null)
                foreach (Delegates.SetBoolInternal_BeforeArgs toInvoke in _beforeSetBoolInternal.GetInvocationList())
                    try
                    {
                        _beforeSetBoolInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            boolName = @params.boolName;
            value = @params.value;
            orig(self, boolName, value);
            if (_afterSetBoolInternal != null)
                foreach (Delegates.SetBoolInternal_AfterArgs toInvoke in _afterSetBoolInternal.GetInvocationList())
                    try
                    {
                        _afterSetBoolInternal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetBoolInternal()
        {
            if (!HookedList.Contains("GetBoolInternal"))
            {
                HookedList.Add("GetBoolInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetBoolInternal"), GetBoolInternal);
            }
        }

        internal static event Delegates.GetBoolInternal_BeforeArgs _beforeGetBoolInternal;
        internal static event Delegates.GetBoolInternal_AfterArgs _afterGetBoolInternal;

        private static bool GetBoolInternal(Func<PlayerData, string, bool> orig, PlayerData self, string boolName)
        {
            Delegates.Params_GetBoolInternal @params = new()
            {
                self = self, boolName = boolName
            };
            if (_beforeGetBoolInternal != null)
                foreach (Delegates.GetBoolInternal_BeforeArgs toInvoke in _beforeGetBoolInternal.GetInvocationList())
                    try
                    {
                        _beforeGetBoolInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            boolName = @params.boolName;
            var retVal = orig(self, boolName);
            if (_afterGetBoolInternal != null)
                foreach (Delegates.GetBoolInternal_AfterArgs toInvoke in _afterGetBoolInternal.GetInvocationList())
                    try
                    {
                        retVal = _afterGetBoolInternal.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetIntInternal()
        {
            if (!HookedList.Contains("SetIntInternal"))
            {
                HookedList.Add("SetIntInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetIntInternal"), SetIntInternal);
            }
        }

        internal static event Delegates.SetIntInternal_BeforeArgs _beforeSetIntInternal;
        internal static event Delegates.SetIntInternal_AfterArgs _afterSetIntInternal;

        private static void SetIntInternal(Action<PlayerData, string, int> orig, PlayerData self, string intName,
            int value)
        {
            Delegates.Params_SetIntInternal @params = new()
            {
                self = self, intName = intName, value = value
            };
            if (_beforeSetIntInternal != null)
                foreach (Delegates.SetIntInternal_BeforeArgs toInvoke in _beforeSetIntInternal.GetInvocationList())
                    try
                    {
                        _beforeSetIntInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            value = @params.value;
            orig(self, intName, value);
            if (_afterSetIntInternal != null)
                foreach (Delegates.SetIntInternal_AfterArgs toInvoke in _afterSetIntInternal.GetInvocationList())
                    try
                    {
                        _afterSetIntInternal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetIntInternal()
        {
            if (!HookedList.Contains("GetIntInternal"))
            {
                HookedList.Add("GetIntInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetIntInternal"), GetIntInternal);
            }
        }

        internal static event Delegates.GetIntInternal_BeforeArgs _beforeGetIntInternal;
        internal static event Delegates.GetIntInternal_AfterArgs _afterGetIntInternal;

        private static int GetIntInternal(Func<PlayerData, string, int> orig, PlayerData self, string intName)
        {
            Delegates.Params_GetIntInternal @params = new()
            {
                self = self, intName = intName
            };
            if (_beforeGetIntInternal != null)
                foreach (Delegates.GetIntInternal_BeforeArgs toInvoke in _beforeGetIntInternal.GetInvocationList())
                    try
                    {
                        _beforeGetIntInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            intName = @params.intName;
            var retVal = orig(self, intName);
            if (_afterGetIntInternal != null)
                foreach (Delegates.GetIntInternal_AfterArgs toInvoke in _afterGetIntInternal.GetInvocationList())
                    try
                    {
                        retVal = _afterGetIntInternal.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetFloatInternal()
        {
            if (!HookedList.Contains("SetFloatInternal"))
            {
                HookedList.Add("SetFloatInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetFloatInternal"),
                    SetFloatInternal);
            }
        }

        internal static event Delegates.SetFloatInternal_BeforeArgs _beforeSetFloatInternal;
        internal static event Delegates.SetFloatInternal_AfterArgs _afterSetFloatInternal;

        private static void SetFloatInternal(Action<PlayerData, string, float> orig, PlayerData self, string floatName,
            float value)
        {
            Delegates.Params_SetFloatInternal @params = new()
            {
                self = self, floatName = floatName, value = value
            };
            if (_beforeSetFloatInternal != null)
                foreach (Delegates.SetFloatInternal_BeforeArgs toInvoke in _beforeSetFloatInternal.GetInvocationList())
                    try
                    {
                        _beforeSetFloatInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            floatName = @params.floatName;
            value = @params.value;
            orig(self, floatName, value);
            if (_afterSetFloatInternal != null)
                foreach (Delegates.SetFloatInternal_AfterArgs toInvoke in _afterSetFloatInternal.GetInvocationList())
                    try
                    {
                        _afterSetFloatInternal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetFloatInternal()
        {
            if (!HookedList.Contains("GetFloatInternal"))
            {
                HookedList.Add("GetFloatInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetFloatInternal"),
                    GetFloatInternal);
            }
        }

        internal static event Delegates.GetFloatInternal_BeforeArgs _beforeGetFloatInternal;
        internal static event Delegates.GetFloatInternal_AfterArgs _afterGetFloatInternal;

        private static float GetFloatInternal(Func<PlayerData, string, float> orig, PlayerData self, string floatName)
        {
            Delegates.Params_GetFloatInternal @params = new()
            {
                self = self, floatName = floatName
            };
            if (_beforeGetFloatInternal != null)
                foreach (Delegates.GetFloatInternal_BeforeArgs toInvoke in _beforeGetFloatInternal.GetInvocationList())
                    try
                    {
                        _beforeGetFloatInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            floatName = @params.floatName;
            var retVal = orig(self, floatName);
            if (_afterGetFloatInternal != null)
                foreach (Delegates.GetFloatInternal_AfterArgs toInvoke in _afterGetFloatInternal.GetInvocationList())
                    try
                    {
                        retVal = _afterGetFloatInternal.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetStringInternal()
        {
            if (!HookedList.Contains("SetStringInternal"))
            {
                HookedList.Add("SetStringInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetStringInternal"),
                    SetStringInternal);
            }
        }

        internal static event Delegates.SetStringInternal_BeforeArgs _beforeSetStringInternal;
        internal static event Delegates.SetStringInternal_AfterArgs _afterSetStringInternal;

        private static void SetStringInternal(Action<PlayerData, string, string> orig, PlayerData self,
            string stringName, string value)
        {
            Delegates.Params_SetStringInternal @params = new()
            {
                self = self, stringName = stringName, value = value
            };
            if (_beforeSetStringInternal != null)
                foreach (Delegates.SetStringInternal_BeforeArgs toInvoke in
                         _beforeSetStringInternal.GetInvocationList())
                    try
                    {
                        _beforeSetStringInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            stringName = @params.stringName;
            value = @params.value;
            orig(self, stringName, value);
            if (_afterSetStringInternal != null)
                foreach (Delegates.SetStringInternal_AfterArgs toInvoke in _afterSetStringInternal.GetInvocationList())
                    try
                    {
                        _afterSetStringInternal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetStringInternal()
        {
            if (!HookedList.Contains("GetStringInternal"))
            {
                HookedList.Add("GetStringInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetStringInternal"),
                    GetStringInternal);
            }
        }

        internal static event Delegates.GetStringInternal_BeforeArgs _beforeGetStringInternal;
        internal static event Delegates.GetStringInternal_AfterArgs _afterGetStringInternal;

        private static string GetStringInternal(Func<PlayerData, string, string> orig, PlayerData self,
            string stringName)
        {
            Delegates.Params_GetStringInternal @params = new()
            {
                self = self, stringName = stringName
            };
            if (_beforeGetStringInternal != null)
                foreach (Delegates.GetStringInternal_BeforeArgs toInvoke in
                         _beforeGetStringInternal.GetInvocationList())
                    try
                    {
                        _beforeGetStringInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            stringName = @params.stringName;
            var retVal = orig(self, stringName);
            if (_afterGetStringInternal != null)
                foreach (Delegates.GetStringInternal_AfterArgs toInvoke in _afterGetStringInternal.GetInvocationList())
                    try
                    {
                        retVal = _afterGetStringInternal.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookSetVector3Internal()
        {
            if (!HookedList.Contains("SetVector3Internal"))
            {
                HookedList.Add("SetVector3Internal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetVector3Internal"),
                    SetVector3Internal);
            }
        }

        internal static event Delegates.SetVector3Internal_BeforeArgs _beforeSetVector3Internal;
        internal static event Delegates.SetVector3Internal_AfterArgs _afterSetVector3Internal;

        private static void SetVector3Internal(Action<PlayerData, string, Vector3> orig, PlayerData self,
            string vector3Name, Vector3 value)
        {
            Delegates.Params_SetVector3Internal @params = new()
            {
                self = self, vector3Name = vector3Name, value = value
            };
            if (_beforeSetVector3Internal != null)
                foreach (Delegates.SetVector3Internal_BeforeArgs toInvoke in
                         _beforeSetVector3Internal.GetInvocationList())
                    try
                    {
                        _beforeSetVector3Internal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            vector3Name = @params.vector3Name;
            value = @params.value;
            orig(self, vector3Name, value);
            if (_afterSetVector3Internal != null)
                foreach (Delegates.SetVector3Internal_AfterArgs toInvoke in
                         _afterSetVector3Internal.GetInvocationList())
                    try
                    {
                        _afterSetVector3Internal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookGetVector3Internal()
        {
            if (!HookedList.Contains("GetVector3Internal"))
            {
                HookedList.Add("GetVector3Internal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetVector3Internal"),
                    GetVector3Internal);
            }
        }

        internal static event Delegates.GetVector3Internal_BeforeArgs _beforeGetVector3Internal;
        internal static event Delegates.GetVector3Internal_AfterArgs _afterGetVector3Internal;

        private static Vector3 GetVector3Internal(Func<PlayerData, string, Vector3> orig,
            PlayerData self, string vector3Name)
        {
            Delegates.Params_GetVector3Internal @params = new()
            {
                self = self, vector3Name = vector3Name
            };
            if (_beforeGetVector3Internal != null)
                foreach (Delegates.GetVector3Internal_BeforeArgs toInvoke in
                         _beforeGetVector3Internal.GetInvocationList())
                    try
                    {
                        _beforeGetVector3Internal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            vector3Name = @params.vector3Name;
            var retVal = orig(self, vector3Name);
            if (_afterGetVector3Internal != null)
                foreach (Delegates.GetVector3Internal_AfterArgs toInvoke in
                         _afterGetVector3Internal.GetInvocationList())
                    try
                    {
                        retVal = _afterGetVector3Internal.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void HookTakeHealthInternal()
        {
            if (!HookedList.Contains("TakeHealthInternal"))
            {
                HookedList.Add("TakeHealthInternal");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "TakeHealthInternal"),
                    TakeHealthInternal);
            }
        }

        internal static event Delegates.TakeHealthInternal_BeforeArgs _beforeTakeHealthInternal;
        internal static event Delegates.TakeHealthInternal_AfterArgs _afterTakeHealthInternal;

        private static void TakeHealthInternal(Action<PlayerData, int> orig, PlayerData self, int amount)
        {
            Delegates.Params_TakeHealthInternal @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeTakeHealthInternal != null)
                foreach (Delegates.TakeHealthInternal_BeforeArgs toInvoke in
                         _beforeTakeHealthInternal.GetInvocationList())
                    try
                    {
                        _beforeTakeHealthInternal?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterTakeHealthInternal != null)
                foreach (Delegates.TakeHealthInternal_AfterArgs toInvoke in
                         _afterTakeHealthInternal.GetInvocationList())
                    try
                    {
                        _afterTakeHealthInternal.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_UpdateBlueHealth()
        {
            if (!HookedList.Contains("orig_UpdateBlueHealth"))
            {
                HookedList.Add("orig_UpdateBlueHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "orig_UpdateBlueHealth"),
                    orig_UpdateBlueHealth);
            }
        }

        internal static event Delegates.orig_UpdateBlueHealth_BeforeArgs _beforeorig_UpdateBlueHealth;
        internal static event Delegates.orig_UpdateBlueHealth_AfterArgs _afterorig_UpdateBlueHealth;

        private static void orig_UpdateBlueHealth(Action<PlayerData> orig, PlayerData self)
        {
            Delegates.Params_orig_UpdateBlueHealth @params = new()
            {
                self = self
            };
            if (_beforeorig_UpdateBlueHealth != null)
                foreach (Delegates.orig_UpdateBlueHealth_BeforeArgs toInvoke in _beforeorig_UpdateBlueHealth
                             .GetInvocationList())
                    try
                    {
                        _beforeorig_UpdateBlueHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterorig_UpdateBlueHealth != null)
                foreach (Delegates.orig_UpdateBlueHealth_AfterArgs toInvoke in _afterorig_UpdateBlueHealth
                             .GetInvocationList())
                    try
                    {
                        _afterorig_UpdateBlueHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookorig_AddHealth()
        {
            if (!HookedList.Contains("orig_AddHealth"))
            {
                HookedList.Add("orig_AddHealth");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PlayerData), "orig_AddHealth"), orig_AddHealth);
            }
        }

        internal static event Delegates.orig_AddHealth_BeforeArgs _beforeorig_AddHealth;
        internal static event Delegates.orig_AddHealth_AfterArgs _afterorig_AddHealth;

        private static void orig_AddHealth(Action<PlayerData, int> orig, PlayerData self, int amount)
        {
            Delegates.Params_orig_AddHealth @params = new()
            {
                self = self, amount = amount
            };
            if (_beforeorig_AddHealth != null)
                foreach (Delegates.orig_AddHealth_BeforeArgs toInvoke in _beforeorig_AddHealth.GetInvocationList())
                    try
                    {
                        _beforeorig_AddHealth?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            amount = @params.amount;
            orig(self, amount);
            if (_afterorig_AddHealth != null)
                foreach (Delegates.orig_AddHealth_AfterArgs toInvoke in _afterorig_AddHealth.GetInvocationList())
                    try
                    {
                        _afterorig_AddHealth.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ActivateTestingCheats_AfterArgs(Params_ActivateTestingCheats args);

        public delegate void ActivateTestingCheats_BeforeArgs(Params_ActivateTestingCheats args);

        public delegate void ActivateTestingCheats_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void AddGeo_AfterArgs(Params_AddGeo args);

        public delegate void AddGeo_BeforeArgs(Params_AddGeo args);

        public delegate void AddGeo_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void AddGGPlayerDataOverrides_AfterArgs(Params_AddGGPlayerDataOverrides args);

        public delegate void AddGGPlayerDataOverrides_BeforeArgs(Params_AddGGPlayerDataOverrides args);

        public delegate void AddGGPlayerDataOverrides_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void AddHealth_AfterArgs(Params_AddHealth args);

        public delegate void AddHealth_BeforeArgs(Params_AddHealth args);

        public delegate void AddHealth_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate bool AddMPCharge_AfterArgs(Params_AddMPCharge args, bool ret);

        public delegate void AddMPCharge_BeforeArgs(Params_AddMPCharge args);

        public delegate bool AddMPCharge_WithArgs(Func<PlayerData, int, bool> orig, PlayerData self, int amount);

        public delegate void AddToMaxHealth_AfterArgs(Params_AddToMaxHealth args);

        public delegate void AddToMaxHealth_BeforeArgs(Params_AddToMaxHealth args);

        public delegate void AddToMaxHealth_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void AddToMaxMPReserve_AfterArgs(Params_AddToMaxMPReserve args);

        public delegate void AddToMaxMPReserve_BeforeArgs(Params_AddToMaxMPReserve args);

        public delegate void AddToMaxMPReserve_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void CalculateNotchesUsed_AfterArgs(Params_CalculateNotchesUsed args);

        public delegate void CalculateNotchesUsed_BeforeArgs(Params_CalculateNotchesUsed args);

        public delegate void CalculateNotchesUsed_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void CheckAllMaps_AfterArgs(Params_CheckAllMaps args);

        public delegate void CheckAllMaps_BeforeArgs(Params_CheckAllMaps args);

        public delegate void CheckAllMaps_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void ClearMP_AfterArgs(Params_ClearMP args);

        public delegate void ClearMP_BeforeArgs(Params_ClearMP args);

        public delegate void ClearMP_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void CountCharms_AfterArgs(Params_CountCharms args);

        public delegate void CountCharms_BeforeArgs(Params_CountCharms args);

        public delegate void CountCharms_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void CountGameCompletion_AfterArgs(Params_CountGameCompletion args);

        public delegate void CountGameCompletion_BeforeArgs(Params_CountGameCompletion args);

        public delegate void CountGameCompletion_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void CountJournalEntries_AfterArgs(Params_CountJournalEntries args);

        public delegate void CountJournalEntries_BeforeArgs(Params_CountJournalEntries args);

        public delegate void CountJournalEntries_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void DecrementInt_AfterArgs(Params_DecrementInt args);

        public delegate void DecrementInt_BeforeArgs(Params_DecrementInt args);

        public delegate void DecrementInt_WithArgs(Action<PlayerData, string> orig, PlayerData self, string intName);

        public delegate void EndSoulLimiter_AfterArgs(Params_EndSoulLimiter args);

        public delegate void EndSoulLimiter_BeforeArgs(Params_EndSoulLimiter args);

        public delegate void EndSoulLimiter_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void EquipCharm_AfterArgs(Params_EquipCharm args);

        public delegate void EquipCharm_BeforeArgs(Params_EquipCharm args);

        public delegate void EquipCharm_WithArgs(Action<PlayerData, int> orig, PlayerData self, int charmNum);

        public delegate int get_CurrentMaxHealth_AfterArgs(Params_get_CurrentMaxHealth args, int ret);

        public delegate void get_CurrentMaxHealth_BeforeArgs(Params_get_CurrentMaxHealth args);

        public delegate int get_CurrentMaxHealth_WithArgs(Func<PlayerData, int> orig, PlayerData self);

        public delegate PlayerData get_instance_AfterArgs(PlayerData ret);

        public delegate void get_instance_BeforeArgs();

        public delegate PlayerData get_instance_WithArgs(Func<PlayerData> orig);

        public delegate void GetAllPowerups_AfterArgs(Params_GetAllPowerups args);

        public delegate void GetAllPowerups_BeforeArgs(Params_GetAllPowerups args);

        public delegate void GetAllPowerups_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate bool GetBool_AfterArgs(Params_GetBool args, bool ret);

        public delegate void GetBool_BeforeArgs(Params_GetBool args);

        public delegate bool GetBool_WithArgs(Func<PlayerData, string, bool> orig, PlayerData self, string boolName);

        public delegate bool GetBoolInternal_AfterArgs(Params_GetBoolInternal args, bool ret);

        public delegate void GetBoolInternal_BeforeArgs(Params_GetBoolInternal args);

        public delegate bool GetBoolInternal_WithArgs(Func<PlayerData, string, bool> orig, PlayerData self,
            string boolName);

        public delegate float GetFloat_AfterArgs(Params_GetFloat args, float ret);

        public delegate void GetFloat_BeforeArgs(Params_GetFloat args);

        public delegate float GetFloat_WithArgs(Func<PlayerData, string, float> orig, PlayerData self,
            string floatName);

        public delegate float GetFloatInternal_AfterArgs(Params_GetFloatInternal args, float ret);

        public delegate void GetFloatInternal_BeforeArgs(Params_GetFloatInternal args);

        public delegate float GetFloatInternal_WithArgs(Func<PlayerData, string, float> orig, PlayerData self,
            string floatName);

        public delegate int GetInt_AfterArgs(Params_GetInt args, int ret);

        public delegate void GetInt_BeforeArgs(Params_GetInt args);

        public delegate int GetInt_WithArgs(Func<PlayerData, string, int> orig, PlayerData self, string intName);

        public delegate int GetIntInternal_AfterArgs(Params_GetIntInternal args, int ret);

        public delegate void GetIntInternal_BeforeArgs(Params_GetIntInternal args);

        public delegate int GetIntInternal_WithArgs(Func<PlayerData, string, int> orig, PlayerData self,
            string intName);

        public delegate string GetString_AfterArgs(Params_GetString args, string ret);

        public delegate void GetString_BeforeArgs(Params_GetString args);

        public delegate string GetString_WithArgs(Func<PlayerData, string, string> orig, PlayerData self,
            string stringName);

        public delegate string GetStringInternal_AfterArgs(Params_GetStringInternal args, string ret);

        public delegate void GetStringInternal_BeforeArgs(Params_GetStringInternal args);

        public delegate string GetStringInternal_WithArgs(Func<PlayerData, string, string> orig, PlayerData self,
            string stringName);

        public delegate Vector3 GetVector3_AfterArgs(Params_GetVector3 args, Vector3 ret);

        public delegate void GetVector3_BeforeArgs(Params_GetVector3 args);

        public delegate Vector3 GetVector3_WithArgs(Func<PlayerData, string, Vector3> orig,
            PlayerData self, string vectorName);

        public delegate Vector3 GetVector3Internal_AfterArgs(Params_GetVector3Internal args,
            Vector3 ret);

        public delegate void GetVector3Internal_BeforeArgs(Params_GetVector3Internal args);

        public delegate Vector3 GetVector3Internal_WithArgs(
            Func<PlayerData, string, Vector3> orig, PlayerData self, string vector3Name);

        public delegate bool HasMapForScene_AfterArgs(Params_HasMapForScene args, bool ret);

        public delegate void HasMapForScene_BeforeArgs(Params_HasMapForScene args);

        public delegate bool HasMapForScene_WithArgs(Func<PlayerData, string, bool> orig, PlayerData self,
            string sceneName);

        public delegate void IncrementInt_AfterArgs(Params_IncrementInt args);

        public delegate void IncrementInt_BeforeArgs(Params_IncrementInt args);

        public delegate void IncrementInt_WithArgs(Action<PlayerData, string> orig, PlayerData self, string intName);

        public delegate void IntAdd_AfterArgs(Params_IntAdd args);

        public delegate void IntAdd_BeforeArgs(Params_IntAdd args);

        public delegate void IntAdd_WithArgs(Action<PlayerData, string, int> orig, PlayerData self, string intName,
            int amount);

        public delegate void MaxHealth_AfterArgs(Params_MaxHealth args);

        public delegate void MaxHealth_BeforeArgs(Params_MaxHealth args);

        public delegate void MaxHealth_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void orig_AddHealth_AfterArgs(Params_orig_AddHealth args);

        public delegate void orig_AddHealth_BeforeArgs(Params_orig_AddHealth args);

        public delegate void orig_AddHealth_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void orig_UpdateBlueHealth_AfterArgs(Params_orig_UpdateBlueHealth args);

        public delegate void orig_UpdateBlueHealth_BeforeArgs(Params_orig_UpdateBlueHealth args);

        public delegate void orig_UpdateBlueHealth_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void PrintStory_AfterArgs(Params_PrintStory args);

        public delegate void PrintStory_BeforeArgs(Params_PrintStory args);

        public delegate void PrintStory_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void set_instance_AfterArgs(Params_set_instance args);

        public delegate void set_instance_BeforeArgs(Params_set_instance args);

        public delegate void set_instance_WithArgs(Action<PlayerData> orig, PlayerData value);

        public delegate void SetBenchRespawn_RespawnMarker_string_int_AfterArgs(
            Params_SetBenchRespawn_RespawnMarker_string_int args);

        public delegate void SetBenchRespawn_RespawnMarker_string_int_BeforeArgs(
            Params_SetBenchRespawn_RespawnMarker_string_int args);

        public delegate void SetBenchRespawn_RespawnMarker_string_int_WithArgs(
            Action<PlayerData, RespawnMarker, string, int> orig, PlayerData self, RespawnMarker spawnMarker,
            string sceneName, int spawnType);

        public delegate void SetBenchRespawn_string_string_bool_AfterArgs(
            Params_SetBenchRespawn_string_string_bool args);

        public delegate void SetBenchRespawn_string_string_bool_BeforeArgs(
            Params_SetBenchRespawn_string_string_bool args);

        public delegate void SetBenchRespawn_string_string_bool_WithArgs(Action<PlayerData, string, string, bool> orig,
            PlayerData self, string spawnMarker, string sceneName, bool facingRight);

        public delegate void SetBenchRespawn_string_string_int_bool_AfterArgs(
            Params_SetBenchRespawn_string_string_int_bool args);

        public delegate void SetBenchRespawn_string_string_int_bool_BeforeArgs(
            Params_SetBenchRespawn_string_string_int_bool args);

        public delegate void SetBenchRespawn_string_string_int_bool_WithArgs(
            Action<PlayerData, string, string, int, bool> orig, PlayerData self, string spawnMarker, string sceneName,
            int spawnType, bool facingRight);

        public delegate void SetBool_AfterArgs(Params_SetBool args);

        public delegate void SetBool_BeforeArgs(Params_SetBool args);

        public delegate void SetBool_WithArgs(Action<PlayerData, string, bool> orig, PlayerData self, string boolName,
            bool value);

        public delegate void SetBoolInternal_AfterArgs(Params_SetBoolInternal args);

        public delegate void SetBoolInternal_BeforeArgs(Params_SetBoolInternal args);

        public delegate void SetBoolInternal_WithArgs(Action<PlayerData, string, bool> orig, PlayerData self,
            string boolName, bool value);

        public delegate void SetBoolSwappedArgs_AfterArgs(Params_SetBoolSwappedArgs args);

        public delegate void SetBoolSwappedArgs_BeforeArgs(Params_SetBoolSwappedArgs args);

        public delegate void SetBoolSwappedArgs_WithArgs(Action<PlayerData, bool, string> orig, PlayerData self,
            bool value, string name);

        public delegate void SetFloat_AfterArgs(Params_SetFloat args);

        public delegate void SetFloat_BeforeArgs(Params_SetFloat args);

        public delegate void SetFloat_WithArgs(Action<PlayerData, string, float> orig, PlayerData self,
            string floatName, float value);

        public delegate void SetFloatInternal_AfterArgs(Params_SetFloatInternal args);

        public delegate void SetFloatInternal_BeforeArgs(Params_SetFloatInternal args);

        public delegate void SetFloatInternal_WithArgs(Action<PlayerData, string, float> orig, PlayerData self,
            string floatName, float value);

        public delegate void SetFloatSwappedArgs_AfterArgs(Params_SetFloatSwappedArgs args);

        public delegate void SetFloatSwappedArgs_BeforeArgs(Params_SetFloatSwappedArgs args);

        public delegate void SetFloatSwappedArgs_WithArgs(Action<PlayerData, float, string> orig, PlayerData self,
            float value, string name);

        public delegate void SetHazardRespawn_HazardRespawnMarker_AfterArgs(
            Params_SetHazardRespawn_HazardRespawnMarker args);

        public delegate void SetHazardRespawn_HazardRespawnMarker_BeforeArgs(
            Params_SetHazardRespawn_HazardRespawnMarker args);

        public delegate void SetHazardRespawn_HazardRespawnMarker_WithArgs(Action<PlayerData, HazardRespawnMarker> orig,
            PlayerData self, HazardRespawnMarker location);

        public delegate void SetHazardRespawn_Vector3_bool_AfterArgs(Params_SetHazardRespawn_Vector3_bool args);

        public delegate void SetHazardRespawn_Vector3_bool_BeforeArgs(Params_SetHazardRespawn_Vector3_bool args);

        public delegate void SetHazardRespawn_Vector3_bool_WithArgs(Action<PlayerData, Vector3, bool> orig,
            PlayerData self, Vector3 position, bool facingRight);

        public delegate void SetInt_AfterArgs(Params_SetInt args);

        public delegate void SetInt_BeforeArgs(Params_SetInt args);

        public delegate void SetInt_WithArgs(Action<PlayerData, string, int> orig, PlayerData self, string intName,
            int value);

        public delegate void SetIntInternal_AfterArgs(Params_SetIntInternal args);

        public delegate void SetIntInternal_BeforeArgs(Params_SetIntInternal args);

        public delegate void SetIntInternal_WithArgs(Action<PlayerData, string, int> orig, PlayerData self,
            string intName, int value);

        public delegate void SetIntSwappedArgs_AfterArgs(Params_SetIntSwappedArgs args);

        public delegate void SetIntSwappedArgs_BeforeArgs(Params_SetIntSwappedArgs args);

        public delegate void SetIntSwappedArgs_WithArgs(Action<PlayerData, int, string> orig, PlayerData self,
            int value, string name);

        public delegate void SetString_AfterArgs(Params_SetString args);

        public delegate void SetString_BeforeArgs(Params_SetString args);

        public delegate void SetString_WithArgs(Action<PlayerData, string, string> orig, PlayerData self,
            string stringName, string value);

        public delegate void SetStringInternal_AfterArgs(Params_SetStringInternal args);

        public delegate void SetStringInternal_BeforeArgs(Params_SetStringInternal args);

        public delegate void SetStringInternal_WithArgs(Action<PlayerData, string, string> orig, PlayerData self,
            string stringName, string value);

        public delegate void SetStringSwappedArgs_AfterArgs(Params_SetStringSwappedArgs args);

        public delegate void SetStringSwappedArgs_BeforeArgs(Params_SetStringSwappedArgs args);

        public delegate void SetStringSwappedArgs_WithArgs(Action<PlayerData, string, string> orig, PlayerData self,
            string value, string name);

        public delegate void SetupNewPlayerData_AfterArgs(Params_SetupNewPlayerData args);

        public delegate void SetupNewPlayerData_BeforeArgs(Params_SetupNewPlayerData args);

        public delegate void SetupNewPlayerData_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void SetVector3_AfterArgs(Params_SetVector3 args);

        public delegate void SetVector3_BeforeArgs(Params_SetVector3 args);

        public delegate void SetVector3_WithArgs(Action<PlayerData, string, Vector3> orig, PlayerData self,
            string vectorName, Vector3 value);

        public delegate void SetVector3Internal_AfterArgs(Params_SetVector3Internal args);

        public delegate void SetVector3Internal_BeforeArgs(Params_SetVector3Internal args);

        public delegate void SetVector3Internal_WithArgs(Action<PlayerData, string, Vector3> orig,
            PlayerData self, string vector3Name, Vector3 value);

        public delegate void SetVector3SwappedArgs_AfterArgs(Params_SetVector3SwappedArgs args);

        public delegate void SetVector3SwappedArgs_BeforeArgs(Params_SetVector3SwappedArgs args);

        public delegate void SetVector3SwappedArgs_WithArgs(Action<PlayerData, Vector3, string> orig,
            PlayerData self, Vector3 value, string name);

        public delegate void StartSoulLimiter_AfterArgs(Params_StartSoulLimiter args);

        public delegate void StartSoulLimiter_BeforeArgs(Params_StartSoulLimiter args);

        public delegate void StartSoulLimiter_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate void TakeGeo_AfterArgs(Params_TakeGeo args);

        public delegate void TakeGeo_BeforeArgs(Params_TakeGeo args);

        public delegate void TakeGeo_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void TakeHealth_AfterArgs(Params_TakeHealth args);

        public delegate void TakeHealth_BeforeArgs(Params_TakeHealth args);

        public delegate void TakeHealth_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void TakeHealthInternal_AfterArgs(Params_TakeHealthInternal args);

        public delegate void TakeHealthInternal_BeforeArgs(Params_TakeHealthInternal args);

        public delegate void TakeHealthInternal_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void TakeMP_AfterArgs(Params_TakeMP args);

        public delegate void TakeMP_BeforeArgs(Params_TakeMP args);

        public delegate void TakeMP_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void TakeReserveMP_AfterArgs(Params_TakeReserveMP args);

        public delegate void TakeReserveMP_BeforeArgs(Params_TakeReserveMP args);

        public delegate void TakeReserveMP_WithArgs(Action<PlayerData, int> orig, PlayerData self, int amount);

        public delegate void UnequipCharm_AfterArgs(Params_UnequipCharm args);

        public delegate void UnequipCharm_BeforeArgs(Params_UnequipCharm args);

        public delegate void UnequipCharm_WithArgs(Action<PlayerData, int> orig, PlayerData self, int charmNum);

        public delegate void UpdateBlueHealth_AfterArgs(Params_UpdateBlueHealth args);

        public delegate void UpdateBlueHealth_BeforeArgs(Params_UpdateBlueHealth args);

        public delegate void UpdateBlueHealth_WithArgs(Action<PlayerData> orig, PlayerData self);

        public delegate bool UpdateGameMap_AfterArgs(Params_UpdateGameMap args, bool ret);

        public delegate void UpdateGameMap_BeforeArgs(Params_UpdateGameMap args);

        public delegate bool UpdateGameMap_WithArgs(Func<PlayerData, bool> orig, PlayerData self);

        public delegate bool WouldDie_AfterArgs(Params_WouldDie args, bool ret);

        public delegate void WouldDie_BeforeArgs(Params_WouldDie args);

        public delegate bool WouldDie_WithArgs(Func<PlayerData, int, bool> orig, PlayerData self, int damage);

        public sealed class Params_InitMapBools
        {
            public PlayerData self;
        }

        public sealed class Params_HasMapForScene
        {
            public string sceneName;
            public PlayerData self;
        }

        public sealed class Params_get_CurrentMaxHealth
        {
            public PlayerData self;
        }

        public sealed class Params_set_instance
        {
            public PlayerData value;
        }

        public sealed class Params_PrintStory
        {
            public PlayerData self;
        }

        public sealed class Params_Reset
        {
            public PlayerData self;
        }

        public sealed class Params_UpdateGameMap
        {
            public PlayerData self;
        }

        public sealed class Params_CheckAllMaps
        {
            public PlayerData self;
        }

        public sealed class Params_SetBool
        {
            public string boolName;
            public PlayerData self;
            public bool value;
        }

        public sealed class Params_SetInt
        {
            public string intName;
            public PlayerData self;
            public int value;
        }

        public sealed class Params_IncrementInt
        {
            public string intName;
            public PlayerData self;
        }

        public sealed class Params_IntAdd
        {
            public int amount;
            public string intName;
            public PlayerData self;
        }

        public sealed class Params_SetFloat
        {
            public string floatName;
            public PlayerData self;
            public float value;
        }

        public sealed class Params_DecrementInt
        {
            public string intName;
            public PlayerData self;
        }

        public sealed class Params_GetBool
        {
            public string boolName;
            public PlayerData self;
        }

        public sealed class Params_GetInt
        {
            public string intName;
            public PlayerData self;
        }

        public sealed class Params_GetFloat
        {
            public string floatName;
            public PlayerData self;
        }

        public sealed class Params_GetString
        {
            public PlayerData self;
            public string stringName;
        }

        public sealed class Params_SetString
        {
            public PlayerData self;
            public string stringName;
            public string value;
        }

        public sealed class Params_SetVector3
        {
            public PlayerData self;
            public Vector3 value;
            public string vectorName;
        }

        public sealed class Params_GetVector3
        {
            public PlayerData self;
            public string vectorName;
        }

        public sealed class Params_AddHealth
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_TakeHealth
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_MaxHealth
        {
            public PlayerData self;
        }

        public sealed class Params_ActivateTestingCheats
        {
            public PlayerData self;
        }

        public sealed class Params_GetAllPowerups
        {
            public PlayerData self;
        }

        public sealed class Params_AddToMaxHealth
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_UpdateBlueHealth
        {
            public PlayerData self;
        }

        public sealed class Params_AddGeo
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_TakeGeo
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_WouldDie
        {
            public int damage;
            public PlayerData self;
        }

        public sealed class Params_AddMPCharge
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_TakeMP
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_TakeReserveMP
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_ClearMP
        {
            public PlayerData self;
        }

        public sealed class Params_AddToMaxMPReserve
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_StartSoulLimiter
        {
            public PlayerData self;
        }

        public sealed class Params_EndSoulLimiter
        {
            public PlayerData self;
        }

        public sealed class Params_EquipCharm
        {
            public int charmNum;
            public PlayerData self;
        }

        public sealed class Params_UnequipCharm
        {
            public int charmNum;
            public PlayerData self;
        }

        public sealed class Params_CalculateNotchesUsed
        {
            public PlayerData self;
        }

        public sealed class Params_SetBenchRespawn_RespawnMarker_string_int
        {
            public string sceneName;
            public PlayerData self;
            public RespawnMarker spawnMarker;
            public int spawnType;
        }

        public sealed class Params_SetBenchRespawn_string_string_bool
        {
            public bool facingRight;
            public string sceneName;
            public PlayerData self;
            public string spawnMarker;
        }

        public sealed class Params_SetBenchRespawn_string_string_int_bool
        {
            public bool facingRight;
            public string sceneName;
            public PlayerData self;
            public string spawnMarker;
            public int spawnType;
        }

        public sealed class Params_SetHazardRespawn_HazardRespawnMarker
        {
            public HazardRespawnMarker location;
            public PlayerData self;
        }

        public sealed class Params_SetHazardRespawn_Vector3_bool
        {
            public bool facingRight;
            public Vector3 position;
            public PlayerData self;
        }

        public sealed class Params_CountGameCompletion
        {
            public PlayerData self;
        }

        public sealed class Params_CountCharms
        {
            public PlayerData self;
        }

        public sealed class Params_CountJournalEntries
        {
            public PlayerData self;
        }

        public sealed class Params_SetupNewPlayerData
        {
            public PlayerData self;
        }

        public sealed class Params_AddGGPlayerDataOverrides
        {
            public PlayerData self;
        }

        public sealed class Params_SetBoolSwappedArgs
        {
            public string name;
            public PlayerData self;
            public bool value;
        }

        public sealed class Params_SetFloatSwappedArgs
        {
            public string name;
            public PlayerData self;
            public float value;
        }

        public sealed class Params_SetIntSwappedArgs
        {
            public string name;
            public PlayerData self;
            public int value;
        }

        public sealed class Params_SetStringSwappedArgs
        {
            public string name;
            public PlayerData self;
            public string value;
        }

        public sealed class Params_SetVector3SwappedArgs
        {
            public string name;
            public PlayerData self;
            public Vector3 value;
        }

        public sealed class Params_SetBoolInternal
        {
            public string boolName;
            public PlayerData self;
            public bool value;
        }

        public sealed class Params_GetBoolInternal
        {
            public string boolName;
            public PlayerData self;
        }

        public sealed class Params_SetIntInternal
        {
            public string intName;
            public PlayerData self;
            public int value;
        }

        public sealed class Params_GetIntInternal
        {
            public string intName;
            public PlayerData self;
        }

        public sealed class Params_SetFloatInternal
        {
            public string floatName;
            public PlayerData self;
            public float value;
        }

        public sealed class Params_GetFloatInternal
        {
            public string floatName;
            public PlayerData self;
        }

        public sealed class Params_SetStringInternal
        {
            public PlayerData self;
            public string stringName;
            public string value;
        }

        public sealed class Params_GetStringInternal
        {
            public PlayerData self;
            public string stringName;
        }

        public sealed class Params_SetVector3Internal
        {
            public PlayerData self;
            public Vector3 value;
            public string vector3Name;
        }

        public sealed class Params_GetVector3Internal
        {
            public PlayerData self;
            public string vector3Name;
        }

        public sealed class Params_TakeHealthInternal
        {
            public int amount;
            public PlayerData self;
        }

        public sealed class Params_orig_UpdateBlueHealth
        {
            public PlayerData self;
        }

        public sealed class Params_orig_AddHealth
        {
            public int amount;
            public PlayerData self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.HasMapForScene_BeforeArgs HasMapForScene
        {
            add
            {
                HookHandler._beforeHasMapForScene += value;
                HookHandler.HookHasMapForScene();
            }
            remove => HookHandler._beforeHasMapForScene -= value;
        }

        public static event Delegates.get_CurrentMaxHealth_BeforeArgs get_CurrentMaxHealth
        {
            add
            {
                HookHandler._beforeget_CurrentMaxHealth += value;
                HookHandler.Hookget_CurrentMaxHealth();
            }
            remove => HookHandler._beforeget_CurrentMaxHealth -= value;
        }

        public static event Delegates.get_instance_BeforeArgs get_instance
        {
            add
            {
                HookHandler._beforeget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._beforeget_instance -= value;
        }

        public static event Delegates.set_instance_BeforeArgs set_instance
        {
            add
            {
                HookHandler._beforeset_instance += value;
                HookHandler.Hookset_instance();
            }
            remove => HookHandler._beforeset_instance -= value;
        }

        public static event Delegates.PrintStory_BeforeArgs PrintStory
        {
            add
            {
                HookHandler._beforePrintStory += value;
                HookHandler.HookPrintStory();
            }
            remove => HookHandler._beforePrintStory -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.UpdateGameMap_BeforeArgs UpdateGameMap
        {
            add
            {
                HookHandler._beforeUpdateGameMap += value;
                HookHandler.HookUpdateGameMap();
            }
            remove => HookHandler._beforeUpdateGameMap -= value;
        }

        public static event Delegates.CheckAllMaps_BeforeArgs CheckAllMaps
        {
            add
            {
                HookHandler._beforeCheckAllMaps += value;
                HookHandler.HookCheckAllMaps();
            }
            remove => HookHandler._beforeCheckAllMaps -= value;
        }

        public static event Delegates.SetBool_BeforeArgs SetBool
        {
            add
            {
                HookHandler._beforeSetBool += value;
                HookHandler.HookSetBool();
            }
            remove => HookHandler._beforeSetBool -= value;
        }

        public static event Delegates.SetInt_BeforeArgs SetInt
        {
            add
            {
                HookHandler._beforeSetInt += value;
                HookHandler.HookSetInt();
            }
            remove => HookHandler._beforeSetInt -= value;
        }

        public static event Delegates.IncrementInt_BeforeArgs IncrementInt
        {
            add
            {
                HookHandler._beforeIncrementInt += value;
                HookHandler.HookIncrementInt();
            }
            remove => HookHandler._beforeIncrementInt -= value;
        }

        public static event Delegates.IntAdd_BeforeArgs IntAdd
        {
            add
            {
                HookHandler._beforeIntAdd += value;
                HookHandler.HookIntAdd();
            }
            remove => HookHandler._beforeIntAdd -= value;
        }

        public static event Delegates.SetFloat_BeforeArgs SetFloat
        {
            add
            {
                HookHandler._beforeSetFloat += value;
                HookHandler.HookSetFloat();
            }
            remove => HookHandler._beforeSetFloat -= value;
        }

        public static event Delegates.DecrementInt_BeforeArgs DecrementInt
        {
            add
            {
                HookHandler._beforeDecrementInt += value;
                HookHandler.HookDecrementInt();
            }
            remove => HookHandler._beforeDecrementInt -= value;
        }

        public static event Delegates.GetBool_BeforeArgs GetBool
        {
            add
            {
                HookHandler._beforeGetBool += value;
                HookHandler.HookGetBool();
            }
            remove => HookHandler._beforeGetBool -= value;
        }

        public static event Delegates.GetInt_BeforeArgs GetInt
        {
            add
            {
                HookHandler._beforeGetInt += value;
                HookHandler.HookGetInt();
            }
            remove => HookHandler._beforeGetInt -= value;
        }

        public static event Delegates.GetFloat_BeforeArgs GetFloat
        {
            add
            {
                HookHandler._beforeGetFloat += value;
                HookHandler.HookGetFloat();
            }
            remove => HookHandler._beforeGetFloat -= value;
        }

        public static event Delegates.GetString_BeforeArgs GetString
        {
            add
            {
                HookHandler._beforeGetString += value;
                HookHandler.HookGetString();
            }
            remove => HookHandler._beforeGetString -= value;
        }

        public static event Delegates.SetString_BeforeArgs SetString
        {
            add
            {
                HookHandler._beforeSetString += value;
                HookHandler.HookSetString();
            }
            remove => HookHandler._beforeSetString -= value;
        }

        public static event Delegates.SetVector3_BeforeArgs SetVector3
        {
            add
            {
                HookHandler._beforeSetVector3 += value;
                HookHandler.HookSetVector3();
            }
            remove => HookHandler._beforeSetVector3 -= value;
        }

        public static event Delegates.GetVector3_BeforeArgs GetVector3
        {
            add
            {
                HookHandler._beforeGetVector3 += value;
                HookHandler.HookGetVector3();
            }
            remove => HookHandler._beforeGetVector3 -= value;
        }

        public static event Delegates.AddHealth_BeforeArgs AddHealth
        {
            add
            {
                HookHandler._beforeAddHealth += value;
                HookHandler.HookAddHealth();
            }
            remove => HookHandler._beforeAddHealth -= value;
        }

        public static event Delegates.TakeHealth_BeforeArgs TakeHealth
        {
            add
            {
                HookHandler._beforeTakeHealth += value;
                HookHandler.HookTakeHealth();
            }
            remove => HookHandler._beforeTakeHealth -= value;
        }

        public static event Delegates.MaxHealth_BeforeArgs MaxHealth
        {
            add
            {
                HookHandler._beforeMaxHealth += value;
                HookHandler.HookMaxHealth();
            }
            remove => HookHandler._beforeMaxHealth -= value;
        }

        public static event Delegates.ActivateTestingCheats_BeforeArgs ActivateTestingCheats
        {
            add
            {
                HookHandler._beforeActivateTestingCheats += value;
                HookHandler.HookActivateTestingCheats();
            }
            remove => HookHandler._beforeActivateTestingCheats -= value;
        }

        public static event Delegates.GetAllPowerups_BeforeArgs GetAllPowerups
        {
            add
            {
                HookHandler._beforeGetAllPowerups += value;
                HookHandler.HookGetAllPowerups();
            }
            remove => HookHandler._beforeGetAllPowerups -= value;
        }

        public static event Delegates.AddToMaxHealth_BeforeArgs AddToMaxHealth
        {
            add
            {
                HookHandler._beforeAddToMaxHealth += value;
                HookHandler.HookAddToMaxHealth();
            }
            remove => HookHandler._beforeAddToMaxHealth -= value;
        }

        public static event Delegates.UpdateBlueHealth_BeforeArgs UpdateBlueHealth
        {
            add
            {
                HookHandler._beforeUpdateBlueHealth += value;
                HookHandler.HookUpdateBlueHealth();
            }
            remove => HookHandler._beforeUpdateBlueHealth -= value;
        }

        public static event Delegates.AddGeo_BeforeArgs AddGeo
        {
            add
            {
                HookHandler._beforeAddGeo += value;
                HookHandler.HookAddGeo();
            }
            remove => HookHandler._beforeAddGeo -= value;
        }

        public static event Delegates.TakeGeo_BeforeArgs TakeGeo
        {
            add
            {
                HookHandler._beforeTakeGeo += value;
                HookHandler.HookTakeGeo();
            }
            remove => HookHandler._beforeTakeGeo -= value;
        }

        public static event Delegates.WouldDie_BeforeArgs WouldDie
        {
            add
            {
                HookHandler._beforeWouldDie += value;
                HookHandler.HookWouldDie();
            }
            remove => HookHandler._beforeWouldDie -= value;
        }

        public static event Delegates.AddMPCharge_BeforeArgs AddMPCharge
        {
            add
            {
                HookHandler._beforeAddMPCharge += value;
                HookHandler.HookAddMPCharge();
            }
            remove => HookHandler._beforeAddMPCharge -= value;
        }

        public static event Delegates.TakeMP_BeforeArgs TakeMP
        {
            add
            {
                HookHandler._beforeTakeMP += value;
                HookHandler.HookTakeMP();
            }
            remove => HookHandler._beforeTakeMP -= value;
        }

        public static event Delegates.TakeReserveMP_BeforeArgs TakeReserveMP
        {
            add
            {
                HookHandler._beforeTakeReserveMP += value;
                HookHandler.HookTakeReserveMP();
            }
            remove => HookHandler._beforeTakeReserveMP -= value;
        }

        public static event Delegates.ClearMP_BeforeArgs ClearMP
        {
            add
            {
                HookHandler._beforeClearMP += value;
                HookHandler.HookClearMP();
            }
            remove => HookHandler._beforeClearMP -= value;
        }

        public static event Delegates.AddToMaxMPReserve_BeforeArgs AddToMaxMPReserve
        {
            add
            {
                HookHandler._beforeAddToMaxMPReserve += value;
                HookHandler.HookAddToMaxMPReserve();
            }
            remove => HookHandler._beforeAddToMaxMPReserve -= value;
        }

        public static event Delegates.StartSoulLimiter_BeforeArgs StartSoulLimiter
        {
            add
            {
                HookHandler._beforeStartSoulLimiter += value;
                HookHandler.HookStartSoulLimiter();
            }
            remove => HookHandler._beforeStartSoulLimiter -= value;
        }

        public static event Delegates.EndSoulLimiter_BeforeArgs EndSoulLimiter
        {
            add
            {
                HookHandler._beforeEndSoulLimiter += value;
                HookHandler.HookEndSoulLimiter();
            }
            remove => HookHandler._beforeEndSoulLimiter -= value;
        }

        public static event Delegates.EquipCharm_BeforeArgs EquipCharm
        {
            add
            {
                HookHandler._beforeEquipCharm += value;
                HookHandler.HookEquipCharm();
            }
            remove => HookHandler._beforeEquipCharm -= value;
        }

        public static event Delegates.UnequipCharm_BeforeArgs UnequipCharm
        {
            add
            {
                HookHandler._beforeUnequipCharm += value;
                HookHandler.HookUnequipCharm();
            }
            remove => HookHandler._beforeUnequipCharm -= value;
        }

        public static event Delegates.CalculateNotchesUsed_BeforeArgs CalculateNotchesUsed
        {
            add
            {
                HookHandler._beforeCalculateNotchesUsed += value;
                HookHandler.HookCalculateNotchesUsed();
            }
            remove => HookHandler._beforeCalculateNotchesUsed -= value;
        }

        public static event Delegates.SetBenchRespawn_RespawnMarker_string_int_BeforeArgs
            SetBenchRespawn_RespawnMarker_string_int
            {
                add
                {
                    HookHandler._beforeSetBenchRespawn_RespawnMarker_string_int += value;
                    HookHandler.HookSetBenchRespawn_RespawnMarker_string_int();
                }
                remove => HookHandler._beforeSetBenchRespawn_RespawnMarker_string_int -= value;
            }

        public static event Delegates.SetBenchRespawn_string_string_bool_BeforeArgs SetBenchRespawn_string_string_bool
        {
            add
            {
                HookHandler._beforeSetBenchRespawn_string_string_bool += value;
                HookHandler.HookSetBenchRespawn_string_string_bool();
            }
            remove => HookHandler._beforeSetBenchRespawn_string_string_bool -= value;
        }

        public static event Delegates.SetBenchRespawn_string_string_int_bool_BeforeArgs
            SetBenchRespawn_string_string_int_bool
            {
                add
                {
                    HookHandler._beforeSetBenchRespawn_string_string_int_bool += value;
                    HookHandler.HookSetBenchRespawn_string_string_int_bool();
                }
                remove => HookHandler._beforeSetBenchRespawn_string_string_int_bool -= value;
            }

        public static event Delegates.SetHazardRespawn_HazardRespawnMarker_BeforeArgs
            SetHazardRespawn_HazardRespawnMarker
            {
                add
                {
                    HookHandler._beforeSetHazardRespawn_HazardRespawnMarker += value;
                    HookHandler.HookSetHazardRespawn_HazardRespawnMarker();
                }
                remove => HookHandler._beforeSetHazardRespawn_HazardRespawnMarker -= value;
            }

        public static event Delegates.SetHazardRespawn_Vector3_bool_BeforeArgs SetHazardRespawn_Vector3_bool
        {
            add
            {
                HookHandler._beforeSetHazardRespawn_Vector3_bool += value;
                HookHandler.HookSetHazardRespawn_Vector3_bool();
            }
            remove => HookHandler._beforeSetHazardRespawn_Vector3_bool -= value;
        }

        public static event Delegates.CountGameCompletion_BeforeArgs CountGameCompletion
        {
            add
            {
                HookHandler._beforeCountGameCompletion += value;
                HookHandler.HookCountGameCompletion();
            }
            remove => HookHandler._beforeCountGameCompletion -= value;
        }

        public static event Delegates.CountCharms_BeforeArgs CountCharms
        {
            add
            {
                HookHandler._beforeCountCharms += value;
                HookHandler.HookCountCharms();
            }
            remove => HookHandler._beforeCountCharms -= value;
        }

        public static event Delegates.CountJournalEntries_BeforeArgs CountJournalEntries
        {
            add
            {
                HookHandler._beforeCountJournalEntries += value;
                HookHandler.HookCountJournalEntries();
            }
            remove => HookHandler._beforeCountJournalEntries -= value;
        }

        public static event Delegates.SetupNewPlayerData_BeforeArgs SetupNewPlayerData
        {
            add
            {
                HookHandler._beforeSetupNewPlayerData += value;
                HookHandler.HookSetupNewPlayerData();
            }
            remove => HookHandler._beforeSetupNewPlayerData -= value;
        }

        public static event Delegates.AddGGPlayerDataOverrides_BeforeArgs AddGGPlayerDataOverrides
        {
            add
            {
                HookHandler._beforeAddGGPlayerDataOverrides += value;
                HookHandler.HookAddGGPlayerDataOverrides();
            }
            remove => HookHandler._beforeAddGGPlayerDataOverrides -= value;
        }

        public static event Delegates.SetBoolSwappedArgs_BeforeArgs SetBoolSwappedArgs
        {
            add
            {
                HookHandler._beforeSetBoolSwappedArgs += value;
                HookHandler.HookSetBoolSwappedArgs();
            }
            remove => HookHandler._beforeSetBoolSwappedArgs -= value;
        }

        public static event Delegates.SetFloatSwappedArgs_BeforeArgs SetFloatSwappedArgs
        {
            add
            {
                HookHandler._beforeSetFloatSwappedArgs += value;
                HookHandler.HookSetFloatSwappedArgs();
            }
            remove => HookHandler._beforeSetFloatSwappedArgs -= value;
        }

        public static event Delegates.SetIntSwappedArgs_BeforeArgs SetIntSwappedArgs
        {
            add
            {
                HookHandler._beforeSetIntSwappedArgs += value;
                HookHandler.HookSetIntSwappedArgs();
            }
            remove => HookHandler._beforeSetIntSwappedArgs -= value;
        }

        public static event Delegates.SetStringSwappedArgs_BeforeArgs SetStringSwappedArgs
        {
            add
            {
                HookHandler._beforeSetStringSwappedArgs += value;
                HookHandler.HookSetStringSwappedArgs();
            }
            remove => HookHandler._beforeSetStringSwappedArgs -= value;
        }

        public static event Delegates.SetVector3SwappedArgs_BeforeArgs SetVector3SwappedArgs
        {
            add
            {
                HookHandler._beforeSetVector3SwappedArgs += value;
                HookHandler.HookSetVector3SwappedArgs();
            }
            remove => HookHandler._beforeSetVector3SwappedArgs -= value;
        }

        public static event Delegates.SetBoolInternal_BeforeArgs SetBoolInternal
        {
            add
            {
                HookHandler._beforeSetBoolInternal += value;
                HookHandler.HookSetBoolInternal();
            }
            remove => HookHandler._beforeSetBoolInternal -= value;
        }

        public static event Delegates.GetBoolInternal_BeforeArgs GetBoolInternal
        {
            add
            {
                HookHandler._beforeGetBoolInternal += value;
                HookHandler.HookGetBoolInternal();
            }
            remove => HookHandler._beforeGetBoolInternal -= value;
        }

        public static event Delegates.SetIntInternal_BeforeArgs SetIntInternal
        {
            add
            {
                HookHandler._beforeSetIntInternal += value;
                HookHandler.HookSetIntInternal();
            }
            remove => HookHandler._beforeSetIntInternal -= value;
        }

        public static event Delegates.GetIntInternal_BeforeArgs GetIntInternal
        {
            add
            {
                HookHandler._beforeGetIntInternal += value;
                HookHandler.HookGetIntInternal();
            }
            remove => HookHandler._beforeGetIntInternal -= value;
        }

        public static event Delegates.SetFloatInternal_BeforeArgs SetFloatInternal
        {
            add
            {
                HookHandler._beforeSetFloatInternal += value;
                HookHandler.HookSetFloatInternal();
            }
            remove => HookHandler._beforeSetFloatInternal -= value;
        }

        public static event Delegates.GetFloatInternal_BeforeArgs GetFloatInternal
        {
            add
            {
                HookHandler._beforeGetFloatInternal += value;
                HookHandler.HookGetFloatInternal();
            }
            remove => HookHandler._beforeGetFloatInternal -= value;
        }

        public static event Delegates.SetStringInternal_BeforeArgs SetStringInternal
        {
            add
            {
                HookHandler._beforeSetStringInternal += value;
                HookHandler.HookSetStringInternal();
            }
            remove => HookHandler._beforeSetStringInternal -= value;
        }

        public static event Delegates.GetStringInternal_BeforeArgs GetStringInternal
        {
            add
            {
                HookHandler._beforeGetStringInternal += value;
                HookHandler.HookGetStringInternal();
            }
            remove => HookHandler._beforeGetStringInternal -= value;
        }

        public static event Delegates.SetVector3Internal_BeforeArgs SetVector3Internal
        {
            add
            {
                HookHandler._beforeSetVector3Internal += value;
                HookHandler.HookSetVector3Internal();
            }
            remove => HookHandler._beforeSetVector3Internal -= value;
        }

        public static event Delegates.GetVector3Internal_BeforeArgs GetVector3Internal
        {
            add
            {
                HookHandler._beforeGetVector3Internal += value;
                HookHandler.HookGetVector3Internal();
            }
            remove => HookHandler._beforeGetVector3Internal -= value;
        }

        public static event Delegates.TakeHealthInternal_BeforeArgs TakeHealthInternal
        {
            add
            {
                HookHandler._beforeTakeHealthInternal += value;
                HookHandler.HookTakeHealthInternal();
            }
            remove => HookHandler._beforeTakeHealthInternal -= value;
        }

        public static event Delegates.orig_UpdateBlueHealth_BeforeArgs orig_UpdateBlueHealth
        {
            add
            {
                HookHandler._beforeorig_UpdateBlueHealth += value;
                HookHandler.Hookorig_UpdateBlueHealth();
            }
            remove => HookHandler._beforeorig_UpdateBlueHealth -= value;
        }

        public static event Delegates.orig_AddHealth_BeforeArgs orig_AddHealth
        {
            add
            {
                HookHandler._beforeorig_AddHealth += value;
                HookHandler.Hookorig_AddHealth();
            }
            remove => HookHandler._beforeorig_AddHealth -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.HasMapForScene_AfterArgs HasMapForScene
        {
            add
            {
                HookHandler._afterHasMapForScene += value;
                HookHandler.HookHasMapForScene();
            }
            remove => HookHandler._afterHasMapForScene -= value;
        }

        public static event Delegates.get_CurrentMaxHealth_AfterArgs get_CurrentMaxHealth
        {
            add
            {
                HookHandler._afterget_CurrentMaxHealth += value;
                HookHandler.Hookget_CurrentMaxHealth();
            }
            remove => HookHandler._afterget_CurrentMaxHealth -= value;
        }

        public static event Delegates.get_instance_AfterArgs get_instance
        {
            add
            {
                HookHandler._afterget_instance += value;
                HookHandler.Hookget_instance();
            }
            remove => HookHandler._afterget_instance -= value;
        }

        public static event Delegates.set_instance_AfterArgs set_instance
        {
            add
            {
                HookHandler._afterset_instance += value;
                HookHandler.Hookset_instance();
            }
            remove => HookHandler._afterset_instance -= value;
        }

        public static event Delegates.PrintStory_AfterArgs PrintStory
        {
            add
            {
                HookHandler._afterPrintStory += value;
                HookHandler.HookPrintStory();
            }
            remove => HookHandler._afterPrintStory -= value;
        }

        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.UpdateGameMap_AfterArgs UpdateGameMap
        {
            add
            {
                HookHandler._afterUpdateGameMap += value;
                HookHandler.HookUpdateGameMap();
            }
            remove => HookHandler._afterUpdateGameMap -= value;
        }

        public static event Delegates.CheckAllMaps_AfterArgs CheckAllMaps
        {
            add
            {
                HookHandler._afterCheckAllMaps += value;
                HookHandler.HookCheckAllMaps();
            }
            remove => HookHandler._afterCheckAllMaps -= value;
        }

        public static event Delegates.SetBool_AfterArgs SetBool
        {
            add
            {
                HookHandler._afterSetBool += value;
                HookHandler.HookSetBool();
            }
            remove => HookHandler._afterSetBool -= value;
        }

        public static event Delegates.SetInt_AfterArgs SetInt
        {
            add
            {
                HookHandler._afterSetInt += value;
                HookHandler.HookSetInt();
            }
            remove => HookHandler._afterSetInt -= value;
        }

        public static event Delegates.IncrementInt_AfterArgs IncrementInt
        {
            add
            {
                HookHandler._afterIncrementInt += value;
                HookHandler.HookIncrementInt();
            }
            remove => HookHandler._afterIncrementInt -= value;
        }

        public static event Delegates.IntAdd_AfterArgs IntAdd
        {
            add
            {
                HookHandler._afterIntAdd += value;
                HookHandler.HookIntAdd();
            }
            remove => HookHandler._afterIntAdd -= value;
        }

        public static event Delegates.SetFloat_AfterArgs SetFloat
        {
            add
            {
                HookHandler._afterSetFloat += value;
                HookHandler.HookSetFloat();
            }
            remove => HookHandler._afterSetFloat -= value;
        }

        public static event Delegates.DecrementInt_AfterArgs DecrementInt
        {
            add
            {
                HookHandler._afterDecrementInt += value;
                HookHandler.HookDecrementInt();
            }
            remove => HookHandler._afterDecrementInt -= value;
        }

        public static event Delegates.GetBool_AfterArgs GetBool
        {
            add
            {
                HookHandler._afterGetBool += value;
                HookHandler.HookGetBool();
            }
            remove => HookHandler._afterGetBool -= value;
        }

        public static event Delegates.GetInt_AfterArgs GetInt
        {
            add
            {
                HookHandler._afterGetInt += value;
                HookHandler.HookGetInt();
            }
            remove => HookHandler._afterGetInt -= value;
        }

        public static event Delegates.GetFloat_AfterArgs GetFloat
        {
            add
            {
                HookHandler._afterGetFloat += value;
                HookHandler.HookGetFloat();
            }
            remove => HookHandler._afterGetFloat -= value;
        }

        public static event Delegates.GetString_AfterArgs GetString
        {
            add
            {
                HookHandler._afterGetString += value;
                HookHandler.HookGetString();
            }
            remove => HookHandler._afterGetString -= value;
        }

        public static event Delegates.SetString_AfterArgs SetString
        {
            add
            {
                HookHandler._afterSetString += value;
                HookHandler.HookSetString();
            }
            remove => HookHandler._afterSetString -= value;
        }

        public static event Delegates.SetVector3_AfterArgs SetVector3
        {
            add
            {
                HookHandler._afterSetVector3 += value;
                HookHandler.HookSetVector3();
            }
            remove => HookHandler._afterSetVector3 -= value;
        }

        public static event Delegates.GetVector3_AfterArgs GetVector3
        {
            add
            {
                HookHandler._afterGetVector3 += value;
                HookHandler.HookGetVector3();
            }
            remove => HookHandler._afterGetVector3 -= value;
        }

        public static event Delegates.AddHealth_AfterArgs AddHealth
        {
            add
            {
                HookHandler._afterAddHealth += value;
                HookHandler.HookAddHealth();
            }
            remove => HookHandler._afterAddHealth -= value;
        }

        public static event Delegates.TakeHealth_AfterArgs TakeHealth
        {
            add
            {
                HookHandler._afterTakeHealth += value;
                HookHandler.HookTakeHealth();
            }
            remove => HookHandler._afterTakeHealth -= value;
        }

        public static event Delegates.MaxHealth_AfterArgs MaxHealth
        {
            add
            {
                HookHandler._afterMaxHealth += value;
                HookHandler.HookMaxHealth();
            }
            remove => HookHandler._afterMaxHealth -= value;
        }

        public static event Delegates.ActivateTestingCheats_AfterArgs ActivateTestingCheats
        {
            add
            {
                HookHandler._afterActivateTestingCheats += value;
                HookHandler.HookActivateTestingCheats();
            }
            remove => HookHandler._afterActivateTestingCheats -= value;
        }

        public static event Delegates.GetAllPowerups_AfterArgs GetAllPowerups
        {
            add
            {
                HookHandler._afterGetAllPowerups += value;
                HookHandler.HookGetAllPowerups();
            }
            remove => HookHandler._afterGetAllPowerups -= value;
        }

        public static event Delegates.AddToMaxHealth_AfterArgs AddToMaxHealth
        {
            add
            {
                HookHandler._afterAddToMaxHealth += value;
                HookHandler.HookAddToMaxHealth();
            }
            remove => HookHandler._afterAddToMaxHealth -= value;
        }

        public static event Delegates.UpdateBlueHealth_AfterArgs UpdateBlueHealth
        {
            add
            {
                HookHandler._afterUpdateBlueHealth += value;
                HookHandler.HookUpdateBlueHealth();
            }
            remove => HookHandler._afterUpdateBlueHealth -= value;
        }

        public static event Delegates.AddGeo_AfterArgs AddGeo
        {
            add
            {
                HookHandler._afterAddGeo += value;
                HookHandler.HookAddGeo();
            }
            remove => HookHandler._afterAddGeo -= value;
        }

        public static event Delegates.TakeGeo_AfterArgs TakeGeo
        {
            add
            {
                HookHandler._afterTakeGeo += value;
                HookHandler.HookTakeGeo();
            }
            remove => HookHandler._afterTakeGeo -= value;
        }

        public static event Delegates.WouldDie_AfterArgs WouldDie
        {
            add
            {
                HookHandler._afterWouldDie += value;
                HookHandler.HookWouldDie();
            }
            remove => HookHandler._afterWouldDie -= value;
        }

        public static event Delegates.AddMPCharge_AfterArgs AddMPCharge
        {
            add
            {
                HookHandler._afterAddMPCharge += value;
                HookHandler.HookAddMPCharge();
            }
            remove => HookHandler._afterAddMPCharge -= value;
        }

        public static event Delegates.TakeMP_AfterArgs TakeMP
        {
            add
            {
                HookHandler._afterTakeMP += value;
                HookHandler.HookTakeMP();
            }
            remove => HookHandler._afterTakeMP -= value;
        }

        public static event Delegates.TakeReserveMP_AfterArgs TakeReserveMP
        {
            add
            {
                HookHandler._afterTakeReserveMP += value;
                HookHandler.HookTakeReserveMP();
            }
            remove => HookHandler._afterTakeReserveMP -= value;
        }

        public static event Delegates.ClearMP_AfterArgs ClearMP
        {
            add
            {
                HookHandler._afterClearMP += value;
                HookHandler.HookClearMP();
            }
            remove => HookHandler._afterClearMP -= value;
        }

        public static event Delegates.AddToMaxMPReserve_AfterArgs AddToMaxMPReserve
        {
            add
            {
                HookHandler._afterAddToMaxMPReserve += value;
                HookHandler.HookAddToMaxMPReserve();
            }
            remove => HookHandler._afterAddToMaxMPReserve -= value;
        }

        public static event Delegates.StartSoulLimiter_AfterArgs StartSoulLimiter
        {
            add
            {
                HookHandler._afterStartSoulLimiter += value;
                HookHandler.HookStartSoulLimiter();
            }
            remove => HookHandler._afterStartSoulLimiter -= value;
        }

        public static event Delegates.EndSoulLimiter_AfterArgs EndSoulLimiter
        {
            add
            {
                HookHandler._afterEndSoulLimiter += value;
                HookHandler.HookEndSoulLimiter();
            }
            remove => HookHandler._afterEndSoulLimiter -= value;
        }

        public static event Delegates.EquipCharm_AfterArgs EquipCharm
        {
            add
            {
                HookHandler._afterEquipCharm += value;
                HookHandler.HookEquipCharm();
            }
            remove => HookHandler._afterEquipCharm -= value;
        }

        public static event Delegates.UnequipCharm_AfterArgs UnequipCharm
        {
            add
            {
                HookHandler._afterUnequipCharm += value;
                HookHandler.HookUnequipCharm();
            }
            remove => HookHandler._afterUnequipCharm -= value;
        }

        public static event Delegates.CalculateNotchesUsed_AfterArgs CalculateNotchesUsed
        {
            add
            {
                HookHandler._afterCalculateNotchesUsed += value;
                HookHandler.HookCalculateNotchesUsed();
            }
            remove => HookHandler._afterCalculateNotchesUsed -= value;
        }

        public static event Delegates.SetBenchRespawn_RespawnMarker_string_int_AfterArgs
            SetBenchRespawn_RespawnMarker_string_int
            {
                add
                {
                    HookHandler._afterSetBenchRespawn_RespawnMarker_string_int += value;
                    HookHandler.HookSetBenchRespawn_RespawnMarker_string_int();
                }
                remove => HookHandler._afterSetBenchRespawn_RespawnMarker_string_int -= value;
            }

        public static event Delegates.SetBenchRespawn_string_string_bool_AfterArgs SetBenchRespawn_string_string_bool
        {
            add
            {
                HookHandler._afterSetBenchRespawn_string_string_bool += value;
                HookHandler.HookSetBenchRespawn_string_string_bool();
            }
            remove => HookHandler._afterSetBenchRespawn_string_string_bool -= value;
        }

        public static event Delegates.SetBenchRespawn_string_string_int_bool_AfterArgs
            SetBenchRespawn_string_string_int_bool
            {
                add
                {
                    HookHandler._afterSetBenchRespawn_string_string_int_bool += value;
                    HookHandler.HookSetBenchRespawn_string_string_int_bool();
                }
                remove => HookHandler._afterSetBenchRespawn_string_string_int_bool -= value;
            }

        public static event Delegates.SetHazardRespawn_HazardRespawnMarker_AfterArgs
            SetHazardRespawn_HazardRespawnMarker
            {
                add
                {
                    HookHandler._afterSetHazardRespawn_HazardRespawnMarker += value;
                    HookHandler.HookSetHazardRespawn_HazardRespawnMarker();
                }
                remove => HookHandler._afterSetHazardRespawn_HazardRespawnMarker -= value;
            }

        public static event Delegates.SetHazardRespawn_Vector3_bool_AfterArgs SetHazardRespawn_Vector3_bool
        {
            add
            {
                HookHandler._afterSetHazardRespawn_Vector3_bool += value;
                HookHandler.HookSetHazardRespawn_Vector3_bool();
            }
            remove => HookHandler._afterSetHazardRespawn_Vector3_bool -= value;
        }

        public static event Delegates.CountGameCompletion_AfterArgs CountGameCompletion
        {
            add
            {
                HookHandler._afterCountGameCompletion += value;
                HookHandler.HookCountGameCompletion();
            }
            remove => HookHandler._afterCountGameCompletion -= value;
        }

        public static event Delegates.CountCharms_AfterArgs CountCharms
        {
            add
            {
                HookHandler._afterCountCharms += value;
                HookHandler.HookCountCharms();
            }
            remove => HookHandler._afterCountCharms -= value;
        }

        public static event Delegates.CountJournalEntries_AfterArgs CountJournalEntries
        {
            add
            {
                HookHandler._afterCountJournalEntries += value;
                HookHandler.HookCountJournalEntries();
            }
            remove => HookHandler._afterCountJournalEntries -= value;
        }

        public static event Delegates.SetupNewPlayerData_AfterArgs SetupNewPlayerData
        {
            add
            {
                HookHandler._afterSetupNewPlayerData += value;
                HookHandler.HookSetupNewPlayerData();
            }
            remove => HookHandler._afterSetupNewPlayerData -= value;
        }

        public static event Delegates.AddGGPlayerDataOverrides_AfterArgs AddGGPlayerDataOverrides
        {
            add
            {
                HookHandler._afterAddGGPlayerDataOverrides += value;
                HookHandler.HookAddGGPlayerDataOverrides();
            }
            remove => HookHandler._afterAddGGPlayerDataOverrides -= value;
        }

        public static event Delegates.SetBoolSwappedArgs_AfterArgs SetBoolSwappedArgs
        {
            add
            {
                HookHandler._afterSetBoolSwappedArgs += value;
                HookHandler.HookSetBoolSwappedArgs();
            }
            remove => HookHandler._afterSetBoolSwappedArgs -= value;
        }

        public static event Delegates.SetFloatSwappedArgs_AfterArgs SetFloatSwappedArgs
        {
            add
            {
                HookHandler._afterSetFloatSwappedArgs += value;
                HookHandler.HookSetFloatSwappedArgs();
            }
            remove => HookHandler._afterSetFloatSwappedArgs -= value;
        }

        public static event Delegates.SetIntSwappedArgs_AfterArgs SetIntSwappedArgs
        {
            add
            {
                HookHandler._afterSetIntSwappedArgs += value;
                HookHandler.HookSetIntSwappedArgs();
            }
            remove => HookHandler._afterSetIntSwappedArgs -= value;
        }

        public static event Delegates.SetStringSwappedArgs_AfterArgs SetStringSwappedArgs
        {
            add
            {
                HookHandler._afterSetStringSwappedArgs += value;
                HookHandler.HookSetStringSwappedArgs();
            }
            remove => HookHandler._afterSetStringSwappedArgs -= value;
        }

        public static event Delegates.SetVector3SwappedArgs_AfterArgs SetVector3SwappedArgs
        {
            add
            {
                HookHandler._afterSetVector3SwappedArgs += value;
                HookHandler.HookSetVector3SwappedArgs();
            }
            remove => HookHandler._afterSetVector3SwappedArgs -= value;
        }

        public static event Delegates.SetBoolInternal_AfterArgs SetBoolInternal
        {
            add
            {
                HookHandler._afterSetBoolInternal += value;
                HookHandler.HookSetBoolInternal();
            }
            remove => HookHandler._afterSetBoolInternal -= value;
        }

        public static event Delegates.GetBoolInternal_AfterArgs GetBoolInternal
        {
            add
            {
                HookHandler._afterGetBoolInternal += value;
                HookHandler.HookGetBoolInternal();
            }
            remove => HookHandler._afterGetBoolInternal -= value;
        }

        public static event Delegates.SetIntInternal_AfterArgs SetIntInternal
        {
            add
            {
                HookHandler._afterSetIntInternal += value;
                HookHandler.HookSetIntInternal();
            }
            remove => HookHandler._afterSetIntInternal -= value;
        }

        public static event Delegates.GetIntInternal_AfterArgs GetIntInternal
        {
            add
            {
                HookHandler._afterGetIntInternal += value;
                HookHandler.HookGetIntInternal();
            }
            remove => HookHandler._afterGetIntInternal -= value;
        }

        public static event Delegates.SetFloatInternal_AfterArgs SetFloatInternal
        {
            add
            {
                HookHandler._afterSetFloatInternal += value;
                HookHandler.HookSetFloatInternal();
            }
            remove => HookHandler._afterSetFloatInternal -= value;
        }

        public static event Delegates.GetFloatInternal_AfterArgs GetFloatInternal
        {
            add
            {
                HookHandler._afterGetFloatInternal += value;
                HookHandler.HookGetFloatInternal();
            }
            remove => HookHandler._afterGetFloatInternal -= value;
        }

        public static event Delegates.SetStringInternal_AfterArgs SetStringInternal
        {
            add
            {
                HookHandler._afterSetStringInternal += value;
                HookHandler.HookSetStringInternal();
            }
            remove => HookHandler._afterSetStringInternal -= value;
        }

        public static event Delegates.GetStringInternal_AfterArgs GetStringInternal
        {
            add
            {
                HookHandler._afterGetStringInternal += value;
                HookHandler.HookGetStringInternal();
            }
            remove => HookHandler._afterGetStringInternal -= value;
        }

        public static event Delegates.SetVector3Internal_AfterArgs SetVector3Internal
        {
            add
            {
                HookHandler._afterSetVector3Internal += value;
                HookHandler.HookSetVector3Internal();
            }
            remove => HookHandler._afterSetVector3Internal -= value;
        }

        public static event Delegates.GetVector3Internal_AfterArgs GetVector3Internal
        {
            add
            {
                HookHandler._afterGetVector3Internal += value;
                HookHandler.HookGetVector3Internal();
            }
            remove => HookHandler._afterGetVector3Internal -= value;
        }

        public static event Delegates.TakeHealthInternal_AfterArgs TakeHealthInternal
        {
            add
            {
                HookHandler._afterTakeHealthInternal += value;
                HookHandler.HookTakeHealthInternal();
            }
            remove => HookHandler._afterTakeHealthInternal -= value;
        }

        public static event Delegates.orig_UpdateBlueHealth_AfterArgs orig_UpdateBlueHealth
        {
            add
            {
                HookHandler._afterorig_UpdateBlueHealth += value;
                HookHandler.Hookorig_UpdateBlueHealth();
            }
            remove => HookHandler._afterorig_UpdateBlueHealth -= value;
        }

        public static event Delegates.orig_AddHealth_AfterArgs orig_AddHealth
        {
            add
            {
                HookHandler._afterorig_AddHealth += value;
                HookHandler.Hookorig_AddHealth();
            }
            remove => HookHandler._afterorig_AddHealth -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.PlayerData.hook_InitMapBools InitMapBools
        {
            add => On.PlayerData.InitMapBools += value;
            remove => On.PlayerData.InitMapBools -= value;
        }

        public static event On.PlayerData.hook_HasMapForScene HasMapForScene
        {
            add => On.PlayerData.HasMapForScene += value;
            remove => On.PlayerData.HasMapForScene -= value;
        }

        public static event Delegates.get_CurrentMaxHealth_WithArgs get_CurrentMaxHealth
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentMaxHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "get_CurrentMaxHealth"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentMaxHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "get_CurrentMaxHealth"), value);
        }

        public static event Delegates.get_instance_WithArgs get_instance
        {
            add => HookEndpointManager.Add<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "get_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "get_instance", false), value);
        }

        public static event Delegates.set_instance_WithArgs set_instance
        {
            add => HookEndpointManager.Add<Delegates.set_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "set_instance", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_instance_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "set_instance", false), value);
        }

        public static event On.PlayerData.hook_PrintStory PrintStory
        {
            add => On.PlayerData.PrintStory += value;
            remove => On.PlayerData.PrintStory -= value;
        }

        public static event On.PlayerData.hook_Reset Reset
        {
            add => On.PlayerData.Reset += value;
            remove => On.PlayerData.Reset -= value;
        }

        public static event On.PlayerData.hook_UpdateGameMap UpdateGameMap
        {
            add => On.PlayerData.UpdateGameMap += value;
            remove => On.PlayerData.UpdateGameMap -= value;
        }

        public static event On.PlayerData.hook_CheckAllMaps CheckAllMaps
        {
            add => On.PlayerData.CheckAllMaps += value;
            remove => On.PlayerData.CheckAllMaps -= value;
        }

        public static event On.PlayerData.hook_SetBool SetBool
        {
            add => On.PlayerData.SetBool += value;
            remove => On.PlayerData.SetBool -= value;
        }

        public static event On.PlayerData.hook_SetInt SetInt
        {
            add => On.PlayerData.SetInt += value;
            remove => On.PlayerData.SetInt -= value;
        }

        public static event On.PlayerData.hook_IncrementInt IncrementInt
        {
            add => On.PlayerData.IncrementInt += value;
            remove => On.PlayerData.IncrementInt -= value;
        }

        public static event On.PlayerData.hook_IntAdd IntAdd
        {
            add => On.PlayerData.IntAdd += value;
            remove => On.PlayerData.IntAdd -= value;
        }

        public static event On.PlayerData.hook_SetFloat SetFloat
        {
            add => On.PlayerData.SetFloat += value;
            remove => On.PlayerData.SetFloat -= value;
        }

        public static event On.PlayerData.hook_DecrementInt DecrementInt
        {
            add => On.PlayerData.DecrementInt += value;
            remove => On.PlayerData.DecrementInt -= value;
        }

        public static event On.PlayerData.hook_GetBool GetBool
        {
            add => On.PlayerData.GetBool += value;
            remove => On.PlayerData.GetBool -= value;
        }

        public static event On.PlayerData.hook_GetInt GetInt
        {
            add => On.PlayerData.GetInt += value;
            remove => On.PlayerData.GetInt -= value;
        }

        public static event On.PlayerData.hook_GetFloat GetFloat
        {
            add => On.PlayerData.GetFloat += value;
            remove => On.PlayerData.GetFloat -= value;
        }

        public static event On.PlayerData.hook_GetString GetString
        {
            add => On.PlayerData.GetString += value;
            remove => On.PlayerData.GetString -= value;
        }

        public static event On.PlayerData.hook_SetString SetString
        {
            add => On.PlayerData.SetString += value;
            remove => On.PlayerData.SetString -= value;
        }

        public static event On.PlayerData.hook_SetVector3 SetVector3
        {
            add => On.PlayerData.SetVector3 += value;
            remove => On.PlayerData.SetVector3 -= value;
        }

        public static event On.PlayerData.hook_GetVector3 GetVector3
        {
            add => On.PlayerData.GetVector3 += value;
            remove => On.PlayerData.GetVector3 -= value;
        }

        public static event On.PlayerData.hook_AddHealth AddHealth
        {
            add => On.PlayerData.AddHealth += value;
            remove => On.PlayerData.AddHealth -= value;
        }

        public static event On.PlayerData.hook_TakeHealth TakeHealth
        {
            add => On.PlayerData.TakeHealth += value;
            remove => On.PlayerData.TakeHealth -= value;
        }

        public static event On.PlayerData.hook_MaxHealth MaxHealth
        {
            add => On.PlayerData.MaxHealth += value;
            remove => On.PlayerData.MaxHealth -= value;
        }

        public static event On.PlayerData.hook_ActivateTestingCheats ActivateTestingCheats
        {
            add => On.PlayerData.ActivateTestingCheats += value;
            remove => On.PlayerData.ActivateTestingCheats -= value;
        }

        public static event On.PlayerData.hook_GetAllPowerups GetAllPowerups
        {
            add => On.PlayerData.GetAllPowerups += value;
            remove => On.PlayerData.GetAllPowerups -= value;
        }

        public static event On.PlayerData.hook_AddToMaxHealth AddToMaxHealth
        {
            add => On.PlayerData.AddToMaxHealth += value;
            remove => On.PlayerData.AddToMaxHealth -= value;
        }

        public static event On.PlayerData.hook_UpdateBlueHealth UpdateBlueHealth
        {
            add => On.PlayerData.UpdateBlueHealth += value;
            remove => On.PlayerData.UpdateBlueHealth -= value;
        }

        public static event On.PlayerData.hook_AddGeo AddGeo
        {
            add => On.PlayerData.AddGeo += value;
            remove => On.PlayerData.AddGeo -= value;
        }

        public static event On.PlayerData.hook_TakeGeo TakeGeo
        {
            add => On.PlayerData.TakeGeo += value;
            remove => On.PlayerData.TakeGeo -= value;
        }

        public static event On.PlayerData.hook_WouldDie WouldDie
        {
            add => On.PlayerData.WouldDie += value;
            remove => On.PlayerData.WouldDie -= value;
        }

        public static event On.PlayerData.hook_AddMPCharge AddMPCharge
        {
            add => On.PlayerData.AddMPCharge += value;
            remove => On.PlayerData.AddMPCharge -= value;
        }

        public static event On.PlayerData.hook_TakeMP TakeMP
        {
            add => On.PlayerData.TakeMP += value;
            remove => On.PlayerData.TakeMP -= value;
        }

        public static event On.PlayerData.hook_TakeReserveMP TakeReserveMP
        {
            add => On.PlayerData.TakeReserveMP += value;
            remove => On.PlayerData.TakeReserveMP -= value;
        }

        public static event On.PlayerData.hook_ClearMP ClearMP
        {
            add => On.PlayerData.ClearMP += value;
            remove => On.PlayerData.ClearMP -= value;
        }

        public static event On.PlayerData.hook_AddToMaxMPReserve AddToMaxMPReserve
        {
            add => On.PlayerData.AddToMaxMPReserve += value;
            remove => On.PlayerData.AddToMaxMPReserve -= value;
        }

        public static event On.PlayerData.hook_StartSoulLimiter StartSoulLimiter
        {
            add => On.PlayerData.StartSoulLimiter += value;
            remove => On.PlayerData.StartSoulLimiter -= value;
        }

        public static event On.PlayerData.hook_EndSoulLimiter EndSoulLimiter
        {
            add => On.PlayerData.EndSoulLimiter += value;
            remove => On.PlayerData.EndSoulLimiter -= value;
        }

        public static event On.PlayerData.hook_EquipCharm EquipCharm
        {
            add => On.PlayerData.EquipCharm += value;
            remove => On.PlayerData.EquipCharm -= value;
        }

        public static event On.PlayerData.hook_UnequipCharm UnequipCharm
        {
            add => On.PlayerData.UnequipCharm += value;
            remove => On.PlayerData.UnequipCharm -= value;
        }

        public static event On.PlayerData.hook_CalculateNotchesUsed CalculateNotchesUsed
        {
            add => On.PlayerData.CalculateNotchesUsed += value;
            remove => On.PlayerData.CalculateNotchesUsed -= value;
        }

        public static event On.PlayerData.hook_SetBenchRespawn_RespawnMarker_string_int
            SetBenchRespawn_RespawnMarker_string_int
            {
                add => On.PlayerData.SetBenchRespawn_RespawnMarker_string_int += value;
                remove => On.PlayerData.SetBenchRespawn_RespawnMarker_string_int -= value;
            }

        public static event On.PlayerData.hook_SetBenchRespawn_string_string_bool SetBenchRespawn_string_string_bool
        {
            add => On.PlayerData.SetBenchRespawn_string_string_bool += value;
            remove => On.PlayerData.SetBenchRespawn_string_string_bool -= value;
        }

        public static event On.PlayerData.hook_SetBenchRespawn_string_string_int_bool
            SetBenchRespawn_string_string_int_bool
            {
                add => On.PlayerData.SetBenchRespawn_string_string_int_bool += value;
                remove => On.PlayerData.SetBenchRespawn_string_string_int_bool -= value;
            }

        public static event On.PlayerData.hook_SetHazardRespawn_HazardRespawnMarker SetHazardRespawn_HazardRespawnMarker
        {
            add => On.PlayerData.SetHazardRespawn_HazardRespawnMarker += value;
            remove => On.PlayerData.SetHazardRespawn_HazardRespawnMarker -= value;
        }

        public static event On.PlayerData.hook_SetHazardRespawn_Vector3_bool SetHazardRespawn_Vector3_bool
        {
            add => On.PlayerData.SetHazardRespawn_Vector3_bool += value;
            remove => On.PlayerData.SetHazardRespawn_Vector3_bool -= value;
        }

        public static event On.PlayerData.hook_CountGameCompletion CountGameCompletion
        {
            add => On.PlayerData.CountGameCompletion += value;
            remove => On.PlayerData.CountGameCompletion -= value;
        }

        public static event On.PlayerData.hook_CountCharms CountCharms
        {
            add => On.PlayerData.CountCharms += value;
            remove => On.PlayerData.CountCharms -= value;
        }

        public static event On.PlayerData.hook_CountJournalEntries CountJournalEntries
        {
            add => On.PlayerData.CountJournalEntries += value;
            remove => On.PlayerData.CountJournalEntries -= value;
        }

        public static event On.PlayerData.hook_SetupNewPlayerData SetupNewPlayerData
        {
            add => On.PlayerData.SetupNewPlayerData += value;
            remove => On.PlayerData.SetupNewPlayerData -= value;
        }

        public static event On.PlayerData.hook_AddGGPlayerDataOverrides AddGGPlayerDataOverrides
        {
            add => On.PlayerData.AddGGPlayerDataOverrides += value;
            remove => On.PlayerData.AddGGPlayerDataOverrides -= value;
        }

        public static event On.PlayerData.hook_SetBoolSwappedArgs SetBoolSwappedArgs
        {
            add => On.PlayerData.SetBoolSwappedArgs += value;
            remove => On.PlayerData.SetBoolSwappedArgs -= value;
        }

        public static event On.PlayerData.hook_SetFloatSwappedArgs SetFloatSwappedArgs
        {
            add => On.PlayerData.SetFloatSwappedArgs += value;
            remove => On.PlayerData.SetFloatSwappedArgs -= value;
        }

        public static event On.PlayerData.hook_SetIntSwappedArgs SetIntSwappedArgs
        {
            add => On.PlayerData.SetIntSwappedArgs += value;
            remove => On.PlayerData.SetIntSwappedArgs -= value;
        }

        public static event On.PlayerData.hook_SetStringSwappedArgs SetStringSwappedArgs
        {
            add => On.PlayerData.SetStringSwappedArgs += value;
            remove => On.PlayerData.SetStringSwappedArgs -= value;
        }

        public static event On.PlayerData.hook_SetVector3SwappedArgs SetVector3SwappedArgs
        {
            add => On.PlayerData.SetVector3SwappedArgs += value;
            remove => On.PlayerData.SetVector3SwappedArgs -= value;
        }

        public static event Delegates.SetBoolInternal_WithArgs SetBoolInternal
        {
            add => HookEndpointManager.Add<Delegates.SetBoolInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetBoolInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.SetBoolInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetBoolInternal"), value);
        }

        public static event Delegates.GetBoolInternal_WithArgs GetBoolInternal
        {
            add => HookEndpointManager.Add<Delegates.GetBoolInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetBoolInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.GetBoolInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetBoolInternal"), value);
        }

        public static event Delegates.SetIntInternal_WithArgs SetIntInternal
        {
            add => HookEndpointManager.Add<Delegates.SetIntInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetIntInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.SetIntInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetIntInternal"), value);
        }

        public static event Delegates.GetIntInternal_WithArgs GetIntInternal
        {
            add => HookEndpointManager.Add<Delegates.GetIntInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetIntInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.GetIntInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetIntInternal"), value);
        }

        public static event Delegates.SetFloatInternal_WithArgs SetFloatInternal
        {
            add => HookEndpointManager.Add<Delegates.SetFloatInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetFloatInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.SetFloatInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetFloatInternal"), value);
        }

        public static event Delegates.GetFloatInternal_WithArgs GetFloatInternal
        {
            add => HookEndpointManager.Add<Delegates.GetFloatInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetFloatInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.GetFloatInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetFloatInternal"), value);
        }

        public static event Delegates.SetStringInternal_WithArgs SetStringInternal
        {
            add => HookEndpointManager.Add<Delegates.SetStringInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetStringInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.SetStringInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetStringInternal"), value);
        }

        public static event Delegates.GetStringInternal_WithArgs GetStringInternal
        {
            add => HookEndpointManager.Add<Delegates.GetStringInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetStringInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.GetStringInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetStringInternal"), value);
        }

        public static event Delegates.SetVector3Internal_WithArgs SetVector3Internal
        {
            add => HookEndpointManager.Add<Delegates.SetVector3Internal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetVector3Internal"), value);
            remove => HookEndpointManager.Remove<Delegates.SetVector3Internal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "SetVector3Internal"), value);
        }

        public static event Delegates.GetVector3Internal_WithArgs GetVector3Internal
        {
            add => HookEndpointManager.Add<Delegates.GetVector3Internal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetVector3Internal"), value);
            remove => HookEndpointManager.Remove<Delegates.GetVector3Internal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "GetVector3Internal"), value);
        }

        public static event Delegates.TakeHealthInternal_WithArgs TakeHealthInternal
        {
            add => HookEndpointManager.Add<Delegates.TakeHealthInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "TakeHealthInternal"), value);
            remove => HookEndpointManager.Remove<Delegates.TakeHealthInternal_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "TakeHealthInternal"), value);
        }

        public static event Delegates.orig_UpdateBlueHealth_WithArgs orig_UpdateBlueHealth
        {
            add => HookEndpointManager.Add<Delegates.orig_UpdateBlueHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "orig_UpdateBlueHealth"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_UpdateBlueHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "orig_UpdateBlueHealth"), value);
        }

        public static event Delegates.orig_AddHealth_WithArgs orig_AddHealth
        {
            add => HookEndpointManager.Add<Delegates.orig_AddHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "orig_AddHealth"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_AddHealth_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PlayerData), "orig_AddHealth"), value);
        }
    }
}