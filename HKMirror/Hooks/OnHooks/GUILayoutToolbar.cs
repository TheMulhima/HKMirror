using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for GUILayoutToolbar class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnGUILayoutToolbar
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Contents()
        {
            if (!HookedList.Contains("get_Contents"))
            {
                HookedList.Add("get_Contents");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "get_Contents"), get_Contents);
            }
        }

        internal static event Delegates.get_Contents_BeforeArgs _beforeget_Contents;
        internal static event Delegates.get_Contents_NormalArgs _afterget_Contents;

        private static GUIContent[] get_Contents(Func<GUILayoutToolbar, GUIContent[]> orig, GUILayoutToolbar self)
        {
            Delegates.Params_get_Contents @params = new()
            {
                self = self
            };
            _beforeget_Contents?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Contents != null) retVal = _afterget_Contents.Invoke(@params);
            return retVal;
        }

        internal static void HookSetButtonsContent()
        {
            if (!HookedList.Contains("SetButtonsContent"))
            {
                HookedList.Add("SetButtonsContent");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "SetButtonsContent"),
                    SetButtonsContent);
            }
        }

        internal static event Delegates.SetButtonsContent_BeforeArgs _beforeSetButtonsContent;
        internal static event Delegates.SetButtonsContent_NormalArgs _afterSetButtonsContent;

        private static void SetButtonsContent(Action<GUILayoutToolbar> orig, GUILayoutToolbar self)
        {
            Delegates.Params_SetButtonsContent @params = new()
            {
                self = self
            };
            _beforeSetButtonsContent?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSetButtonsContent != null) _afterSetButtonsContent.Invoke(@params);
        }

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<GUILayoutToolbar> orig, GUILayoutToolbar self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<GUILayoutToolbar> orig, GUILayoutToolbar self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "OnGUI"), OnGUI);
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_NormalArgs _afterOnGUI;

        private static void OnGUI(Action<GUILayoutToolbar> orig, GUILayoutToolbar self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            _beforeOnGUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnGUI != null) _afterOnGUI.Invoke(@params);
        }

        internal static void HookErrorCheck()
        {
            if (!HookedList.Contains("ErrorCheck"))
            {
                HookedList.Add("ErrorCheck");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "ErrorCheck"), ErrorCheck);
            }
        }

        internal static event Delegates.ErrorCheck_BeforeArgs _beforeErrorCheck;
        internal static event Delegates.ErrorCheck_NormalArgs _afterErrorCheck;

        private static string ErrorCheck(Func<GUILayoutToolbar, string> orig, GUILayoutToolbar self)
        {
            Delegates.Params_ErrorCheck @params = new()
            {
                self = self
            };
            _beforeErrorCheck?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterErrorCheck != null) retVal = _afterErrorCheck.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ErrorCheck_BeforeArgs(Params_ErrorCheck args);

        public delegate string ErrorCheck_NormalArgs(Params_ErrorCheck args);

        public delegate void get_Contents_BeforeArgs(Params_get_Contents args);

        public delegate GUIContent[] get_Contents_NormalArgs(Params_get_Contents args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_NormalArgs(Params_OnGUI args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void SetButtonsContent_BeforeArgs(Params_SetButtonsContent args);

        public delegate void SetButtonsContent_NormalArgs(Params_SetButtonsContent args);

        public sealed class Params_get_Contents
        {
            public GUILayoutToolbar self;
        }

        public sealed class Params_SetButtonsContent
        {
            public GUILayoutToolbar self;
        }

        public sealed class Params_Reset
        {
            public GUILayoutToolbar self;
        }

        public sealed class Params_OnEnter
        {
            public GUILayoutToolbar self;
        }

        public sealed class Params_OnGUI
        {
            public GUILayoutToolbar self;
        }

        public sealed class Params_ErrorCheck
        {
            public GUILayoutToolbar self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Contents_BeforeArgs get_Contents
        {
            add
            {
                HookHandler._beforeget_Contents += value;
                HookHandler.Hookget_Contents();
            }
            remove => HookHandler._beforeget_Contents -= value;
        }

        public static event Delegates.SetButtonsContent_BeforeArgs SetButtonsContent
        {
            add
            {
                HookHandler._beforeSetButtonsContent += value;
                HookHandler.HookSetButtonsContent();
            }
            remove => HookHandler._beforeSetButtonsContent -= value;
        }

        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.ErrorCheck_BeforeArgs ErrorCheck
        {
            add
            {
                HookHandler._beforeErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._beforeErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Contents_NormalArgs get_Contents
        {
            add
            {
                HookHandler._afterget_Contents += value;
                HookHandler.Hookget_Contents();
            }
            remove => HookHandler._afterget_Contents -= value;
        }

        public static event Delegates.SetButtonsContent_NormalArgs SetButtonsContent
        {
            add
            {
                HookHandler._afterSetButtonsContent += value;
                HookHandler.HookSetButtonsContent();
            }
            remove => HookHandler._afterSetButtonsContent -= value;
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add
            {
                HookHandler._afterErrorCheck += value;
                HookHandler.HookErrorCheck();
            }
            remove => HookHandler._afterErrorCheck -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Contents_NormalArgs get_Contents
        {
            add => HookEndpointManager.Add<Delegates.get_Contents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "get_Contents"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Contents_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "get_Contents"), value);
        }

        public static event Delegates.SetButtonsContent_NormalArgs SetButtonsContent
        {
            add => HookEndpointManager.Add<Delegates.SetButtonsContent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "SetButtonsContent"), value);
            remove => HookEndpointManager.Remove<Delegates.SetButtonsContent_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "SetButtonsContent"), value);
        }

        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "Reset"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "OnEnter"), value);
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add => HookEndpointManager.Add<Delegates.OnGUI_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "OnGUI"), value);
            remove => HookEndpointManager.Remove<Delegates.OnGUI_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "OnGUI"), value);
        }

        public static event Delegates.ErrorCheck_NormalArgs ErrorCheck
        {
            add => HookEndpointManager.Add<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "ErrorCheck"), value);
            remove => HookEndpointManager.Remove<Delegates.ErrorCheck_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(GUILayoutToolbar), "ErrorCheck"), value);
        }
    }
}