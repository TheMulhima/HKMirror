namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for MapNextAreaDisplay class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMapNextAreaDisplay
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.MapNextAreaDisplay.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.MapNextAreaDisplay.orig_OnEnable orig, MapNextAreaDisplay self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookActivateChildren()
        {
            if (!HookedList.Contains("ActivateChildren"))
            {
                HookedList.Add("ActivateChildren");
                On.MapNextAreaDisplay.ActivateChildren += ActivateChildren;
            }
        }

        internal static event Delegates.ActivateChildren_BeforeArgs _beforeActivateChildren;
        internal static event Delegates.ActivateChildren_NormalArgs _afterActivateChildren;

        private static void ActivateChildren(On.MapNextAreaDisplay.orig_ActivateChildren orig, MapNextAreaDisplay self)
        {
            Delegates.Params_ActivateChildren @params = new()
            {
                self = self
            };
            _beforeActivateChildren?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterActivateChildren != null) _afterActivateChildren.Invoke(@params);
        }

        internal static void HookDeactivateChildren()
        {
            if (!HookedList.Contains("DeactivateChildren"))
            {
                HookedList.Add("DeactivateChildren");
                On.MapNextAreaDisplay.DeactivateChildren += DeactivateChildren;
            }
        }

        internal static event Delegates.DeactivateChildren_BeforeArgs _beforeDeactivateChildren;
        internal static event Delegates.DeactivateChildren_NormalArgs _afterDeactivateChildren;

        private static void DeactivateChildren(On.MapNextAreaDisplay.orig_DeactivateChildren orig,
            MapNextAreaDisplay self)
        {
            Delegates.Params_DeactivateChildren @params = new()
            {
                self = self
            };
            _beforeDeactivateChildren?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDeactivateChildren != null) _afterDeactivateChildren.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ActivateChildren_BeforeArgs(Params_ActivateChildren args);

        public delegate void ActivateChildren_NormalArgs(Params_ActivateChildren args);

        public delegate void DeactivateChildren_BeforeArgs(Params_DeactivateChildren args);

        public delegate void DeactivateChildren_NormalArgs(Params_DeactivateChildren args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public sealed class Params_OnEnable
        {
            public MapNextAreaDisplay self;
        }

        public sealed class Params_ActivateChildren
        {
            public MapNextAreaDisplay self;
        }

        public sealed class Params_DeactivateChildren
        {
            public MapNextAreaDisplay self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.ActivateChildren_BeforeArgs ActivateChildren
        {
            add
            {
                HookHandler._beforeActivateChildren += value;
                HookHandler.HookActivateChildren();
            }
            remove => HookHandler._beforeActivateChildren -= value;
        }

        public static event Delegates.DeactivateChildren_BeforeArgs DeactivateChildren
        {
            add
            {
                HookHandler._beforeDeactivateChildren += value;
                HookHandler.HookDeactivateChildren();
            }
            remove => HookHandler._beforeDeactivateChildren -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.ActivateChildren_NormalArgs ActivateChildren
        {
            add
            {
                HookHandler._afterActivateChildren += value;
                HookHandler.HookActivateChildren();
            }
            remove => HookHandler._afterActivateChildren -= value;
        }

        public static event Delegates.DeactivateChildren_NormalArgs DeactivateChildren
        {
            add
            {
                HookHandler._afterDeactivateChildren += value;
                HookHandler.HookDeactivateChildren();
            }
            remove => HookHandler._afterDeactivateChildren -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MapNextAreaDisplay.hook_OnEnable OnEnable
        {
            add => On.MapNextAreaDisplay.OnEnable += value;
            remove => On.MapNextAreaDisplay.OnEnable -= value;
        }

        public static event On.MapNextAreaDisplay.hook_ActivateChildren ActivateChildren
        {
            add => On.MapNextAreaDisplay.ActivateChildren += value;
            remove => On.MapNextAreaDisplay.ActivateChildren -= value;
        }

        public static event On.MapNextAreaDisplay.hook_DeactivateChildren DeactivateChildren
        {
            add => On.MapNextAreaDisplay.DeactivateChildren += value;
            remove => On.MapNextAreaDisplay.DeactivateChildren -= value;
        }
    }
}