using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for MenuAudioSlider class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnMenuAudioSlider
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.MenuAudioSlider.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.MenuAudioSlider.orig_Start orig, MenuAudioSlider self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
            {
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                {
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
            {
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                {
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateValue()
        {
            if (!HookedList.Contains("UpdateValue"))
            {
                HookedList.Add("UpdateValue");
                On.MenuAudioSlider.UpdateValue += UpdateValue;
            }
        }

        internal static event Delegates.UpdateValue_BeforeArgs _beforeUpdateValue;
        internal static event Delegates.UpdateValue_AfterArgs _afterUpdateValue;

        private static void UpdateValue(On.MenuAudioSlider.orig_UpdateValue orig, MenuAudioSlider self)
        {
            Delegates.Params_UpdateValue @params = new()
            {
                self = self
            };
            if (_beforeUpdateValue != null)
            {
                foreach (Delegates.UpdateValue_BeforeArgs toInvoke in _beforeUpdateValue.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateValue != null)
            {
                foreach (Delegates.UpdateValue_AfterArgs toInvoke in _afterUpdateValue.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookRefreshValueFromSettings()
        {
            if (!HookedList.Contains("RefreshValueFromSettings"))
            {
                HookedList.Add("RefreshValueFromSettings");
                On.MenuAudioSlider.RefreshValueFromSettings += RefreshValueFromSettings;
            }
        }

        internal static event Delegates.RefreshValueFromSettings_BeforeArgs _beforeRefreshValueFromSettings;
        internal static event Delegates.RefreshValueFromSettings_AfterArgs _afterRefreshValueFromSettings;

        private static void RefreshValueFromSettings(On.MenuAudioSlider.orig_RefreshValueFromSettings orig,
            MenuAudioSlider self)
        {
            Delegates.Params_RefreshValueFromSettings @params = new()
            {
                self = self
            };
            if (_beforeRefreshValueFromSettings != null)
            {
                foreach (Delegates.RefreshValueFromSettings_BeforeArgs toInvoke in _beforeRefreshValueFromSettings
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeRefreshValueFromSettings?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterRefreshValueFromSettings != null)
            {
                foreach (Delegates.RefreshValueFromSettings_AfterArgs toInvoke in _afterRefreshValueFromSettings
                             .GetInvocationList())
                {
                    try
                    {
                        _afterRefreshValueFromSettings.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateTextValue()
        {
            if (!HookedList.Contains("UpdateTextValue"))
            {
                HookedList.Add("UpdateTextValue");
                On.MenuAudioSlider.UpdateTextValue += UpdateTextValue;
            }
        }

        internal static event Delegates.UpdateTextValue_BeforeArgs _beforeUpdateTextValue;
        internal static event Delegates.UpdateTextValue_AfterArgs _afterUpdateTextValue;

        private static void UpdateTextValue(On.MenuAudioSlider.orig_UpdateTextValue orig, MenuAudioSlider self,
            float value)
        {
            Delegates.Params_UpdateTextValue @params = new()
            {
                self = self, value = value
            };
            if (_beforeUpdateTextValue != null)
            {
                foreach (Delegates.UpdateTextValue_BeforeArgs toInvoke in _beforeUpdateTextValue.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateTextValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterUpdateTextValue != null)
            {
                foreach (Delegates.UpdateTextValue_AfterArgs toInvoke in _afterUpdateTextValue.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateTextValue.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetMasterLevel()
        {
            if (!HookedList.Contains("SetMasterLevel"))
            {
                HookedList.Add("SetMasterLevel");
                On.MenuAudioSlider.SetMasterLevel += SetMasterLevel;
            }
        }

        internal static event Delegates.SetMasterLevel_BeforeArgs _beforeSetMasterLevel;
        internal static event Delegates.SetMasterLevel_AfterArgs _afterSetMasterLevel;

        private static void SetMasterLevel(On.MenuAudioSlider.orig_SetMasterLevel orig, MenuAudioSlider self,
            float masterLevel)
        {
            Delegates.Params_SetMasterLevel @params = new()
            {
                self = self, masterLevel = masterLevel
            };
            if (_beforeSetMasterLevel != null)
            {
                foreach (Delegates.SetMasterLevel_BeforeArgs toInvoke in _beforeSetMasterLevel.GetInvocationList())
                {
                    try
                    {
                        _beforeSetMasterLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            masterLevel = @params.masterLevel;
            orig(self, masterLevel);
            if (_afterSetMasterLevel != null)
            {
                foreach (Delegates.SetMasterLevel_AfterArgs toInvoke in _afterSetMasterLevel.GetInvocationList())
                {
                    try
                    {
                        _afterSetMasterLevel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetMusicLevel()
        {
            if (!HookedList.Contains("SetMusicLevel"))
            {
                HookedList.Add("SetMusicLevel");
                On.MenuAudioSlider.SetMusicLevel += SetMusicLevel;
            }
        }

        internal static event Delegates.SetMusicLevel_BeforeArgs _beforeSetMusicLevel;
        internal static event Delegates.SetMusicLevel_AfterArgs _afterSetMusicLevel;

        private static void SetMusicLevel(On.MenuAudioSlider.orig_SetMusicLevel orig, MenuAudioSlider self,
            float musicLevel)
        {
            Delegates.Params_SetMusicLevel @params = new()
            {
                self = self, musicLevel = musicLevel
            };
            if (_beforeSetMusicLevel != null)
            {
                foreach (Delegates.SetMusicLevel_BeforeArgs toInvoke in _beforeSetMusicLevel.GetInvocationList())
                {
                    try
                    {
                        _beforeSetMusicLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            musicLevel = @params.musicLevel;
            orig(self, musicLevel);
            if (_afterSetMusicLevel != null)
            {
                foreach (Delegates.SetMusicLevel_AfterArgs toInvoke in _afterSetMusicLevel.GetInvocationList())
                {
                    try
                    {
                        _afterSetMusicLevel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetSoundLevel()
        {
            if (!HookedList.Contains("SetSoundLevel"))
            {
                HookedList.Add("SetSoundLevel");
                On.MenuAudioSlider.SetSoundLevel += SetSoundLevel;
            }
        }

        internal static event Delegates.SetSoundLevel_BeforeArgs _beforeSetSoundLevel;
        internal static event Delegates.SetSoundLevel_AfterArgs _afterSetSoundLevel;

        private static void SetSoundLevel(On.MenuAudioSlider.orig_SetSoundLevel orig, MenuAudioSlider self,
            float soundLevel)
        {
            Delegates.Params_SetSoundLevel @params = new()
            {
                self = self, soundLevel = soundLevel
            };
            if (_beforeSetSoundLevel != null)
            {
                foreach (Delegates.SetSoundLevel_BeforeArgs toInvoke in _beforeSetSoundLevel.GetInvocationList())
                {
                    try
                    {
                        _beforeSetSoundLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            soundLevel = @params.soundLevel;
            orig(self, soundLevel);
            if (_afterSetSoundLevel != null)
            {
                foreach (Delegates.SetSoundLevel_AfterArgs toInvoke in _afterSetSoundLevel.GetInvocationList())
                {
                    try
                    {
                        _afterSetSoundLevel.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetVolumeLevel()
        {
            if (!HookedList.Contains("GetVolumeLevel"))
            {
                HookedList.Add("GetVolumeLevel");
                On.MenuAudioSlider.GetVolumeLevel += GetVolumeLevel;
            }
        }

        internal static event Delegates.GetVolumeLevel_BeforeArgs _beforeGetVolumeLevel;
        internal static event Delegates.GetVolumeLevel_AfterArgs _afterGetVolumeLevel;

        private static float GetVolumeLevel(On.MenuAudioSlider.orig_GetVolumeLevel orig, MenuAudioSlider self, float x)
        {
            Delegates.Params_GetVolumeLevel @params = new()
            {
                self = self, x = x
            };
            if (_beforeGetVolumeLevel != null)
            {
                foreach (Delegates.GetVolumeLevel_BeforeArgs toInvoke in _beforeGetVolumeLevel.GetInvocationList())
                {
                    try
                    {
                        _beforeGetVolumeLevel?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            x = @params.x;
            var retVal = orig(self, x);
            if (_afterGetVolumeLevel != null)
            {
                foreach (Delegates.GetVolumeLevel_AfterArgs toInvoke in _afterGetVolumeLevel.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetVolumeLevel.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Start
        {
            public MenuAudioSlider self;
        }

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<MenuAudioSlider> orig, MenuAudioSlider self);

        public sealed class Params_UpdateValue
        {
            public MenuAudioSlider self;
        }

        public delegate void UpdateValue_BeforeArgs(Params_UpdateValue args);

        public delegate void UpdateValue_AfterArgs(Params_UpdateValue args);

        public delegate void UpdateValue_WithArgs(Action<MenuAudioSlider> orig, MenuAudioSlider self);

        public sealed class Params_RefreshValueFromSettings
        {
            public MenuAudioSlider self;
        }

        public delegate void RefreshValueFromSettings_BeforeArgs(Params_RefreshValueFromSettings args);

        public delegate void RefreshValueFromSettings_AfterArgs(Params_RefreshValueFromSettings args);

        public delegate void RefreshValueFromSettings_WithArgs(Action<MenuAudioSlider> orig, MenuAudioSlider self);

        public sealed class Params_UpdateTextValue
        {
            public MenuAudioSlider self;
            public float value;
        }

        public delegate void UpdateTextValue_BeforeArgs(Params_UpdateTextValue args);

        public delegate void UpdateTextValue_AfterArgs(Params_UpdateTextValue args);

        public delegate void UpdateTextValue_WithArgs(Action<MenuAudioSlider, float> orig, MenuAudioSlider self,
            float value);

        public sealed class Params_SetMasterLevel
        {
            public MenuAudioSlider self;
            public float masterLevel;
        }

        public delegate void SetMasterLevel_BeforeArgs(Params_SetMasterLevel args);

        public delegate void SetMasterLevel_AfterArgs(Params_SetMasterLevel args);

        public delegate void SetMasterLevel_WithArgs(Action<MenuAudioSlider, float> orig, MenuAudioSlider self,
            float masterLevel);

        public sealed class Params_SetMusicLevel
        {
            public MenuAudioSlider self;
            public float musicLevel;
        }

        public delegate void SetMusicLevel_BeforeArgs(Params_SetMusicLevel args);

        public delegate void SetMusicLevel_AfterArgs(Params_SetMusicLevel args);

        public delegate void SetMusicLevel_WithArgs(Action<MenuAudioSlider, float> orig, MenuAudioSlider self,
            float musicLevel);

        public sealed class Params_SetSoundLevel
        {
            public MenuAudioSlider self;
            public float soundLevel;
        }

        public delegate void SetSoundLevel_BeforeArgs(Params_SetSoundLevel args);

        public delegate void SetSoundLevel_AfterArgs(Params_SetSoundLevel args);

        public delegate void SetSoundLevel_WithArgs(Action<MenuAudioSlider, float> orig, MenuAudioSlider self,
            float soundLevel);

        public sealed class Params_GetVolumeLevel
        {
            public MenuAudioSlider self;
            public float x;
        }

        public delegate void GetVolumeLevel_BeforeArgs(Params_GetVolumeLevel args);

        public delegate float GetVolumeLevel_AfterArgs(Params_GetVolumeLevel args, float ret);

        public delegate float GetVolumeLevel_WithArgs(Func<MenuAudioSlider, float, float> orig, MenuAudioSlider self,
            float x);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.UpdateValue_BeforeArgs UpdateValue
        {
            add
            {
                HookHandler._beforeUpdateValue += value;
                HookHandler.HookUpdateValue();
            }
            remove => HookHandler._beforeUpdateValue -= value;
        }

        public static event Delegates.RefreshValueFromSettings_BeforeArgs RefreshValueFromSettings
        {
            add
            {
                HookHandler._beforeRefreshValueFromSettings += value;
                HookHandler.HookRefreshValueFromSettings();
            }
            remove => HookHandler._beforeRefreshValueFromSettings -= value;
        }

        public static event Delegates.UpdateTextValue_BeforeArgs UpdateTextValue
        {
            add
            {
                HookHandler._beforeUpdateTextValue += value;
                HookHandler.HookUpdateTextValue();
            }
            remove => HookHandler._beforeUpdateTextValue -= value;
        }

        public static event Delegates.SetMasterLevel_BeforeArgs SetMasterLevel
        {
            add
            {
                HookHandler._beforeSetMasterLevel += value;
                HookHandler.HookSetMasterLevel();
            }
            remove => HookHandler._beforeSetMasterLevel -= value;
        }

        public static event Delegates.SetMusicLevel_BeforeArgs SetMusicLevel
        {
            add
            {
                HookHandler._beforeSetMusicLevel += value;
                HookHandler.HookSetMusicLevel();
            }
            remove => HookHandler._beforeSetMusicLevel -= value;
        }

        public static event Delegates.SetSoundLevel_BeforeArgs SetSoundLevel
        {
            add
            {
                HookHandler._beforeSetSoundLevel += value;
                HookHandler.HookSetSoundLevel();
            }
            remove => HookHandler._beforeSetSoundLevel -= value;
        }

        public static event Delegates.GetVolumeLevel_BeforeArgs GetVolumeLevel
        {
            add
            {
                HookHandler._beforeGetVolumeLevel += value;
                HookHandler.HookGetVolumeLevel();
            }
            remove => HookHandler._beforeGetVolumeLevel -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.UpdateValue_AfterArgs UpdateValue
        {
            add
            {
                HookHandler._afterUpdateValue += value;
                HookHandler.HookUpdateValue();
            }
            remove => HookHandler._afterUpdateValue -= value;
        }

        public static event Delegates.RefreshValueFromSettings_AfterArgs RefreshValueFromSettings
        {
            add
            {
                HookHandler._afterRefreshValueFromSettings += value;
                HookHandler.HookRefreshValueFromSettings();
            }
            remove => HookHandler._afterRefreshValueFromSettings -= value;
        }

        public static event Delegates.UpdateTextValue_AfterArgs UpdateTextValue
        {
            add
            {
                HookHandler._afterUpdateTextValue += value;
                HookHandler.HookUpdateTextValue();
            }
            remove => HookHandler._afterUpdateTextValue -= value;
        }

        public static event Delegates.SetMasterLevel_AfterArgs SetMasterLevel
        {
            add
            {
                HookHandler._afterSetMasterLevel += value;
                HookHandler.HookSetMasterLevel();
            }
            remove => HookHandler._afterSetMasterLevel -= value;
        }

        public static event Delegates.SetMusicLevel_AfterArgs SetMusicLevel
        {
            add
            {
                HookHandler._afterSetMusicLevel += value;
                HookHandler.HookSetMusicLevel();
            }
            remove => HookHandler._afterSetMusicLevel -= value;
        }

        public static event Delegates.SetSoundLevel_AfterArgs SetSoundLevel
        {
            add
            {
                HookHandler._afterSetSoundLevel += value;
                HookHandler.HookSetSoundLevel();
            }
            remove => HookHandler._afterSetSoundLevel -= value;
        }

        public static event Delegates.GetVolumeLevel_AfterArgs GetVolumeLevel
        {
            add
            {
                HookHandler._afterGetVolumeLevel += value;
                HookHandler.HookGetVolumeLevel();
            }
            remove => HookHandler._afterGetVolumeLevel -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.MenuAudioSlider.hook_Start Start
        {
            add => On.MenuAudioSlider.Start += value;
            remove => On.MenuAudioSlider.Start -= value;
        }

        public static event On.MenuAudioSlider.hook_UpdateValue UpdateValue
        {
            add => On.MenuAudioSlider.UpdateValue += value;
            remove => On.MenuAudioSlider.UpdateValue -= value;
        }

        public static event On.MenuAudioSlider.hook_RefreshValueFromSettings RefreshValueFromSettings
        {
            add => On.MenuAudioSlider.RefreshValueFromSettings += value;
            remove => On.MenuAudioSlider.RefreshValueFromSettings -= value;
        }

        public static event On.MenuAudioSlider.hook_UpdateTextValue UpdateTextValue
        {
            add => On.MenuAudioSlider.UpdateTextValue += value;
            remove => On.MenuAudioSlider.UpdateTextValue -= value;
        }

        public static event On.MenuAudioSlider.hook_SetMasterLevel SetMasterLevel
        {
            add => On.MenuAudioSlider.SetMasterLevel += value;
            remove => On.MenuAudioSlider.SetMasterLevel -= value;
        }

        public static event On.MenuAudioSlider.hook_SetMusicLevel SetMusicLevel
        {
            add => On.MenuAudioSlider.SetMusicLevel += value;
            remove => On.MenuAudioSlider.SetMusicLevel -= value;
        }

        public static event On.MenuAudioSlider.hook_SetSoundLevel SetSoundLevel
        {
            add => On.MenuAudioSlider.SetSoundLevel += value;
            remove => On.MenuAudioSlider.SetSoundLevel -= value;
        }

        public static event On.MenuAudioSlider.hook_GetVolumeLevel GetVolumeLevel
        {
            add => On.MenuAudioSlider.GetVolumeLevel += value;
            remove => On.MenuAudioSlider.GetVolumeLevel -= value;
        }
    }
}