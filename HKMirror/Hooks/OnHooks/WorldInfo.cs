namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for WorldInfo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnWorldInfo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookNameLooksLikeGameplayScene()
        {
            if (!HookedList.Contains("NameLooksLikeGameplayScene"))
            {
                HookedList.Add("NameLooksLikeGameplayScene");
                On.WorldInfo.NameLooksLikeGameplayScene += NameLooksLikeGameplayScene;
            }
        }

        internal static event Delegates.NameLooksLikeGameplayScene_BeforeArgs _beforeNameLooksLikeGameplayScene;
        internal static event Delegates.NameLooksLikeGameplayScene_NormalArgs _afterNameLooksLikeGameplayScene;

        private static bool NameLooksLikeGameplayScene(On.WorldInfo.orig_NameLooksLikeGameplayScene orig,
            string sceneName)
        {
            Delegates.Params_NameLooksLikeGameplayScene @params = new()
            {
                sceneName = sceneName
            };
            _beforeNameLooksLikeGameplayScene?.Invoke(@params);
            sceneName = @params.sceneName;
            var retVal = orig(sceneName);
            if (_afterNameLooksLikeGameplayScene != null) retVal = _afterNameLooksLikeGameplayScene.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void NameLooksLikeGameplayScene_BeforeArgs(Params_NameLooksLikeGameplayScene args);

        public delegate bool NameLooksLikeGameplayScene_NormalArgs(Params_NameLooksLikeGameplayScene args);

        public sealed class Params_NameLooksLikeGameplayScene
        {
            public string sceneName;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.NameLooksLikeGameplayScene_BeforeArgs NameLooksLikeGameplayScene
        {
            add
            {
                HookHandler._beforeNameLooksLikeGameplayScene += value;
                HookHandler.HookNameLooksLikeGameplayScene();
            }
            remove => HookHandler._beforeNameLooksLikeGameplayScene -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.NameLooksLikeGameplayScene_NormalArgs NameLooksLikeGameplayScene
        {
            add
            {
                HookHandler._afterNameLooksLikeGameplayScene += value;
                HookHandler.HookNameLooksLikeGameplayScene();
            }
            remove => HookHandler._afterNameLooksLikeGameplayScene -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.WorldInfo.hook_NameLooksLikeGameplayScene NameLooksLikeGameplayScene
        {
            add => On.WorldInfo.NameLooksLikeGameplayScene += value;
            remove => On.WorldInfo.NameLooksLikeGameplayScene -= value;
        }
    }
}