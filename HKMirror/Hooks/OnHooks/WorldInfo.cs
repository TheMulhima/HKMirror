using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for WorldInfo class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnWorldInfo
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookNameLooksLikeGameplayScene()
{
if (!HookedList.Contains("NameLooksLikeGameplayScene"))
{
HookedList.Add("NameLooksLikeGameplayScene");
On.WorldInfo.NameLooksLikeGameplayScene += NameLooksLikeGameplayScene;

}
}
internal static event Delegates.NameLooksLikeGameplayScene_BeforeArgs _beforeNameLooksLikeGameplayScene;
internal static event Delegates.NameLooksLikeGameplayScene_AfterArgs _afterNameLooksLikeGameplayScene;
private static bool NameLooksLikeGameplayScene(On.WorldInfo.orig_NameLooksLikeGameplayScene orig, string sceneName)
{
Delegates.Params_NameLooksLikeGameplayScene @params = new() 
{
sceneName = sceneName
};
if (_beforeNameLooksLikeGameplayScene != null)
{
foreach (Delegates.NameLooksLikeGameplayScene_BeforeArgs toInvoke in _beforeNameLooksLikeGameplayScene.GetInvocationList())
{
try
{
_beforeNameLooksLikeGameplayScene?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
sceneName = @params.sceneName;
var retVal = orig(sceneName);
if (_afterNameLooksLikeGameplayScene != null)
{
foreach (Delegates.NameLooksLikeGameplayScene_AfterArgs toInvoke in _afterNameLooksLikeGameplayScene.GetInvocationList())
{
try
{
retVal = _afterNameLooksLikeGameplayScene.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_NameLooksLikeGameplayScene
{
public string sceneName;
}
public delegate void NameLooksLikeGameplayScene_BeforeArgs(Params_NameLooksLikeGameplayScene args);
public delegate bool NameLooksLikeGameplayScene_AfterArgs(Params_NameLooksLikeGameplayScene args, bool ret);
public delegate bool NameLooksLikeGameplayScene_WithArgs (Func< string, bool> orig,  string sceneName);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.NameLooksLikeGameplayScene_BeforeArgs NameLooksLikeGameplayScene
{
add
{

HookHandler._beforeNameLooksLikeGameplayScene += value;
HookHandler.HookNameLooksLikeGameplayScene();
}
remove => HookHandler._beforeNameLooksLikeGameplayScene -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.NameLooksLikeGameplayScene_AfterArgs NameLooksLikeGameplayScene
{
add
{

HookHandler._afterNameLooksLikeGameplayScene += value;
HookHandler.HookNameLooksLikeGameplayScene();
}
remove => HookHandler._afterNameLooksLikeGameplayScene -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.WorldInfo.hook_NameLooksLikeGameplayScene NameLooksLikeGameplayScene
{
add => On.WorldInfo.NameLooksLikeGameplayScene += value;
remove => On.WorldInfo.NameLooksLikeGameplayScene -= value;
}
}

}
