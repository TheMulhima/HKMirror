using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for PerformanceHUD class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPerformanceHUD
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Shared()
        {
            if (!HookedList.Contains("get_Shared"))
            {
                HookedList.Add("get_Shared");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_Shared", false), get_Shared);
            }
        }

        internal static event Delegates.get_Shared_BeforeArgs _beforeget_Shared;
        internal static event Delegates.get_Shared_NormalArgs _afterget_Shared;

        private static PerformanceHUD get_Shared(Func<PerformanceHUD> orig)
        {
            _beforeget_Shared?.Invoke();
            var retVal = orig();
            if (_afterget_Shared != null) retVal = _afterget_Shared.Invoke();
            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.PerformanceHUD.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_NormalArgs _afterInit;

        private static void Init(On.PerformanceHUD.orig_Init orig)
        {
            _beforeInit?.Invoke();
            orig();
            if (_afterInit != null) _afterInit.Invoke();
        }

        internal static void Hookget_FpsFrames()
        {
            if (!HookedList.Contains("get_FpsFrames"))
            {
                HookedList.Add("get_FpsFrames");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_FpsFrames"), get_FpsFrames);
            }
        }

        internal static event Delegates.get_FpsFrames_BeforeArgs _beforeget_FpsFrames;
        internal static event Delegates.get_FpsFrames_NormalArgs _afterget_FpsFrames;

        private static bool get_FpsFrames(Func<PerformanceHUD, bool> orig, PerformanceHUD self)
        {
            Delegates.Params_get_FpsFrames @params = new()
            {
                self = self
            };
            _beforeget_FpsFrames?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FpsFrames != null) retVal = _afterget_FpsFrames.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_FpsFrames()
        {
            if (!HookedList.Contains("set_FpsFrames"))
            {
                HookedList.Add("set_FpsFrames");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "set_FpsFrames"), set_FpsFrames);
            }
        }

        internal static event Delegates.set_FpsFrames_BeforeArgs _beforeset_FpsFrames;
        internal static event Delegates.set_FpsFrames_NormalArgs _afterset_FpsFrames;

        private static void set_FpsFrames(Action<PerformanceHUD, bool> orig, PerformanceHUD self, bool value)
        {
            Delegates.Params_set_FpsFrames @params = new()
            {
                self = self, value = value
            };
            _beforeset_FpsFrames?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_FpsFrames != null) _afterset_FpsFrames.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PerformanceHUD.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.PerformanceHUD.orig_Awake orig, PerformanceHUD self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PerformanceHUD.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.PerformanceHUD.orig_OnEnable orig, PerformanceHUD self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.PerformanceHUD.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.PerformanceHUD.orig_OnDisable orig, PerformanceHUD self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.PerformanceHUD.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.PerformanceHUD.orig_Update orig, PerformanceHUD self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookGameManager_SceneTransitionBegan()
        {
            if (!HookedList.Contains("GameManager_SceneTransitionBegan"))
            {
                HookedList.Add("GameManager_SceneTransitionBegan");
                On.PerformanceHUD.GameManager_SceneTransitionBegan += GameManager_SceneTransitionBegan;
            }
        }

        internal static event Delegates.GameManager_SceneTransitionBegan_BeforeArgs
            _beforeGameManager_SceneTransitionBegan;

        internal static event Delegates.GameManager_SceneTransitionBegan_NormalArgs
            _afterGameManager_SceneTransitionBegan;

        private static void GameManager_SceneTransitionBegan(
            On.PerformanceHUD.orig_GameManager_SceneTransitionBegan orig, PerformanceHUD self, SceneLoad sceneLoad)
        {
            Delegates.Params_GameManager_SceneTransitionBegan @params = new()
            {
                self = self, sceneLoad = sceneLoad
            };
            _beforeGameManager_SceneTransitionBegan?.Invoke(@params);
            self = @params.self;
            sceneLoad = @params.sceneLoad;
            orig(self, sceneLoad);
            if (_afterGameManager_SceneTransitionBegan != null) _afterGameManager_SceneTransitionBegan.Invoke(@params);
        }

        internal static void HookReportUpload()
        {
            if (!HookedList.Contains("ReportUpload"))
            {
                HookedList.Add("ReportUpload");
                On.PerformanceHUD.ReportUpload += ReportUpload;
            }
        }

        internal static event Delegates.ReportUpload_BeforeArgs _beforeReportUpload;

        private static IEnumerator ReportUpload(On.PerformanceHUD.orig_ReportUpload orig, PerformanceHUD self, WWW www)
        {
            Delegates.Params_ReportUpload @params = new()
            {
                self = self, www = www
            };
            _beforeReportUpload?.Invoke(@params);
            self = @params.self;
            www = @params.www;
            return orig(self, www);
        }

        internal static void HookGetTimeStr()
        {
            if (!HookedList.Contains("GetTimeStr"))
            {
                HookedList.Add("GetTimeStr");
                On.PerformanceHUD.GetTimeStr += GetTimeStr;
            }
        }

        internal static event Delegates.GetTimeStr_BeforeArgs _beforeGetTimeStr;
        internal static event Delegates.GetTimeStr_NormalArgs _afterGetTimeStr;

        private static string GetTimeStr(On.PerformanceHUD.orig_GetTimeStr orig, float? time)
        {
            Delegates.Params_GetTimeStr @params = new()
            {
                time = time
            };
            _beforeGetTimeStr?.Invoke(@params);
            time = @params.time;
            var retVal = orig(time);
            if (_afterGetTimeStr != null) retVal = _afterGetTimeStr.Invoke(@params);
            return retVal;
        }

        internal static void HookUpdateMemory()
        {
            if (!HookedList.Contains("UpdateMemory"))
            {
                HookedList.Add("UpdateMemory");
                On.PerformanceHUD.UpdateMemory += UpdateMemory;
            }
        }

        internal static event Delegates.UpdateMemory_BeforeArgs _beforeUpdateMemory;
        internal static event Delegates.UpdateMemory_NormalArgs _afterUpdateMemory;

        private static void UpdateMemory(On.PerformanceHUD.orig_UpdateMemory orig, PerformanceHUD self)
        {
            Delegates.Params_UpdateMemory @params = new()
            {
                self = self
            };
            _beforeUpdateMemory?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateMemory != null) _afterUpdateMemory.Invoke(@params);
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.PerformanceHUD.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_NormalArgs _afterOnGUI;

        private static void OnGUI(On.PerformanceHUD.orig_OnGUI orig, PerformanceHUD self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            _beforeOnGUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnGUI != null) _afterOnGUI.Invoke(@params);
        }

        internal static void HookLabelWithShadow()
        {
            if (!HookedList.Contains("LabelWithShadow"))
            {
                HookedList.Add("LabelWithShadow");
                On.PerformanceHUD.LabelWithShadow += LabelWithShadow;
            }
        }

        internal static event Delegates.LabelWithShadow_BeforeArgs _beforeLabelWithShadow;
        internal static event Delegates.LabelWithShadow_NormalArgs _afterLabelWithShadow;

        private static void LabelWithShadow(On.PerformanceHUD.orig_LabelWithShadow orig, PerformanceHUD self, Rect rect,
            GUIContent content)
        {
            Delegates.Params_LabelWithShadow @params = new()
            {
                self = self, rect = rect, content = content
            };
            _beforeLabelWithShadow?.Invoke(@params);
            self = @params.self;
            rect = @params.rect;
            content = @params.content;
            orig(self, rect, content);
            if (_afterLabelWithShadow != null) _afterLabelWithShadow.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void GameManager_SceneTransitionBegan_BeforeArgs(Params_GameManager_SceneTransitionBegan args);

        public delegate void GameManager_SceneTransitionBegan_NormalArgs(Params_GameManager_SceneTransitionBegan args);

        public delegate void get_FpsFrames_BeforeArgs(Params_get_FpsFrames args);

        public delegate bool get_FpsFrames_NormalArgs(Params_get_FpsFrames args);

        public delegate void get_Shared_BeforeArgs();

        public delegate PerformanceHUD get_Shared_NormalArgs();

        public delegate void GetTimeStr_BeforeArgs(Params_GetTimeStr args);

        public delegate string GetTimeStr_NormalArgs(Params_GetTimeStr args);

        public delegate void Init_BeforeArgs();

        public delegate void Init_NormalArgs();

        public delegate void LabelWithShadow_BeforeArgs(Params_LabelWithShadow args);

        public delegate void LabelWithShadow_NormalArgs(Params_LabelWithShadow args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_NormalArgs(Params_OnGUI args);

        public delegate void ReportUpload_BeforeArgs(Params_ReportUpload args);

        public delegate IEnumerator ReportUpload_NormalArgs(Params_ReportUpload args);

        public delegate void set_FpsFrames_BeforeArgs(Params_set_FpsFrames args);

        public delegate void set_FpsFrames_NormalArgs(Params_set_FpsFrames args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateMemory_BeforeArgs(Params_UpdateMemory args);

        public delegate void UpdateMemory_NormalArgs(Params_UpdateMemory args);

        public sealed class Params_get_FpsFrames
        {
            public PerformanceHUD self;
        }

        public sealed class Params_set_FpsFrames
        {
            public PerformanceHUD self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public PerformanceHUD self;
        }

        public sealed class Params_OnEnable
        {
            public PerformanceHUD self;
        }

        public sealed class Params_OnDisable
        {
            public PerformanceHUD self;
        }

        public sealed class Params_Update
        {
            public PerformanceHUD self;
        }

        public sealed class Params_GameManager_SceneTransitionBegan
        {
            public SceneLoad sceneLoad;
            public PerformanceHUD self;
        }

        public sealed class Params_ReportUpload
        {
            public PerformanceHUD self;
            public WWW www;
        }

        public sealed class Params_GetTimeStr
        {
            public float? time;
        }

        public sealed class Params_UpdateMemory
        {
            public PerformanceHUD self;
        }

        public sealed class Params_OnGUI
        {
            public PerformanceHUD self;
        }

        public sealed class Params_LabelWithShadow
        {
            public GUIContent content;
            public Rect rect;
            public PerformanceHUD self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Shared_BeforeArgs get_Shared
        {
            add
            {
                HookHandler._beforeget_Shared += value;
                HookHandler.Hookget_Shared();
            }
            remove => HookHandler._beforeget_Shared -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.get_FpsFrames_BeforeArgs get_FpsFrames
        {
            add
            {
                HookHandler._beforeget_FpsFrames += value;
                HookHandler.Hookget_FpsFrames();
            }
            remove => HookHandler._beforeget_FpsFrames -= value;
        }

        public static event Delegates.set_FpsFrames_BeforeArgs set_FpsFrames
        {
            add
            {
                HookHandler._beforeset_FpsFrames += value;
                HookHandler.Hookset_FpsFrames();
            }
            remove => HookHandler._beforeset_FpsFrames -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.GameManager_SceneTransitionBegan_BeforeArgs GameManager_SceneTransitionBegan
        {
            add
            {
                HookHandler._beforeGameManager_SceneTransitionBegan += value;
                HookHandler.HookGameManager_SceneTransitionBegan();
            }
            remove => HookHandler._beforeGameManager_SceneTransitionBegan -= value;
        }

        public static event Delegates.ReportUpload_BeforeArgs ReportUpload
        {
            add
            {
                HookHandler._beforeReportUpload += value;
                HookHandler.HookReportUpload();
            }
            remove => HookHandler._beforeReportUpload -= value;
        }

        public static event Delegates.GetTimeStr_BeforeArgs GetTimeStr
        {
            add
            {
                HookHandler._beforeGetTimeStr += value;
                HookHandler.HookGetTimeStr();
            }
            remove => HookHandler._beforeGetTimeStr -= value;
        }

        public static event Delegates.UpdateMemory_BeforeArgs UpdateMemory
        {
            add
            {
                HookHandler._beforeUpdateMemory += value;
                HookHandler.HookUpdateMemory();
            }
            remove => HookHandler._beforeUpdateMemory -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.LabelWithShadow_BeforeArgs LabelWithShadow
        {
            add
            {
                HookHandler._beforeLabelWithShadow += value;
                HookHandler.HookLabelWithShadow();
            }
            remove => HookHandler._beforeLabelWithShadow -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Shared_NormalArgs get_Shared
        {
            add
            {
                HookHandler._afterget_Shared += value;
                HookHandler.Hookget_Shared();
            }
            remove => HookHandler._afterget_Shared -= value;
        }

        public static event Delegates.Init_NormalArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.get_FpsFrames_NormalArgs get_FpsFrames
        {
            add
            {
                HookHandler._afterget_FpsFrames += value;
                HookHandler.Hookget_FpsFrames();
            }
            remove => HookHandler._afterget_FpsFrames -= value;
        }

        public static event Delegates.set_FpsFrames_NormalArgs set_FpsFrames
        {
            add
            {
                HookHandler._afterset_FpsFrames += value;
                HookHandler.Hookset_FpsFrames();
            }
            remove => HookHandler._afterset_FpsFrames -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.GameManager_SceneTransitionBegan_NormalArgs GameManager_SceneTransitionBegan
        {
            add
            {
                HookHandler._afterGameManager_SceneTransitionBegan += value;
                HookHandler.HookGameManager_SceneTransitionBegan();
            }
            remove => HookHandler._afterGameManager_SceneTransitionBegan -= value;
        }

        public static event Delegates.GetTimeStr_NormalArgs GetTimeStr
        {
            add
            {
                HookHandler._afterGetTimeStr += value;
                HookHandler.HookGetTimeStr();
            }
            remove => HookHandler._afterGetTimeStr -= value;
        }

        public static event Delegates.UpdateMemory_NormalArgs UpdateMemory
        {
            add
            {
                HookHandler._afterUpdateMemory += value;
                HookHandler.HookUpdateMemory();
            }
            remove => HookHandler._afterUpdateMemory -= value;
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.LabelWithShadow_NormalArgs LabelWithShadow
        {
            add
            {
                HookHandler._afterLabelWithShadow += value;
                HookHandler.HookLabelWithShadow();
            }
            remove => HookHandler._afterLabelWithShadow -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Shared_NormalArgs get_Shared
        {
            add => HookEndpointManager.Add<Delegates.get_Shared_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_Shared", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Shared_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_Shared", false), value);
        }

        public static event On.PerformanceHUD.hook_Init Init
        {
            add => On.PerformanceHUD.Init += value;
            remove => On.PerformanceHUD.Init -= value;
        }

        public static event Delegates.get_FpsFrames_NormalArgs get_FpsFrames
        {
            add => HookEndpointManager.Add<Delegates.get_FpsFrames_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_FpsFrames"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FpsFrames_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_FpsFrames"), value);
        }

        public static event Delegates.set_FpsFrames_NormalArgs set_FpsFrames
        {
            add => HookEndpointManager.Add<Delegates.set_FpsFrames_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "set_FpsFrames"), value);
            remove => HookEndpointManager.Remove<Delegates.set_FpsFrames_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "set_FpsFrames"), value);
        }

        public static event On.PerformanceHUD.hook_Awake Awake
        {
            add => On.PerformanceHUD.Awake += value;
            remove => On.PerformanceHUD.Awake -= value;
        }

        public static event On.PerformanceHUD.hook_OnEnable OnEnable
        {
            add => On.PerformanceHUD.OnEnable += value;
            remove => On.PerformanceHUD.OnEnable -= value;
        }

        public static event On.PerformanceHUD.hook_OnDisable OnDisable
        {
            add => On.PerformanceHUD.OnDisable += value;
            remove => On.PerformanceHUD.OnDisable -= value;
        }

        public static event On.PerformanceHUD.hook_Update Update
        {
            add => On.PerformanceHUD.Update += value;
            remove => On.PerformanceHUD.Update -= value;
        }

        public static event On.PerformanceHUD.hook_GameManager_SceneTransitionBegan GameManager_SceneTransitionBegan
        {
            add => On.PerformanceHUD.GameManager_SceneTransitionBegan += value;
            remove => On.PerformanceHUD.GameManager_SceneTransitionBegan -= value;
        }

        public static event On.PerformanceHUD.hook_ReportUpload ReportUpload
        {
            add => On.PerformanceHUD.ReportUpload += value;
            remove => On.PerformanceHUD.ReportUpload -= value;
        }

        public static event On.PerformanceHUD.hook_GetTimeStr GetTimeStr
        {
            add => On.PerformanceHUD.GetTimeStr += value;
            remove => On.PerformanceHUD.GetTimeStr -= value;
        }

        public static event On.PerformanceHUD.hook_UpdateMemory UpdateMemory
        {
            add => On.PerformanceHUD.UpdateMemory += value;
            remove => On.PerformanceHUD.UpdateMemory -= value;
        }

        public static event On.PerformanceHUD.hook_OnGUI OnGUI
        {
            add => On.PerformanceHUD.OnGUI += value;
            remove => On.PerformanceHUD.OnGUI -= value;
        }

        public static event On.PerformanceHUD.hook_LabelWithShadow LabelWithShadow
        {
            add => On.PerformanceHUD.LabelWithShadow += value;
            remove => On.PerformanceHUD.LabelWithShadow -= value;
        }
    }
}