using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for PerformanceHUD class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnPerformanceHUD
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_Shared()
        {
            if (!HookedList.Contains("get_Shared"))
            {
                HookedList.Add("get_Shared");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_Shared", false), get_Shared);
            }
        }

        internal static event Delegates.get_Shared_BeforeArgs _beforeget_Shared;
        internal static event Delegates.get_Shared_AfterArgs _afterget_Shared;

        private static PerformanceHUD get_Shared(Func<PerformanceHUD> orig)
        {
            if (_beforeget_Shared != null)
            {
                foreach (Delegates.get_Shared_BeforeArgs toInvoke in _beforeget_Shared.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Shared?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            var retVal = orig();
            if (_afterget_Shared != null)
            {
                foreach (Delegates.get_Shared_AfterArgs toInvoke in _afterget_Shared.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Shared.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.PerformanceHUD.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.PerformanceHUD.orig_Init orig)
        {
            if (_beforeInit != null)
            {
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                {
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            orig();
            if (_afterInit != null)
            {
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                {
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_FpsFrames()
        {
            if (!HookedList.Contains("get_FpsFrames"))
            {
                HookedList.Add("get_FpsFrames");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_FpsFrames", true), get_FpsFrames);
            }
        }

        internal static event Delegates.get_FpsFrames_BeforeArgs _beforeget_FpsFrames;
        internal static event Delegates.get_FpsFrames_AfterArgs _afterget_FpsFrames;

        private static bool get_FpsFrames(Func<PerformanceHUD, bool> orig, PerformanceHUD self)
        {
            Delegates.Params_get_FpsFrames @params = new()
            {
                self = self
            };
            if (_beforeget_FpsFrames != null)
            {
                foreach (Delegates.get_FpsFrames_BeforeArgs toInvoke in _beforeget_FpsFrames.GetInvocationList())
                {
                    try
                    {
                        _beforeget_FpsFrames?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FpsFrames != null)
            {
                foreach (Delegates.get_FpsFrames_AfterArgs toInvoke in _afterget_FpsFrames.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_FpsFrames.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_FpsFrames()
        {
            if (!HookedList.Contains("set_FpsFrames"))
            {
                HookedList.Add("set_FpsFrames");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "set_FpsFrames", true), set_FpsFrames);
            }
        }

        internal static event Delegates.set_FpsFrames_BeforeArgs _beforeset_FpsFrames;
        internal static event Delegates.set_FpsFrames_AfterArgs _afterset_FpsFrames;

        private static void set_FpsFrames(Action<PerformanceHUD, bool> orig, PerformanceHUD self, bool value)
        {
            Delegates.Params_set_FpsFrames @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_FpsFrames != null)
            {
                foreach (Delegates.set_FpsFrames_BeforeArgs toInvoke in _beforeset_FpsFrames.GetInvocationList())
                {
                    try
                    {
                        _beforeset_FpsFrames?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_FpsFrames != null)
            {
                foreach (Delegates.set_FpsFrames_AfterArgs toInvoke in _afterset_FpsFrames.GetInvocationList())
                {
                    try
                    {
                        _afterset_FpsFrames.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.PerformanceHUD.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.PerformanceHUD.orig_Awake orig, PerformanceHUD self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
            {
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                {
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
            {
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                {
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.PerformanceHUD.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.PerformanceHUD.orig_OnEnable orig, PerformanceHUD self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
            {
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
            {
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.PerformanceHUD.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.PerformanceHUD.orig_OnDisable orig, PerformanceHUD self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
            {
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                {
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
            {
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                {
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.PerformanceHUD.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(On.PerformanceHUD.orig_Update orig, PerformanceHUD self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGameManager_SceneTransitionBegan()
        {
            if (!HookedList.Contains("GameManager_SceneTransitionBegan"))
            {
                HookedList.Add("GameManager_SceneTransitionBegan");
                On.PerformanceHUD.GameManager_SceneTransitionBegan += GameManager_SceneTransitionBegan;
            }
        }

        internal static event Delegates.GameManager_SceneTransitionBegan_BeforeArgs
            _beforeGameManager_SceneTransitionBegan;

        internal static event Delegates.GameManager_SceneTransitionBegan_AfterArgs
            _afterGameManager_SceneTransitionBegan;

        private static void GameManager_SceneTransitionBegan(
            On.PerformanceHUD.orig_GameManager_SceneTransitionBegan orig, PerformanceHUD self, SceneLoad sceneLoad)
        {
            Delegates.Params_GameManager_SceneTransitionBegan @params = new()
            {
                self = self, sceneLoad = sceneLoad
            };
            if (_beforeGameManager_SceneTransitionBegan != null)
            {
                foreach (Delegates.GameManager_SceneTransitionBegan_BeforeArgs toInvoke in
                         _beforeGameManager_SceneTransitionBegan.GetInvocationList())
                {
                    try
                    {
                        _beforeGameManager_SceneTransitionBegan?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            sceneLoad = @params.sceneLoad;
            orig(self, sceneLoad);
            if (_afterGameManager_SceneTransitionBegan != null)
            {
                foreach (Delegates.GameManager_SceneTransitionBegan_AfterArgs toInvoke in
                         _afterGameManager_SceneTransitionBegan.GetInvocationList())
                {
                    try
                    {
                        _afterGameManager_SceneTransitionBegan.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookReportUpload()
        {
            if (!HookedList.Contains("ReportUpload"))
            {
                HookedList.Add("ReportUpload");
                On.PerformanceHUD.ReportUpload += ReportUpload;
            }
        }

        internal static event Delegates.ReportUpload_BeforeArgs _beforeReportUpload;

        private static System.Collections.IEnumerator ReportUpload(On.PerformanceHUD.orig_ReportUpload orig,
            PerformanceHUD self, UnityEngine.WWW www)
        {
            Delegates.Params_ReportUpload @params = new()
            {
                self = self, www = www
            };
            if (_beforeReportUpload != null)
            {
                foreach (Delegates.ReportUpload_BeforeArgs toInvoke in _beforeReportUpload.GetInvocationList())
                {
                    try
                    {
                        _beforeReportUpload?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            www = @params.www;
            return orig(self, www);
        }

        internal static void HookGetTimeStr()
        {
            if (!HookedList.Contains("GetTimeStr"))
            {
                HookedList.Add("GetTimeStr");
                On.PerformanceHUD.GetTimeStr += GetTimeStr;
            }
        }

        internal static event Delegates.GetTimeStr_BeforeArgs _beforeGetTimeStr;
        internal static event Delegates.GetTimeStr_AfterArgs _afterGetTimeStr;

        private static string GetTimeStr(On.PerformanceHUD.orig_GetTimeStr orig, float? time)
        {
            Delegates.Params_GetTimeStr @params = new()
            {
                time = time
            };
            if (_beforeGetTimeStr != null)
            {
                foreach (Delegates.GetTimeStr_BeforeArgs toInvoke in _beforeGetTimeStr.GetInvocationList())
                {
                    try
                    {
                        _beforeGetTimeStr?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            time = @params.time;
            var retVal = orig(time);
            if (_afterGetTimeStr != null)
            {
                foreach (Delegates.GetTimeStr_AfterArgs toInvoke in _afterGetTimeStr.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetTimeStr.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookUpdateMemory()
        {
            if (!HookedList.Contains("UpdateMemory"))
            {
                HookedList.Add("UpdateMemory");
                On.PerformanceHUD.UpdateMemory += UpdateMemory;
            }
        }

        internal static event Delegates.UpdateMemory_BeforeArgs _beforeUpdateMemory;
        internal static event Delegates.UpdateMemory_AfterArgs _afterUpdateMemory;

        private static void UpdateMemory(On.PerformanceHUD.orig_UpdateMemory orig, PerformanceHUD self)
        {
            Delegates.Params_UpdateMemory @params = new()
            {
                self = self
            };
            if (_beforeUpdateMemory != null)
            {
                foreach (Delegates.UpdateMemory_BeforeArgs toInvoke in _beforeUpdateMemory.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateMemory?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterUpdateMemory != null)
            {
                foreach (Delegates.UpdateMemory_AfterArgs toInvoke in _afterUpdateMemory.GetInvocationList())
                {
                    try
                    {
                        _afterUpdateMemory.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.PerformanceHUD.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;

        private static void OnGUI(On.PerformanceHUD.orig_OnGUI orig, PerformanceHUD self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            if (_beforeOnGUI != null)
            {
                foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
                {
                    try
                    {
                        _beforeOnGUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnGUI != null)
            {
                foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
                {
                    try
                    {
                        _afterOnGUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookLabelWithShadow()
        {
            if (!HookedList.Contains("LabelWithShadow"))
            {
                HookedList.Add("LabelWithShadow");
                On.PerformanceHUD.LabelWithShadow += LabelWithShadow;
            }
        }

        internal static event Delegates.LabelWithShadow_BeforeArgs _beforeLabelWithShadow;
        internal static event Delegates.LabelWithShadow_AfterArgs _afterLabelWithShadow;

        private static void LabelWithShadow(On.PerformanceHUD.orig_LabelWithShadow orig, PerformanceHUD self,
            UnityEngine.Rect rect, UnityEngine.GUIContent content)
        {
            Delegates.Params_LabelWithShadow @params = new()
            {
                self = self, rect = rect, content = content
            };
            if (_beforeLabelWithShadow != null)
            {
                foreach (Delegates.LabelWithShadow_BeforeArgs toInvoke in _beforeLabelWithShadow.GetInvocationList())
                {
                    try
                    {
                        _beforeLabelWithShadow?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            rect = @params.rect;
            content = @params.content;
            orig(self, rect, content);
            if (_afterLabelWithShadow != null)
            {
                foreach (Delegates.LabelWithShadow_AfterArgs toInvoke in _afterLabelWithShadow.GetInvocationList())
                {
                    try
                    {
                        _afterLabelWithShadow.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_Shared_BeforeArgs();

        public delegate PerformanceHUD get_Shared_AfterArgs(PerformanceHUD ret);

        public delegate PerformanceHUD get_Shared_WithArgs(Func<PerformanceHUD> orig);

        public delegate void Init_BeforeArgs();

        public delegate void Init_AfterArgs();

        public delegate void Init_WithArgs(Action orig);

        public sealed class Params_get_FpsFrames
        {
            public PerformanceHUD self;
        }

        public delegate void get_FpsFrames_BeforeArgs(Params_get_FpsFrames args);

        public delegate bool get_FpsFrames_AfterArgs(Params_get_FpsFrames args, bool ret);

        public delegate bool get_FpsFrames_WithArgs(Func<PerformanceHUD, bool> orig, PerformanceHUD self);

        public sealed class Params_set_FpsFrames
        {
            public PerformanceHUD self;
            public bool value;
        }

        public delegate void set_FpsFrames_BeforeArgs(Params_set_FpsFrames args);

        public delegate void set_FpsFrames_AfterArgs(Params_set_FpsFrames args);

        public delegate void set_FpsFrames_WithArgs(Action<PerformanceHUD, bool> orig, PerformanceHUD self, bool value);

        public sealed class Params_Awake
        {
            public PerformanceHUD self;
        }

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<PerformanceHUD> orig, PerformanceHUD self);

        public sealed class Params_OnEnable
        {
            public PerformanceHUD self;
        }

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<PerformanceHUD> orig, PerformanceHUD self);

        public sealed class Params_OnDisable
        {
            public PerformanceHUD self;
        }

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<PerformanceHUD> orig, PerformanceHUD self);

        public sealed class Params_Update
        {
            public PerformanceHUD self;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<PerformanceHUD> orig, PerformanceHUD self);

        public sealed class Params_GameManager_SceneTransitionBegan
        {
            public PerformanceHUD self;
            public SceneLoad sceneLoad;
        }

        public delegate void GameManager_SceneTransitionBegan_BeforeArgs(Params_GameManager_SceneTransitionBegan args);

        public delegate void GameManager_SceneTransitionBegan_AfterArgs(Params_GameManager_SceneTransitionBegan args);

        public delegate void GameManager_SceneTransitionBegan_WithArgs(Action<PerformanceHUD, SceneLoad> orig,
            PerformanceHUD self, SceneLoad sceneLoad);

        public sealed class Params_ReportUpload
        {
            public PerformanceHUD self;
            public UnityEngine.WWW www;
        }

        public delegate void ReportUpload_BeforeArgs(Params_ReportUpload args);

        public delegate System.Collections.IEnumerator ReportUpload_AfterArgs(Params_ReportUpload args,
            System.Collections.IEnumerator ret);

        public delegate System.Collections.IEnumerator ReportUpload_WithArgs(
            Func<PerformanceHUD, UnityEngine.WWW, System.Collections.IEnumerator> orig, PerformanceHUD self,
            UnityEngine.WWW www);

        public sealed class Params_GetTimeStr
        {
            public float? time;
        }

        public delegate void GetTimeStr_BeforeArgs(Params_GetTimeStr args);

        public delegate string GetTimeStr_AfterArgs(Params_GetTimeStr args, string ret);

        public delegate string GetTimeStr_WithArgs(Func<float?, string> orig, float? time);

        public sealed class Params_UpdateMemory
        {
            public PerformanceHUD self;
        }

        public delegate void UpdateMemory_BeforeArgs(Params_UpdateMemory args);

        public delegate void UpdateMemory_AfterArgs(Params_UpdateMemory args);

        public delegate void UpdateMemory_WithArgs(Action<PerformanceHUD> orig, PerformanceHUD self);

        public sealed class Params_OnGUI
        {
            public PerformanceHUD self;
        }

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_AfterArgs(Params_OnGUI args);

        public delegate void OnGUI_WithArgs(Action<PerformanceHUD> orig, PerformanceHUD self);

        public sealed class Params_LabelWithShadow
        {
            public PerformanceHUD self;
            public UnityEngine.Rect rect;
            public UnityEngine.GUIContent content;
        }

        public delegate void LabelWithShadow_BeforeArgs(Params_LabelWithShadow args);

        public delegate void LabelWithShadow_AfterArgs(Params_LabelWithShadow args);

        public delegate void LabelWithShadow_WithArgs(
            Action<PerformanceHUD, UnityEngine.Rect, UnityEngine.GUIContent> orig, PerformanceHUD self,
            UnityEngine.Rect rect, UnityEngine.GUIContent content);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Shared_BeforeArgs get_Shared
        {
            add
            {
                HookHandler._beforeget_Shared += value;
                HookHandler.Hookget_Shared();
            }
            remove => HookHandler._beforeget_Shared -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.get_FpsFrames_BeforeArgs get_FpsFrames
        {
            add
            {
                HookHandler._beforeget_FpsFrames += value;
                HookHandler.Hookget_FpsFrames();
            }
            remove => HookHandler._beforeget_FpsFrames -= value;
        }

        public static event Delegates.set_FpsFrames_BeforeArgs set_FpsFrames
        {
            add
            {
                HookHandler._beforeset_FpsFrames += value;
                HookHandler.Hookset_FpsFrames();
            }
            remove => HookHandler._beforeset_FpsFrames -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.GameManager_SceneTransitionBegan_BeforeArgs GameManager_SceneTransitionBegan
        {
            add
            {
                HookHandler._beforeGameManager_SceneTransitionBegan += value;
                HookHandler.HookGameManager_SceneTransitionBegan();
            }
            remove => HookHandler._beforeGameManager_SceneTransitionBegan -= value;
        }

        public static event Delegates.ReportUpload_BeforeArgs ReportUpload
        {
            add
            {
                HookHandler._beforeReportUpload += value;
                HookHandler.HookReportUpload();
            }
            remove => HookHandler._beforeReportUpload -= value;
        }

        public static event Delegates.GetTimeStr_BeforeArgs GetTimeStr
        {
            add
            {
                HookHandler._beforeGetTimeStr += value;
                HookHandler.HookGetTimeStr();
            }
            remove => HookHandler._beforeGetTimeStr -= value;
        }

        public static event Delegates.UpdateMemory_BeforeArgs UpdateMemory
        {
            add
            {
                HookHandler._beforeUpdateMemory += value;
                HookHandler.HookUpdateMemory();
            }
            remove => HookHandler._beforeUpdateMemory -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.LabelWithShadow_BeforeArgs LabelWithShadow
        {
            add
            {
                HookHandler._beforeLabelWithShadow += value;
                HookHandler.HookLabelWithShadow();
            }
            remove => HookHandler._beforeLabelWithShadow -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Shared_AfterArgs get_Shared
        {
            add
            {
                HookHandler._afterget_Shared += value;
                HookHandler.Hookget_Shared();
            }
            remove => HookHandler._afterget_Shared -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.get_FpsFrames_AfterArgs get_FpsFrames
        {
            add
            {
                HookHandler._afterget_FpsFrames += value;
                HookHandler.Hookget_FpsFrames();
            }
            remove => HookHandler._afterget_FpsFrames -= value;
        }

        public static event Delegates.set_FpsFrames_AfterArgs set_FpsFrames
        {
            add
            {
                HookHandler._afterset_FpsFrames += value;
                HookHandler.Hookset_FpsFrames();
            }
            remove => HookHandler._afterset_FpsFrames -= value;
        }

        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.GameManager_SceneTransitionBegan_AfterArgs GameManager_SceneTransitionBegan
        {
            add
            {
                HookHandler._afterGameManager_SceneTransitionBegan += value;
                HookHandler.HookGameManager_SceneTransitionBegan();
            }
            remove => HookHandler._afterGameManager_SceneTransitionBegan -= value;
        }

        public static event Delegates.GetTimeStr_AfterArgs GetTimeStr
        {
            add
            {
                HookHandler._afterGetTimeStr += value;
                HookHandler.HookGetTimeStr();
            }
            remove => HookHandler._afterGetTimeStr -= value;
        }

        public static event Delegates.UpdateMemory_AfterArgs UpdateMemory
        {
            add
            {
                HookHandler._afterUpdateMemory += value;
                HookHandler.HookUpdateMemory();
            }
            remove => HookHandler._afterUpdateMemory -= value;
        }

        public static event Delegates.OnGUI_AfterArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.LabelWithShadow_AfterArgs LabelWithShadow
        {
            add
            {
                HookHandler._afterLabelWithShadow += value;
                HookHandler.HookLabelWithShadow();
            }
            remove => HookHandler._afterLabelWithShadow -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Shared_WithArgs get_Shared
        {
            add => HookEndpointManager.Add<Delegates.get_Shared_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_Shared", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_Shared_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_Shared", false), value);
        }

        public static event On.PerformanceHUD.hook_Init Init
        {
            add => On.PerformanceHUD.Init += value;
            remove => On.PerformanceHUD.Init -= value;
        }

        public static event Delegates.get_FpsFrames_WithArgs get_FpsFrames
        {
            add => HookEndpointManager.Add<Delegates.get_FpsFrames_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_FpsFrames", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_FpsFrames_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "get_FpsFrames", true), value);
        }

        public static event Delegates.set_FpsFrames_WithArgs set_FpsFrames
        {
            add => HookEndpointManager.Add<Delegates.set_FpsFrames_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "set_FpsFrames", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_FpsFrames_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(PerformanceHUD), "set_FpsFrames", true), value);
        }

        public static event On.PerformanceHUD.hook_Awake Awake
        {
            add => On.PerformanceHUD.Awake += value;
            remove => On.PerformanceHUD.Awake -= value;
        }

        public static event On.PerformanceHUD.hook_OnEnable OnEnable
        {
            add => On.PerformanceHUD.OnEnable += value;
            remove => On.PerformanceHUD.OnEnable -= value;
        }

        public static event On.PerformanceHUD.hook_OnDisable OnDisable
        {
            add => On.PerformanceHUD.OnDisable += value;
            remove => On.PerformanceHUD.OnDisable -= value;
        }

        public static event On.PerformanceHUD.hook_Update Update
        {
            add => On.PerformanceHUD.Update += value;
            remove => On.PerformanceHUD.Update -= value;
        }

        public static event On.PerformanceHUD.hook_GameManager_SceneTransitionBegan GameManager_SceneTransitionBegan
        {
            add => On.PerformanceHUD.GameManager_SceneTransitionBegan += value;
            remove => On.PerformanceHUD.GameManager_SceneTransitionBegan -= value;
        }

        public static event On.PerformanceHUD.hook_ReportUpload ReportUpload
        {
            add => On.PerformanceHUD.ReportUpload += value;
            remove => On.PerformanceHUD.ReportUpload -= value;
        }

        public static event On.PerformanceHUD.hook_GetTimeStr GetTimeStr
        {
            add => On.PerformanceHUD.GetTimeStr += value;
            remove => On.PerformanceHUD.GetTimeStr -= value;
        }

        public static event On.PerformanceHUD.hook_UpdateMemory UpdateMemory
        {
            add => On.PerformanceHUD.UpdateMemory += value;
            remove => On.PerformanceHUD.UpdateMemory -= value;
        }

        public static event On.PerformanceHUD.hook_OnGUI OnGUI
        {
            add => On.PerformanceHUD.OnGUI += value;
            remove => On.PerformanceHUD.OnGUI -= value;
        }

        public static event On.PerformanceHUD.hook_LabelWithShadow LabelWithShadow
        {
            add => On.PerformanceHUD.LabelWithShadow += value;
            remove => On.PerformanceHUD.LabelWithShadow -= value;
        }
    }
}