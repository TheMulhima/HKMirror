using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.Audio;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AudioManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAudioManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_CurrentMusicCue()
        {
            if (!HookedList.Contains("get_CurrentMusicCue"))
            {
                HookedList.Add("get_CurrentMusicCue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(AudioManager), "get_CurrentMusicCue"),
                    get_CurrentMusicCue);
            }
        }

        internal static event Delegates.get_CurrentMusicCue_BeforeArgs _beforeget_CurrentMusicCue;
        internal static event Delegates.get_CurrentMusicCue_NormalArgs _afterget_CurrentMusicCue;

        private static MusicCue get_CurrentMusicCue(Func<AudioManager, MusicCue> orig, AudioManager self)
        {
            Delegates.Params_get_CurrentMusicCue @params = new()
            {
                self = self
            };
            _beforeget_CurrentMusicCue?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CurrentMusicCue != null) retVal = _afterget_CurrentMusicCue.Invoke(@params);
            return retVal;
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.AudioManager.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.AudioManager.orig_Start orig, AudioManager self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookApplyAtmosCue()
        {
            if (!HookedList.Contains("ApplyAtmosCue"))
            {
                HookedList.Add("ApplyAtmosCue");
                On.AudioManager.ApplyAtmosCue += ApplyAtmosCue;
            }
        }

        internal static event Delegates.ApplyAtmosCue_BeforeArgs _beforeApplyAtmosCue;
        internal static event Delegates.ApplyAtmosCue_NormalArgs _afterApplyAtmosCue;

        private static void ApplyAtmosCue(On.AudioManager.orig_ApplyAtmosCue orig, AudioManager self, AtmosCue atmosCue,
            float transitionTime)
        {
            Delegates.Params_ApplyAtmosCue @params = new()
            {
                self = self, atmosCue = atmosCue, transitionTime = transitionTime
            };
            _beforeApplyAtmosCue?.Invoke(@params);
            self = @params.self;
            atmosCue = @params.atmosCue;
            transitionTime = @params.transitionTime;
            orig(self, atmosCue, transitionTime);
            if (_afterApplyAtmosCue != null) _afterApplyAtmosCue.Invoke(@params);
        }

        internal static void HookBeginApplyAtmosCue()
        {
            if (!HookedList.Contains("BeginApplyAtmosCue"))
            {
                HookedList.Add("BeginApplyAtmosCue");
                On.AudioManager.BeginApplyAtmosCue += BeginApplyAtmosCue;
            }
        }

        internal static event Delegates.BeginApplyAtmosCue_BeforeArgs _beforeBeginApplyAtmosCue;

        private static IEnumerator BeginApplyAtmosCue(On.AudioManager.orig_BeginApplyAtmosCue orig, AudioManager self,
            AtmosCue atmosCue, float transitionTime)
        {
            Delegates.Params_BeginApplyAtmosCue @params = new()
            {
                self = self, atmosCue = atmosCue, transitionTime = transitionTime
            };
            _beforeBeginApplyAtmosCue?.Invoke(@params);
            self = @params.self;
            atmosCue = @params.atmosCue;
            transitionTime = @params.transitionTime;
            return orig(self, atmosCue, transitionTime);
        }

        internal static void HookApplyMusicCue()
        {
            if (!HookedList.Contains("ApplyMusicCue"))
            {
                HookedList.Add("ApplyMusicCue");
                On.AudioManager.ApplyMusicCue += ApplyMusicCue;
            }
        }

        internal static event Delegates.ApplyMusicCue_BeforeArgs _beforeApplyMusicCue;
        internal static event Delegates.ApplyMusicCue_NormalArgs _afterApplyMusicCue;

        private static void ApplyMusicCue(On.AudioManager.orig_ApplyMusicCue orig, AudioManager self, MusicCue musicCue,
            float delayTime, float transitionTime, bool applySnapshot)
        {
            Delegates.Params_ApplyMusicCue @params = new()
            {
                self = self, musicCue = musicCue, delayTime = delayTime, transitionTime = transitionTime,
                applySnapshot = applySnapshot
            };
            _beforeApplyMusicCue?.Invoke(@params);
            self = @params.self;
            musicCue = @params.musicCue;
            delayTime = @params.delayTime;
            transitionTime = @params.transitionTime;
            applySnapshot = @params.applySnapshot;
            orig(self, musicCue, delayTime, transitionTime, applySnapshot);
            if (_afterApplyMusicCue != null) _afterApplyMusicCue.Invoke(@params);
        }

        internal static void HookBeginApplyMusicCue()
        {
            if (!HookedList.Contains("BeginApplyMusicCue"))
            {
                HookedList.Add("BeginApplyMusicCue");
                On.AudioManager.BeginApplyMusicCue += BeginApplyMusicCue;
            }
        }

        internal static event Delegates.BeginApplyMusicCue_BeforeArgs _beforeBeginApplyMusicCue;

        private static IEnumerator BeginApplyMusicCue(On.AudioManager.orig_BeginApplyMusicCue orig, AudioManager self,
            MusicCue musicCue, float delayTime, float transitionTime, bool applySnapshot)
        {
            Delegates.Params_BeginApplyMusicCue @params = new()
            {
                self = self, musicCue = musicCue, delayTime = delayTime, transitionTime = transitionTime,
                applySnapshot = applySnapshot
            };
            _beforeBeginApplyMusicCue?.Invoke(@params);
            self = @params.self;
            musicCue = @params.musicCue;
            delayTime = @params.delayTime;
            transitionTime = @params.transitionTime;
            applySnapshot = @params.applySnapshot;
            return orig(self, musicCue, delayTime, transitionTime, applySnapshot);
        }

        internal static void HookUpdateMusicSync()
        {
            if (!HookedList.Contains("UpdateMusicSync"))
            {
                HookedList.Add("UpdateMusicSync");
                On.AudioManager.UpdateMusicSync += UpdateMusicSync;
            }
        }

        internal static event Delegates.UpdateMusicSync_BeforeArgs _beforeUpdateMusicSync;
        internal static event Delegates.UpdateMusicSync_NormalArgs _afterUpdateMusicSync;

        private static void UpdateMusicSync(On.AudioManager.orig_UpdateMusicSync orig, AudioManager self,
            MusicChannels musicChannel, bool isSyncRequired)
        {
            Delegates.Params_UpdateMusicSync @params = new()
            {
                self = self, musicChannel = musicChannel, isSyncRequired = isSyncRequired
            };
            _beforeUpdateMusicSync?.Invoke(@params);
            self = @params.self;
            musicChannel = @params.musicChannel;
            isSyncRequired = @params.isSyncRequired;
            orig(self, musicChannel, isSyncRequired);
            if (_afterUpdateMusicSync != null) _afterUpdateMusicSync.Invoke(@params);
        }

        internal static void HookApplyMusicSnapshot()
        {
            if (!HookedList.Contains("ApplyMusicSnapshot"))
            {
                HookedList.Add("ApplyMusicSnapshot");
                On.AudioManager.ApplyMusicSnapshot += ApplyMusicSnapshot;
            }
        }

        internal static event Delegates.ApplyMusicSnapshot_BeforeArgs _beforeApplyMusicSnapshot;
        internal static event Delegates.ApplyMusicSnapshot_NormalArgs _afterApplyMusicSnapshot;

        private static void ApplyMusicSnapshot(On.AudioManager.orig_ApplyMusicSnapshot orig, AudioManager self,
            AudioMixerSnapshot snapshot, float delayTime, float transitionTime)
        {
            Delegates.Params_ApplyMusicSnapshot @params = new()
            {
                self = self, snapshot = snapshot, delayTime = delayTime, transitionTime = transitionTime
            };
            _beforeApplyMusicSnapshot?.Invoke(@params);
            self = @params.self;
            snapshot = @params.snapshot;
            delayTime = @params.delayTime;
            transitionTime = @params.transitionTime;
            orig(self, snapshot, delayTime, transitionTime);
            if (_afterApplyMusicSnapshot != null) _afterApplyMusicSnapshot.Invoke(@params);
        }

        internal static void HookBeginApplyMusicSnapshot()
        {
            if (!HookedList.Contains("BeginApplyMusicSnapshot"))
            {
                HookedList.Add("BeginApplyMusicSnapshot");
                On.AudioManager.BeginApplyMusicSnapshot += BeginApplyMusicSnapshot;
            }
        }

        internal static event Delegates.BeginApplyMusicSnapshot_BeforeArgs _beforeBeginApplyMusicSnapshot;

        private static IEnumerator BeginApplyMusicSnapshot(On.AudioManager.orig_BeginApplyMusicSnapshot orig,
            AudioManager self, AudioMixerSnapshot snapshot, float delayTime, float transitionTime)
        {
            Delegates.Params_BeginApplyMusicSnapshot @params = new()
            {
                self = self, snapshot = snapshot, delayTime = delayTime, transitionTime = transitionTime
            };
            _beforeBeginApplyMusicSnapshot?.Invoke(@params);
            self = @params.self;
            snapshot = @params.snapshot;
            delayTime = @params.delayTime;
            transitionTime = @params.transitionTime;
            return orig(self, snapshot, delayTime, transitionTime);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyAtmosCue_BeforeArgs(Params_ApplyAtmosCue args);

        public delegate void ApplyAtmosCue_NormalArgs(Params_ApplyAtmosCue args);

        public delegate void ApplyMusicCue_BeforeArgs(Params_ApplyMusicCue args);

        public delegate void ApplyMusicCue_NormalArgs(Params_ApplyMusicCue args);

        public delegate void ApplyMusicSnapshot_BeforeArgs(Params_ApplyMusicSnapshot args);

        public delegate void ApplyMusicSnapshot_NormalArgs(Params_ApplyMusicSnapshot args);

        public delegate void BeginApplyAtmosCue_BeforeArgs(Params_BeginApplyAtmosCue args);

        public delegate IEnumerator BeginApplyAtmosCue_NormalArgs(Params_BeginApplyAtmosCue args);

        public delegate void BeginApplyMusicCue_BeforeArgs(Params_BeginApplyMusicCue args);

        public delegate IEnumerator BeginApplyMusicCue_NormalArgs(Params_BeginApplyMusicCue args);

        public delegate void BeginApplyMusicSnapshot_BeforeArgs(Params_BeginApplyMusicSnapshot args);

        public delegate IEnumerator BeginApplyMusicSnapshot_NormalArgs(Params_BeginApplyMusicSnapshot args);

        public delegate void get_CurrentMusicCue_BeforeArgs(Params_get_CurrentMusicCue args);

        public delegate MusicCue get_CurrentMusicCue_NormalArgs(Params_get_CurrentMusicCue args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void UpdateMusicSync_BeforeArgs(Params_UpdateMusicSync args);

        public delegate void UpdateMusicSync_NormalArgs(Params_UpdateMusicSync args);

        public sealed class Params_get_CurrentMusicCue
        {
            public AudioManager self;
        }

        public sealed class Params_Start
        {
            public AudioManager self;
        }

        public sealed class Params_ApplyAtmosCue
        {
            public AtmosCue atmosCue;
            public AudioManager self;
            public float transitionTime;
        }

        public sealed class Params_BeginApplyAtmosCue
        {
            public AtmosCue atmosCue;
            public AudioManager self;
            public float transitionTime;
        }

        public sealed class Params_ApplyMusicCue
        {
            public bool applySnapshot;
            public float delayTime;
            public MusicCue musicCue;
            public AudioManager self;
            public float transitionTime;
        }

        public sealed class Params_BeginApplyMusicCue
        {
            public bool applySnapshot;
            public float delayTime;
            public MusicCue musicCue;
            public AudioManager self;
            public float transitionTime;
        }

        public sealed class Params_UpdateMusicSync
        {
            public bool isSyncRequired;
            public MusicChannels musicChannel;
            public AudioManager self;
        }

        public sealed class Params_ApplyMusicSnapshot
        {
            public float delayTime;
            public AudioManager self;
            public AudioMixerSnapshot snapshot;
            public float transitionTime;
        }

        public sealed class Params_BeginApplyMusicSnapshot
        {
            public float delayTime;
            public AudioManager self;
            public AudioMixerSnapshot snapshot;
            public float transitionTime;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_CurrentMusicCue_BeforeArgs get_CurrentMusicCue
        {
            add
            {
                HookHandler._beforeget_CurrentMusicCue += value;
                HookHandler.Hookget_CurrentMusicCue();
            }
            remove => HookHandler._beforeget_CurrentMusicCue -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.ApplyAtmosCue_BeforeArgs ApplyAtmosCue
        {
            add
            {
                HookHandler._beforeApplyAtmosCue += value;
                HookHandler.HookApplyAtmosCue();
            }
            remove => HookHandler._beforeApplyAtmosCue -= value;
        }

        public static event Delegates.BeginApplyAtmosCue_BeforeArgs BeginApplyAtmosCue
        {
            add
            {
                HookHandler._beforeBeginApplyAtmosCue += value;
                HookHandler.HookBeginApplyAtmosCue();
            }
            remove => HookHandler._beforeBeginApplyAtmosCue -= value;
        }

        public static event Delegates.ApplyMusicCue_BeforeArgs ApplyMusicCue
        {
            add
            {
                HookHandler._beforeApplyMusicCue += value;
                HookHandler.HookApplyMusicCue();
            }
            remove => HookHandler._beforeApplyMusicCue -= value;
        }

        public static event Delegates.BeginApplyMusicCue_BeforeArgs BeginApplyMusicCue
        {
            add
            {
                HookHandler._beforeBeginApplyMusicCue += value;
                HookHandler.HookBeginApplyMusicCue();
            }
            remove => HookHandler._beforeBeginApplyMusicCue -= value;
        }

        public static event Delegates.UpdateMusicSync_BeforeArgs UpdateMusicSync
        {
            add
            {
                HookHandler._beforeUpdateMusicSync += value;
                HookHandler.HookUpdateMusicSync();
            }
            remove => HookHandler._beforeUpdateMusicSync -= value;
        }

        public static event Delegates.ApplyMusicSnapshot_BeforeArgs ApplyMusicSnapshot
        {
            add
            {
                HookHandler._beforeApplyMusicSnapshot += value;
                HookHandler.HookApplyMusicSnapshot();
            }
            remove => HookHandler._beforeApplyMusicSnapshot -= value;
        }

        public static event Delegates.BeginApplyMusicSnapshot_BeforeArgs BeginApplyMusicSnapshot
        {
            add
            {
                HookHandler._beforeBeginApplyMusicSnapshot += value;
                HookHandler.HookBeginApplyMusicSnapshot();
            }
            remove => HookHandler._beforeBeginApplyMusicSnapshot -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_CurrentMusicCue_NormalArgs get_CurrentMusicCue
        {
            add
            {
                HookHandler._afterget_CurrentMusicCue += value;
                HookHandler.Hookget_CurrentMusicCue();
            }
            remove => HookHandler._afterget_CurrentMusicCue -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.ApplyAtmosCue_NormalArgs ApplyAtmosCue
        {
            add
            {
                HookHandler._afterApplyAtmosCue += value;
                HookHandler.HookApplyAtmosCue();
            }
            remove => HookHandler._afterApplyAtmosCue -= value;
        }

        public static event Delegates.ApplyMusicCue_NormalArgs ApplyMusicCue
        {
            add
            {
                HookHandler._afterApplyMusicCue += value;
                HookHandler.HookApplyMusicCue();
            }
            remove => HookHandler._afterApplyMusicCue -= value;
        }

        public static event Delegates.UpdateMusicSync_NormalArgs UpdateMusicSync
        {
            add
            {
                HookHandler._afterUpdateMusicSync += value;
                HookHandler.HookUpdateMusicSync();
            }
            remove => HookHandler._afterUpdateMusicSync -= value;
        }

        public static event Delegates.ApplyMusicSnapshot_NormalArgs ApplyMusicSnapshot
        {
            add
            {
                HookHandler._afterApplyMusicSnapshot += value;
                HookHandler.HookApplyMusicSnapshot();
            }
            remove => HookHandler._afterApplyMusicSnapshot -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_CurrentMusicCue_NormalArgs get_CurrentMusicCue
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentMusicCue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AudioManager), "get_CurrentMusicCue"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentMusicCue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(AudioManager), "get_CurrentMusicCue"), value);
        }

        public static event On.AudioManager.hook_Start Start
        {
            add => On.AudioManager.Start += value;
            remove => On.AudioManager.Start -= value;
        }

        public static event On.AudioManager.hook_ApplyAtmosCue ApplyAtmosCue
        {
            add => On.AudioManager.ApplyAtmosCue += value;
            remove => On.AudioManager.ApplyAtmosCue -= value;
        }

        public static event On.AudioManager.hook_BeginApplyAtmosCue BeginApplyAtmosCue
        {
            add => On.AudioManager.BeginApplyAtmosCue += value;
            remove => On.AudioManager.BeginApplyAtmosCue -= value;
        }

        public static event On.AudioManager.hook_ApplyMusicCue ApplyMusicCue
        {
            add => On.AudioManager.ApplyMusicCue += value;
            remove => On.AudioManager.ApplyMusicCue -= value;
        }

        public static event On.AudioManager.hook_BeginApplyMusicCue BeginApplyMusicCue
        {
            add => On.AudioManager.BeginApplyMusicCue += value;
            remove => On.AudioManager.BeginApplyMusicCue -= value;
        }

        public static event On.AudioManager.hook_UpdateMusicSync UpdateMusicSync
        {
            add => On.AudioManager.UpdateMusicSync += value;
            remove => On.AudioManager.UpdateMusicSync -= value;
        }

        public static event On.AudioManager.hook_ApplyMusicSnapshot ApplyMusicSnapshot
        {
            add => On.AudioManager.ApplyMusicSnapshot += value;
            remove => On.AudioManager.ApplyMusicSnapshot -= value;
        }

        public static event On.AudioManager.hook_BeginApplyMusicSnapshot BeginApplyMusicSnapshot
        {
            add => On.AudioManager.BeginApplyMusicSnapshot += value;
            remove => On.AudioManager.BeginApplyMusicSnapshot -= value;
        }
    }
}