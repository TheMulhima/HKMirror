namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CameraController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCameraController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookGameInit()
        {
            if (!HookedList.Contains("GameInit"))
            {
                HookedList.Add("GameInit");
                On.CameraController.GameInit += GameInit;
            }
        }

        internal static event Delegates.GameInit_BeforeArgs _beforeGameInit;
        internal static event Delegates.GameInit_NormalArgs _afterGameInit;

        private static void GameInit(On.CameraController.orig_GameInit orig, CameraController self)
        {
            Delegates.Params_GameInit @params = new()
            {
                self = self
            };
            _beforeGameInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGameInit != null) _afterGameInit.Invoke(@params);
        }

        internal static void HookSceneInit()
        {
            if (!HookedList.Contains("SceneInit"))
            {
                HookedList.Add("SceneInit");
                On.CameraController.SceneInit += SceneInit;
            }
        }

        internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
        internal static event Delegates.SceneInit_NormalArgs _afterSceneInit;

        private static void SceneInit(On.CameraController.orig_SceneInit orig, CameraController self)
        {
            Delegates.Params_SceneInit @params = new()
            {
                self = self
            };
            _beforeSceneInit?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSceneInit != null) _afterSceneInit.Invoke(@params);
        }

        internal static void HookApplyEffectConfiguration()
        {
            if (!HookedList.Contains("ApplyEffectConfiguration"))
            {
                HookedList.Add("ApplyEffectConfiguration");
                On.CameraController.ApplyEffectConfiguration += ApplyEffectConfiguration;
            }
        }

        internal static event Delegates.ApplyEffectConfiguration_BeforeArgs _beforeApplyEffectConfiguration;
        internal static event Delegates.ApplyEffectConfiguration_NormalArgs _afterApplyEffectConfiguration;

        private static void ApplyEffectConfiguration(On.CameraController.orig_ApplyEffectConfiguration orig,
            CameraController self, bool isGameplayLevel, bool isBloomForced)
        {
            Delegates.Params_ApplyEffectConfiguration @params = new()
            {
                self = self, isGameplayLevel = isGameplayLevel, isBloomForced = isBloomForced
            };
            _beforeApplyEffectConfiguration?.Invoke(@params);
            self = @params.self;
            isGameplayLevel = @params.isGameplayLevel;
            isBloomForced = @params.isBloomForced;
            orig(self, isGameplayLevel, isBloomForced);
            if (_afterApplyEffectConfiguration != null) _afterApplyEffectConfiguration.Invoke(@params);
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.CameraController.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_NormalArgs _afterLateUpdate;

        private static void LateUpdate(On.CameraController.orig_LateUpdate orig, CameraController self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            _beforeLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null) _afterLateUpdate.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.CameraController.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.CameraController.orig_OnDisable orig, CameraController self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookFreezeInPlace()
        {
            if (!HookedList.Contains("FreezeInPlace"))
            {
                HookedList.Add("FreezeInPlace");
                On.CameraController.FreezeInPlace += FreezeInPlace;
            }
        }

        internal static event Delegates.FreezeInPlace_BeforeArgs _beforeFreezeInPlace;
        internal static event Delegates.FreezeInPlace_NormalArgs _afterFreezeInPlace;

        private static void FreezeInPlace(On.CameraController.orig_FreezeInPlace orig, CameraController self,
            bool freezeTargetAlso)
        {
            Delegates.Params_FreezeInPlace @params = new()
            {
                self = self, freezeTargetAlso = freezeTargetAlso
            };
            _beforeFreezeInPlace?.Invoke(@params);
            self = @params.self;
            freezeTargetAlso = @params.freezeTargetAlso;
            orig(self, freezeTargetAlso);
            if (_afterFreezeInPlace != null) _afterFreezeInPlace.Invoke(@params);
        }

        internal static void HookFadeOut()
        {
            if (!HookedList.Contains("FadeOut"))
            {
                HookedList.Add("FadeOut");
                On.CameraController.FadeOut += FadeOut;
            }
        }

        internal static event Delegates.FadeOut_BeforeArgs _beforeFadeOut;
        internal static event Delegates.FadeOut_NormalArgs _afterFadeOut;

        private static void FadeOut(On.CameraController.orig_FadeOut orig, CameraController self,
            CameraFadeType type)
        {
            Delegates.Params_FadeOut @params = new()
            {
                self = self, type = type
            };
            _beforeFadeOut?.Invoke(@params);
            self = @params.self;
            type = @params.type;
            orig(self, type);
            if (_afterFadeOut != null) _afterFadeOut.Invoke(@params);
        }

        internal static void HookFadeSceneIn()
        {
            if (!HookedList.Contains("FadeSceneIn"))
            {
                HookedList.Add("FadeSceneIn");
                On.CameraController.FadeSceneIn += FadeSceneIn;
            }
        }

        internal static event Delegates.FadeSceneIn_BeforeArgs _beforeFadeSceneIn;
        internal static event Delegates.FadeSceneIn_NormalArgs _afterFadeSceneIn;

        private static void FadeSceneIn(On.CameraController.orig_FadeSceneIn orig, CameraController self)
        {
            Delegates.Params_FadeSceneIn @params = new()
            {
                self = self
            };
            _beforeFadeSceneIn?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFadeSceneIn != null) _afterFadeSceneIn.Invoke(@params);
        }

        internal static void HookLockToArea()
        {
            if (!HookedList.Contains("LockToArea"))
            {
                HookedList.Add("LockToArea");
                On.CameraController.LockToArea += LockToArea;
            }
        }

        internal static event Delegates.LockToArea_BeforeArgs _beforeLockToArea;
        internal static event Delegates.LockToArea_NormalArgs _afterLockToArea;

        private static void LockToArea(On.CameraController.orig_LockToArea orig, CameraController self,
            CameraLockArea lockArea)
        {
            Delegates.Params_LockToArea @params = new()
            {
                self = self, lockArea = lockArea
            };
            _beforeLockToArea?.Invoke(@params);
            self = @params.self;
            lockArea = @params.lockArea;
            orig(self, lockArea);
            if (_afterLockToArea != null) _afterLockToArea.Invoke(@params);
        }

        internal static void HookReleaseLock()
        {
            if (!HookedList.Contains("ReleaseLock"))
            {
                HookedList.Add("ReleaseLock");
                On.CameraController.ReleaseLock += ReleaseLock;
            }
        }

        internal static event Delegates.ReleaseLock_BeforeArgs _beforeReleaseLock;
        internal static event Delegates.ReleaseLock_NormalArgs _afterReleaseLock;

        private static void ReleaseLock(On.CameraController.orig_ReleaseLock orig, CameraController self,
            CameraLockArea lockarea)
        {
            Delegates.Params_ReleaseLock @params = new()
            {
                self = self, lockarea = lockarea
            };
            _beforeReleaseLock?.Invoke(@params);
            self = @params.self;
            lockarea = @params.lockarea;
            orig(self, lockarea);
            if (_afterReleaseLock != null) _afterReleaseLock.Invoke(@params);
        }

        internal static void HookResetStartTimer()
        {
            if (!HookedList.Contains("ResetStartTimer"))
            {
                HookedList.Add("ResetStartTimer");
                On.CameraController.ResetStartTimer += ResetStartTimer;
            }
        }

        internal static event Delegates.ResetStartTimer_BeforeArgs _beforeResetStartTimer;
        internal static event Delegates.ResetStartTimer_NormalArgs _afterResetStartTimer;

        private static void ResetStartTimer(On.CameraController.orig_ResetStartTimer orig, CameraController self)
        {
            Delegates.Params_ResetStartTimer @params = new()
            {
                self = self
            };
            _beforeResetStartTimer?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetStartTimer != null) _afterResetStartTimer.Invoke(@params);
        }

        internal static void HookSnapTo()
        {
            if (!HookedList.Contains("SnapTo"))
            {
                HookedList.Add("SnapTo");
                On.CameraController.SnapTo += SnapTo;
            }
        }

        internal static event Delegates.SnapTo_BeforeArgs _beforeSnapTo;
        internal static event Delegates.SnapTo_NormalArgs _afterSnapTo;

        private static void SnapTo(On.CameraController.orig_SnapTo orig, CameraController self, float x, float y)
        {
            Delegates.Params_SnapTo @params = new()
            {
                self = self, x = x, y = y
            };
            _beforeSnapTo?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            y = @params.y;
            orig(self, x, y);
            if (_afterSnapTo != null) _afterSnapTo.Invoke(@params);
        }

        internal static void HookUpdateTargetDestinationDelta()
        {
            if (!HookedList.Contains("UpdateTargetDestinationDelta"))
            {
                HookedList.Add("UpdateTargetDestinationDelta");
                On.CameraController.UpdateTargetDestinationDelta += UpdateTargetDestinationDelta;
            }
        }

        internal static event Delegates.UpdateTargetDestinationDelta_BeforeArgs _beforeUpdateTargetDestinationDelta;
        internal static event Delegates.UpdateTargetDestinationDelta_NormalArgs _afterUpdateTargetDestinationDelta;

        private static void UpdateTargetDestinationDelta(On.CameraController.orig_UpdateTargetDestinationDelta orig,
            CameraController self)
        {
            Delegates.Params_UpdateTargetDestinationDelta @params = new()
            {
                self = self
            };
            _beforeUpdateTargetDestinationDelta?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateTargetDestinationDelta != null) _afterUpdateTargetDestinationDelta.Invoke(@params);
        }

        internal static void HookKeepWithinSceneBounds_Vector3()
        {
            if (!HookedList.Contains("KeepWithinSceneBounds_Vector3"))
            {
                HookedList.Add("KeepWithinSceneBounds_Vector3");
                On.CameraController.KeepWithinSceneBounds_Vector3 += KeepWithinSceneBounds_Vector3;
            }
        }

        internal static event Delegates.KeepWithinSceneBounds_Vector3_BeforeArgs _beforeKeepWithinSceneBounds_Vector3;
        internal static event Delegates.KeepWithinSceneBounds_Vector3_NormalArgs _afterKeepWithinSceneBounds_Vector3;

        private static Vector3 KeepWithinSceneBounds_Vector3(
            On.CameraController.orig_KeepWithinSceneBounds_Vector3 orig, CameraController self,
            Vector3 targetDest)
        {
            Delegates.Params_KeepWithinSceneBounds_Vector3 @params = new()
            {
                self = self, targetDest = targetDest
            };
            _beforeKeepWithinSceneBounds_Vector3?.Invoke(@params);
            self = @params.self;
            targetDest = @params.targetDest;
            var retVal = orig(self, targetDest);
            if (_afterKeepWithinSceneBounds_Vector3 != null)
                retVal = _afterKeepWithinSceneBounds_Vector3.Invoke(@params);

            return retVal;
        }

        internal static void HookKeepWithinSceneBounds_Vector2()
        {
            if (!HookedList.Contains("KeepWithinSceneBounds_Vector2"))
            {
                HookedList.Add("KeepWithinSceneBounds_Vector2");
                On.CameraController.KeepWithinSceneBounds_Vector2 += KeepWithinSceneBounds_Vector2;
            }
        }

        internal static event Delegates.KeepWithinSceneBounds_Vector2_BeforeArgs _beforeKeepWithinSceneBounds_Vector2;
        internal static event Delegates.KeepWithinSceneBounds_Vector2_NormalArgs _afterKeepWithinSceneBounds_Vector2;

        private static Vector2 KeepWithinSceneBounds_Vector2(
            On.CameraController.orig_KeepWithinSceneBounds_Vector2 orig, CameraController self,
            Vector2 targetDest)
        {
            Delegates.Params_KeepWithinSceneBounds_Vector2 @params = new()
            {
                self = self, targetDest = targetDest
            };
            _beforeKeepWithinSceneBounds_Vector2?.Invoke(@params);
            self = @params.self;
            targetDest = @params.targetDest;
            var retVal = orig(self, targetDest);
            if (_afterKeepWithinSceneBounds_Vector2 != null)
                retVal = _afterKeepWithinSceneBounds_Vector2.Invoke(@params);

            return retVal;
        }

        internal static void HookIsAtSceneBounds()
        {
            if (!HookedList.Contains("IsAtSceneBounds"))
            {
                HookedList.Add("IsAtSceneBounds");
                On.CameraController.IsAtSceneBounds += IsAtSceneBounds;
            }
        }

        internal static event Delegates.IsAtSceneBounds_BeforeArgs _beforeIsAtSceneBounds;
        internal static event Delegates.IsAtSceneBounds_NormalArgs _afterIsAtSceneBounds;

        private static bool IsAtSceneBounds(On.CameraController.orig_IsAtSceneBounds orig, CameraController self,
            Vector2 targetDest)
        {
            Delegates.Params_IsAtSceneBounds @params = new()
            {
                self = self, targetDest = targetDest
            };
            _beforeIsAtSceneBounds?.Invoke(@params);
            self = @params.self;
            targetDest = @params.targetDest;
            var retVal = orig(self, targetDest);
            if (_afterIsAtSceneBounds != null) retVal = _afterIsAtSceneBounds.Invoke(@params);

            return retVal;
        }

        internal static void HookIsAtHorizontalSceneBounds()
        {
            if (!HookedList.Contains("IsAtHorizontalSceneBounds"))
            {
                HookedList.Add("IsAtHorizontalSceneBounds");
                On.CameraController.IsAtHorizontalSceneBounds += IsAtHorizontalSceneBounds;
            }
        }

        internal static event Delegates.IsAtHorizontalSceneBounds_BeforeArgs _beforeIsAtHorizontalSceneBounds;
        internal static event Delegates.IsAtHorizontalSceneBounds_NormalArgs _afterIsAtHorizontalSceneBounds;

        private static bool IsAtHorizontalSceneBounds(On.CameraController.orig_IsAtHorizontalSceneBounds orig,
            CameraController self, Vector2 targetDest, out bool leftSide)
        {
            Delegates.Params_IsAtHorizontalSceneBounds @params = new()
            {
                self = self, targetDest = targetDest
            };
            _beforeIsAtHorizontalSceneBounds?.Invoke(@params);
            self = @params.self;
            targetDest = @params.targetDest;
            leftSide = @params.leftSide;
            var retVal = orig(self, targetDest, out leftSide);
            if (_afterIsAtHorizontalSceneBounds != null) retVal = _afterIsAtHorizontalSceneBounds.Invoke(@params);

            return retVal;
        }

        internal static void HookIsTouchingSides()
        {
            if (!HookedList.Contains("IsTouchingSides"))
            {
                HookedList.Add("IsTouchingSides");
                On.CameraController.IsTouchingSides += IsTouchingSides;
            }
        }

        internal static event Delegates.IsTouchingSides_BeforeArgs _beforeIsTouchingSides;
        internal static event Delegates.IsTouchingSides_NormalArgs _afterIsTouchingSides;

        private static bool IsTouchingSides(On.CameraController.orig_IsTouchingSides orig, CameraController self,
            float x)
        {
            Delegates.Params_IsTouchingSides @params = new()
            {
                self = self, x = x
            };
            _beforeIsTouchingSides?.Invoke(@params);
            self = @params.self;
            x = @params.x;
            var retVal = orig(self, x);
            if (_afterIsTouchingSides != null) retVal = _afterIsTouchingSides.Invoke(@params);

            return retVal;
        }

        internal static void HookKeepWithinLockBounds()
        {
            if (!HookedList.Contains("KeepWithinLockBounds"))
            {
                HookedList.Add("KeepWithinLockBounds");
                On.CameraController.KeepWithinLockBounds += KeepWithinLockBounds;
            }
        }

        internal static event Delegates.KeepWithinLockBounds_BeforeArgs _beforeKeepWithinLockBounds;
        internal static event Delegates.KeepWithinLockBounds_NormalArgs _afterKeepWithinLockBounds;

        private static Vector2 KeepWithinLockBounds(On.CameraController.orig_KeepWithinLockBounds orig,
            CameraController self, Vector2 targetDest)
        {
            Delegates.Params_KeepWithinLockBounds @params = new()
            {
                self = self, targetDest = targetDest
            };
            _beforeKeepWithinLockBounds?.Invoke(@params);
            self = @params.self;
            targetDest = @params.targetDest;
            var retVal = orig(self, targetDest);
            if (_afterKeepWithinLockBounds != null) retVal = _afterKeepWithinLockBounds.Invoke(@params);

            return retVal;
        }

        internal static void HookGetTilemapInfo()
        {
            if (!HookedList.Contains("GetTilemapInfo"))
            {
                HookedList.Add("GetTilemapInfo");
                On.CameraController.GetTilemapInfo += GetTilemapInfo;
            }
        }

        internal static event Delegates.GetTilemapInfo_BeforeArgs _beforeGetTilemapInfo;
        internal static event Delegates.GetTilemapInfo_NormalArgs _afterGetTilemapInfo;

        private static void GetTilemapInfo(On.CameraController.orig_GetTilemapInfo orig, CameraController self)
        {
            Delegates.Params_GetTilemapInfo @params = new()
            {
                self = self
            };
            _beforeGetTilemapInfo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterGetTilemapInfo != null) _afterGetTilemapInfo.Invoke(@params);
        }

        internal static void HookPositionToHero()
        {
            if (!HookedList.Contains("PositionToHero"))
            {
                HookedList.Add("PositionToHero");
                On.CameraController.PositionToHero += PositionToHero;
            }
        }

        internal static event Delegates.PositionToHero_BeforeArgs _beforePositionToHero;
        internal static event Delegates.PositionToHero_NormalArgs _afterPositionToHero;

        private static void PositionToHero(On.CameraController.orig_PositionToHero orig, CameraController self,
            bool forceDirect)
        {
            Delegates.Params_PositionToHero @params = new()
            {
                self = self, forceDirect = forceDirect
            };
            _beforePositionToHero?.Invoke(@params);
            self = @params.self;
            forceDirect = @params.forceDirect;
            orig(self, forceDirect);
            if (_afterPositionToHero != null) _afterPositionToHero.Invoke(@params);
        }

        internal static void HookDoPositionToHero()
        {
            if (!HookedList.Contains("DoPositionToHero"))
            {
                HookedList.Add("DoPositionToHero");
                On.CameraController.DoPositionToHero += DoPositionToHero;
            }
        }

        internal static event Delegates.DoPositionToHero_BeforeArgs _beforeDoPositionToHero;

        private static IEnumerator DoPositionToHero(On.CameraController.orig_DoPositionToHero orig,
            CameraController self, bool forceDirect)
        {
            Delegates.Params_DoPositionToHero @params = new()
            {
                self = self, forceDirect = forceDirect
            };
            _beforeDoPositionToHero?.Invoke(@params);
            self = @params.self;
            forceDirect = @params.forceDirect;
            return orig(self, forceDirect);
        }

        internal static void HookPositionToHeroFacing()
        {
            if (!HookedList.Contains("PositionToHeroFacing"))
            {
                HookedList.Add("PositionToHeroFacing");
                On.CameraController.PositionToHeroFacing += PositionToHeroFacing;
            }
        }

        internal static event Delegates.PositionToHeroFacing_BeforeArgs _beforePositionToHeroFacing;
        internal static event Delegates.PositionToHeroFacing_NormalArgs _afterPositionToHeroFacing;

        private static void PositionToHeroFacing(On.CameraController.orig_PositionToHeroFacing orig,
            CameraController self)
        {
            Delegates.Params_PositionToHeroFacing @params = new()
            {
                self = self
            };
            _beforePositionToHeroFacing?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPositionToHeroFacing != null) _afterPositionToHeroFacing.Invoke(@params);
        }

        internal static void HookPositionToHeroFacing_Vector2_bool()
        {
            if (!HookedList.Contains("PositionToHeroFacing_Vector2_bool"))
            {
                HookedList.Add("PositionToHeroFacing_Vector2_bool");
                On.CameraController.PositionToHeroFacing_Vector2_bool += PositionToHeroFacing_Vector2_bool;
            }
        }

        internal static event Delegates.PositionToHeroFacing_Vector2_bool_BeforeArgs
            _beforePositionToHeroFacing_Vector2_bool;

        internal static event Delegates.PositionToHeroFacing_Vector2_bool_NormalArgs
            _afterPositionToHeroFacing_Vector2_bool;

        private static void PositionToHeroFacing_Vector2_bool(
            On.CameraController.orig_PositionToHeroFacing_Vector2_bool orig, CameraController self,
            Vector2 newPosition, bool useXOffset)
        {
            Delegates.Params_PositionToHeroFacing_Vector2_bool @params = new()
            {
                self = self, newPosition = newPosition, useXOffset = useXOffset
            };
            _beforePositionToHeroFacing_Vector2_bool?.Invoke(@params);
            self = @params.self;
            newPosition = @params.newPosition;
            useXOffset = @params.useXOffset;
            orig(self, newPosition, useXOffset);
            if (_afterPositionToHeroFacing_Vector2_bool != null)
                _afterPositionToHeroFacing_Vector2_bool.Invoke(@params);
        }

        internal static void HookGetPositionToHeroFacing()
        {
            if (!HookedList.Contains("GetPositionToHeroFacing"))
            {
                HookedList.Add("GetPositionToHeroFacing");
                On.CameraController.GetPositionToHeroFacing += GetPositionToHeroFacing;
            }
        }

        internal static event Delegates.GetPositionToHeroFacing_BeforeArgs _beforeGetPositionToHeroFacing;
        internal static event Delegates.GetPositionToHeroFacing_NormalArgs _afterGetPositionToHeroFacing;

        private static Vector2 GetPositionToHeroFacing(
            On.CameraController.orig_GetPositionToHeroFacing orig, CameraController self,
            Vector2 newPosition, bool useXOffset)
        {
            Delegates.Params_GetPositionToHeroFacing @params = new()
            {
                self = self, newPosition = newPosition, useXOffset = useXOffset
            };
            _beforeGetPositionToHeroFacing?.Invoke(@params);
            self = @params.self;
            newPosition = @params.newPosition;
            useXOffset = @params.useXOffset;
            var retVal = orig(self, newPosition, useXOffset);
            if (_afterGetPositionToHeroFacing != null) retVal = _afterGetPositionToHeroFacing.Invoke(@params);

            return retVal;
        }

        internal static void HookFadeInFailSafe()
        {
            if (!HookedList.Contains("FadeInFailSafe"))
            {
                HookedList.Add("FadeInFailSafe");
                On.CameraController.FadeInFailSafe += FadeInFailSafe;
            }
        }

        internal static event Delegates.FadeInFailSafe_BeforeArgs _beforeFadeInFailSafe;

        private static IEnumerator FadeInFailSafe(On.CameraController.orig_FadeInFailSafe orig,
            CameraController self)
        {
            Delegates.Params_FadeInFailSafe @params = new()
            {
                self = self
            };
            _beforeFadeInFailSafe?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookStopFailSafe()
        {
            if (!HookedList.Contains("StopFailSafe"))
            {
                HookedList.Add("StopFailSafe");
                On.CameraController.StopFailSafe += StopFailSafe;
            }
        }

        internal static event Delegates.StopFailSafe_BeforeArgs _beforeStopFailSafe;
        internal static event Delegates.StopFailSafe_NormalArgs _afterStopFailSafe;

        private static void StopFailSafe(On.CameraController.orig_StopFailSafe orig, CameraController self)
        {
            Delegates.Params_StopFailSafe @params = new()
            {
                self = self
            };
            _beforeStopFailSafe?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopFailSafe != null) _afterStopFailSafe.Invoke(@params);
        }

        internal static void HookOnLevelUnload()
        {
            if (!HookedList.Contains("OnLevelUnload"))
            {
                HookedList.Add("OnLevelUnload");
                On.CameraController.OnLevelUnload += OnLevelUnload;
            }
        }

        internal static event Delegates.OnLevelUnload_BeforeArgs _beforeOnLevelUnload;
        internal static event Delegates.OnLevelUnload_NormalArgs _afterOnLevelUnload;

        private static void OnLevelUnload(On.CameraController.orig_OnLevelUnload orig, CameraController self)
        {
            Delegates.Params_OnLevelUnload @params = new()
            {
                self = self
            };
            _beforeOnLevelUnload?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnLevelUnload != null) _afterOnLevelUnload.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.CameraController.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.CameraController.orig_OnDestroy orig, CameraController self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void ApplyEffectConfiguration_BeforeArgs(Params_ApplyEffectConfiguration args);

        public delegate void ApplyEffectConfiguration_NormalArgs(Params_ApplyEffectConfiguration args);

        public delegate void DoPositionToHero_BeforeArgs(Params_DoPositionToHero args);

        public delegate IEnumerator DoPositionToHero_NormalArgs(Params_DoPositionToHero args);

        public delegate void FadeInFailSafe_BeforeArgs(Params_FadeInFailSafe args);

        public delegate IEnumerator FadeInFailSafe_NormalArgs(Params_FadeInFailSafe args);

        public delegate void FadeOut_BeforeArgs(Params_FadeOut args);

        public delegate void FadeOut_NormalArgs(Params_FadeOut args);

        public delegate void FadeSceneIn_BeforeArgs(Params_FadeSceneIn args);

        public delegate void FadeSceneIn_NormalArgs(Params_FadeSceneIn args);

        public delegate void FreezeInPlace_BeforeArgs(Params_FreezeInPlace args);

        public delegate void FreezeInPlace_NormalArgs(Params_FreezeInPlace args);

        public delegate void GameInit_BeforeArgs(Params_GameInit args);

        public delegate void GameInit_NormalArgs(Params_GameInit args);

        public delegate void GetPositionToHeroFacing_BeforeArgs(Params_GetPositionToHeroFacing args);

        public delegate Vector2 GetPositionToHeroFacing_NormalArgs(Params_GetPositionToHeroFacing args);

        public delegate void GetTilemapInfo_BeforeArgs(Params_GetTilemapInfo args);

        public delegate void GetTilemapInfo_NormalArgs(Params_GetTilemapInfo args);

        public delegate void IsAtHorizontalSceneBounds_BeforeArgs(Params_IsAtHorizontalSceneBounds args);

        public delegate bool IsAtHorizontalSceneBounds_NormalArgs(Params_IsAtHorizontalSceneBounds args);

        public delegate void IsAtSceneBounds_BeforeArgs(Params_IsAtSceneBounds args);

        public delegate bool IsAtSceneBounds_NormalArgs(Params_IsAtSceneBounds args);

        public delegate void IsTouchingSides_BeforeArgs(Params_IsTouchingSides args);

        public delegate bool IsTouchingSides_NormalArgs(Params_IsTouchingSides args);

        public delegate void KeepWithinLockBounds_BeforeArgs(Params_KeepWithinLockBounds args);

        public delegate Vector2 KeepWithinLockBounds_NormalArgs(Params_KeepWithinLockBounds args);

        public delegate void KeepWithinSceneBounds_Vector2_BeforeArgs(Params_KeepWithinSceneBounds_Vector2 args);

        public delegate Vector2 KeepWithinSceneBounds_Vector2_NormalArgs(
            Params_KeepWithinSceneBounds_Vector2 args);

        public delegate void KeepWithinSceneBounds_Vector3_BeforeArgs(Params_KeepWithinSceneBounds_Vector3 args);

        public delegate Vector3 KeepWithinSceneBounds_Vector3_NormalArgs(
            Params_KeepWithinSceneBounds_Vector3 args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_NormalArgs(Params_LateUpdate args);

        public delegate void LockToArea_BeforeArgs(Params_LockToArea args);

        public delegate void LockToArea_NormalArgs(Params_LockToArea args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnLevelUnload_BeforeArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_NormalArgs(Params_OnLevelUnload args);

        public delegate void PositionToHero_BeforeArgs(Params_PositionToHero args);

        public delegate void PositionToHero_NormalArgs(Params_PositionToHero args);

        public delegate void PositionToHeroFacing_BeforeArgs(Params_PositionToHeroFacing args);

        public delegate void PositionToHeroFacing_NormalArgs(Params_PositionToHeroFacing args);

        public delegate void
            PositionToHeroFacing_Vector2_bool_BeforeArgs(Params_PositionToHeroFacing_Vector2_bool args);

        public delegate void
            PositionToHeroFacing_Vector2_bool_NormalArgs(Params_PositionToHeroFacing_Vector2_bool args);

        public delegate void ReleaseLock_BeforeArgs(Params_ReleaseLock args);

        public delegate void ReleaseLock_NormalArgs(Params_ReleaseLock args);

        public delegate void ResetStartTimer_BeforeArgs(Params_ResetStartTimer args);

        public delegate void ResetStartTimer_NormalArgs(Params_ResetStartTimer args);

        public delegate void SceneInit_BeforeArgs(Params_SceneInit args);

        public delegate void SceneInit_NormalArgs(Params_SceneInit args);

        public delegate void SnapTo_BeforeArgs(Params_SnapTo args);

        public delegate void SnapTo_NormalArgs(Params_SnapTo args);

        public delegate void StopFailSafe_BeforeArgs(Params_StopFailSafe args);

        public delegate void StopFailSafe_NormalArgs(Params_StopFailSafe args);

        public delegate void UpdateTargetDestinationDelta_BeforeArgs(Params_UpdateTargetDestinationDelta args);

        public delegate void UpdateTargetDestinationDelta_NormalArgs(Params_UpdateTargetDestinationDelta args);

        public sealed class Params_GameInit
        {
            public CameraController self;
        }

        public sealed class Params_SceneInit
        {
            public CameraController self;
        }

        public sealed class Params_ApplyEffectConfiguration
        {
            public bool isBloomForced;
            public bool isGameplayLevel;
            public CameraController self;
        }

        public sealed class Params_LateUpdate
        {
            public CameraController self;
        }

        public sealed class Params_OnDisable
        {
            public CameraController self;
        }

        public sealed class Params_FreezeInPlace
        {
            public bool freezeTargetAlso;
            public CameraController self;
        }

        public sealed class Params_FadeOut
        {
            public CameraController self;
            public CameraFadeType type;
        }

        public sealed class Params_FadeSceneIn
        {
            public CameraController self;
        }

        public sealed class Params_LockToArea
        {
            public CameraLockArea lockArea;
            public CameraController self;
        }

        public sealed class Params_ReleaseLock
        {
            public CameraLockArea lockarea;
            public CameraController self;
        }

        public sealed class Params_ResetStartTimer
        {
            public CameraController self;
        }

        public sealed class Params_SnapTo
        {
            public CameraController self;
            public float x;
            public float y;
        }

        public sealed class Params_UpdateTargetDestinationDelta
        {
            public CameraController self;
        }

        public sealed class Params_KeepWithinSceneBounds_Vector3
        {
            public CameraController self;
            public Vector3 targetDest;
        }

        public sealed class Params_KeepWithinSceneBounds_Vector2
        {
            public CameraController self;
            public Vector2 targetDest;
        }

        public sealed class Params_IsAtSceneBounds
        {
            public CameraController self;
            public Vector2 targetDest;
        }

        public sealed class Params_IsAtHorizontalSceneBounds
        {
            public bool leftSide;
            public CameraController self;
            public Vector2 targetDest;
        }

        public sealed class Params_IsTouchingSides
        {
            public CameraController self;
            public float x;
        }

        public sealed class Params_KeepWithinLockBounds
        {
            public CameraController self;
            public Vector2 targetDest;
        }

        public sealed class Params_GetTilemapInfo
        {
            public CameraController self;
        }

        public sealed class Params_PositionToHero
        {
            public bool forceDirect;
            public CameraController self;
        }

        public sealed class Params_DoPositionToHero
        {
            public bool forceDirect;
            public CameraController self;
        }

        public sealed class Params_PositionToHeroFacing
        {
            public CameraController self;
        }

        public sealed class Params_PositionToHeroFacing_Vector2_bool
        {
            public Vector2 newPosition;
            public CameraController self;
            public bool useXOffset;
        }

        public sealed class Params_GetPositionToHeroFacing
        {
            public Vector2 newPosition;
            public CameraController self;
            public bool useXOffset;
        }

        public sealed class Params_FadeInFailSafe
        {
            public CameraController self;
        }

        public sealed class Params_StopFailSafe
        {
            public CameraController self;
        }

        public sealed class Params_OnLevelUnload
        {
            public CameraController self;
        }

        public sealed class Params_OnDestroy
        {
            public CameraController self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.GameInit_BeforeArgs GameInit
        {
            add
            {
                HookHandler._beforeGameInit += value;
                HookHandler.HookGameInit();
            }
            remove => HookHandler._beforeGameInit -= value;
        }

        public static event Delegates.SceneInit_BeforeArgs SceneInit
        {
            add
            {
                HookHandler._beforeSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._beforeSceneInit -= value;
        }

        public static event Delegates.ApplyEffectConfiguration_BeforeArgs ApplyEffectConfiguration
        {
            add
            {
                HookHandler._beforeApplyEffectConfiguration += value;
                HookHandler.HookApplyEffectConfiguration();
            }
            remove => HookHandler._beforeApplyEffectConfiguration -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.FreezeInPlace_BeforeArgs FreezeInPlace
        {
            add
            {
                HookHandler._beforeFreezeInPlace += value;
                HookHandler.HookFreezeInPlace();
            }
            remove => HookHandler._beforeFreezeInPlace -= value;
        }

        public static event Delegates.FadeOut_BeforeArgs FadeOut
        {
            add
            {
                HookHandler._beforeFadeOut += value;
                HookHandler.HookFadeOut();
            }
            remove => HookHandler._beforeFadeOut -= value;
        }

        public static event Delegates.FadeSceneIn_BeforeArgs FadeSceneIn
        {
            add
            {
                HookHandler._beforeFadeSceneIn += value;
                HookHandler.HookFadeSceneIn();
            }
            remove => HookHandler._beforeFadeSceneIn -= value;
        }

        public static event Delegates.LockToArea_BeforeArgs LockToArea
        {
            add
            {
                HookHandler._beforeLockToArea += value;
                HookHandler.HookLockToArea();
            }
            remove => HookHandler._beforeLockToArea -= value;
        }

        public static event Delegates.ReleaseLock_BeforeArgs ReleaseLock
        {
            add
            {
                HookHandler._beforeReleaseLock += value;
                HookHandler.HookReleaseLock();
            }
            remove => HookHandler._beforeReleaseLock -= value;
        }

        public static event Delegates.ResetStartTimer_BeforeArgs ResetStartTimer
        {
            add
            {
                HookHandler._beforeResetStartTimer += value;
                HookHandler.HookResetStartTimer();
            }
            remove => HookHandler._beforeResetStartTimer -= value;
        }

        public static event Delegates.SnapTo_BeforeArgs SnapTo
        {
            add
            {
                HookHandler._beforeSnapTo += value;
                HookHandler.HookSnapTo();
            }
            remove => HookHandler._beforeSnapTo -= value;
        }

        public static event Delegates.UpdateTargetDestinationDelta_BeforeArgs UpdateTargetDestinationDelta
        {
            add
            {
                HookHandler._beforeUpdateTargetDestinationDelta += value;
                HookHandler.HookUpdateTargetDestinationDelta();
            }
            remove => HookHandler._beforeUpdateTargetDestinationDelta -= value;
        }

        public static event Delegates.KeepWithinSceneBounds_Vector3_BeforeArgs KeepWithinSceneBounds_Vector3
        {
            add
            {
                HookHandler._beforeKeepWithinSceneBounds_Vector3 += value;
                HookHandler.HookKeepWithinSceneBounds_Vector3();
            }
            remove => HookHandler._beforeKeepWithinSceneBounds_Vector3 -= value;
        }

        public static event Delegates.KeepWithinSceneBounds_Vector2_BeforeArgs KeepWithinSceneBounds_Vector2
        {
            add
            {
                HookHandler._beforeKeepWithinSceneBounds_Vector2 += value;
                HookHandler.HookKeepWithinSceneBounds_Vector2();
            }
            remove => HookHandler._beforeKeepWithinSceneBounds_Vector2 -= value;
        }

        public static event Delegates.IsAtSceneBounds_BeforeArgs IsAtSceneBounds
        {
            add
            {
                HookHandler._beforeIsAtSceneBounds += value;
                HookHandler.HookIsAtSceneBounds();
            }
            remove => HookHandler._beforeIsAtSceneBounds -= value;
        }

        public static event Delegates.IsAtHorizontalSceneBounds_BeforeArgs IsAtHorizontalSceneBounds
        {
            add
            {
                HookHandler._beforeIsAtHorizontalSceneBounds += value;
                HookHandler.HookIsAtHorizontalSceneBounds();
            }
            remove => HookHandler._beforeIsAtHorizontalSceneBounds -= value;
        }

        public static event Delegates.IsTouchingSides_BeforeArgs IsTouchingSides
        {
            add
            {
                HookHandler._beforeIsTouchingSides += value;
                HookHandler.HookIsTouchingSides();
            }
            remove => HookHandler._beforeIsTouchingSides -= value;
        }

        public static event Delegates.KeepWithinLockBounds_BeforeArgs KeepWithinLockBounds
        {
            add
            {
                HookHandler._beforeKeepWithinLockBounds += value;
                HookHandler.HookKeepWithinLockBounds();
            }
            remove => HookHandler._beforeKeepWithinLockBounds -= value;
        }

        public static event Delegates.GetTilemapInfo_BeforeArgs GetTilemapInfo
        {
            add
            {
                HookHandler._beforeGetTilemapInfo += value;
                HookHandler.HookGetTilemapInfo();
            }
            remove => HookHandler._beforeGetTilemapInfo -= value;
        }

        public static event Delegates.PositionToHero_BeforeArgs PositionToHero
        {
            add
            {
                HookHandler._beforePositionToHero += value;
                HookHandler.HookPositionToHero();
            }
            remove => HookHandler._beforePositionToHero -= value;
        }

        public static event Delegates.DoPositionToHero_BeforeArgs DoPositionToHero
        {
            add
            {
                HookHandler._beforeDoPositionToHero += value;
                HookHandler.HookDoPositionToHero();
            }
            remove => HookHandler._beforeDoPositionToHero -= value;
        }

        public static event Delegates.PositionToHeroFacing_BeforeArgs PositionToHeroFacing
        {
            add
            {
                HookHandler._beforePositionToHeroFacing += value;
                HookHandler.HookPositionToHeroFacing();
            }
            remove => HookHandler._beforePositionToHeroFacing -= value;
        }

        public static event Delegates.PositionToHeroFacing_Vector2_bool_BeforeArgs PositionToHeroFacing_Vector2_bool
        {
            add
            {
                HookHandler._beforePositionToHeroFacing_Vector2_bool += value;
                HookHandler.HookPositionToHeroFacing_Vector2_bool();
            }
            remove => HookHandler._beforePositionToHeroFacing_Vector2_bool -= value;
        }

        public static event Delegates.GetPositionToHeroFacing_BeforeArgs GetPositionToHeroFacing
        {
            add
            {
                HookHandler._beforeGetPositionToHeroFacing += value;
                HookHandler.HookGetPositionToHeroFacing();
            }
            remove => HookHandler._beforeGetPositionToHeroFacing -= value;
        }

        public static event Delegates.FadeInFailSafe_BeforeArgs FadeInFailSafe
        {
            add
            {
                HookHandler._beforeFadeInFailSafe += value;
                HookHandler.HookFadeInFailSafe();
            }
            remove => HookHandler._beforeFadeInFailSafe -= value;
        }

        public static event Delegates.StopFailSafe_BeforeArgs StopFailSafe
        {
            add
            {
                HookHandler._beforeStopFailSafe += value;
                HookHandler.HookStopFailSafe();
            }
            remove => HookHandler._beforeStopFailSafe -= value;
        }

        public static event Delegates.OnLevelUnload_BeforeArgs OnLevelUnload
        {
            add
            {
                HookHandler._beforeOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._beforeOnLevelUnload -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.GameInit_NormalArgs GameInit
        {
            add
            {
                HookHandler._afterGameInit += value;
                HookHandler.HookGameInit();
            }
            remove => HookHandler._afterGameInit -= value;
        }

        public static event Delegates.SceneInit_NormalArgs SceneInit
        {
            add
            {
                HookHandler._afterSceneInit += value;
                HookHandler.HookSceneInit();
            }
            remove => HookHandler._afterSceneInit -= value;
        }

        public static event Delegates.ApplyEffectConfiguration_NormalArgs ApplyEffectConfiguration
        {
            add
            {
                HookHandler._afterApplyEffectConfiguration += value;
                HookHandler.HookApplyEffectConfiguration();
            }
            remove => HookHandler._afterApplyEffectConfiguration -= value;
        }

        public static event Delegates.LateUpdate_NormalArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.FreezeInPlace_NormalArgs FreezeInPlace
        {
            add
            {
                HookHandler._afterFreezeInPlace += value;
                HookHandler.HookFreezeInPlace();
            }
            remove => HookHandler._afterFreezeInPlace -= value;
        }

        public static event Delegates.FadeOut_NormalArgs FadeOut
        {
            add
            {
                HookHandler._afterFadeOut += value;
                HookHandler.HookFadeOut();
            }
            remove => HookHandler._afterFadeOut -= value;
        }

        public static event Delegates.FadeSceneIn_NormalArgs FadeSceneIn
        {
            add
            {
                HookHandler._afterFadeSceneIn += value;
                HookHandler.HookFadeSceneIn();
            }
            remove => HookHandler._afterFadeSceneIn -= value;
        }

        public static event Delegates.LockToArea_NormalArgs LockToArea
        {
            add
            {
                HookHandler._afterLockToArea += value;
                HookHandler.HookLockToArea();
            }
            remove => HookHandler._afterLockToArea -= value;
        }

        public static event Delegates.ReleaseLock_NormalArgs ReleaseLock
        {
            add
            {
                HookHandler._afterReleaseLock += value;
                HookHandler.HookReleaseLock();
            }
            remove => HookHandler._afterReleaseLock -= value;
        }

        public static event Delegates.ResetStartTimer_NormalArgs ResetStartTimer
        {
            add
            {
                HookHandler._afterResetStartTimer += value;
                HookHandler.HookResetStartTimer();
            }
            remove => HookHandler._afterResetStartTimer -= value;
        }

        public static event Delegates.SnapTo_NormalArgs SnapTo
        {
            add
            {
                HookHandler._afterSnapTo += value;
                HookHandler.HookSnapTo();
            }
            remove => HookHandler._afterSnapTo -= value;
        }

        public static event Delegates.UpdateTargetDestinationDelta_NormalArgs UpdateTargetDestinationDelta
        {
            add
            {
                HookHandler._afterUpdateTargetDestinationDelta += value;
                HookHandler.HookUpdateTargetDestinationDelta();
            }
            remove => HookHandler._afterUpdateTargetDestinationDelta -= value;
        }

        public static event Delegates.KeepWithinSceneBounds_Vector3_NormalArgs KeepWithinSceneBounds_Vector3
        {
            add
            {
                HookHandler._afterKeepWithinSceneBounds_Vector3 += value;
                HookHandler.HookKeepWithinSceneBounds_Vector3();
            }
            remove => HookHandler._afterKeepWithinSceneBounds_Vector3 -= value;
        }

        public static event Delegates.KeepWithinSceneBounds_Vector2_NormalArgs KeepWithinSceneBounds_Vector2
        {
            add
            {
                HookHandler._afterKeepWithinSceneBounds_Vector2 += value;
                HookHandler.HookKeepWithinSceneBounds_Vector2();
            }
            remove => HookHandler._afterKeepWithinSceneBounds_Vector2 -= value;
        }

        public static event Delegates.IsAtSceneBounds_NormalArgs IsAtSceneBounds
        {
            add
            {
                HookHandler._afterIsAtSceneBounds += value;
                HookHandler.HookIsAtSceneBounds();
            }
            remove => HookHandler._afterIsAtSceneBounds -= value;
        }

        public static event Delegates.IsAtHorizontalSceneBounds_NormalArgs IsAtHorizontalSceneBounds
        {
            add
            {
                HookHandler._afterIsAtHorizontalSceneBounds += value;
                HookHandler.HookIsAtHorizontalSceneBounds();
            }
            remove => HookHandler._afterIsAtHorizontalSceneBounds -= value;
        }

        public static event Delegates.IsTouchingSides_NormalArgs IsTouchingSides
        {
            add
            {
                HookHandler._afterIsTouchingSides += value;
                HookHandler.HookIsTouchingSides();
            }
            remove => HookHandler._afterIsTouchingSides -= value;
        }

        public static event Delegates.KeepWithinLockBounds_NormalArgs KeepWithinLockBounds
        {
            add
            {
                HookHandler._afterKeepWithinLockBounds += value;
                HookHandler.HookKeepWithinLockBounds();
            }
            remove => HookHandler._afterKeepWithinLockBounds -= value;
        }

        public static event Delegates.GetTilemapInfo_NormalArgs GetTilemapInfo
        {
            add
            {
                HookHandler._afterGetTilemapInfo += value;
                HookHandler.HookGetTilemapInfo();
            }
            remove => HookHandler._afterGetTilemapInfo -= value;
        }

        public static event Delegates.PositionToHero_NormalArgs PositionToHero
        {
            add
            {
                HookHandler._afterPositionToHero += value;
                HookHandler.HookPositionToHero();
            }
            remove => HookHandler._afterPositionToHero -= value;
        }

        public static event Delegates.PositionToHeroFacing_NormalArgs PositionToHeroFacing
        {
            add
            {
                HookHandler._afterPositionToHeroFacing += value;
                HookHandler.HookPositionToHeroFacing();
            }
            remove => HookHandler._afterPositionToHeroFacing -= value;
        }

        public static event Delegates.PositionToHeroFacing_Vector2_bool_NormalArgs PositionToHeroFacing_Vector2_bool
        {
            add
            {
                HookHandler._afterPositionToHeroFacing_Vector2_bool += value;
                HookHandler.HookPositionToHeroFacing_Vector2_bool();
            }
            remove => HookHandler._afterPositionToHeroFacing_Vector2_bool -= value;
        }

        public static event Delegates.GetPositionToHeroFacing_NormalArgs GetPositionToHeroFacing
        {
            add
            {
                HookHandler._afterGetPositionToHeroFacing += value;
                HookHandler.HookGetPositionToHeroFacing();
            }
            remove => HookHandler._afterGetPositionToHeroFacing -= value;
        }

        public static event Delegates.StopFailSafe_NormalArgs StopFailSafe
        {
            add
            {
                HookHandler._afterStopFailSafe += value;
                HookHandler.HookStopFailSafe();
            }
            remove => HookHandler._afterStopFailSafe -= value;
        }

        public static event Delegates.OnLevelUnload_NormalArgs OnLevelUnload
        {
            add
            {
                HookHandler._afterOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._afterOnLevelUnload -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CameraController.hook_GameInit GameInit
        {
            add => On.CameraController.GameInit += value;
            remove => On.CameraController.GameInit -= value;
        }

        public static event On.CameraController.hook_SceneInit SceneInit
        {
            add => On.CameraController.SceneInit += value;
            remove => On.CameraController.SceneInit -= value;
        }

        public static event On.CameraController.hook_ApplyEffectConfiguration ApplyEffectConfiguration
        {
            add => On.CameraController.ApplyEffectConfiguration += value;
            remove => On.CameraController.ApplyEffectConfiguration -= value;
        }

        public static event On.CameraController.hook_LateUpdate LateUpdate
        {
            add => On.CameraController.LateUpdate += value;
            remove => On.CameraController.LateUpdate -= value;
        }

        public static event On.CameraController.hook_OnDisable OnDisable
        {
            add => On.CameraController.OnDisable += value;
            remove => On.CameraController.OnDisable -= value;
        }

        public static event On.CameraController.hook_FreezeInPlace FreezeInPlace
        {
            add => On.CameraController.FreezeInPlace += value;
            remove => On.CameraController.FreezeInPlace -= value;
        }

        public static event On.CameraController.hook_FadeOut FadeOut
        {
            add => On.CameraController.FadeOut += value;
            remove => On.CameraController.FadeOut -= value;
        }

        public static event On.CameraController.hook_FadeSceneIn FadeSceneIn
        {
            add => On.CameraController.FadeSceneIn += value;
            remove => On.CameraController.FadeSceneIn -= value;
        }

        public static event On.CameraController.hook_LockToArea LockToArea
        {
            add => On.CameraController.LockToArea += value;
            remove => On.CameraController.LockToArea -= value;
        }

        public static event On.CameraController.hook_ReleaseLock ReleaseLock
        {
            add => On.CameraController.ReleaseLock += value;
            remove => On.CameraController.ReleaseLock -= value;
        }

        public static event On.CameraController.hook_ResetStartTimer ResetStartTimer
        {
            add => On.CameraController.ResetStartTimer += value;
            remove => On.CameraController.ResetStartTimer -= value;
        }

        public static event On.CameraController.hook_SnapTo SnapTo
        {
            add => On.CameraController.SnapTo += value;
            remove => On.CameraController.SnapTo -= value;
        }

        public static event On.CameraController.hook_UpdateTargetDestinationDelta UpdateTargetDestinationDelta
        {
            add => On.CameraController.UpdateTargetDestinationDelta += value;
            remove => On.CameraController.UpdateTargetDestinationDelta -= value;
        }

        public static event On.CameraController.hook_KeepWithinSceneBounds_Vector3 KeepWithinSceneBounds_Vector3
        {
            add => On.CameraController.KeepWithinSceneBounds_Vector3 += value;
            remove => On.CameraController.KeepWithinSceneBounds_Vector3 -= value;
        }

        public static event On.CameraController.hook_KeepWithinSceneBounds_Vector2 KeepWithinSceneBounds_Vector2
        {
            add => On.CameraController.KeepWithinSceneBounds_Vector2 += value;
            remove => On.CameraController.KeepWithinSceneBounds_Vector2 -= value;
        }

        public static event On.CameraController.hook_IsAtSceneBounds IsAtSceneBounds
        {
            add => On.CameraController.IsAtSceneBounds += value;
            remove => On.CameraController.IsAtSceneBounds -= value;
        }

        public static event On.CameraController.hook_IsAtHorizontalSceneBounds IsAtHorizontalSceneBounds
        {
            add => On.CameraController.IsAtHorizontalSceneBounds += value;
            remove => On.CameraController.IsAtHorizontalSceneBounds -= value;
        }

        public static event On.CameraController.hook_IsTouchingSides IsTouchingSides
        {
            add => On.CameraController.IsTouchingSides += value;
            remove => On.CameraController.IsTouchingSides -= value;
        }

        public static event On.CameraController.hook_KeepWithinLockBounds KeepWithinLockBounds
        {
            add => On.CameraController.KeepWithinLockBounds += value;
            remove => On.CameraController.KeepWithinLockBounds -= value;
        }

        public static event On.CameraController.hook_GetTilemapInfo GetTilemapInfo
        {
            add => On.CameraController.GetTilemapInfo += value;
            remove => On.CameraController.GetTilemapInfo -= value;
        }

        public static event On.CameraController.hook_PositionToHero PositionToHero
        {
            add => On.CameraController.PositionToHero += value;
            remove => On.CameraController.PositionToHero -= value;
        }

        public static event On.CameraController.hook_DoPositionToHero DoPositionToHero
        {
            add => On.CameraController.DoPositionToHero += value;
            remove => On.CameraController.DoPositionToHero -= value;
        }

        public static event On.CameraController.hook_PositionToHeroFacing PositionToHeroFacing
        {
            add => On.CameraController.PositionToHeroFacing += value;
            remove => On.CameraController.PositionToHeroFacing -= value;
        }

        public static event On.CameraController.hook_PositionToHeroFacing_Vector2_bool PositionToHeroFacing_Vector2_bool
        {
            add => On.CameraController.PositionToHeroFacing_Vector2_bool += value;
            remove => On.CameraController.PositionToHeroFacing_Vector2_bool -= value;
        }

        public static event On.CameraController.hook_GetPositionToHeroFacing GetPositionToHeroFacing
        {
            add => On.CameraController.GetPositionToHeroFacing += value;
            remove => On.CameraController.GetPositionToHeroFacing -= value;
        }

        public static event On.CameraController.hook_FadeInFailSafe FadeInFailSafe
        {
            add => On.CameraController.FadeInFailSafe += value;
            remove => On.CameraController.FadeInFailSafe -= value;
        }

        public static event On.CameraController.hook_StopFailSafe StopFailSafe
        {
            add => On.CameraController.StopFailSafe += value;
            remove => On.CameraController.StopFailSafe -= value;
        }

        public static event On.CameraController.hook_OnLevelUnload OnLevelUnload
        {
            add => On.CameraController.OnLevelUnload += value;
            remove => On.CameraController.OnLevelUnload -= value;
        }

        public static event On.CameraController.hook_OnDestroy OnDestroy
        {
            add => On.CameraController.OnDestroy += value;
            remove => On.CameraController.OnDestroy -= value;
        }
    }
}