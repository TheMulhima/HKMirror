using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CameraController class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCameraController
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookGameInit()
{
if (!HookedList.Contains("GameInit"))
{
HookedList.Add("GameInit");
On.CameraController.GameInit += GameInit;

}
}
internal static event Delegates.GameInit_BeforeArgs _beforeGameInit;
internal static event Delegates.GameInit_AfterArgs _afterGameInit;
private static void GameInit(On.CameraController.orig_GameInit orig,CameraController self)
{
Delegates.Params_GameInit @params = new() 
{
self = self
};
if (_beforeGameInit != null)
{
foreach (Delegates.GameInit_BeforeArgs toInvoke in _beforeGameInit.GetInvocationList())
{
try
{
_beforeGameInit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterGameInit != null)
{
foreach (Delegates.GameInit_AfterArgs toInvoke in _afterGameInit.GetInvocationList())
{
try
{
_afterGameInit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSceneInit()
{
if (!HookedList.Contains("SceneInit"))
{
HookedList.Add("SceneInit");
On.CameraController.SceneInit += SceneInit;

}
}
internal static event Delegates.SceneInit_BeforeArgs _beforeSceneInit;
internal static event Delegates.SceneInit_AfterArgs _afterSceneInit;
private static void SceneInit(On.CameraController.orig_SceneInit orig,CameraController self)
{
Delegates.Params_SceneInit @params = new() 
{
self = self
};
if (_beforeSceneInit != null)
{
foreach (Delegates.SceneInit_BeforeArgs toInvoke in _beforeSceneInit.GetInvocationList())
{
try
{
_beforeSceneInit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterSceneInit != null)
{
foreach (Delegates.SceneInit_AfterArgs toInvoke in _afterSceneInit.GetInvocationList())
{
try
{
_afterSceneInit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookApplyEffectConfiguration()
{
if (!HookedList.Contains("ApplyEffectConfiguration"))
{
HookedList.Add("ApplyEffectConfiguration");
On.CameraController.ApplyEffectConfiguration += ApplyEffectConfiguration;

}
}
internal static event Delegates.ApplyEffectConfiguration_BeforeArgs _beforeApplyEffectConfiguration;
internal static event Delegates.ApplyEffectConfiguration_AfterArgs _afterApplyEffectConfiguration;
private static void ApplyEffectConfiguration(On.CameraController.orig_ApplyEffectConfiguration orig,CameraController self,  bool isGameplayLevel,  bool isBloomForced)
{
Delegates.Params_ApplyEffectConfiguration @params = new() 
{
self = self
, isGameplayLevel = isGameplayLevel
, isBloomForced = isBloomForced
};
if (_beforeApplyEffectConfiguration != null)
{
foreach (Delegates.ApplyEffectConfiguration_BeforeArgs toInvoke in _beforeApplyEffectConfiguration.GetInvocationList())
{
try
{
_beforeApplyEffectConfiguration?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
isGameplayLevel = @params.isGameplayLevel;
isBloomForced = @params.isBloomForced;
orig(self, isGameplayLevel, isBloomForced);
if (_afterApplyEffectConfiguration != null)
{
foreach (Delegates.ApplyEffectConfiguration_AfterArgs toInvoke in _afterApplyEffectConfiguration.GetInvocationList())
{
try
{
_afterApplyEffectConfiguration.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLateUpdate()
{
if (!HookedList.Contains("LateUpdate"))
{
HookedList.Add("LateUpdate");
On.CameraController.LateUpdate += LateUpdate;

}
}
internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;
private static void LateUpdate(On.CameraController.orig_LateUpdate orig,CameraController self)
{
Delegates.Params_LateUpdate @params = new() 
{
self = self
};
if (_beforeLateUpdate != null)
{
foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
{
try
{
_beforeLateUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterLateUpdate != null)
{
foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
{
try
{
_afterLateUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.CameraController.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.CameraController.orig_OnDisable orig,CameraController self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFreezeInPlace()
{
if (!HookedList.Contains("FreezeInPlace"))
{
HookedList.Add("FreezeInPlace");
On.CameraController.FreezeInPlace += FreezeInPlace;

}
}
internal static event Delegates.FreezeInPlace_BeforeArgs _beforeFreezeInPlace;
internal static event Delegates.FreezeInPlace_AfterArgs _afterFreezeInPlace;
private static void FreezeInPlace(On.CameraController.orig_FreezeInPlace orig,CameraController self,  bool freezeTargetAlso)
{
Delegates.Params_FreezeInPlace @params = new() 
{
self = self
, freezeTargetAlso = freezeTargetAlso
};
if (_beforeFreezeInPlace != null)
{
foreach (Delegates.FreezeInPlace_BeforeArgs toInvoke in _beforeFreezeInPlace.GetInvocationList())
{
try
{
_beforeFreezeInPlace?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
freezeTargetAlso = @params.freezeTargetAlso;
orig(self, freezeTargetAlso);
if (_afterFreezeInPlace != null)
{
foreach (Delegates.FreezeInPlace_AfterArgs toInvoke in _afterFreezeInPlace.GetInvocationList())
{
try
{
_afterFreezeInPlace.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeOut()
{
if (!HookedList.Contains("FadeOut"))
{
HookedList.Add("FadeOut");
On.CameraController.FadeOut += FadeOut;

}
}
internal static event Delegates.FadeOut_BeforeArgs _beforeFadeOut;
internal static event Delegates.FadeOut_AfterArgs _afterFadeOut;
private static void FadeOut(On.CameraController.orig_FadeOut orig,CameraController self,  GlobalEnums.CameraFadeType type)
{
Delegates.Params_FadeOut @params = new() 
{
self = self
, type = type
};
if (_beforeFadeOut != null)
{
foreach (Delegates.FadeOut_BeforeArgs toInvoke in _beforeFadeOut.GetInvocationList())
{
try
{
_beforeFadeOut?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
type = @params.type;
orig(self, type);
if (_afterFadeOut != null)
{
foreach (Delegates.FadeOut_AfterArgs toInvoke in _afterFadeOut.GetInvocationList())
{
try
{
_afterFadeOut.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookFadeSceneIn()
{
if (!HookedList.Contains("FadeSceneIn"))
{
HookedList.Add("FadeSceneIn");
On.CameraController.FadeSceneIn += FadeSceneIn;

}
}
internal static event Delegates.FadeSceneIn_BeforeArgs _beforeFadeSceneIn;
internal static event Delegates.FadeSceneIn_AfterArgs _afterFadeSceneIn;
private static void FadeSceneIn(On.CameraController.orig_FadeSceneIn orig,CameraController self)
{
Delegates.Params_FadeSceneIn @params = new() 
{
self = self
};
if (_beforeFadeSceneIn != null)
{
foreach (Delegates.FadeSceneIn_BeforeArgs toInvoke in _beforeFadeSceneIn.GetInvocationList())
{
try
{
_beforeFadeSceneIn?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterFadeSceneIn != null)
{
foreach (Delegates.FadeSceneIn_AfterArgs toInvoke in _afterFadeSceneIn.GetInvocationList())
{
try
{
_afterFadeSceneIn.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookLockToArea()
{
if (!HookedList.Contains("LockToArea"))
{
HookedList.Add("LockToArea");
On.CameraController.LockToArea += LockToArea;

}
}
internal static event Delegates.LockToArea_BeforeArgs _beforeLockToArea;
internal static event Delegates.LockToArea_AfterArgs _afterLockToArea;
private static void LockToArea(On.CameraController.orig_LockToArea orig,CameraController self,  CameraLockArea lockArea)
{
Delegates.Params_LockToArea @params = new() 
{
self = self
, lockArea = lockArea
};
if (_beforeLockToArea != null)
{
foreach (Delegates.LockToArea_BeforeArgs toInvoke in _beforeLockToArea.GetInvocationList())
{
try
{
_beforeLockToArea?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
lockArea = @params.lockArea;
orig(self, lockArea);
if (_afterLockToArea != null)
{
foreach (Delegates.LockToArea_AfterArgs toInvoke in _afterLockToArea.GetInvocationList())
{
try
{
_afterLockToArea.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookReleaseLock()
{
if (!HookedList.Contains("ReleaseLock"))
{
HookedList.Add("ReleaseLock");
On.CameraController.ReleaseLock += ReleaseLock;

}
}
internal static event Delegates.ReleaseLock_BeforeArgs _beforeReleaseLock;
internal static event Delegates.ReleaseLock_AfterArgs _afterReleaseLock;
private static void ReleaseLock(On.CameraController.orig_ReleaseLock orig,CameraController self,  CameraLockArea lockarea)
{
Delegates.Params_ReleaseLock @params = new() 
{
self = self
, lockarea = lockarea
};
if (_beforeReleaseLock != null)
{
foreach (Delegates.ReleaseLock_BeforeArgs toInvoke in _beforeReleaseLock.GetInvocationList())
{
try
{
_beforeReleaseLock?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
lockarea = @params.lockarea;
orig(self, lockarea);
if (_afterReleaseLock != null)
{
foreach (Delegates.ReleaseLock_AfterArgs toInvoke in _afterReleaseLock.GetInvocationList())
{
try
{
_afterReleaseLock.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookResetStartTimer()
{
if (!HookedList.Contains("ResetStartTimer"))
{
HookedList.Add("ResetStartTimer");
On.CameraController.ResetStartTimer += ResetStartTimer;

}
}
internal static event Delegates.ResetStartTimer_BeforeArgs _beforeResetStartTimer;
internal static event Delegates.ResetStartTimer_AfterArgs _afterResetStartTimer;
private static void ResetStartTimer(On.CameraController.orig_ResetStartTimer orig,CameraController self)
{
Delegates.Params_ResetStartTimer @params = new() 
{
self = self
};
if (_beforeResetStartTimer != null)
{
foreach (Delegates.ResetStartTimer_BeforeArgs toInvoke in _beforeResetStartTimer.GetInvocationList())
{
try
{
_beforeResetStartTimer?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterResetStartTimer != null)
{
foreach (Delegates.ResetStartTimer_AfterArgs toInvoke in _afterResetStartTimer.GetInvocationList())
{
try
{
_afterResetStartTimer.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSnapTo()
{
if (!HookedList.Contains("SnapTo"))
{
HookedList.Add("SnapTo");
On.CameraController.SnapTo += SnapTo;

}
}
internal static event Delegates.SnapTo_BeforeArgs _beforeSnapTo;
internal static event Delegates.SnapTo_AfterArgs _afterSnapTo;
private static void SnapTo(On.CameraController.orig_SnapTo orig,CameraController self,  float x,  float y)
{
Delegates.Params_SnapTo @params = new() 
{
self = self
, x = x
, y = y
};
if (_beforeSnapTo != null)
{
foreach (Delegates.SnapTo_BeforeArgs toInvoke in _beforeSnapTo.GetInvocationList())
{
try
{
_beforeSnapTo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
x = @params.x;
y = @params.y;
orig(self, x, y);
if (_afterSnapTo != null)
{
foreach (Delegates.SnapTo_AfterArgs toInvoke in _afterSnapTo.GetInvocationList())
{
try
{
_afterSnapTo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdateTargetDestinationDelta()
{
if (!HookedList.Contains("UpdateTargetDestinationDelta"))
{
HookedList.Add("UpdateTargetDestinationDelta");
On.CameraController.UpdateTargetDestinationDelta += UpdateTargetDestinationDelta;

}
}
internal static event Delegates.UpdateTargetDestinationDelta_BeforeArgs _beforeUpdateTargetDestinationDelta;
internal static event Delegates.UpdateTargetDestinationDelta_AfterArgs _afterUpdateTargetDestinationDelta;
private static void UpdateTargetDestinationDelta(On.CameraController.orig_UpdateTargetDestinationDelta orig,CameraController self)
{
Delegates.Params_UpdateTargetDestinationDelta @params = new() 
{
self = self
};
if (_beforeUpdateTargetDestinationDelta != null)
{
foreach (Delegates.UpdateTargetDestinationDelta_BeforeArgs toInvoke in _beforeUpdateTargetDestinationDelta.GetInvocationList())
{
try
{
_beforeUpdateTargetDestinationDelta?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdateTargetDestinationDelta != null)
{
foreach (Delegates.UpdateTargetDestinationDelta_AfterArgs toInvoke in _afterUpdateTargetDestinationDelta.GetInvocationList())
{
try
{
_afterUpdateTargetDestinationDelta.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookKeepWithinSceneBounds_Vector3()
{
if (!HookedList.Contains("KeepWithinSceneBounds_Vector3"))
{
HookedList.Add("KeepWithinSceneBounds_Vector3");
On.CameraController.KeepWithinSceneBounds_Vector3 += KeepWithinSceneBounds_Vector3;

}
}
internal static event Delegates.KeepWithinSceneBounds_Vector3_BeforeArgs _beforeKeepWithinSceneBounds_Vector3;
internal static event Delegates.KeepWithinSceneBounds_Vector3_AfterArgs _afterKeepWithinSceneBounds_Vector3;
private static UnityEngine.Vector3 KeepWithinSceneBounds_Vector3(On.CameraController.orig_KeepWithinSceneBounds_Vector3 orig,CameraController self,  UnityEngine.Vector3 targetDest)
{
Delegates.Params_KeepWithinSceneBounds_Vector3 @params = new() 
{
self = self
, targetDest = targetDest
};
if (_beforeKeepWithinSceneBounds_Vector3 != null)
{
foreach (Delegates.KeepWithinSceneBounds_Vector3_BeforeArgs toInvoke in _beforeKeepWithinSceneBounds_Vector3.GetInvocationList())
{
try
{
_beforeKeepWithinSceneBounds_Vector3?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetDest = @params.targetDest;
var retVal = orig(self, targetDest);
if (_afterKeepWithinSceneBounds_Vector3 != null)
{
foreach (Delegates.KeepWithinSceneBounds_Vector3_AfterArgs toInvoke in _afterKeepWithinSceneBounds_Vector3.GetInvocationList())
{
try
{
retVal = _afterKeepWithinSceneBounds_Vector3.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookKeepWithinSceneBounds_Vector2()
{
if (!HookedList.Contains("KeepWithinSceneBounds_Vector2"))
{
HookedList.Add("KeepWithinSceneBounds_Vector2");
On.CameraController.KeepWithinSceneBounds_Vector2 += KeepWithinSceneBounds_Vector2;

}
}
internal static event Delegates.KeepWithinSceneBounds_Vector2_BeforeArgs _beforeKeepWithinSceneBounds_Vector2;
internal static event Delegates.KeepWithinSceneBounds_Vector2_AfterArgs _afterKeepWithinSceneBounds_Vector2;
private static UnityEngine.Vector2 KeepWithinSceneBounds_Vector2(On.CameraController.orig_KeepWithinSceneBounds_Vector2 orig,CameraController self,  UnityEngine.Vector2 targetDest)
{
Delegates.Params_KeepWithinSceneBounds_Vector2 @params = new() 
{
self = self
, targetDest = targetDest
};
if (_beforeKeepWithinSceneBounds_Vector2 != null)
{
foreach (Delegates.KeepWithinSceneBounds_Vector2_BeforeArgs toInvoke in _beforeKeepWithinSceneBounds_Vector2.GetInvocationList())
{
try
{
_beforeKeepWithinSceneBounds_Vector2?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetDest = @params.targetDest;
var retVal = orig(self, targetDest);
if (_afterKeepWithinSceneBounds_Vector2 != null)
{
foreach (Delegates.KeepWithinSceneBounds_Vector2_AfterArgs toInvoke in _afterKeepWithinSceneBounds_Vector2.GetInvocationList())
{
try
{
retVal = _afterKeepWithinSceneBounds_Vector2.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsAtSceneBounds()
{
if (!HookedList.Contains("IsAtSceneBounds"))
{
HookedList.Add("IsAtSceneBounds");
On.CameraController.IsAtSceneBounds += IsAtSceneBounds;

}
}
internal static event Delegates.IsAtSceneBounds_BeforeArgs _beforeIsAtSceneBounds;
internal static event Delegates.IsAtSceneBounds_AfterArgs _afterIsAtSceneBounds;
private static bool IsAtSceneBounds(On.CameraController.orig_IsAtSceneBounds orig,CameraController self,  UnityEngine.Vector2 targetDest)
{
Delegates.Params_IsAtSceneBounds @params = new() 
{
self = self
, targetDest = targetDest
};
if (_beforeIsAtSceneBounds != null)
{
foreach (Delegates.IsAtSceneBounds_BeforeArgs toInvoke in _beforeIsAtSceneBounds.GetInvocationList())
{
try
{
_beforeIsAtSceneBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetDest = @params.targetDest;
var retVal = orig(self, targetDest);
if (_afterIsAtSceneBounds != null)
{
foreach (Delegates.IsAtSceneBounds_AfterArgs toInvoke in _afterIsAtSceneBounds.GetInvocationList())
{
try
{
retVal = _afterIsAtSceneBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsAtHorizontalSceneBounds()
{
if (!HookedList.Contains("IsAtHorizontalSceneBounds"))
{
HookedList.Add("IsAtHorizontalSceneBounds");
On.CameraController.IsAtHorizontalSceneBounds += IsAtHorizontalSceneBounds;

}
}
internal static event Delegates.IsAtHorizontalSceneBounds_BeforeArgs _beforeIsAtHorizontalSceneBounds;
internal static event Delegates.IsAtHorizontalSceneBounds_AfterArgs _afterIsAtHorizontalSceneBounds;
private static bool IsAtHorizontalSceneBounds(On.CameraController.orig_IsAtHorizontalSceneBounds orig,CameraController self,  UnityEngine.Vector2 targetDest, out  bool leftSide)
{
Delegates.Params_IsAtHorizontalSceneBounds @params = new() 
{
self = self
, targetDest = targetDest
};
if (_beforeIsAtHorizontalSceneBounds != null)
{
foreach (Delegates.IsAtHorizontalSceneBounds_BeforeArgs toInvoke in _beforeIsAtHorizontalSceneBounds.GetInvocationList())
{
try
{
_beforeIsAtHorizontalSceneBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetDest = @params.targetDest;
leftSide = @params.leftSide;
var retVal = orig(self, targetDest, out leftSide);
if (_afterIsAtHorizontalSceneBounds != null)
{
foreach (Delegates.IsAtHorizontalSceneBounds_AfterArgs toInvoke in _afterIsAtHorizontalSceneBounds.GetInvocationList())
{
try
{
retVal = _afterIsAtHorizontalSceneBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookIsTouchingSides()
{
if (!HookedList.Contains("IsTouchingSides"))
{
HookedList.Add("IsTouchingSides");
On.CameraController.IsTouchingSides += IsTouchingSides;

}
}
internal static event Delegates.IsTouchingSides_BeforeArgs _beforeIsTouchingSides;
internal static event Delegates.IsTouchingSides_AfterArgs _afterIsTouchingSides;
private static bool IsTouchingSides(On.CameraController.orig_IsTouchingSides orig,CameraController self,  float x)
{
Delegates.Params_IsTouchingSides @params = new() 
{
self = self
, x = x
};
if (_beforeIsTouchingSides != null)
{
foreach (Delegates.IsTouchingSides_BeforeArgs toInvoke in _beforeIsTouchingSides.GetInvocationList())
{
try
{
_beforeIsTouchingSides?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
x = @params.x;
var retVal = orig(self, x);
if (_afterIsTouchingSides != null)
{
foreach (Delegates.IsTouchingSides_AfterArgs toInvoke in _afterIsTouchingSides.GetInvocationList())
{
try
{
retVal = _afterIsTouchingSides.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookKeepWithinLockBounds()
{
if (!HookedList.Contains("KeepWithinLockBounds"))
{
HookedList.Add("KeepWithinLockBounds");
On.CameraController.KeepWithinLockBounds += KeepWithinLockBounds;

}
}
internal static event Delegates.KeepWithinLockBounds_BeforeArgs _beforeKeepWithinLockBounds;
internal static event Delegates.KeepWithinLockBounds_AfterArgs _afterKeepWithinLockBounds;
private static UnityEngine.Vector2 KeepWithinLockBounds(On.CameraController.orig_KeepWithinLockBounds orig,CameraController self,  UnityEngine.Vector2 targetDest)
{
Delegates.Params_KeepWithinLockBounds @params = new() 
{
self = self
, targetDest = targetDest
};
if (_beforeKeepWithinLockBounds != null)
{
foreach (Delegates.KeepWithinLockBounds_BeforeArgs toInvoke in _beforeKeepWithinLockBounds.GetInvocationList())
{
try
{
_beforeKeepWithinLockBounds?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
targetDest = @params.targetDest;
var retVal = orig(self, targetDest);
if (_afterKeepWithinLockBounds != null)
{
foreach (Delegates.KeepWithinLockBounds_AfterArgs toInvoke in _afterKeepWithinLockBounds.GetInvocationList())
{
try
{
retVal = _afterKeepWithinLockBounds.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookGetTilemapInfo()
{
if (!HookedList.Contains("GetTilemapInfo"))
{
HookedList.Add("GetTilemapInfo");
On.CameraController.GetTilemapInfo += GetTilemapInfo;

}
}
internal static event Delegates.GetTilemapInfo_BeforeArgs _beforeGetTilemapInfo;
internal static event Delegates.GetTilemapInfo_AfterArgs _afterGetTilemapInfo;
private static void GetTilemapInfo(On.CameraController.orig_GetTilemapInfo orig,CameraController self)
{
Delegates.Params_GetTilemapInfo @params = new() 
{
self = self
};
if (_beforeGetTilemapInfo != null)
{
foreach (Delegates.GetTilemapInfo_BeforeArgs toInvoke in _beforeGetTilemapInfo.GetInvocationList())
{
try
{
_beforeGetTilemapInfo?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterGetTilemapInfo != null)
{
foreach (Delegates.GetTilemapInfo_AfterArgs toInvoke in _afterGetTilemapInfo.GetInvocationList())
{
try
{
_afterGetTilemapInfo.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPositionToHero()
{
if (!HookedList.Contains("PositionToHero"))
{
HookedList.Add("PositionToHero");
On.CameraController.PositionToHero += PositionToHero;

}
}
internal static event Delegates.PositionToHero_BeforeArgs _beforePositionToHero;
internal static event Delegates.PositionToHero_AfterArgs _afterPositionToHero;
private static void PositionToHero(On.CameraController.orig_PositionToHero orig,CameraController self,  bool forceDirect)
{
Delegates.Params_PositionToHero @params = new() 
{
self = self
, forceDirect = forceDirect
};
if (_beforePositionToHero != null)
{
foreach (Delegates.PositionToHero_BeforeArgs toInvoke in _beforePositionToHero.GetInvocationList())
{
try
{
_beforePositionToHero?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
forceDirect = @params.forceDirect;
orig(self, forceDirect);
if (_afterPositionToHero != null)
{
foreach (Delegates.PositionToHero_AfterArgs toInvoke in _afterPositionToHero.GetInvocationList())
{
try
{
_afterPositionToHero.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookDoPositionToHero()
{
if (!HookedList.Contains("DoPositionToHero"))
{
HookedList.Add("DoPositionToHero");
On.CameraController.DoPositionToHero += DoPositionToHero;

}
}
internal static event Delegates.DoPositionToHero_BeforeArgs _beforeDoPositionToHero;
private static System.Collections.IEnumerator DoPositionToHero(On.CameraController.orig_DoPositionToHero orig,CameraController self,  bool forceDirect)
{
Delegates.Params_DoPositionToHero @params = new() 
{
self = self
, forceDirect = forceDirect
};
if (_beforeDoPositionToHero != null)
{
foreach (Delegates.DoPositionToHero_BeforeArgs toInvoke in _beforeDoPositionToHero.GetInvocationList())
{
try
{
_beforeDoPositionToHero?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
forceDirect = @params.forceDirect;
return orig(self, forceDirect);
}
internal static void HookPositionToHeroFacing()
{
if (!HookedList.Contains("PositionToHeroFacing"))
{
HookedList.Add("PositionToHeroFacing");
On.CameraController.PositionToHeroFacing += PositionToHeroFacing;

}
}
internal static event Delegates.PositionToHeroFacing_BeforeArgs _beforePositionToHeroFacing;
internal static event Delegates.PositionToHeroFacing_AfterArgs _afterPositionToHeroFacing;
private static void PositionToHeroFacing(On.CameraController.orig_PositionToHeroFacing orig,CameraController self)
{
Delegates.Params_PositionToHeroFacing @params = new() 
{
self = self
};
if (_beforePositionToHeroFacing != null)
{
foreach (Delegates.PositionToHeroFacing_BeforeArgs toInvoke in _beforePositionToHeroFacing.GetInvocationList())
{
try
{
_beforePositionToHeroFacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterPositionToHeroFacing != null)
{
foreach (Delegates.PositionToHeroFacing_AfterArgs toInvoke in _afterPositionToHeroFacing.GetInvocationList())
{
try
{
_afterPositionToHeroFacing.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookPositionToHeroFacing_Vector2_bool()
{
if (!HookedList.Contains("PositionToHeroFacing_Vector2_bool"))
{
HookedList.Add("PositionToHeroFacing_Vector2_bool");
On.CameraController.PositionToHeroFacing_Vector2_bool += PositionToHeroFacing_Vector2_bool;

}
}
internal static event Delegates.PositionToHeroFacing_Vector2_bool_BeforeArgs _beforePositionToHeroFacing_Vector2_bool;
internal static event Delegates.PositionToHeroFacing_Vector2_bool_AfterArgs _afterPositionToHeroFacing_Vector2_bool;
private static void PositionToHeroFacing_Vector2_bool(On.CameraController.orig_PositionToHeroFacing_Vector2_bool orig,CameraController self,  UnityEngine.Vector2 newPosition,  bool useXOffset)
{
Delegates.Params_PositionToHeroFacing_Vector2_bool @params = new() 
{
self = self
, newPosition = newPosition
, useXOffset = useXOffset
};
if (_beforePositionToHeroFacing_Vector2_bool != null)
{
foreach (Delegates.PositionToHeroFacing_Vector2_bool_BeforeArgs toInvoke in _beforePositionToHeroFacing_Vector2_bool.GetInvocationList())
{
try
{
_beforePositionToHeroFacing_Vector2_bool?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
newPosition = @params.newPosition;
useXOffset = @params.useXOffset;
orig(self, newPosition, useXOffset);
if (_afterPositionToHeroFacing_Vector2_bool != null)
{
foreach (Delegates.PositionToHeroFacing_Vector2_bool_AfterArgs toInvoke in _afterPositionToHeroFacing_Vector2_bool.GetInvocationList())
{
try
{
_afterPositionToHeroFacing_Vector2_bool.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookGetPositionToHeroFacing()
{
if (!HookedList.Contains("GetPositionToHeroFacing"))
{
HookedList.Add("GetPositionToHeroFacing");
On.CameraController.GetPositionToHeroFacing += GetPositionToHeroFacing;

}
}
internal static event Delegates.GetPositionToHeroFacing_BeforeArgs _beforeGetPositionToHeroFacing;
internal static event Delegates.GetPositionToHeroFacing_AfterArgs _afterGetPositionToHeroFacing;
private static UnityEngine.Vector2 GetPositionToHeroFacing(On.CameraController.orig_GetPositionToHeroFacing orig,CameraController self,  UnityEngine.Vector2 newPosition,  bool useXOffset)
{
Delegates.Params_GetPositionToHeroFacing @params = new() 
{
self = self
, newPosition = newPosition
, useXOffset = useXOffset
};
if (_beforeGetPositionToHeroFacing != null)
{
foreach (Delegates.GetPositionToHeroFacing_BeforeArgs toInvoke in _beforeGetPositionToHeroFacing.GetInvocationList())
{
try
{
_beforeGetPositionToHeroFacing?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
newPosition = @params.newPosition;
useXOffset = @params.useXOffset;
var retVal = orig(self, newPosition, useXOffset);
if (_afterGetPositionToHeroFacing != null)
{
foreach (Delegates.GetPositionToHeroFacing_AfterArgs toInvoke in _afterGetPositionToHeroFacing.GetInvocationList())
{
try
{
retVal = _afterGetPositionToHeroFacing.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void HookFadeInFailSafe()
{
if (!HookedList.Contains("FadeInFailSafe"))
{
HookedList.Add("FadeInFailSafe");
On.CameraController.FadeInFailSafe += FadeInFailSafe;

}
}
internal static event Delegates.FadeInFailSafe_BeforeArgs _beforeFadeInFailSafe;
private static System.Collections.IEnumerator FadeInFailSafe(On.CameraController.orig_FadeInFailSafe orig,CameraController self)
{
Delegates.Params_FadeInFailSafe @params = new() 
{
self = self
};
if (_beforeFadeInFailSafe != null)
{
foreach (Delegates.FadeInFailSafe_BeforeArgs toInvoke in _beforeFadeInFailSafe.GetInvocationList())
{
try
{
_beforeFadeInFailSafe?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
return orig(self);
}
internal static void HookStopFailSafe()
{
if (!HookedList.Contains("StopFailSafe"))
{
HookedList.Add("StopFailSafe");
On.CameraController.StopFailSafe += StopFailSafe;

}
}
internal static event Delegates.StopFailSafe_BeforeArgs _beforeStopFailSafe;
internal static event Delegates.StopFailSafe_AfterArgs _afterStopFailSafe;
private static void StopFailSafe(On.CameraController.orig_StopFailSafe orig,CameraController self)
{
Delegates.Params_StopFailSafe @params = new() 
{
self = self
};
if (_beforeStopFailSafe != null)
{
foreach (Delegates.StopFailSafe_BeforeArgs toInvoke in _beforeStopFailSafe.GetInvocationList())
{
try
{
_beforeStopFailSafe?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStopFailSafe != null)
{
foreach (Delegates.StopFailSafe_AfterArgs toInvoke in _afterStopFailSafe.GetInvocationList())
{
try
{
_afterStopFailSafe.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnLevelUnload()
{
if (!HookedList.Contains("OnLevelUnload"))
{
HookedList.Add("OnLevelUnload");
On.CameraController.OnLevelUnload += OnLevelUnload;

}
}
internal static event Delegates.OnLevelUnload_BeforeArgs _beforeOnLevelUnload;
internal static event Delegates.OnLevelUnload_AfterArgs _afterOnLevelUnload;
private static void OnLevelUnload(On.CameraController.orig_OnLevelUnload orig,CameraController self)
{
Delegates.Params_OnLevelUnload @params = new() 
{
self = self
};
if (_beforeOnLevelUnload != null)
{
foreach (Delegates.OnLevelUnload_BeforeArgs toInvoke in _beforeOnLevelUnload.GetInvocationList())
{
try
{
_beforeOnLevelUnload?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnLevelUnload != null)
{
foreach (Delegates.OnLevelUnload_AfterArgs toInvoke in _afterOnLevelUnload.GetInvocationList())
{
try
{
_afterOnLevelUnload.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDestroy()
{
if (!HookedList.Contains("OnDestroy"))
{
HookedList.Add("OnDestroy");
On.CameraController.OnDestroy += OnDestroy;

}
}
internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
internal static event Delegates.OnDestroy_AfterArgs _afterOnDestroy;
private static void OnDestroy(On.CameraController.orig_OnDestroy orig,CameraController self)
{
Delegates.Params_OnDestroy @params = new() 
{
self = self
};
if (_beforeOnDestroy != null)
{
foreach (Delegates.OnDestroy_BeforeArgs toInvoke in _beforeOnDestroy.GetInvocationList())
{
try
{
_beforeOnDestroy?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDestroy != null)
{
foreach (Delegates.OnDestroy_AfterArgs toInvoke in _afterOnDestroy.GetInvocationList())
{
try
{
_afterOnDestroy.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_GameInit
{
public CameraController self;
}
public delegate void GameInit_BeforeArgs(Params_GameInit args);
public delegate void GameInit_AfterArgs(Params_GameInit args);
public delegate void GameInit_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_SceneInit
{
public CameraController self;
}
public delegate void SceneInit_BeforeArgs(Params_SceneInit args);
public delegate void SceneInit_AfterArgs(Params_SceneInit args);
public delegate void SceneInit_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_ApplyEffectConfiguration
{
public CameraController self;
public bool isGameplayLevel;
public bool isBloomForced;
}
public delegate void ApplyEffectConfiguration_BeforeArgs(Params_ApplyEffectConfiguration args);
public delegate void ApplyEffectConfiguration_AfterArgs(Params_ApplyEffectConfiguration args);
public delegate void ApplyEffectConfiguration_WithArgs (Action<CameraController,  bool,  bool> orig, CameraController self,  bool isGameplayLevel,  bool isBloomForced);
public sealed class Params_LateUpdate
{
public CameraController self;
}
public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);
public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);
public delegate void LateUpdate_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_OnDisable
{
public CameraController self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_FreezeInPlace
{
public CameraController self;
public bool freezeTargetAlso;
}
public delegate void FreezeInPlace_BeforeArgs(Params_FreezeInPlace args);
public delegate void FreezeInPlace_AfterArgs(Params_FreezeInPlace args);
public delegate void FreezeInPlace_WithArgs (Action<CameraController,  bool> orig, CameraController self,  bool freezeTargetAlso);
public sealed class Params_FadeOut
{
public CameraController self;
public GlobalEnums.CameraFadeType type;
}
public delegate void FadeOut_BeforeArgs(Params_FadeOut args);
public delegate void FadeOut_AfterArgs(Params_FadeOut args);
public delegate void FadeOut_WithArgs (Action<CameraController,  GlobalEnums.CameraFadeType> orig, CameraController self,  GlobalEnums.CameraFadeType type);
public sealed class Params_FadeSceneIn
{
public CameraController self;
}
public delegate void FadeSceneIn_BeforeArgs(Params_FadeSceneIn args);
public delegate void FadeSceneIn_AfterArgs(Params_FadeSceneIn args);
public delegate void FadeSceneIn_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_LockToArea
{
public CameraController self;
public CameraLockArea lockArea;
}
public delegate void LockToArea_BeforeArgs(Params_LockToArea args);
public delegate void LockToArea_AfterArgs(Params_LockToArea args);
public delegate void LockToArea_WithArgs (Action<CameraController,  CameraLockArea> orig, CameraController self,  CameraLockArea lockArea);
public sealed class Params_ReleaseLock
{
public CameraController self;
public CameraLockArea lockarea;
}
public delegate void ReleaseLock_BeforeArgs(Params_ReleaseLock args);
public delegate void ReleaseLock_AfterArgs(Params_ReleaseLock args);
public delegate void ReleaseLock_WithArgs (Action<CameraController,  CameraLockArea> orig, CameraController self,  CameraLockArea lockarea);
public sealed class Params_ResetStartTimer
{
public CameraController self;
}
public delegate void ResetStartTimer_BeforeArgs(Params_ResetStartTimer args);
public delegate void ResetStartTimer_AfterArgs(Params_ResetStartTimer args);
public delegate void ResetStartTimer_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_SnapTo
{
public CameraController self;
public float x;
public float y;
}
public delegate void SnapTo_BeforeArgs(Params_SnapTo args);
public delegate void SnapTo_AfterArgs(Params_SnapTo args);
public delegate void SnapTo_WithArgs (Action<CameraController,  float,  float> orig, CameraController self,  float x,  float y);
public sealed class Params_UpdateTargetDestinationDelta
{
public CameraController self;
}
public delegate void UpdateTargetDestinationDelta_BeforeArgs(Params_UpdateTargetDestinationDelta args);
public delegate void UpdateTargetDestinationDelta_AfterArgs(Params_UpdateTargetDestinationDelta args);
public delegate void UpdateTargetDestinationDelta_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_KeepWithinSceneBounds_Vector3
{
public CameraController self;
public UnityEngine.Vector3 targetDest;
}
public delegate void KeepWithinSceneBounds_Vector3_BeforeArgs(Params_KeepWithinSceneBounds_Vector3 args);
public delegate UnityEngine.Vector3 KeepWithinSceneBounds_Vector3_AfterArgs(Params_KeepWithinSceneBounds_Vector3 args, UnityEngine.Vector3 ret);
public delegate UnityEngine.Vector3 KeepWithinSceneBounds_Vector3_WithArgs (Func<CameraController,  UnityEngine.Vector3, UnityEngine.Vector3> orig, CameraController self,  UnityEngine.Vector3 targetDest);
public sealed class Params_KeepWithinSceneBounds_Vector2
{
public CameraController self;
public UnityEngine.Vector2 targetDest;
}
public delegate void KeepWithinSceneBounds_Vector2_BeforeArgs(Params_KeepWithinSceneBounds_Vector2 args);
public delegate UnityEngine.Vector2 KeepWithinSceneBounds_Vector2_AfterArgs(Params_KeepWithinSceneBounds_Vector2 args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 KeepWithinSceneBounds_Vector2_WithArgs (Func<CameraController,  UnityEngine.Vector2, UnityEngine.Vector2> orig, CameraController self,  UnityEngine.Vector2 targetDest);
public sealed class Params_IsAtSceneBounds
{
public CameraController self;
public UnityEngine.Vector2 targetDest;
}
public delegate void IsAtSceneBounds_BeforeArgs(Params_IsAtSceneBounds args);
public delegate bool IsAtSceneBounds_AfterArgs(Params_IsAtSceneBounds args, bool ret);
public delegate bool IsAtSceneBounds_WithArgs (Func<CameraController,  UnityEngine.Vector2, bool> orig, CameraController self,  UnityEngine.Vector2 targetDest);
public sealed class Params_IsAtHorizontalSceneBounds
{
public CameraController self;
public UnityEngine.Vector2 targetDest;
public bool leftSide;
}
public delegate void IsAtHorizontalSceneBounds_BeforeArgs(Params_IsAtHorizontalSceneBounds args);
public delegate bool IsAtHorizontalSceneBounds_AfterArgs(Params_IsAtHorizontalSceneBounds args, bool ret);
public delegate bool IsAtHorizontalSceneBounds_WithArgs (Func<CameraController,  UnityEngine.Vector2,  bool, bool> orig, CameraController self,  UnityEngine.Vector2 targetDest, out  bool leftSide);
public sealed class Params_IsTouchingSides
{
public CameraController self;
public float x;
}
public delegate void IsTouchingSides_BeforeArgs(Params_IsTouchingSides args);
public delegate bool IsTouchingSides_AfterArgs(Params_IsTouchingSides args, bool ret);
public delegate bool IsTouchingSides_WithArgs (Func<CameraController,  float, bool> orig, CameraController self,  float x);
public sealed class Params_KeepWithinLockBounds
{
public CameraController self;
public UnityEngine.Vector2 targetDest;
}
public delegate void KeepWithinLockBounds_BeforeArgs(Params_KeepWithinLockBounds args);
public delegate UnityEngine.Vector2 KeepWithinLockBounds_AfterArgs(Params_KeepWithinLockBounds args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 KeepWithinLockBounds_WithArgs (Func<CameraController,  UnityEngine.Vector2, UnityEngine.Vector2> orig, CameraController self,  UnityEngine.Vector2 targetDest);
public sealed class Params_GetTilemapInfo
{
public CameraController self;
}
public delegate void GetTilemapInfo_BeforeArgs(Params_GetTilemapInfo args);
public delegate void GetTilemapInfo_AfterArgs(Params_GetTilemapInfo args);
public delegate void GetTilemapInfo_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_PositionToHero
{
public CameraController self;
public bool forceDirect;
}
public delegate void PositionToHero_BeforeArgs(Params_PositionToHero args);
public delegate void PositionToHero_AfterArgs(Params_PositionToHero args);
public delegate void PositionToHero_WithArgs (Action<CameraController,  bool> orig, CameraController self,  bool forceDirect);
public sealed class Params_DoPositionToHero
{
public CameraController self;
public bool forceDirect;
}
public delegate void DoPositionToHero_BeforeArgs(Params_DoPositionToHero args);
public delegate System.Collections.IEnumerator DoPositionToHero_AfterArgs(Params_DoPositionToHero args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator DoPositionToHero_WithArgs (Func<CameraController,  bool, System.Collections.IEnumerator> orig, CameraController self,  bool forceDirect);
public sealed class Params_PositionToHeroFacing
{
public CameraController self;
}
public delegate void PositionToHeroFacing_BeforeArgs(Params_PositionToHeroFacing args);
public delegate void PositionToHeroFacing_AfterArgs(Params_PositionToHeroFacing args);
public delegate void PositionToHeroFacing_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_PositionToHeroFacing_Vector2_bool
{
public CameraController self;
public UnityEngine.Vector2 newPosition;
public bool useXOffset;
}
public delegate void PositionToHeroFacing_Vector2_bool_BeforeArgs(Params_PositionToHeroFacing_Vector2_bool args);
public delegate void PositionToHeroFacing_Vector2_bool_AfterArgs(Params_PositionToHeroFacing_Vector2_bool args);
public delegate void PositionToHeroFacing_Vector2_bool_WithArgs (Action<CameraController,  UnityEngine.Vector2,  bool> orig, CameraController self,  UnityEngine.Vector2 newPosition,  bool useXOffset);
public sealed class Params_GetPositionToHeroFacing
{
public CameraController self;
public UnityEngine.Vector2 newPosition;
public bool useXOffset;
}
public delegate void GetPositionToHeroFacing_BeforeArgs(Params_GetPositionToHeroFacing args);
public delegate UnityEngine.Vector2 GetPositionToHeroFacing_AfterArgs(Params_GetPositionToHeroFacing args, UnityEngine.Vector2 ret);
public delegate UnityEngine.Vector2 GetPositionToHeroFacing_WithArgs (Func<CameraController,  UnityEngine.Vector2,  bool, UnityEngine.Vector2> orig, CameraController self,  UnityEngine.Vector2 newPosition,  bool useXOffset);
public sealed class Params_FadeInFailSafe
{
public CameraController self;
}
public delegate void FadeInFailSafe_BeforeArgs(Params_FadeInFailSafe args);
public delegate System.Collections.IEnumerator FadeInFailSafe_AfterArgs(Params_FadeInFailSafe args, System.Collections.IEnumerator ret);
public delegate System.Collections.IEnumerator FadeInFailSafe_WithArgs (Func<CameraController, System.Collections.IEnumerator> orig, CameraController self);
public sealed class Params_StopFailSafe
{
public CameraController self;
}
public delegate void StopFailSafe_BeforeArgs(Params_StopFailSafe args);
public delegate void StopFailSafe_AfterArgs(Params_StopFailSafe args);
public delegate void StopFailSafe_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_OnLevelUnload
{
public CameraController self;
}
public delegate void OnLevelUnload_BeforeArgs(Params_OnLevelUnload args);
public delegate void OnLevelUnload_AfterArgs(Params_OnLevelUnload args);
public delegate void OnLevelUnload_WithArgs (Action<CameraController> orig, CameraController self);
public sealed class Params_OnDestroy
{
public CameraController self;
}
public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);
public delegate void OnDestroy_AfterArgs(Params_OnDestroy args);
public delegate void OnDestroy_WithArgs (Action<CameraController> orig, CameraController self);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.GameInit_BeforeArgs GameInit
{
add
{

HookHandler._beforeGameInit += value;
HookHandler.HookGameInit();
}
remove => HookHandler._beforeGameInit -= value;
}
public static event Delegates.SceneInit_BeforeArgs SceneInit
{
add
{

HookHandler._beforeSceneInit += value;
HookHandler.HookSceneInit();
}
remove => HookHandler._beforeSceneInit -= value;
}
public static event Delegates.ApplyEffectConfiguration_BeforeArgs ApplyEffectConfiguration
{
add
{

HookHandler._beforeApplyEffectConfiguration += value;
HookHandler.HookApplyEffectConfiguration();
}
remove => HookHandler._beforeApplyEffectConfiguration -= value;
}
public static event Delegates.LateUpdate_BeforeArgs LateUpdate
{
add
{

HookHandler._beforeLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._beforeLateUpdate -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.FreezeInPlace_BeforeArgs FreezeInPlace
{
add
{

HookHandler._beforeFreezeInPlace += value;
HookHandler.HookFreezeInPlace();
}
remove => HookHandler._beforeFreezeInPlace -= value;
}
public static event Delegates.FadeOut_BeforeArgs FadeOut
{
add
{

HookHandler._beforeFadeOut += value;
HookHandler.HookFadeOut();
}
remove => HookHandler._beforeFadeOut -= value;
}
public static event Delegates.FadeSceneIn_BeforeArgs FadeSceneIn
{
add
{

HookHandler._beforeFadeSceneIn += value;
HookHandler.HookFadeSceneIn();
}
remove => HookHandler._beforeFadeSceneIn -= value;
}
public static event Delegates.LockToArea_BeforeArgs LockToArea
{
add
{

HookHandler._beforeLockToArea += value;
HookHandler.HookLockToArea();
}
remove => HookHandler._beforeLockToArea -= value;
}
public static event Delegates.ReleaseLock_BeforeArgs ReleaseLock
{
add
{

HookHandler._beforeReleaseLock += value;
HookHandler.HookReleaseLock();
}
remove => HookHandler._beforeReleaseLock -= value;
}
public static event Delegates.ResetStartTimer_BeforeArgs ResetStartTimer
{
add
{

HookHandler._beforeResetStartTimer += value;
HookHandler.HookResetStartTimer();
}
remove => HookHandler._beforeResetStartTimer -= value;
}
public static event Delegates.SnapTo_BeforeArgs SnapTo
{
add
{

HookHandler._beforeSnapTo += value;
HookHandler.HookSnapTo();
}
remove => HookHandler._beforeSnapTo -= value;
}
public static event Delegates.UpdateTargetDestinationDelta_BeforeArgs UpdateTargetDestinationDelta
{
add
{

HookHandler._beforeUpdateTargetDestinationDelta += value;
HookHandler.HookUpdateTargetDestinationDelta();
}
remove => HookHandler._beforeUpdateTargetDestinationDelta -= value;
}
public static event Delegates.KeepWithinSceneBounds_Vector3_BeforeArgs KeepWithinSceneBounds_Vector3
{
add
{

HookHandler._beforeKeepWithinSceneBounds_Vector3 += value;
HookHandler.HookKeepWithinSceneBounds_Vector3();
}
remove => HookHandler._beforeKeepWithinSceneBounds_Vector3 -= value;
}
public static event Delegates.KeepWithinSceneBounds_Vector2_BeforeArgs KeepWithinSceneBounds_Vector2
{
add
{

HookHandler._beforeKeepWithinSceneBounds_Vector2 += value;
HookHandler.HookKeepWithinSceneBounds_Vector2();
}
remove => HookHandler._beforeKeepWithinSceneBounds_Vector2 -= value;
}
public static event Delegates.IsAtSceneBounds_BeforeArgs IsAtSceneBounds
{
add
{

HookHandler._beforeIsAtSceneBounds += value;
HookHandler.HookIsAtSceneBounds();
}
remove => HookHandler._beforeIsAtSceneBounds -= value;
}
public static event Delegates.IsAtHorizontalSceneBounds_BeforeArgs IsAtHorizontalSceneBounds
{
add
{

HookHandler._beforeIsAtHorizontalSceneBounds += value;
HookHandler.HookIsAtHorizontalSceneBounds();
}
remove => HookHandler._beforeIsAtHorizontalSceneBounds -= value;
}
public static event Delegates.IsTouchingSides_BeforeArgs IsTouchingSides
{
add
{

HookHandler._beforeIsTouchingSides += value;
HookHandler.HookIsTouchingSides();
}
remove => HookHandler._beforeIsTouchingSides -= value;
}
public static event Delegates.KeepWithinLockBounds_BeforeArgs KeepWithinLockBounds
{
add
{

HookHandler._beforeKeepWithinLockBounds += value;
HookHandler.HookKeepWithinLockBounds();
}
remove => HookHandler._beforeKeepWithinLockBounds -= value;
}
public static event Delegates.GetTilemapInfo_BeforeArgs GetTilemapInfo
{
add
{

HookHandler._beforeGetTilemapInfo += value;
HookHandler.HookGetTilemapInfo();
}
remove => HookHandler._beforeGetTilemapInfo -= value;
}
public static event Delegates.PositionToHero_BeforeArgs PositionToHero
{
add
{

HookHandler._beforePositionToHero += value;
HookHandler.HookPositionToHero();
}
remove => HookHandler._beforePositionToHero -= value;
}
public static event Delegates.DoPositionToHero_BeforeArgs DoPositionToHero
{
add
{

HookHandler._beforeDoPositionToHero += value;
HookHandler.HookDoPositionToHero();
}
remove => HookHandler._beforeDoPositionToHero -= value;
}
public static event Delegates.PositionToHeroFacing_BeforeArgs PositionToHeroFacing
{
add
{

HookHandler._beforePositionToHeroFacing += value;
HookHandler.HookPositionToHeroFacing();
}
remove => HookHandler._beforePositionToHeroFacing -= value;
}
public static event Delegates.PositionToHeroFacing_Vector2_bool_BeforeArgs PositionToHeroFacing_Vector2_bool
{
add
{

HookHandler._beforePositionToHeroFacing_Vector2_bool += value;
HookHandler.HookPositionToHeroFacing_Vector2_bool();
}
remove => HookHandler._beforePositionToHeroFacing_Vector2_bool -= value;
}
public static event Delegates.GetPositionToHeroFacing_BeforeArgs GetPositionToHeroFacing
{
add
{

HookHandler._beforeGetPositionToHeroFacing += value;
HookHandler.HookGetPositionToHeroFacing();
}
remove => HookHandler._beforeGetPositionToHeroFacing -= value;
}
public static event Delegates.FadeInFailSafe_BeforeArgs FadeInFailSafe
{
add
{

HookHandler._beforeFadeInFailSafe += value;
HookHandler.HookFadeInFailSafe();
}
remove => HookHandler._beforeFadeInFailSafe -= value;
}
public static event Delegates.StopFailSafe_BeforeArgs StopFailSafe
{
add
{

HookHandler._beforeStopFailSafe += value;
HookHandler.HookStopFailSafe();
}
remove => HookHandler._beforeStopFailSafe -= value;
}
public static event Delegates.OnLevelUnload_BeforeArgs OnLevelUnload
{
add
{

HookHandler._beforeOnLevelUnload += value;
HookHandler.HookOnLevelUnload();
}
remove => HookHandler._beforeOnLevelUnload -= value;
}
public static event Delegates.OnDestroy_BeforeArgs OnDestroy
{
add
{

HookHandler._beforeOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._beforeOnDestroy -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.GameInit_AfterArgs GameInit
{
add
{

HookHandler._afterGameInit += value;
HookHandler.HookGameInit();
}
remove => HookHandler._afterGameInit -= value;
}
public static event Delegates.SceneInit_AfterArgs SceneInit
{
add
{

HookHandler._afterSceneInit += value;
HookHandler.HookSceneInit();
}
remove => HookHandler._afterSceneInit -= value;
}
public static event Delegates.ApplyEffectConfiguration_AfterArgs ApplyEffectConfiguration
{
add
{

HookHandler._afterApplyEffectConfiguration += value;
HookHandler.HookApplyEffectConfiguration();
}
remove => HookHandler._afterApplyEffectConfiguration -= value;
}
public static event Delegates.LateUpdate_AfterArgs LateUpdate
{
add
{

HookHandler._afterLateUpdate += value;
HookHandler.HookLateUpdate();
}
remove => HookHandler._afterLateUpdate -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.FreezeInPlace_AfterArgs FreezeInPlace
{
add
{

HookHandler._afterFreezeInPlace += value;
HookHandler.HookFreezeInPlace();
}
remove => HookHandler._afterFreezeInPlace -= value;
}
public static event Delegates.FadeOut_AfterArgs FadeOut
{
add
{

HookHandler._afterFadeOut += value;
HookHandler.HookFadeOut();
}
remove => HookHandler._afterFadeOut -= value;
}
public static event Delegates.FadeSceneIn_AfterArgs FadeSceneIn
{
add
{

HookHandler._afterFadeSceneIn += value;
HookHandler.HookFadeSceneIn();
}
remove => HookHandler._afterFadeSceneIn -= value;
}
public static event Delegates.LockToArea_AfterArgs LockToArea
{
add
{

HookHandler._afterLockToArea += value;
HookHandler.HookLockToArea();
}
remove => HookHandler._afterLockToArea -= value;
}
public static event Delegates.ReleaseLock_AfterArgs ReleaseLock
{
add
{

HookHandler._afterReleaseLock += value;
HookHandler.HookReleaseLock();
}
remove => HookHandler._afterReleaseLock -= value;
}
public static event Delegates.ResetStartTimer_AfterArgs ResetStartTimer
{
add
{

HookHandler._afterResetStartTimer += value;
HookHandler.HookResetStartTimer();
}
remove => HookHandler._afterResetStartTimer -= value;
}
public static event Delegates.SnapTo_AfterArgs SnapTo
{
add
{

HookHandler._afterSnapTo += value;
HookHandler.HookSnapTo();
}
remove => HookHandler._afterSnapTo -= value;
}
public static event Delegates.UpdateTargetDestinationDelta_AfterArgs UpdateTargetDestinationDelta
{
add
{

HookHandler._afterUpdateTargetDestinationDelta += value;
HookHandler.HookUpdateTargetDestinationDelta();
}
remove => HookHandler._afterUpdateTargetDestinationDelta -= value;
}
public static event Delegates.KeepWithinSceneBounds_Vector3_AfterArgs KeepWithinSceneBounds_Vector3
{
add
{

HookHandler._afterKeepWithinSceneBounds_Vector3 += value;
HookHandler.HookKeepWithinSceneBounds_Vector3();
}
remove => HookHandler._afterKeepWithinSceneBounds_Vector3 -= value;
}
public static event Delegates.KeepWithinSceneBounds_Vector2_AfterArgs KeepWithinSceneBounds_Vector2
{
add
{

HookHandler._afterKeepWithinSceneBounds_Vector2 += value;
HookHandler.HookKeepWithinSceneBounds_Vector2();
}
remove => HookHandler._afterKeepWithinSceneBounds_Vector2 -= value;
}
public static event Delegates.IsAtSceneBounds_AfterArgs IsAtSceneBounds
{
add
{

HookHandler._afterIsAtSceneBounds += value;
HookHandler.HookIsAtSceneBounds();
}
remove => HookHandler._afterIsAtSceneBounds -= value;
}
public static event Delegates.IsAtHorizontalSceneBounds_AfterArgs IsAtHorizontalSceneBounds
{
add
{

HookHandler._afterIsAtHorizontalSceneBounds += value;
HookHandler.HookIsAtHorizontalSceneBounds();
}
remove => HookHandler._afterIsAtHorizontalSceneBounds -= value;
}
public static event Delegates.IsTouchingSides_AfterArgs IsTouchingSides
{
add
{

HookHandler._afterIsTouchingSides += value;
HookHandler.HookIsTouchingSides();
}
remove => HookHandler._afterIsTouchingSides -= value;
}
public static event Delegates.KeepWithinLockBounds_AfterArgs KeepWithinLockBounds
{
add
{

HookHandler._afterKeepWithinLockBounds += value;
HookHandler.HookKeepWithinLockBounds();
}
remove => HookHandler._afterKeepWithinLockBounds -= value;
}
public static event Delegates.GetTilemapInfo_AfterArgs GetTilemapInfo
{
add
{

HookHandler._afterGetTilemapInfo += value;
HookHandler.HookGetTilemapInfo();
}
remove => HookHandler._afterGetTilemapInfo -= value;
}
public static event Delegates.PositionToHero_AfterArgs PositionToHero
{
add
{

HookHandler._afterPositionToHero += value;
HookHandler.HookPositionToHero();
}
remove => HookHandler._afterPositionToHero -= value;
}
public static event Delegates.PositionToHeroFacing_AfterArgs PositionToHeroFacing
{
add
{

HookHandler._afterPositionToHeroFacing += value;
HookHandler.HookPositionToHeroFacing();
}
remove => HookHandler._afterPositionToHeroFacing -= value;
}
public static event Delegates.PositionToHeroFacing_Vector2_bool_AfterArgs PositionToHeroFacing_Vector2_bool
{
add
{

HookHandler._afterPositionToHeroFacing_Vector2_bool += value;
HookHandler.HookPositionToHeroFacing_Vector2_bool();
}
remove => HookHandler._afterPositionToHeroFacing_Vector2_bool -= value;
}
public static event Delegates.GetPositionToHeroFacing_AfterArgs GetPositionToHeroFacing
{
add
{

HookHandler._afterGetPositionToHeroFacing += value;
HookHandler.HookGetPositionToHeroFacing();
}
remove => HookHandler._afterGetPositionToHeroFacing -= value;
}
public static event Delegates.StopFailSafe_AfterArgs StopFailSafe
{
add
{

HookHandler._afterStopFailSafe += value;
HookHandler.HookStopFailSafe();
}
remove => HookHandler._afterStopFailSafe -= value;
}
public static event Delegates.OnLevelUnload_AfterArgs OnLevelUnload
{
add
{

HookHandler._afterOnLevelUnload += value;
HookHandler.HookOnLevelUnload();
}
remove => HookHandler._afterOnLevelUnload -= value;
}
public static event Delegates.OnDestroy_AfterArgs OnDestroy
{
add
{

HookHandler._afterOnDestroy += value;
HookHandler.HookOnDestroy();
}
remove => HookHandler._afterOnDestroy -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CameraController.hook_GameInit GameInit
{
add => On.CameraController.GameInit += value;
remove => On.CameraController.GameInit -= value;
}
public static event On.CameraController.hook_SceneInit SceneInit
{
add => On.CameraController.SceneInit += value;
remove => On.CameraController.SceneInit -= value;
}
public static event On.CameraController.hook_ApplyEffectConfiguration ApplyEffectConfiguration
{
add => On.CameraController.ApplyEffectConfiguration += value;
remove => On.CameraController.ApplyEffectConfiguration -= value;
}
public static event On.CameraController.hook_LateUpdate LateUpdate
{
add => On.CameraController.LateUpdate += value;
remove => On.CameraController.LateUpdate -= value;
}
public static event On.CameraController.hook_OnDisable OnDisable
{
add => On.CameraController.OnDisable += value;
remove => On.CameraController.OnDisable -= value;
}
public static event On.CameraController.hook_FreezeInPlace FreezeInPlace
{
add => On.CameraController.FreezeInPlace += value;
remove => On.CameraController.FreezeInPlace -= value;
}
public static event On.CameraController.hook_FadeOut FadeOut
{
add => On.CameraController.FadeOut += value;
remove => On.CameraController.FadeOut -= value;
}
public static event On.CameraController.hook_FadeSceneIn FadeSceneIn
{
add => On.CameraController.FadeSceneIn += value;
remove => On.CameraController.FadeSceneIn -= value;
}
public static event On.CameraController.hook_LockToArea LockToArea
{
add => On.CameraController.LockToArea += value;
remove => On.CameraController.LockToArea -= value;
}
public static event On.CameraController.hook_ReleaseLock ReleaseLock
{
add => On.CameraController.ReleaseLock += value;
remove => On.CameraController.ReleaseLock -= value;
}
public static event On.CameraController.hook_ResetStartTimer ResetStartTimer
{
add => On.CameraController.ResetStartTimer += value;
remove => On.CameraController.ResetStartTimer -= value;
}
public static event On.CameraController.hook_SnapTo SnapTo
{
add => On.CameraController.SnapTo += value;
remove => On.CameraController.SnapTo -= value;
}
public static event On.CameraController.hook_UpdateTargetDestinationDelta UpdateTargetDestinationDelta
{
add => On.CameraController.UpdateTargetDestinationDelta += value;
remove => On.CameraController.UpdateTargetDestinationDelta -= value;
}
public static event On.CameraController.hook_KeepWithinSceneBounds_Vector3 KeepWithinSceneBounds_Vector3
{
add => On.CameraController.KeepWithinSceneBounds_Vector3 += value;
remove => On.CameraController.KeepWithinSceneBounds_Vector3 -= value;
}
public static event On.CameraController.hook_KeepWithinSceneBounds_Vector2 KeepWithinSceneBounds_Vector2
{
add => On.CameraController.KeepWithinSceneBounds_Vector2 += value;
remove => On.CameraController.KeepWithinSceneBounds_Vector2 -= value;
}
public static event On.CameraController.hook_IsAtSceneBounds IsAtSceneBounds
{
add => On.CameraController.IsAtSceneBounds += value;
remove => On.CameraController.IsAtSceneBounds -= value;
}
public static event On.CameraController.hook_IsAtHorizontalSceneBounds IsAtHorizontalSceneBounds
{
add => On.CameraController.IsAtHorizontalSceneBounds += value;
remove => On.CameraController.IsAtHorizontalSceneBounds -= value;
}
public static event On.CameraController.hook_IsTouchingSides IsTouchingSides
{
add => On.CameraController.IsTouchingSides += value;
remove => On.CameraController.IsTouchingSides -= value;
}
public static event On.CameraController.hook_KeepWithinLockBounds KeepWithinLockBounds
{
add => On.CameraController.KeepWithinLockBounds += value;
remove => On.CameraController.KeepWithinLockBounds -= value;
}
public static event On.CameraController.hook_GetTilemapInfo GetTilemapInfo
{
add => On.CameraController.GetTilemapInfo += value;
remove => On.CameraController.GetTilemapInfo -= value;
}
public static event On.CameraController.hook_PositionToHero PositionToHero
{
add => On.CameraController.PositionToHero += value;
remove => On.CameraController.PositionToHero -= value;
}
public static event On.CameraController.hook_DoPositionToHero DoPositionToHero
{
add => On.CameraController.DoPositionToHero += value;
remove => On.CameraController.DoPositionToHero -= value;
}
public static event On.CameraController.hook_PositionToHeroFacing PositionToHeroFacing
{
add => On.CameraController.PositionToHeroFacing += value;
remove => On.CameraController.PositionToHeroFacing -= value;
}
public static event On.CameraController.hook_PositionToHeroFacing_Vector2_bool PositionToHeroFacing_Vector2_bool
{
add => On.CameraController.PositionToHeroFacing_Vector2_bool += value;
remove => On.CameraController.PositionToHeroFacing_Vector2_bool -= value;
}
public static event On.CameraController.hook_GetPositionToHeroFacing GetPositionToHeroFacing
{
add => On.CameraController.GetPositionToHeroFacing += value;
remove => On.CameraController.GetPositionToHeroFacing -= value;
}
public static event On.CameraController.hook_FadeInFailSafe FadeInFailSafe
{
add => On.CameraController.FadeInFailSafe += value;
remove => On.CameraController.FadeInFailSafe -= value;
}
public static event On.CameraController.hook_StopFailSafe StopFailSafe
{
add => On.CameraController.StopFailSafe += value;
remove => On.CameraController.StopFailSafe -= value;
}
public static event On.CameraController.hook_OnLevelUnload OnLevelUnload
{
add => On.CameraController.OnLevelUnload += value;
remove => On.CameraController.OnLevelUnload -= value;
}
public static event On.CameraController.hook_OnDestroy OnDestroy
{
add => On.CameraController.OnDestroy += value;
remove => On.CameraController.OnDestroy -= value;
}
}

}
