namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for AchievementPopupHandler class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAchievementPopupHandler
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.AchievementPopupHandler.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.AchievementPopupHandler.orig_Awake orig, AchievementPopupHandler self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.AchievementPopupHandler.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.AchievementPopupHandler.orig_Start orig, AchievementPopupHandler self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookSetup()
        {
            if (!HookedList.Contains("Setup"))
            {
                HookedList.Add("Setup");
                On.AchievementPopupHandler.Setup += Setup;
            }
        }

        internal static event Delegates.Setup_BeforeArgs _beforeSetup;
        internal static event Delegates.Setup_NormalArgs _afterSetup;

        private static void Setup(On.AchievementPopupHandler.orig_Setup orig, AchievementPopupHandler self,
            AchievementHandler handler)
        {
            Delegates.Params_Setup @params = new()
            {
                self = self, handler = handler
            };
            _beforeSetup?.Invoke(@params);
            self = @params.self;
            handler = @params.handler;
            orig(self, handler);
            if (_afterSetup != null) _afterSetup.Invoke(@params);
        }

        internal static void HookHandleAchievementEvent()
        {
            if (!HookedList.Contains("HandleAchievementEvent"))
            {
                HookedList.Add("HandleAchievementEvent");
                On.AchievementPopupHandler.HandleAchievementEvent += HandleAchievementEvent;
            }
        }

        internal static event Delegates.HandleAchievementEvent_BeforeArgs _beforeHandleAchievementEvent;
        internal static event Delegates.HandleAchievementEvent_NormalArgs _afterHandleAchievementEvent;

        private static void HandleAchievementEvent(On.AchievementPopupHandler.orig_HandleAchievementEvent orig,
            AchievementPopupHandler self, string key)
        {
            Delegates.Params_HandleAchievementEvent @params = new()
            {
                self = self, key = key
            };
            _beforeHandleAchievementEvent?.Invoke(@params);
            self = @params.self;
            key = @params.key;
            orig(self, key);
            if (_afterHandleAchievementEvent != null) _afterHandleAchievementEvent.Invoke(@params);
        }

        internal static void HookGetPooledPopup()
        {
            if (!HookedList.Contains("GetPooledPopup"))
            {
                HookedList.Add("GetPooledPopup");
                On.AchievementPopupHandler.GetPooledPopup += GetPooledPopup;
            }
        }

        internal static event Delegates.GetPooledPopup_BeforeArgs _beforeGetPooledPopup;
        internal static event Delegates.GetPooledPopup_NormalArgs _afterGetPooledPopup;

        private static AchievementPopup GetPooledPopup(On.AchievementPopupHandler.orig_GetPooledPopup orig,
            AchievementPopupHandler self)
        {
            Delegates.Params_GetPooledPopup @params = new()
            {
                self = self
            };
            _beforeGetPooledPopup?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetPooledPopup != null) retVal = _afterGetPooledPopup.Invoke(@params);
            return retVal;
        }

        internal static void HookDisableAll()
        {
            if (!HookedList.Contains("DisableAll"))
            {
                HookedList.Add("DisableAll");
                On.AchievementPopupHandler.DisableAll += DisableAll;
            }
        }

        internal static event Delegates.DisableAll_BeforeArgs _beforeDisableAll;
        internal static event Delegates.DisableAll_NormalArgs _afterDisableAll;

        private static void DisableAll(On.AchievementPopupHandler.orig_DisableAll orig, AchievementPopupHandler self,
            AchievementPopup sender)
        {
            Delegates.Params_DisableAll @params = new()
            {
                self = self, sender = sender
            };
            _beforeDisableAll?.Invoke(@params);
            self = @params.self;
            sender = @params.sender;
            orig(self, sender);
            if (_afterDisableAll != null) _afterDisableAll.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void DisableAll_BeforeArgs(Params_DisableAll args);

        public delegate void DisableAll_NormalArgs(Params_DisableAll args);

        public delegate void GetPooledPopup_BeforeArgs(Params_GetPooledPopup args);

        public delegate AchievementPopup GetPooledPopup_NormalArgs(Params_GetPooledPopup args);

        public delegate void HandleAchievementEvent_BeforeArgs(Params_HandleAchievementEvent args);

        public delegate void HandleAchievementEvent_NormalArgs(Params_HandleAchievementEvent args);

        public delegate void Setup_BeforeArgs(Params_Setup args);

        public delegate void Setup_NormalArgs(Params_Setup args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public AchievementPopupHandler self;
        }

        public sealed class Params_Start
        {
            public AchievementPopupHandler self;
        }

        public sealed class Params_Setup
        {
            public AchievementHandler handler;
            public AchievementPopupHandler self;
        }

        public sealed class Params_HandleAchievementEvent
        {
            public string key;
            public AchievementPopupHandler self;
        }

        public sealed class Params_GetPooledPopup
        {
            public AchievementPopupHandler self;
        }

        public sealed class Params_DisableAll
        {
            public AchievementPopupHandler self;
            public AchievementPopup sender;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Setup_BeforeArgs Setup
        {
            add
            {
                HookHandler._beforeSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._beforeSetup -= value;
        }

        public static event Delegates.HandleAchievementEvent_BeforeArgs HandleAchievementEvent
        {
            add
            {
                HookHandler._beforeHandleAchievementEvent += value;
                HookHandler.HookHandleAchievementEvent();
            }
            remove => HookHandler._beforeHandleAchievementEvent -= value;
        }

        public static event Delegates.GetPooledPopup_BeforeArgs GetPooledPopup
        {
            add
            {
                HookHandler._beforeGetPooledPopup += value;
                HookHandler.HookGetPooledPopup();
            }
            remove => HookHandler._beforeGetPooledPopup -= value;
        }

        public static event Delegates.DisableAll_BeforeArgs DisableAll
        {
            add
            {
                HookHandler._beforeDisableAll += value;
                HookHandler.HookDisableAll();
            }
            remove => HookHandler._beforeDisableAll -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Setup_NormalArgs Setup
        {
            add
            {
                HookHandler._afterSetup += value;
                HookHandler.HookSetup();
            }
            remove => HookHandler._afterSetup -= value;
        }

        public static event Delegates.HandleAchievementEvent_NormalArgs HandleAchievementEvent
        {
            add
            {
                HookHandler._afterHandleAchievementEvent += value;
                HookHandler.HookHandleAchievementEvent();
            }
            remove => HookHandler._afterHandleAchievementEvent -= value;
        }

        public static event Delegates.GetPooledPopup_NormalArgs GetPooledPopup
        {
            add
            {
                HookHandler._afterGetPooledPopup += value;
                HookHandler.HookGetPooledPopup();
            }
            remove => HookHandler._afterGetPooledPopup -= value;
        }

        public static event Delegates.DisableAll_NormalArgs DisableAll
        {
            add
            {
                HookHandler._afterDisableAll += value;
                HookHandler.HookDisableAll();
            }
            remove => HookHandler._afterDisableAll -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.AchievementPopupHandler.hook_Awake Awake
        {
            add => On.AchievementPopupHandler.Awake += value;
            remove => On.AchievementPopupHandler.Awake -= value;
        }

        public static event On.AchievementPopupHandler.hook_Start Start
        {
            add => On.AchievementPopupHandler.Start += value;
            remove => On.AchievementPopupHandler.Start -= value;
        }

        public static event On.AchievementPopupHandler.hook_Setup Setup
        {
            add => On.AchievementPopupHandler.Setup += value;
            remove => On.AchievementPopupHandler.Setup -= value;
        }

        public static event On.AchievementPopupHandler.hook_HandleAchievementEvent HandleAchievementEvent
        {
            add => On.AchievementPopupHandler.HandleAchievementEvent += value;
            remove => On.AchievementPopupHandler.HandleAchievementEvent -= value;
        }

        public static event On.AchievementPopupHandler.hook_GetPooledPopup GetPooledPopup
        {
            add => On.AchievementPopupHandler.GetPooledPopup += value;
            remove => On.AchievementPopupHandler.GetPooledPopup -= value;
        }

        public static event On.AchievementPopupHandler.hook_DisableAll DisableAll
        {
            add => On.AchievementPopupHandler.DisableAll += value;
            remove => On.AchievementPopupHandler.DisableAll -= value;
        }
    }
}