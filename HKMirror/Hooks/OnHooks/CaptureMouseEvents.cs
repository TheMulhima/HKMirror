using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CaptureMouseEvents class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCaptureMouseEvents
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookOnPointerEnter()
{
if (!HookedList.Contains("OnPointerEnter"))
{
HookedList.Add("OnPointerEnter");
On.CaptureMouseEvents.OnPointerEnter += OnPointerEnter;

}
}
internal static event Delegates.OnPointerEnter_BeforeArgs _beforeOnPointerEnter;
internal static event Delegates.OnPointerEnter_AfterArgs _afterOnPointerEnter;
private static void OnPointerEnter(On.CaptureMouseEvents.orig_OnPointerEnter orig,CaptureMouseEvents self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerEnter @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerEnter != null)
{
foreach (Delegates.OnPointerEnter_BeforeArgs toInvoke in _beforeOnPointerEnter.GetInvocationList())
{
try
{
_beforeOnPointerEnter?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerEnter != null)
{
foreach (Delegates.OnPointerEnter_AfterArgs toInvoke in _afterOnPointerEnter.GetInvocationList())
{
try
{
_afterOnPointerEnter.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnPointerExit()
{
if (!HookedList.Contains("OnPointerExit"))
{
HookedList.Add("OnPointerExit");
On.CaptureMouseEvents.OnPointerExit += OnPointerExit;

}
}
internal static event Delegates.OnPointerExit_BeforeArgs _beforeOnPointerExit;
internal static event Delegates.OnPointerExit_AfterArgs _afterOnPointerExit;
private static void OnPointerExit(On.CaptureMouseEvents.orig_OnPointerExit orig,CaptureMouseEvents self,  UnityEngine.EventSystems.PointerEventData eventData)
{
Delegates.Params_OnPointerExit @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnPointerExit != null)
{
foreach (Delegates.OnPointerExit_BeforeArgs toInvoke in _beforeOnPointerExit.GetInvocationList())
{
try
{
_beforeOnPointerExit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnPointerExit != null)
{
foreach (Delegates.OnPointerExit_AfterArgs toInvoke in _afterOnPointerExit.GetInvocationList())
{
try
{
_afterOnPointerExit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_OnPointerEnter
{
public CaptureMouseEvents self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerEnter_BeforeArgs(Params_OnPointerEnter args);
public delegate void OnPointerEnter_AfterArgs(Params_OnPointerEnter args);
public delegate void OnPointerEnter_WithArgs (Action<CaptureMouseEvents,  UnityEngine.EventSystems.PointerEventData> orig, CaptureMouseEvents self,  UnityEngine.EventSystems.PointerEventData eventData);
public sealed class Params_OnPointerExit
{
public CaptureMouseEvents self;
public UnityEngine.EventSystems.PointerEventData eventData;
}
public delegate void OnPointerExit_BeforeArgs(Params_OnPointerExit args);
public delegate void OnPointerExit_AfterArgs(Params_OnPointerExit args);
public delegate void OnPointerExit_WithArgs (Action<CaptureMouseEvents,  UnityEngine.EventSystems.PointerEventData> orig, CaptureMouseEvents self,  UnityEngine.EventSystems.PointerEventData eventData);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.OnPointerEnter_BeforeArgs OnPointerEnter
{
add
{

HookHandler._beforeOnPointerEnter += value;
HookHandler.HookOnPointerEnter();
}
remove => HookHandler._beforeOnPointerEnter -= value;
}
public static event Delegates.OnPointerExit_BeforeArgs OnPointerExit
{
add
{

HookHandler._beforeOnPointerExit += value;
HookHandler.HookOnPointerExit();
}
remove => HookHandler._beforeOnPointerExit -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.OnPointerEnter_AfterArgs OnPointerEnter
{
add
{

HookHandler._afterOnPointerEnter += value;
HookHandler.HookOnPointerEnter();
}
remove => HookHandler._afterOnPointerEnter -= value;
}
public static event Delegates.OnPointerExit_AfterArgs OnPointerExit
{
add
{

HookHandler._afterOnPointerExit += value;
HookHandler.HookOnPointerExit();
}
remove => HookHandler._afterOnPointerExit -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CaptureMouseEvents.hook_OnPointerEnter OnPointerEnter
{
add => On.CaptureMouseEvents.OnPointerEnter += value;
remove => On.CaptureMouseEvents.OnPointerEnter -= value;
}
public static event On.CaptureMouseEvents.hook_OnPointerExit OnPointerExit
{
add => On.CaptureMouseEvents.OnPointerExit += value;
remove => On.CaptureMouseEvents.OnPointerExit -= value;
}
}

}
