using UnityEngine.EventSystems;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CaptureMouseEvents class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCaptureMouseEvents
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnPointerEnter()
        {
            if (!HookedList.Contains("OnPointerEnter"))
            {
                HookedList.Add("OnPointerEnter");
                On.CaptureMouseEvents.OnPointerEnter += OnPointerEnter;
            }
        }

        internal static event Delegates.OnPointerEnter_BeforeArgs _beforeOnPointerEnter;
        internal static event Delegates.OnPointerEnter_NormalArgs _afterOnPointerEnter;

        private static void OnPointerEnter(On.CaptureMouseEvents.orig_OnPointerEnter orig, CaptureMouseEvents self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerEnter @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerEnter?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerEnter != null) _afterOnPointerEnter.Invoke(@params);
        }

        internal static void HookOnPointerExit()
        {
            if (!HookedList.Contains("OnPointerExit"))
            {
                HookedList.Add("OnPointerExit");
                On.CaptureMouseEvents.OnPointerExit += OnPointerExit;
            }
        }

        internal static event Delegates.OnPointerExit_BeforeArgs _beforeOnPointerExit;
        internal static event Delegates.OnPointerExit_NormalArgs _afterOnPointerExit;

        private static void OnPointerExit(On.CaptureMouseEvents.orig_OnPointerExit orig, CaptureMouseEvents self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerExit @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnPointerExit?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerExit != null) _afterOnPointerExit.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnPointerEnter_BeforeArgs(Params_OnPointerEnter args);

        public delegate void OnPointerEnter_NormalArgs(Params_OnPointerEnter args);

        public delegate void OnPointerExit_BeforeArgs(Params_OnPointerExit args);

        public delegate void OnPointerExit_NormalArgs(Params_OnPointerExit args);

        public sealed class Params_OnPointerEnter
        {
            public PointerEventData eventData;
            public CaptureMouseEvents self;
        }

        public sealed class Params_OnPointerExit
        {
            public PointerEventData eventData;
            public CaptureMouseEvents self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnPointerEnter_BeforeArgs OnPointerEnter
        {
            add
            {
                HookHandler._beforeOnPointerEnter += value;
                HookHandler.HookOnPointerEnter();
            }
            remove => HookHandler._beforeOnPointerEnter -= value;
        }

        public static event Delegates.OnPointerExit_BeforeArgs OnPointerExit
        {
            add
            {
                HookHandler._beforeOnPointerExit += value;
                HookHandler.HookOnPointerExit();
            }
            remove => HookHandler._beforeOnPointerExit -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnPointerEnter_NormalArgs OnPointerEnter
        {
            add
            {
                HookHandler._afterOnPointerEnter += value;
                HookHandler.HookOnPointerEnter();
            }
            remove => HookHandler._afterOnPointerEnter -= value;
        }

        public static event Delegates.OnPointerExit_NormalArgs OnPointerExit
        {
            add
            {
                HookHandler._afterOnPointerExit += value;
                HookHandler.HookOnPointerExit();
            }
            remove => HookHandler._afterOnPointerExit -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.CaptureMouseEvents.hook_OnPointerEnter OnPointerEnter
        {
            add => On.CaptureMouseEvents.OnPointerEnter += value;
            remove => On.CaptureMouseEvents.OnPointerEnter -= value;
        }

        public static event On.CaptureMouseEvents.hook_OnPointerExit OnPointerExit
        {
            add => On.CaptureMouseEvents.OnPointerExit += value;
            remove => On.CaptureMouseEvents.OnPointerExit -= value;
        }
    }
}