using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for HeroAnimationController class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnHeroAnimationController
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_actorState()
        {
            if (!HookedList.Contains("get_actorState"))
            {
                HookedList.Add("get_actorState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_actorState"),
                    get_actorState);
            }
        }

        internal static event Delegates.get_actorState_BeforeArgs _beforeget_actorState;
        internal static event Delegates.get_actorState_NormalArgs _afterget_actorState;

        private static ActorStates get_actorState(Func<HeroAnimationController, ActorStates> orig,
            HeroAnimationController self)
        {
            Delegates.Params_get_actorState @params = new()
            {
                self = self
            };
            _beforeget_actorState?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_actorState != null) retVal = _afterget_actorState.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_actorState()
        {
            if (!HookedList.Contains("set_actorState"))
            {
                HookedList.Add("set_actorState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_actorState"),
                    set_actorState);
            }
        }

        internal static event Delegates.set_actorState_BeforeArgs _beforeset_actorState;
        internal static event Delegates.set_actorState_NormalArgs _afterset_actorState;

        private static void set_actorState(Action<HeroAnimationController, ActorStates> orig,
            HeroAnimationController self, ActorStates value)
        {
            Delegates.Params_set_actorState @params = new()
            {
                self = self, value = value
            };
            _beforeset_actorState?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_actorState != null) _afterset_actorState.Invoke(@params);
        }

        internal static void Hookget_prevActorState()
        {
            if (!HookedList.Contains("get_prevActorState"))
            {
                HookedList.Add("get_prevActorState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_prevActorState"),
                    get_prevActorState);
            }
        }

        internal static event Delegates.get_prevActorState_BeforeArgs _beforeget_prevActorState;
        internal static event Delegates.get_prevActorState_NormalArgs _afterget_prevActorState;

        private static ActorStates get_prevActorState(Func<HeroAnimationController, ActorStates> orig,
            HeroAnimationController self)
        {
            Delegates.Params_get_prevActorState @params = new()
            {
                self = self
            };
            _beforeget_prevActorState?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_prevActorState != null) retVal = _afterget_prevActorState.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_prevActorState()
        {
            if (!HookedList.Contains("set_prevActorState"))
            {
                HookedList.Add("set_prevActorState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_prevActorState"),
                    set_prevActorState);
            }
        }

        internal static event Delegates.set_prevActorState_BeforeArgs _beforeset_prevActorState;
        internal static event Delegates.set_prevActorState_NormalArgs _afterset_prevActorState;

        private static void set_prevActorState(Action<HeroAnimationController, ActorStates> orig,
            HeroAnimationController self, ActorStates value)
        {
            Delegates.Params_set_prevActorState @params = new()
            {
                self = self, value = value
            };
            _beforeset_prevActorState?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_prevActorState != null) _afterset_prevActorState.Invoke(@params);
        }

        internal static void Hookget_stateBeforeControl()
        {
            if (!HookedList.Contains("get_stateBeforeControl"))
            {
                HookedList.Add("get_stateBeforeControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_stateBeforeControl"),
                    get_stateBeforeControl);
            }
        }

        internal static event Delegates.get_stateBeforeControl_BeforeArgs _beforeget_stateBeforeControl;
        internal static event Delegates.get_stateBeforeControl_NormalArgs _afterget_stateBeforeControl;

        private static ActorStates get_stateBeforeControl(Func<HeroAnimationController, ActorStates> orig,
            HeroAnimationController self)
        {
            Delegates.Params_get_stateBeforeControl @params = new()
            {
                self = self
            };
            _beforeget_stateBeforeControl?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_stateBeforeControl != null) retVal = _afterget_stateBeforeControl.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_stateBeforeControl()
        {
            if (!HookedList.Contains("set_stateBeforeControl"))
            {
                HookedList.Add("set_stateBeforeControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_stateBeforeControl"),
                    set_stateBeforeControl);
            }
        }

        internal static event Delegates.set_stateBeforeControl_BeforeArgs _beforeset_stateBeforeControl;
        internal static event Delegates.set_stateBeforeControl_NormalArgs _afterset_stateBeforeControl;

        private static void set_stateBeforeControl(Action<HeroAnimationController, ActorStates> orig,
            HeroAnimationController self, ActorStates value)
        {
            Delegates.Params_set_stateBeforeControl @params = new()
            {
                self = self, value = value
            };
            _beforeset_stateBeforeControl?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_stateBeforeControl != null) _afterset_stateBeforeControl.Invoke(@params);
        }

        internal static void Hookget_controlEnabled()
        {
            if (!HookedList.Contains("get_controlEnabled"))
            {
                HookedList.Add("get_controlEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_controlEnabled"),
                    get_controlEnabled);
            }
        }

        internal static event Delegates.get_controlEnabled_BeforeArgs _beforeget_controlEnabled;
        internal static event Delegates.get_controlEnabled_NormalArgs _afterget_controlEnabled;

        private static bool get_controlEnabled(Func<HeroAnimationController, bool> orig, HeroAnimationController self)
        {
            Delegates.Params_get_controlEnabled @params = new()
            {
                self = self
            };
            _beforeget_controlEnabled?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_controlEnabled != null) retVal = _afterget_controlEnabled.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_controlEnabled()
        {
            if (!HookedList.Contains("set_controlEnabled"))
            {
                HookedList.Add("set_controlEnabled");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_controlEnabled"),
                    set_controlEnabled);
            }
        }

        internal static event Delegates.set_controlEnabled_BeforeArgs _beforeset_controlEnabled;
        internal static event Delegates.set_controlEnabled_NormalArgs _afterset_controlEnabled;

        private static void set_controlEnabled(Action<HeroAnimationController, bool> orig, HeroAnimationController self,
            bool value)
        {
            Delegates.Params_set_controlEnabled @params = new()
            {
                self = self, value = value
            };
            _beforeset_controlEnabled?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_controlEnabled != null) _afterset_controlEnabled.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.HeroAnimationController.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.HeroAnimationController.orig_Awake orig, HeroAnimationController self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.HeroAnimationController.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.HeroAnimationController.orig_Start orig, HeroAnimationController self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.HeroAnimationController.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.HeroAnimationController.orig_Update orig, HeroAnimationController self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookResetAll()
        {
            if (!HookedList.Contains("ResetAll"))
            {
                HookedList.Add("ResetAll");
                On.HeroAnimationController.ResetAll += ResetAll;
            }
        }

        internal static event Delegates.ResetAll_BeforeArgs _beforeResetAll;
        internal static event Delegates.ResetAll_NormalArgs _afterResetAll;

        private static void ResetAll(On.HeroAnimationController.orig_ResetAll orig, HeroAnimationController self)
        {
            Delegates.Params_ResetAll @params = new()
            {
                self = self
            };
            _beforeResetAll?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetAll != null) _afterResetAll.Invoke(@params);
        }

        internal static void HookResetPlays()
        {
            if (!HookedList.Contains("ResetPlays"))
            {
                HookedList.Add("ResetPlays");
                On.HeroAnimationController.ResetPlays += ResetPlays;
            }
        }

        internal static event Delegates.ResetPlays_BeforeArgs _beforeResetPlays;
        internal static event Delegates.ResetPlays_NormalArgs _afterResetPlays;

        private static void ResetPlays(On.HeroAnimationController.orig_ResetPlays orig, HeroAnimationController self)
        {
            Delegates.Params_ResetPlays @params = new()
            {
                self = self
            };
            _beforeResetPlays?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResetPlays != null) _afterResetPlays.Invoke(@params);
        }

        internal static void HookUpdateState()
        {
            if (!HookedList.Contains("UpdateState"))
            {
                HookedList.Add("UpdateState");
                On.HeroAnimationController.UpdateState += UpdateState;
            }
        }

        internal static event Delegates.UpdateState_BeforeArgs _beforeUpdateState;
        internal static event Delegates.UpdateState_NormalArgs _afterUpdateState;

        private static void UpdateState(On.HeroAnimationController.orig_UpdateState orig, HeroAnimationController self,
            ActorStates newState)
        {
            Delegates.Params_UpdateState @params = new()
            {
                self = self, newState = newState
            };
            _beforeUpdateState?.Invoke(@params);
            self = @params.self;
            newState = @params.newState;
            orig(self, newState);
            if (_afterUpdateState != null) _afterUpdateState.Invoke(@params);
        }

        internal static void HookPlayClip()
        {
            if (!HookedList.Contains("PlayClip"))
            {
                HookedList.Add("PlayClip");
                On.HeroAnimationController.PlayClip += PlayClip;
            }
        }

        internal static event Delegates.PlayClip_BeforeArgs _beforePlayClip;
        internal static event Delegates.PlayClip_NormalArgs _afterPlayClip;

        private static void PlayClip(On.HeroAnimationController.orig_PlayClip orig, HeroAnimationController self,
            string clipName)
        {
            Delegates.Params_PlayClip @params = new()
            {
                self = self, clipName = clipName
            };
            _beforePlayClip?.Invoke(@params);
            self = @params.self;
            clipName = @params.clipName;
            orig(self, clipName);
            if (_afterPlayClip != null) _afterPlayClip.Invoke(@params);
        }

        internal static void HookUpdateAnimation()
        {
            if (!HookedList.Contains("UpdateAnimation"))
            {
                HookedList.Add("UpdateAnimation");
                On.HeroAnimationController.UpdateAnimation += UpdateAnimation;
            }
        }

        internal static event Delegates.UpdateAnimation_BeforeArgs _beforeUpdateAnimation;
        internal static event Delegates.UpdateAnimation_NormalArgs _afterUpdateAnimation;

        private static void UpdateAnimation(On.HeroAnimationController.orig_UpdateAnimation orig,
            HeroAnimationController self)
        {
            Delegates.Params_UpdateAnimation @params = new()
            {
                self = self
            };
            _beforeUpdateAnimation?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdateAnimation != null) _afterUpdateAnimation.Invoke(@params);
        }

        internal static void HookCanPlayIdle()
        {
            if (!HookedList.Contains("CanPlayIdle"))
            {
                HookedList.Add("CanPlayIdle");
                On.HeroAnimationController.CanPlayIdle += CanPlayIdle;
            }
        }

        internal static event Delegates.CanPlayIdle_BeforeArgs _beforeCanPlayIdle;
        internal static event Delegates.CanPlayIdle_NormalArgs _afterCanPlayIdle;

        private static bool CanPlayIdle(On.HeroAnimationController.orig_CanPlayIdle orig, HeroAnimationController self)
        {
            Delegates.Params_CanPlayIdle @params = new()
            {
                self = self
            };
            _beforeCanPlayIdle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanPlayIdle != null) retVal = _afterCanPlayIdle.Invoke(@params);
            return retVal;
        }

        internal static void HookCanPlayLookDown()
        {
            if (!HookedList.Contains("CanPlayLookDown"))
            {
                HookedList.Add("CanPlayLookDown");
                On.HeroAnimationController.CanPlayLookDown += CanPlayLookDown;
            }
        }

        internal static event Delegates.CanPlayLookDown_BeforeArgs _beforeCanPlayLookDown;
        internal static event Delegates.CanPlayLookDown_NormalArgs _afterCanPlayLookDown;

        private static bool CanPlayLookDown(On.HeroAnimationController.orig_CanPlayLookDown orig,
            HeroAnimationController self)
        {
            Delegates.Params_CanPlayLookDown @params = new()
            {
                self = self
            };
            _beforeCanPlayLookDown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterCanPlayLookDown != null) retVal = _afterCanPlayLookDown.Invoke(@params);
            return retVal;
        }

        internal static void HookcanPlayTurn()
        {
            if (!HookedList.Contains("canPlayTurn"))
            {
                HookedList.Add("canPlayTurn");
                On.HeroAnimationController.canPlayTurn += canPlayTurn;
            }
        }

        internal static event Delegates.canPlayTurn_BeforeArgs _beforecanPlayTurn;
        internal static event Delegates.canPlayTurn_NormalArgs _aftercanPlayTurn;

        private static bool canPlayTurn(On.HeroAnimationController.orig_canPlayTurn orig, HeroAnimationController self)
        {
            Delegates.Params_canPlayTurn @params = new()
            {
                self = self
            };
            _beforecanPlayTurn?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_aftercanPlayTurn != null) retVal = _aftercanPlayTurn.Invoke(@params);
            return retVal;
        }

        internal static void HookAnimationCompleteDelegate()
        {
            if (!HookedList.Contains("AnimationCompleteDelegate"))
            {
                HookedList.Add("AnimationCompleteDelegate");
                On.HeroAnimationController.AnimationCompleteDelegate += AnimationCompleteDelegate;
            }
        }

        internal static event Delegates.AnimationCompleteDelegate_BeforeArgs _beforeAnimationCompleteDelegate;
        internal static event Delegates.AnimationCompleteDelegate_NormalArgs _afterAnimationCompleteDelegate;

        private static void AnimationCompleteDelegate(On.HeroAnimationController.orig_AnimationCompleteDelegate orig,
            HeroAnimationController self, tk2dSpriteAnimator sprite, tk2dSpriteAnimationClip clip)
        {
            Delegates.Params_AnimationCompleteDelegate @params = new()
            {
                self = self, sprite = sprite, clip = clip
            };
            _beforeAnimationCompleteDelegate?.Invoke(@params);
            self = @params.self;
            sprite = @params.sprite;
            clip = @params.clip;
            orig(self, sprite, clip);
            if (_afterAnimationCompleteDelegate != null) _afterAnimationCompleteDelegate.Invoke(@params);
        }

        internal static void HookPlayIdle()
        {
            if (!HookedList.Contains("PlayIdle"))
            {
                HookedList.Add("PlayIdle");
                On.HeroAnimationController.PlayIdle += PlayIdle;
            }
        }

        internal static event Delegates.PlayIdle_BeforeArgs _beforePlayIdle;
        internal static event Delegates.PlayIdle_NormalArgs _afterPlayIdle;

        private static void PlayIdle(On.HeroAnimationController.orig_PlayIdle orig, HeroAnimationController self)
        {
            Delegates.Params_PlayIdle @params = new()
            {
                self = self
            };
            _beforePlayIdle?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayIdle != null) _afterPlayIdle.Invoke(@params);
        }

        internal static void HookPlayRun()
        {
            if (!HookedList.Contains("PlayRun"))
            {
                HookedList.Add("PlayRun");
                On.HeroAnimationController.PlayRun += PlayRun;
            }
        }

        internal static event Delegates.PlayRun_BeforeArgs _beforePlayRun;
        internal static event Delegates.PlayRun_NormalArgs _afterPlayRun;

        private static void PlayRun(On.HeroAnimationController.orig_PlayRun orig, HeroAnimationController self)
        {
            Delegates.Params_PlayRun @params = new()
            {
                self = self
            };
            _beforePlayRun?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlayRun != null) _afterPlayRun.Invoke(@params);
        }

        internal static void HookPlay()
        {
            if (!HookedList.Contains("Play"))
            {
                HookedList.Add("Play");
                On.HeroAnimationController.Play += Play;
            }
        }

        internal static event Delegates.Play_BeforeArgs _beforePlay;
        internal static event Delegates.Play_NormalArgs _afterPlay;

        private static void Play(On.HeroAnimationController.orig_Play orig, HeroAnimationController self,
            string clipName)
        {
            Delegates.Params_Play @params = new()
            {
                self = self, clipName = clipName
            };
            _beforePlay?.Invoke(@params);
            self = @params.self;
            clipName = @params.clipName;
            orig(self, clipName);
            if (_afterPlay != null) _afterPlay.Invoke(@params);
        }

        internal static void HookPlayFromFrame()
        {
            if (!HookedList.Contains("PlayFromFrame"))
            {
                HookedList.Add("PlayFromFrame");
                On.HeroAnimationController.PlayFromFrame += PlayFromFrame;
            }
        }

        internal static event Delegates.PlayFromFrame_BeforeArgs _beforePlayFromFrame;
        internal static event Delegates.PlayFromFrame_NormalArgs _afterPlayFromFrame;

        private static void PlayFromFrame(On.HeroAnimationController.orig_PlayFromFrame orig,
            HeroAnimationController self, string clipName, int frame)
        {
            Delegates.Params_PlayFromFrame @params = new()
            {
                self = self, clipName = clipName, frame = frame
            };
            _beforePlayFromFrame?.Invoke(@params);
            self = @params.self;
            clipName = @params.clipName;
            frame = @params.frame;
            orig(self, clipName, frame);
            if (_afterPlayFromFrame != null) _afterPlayFromFrame.Invoke(@params);
        }

        internal static void HookStopControl()
        {
            if (!HookedList.Contains("StopControl"))
            {
                HookedList.Add("StopControl");
                On.HeroAnimationController.StopControl += StopControl;
            }
        }

        internal static event Delegates.StopControl_BeforeArgs _beforeStopControl;
        internal static event Delegates.StopControl_NormalArgs _afterStopControl;

        private static void StopControl(On.HeroAnimationController.orig_StopControl orig, HeroAnimationController self)
        {
            Delegates.Params_StopControl @params = new()
            {
                self = self
            };
            _beforeStopControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopControl != null) _afterStopControl.Invoke(@params);
        }

        internal static void HookStartControl()
        {
            if (!HookedList.Contains("StartControl"))
            {
                HookedList.Add("StartControl");
                On.HeroAnimationController.StartControl += StartControl;
            }
        }

        internal static event Delegates.StartControl_BeforeArgs _beforeStartControl;
        internal static event Delegates.StartControl_NormalArgs _afterStartControl;

        private static void StartControl(On.HeroAnimationController.orig_StartControl orig,
            HeroAnimationController self)
        {
            Delegates.Params_StartControl @params = new()
            {
                self = self
            };
            _beforeStartControl?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartControl != null) _afterStartControl.Invoke(@params);
        }

        internal static void HookStartControlWithoutSettingState()
        {
            if (!HookedList.Contains("StartControlWithoutSettingState"))
            {
                HookedList.Add("StartControlWithoutSettingState");
                On.HeroAnimationController.StartControlWithoutSettingState += StartControlWithoutSettingState;
            }
        }

        internal static event Delegates.StartControlWithoutSettingState_BeforeArgs
            _beforeStartControlWithoutSettingState;

        internal static event Delegates.StartControlWithoutSettingState_NormalArgs
            _afterStartControlWithoutSettingState;

        private static void StartControlWithoutSettingState(
            On.HeroAnimationController.orig_StartControlWithoutSettingState orig, HeroAnimationController self)
        {
            Delegates.Params_StartControlWithoutSettingState @params = new()
            {
                self = self
            };
            _beforeStartControlWithoutSettingState?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStartControlWithoutSettingState != null) _afterStartControlWithoutSettingState.Invoke(@params);
        }

        internal static void HookFinishedDash()
        {
            if (!HookedList.Contains("FinishedDash"))
            {
                HookedList.Add("FinishedDash");
                On.HeroAnimationController.FinishedDash += FinishedDash;
            }
        }

        internal static event Delegates.FinishedDash_BeforeArgs _beforeFinishedDash;
        internal static event Delegates.FinishedDash_NormalArgs _afterFinishedDash;

        private static void FinishedDash(On.HeroAnimationController.orig_FinishedDash orig,
            HeroAnimationController self)
        {
            Delegates.Params_FinishedDash @params = new()
            {
                self = self
            };
            _beforeFinishedDash?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterFinishedDash != null) _afterFinishedDash.Invoke(@params);
        }

        internal static void HookStopAttack()
        {
            if (!HookedList.Contains("StopAttack"))
            {
                HookedList.Add("StopAttack");
                On.HeroAnimationController.StopAttack += StopAttack;
            }
        }

        internal static event Delegates.StopAttack_BeforeArgs _beforeStopAttack;
        internal static event Delegates.StopAttack_NormalArgs _afterStopAttack;

        private static void StopAttack(On.HeroAnimationController.orig_StopAttack orig, HeroAnimationController self)
        {
            Delegates.Params_StopAttack @params = new()
            {
                self = self
            };
            _beforeStopAttack?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopAttack != null) _afterStopAttack.Invoke(@params);
        }

        internal static void HookGetCurrentClipDuration()
        {
            if (!HookedList.Contains("GetCurrentClipDuration"))
            {
                HookedList.Add("GetCurrentClipDuration");
                On.HeroAnimationController.GetCurrentClipDuration += GetCurrentClipDuration;
            }
        }

        internal static event Delegates.GetCurrentClipDuration_BeforeArgs _beforeGetCurrentClipDuration;
        internal static event Delegates.GetCurrentClipDuration_NormalArgs _afterGetCurrentClipDuration;

        private static float GetCurrentClipDuration(On.HeroAnimationController.orig_GetCurrentClipDuration orig,
            HeroAnimationController self)
        {
            Delegates.Params_GetCurrentClipDuration @params = new()
            {
                self = self
            };
            _beforeGetCurrentClipDuration?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetCurrentClipDuration != null) retVal = _afterGetCurrentClipDuration.Invoke(@params);
            return retVal;
        }

        internal static void HookGetClipDuration()
        {
            if (!HookedList.Contains("GetClipDuration"))
            {
                HookedList.Add("GetClipDuration");
                On.HeroAnimationController.GetClipDuration += GetClipDuration;
            }
        }

        internal static event Delegates.GetClipDuration_BeforeArgs _beforeGetClipDuration;
        internal static event Delegates.GetClipDuration_NormalArgs _afterGetClipDuration;

        private static float GetClipDuration(On.HeroAnimationController.orig_GetClipDuration orig,
            HeroAnimationController self, string clipName)
        {
            Delegates.Params_GetClipDuration @params = new()
            {
                self = self, clipName = clipName
            };
            _beforeGetClipDuration?.Invoke(@params);
            self = @params.self;
            clipName = @params.clipName;
            var retVal = orig(self, clipName);
            if (_afterGetClipDuration != null) retVal = _afterGetClipDuration.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AnimationCompleteDelegate_BeforeArgs(Params_AnimationCompleteDelegate args);

        public delegate void AnimationCompleteDelegate_NormalArgs(Params_AnimationCompleteDelegate args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void CanPlayIdle_BeforeArgs(Params_CanPlayIdle args);

        public delegate bool CanPlayIdle_NormalArgs(Params_CanPlayIdle args);

        public delegate void CanPlayLookDown_BeforeArgs(Params_CanPlayLookDown args);

        public delegate bool CanPlayLookDown_NormalArgs(Params_CanPlayLookDown args);

        public delegate void canPlayTurn_BeforeArgs(Params_canPlayTurn args);

        public delegate bool canPlayTurn_NormalArgs(Params_canPlayTurn args);

        public delegate void FinishedDash_BeforeArgs(Params_FinishedDash args);

        public delegate void FinishedDash_NormalArgs(Params_FinishedDash args);

        public delegate void get_actorState_BeforeArgs(Params_get_actorState args);

        public delegate ActorStates get_actorState_NormalArgs(Params_get_actorState args);

        public delegate void get_controlEnabled_BeforeArgs(Params_get_controlEnabled args);

        public delegate bool get_controlEnabled_NormalArgs(Params_get_controlEnabled args);

        public delegate void get_prevActorState_BeforeArgs(Params_get_prevActorState args);

        public delegate ActorStates get_prevActorState_NormalArgs(Params_get_prevActorState args);

        public delegate void get_stateBeforeControl_BeforeArgs(Params_get_stateBeforeControl args);

        public delegate ActorStates get_stateBeforeControl_NormalArgs(Params_get_stateBeforeControl args);

        public delegate void GetClipDuration_BeforeArgs(Params_GetClipDuration args);

        public delegate float GetClipDuration_NormalArgs(Params_GetClipDuration args);

        public delegate void GetCurrentClipDuration_BeforeArgs(Params_GetCurrentClipDuration args);

        public delegate float GetCurrentClipDuration_NormalArgs(Params_GetCurrentClipDuration args);

        public delegate void Play_BeforeArgs(Params_Play args);

        public delegate void Play_NormalArgs(Params_Play args);

        public delegate void PlayClip_BeforeArgs(Params_PlayClip args);

        public delegate void PlayClip_NormalArgs(Params_PlayClip args);

        public delegate void PlayFromFrame_BeforeArgs(Params_PlayFromFrame args);

        public delegate void PlayFromFrame_NormalArgs(Params_PlayFromFrame args);

        public delegate void PlayIdle_BeforeArgs(Params_PlayIdle args);

        public delegate void PlayIdle_NormalArgs(Params_PlayIdle args);

        public delegate void PlayRun_BeforeArgs(Params_PlayRun args);

        public delegate void PlayRun_NormalArgs(Params_PlayRun args);

        public delegate void ResetAll_BeforeArgs(Params_ResetAll args);

        public delegate void ResetAll_NormalArgs(Params_ResetAll args);

        public delegate void ResetPlays_BeforeArgs(Params_ResetPlays args);

        public delegate void ResetPlays_NormalArgs(Params_ResetPlays args);

        public delegate void set_actorState_BeforeArgs(Params_set_actorState args);

        public delegate void set_actorState_NormalArgs(Params_set_actorState args);

        public delegate void set_controlEnabled_BeforeArgs(Params_set_controlEnabled args);

        public delegate void set_controlEnabled_NormalArgs(Params_set_controlEnabled args);

        public delegate void set_prevActorState_BeforeArgs(Params_set_prevActorState args);

        public delegate void set_prevActorState_NormalArgs(Params_set_prevActorState args);

        public delegate void set_stateBeforeControl_BeforeArgs(Params_set_stateBeforeControl args);

        public delegate void set_stateBeforeControl_NormalArgs(Params_set_stateBeforeControl args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void StartControl_BeforeArgs(Params_StartControl args);

        public delegate void StartControl_NormalArgs(Params_StartControl args);

        public delegate void StartControlWithoutSettingState_BeforeArgs(Params_StartControlWithoutSettingState args);

        public delegate void StartControlWithoutSettingState_NormalArgs(Params_StartControlWithoutSettingState args);

        public delegate void StopAttack_BeforeArgs(Params_StopAttack args);

        public delegate void StopAttack_NormalArgs(Params_StopAttack args);

        public delegate void StopControl_BeforeArgs(Params_StopControl args);

        public delegate void StopControl_NormalArgs(Params_StopControl args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateAnimation_BeforeArgs(Params_UpdateAnimation args);

        public delegate void UpdateAnimation_NormalArgs(Params_UpdateAnimation args);

        public delegate void UpdateState_BeforeArgs(Params_UpdateState args);

        public delegate void UpdateState_NormalArgs(Params_UpdateState args);

        public sealed class Params_get_actorState
        {
            public HeroAnimationController self;
        }

        public sealed class Params_set_actorState
        {
            public HeroAnimationController self;
            public ActorStates value;
        }

        public sealed class Params_get_prevActorState
        {
            public HeroAnimationController self;
        }

        public sealed class Params_set_prevActorState
        {
            public HeroAnimationController self;
            public ActorStates value;
        }

        public sealed class Params_get_stateBeforeControl
        {
            public HeroAnimationController self;
        }

        public sealed class Params_set_stateBeforeControl
        {
            public HeroAnimationController self;
            public ActorStates value;
        }

        public sealed class Params_get_controlEnabled
        {
            public HeroAnimationController self;
        }

        public sealed class Params_set_controlEnabled
        {
            public HeroAnimationController self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public HeroAnimationController self;
        }

        public sealed class Params_Start
        {
            public HeroAnimationController self;
        }

        public sealed class Params_Update
        {
            public HeroAnimationController self;
        }

        public sealed class Params_ResetAll
        {
            public HeroAnimationController self;
        }

        public sealed class Params_ResetPlays
        {
            public HeroAnimationController self;
        }

        public sealed class Params_UpdateState
        {
            public ActorStates newState;
            public HeroAnimationController self;
        }

        public sealed class Params_PlayClip
        {
            public string clipName;
            public HeroAnimationController self;
        }

        public sealed class Params_UpdateAnimation
        {
            public HeroAnimationController self;
        }

        public sealed class Params_CanPlayIdle
        {
            public HeroAnimationController self;
        }

        public sealed class Params_CanPlayLookDown
        {
            public HeroAnimationController self;
        }

        public sealed class Params_canPlayTurn
        {
            public HeroAnimationController self;
        }

        public sealed class Params_AnimationCompleteDelegate
        {
            public tk2dSpriteAnimationClip clip;
            public HeroAnimationController self;
            public tk2dSpriteAnimator sprite;
        }

        public sealed class Params_PlayIdle
        {
            public HeroAnimationController self;
        }

        public sealed class Params_PlayRun
        {
            public HeroAnimationController self;
        }

        public sealed class Params_Play
        {
            public string clipName;
            public HeroAnimationController self;
        }

        public sealed class Params_PlayFromFrame
        {
            public string clipName;
            public int frame;
            public HeroAnimationController self;
        }

        public sealed class Params_StopControl
        {
            public HeroAnimationController self;
        }

        public sealed class Params_StartControl
        {
            public HeroAnimationController self;
        }

        public sealed class Params_StartControlWithoutSettingState
        {
            public HeroAnimationController self;
        }

        public sealed class Params_FinishedDash
        {
            public HeroAnimationController self;
        }

        public sealed class Params_StopAttack
        {
            public HeroAnimationController self;
        }

        public sealed class Params_GetCurrentClipDuration
        {
            public HeroAnimationController self;
        }

        public sealed class Params_GetClipDuration
        {
            public string clipName;
            public HeroAnimationController self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_actorState_BeforeArgs get_actorState
        {
            add
            {
                HookHandler._beforeget_actorState += value;
                HookHandler.Hookget_actorState();
            }
            remove => HookHandler._beforeget_actorState -= value;
        }

        public static event Delegates.set_actorState_BeforeArgs set_actorState
        {
            add
            {
                HookHandler._beforeset_actorState += value;
                HookHandler.Hookset_actorState();
            }
            remove => HookHandler._beforeset_actorState -= value;
        }

        public static event Delegates.get_prevActorState_BeforeArgs get_prevActorState
        {
            add
            {
                HookHandler._beforeget_prevActorState += value;
                HookHandler.Hookget_prevActorState();
            }
            remove => HookHandler._beforeget_prevActorState -= value;
        }

        public static event Delegates.set_prevActorState_BeforeArgs set_prevActorState
        {
            add
            {
                HookHandler._beforeset_prevActorState += value;
                HookHandler.Hookset_prevActorState();
            }
            remove => HookHandler._beforeset_prevActorState -= value;
        }

        public static event Delegates.get_stateBeforeControl_BeforeArgs get_stateBeforeControl
        {
            add
            {
                HookHandler._beforeget_stateBeforeControl += value;
                HookHandler.Hookget_stateBeforeControl();
            }
            remove => HookHandler._beforeget_stateBeforeControl -= value;
        }

        public static event Delegates.set_stateBeforeControl_BeforeArgs set_stateBeforeControl
        {
            add
            {
                HookHandler._beforeset_stateBeforeControl += value;
                HookHandler.Hookset_stateBeforeControl();
            }
            remove => HookHandler._beforeset_stateBeforeControl -= value;
        }

        public static event Delegates.get_controlEnabled_BeforeArgs get_controlEnabled
        {
            add
            {
                HookHandler._beforeget_controlEnabled += value;
                HookHandler.Hookget_controlEnabled();
            }
            remove => HookHandler._beforeget_controlEnabled -= value;
        }

        public static event Delegates.set_controlEnabled_BeforeArgs set_controlEnabled
        {
            add
            {
                HookHandler._beforeset_controlEnabled += value;
                HookHandler.Hookset_controlEnabled();
            }
            remove => HookHandler._beforeset_controlEnabled -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ResetAll_BeforeArgs ResetAll
        {
            add
            {
                HookHandler._beforeResetAll += value;
                HookHandler.HookResetAll();
            }
            remove => HookHandler._beforeResetAll -= value;
        }

        public static event Delegates.ResetPlays_BeforeArgs ResetPlays
        {
            add
            {
                HookHandler._beforeResetPlays += value;
                HookHandler.HookResetPlays();
            }
            remove => HookHandler._beforeResetPlays -= value;
        }

        public static event Delegates.UpdateState_BeforeArgs UpdateState
        {
            add
            {
                HookHandler._beforeUpdateState += value;
                HookHandler.HookUpdateState();
            }
            remove => HookHandler._beforeUpdateState -= value;
        }

        public static event Delegates.PlayClip_BeforeArgs PlayClip
        {
            add
            {
                HookHandler._beforePlayClip += value;
                HookHandler.HookPlayClip();
            }
            remove => HookHandler._beforePlayClip -= value;
        }

        public static event Delegates.UpdateAnimation_BeforeArgs UpdateAnimation
        {
            add
            {
                HookHandler._beforeUpdateAnimation += value;
                HookHandler.HookUpdateAnimation();
            }
            remove => HookHandler._beforeUpdateAnimation -= value;
        }

        public static event Delegates.CanPlayIdle_BeforeArgs CanPlayIdle
        {
            add
            {
                HookHandler._beforeCanPlayIdle += value;
                HookHandler.HookCanPlayIdle();
            }
            remove => HookHandler._beforeCanPlayIdle -= value;
        }

        public static event Delegates.CanPlayLookDown_BeforeArgs CanPlayLookDown
        {
            add
            {
                HookHandler._beforeCanPlayLookDown += value;
                HookHandler.HookCanPlayLookDown();
            }
            remove => HookHandler._beforeCanPlayLookDown -= value;
        }

        public static event Delegates.canPlayTurn_BeforeArgs canPlayTurn
        {
            add
            {
                HookHandler._beforecanPlayTurn += value;
                HookHandler.HookcanPlayTurn();
            }
            remove => HookHandler._beforecanPlayTurn -= value;
        }

        public static event Delegates.AnimationCompleteDelegate_BeforeArgs AnimationCompleteDelegate
        {
            add
            {
                HookHandler._beforeAnimationCompleteDelegate += value;
                HookHandler.HookAnimationCompleteDelegate();
            }
            remove => HookHandler._beforeAnimationCompleteDelegate -= value;
        }

        public static event Delegates.PlayIdle_BeforeArgs PlayIdle
        {
            add
            {
                HookHandler._beforePlayIdle += value;
                HookHandler.HookPlayIdle();
            }
            remove => HookHandler._beforePlayIdle -= value;
        }

        public static event Delegates.PlayRun_BeforeArgs PlayRun
        {
            add
            {
                HookHandler._beforePlayRun += value;
                HookHandler.HookPlayRun();
            }
            remove => HookHandler._beforePlayRun -= value;
        }

        public static event Delegates.Play_BeforeArgs Play
        {
            add
            {
                HookHandler._beforePlay += value;
                HookHandler.HookPlay();
            }
            remove => HookHandler._beforePlay -= value;
        }

        public static event Delegates.PlayFromFrame_BeforeArgs PlayFromFrame
        {
            add
            {
                HookHandler._beforePlayFromFrame += value;
                HookHandler.HookPlayFromFrame();
            }
            remove => HookHandler._beforePlayFromFrame -= value;
        }

        public static event Delegates.StopControl_BeforeArgs StopControl
        {
            add
            {
                HookHandler._beforeStopControl += value;
                HookHandler.HookStopControl();
            }
            remove => HookHandler._beforeStopControl -= value;
        }

        public static event Delegates.StartControl_BeforeArgs StartControl
        {
            add
            {
                HookHandler._beforeStartControl += value;
                HookHandler.HookStartControl();
            }
            remove => HookHandler._beforeStartControl -= value;
        }

        public static event Delegates.StartControlWithoutSettingState_BeforeArgs StartControlWithoutSettingState
        {
            add
            {
                HookHandler._beforeStartControlWithoutSettingState += value;
                HookHandler.HookStartControlWithoutSettingState();
            }
            remove => HookHandler._beforeStartControlWithoutSettingState -= value;
        }

        public static event Delegates.FinishedDash_BeforeArgs FinishedDash
        {
            add
            {
                HookHandler._beforeFinishedDash += value;
                HookHandler.HookFinishedDash();
            }
            remove => HookHandler._beforeFinishedDash -= value;
        }

        public static event Delegates.StopAttack_BeforeArgs StopAttack
        {
            add
            {
                HookHandler._beforeStopAttack += value;
                HookHandler.HookStopAttack();
            }
            remove => HookHandler._beforeStopAttack -= value;
        }

        public static event Delegates.GetCurrentClipDuration_BeforeArgs GetCurrentClipDuration
        {
            add
            {
                HookHandler._beforeGetCurrentClipDuration += value;
                HookHandler.HookGetCurrentClipDuration();
            }
            remove => HookHandler._beforeGetCurrentClipDuration -= value;
        }

        public static event Delegates.GetClipDuration_BeforeArgs GetClipDuration
        {
            add
            {
                HookHandler._beforeGetClipDuration += value;
                HookHandler.HookGetClipDuration();
            }
            remove => HookHandler._beforeGetClipDuration -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_actorState_NormalArgs get_actorState
        {
            add
            {
                HookHandler._afterget_actorState += value;
                HookHandler.Hookget_actorState();
            }
            remove => HookHandler._afterget_actorState -= value;
        }

        public static event Delegates.set_actorState_NormalArgs set_actorState
        {
            add
            {
                HookHandler._afterset_actorState += value;
                HookHandler.Hookset_actorState();
            }
            remove => HookHandler._afterset_actorState -= value;
        }

        public static event Delegates.get_prevActorState_NormalArgs get_prevActorState
        {
            add
            {
                HookHandler._afterget_prevActorState += value;
                HookHandler.Hookget_prevActorState();
            }
            remove => HookHandler._afterget_prevActorState -= value;
        }

        public static event Delegates.set_prevActorState_NormalArgs set_prevActorState
        {
            add
            {
                HookHandler._afterset_prevActorState += value;
                HookHandler.Hookset_prevActorState();
            }
            remove => HookHandler._afterset_prevActorState -= value;
        }

        public static event Delegates.get_stateBeforeControl_NormalArgs get_stateBeforeControl
        {
            add
            {
                HookHandler._afterget_stateBeforeControl += value;
                HookHandler.Hookget_stateBeforeControl();
            }
            remove => HookHandler._afterget_stateBeforeControl -= value;
        }

        public static event Delegates.set_stateBeforeControl_NormalArgs set_stateBeforeControl
        {
            add
            {
                HookHandler._afterset_stateBeforeControl += value;
                HookHandler.Hookset_stateBeforeControl();
            }
            remove => HookHandler._afterset_stateBeforeControl -= value;
        }

        public static event Delegates.get_controlEnabled_NormalArgs get_controlEnabled
        {
            add
            {
                HookHandler._afterget_controlEnabled += value;
                HookHandler.Hookget_controlEnabled();
            }
            remove => HookHandler._afterget_controlEnabled -= value;
        }

        public static event Delegates.set_controlEnabled_NormalArgs set_controlEnabled
        {
            add
            {
                HookHandler._afterset_controlEnabled += value;
                HookHandler.Hookset_controlEnabled();
            }
            remove => HookHandler._afterset_controlEnabled -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ResetAll_NormalArgs ResetAll
        {
            add
            {
                HookHandler._afterResetAll += value;
                HookHandler.HookResetAll();
            }
            remove => HookHandler._afterResetAll -= value;
        }

        public static event Delegates.ResetPlays_NormalArgs ResetPlays
        {
            add
            {
                HookHandler._afterResetPlays += value;
                HookHandler.HookResetPlays();
            }
            remove => HookHandler._afterResetPlays -= value;
        }

        public static event Delegates.UpdateState_NormalArgs UpdateState
        {
            add
            {
                HookHandler._afterUpdateState += value;
                HookHandler.HookUpdateState();
            }
            remove => HookHandler._afterUpdateState -= value;
        }

        public static event Delegates.PlayClip_NormalArgs PlayClip
        {
            add
            {
                HookHandler._afterPlayClip += value;
                HookHandler.HookPlayClip();
            }
            remove => HookHandler._afterPlayClip -= value;
        }

        public static event Delegates.UpdateAnimation_NormalArgs UpdateAnimation
        {
            add
            {
                HookHandler._afterUpdateAnimation += value;
                HookHandler.HookUpdateAnimation();
            }
            remove => HookHandler._afterUpdateAnimation -= value;
        }

        public static event Delegates.CanPlayIdle_NormalArgs CanPlayIdle
        {
            add
            {
                HookHandler._afterCanPlayIdle += value;
                HookHandler.HookCanPlayIdle();
            }
            remove => HookHandler._afterCanPlayIdle -= value;
        }

        public static event Delegates.CanPlayLookDown_NormalArgs CanPlayLookDown
        {
            add
            {
                HookHandler._afterCanPlayLookDown += value;
                HookHandler.HookCanPlayLookDown();
            }
            remove => HookHandler._afterCanPlayLookDown -= value;
        }

        public static event Delegates.canPlayTurn_NormalArgs canPlayTurn
        {
            add
            {
                HookHandler._aftercanPlayTurn += value;
                HookHandler.HookcanPlayTurn();
            }
            remove => HookHandler._aftercanPlayTurn -= value;
        }

        public static event Delegates.AnimationCompleteDelegate_NormalArgs AnimationCompleteDelegate
        {
            add
            {
                HookHandler._afterAnimationCompleteDelegate += value;
                HookHandler.HookAnimationCompleteDelegate();
            }
            remove => HookHandler._afterAnimationCompleteDelegate -= value;
        }

        public static event Delegates.PlayIdle_NormalArgs PlayIdle
        {
            add
            {
                HookHandler._afterPlayIdle += value;
                HookHandler.HookPlayIdle();
            }
            remove => HookHandler._afterPlayIdle -= value;
        }

        public static event Delegates.PlayRun_NormalArgs PlayRun
        {
            add
            {
                HookHandler._afterPlayRun += value;
                HookHandler.HookPlayRun();
            }
            remove => HookHandler._afterPlayRun -= value;
        }

        public static event Delegates.Play_NormalArgs Play
        {
            add
            {
                HookHandler._afterPlay += value;
                HookHandler.HookPlay();
            }
            remove => HookHandler._afterPlay -= value;
        }

        public static event Delegates.PlayFromFrame_NormalArgs PlayFromFrame
        {
            add
            {
                HookHandler._afterPlayFromFrame += value;
                HookHandler.HookPlayFromFrame();
            }
            remove => HookHandler._afterPlayFromFrame -= value;
        }

        public static event Delegates.StopControl_NormalArgs StopControl
        {
            add
            {
                HookHandler._afterStopControl += value;
                HookHandler.HookStopControl();
            }
            remove => HookHandler._afterStopControl -= value;
        }

        public static event Delegates.StartControl_NormalArgs StartControl
        {
            add
            {
                HookHandler._afterStartControl += value;
                HookHandler.HookStartControl();
            }
            remove => HookHandler._afterStartControl -= value;
        }

        public static event Delegates.StartControlWithoutSettingState_NormalArgs StartControlWithoutSettingState
        {
            add
            {
                HookHandler._afterStartControlWithoutSettingState += value;
                HookHandler.HookStartControlWithoutSettingState();
            }
            remove => HookHandler._afterStartControlWithoutSettingState -= value;
        }

        public static event Delegates.FinishedDash_NormalArgs FinishedDash
        {
            add
            {
                HookHandler._afterFinishedDash += value;
                HookHandler.HookFinishedDash();
            }
            remove => HookHandler._afterFinishedDash -= value;
        }

        public static event Delegates.StopAttack_NormalArgs StopAttack
        {
            add
            {
                HookHandler._afterStopAttack += value;
                HookHandler.HookStopAttack();
            }
            remove => HookHandler._afterStopAttack -= value;
        }

        public static event Delegates.GetCurrentClipDuration_NormalArgs GetCurrentClipDuration
        {
            add
            {
                HookHandler._afterGetCurrentClipDuration += value;
                HookHandler.HookGetCurrentClipDuration();
            }
            remove => HookHandler._afterGetCurrentClipDuration -= value;
        }

        public static event Delegates.GetClipDuration_NormalArgs GetClipDuration
        {
            add
            {
                HookHandler._afterGetClipDuration += value;
                HookHandler.HookGetClipDuration();
            }
            remove => HookHandler._afterGetClipDuration -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_actorState_NormalArgs get_actorState
        {
            add => HookEndpointManager.Add<Delegates.get_actorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_actorState"), value);
            remove => HookEndpointManager.Remove<Delegates.get_actorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_actorState"), value);
        }

        public static event Delegates.set_actorState_NormalArgs set_actorState
        {
            add => HookEndpointManager.Add<Delegates.set_actorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_actorState"), value);
            remove => HookEndpointManager.Remove<Delegates.set_actorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_actorState"), value);
        }

        public static event Delegates.get_prevActorState_NormalArgs get_prevActorState
        {
            add => HookEndpointManager.Add<Delegates.get_prevActorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_prevActorState"), value);
            remove => HookEndpointManager.Remove<Delegates.get_prevActorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_prevActorState"), value);
        }

        public static event Delegates.set_prevActorState_NormalArgs set_prevActorState
        {
            add => HookEndpointManager.Add<Delegates.set_prevActorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_prevActorState"), value);
            remove => HookEndpointManager.Remove<Delegates.set_prevActorState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_prevActorState"), value);
        }

        public static event Delegates.get_stateBeforeControl_NormalArgs get_stateBeforeControl
        {
            add => HookEndpointManager.Add<Delegates.get_stateBeforeControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_stateBeforeControl"), value);
            remove => HookEndpointManager.Remove<Delegates.get_stateBeforeControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_stateBeforeControl"), value);
        }

        public static event Delegates.set_stateBeforeControl_NormalArgs set_stateBeforeControl
        {
            add => HookEndpointManager.Add<Delegates.set_stateBeforeControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_stateBeforeControl"), value);
            remove => HookEndpointManager.Remove<Delegates.set_stateBeforeControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_stateBeforeControl"), value);
        }

        public static event Delegates.get_controlEnabled_NormalArgs get_controlEnabled
        {
            add => HookEndpointManager.Add<Delegates.get_controlEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_controlEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.get_controlEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "get_controlEnabled"), value);
        }

        public static event Delegates.set_controlEnabled_NormalArgs set_controlEnabled
        {
            add => HookEndpointManager.Add<Delegates.set_controlEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_controlEnabled"), value);
            remove => HookEndpointManager.Remove<Delegates.set_controlEnabled_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HeroAnimationController), "set_controlEnabled"), value);
        }

        public static event On.HeroAnimationController.hook_Awake Awake
        {
            add => On.HeroAnimationController.Awake += value;
            remove => On.HeroAnimationController.Awake -= value;
        }

        public static event On.HeroAnimationController.hook_Start Start
        {
            add => On.HeroAnimationController.Start += value;
            remove => On.HeroAnimationController.Start -= value;
        }

        public static event On.HeroAnimationController.hook_Update Update
        {
            add => On.HeroAnimationController.Update += value;
            remove => On.HeroAnimationController.Update -= value;
        }

        public static event On.HeroAnimationController.hook_ResetAll ResetAll
        {
            add => On.HeroAnimationController.ResetAll += value;
            remove => On.HeroAnimationController.ResetAll -= value;
        }

        public static event On.HeroAnimationController.hook_ResetPlays ResetPlays
        {
            add => On.HeroAnimationController.ResetPlays += value;
            remove => On.HeroAnimationController.ResetPlays -= value;
        }

        public static event On.HeroAnimationController.hook_UpdateState UpdateState
        {
            add => On.HeroAnimationController.UpdateState += value;
            remove => On.HeroAnimationController.UpdateState -= value;
        }

        public static event On.HeroAnimationController.hook_PlayClip PlayClip
        {
            add => On.HeroAnimationController.PlayClip += value;
            remove => On.HeroAnimationController.PlayClip -= value;
        }

        public static event On.HeroAnimationController.hook_UpdateAnimation UpdateAnimation
        {
            add => On.HeroAnimationController.UpdateAnimation += value;
            remove => On.HeroAnimationController.UpdateAnimation -= value;
        }

        public static event On.HeroAnimationController.hook_CanPlayIdle CanPlayIdle
        {
            add => On.HeroAnimationController.CanPlayIdle += value;
            remove => On.HeroAnimationController.CanPlayIdle -= value;
        }

        public static event On.HeroAnimationController.hook_CanPlayLookDown CanPlayLookDown
        {
            add => On.HeroAnimationController.CanPlayLookDown += value;
            remove => On.HeroAnimationController.CanPlayLookDown -= value;
        }

        public static event On.HeroAnimationController.hook_canPlayTurn canPlayTurn
        {
            add => On.HeroAnimationController.canPlayTurn += value;
            remove => On.HeroAnimationController.canPlayTurn -= value;
        }

        public static event On.HeroAnimationController.hook_AnimationCompleteDelegate AnimationCompleteDelegate
        {
            add => On.HeroAnimationController.AnimationCompleteDelegate += value;
            remove => On.HeroAnimationController.AnimationCompleteDelegate -= value;
        }

        public static event On.HeroAnimationController.hook_PlayIdle PlayIdle
        {
            add => On.HeroAnimationController.PlayIdle += value;
            remove => On.HeroAnimationController.PlayIdle -= value;
        }

        public static event On.HeroAnimationController.hook_PlayRun PlayRun
        {
            add => On.HeroAnimationController.PlayRun += value;
            remove => On.HeroAnimationController.PlayRun -= value;
        }

        public static event On.HeroAnimationController.hook_Play Play
        {
            add => On.HeroAnimationController.Play += value;
            remove => On.HeroAnimationController.Play -= value;
        }

        public static event On.HeroAnimationController.hook_PlayFromFrame PlayFromFrame
        {
            add => On.HeroAnimationController.PlayFromFrame += value;
            remove => On.HeroAnimationController.PlayFromFrame -= value;
        }

        public static event On.HeroAnimationController.hook_StopControl StopControl
        {
            add => On.HeroAnimationController.StopControl += value;
            remove => On.HeroAnimationController.StopControl -= value;
        }

        public static event On.HeroAnimationController.hook_StartControl StartControl
        {
            add => On.HeroAnimationController.StartControl += value;
            remove => On.HeroAnimationController.StartControl -= value;
        }

        public static event On.HeroAnimationController.hook_StartControlWithoutSettingState
            StartControlWithoutSettingState
            {
                add => On.HeroAnimationController.StartControlWithoutSettingState += value;
                remove => On.HeroAnimationController.StartControlWithoutSettingState -= value;
            }

        public static event On.HeroAnimationController.hook_FinishedDash FinishedDash
        {
            add => On.HeroAnimationController.FinishedDash += value;
            remove => On.HeroAnimationController.FinishedDash -= value;
        }

        public static event On.HeroAnimationController.hook_StopAttack StopAttack
        {
            add => On.HeroAnimationController.StopAttack += value;
            remove => On.HeroAnimationController.StopAttack -= value;
        }

        public static event On.HeroAnimationController.hook_GetCurrentClipDuration GetCurrentClipDuration
        {
            add => On.HeroAnimationController.GetCurrentClipDuration += value;
            remove => On.HeroAnimationController.GetCurrentClipDuration -= value;
        }

        public static event On.HeroAnimationController.hook_GetClipDuration GetClipDuration
        {
            add => On.HeroAnimationController.GetClipDuration += value;
            remove => On.HeroAnimationController.GetClipDuration -= value;
        }
    }
}