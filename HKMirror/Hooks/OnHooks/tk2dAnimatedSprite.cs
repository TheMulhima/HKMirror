using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for tk2dAnimatedSprite class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class Ontk2dAnimatedSprite
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Animator()
        {
            if (!HookedList.Contains("get_Animator"))
            {
                HookedList.Add("get_Animator");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Animator"), get_Animator);
            }
        }

        internal static event Delegates.get_Animator_BeforeArgs _beforeget_Animator;
        internal static event Delegates.get_Animator_NormalArgs _afterget_Animator;

        private static tk2dSpriteAnimator get_Animator(Func<tk2dAnimatedSprite, tk2dSpriteAnimator> orig,
            tk2dAnimatedSprite self)
        {
            Delegates.Params_get_Animator @params = new()
            {
                self = self
            };
            _beforeget_Animator?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Animator != null) retVal = _afterget_Animator.Invoke(@params);
            return retVal;
        }

        internal static void HookCheckAddAnimatorInternal()
        {
            if (!HookedList.Contains("CheckAddAnimatorInternal"))
            {
                HookedList.Add("CheckAddAnimatorInternal");
                On.tk2dAnimatedSprite.CheckAddAnimatorInternal += CheckAddAnimatorInternal;
            }
        }

        internal static event Delegates.CheckAddAnimatorInternal_BeforeArgs _beforeCheckAddAnimatorInternal;
        internal static event Delegates.CheckAddAnimatorInternal_NormalArgs _afterCheckAddAnimatorInternal;

        private static void CheckAddAnimatorInternal(On.tk2dAnimatedSprite.orig_CheckAddAnimatorInternal orig,
            tk2dAnimatedSprite self)
        {
            Delegates.Params_CheckAddAnimatorInternal @params = new()
            {
                self = self
            };
            _beforeCheckAddAnimatorInternal?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterCheckAddAnimatorInternal != null) _afterCheckAddAnimatorInternal.Invoke(@params);
        }

        internal static void HookNeedBoxCollider()
        {
            if (!HookedList.Contains("NeedBoxCollider"))
            {
                HookedList.Add("NeedBoxCollider");
                On.tk2dAnimatedSprite.NeedBoxCollider += NeedBoxCollider;
            }
        }

        internal static event Delegates.NeedBoxCollider_BeforeArgs _beforeNeedBoxCollider;
        internal static event Delegates.NeedBoxCollider_NormalArgs _afterNeedBoxCollider;

        private static bool NeedBoxCollider(On.tk2dAnimatedSprite.orig_NeedBoxCollider orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_NeedBoxCollider @params = new()
            {
                self = self
            };
            _beforeNeedBoxCollider?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterNeedBoxCollider != null) retVal = _afterNeedBoxCollider.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Library()
        {
            if (!HookedList.Contains("get_Library"))
            {
                HookedList.Add("get_Library");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Library"), get_Library);
            }
        }

        internal static event Delegates.get_Library_BeforeArgs _beforeget_Library;
        internal static event Delegates.get_Library_NormalArgs _afterget_Library;

        private static tk2dSpriteAnimation get_Library(Func<tk2dAnimatedSprite, tk2dSpriteAnimation> orig,
            tk2dAnimatedSprite self)
        {
            Delegates.Params_get_Library @params = new()
            {
                self = self
            };
            _beforeget_Library?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Library != null) retVal = _afterget_Library.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Library()
        {
            if (!HookedList.Contains("set_Library"))
            {
                HookedList.Add("set_Library");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_Library"), set_Library);
            }
        }

        internal static event Delegates.set_Library_BeforeArgs _beforeset_Library;
        internal static event Delegates.set_Library_NormalArgs _afterset_Library;

        private static void set_Library(Action<tk2dAnimatedSprite, tk2dSpriteAnimation> orig, tk2dAnimatedSprite self,
            tk2dSpriteAnimation value)
        {
            Delegates.Params_set_Library @params = new()
            {
                self = self, value = value
            };
            _beforeset_Library?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Library != null) _afterset_Library.Invoke(@params);
        }

        internal static void Hookget_DefaultClipId()
        {
            if (!HookedList.Contains("get_DefaultClipId"))
            {
                HookedList.Add("get_DefaultClipId");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_DefaultClipId"),
                    get_DefaultClipId);
            }
        }

        internal static event Delegates.get_DefaultClipId_BeforeArgs _beforeget_DefaultClipId;
        internal static event Delegates.get_DefaultClipId_NormalArgs _afterget_DefaultClipId;

        private static int get_DefaultClipId(Func<tk2dAnimatedSprite, int> orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_get_DefaultClipId @params = new()
            {
                self = self
            };
            _beforeget_DefaultClipId?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DefaultClipId != null) retVal = _afterget_DefaultClipId.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DefaultClipId()
        {
            if (!HookedList.Contains("set_DefaultClipId"))
            {
                HookedList.Add("set_DefaultClipId");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_DefaultClipId"),
                    set_DefaultClipId);
            }
        }

        internal static event Delegates.set_DefaultClipId_BeforeArgs _beforeset_DefaultClipId;
        internal static event Delegates.set_DefaultClipId_NormalArgs _afterset_DefaultClipId;

        private static void set_DefaultClipId(Action<tk2dAnimatedSprite, int> orig, tk2dAnimatedSprite self, int value)
        {
            Delegates.Params_set_DefaultClipId @params = new()
            {
                self = self, value = value
            };
            _beforeset_DefaultClipId?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DefaultClipId != null) _afterset_DefaultClipId.Invoke(@params);
        }

        internal static void Hookget_g_paused()
        {
            if (!HookedList.Contains("get_g_paused"))
            {
                HookedList.Add("get_g_paused");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_g_paused", false),
                    get_g_paused);
            }
        }

        internal static event Delegates.get_g_paused_BeforeArgs _beforeget_g_paused;
        internal static event Delegates.get_g_paused_NormalArgs _afterget_g_paused;

        private static bool get_g_paused(Func<bool> orig)
        {
            _beforeget_g_paused?.Invoke();
            var retVal = orig();
            if (_afterget_g_paused != null) retVal = _afterget_g_paused.Invoke();
            return retVal;
        }

        internal static void Hookset_g_paused()
        {
            if (!HookedList.Contains("set_g_paused"))
            {
                HookedList.Add("set_g_paused");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_g_paused", false),
                    set_g_paused);
            }
        }

        internal static event Delegates.set_g_paused_BeforeArgs _beforeset_g_paused;
        internal static event Delegates.set_g_paused_NormalArgs _afterset_g_paused;

        private static void set_g_paused(Action<bool> orig, bool value)
        {
            Delegates.Params_set_g_paused @params = new()
            {
                value = value
            };
            _beforeset_g_paused?.Invoke(@params);
            value = @params.value;
            orig(value);
            if (_afterset_g_paused != null) _afterset_g_paused.Invoke(@params);
        }

        internal static void Hookget_Paused()
        {
            if (!HookedList.Contains("get_Paused"))
            {
                HookedList.Add("get_Paused");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Paused"), get_Paused);
            }
        }

        internal static event Delegates.get_Paused_BeforeArgs _beforeget_Paused;
        internal static event Delegates.get_Paused_NormalArgs _afterget_Paused;

        private static bool get_Paused(Func<tk2dAnimatedSprite, bool> orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_get_Paused @params = new()
            {
                self = self
            };
            _beforeget_Paused?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Paused != null) retVal = _afterget_Paused.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Paused()
        {
            if (!HookedList.Contains("set_Paused"))
            {
                HookedList.Add("set_Paused");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_Paused"), set_Paused);
            }
        }

        internal static event Delegates.set_Paused_BeforeArgs _beforeset_Paused;
        internal static event Delegates.set_Paused_NormalArgs _afterset_Paused;

        private static void set_Paused(Action<tk2dAnimatedSprite, bool> orig, tk2dAnimatedSprite self, bool value)
        {
            Delegates.Params_set_Paused @params = new()
            {
                self = self, value = value
            };
            _beforeset_Paused?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Paused != null) _afterset_Paused.Invoke(@params);
        }

        internal static void HookProxyCompletedHandler()
        {
            if (!HookedList.Contains("ProxyCompletedHandler"))
            {
                HookedList.Add("ProxyCompletedHandler");
                On.tk2dAnimatedSprite.ProxyCompletedHandler += ProxyCompletedHandler;
            }
        }

        internal static event Delegates.ProxyCompletedHandler_BeforeArgs _beforeProxyCompletedHandler;
        internal static event Delegates.ProxyCompletedHandler_NormalArgs _afterProxyCompletedHandler;

        private static void ProxyCompletedHandler(On.tk2dAnimatedSprite.orig_ProxyCompletedHandler orig,
            tk2dAnimatedSprite self, tk2dSpriteAnimator anim, tk2dSpriteAnimationClip clip)
        {
            Delegates.Params_ProxyCompletedHandler @params = new()
            {
                self = self, anim = anim, clip = clip
            };
            _beforeProxyCompletedHandler?.Invoke(@params);
            self = @params.self;
            anim = @params.anim;
            clip = @params.clip;
            orig(self, anim, clip);
            if (_afterProxyCompletedHandler != null) _afterProxyCompletedHandler.Invoke(@params);
        }

        internal static void HookProxyEventTriggeredHandler()
        {
            if (!HookedList.Contains("ProxyEventTriggeredHandler"))
            {
                HookedList.Add("ProxyEventTriggeredHandler");
                On.tk2dAnimatedSprite.ProxyEventTriggeredHandler += ProxyEventTriggeredHandler;
            }
        }

        internal static event Delegates.ProxyEventTriggeredHandler_BeforeArgs _beforeProxyEventTriggeredHandler;
        internal static event Delegates.ProxyEventTriggeredHandler_NormalArgs _afterProxyEventTriggeredHandler;

        private static void ProxyEventTriggeredHandler(On.tk2dAnimatedSprite.orig_ProxyEventTriggeredHandler orig,
            tk2dAnimatedSprite self, tk2dSpriteAnimator anim, tk2dSpriteAnimationClip clip, int frame)
        {
            Delegates.Params_ProxyEventTriggeredHandler @params = new()
            {
                self = self, anim = anim, clip = clip, frame = frame
            };
            _beforeProxyEventTriggeredHandler?.Invoke(@params);
            self = @params.self;
            anim = @params.anim;
            clip = @params.clip;
            frame = @params.frame;
            orig(self, anim, clip, frame);
            if (_afterProxyEventTriggeredHandler != null) _afterProxyEventTriggeredHandler.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.tk2dAnimatedSprite.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.tk2dAnimatedSprite.orig_OnEnable orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.tk2dAnimatedSprite.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.tk2dAnimatedSprite.orig_OnDisable orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.tk2dAnimatedSprite.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_NormalArgs _afterStart;

        private static void Start(On.tk2dAnimatedSprite.orig_Start orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStart != null) _afterStart.Invoke(@params);
        }

        internal static void HookAddComponent()
        {
            if (!HookedList.Contains("AddComponent"))
            {
                HookedList.Add("AddComponent");
                On.tk2dAnimatedSprite.AddComponent += AddComponent;
            }
        }

        internal static event Delegates.AddComponent_BeforeArgs _beforeAddComponent;
        internal static event Delegates.AddComponent_NormalArgs _afterAddComponent;

        private static tk2dAnimatedSprite AddComponent(On.tk2dAnimatedSprite.orig_AddComponent orig, GameObject go,
            tk2dSpriteAnimation anim, int clipId)
        {
            Delegates.Params_AddComponent @params = new()
            {
                go = go, anim = anim, clipId = clipId
            };
            _beforeAddComponent?.Invoke(@params);
            go = @params.go;
            anim = @params.anim;
            clipId = @params.clipId;
            var retVal = orig(go, anim, clipId);
            if (_afterAddComponent != null) retVal = _afterAddComponent.Invoke(@params);
            return retVal;
        }

        internal static void HookPlay()
        {
            if (!HookedList.Contains("Play"))
            {
                HookedList.Add("Play");
                On.tk2dAnimatedSprite.Play += Play;
            }
        }

        internal static event Delegates.Play_BeforeArgs _beforePlay;
        internal static event Delegates.Play_NormalArgs _afterPlay;

        private static void Play(On.tk2dAnimatedSprite.orig_Play orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_Play @params = new()
            {
                self = self
            };
            _beforePlay?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPlay != null) _afterPlay.Invoke(@params);
        }

        internal static void HookPlay_float()
        {
            if (!HookedList.Contains("Play_float"))
            {
                HookedList.Add("Play_float");
                On.tk2dAnimatedSprite.Play_float += Play_float;
            }
        }

        internal static event Delegates.Play_float_BeforeArgs _beforePlay_float;
        internal static event Delegates.Play_float_NormalArgs _afterPlay_float;

        private static void Play_float(On.tk2dAnimatedSprite.orig_Play_float orig, tk2dAnimatedSprite self,
            float clipStartTime)
        {
            Delegates.Params_Play_float @params = new()
            {
                self = self, clipStartTime = clipStartTime
            };
            _beforePlay_float?.Invoke(@params);
            self = @params.self;
            clipStartTime = @params.clipStartTime;
            orig(self, clipStartTime);
            if (_afterPlay_float != null) _afterPlay_float.Invoke(@params);
        }

        internal static void HookPlayFromFrame_int()
        {
            if (!HookedList.Contains("PlayFromFrame_int"))
            {
                HookedList.Add("PlayFromFrame_int");
                On.tk2dAnimatedSprite.PlayFromFrame_int += PlayFromFrame_int;
            }
        }

        internal static event Delegates.PlayFromFrame_int_BeforeArgs _beforePlayFromFrame_int;
        internal static event Delegates.PlayFromFrame_int_NormalArgs _afterPlayFromFrame_int;

        private static void PlayFromFrame_int(On.tk2dAnimatedSprite.orig_PlayFromFrame_int orig,
            tk2dAnimatedSprite self, int frame)
        {
            Delegates.Params_PlayFromFrame_int @params = new()
            {
                self = self, frame = frame
            };
            _beforePlayFromFrame_int?.Invoke(@params);
            self = @params.self;
            frame = @params.frame;
            orig(self, frame);
            if (_afterPlayFromFrame_int != null) _afterPlayFromFrame_int.Invoke(@params);
        }

        internal static void HookPlay_string()
        {
            if (!HookedList.Contains("Play_string"))
            {
                HookedList.Add("Play_string");
                On.tk2dAnimatedSprite.Play_string += Play_string;
            }
        }

        internal static event Delegates.Play_string_BeforeArgs _beforePlay_string;
        internal static event Delegates.Play_string_NormalArgs _afterPlay_string;

        private static void Play_string(On.tk2dAnimatedSprite.orig_Play_string orig, tk2dAnimatedSprite self,
            string name)
        {
            Delegates.Params_Play_string @params = new()
            {
                self = self, name = name
            };
            _beforePlay_string?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            orig(self, name);
            if (_afterPlay_string != null) _afterPlay_string.Invoke(@params);
        }

        internal static void HookPlayFromFrame_string_int()
        {
            if (!HookedList.Contains("PlayFromFrame_string_int"))
            {
                HookedList.Add("PlayFromFrame_string_int");
                On.tk2dAnimatedSprite.PlayFromFrame_string_int += PlayFromFrame_string_int;
            }
        }

        internal static event Delegates.PlayFromFrame_string_int_BeforeArgs _beforePlayFromFrame_string_int;
        internal static event Delegates.PlayFromFrame_string_int_NormalArgs _afterPlayFromFrame_string_int;

        private static void PlayFromFrame_string_int(On.tk2dAnimatedSprite.orig_PlayFromFrame_string_int orig,
            tk2dAnimatedSprite self, string name, int frame)
        {
            Delegates.Params_PlayFromFrame_string_int @params = new()
            {
                self = self, name = name, frame = frame
            };
            _beforePlayFromFrame_string_int?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            frame = @params.frame;
            orig(self, name, frame);
            if (_afterPlayFromFrame_string_int != null) _afterPlayFromFrame_string_int.Invoke(@params);
        }

        internal static void HookPlay_string_float()
        {
            if (!HookedList.Contains("Play_string_float"))
            {
                HookedList.Add("Play_string_float");
                On.tk2dAnimatedSprite.Play_string_float += Play_string_float;
            }
        }

        internal static event Delegates.Play_string_float_BeforeArgs _beforePlay_string_float;
        internal static event Delegates.Play_string_float_NormalArgs _afterPlay_string_float;

        private static void Play_string_float(On.tk2dAnimatedSprite.orig_Play_string_float orig,
            tk2dAnimatedSprite self, string name, float clipStartTime)
        {
            Delegates.Params_Play_string_float @params = new()
            {
                self = self, name = name, clipStartTime = clipStartTime
            };
            _beforePlay_string_float?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            clipStartTime = @params.clipStartTime;
            orig(self, name, clipStartTime);
            if (_afterPlay_string_float != null) _afterPlay_string_float.Invoke(@params);
        }

        internal static void HookPlay_tk2dSpriteAnimationClip_float()
        {
            if (!HookedList.Contains("Play_tk2dSpriteAnimationClip_float"))
            {
                HookedList.Add("Play_tk2dSpriteAnimationClip_float");
                On.tk2dAnimatedSprite.Play_tk2dSpriteAnimationClip_float += Play_tk2dSpriteAnimationClip_float;
            }
        }

        internal static event Delegates.Play_tk2dSpriteAnimationClip_float_BeforeArgs
            _beforePlay_tk2dSpriteAnimationClip_float;

        internal static event Delegates.Play_tk2dSpriteAnimationClip_float_NormalArgs
            _afterPlay_tk2dSpriteAnimationClip_float;

        private static void Play_tk2dSpriteAnimationClip_float(
            On.tk2dAnimatedSprite.orig_Play_tk2dSpriteAnimationClip_float orig, tk2dAnimatedSprite self,
            tk2dSpriteAnimationClip clip, float clipStartTime)
        {
            Delegates.Params_Play_tk2dSpriteAnimationClip_float @params = new()
            {
                self = self, clip = clip, clipStartTime = clipStartTime
            };
            _beforePlay_tk2dSpriteAnimationClip_float?.Invoke(@params);
            self = @params.self;
            clip = @params.clip;
            clipStartTime = @params.clipStartTime;
            orig(self, clip, clipStartTime);
            if (_afterPlay_tk2dSpriteAnimationClip_float != null)
                _afterPlay_tk2dSpriteAnimationClip_float.Invoke(@params);
        }

        internal static void HookPlay_tk2dSpriteAnimationClip_float_float()
        {
            if (!HookedList.Contains("Play_tk2dSpriteAnimationClip_float_float"))
            {
                HookedList.Add("Play_tk2dSpriteAnimationClip_float_float");
                On.tk2dAnimatedSprite.Play_tk2dSpriteAnimationClip_float_float +=
                    Play_tk2dSpriteAnimationClip_float_float;
            }
        }

        internal static event Delegates.Play_tk2dSpriteAnimationClip_float_float_BeforeArgs
            _beforePlay_tk2dSpriteAnimationClip_float_float;

        internal static event Delegates.Play_tk2dSpriteAnimationClip_float_float_NormalArgs
            _afterPlay_tk2dSpriteAnimationClip_float_float;

        private static void Play_tk2dSpriteAnimationClip_float_float(
            On.tk2dAnimatedSprite.orig_Play_tk2dSpriteAnimationClip_float_float orig, tk2dAnimatedSprite self,
            tk2dSpriteAnimationClip clip, float clipStartTime, float overrideFps)
        {
            Delegates.Params_Play_tk2dSpriteAnimationClip_float_float @params = new()
            {
                self = self, clip = clip, clipStartTime = clipStartTime, overrideFps = overrideFps
            };
            _beforePlay_tk2dSpriteAnimationClip_float_float?.Invoke(@params);
            self = @params.self;
            clip = @params.clip;
            clipStartTime = @params.clipStartTime;
            overrideFps = @params.overrideFps;
            orig(self, clip, clipStartTime, overrideFps);
            if (_afterPlay_tk2dSpriteAnimationClip_float_float != null)
                _afterPlay_tk2dSpriteAnimationClip_float_float.Invoke(@params);
        }

        internal static void Hookget_CurrentClip()
        {
            if (!HookedList.Contains("get_CurrentClip"))
            {
                HookedList.Add("get_CurrentClip");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_CurrentClip"),
                    get_CurrentClip);
            }
        }

        internal static event Delegates.get_CurrentClip_BeforeArgs _beforeget_CurrentClip;
        internal static event Delegates.get_CurrentClip_NormalArgs _afterget_CurrentClip;

        private static tk2dSpriteAnimationClip get_CurrentClip(Func<tk2dAnimatedSprite, tk2dSpriteAnimationClip> orig,
            tk2dAnimatedSprite self)
        {
            Delegates.Params_get_CurrentClip @params = new()
            {
                self = self
            };
            _beforeget_CurrentClip?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_CurrentClip != null) retVal = _afterget_CurrentClip.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_ClipTimeSeconds()
        {
            if (!HookedList.Contains("get_ClipTimeSeconds"))
            {
                HookedList.Add("get_ClipTimeSeconds");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_ClipTimeSeconds"),
                    get_ClipTimeSeconds);
            }
        }

        internal static event Delegates.get_ClipTimeSeconds_BeforeArgs _beforeget_ClipTimeSeconds;
        internal static event Delegates.get_ClipTimeSeconds_NormalArgs _afterget_ClipTimeSeconds;

        private static float get_ClipTimeSeconds(Func<tk2dAnimatedSprite, float> orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_get_ClipTimeSeconds @params = new()
            {
                self = self
            };
            _beforeget_ClipTimeSeconds?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ClipTimeSeconds != null) retVal = _afterget_ClipTimeSeconds.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_ClipFps()
        {
            if (!HookedList.Contains("get_ClipFps"))
            {
                HookedList.Add("get_ClipFps");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_ClipFps"), get_ClipFps);
            }
        }

        internal static event Delegates.get_ClipFps_BeforeArgs _beforeget_ClipFps;
        internal static event Delegates.get_ClipFps_NormalArgs _afterget_ClipFps;

        private static float get_ClipFps(Func<tk2dAnimatedSprite, float> orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_get_ClipFps @params = new()
            {
                self = self
            };
            _beforeget_ClipFps?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_ClipFps != null) retVal = _afterget_ClipFps.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_ClipFps()
        {
            if (!HookedList.Contains("set_ClipFps"))
            {
                HookedList.Add("set_ClipFps");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_ClipFps"), set_ClipFps);
            }
        }

        internal static event Delegates.set_ClipFps_BeforeArgs _beforeset_ClipFps;
        internal static event Delegates.set_ClipFps_NormalArgs _afterset_ClipFps;

        private static void set_ClipFps(Action<tk2dAnimatedSprite, float> orig, tk2dAnimatedSprite self, float value)
        {
            Delegates.Params_set_ClipFps @params = new()
            {
                self = self, value = value
            };
            _beforeset_ClipFps?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_ClipFps != null) _afterset_ClipFps.Invoke(@params);
        }

        internal static void HookStop()
        {
            if (!HookedList.Contains("Stop"))
            {
                HookedList.Add("Stop");
                On.tk2dAnimatedSprite.Stop += Stop;
            }
        }

        internal static event Delegates.Stop_BeforeArgs _beforeStop;
        internal static event Delegates.Stop_NormalArgs _afterStop;

        private static void Stop(On.tk2dAnimatedSprite.orig_Stop orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_Stop @params = new()
            {
                self = self
            };
            _beforeStop?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStop != null) _afterStop.Invoke(@params);
        }

        internal static void HookStopAndResetFrame()
        {
            if (!HookedList.Contains("StopAndResetFrame"))
            {
                HookedList.Add("StopAndResetFrame");
                On.tk2dAnimatedSprite.StopAndResetFrame += StopAndResetFrame;
            }
        }

        internal static event Delegates.StopAndResetFrame_BeforeArgs _beforeStopAndResetFrame;
        internal static event Delegates.StopAndResetFrame_NormalArgs _afterStopAndResetFrame;

        private static void StopAndResetFrame(On.tk2dAnimatedSprite.orig_StopAndResetFrame orig,
            tk2dAnimatedSprite self)
        {
            Delegates.Params_StopAndResetFrame @params = new()
            {
                self = self
            };
            _beforeStopAndResetFrame?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterStopAndResetFrame != null) _afterStopAndResetFrame.Invoke(@params);
        }

        internal static void HookisPlaying()
        {
            if (!HookedList.Contains("isPlaying"))
            {
                HookedList.Add("isPlaying");
                On.tk2dAnimatedSprite.isPlaying += isPlaying;
            }
        }

        internal static event Delegates.isPlaying_BeforeArgs _beforeisPlaying;
        internal static event Delegates.isPlaying_NormalArgs _afterisPlaying;

        private static bool isPlaying(On.tk2dAnimatedSprite.orig_isPlaying orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_isPlaying @params = new()
            {
                self = self
            };
            _beforeisPlaying?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterisPlaying != null) retVal = _afterisPlaying.Invoke(@params);
            return retVal;
        }

        internal static void HookIsPlaying_string()
        {
            if (!HookedList.Contains("IsPlaying_string"))
            {
                HookedList.Add("IsPlaying_string");
                On.tk2dAnimatedSprite.IsPlaying_string += IsPlaying_string;
            }
        }

        internal static event Delegates.IsPlaying_string_BeforeArgs _beforeIsPlaying_string;
        internal static event Delegates.IsPlaying_string_NormalArgs _afterIsPlaying_string;

        private static bool IsPlaying_string(On.tk2dAnimatedSprite.orig_IsPlaying_string orig, tk2dAnimatedSprite self,
            string name)
        {
            Delegates.Params_IsPlaying_string @params = new()
            {
                self = self, name = name
            };
            _beforeIsPlaying_string?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            var retVal = orig(self, name);
            if (_afterIsPlaying_string != null) retVal = _afterIsPlaying_string.Invoke(@params);
            return retVal;
        }

        internal static void HookIsPlaying_tk2dSpriteAnimationClip()
        {
            if (!HookedList.Contains("IsPlaying_tk2dSpriteAnimationClip"))
            {
                HookedList.Add("IsPlaying_tk2dSpriteAnimationClip");
                On.tk2dAnimatedSprite.IsPlaying_tk2dSpriteAnimationClip += IsPlaying_tk2dSpriteAnimationClip;
            }
        }

        internal static event Delegates.IsPlaying_tk2dSpriteAnimationClip_BeforeArgs
            _beforeIsPlaying_tk2dSpriteAnimationClip;

        internal static event Delegates.IsPlaying_tk2dSpriteAnimationClip_NormalArgs
            _afterIsPlaying_tk2dSpriteAnimationClip;

        private static bool IsPlaying_tk2dSpriteAnimationClip(
            On.tk2dAnimatedSprite.orig_IsPlaying_tk2dSpriteAnimationClip orig, tk2dAnimatedSprite self,
            tk2dSpriteAnimationClip clip)
        {
            Delegates.Params_IsPlaying_tk2dSpriteAnimationClip @params = new()
            {
                self = self, clip = clip
            };
            _beforeIsPlaying_tk2dSpriteAnimationClip?.Invoke(@params);
            self = @params.self;
            clip = @params.clip;
            var retVal = orig(self, clip);
            if (_afterIsPlaying_tk2dSpriteAnimationClip != null)
                retVal = _afterIsPlaying_tk2dSpriteAnimationClip.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_Playing()
        {
            if (!HookedList.Contains("get_Playing"))
            {
                HookedList.Add("get_Playing");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Playing"), get_Playing);
            }
        }

        internal static event Delegates.get_Playing_BeforeArgs _beforeget_Playing;
        internal static event Delegates.get_Playing_NormalArgs _afterget_Playing;

        private static bool get_Playing(Func<tk2dAnimatedSprite, bool> orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_get_Playing @params = new()
            {
                self = self
            };
            _beforeget_Playing?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Playing != null) retVal = _afterget_Playing.Invoke(@params);
            return retVal;
        }

        internal static void HookGetClipIdByName()
        {
            if (!HookedList.Contains("GetClipIdByName"))
            {
                HookedList.Add("GetClipIdByName");
                On.tk2dAnimatedSprite.GetClipIdByName += GetClipIdByName;
            }
        }

        internal static event Delegates.GetClipIdByName_BeforeArgs _beforeGetClipIdByName;
        internal static event Delegates.GetClipIdByName_NormalArgs _afterGetClipIdByName;

        private static int GetClipIdByName(On.tk2dAnimatedSprite.orig_GetClipIdByName orig, tk2dAnimatedSprite self,
            string name)
        {
            Delegates.Params_GetClipIdByName @params = new()
            {
                self = self, name = name
            };
            _beforeGetClipIdByName?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            var retVal = orig(self, name);
            if (_afterGetClipIdByName != null) retVal = _afterGetClipIdByName.Invoke(@params);
            return retVal;
        }

        internal static void HookGetClipByName()
        {
            if (!HookedList.Contains("GetClipByName"))
            {
                HookedList.Add("GetClipByName");
                On.tk2dAnimatedSprite.GetClipByName += GetClipByName;
            }
        }

        internal static event Delegates.GetClipByName_BeforeArgs _beforeGetClipByName;
        internal static event Delegates.GetClipByName_NormalArgs _afterGetClipByName;

        private static tk2dSpriteAnimationClip GetClipByName(On.tk2dAnimatedSprite.orig_GetClipByName orig,
            tk2dAnimatedSprite self, string name)
        {
            Delegates.Params_GetClipByName @params = new()
            {
                self = self, name = name
            };
            _beforeGetClipByName?.Invoke(@params);
            self = @params.self;
            name = @params.name;
            var retVal = orig(self, name);
            if (_afterGetClipByName != null) retVal = _afterGetClipByName.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_DefaultFps()
        {
            if (!HookedList.Contains("get_DefaultFps"))
            {
                HookedList.Add("get_DefaultFps");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_DefaultFps", false),
                    get_DefaultFps);
            }
        }

        internal static event Delegates.get_DefaultFps_BeforeArgs _beforeget_DefaultFps;
        internal static event Delegates.get_DefaultFps_NormalArgs _afterget_DefaultFps;

        private static float get_DefaultFps(Func<float> orig)
        {
            _beforeget_DefaultFps?.Invoke();
            var retVal = orig();
            if (_afterget_DefaultFps != null) retVal = _afterget_DefaultFps.Invoke();
            return retVal;
        }

        internal static void HookPause()
        {
            if (!HookedList.Contains("Pause"))
            {
                HookedList.Add("Pause");
                On.tk2dAnimatedSprite.Pause += Pause;
            }
        }

        internal static event Delegates.Pause_BeforeArgs _beforePause;
        internal static event Delegates.Pause_NormalArgs _afterPause;

        private static void Pause(On.tk2dAnimatedSprite.orig_Pause orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_Pause @params = new()
            {
                self = self
            };
            _beforePause?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterPause != null) _afterPause.Invoke(@params);
        }

        internal static void HookResume()
        {
            if (!HookedList.Contains("Resume"))
            {
                HookedList.Add("Resume");
                On.tk2dAnimatedSprite.Resume += Resume;
            }
        }

        internal static event Delegates.Resume_BeforeArgs _beforeResume;
        internal static event Delegates.Resume_NormalArgs _afterResume;

        private static void Resume(On.tk2dAnimatedSprite.orig_Resume orig, tk2dAnimatedSprite self)
        {
            Delegates.Params_Resume @params = new()
            {
                self = self
            };
            _beforeResume?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterResume != null) _afterResume.Invoke(@params);
        }

        internal static void HookSetFrame_int()
        {
            if (!HookedList.Contains("SetFrame_int"))
            {
                HookedList.Add("SetFrame_int");
                On.tk2dAnimatedSprite.SetFrame_int += SetFrame_int;
            }
        }

        internal static event Delegates.SetFrame_int_BeforeArgs _beforeSetFrame_int;
        internal static event Delegates.SetFrame_int_NormalArgs _afterSetFrame_int;

        private static void SetFrame_int(On.tk2dAnimatedSprite.orig_SetFrame_int orig, tk2dAnimatedSprite self,
            int currFrame)
        {
            Delegates.Params_SetFrame_int @params = new()
            {
                self = self, currFrame = currFrame
            };
            _beforeSetFrame_int?.Invoke(@params);
            self = @params.self;
            currFrame = @params.currFrame;
            orig(self, currFrame);
            if (_afterSetFrame_int != null) _afterSetFrame_int.Invoke(@params);
        }

        internal static void HookSetFrame_int_bool()
        {
            if (!HookedList.Contains("SetFrame_int_bool"))
            {
                HookedList.Add("SetFrame_int_bool");
                On.tk2dAnimatedSprite.SetFrame_int_bool += SetFrame_int_bool;
            }
        }

        internal static event Delegates.SetFrame_int_bool_BeforeArgs _beforeSetFrame_int_bool;
        internal static event Delegates.SetFrame_int_bool_NormalArgs _afterSetFrame_int_bool;

        private static void SetFrame_int_bool(On.tk2dAnimatedSprite.orig_SetFrame_int_bool orig,
            tk2dAnimatedSprite self, int currFrame, bool triggerEvent)
        {
            Delegates.Params_SetFrame_int_bool @params = new()
            {
                self = self, currFrame = currFrame, triggerEvent = triggerEvent
            };
            _beforeSetFrame_int_bool?.Invoke(@params);
            self = @params.self;
            currFrame = @params.currFrame;
            triggerEvent = @params.triggerEvent;
            orig(self, currFrame, triggerEvent);
            if (_afterSetFrame_int_bool != null) _afterSetFrame_int_bool.Invoke(@params);
        }

        internal static void HookUpdateAnimation()
        {
            if (!HookedList.Contains("UpdateAnimation"))
            {
                HookedList.Add("UpdateAnimation");
                On.tk2dAnimatedSprite.UpdateAnimation += UpdateAnimation;
            }
        }

        internal static event Delegates.UpdateAnimation_BeforeArgs _beforeUpdateAnimation;
        internal static event Delegates.UpdateAnimation_NormalArgs _afterUpdateAnimation;

        private static void UpdateAnimation(On.tk2dAnimatedSprite.orig_UpdateAnimation orig, tk2dAnimatedSprite self,
            float deltaTime)
        {
            Delegates.Params_UpdateAnimation @params = new()
            {
                self = self, deltaTime = deltaTime
            };
            _beforeUpdateAnimation?.Invoke(@params);
            self = @params.self;
            deltaTime = @params.deltaTime;
            orig(self, deltaTime);
            if (_afterUpdateAnimation != null) _afterUpdateAnimation.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void AddComponent_BeforeArgs(Params_AddComponent args);

        public delegate tk2dAnimatedSprite AddComponent_NormalArgs(Params_AddComponent args);

        public delegate void CheckAddAnimatorInternal_BeforeArgs(Params_CheckAddAnimatorInternal args);

        public delegate void CheckAddAnimatorInternal_NormalArgs(Params_CheckAddAnimatorInternal args);

        public delegate void get_Animator_BeforeArgs(Params_get_Animator args);

        public delegate tk2dSpriteAnimator get_Animator_NormalArgs(Params_get_Animator args);

        public delegate void get_ClipFps_BeforeArgs(Params_get_ClipFps args);

        public delegate float get_ClipFps_NormalArgs(Params_get_ClipFps args);

        public delegate void get_ClipTimeSeconds_BeforeArgs(Params_get_ClipTimeSeconds args);

        public delegate float get_ClipTimeSeconds_NormalArgs(Params_get_ClipTimeSeconds args);

        public delegate void get_CurrentClip_BeforeArgs(Params_get_CurrentClip args);

        public delegate tk2dSpriteAnimationClip get_CurrentClip_NormalArgs(Params_get_CurrentClip args);

        public delegate void get_DefaultClipId_BeforeArgs(Params_get_DefaultClipId args);

        public delegate int get_DefaultClipId_NormalArgs(Params_get_DefaultClipId args);

        public delegate void get_DefaultFps_BeforeArgs();

        public delegate float get_DefaultFps_NormalArgs();

        public delegate void get_g_paused_BeforeArgs();

        public delegate bool get_g_paused_NormalArgs();

        public delegate void get_Library_BeforeArgs(Params_get_Library args);

        public delegate tk2dSpriteAnimation get_Library_NormalArgs(Params_get_Library args);

        public delegate void get_Paused_BeforeArgs(Params_get_Paused args);

        public delegate bool get_Paused_NormalArgs(Params_get_Paused args);

        public delegate void get_Playing_BeforeArgs(Params_get_Playing args);

        public delegate bool get_Playing_NormalArgs(Params_get_Playing args);

        public delegate void GetClipByName_BeforeArgs(Params_GetClipByName args);

        public delegate tk2dSpriteAnimationClip GetClipByName_NormalArgs(Params_GetClipByName args);

        public delegate void GetClipIdByName_BeforeArgs(Params_GetClipIdByName args);

        public delegate int GetClipIdByName_NormalArgs(Params_GetClipIdByName args);

        public delegate void isPlaying_BeforeArgs(Params_isPlaying args);

        public delegate bool isPlaying_NormalArgs(Params_isPlaying args);

        public delegate void IsPlaying_string_BeforeArgs(Params_IsPlaying_string args);

        public delegate bool IsPlaying_string_NormalArgs(Params_IsPlaying_string args);

        public delegate void
            IsPlaying_tk2dSpriteAnimationClip_BeforeArgs(Params_IsPlaying_tk2dSpriteAnimationClip args);

        public delegate bool
            IsPlaying_tk2dSpriteAnimationClip_NormalArgs(Params_IsPlaying_tk2dSpriteAnimationClip args);

        public delegate void NeedBoxCollider_BeforeArgs(Params_NeedBoxCollider args);

        public delegate bool NeedBoxCollider_NormalArgs(Params_NeedBoxCollider args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void Pause_BeforeArgs(Params_Pause args);

        public delegate void Pause_NormalArgs(Params_Pause args);

        public delegate void Play_BeforeArgs(Params_Play args);

        public delegate void Play_float_BeforeArgs(Params_Play_float args);

        public delegate void Play_float_NormalArgs(Params_Play_float args);

        public delegate void Play_NormalArgs(Params_Play args);

        public delegate void Play_string_BeforeArgs(Params_Play_string args);

        public delegate void Play_string_float_BeforeArgs(Params_Play_string_float args);

        public delegate void Play_string_float_NormalArgs(Params_Play_string_float args);

        public delegate void Play_string_NormalArgs(Params_Play_string args);

        public delegate void Play_tk2dSpriteAnimationClip_float_BeforeArgs(
            Params_Play_tk2dSpriteAnimationClip_float args);

        public delegate void Play_tk2dSpriteAnimationClip_float_float_BeforeArgs(
            Params_Play_tk2dSpriteAnimationClip_float_float args);

        public delegate void Play_tk2dSpriteAnimationClip_float_float_NormalArgs(
            Params_Play_tk2dSpriteAnimationClip_float_float args);

        public delegate void Play_tk2dSpriteAnimationClip_float_NormalArgs(
            Params_Play_tk2dSpriteAnimationClip_float args);

        public delegate void PlayFromFrame_int_BeforeArgs(Params_PlayFromFrame_int args);

        public delegate void PlayFromFrame_int_NormalArgs(Params_PlayFromFrame_int args);

        public delegate void PlayFromFrame_string_int_BeforeArgs(Params_PlayFromFrame_string_int args);

        public delegate void PlayFromFrame_string_int_NormalArgs(Params_PlayFromFrame_string_int args);

        public delegate void ProxyCompletedHandler_BeforeArgs(Params_ProxyCompletedHandler args);

        public delegate void ProxyCompletedHandler_NormalArgs(Params_ProxyCompletedHandler args);

        public delegate void ProxyEventTriggeredHandler_BeforeArgs(Params_ProxyEventTriggeredHandler args);

        public delegate void ProxyEventTriggeredHandler_NormalArgs(Params_ProxyEventTriggeredHandler args);

        public delegate void Resume_BeforeArgs(Params_Resume args);

        public delegate void Resume_NormalArgs(Params_Resume args);

        public delegate void set_ClipFps_BeforeArgs(Params_set_ClipFps args);

        public delegate void set_ClipFps_NormalArgs(Params_set_ClipFps args);

        public delegate void set_DefaultClipId_BeforeArgs(Params_set_DefaultClipId args);

        public delegate void set_DefaultClipId_NormalArgs(Params_set_DefaultClipId args);

        public delegate void set_g_paused_BeforeArgs(Params_set_g_paused args);

        public delegate void set_g_paused_NormalArgs(Params_set_g_paused args);

        public delegate void set_Library_BeforeArgs(Params_set_Library args);

        public delegate void set_Library_NormalArgs(Params_set_Library args);

        public delegate void set_Paused_BeforeArgs(Params_set_Paused args);

        public delegate void set_Paused_NormalArgs(Params_set_Paused args);

        public delegate void SetFrame_int_BeforeArgs(Params_SetFrame_int args);

        public delegate void SetFrame_int_bool_BeforeArgs(Params_SetFrame_int_bool args);

        public delegate void SetFrame_int_bool_NormalArgs(Params_SetFrame_int_bool args);

        public delegate void SetFrame_int_NormalArgs(Params_SetFrame_int args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_NormalArgs(Params_Start args);

        public delegate void Stop_BeforeArgs(Params_Stop args);

        public delegate void Stop_NormalArgs(Params_Stop args);

        public delegate void StopAndResetFrame_BeforeArgs(Params_StopAndResetFrame args);

        public delegate void StopAndResetFrame_NormalArgs(Params_StopAndResetFrame args);

        public delegate void UpdateAnimation_BeforeArgs(Params_UpdateAnimation args);

        public delegate void UpdateAnimation_NormalArgs(Params_UpdateAnimation args);

        public sealed class Params_get_Animator
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_CheckAddAnimatorInternal
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_NeedBoxCollider
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_get_Library
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_set_Library
        {
            public tk2dAnimatedSprite self;
            public tk2dSpriteAnimation value;
        }

        public sealed class Params_get_DefaultClipId
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_set_DefaultClipId
        {
            public tk2dAnimatedSprite self;
            public int value;
        }

        public sealed class Params_set_g_paused
        {
            public bool value;
        }

        public sealed class Params_get_Paused
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_set_Paused
        {
            public tk2dAnimatedSprite self;
            public bool value;
        }

        public sealed class Params_ProxyCompletedHandler
        {
            public tk2dSpriteAnimator anim;
            public tk2dSpriteAnimationClip clip;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_ProxyEventTriggeredHandler
        {
            public tk2dSpriteAnimator anim;
            public tk2dSpriteAnimationClip clip;
            public int frame;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_OnEnable
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_OnDisable
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Start
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_AddComponent
        {
            public tk2dSpriteAnimation anim;
            public int clipId;
            public GameObject go;
        }

        public sealed class Params_Play
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Play_float
        {
            public float clipStartTime;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_PlayFromFrame_int
        {
            public int frame;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Play_string
        {
            public string name;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_PlayFromFrame_string_int
        {
            public int frame;
            public string name;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Play_string_float
        {
            public float clipStartTime;
            public string name;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Play_tk2dSpriteAnimationClip_float
        {
            public tk2dSpriteAnimationClip clip;
            public float clipStartTime;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Play_tk2dSpriteAnimationClip_float_float
        {
            public tk2dSpriteAnimationClip clip;
            public float clipStartTime;
            public float overrideFps;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_get_CurrentClip
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_get_ClipTimeSeconds
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_get_ClipFps
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_set_ClipFps
        {
            public tk2dAnimatedSprite self;
            public float value;
        }

        public sealed class Params_Stop
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_StopAndResetFrame
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_isPlaying
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_IsPlaying_string
        {
            public string name;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_IsPlaying_tk2dSpriteAnimationClip
        {
            public tk2dSpriteAnimationClip clip;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_get_Playing
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_GetClipIdByName
        {
            public string name;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_GetClipByName
        {
            public string name;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Pause
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_Resume
        {
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_SetFrame_int
        {
            public int currFrame;
            public tk2dAnimatedSprite self;
        }

        public sealed class Params_SetFrame_int_bool
        {
            public int currFrame;
            public tk2dAnimatedSprite self;
            public bool triggerEvent;
        }

        public sealed class Params_UpdateAnimation
        {
            public float deltaTime;
            public tk2dAnimatedSprite self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Animator_BeforeArgs get_Animator
        {
            add
            {
                HookHandler._beforeget_Animator += value;
                HookHandler.Hookget_Animator();
            }
            remove => HookHandler._beforeget_Animator -= value;
        }

        public static event Delegates.CheckAddAnimatorInternal_BeforeArgs CheckAddAnimatorInternal
        {
            add
            {
                HookHandler._beforeCheckAddAnimatorInternal += value;
                HookHandler.HookCheckAddAnimatorInternal();
            }
            remove => HookHandler._beforeCheckAddAnimatorInternal -= value;
        }

        public static event Delegates.NeedBoxCollider_BeforeArgs NeedBoxCollider
        {
            add
            {
                HookHandler._beforeNeedBoxCollider += value;
                HookHandler.HookNeedBoxCollider();
            }
            remove => HookHandler._beforeNeedBoxCollider -= value;
        }

        public static event Delegates.get_Library_BeforeArgs get_Library
        {
            add
            {
                HookHandler._beforeget_Library += value;
                HookHandler.Hookget_Library();
            }
            remove => HookHandler._beforeget_Library -= value;
        }

        public static event Delegates.set_Library_BeforeArgs set_Library
        {
            add
            {
                HookHandler._beforeset_Library += value;
                HookHandler.Hookset_Library();
            }
            remove => HookHandler._beforeset_Library -= value;
        }

        public static event Delegates.get_DefaultClipId_BeforeArgs get_DefaultClipId
        {
            add
            {
                HookHandler._beforeget_DefaultClipId += value;
                HookHandler.Hookget_DefaultClipId();
            }
            remove => HookHandler._beforeget_DefaultClipId -= value;
        }

        public static event Delegates.set_DefaultClipId_BeforeArgs set_DefaultClipId
        {
            add
            {
                HookHandler._beforeset_DefaultClipId += value;
                HookHandler.Hookset_DefaultClipId();
            }
            remove => HookHandler._beforeset_DefaultClipId -= value;
        }

        public static event Delegates.get_g_paused_BeforeArgs get_g_paused
        {
            add
            {
                HookHandler._beforeget_g_paused += value;
                HookHandler.Hookget_g_paused();
            }
            remove => HookHandler._beforeget_g_paused -= value;
        }

        public static event Delegates.set_g_paused_BeforeArgs set_g_paused
        {
            add
            {
                HookHandler._beforeset_g_paused += value;
                HookHandler.Hookset_g_paused();
            }
            remove => HookHandler._beforeset_g_paused -= value;
        }

        public static event Delegates.get_Paused_BeforeArgs get_Paused
        {
            add
            {
                HookHandler._beforeget_Paused += value;
                HookHandler.Hookget_Paused();
            }
            remove => HookHandler._beforeget_Paused -= value;
        }

        public static event Delegates.set_Paused_BeforeArgs set_Paused
        {
            add
            {
                HookHandler._beforeset_Paused += value;
                HookHandler.Hookset_Paused();
            }
            remove => HookHandler._beforeset_Paused -= value;
        }

        public static event Delegates.ProxyCompletedHandler_BeforeArgs ProxyCompletedHandler
        {
            add
            {
                HookHandler._beforeProxyCompletedHandler += value;
                HookHandler.HookProxyCompletedHandler();
            }
            remove => HookHandler._beforeProxyCompletedHandler -= value;
        }

        public static event Delegates.ProxyEventTriggeredHandler_BeforeArgs ProxyEventTriggeredHandler
        {
            add
            {
                HookHandler._beforeProxyEventTriggeredHandler += value;
                HookHandler.HookProxyEventTriggeredHandler();
            }
            remove => HookHandler._beforeProxyEventTriggeredHandler -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.AddComponent_BeforeArgs AddComponent
        {
            add
            {
                HookHandler._beforeAddComponent += value;
                HookHandler.HookAddComponent();
            }
            remove => HookHandler._beforeAddComponent -= value;
        }

        public static event Delegates.Play_BeforeArgs Play
        {
            add
            {
                HookHandler._beforePlay += value;
                HookHandler.HookPlay();
            }
            remove => HookHandler._beforePlay -= value;
        }

        public static event Delegates.Play_float_BeforeArgs Play_float
        {
            add
            {
                HookHandler._beforePlay_float += value;
                HookHandler.HookPlay_float();
            }
            remove => HookHandler._beforePlay_float -= value;
        }

        public static event Delegates.PlayFromFrame_int_BeforeArgs PlayFromFrame_int
        {
            add
            {
                HookHandler._beforePlayFromFrame_int += value;
                HookHandler.HookPlayFromFrame_int();
            }
            remove => HookHandler._beforePlayFromFrame_int -= value;
        }

        public static event Delegates.Play_string_BeforeArgs Play_string
        {
            add
            {
                HookHandler._beforePlay_string += value;
                HookHandler.HookPlay_string();
            }
            remove => HookHandler._beforePlay_string -= value;
        }

        public static event Delegates.PlayFromFrame_string_int_BeforeArgs PlayFromFrame_string_int
        {
            add
            {
                HookHandler._beforePlayFromFrame_string_int += value;
                HookHandler.HookPlayFromFrame_string_int();
            }
            remove => HookHandler._beforePlayFromFrame_string_int -= value;
        }

        public static event Delegates.Play_string_float_BeforeArgs Play_string_float
        {
            add
            {
                HookHandler._beforePlay_string_float += value;
                HookHandler.HookPlay_string_float();
            }
            remove => HookHandler._beforePlay_string_float -= value;
        }

        public static event Delegates.Play_tk2dSpriteAnimationClip_float_BeforeArgs Play_tk2dSpriteAnimationClip_float
        {
            add
            {
                HookHandler._beforePlay_tk2dSpriteAnimationClip_float += value;
                HookHandler.HookPlay_tk2dSpriteAnimationClip_float();
            }
            remove => HookHandler._beforePlay_tk2dSpriteAnimationClip_float -= value;
        }

        public static event Delegates.Play_tk2dSpriteAnimationClip_float_float_BeforeArgs
            Play_tk2dSpriteAnimationClip_float_float
            {
                add
                {
                    HookHandler._beforePlay_tk2dSpriteAnimationClip_float_float += value;
                    HookHandler.HookPlay_tk2dSpriteAnimationClip_float_float();
                }
                remove => HookHandler._beforePlay_tk2dSpriteAnimationClip_float_float -= value;
            }

        public static event Delegates.get_CurrentClip_BeforeArgs get_CurrentClip
        {
            add
            {
                HookHandler._beforeget_CurrentClip += value;
                HookHandler.Hookget_CurrentClip();
            }
            remove => HookHandler._beforeget_CurrentClip -= value;
        }

        public static event Delegates.get_ClipTimeSeconds_BeforeArgs get_ClipTimeSeconds
        {
            add
            {
                HookHandler._beforeget_ClipTimeSeconds += value;
                HookHandler.Hookget_ClipTimeSeconds();
            }
            remove => HookHandler._beforeget_ClipTimeSeconds -= value;
        }

        public static event Delegates.get_ClipFps_BeforeArgs get_ClipFps
        {
            add
            {
                HookHandler._beforeget_ClipFps += value;
                HookHandler.Hookget_ClipFps();
            }
            remove => HookHandler._beforeget_ClipFps -= value;
        }

        public static event Delegates.set_ClipFps_BeforeArgs set_ClipFps
        {
            add
            {
                HookHandler._beforeset_ClipFps += value;
                HookHandler.Hookset_ClipFps();
            }
            remove => HookHandler._beforeset_ClipFps -= value;
        }

        public static event Delegates.Stop_BeforeArgs Stop
        {
            add
            {
                HookHandler._beforeStop += value;
                HookHandler.HookStop();
            }
            remove => HookHandler._beforeStop -= value;
        }

        public static event Delegates.StopAndResetFrame_BeforeArgs StopAndResetFrame
        {
            add
            {
                HookHandler._beforeStopAndResetFrame += value;
                HookHandler.HookStopAndResetFrame();
            }
            remove => HookHandler._beforeStopAndResetFrame -= value;
        }

        public static event Delegates.isPlaying_BeforeArgs isPlaying
        {
            add
            {
                HookHandler._beforeisPlaying += value;
                HookHandler.HookisPlaying();
            }
            remove => HookHandler._beforeisPlaying -= value;
        }

        public static event Delegates.IsPlaying_string_BeforeArgs IsPlaying_string
        {
            add
            {
                HookHandler._beforeIsPlaying_string += value;
                HookHandler.HookIsPlaying_string();
            }
            remove => HookHandler._beforeIsPlaying_string -= value;
        }

        public static event Delegates.IsPlaying_tk2dSpriteAnimationClip_BeforeArgs IsPlaying_tk2dSpriteAnimationClip
        {
            add
            {
                HookHandler._beforeIsPlaying_tk2dSpriteAnimationClip += value;
                HookHandler.HookIsPlaying_tk2dSpriteAnimationClip();
            }
            remove => HookHandler._beforeIsPlaying_tk2dSpriteAnimationClip -= value;
        }

        public static event Delegates.get_Playing_BeforeArgs get_Playing
        {
            add
            {
                HookHandler._beforeget_Playing += value;
                HookHandler.Hookget_Playing();
            }
            remove => HookHandler._beforeget_Playing -= value;
        }

        public static event Delegates.GetClipIdByName_BeforeArgs GetClipIdByName
        {
            add
            {
                HookHandler._beforeGetClipIdByName += value;
                HookHandler.HookGetClipIdByName();
            }
            remove => HookHandler._beforeGetClipIdByName -= value;
        }

        public static event Delegates.GetClipByName_BeforeArgs GetClipByName
        {
            add
            {
                HookHandler._beforeGetClipByName += value;
                HookHandler.HookGetClipByName();
            }
            remove => HookHandler._beforeGetClipByName -= value;
        }

        public static event Delegates.get_DefaultFps_BeforeArgs get_DefaultFps
        {
            add
            {
                HookHandler._beforeget_DefaultFps += value;
                HookHandler.Hookget_DefaultFps();
            }
            remove => HookHandler._beforeget_DefaultFps -= value;
        }

        public static event Delegates.Pause_BeforeArgs Pause
        {
            add
            {
                HookHandler._beforePause += value;
                HookHandler.HookPause();
            }
            remove => HookHandler._beforePause -= value;
        }

        public static event Delegates.Resume_BeforeArgs Resume
        {
            add
            {
                HookHandler._beforeResume += value;
                HookHandler.HookResume();
            }
            remove => HookHandler._beforeResume -= value;
        }

        public static event Delegates.SetFrame_int_BeforeArgs SetFrame_int
        {
            add
            {
                HookHandler._beforeSetFrame_int += value;
                HookHandler.HookSetFrame_int();
            }
            remove => HookHandler._beforeSetFrame_int -= value;
        }

        public static event Delegates.SetFrame_int_bool_BeforeArgs SetFrame_int_bool
        {
            add
            {
                HookHandler._beforeSetFrame_int_bool += value;
                HookHandler.HookSetFrame_int_bool();
            }
            remove => HookHandler._beforeSetFrame_int_bool -= value;
        }

        public static event Delegates.UpdateAnimation_BeforeArgs UpdateAnimation
        {
            add
            {
                HookHandler._beforeUpdateAnimation += value;
                HookHandler.HookUpdateAnimation();
            }
            remove => HookHandler._beforeUpdateAnimation -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Animator_NormalArgs get_Animator
        {
            add
            {
                HookHandler._afterget_Animator += value;
                HookHandler.Hookget_Animator();
            }
            remove => HookHandler._afterget_Animator -= value;
        }

        public static event Delegates.CheckAddAnimatorInternal_NormalArgs CheckAddAnimatorInternal
        {
            add
            {
                HookHandler._afterCheckAddAnimatorInternal += value;
                HookHandler.HookCheckAddAnimatorInternal();
            }
            remove => HookHandler._afterCheckAddAnimatorInternal -= value;
        }

        public static event Delegates.NeedBoxCollider_NormalArgs NeedBoxCollider
        {
            add
            {
                HookHandler._afterNeedBoxCollider += value;
                HookHandler.HookNeedBoxCollider();
            }
            remove => HookHandler._afterNeedBoxCollider -= value;
        }

        public static event Delegates.get_Library_NormalArgs get_Library
        {
            add
            {
                HookHandler._afterget_Library += value;
                HookHandler.Hookget_Library();
            }
            remove => HookHandler._afterget_Library -= value;
        }

        public static event Delegates.set_Library_NormalArgs set_Library
        {
            add
            {
                HookHandler._afterset_Library += value;
                HookHandler.Hookset_Library();
            }
            remove => HookHandler._afterset_Library -= value;
        }

        public static event Delegates.get_DefaultClipId_NormalArgs get_DefaultClipId
        {
            add
            {
                HookHandler._afterget_DefaultClipId += value;
                HookHandler.Hookget_DefaultClipId();
            }
            remove => HookHandler._afterget_DefaultClipId -= value;
        }

        public static event Delegates.set_DefaultClipId_NormalArgs set_DefaultClipId
        {
            add
            {
                HookHandler._afterset_DefaultClipId += value;
                HookHandler.Hookset_DefaultClipId();
            }
            remove => HookHandler._afterset_DefaultClipId -= value;
        }

        public static event Delegates.get_g_paused_NormalArgs get_g_paused
        {
            add
            {
                HookHandler._afterget_g_paused += value;
                HookHandler.Hookget_g_paused();
            }
            remove => HookHandler._afterget_g_paused -= value;
        }

        public static event Delegates.set_g_paused_NormalArgs set_g_paused
        {
            add
            {
                HookHandler._afterset_g_paused += value;
                HookHandler.Hookset_g_paused();
            }
            remove => HookHandler._afterset_g_paused -= value;
        }

        public static event Delegates.get_Paused_NormalArgs get_Paused
        {
            add
            {
                HookHandler._afterget_Paused += value;
                HookHandler.Hookget_Paused();
            }
            remove => HookHandler._afterget_Paused -= value;
        }

        public static event Delegates.set_Paused_NormalArgs set_Paused
        {
            add
            {
                HookHandler._afterset_Paused += value;
                HookHandler.Hookset_Paused();
            }
            remove => HookHandler._afterset_Paused -= value;
        }

        public static event Delegates.ProxyCompletedHandler_NormalArgs ProxyCompletedHandler
        {
            add
            {
                HookHandler._afterProxyCompletedHandler += value;
                HookHandler.HookProxyCompletedHandler();
            }
            remove => HookHandler._afterProxyCompletedHandler -= value;
        }

        public static event Delegates.ProxyEventTriggeredHandler_NormalArgs ProxyEventTriggeredHandler
        {
            add
            {
                HookHandler._afterProxyEventTriggeredHandler += value;
                HookHandler.HookProxyEventTriggeredHandler();
            }
            remove => HookHandler._afterProxyEventTriggeredHandler -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.Start_NormalArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.AddComponent_NormalArgs AddComponent
        {
            add
            {
                HookHandler._afterAddComponent += value;
                HookHandler.HookAddComponent();
            }
            remove => HookHandler._afterAddComponent -= value;
        }

        public static event Delegates.Play_NormalArgs Play
        {
            add
            {
                HookHandler._afterPlay += value;
                HookHandler.HookPlay();
            }
            remove => HookHandler._afterPlay -= value;
        }

        public static event Delegates.Play_float_NormalArgs Play_float
        {
            add
            {
                HookHandler._afterPlay_float += value;
                HookHandler.HookPlay_float();
            }
            remove => HookHandler._afterPlay_float -= value;
        }

        public static event Delegates.PlayFromFrame_int_NormalArgs PlayFromFrame_int
        {
            add
            {
                HookHandler._afterPlayFromFrame_int += value;
                HookHandler.HookPlayFromFrame_int();
            }
            remove => HookHandler._afterPlayFromFrame_int -= value;
        }

        public static event Delegates.Play_string_NormalArgs Play_string
        {
            add
            {
                HookHandler._afterPlay_string += value;
                HookHandler.HookPlay_string();
            }
            remove => HookHandler._afterPlay_string -= value;
        }

        public static event Delegates.PlayFromFrame_string_int_NormalArgs PlayFromFrame_string_int
        {
            add
            {
                HookHandler._afterPlayFromFrame_string_int += value;
                HookHandler.HookPlayFromFrame_string_int();
            }
            remove => HookHandler._afterPlayFromFrame_string_int -= value;
        }

        public static event Delegates.Play_string_float_NormalArgs Play_string_float
        {
            add
            {
                HookHandler._afterPlay_string_float += value;
                HookHandler.HookPlay_string_float();
            }
            remove => HookHandler._afterPlay_string_float -= value;
        }

        public static event Delegates.Play_tk2dSpriteAnimationClip_float_NormalArgs Play_tk2dSpriteAnimationClip_float
        {
            add
            {
                HookHandler._afterPlay_tk2dSpriteAnimationClip_float += value;
                HookHandler.HookPlay_tk2dSpriteAnimationClip_float();
            }
            remove => HookHandler._afterPlay_tk2dSpriteAnimationClip_float -= value;
        }

        public static event Delegates.Play_tk2dSpriteAnimationClip_float_float_NormalArgs
            Play_tk2dSpriteAnimationClip_float_float
            {
                add
                {
                    HookHandler._afterPlay_tk2dSpriteAnimationClip_float_float += value;
                    HookHandler.HookPlay_tk2dSpriteAnimationClip_float_float();
                }
                remove => HookHandler._afterPlay_tk2dSpriteAnimationClip_float_float -= value;
            }

        public static event Delegates.get_CurrentClip_NormalArgs get_CurrentClip
        {
            add
            {
                HookHandler._afterget_CurrentClip += value;
                HookHandler.Hookget_CurrentClip();
            }
            remove => HookHandler._afterget_CurrentClip -= value;
        }

        public static event Delegates.get_ClipTimeSeconds_NormalArgs get_ClipTimeSeconds
        {
            add
            {
                HookHandler._afterget_ClipTimeSeconds += value;
                HookHandler.Hookget_ClipTimeSeconds();
            }
            remove => HookHandler._afterget_ClipTimeSeconds -= value;
        }

        public static event Delegates.get_ClipFps_NormalArgs get_ClipFps
        {
            add
            {
                HookHandler._afterget_ClipFps += value;
                HookHandler.Hookget_ClipFps();
            }
            remove => HookHandler._afterget_ClipFps -= value;
        }

        public static event Delegates.set_ClipFps_NormalArgs set_ClipFps
        {
            add
            {
                HookHandler._afterset_ClipFps += value;
                HookHandler.Hookset_ClipFps();
            }
            remove => HookHandler._afterset_ClipFps -= value;
        }

        public static event Delegates.Stop_NormalArgs Stop
        {
            add
            {
                HookHandler._afterStop += value;
                HookHandler.HookStop();
            }
            remove => HookHandler._afterStop -= value;
        }

        public static event Delegates.StopAndResetFrame_NormalArgs StopAndResetFrame
        {
            add
            {
                HookHandler._afterStopAndResetFrame += value;
                HookHandler.HookStopAndResetFrame();
            }
            remove => HookHandler._afterStopAndResetFrame -= value;
        }

        public static event Delegates.isPlaying_NormalArgs isPlaying
        {
            add
            {
                HookHandler._afterisPlaying += value;
                HookHandler.HookisPlaying();
            }
            remove => HookHandler._afterisPlaying -= value;
        }

        public static event Delegates.IsPlaying_string_NormalArgs IsPlaying_string
        {
            add
            {
                HookHandler._afterIsPlaying_string += value;
                HookHandler.HookIsPlaying_string();
            }
            remove => HookHandler._afterIsPlaying_string -= value;
        }

        public static event Delegates.IsPlaying_tk2dSpriteAnimationClip_NormalArgs IsPlaying_tk2dSpriteAnimationClip
        {
            add
            {
                HookHandler._afterIsPlaying_tk2dSpriteAnimationClip += value;
                HookHandler.HookIsPlaying_tk2dSpriteAnimationClip();
            }
            remove => HookHandler._afterIsPlaying_tk2dSpriteAnimationClip -= value;
        }

        public static event Delegates.get_Playing_NormalArgs get_Playing
        {
            add
            {
                HookHandler._afterget_Playing += value;
                HookHandler.Hookget_Playing();
            }
            remove => HookHandler._afterget_Playing -= value;
        }

        public static event Delegates.GetClipIdByName_NormalArgs GetClipIdByName
        {
            add
            {
                HookHandler._afterGetClipIdByName += value;
                HookHandler.HookGetClipIdByName();
            }
            remove => HookHandler._afterGetClipIdByName -= value;
        }

        public static event Delegates.GetClipByName_NormalArgs GetClipByName
        {
            add
            {
                HookHandler._afterGetClipByName += value;
                HookHandler.HookGetClipByName();
            }
            remove => HookHandler._afterGetClipByName -= value;
        }

        public static event Delegates.get_DefaultFps_NormalArgs get_DefaultFps
        {
            add
            {
                HookHandler._afterget_DefaultFps += value;
                HookHandler.Hookget_DefaultFps();
            }
            remove => HookHandler._afterget_DefaultFps -= value;
        }

        public static event Delegates.Pause_NormalArgs Pause
        {
            add
            {
                HookHandler._afterPause += value;
                HookHandler.HookPause();
            }
            remove => HookHandler._afterPause -= value;
        }

        public static event Delegates.Resume_NormalArgs Resume
        {
            add
            {
                HookHandler._afterResume += value;
                HookHandler.HookResume();
            }
            remove => HookHandler._afterResume -= value;
        }

        public static event Delegates.SetFrame_int_NormalArgs SetFrame_int
        {
            add
            {
                HookHandler._afterSetFrame_int += value;
                HookHandler.HookSetFrame_int();
            }
            remove => HookHandler._afterSetFrame_int -= value;
        }

        public static event Delegates.SetFrame_int_bool_NormalArgs SetFrame_int_bool
        {
            add
            {
                HookHandler._afterSetFrame_int_bool += value;
                HookHandler.HookSetFrame_int_bool();
            }
            remove => HookHandler._afterSetFrame_int_bool -= value;
        }

        public static event Delegates.UpdateAnimation_NormalArgs UpdateAnimation
        {
            add
            {
                HookHandler._afterUpdateAnimation += value;
                HookHandler.HookUpdateAnimation();
            }
            remove => HookHandler._afterUpdateAnimation -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Animator_NormalArgs get_Animator
        {
            add => HookEndpointManager.Add<Delegates.get_Animator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Animator"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Animator_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Animator"), value);
        }

        public static event On.tk2dAnimatedSprite.hook_CheckAddAnimatorInternal CheckAddAnimatorInternal
        {
            add => On.tk2dAnimatedSprite.CheckAddAnimatorInternal += value;
            remove => On.tk2dAnimatedSprite.CheckAddAnimatorInternal -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_NeedBoxCollider NeedBoxCollider
        {
            add => On.tk2dAnimatedSprite.NeedBoxCollider += value;
            remove => On.tk2dAnimatedSprite.NeedBoxCollider -= value;
        }

        public static event Delegates.get_Library_NormalArgs get_Library
        {
            add => HookEndpointManager.Add<Delegates.get_Library_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Library"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Library_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Library"), value);
        }

        public static event Delegates.set_Library_NormalArgs set_Library
        {
            add => HookEndpointManager.Add<Delegates.set_Library_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_Library"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Library_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_Library"), value);
        }

        public static event Delegates.get_DefaultClipId_NormalArgs get_DefaultClipId
        {
            add => HookEndpointManager.Add<Delegates.get_DefaultClipId_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_DefaultClipId"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DefaultClipId_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_DefaultClipId"), value);
        }

        public static event Delegates.set_DefaultClipId_NormalArgs set_DefaultClipId
        {
            add => HookEndpointManager.Add<Delegates.set_DefaultClipId_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_DefaultClipId"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DefaultClipId_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_DefaultClipId"), value);
        }

        public static event Delegates.get_g_paused_NormalArgs get_g_paused
        {
            add => HookEndpointManager.Add<Delegates.get_g_paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_g_paused", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_g_paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_g_paused", false), value);
        }

        public static event Delegates.set_g_paused_NormalArgs set_g_paused
        {
            add => HookEndpointManager.Add<Delegates.set_g_paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_g_paused", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_g_paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_g_paused", false), value);
        }

        public static event Delegates.get_Paused_NormalArgs get_Paused
        {
            add => HookEndpointManager.Add<Delegates.get_Paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Paused"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Paused"), value);
        }

        public static event Delegates.set_Paused_NormalArgs set_Paused
        {
            add => HookEndpointManager.Add<Delegates.set_Paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_Paused"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Paused_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_Paused"), value);
        }

        public static event On.tk2dAnimatedSprite.hook_ProxyCompletedHandler ProxyCompletedHandler
        {
            add => On.tk2dAnimatedSprite.ProxyCompletedHandler += value;
            remove => On.tk2dAnimatedSprite.ProxyCompletedHandler -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_ProxyEventTriggeredHandler ProxyEventTriggeredHandler
        {
            add => On.tk2dAnimatedSprite.ProxyEventTriggeredHandler += value;
            remove => On.tk2dAnimatedSprite.ProxyEventTriggeredHandler -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_OnEnable OnEnable
        {
            add => On.tk2dAnimatedSprite.OnEnable += value;
            remove => On.tk2dAnimatedSprite.OnEnable -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_OnDisable OnDisable
        {
            add => On.tk2dAnimatedSprite.OnDisable += value;
            remove => On.tk2dAnimatedSprite.OnDisable -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Start Start
        {
            add => On.tk2dAnimatedSprite.Start += value;
            remove => On.tk2dAnimatedSprite.Start -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_AddComponent AddComponent
        {
            add => On.tk2dAnimatedSprite.AddComponent += value;
            remove => On.tk2dAnimatedSprite.AddComponent -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Play Play
        {
            add => On.tk2dAnimatedSprite.Play += value;
            remove => On.tk2dAnimatedSprite.Play -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Play_float Play_float
        {
            add => On.tk2dAnimatedSprite.Play_float += value;
            remove => On.tk2dAnimatedSprite.Play_float -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_PlayFromFrame_int PlayFromFrame_int
        {
            add => On.tk2dAnimatedSprite.PlayFromFrame_int += value;
            remove => On.tk2dAnimatedSprite.PlayFromFrame_int -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Play_string Play_string
        {
            add => On.tk2dAnimatedSprite.Play_string += value;
            remove => On.tk2dAnimatedSprite.Play_string -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_PlayFromFrame_string_int PlayFromFrame_string_int
        {
            add => On.tk2dAnimatedSprite.PlayFromFrame_string_int += value;
            remove => On.tk2dAnimatedSprite.PlayFromFrame_string_int -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Play_string_float Play_string_float
        {
            add => On.tk2dAnimatedSprite.Play_string_float += value;
            remove => On.tk2dAnimatedSprite.Play_string_float -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Play_tk2dSpriteAnimationClip_float
            Play_tk2dSpriteAnimationClip_float
            {
                add => On.tk2dAnimatedSprite.Play_tk2dSpriteAnimationClip_float += value;
                remove => On.tk2dAnimatedSprite.Play_tk2dSpriteAnimationClip_float -= value;
            }

        public static event On.tk2dAnimatedSprite.hook_Play_tk2dSpriteAnimationClip_float_float
            Play_tk2dSpriteAnimationClip_float_float
            {
                add => On.tk2dAnimatedSprite.Play_tk2dSpriteAnimationClip_float_float += value;
                remove => On.tk2dAnimatedSprite.Play_tk2dSpriteAnimationClip_float_float -= value;
            }

        public static event Delegates.get_CurrentClip_NormalArgs get_CurrentClip
        {
            add => HookEndpointManager.Add<Delegates.get_CurrentClip_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_CurrentClip"), value);
            remove => HookEndpointManager.Remove<Delegates.get_CurrentClip_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_CurrentClip"), value);
        }

        public static event Delegates.get_ClipTimeSeconds_NormalArgs get_ClipTimeSeconds
        {
            add => HookEndpointManager.Add<Delegates.get_ClipTimeSeconds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_ClipTimeSeconds"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ClipTimeSeconds_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_ClipTimeSeconds"), value);
        }

        public static event Delegates.get_ClipFps_NormalArgs get_ClipFps
        {
            add => HookEndpointManager.Add<Delegates.get_ClipFps_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_ClipFps"), value);
            remove => HookEndpointManager.Remove<Delegates.get_ClipFps_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_ClipFps"), value);
        }

        public static event Delegates.set_ClipFps_NormalArgs set_ClipFps
        {
            add => HookEndpointManager.Add<Delegates.set_ClipFps_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_ClipFps"), value);
            remove => HookEndpointManager.Remove<Delegates.set_ClipFps_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "set_ClipFps"), value);
        }

        public static event On.tk2dAnimatedSprite.hook_Stop Stop
        {
            add => On.tk2dAnimatedSprite.Stop += value;
            remove => On.tk2dAnimatedSprite.Stop -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_StopAndResetFrame StopAndResetFrame
        {
            add => On.tk2dAnimatedSprite.StopAndResetFrame += value;
            remove => On.tk2dAnimatedSprite.StopAndResetFrame -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_isPlaying isPlaying
        {
            add => On.tk2dAnimatedSprite.isPlaying += value;
            remove => On.tk2dAnimatedSprite.isPlaying -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_IsPlaying_string IsPlaying_string
        {
            add => On.tk2dAnimatedSprite.IsPlaying_string += value;
            remove => On.tk2dAnimatedSprite.IsPlaying_string -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_IsPlaying_tk2dSpriteAnimationClip
            IsPlaying_tk2dSpriteAnimationClip
            {
                add => On.tk2dAnimatedSprite.IsPlaying_tk2dSpriteAnimationClip += value;
                remove => On.tk2dAnimatedSprite.IsPlaying_tk2dSpriteAnimationClip -= value;
            }

        public static event Delegates.get_Playing_NormalArgs get_Playing
        {
            add => HookEndpointManager.Add<Delegates.get_Playing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Playing"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Playing_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_Playing"), value);
        }

        public static event On.tk2dAnimatedSprite.hook_GetClipIdByName GetClipIdByName
        {
            add => On.tk2dAnimatedSprite.GetClipIdByName += value;
            remove => On.tk2dAnimatedSprite.GetClipIdByName -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_GetClipByName GetClipByName
        {
            add => On.tk2dAnimatedSprite.GetClipByName += value;
            remove => On.tk2dAnimatedSprite.GetClipByName -= value;
        }

        public static event Delegates.get_DefaultFps_NormalArgs get_DefaultFps
        {
            add => HookEndpointManager.Add<Delegates.get_DefaultFps_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_DefaultFps", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_DefaultFps_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(tk2dAnimatedSprite), "get_DefaultFps", false), value);
        }

        public static event On.tk2dAnimatedSprite.hook_Pause Pause
        {
            add => On.tk2dAnimatedSprite.Pause += value;
            remove => On.tk2dAnimatedSprite.Pause -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_Resume Resume
        {
            add => On.tk2dAnimatedSprite.Resume += value;
            remove => On.tk2dAnimatedSprite.Resume -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_SetFrame_int SetFrame_int
        {
            add => On.tk2dAnimatedSprite.SetFrame_int += value;
            remove => On.tk2dAnimatedSprite.SetFrame_int -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_SetFrame_int_bool SetFrame_int_bool
        {
            add => On.tk2dAnimatedSprite.SetFrame_int_bool += value;
            remove => On.tk2dAnimatedSprite.SetFrame_int_bool -= value;
        }

        public static event On.tk2dAnimatedSprite.hook_UpdateAnimation UpdateAnimation
        {
            add => On.tk2dAnimatedSprite.UpdateAnimation += value;
            remove => On.tk2dAnimatedSprite.UpdateAnimation -= value;
        }
    }
}