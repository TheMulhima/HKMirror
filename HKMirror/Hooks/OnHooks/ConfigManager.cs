using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ConfigManager class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnConfigManager
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_CameraShakeMultiplier()
        {
            if (!HookedList.Contains("get_CameraShakeMultiplier"))
            {
                HookedList.Add("get_CameraShakeMultiplier");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_CameraShakeMultiplier", false),
                    get_CameraShakeMultiplier);
            }
        }

        internal static event Delegates.get_CameraShakeMultiplier_BeforeArgs _beforeget_CameraShakeMultiplier;
        internal static event Delegates.get_CameraShakeMultiplier_AfterArgs _afterget_CameraShakeMultiplier;

        private static float get_CameraShakeMultiplier(Func<float> orig)
        {
            if (_beforeget_CameraShakeMultiplier != null)
                foreach (Delegates.get_CameraShakeMultiplier_BeforeArgs toInvoke in _beforeget_CameraShakeMultiplier
                             .GetInvocationList())
                    try
                    {
                        _beforeget_CameraShakeMultiplier?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_CameraShakeMultiplier != null)
                foreach (Delegates.get_CameraShakeMultiplier_AfterArgs toInvoke in _afterget_CameraShakeMultiplier
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_CameraShakeMultiplier.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_CameraShakeMultiplier()
        {
            if (!HookedList.Contains("set_CameraShakeMultiplier"))
            {
                HookedList.Add("set_CameraShakeMultiplier");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_CameraShakeMultiplier", false),
                    set_CameraShakeMultiplier);
            }
        }

        internal static event Delegates.set_CameraShakeMultiplier_BeforeArgs _beforeset_CameraShakeMultiplier;
        internal static event Delegates.set_CameraShakeMultiplier_AfterArgs _afterset_CameraShakeMultiplier;

        private static void set_CameraShakeMultiplier(Action<float> orig, float value)
        {
            Delegates.Params_set_CameraShakeMultiplier @params = new()
            {
                value = value
            };
            if (_beforeset_CameraShakeMultiplier != null)
                foreach (Delegates.set_CameraShakeMultiplier_BeforeArgs toInvoke in _beforeset_CameraShakeMultiplier
                             .GetInvocationList())
                    try
                    {
                        _beforeset_CameraShakeMultiplier?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_CameraShakeMultiplier != null)
                foreach (Delegates.set_CameraShakeMultiplier_AfterArgs toInvoke in _afterset_CameraShakeMultiplier
                             .GetInvocationList())
                    try
                    {
                        _afterset_CameraShakeMultiplier.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_ControllerRumbleMultiplier()
        {
            if (!HookedList.Contains("get_ControllerRumbleMultiplier"))
            {
                HookedList.Add("get_ControllerRumbleMultiplier");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_ControllerRumbleMultiplier", false),
                    get_ControllerRumbleMultiplier);
            }
        }

        internal static event Delegates.get_ControllerRumbleMultiplier_BeforeArgs _beforeget_ControllerRumbleMultiplier;
        internal static event Delegates.get_ControllerRumbleMultiplier_AfterArgs _afterget_ControllerRumbleMultiplier;

        private static float get_ControllerRumbleMultiplier(Func<float> orig)
        {
            if (_beforeget_ControllerRumbleMultiplier != null)
                foreach (Delegates.get_ControllerRumbleMultiplier_BeforeArgs toInvoke in
                         _beforeget_ControllerRumbleMultiplier.GetInvocationList())
                    try
                    {
                        _beforeget_ControllerRumbleMultiplier?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_ControllerRumbleMultiplier != null)
                foreach (Delegates.get_ControllerRumbleMultiplier_AfterArgs toInvoke in
                         _afterget_ControllerRumbleMultiplier.GetInvocationList())
                    try
                    {
                        retVal = _afterget_ControllerRumbleMultiplier.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_ControllerRumbleMultiplier()
        {
            if (!HookedList.Contains("set_ControllerRumbleMultiplier"))
            {
                HookedList.Add("set_ControllerRumbleMultiplier");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_ControllerRumbleMultiplier", false),
                    set_ControllerRumbleMultiplier);
            }
        }

        internal static event Delegates.set_ControllerRumbleMultiplier_BeforeArgs _beforeset_ControllerRumbleMultiplier;
        internal static event Delegates.set_ControllerRumbleMultiplier_AfterArgs _afterset_ControllerRumbleMultiplier;

        private static void set_ControllerRumbleMultiplier(Action<float> orig, float value)
        {
            Delegates.Params_set_ControllerRumbleMultiplier @params = new()
            {
                value = value
            };
            if (_beforeset_ControllerRumbleMultiplier != null)
                foreach (Delegates.set_ControllerRumbleMultiplier_BeforeArgs toInvoke in
                         _beforeset_ControllerRumbleMultiplier.GetInvocationList())
                    try
                    {
                        _beforeset_ControllerRumbleMultiplier?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_ControllerRumbleMultiplier != null)
                foreach (Delegates.set_ControllerRumbleMultiplier_AfterArgs toInvoke in
                         _afterset_ControllerRumbleMultiplier.GetInvocationList())
                    try
                    {
                        _afterset_ControllerRumbleMultiplier.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void Hookget_IsConfigFileSupported()
        {
            if (!HookedList.Contains("get_IsConfigFileSupported"))
            {
                HookedList.Add("get_IsConfigFileSupported");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_IsConfigFileSupported", false),
                    get_IsConfigFileSupported);
            }
        }

        internal static event Delegates.get_IsConfigFileSupported_BeforeArgs _beforeget_IsConfigFileSupported;
        internal static event Delegates.get_IsConfigFileSupported_AfterArgs _afterget_IsConfigFileSupported;

        private static bool get_IsConfigFileSupported(Func<bool> orig)
        {
            if (_beforeget_IsConfigFileSupported != null)
                foreach (Delegates.get_IsConfigFileSupported_BeforeArgs toInvoke in _beforeget_IsConfigFileSupported
                             .GetInvocationList())
                    try
                    {
                        _beforeget_IsConfigFileSupported?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsConfigFileSupported != null)
                foreach (Delegates.get_IsConfigFileSupported_AfterArgs toInvoke in _afterget_IsConfigFileSupported
                             .GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsConfigFileSupported.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookget_IsSavingConfig()
        {
            if (!HookedList.Contains("get_IsSavingConfig"))
            {
                HookedList.Add("get_IsSavingConfig");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_IsSavingConfig", false),
                    get_IsSavingConfig);
            }
        }

        internal static event Delegates.get_IsSavingConfig_BeforeArgs _beforeget_IsSavingConfig;
        internal static event Delegates.get_IsSavingConfig_AfterArgs _afterget_IsSavingConfig;

        private static bool get_IsSavingConfig(Func<bool> orig)
        {
            if (_beforeget_IsSavingConfig != null)
                foreach (Delegates.get_IsSavingConfig_BeforeArgs toInvoke in
                         _beforeget_IsSavingConfig.GetInvocationList())
                    try
                    {
                        _beforeget_IsSavingConfig?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            var retVal = orig();
            if (_afterget_IsSavingConfig != null)
                foreach (Delegates.get_IsSavingConfig_AfterArgs toInvoke in
                         _afterget_IsSavingConfig.GetInvocationList())
                    try
                    {
                        retVal = _afterget_IsSavingConfig.Invoke(retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookset_IsSavingConfig()
        {
            if (!HookedList.Contains("set_IsSavingConfig"))
            {
                HookedList.Add("set_IsSavingConfig");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_IsSavingConfig", false),
                    set_IsSavingConfig);
            }
        }

        internal static event Delegates.set_IsSavingConfig_BeforeArgs _beforeset_IsSavingConfig;
        internal static event Delegates.set_IsSavingConfig_AfterArgs _afterset_IsSavingConfig;

        private static void set_IsSavingConfig(Action<bool> orig, bool value)
        {
            Delegates.Params_set_IsSavingConfig @params = new()
            {
                value = value
            };
            if (_beforeset_IsSavingConfig != null)
                foreach (Delegates.set_IsSavingConfig_BeforeArgs toInvoke in
                         _beforeset_IsSavingConfig.GetInvocationList())
                    try
                    {
                        _beforeset_IsSavingConfig?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            value = @params.value;
            orig(value);
            if (_afterset_IsSavingConfig != null)
                foreach (Delegates.set_IsSavingConfig_AfterArgs toInvoke in
                         _afterset_IsSavingConfig.GetInvocationList())
                    try
                    {
                        _afterset_IsSavingConfig.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookInit()
        {
            if (!HookedList.Contains("Init"))
            {
                HookedList.Add("Init");
                On.ConfigManager.Init += Init;
            }
        }

        internal static event Delegates.Init_BeforeArgs _beforeInit;
        internal static event Delegates.Init_AfterArgs _afterInit;

        private static void Init(On.ConfigManager.orig_Init orig)
        {
            if (_beforeInit != null)
                foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
                    try
                    {
                        _beforeInit?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterInit != null)
                foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
                    try
                    {
                        _afterInit.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLoadConfig()
        {
            if (!HookedList.Contains("LoadConfig"))
            {
                HookedList.Add("LoadConfig");
                On.ConfigManager.LoadConfig += LoadConfig;
            }
        }

        internal static event Delegates.LoadConfig_BeforeArgs _beforeLoadConfig;
        internal static event Delegates.LoadConfig_AfterArgs _afterLoadConfig;

        private static void LoadConfig(On.ConfigManager.orig_LoadConfig orig)
        {
            if (_beforeLoadConfig != null)
                foreach (Delegates.LoadConfig_BeforeArgs toInvoke in _beforeLoadConfig.GetInvocationList())
                    try
                    {
                        _beforeLoadConfig?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterLoadConfig != null)
                foreach (Delegates.LoadConfig_AfterArgs toInvoke in _afterLoadConfig.GetInvocationList())
                    try
                    {
                        _afterLoadConfig.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSetDefaultLanguageSetting()
        {
            if (!HookedList.Contains("SetDefaultLanguageSetting"))
            {
                HookedList.Add("SetDefaultLanguageSetting");
                On.ConfigManager.SetDefaultLanguageSetting += SetDefaultLanguageSetting;
            }
        }

        internal static event Delegates.SetDefaultLanguageSetting_BeforeArgs _beforeSetDefaultLanguageSetting;
        internal static event Delegates.SetDefaultLanguageSetting_AfterArgs _afterSetDefaultLanguageSetting;

        private static void SetDefaultLanguageSetting(On.ConfigManager.orig_SetDefaultLanguageSetting orig)
        {
            if (_beforeSetDefaultLanguageSetting != null)
                foreach (Delegates.SetDefaultLanguageSetting_BeforeArgs toInvoke in _beforeSetDefaultLanguageSetting
                             .GetInvocationList())
                    try
                    {
                        _beforeSetDefaultLanguageSetting?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterSetDefaultLanguageSetting != null)
                foreach (Delegates.SetDefaultLanguageSetting_AfterArgs toInvoke in _afterSetDefaultLanguageSetting
                             .GetInvocationList())
                    try
                    {
                        _afterSetDefaultLanguageSetting.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSaveConfig()
        {
            if (!HookedList.Contains("SaveConfig"))
            {
                HookedList.Add("SaveConfig");
                On.ConfigManager.SaveConfig += SaveConfig;
            }
        }

        internal static event Delegates.SaveConfig_BeforeArgs _beforeSaveConfig;
        internal static event Delegates.SaveConfig_AfterArgs _afterSaveConfig;

        private static void SaveConfig(On.ConfigManager.orig_SaveConfig orig)
        {
            if (_beforeSaveConfig != null)
                foreach (Delegates.SaveConfig_BeforeArgs toInvoke in _beforeSaveConfig.GetInvocationList())
                    try
                    {
                        _beforeSaveConfig?.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            orig();
            if (_afterSaveConfig != null)
                foreach (Delegates.SaveConfig_AfterArgs toInvoke in _afterSaveConfig.GetInvocationList())
                    try
                    {
                        _afterSaveConfig.Invoke();
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookIsLanguageValid()
        {
            if (!HookedList.Contains("IsLanguageValid"))
            {
                HookedList.Add("IsLanguageValid");
                On.ConfigManager.IsLanguageValid += IsLanguageValid;
            }
        }

        internal static event Delegates.IsLanguageValid_BeforeArgs _beforeIsLanguageValid;
        internal static event Delegates.IsLanguageValid_AfterArgs _afterIsLanguageValid;

        private static bool IsLanguageValid(On.ConfigManager.orig_IsLanguageValid orig, string languageCode)
        {
            Delegates.Params_IsLanguageValid @params = new()
            {
                languageCode = languageCode
            };
            if (_beforeIsLanguageValid != null)
                foreach (Delegates.IsLanguageValid_BeforeArgs toInvoke in _beforeIsLanguageValid.GetInvocationList())
                    try
                    {
                        _beforeIsLanguageValid?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            languageCode = @params.languageCode;
            var retVal = orig(languageCode);
            if (_afterIsLanguageValid != null)
                foreach (Delegates.IsLanguageValid_AfterArgs toInvoke in _afterIsLanguageValid.GetInvocationList())
                    try
                    {
                        retVal = _afterIsLanguageValid.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate float get_CameraShakeMultiplier_AfterArgs(float ret);

        public delegate void get_CameraShakeMultiplier_BeforeArgs();

        public delegate float get_CameraShakeMultiplier_WithArgs(Func<float> orig);

        public delegate float get_ControllerRumbleMultiplier_AfterArgs(float ret);

        public delegate void get_ControllerRumbleMultiplier_BeforeArgs();

        public delegate float get_ControllerRumbleMultiplier_WithArgs(Func<float> orig);

        public delegate bool get_IsConfigFileSupported_AfterArgs(bool ret);

        public delegate void get_IsConfigFileSupported_BeforeArgs();

        public delegate bool get_IsConfigFileSupported_WithArgs(Func<bool> orig);

        public delegate bool get_IsSavingConfig_AfterArgs(bool ret);

        public delegate void get_IsSavingConfig_BeforeArgs();

        public delegate bool get_IsSavingConfig_WithArgs(Func<bool> orig);

        public delegate void Init_AfterArgs();

        public delegate void Init_BeforeArgs();

        public delegate void Init_WithArgs(Action orig);

        public delegate bool IsLanguageValid_AfterArgs(Params_IsLanguageValid args, bool ret);

        public delegate void IsLanguageValid_BeforeArgs(Params_IsLanguageValid args);

        public delegate bool IsLanguageValid_WithArgs(Func<string, bool> orig, string languageCode);

        public delegate void LoadConfig_AfterArgs();

        public delegate void LoadConfig_BeforeArgs();

        public delegate void LoadConfig_WithArgs(Action orig);

        public delegate void SaveConfig_AfterArgs();

        public delegate void SaveConfig_BeforeArgs();

        public delegate void SaveConfig_WithArgs(Action orig);

        public delegate void set_CameraShakeMultiplier_AfterArgs(Params_set_CameraShakeMultiplier args);

        public delegate void set_CameraShakeMultiplier_BeforeArgs(Params_set_CameraShakeMultiplier args);

        public delegate void set_CameraShakeMultiplier_WithArgs(Action<float> orig, float value);

        public delegate void set_ControllerRumbleMultiplier_AfterArgs(Params_set_ControllerRumbleMultiplier args);

        public delegate void set_ControllerRumbleMultiplier_BeforeArgs(Params_set_ControllerRumbleMultiplier args);

        public delegate void set_ControllerRumbleMultiplier_WithArgs(Action<float> orig, float value);

        public delegate void set_IsSavingConfig_AfterArgs(Params_set_IsSavingConfig args);

        public delegate void set_IsSavingConfig_BeforeArgs(Params_set_IsSavingConfig args);

        public delegate void set_IsSavingConfig_WithArgs(Action<bool> orig, bool value);

        public delegate void SetDefaultLanguageSetting_AfterArgs();

        public delegate void SetDefaultLanguageSetting_BeforeArgs();

        public delegate void SetDefaultLanguageSetting_WithArgs(Action orig);

        public sealed class Params_set_CameraShakeMultiplier
        {
            public float value;
        }

        public sealed class Params_set_ControllerRumbleMultiplier
        {
            public float value;
        }

        public sealed class Params_set_IsSavingConfig
        {
            public bool value;
        }

        public sealed class Params_IsLanguageValid
        {
            public string languageCode;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_CameraShakeMultiplier_BeforeArgs get_CameraShakeMultiplier
        {
            add
            {
                HookHandler._beforeget_CameraShakeMultiplier += value;
                HookHandler.Hookget_CameraShakeMultiplier();
            }
            remove => HookHandler._beforeget_CameraShakeMultiplier -= value;
        }

        public static event Delegates.set_CameraShakeMultiplier_BeforeArgs set_CameraShakeMultiplier
        {
            add
            {
                HookHandler._beforeset_CameraShakeMultiplier += value;
                HookHandler.Hookset_CameraShakeMultiplier();
            }
            remove => HookHandler._beforeset_CameraShakeMultiplier -= value;
        }

        public static event Delegates.get_ControllerRumbleMultiplier_BeforeArgs get_ControllerRumbleMultiplier
        {
            add
            {
                HookHandler._beforeget_ControllerRumbleMultiplier += value;
                HookHandler.Hookget_ControllerRumbleMultiplier();
            }
            remove => HookHandler._beforeget_ControllerRumbleMultiplier -= value;
        }

        public static event Delegates.set_ControllerRumbleMultiplier_BeforeArgs set_ControllerRumbleMultiplier
        {
            add
            {
                HookHandler._beforeset_ControllerRumbleMultiplier += value;
                HookHandler.Hookset_ControllerRumbleMultiplier();
            }
            remove => HookHandler._beforeset_ControllerRumbleMultiplier -= value;
        }

        public static event Delegates.get_IsConfigFileSupported_BeforeArgs get_IsConfigFileSupported
        {
            add
            {
                HookHandler._beforeget_IsConfigFileSupported += value;
                HookHandler.Hookget_IsConfigFileSupported();
            }
            remove => HookHandler._beforeget_IsConfigFileSupported -= value;
        }

        public static event Delegates.get_IsSavingConfig_BeforeArgs get_IsSavingConfig
        {
            add
            {
                HookHandler._beforeget_IsSavingConfig += value;
                HookHandler.Hookget_IsSavingConfig();
            }
            remove => HookHandler._beforeget_IsSavingConfig -= value;
        }

        public static event Delegates.set_IsSavingConfig_BeforeArgs set_IsSavingConfig
        {
            add
            {
                HookHandler._beforeset_IsSavingConfig += value;
                HookHandler.Hookset_IsSavingConfig();
            }
            remove => HookHandler._beforeset_IsSavingConfig -= value;
        }

        public static event Delegates.Init_BeforeArgs Init
        {
            add
            {
                HookHandler._beforeInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._beforeInit -= value;
        }

        public static event Delegates.LoadConfig_BeforeArgs LoadConfig
        {
            add
            {
                HookHandler._beforeLoadConfig += value;
                HookHandler.HookLoadConfig();
            }
            remove => HookHandler._beforeLoadConfig -= value;
        }

        public static event Delegates.SetDefaultLanguageSetting_BeforeArgs SetDefaultLanguageSetting
        {
            add
            {
                HookHandler._beforeSetDefaultLanguageSetting += value;
                HookHandler.HookSetDefaultLanguageSetting();
            }
            remove => HookHandler._beforeSetDefaultLanguageSetting -= value;
        }

        public static event Delegates.SaveConfig_BeforeArgs SaveConfig
        {
            add
            {
                HookHandler._beforeSaveConfig += value;
                HookHandler.HookSaveConfig();
            }
            remove => HookHandler._beforeSaveConfig -= value;
        }

        public static event Delegates.IsLanguageValid_BeforeArgs IsLanguageValid
        {
            add
            {
                HookHandler._beforeIsLanguageValid += value;
                HookHandler.HookIsLanguageValid();
            }
            remove => HookHandler._beforeIsLanguageValid -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_CameraShakeMultiplier_AfterArgs get_CameraShakeMultiplier
        {
            add
            {
                HookHandler._afterget_CameraShakeMultiplier += value;
                HookHandler.Hookget_CameraShakeMultiplier();
            }
            remove => HookHandler._afterget_CameraShakeMultiplier -= value;
        }

        public static event Delegates.set_CameraShakeMultiplier_AfterArgs set_CameraShakeMultiplier
        {
            add
            {
                HookHandler._afterset_CameraShakeMultiplier += value;
                HookHandler.Hookset_CameraShakeMultiplier();
            }
            remove => HookHandler._afterset_CameraShakeMultiplier -= value;
        }

        public static event Delegates.get_ControllerRumbleMultiplier_AfterArgs get_ControllerRumbleMultiplier
        {
            add
            {
                HookHandler._afterget_ControllerRumbleMultiplier += value;
                HookHandler.Hookget_ControllerRumbleMultiplier();
            }
            remove => HookHandler._afterget_ControllerRumbleMultiplier -= value;
        }

        public static event Delegates.set_ControllerRumbleMultiplier_AfterArgs set_ControllerRumbleMultiplier
        {
            add
            {
                HookHandler._afterset_ControllerRumbleMultiplier += value;
                HookHandler.Hookset_ControllerRumbleMultiplier();
            }
            remove => HookHandler._afterset_ControllerRumbleMultiplier -= value;
        }

        public static event Delegates.get_IsConfigFileSupported_AfterArgs get_IsConfigFileSupported
        {
            add
            {
                HookHandler._afterget_IsConfigFileSupported += value;
                HookHandler.Hookget_IsConfigFileSupported();
            }
            remove => HookHandler._afterget_IsConfigFileSupported -= value;
        }

        public static event Delegates.get_IsSavingConfig_AfterArgs get_IsSavingConfig
        {
            add
            {
                HookHandler._afterget_IsSavingConfig += value;
                HookHandler.Hookget_IsSavingConfig();
            }
            remove => HookHandler._afterget_IsSavingConfig -= value;
        }

        public static event Delegates.set_IsSavingConfig_AfterArgs set_IsSavingConfig
        {
            add
            {
                HookHandler._afterset_IsSavingConfig += value;
                HookHandler.Hookset_IsSavingConfig();
            }
            remove => HookHandler._afterset_IsSavingConfig -= value;
        }

        public static event Delegates.Init_AfterArgs Init
        {
            add
            {
                HookHandler._afterInit += value;
                HookHandler.HookInit();
            }
            remove => HookHandler._afterInit -= value;
        }

        public static event Delegates.LoadConfig_AfterArgs LoadConfig
        {
            add
            {
                HookHandler._afterLoadConfig += value;
                HookHandler.HookLoadConfig();
            }
            remove => HookHandler._afterLoadConfig -= value;
        }

        public static event Delegates.SetDefaultLanguageSetting_AfterArgs SetDefaultLanguageSetting
        {
            add
            {
                HookHandler._afterSetDefaultLanguageSetting += value;
                HookHandler.HookSetDefaultLanguageSetting();
            }
            remove => HookHandler._afterSetDefaultLanguageSetting -= value;
        }

        public static event Delegates.SaveConfig_AfterArgs SaveConfig
        {
            add
            {
                HookHandler._afterSaveConfig += value;
                HookHandler.HookSaveConfig();
            }
            remove => HookHandler._afterSaveConfig -= value;
        }

        public static event Delegates.IsLanguageValid_AfterArgs IsLanguageValid
        {
            add
            {
                HookHandler._afterIsLanguageValid += value;
                HookHandler.HookIsLanguageValid();
            }
            remove => HookHandler._afterIsLanguageValid -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_CameraShakeMultiplier_WithArgs get_CameraShakeMultiplier
        {
            add => HookEndpointManager.Add<Delegates.get_CameraShakeMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_CameraShakeMultiplier", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_CameraShakeMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_CameraShakeMultiplier", false), value);
        }

        public static event Delegates.set_CameraShakeMultiplier_WithArgs set_CameraShakeMultiplier
        {
            add => HookEndpointManager.Add<Delegates.set_CameraShakeMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_CameraShakeMultiplier", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_CameraShakeMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_CameraShakeMultiplier", false), value);
        }

        public static event Delegates.get_ControllerRumbleMultiplier_WithArgs get_ControllerRumbleMultiplier
        {
            add => HookEndpointManager.Add<Delegates.get_ControllerRumbleMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_ControllerRumbleMultiplier", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_ControllerRumbleMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_ControllerRumbleMultiplier", false), value);
        }

        public static event Delegates.set_ControllerRumbleMultiplier_WithArgs set_ControllerRumbleMultiplier
        {
            add => HookEndpointManager.Add<Delegates.set_ControllerRumbleMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_ControllerRumbleMultiplier", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_ControllerRumbleMultiplier_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_ControllerRumbleMultiplier", false), value);
        }

        public static event Delegates.get_IsConfigFileSupported_WithArgs get_IsConfigFileSupported
        {
            add => HookEndpointManager.Add<Delegates.get_IsConfigFileSupported_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_IsConfigFileSupported", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsConfigFileSupported_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_IsConfigFileSupported", false), value);
        }

        public static event Delegates.get_IsSavingConfig_WithArgs get_IsSavingConfig
        {
            add => HookEndpointManager.Add<Delegates.get_IsSavingConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_IsSavingConfig", false), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSavingConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "get_IsSavingConfig", false), value);
        }

        public static event Delegates.set_IsSavingConfig_WithArgs set_IsSavingConfig
        {
            add => HookEndpointManager.Add<Delegates.set_IsSavingConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_IsSavingConfig", false), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsSavingConfig_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ConfigManager), "set_IsSavingConfig", false), value);
        }

        public static event On.ConfigManager.hook_Init Init
        {
            add => On.ConfigManager.Init += value;
            remove => On.ConfigManager.Init -= value;
        }

        public static event On.ConfigManager.hook_LoadConfig LoadConfig
        {
            add => On.ConfigManager.LoadConfig += value;
            remove => On.ConfigManager.LoadConfig -= value;
        }

        public static event On.ConfigManager.hook_SetDefaultLanguageSetting SetDefaultLanguageSetting
        {
            add => On.ConfigManager.SetDefaultLanguageSetting += value;
            remove => On.ConfigManager.SetDefaultLanguageSetting -= value;
        }

        public static event On.ConfigManager.hook_SaveConfig SaveConfig
        {
            add => On.ConfigManager.SaveConfig += value;
            remove => On.ConfigManager.SaveConfig -= value;
        }

        public static event On.ConfigManager.hook_IsLanguageValid IsLanguageValid
        {
            add => On.ConfigManager.IsLanguageValid += value;
            remove => On.ConfigManager.IsLanguageValid -= value;
        }
    }
}