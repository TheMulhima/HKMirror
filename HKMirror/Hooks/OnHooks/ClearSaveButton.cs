using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ClearSaveButton class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnClearSaveButton
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookOnSubmit()
        {
            if (!HookedList.Contains("OnSubmit"))
            {
                HookedList.Add("OnSubmit");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnSubmit"), OnSubmit);
            }
        }

        internal static event Delegates.OnSubmit_BeforeArgs _beforeOnSubmit;
        internal static event Delegates.OnSubmit_AfterArgs _afterOnSubmit;

        private static void OnSubmit(Action<ClearSaveButton, BaseEventData> orig, ClearSaveButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSubmit @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSubmit != null)
                foreach (Delegates.OnSubmit_BeforeArgs toInvoke in _beforeOnSubmit.GetInvocationList())
                    try
                    {
                        _beforeOnSubmit?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSubmit != null)
                foreach (Delegates.OnSubmit_AfterArgs toInvoke in _afterOnSubmit.GetInvocationList())
                    try
                    {
                        _afterOnSubmit.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnPointerClick()
        {
            if (!HookedList.Contains("OnPointerClick"))
            {
                HookedList.Add("OnPointerClick");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnPointerClick"), OnPointerClick);
            }
        }

        internal static event Delegates.OnPointerClick_BeforeArgs _beforeOnPointerClick;
        internal static event Delegates.OnPointerClick_AfterArgs _afterOnPointerClick;

        private static void OnPointerClick(Action<ClearSaveButton, PointerEventData> orig, ClearSaveButton self,
            PointerEventData eventData)
        {
            Delegates.Params_OnPointerClick @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnPointerClick != null)
                foreach (Delegates.OnPointerClick_BeforeArgs toInvoke in _beforeOnPointerClick.GetInvocationList())
                    try
                    {
                        _beforeOnPointerClick?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnPointerClick != null)
                foreach (Delegates.OnPointerClick_AfterArgs toInvoke in _afterOnPointerClick.GetInvocationList())
                    try
                    {
                        _afterOnPointerClick.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnSelect"), OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_AfterArgs _afterOnSelect;

        private static void OnSelect(Action<ClearSaveButton, BaseEventData> orig, ClearSaveButton self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            if (_beforeOnSelect != null)
                foreach (Delegates.OnSelect_BeforeArgs toInvoke in _beforeOnSelect.GetInvocationList())
                    try
                    {
                        _beforeOnSelect?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null)
                foreach (Delegates.OnSelect_AfterArgs toInvoke in _afterOnSelect.GetInvocationList())
                    try
                    {
                        _afterOnSelect.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookSelectAfterFrame()
        {
            if (!HookedList.Contains("SelectAfterFrame"))
            {
                HookedList.Add("SelectAfterFrame");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "SelectAfterFrame"), SelectAfterFrame);
            }
        }

        internal static event Delegates.SelectAfterFrame_BeforeArgs _beforeSelectAfterFrame;

        private static IEnumerator SelectAfterFrame(Func<ClearSaveButton, GameObject, IEnumerator> orig,
            ClearSaveButton self, GameObject gameObject)
        {
            Delegates.Params_SelectAfterFrame @params = new()
            {
                self = self, gameObject = gameObject
            };
            if (_beforeSelectAfterFrame != null)
                foreach (Delegates.SelectAfterFrame_BeforeArgs toInvoke in _beforeSelectAfterFrame.GetInvocationList())
                    try
                    {
                        _beforeSelectAfterFrame?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            gameObject = @params.gameObject;
            return orig(self, gameObject);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void OnPointerClick_AfterArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_BeforeArgs(Params_OnPointerClick args);

        public delegate void OnPointerClick_WithArgs(Action<ClearSaveButton, PointerEventData> orig,
            ClearSaveButton self, PointerEventData eventData);

        public delegate void OnSelect_AfterArgs(Params_OnSelect args);

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_WithArgs(Action<ClearSaveButton, BaseEventData> orig, ClearSaveButton self,
            BaseEventData eventData);

        public delegate void OnSubmit_AfterArgs(Params_OnSubmit args);

        public delegate void OnSubmit_BeforeArgs(Params_OnSubmit args);

        public delegate void OnSubmit_WithArgs(Action<ClearSaveButton, BaseEventData> orig, ClearSaveButton self,
            BaseEventData eventData);

        public delegate IEnumerator SelectAfterFrame_AfterArgs(Params_SelectAfterFrame args, IEnumerator ret);

        public delegate void SelectAfterFrame_BeforeArgs(Params_SelectAfterFrame args);

        public delegate IEnumerator SelectAfterFrame_WithArgs(Func<ClearSaveButton, GameObject, IEnumerator> orig,
            ClearSaveButton self, GameObject gameObject);

        public sealed class Params_OnSubmit
        {
            public BaseEventData eventData;
            public ClearSaveButton self;
        }

        public sealed class Params_OnPointerClick
        {
            public PointerEventData eventData;
            public ClearSaveButton self;
        }

        public sealed class Params_OnSelect
        {
            public BaseEventData eventData;
            public ClearSaveButton self;
        }

        public sealed class Params_SelectAfterFrame
        {
            public GameObject gameObject;
            public ClearSaveButton self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.OnSubmit_BeforeArgs OnSubmit
        {
            add
            {
                HookHandler._beforeOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._beforeOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_BeforeArgs OnPointerClick
        {
            add
            {
                HookHandler._beforeOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._beforeOnPointerClick -= value;
        }

        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }

        public static event Delegates.SelectAfterFrame_BeforeArgs SelectAfterFrame
        {
            add
            {
                HookHandler._beforeSelectAfterFrame += value;
                HookHandler.HookSelectAfterFrame();
            }
            remove => HookHandler._beforeSelectAfterFrame -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.OnSubmit_AfterArgs OnSubmit
        {
            add
            {
                HookHandler._afterOnSubmit += value;
                HookHandler.HookOnSubmit();
            }
            remove => HookHandler._afterOnSubmit -= value;
        }

        public static event Delegates.OnPointerClick_AfterArgs OnPointerClick
        {
            add
            {
                HookHandler._afterOnPointerClick += value;
                HookHandler.HookOnPointerClick();
            }
            remove => HookHandler._afterOnPointerClick -= value;
        }

        public static event Delegates.OnSelect_AfterArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.OnSubmit_WithArgs OnSubmit
        {
            add => HookEndpointManager.Add<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnSubmit"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSubmit_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnSubmit"), value);
        }

        public static event Delegates.OnPointerClick_WithArgs OnPointerClick
        {
            add => HookEndpointManager.Add<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnPointerClick"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPointerClick_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnPointerClick"), value);
        }

        public static event Delegates.OnSelect_WithArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "OnSelect"), value);
        }

        public static event Delegates.SelectAfterFrame_WithArgs SelectAfterFrame
        {
            add => HookEndpointManager.Add<Delegates.SelectAfterFrame_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "SelectAfterFrame"), value);
            remove => HookEndpointManager.Remove<Delegates.SelectAfterFrame_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ClearSaveButton), "SelectAfterFrame"), value);
        }
    }
}