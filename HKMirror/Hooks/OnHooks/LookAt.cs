using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for LookAt class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLookAt
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "Reset", true),
                    Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_AfterArgs _afterReset;

        private static void Reset(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            if (_beforeReset != null)
            {
                foreach (Delegates.Reset_BeforeArgs toInvoke in _beforeReset.GetInvocationList())
                {
                    try
                    {
                        _beforeReset?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterReset != null)
            {
                foreach (Delegates.Reset_AfterArgs toInvoke in _afterReset.GetInvocationList())
                {
                    try
                    {
                        _afterReset.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnPreprocess()
        {
            if (!HookedList.Contains("OnPreprocess"))
            {
                HookedList.Add("OnPreprocess");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnPreprocess", true),
                    OnPreprocess);
            }
        }

        internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
        internal static event Delegates.OnPreprocess_AfterArgs _afterOnPreprocess;

        private static void OnPreprocess(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_OnPreprocess @params = new()
            {
                self = self
            };
            if (_beforeOnPreprocess != null)
            {
                foreach (Delegates.OnPreprocess_BeforeArgs toInvoke in _beforeOnPreprocess.GetInvocationList())
                {
                    try
                    {
                        _beforeOnPreprocess?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnPreprocess != null)
            {
                foreach (Delegates.OnPreprocess_AfterArgs toInvoke in _afterOnPreprocess.GetInvocationList())
                {
                    try
                    {
                        _afterOnPreprocess.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnEnter", true),
                    OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_AfterArgs _afterOnEnter;

        private static void OnEnter(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            if (_beforeOnEnter != null)
            {
                foreach (Delegates.OnEnter_BeforeArgs toInvoke in _beforeOnEnter.GetInvocationList())
                {
                    try
                    {
                        _beforeOnEnter?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnEnter != null)
            {
                foreach (Delegates.OnEnter_AfterArgs toInvoke in _afterOnEnter.GetInvocationList())
                {
                    try
                    {
                        _afterOnEnter.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookOnLateUpdate()
        {
            if (!HookedList.Contains("OnLateUpdate"))
            {
                HookedList.Add("OnLateUpdate");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnLateUpdate", true),
                    OnLateUpdate);
            }
        }

        internal static event Delegates.OnLateUpdate_BeforeArgs _beforeOnLateUpdate;
        internal static event Delegates.OnLateUpdate_AfterArgs _afterOnLateUpdate;

        private static void OnLateUpdate(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_OnLateUpdate @params = new()
            {
                self = self
            };
            if (_beforeOnLateUpdate != null)
            {
                foreach (Delegates.OnLateUpdate_BeforeArgs toInvoke in _beforeOnLateUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeOnLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterOnLateUpdate != null)
            {
                foreach (Delegates.OnLateUpdate_AfterArgs toInvoke in _afterOnLateUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterOnLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookDoLookAt()
        {
            if (!HookedList.Contains("DoLookAt"))
            {
                HookedList.Add("DoLookAt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "DoLookAt", true),
                    DoLookAt);
            }
        }

        internal static event Delegates.DoLookAt_BeforeArgs _beforeDoLookAt;
        internal static event Delegates.DoLookAt_AfterArgs _afterDoLookAt;

        private static void DoLookAt(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_DoLookAt @params = new()
            {
                self = self
            };
            if (_beforeDoLookAt != null)
            {
                foreach (Delegates.DoLookAt_BeforeArgs toInvoke in _beforeDoLookAt.GetInvocationList())
                {
                    try
                    {
                        _beforeDoLookAt?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            orig(self);
            if (_afterDoLookAt != null)
            {
                foreach (Delegates.DoLookAt_AfterArgs toInvoke in _afterDoLookAt.GetInvocationList())
                {
                    try
                    {
                        _afterDoLookAt.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdateLookAtPosition()
        {
            if (!HookedList.Contains("UpdateLookAtPosition"))
            {
                HookedList.Add("UpdateLookAtPosition");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "UpdateLookAtPosition",
                        true), UpdateLookAtPosition);
            }
        }

        internal static event Delegates.UpdateLookAtPosition_BeforeArgs _beforeUpdateLookAtPosition;
        internal static event Delegates.UpdateLookAtPosition_AfterArgs _afterUpdateLookAtPosition;

        private static bool UpdateLookAtPosition(Func<HutongGames.PlayMaker.Actions.LookAt, bool> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_UpdateLookAtPosition @params = new()
            {
                self = self
            };
            if (_beforeUpdateLookAtPosition != null)
            {
                foreach (Delegates.UpdateLookAtPosition_BeforeArgs toInvoke in _beforeUpdateLookAtPosition
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeUpdateLookAtPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterUpdateLookAtPosition != null)
            {
                foreach (Delegates.UpdateLookAtPosition_AfterArgs toInvoke in _afterUpdateLookAtPosition
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterUpdateLookAtPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetLookAtPosition()
        {
            if (!HookedList.Contains("GetLookAtPosition"))
            {
                HookedList.Add("GetLookAtPosition");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "GetLookAtPosition",
                        true), GetLookAtPosition);
            }
        }

        internal static event Delegates.GetLookAtPosition_BeforeArgs _beforeGetLookAtPosition;
        internal static event Delegates.GetLookAtPosition_AfterArgs _afterGetLookAtPosition;

        private static UnityEngine.Vector3 GetLookAtPosition(
            Func<HutongGames.PlayMaker.Actions.LookAt, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_GetLookAtPosition @params = new()
            {
                self = self
            };
            if (_beforeGetLookAtPosition != null)
            {
                foreach (Delegates.GetLookAtPosition_BeforeArgs toInvoke in
                         _beforeGetLookAtPosition.GetInvocationList())
                {
                    try
                    {
                        _beforeGetLookAtPosition?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetLookAtPosition != null)
            {
                foreach (Delegates.GetLookAtPosition_AfterArgs toInvoke in _afterGetLookAtPosition.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetLookAtPosition.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookGetLookAtPositionWithVertical()
        {
            if (!HookedList.Contains("GetLookAtPositionWithVertical"))
            {
                HookedList.Add("GetLookAtPositionWithVertical");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt),
                        "GetLookAtPositionWithVertical", true), GetLookAtPositionWithVertical);
            }
        }

        internal static event Delegates.GetLookAtPositionWithVertical_BeforeArgs _beforeGetLookAtPositionWithVertical;
        internal static event Delegates.GetLookAtPositionWithVertical_AfterArgs _afterGetLookAtPositionWithVertical;

        private static UnityEngine.Vector3 GetLookAtPositionWithVertical(
            Func<HutongGames.PlayMaker.Actions.LookAt, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.LookAt self)
        {
            Delegates.Params_GetLookAtPositionWithVertical @params = new()
            {
                self = self
            };
            if (_beforeGetLookAtPositionWithVertical != null)
            {
                foreach (Delegates.GetLookAtPositionWithVertical_BeforeArgs toInvoke in
                         _beforeGetLookAtPositionWithVertical.GetInvocationList())
                {
                    try
                    {
                        _beforeGetLookAtPositionWithVertical?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterGetLookAtPositionWithVertical != null)
            {
                foreach (Delegates.GetLookAtPositionWithVertical_AfterArgs toInvoke in
                         _afterGetLookAtPositionWithVertical.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetLookAtPositionWithVertical.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_Reset
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_AfterArgs(Params_Reset args);

        public delegate void Reset_WithArgs(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_OnPreprocess
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_AfterArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_WithArgs(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_OnEnter
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_AfterArgs(Params_OnEnter args);

        public delegate void OnEnter_WithArgs(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_OnLateUpdate
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void OnLateUpdate_BeforeArgs(Params_OnLateUpdate args);

        public delegate void OnLateUpdate_AfterArgs(Params_OnLateUpdate args);

        public delegate void OnLateUpdate_WithArgs(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_DoLookAt
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void DoLookAt_BeforeArgs(Params_DoLookAt args);

        public delegate void DoLookAt_AfterArgs(Params_DoLookAt args);

        public delegate void DoLookAt_WithArgs(Action<HutongGames.PlayMaker.Actions.LookAt> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_UpdateLookAtPosition
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void UpdateLookAtPosition_BeforeArgs(Params_UpdateLookAtPosition args);

        public delegate bool UpdateLookAtPosition_AfterArgs(Params_UpdateLookAtPosition args, bool ret);

        public delegate bool UpdateLookAtPosition_WithArgs(Func<HutongGames.PlayMaker.Actions.LookAt, bool> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_GetLookAtPosition
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void GetLookAtPosition_BeforeArgs(Params_GetLookAtPosition args);

        public delegate UnityEngine.Vector3 GetLookAtPosition_AfterArgs(Params_GetLookAtPosition args,
            UnityEngine.Vector3 ret);

        public delegate UnityEngine.Vector3 GetLookAtPosition_WithArgs(
            Func<HutongGames.PlayMaker.Actions.LookAt, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.LookAt self);

        public sealed class Params_GetLookAtPositionWithVertical
        {
            public HutongGames.PlayMaker.Actions.LookAt self;
        }

        public delegate void GetLookAtPositionWithVertical_BeforeArgs(Params_GetLookAtPositionWithVertical args);

        public delegate UnityEngine.Vector3 GetLookAtPositionWithVertical_AfterArgs(
            Params_GetLookAtPositionWithVertical args, UnityEngine.Vector3 ret);

        public delegate UnityEngine.Vector3 GetLookAtPositionWithVertical_WithArgs(
            Func<HutongGames.PlayMaker.Actions.LookAt, UnityEngine.Vector3> orig,
            HutongGames.PlayMaker.Actions.LookAt self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
        {
            add
            {
                HookHandler._beforeOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._beforeOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnLateUpdate_BeforeArgs OnLateUpdate
        {
            add
            {
                HookHandler._beforeOnLateUpdate += value;
                HookHandler.HookOnLateUpdate();
            }
            remove => HookHandler._beforeOnLateUpdate -= value;
        }

        public static event Delegates.DoLookAt_BeforeArgs DoLookAt
        {
            add
            {
                HookHandler._beforeDoLookAt += value;
                HookHandler.HookDoLookAt();
            }
            remove => HookHandler._beforeDoLookAt -= value;
        }

        public static event Delegates.UpdateLookAtPosition_BeforeArgs UpdateLookAtPosition
        {
            add
            {
                HookHandler._beforeUpdateLookAtPosition += value;
                HookHandler.HookUpdateLookAtPosition();
            }
            remove => HookHandler._beforeUpdateLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPosition_BeforeArgs GetLookAtPosition
        {
            add
            {
                HookHandler._beforeGetLookAtPosition += value;
                HookHandler.HookGetLookAtPosition();
            }
            remove => HookHandler._beforeGetLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPositionWithVertical_BeforeArgs GetLookAtPositionWithVertical
        {
            add
            {
                HookHandler._beforeGetLookAtPositionWithVertical += value;
                HookHandler.HookGetLookAtPositionWithVertical();
            }
            remove => HookHandler._beforeGetLookAtPositionWithVertical -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_AfterArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnPreprocess_AfterArgs OnPreprocess
        {
            add
            {
                HookHandler._afterOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._afterOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_AfterArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnLateUpdate_AfterArgs OnLateUpdate
        {
            add
            {
                HookHandler._afterOnLateUpdate += value;
                HookHandler.HookOnLateUpdate();
            }
            remove => HookHandler._afterOnLateUpdate -= value;
        }

        public static event Delegates.DoLookAt_AfterArgs DoLookAt
        {
            add
            {
                HookHandler._afterDoLookAt += value;
                HookHandler.HookDoLookAt();
            }
            remove => HookHandler._afterDoLookAt -= value;
        }

        public static event Delegates.UpdateLookAtPosition_AfterArgs UpdateLookAtPosition
        {
            add
            {
                HookHandler._afterUpdateLookAtPosition += value;
                HookHandler.HookUpdateLookAtPosition();
            }
            remove => HookHandler._afterUpdateLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPosition_AfterArgs GetLookAtPosition
        {
            add
            {
                HookHandler._afterGetLookAtPosition += value;
                HookHandler.HookGetLookAtPosition();
            }
            remove => HookHandler._afterGetLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPositionWithVertical_AfterArgs GetLookAtPositionWithVertical
        {
            add
            {
                HookHandler._afterGetLookAtPositionWithVertical += value;
                HookHandler.HookGetLookAtPositionWithVertical();
            }
            remove => HookHandler._afterGetLookAtPositionWithVertical -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_WithArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "Reset", true), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "Reset", true), value);
        }

        public static event Delegates.OnPreprocess_WithArgs OnPreprocess
        {
            add => HookEndpointManager.Add<Delegates.OnPreprocess_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnPreprocess", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnPreprocess_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnPreprocess", true),
                value);
        }

        public static event Delegates.OnEnter_WithArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnEnter", true), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnEnter", true), value);
        }

        public static event Delegates.OnLateUpdate_WithArgs OnLateUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnLateUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnLateUpdate", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.OnLateUpdate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "OnLateUpdate", true),
                value);
        }

        public static event Delegates.DoLookAt_WithArgs DoLookAt
        {
            add => HookEndpointManager.Add<Delegates.DoLookAt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "DoLookAt", true), value);
            remove => HookEndpointManager.Remove<Delegates.DoLookAt_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "DoLookAt", true), value);
        }

        public static event Delegates.UpdateLookAtPosition_WithArgs UpdateLookAtPosition
        {
            add => HookEndpointManager.Add<Delegates.UpdateLookAtPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "UpdateLookAtPosition",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateLookAtPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "UpdateLookAtPosition",
                    true), value);
        }

        public static event Delegates.GetLookAtPosition_WithArgs GetLookAtPosition
        {
            add => HookEndpointManager.Add<Delegates.GetLookAtPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "GetLookAtPosition", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.GetLookAtPosition_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt), "GetLookAtPosition", true),
                value);
        }

        public static event Delegates.GetLookAtPositionWithVertical_WithArgs GetLookAtPositionWithVertical
        {
            add => HookEndpointManager.Add<Delegates.GetLookAtPositionWithVertical_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt),
                    "GetLookAtPositionWithVertical", true), value);
            remove => HookEndpointManager.Remove<Delegates.GetLookAtPositionWithVertical_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(HutongGames.PlayMaker.Actions.LookAt),
                    "GetLookAtPositionWithVertical", true), value);
        }
    }
}