using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for LookAt class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnLookAt
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookReset()
        {
            if (!HookedList.Contains("Reset"))
            {
                HookedList.Add("Reset");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "Reset"), Reset);
            }
        }

        internal static event Delegates.Reset_BeforeArgs _beforeReset;
        internal static event Delegates.Reset_NormalArgs _afterReset;

        private static void Reset(Action<LookAt> orig, LookAt self)
        {
            Delegates.Params_Reset @params = new()
            {
                self = self
            };
            _beforeReset?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterReset != null) _afterReset.Invoke(@params);
        }

        internal static void HookOnPreprocess()
        {
            if (!HookedList.Contains("OnPreprocess"))
            {
                HookedList.Add("OnPreprocess");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnPreprocess"), OnPreprocess);
            }
        }

        internal static event Delegates.OnPreprocess_BeforeArgs _beforeOnPreprocess;
        internal static event Delegates.OnPreprocess_NormalArgs _afterOnPreprocess;

        private static void OnPreprocess(Action<LookAt> orig, LookAt self)
        {
            Delegates.Params_OnPreprocess @params = new()
            {
                self = self
            };
            _beforeOnPreprocess?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnPreprocess != null) _afterOnPreprocess.Invoke(@params);
        }

        internal static void HookOnEnter()
        {
            if (!HookedList.Contains("OnEnter"))
            {
                HookedList.Add("OnEnter");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnEnter"), OnEnter);
            }
        }

        internal static event Delegates.OnEnter_BeforeArgs _beforeOnEnter;
        internal static event Delegates.OnEnter_NormalArgs _afterOnEnter;

        private static void OnEnter(Action<LookAt> orig, LookAt self)
        {
            Delegates.Params_OnEnter @params = new()
            {
                self = self
            };
            _beforeOnEnter?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnter != null) _afterOnEnter.Invoke(@params);
        }

        internal static void HookOnLateUpdate()
        {
            if (!HookedList.Contains("OnLateUpdate"))
            {
                HookedList.Add("OnLateUpdate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnLateUpdate"), OnLateUpdate);
            }
        }

        internal static event Delegates.OnLateUpdate_BeforeArgs _beforeOnLateUpdate;
        internal static event Delegates.OnLateUpdate_NormalArgs _afterOnLateUpdate;

        private static void OnLateUpdate(Action<LookAt> orig, LookAt self)
        {
            Delegates.Params_OnLateUpdate @params = new()
            {
                self = self
            };
            _beforeOnLateUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnLateUpdate != null) _afterOnLateUpdate.Invoke(@params);
        }

        internal static void HookDoLookAt()
        {
            if (!HookedList.Contains("DoLookAt"))
            {
                HookedList.Add("DoLookAt");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "DoLookAt"), DoLookAt);
            }
        }

        internal static event Delegates.DoLookAt_BeforeArgs _beforeDoLookAt;
        internal static event Delegates.DoLookAt_NormalArgs _afterDoLookAt;

        private static void DoLookAt(Action<LookAt> orig, LookAt self)
        {
            Delegates.Params_DoLookAt @params = new()
            {
                self = self
            };
            _beforeDoLookAt?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterDoLookAt != null) _afterDoLookAt.Invoke(@params);
        }

        internal static void HookUpdateLookAtPosition()
        {
            if (!HookedList.Contains("UpdateLookAtPosition"))
            {
                HookedList.Add("UpdateLookAtPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "UpdateLookAtPosition"), UpdateLookAtPosition);
            }
        }

        internal static event Delegates.UpdateLookAtPosition_BeforeArgs _beforeUpdateLookAtPosition;
        internal static event Delegates.UpdateLookAtPosition_NormalArgs _afterUpdateLookAtPosition;

        private static bool UpdateLookAtPosition(Func<LookAt, bool> orig, LookAt self)
        {
            Delegates.Params_UpdateLookAtPosition @params = new()
            {
                self = self
            };
            _beforeUpdateLookAtPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterUpdateLookAtPosition != null) retVal = _afterUpdateLookAtPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetLookAtPosition()
        {
            if (!HookedList.Contains("GetLookAtPosition"))
            {
                HookedList.Add("GetLookAtPosition");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "GetLookAtPosition"), GetLookAtPosition);
            }
        }

        internal static event Delegates.GetLookAtPosition_BeforeArgs _beforeGetLookAtPosition;
        internal static event Delegates.GetLookAtPosition_NormalArgs _afterGetLookAtPosition;

        private static Vector3 GetLookAtPosition(Func<LookAt, Vector3> orig, LookAt self)
        {
            Delegates.Params_GetLookAtPosition @params = new()
            {
                self = self
            };
            _beforeGetLookAtPosition?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetLookAtPosition != null) retVal = _afterGetLookAtPosition.Invoke(@params);
            return retVal;
        }

        internal static void HookGetLookAtPositionWithVertical()
        {
            if (!HookedList.Contains("GetLookAtPositionWithVertical"))
            {
                HookedList.Add("GetLookAtPositionWithVertical");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(LookAt), "GetLookAtPositionWithVertical"),
                    GetLookAtPositionWithVertical);
            }
        }

        internal static event Delegates.GetLookAtPositionWithVertical_BeforeArgs _beforeGetLookAtPositionWithVertical;
        internal static event Delegates.GetLookAtPositionWithVertical_NormalArgs _afterGetLookAtPositionWithVertical;

        private static Vector3 GetLookAtPositionWithVertical(Func<LookAt, Vector3> orig, LookAt self)
        {
            Delegates.Params_GetLookAtPositionWithVertical @params = new()
            {
                self = self
            };
            _beforeGetLookAtPositionWithVertical?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterGetLookAtPositionWithVertical != null)
                retVal = _afterGetLookAtPositionWithVertical.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void DoLookAt_BeforeArgs(Params_DoLookAt args);

        public delegate void DoLookAt_NormalArgs(Params_DoLookAt args);

        public delegate void GetLookAtPosition_BeforeArgs(Params_GetLookAtPosition args);

        public delegate Vector3 GetLookAtPosition_NormalArgs(Params_GetLookAtPosition args);

        public delegate void GetLookAtPositionWithVertical_BeforeArgs(Params_GetLookAtPositionWithVertical args);

        public delegate Vector3 GetLookAtPositionWithVertical_NormalArgs(Params_GetLookAtPositionWithVertical args);

        public delegate void OnEnter_BeforeArgs(Params_OnEnter args);

        public delegate void OnEnter_NormalArgs(Params_OnEnter args);

        public delegate void OnLateUpdate_BeforeArgs(Params_OnLateUpdate args);

        public delegate void OnLateUpdate_NormalArgs(Params_OnLateUpdate args);

        public delegate void OnPreprocess_BeforeArgs(Params_OnPreprocess args);

        public delegate void OnPreprocess_NormalArgs(Params_OnPreprocess args);

        public delegate void Reset_BeforeArgs(Params_Reset args);

        public delegate void Reset_NormalArgs(Params_Reset args);

        public delegate void UpdateLookAtPosition_BeforeArgs(Params_UpdateLookAtPosition args);

        public delegate bool UpdateLookAtPosition_NormalArgs(Params_UpdateLookAtPosition args);

        public sealed class Params_Reset
        {
            public LookAt self;
        }

        public sealed class Params_OnPreprocess
        {
            public LookAt self;
        }

        public sealed class Params_OnEnter
        {
            public LookAt self;
        }

        public sealed class Params_OnLateUpdate
        {
            public LookAt self;
        }

        public sealed class Params_DoLookAt
        {
            public LookAt self;
        }

        public sealed class Params_UpdateLookAtPosition
        {
            public LookAt self;
        }

        public sealed class Params_GetLookAtPosition
        {
            public LookAt self;
        }

        public sealed class Params_GetLookAtPositionWithVertical
        {
            public LookAt self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Reset_BeforeArgs Reset
        {
            add
            {
                HookHandler._beforeReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._beforeReset -= value;
        }

        public static event Delegates.OnPreprocess_BeforeArgs OnPreprocess
        {
            add
            {
                HookHandler._beforeOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._beforeOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_BeforeArgs OnEnter
        {
            add
            {
                HookHandler._beforeOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._beforeOnEnter -= value;
        }

        public static event Delegates.OnLateUpdate_BeforeArgs OnLateUpdate
        {
            add
            {
                HookHandler._beforeOnLateUpdate += value;
                HookHandler.HookOnLateUpdate();
            }
            remove => HookHandler._beforeOnLateUpdate -= value;
        }

        public static event Delegates.DoLookAt_BeforeArgs DoLookAt
        {
            add
            {
                HookHandler._beforeDoLookAt += value;
                HookHandler.HookDoLookAt();
            }
            remove => HookHandler._beforeDoLookAt -= value;
        }

        public static event Delegates.UpdateLookAtPosition_BeforeArgs UpdateLookAtPosition
        {
            add
            {
                HookHandler._beforeUpdateLookAtPosition += value;
                HookHandler.HookUpdateLookAtPosition();
            }
            remove => HookHandler._beforeUpdateLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPosition_BeforeArgs GetLookAtPosition
        {
            add
            {
                HookHandler._beforeGetLookAtPosition += value;
                HookHandler.HookGetLookAtPosition();
            }
            remove => HookHandler._beforeGetLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPositionWithVertical_BeforeArgs GetLookAtPositionWithVertical
        {
            add
            {
                HookHandler._beforeGetLookAtPositionWithVertical += value;
                HookHandler.HookGetLookAtPositionWithVertical();
            }
            remove => HookHandler._beforeGetLookAtPositionWithVertical -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add
            {
                HookHandler._afterReset += value;
                HookHandler.HookReset();
            }
            remove => HookHandler._afterReset -= value;
        }

        public static event Delegates.OnPreprocess_NormalArgs OnPreprocess
        {
            add
            {
                HookHandler._afterOnPreprocess += value;
                HookHandler.HookOnPreprocess();
            }
            remove => HookHandler._afterOnPreprocess -= value;
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add
            {
                HookHandler._afterOnEnter += value;
                HookHandler.HookOnEnter();
            }
            remove => HookHandler._afterOnEnter -= value;
        }

        public static event Delegates.OnLateUpdate_NormalArgs OnLateUpdate
        {
            add
            {
                HookHandler._afterOnLateUpdate += value;
                HookHandler.HookOnLateUpdate();
            }
            remove => HookHandler._afterOnLateUpdate -= value;
        }

        public static event Delegates.DoLookAt_NormalArgs DoLookAt
        {
            add
            {
                HookHandler._afterDoLookAt += value;
                HookHandler.HookDoLookAt();
            }
            remove => HookHandler._afterDoLookAt -= value;
        }

        public static event Delegates.UpdateLookAtPosition_NormalArgs UpdateLookAtPosition
        {
            add
            {
                HookHandler._afterUpdateLookAtPosition += value;
                HookHandler.HookUpdateLookAtPosition();
            }
            remove => HookHandler._afterUpdateLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPosition_NormalArgs GetLookAtPosition
        {
            add
            {
                HookHandler._afterGetLookAtPosition += value;
                HookHandler.HookGetLookAtPosition();
            }
            remove => HookHandler._afterGetLookAtPosition -= value;
        }

        public static event Delegates.GetLookAtPositionWithVertical_NormalArgs GetLookAtPositionWithVertical
        {
            add
            {
                HookHandler._afterGetLookAtPositionWithVertical += value;
                HookHandler.HookGetLookAtPositionWithVertical();
            }
            remove => HookHandler._afterGetLookAtPositionWithVertical -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.Reset_NormalArgs Reset
        {
            add => HookEndpointManager.Add<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "Reset"), value);
            remove => HookEndpointManager.Remove<Delegates.Reset_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "Reset"), value);
        }

        public static event Delegates.OnPreprocess_NormalArgs OnPreprocess
        {
            add => HookEndpointManager.Add<Delegates.OnPreprocess_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnPreprocess"), value);
            remove => HookEndpointManager.Remove<Delegates.OnPreprocess_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnPreprocess"), value);
        }

        public static event Delegates.OnEnter_NormalArgs OnEnter
        {
            add => HookEndpointManager.Add<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnEnter"), value);
            remove => HookEndpointManager.Remove<Delegates.OnEnter_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnEnter"), value);
        }

        public static event Delegates.OnLateUpdate_NormalArgs OnLateUpdate
        {
            add => HookEndpointManager.Add<Delegates.OnLateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnLateUpdate"), value);
            remove => HookEndpointManager.Remove<Delegates.OnLateUpdate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "OnLateUpdate"), value);
        }

        public static event Delegates.DoLookAt_NormalArgs DoLookAt
        {
            add => HookEndpointManager.Add<Delegates.DoLookAt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "DoLookAt"), value);
            remove => HookEndpointManager.Remove<Delegates.DoLookAt_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "DoLookAt"), value);
        }

        public static event Delegates.UpdateLookAtPosition_NormalArgs UpdateLookAtPosition
        {
            add => HookEndpointManager.Add<Delegates.UpdateLookAtPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "UpdateLookAtPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.UpdateLookAtPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "UpdateLookAtPosition"), value);
        }

        public static event Delegates.GetLookAtPosition_NormalArgs GetLookAtPosition
        {
            add => HookEndpointManager.Add<Delegates.GetLookAtPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "GetLookAtPosition"), value);
            remove => HookEndpointManager.Remove<Delegates.GetLookAtPosition_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "GetLookAtPosition"), value);
        }

        public static event Delegates.GetLookAtPositionWithVertical_NormalArgs GetLookAtPositionWithVertical
        {
            add => HookEndpointManager.Add<Delegates.GetLookAtPositionWithVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "GetLookAtPositionWithVertical"), value);
            remove => HookEndpointManager.Remove<Delegates.GetLookAtPositionWithVertical_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(LookAt), "GetLookAtPositionWithVertical"), value);
        }
    }
}