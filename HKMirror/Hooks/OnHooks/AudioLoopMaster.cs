using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for AudioLoopMaster class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnAudioLoopMaster
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookStart()
{
if (!HookedList.Contains("Start"))
{
HookedList.Add("Start");
On.AudioLoopMaster.Start += Start;

}
}
internal static event Delegates.Start_BeforeArgs _beforeStart;
internal static event Delegates.Start_AfterArgs _afterStart;
private static void Start(On.AudioLoopMaster.orig_Start orig,AudioLoopMaster self)
{
Delegates.Params_Start @params = new() 
{
self = self
};
if (_beforeStart != null)
{
foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
{
try
{
_beforeStart?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterStart != null)
{
foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
{
try
{
_afterStart.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookUpdate()
{
if (!HookedList.Contains("Update"))
{
HookedList.Add("Update");
On.AudioLoopMaster.Update += Update;

}
}
internal static event Delegates.Update_BeforeArgs _beforeUpdate;
internal static event Delegates.Update_AfterArgs _afterUpdate;
private static void Update(On.AudioLoopMaster.orig_Update orig,AudioLoopMaster self)
{
Delegates.Params_Update @params = new() 
{
self = self
};
if (_beforeUpdate != null)
{
foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
{
try
{
_beforeUpdate?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterUpdate != null)
{
foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
{
try
{
_afterUpdate.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSyncAction()
{
if (!HookedList.Contains("SetSyncAction"))
{
HookedList.Add("SetSyncAction");
On.AudioLoopMaster.SetSyncAction += SetSyncAction;

}
}
internal static event Delegates.SetSyncAction_BeforeArgs _beforeSetSyncAction;
internal static event Delegates.SetSyncAction_AfterArgs _afterSetSyncAction;
private static void SetSyncAction(On.AudioLoopMaster.orig_SetSyncAction orig,AudioLoopMaster self,  bool set)
{
Delegates.Params_SetSyncAction @params = new() 
{
self = self
, set = set
};
if (_beforeSetSyncAction != null)
{
foreach (Delegates.SetSyncAction_BeforeArgs toInvoke in _beforeSetSyncAction.GetInvocationList())
{
try
{
_beforeSetSyncAction?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
set = @params.set;
orig(self, set);
if (_afterSetSyncAction != null)
{
foreach (Delegates.SetSyncAction_AfterArgs toInvoke in _afterSetSyncAction.GetInvocationList())
{
try
{
_afterSetSyncAction.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSyncSub()
{
if (!HookedList.Contains("SetSyncSub"))
{
HookedList.Add("SetSyncSub");
On.AudioLoopMaster.SetSyncSub += SetSyncSub;

}
}
internal static event Delegates.SetSyncSub_BeforeArgs _beforeSetSyncSub;
internal static event Delegates.SetSyncSub_AfterArgs _afterSetSyncSub;
private static void SetSyncSub(On.AudioLoopMaster.orig_SetSyncSub orig,AudioLoopMaster self,  bool set)
{
Delegates.Params_SetSyncSub @params = new() 
{
self = self
, set = set
};
if (_beforeSetSyncSub != null)
{
foreach (Delegates.SetSyncSub_BeforeArgs toInvoke in _beforeSetSyncSub.GetInvocationList())
{
try
{
_beforeSetSyncSub?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
set = @params.set;
orig(self, set);
if (_afterSetSyncSub != null)
{
foreach (Delegates.SetSyncSub_AfterArgs toInvoke in _afterSetSyncSub.GetInvocationList())
{
try
{
_afterSetSyncSub.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSyncMainAlt()
{
if (!HookedList.Contains("SetSyncMainAlt"))
{
HookedList.Add("SetSyncMainAlt");
On.AudioLoopMaster.SetSyncMainAlt += SetSyncMainAlt;

}
}
internal static event Delegates.SetSyncMainAlt_BeforeArgs _beforeSetSyncMainAlt;
internal static event Delegates.SetSyncMainAlt_AfterArgs _afterSetSyncMainAlt;
private static void SetSyncMainAlt(On.AudioLoopMaster.orig_SetSyncMainAlt orig,AudioLoopMaster self,  bool set)
{
Delegates.Params_SetSyncMainAlt @params = new() 
{
self = self
, set = set
};
if (_beforeSetSyncMainAlt != null)
{
foreach (Delegates.SetSyncMainAlt_BeforeArgs toInvoke in _beforeSetSyncMainAlt.GetInvocationList())
{
try
{
_beforeSetSyncMainAlt?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
set = @params.set;
orig(self, set);
if (_afterSetSyncMainAlt != null)
{
foreach (Delegates.SetSyncMainAlt_AfterArgs toInvoke in _afterSetSyncMainAlt.GetInvocationList())
{
try
{
_afterSetSyncMainAlt.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSyncTension()
{
if (!HookedList.Contains("SetSyncTension"))
{
HookedList.Add("SetSyncTension");
On.AudioLoopMaster.SetSyncTension += SetSyncTension;

}
}
internal static event Delegates.SetSyncTension_BeforeArgs _beforeSetSyncTension;
internal static event Delegates.SetSyncTension_AfterArgs _afterSetSyncTension;
private static void SetSyncTension(On.AudioLoopMaster.orig_SetSyncTension orig,AudioLoopMaster self,  bool set)
{
Delegates.Params_SetSyncTension @params = new() 
{
self = self
, set = set
};
if (_beforeSetSyncTension != null)
{
foreach (Delegates.SetSyncTension_BeforeArgs toInvoke in _beforeSetSyncTension.GetInvocationList())
{
try
{
_beforeSetSyncTension?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
set = @params.set;
orig(self, set);
if (_afterSetSyncTension != null)
{
foreach (Delegates.SetSyncTension_AfterArgs toInvoke in _afterSetSyncTension.GetInvocationList())
{
try
{
_afterSetSyncTension.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookSetSyncExtra()
{
if (!HookedList.Contains("SetSyncExtra"))
{
HookedList.Add("SetSyncExtra");
On.AudioLoopMaster.SetSyncExtra += SetSyncExtra;

}
}
internal static event Delegates.SetSyncExtra_BeforeArgs _beforeSetSyncExtra;
internal static event Delegates.SetSyncExtra_AfterArgs _afterSetSyncExtra;
private static void SetSyncExtra(On.AudioLoopMaster.orig_SetSyncExtra orig,AudioLoopMaster self,  bool set)
{
Delegates.Params_SetSyncExtra @params = new() 
{
self = self
, set = set
};
if (_beforeSetSyncExtra != null)
{
foreach (Delegates.SetSyncExtra_BeforeArgs toInvoke in _beforeSetSyncExtra.GetInvocationList())
{
try
{
_beforeSetSyncExtra?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
set = @params.set;
orig(self, set);
if (_afterSetSyncExtra != null)
{
foreach (Delegates.SetSyncExtra_AfterArgs toInvoke in _afterSetSyncExtra.GetInvocationList())
{
try
{
_afterSetSyncExtra.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Start
{
public AudioLoopMaster self;
}
public delegate void Start_BeforeArgs(Params_Start args);
public delegate void Start_AfterArgs(Params_Start args);
public delegate void Start_WithArgs (Action<AudioLoopMaster> orig, AudioLoopMaster self);
public sealed class Params_Update
{
public AudioLoopMaster self;
}
public delegate void Update_BeforeArgs(Params_Update args);
public delegate void Update_AfterArgs(Params_Update args);
public delegate void Update_WithArgs (Action<AudioLoopMaster> orig, AudioLoopMaster self);
public sealed class Params_SetSyncAction
{
public AudioLoopMaster self;
public bool set;
}
public delegate void SetSyncAction_BeforeArgs(Params_SetSyncAction args);
public delegate void SetSyncAction_AfterArgs(Params_SetSyncAction args);
public delegate void SetSyncAction_WithArgs (Action<AudioLoopMaster,  bool> orig, AudioLoopMaster self,  bool set);
public sealed class Params_SetSyncSub
{
public AudioLoopMaster self;
public bool set;
}
public delegate void SetSyncSub_BeforeArgs(Params_SetSyncSub args);
public delegate void SetSyncSub_AfterArgs(Params_SetSyncSub args);
public delegate void SetSyncSub_WithArgs (Action<AudioLoopMaster,  bool> orig, AudioLoopMaster self,  bool set);
public sealed class Params_SetSyncMainAlt
{
public AudioLoopMaster self;
public bool set;
}
public delegate void SetSyncMainAlt_BeforeArgs(Params_SetSyncMainAlt args);
public delegate void SetSyncMainAlt_AfterArgs(Params_SetSyncMainAlt args);
public delegate void SetSyncMainAlt_WithArgs (Action<AudioLoopMaster,  bool> orig, AudioLoopMaster self,  bool set);
public sealed class Params_SetSyncTension
{
public AudioLoopMaster self;
public bool set;
}
public delegate void SetSyncTension_BeforeArgs(Params_SetSyncTension args);
public delegate void SetSyncTension_AfterArgs(Params_SetSyncTension args);
public delegate void SetSyncTension_WithArgs (Action<AudioLoopMaster,  bool> orig, AudioLoopMaster self,  bool set);
public sealed class Params_SetSyncExtra
{
public AudioLoopMaster self;
public bool set;
}
public delegate void SetSyncExtra_BeforeArgs(Params_SetSyncExtra args);
public delegate void SetSyncExtra_AfterArgs(Params_SetSyncExtra args);
public delegate void SetSyncExtra_WithArgs (Action<AudioLoopMaster,  bool> orig, AudioLoopMaster self,  bool set);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Start_BeforeArgs Start
{
add
{

HookHandler._beforeStart += value;
HookHandler.HookStart();
}
remove => HookHandler._beforeStart -= value;
}
public static event Delegates.Update_BeforeArgs Update
{
add
{

HookHandler._beforeUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._beforeUpdate -= value;
}
public static event Delegates.SetSyncAction_BeforeArgs SetSyncAction
{
add
{

HookHandler._beforeSetSyncAction += value;
HookHandler.HookSetSyncAction();
}
remove => HookHandler._beforeSetSyncAction -= value;
}
public static event Delegates.SetSyncSub_BeforeArgs SetSyncSub
{
add
{

HookHandler._beforeSetSyncSub += value;
HookHandler.HookSetSyncSub();
}
remove => HookHandler._beforeSetSyncSub -= value;
}
public static event Delegates.SetSyncMainAlt_BeforeArgs SetSyncMainAlt
{
add
{

HookHandler._beforeSetSyncMainAlt += value;
HookHandler.HookSetSyncMainAlt();
}
remove => HookHandler._beforeSetSyncMainAlt -= value;
}
public static event Delegates.SetSyncTension_BeforeArgs SetSyncTension
{
add
{

HookHandler._beforeSetSyncTension += value;
HookHandler.HookSetSyncTension();
}
remove => HookHandler._beforeSetSyncTension -= value;
}
public static event Delegates.SetSyncExtra_BeforeArgs SetSyncExtra
{
add
{

HookHandler._beforeSetSyncExtra += value;
HookHandler.HookSetSyncExtra();
}
remove => HookHandler._beforeSetSyncExtra -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Start_AfterArgs Start
{
add
{

HookHandler._afterStart += value;
HookHandler.HookStart();
}
remove => HookHandler._afterStart -= value;
}
public static event Delegates.Update_AfterArgs Update
{
add
{

HookHandler._afterUpdate += value;
HookHandler.HookUpdate();
}
remove => HookHandler._afterUpdate -= value;
}
public static event Delegates.SetSyncAction_AfterArgs SetSyncAction
{
add
{

HookHandler._afterSetSyncAction += value;
HookHandler.HookSetSyncAction();
}
remove => HookHandler._afterSetSyncAction -= value;
}
public static event Delegates.SetSyncSub_AfterArgs SetSyncSub
{
add
{

HookHandler._afterSetSyncSub += value;
HookHandler.HookSetSyncSub();
}
remove => HookHandler._afterSetSyncSub -= value;
}
public static event Delegates.SetSyncMainAlt_AfterArgs SetSyncMainAlt
{
add
{

HookHandler._afterSetSyncMainAlt += value;
HookHandler.HookSetSyncMainAlt();
}
remove => HookHandler._afterSetSyncMainAlt -= value;
}
public static event Delegates.SetSyncTension_AfterArgs SetSyncTension
{
add
{

HookHandler._afterSetSyncTension += value;
HookHandler.HookSetSyncTension();
}
remove => HookHandler._afterSetSyncTension -= value;
}
public static event Delegates.SetSyncExtra_AfterArgs SetSyncExtra
{
add
{

HookHandler._afterSetSyncExtra += value;
HookHandler.HookSetSyncExtra();
}
remove => HookHandler._afterSetSyncExtra -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.AudioLoopMaster.hook_Start Start
{
add => On.AudioLoopMaster.Start += value;
remove => On.AudioLoopMaster.Start -= value;
}
public static event On.AudioLoopMaster.hook_Update Update
{
add => On.AudioLoopMaster.Update += value;
remove => On.AudioLoopMaster.Update -= value;
}
public static event On.AudioLoopMaster.hook_SetSyncAction SetSyncAction
{
add => On.AudioLoopMaster.SetSyncAction += value;
remove => On.AudioLoopMaster.SetSyncAction -= value;
}
public static event On.AudioLoopMaster.hook_SetSyncSub SetSyncSub
{
add => On.AudioLoopMaster.SetSyncSub += value;
remove => On.AudioLoopMaster.SetSyncSub -= value;
}
public static event On.AudioLoopMaster.hook_SetSyncMainAlt SetSyncMainAlt
{
add => On.AudioLoopMaster.SetSyncMainAlt += value;
remove => On.AudioLoopMaster.SetSyncMainAlt -= value;
}
public static event On.AudioLoopMaster.hook_SetSyncTension SetSyncTension
{
add => On.AudioLoopMaster.SetSyncTension += value;
remove => On.AudioLoopMaster.SetSyncTension -= value;
}
public static event On.AudioLoopMaster.hook_SetSyncExtra SetSyncExtra
{
add => On.AudioLoopMaster.SetSyncExtra += value;
remove => On.AudioLoopMaster.SetSyncExtra -= value;
}
}

}
