using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for ScrollPaneSelector class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnScrollPaneSelector
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void Hookget_PaneRect()
{
if (!HookedList.Contains("get_PaneRect"))
{
HookedList.Add("get_PaneRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_PaneRect", true), get_PaneRect);

}
}
internal static event Delegates.get_PaneRect_BeforeArgs _beforeget_PaneRect;
internal static event Delegates.get_PaneRect_AfterArgs _afterget_PaneRect;
private static UnityEngine.RectTransform get_PaneRect(Func<Modding.Menu.Components.ScrollPaneSelector, UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self)
{
Delegates.Params_get_PaneRect @params = new() 
{
self = self
};
if (_beforeget_PaneRect != null)
{
foreach (Delegates.get_PaneRect_BeforeArgs toInvoke in _beforeget_PaneRect.GetInvocationList())
{
try
{
_beforeget_PaneRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_PaneRect != null)
{
foreach (Delegates.get_PaneRect_AfterArgs toInvoke in _afterget_PaneRect.GetInvocationList())
{
try
{
retVal = _afterget_PaneRect.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_PaneRect()
{
if (!HookedList.Contains("set_PaneRect"))
{
HookedList.Add("set_PaneRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_PaneRect", true), set_PaneRect);

}
}
internal static event Delegates.set_PaneRect_BeforeArgs _beforeset_PaneRect;
internal static event Delegates.set_PaneRect_AfterArgs _afterset_PaneRect;
private static void set_PaneRect(Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.RectTransform value)
{
Delegates.Params_set_PaneRect @params = new() 
{
self = self
, value = value
};
if (_beforeset_PaneRect != null)
{
foreach (Delegates.set_PaneRect_BeforeArgs toInvoke in _beforeset_PaneRect.GetInvocationList())
{
try
{
_beforeset_PaneRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_PaneRect != null)
{
foreach (Delegates.set_PaneRect_AfterArgs toInvoke in _afterset_PaneRect.GetInvocationList())
{
try
{
_afterset_PaneRect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_MaskRect()
{
if (!HookedList.Contains("get_MaskRect"))
{
HookedList.Add("get_MaskRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_MaskRect", true), get_MaskRect);

}
}
internal static event Delegates.get_MaskRect_BeforeArgs _beforeget_MaskRect;
internal static event Delegates.get_MaskRect_AfterArgs _afterget_MaskRect;
private static UnityEngine.RectTransform get_MaskRect(Func<Modding.Menu.Components.ScrollPaneSelector, UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self)
{
Delegates.Params_get_MaskRect @params = new() 
{
self = self
};
if (_beforeget_MaskRect != null)
{
foreach (Delegates.get_MaskRect_BeforeArgs toInvoke in _beforeget_MaskRect.GetInvocationList())
{
try
{
_beforeget_MaskRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_MaskRect != null)
{
foreach (Delegates.get_MaskRect_AfterArgs toInvoke in _afterget_MaskRect.GetInvocationList())
{
try
{
retVal = _afterget_MaskRect.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_MaskRect()
{
if (!HookedList.Contains("set_MaskRect"))
{
HookedList.Add("set_MaskRect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_MaskRect", true), set_MaskRect);

}
}
internal static event Delegates.set_MaskRect_BeforeArgs _beforeset_MaskRect;
internal static event Delegates.set_MaskRect_AfterArgs _afterset_MaskRect;
private static void set_MaskRect(Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.RectTransform value)
{
Delegates.Params_set_MaskRect @params = new() 
{
self = self
, value = value
};
if (_beforeset_MaskRect != null)
{
foreach (Delegates.set_MaskRect_BeforeArgs toInvoke in _beforeset_MaskRect.GetInvocationList())
{
try
{
_beforeset_MaskRect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_MaskRect != null)
{
foreach (Delegates.set_MaskRect_AfterArgs toInvoke in _afterset_MaskRect.GetInvocationList())
{
try
{
_afterset_MaskRect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_Scrollbar()
{
if (!HookedList.Contains("get_Scrollbar"))
{
HookedList.Add("get_Scrollbar");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_Scrollbar", true), get_Scrollbar);

}
}
internal static event Delegates.get_Scrollbar_BeforeArgs _beforeget_Scrollbar;
internal static event Delegates.get_Scrollbar_AfterArgs _afterget_Scrollbar;
private static UnityEngine.UI.Scrollbar get_Scrollbar(Func<Modding.Menu.Components.ScrollPaneSelector, UnityEngine.UI.Scrollbar> orig, Modding.Menu.Components.ScrollPaneSelector self)
{
Delegates.Params_get_Scrollbar @params = new() 
{
self = self
};
if (_beforeget_Scrollbar != null)
{
foreach (Delegates.get_Scrollbar_BeforeArgs toInvoke in _beforeget_Scrollbar.GetInvocationList())
{
try
{
_beforeget_Scrollbar?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_Scrollbar != null)
{
foreach (Delegates.get_Scrollbar_AfterArgs toInvoke in _afterget_Scrollbar.GetInvocationList())
{
try
{
retVal = _afterget_Scrollbar.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_Scrollbar()
{
if (!HookedList.Contains("set_Scrollbar"))
{
HookedList.Add("set_Scrollbar");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_Scrollbar", true), set_Scrollbar);

}
}
internal static event Delegates.set_Scrollbar_BeforeArgs _beforeset_Scrollbar;
internal static event Delegates.set_Scrollbar_AfterArgs _afterset_Scrollbar;
private static void set_Scrollbar(Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.UI.Scrollbar> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.UI.Scrollbar value)
{
Delegates.Params_set_Scrollbar @params = new() 
{
self = self
, value = value
};
if (_beforeset_Scrollbar != null)
{
foreach (Delegates.set_Scrollbar_BeforeArgs toInvoke in _beforeset_Scrollbar.GetInvocationList())
{
try
{
_beforeset_Scrollbar?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_Scrollbar != null)
{
foreach (Delegates.set_Scrollbar_AfterArgs toInvoke in _afterset_Scrollbar.GetInvocationList())
{
try
{
_afterset_Scrollbar.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void Hookget_SelectionPadding()
{
if (!HookedList.Contains("get_SelectionPadding"))
{
HookedList.Add("get_SelectionPadding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_SelectionPadding", true), get_SelectionPadding);

}
}
internal static event Delegates.get_SelectionPadding_BeforeArgs _beforeget_SelectionPadding;
internal static event Delegates.get_SelectionPadding_AfterArgs _afterget_SelectionPadding;
private static System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> get_SelectionPadding(Func<Modding.Menu.Components.ScrollPaneSelector, System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>>> orig, Modding.Menu.Components.ScrollPaneSelector self)
{
Delegates.Params_get_SelectionPadding @params = new() 
{
self = self
};
if (_beforeget_SelectionPadding != null)
{
foreach (Delegates.get_SelectionPadding_BeforeArgs toInvoke in _beforeget_SelectionPadding.GetInvocationList())
{
try
{
_beforeget_SelectionPadding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
var retVal = orig(self);
if (_afterget_SelectionPadding != null)
{
foreach (Delegates.get_SelectionPadding_AfterArgs toInvoke in _afterget_SelectionPadding.GetInvocationList())
{
try
{
retVal = _afterget_SelectionPadding.Invoke(@params, retVal);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
return retVal;
}
internal static void Hookset_SelectionPadding()
{
if (!HookedList.Contains("set_SelectionPadding"))
{
HookedList.Add("set_SelectionPadding");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_SelectionPadding", true), set_SelectionPadding);

}
}
internal static event Delegates.set_SelectionPadding_BeforeArgs _beforeset_SelectionPadding;
internal static event Delegates.set_SelectionPadding_AfterArgs _afterset_SelectionPadding;
private static void set_SelectionPadding(Action<Modding.Menu.Components.ScrollPaneSelector,  System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>>> orig, Modding.Menu.Components.ScrollPaneSelector self,  System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> value)
{
Delegates.Params_set_SelectionPadding @params = new() 
{
self = self
, value = value
};
if (_beforeset_SelectionPadding != null)
{
foreach (Delegates.set_SelectionPadding_BeforeArgs toInvoke in _beforeset_SelectionPadding.GetInvocationList())
{
try
{
_beforeset_SelectionPadding?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
value = @params.value;
orig(self, value);
if (_afterset_SelectionPadding != null)
{
foreach (Delegates.set_SelectionPadding_AfterArgs toInvoke in _afterset_SelectionPadding.GetInvocationList())
{
try
{
_afterset_SelectionPadding.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnSelect()
{
if (!HookedList.Contains("OnSelect"))
{
HookedList.Add("OnSelect");
new Hook(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "OnSelect", true), OnSelect);

}
}
internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
internal static event Delegates.OnSelect_AfterArgs _afterOnSelect;
private static void OnSelect(Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.EventSystems.BaseEventData> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.EventSystems.BaseEventData eventData)
{
Delegates.Params_OnSelect @params = new() 
{
self = self
, eventData = eventData
};
if (_beforeOnSelect != null)
{
foreach (Delegates.OnSelect_BeforeArgs toInvoke in _beforeOnSelect.GetInvocationList())
{
try
{
_beforeOnSelect?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
eventData = @params.eventData;
orig(self, eventData);
if (_afterOnSelect != null)
{
foreach (Delegates.OnSelect_AfterArgs toInvoke in _afterOnSelect.GetInvocationList())
{
try
{
_afterOnSelect.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_get_PaneRect
{
public Modding.Menu.Components.ScrollPaneSelector self;
}
public delegate void get_PaneRect_BeforeArgs(Params_get_PaneRect args);
public delegate UnityEngine.RectTransform get_PaneRect_AfterArgs(Params_get_PaneRect args, UnityEngine.RectTransform ret);
public delegate UnityEngine.RectTransform get_PaneRect_WithArgs (Func<Modding.Menu.Components.ScrollPaneSelector, UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self);
public sealed class Params_set_PaneRect
{
public Modding.Menu.Components.ScrollPaneSelector self;
public UnityEngine.RectTransform value;
}
public delegate void set_PaneRect_BeforeArgs(Params_set_PaneRect args);
public delegate void set_PaneRect_AfterArgs(Params_set_PaneRect args);
public delegate void set_PaneRect_WithArgs (Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.RectTransform value);
public sealed class Params_get_MaskRect
{
public Modding.Menu.Components.ScrollPaneSelector self;
}
public delegate void get_MaskRect_BeforeArgs(Params_get_MaskRect args);
public delegate UnityEngine.RectTransform get_MaskRect_AfterArgs(Params_get_MaskRect args, UnityEngine.RectTransform ret);
public delegate UnityEngine.RectTransform get_MaskRect_WithArgs (Func<Modding.Menu.Components.ScrollPaneSelector, UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self);
public sealed class Params_set_MaskRect
{
public Modding.Menu.Components.ScrollPaneSelector self;
public UnityEngine.RectTransform value;
}
public delegate void set_MaskRect_BeforeArgs(Params_set_MaskRect args);
public delegate void set_MaskRect_AfterArgs(Params_set_MaskRect args);
public delegate void set_MaskRect_WithArgs (Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.RectTransform> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.RectTransform value);
public sealed class Params_get_Scrollbar
{
public Modding.Menu.Components.ScrollPaneSelector self;
}
public delegate void get_Scrollbar_BeforeArgs(Params_get_Scrollbar args);
public delegate UnityEngine.UI.Scrollbar get_Scrollbar_AfterArgs(Params_get_Scrollbar args, UnityEngine.UI.Scrollbar ret);
public delegate UnityEngine.UI.Scrollbar get_Scrollbar_WithArgs (Func<Modding.Menu.Components.ScrollPaneSelector, UnityEngine.UI.Scrollbar> orig, Modding.Menu.Components.ScrollPaneSelector self);
public sealed class Params_set_Scrollbar
{
public Modding.Menu.Components.ScrollPaneSelector self;
public UnityEngine.UI.Scrollbar value;
}
public delegate void set_Scrollbar_BeforeArgs(Params_set_Scrollbar args);
public delegate void set_Scrollbar_AfterArgs(Params_set_Scrollbar args);
public delegate void set_Scrollbar_WithArgs (Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.UI.Scrollbar> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.UI.Scrollbar value);
public sealed class Params_get_SelectionPadding
{
public Modding.Menu.Components.ScrollPaneSelector self;
}
public delegate void get_SelectionPadding_BeforeArgs(Params_get_SelectionPadding args);
public delegate System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> get_SelectionPadding_AfterArgs(Params_get_SelectionPadding args, System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> ret);
public delegate System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> get_SelectionPadding_WithArgs (Func<Modding.Menu.Components.ScrollPaneSelector, System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>>> orig, Modding.Menu.Components.ScrollPaneSelector self);
public sealed class Params_set_SelectionPadding
{
public Modding.Menu.Components.ScrollPaneSelector self;
public System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> value;
}
public delegate void set_SelectionPadding_BeforeArgs(Params_set_SelectionPadding args);
public delegate void set_SelectionPadding_AfterArgs(Params_set_SelectionPadding args);
public delegate void set_SelectionPadding_WithArgs (Action<Modding.Menu.Components.ScrollPaneSelector,  System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>>> orig, Modding.Menu.Components.ScrollPaneSelector self,  System.Func<UnityEngine.RectTransform,System.ValueTuple<float,float>> value);
public sealed class Params_OnSelect
{
public Modding.Menu.Components.ScrollPaneSelector self;
public UnityEngine.EventSystems.BaseEventData eventData;
}
public delegate void OnSelect_BeforeArgs(Params_OnSelect args);
public delegate void OnSelect_AfterArgs(Params_OnSelect args);
public delegate void OnSelect_WithArgs (Action<Modding.Menu.Components.ScrollPaneSelector,  UnityEngine.EventSystems.BaseEventData> orig, Modding.Menu.Components.ScrollPaneSelector self,  UnityEngine.EventSystems.BaseEventData eventData);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.get_PaneRect_BeforeArgs get_PaneRect
{
add
{

HookHandler._beforeget_PaneRect += value;
HookHandler.Hookget_PaneRect();
}
remove => HookHandler._beforeget_PaneRect -= value;
}
public static event Delegates.set_PaneRect_BeforeArgs set_PaneRect
{
add
{

HookHandler._beforeset_PaneRect += value;
HookHandler.Hookset_PaneRect();
}
remove => HookHandler._beforeset_PaneRect -= value;
}
public static event Delegates.get_MaskRect_BeforeArgs get_MaskRect
{
add
{

HookHandler._beforeget_MaskRect += value;
HookHandler.Hookget_MaskRect();
}
remove => HookHandler._beforeget_MaskRect -= value;
}
public static event Delegates.set_MaskRect_BeforeArgs set_MaskRect
{
add
{

HookHandler._beforeset_MaskRect += value;
HookHandler.Hookset_MaskRect();
}
remove => HookHandler._beforeset_MaskRect -= value;
}
public static event Delegates.get_Scrollbar_BeforeArgs get_Scrollbar
{
add
{

HookHandler._beforeget_Scrollbar += value;
HookHandler.Hookget_Scrollbar();
}
remove => HookHandler._beforeget_Scrollbar -= value;
}
public static event Delegates.set_Scrollbar_BeforeArgs set_Scrollbar
{
add
{

HookHandler._beforeset_Scrollbar += value;
HookHandler.Hookset_Scrollbar();
}
remove => HookHandler._beforeset_Scrollbar -= value;
}
public static event Delegates.get_SelectionPadding_BeforeArgs get_SelectionPadding
{
add
{

HookHandler._beforeget_SelectionPadding += value;
HookHandler.Hookget_SelectionPadding();
}
remove => HookHandler._beforeget_SelectionPadding -= value;
}
public static event Delegates.set_SelectionPadding_BeforeArgs set_SelectionPadding
{
add
{

HookHandler._beforeset_SelectionPadding += value;
HookHandler.Hookset_SelectionPadding();
}
remove => HookHandler._beforeset_SelectionPadding -= value;
}
public static event Delegates.OnSelect_BeforeArgs OnSelect
{
add
{

HookHandler._beforeOnSelect += value;
HookHandler.HookOnSelect();
}
remove => HookHandler._beforeOnSelect -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.get_PaneRect_AfterArgs get_PaneRect
{
add
{

HookHandler._afterget_PaneRect += value;
HookHandler.Hookget_PaneRect();
}
remove => HookHandler._afterget_PaneRect -= value;
}
public static event Delegates.set_PaneRect_AfterArgs set_PaneRect
{
add
{

HookHandler._afterset_PaneRect += value;
HookHandler.Hookset_PaneRect();
}
remove => HookHandler._afterset_PaneRect -= value;
}
public static event Delegates.get_MaskRect_AfterArgs get_MaskRect
{
add
{

HookHandler._afterget_MaskRect += value;
HookHandler.Hookget_MaskRect();
}
remove => HookHandler._afterget_MaskRect -= value;
}
public static event Delegates.set_MaskRect_AfterArgs set_MaskRect
{
add
{

HookHandler._afterset_MaskRect += value;
HookHandler.Hookset_MaskRect();
}
remove => HookHandler._afterset_MaskRect -= value;
}
public static event Delegates.get_Scrollbar_AfterArgs get_Scrollbar
{
add
{

HookHandler._afterget_Scrollbar += value;
HookHandler.Hookget_Scrollbar();
}
remove => HookHandler._afterget_Scrollbar -= value;
}
public static event Delegates.set_Scrollbar_AfterArgs set_Scrollbar
{
add
{

HookHandler._afterset_Scrollbar += value;
HookHandler.Hookset_Scrollbar();
}
remove => HookHandler._afterset_Scrollbar -= value;
}
public static event Delegates.get_SelectionPadding_AfterArgs get_SelectionPadding
{
add
{

HookHandler._afterget_SelectionPadding += value;
HookHandler.Hookget_SelectionPadding();
}
remove => HookHandler._afterget_SelectionPadding -= value;
}
public static event Delegates.set_SelectionPadding_AfterArgs set_SelectionPadding
{
add
{

HookHandler._afterset_SelectionPadding += value;
HookHandler.Hookset_SelectionPadding();
}
remove => HookHandler._afterset_SelectionPadding -= value;
}
public static event Delegates.OnSelect_AfterArgs OnSelect
{
add
{

HookHandler._afterOnSelect += value;
HookHandler.HookOnSelect();
}
remove => HookHandler._afterOnSelect -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event Delegates.get_PaneRect_WithArgs get_PaneRect
{
add => HookEndpointManager.Add<Delegates.get_PaneRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_PaneRect", true), value);
remove => HookEndpointManager.Remove<Delegates.get_PaneRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_PaneRect", true), value);
}
public static event Delegates.set_PaneRect_WithArgs set_PaneRect
{
add => HookEndpointManager.Add<Delegates.set_PaneRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_PaneRect", true), value);
remove => HookEndpointManager.Remove<Delegates.set_PaneRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_PaneRect", true), value);
}
public static event Delegates.get_MaskRect_WithArgs get_MaskRect
{
add => HookEndpointManager.Add<Delegates.get_MaskRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_MaskRect", true), value);
remove => HookEndpointManager.Remove<Delegates.get_MaskRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_MaskRect", true), value);
}
public static event Delegates.set_MaskRect_WithArgs set_MaskRect
{
add => HookEndpointManager.Add<Delegates.set_MaskRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_MaskRect", true), value);
remove => HookEndpointManager.Remove<Delegates.set_MaskRect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_MaskRect", true), value);
}
public static event Delegates.get_Scrollbar_WithArgs get_Scrollbar
{
add => HookEndpointManager.Add<Delegates.get_Scrollbar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_Scrollbar", true), value);
remove => HookEndpointManager.Remove<Delegates.get_Scrollbar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_Scrollbar", true), value);
}
public static event Delegates.set_Scrollbar_WithArgs set_Scrollbar
{
add => HookEndpointManager.Add<Delegates.set_Scrollbar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_Scrollbar", true), value);
remove => HookEndpointManager.Remove<Delegates.set_Scrollbar_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_Scrollbar", true), value);
}
public static event Delegates.get_SelectionPadding_WithArgs get_SelectionPadding
{
add => HookEndpointManager.Add<Delegates.get_SelectionPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_SelectionPadding", true), value);
remove => HookEndpointManager.Remove<Delegates.get_SelectionPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "get_SelectionPadding", true), value);
}
public static event Delegates.set_SelectionPadding_WithArgs set_SelectionPadding
{
add => HookEndpointManager.Add<Delegates.set_SelectionPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_SelectionPadding", true), value);
remove => HookEndpointManager.Remove<Delegates.set_SelectionPadding_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "set_SelectionPadding", true), value);
}
public static event Delegates.OnSelect_WithArgs OnSelect
{
add => HookEndpointManager.Add<Delegates.OnSelect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "OnSelect", true), value);
remove => HookEndpointManager.Remove<Delegates.OnSelect_WithArgs>(ReflectionHelper.GetMethodInfo(typeof(Modding.Menu.Components.ScrollPaneSelector), "OnSelect", true), value);
}
}

}
