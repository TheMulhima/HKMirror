using Modding.Menu.Components;
using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
using UnityEngine.EventSystems;
using UnityEngine.UI;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for ScrollPaneSelector class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnScrollPaneSelector
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_PaneRect()
        {
            if (!HookedList.Contains("get_PaneRect"))
            {
                HookedList.Add("get_PaneRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_PaneRect"), get_PaneRect);
            }
        }

        internal static event Delegates.get_PaneRect_BeforeArgs _beforeget_PaneRect;
        internal static event Delegates.get_PaneRect_NormalArgs _afterget_PaneRect;

        private static RectTransform get_PaneRect(Func<ScrollPaneSelector, RectTransform> orig, ScrollPaneSelector self)
        {
            Delegates.Params_get_PaneRect @params = new()
            {
                self = self
            };
            _beforeget_PaneRect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_PaneRect != null) retVal = _afterget_PaneRect.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_PaneRect()
        {
            if (!HookedList.Contains("set_PaneRect"))
            {
                HookedList.Add("set_PaneRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_PaneRect"), set_PaneRect);
            }
        }

        internal static event Delegates.set_PaneRect_BeforeArgs _beforeset_PaneRect;
        internal static event Delegates.set_PaneRect_NormalArgs _afterset_PaneRect;

        private static void set_PaneRect(Action<ScrollPaneSelector, RectTransform> orig, ScrollPaneSelector self,
            RectTransform value)
        {
            Delegates.Params_set_PaneRect @params = new()
            {
                self = self, value = value
            };
            _beforeset_PaneRect?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_PaneRect != null) _afterset_PaneRect.Invoke(@params);
        }

        internal static void Hookget_MaskRect()
        {
            if (!HookedList.Contains("get_MaskRect"))
            {
                HookedList.Add("get_MaskRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_MaskRect"), get_MaskRect);
            }
        }

        internal static event Delegates.get_MaskRect_BeforeArgs _beforeget_MaskRect;
        internal static event Delegates.get_MaskRect_NormalArgs _afterget_MaskRect;

        private static RectTransform get_MaskRect(Func<ScrollPaneSelector, RectTransform> orig, ScrollPaneSelector self)
        {
            Delegates.Params_get_MaskRect @params = new()
            {
                self = self
            };
            _beforeget_MaskRect?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_MaskRect != null) retVal = _afterget_MaskRect.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_MaskRect()
        {
            if (!HookedList.Contains("set_MaskRect"))
            {
                HookedList.Add("set_MaskRect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_MaskRect"), set_MaskRect);
            }
        }

        internal static event Delegates.set_MaskRect_BeforeArgs _beforeset_MaskRect;
        internal static event Delegates.set_MaskRect_NormalArgs _afterset_MaskRect;

        private static void set_MaskRect(Action<ScrollPaneSelector, RectTransform> orig, ScrollPaneSelector self,
            RectTransform value)
        {
            Delegates.Params_set_MaskRect @params = new()
            {
                self = self, value = value
            };
            _beforeset_MaskRect?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_MaskRect != null) _afterset_MaskRect.Invoke(@params);
        }

        internal static void Hookget_Scrollbar()
        {
            if (!HookedList.Contains("get_Scrollbar"))
            {
                HookedList.Add("get_Scrollbar");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_Scrollbar"), get_Scrollbar);
            }
        }

        internal static event Delegates.get_Scrollbar_BeforeArgs _beforeget_Scrollbar;
        internal static event Delegates.get_Scrollbar_NormalArgs _afterget_Scrollbar;

        private static Scrollbar get_Scrollbar(Func<ScrollPaneSelector, Scrollbar> orig, ScrollPaneSelector self)
        {
            Delegates.Params_get_Scrollbar @params = new()
            {
                self = self
            };
            _beforeget_Scrollbar?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Scrollbar != null) retVal = _afterget_Scrollbar.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Scrollbar()
        {
            if (!HookedList.Contains("set_Scrollbar"))
            {
                HookedList.Add("set_Scrollbar");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_Scrollbar"), set_Scrollbar);
            }
        }

        internal static event Delegates.set_Scrollbar_BeforeArgs _beforeset_Scrollbar;
        internal static event Delegates.set_Scrollbar_NormalArgs _afterset_Scrollbar;

        private static void set_Scrollbar(Action<ScrollPaneSelector, Scrollbar> orig, ScrollPaneSelector self,
            Scrollbar value)
        {
            Delegates.Params_set_Scrollbar @params = new()
            {
                self = self, value = value
            };
            _beforeset_Scrollbar?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Scrollbar != null) _afterset_Scrollbar.Invoke(@params);
        }

        internal static void Hookget_SelectionPadding()
        {
            if (!HookedList.Contains("get_SelectionPadding"))
            {
                HookedList.Add("get_SelectionPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_SelectionPadding"),
                    get_SelectionPadding);
            }
        }

        internal static event Delegates.get_SelectionPadding_BeforeArgs _beforeget_SelectionPadding;
        internal static event Delegates.get_SelectionPadding_NormalArgs _afterget_SelectionPadding;

        private static Func<RectTransform, ValueTuple<float, float>> get_SelectionPadding(
            Func<ScrollPaneSelector, Func<RectTransform, ValueTuple<float, float>>> orig, ScrollPaneSelector self)
        {
            Delegates.Params_get_SelectionPadding @params = new()
            {
                self = self
            };
            _beforeget_SelectionPadding?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_SelectionPadding != null) retVal = _afterget_SelectionPadding.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_SelectionPadding()
        {
            if (!HookedList.Contains("set_SelectionPadding"))
            {
                HookedList.Add("set_SelectionPadding");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_SelectionPadding"),
                    set_SelectionPadding);
            }
        }

        internal static event Delegates.set_SelectionPadding_BeforeArgs _beforeset_SelectionPadding;
        internal static event Delegates.set_SelectionPadding_NormalArgs _afterset_SelectionPadding;

        private static void set_SelectionPadding(
            Action<ScrollPaneSelector, Func<RectTransform, ValueTuple<float, float>>> orig, ScrollPaneSelector self,
            Func<RectTransform, ValueTuple<float, float>> value)
        {
            Delegates.Params_set_SelectionPadding @params = new()
            {
                self = self, value = value
            };
            _beforeset_SelectionPadding?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_SelectionPadding != null) _afterset_SelectionPadding.Invoke(@params);
        }

        internal static void HookOnSelect()
        {
            if (!HookedList.Contains("OnSelect"))
            {
                HookedList.Add("OnSelect");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "OnSelect"), OnSelect);
            }
        }

        internal static event Delegates.OnSelect_BeforeArgs _beforeOnSelect;
        internal static event Delegates.OnSelect_NormalArgs _afterOnSelect;

        private static void OnSelect(Action<ScrollPaneSelector, BaseEventData> orig, ScrollPaneSelector self,
            BaseEventData eventData)
        {
            Delegates.Params_OnSelect @params = new()
            {
                self = self, eventData = eventData
            };
            _beforeOnSelect?.Invoke(@params);
            self = @params.self;
            eventData = @params.eventData;
            orig(self, eventData);
            if (_afterOnSelect != null) _afterOnSelect.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void get_MaskRect_BeforeArgs(Params_get_MaskRect args);

        public delegate RectTransform get_MaskRect_NormalArgs(Params_get_MaskRect args);

        public delegate void get_PaneRect_BeforeArgs(Params_get_PaneRect args);

        public delegate RectTransform get_PaneRect_NormalArgs(Params_get_PaneRect args);

        public delegate void get_Scrollbar_BeforeArgs(Params_get_Scrollbar args);

        public delegate Scrollbar get_Scrollbar_NormalArgs(Params_get_Scrollbar args);

        public delegate void get_SelectionPadding_BeforeArgs(Params_get_SelectionPadding args);

        public delegate Func<RectTransform, ValueTuple<float, float>> get_SelectionPadding_NormalArgs(
            Params_get_SelectionPadding args);

        public delegate void OnSelect_BeforeArgs(Params_OnSelect args);

        public delegate void OnSelect_NormalArgs(Params_OnSelect args);

        public delegate void set_MaskRect_BeforeArgs(Params_set_MaskRect args);

        public delegate void set_MaskRect_NormalArgs(Params_set_MaskRect args);

        public delegate void set_PaneRect_BeforeArgs(Params_set_PaneRect args);

        public delegate void set_PaneRect_NormalArgs(Params_set_PaneRect args);

        public delegate void set_Scrollbar_BeforeArgs(Params_set_Scrollbar args);

        public delegate void set_Scrollbar_NormalArgs(Params_set_Scrollbar args);

        public delegate void set_SelectionPadding_BeforeArgs(Params_set_SelectionPadding args);

        public delegate void set_SelectionPadding_NormalArgs(Params_set_SelectionPadding args);

        public sealed class Params_get_PaneRect
        {
            public ScrollPaneSelector self;
        }

        public sealed class Params_set_PaneRect
        {
            public ScrollPaneSelector self;
            public RectTransform value;
        }

        public sealed class Params_get_MaskRect
        {
            public ScrollPaneSelector self;
        }

        public sealed class Params_set_MaskRect
        {
            public ScrollPaneSelector self;
            public RectTransform value;
        }

        public sealed class Params_get_Scrollbar
        {
            public ScrollPaneSelector self;
        }

        public sealed class Params_set_Scrollbar
        {
            public ScrollPaneSelector self;
            public Scrollbar value;
        }

        public sealed class Params_get_SelectionPadding
        {
            public ScrollPaneSelector self;
        }

        public sealed class Params_set_SelectionPadding
        {
            public ScrollPaneSelector self;
            public Func<RectTransform, ValueTuple<float, float>> value;
        }

        public sealed class Params_OnSelect
        {
            public BaseEventData eventData;
            public ScrollPaneSelector self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_PaneRect_BeforeArgs get_PaneRect
        {
            add
            {
                HookHandler._beforeget_PaneRect += value;
                HookHandler.Hookget_PaneRect();
            }
            remove => HookHandler._beforeget_PaneRect -= value;
        }

        public static event Delegates.set_PaneRect_BeforeArgs set_PaneRect
        {
            add
            {
                HookHandler._beforeset_PaneRect += value;
                HookHandler.Hookset_PaneRect();
            }
            remove => HookHandler._beforeset_PaneRect -= value;
        }

        public static event Delegates.get_MaskRect_BeforeArgs get_MaskRect
        {
            add
            {
                HookHandler._beforeget_MaskRect += value;
                HookHandler.Hookget_MaskRect();
            }
            remove => HookHandler._beforeget_MaskRect -= value;
        }

        public static event Delegates.set_MaskRect_BeforeArgs set_MaskRect
        {
            add
            {
                HookHandler._beforeset_MaskRect += value;
                HookHandler.Hookset_MaskRect();
            }
            remove => HookHandler._beforeset_MaskRect -= value;
        }

        public static event Delegates.get_Scrollbar_BeforeArgs get_Scrollbar
        {
            add
            {
                HookHandler._beforeget_Scrollbar += value;
                HookHandler.Hookget_Scrollbar();
            }
            remove => HookHandler._beforeget_Scrollbar -= value;
        }

        public static event Delegates.set_Scrollbar_BeforeArgs set_Scrollbar
        {
            add
            {
                HookHandler._beforeset_Scrollbar += value;
                HookHandler.Hookset_Scrollbar();
            }
            remove => HookHandler._beforeset_Scrollbar -= value;
        }

        public static event Delegates.get_SelectionPadding_BeforeArgs get_SelectionPadding
        {
            add
            {
                HookHandler._beforeget_SelectionPadding += value;
                HookHandler.Hookget_SelectionPadding();
            }
            remove => HookHandler._beforeget_SelectionPadding -= value;
        }

        public static event Delegates.set_SelectionPadding_BeforeArgs set_SelectionPadding
        {
            add
            {
                HookHandler._beforeset_SelectionPadding += value;
                HookHandler.Hookset_SelectionPadding();
            }
            remove => HookHandler._beforeset_SelectionPadding -= value;
        }

        public static event Delegates.OnSelect_BeforeArgs OnSelect
        {
            add
            {
                HookHandler._beforeOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._beforeOnSelect -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_PaneRect_NormalArgs get_PaneRect
        {
            add
            {
                HookHandler._afterget_PaneRect += value;
                HookHandler.Hookget_PaneRect();
            }
            remove => HookHandler._afterget_PaneRect -= value;
        }

        public static event Delegates.set_PaneRect_NormalArgs set_PaneRect
        {
            add
            {
                HookHandler._afterset_PaneRect += value;
                HookHandler.Hookset_PaneRect();
            }
            remove => HookHandler._afterset_PaneRect -= value;
        }

        public static event Delegates.get_MaskRect_NormalArgs get_MaskRect
        {
            add
            {
                HookHandler._afterget_MaskRect += value;
                HookHandler.Hookget_MaskRect();
            }
            remove => HookHandler._afterget_MaskRect -= value;
        }

        public static event Delegates.set_MaskRect_NormalArgs set_MaskRect
        {
            add
            {
                HookHandler._afterset_MaskRect += value;
                HookHandler.Hookset_MaskRect();
            }
            remove => HookHandler._afterset_MaskRect -= value;
        }

        public static event Delegates.get_Scrollbar_NormalArgs get_Scrollbar
        {
            add
            {
                HookHandler._afterget_Scrollbar += value;
                HookHandler.Hookget_Scrollbar();
            }
            remove => HookHandler._afterget_Scrollbar -= value;
        }

        public static event Delegates.set_Scrollbar_NormalArgs set_Scrollbar
        {
            add
            {
                HookHandler._afterset_Scrollbar += value;
                HookHandler.Hookset_Scrollbar();
            }
            remove => HookHandler._afterset_Scrollbar -= value;
        }

        public static event Delegates.get_SelectionPadding_NormalArgs get_SelectionPadding
        {
            add
            {
                HookHandler._afterget_SelectionPadding += value;
                HookHandler.Hookget_SelectionPadding();
            }
            remove => HookHandler._afterget_SelectionPadding -= value;
        }

        public static event Delegates.set_SelectionPadding_NormalArgs set_SelectionPadding
        {
            add
            {
                HookHandler._afterset_SelectionPadding += value;
                HookHandler.Hookset_SelectionPadding();
            }
            remove => HookHandler._afterset_SelectionPadding -= value;
        }

        public static event Delegates.OnSelect_NormalArgs OnSelect
        {
            add
            {
                HookHandler._afterOnSelect += value;
                HookHandler.HookOnSelect();
            }
            remove => HookHandler._afterOnSelect -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_PaneRect_NormalArgs get_PaneRect
        {
            add => HookEndpointManager.Add<Delegates.get_PaneRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_PaneRect"), value);
            remove => HookEndpointManager.Remove<Delegates.get_PaneRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_PaneRect"), value);
        }

        public static event Delegates.set_PaneRect_NormalArgs set_PaneRect
        {
            add => HookEndpointManager.Add<Delegates.set_PaneRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_PaneRect"), value);
            remove => HookEndpointManager.Remove<Delegates.set_PaneRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_PaneRect"), value);
        }

        public static event Delegates.get_MaskRect_NormalArgs get_MaskRect
        {
            add => HookEndpointManager.Add<Delegates.get_MaskRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_MaskRect"), value);
            remove => HookEndpointManager.Remove<Delegates.get_MaskRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_MaskRect"), value);
        }

        public static event Delegates.set_MaskRect_NormalArgs set_MaskRect
        {
            add => HookEndpointManager.Add<Delegates.set_MaskRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_MaskRect"), value);
            remove => HookEndpointManager.Remove<Delegates.set_MaskRect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_MaskRect"), value);
        }

        public static event Delegates.get_Scrollbar_NormalArgs get_Scrollbar
        {
            add => HookEndpointManager.Add<Delegates.get_Scrollbar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_Scrollbar"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Scrollbar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_Scrollbar"), value);
        }

        public static event Delegates.set_Scrollbar_NormalArgs set_Scrollbar
        {
            add => HookEndpointManager.Add<Delegates.set_Scrollbar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_Scrollbar"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Scrollbar_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_Scrollbar"), value);
        }

        public static event Delegates.get_SelectionPadding_NormalArgs get_SelectionPadding
        {
            add => HookEndpointManager.Add<Delegates.get_SelectionPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_SelectionPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.get_SelectionPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "get_SelectionPadding"), value);
        }

        public static event Delegates.set_SelectionPadding_NormalArgs set_SelectionPadding
        {
            add => HookEndpointManager.Add<Delegates.set_SelectionPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_SelectionPadding"), value);
            remove => HookEndpointManager.Remove<Delegates.set_SelectionPadding_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "set_SelectionPadding"), value);
        }

        public static event Delegates.OnSelect_NormalArgs OnSelect
        {
            add => HookEndpointManager.Add<Delegates.OnSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "OnSelect"), value);
            remove => HookEndpointManager.Remove<Delegates.OnSelect_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(ScrollPaneSelector), "OnSelect"), value);
        }
    }
}