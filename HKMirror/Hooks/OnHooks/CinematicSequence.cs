using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for CinematicSequence class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCinematicSequence
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_VideoPlayer()
        {
            if (!HookedList.Contains("get_VideoPlayer"))
            {
                HookedList.Add("get_VideoPlayer");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_VideoPlayer"), get_VideoPlayer);
            }
        }

        internal static event Delegates.get_VideoPlayer_BeforeArgs _beforeget_VideoPlayer;
        internal static event Delegates.get_VideoPlayer_NormalArgs _afterget_VideoPlayer;

        private static CinematicVideoPlayer get_VideoPlayer(Func<CinematicSequence, CinematicVideoPlayer> orig,
            CinematicSequence self)
        {
            Delegates.Params_get_VideoPlayer @params = new()
            {
                self = self
            };
            _beforeget_VideoPlayer?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_VideoPlayer != null) retVal = _afterget_VideoPlayer.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsSkipped()
        {
            if (!HookedList.Contains("get_IsSkipped"))
            {
                HookedList.Add("get_IsSkipped");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsSkipped"), get_IsSkipped);
            }
        }

        internal static event Delegates.get_IsSkipped_BeforeArgs _beforeget_IsSkipped;
        internal static event Delegates.get_IsSkipped_NormalArgs _afterget_IsSkipped;

        private static bool get_IsSkipped(Func<CinematicSequence, bool> orig, CinematicSequence self)
        {
            Delegates.Params_get_IsSkipped @params = new()
            {
                self = self
            };
            _beforeget_IsSkipped?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSkipped != null) retVal = _afterget_IsSkipped.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsLooping()
        {
            if (!HookedList.Contains("get_IsLooping"))
            {
                HookedList.Add("get_IsLooping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsLooping"), get_IsLooping);
            }
        }

        internal static event Delegates.get_IsLooping_BeforeArgs _beforeget_IsLooping;
        internal static event Delegates.get_IsLooping_NormalArgs _afterget_IsLooping;

        private static bool get_IsLooping(Func<CinematicSequence, bool> orig, CinematicSequence self)
        {
            Delegates.Params_get_IsLooping @params = new()
            {
                self = self
            };
            _beforeget_IsLooping?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsLooping != null) retVal = _afterget_IsLooping.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_IsLooping()
        {
            if (!HookedList.Contains("set_IsLooping"))
            {
                HookedList.Add("set_IsLooping");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "set_IsLooping"), set_IsLooping);
            }
        }

        internal static event Delegates.set_IsLooping_BeforeArgs _beforeset_IsLooping;
        internal static event Delegates.set_IsLooping_NormalArgs _afterset_IsLooping;

        private static void set_IsLooping(Action<CinematicSequence, bool> orig, CinematicSequence self, bool value)
        {
            Delegates.Params_set_IsLooping @params = new()
            {
                self = self, value = value
            };
            _beforeset_IsLooping?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_IsLooping != null) _afterset_IsLooping.Invoke(@params);
        }

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.CinematicSequence.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.CinematicSequence.orig_Awake orig, CinematicSequence self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookOnDestroy()
        {
            if (!HookedList.Contains("OnDestroy"))
            {
                HookedList.Add("OnDestroy");
                On.CinematicSequence.OnDestroy += OnDestroy;
            }
        }

        internal static event Delegates.OnDestroy_BeforeArgs _beforeOnDestroy;
        internal static event Delegates.OnDestroy_NormalArgs _afterOnDestroy;

        private static void OnDestroy(On.CinematicSequence.orig_OnDestroy orig, CinematicSequence self)
        {
            Delegates.Params_OnDestroy @params = new()
            {
                self = self
            };
            _beforeOnDestroy?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDestroy != null) _afterOnDestroy.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                On.CinematicSequence.Update += Update;
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(On.CinematicSequence.orig_Update orig, CinematicSequence self)
        {
            Delegates.Params_Update @params = new()
            {
                self = self
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookBegin()
        {
            if (!HookedList.Contains("Begin"))
            {
                HookedList.Add("Begin");
                On.CinematicSequence.Begin += Begin;
            }
        }

        internal static event Delegates.Begin_BeforeArgs _beforeBegin;
        internal static event Delegates.Begin_NormalArgs _afterBegin;

        private static void Begin(On.CinematicSequence.orig_Begin orig, CinematicSequence self)
        {
            Delegates.Params_Begin @params = new()
            {
                self = self
            };
            _beforeBegin?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBegin != null) _afterBegin.Invoke(@params);
        }

        internal static void HookUpdateBlanker()
        {
            if (!HookedList.Contains("UpdateBlanker"))
            {
                HookedList.Add("UpdateBlanker");
                On.CinematicSequence.UpdateBlanker += UpdateBlanker;
            }
        }

        internal static event Delegates.UpdateBlanker_BeforeArgs _beforeUpdateBlanker;
        internal static event Delegates.UpdateBlanker_NormalArgs _afterUpdateBlanker;

        private static void UpdateBlanker(On.CinematicSequence.orig_UpdateBlanker orig, CinematicSequence self,
            float alpha)
        {
            Delegates.Params_UpdateBlanker @params = new()
            {
                self = self, alpha = alpha
            };
            _beforeUpdateBlanker?.Invoke(@params);
            self = @params.self;
            alpha = @params.alpha;
            orig(self, alpha);
            if (_afterUpdateBlanker != null) _afterUpdateBlanker.Invoke(@params);
        }

        internal static void Hookget_IsPlaying()
        {
            if (!HookedList.Contains("get_IsPlaying"))
            {
                HookedList.Add("get_IsPlaying");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsPlaying"), get_IsPlaying);
            }
        }

        internal static event Delegates.get_IsPlaying_BeforeArgs _beforeget_IsPlaying;
        internal static event Delegates.get_IsPlaying_NormalArgs _afterget_IsPlaying;

        private static bool get_IsPlaying(Func<CinematicSequence, bool> orig, CinematicSequence self)
        {
            Delegates.Params_get_IsPlaying @params = new()
            {
                self = self
            };
            _beforeget_IsPlaying?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsPlaying != null) retVal = _afterget_IsPlaying.Invoke(@params);
            return retVal;
        }

        internal static void HookSkip()
        {
            if (!HookedList.Contains("Skip"))
            {
                HookedList.Add("Skip");
                On.CinematicSequence.Skip += Skip;
            }
        }

        internal static event Delegates.Skip_BeforeArgs _beforeSkip;
        internal static event Delegates.Skip_NormalArgs _afterSkip;

        private static void Skip(On.CinematicSequence.orig_Skip orig, CinematicSequence self)
        {
            Delegates.Params_Skip @params = new()
            {
                self = self
            };
            _beforeSkip?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterSkip != null) _afterSkip.Invoke(@params);
        }

        internal static void Hookget_FadeByController()
        {
            if (!HookedList.Contains("get_FadeByController"))
            {
                HookedList.Add("get_FadeByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_FadeByController"),
                    get_FadeByController);
            }
        }

        internal static event Delegates.get_FadeByController_BeforeArgs _beforeget_FadeByController;
        internal static event Delegates.get_FadeByController_NormalArgs _afterget_FadeByController;

        private static float get_FadeByController(Func<CinematicSequence, float> orig, CinematicSequence self)
        {
            Delegates.Params_get_FadeByController @params = new()
            {
                self = self
            };
            _beforeget_FadeByController?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_FadeByController != null) retVal = _afterget_FadeByController.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_FadeByController()
        {
            if (!HookedList.Contains("set_FadeByController"))
            {
                HookedList.Add("set_FadeByController");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "set_FadeByController"),
                    set_FadeByController);
            }
        }

        internal static event Delegates.set_FadeByController_BeforeArgs _beforeset_FadeByController;
        internal static event Delegates.set_FadeByController_NormalArgs _afterset_FadeByController;

        private static void set_FadeByController(Action<CinematicSequence, float> orig, CinematicSequence self,
            float value)
        {
            Delegates.Params_set_FadeByController @params = new()
            {
                self = self, value = value
            };
            _beforeset_FadeByController?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_FadeByController != null) _afterset_FadeByController.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void Begin_BeforeArgs(Params_Begin args);

        public delegate void Begin_NormalArgs(Params_Begin args);

        public delegate void get_FadeByController_BeforeArgs(Params_get_FadeByController args);

        public delegate float get_FadeByController_NormalArgs(Params_get_FadeByController args);

        public delegate void get_IsLooping_BeforeArgs(Params_get_IsLooping args);

        public delegate bool get_IsLooping_NormalArgs(Params_get_IsLooping args);

        public delegate void get_IsPlaying_BeforeArgs(Params_get_IsPlaying args);

        public delegate bool get_IsPlaying_NormalArgs(Params_get_IsPlaying args);

        public delegate void get_IsSkipped_BeforeArgs(Params_get_IsSkipped args);

        public delegate bool get_IsSkipped_NormalArgs(Params_get_IsSkipped args);

        public delegate void get_VideoPlayer_BeforeArgs(Params_get_VideoPlayer args);

        public delegate CinematicVideoPlayer get_VideoPlayer_NormalArgs(Params_get_VideoPlayer args);

        public delegate void OnDestroy_BeforeArgs(Params_OnDestroy args);

        public delegate void OnDestroy_NormalArgs(Params_OnDestroy args);

        public delegate void set_FadeByController_BeforeArgs(Params_set_FadeByController args);

        public delegate void set_FadeByController_NormalArgs(Params_set_FadeByController args);

        public delegate void set_IsLooping_BeforeArgs(Params_set_IsLooping args);

        public delegate void set_IsLooping_NormalArgs(Params_set_IsLooping args);

        public delegate void Skip_BeforeArgs(Params_Skip args);

        public delegate void Skip_NormalArgs(Params_Skip args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void UpdateBlanker_BeforeArgs(Params_UpdateBlanker args);

        public delegate void UpdateBlanker_NormalArgs(Params_UpdateBlanker args);

        public sealed class Params_get_VideoPlayer
        {
            public CinematicSequence self;
        }

        public sealed class Params_get_IsSkipped
        {
            public CinematicSequence self;
        }

        public sealed class Params_get_IsLooping
        {
            public CinematicSequence self;
        }

        public sealed class Params_set_IsLooping
        {
            public CinematicSequence self;
            public bool value;
        }

        public sealed class Params_Awake
        {
            public CinematicSequence self;
        }

        public sealed class Params_OnDestroy
        {
            public CinematicSequence self;
        }

        public sealed class Params_Update
        {
            public CinematicSequence self;
        }

        public sealed class Params_Begin
        {
            public CinematicSequence self;
        }

        public sealed class Params_UpdateBlanker
        {
            public float alpha;
            public CinematicSequence self;
        }

        public sealed class Params_get_IsPlaying
        {
            public CinematicSequence self;
        }

        public sealed class Params_Skip
        {
            public CinematicSequence self;
        }

        public sealed class Params_get_FadeByController
        {
            public CinematicSequence self;
        }

        public sealed class Params_set_FadeByController
        {
            public CinematicSequence self;
            public float value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_VideoPlayer_BeforeArgs get_VideoPlayer
        {
            add
            {
                HookHandler._beforeget_VideoPlayer += value;
                HookHandler.Hookget_VideoPlayer();
            }
            remove => HookHandler._beforeget_VideoPlayer -= value;
        }

        public static event Delegates.get_IsSkipped_BeforeArgs get_IsSkipped
        {
            add
            {
                HookHandler._beforeget_IsSkipped += value;
                HookHandler.Hookget_IsSkipped();
            }
            remove => HookHandler._beforeget_IsSkipped -= value;
        }

        public static event Delegates.get_IsLooping_BeforeArgs get_IsLooping
        {
            add
            {
                HookHandler._beforeget_IsLooping += value;
                HookHandler.Hookget_IsLooping();
            }
            remove => HookHandler._beforeget_IsLooping -= value;
        }

        public static event Delegates.set_IsLooping_BeforeArgs set_IsLooping
        {
            add
            {
                HookHandler._beforeset_IsLooping += value;
                HookHandler.Hookset_IsLooping();
            }
            remove => HookHandler._beforeset_IsLooping -= value;
        }

        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.OnDestroy_BeforeArgs OnDestroy
        {
            add
            {
                HookHandler._beforeOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._beforeOnDestroy -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.Begin_BeforeArgs Begin
        {
            add
            {
                HookHandler._beforeBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._beforeBegin -= value;
        }

        public static event Delegates.UpdateBlanker_BeforeArgs UpdateBlanker
        {
            add
            {
                HookHandler._beforeUpdateBlanker += value;
                HookHandler.HookUpdateBlanker();
            }
            remove => HookHandler._beforeUpdateBlanker -= value;
        }

        public static event Delegates.get_IsPlaying_BeforeArgs get_IsPlaying
        {
            add
            {
                HookHandler._beforeget_IsPlaying += value;
                HookHandler.Hookget_IsPlaying();
            }
            remove => HookHandler._beforeget_IsPlaying -= value;
        }

        public static event Delegates.Skip_BeforeArgs Skip
        {
            add
            {
                HookHandler._beforeSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._beforeSkip -= value;
        }

        public static event Delegates.get_FadeByController_BeforeArgs get_FadeByController
        {
            add
            {
                HookHandler._beforeget_FadeByController += value;
                HookHandler.Hookget_FadeByController();
            }
            remove => HookHandler._beforeget_FadeByController -= value;
        }

        public static event Delegates.set_FadeByController_BeforeArgs set_FadeByController
        {
            add
            {
                HookHandler._beforeset_FadeByController += value;
                HookHandler.Hookset_FadeByController();
            }
            remove => HookHandler._beforeset_FadeByController -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_VideoPlayer_NormalArgs get_VideoPlayer
        {
            add
            {
                HookHandler._afterget_VideoPlayer += value;
                HookHandler.Hookget_VideoPlayer();
            }
            remove => HookHandler._afterget_VideoPlayer -= value;
        }

        public static event Delegates.get_IsSkipped_NormalArgs get_IsSkipped
        {
            add
            {
                HookHandler._afterget_IsSkipped += value;
                HookHandler.Hookget_IsSkipped();
            }
            remove => HookHandler._afterget_IsSkipped -= value;
        }

        public static event Delegates.get_IsLooping_NormalArgs get_IsLooping
        {
            add
            {
                HookHandler._afterget_IsLooping += value;
                HookHandler.Hookget_IsLooping();
            }
            remove => HookHandler._afterget_IsLooping -= value;
        }

        public static event Delegates.set_IsLooping_NormalArgs set_IsLooping
        {
            add
            {
                HookHandler._afterset_IsLooping += value;
                HookHandler.Hookset_IsLooping();
            }
            remove => HookHandler._afterset_IsLooping -= value;
        }

        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.OnDestroy_NormalArgs OnDestroy
        {
            add
            {
                HookHandler._afterOnDestroy += value;
                HookHandler.HookOnDestroy();
            }
            remove => HookHandler._afterOnDestroy -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.Begin_NormalArgs Begin
        {
            add
            {
                HookHandler._afterBegin += value;
                HookHandler.HookBegin();
            }
            remove => HookHandler._afterBegin -= value;
        }

        public static event Delegates.UpdateBlanker_NormalArgs UpdateBlanker
        {
            add
            {
                HookHandler._afterUpdateBlanker += value;
                HookHandler.HookUpdateBlanker();
            }
            remove => HookHandler._afterUpdateBlanker -= value;
        }

        public static event Delegates.get_IsPlaying_NormalArgs get_IsPlaying
        {
            add
            {
                HookHandler._afterget_IsPlaying += value;
                HookHandler.Hookget_IsPlaying();
            }
            remove => HookHandler._afterget_IsPlaying -= value;
        }

        public static event Delegates.Skip_NormalArgs Skip
        {
            add
            {
                HookHandler._afterSkip += value;
                HookHandler.HookSkip();
            }
            remove => HookHandler._afterSkip -= value;
        }

        public static event Delegates.get_FadeByController_NormalArgs get_FadeByController
        {
            add
            {
                HookHandler._afterget_FadeByController += value;
                HookHandler.Hookget_FadeByController();
            }
            remove => HookHandler._afterget_FadeByController -= value;
        }

        public static event Delegates.set_FadeByController_NormalArgs set_FadeByController
        {
            add
            {
                HookHandler._afterset_FadeByController += value;
                HookHandler.Hookset_FadeByController();
            }
            remove => HookHandler._afterset_FadeByController -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_VideoPlayer_NormalArgs get_VideoPlayer
        {
            add => HookEndpointManager.Add<Delegates.get_VideoPlayer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_VideoPlayer"), value);
            remove => HookEndpointManager.Remove<Delegates.get_VideoPlayer_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_VideoPlayer"), value);
        }

        public static event Delegates.get_IsSkipped_NormalArgs get_IsSkipped
        {
            add => HookEndpointManager.Add<Delegates.get_IsSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsSkipped"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSkipped_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsSkipped"), value);
        }

        public static event Delegates.get_IsLooping_NormalArgs get_IsLooping
        {
            add => HookEndpointManager.Add<Delegates.get_IsLooping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsLooping"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsLooping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsLooping"), value);
        }

        public static event Delegates.set_IsLooping_NormalArgs set_IsLooping
        {
            add => HookEndpointManager.Add<Delegates.set_IsLooping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "set_IsLooping"), value);
            remove => HookEndpointManager.Remove<Delegates.set_IsLooping_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "set_IsLooping"), value);
        }

        public static event On.CinematicSequence.hook_Awake Awake
        {
            add => On.CinematicSequence.Awake += value;
            remove => On.CinematicSequence.Awake -= value;
        }

        public static event On.CinematicSequence.hook_OnDestroy OnDestroy
        {
            add => On.CinematicSequence.OnDestroy += value;
            remove => On.CinematicSequence.OnDestroy -= value;
        }

        public static event On.CinematicSequence.hook_Update Update
        {
            add => On.CinematicSequence.Update += value;
            remove => On.CinematicSequence.Update -= value;
        }

        public static event On.CinematicSequence.hook_Begin Begin
        {
            add => On.CinematicSequence.Begin += value;
            remove => On.CinematicSequence.Begin -= value;
        }

        public static event On.CinematicSequence.hook_UpdateBlanker UpdateBlanker
        {
            add => On.CinematicSequence.UpdateBlanker += value;
            remove => On.CinematicSequence.UpdateBlanker -= value;
        }

        public static event Delegates.get_IsPlaying_NormalArgs get_IsPlaying
        {
            add => HookEndpointManager.Add<Delegates.get_IsPlaying_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsPlaying"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsPlaying_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_IsPlaying"), value);
        }

        public static event On.CinematicSequence.hook_Skip Skip
        {
            add => On.CinematicSequence.Skip += value;
            remove => On.CinematicSequence.Skip -= value;
        }

        public static event Delegates.get_FadeByController_NormalArgs get_FadeByController
        {
            add => HookEndpointManager.Add<Delegates.get_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_FadeByController"), value);
            remove => HookEndpointManager.Remove<Delegates.get_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "get_FadeByController"), value);
        }

        public static event Delegates.set_FadeByController_NormalArgs set_FadeByController
        {
            add => HookEndpointManager.Add<Delegates.set_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "set_FadeByController"), value);
            remove => HookEndpointManager.Remove<Delegates.set_FadeByController_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(CinematicSequence), "set_FadeByController"), value);
        }
    }
}