namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for DropCrystal class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnDropCrystal
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.DropCrystal.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;
        internal static event Delegates.Start_AfterArgs _afterStart;

        private static void Start(On.DropCrystal.orig_Start orig, DropCrystal self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStart != null)
                foreach (Delegates.Start_AfterArgs toInvoke in _afterStart.GetInvocationList())
                    try
                    {
                        _afterStart.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.DropCrystal.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.DropCrystal.orig_OnEnable orig, DropCrystal self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookFixedUpdate()
        {
            if (!HookedList.Contains("FixedUpdate"))
            {
                HookedList.Add("FixedUpdate");
                On.DropCrystal.FixedUpdate += FixedUpdate;
            }
        }

        internal static event Delegates.FixedUpdate_BeforeArgs _beforeFixedUpdate;
        internal static event Delegates.FixedUpdate_AfterArgs _afterFixedUpdate;

        private static void FixedUpdate(On.DropCrystal.orig_FixedUpdate orig, DropCrystal self)
        {
            Delegates.Params_FixedUpdate @params = new()
            {
                self = self
            };
            if (_beforeFixedUpdate != null)
                foreach (Delegates.FixedUpdate_BeforeArgs toInvoke in _beforeFixedUpdate.GetInvocationList())
                    try
                    {
                        _beforeFixedUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterFixedUpdate != null)
                foreach (Delegates.FixedUpdate_AfterArgs toInvoke in _afterFixedUpdate.GetInvocationList())
                    try
                    {
                        _afterFixedUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnCollisionEnter2D()
        {
            if (!HookedList.Contains("OnCollisionEnter2D"))
            {
                HookedList.Add("OnCollisionEnter2D");
                On.DropCrystal.OnCollisionEnter2D += OnCollisionEnter2D;
            }
        }

        internal static event Delegates.OnCollisionEnter2D_BeforeArgs _beforeOnCollisionEnter2D;
        internal static event Delegates.OnCollisionEnter2D_AfterArgs _afterOnCollisionEnter2D;

        private static void OnCollisionEnter2D(On.DropCrystal.orig_OnCollisionEnter2D orig, DropCrystal self,
            Collision2D col)
        {
            Delegates.Params_OnCollisionEnter2D @params = new()
            {
                self = self, col = col
            };
            if (_beforeOnCollisionEnter2D != null)
                foreach (Delegates.OnCollisionEnter2D_BeforeArgs toInvoke in
                         _beforeOnCollisionEnter2D.GetInvocationList())
                    try
                    {
                        _beforeOnCollisionEnter2D?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            col = @params.col;
            orig(self, col);
            if (_afterOnCollisionEnter2D != null)
                foreach (Delegates.OnCollisionEnter2D_AfterArgs toInvoke in
                         _afterOnCollisionEnter2D.GetInvocationList())
                    try
                    {
                        _afterOnCollisionEnter2D.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookLateUpdate()
        {
            if (!HookedList.Contains("LateUpdate"))
            {
                HookedList.Add("LateUpdate");
                On.DropCrystal.LateUpdate += LateUpdate;
            }
        }

        internal static event Delegates.LateUpdate_BeforeArgs _beforeLateUpdate;
        internal static event Delegates.LateUpdate_AfterArgs _afterLateUpdate;

        private static void LateUpdate(On.DropCrystal.orig_LateUpdate orig, DropCrystal self)
        {
            Delegates.Params_LateUpdate @params = new()
            {
                self = self
            };
            if (_beforeLateUpdate != null)
                foreach (Delegates.LateUpdate_BeforeArgs toInvoke in _beforeLateUpdate.GetInvocationList())
                    try
                    {
                        _beforeLateUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterLateUpdate != null)
                foreach (Delegates.LateUpdate_AfterArgs toInvoke in _afterLateUpdate.GetInvocationList())
                    try
                    {
                        _afterLateUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStartConveyorMove()
        {
            if (!HookedList.Contains("StartConveyorMove"))
            {
                HookedList.Add("StartConveyorMove");
                On.DropCrystal.StartConveyorMove += StartConveyorMove;
            }
        }

        internal static event Delegates.StartConveyorMove_BeforeArgs _beforeStartConveyorMove;
        internal static event Delegates.StartConveyorMove_AfterArgs _afterStartConveyorMove;

        private static void StartConveyorMove(On.DropCrystal.orig_StartConveyorMove orig, DropCrystal self,
            float c_xSpeed, float c_ySpeed)
        {
            Delegates.Params_StartConveyorMove @params = new()
            {
                self = self, c_xSpeed = c_xSpeed, c_ySpeed = c_ySpeed
            };
            if (_beforeStartConveyorMove != null)
                foreach (Delegates.StartConveyorMove_BeforeArgs toInvoke in
                         _beforeStartConveyorMove.GetInvocationList())
                    try
                    {
                        _beforeStartConveyorMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            c_xSpeed = @params.c_xSpeed;
            c_ySpeed = @params.c_ySpeed;
            orig(self, c_xSpeed, c_ySpeed);
            if (_afterStartConveyorMove != null)
                foreach (Delegates.StartConveyorMove_AfterArgs toInvoke in _afterStartConveyorMove.GetInvocationList())
                    try
                    {
                        _afterStartConveyorMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStopConveyorMove()
        {
            if (!HookedList.Contains("StopConveyorMove"))
            {
                HookedList.Add("StopConveyorMove");
                On.DropCrystal.StopConveyorMove += StopConveyorMove;
            }
        }

        internal static event Delegates.StopConveyorMove_BeforeArgs _beforeStopConveyorMove;
        internal static event Delegates.StopConveyorMove_AfterArgs _afterStopConveyorMove;

        private static void StopConveyorMove(On.DropCrystal.orig_StopConveyorMove orig, DropCrystal self)
        {
            Delegates.Params_StopConveyorMove @params = new()
            {
                self = self
            };
            if (_beforeStopConveyorMove != null)
                foreach (Delegates.StopConveyorMove_BeforeArgs toInvoke in _beforeStopConveyorMove.GetInvocationList())
                    try
                    {
                        _beforeStopConveyorMove?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterStopConveyorMove != null)
                foreach (Delegates.StopConveyorMove_AfterArgs toInvoke in _afterStopConveyorMove.GetInvocationList())
                    try
                    {
                        _afterStopConveyorMove.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void FixedUpdate_AfterArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_BeforeArgs(Params_FixedUpdate args);

        public delegate void FixedUpdate_WithArgs(Action<DropCrystal> orig, DropCrystal self);

        public delegate void LateUpdate_AfterArgs(Params_LateUpdate args);

        public delegate void LateUpdate_BeforeArgs(Params_LateUpdate args);

        public delegate void LateUpdate_WithArgs(Action<DropCrystal> orig, DropCrystal self);

        public delegate void OnCollisionEnter2D_AfterArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_BeforeArgs(Params_OnCollisionEnter2D args);

        public delegate void OnCollisionEnter2D_WithArgs(Action<DropCrystal, Collision2D> orig, DropCrystal self,
            Collision2D col);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<DropCrystal> orig, DropCrystal self);

        public delegate void Start_AfterArgs(Params_Start args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate void Start_WithArgs(Action<DropCrystal> orig, DropCrystal self);

        public delegate void StartConveyorMove_AfterArgs(Params_StartConveyorMove args);

        public delegate void StartConveyorMove_BeforeArgs(Params_StartConveyorMove args);

        public delegate void StartConveyorMove_WithArgs(Action<DropCrystal, float, float> orig, DropCrystal self,
            float c_xSpeed, float c_ySpeed);

        public delegate void StopConveyorMove_AfterArgs(Params_StopConveyorMove args);

        public delegate void StopConveyorMove_BeforeArgs(Params_StopConveyorMove args);

        public delegate void StopConveyorMove_WithArgs(Action<DropCrystal> orig, DropCrystal self);

        public sealed class Params_Start
        {
            public DropCrystal self;
        }

        public sealed class Params_OnEnable
        {
            public DropCrystal self;
        }

        public sealed class Params_FixedUpdate
        {
            public DropCrystal self;
        }

        public sealed class Params_OnCollisionEnter2D
        {
            public Collision2D col;
            public DropCrystal self;
        }

        public sealed class Params_LateUpdate
        {
            public DropCrystal self;
        }

        public sealed class Params_StartConveyorMove
        {
            public float c_xSpeed;
            public float c_ySpeed;
            public DropCrystal self;
        }

        public sealed class Params_StopConveyorMove
        {
            public DropCrystal self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.FixedUpdate_BeforeArgs FixedUpdate
        {
            add
            {
                HookHandler._beforeFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._beforeFixedUpdate -= value;
        }

        public static event Delegates.OnCollisionEnter2D_BeforeArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._beforeOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._beforeOnCollisionEnter2D -= value;
        }

        public static event Delegates.LateUpdate_BeforeArgs LateUpdate
        {
            add
            {
                HookHandler._beforeLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._beforeLateUpdate -= value;
        }

        public static event Delegates.StartConveyorMove_BeforeArgs StartConveyorMove
        {
            add
            {
                HookHandler._beforeStartConveyorMove += value;
                HookHandler.HookStartConveyorMove();
            }
            remove => HookHandler._beforeStartConveyorMove -= value;
        }

        public static event Delegates.StopConveyorMove_BeforeArgs StopConveyorMove
        {
            add
            {
                HookHandler._beforeStopConveyorMove += value;
                HookHandler.HookStopConveyorMove();
            }
            remove => HookHandler._beforeStopConveyorMove -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Start_AfterArgs Start
        {
            add
            {
                HookHandler._afterStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._afterStart -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.FixedUpdate_AfterArgs FixedUpdate
        {
            add
            {
                HookHandler._afterFixedUpdate += value;
                HookHandler.HookFixedUpdate();
            }
            remove => HookHandler._afterFixedUpdate -= value;
        }

        public static event Delegates.OnCollisionEnter2D_AfterArgs OnCollisionEnter2D
        {
            add
            {
                HookHandler._afterOnCollisionEnter2D += value;
                HookHandler.HookOnCollisionEnter2D();
            }
            remove => HookHandler._afterOnCollisionEnter2D -= value;
        }

        public static event Delegates.LateUpdate_AfterArgs LateUpdate
        {
            add
            {
                HookHandler._afterLateUpdate += value;
                HookHandler.HookLateUpdate();
            }
            remove => HookHandler._afterLateUpdate -= value;
        }

        public static event Delegates.StartConveyorMove_AfterArgs StartConveyorMove
        {
            add
            {
                HookHandler._afterStartConveyorMove += value;
                HookHandler.HookStartConveyorMove();
            }
            remove => HookHandler._afterStartConveyorMove -= value;
        }

        public static event Delegates.StopConveyorMove_AfterArgs StopConveyorMove
        {
            add
            {
                HookHandler._afterStopConveyorMove += value;
                HookHandler.HookStopConveyorMove();
            }
            remove => HookHandler._afterStopConveyorMove -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.DropCrystal.hook_Start Start
        {
            add => On.DropCrystal.Start += value;
            remove => On.DropCrystal.Start -= value;
        }

        public static event On.DropCrystal.hook_OnEnable OnEnable
        {
            add => On.DropCrystal.OnEnable += value;
            remove => On.DropCrystal.OnEnable -= value;
        }

        public static event On.DropCrystal.hook_FixedUpdate FixedUpdate
        {
            add => On.DropCrystal.FixedUpdate += value;
            remove => On.DropCrystal.FixedUpdate -= value;
        }

        public static event On.DropCrystal.hook_OnCollisionEnter2D OnCollisionEnter2D
        {
            add => On.DropCrystal.OnCollisionEnter2D += value;
            remove => On.DropCrystal.OnCollisionEnter2D -= value;
        }

        public static event On.DropCrystal.hook_LateUpdate LateUpdate
        {
            add => On.DropCrystal.LateUpdate += value;
            remove => On.DropCrystal.LateUpdate -= value;
        }

        public static event On.DropCrystal.hook_StartConveyorMove StartConveyorMove
        {
            add => On.DropCrystal.StartConveyorMove += value;
            remove => On.DropCrystal.StartConveyorMove -= value;
        }

        public static event On.DropCrystal.hook_StopConveyorMove StopConveyorMove
        {
            add => On.DropCrystal.StopConveyorMove += value;
            remove => On.DropCrystal.StopConveyorMove -= value;
        }
    }
}