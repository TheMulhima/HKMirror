using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for OuyaEverywhereDevice class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOuyaEverywhereDevice
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_DeviceIndex()
        {
            if (!HookedList.Contains("get_DeviceIndex"))
            {
                HookedList.Add("get_DeviceIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "get_DeviceIndex"),
                    get_DeviceIndex);
            }
        }

        internal static event Delegates.get_DeviceIndex_BeforeArgs _beforeget_DeviceIndex;
        internal static event Delegates.get_DeviceIndex_NormalArgs _afterget_DeviceIndex;

        private static int get_DeviceIndex(Func<OuyaEverywhereDevice, int> orig, OuyaEverywhereDevice self)
        {
            Delegates.Params_get_DeviceIndex @params = new()
            {
                self = self
            };
            _beforeget_DeviceIndex?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_DeviceIndex != null) retVal = _afterget_DeviceIndex.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_DeviceIndex()
        {
            if (!HookedList.Contains("set_DeviceIndex"))
            {
                HookedList.Add("set_DeviceIndex");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "set_DeviceIndex"),
                    set_DeviceIndex);
            }
        }

        internal static event Delegates.set_DeviceIndex_BeforeArgs _beforeset_DeviceIndex;
        internal static event Delegates.set_DeviceIndex_NormalArgs _afterset_DeviceIndex;

        private static void set_DeviceIndex(Action<OuyaEverywhereDevice, int> orig, OuyaEverywhereDevice self,
            int value)
        {
            Delegates.Params_set_DeviceIndex @params = new()
            {
                self = self, value = value
            };
            _beforeset_DeviceIndex?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_DeviceIndex != null) _afterset_DeviceIndex.Invoke(@params);
        }

        internal static void HookBeforeAttach()
        {
            if (!HookedList.Contains("BeforeAttach"))
            {
                HookedList.Add("BeforeAttach");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "BeforeAttach"), BeforeAttach);
            }
        }

        internal static event Delegates.BeforeAttach_BeforeArgs _beforeBeforeAttach;
        internal static event Delegates.BeforeAttach_NormalArgs _afterBeforeAttach;

        private static void BeforeAttach(Action<OuyaEverywhereDevice> orig, OuyaEverywhereDevice self)
        {
            Delegates.Params_BeforeAttach @params = new()
            {
                self = self
            };
            _beforeBeforeAttach?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterBeforeAttach != null) _afterBeforeAttach.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<OuyaEverywhereDevice, ulong, float> orig, OuyaEverywhereDevice self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_Update @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void Hookget_IsConnected()
        {
            if (!HookedList.Contains("get_IsConnected"))
            {
                HookedList.Add("get_IsConnected");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "get_IsConnected"),
                    get_IsConnected);
            }
        }

        internal static event Delegates.get_IsConnected_BeforeArgs _beforeget_IsConnected;
        internal static event Delegates.get_IsConnected_NormalArgs _afterget_IsConnected;

        private static bool get_IsConnected(Func<OuyaEverywhereDevice, bool> orig, OuyaEverywhereDevice self)
        {
            Delegates.Params_get_IsConnected @params = new()
            {
                self = self
            };
            _beforeget_IsConnected?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsConnected != null) retVal = _afterget_IsConnected.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void BeforeAttach_BeforeArgs(Params_BeforeAttach args);

        public delegate void BeforeAttach_NormalArgs(Params_BeforeAttach args);

        public delegate void get_DeviceIndex_BeforeArgs(Params_get_DeviceIndex args);

        public delegate int get_DeviceIndex_NormalArgs(Params_get_DeviceIndex args);

        public delegate void get_IsConnected_BeforeArgs(Params_get_IsConnected args);

        public delegate bool get_IsConnected_NormalArgs(Params_get_IsConnected args);

        public delegate void set_DeviceIndex_BeforeArgs(Params_set_DeviceIndex args);

        public delegate void set_DeviceIndex_NormalArgs(Params_set_DeviceIndex args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public sealed class Params_get_DeviceIndex
        {
            public OuyaEverywhereDevice self;
        }

        public sealed class Params_set_DeviceIndex
        {
            public OuyaEverywhereDevice self;
            public int value;
        }

        public sealed class Params_BeforeAttach
        {
            public OuyaEverywhereDevice self;
        }

        public sealed class Params_Update
        {
            public float deltaTime;
            public OuyaEverywhereDevice self;
            public ulong updateTick;
        }

        public sealed class Params_get_IsConnected
        {
            public OuyaEverywhereDevice self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_DeviceIndex_BeforeArgs get_DeviceIndex
        {
            add
            {
                HookHandler._beforeget_DeviceIndex += value;
                HookHandler.Hookget_DeviceIndex();
            }
            remove => HookHandler._beforeget_DeviceIndex -= value;
        }

        public static event Delegates.set_DeviceIndex_BeforeArgs set_DeviceIndex
        {
            add
            {
                HookHandler._beforeset_DeviceIndex += value;
                HookHandler.Hookset_DeviceIndex();
            }
            remove => HookHandler._beforeset_DeviceIndex -= value;
        }

        public static event Delegates.BeforeAttach_BeforeArgs BeforeAttach
        {
            add
            {
                HookHandler._beforeBeforeAttach += value;
                HookHandler.HookBeforeAttach();
            }
            remove => HookHandler._beforeBeforeAttach -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.get_IsConnected_BeforeArgs get_IsConnected
        {
            add
            {
                HookHandler._beforeget_IsConnected += value;
                HookHandler.Hookget_IsConnected();
            }
            remove => HookHandler._beforeget_IsConnected -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_DeviceIndex_NormalArgs get_DeviceIndex
        {
            add
            {
                HookHandler._afterget_DeviceIndex += value;
                HookHandler.Hookget_DeviceIndex();
            }
            remove => HookHandler._afterget_DeviceIndex -= value;
        }

        public static event Delegates.set_DeviceIndex_NormalArgs set_DeviceIndex
        {
            add
            {
                HookHandler._afterset_DeviceIndex += value;
                HookHandler.Hookset_DeviceIndex();
            }
            remove => HookHandler._afterset_DeviceIndex -= value;
        }

        public static event Delegates.BeforeAttach_NormalArgs BeforeAttach
        {
            add
            {
                HookHandler._afterBeforeAttach += value;
                HookHandler.HookBeforeAttach();
            }
            remove => HookHandler._afterBeforeAttach -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.get_IsConnected_NormalArgs get_IsConnected
        {
            add
            {
                HookHandler._afterget_IsConnected += value;
                HookHandler.Hookget_IsConnected();
            }
            remove => HookHandler._afterget_IsConnected -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_DeviceIndex_NormalArgs get_DeviceIndex
        {
            add => HookEndpointManager.Add<Delegates.get_DeviceIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "get_DeviceIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.get_DeviceIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "get_DeviceIndex"), value);
        }

        public static event Delegates.set_DeviceIndex_NormalArgs set_DeviceIndex
        {
            add => HookEndpointManager.Add<Delegates.set_DeviceIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "set_DeviceIndex"), value);
            remove => HookEndpointManager.Remove<Delegates.set_DeviceIndex_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "set_DeviceIndex"), value);
        }

        public static event Delegates.BeforeAttach_NormalArgs BeforeAttach
        {
            add => HookEndpointManager.Add<Delegates.BeforeAttach_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "BeforeAttach"), value);
            remove => HookEndpointManager.Remove<Delegates.BeforeAttach_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "BeforeAttach"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "Update"), value);
        }

        public static event Delegates.get_IsConnected_NormalArgs get_IsConnected
        {
            add => HookEndpointManager.Add<Delegates.get_IsConnected_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "get_IsConnected"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsConnected_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OuyaEverywhereDevice), "get_IsConnected"), value);
        }
    }
}