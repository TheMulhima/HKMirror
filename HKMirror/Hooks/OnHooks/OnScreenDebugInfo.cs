using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for OnScreenDebugInfo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOnScreenDebugInfo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.OnScreenDebugInfo.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_NormalArgs _afterAwake;

        private static void Awake(On.OnScreenDebugInfo.orig_Awake orig, OnScreenDebugInfo self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            _beforeAwake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterAwake != null) _afterAwake.Invoke(@params);
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.OnScreenDebugInfo.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;

        private static IEnumerator Start(On.OnScreenDebugInfo.orig_Start orig, OnScreenDebugInfo self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            _beforeStart?.Invoke(@params);
            self = @params.self;
            return orig(self);
        }

        internal static void HookLevelActivated()
        {
            if (!HookedList.Contains("LevelActivated"))
            {
                HookedList.Add("LevelActivated");
                On.OnScreenDebugInfo.LevelActivated += LevelActivated;
            }
        }

        internal static event Delegates.LevelActivated_BeforeArgs _beforeLevelActivated;
        internal static event Delegates.LevelActivated_NormalArgs _afterLevelActivated;

        private static void LevelActivated(On.OnScreenDebugInfo.orig_LevelActivated orig, OnScreenDebugInfo self,
            Scene sceneFrom, Scene sceneTo)
        {
            Delegates.Params_LevelActivated @params = new()
            {
                self = self, sceneFrom = sceneFrom, sceneTo = sceneTo
            };
            _beforeLevelActivated?.Invoke(@params);
            self = @params.self;
            sceneFrom = @params.sceneFrom;
            sceneTo = @params.sceneTo;
            orig(self, sceneFrom, sceneTo);
            if (_afterLevelActivated != null) _afterLevelActivated.Invoke(@params);
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.OnScreenDebugInfo.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_NormalArgs _afterOnEnable;

        private static void OnEnable(On.OnScreenDebugInfo.orig_OnEnable orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            _beforeOnEnable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnEnable != null) _afterOnEnable.Invoke(@params);
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.OnScreenDebugInfo.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_NormalArgs _afterOnDisable;

        private static void OnDisable(On.OnScreenDebugInfo.orig_OnDisable orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            _beforeOnDisable?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnDisable != null) _afterOnDisable.Invoke(@params);
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.OnScreenDebugInfo.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_NormalArgs _afterOnGUI;

        private static void OnGUI(On.OnScreenDebugInfo.orig_OnGUI orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            _beforeOnGUI?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnGUI != null) _afterOnGUI.Invoke(@params);
        }

        internal static void HookShowFPS()
        {
            if (!HookedList.Contains("ShowFPS"))
            {
                HookedList.Add("ShowFPS");
                On.OnScreenDebugInfo.ShowFPS += ShowFPS;
            }
        }

        internal static event Delegates.ShowFPS_BeforeArgs _beforeShowFPS;
        internal static event Delegates.ShowFPS_NormalArgs _afterShowFPS;

        private static void ShowFPS(On.OnScreenDebugInfo.orig_ShowFPS orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowFPS @params = new()
            {
                self = self
            };
            _beforeShowFPS?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowFPS != null) _afterShowFPS.Invoke(@params);
        }

        internal static void HookShowGameInfo()
        {
            if (!HookedList.Contains("ShowGameInfo"))
            {
                HookedList.Add("ShowGameInfo");
                On.OnScreenDebugInfo.ShowGameInfo += ShowGameInfo;
            }
        }

        internal static event Delegates.ShowGameInfo_BeforeArgs _beforeShowGameInfo;
        internal static event Delegates.ShowGameInfo_NormalArgs _afterShowGameInfo;

        private static void ShowGameInfo(On.OnScreenDebugInfo.orig_ShowGameInfo orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowGameInfo @params = new()
            {
                self = self
            };
            _beforeShowGameInfo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowGameInfo != null) _afterShowGameInfo.Invoke(@params);
        }

        internal static void HookShowInput()
        {
            if (!HookedList.Contains("ShowInput"))
            {
                HookedList.Add("ShowInput");
                On.OnScreenDebugInfo.ShowInput += ShowInput;
            }
        }

        internal static event Delegates.ShowInput_BeforeArgs _beforeShowInput;
        internal static event Delegates.ShowInput_NormalArgs _afterShowInput;

        private static void ShowInput(On.OnScreenDebugInfo.orig_ShowInput orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowInput @params = new()
            {
                self = self
            };
            _beforeShowInput?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowInput != null) _afterShowInput.Invoke(@params);
        }

        internal static void HookShowLoadingTime()
        {
            if (!HookedList.Contains("ShowLoadingTime"))
            {
                HookedList.Add("ShowLoadingTime");
                On.OnScreenDebugInfo.ShowLoadingTime += ShowLoadingTime;
            }
        }

        internal static event Delegates.ShowLoadingTime_BeforeArgs _beforeShowLoadingTime;
        internal static event Delegates.ShowLoadingTime_NormalArgs _afterShowLoadingTime;

        private static void ShowLoadingTime(On.OnScreenDebugInfo.orig_ShowLoadingTime orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowLoadingTime @params = new()
            {
                self = self
            };
            _beforeShowLoadingTime?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowLoadingTime != null) _afterShowLoadingTime.Invoke(@params);
        }

        internal static void HookShowTargetFrameRate()
        {
            if (!HookedList.Contains("ShowTargetFrameRate"))
            {
                HookedList.Add("ShowTargetFrameRate");
                On.OnScreenDebugInfo.ShowTargetFrameRate += ShowTargetFrameRate;
            }
        }

        internal static event Delegates.ShowTargetFrameRate_BeforeArgs _beforeShowTargetFrameRate;
        internal static event Delegates.ShowTargetFrameRate_NormalArgs _afterShowTargetFrameRate;

        private static void ShowTargetFrameRate(On.OnScreenDebugInfo.orig_ShowTargetFrameRate orig,
            OnScreenDebugInfo self)
        {
            Delegates.Params_ShowTargetFrameRate @params = new()
            {
                self = self
            };
            _beforeShowTargetFrameRate?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterShowTargetFrameRate != null) _afterShowTargetFrameRate.Invoke(@params);
        }

        internal static void HookOnLevelUnload()
        {
            if (!HookedList.Contains("OnLevelUnload"))
            {
                HookedList.Add("OnLevelUnload");
                On.OnScreenDebugInfo.OnLevelUnload += OnLevelUnload;
            }
        }

        internal static event Delegates.OnLevelUnload_BeforeArgs _beforeOnLevelUnload;
        internal static event Delegates.OnLevelUnload_NormalArgs _afterOnLevelUnload;

        private static void OnLevelUnload(On.OnScreenDebugInfo.orig_OnLevelUnload orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnLevelUnload @params = new()
            {
                self = self
            };
            _beforeOnLevelUnload?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterOnLevelUnload != null) _afterOnLevelUnload.Invoke(@params);
        }

        internal static void HookRetrieveInfo()
        {
            if (!HookedList.Contains("RetrieveInfo"))
            {
                HookedList.Add("RetrieveInfo");
                On.OnScreenDebugInfo.RetrieveInfo += RetrieveInfo;
            }
        }

        internal static event Delegates.RetrieveInfo_BeforeArgs _beforeRetrieveInfo;
        internal static event Delegates.RetrieveInfo_NormalArgs _afterRetrieveInfo;

        private static void RetrieveInfo(On.OnScreenDebugInfo.orig_RetrieveInfo orig, OnScreenDebugInfo self)
        {
            Delegates.Params_RetrieveInfo @params = new()
            {
                self = self
            };
            _beforeRetrieveInfo?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterRetrieveInfo != null) _afterRetrieveInfo.Invoke(@params);
        }

        internal static void HookReadInput()
        {
            if (!HookedList.Contains("ReadInput"))
            {
                HookedList.Add("ReadInput");
                On.OnScreenDebugInfo.ReadInput += ReadInput;
            }
        }

        internal static event Delegates.ReadInput_BeforeArgs _beforeReadInput;
        internal static event Delegates.ReadInput_NormalArgs _afterReadInput;

        private static string ReadInput(On.OnScreenDebugInfo.orig_ReadInput orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ReadInput @params = new()
            {
                self = self
            };
            _beforeReadInput?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterReadInput != null) retVal = _afterReadInput.Invoke(@params);
            return retVal;
        }

        internal static void Hookorig_Awake()
        {
            if (!HookedList.Contains("orig_Awake"))
            {
                HookedList.Add("orig_Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OnScreenDebugInfo), "orig_Awake"), orig_Awake);
            }
        }

        internal static event Delegates.orig_Awake_BeforeArgs _beforeorig_Awake;
        internal static event Delegates.orig_Awake_NormalArgs _afterorig_Awake;

        private static void orig_Awake(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self)
        {
            Delegates.Params_orig_Awake @params = new()
            {
                self = self
            };
            _beforeorig_Awake?.Invoke(@params);
            self = @params.self;
            orig(self);
            if (_afterorig_Awake != null) _afterorig_Awake.Invoke(@params);
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_NormalArgs(Params_Awake args);

        public delegate void LevelActivated_BeforeArgs(Params_LevelActivated args);

        public delegate void LevelActivated_NormalArgs(Params_LevelActivated args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_NormalArgs(Params_OnDisable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_NormalArgs(Params_OnEnable args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_NormalArgs(Params_OnGUI args);

        public delegate void OnLevelUnload_BeforeArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_NormalArgs(Params_OnLevelUnload args);

        public delegate void orig_Awake_BeforeArgs(Params_orig_Awake args);

        public delegate void orig_Awake_NormalArgs(Params_orig_Awake args);

        public delegate void ReadInput_BeforeArgs(Params_ReadInput args);

        public delegate string ReadInput_NormalArgs(Params_ReadInput args);

        public delegate void RetrieveInfo_BeforeArgs(Params_RetrieveInfo args);

        public delegate void RetrieveInfo_NormalArgs(Params_RetrieveInfo args);

        public delegate void ShowFPS_BeforeArgs(Params_ShowFPS args);

        public delegate void ShowFPS_NormalArgs(Params_ShowFPS args);

        public delegate void ShowGameInfo_BeforeArgs(Params_ShowGameInfo args);

        public delegate void ShowGameInfo_NormalArgs(Params_ShowGameInfo args);

        public delegate void ShowInput_BeforeArgs(Params_ShowInput args);

        public delegate void ShowInput_NormalArgs(Params_ShowInput args);

        public delegate void ShowLoadingTime_BeforeArgs(Params_ShowLoadingTime args);

        public delegate void ShowLoadingTime_NormalArgs(Params_ShowLoadingTime args);

        public delegate void ShowTargetFrameRate_BeforeArgs(Params_ShowTargetFrameRate args);

        public delegate void ShowTargetFrameRate_NormalArgs(Params_ShowTargetFrameRate args);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate IEnumerator Start_NormalArgs(Params_Start args);

        public sealed class Params_Awake
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_Start
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_LevelActivated
        {
            public Scene sceneFrom;
            public Scene sceneTo;
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnEnable
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnDisable
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnGUI
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowFPS
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowGameInfo
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowInput
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowLoadingTime
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowTargetFrameRate
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnLevelUnload
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_RetrieveInfo
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ReadInput
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_orig_Awake
        {
            public OnScreenDebugInfo self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.LevelActivated_BeforeArgs LevelActivated
        {
            add
            {
                HookHandler._beforeLevelActivated += value;
                HookHandler.HookLevelActivated();
            }
            remove => HookHandler._beforeLevelActivated -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.ShowFPS_BeforeArgs ShowFPS
        {
            add
            {
                HookHandler._beforeShowFPS += value;
                HookHandler.HookShowFPS();
            }
            remove => HookHandler._beforeShowFPS -= value;
        }

        public static event Delegates.ShowGameInfo_BeforeArgs ShowGameInfo
        {
            add
            {
                HookHandler._beforeShowGameInfo += value;
                HookHandler.HookShowGameInfo();
            }
            remove => HookHandler._beforeShowGameInfo -= value;
        }

        public static event Delegates.ShowInput_BeforeArgs ShowInput
        {
            add
            {
                HookHandler._beforeShowInput += value;
                HookHandler.HookShowInput();
            }
            remove => HookHandler._beforeShowInput -= value;
        }

        public static event Delegates.ShowLoadingTime_BeforeArgs ShowLoadingTime
        {
            add
            {
                HookHandler._beforeShowLoadingTime += value;
                HookHandler.HookShowLoadingTime();
            }
            remove => HookHandler._beforeShowLoadingTime -= value;
        }

        public static event Delegates.ShowTargetFrameRate_BeforeArgs ShowTargetFrameRate
        {
            add
            {
                HookHandler._beforeShowTargetFrameRate += value;
                HookHandler.HookShowTargetFrameRate();
            }
            remove => HookHandler._beforeShowTargetFrameRate -= value;
        }

        public static event Delegates.OnLevelUnload_BeforeArgs OnLevelUnload
        {
            add
            {
                HookHandler._beforeOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._beforeOnLevelUnload -= value;
        }

        public static event Delegates.RetrieveInfo_BeforeArgs RetrieveInfo
        {
            add
            {
                HookHandler._beforeRetrieveInfo += value;
                HookHandler.HookRetrieveInfo();
            }
            remove => HookHandler._beforeRetrieveInfo -= value;
        }

        public static event Delegates.ReadInput_BeforeArgs ReadInput
        {
            add
            {
                HookHandler._beforeReadInput += value;
                HookHandler.HookReadInput();
            }
            remove => HookHandler._beforeReadInput -= value;
        }

        public static event Delegates.orig_Awake_BeforeArgs orig_Awake
        {
            add
            {
                HookHandler._beforeorig_Awake += value;
                HookHandler.Hookorig_Awake();
            }
            remove => HookHandler._beforeorig_Awake -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_NormalArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.LevelActivated_NormalArgs LevelActivated
        {
            add
            {
                HookHandler._afterLevelActivated += value;
                HookHandler.HookLevelActivated();
            }
            remove => HookHandler._afterLevelActivated -= value;
        }

        public static event Delegates.OnEnable_NormalArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_NormalArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnGUI_NormalArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.ShowFPS_NormalArgs ShowFPS
        {
            add
            {
                HookHandler._afterShowFPS += value;
                HookHandler.HookShowFPS();
            }
            remove => HookHandler._afterShowFPS -= value;
        }

        public static event Delegates.ShowGameInfo_NormalArgs ShowGameInfo
        {
            add
            {
                HookHandler._afterShowGameInfo += value;
                HookHandler.HookShowGameInfo();
            }
            remove => HookHandler._afterShowGameInfo -= value;
        }

        public static event Delegates.ShowInput_NormalArgs ShowInput
        {
            add
            {
                HookHandler._afterShowInput += value;
                HookHandler.HookShowInput();
            }
            remove => HookHandler._afterShowInput -= value;
        }

        public static event Delegates.ShowLoadingTime_NormalArgs ShowLoadingTime
        {
            add
            {
                HookHandler._afterShowLoadingTime += value;
                HookHandler.HookShowLoadingTime();
            }
            remove => HookHandler._afterShowLoadingTime -= value;
        }

        public static event Delegates.ShowTargetFrameRate_NormalArgs ShowTargetFrameRate
        {
            add
            {
                HookHandler._afterShowTargetFrameRate += value;
                HookHandler.HookShowTargetFrameRate();
            }
            remove => HookHandler._afterShowTargetFrameRate -= value;
        }

        public static event Delegates.OnLevelUnload_NormalArgs OnLevelUnload
        {
            add
            {
                HookHandler._afterOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._afterOnLevelUnload -= value;
        }

        public static event Delegates.RetrieveInfo_NormalArgs RetrieveInfo
        {
            add
            {
                HookHandler._afterRetrieveInfo += value;
                HookHandler.HookRetrieveInfo();
            }
            remove => HookHandler._afterRetrieveInfo -= value;
        }

        public static event Delegates.ReadInput_NormalArgs ReadInput
        {
            add
            {
                HookHandler._afterReadInput += value;
                HookHandler.HookReadInput();
            }
            remove => HookHandler._afterReadInput -= value;
        }

        public static event Delegates.orig_Awake_NormalArgs orig_Awake
        {
            add
            {
                HookHandler._afterorig_Awake += value;
                HookHandler.Hookorig_Awake();
            }
            remove => HookHandler._afterorig_Awake -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.OnScreenDebugInfo.hook_Awake Awake
        {
            add => On.OnScreenDebugInfo.Awake += value;
            remove => On.OnScreenDebugInfo.Awake -= value;
        }

        public static event On.OnScreenDebugInfo.hook_Start Start
        {
            add => On.OnScreenDebugInfo.Start += value;
            remove => On.OnScreenDebugInfo.Start -= value;
        }

        public static event On.OnScreenDebugInfo.hook_LevelActivated LevelActivated
        {
            add => On.OnScreenDebugInfo.LevelActivated += value;
            remove => On.OnScreenDebugInfo.LevelActivated -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnEnable OnEnable
        {
            add => On.OnScreenDebugInfo.OnEnable += value;
            remove => On.OnScreenDebugInfo.OnEnable -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnDisable OnDisable
        {
            add => On.OnScreenDebugInfo.OnDisable += value;
            remove => On.OnScreenDebugInfo.OnDisable -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnGUI OnGUI
        {
            add => On.OnScreenDebugInfo.OnGUI += value;
            remove => On.OnScreenDebugInfo.OnGUI -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowFPS ShowFPS
        {
            add => On.OnScreenDebugInfo.ShowFPS += value;
            remove => On.OnScreenDebugInfo.ShowFPS -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowGameInfo ShowGameInfo
        {
            add => On.OnScreenDebugInfo.ShowGameInfo += value;
            remove => On.OnScreenDebugInfo.ShowGameInfo -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowInput ShowInput
        {
            add => On.OnScreenDebugInfo.ShowInput += value;
            remove => On.OnScreenDebugInfo.ShowInput -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowLoadingTime ShowLoadingTime
        {
            add => On.OnScreenDebugInfo.ShowLoadingTime += value;
            remove => On.OnScreenDebugInfo.ShowLoadingTime -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowTargetFrameRate ShowTargetFrameRate
        {
            add => On.OnScreenDebugInfo.ShowTargetFrameRate += value;
            remove => On.OnScreenDebugInfo.ShowTargetFrameRate -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnLevelUnload OnLevelUnload
        {
            add => On.OnScreenDebugInfo.OnLevelUnload += value;
            remove => On.OnScreenDebugInfo.OnLevelUnload -= value;
        }

        public static event On.OnScreenDebugInfo.hook_RetrieveInfo RetrieveInfo
        {
            add => On.OnScreenDebugInfo.RetrieveInfo += value;
            remove => On.OnScreenDebugInfo.RetrieveInfo -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ReadInput ReadInput
        {
            add => On.OnScreenDebugInfo.ReadInput += value;
            remove => On.OnScreenDebugInfo.ReadInput -= value;
        }

        public static event Delegates.orig_Awake_NormalArgs orig_Awake
        {
            add => HookEndpointManager.Add<Delegates.orig_Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnScreenDebugInfo), "orig_Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Awake_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnScreenDebugInfo), "orig_Awake"), value);
        }
    }
}