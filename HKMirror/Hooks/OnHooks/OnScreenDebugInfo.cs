using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for OnScreenDebugInfo class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnOnScreenDebugInfo
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void HookAwake()
        {
            if (!HookedList.Contains("Awake"))
            {
                HookedList.Add("Awake");
                On.OnScreenDebugInfo.Awake += Awake;
            }
        }

        internal static event Delegates.Awake_BeforeArgs _beforeAwake;
        internal static event Delegates.Awake_AfterArgs _afterAwake;

        private static void Awake(On.OnScreenDebugInfo.orig_Awake orig, OnScreenDebugInfo self)
        {
            Delegates.Params_Awake @params = new()
            {
                self = self
            };
            if (_beforeAwake != null)
                foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
                    try
                    {
                        _beforeAwake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterAwake != null)
                foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
                    try
                    {
                        _afterAwake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookStart()
        {
            if (!HookedList.Contains("Start"))
            {
                HookedList.Add("Start");
                On.OnScreenDebugInfo.Start += Start;
            }
        }

        internal static event Delegates.Start_BeforeArgs _beforeStart;

        private static IEnumerator Start(On.OnScreenDebugInfo.orig_Start orig, OnScreenDebugInfo self)
        {
            Delegates.Params_Start @params = new()
            {
                self = self
            };
            if (_beforeStart != null)
                foreach (Delegates.Start_BeforeArgs toInvoke in _beforeStart.GetInvocationList())
                    try
                    {
                        _beforeStart?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            return orig(self);
        }

        internal static void HookLevelActivated()
        {
            if (!HookedList.Contains("LevelActivated"))
            {
                HookedList.Add("LevelActivated");
                On.OnScreenDebugInfo.LevelActivated += LevelActivated;
            }
        }

        internal static event Delegates.LevelActivated_BeforeArgs _beforeLevelActivated;
        internal static event Delegates.LevelActivated_AfterArgs _afterLevelActivated;

        private static void LevelActivated(On.OnScreenDebugInfo.orig_LevelActivated orig, OnScreenDebugInfo self,
            Scene sceneFrom, Scene sceneTo)
        {
            Delegates.Params_LevelActivated @params = new()
            {
                self = self, sceneFrom = sceneFrom, sceneTo = sceneTo
            };
            if (_beforeLevelActivated != null)
                foreach (Delegates.LevelActivated_BeforeArgs toInvoke in _beforeLevelActivated.GetInvocationList())
                    try
                    {
                        _beforeLevelActivated?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            sceneFrom = @params.sceneFrom;
            sceneTo = @params.sceneTo;
            orig(self, sceneFrom, sceneTo);
            if (_afterLevelActivated != null)
                foreach (Delegates.LevelActivated_AfterArgs toInvoke in _afterLevelActivated.GetInvocationList())
                    try
                    {
                        _afterLevelActivated.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnEnable()
        {
            if (!HookedList.Contains("OnEnable"))
            {
                HookedList.Add("OnEnable");
                On.OnScreenDebugInfo.OnEnable += OnEnable;
            }
        }

        internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
        internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;

        private static void OnEnable(On.OnScreenDebugInfo.orig_OnEnable orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnEnable @params = new()
            {
                self = self
            };
            if (_beforeOnEnable != null)
                foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
                    try
                    {
                        _beforeOnEnable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnEnable != null)
                foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
                    try
                    {
                        _afterOnEnable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnDisable()
        {
            if (!HookedList.Contains("OnDisable"))
            {
                HookedList.Add("OnDisable");
                On.OnScreenDebugInfo.OnDisable += OnDisable;
            }
        }

        internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
        internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;

        private static void OnDisable(On.OnScreenDebugInfo.orig_OnDisable orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnDisable @params = new()
            {
                self = self
            };
            if (_beforeOnDisable != null)
                foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
                    try
                    {
                        _beforeOnDisable?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnDisable != null)
                foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
                    try
                    {
                        _afterOnDisable.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnGUI()
        {
            if (!HookedList.Contains("OnGUI"))
            {
                HookedList.Add("OnGUI");
                On.OnScreenDebugInfo.OnGUI += OnGUI;
            }
        }

        internal static event Delegates.OnGUI_BeforeArgs _beforeOnGUI;
        internal static event Delegates.OnGUI_AfterArgs _afterOnGUI;

        private static void OnGUI(On.OnScreenDebugInfo.orig_OnGUI orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnGUI @params = new()
            {
                self = self
            };
            if (_beforeOnGUI != null)
                foreach (Delegates.OnGUI_BeforeArgs toInvoke in _beforeOnGUI.GetInvocationList())
                    try
                    {
                        _beforeOnGUI?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnGUI != null)
                foreach (Delegates.OnGUI_AfterArgs toInvoke in _afterOnGUI.GetInvocationList())
                    try
                    {
                        _afterOnGUI.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShowFPS()
        {
            if (!HookedList.Contains("ShowFPS"))
            {
                HookedList.Add("ShowFPS");
                On.OnScreenDebugInfo.ShowFPS += ShowFPS;
            }
        }

        internal static event Delegates.ShowFPS_BeforeArgs _beforeShowFPS;
        internal static event Delegates.ShowFPS_AfterArgs _afterShowFPS;

        private static void ShowFPS(On.OnScreenDebugInfo.orig_ShowFPS orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowFPS @params = new()
            {
                self = self
            };
            if (_beforeShowFPS != null)
                foreach (Delegates.ShowFPS_BeforeArgs toInvoke in _beforeShowFPS.GetInvocationList())
                    try
                    {
                        _beforeShowFPS?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShowFPS != null)
                foreach (Delegates.ShowFPS_AfterArgs toInvoke in _afterShowFPS.GetInvocationList())
                    try
                    {
                        _afterShowFPS.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShowGameInfo()
        {
            if (!HookedList.Contains("ShowGameInfo"))
            {
                HookedList.Add("ShowGameInfo");
                On.OnScreenDebugInfo.ShowGameInfo += ShowGameInfo;
            }
        }

        internal static event Delegates.ShowGameInfo_BeforeArgs _beforeShowGameInfo;
        internal static event Delegates.ShowGameInfo_AfterArgs _afterShowGameInfo;

        private static void ShowGameInfo(On.OnScreenDebugInfo.orig_ShowGameInfo orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowGameInfo @params = new()
            {
                self = self
            };
            if (_beforeShowGameInfo != null)
                foreach (Delegates.ShowGameInfo_BeforeArgs toInvoke in _beforeShowGameInfo.GetInvocationList())
                    try
                    {
                        _beforeShowGameInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShowGameInfo != null)
                foreach (Delegates.ShowGameInfo_AfterArgs toInvoke in _afterShowGameInfo.GetInvocationList())
                    try
                    {
                        _afterShowGameInfo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShowInput()
        {
            if (!HookedList.Contains("ShowInput"))
            {
                HookedList.Add("ShowInput");
                On.OnScreenDebugInfo.ShowInput += ShowInput;
            }
        }

        internal static event Delegates.ShowInput_BeforeArgs _beforeShowInput;
        internal static event Delegates.ShowInput_AfterArgs _afterShowInput;

        private static void ShowInput(On.OnScreenDebugInfo.orig_ShowInput orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowInput @params = new()
            {
                self = self
            };
            if (_beforeShowInput != null)
                foreach (Delegates.ShowInput_BeforeArgs toInvoke in _beforeShowInput.GetInvocationList())
                    try
                    {
                        _beforeShowInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShowInput != null)
                foreach (Delegates.ShowInput_AfterArgs toInvoke in _afterShowInput.GetInvocationList())
                    try
                    {
                        _afterShowInput.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShowLoadingTime()
        {
            if (!HookedList.Contains("ShowLoadingTime"))
            {
                HookedList.Add("ShowLoadingTime");
                On.OnScreenDebugInfo.ShowLoadingTime += ShowLoadingTime;
            }
        }

        internal static event Delegates.ShowLoadingTime_BeforeArgs _beforeShowLoadingTime;
        internal static event Delegates.ShowLoadingTime_AfterArgs _afterShowLoadingTime;

        private static void ShowLoadingTime(On.OnScreenDebugInfo.orig_ShowLoadingTime orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ShowLoadingTime @params = new()
            {
                self = self
            };
            if (_beforeShowLoadingTime != null)
                foreach (Delegates.ShowLoadingTime_BeforeArgs toInvoke in _beforeShowLoadingTime.GetInvocationList())
                    try
                    {
                        _beforeShowLoadingTime?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShowLoadingTime != null)
                foreach (Delegates.ShowLoadingTime_AfterArgs toInvoke in _afterShowLoadingTime.GetInvocationList())
                    try
                    {
                        _afterShowLoadingTime.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookShowTargetFrameRate()
        {
            if (!HookedList.Contains("ShowTargetFrameRate"))
            {
                HookedList.Add("ShowTargetFrameRate");
                On.OnScreenDebugInfo.ShowTargetFrameRate += ShowTargetFrameRate;
            }
        }

        internal static event Delegates.ShowTargetFrameRate_BeforeArgs _beforeShowTargetFrameRate;
        internal static event Delegates.ShowTargetFrameRate_AfterArgs _afterShowTargetFrameRate;

        private static void ShowTargetFrameRate(On.OnScreenDebugInfo.orig_ShowTargetFrameRate orig,
            OnScreenDebugInfo self)
        {
            Delegates.Params_ShowTargetFrameRate @params = new()
            {
                self = self
            };
            if (_beforeShowTargetFrameRate != null)
                foreach (Delegates.ShowTargetFrameRate_BeforeArgs toInvoke in _beforeShowTargetFrameRate
                             .GetInvocationList())
                    try
                    {
                        _beforeShowTargetFrameRate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterShowTargetFrameRate != null)
                foreach (Delegates.ShowTargetFrameRate_AfterArgs toInvoke in
                         _afterShowTargetFrameRate.GetInvocationList())
                    try
                    {
                        _afterShowTargetFrameRate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookOnLevelUnload()
        {
            if (!HookedList.Contains("OnLevelUnload"))
            {
                HookedList.Add("OnLevelUnload");
                On.OnScreenDebugInfo.OnLevelUnload += OnLevelUnload;
            }
        }

        internal static event Delegates.OnLevelUnload_BeforeArgs _beforeOnLevelUnload;
        internal static event Delegates.OnLevelUnload_AfterArgs _afterOnLevelUnload;

        private static void OnLevelUnload(On.OnScreenDebugInfo.orig_OnLevelUnload orig, OnScreenDebugInfo self)
        {
            Delegates.Params_OnLevelUnload @params = new()
            {
                self = self
            };
            if (_beforeOnLevelUnload != null)
                foreach (Delegates.OnLevelUnload_BeforeArgs toInvoke in _beforeOnLevelUnload.GetInvocationList())
                    try
                    {
                        _beforeOnLevelUnload?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterOnLevelUnload != null)
                foreach (Delegates.OnLevelUnload_AfterArgs toInvoke in _afterOnLevelUnload.GetInvocationList())
                    try
                    {
                        _afterOnLevelUnload.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookRetrieveInfo()
        {
            if (!HookedList.Contains("RetrieveInfo"))
            {
                HookedList.Add("RetrieveInfo");
                On.OnScreenDebugInfo.RetrieveInfo += RetrieveInfo;
            }
        }

        internal static event Delegates.RetrieveInfo_BeforeArgs _beforeRetrieveInfo;
        internal static event Delegates.RetrieveInfo_AfterArgs _afterRetrieveInfo;

        private static void RetrieveInfo(On.OnScreenDebugInfo.orig_RetrieveInfo orig, OnScreenDebugInfo self)
        {
            Delegates.Params_RetrieveInfo @params = new()
            {
                self = self
            };
            if (_beforeRetrieveInfo != null)
                foreach (Delegates.RetrieveInfo_BeforeArgs toInvoke in _beforeRetrieveInfo.GetInvocationList())
                    try
                    {
                        _beforeRetrieveInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterRetrieveInfo != null)
                foreach (Delegates.RetrieveInfo_AfterArgs toInvoke in _afterRetrieveInfo.GetInvocationList())
                    try
                    {
                        _afterRetrieveInfo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }

        internal static void HookReadInput()
        {
            if (!HookedList.Contains("ReadInput"))
            {
                HookedList.Add("ReadInput");
                On.OnScreenDebugInfo.ReadInput += ReadInput;
            }
        }

        internal static event Delegates.ReadInput_BeforeArgs _beforeReadInput;
        internal static event Delegates.ReadInput_AfterArgs _afterReadInput;

        private static string ReadInput(On.OnScreenDebugInfo.orig_ReadInput orig, OnScreenDebugInfo self)
        {
            Delegates.Params_ReadInput @params = new()
            {
                self = self
            };
            if (_beforeReadInput != null)
                foreach (Delegates.ReadInput_BeforeArgs toInvoke in _beforeReadInput.GetInvocationList())
                    try
                    {
                        _beforeReadInput?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            var retVal = orig(self);
            if (_afterReadInput != null)
                foreach (Delegates.ReadInput_AfterArgs toInvoke in _afterReadInput.GetInvocationList())
                    try
                    {
                        retVal = _afterReadInput.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            return retVal;
        }

        internal static void Hookorig_Awake()
        {
            if (!HookedList.Contains("orig_Awake"))
            {
                HookedList.Add("orig_Awake");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(OnScreenDebugInfo), "orig_Awake"), orig_Awake);
            }
        }

        internal static event Delegates.orig_Awake_BeforeArgs _beforeorig_Awake;
        internal static event Delegates.orig_Awake_AfterArgs _afterorig_Awake;

        private static void orig_Awake(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self)
        {
            Delegates.Params_orig_Awake @params = new()
            {
                self = self
            };
            if (_beforeorig_Awake != null)
                foreach (Delegates.orig_Awake_BeforeArgs toInvoke in _beforeorig_Awake.GetInvocationList())
                    try
                    {
                        _beforeorig_Awake?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }

            self = @params.self;
            orig(self);
            if (_afterorig_Awake != null)
                foreach (Delegates.orig_Awake_AfterArgs toInvoke in _afterorig_Awake.GetInvocationList())
                    try
                    {
                        _afterorig_Awake.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void Awake_AfterArgs(Params_Awake args);

        public delegate void Awake_BeforeArgs(Params_Awake args);

        public delegate void Awake_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void LevelActivated_AfterArgs(Params_LevelActivated args);

        public delegate void LevelActivated_BeforeArgs(Params_LevelActivated args);

        public delegate void LevelActivated_WithArgs(Action<OnScreenDebugInfo, Scene, Scene> orig,
            OnScreenDebugInfo self, Scene sceneFrom, Scene sceneTo);

        public delegate void OnDisable_AfterArgs(Params_OnDisable args);

        public delegate void OnDisable_BeforeArgs(Params_OnDisable args);

        public delegate void OnDisable_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void OnEnable_AfterArgs(Params_OnEnable args);

        public delegate void OnEnable_BeforeArgs(Params_OnEnable args);

        public delegate void OnEnable_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void OnGUI_AfterArgs(Params_OnGUI args);

        public delegate void OnGUI_BeforeArgs(Params_OnGUI args);

        public delegate void OnGUI_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void OnLevelUnload_AfterArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_BeforeArgs(Params_OnLevelUnload args);

        public delegate void OnLevelUnload_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void orig_Awake_AfterArgs(Params_orig_Awake args);

        public delegate void orig_Awake_BeforeArgs(Params_orig_Awake args);

        public delegate void orig_Awake_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate string ReadInput_AfterArgs(Params_ReadInput args, string ret);

        public delegate void ReadInput_BeforeArgs(Params_ReadInput args);

        public delegate string ReadInput_WithArgs(Func<OnScreenDebugInfo, string> orig, OnScreenDebugInfo self);

        public delegate void RetrieveInfo_AfterArgs(Params_RetrieveInfo args);

        public delegate void RetrieveInfo_BeforeArgs(Params_RetrieveInfo args);

        public delegate void RetrieveInfo_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void ShowFPS_AfterArgs(Params_ShowFPS args);

        public delegate void ShowFPS_BeforeArgs(Params_ShowFPS args);

        public delegate void ShowFPS_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void ShowGameInfo_AfterArgs(Params_ShowGameInfo args);

        public delegate void ShowGameInfo_BeforeArgs(Params_ShowGameInfo args);

        public delegate void ShowGameInfo_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void ShowInput_AfterArgs(Params_ShowInput args);

        public delegate void ShowInput_BeforeArgs(Params_ShowInput args);

        public delegate void ShowInput_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void ShowLoadingTime_AfterArgs(Params_ShowLoadingTime args);

        public delegate void ShowLoadingTime_BeforeArgs(Params_ShowLoadingTime args);

        public delegate void ShowLoadingTime_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate void ShowTargetFrameRate_AfterArgs(Params_ShowTargetFrameRate args);

        public delegate void ShowTargetFrameRate_BeforeArgs(Params_ShowTargetFrameRate args);

        public delegate void ShowTargetFrameRate_WithArgs(Action<OnScreenDebugInfo> orig, OnScreenDebugInfo self);

        public delegate IEnumerator Start_AfterArgs(Params_Start args, IEnumerator ret);

        public delegate void Start_BeforeArgs(Params_Start args);

        public delegate IEnumerator Start_WithArgs(Func<OnScreenDebugInfo, IEnumerator> orig, OnScreenDebugInfo self);

        public sealed class Params_Awake
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_Start
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_LevelActivated
        {
            public Scene sceneFrom;
            public Scene sceneTo;
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnEnable
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnDisable
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnGUI
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowFPS
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowGameInfo
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowInput
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowLoadingTime
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ShowTargetFrameRate
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_OnLevelUnload
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_RetrieveInfo
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_ReadInput
        {
            public OnScreenDebugInfo self;
        }

        public sealed class Params_orig_Awake
        {
            public OnScreenDebugInfo self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.Awake_BeforeArgs Awake
        {
            add
            {
                HookHandler._beforeAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._beforeAwake -= value;
        }

        public static event Delegates.Start_BeforeArgs Start
        {
            add
            {
                HookHandler._beforeStart += value;
                HookHandler.HookStart();
            }
            remove => HookHandler._beforeStart -= value;
        }

        public static event Delegates.LevelActivated_BeforeArgs LevelActivated
        {
            add
            {
                HookHandler._beforeLevelActivated += value;
                HookHandler.HookLevelActivated();
            }
            remove => HookHandler._beforeLevelActivated -= value;
        }

        public static event Delegates.OnEnable_BeforeArgs OnEnable
        {
            add
            {
                HookHandler._beforeOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._beforeOnEnable -= value;
        }

        public static event Delegates.OnDisable_BeforeArgs OnDisable
        {
            add
            {
                HookHandler._beforeOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._beforeOnDisable -= value;
        }

        public static event Delegates.OnGUI_BeforeArgs OnGUI
        {
            add
            {
                HookHandler._beforeOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._beforeOnGUI -= value;
        }

        public static event Delegates.ShowFPS_BeforeArgs ShowFPS
        {
            add
            {
                HookHandler._beforeShowFPS += value;
                HookHandler.HookShowFPS();
            }
            remove => HookHandler._beforeShowFPS -= value;
        }

        public static event Delegates.ShowGameInfo_BeforeArgs ShowGameInfo
        {
            add
            {
                HookHandler._beforeShowGameInfo += value;
                HookHandler.HookShowGameInfo();
            }
            remove => HookHandler._beforeShowGameInfo -= value;
        }

        public static event Delegates.ShowInput_BeforeArgs ShowInput
        {
            add
            {
                HookHandler._beforeShowInput += value;
                HookHandler.HookShowInput();
            }
            remove => HookHandler._beforeShowInput -= value;
        }

        public static event Delegates.ShowLoadingTime_BeforeArgs ShowLoadingTime
        {
            add
            {
                HookHandler._beforeShowLoadingTime += value;
                HookHandler.HookShowLoadingTime();
            }
            remove => HookHandler._beforeShowLoadingTime -= value;
        }

        public static event Delegates.ShowTargetFrameRate_BeforeArgs ShowTargetFrameRate
        {
            add
            {
                HookHandler._beforeShowTargetFrameRate += value;
                HookHandler.HookShowTargetFrameRate();
            }
            remove => HookHandler._beforeShowTargetFrameRate -= value;
        }

        public static event Delegates.OnLevelUnload_BeforeArgs OnLevelUnload
        {
            add
            {
                HookHandler._beforeOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._beforeOnLevelUnload -= value;
        }

        public static event Delegates.RetrieveInfo_BeforeArgs RetrieveInfo
        {
            add
            {
                HookHandler._beforeRetrieveInfo += value;
                HookHandler.HookRetrieveInfo();
            }
            remove => HookHandler._beforeRetrieveInfo -= value;
        }

        public static event Delegates.ReadInput_BeforeArgs ReadInput
        {
            add
            {
                HookHandler._beforeReadInput += value;
                HookHandler.HookReadInput();
            }
            remove => HookHandler._beforeReadInput -= value;
        }

        public static event Delegates.orig_Awake_BeforeArgs orig_Awake
        {
            add
            {
                HookHandler._beforeorig_Awake += value;
                HookHandler.Hookorig_Awake();
            }
            remove => HookHandler._beforeorig_Awake -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.Awake_AfterArgs Awake
        {
            add
            {
                HookHandler._afterAwake += value;
                HookHandler.HookAwake();
            }
            remove => HookHandler._afterAwake -= value;
        }

        public static event Delegates.LevelActivated_AfterArgs LevelActivated
        {
            add
            {
                HookHandler._afterLevelActivated += value;
                HookHandler.HookLevelActivated();
            }
            remove => HookHandler._afterLevelActivated -= value;
        }

        public static event Delegates.OnEnable_AfterArgs OnEnable
        {
            add
            {
                HookHandler._afterOnEnable += value;
                HookHandler.HookOnEnable();
            }
            remove => HookHandler._afterOnEnable -= value;
        }

        public static event Delegates.OnDisable_AfterArgs OnDisable
        {
            add
            {
                HookHandler._afterOnDisable += value;
                HookHandler.HookOnDisable();
            }
            remove => HookHandler._afterOnDisable -= value;
        }

        public static event Delegates.OnGUI_AfterArgs OnGUI
        {
            add
            {
                HookHandler._afterOnGUI += value;
                HookHandler.HookOnGUI();
            }
            remove => HookHandler._afterOnGUI -= value;
        }

        public static event Delegates.ShowFPS_AfterArgs ShowFPS
        {
            add
            {
                HookHandler._afterShowFPS += value;
                HookHandler.HookShowFPS();
            }
            remove => HookHandler._afterShowFPS -= value;
        }

        public static event Delegates.ShowGameInfo_AfterArgs ShowGameInfo
        {
            add
            {
                HookHandler._afterShowGameInfo += value;
                HookHandler.HookShowGameInfo();
            }
            remove => HookHandler._afterShowGameInfo -= value;
        }

        public static event Delegates.ShowInput_AfterArgs ShowInput
        {
            add
            {
                HookHandler._afterShowInput += value;
                HookHandler.HookShowInput();
            }
            remove => HookHandler._afterShowInput -= value;
        }

        public static event Delegates.ShowLoadingTime_AfterArgs ShowLoadingTime
        {
            add
            {
                HookHandler._afterShowLoadingTime += value;
                HookHandler.HookShowLoadingTime();
            }
            remove => HookHandler._afterShowLoadingTime -= value;
        }

        public static event Delegates.ShowTargetFrameRate_AfterArgs ShowTargetFrameRate
        {
            add
            {
                HookHandler._afterShowTargetFrameRate += value;
                HookHandler.HookShowTargetFrameRate();
            }
            remove => HookHandler._afterShowTargetFrameRate -= value;
        }

        public static event Delegates.OnLevelUnload_AfterArgs OnLevelUnload
        {
            add
            {
                HookHandler._afterOnLevelUnload += value;
                HookHandler.HookOnLevelUnload();
            }
            remove => HookHandler._afterOnLevelUnload -= value;
        }

        public static event Delegates.RetrieveInfo_AfterArgs RetrieveInfo
        {
            add
            {
                HookHandler._afterRetrieveInfo += value;
                HookHandler.HookRetrieveInfo();
            }
            remove => HookHandler._afterRetrieveInfo -= value;
        }

        public static event Delegates.ReadInput_AfterArgs ReadInput
        {
            add
            {
                HookHandler._afterReadInput += value;
                HookHandler.HookReadInput();
            }
            remove => HookHandler._afterReadInput -= value;
        }

        public static event Delegates.orig_Awake_AfterArgs orig_Awake
        {
            add
            {
                HookHandler._afterorig_Awake += value;
                HookHandler.Hookorig_Awake();
            }
            remove => HookHandler._afterorig_Awake -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event On.OnScreenDebugInfo.hook_Awake Awake
        {
            add => On.OnScreenDebugInfo.Awake += value;
            remove => On.OnScreenDebugInfo.Awake -= value;
        }

        public static event On.OnScreenDebugInfo.hook_Start Start
        {
            add => On.OnScreenDebugInfo.Start += value;
            remove => On.OnScreenDebugInfo.Start -= value;
        }

        public static event On.OnScreenDebugInfo.hook_LevelActivated LevelActivated
        {
            add => On.OnScreenDebugInfo.LevelActivated += value;
            remove => On.OnScreenDebugInfo.LevelActivated -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnEnable OnEnable
        {
            add => On.OnScreenDebugInfo.OnEnable += value;
            remove => On.OnScreenDebugInfo.OnEnable -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnDisable OnDisable
        {
            add => On.OnScreenDebugInfo.OnDisable += value;
            remove => On.OnScreenDebugInfo.OnDisable -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnGUI OnGUI
        {
            add => On.OnScreenDebugInfo.OnGUI += value;
            remove => On.OnScreenDebugInfo.OnGUI -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowFPS ShowFPS
        {
            add => On.OnScreenDebugInfo.ShowFPS += value;
            remove => On.OnScreenDebugInfo.ShowFPS -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowGameInfo ShowGameInfo
        {
            add => On.OnScreenDebugInfo.ShowGameInfo += value;
            remove => On.OnScreenDebugInfo.ShowGameInfo -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowInput ShowInput
        {
            add => On.OnScreenDebugInfo.ShowInput += value;
            remove => On.OnScreenDebugInfo.ShowInput -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowLoadingTime ShowLoadingTime
        {
            add => On.OnScreenDebugInfo.ShowLoadingTime += value;
            remove => On.OnScreenDebugInfo.ShowLoadingTime -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ShowTargetFrameRate ShowTargetFrameRate
        {
            add => On.OnScreenDebugInfo.ShowTargetFrameRate += value;
            remove => On.OnScreenDebugInfo.ShowTargetFrameRate -= value;
        }

        public static event On.OnScreenDebugInfo.hook_OnLevelUnload OnLevelUnload
        {
            add => On.OnScreenDebugInfo.OnLevelUnload += value;
            remove => On.OnScreenDebugInfo.OnLevelUnload -= value;
        }

        public static event On.OnScreenDebugInfo.hook_RetrieveInfo RetrieveInfo
        {
            add => On.OnScreenDebugInfo.RetrieveInfo += value;
            remove => On.OnScreenDebugInfo.RetrieveInfo -= value;
        }

        public static event On.OnScreenDebugInfo.hook_ReadInput ReadInput
        {
            add => On.OnScreenDebugInfo.ReadInput += value;
            remove => On.OnScreenDebugInfo.ReadInput -= value;
        }

        public static event Delegates.orig_Awake_WithArgs orig_Awake
        {
            add => HookEndpointManager.Add<Delegates.orig_Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnScreenDebugInfo), "orig_Awake"), value);
            remove => HookEndpointManager.Remove<Delegates.orig_Awake_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(OnScreenDebugInfo), "orig_Awake"), value);
        }
    }
}