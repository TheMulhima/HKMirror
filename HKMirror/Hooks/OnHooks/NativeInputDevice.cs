using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
///     Contains different types of On Hooks for NativeInputDevice class.<br />
///     Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnNativeInputDevice
{
    internal static class HookHandler
    {
        private static readonly List<string> HookedList = new();

        internal static void Hookget_Handle()
        {
            if (!HookedList.Contains("get_Handle"))
            {
                HookedList.Add("get_Handle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_Handle"), get_Handle);
            }
        }

        internal static event Delegates.get_Handle_BeforeArgs _beforeget_Handle;
        internal static event Delegates.get_Handle_NormalArgs _afterget_Handle;

        private static uint get_Handle(Func<NativeInputDevice, uint> orig, NativeInputDevice self)
        {
            Delegates.Params_get_Handle @params = new()
            {
                self = self
            };
            _beforeget_Handle?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Handle != null) retVal = _afterget_Handle.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Handle()
        {
            if (!HookedList.Contains("set_Handle"))
            {
                HookedList.Add("set_Handle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "set_Handle"), set_Handle);
            }
        }

        internal static event Delegates.set_Handle_BeforeArgs _beforeset_Handle;
        internal static event Delegates.set_Handle_NormalArgs _afterset_Handle;

        private static void set_Handle(Action<NativeInputDevice, uint> orig, NativeInputDevice self, uint value)
        {
            Delegates.Params_set_Handle @params = new()
            {
                self = self, value = value
            };
            _beforeset_Handle?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Handle != null) _afterset_Handle.Invoke(@params);
        }

        internal static void Hookget_Info()
        {
            if (!HookedList.Contains("get_Info"))
            {
                HookedList.Add("get_Info");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_Info"), get_Info);
            }
        }

        internal static event Delegates.get_Info_BeforeArgs _beforeget_Info;
        internal static event Delegates.get_Info_NormalArgs _afterget_Info;

        private static InputDeviceInfo get_Info(Func<NativeInputDevice, InputDeviceInfo> orig, NativeInputDevice self)
        {
            Delegates.Params_get_Info @params = new()
            {
                self = self
            };
            _beforeget_Info?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Info != null) retVal = _afterget_Info.Invoke(@params);
            return retVal;
        }

        internal static void Hookset_Info()
        {
            if (!HookedList.Contains("set_Info"))
            {
                HookedList.Add("set_Info");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "set_Info"), set_Info);
            }
        }

        internal static event Delegates.set_Info_BeforeArgs _beforeset_Info;
        internal static event Delegates.set_Info_NormalArgs _afterset_Info;

        private static void set_Info(Action<NativeInputDevice, InputDeviceInfo> orig, NativeInputDevice self,
            InputDeviceInfo value)
        {
            Delegates.Params_set_Info @params = new()
            {
                self = self, value = value
            };
            _beforeset_Info?.Invoke(@params);
            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Info != null) _afterset_Info.Invoke(@params);
        }

        internal static void HookInitialize_UInt32_InputDeviceInfo_InputDeviceProfile()
        {
            if (!HookedList.Contains("Initialize_UInt32_InputDeviceInfo_InputDeviceProfile"))
            {
                HookedList.Add("Initialize_UInt32_InputDeviceInfo_InputDeviceProfile");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice),
                        "Initialize_UInt32_InputDeviceInfo_InputDeviceProfile"),
                    Initialize_UInt32_InputDeviceInfo_InputDeviceProfile);
            }
        }

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs
            _beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile;

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_NormalArgs
            _afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile;

        private static void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile(
            Action<NativeInputDevice, uint, InputDeviceInfo, InputDeviceProfile> orig, NativeInputDevice self,
            uint deviceHandle, InputDeviceInfo deviceInfo, InputDeviceProfile deviceProfile)
        {
            Delegates.Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile @params = new()
            {
                self = self, deviceHandle = deviceHandle, deviceInfo = deviceInfo, deviceProfile = deviceProfile
            };
            _beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile?.Invoke(@params);
            self = @params.self;
            deviceHandle = @params.deviceHandle;
            deviceInfo = @params.deviceInfo;
            deviceProfile = @params.deviceProfile;
            orig(self, deviceHandle, deviceInfo, deviceProfile);
            if (_afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile != null)
                _afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile.Invoke(@params);
        }

        internal static void HookInitialize_UInt32_InputDeviceInfo()
        {
            if (!HookedList.Contains("Initialize_UInt32_InputDeviceInfo"))
            {
                HookedList.Add("Initialize_UInt32_InputDeviceInfo");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Initialize_UInt32_InputDeviceInfo"),
                    Initialize_UInt32_InputDeviceInfo);
            }
        }

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_BeforeArgs
            _beforeInitialize_UInt32_InputDeviceInfo;

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_NormalArgs
            _afterInitialize_UInt32_InputDeviceInfo;

        private static void Initialize_UInt32_InputDeviceInfo(Action<NativeInputDevice, uint, InputDeviceInfo> orig,
            NativeInputDevice self, uint deviceHandle, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_Initialize_UInt32_InputDeviceInfo @params = new()
            {
                self = self, deviceHandle = deviceHandle, deviceInfo = deviceInfo
            };
            _beforeInitialize_UInt32_InputDeviceInfo?.Invoke(@params);
            self = @params.self;
            deviceHandle = @params.deviceHandle;
            deviceInfo = @params.deviceInfo;
            orig(self, deviceHandle, deviceInfo);
            if (_afterInitialize_UInt32_InputDeviceInfo != null)
                _afterInitialize_UInt32_InputDeviceInfo.Invoke(@params);
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Update"), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_NormalArgs _afterUpdate;

        private static void Update(Action<NativeInputDevice, ulong, float> orig, NativeInputDevice self,
            ulong updateTick, float deltaTime)
        {
            Delegates.Params_Update @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            _beforeUpdate?.Invoke(@params);
            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdate != null) _afterUpdate.Invoke(@params);
        }

        internal static void HookReadRawButtonState()
        {
            if (!HookedList.Contains("ReadRawButtonState"))
            {
                HookedList.Add("ReadRawButtonState");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "ReadRawButtonState"),
                    ReadRawButtonState);
            }
        }

        internal static event Delegates.ReadRawButtonState_BeforeArgs _beforeReadRawButtonState;
        internal static event Delegates.ReadRawButtonState_NormalArgs _afterReadRawButtonState;

        private static bool ReadRawButtonState(Func<NativeInputDevice, int, bool> orig, NativeInputDevice self,
            int index)
        {
            Delegates.Params_ReadRawButtonState @params = new()
            {
                self = self, index = index
            };
            _beforeReadRawButtonState?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterReadRawButtonState != null) retVal = _afterReadRawButtonState.Invoke(@params);
            return retVal;
        }

        internal static void HookReadRawAnalogValue()
        {
            if (!HookedList.Contains("ReadRawAnalogValue"))
            {
                HookedList.Add("ReadRawAnalogValue");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "ReadRawAnalogValue"),
                    ReadRawAnalogValue);
            }
        }

        internal static event Delegates.ReadRawAnalogValue_BeforeArgs _beforeReadRawAnalogValue;
        internal static event Delegates.ReadRawAnalogValue_NormalArgs _afterReadRawAnalogValue;

        private static float ReadRawAnalogValue(Func<NativeInputDevice, int, float> orig, NativeInputDevice self,
            int index)
        {
            Delegates.Params_ReadRawAnalogValue @params = new()
            {
                self = self, index = index
            };
            _beforeReadRawAnalogValue?.Invoke(@params);
            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterReadRawAnalogValue != null) retVal = _afterReadRawAnalogValue.Invoke(@params);
            return retVal;
        }

        internal static void HookFloatToByte()
        {
            if (!HookedList.Contains("FloatToByte"))
            {
                HookedList.Add("FloatToByte");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "FloatToByte", false), FloatToByte);
            }
        }

        internal static event Delegates.FloatToByte_BeforeArgs _beforeFloatToByte;
        internal static event Delegates.FloatToByte_NormalArgs _afterFloatToByte;

        private static byte FloatToByte(Func<float, byte> orig, float value)
        {
            Delegates.Params_FloatToByte @params = new()
            {
                value = value
            };
            _beforeFloatToByte?.Invoke(@params);
            value = @params.value;
            var retVal = orig(value);
            if (_afterFloatToByte != null) retVal = _afterFloatToByte.Invoke(@params);
            return retVal;
        }

        internal static void HookVibrate()
        {
            if (!HookedList.Contains("Vibrate"))
            {
                HookedList.Add("Vibrate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Vibrate"), Vibrate);
            }
        }

        internal static event Delegates.Vibrate_BeforeArgs _beforeVibrate;
        internal static event Delegates.Vibrate_NormalArgs _afterVibrate;

        private static void Vibrate(Action<NativeInputDevice, float, float> orig, NativeInputDevice self,
            float leftMotor, float rightMotor)
        {
            Delegates.Params_Vibrate @params = new()
            {
                self = self, leftMotor = leftMotor, rightMotor = rightMotor
            };
            _beforeVibrate?.Invoke(@params);
            self = @params.self;
            leftMotor = @params.leftMotor;
            rightMotor = @params.rightMotor;
            orig(self, leftMotor, rightMotor);
            if (_afterVibrate != null) _afterVibrate.Invoke(@params);
        }

        internal static void HookSetLightColor()
        {
            if (!HookedList.Contains("SetLightColor"))
            {
                HookedList.Add("SetLightColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "SetLightColor"), SetLightColor);
            }
        }

        internal static event Delegates.SetLightColor_BeforeArgs _beforeSetLightColor;
        internal static event Delegates.SetLightColor_NormalArgs _afterSetLightColor;

        private static void SetLightColor(Action<NativeInputDevice, float, float, float> orig, NativeInputDevice self,
            float red, float green, float blue)
        {
            Delegates.Params_SetLightColor @params = new()
            {
                self = self, red = red, green = green, blue = blue
            };
            _beforeSetLightColor?.Invoke(@params);
            self = @params.self;
            red = @params.red;
            green = @params.green;
            blue = @params.blue;
            orig(self, red, green, blue);
            if (_afterSetLightColor != null) _afterSetLightColor.Invoke(@params);
        }

        internal static void HookSetLightFlash()
        {
            if (!HookedList.Contains("SetLightFlash"))
            {
                HookedList.Add("SetLightFlash");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "SetLightFlash"), SetLightFlash);
            }
        }

        internal static event Delegates.SetLightFlash_BeforeArgs _beforeSetLightFlash;
        internal static event Delegates.SetLightFlash_NormalArgs _afterSetLightFlash;

        private static void SetLightFlash(Action<NativeInputDevice, float, float> orig, NativeInputDevice self,
            float flashOnDuration, float flashOffDuration)
        {
            Delegates.Params_SetLightFlash @params = new()
            {
                self = self, flashOnDuration = flashOnDuration, flashOffDuration = flashOffDuration
            };
            _beforeSetLightFlash?.Invoke(@params);
            self = @params.self;
            flashOnDuration = @params.flashOnDuration;
            flashOffDuration = @params.flashOffDuration;
            orig(self, flashOnDuration, flashOffDuration);
            if (_afterSetLightFlash != null) _afterSetLightFlash.Invoke(@params);
        }

        internal static void HookGetAppleGlyphNameForControl()
        {
            if (!HookedList.Contains("GetAppleGlyphNameForControl"))
            {
                HookedList.Add("GetAppleGlyphNameForControl");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "GetAppleGlyphNameForControl"),
                    GetAppleGlyphNameForControl);
            }
        }

        internal static event Delegates.GetAppleGlyphNameForControl_BeforeArgs _beforeGetAppleGlyphNameForControl;
        internal static event Delegates.GetAppleGlyphNameForControl_NormalArgs _afterGetAppleGlyphNameForControl;

        private static string GetAppleGlyphNameForControl(Func<NativeInputDevice, InputControlType, string> orig,
            NativeInputDevice self, InputControlType controlType)
        {
            Delegates.Params_GetAppleGlyphNameForControl @params = new()
            {
                self = self, controlType = controlType
            };
            _beforeGetAppleGlyphNameForControl?.Invoke(@params);
            self = @params.self;
            controlType = @params.controlType;
            var retVal = orig(self, controlType);
            if (_afterGetAppleGlyphNameForControl != null) retVal = _afterGetAppleGlyphNameForControl.Invoke(@params);
            return retVal;
        }

        internal static void HookHasSameVendorID()
        {
            if (!HookedList.Contains("HasSameVendorID"))
            {
                HookedList.Add("HasSameVendorID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameVendorID"), HasSameVendorID);
            }
        }

        internal static event Delegates.HasSameVendorID_BeforeArgs _beforeHasSameVendorID;
        internal static event Delegates.HasSameVendorID_NormalArgs _afterHasSameVendorID;

        private static bool HasSameVendorID(Func<NativeInputDevice, InputDeviceInfo, bool> orig, NativeInputDevice self,
            InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameVendorID @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeHasSameVendorID?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameVendorID != null) retVal = _afterHasSameVendorID.Invoke(@params);
            return retVal;
        }

        internal static void HookHasSameProductID()
        {
            if (!HookedList.Contains("HasSameProductID"))
            {
                HookedList.Add("HasSameProductID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameProductID"),
                    HasSameProductID);
            }
        }

        internal static event Delegates.HasSameProductID_BeforeArgs _beforeHasSameProductID;
        internal static event Delegates.HasSameProductID_NormalArgs _afterHasSameProductID;

        private static bool HasSameProductID(Func<NativeInputDevice, InputDeviceInfo, bool> orig,
            NativeInputDevice self, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameProductID @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeHasSameProductID?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameProductID != null) retVal = _afterHasSameProductID.Invoke(@params);
            return retVal;
        }

        internal static void HookHasSameVersionNumber()
        {
            if (!HookedList.Contains("HasSameVersionNumber"))
            {
                HookedList.Add("HasSameVersionNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameVersionNumber"),
                    HasSameVersionNumber);
            }
        }

        internal static event Delegates.HasSameVersionNumber_BeforeArgs _beforeHasSameVersionNumber;
        internal static event Delegates.HasSameVersionNumber_NormalArgs _afterHasSameVersionNumber;

        private static bool HasSameVersionNumber(Func<NativeInputDevice, InputDeviceInfo, bool> orig,
            NativeInputDevice self, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameVersionNumber @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeHasSameVersionNumber?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameVersionNumber != null) retVal = _afterHasSameVersionNumber.Invoke(@params);
            return retVal;
        }

        internal static void HookHasSameLocation()
        {
            if (!HookedList.Contains("HasSameLocation"))
            {
                HookedList.Add("HasSameLocation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameLocation"), HasSameLocation);
            }
        }

        internal static event Delegates.HasSameLocation_BeforeArgs _beforeHasSameLocation;
        internal static event Delegates.HasSameLocation_NormalArgs _afterHasSameLocation;

        private static bool HasSameLocation(Func<NativeInputDevice, InputDeviceInfo, bool> orig, NativeInputDevice self,
            InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameLocation @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeHasSameLocation?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameLocation != null) retVal = _afterHasSameLocation.Invoke(@params);
            return retVal;
        }

        internal static void HookHasSameSerialNumber()
        {
            if (!HookedList.Contains("HasSameSerialNumber"))
            {
                HookedList.Add("HasSameSerialNumber");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameSerialNumber"),
                    HasSameSerialNumber);
            }
        }

        internal static event Delegates.HasSameSerialNumber_BeforeArgs _beforeHasSameSerialNumber;
        internal static event Delegates.HasSameSerialNumber_NormalArgs _afterHasSameSerialNumber;

        private static bool HasSameSerialNumber(Func<NativeInputDevice, InputDeviceInfo, bool> orig,
            NativeInputDevice self, InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameSerialNumber @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            _beforeHasSameSerialNumber?.Invoke(@params);
            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameSerialNumber != null) retVal = _afterHasSameSerialNumber.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsSupportedOnThisPlatform()
        {
            if (!HookedList.Contains("get_IsSupportedOnThisPlatform"))
            {
                HookedList.Add("get_IsSupportedOnThisPlatform");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_IsSupportedOnThisPlatform"),
                    get_IsSupportedOnThisPlatform);
            }
        }

        internal static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs _beforeget_IsSupportedOnThisPlatform;
        internal static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs _afterget_IsSupportedOnThisPlatform;

        private static bool get_IsSupportedOnThisPlatform(Func<NativeInputDevice, bool> orig, NativeInputDevice self)
        {
            Delegates.Params_get_IsSupportedOnThisPlatform @params = new()
            {
                self = self
            };
            _beforeget_IsSupportedOnThisPlatform?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSupportedOnThisPlatform != null)
                retVal = _afterget_IsSupportedOnThisPlatform.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_IsKnown()
        {
            if (!HookedList.Contains("get_IsKnown"))
            {
                HookedList.Add("get_IsKnown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_IsKnown"), get_IsKnown);
            }
        }

        internal static event Delegates.get_IsKnown_BeforeArgs _beforeget_IsKnown;
        internal static event Delegates.get_IsKnown_NormalArgs _afterget_IsKnown;

        private static bool get_IsKnown(Func<NativeInputDevice, bool> orig, NativeInputDevice self)
        {
            Delegates.Params_get_IsKnown @params = new()
            {
                self = self
            };
            _beforeget_IsKnown?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsKnown != null) retVal = _afterget_IsKnown.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_NumUnknownButtons()
        {
            if (!HookedList.Contains("get_NumUnknownButtons"))
            {
                HookedList.Add("get_NumUnknownButtons");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_NumUnknownButtons"),
                    get_NumUnknownButtons);
            }
        }

        internal static event Delegates.get_NumUnknownButtons_BeforeArgs _beforeget_NumUnknownButtons;
        internal static event Delegates.get_NumUnknownButtons_NormalArgs _afterget_NumUnknownButtons;

        private static int get_NumUnknownButtons(Func<NativeInputDevice, int> orig, NativeInputDevice self)
        {
            Delegates.Params_get_NumUnknownButtons @params = new()
            {
                self = self
            };
            _beforeget_NumUnknownButtons?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumUnknownButtons != null) retVal = _afterget_NumUnknownButtons.Invoke(@params);
            return retVal;
        }

        internal static void Hookget_NumUnknownAnalogs()
        {
            if (!HookedList.Contains("get_NumUnknownAnalogs"))
            {
                HookedList.Add("get_NumUnknownAnalogs");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_NumUnknownAnalogs"),
                    get_NumUnknownAnalogs);
            }
        }

        internal static event Delegates.get_NumUnknownAnalogs_BeforeArgs _beforeget_NumUnknownAnalogs;
        internal static event Delegates.get_NumUnknownAnalogs_NormalArgs _afterget_NumUnknownAnalogs;

        private static int get_NumUnknownAnalogs(Func<NativeInputDevice, int> orig, NativeInputDevice self)
        {
            Delegates.Params_get_NumUnknownAnalogs @params = new()
            {
                self = self
            };
            _beforeget_NumUnknownAnalogs?.Invoke(@params);
            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumUnknownAnalogs != null) retVal = _afterget_NumUnknownAnalogs.Invoke(@params);
            return retVal;
        }
    }

    /// <summary>
    ///     Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public delegate void FloatToByte_BeforeArgs(Params_FloatToByte args);

        public delegate byte FloatToByte_NormalArgs(Params_FloatToByte args);

        public delegate void get_Handle_BeforeArgs(Params_get_Handle args);

        public delegate uint get_Handle_NormalArgs(Params_get_Handle args);

        public delegate void get_Info_BeforeArgs(Params_get_Info args);

        public delegate InputDeviceInfo get_Info_NormalArgs(Params_get_Info args);

        public delegate void get_IsKnown_BeforeArgs(Params_get_IsKnown args);

        public delegate bool get_IsKnown_NormalArgs(Params_get_IsKnown args);

        public delegate void get_IsSupportedOnThisPlatform_BeforeArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate bool get_IsSupportedOnThisPlatform_NormalArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate void get_NumUnknownAnalogs_BeforeArgs(Params_get_NumUnknownAnalogs args);

        public delegate int get_NumUnknownAnalogs_NormalArgs(Params_get_NumUnknownAnalogs args);

        public delegate void get_NumUnknownButtons_BeforeArgs(Params_get_NumUnknownButtons args);

        public delegate int get_NumUnknownButtons_NormalArgs(Params_get_NumUnknownButtons args);

        public delegate void GetAppleGlyphNameForControl_BeforeArgs(Params_GetAppleGlyphNameForControl args);

        public delegate string GetAppleGlyphNameForControl_NormalArgs(Params_GetAppleGlyphNameForControl args);

        public delegate void HasSameLocation_BeforeArgs(Params_HasSameLocation args);

        public delegate bool HasSameLocation_NormalArgs(Params_HasSameLocation args);

        public delegate void HasSameProductID_BeforeArgs(Params_HasSameProductID args);

        public delegate bool HasSameProductID_NormalArgs(Params_HasSameProductID args);

        public delegate void HasSameSerialNumber_BeforeArgs(Params_HasSameSerialNumber args);

        public delegate bool HasSameSerialNumber_NormalArgs(Params_HasSameSerialNumber args);

        public delegate void HasSameVendorID_BeforeArgs(Params_HasSameVendorID args);

        public delegate bool HasSameVendorID_NormalArgs(Params_HasSameVendorID args);

        public delegate void HasSameVersionNumber_BeforeArgs(Params_HasSameVersionNumber args);

        public delegate bool HasSameVersionNumber_NormalArgs(Params_HasSameVersionNumber args);

        public delegate void
            Initialize_UInt32_InputDeviceInfo_BeforeArgs(Params_Initialize_UInt32_InputDeviceInfo args);

        public delegate void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs(
            Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile args);

        public delegate void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_NormalArgs(
            Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile args);

        public delegate void
            Initialize_UInt32_InputDeviceInfo_NormalArgs(Params_Initialize_UInt32_InputDeviceInfo args);

        public delegate void ReadRawAnalogValue_BeforeArgs(Params_ReadRawAnalogValue args);

        public delegate float ReadRawAnalogValue_NormalArgs(Params_ReadRawAnalogValue args);

        public delegate void ReadRawButtonState_BeforeArgs(Params_ReadRawButtonState args);

        public delegate bool ReadRawButtonState_NormalArgs(Params_ReadRawButtonState args);

        public delegate void set_Handle_BeforeArgs(Params_set_Handle args);

        public delegate void set_Handle_NormalArgs(Params_set_Handle args);

        public delegate void set_Info_BeforeArgs(Params_set_Info args);

        public delegate void set_Info_NormalArgs(Params_set_Info args);

        public delegate void SetLightColor_BeforeArgs(Params_SetLightColor args);

        public delegate void SetLightColor_NormalArgs(Params_SetLightColor args);

        public delegate void SetLightFlash_BeforeArgs(Params_SetLightFlash args);

        public delegate void SetLightFlash_NormalArgs(Params_SetLightFlash args);

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_NormalArgs(Params_Update args);

        public delegate void Vibrate_BeforeArgs(Params_Vibrate args);

        public delegate void Vibrate_NormalArgs(Params_Vibrate args);

        public sealed class Params_get_Handle
        {
            public NativeInputDevice self;
        }

        public sealed class Params_set_Handle
        {
            public NativeInputDevice self;
            public uint value;
        }

        public sealed class Params_get_Info
        {
            public NativeInputDevice self;
        }

        public sealed class Params_set_Info
        {
            public NativeInputDevice self;
            public InputDeviceInfo value;
        }

        public sealed class Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
        {
            public uint deviceHandle;
            public InputDeviceInfo deviceInfo;
            public InputDeviceProfile deviceProfile;
            public NativeInputDevice self;
        }

        public sealed class Params_Initialize_UInt32_InputDeviceInfo
        {
            public uint deviceHandle;
            public InputDeviceInfo deviceInfo;
            public NativeInputDevice self;
        }

        public sealed class Params_Update
        {
            public float deltaTime;
            public NativeInputDevice self;
            public ulong updateTick;
        }

        public sealed class Params_ReadRawButtonState
        {
            public int index;
            public NativeInputDevice self;
        }

        public sealed class Params_ReadRawAnalogValue
        {
            public int index;
            public NativeInputDevice self;
        }

        public sealed class Params_FloatToByte
        {
            public float value;
        }

        public sealed class Params_Vibrate
        {
            public float leftMotor;
            public float rightMotor;
            public NativeInputDevice self;
        }

        public sealed class Params_SetLightColor
        {
            public float blue;
            public float green;
            public float red;
            public NativeInputDevice self;
        }

        public sealed class Params_SetLightFlash
        {
            public float flashOffDuration;
            public float flashOnDuration;
            public NativeInputDevice self;
        }

        public sealed class Params_GetAppleGlyphNameForControl
        {
            public InputControlType controlType;
            public NativeInputDevice self;
        }

        public sealed class Params_HasSameVendorID
        {
            public InputDeviceInfo deviceInfo;
            public NativeInputDevice self;
        }

        public sealed class Params_HasSameProductID
        {
            public InputDeviceInfo deviceInfo;
            public NativeInputDevice self;
        }

        public sealed class Params_HasSameVersionNumber
        {
            public InputDeviceInfo deviceInfo;
            public NativeInputDevice self;
        }

        public sealed class Params_HasSameLocation
        {
            public InputDeviceInfo deviceInfo;
            public NativeInputDevice self;
        }

        public sealed class Params_HasSameSerialNumber
        {
            public InputDeviceInfo deviceInfo;
            public NativeInputDevice self;
        }

        public sealed class Params_get_IsSupportedOnThisPlatform
        {
            public NativeInputDevice self;
        }

        public sealed class Params_get_IsKnown
        {
            public NativeInputDevice self;
        }

        public sealed class Params_get_NumUnknownButtons
        {
            public NativeInputDevice self;
        }

        public sealed class Params_get_NumUnknownAnalogs
        {
            public NativeInputDevice self;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Handle_BeforeArgs get_Handle
        {
            add
            {
                HookHandler._beforeget_Handle += value;
                HookHandler.Hookget_Handle();
            }
            remove => HookHandler._beforeget_Handle -= value;
        }

        public static event Delegates.set_Handle_BeforeArgs set_Handle
        {
            add
            {
                HookHandler._beforeset_Handle += value;
                HookHandler.Hookset_Handle();
            }
            remove => HookHandler._beforeset_Handle -= value;
        }

        public static event Delegates.get_Info_BeforeArgs get_Info
        {
            add
            {
                HookHandler._beforeget_Info += value;
                HookHandler.Hookget_Info();
            }
            remove => HookHandler._beforeget_Info -= value;
        }

        public static event Delegates.set_Info_BeforeArgs set_Info
        {
            add
            {
                HookHandler._beforeset_Info += value;
                HookHandler.Hookset_Info();
            }
            remove => HookHandler._beforeset_Info -= value;
        }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs
            Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
            {
                add
                {
                    HookHandler._beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile += value;
                    HookHandler.HookInitialize_UInt32_InputDeviceInfo_InputDeviceProfile();
                }
                remove => HookHandler._beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile -= value;
            }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_BeforeArgs Initialize_UInt32_InputDeviceInfo
        {
            add
            {
                HookHandler._beforeInitialize_UInt32_InputDeviceInfo += value;
                HookHandler.HookInitialize_UInt32_InputDeviceInfo();
            }
            remove => HookHandler._beforeInitialize_UInt32_InputDeviceInfo -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ReadRawButtonState_BeforeArgs ReadRawButtonState
        {
            add
            {
                HookHandler._beforeReadRawButtonState += value;
                HookHandler.HookReadRawButtonState();
            }
            remove => HookHandler._beforeReadRawButtonState -= value;
        }

        public static event Delegates.ReadRawAnalogValue_BeforeArgs ReadRawAnalogValue
        {
            add
            {
                HookHandler._beforeReadRawAnalogValue += value;
                HookHandler.HookReadRawAnalogValue();
            }
            remove => HookHandler._beforeReadRawAnalogValue -= value;
        }

        public static event Delegates.FloatToByte_BeforeArgs FloatToByte
        {
            add
            {
                HookHandler._beforeFloatToByte += value;
                HookHandler.HookFloatToByte();
            }
            remove => HookHandler._beforeFloatToByte -= value;
        }

        public static event Delegates.Vibrate_BeforeArgs Vibrate
        {
            add
            {
                HookHandler._beforeVibrate += value;
                HookHandler.HookVibrate();
            }
            remove => HookHandler._beforeVibrate -= value;
        }

        public static event Delegates.SetLightColor_BeforeArgs SetLightColor
        {
            add
            {
                HookHandler._beforeSetLightColor += value;
                HookHandler.HookSetLightColor();
            }
            remove => HookHandler._beforeSetLightColor -= value;
        }

        public static event Delegates.SetLightFlash_BeforeArgs SetLightFlash
        {
            add
            {
                HookHandler._beforeSetLightFlash += value;
                HookHandler.HookSetLightFlash();
            }
            remove => HookHandler._beforeSetLightFlash -= value;
        }

        public static event Delegates.GetAppleGlyphNameForControl_BeforeArgs GetAppleGlyphNameForControl
        {
            add
            {
                HookHandler._beforeGetAppleGlyphNameForControl += value;
                HookHandler.HookGetAppleGlyphNameForControl();
            }
            remove => HookHandler._beforeGetAppleGlyphNameForControl -= value;
        }

        public static event Delegates.HasSameVendorID_BeforeArgs HasSameVendorID
        {
            add
            {
                HookHandler._beforeHasSameVendorID += value;
                HookHandler.HookHasSameVendorID();
            }
            remove => HookHandler._beforeHasSameVendorID -= value;
        }

        public static event Delegates.HasSameProductID_BeforeArgs HasSameProductID
        {
            add
            {
                HookHandler._beforeHasSameProductID += value;
                HookHandler.HookHasSameProductID();
            }
            remove => HookHandler._beforeHasSameProductID -= value;
        }

        public static event Delegates.HasSameVersionNumber_BeforeArgs HasSameVersionNumber
        {
            add
            {
                HookHandler._beforeHasSameVersionNumber += value;
                HookHandler.HookHasSameVersionNumber();
            }
            remove => HookHandler._beforeHasSameVersionNumber -= value;
        }

        public static event Delegates.HasSameLocation_BeforeArgs HasSameLocation
        {
            add
            {
                HookHandler._beforeHasSameLocation += value;
                HookHandler.HookHasSameLocation();
            }
            remove => HookHandler._beforeHasSameLocation -= value;
        }

        public static event Delegates.HasSameSerialNumber_BeforeArgs HasSameSerialNumber
        {
            add
            {
                HookHandler._beforeHasSameSerialNumber += value;
                HookHandler.HookHasSameSerialNumber();
            }
            remove => HookHandler._beforeHasSameSerialNumber -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._beforeget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._beforeget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.get_IsKnown_BeforeArgs get_IsKnown
        {
            add
            {
                HookHandler._beforeget_IsKnown += value;
                HookHandler.Hookget_IsKnown();
            }
            remove => HookHandler._beforeget_IsKnown -= value;
        }

        public static event Delegates.get_NumUnknownButtons_BeforeArgs get_NumUnknownButtons
        {
            add
            {
                HookHandler._beforeget_NumUnknownButtons += value;
                HookHandler.Hookget_NumUnknownButtons();
            }
            remove => HookHandler._beforeget_NumUnknownButtons -= value;
        }

        public static event Delegates.get_NumUnknownAnalogs_BeforeArgs get_NumUnknownAnalogs
        {
            add
            {
                HookHandler._beforeget_NumUnknownAnalogs += value;
                HookHandler.Hookget_NumUnknownAnalogs();
            }
            remove => HookHandler._beforeget_NumUnknownAnalogs -= value;
        }
    }

    /// <summary>
    ///     Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Handle_NormalArgs get_Handle
        {
            add
            {
                HookHandler._afterget_Handle += value;
                HookHandler.Hookget_Handle();
            }
            remove => HookHandler._afterget_Handle -= value;
        }

        public static event Delegates.set_Handle_NormalArgs set_Handle
        {
            add
            {
                HookHandler._afterset_Handle += value;
                HookHandler.Hookset_Handle();
            }
            remove => HookHandler._afterset_Handle -= value;
        }

        public static event Delegates.get_Info_NormalArgs get_Info
        {
            add
            {
                HookHandler._afterget_Info += value;
                HookHandler.Hookget_Info();
            }
            remove => HookHandler._afterget_Info -= value;
        }

        public static event Delegates.set_Info_NormalArgs set_Info
        {
            add
            {
                HookHandler._afterset_Info += value;
                HookHandler.Hookset_Info();
            }
            remove => HookHandler._afterset_Info -= value;
        }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_NormalArgs
            Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
            {
                add
                {
                    HookHandler._afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile += value;
                    HookHandler.HookInitialize_UInt32_InputDeviceInfo_InputDeviceProfile();
                }
                remove => HookHandler._afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile -= value;
            }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_NormalArgs Initialize_UInt32_InputDeviceInfo
        {
            add
            {
                HookHandler._afterInitialize_UInt32_InputDeviceInfo += value;
                HookHandler.HookInitialize_UInt32_InputDeviceInfo();
            }
            remove => HookHandler._afterInitialize_UInt32_InputDeviceInfo -= value;
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ReadRawButtonState_NormalArgs ReadRawButtonState
        {
            add
            {
                HookHandler._afterReadRawButtonState += value;
                HookHandler.HookReadRawButtonState();
            }
            remove => HookHandler._afterReadRawButtonState -= value;
        }

        public static event Delegates.ReadRawAnalogValue_NormalArgs ReadRawAnalogValue
        {
            add
            {
                HookHandler._afterReadRawAnalogValue += value;
                HookHandler.HookReadRawAnalogValue();
            }
            remove => HookHandler._afterReadRawAnalogValue -= value;
        }

        public static event Delegates.FloatToByte_NormalArgs FloatToByte
        {
            add
            {
                HookHandler._afterFloatToByte += value;
                HookHandler.HookFloatToByte();
            }
            remove => HookHandler._afterFloatToByte -= value;
        }

        public static event Delegates.Vibrate_NormalArgs Vibrate
        {
            add
            {
                HookHandler._afterVibrate += value;
                HookHandler.HookVibrate();
            }
            remove => HookHandler._afterVibrate -= value;
        }

        public static event Delegates.SetLightColor_NormalArgs SetLightColor
        {
            add
            {
                HookHandler._afterSetLightColor += value;
                HookHandler.HookSetLightColor();
            }
            remove => HookHandler._afterSetLightColor -= value;
        }

        public static event Delegates.SetLightFlash_NormalArgs SetLightFlash
        {
            add
            {
                HookHandler._afterSetLightFlash += value;
                HookHandler.HookSetLightFlash();
            }
            remove => HookHandler._afterSetLightFlash -= value;
        }

        public static event Delegates.GetAppleGlyphNameForControl_NormalArgs GetAppleGlyphNameForControl
        {
            add
            {
                HookHandler._afterGetAppleGlyphNameForControl += value;
                HookHandler.HookGetAppleGlyphNameForControl();
            }
            remove => HookHandler._afterGetAppleGlyphNameForControl -= value;
        }

        public static event Delegates.HasSameVendorID_NormalArgs HasSameVendorID
        {
            add
            {
                HookHandler._afterHasSameVendorID += value;
                HookHandler.HookHasSameVendorID();
            }
            remove => HookHandler._afterHasSameVendorID -= value;
        }

        public static event Delegates.HasSameProductID_NormalArgs HasSameProductID
        {
            add
            {
                HookHandler._afterHasSameProductID += value;
                HookHandler.HookHasSameProductID();
            }
            remove => HookHandler._afterHasSameProductID -= value;
        }

        public static event Delegates.HasSameVersionNumber_NormalArgs HasSameVersionNumber
        {
            add
            {
                HookHandler._afterHasSameVersionNumber += value;
                HookHandler.HookHasSameVersionNumber();
            }
            remove => HookHandler._afterHasSameVersionNumber -= value;
        }

        public static event Delegates.HasSameLocation_NormalArgs HasSameLocation
        {
            add
            {
                HookHandler._afterHasSameLocation += value;
                HookHandler.HookHasSameLocation();
            }
            remove => HookHandler._afterHasSameLocation -= value;
        }

        public static event Delegates.HasSameSerialNumber_NormalArgs HasSameSerialNumber
        {
            add
            {
                HookHandler._afterHasSameSerialNumber += value;
                HookHandler.HookHasSameSerialNumber();
            }
            remove => HookHandler._afterHasSameSerialNumber -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._afterget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._afterget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.get_IsKnown_NormalArgs get_IsKnown
        {
            add
            {
                HookHandler._afterget_IsKnown += value;
                HookHandler.Hookget_IsKnown();
            }
            remove => HookHandler._afterget_IsKnown -= value;
        }

        public static event Delegates.get_NumUnknownButtons_NormalArgs get_NumUnknownButtons
        {
            add
            {
                HookHandler._afterget_NumUnknownButtons += value;
                HookHandler.Hookget_NumUnknownButtons();
            }
            remove => HookHandler._afterget_NumUnknownButtons -= value;
        }

        public static event Delegates.get_NumUnknownAnalogs_NormalArgs get_NumUnknownAnalogs
        {
            add
            {
                HookHandler._afterget_NumUnknownAnalogs += value;
                HookHandler.Hookget_NumUnknownAnalogs();
            }
            remove => HookHandler._afterget_NumUnknownAnalogs -= value;
        }
    }

    /// <summary>
    ///     Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property
    ///     getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Handle_NormalArgs get_Handle
        {
            add => HookEndpointManager.Add<Delegates.get_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_Handle"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_Handle"), value);
        }

        public static event Delegates.set_Handle_NormalArgs set_Handle
        {
            add => HookEndpointManager.Add<Delegates.set_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "set_Handle"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Handle_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "set_Handle"), value);
        }

        public static event Delegates.get_Info_NormalArgs get_Info
        {
            add => HookEndpointManager.Add<Delegates.get_Info_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_Info"), value);
            remove => HookEndpointManager.Remove<Delegates.get_Info_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_Info"), value);
        }

        public static event Delegates.set_Info_NormalArgs set_Info
        {
            add => HookEndpointManager.Add<Delegates.set_Info_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "set_Info"), value);
            remove => HookEndpointManager.Remove<Delegates.set_Info_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "set_Info"), value);
        }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_NormalArgs
            Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
            {
                add => HookEndpointManager
                    .Add<Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_NormalArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Initialize"), value);
                remove =>
                    HookEndpointManager
                        .Remove<Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_NormalArgs>(
                            ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Initialize"), value);
            }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_NormalArgs Initialize_UInt32_InputDeviceInfo
        {
            add => HookEndpointManager.Add<Delegates.Initialize_UInt32_InputDeviceInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Initialize"), value);
            remove => HookEndpointManager.Remove<Delegates.Initialize_UInt32_InputDeviceInfo_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Initialize"), value);
        }

        public static event Delegates.Update_NormalArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Update"), value);
            remove => HookEndpointManager.Remove<Delegates.Update_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Update"), value);
        }

        public static event Delegates.ReadRawButtonState_NormalArgs ReadRawButtonState
        {
            add => HookEndpointManager.Add<Delegates.ReadRawButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "ReadRawButtonState"), value);
            remove => HookEndpointManager.Remove<Delegates.ReadRawButtonState_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "ReadRawButtonState"), value);
        }

        public static event Delegates.ReadRawAnalogValue_NormalArgs ReadRawAnalogValue
        {
            add => HookEndpointManager.Add<Delegates.ReadRawAnalogValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "ReadRawAnalogValue"), value);
            remove => HookEndpointManager.Remove<Delegates.ReadRawAnalogValue_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "ReadRawAnalogValue"), value);
        }

        public static event Delegates.FloatToByte_NormalArgs FloatToByte
        {
            add => HookEndpointManager.Add<Delegates.FloatToByte_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "FloatToByte", false), value);
            remove => HookEndpointManager.Remove<Delegates.FloatToByte_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "FloatToByte", false), value);
        }

        public static event Delegates.Vibrate_NormalArgs Vibrate
        {
            add => HookEndpointManager.Add<Delegates.Vibrate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Vibrate"), value);
            remove => HookEndpointManager.Remove<Delegates.Vibrate_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "Vibrate"), value);
        }

        public static event Delegates.SetLightColor_NormalArgs SetLightColor
        {
            add => HookEndpointManager.Add<Delegates.SetLightColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "SetLightColor"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightColor_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "SetLightColor"), value);
        }

        public static event Delegates.SetLightFlash_NormalArgs SetLightFlash
        {
            add => HookEndpointManager.Add<Delegates.SetLightFlash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "SetLightFlash"), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightFlash_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "SetLightFlash"), value);
        }

        public static event Delegates.GetAppleGlyphNameForControl_NormalArgs GetAppleGlyphNameForControl
        {
            add => HookEndpointManager.Add<Delegates.GetAppleGlyphNameForControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "GetAppleGlyphNameForControl"), value);
            remove => HookEndpointManager.Remove<Delegates.GetAppleGlyphNameForControl_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "GetAppleGlyphNameForControl"), value);
        }

        public static event Delegates.HasSameVendorID_NormalArgs HasSameVendorID
        {
            add => HookEndpointManager.Add<Delegates.HasSameVendorID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameVendorID"), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameVendorID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameVendorID"), value);
        }

        public static event Delegates.HasSameProductID_NormalArgs HasSameProductID
        {
            add => HookEndpointManager.Add<Delegates.HasSameProductID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameProductID"), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameProductID_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameProductID"), value);
        }

        public static event Delegates.HasSameVersionNumber_NormalArgs HasSameVersionNumber
        {
            add => HookEndpointManager.Add<Delegates.HasSameVersionNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameVersionNumber"), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameVersionNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameVersionNumber"), value);
        }

        public static event Delegates.HasSameLocation_NormalArgs HasSameLocation
        {
            add => HookEndpointManager.Add<Delegates.HasSameLocation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameLocation"), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameLocation_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameLocation"), value);
        }

        public static event Delegates.HasSameSerialNumber_NormalArgs HasSameSerialNumber
        {
            add => HookEndpointManager.Add<Delegates.HasSameSerialNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameSerialNumber"), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameSerialNumber_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "HasSameSerialNumber"), value);
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_NormalArgs get_IsSupportedOnThisPlatform
        {
            add => HookEndpointManager.Add<Delegates.get_IsSupportedOnThisPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_IsSupportedOnThisPlatform"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSupportedOnThisPlatform_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_IsSupportedOnThisPlatform"), value);
        }

        public static event Delegates.get_IsKnown_NormalArgs get_IsKnown
        {
            add => HookEndpointManager.Add<Delegates.get_IsKnown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_IsKnown"), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsKnown_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_IsKnown"), value);
        }

        public static event Delegates.get_NumUnknownButtons_NormalArgs get_NumUnknownButtons
        {
            add => HookEndpointManager.Add<Delegates.get_NumUnknownButtons_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_NumUnknownButtons"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NumUnknownButtons_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_NumUnknownButtons"), value);
        }

        public static event Delegates.get_NumUnknownAnalogs_NormalArgs get_NumUnknownAnalogs
        {
            add => HookEndpointManager.Add<Delegates.get_NumUnknownAnalogs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_NumUnknownAnalogs"), value);
            remove => HookEndpointManager.Remove<Delegates.get_NumUnknownAnalogs_NormalArgs>(
                ReflectionHelper.GetMethodInfo(typeof(NativeInputDevice), "get_NumUnknownAnalogs"), value);
        }
    }
}