using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;

namespace HKMirror.Hooks.OnHooks;

/// <summary>
/// Contains different types of On Hooks for NativeInputDevice class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnNativeInputDevice
{
    internal static class HookHandler
    {
        private static List<string> HookedList = new List<string>();

        internal static void Hookget_Handle()
        {
            if (!HookedList.Contains("get_Handle"))
            {
                HookedList.Add("get_Handle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_Handle", true),
                    get_Handle);
            }
        }

        internal static event Delegates.get_Handle_BeforeArgs _beforeget_Handle;
        internal static event Delegates.get_Handle_AfterArgs _afterget_Handle;

        private static uint get_Handle(Func<InControl.NativeInputDevice, uint> orig, InControl.NativeInputDevice self)
        {
            Delegates.Params_get_Handle @params = new()
            {
                self = self
            };
            if (_beforeget_Handle != null)
            {
                foreach (Delegates.get_Handle_BeforeArgs toInvoke in _beforeget_Handle.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Handle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Handle != null)
            {
                foreach (Delegates.get_Handle_AfterArgs toInvoke in _afterget_Handle.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Handle.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Handle()
        {
            if (!HookedList.Contains("set_Handle"))
            {
                HookedList.Add("set_Handle");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "set_Handle", true),
                    set_Handle);
            }
        }

        internal static event Delegates.set_Handle_BeforeArgs _beforeset_Handle;
        internal static event Delegates.set_Handle_AfterArgs _afterset_Handle;

        private static void set_Handle(Action<InControl.NativeInputDevice, uint> orig, InControl.NativeInputDevice self,
            uint value)
        {
            Delegates.Params_set_Handle @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Handle != null)
            {
                foreach (Delegates.set_Handle_BeforeArgs toInvoke in _beforeset_Handle.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Handle?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Handle != null)
            {
                foreach (Delegates.set_Handle_AfterArgs toInvoke in _afterset_Handle.GetInvocationList())
                {
                    try
                    {
                        _afterset_Handle.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void Hookget_Info()
        {
            if (!HookedList.Contains("get_Info"))
            {
                HookedList.Add("get_Info");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_Info", true),
                    get_Info);
            }
        }

        internal static event Delegates.get_Info_BeforeArgs _beforeget_Info;
        internal static event Delegates.get_Info_AfterArgs _afterget_Info;

        private static InControl.InputDeviceInfo get_Info(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo> orig, InControl.NativeInputDevice self)
        {
            Delegates.Params_get_Info @params = new()
            {
                self = self
            };
            if (_beforeget_Info != null)
            {
                foreach (Delegates.get_Info_BeforeArgs toInvoke in _beforeget_Info.GetInvocationList())
                {
                    try
                    {
                        _beforeget_Info?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_Info != null)
            {
                foreach (Delegates.get_Info_AfterArgs toInvoke in _afterget_Info.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_Info.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookset_Info()
        {
            if (!HookedList.Contains("set_Info"))
            {
                HookedList.Add("set_Info");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "set_Info", true),
                    set_Info);
            }
        }

        internal static event Delegates.set_Info_BeforeArgs _beforeset_Info;
        internal static event Delegates.set_Info_AfterArgs _afterset_Info;

        private static void set_Info(Action<InControl.NativeInputDevice, InControl.InputDeviceInfo> orig,
            InControl.NativeInputDevice self, InControl.InputDeviceInfo value)
        {
            Delegates.Params_set_Info @params = new()
            {
                self = self, value = value
            };
            if (_beforeset_Info != null)
            {
                foreach (Delegates.set_Info_BeforeArgs toInvoke in _beforeset_Info.GetInvocationList())
                {
                    try
                    {
                        _beforeset_Info?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            value = @params.value;
            orig(self, value);
            if (_afterset_Info != null)
            {
                foreach (Delegates.set_Info_AfterArgs toInvoke in _afterset_Info.GetInvocationList())
                {
                    try
                    {
                        _afterset_Info.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInitialize_UInt32_InputDeviceInfo_InputDeviceProfile()
        {
            if (!HookedList.Contains("Initialize_UInt32_InputDeviceInfo_InputDeviceProfile"))
            {
                HookedList.Add("Initialize_UInt32_InputDeviceInfo_InputDeviceProfile");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice),
                        "Initialize_UInt32_InputDeviceInfo_InputDeviceProfile", true),
                    Initialize_UInt32_InputDeviceInfo_InputDeviceProfile);
            }
        }

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs
            _beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile;

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_AfterArgs
            _afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile;

        private static void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile(
            Action<InControl.NativeInputDevice, uint, InControl.InputDeviceInfo, InControl.InputDeviceProfile> orig,
            InControl.NativeInputDevice self, uint deviceHandle, InControl.InputDeviceInfo deviceInfo,
            InControl.InputDeviceProfile deviceProfile)
        {
            Delegates.Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile @params = new()
            {
                self = self, deviceHandle = deviceHandle, deviceInfo = deviceInfo, deviceProfile = deviceProfile
            };
            if (_beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile != null)
            {
                foreach (Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs toInvoke in
                         _beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile.GetInvocationList())
                {
                    try
                    {
                        _beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceHandle = @params.deviceHandle;
            deviceInfo = @params.deviceInfo;
            deviceProfile = @params.deviceProfile;
            orig(self, deviceHandle, deviceInfo, deviceProfile);
            if (_afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile != null)
            {
                foreach (Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_AfterArgs toInvoke in
                         _afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile.GetInvocationList())
                {
                    try
                    {
                        _afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookInitialize_UInt32_InputDeviceInfo()
        {
            if (!HookedList.Contains("Initialize_UInt32_InputDeviceInfo"))
            {
                HookedList.Add("Initialize_UInt32_InputDeviceInfo");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice),
                        "Initialize_UInt32_InputDeviceInfo", true), Initialize_UInt32_InputDeviceInfo);
            }
        }

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_BeforeArgs
            _beforeInitialize_UInt32_InputDeviceInfo;

        internal static event Delegates.Initialize_UInt32_InputDeviceInfo_AfterArgs
            _afterInitialize_UInt32_InputDeviceInfo;

        private static void Initialize_UInt32_InputDeviceInfo(
            Action<InControl.NativeInputDevice, uint, InControl.InputDeviceInfo> orig, InControl.NativeInputDevice self,
            uint deviceHandle, InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_Initialize_UInt32_InputDeviceInfo @params = new()
            {
                self = self, deviceHandle = deviceHandle, deviceInfo = deviceInfo
            };
            if (_beforeInitialize_UInt32_InputDeviceInfo != null)
            {
                foreach (Delegates.Initialize_UInt32_InputDeviceInfo_BeforeArgs toInvoke in
                         _beforeInitialize_UInt32_InputDeviceInfo.GetInvocationList())
                {
                    try
                    {
                        _beforeInitialize_UInt32_InputDeviceInfo?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceHandle = @params.deviceHandle;
            deviceInfo = @params.deviceInfo;
            orig(self, deviceHandle, deviceInfo);
            if (_afterInitialize_UInt32_InputDeviceInfo != null)
            {
                foreach (Delegates.Initialize_UInt32_InputDeviceInfo_AfterArgs toInvoke in
                         _afterInitialize_UInt32_InputDeviceInfo.GetInvocationList())
                {
                    try
                    {
                        _afterInitialize_UInt32_InputDeviceInfo.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookUpdate()
        {
            if (!HookedList.Contains("Update"))
            {
                HookedList.Add("Update");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Update", true), Update);
            }
        }

        internal static event Delegates.Update_BeforeArgs _beforeUpdate;
        internal static event Delegates.Update_AfterArgs _afterUpdate;

        private static void Update(Action<InControl.NativeInputDevice, ulong, float> orig,
            InControl.NativeInputDevice self, ulong updateTick, float deltaTime)
        {
            Delegates.Params_Update @params = new()
            {
                self = self, updateTick = updateTick, deltaTime = deltaTime
            };
            if (_beforeUpdate != null)
            {
                foreach (Delegates.Update_BeforeArgs toInvoke in _beforeUpdate.GetInvocationList())
                {
                    try
                    {
                        _beforeUpdate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            updateTick = @params.updateTick;
            deltaTime = @params.deltaTime;
            orig(self, updateTick, deltaTime);
            if (_afterUpdate != null)
            {
                foreach (Delegates.Update_AfterArgs toInvoke in _afterUpdate.GetInvocationList())
                {
                    try
                    {
                        _afterUpdate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookReadRawButtonState()
        {
            if (!HookedList.Contains("ReadRawButtonState"))
            {
                HookedList.Add("ReadRawButtonState");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "ReadRawButtonState", true),
                    ReadRawButtonState);
            }
        }

        internal static event Delegates.ReadRawButtonState_BeforeArgs _beforeReadRawButtonState;
        internal static event Delegates.ReadRawButtonState_AfterArgs _afterReadRawButtonState;

        private static bool ReadRawButtonState(Func<InControl.NativeInputDevice, int, bool> orig,
            InControl.NativeInputDevice self, int index)
        {
            Delegates.Params_ReadRawButtonState @params = new()
            {
                self = self, index = index
            };
            if (_beforeReadRawButtonState != null)
            {
                foreach (Delegates.ReadRawButtonState_BeforeArgs toInvoke in
                         _beforeReadRawButtonState.GetInvocationList())
                {
                    try
                    {
                        _beforeReadRawButtonState?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterReadRawButtonState != null)
            {
                foreach (Delegates.ReadRawButtonState_AfterArgs toInvoke in
                         _afterReadRawButtonState.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadRawButtonState.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookReadRawAnalogValue()
        {
            if (!HookedList.Contains("ReadRawAnalogValue"))
            {
                HookedList.Add("ReadRawAnalogValue");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "ReadRawAnalogValue", true),
                    ReadRawAnalogValue);
            }
        }

        internal static event Delegates.ReadRawAnalogValue_BeforeArgs _beforeReadRawAnalogValue;
        internal static event Delegates.ReadRawAnalogValue_AfterArgs _afterReadRawAnalogValue;

        private static float ReadRawAnalogValue(Func<InControl.NativeInputDevice, int, float> orig,
            InControl.NativeInputDevice self, int index)
        {
            Delegates.Params_ReadRawAnalogValue @params = new()
            {
                self = self, index = index
            };
            if (_beforeReadRawAnalogValue != null)
            {
                foreach (Delegates.ReadRawAnalogValue_BeforeArgs toInvoke in
                         _beforeReadRawAnalogValue.GetInvocationList())
                {
                    try
                    {
                        _beforeReadRawAnalogValue?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            index = @params.index;
            var retVal = orig(self, index);
            if (_afterReadRawAnalogValue != null)
            {
                foreach (Delegates.ReadRawAnalogValue_AfterArgs toInvoke in
                         _afterReadRawAnalogValue.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterReadRawAnalogValue.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookFloatToByte()
        {
            if (!HookedList.Contains("FloatToByte"))
            {
                HookedList.Add("FloatToByte");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "FloatToByte", false),
                    FloatToByte);
            }
        }

        internal static event Delegates.FloatToByte_BeforeArgs _beforeFloatToByte;
        internal static event Delegates.FloatToByte_AfterArgs _afterFloatToByte;

        private static byte FloatToByte(Func<float, byte> orig, float value)
        {
            Delegates.Params_FloatToByte @params = new()
            {
                value = value
            };
            if (_beforeFloatToByte != null)
            {
                foreach (Delegates.FloatToByte_BeforeArgs toInvoke in _beforeFloatToByte.GetInvocationList())
                {
                    try
                    {
                        _beforeFloatToByte?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            value = @params.value;
            var retVal = orig(value);
            if (_afterFloatToByte != null)
            {
                foreach (Delegates.FloatToByte_AfterArgs toInvoke in _afterFloatToByte.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterFloatToByte.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookVibrate()
        {
            if (!HookedList.Contains("Vibrate"))
            {
                HookedList.Add("Vibrate");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Vibrate", true), Vibrate);
            }
        }

        internal static event Delegates.Vibrate_BeforeArgs _beforeVibrate;
        internal static event Delegates.Vibrate_AfterArgs _afterVibrate;

        private static void Vibrate(Action<InControl.NativeInputDevice, float, float> orig,
            InControl.NativeInputDevice self, float leftMotor, float rightMotor)
        {
            Delegates.Params_Vibrate @params = new()
            {
                self = self, leftMotor = leftMotor, rightMotor = rightMotor
            };
            if (_beforeVibrate != null)
            {
                foreach (Delegates.Vibrate_BeforeArgs toInvoke in _beforeVibrate.GetInvocationList())
                {
                    try
                    {
                        _beforeVibrate?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            leftMotor = @params.leftMotor;
            rightMotor = @params.rightMotor;
            orig(self, leftMotor, rightMotor);
            if (_afterVibrate != null)
            {
                foreach (Delegates.Vibrate_AfterArgs toInvoke in _afterVibrate.GetInvocationList())
                {
                    try
                    {
                        _afterVibrate.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetLightColor()
        {
            if (!HookedList.Contains("SetLightColor"))
            {
                HookedList.Add("SetLightColor");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "SetLightColor", true),
                    SetLightColor);
            }
        }

        internal static event Delegates.SetLightColor_BeforeArgs _beforeSetLightColor;
        internal static event Delegates.SetLightColor_AfterArgs _afterSetLightColor;

        private static void SetLightColor(Action<InControl.NativeInputDevice, float, float, float> orig,
            InControl.NativeInputDevice self, float red, float green, float blue)
        {
            Delegates.Params_SetLightColor @params = new()
            {
                self = self, red = red, green = green, blue = blue
            };
            if (_beforeSetLightColor != null)
            {
                foreach (Delegates.SetLightColor_BeforeArgs toInvoke in _beforeSetLightColor.GetInvocationList())
                {
                    try
                    {
                        _beforeSetLightColor?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            red = @params.red;
            green = @params.green;
            blue = @params.blue;
            orig(self, red, green, blue);
            if (_afterSetLightColor != null)
            {
                foreach (Delegates.SetLightColor_AfterArgs toInvoke in _afterSetLightColor.GetInvocationList())
                {
                    try
                    {
                        _afterSetLightColor.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookSetLightFlash()
        {
            if (!HookedList.Contains("SetLightFlash"))
            {
                HookedList.Add("SetLightFlash");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "SetLightFlash", true),
                    SetLightFlash);
            }
        }

        internal static event Delegates.SetLightFlash_BeforeArgs _beforeSetLightFlash;
        internal static event Delegates.SetLightFlash_AfterArgs _afterSetLightFlash;

        private static void SetLightFlash(Action<InControl.NativeInputDevice, float, float> orig,
            InControl.NativeInputDevice self, float flashOnDuration, float flashOffDuration)
        {
            Delegates.Params_SetLightFlash @params = new()
            {
                self = self, flashOnDuration = flashOnDuration, flashOffDuration = flashOffDuration
            };
            if (_beforeSetLightFlash != null)
            {
                foreach (Delegates.SetLightFlash_BeforeArgs toInvoke in _beforeSetLightFlash.GetInvocationList())
                {
                    try
                    {
                        _beforeSetLightFlash?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            flashOnDuration = @params.flashOnDuration;
            flashOffDuration = @params.flashOffDuration;
            orig(self, flashOnDuration, flashOffDuration);
            if (_afterSetLightFlash != null)
            {
                foreach (Delegates.SetLightFlash_AfterArgs toInvoke in _afterSetLightFlash.GetInvocationList())
                {
                    try
                    {
                        _afterSetLightFlash.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }
        }

        internal static void HookGetAppleGlyphNameForControl()
        {
            if (!HookedList.Contains("GetAppleGlyphNameForControl"))
            {
                HookedList.Add("GetAppleGlyphNameForControl");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "GetAppleGlyphNameForControl",
                        true), GetAppleGlyphNameForControl);
            }
        }

        internal static event Delegates.GetAppleGlyphNameForControl_BeforeArgs _beforeGetAppleGlyphNameForControl;
        internal static event Delegates.GetAppleGlyphNameForControl_AfterArgs _afterGetAppleGlyphNameForControl;

        private static string GetAppleGlyphNameForControl(
            Func<InControl.NativeInputDevice, InControl.InputControlType, string> orig,
            InControl.NativeInputDevice self, InControl.InputControlType controlType)
        {
            Delegates.Params_GetAppleGlyphNameForControl @params = new()
            {
                self = self, controlType = controlType
            };
            if (_beforeGetAppleGlyphNameForControl != null)
            {
                foreach (Delegates.GetAppleGlyphNameForControl_BeforeArgs toInvoke in _beforeGetAppleGlyphNameForControl
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeGetAppleGlyphNameForControl?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            controlType = @params.controlType;
            var retVal = orig(self, controlType);
            if (_afterGetAppleGlyphNameForControl != null)
            {
                foreach (Delegates.GetAppleGlyphNameForControl_AfterArgs toInvoke in _afterGetAppleGlyphNameForControl
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterGetAppleGlyphNameForControl.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookHasSameVendorID()
        {
            if (!HookedList.Contains("HasSameVendorID"))
            {
                HookedList.Add("HasSameVendorID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameVendorID", true),
                    HasSameVendorID);
            }
        }

        internal static event Delegates.HasSameVendorID_BeforeArgs _beforeHasSameVendorID;
        internal static event Delegates.HasSameVendorID_AfterArgs _afterHasSameVendorID;

        private static bool HasSameVendorID(Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig,
            InControl.NativeInputDevice self, InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameVendorID @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeHasSameVendorID != null)
            {
                foreach (Delegates.HasSameVendorID_BeforeArgs toInvoke in _beforeHasSameVendorID.GetInvocationList())
                {
                    try
                    {
                        _beforeHasSameVendorID?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameVendorID != null)
            {
                foreach (Delegates.HasSameVendorID_AfterArgs toInvoke in _afterHasSameVendorID.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterHasSameVendorID.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookHasSameProductID()
        {
            if (!HookedList.Contains("HasSameProductID"))
            {
                HookedList.Add("HasSameProductID");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameProductID", true),
                    HasSameProductID);
            }
        }

        internal static event Delegates.HasSameProductID_BeforeArgs _beforeHasSameProductID;
        internal static event Delegates.HasSameProductID_AfterArgs _afterHasSameProductID;

        private static bool HasSameProductID(Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig,
            InControl.NativeInputDevice self, InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameProductID @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeHasSameProductID != null)
            {
                foreach (Delegates.HasSameProductID_BeforeArgs toInvoke in _beforeHasSameProductID.GetInvocationList())
                {
                    try
                    {
                        _beforeHasSameProductID?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameProductID != null)
            {
                foreach (Delegates.HasSameProductID_AfterArgs toInvoke in _afterHasSameProductID.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterHasSameProductID.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookHasSameVersionNumber()
        {
            if (!HookedList.Contains("HasSameVersionNumber"))
            {
                HookedList.Add("HasSameVersionNumber");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameVersionNumber", true),
                    HasSameVersionNumber);
            }
        }

        internal static event Delegates.HasSameVersionNumber_BeforeArgs _beforeHasSameVersionNumber;
        internal static event Delegates.HasSameVersionNumber_AfterArgs _afterHasSameVersionNumber;

        private static bool HasSameVersionNumber(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig, InControl.NativeInputDevice self,
            InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameVersionNumber @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeHasSameVersionNumber != null)
            {
                foreach (Delegates.HasSameVersionNumber_BeforeArgs toInvoke in _beforeHasSameVersionNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeHasSameVersionNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameVersionNumber != null)
            {
                foreach (Delegates.HasSameVersionNumber_AfterArgs toInvoke in _afterHasSameVersionNumber
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterHasSameVersionNumber.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookHasSameLocation()
        {
            if (!HookedList.Contains("HasSameLocation"))
            {
                HookedList.Add("HasSameLocation");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameLocation", true),
                    HasSameLocation);
            }
        }

        internal static event Delegates.HasSameLocation_BeforeArgs _beforeHasSameLocation;
        internal static event Delegates.HasSameLocation_AfterArgs _afterHasSameLocation;

        private static bool HasSameLocation(Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig,
            InControl.NativeInputDevice self, InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameLocation @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeHasSameLocation != null)
            {
                foreach (Delegates.HasSameLocation_BeforeArgs toInvoke in _beforeHasSameLocation.GetInvocationList())
                {
                    try
                    {
                        _beforeHasSameLocation?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameLocation != null)
            {
                foreach (Delegates.HasSameLocation_AfterArgs toInvoke in _afterHasSameLocation.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterHasSameLocation.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void HookHasSameSerialNumber()
        {
            if (!HookedList.Contains("HasSameSerialNumber"))
            {
                HookedList.Add("HasSameSerialNumber");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameSerialNumber", true),
                    HasSameSerialNumber);
            }
        }

        internal static event Delegates.HasSameSerialNumber_BeforeArgs _beforeHasSameSerialNumber;
        internal static event Delegates.HasSameSerialNumber_AfterArgs _afterHasSameSerialNumber;

        private static bool HasSameSerialNumber(Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig,
            InControl.NativeInputDevice self, InControl.InputDeviceInfo deviceInfo)
        {
            Delegates.Params_HasSameSerialNumber @params = new()
            {
                self = self, deviceInfo = deviceInfo
            };
            if (_beforeHasSameSerialNumber != null)
            {
                foreach (Delegates.HasSameSerialNumber_BeforeArgs toInvoke in _beforeHasSameSerialNumber
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeHasSameSerialNumber?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            deviceInfo = @params.deviceInfo;
            var retVal = orig(self, deviceInfo);
            if (_afterHasSameSerialNumber != null)
            {
                foreach (Delegates.HasSameSerialNumber_AfterArgs toInvoke in
                         _afterHasSameSerialNumber.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterHasSameSerialNumber.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_IsSupportedOnThisPlatform()
        {
            if (!HookedList.Contains("get_IsSupportedOnThisPlatform"))
            {
                HookedList.Add("get_IsSupportedOnThisPlatform");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_IsSupportedOnThisPlatform",
                        true), get_IsSupportedOnThisPlatform);
            }
        }

        internal static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs _beforeget_IsSupportedOnThisPlatform;
        internal static event Delegates.get_IsSupportedOnThisPlatform_AfterArgs _afterget_IsSupportedOnThisPlatform;

        private static bool get_IsSupportedOnThisPlatform(Func<InControl.NativeInputDevice, bool> orig,
            InControl.NativeInputDevice self)
        {
            Delegates.Params_get_IsSupportedOnThisPlatform @params = new()
            {
                self = self
            };
            if (_beforeget_IsSupportedOnThisPlatform != null)
            {
                foreach (Delegates.get_IsSupportedOnThisPlatform_BeforeArgs toInvoke in
                         _beforeget_IsSupportedOnThisPlatform.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsSupportedOnThisPlatform?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsSupportedOnThisPlatform != null)
            {
                foreach (Delegates.get_IsSupportedOnThisPlatform_AfterArgs toInvoke in
                         _afterget_IsSupportedOnThisPlatform.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsSupportedOnThisPlatform.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_IsKnown()
        {
            if (!HookedList.Contains("get_IsKnown"))
            {
                HookedList.Add("get_IsKnown");
                new Hook(ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_IsKnown", true),
                    get_IsKnown);
            }
        }

        internal static event Delegates.get_IsKnown_BeforeArgs _beforeget_IsKnown;
        internal static event Delegates.get_IsKnown_AfterArgs _afterget_IsKnown;

        private static bool get_IsKnown(Func<InControl.NativeInputDevice, bool> orig, InControl.NativeInputDevice self)
        {
            Delegates.Params_get_IsKnown @params = new()
            {
                self = self
            };
            if (_beforeget_IsKnown != null)
            {
                foreach (Delegates.get_IsKnown_BeforeArgs toInvoke in _beforeget_IsKnown.GetInvocationList())
                {
                    try
                    {
                        _beforeget_IsKnown?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_IsKnown != null)
            {
                foreach (Delegates.get_IsKnown_AfterArgs toInvoke in _afterget_IsKnown.GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_IsKnown.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_NumUnknownButtons()
        {
            if (!HookedList.Contains("get_NumUnknownButtons"))
            {
                HookedList.Add("get_NumUnknownButtons");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_NumUnknownButtons", true),
                    get_NumUnknownButtons);
            }
        }

        internal static event Delegates.get_NumUnknownButtons_BeforeArgs _beforeget_NumUnknownButtons;
        internal static event Delegates.get_NumUnknownButtons_AfterArgs _afterget_NumUnknownButtons;

        private static int get_NumUnknownButtons(Func<InControl.NativeInputDevice, int> orig,
            InControl.NativeInputDevice self)
        {
            Delegates.Params_get_NumUnknownButtons @params = new()
            {
                self = self
            };
            if (_beforeget_NumUnknownButtons != null)
            {
                foreach (Delegates.get_NumUnknownButtons_BeforeArgs toInvoke in _beforeget_NumUnknownButtons
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_NumUnknownButtons?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumUnknownButtons != null)
            {
                foreach (Delegates.get_NumUnknownButtons_AfterArgs toInvoke in _afterget_NumUnknownButtons
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_NumUnknownButtons.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }

        internal static void Hookget_NumUnknownAnalogs()
        {
            if (!HookedList.Contains("get_NumUnknownAnalogs"))
            {
                HookedList.Add("get_NumUnknownAnalogs");
                new Hook(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_NumUnknownAnalogs", true),
                    get_NumUnknownAnalogs);
            }
        }

        internal static event Delegates.get_NumUnknownAnalogs_BeforeArgs _beforeget_NumUnknownAnalogs;
        internal static event Delegates.get_NumUnknownAnalogs_AfterArgs _afterget_NumUnknownAnalogs;

        private static int get_NumUnknownAnalogs(Func<InControl.NativeInputDevice, int> orig,
            InControl.NativeInputDevice self)
        {
            Delegates.Params_get_NumUnknownAnalogs @params = new()
            {
                self = self
            };
            if (_beforeget_NumUnknownAnalogs != null)
            {
                foreach (Delegates.get_NumUnknownAnalogs_BeforeArgs toInvoke in _beforeget_NumUnknownAnalogs
                             .GetInvocationList())
                {
                    try
                    {
                        _beforeget_NumUnknownAnalogs?.Invoke(@params);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            self = @params.self;
            var retVal = orig(self);
            if (_afterget_NumUnknownAnalogs != null)
            {
                foreach (Delegates.get_NumUnknownAnalogs_AfterArgs toInvoke in _afterget_NumUnknownAnalogs
                             .GetInvocationList())
                {
                    try
                    {
                        retVal = _afterget_NumUnknownAnalogs.Invoke(@params, retVal);
                    }
                    catch (Exception e)
                    {
                        HKMirrorMod.DoLogError(e);
                    }
                }
            }

            return retVal;
        }
    }

    /// <summary>
    /// Contains necessary information to create Hooks. Does not contain any hooks
    /// </summary>
    public static class Delegates
    {
        public sealed class Params_get_Handle
        {
            public InControl.NativeInputDevice self;
        }

        public delegate void get_Handle_BeforeArgs(Params_get_Handle args);

        public delegate uint get_Handle_AfterArgs(Params_get_Handle args, uint ret);

        public delegate uint get_Handle_WithArgs(Func<InControl.NativeInputDevice, uint> orig,
            InControl.NativeInputDevice self);

        public sealed class Params_set_Handle
        {
            public InControl.NativeInputDevice self;
            public uint value;
        }

        public delegate void set_Handle_BeforeArgs(Params_set_Handle args);

        public delegate void set_Handle_AfterArgs(Params_set_Handle args);

        public delegate void set_Handle_WithArgs(Action<InControl.NativeInputDevice, uint> orig,
            InControl.NativeInputDevice self, uint value);

        public sealed class Params_get_Info
        {
            public InControl.NativeInputDevice self;
        }

        public delegate void get_Info_BeforeArgs(Params_get_Info args);

        public delegate InControl.InputDeviceInfo get_Info_AfterArgs(Params_get_Info args,
            InControl.InputDeviceInfo ret);

        public delegate InControl.InputDeviceInfo get_Info_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo> orig, InControl.NativeInputDevice self);

        public sealed class Params_set_Info
        {
            public InControl.NativeInputDevice self;
            public InControl.InputDeviceInfo value;
        }

        public delegate void set_Info_BeforeArgs(Params_set_Info args);

        public delegate void set_Info_AfterArgs(Params_set_Info args);

        public delegate void set_Info_WithArgs(Action<InControl.NativeInputDevice, InControl.InputDeviceInfo> orig,
            InControl.NativeInputDevice self, InControl.InputDeviceInfo value);

        public sealed class Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
        {
            public InControl.NativeInputDevice self;
            public uint deviceHandle;
            public InControl.InputDeviceInfo deviceInfo;
            public InControl.InputDeviceProfile deviceProfile;
        }

        public delegate void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs(
            Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile args);

        public delegate void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_AfterArgs(
            Params_Initialize_UInt32_InputDeviceInfo_InputDeviceProfile args);

        public delegate void Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_WithArgs(
            Action<InControl.NativeInputDevice, uint, InControl.InputDeviceInfo, InControl.InputDeviceProfile> orig,
            InControl.NativeInputDevice self, uint deviceHandle, InControl.InputDeviceInfo deviceInfo,
            InControl.InputDeviceProfile deviceProfile);

        public sealed class Params_Initialize_UInt32_InputDeviceInfo
        {
            public InControl.NativeInputDevice self;
            public uint deviceHandle;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void
            Initialize_UInt32_InputDeviceInfo_BeforeArgs(Params_Initialize_UInt32_InputDeviceInfo args);

        public delegate void Initialize_UInt32_InputDeviceInfo_AfterArgs(Params_Initialize_UInt32_InputDeviceInfo args);

        public delegate void Initialize_UInt32_InputDeviceInfo_WithArgs(
            Action<InControl.NativeInputDevice, uint, InControl.InputDeviceInfo> orig, InControl.NativeInputDevice self,
            uint deviceHandle, InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_Update
        {
            public InControl.NativeInputDevice self;
            public ulong updateTick;
            public float deltaTime;
        }

        public delegate void Update_BeforeArgs(Params_Update args);

        public delegate void Update_AfterArgs(Params_Update args);

        public delegate void Update_WithArgs(Action<InControl.NativeInputDevice, ulong, float> orig,
            InControl.NativeInputDevice self, ulong updateTick, float deltaTime);

        public sealed class Params_ReadRawButtonState
        {
            public InControl.NativeInputDevice self;
            public int index;
        }

        public delegate void ReadRawButtonState_BeforeArgs(Params_ReadRawButtonState args);

        public delegate bool ReadRawButtonState_AfterArgs(Params_ReadRawButtonState args, bool ret);

        public delegate bool ReadRawButtonState_WithArgs(Func<InControl.NativeInputDevice, int, bool> orig,
            InControl.NativeInputDevice self, int index);

        public sealed class Params_ReadRawAnalogValue
        {
            public InControl.NativeInputDevice self;
            public int index;
        }

        public delegate void ReadRawAnalogValue_BeforeArgs(Params_ReadRawAnalogValue args);

        public delegate float ReadRawAnalogValue_AfterArgs(Params_ReadRawAnalogValue args, float ret);

        public delegate float ReadRawAnalogValue_WithArgs(Func<InControl.NativeInputDevice, int, float> orig,
            InControl.NativeInputDevice self, int index);

        public sealed class Params_FloatToByte
        {
            public float value;
        }

        public delegate void FloatToByte_BeforeArgs(Params_FloatToByte args);

        public delegate byte FloatToByte_AfterArgs(Params_FloatToByte args, byte ret);

        public delegate byte FloatToByte_WithArgs(Func<float, byte> orig, float value);

        public sealed class Params_Vibrate
        {
            public InControl.NativeInputDevice self;
            public float leftMotor;
            public float rightMotor;
        }

        public delegate void Vibrate_BeforeArgs(Params_Vibrate args);

        public delegate void Vibrate_AfterArgs(Params_Vibrate args);

        public delegate void Vibrate_WithArgs(Action<InControl.NativeInputDevice, float, float> orig,
            InControl.NativeInputDevice self, float leftMotor, float rightMotor);

        public sealed class Params_SetLightColor
        {
            public InControl.NativeInputDevice self;
            public float red;
            public float green;
            public float blue;
        }

        public delegate void SetLightColor_BeforeArgs(Params_SetLightColor args);

        public delegate void SetLightColor_AfterArgs(Params_SetLightColor args);

        public delegate void SetLightColor_WithArgs(Action<InControl.NativeInputDevice, float, float, float> orig,
            InControl.NativeInputDevice self, float red, float green, float blue);

        public sealed class Params_SetLightFlash
        {
            public InControl.NativeInputDevice self;
            public float flashOnDuration;
            public float flashOffDuration;
        }

        public delegate void SetLightFlash_BeforeArgs(Params_SetLightFlash args);

        public delegate void SetLightFlash_AfterArgs(Params_SetLightFlash args);

        public delegate void SetLightFlash_WithArgs(Action<InControl.NativeInputDevice, float, float> orig,
            InControl.NativeInputDevice self, float flashOnDuration, float flashOffDuration);

        public sealed class Params_GetAppleGlyphNameForControl
        {
            public InControl.NativeInputDevice self;
            public InControl.InputControlType controlType;
        }

        public delegate void GetAppleGlyphNameForControl_BeforeArgs(Params_GetAppleGlyphNameForControl args);

        public delegate string GetAppleGlyphNameForControl_AfterArgs(Params_GetAppleGlyphNameForControl args,
            string ret);

        public delegate string GetAppleGlyphNameForControl_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputControlType, string> orig,
            InControl.NativeInputDevice self, InControl.InputControlType controlType);

        public sealed class Params_HasSameVendorID
        {
            public InControl.NativeInputDevice self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void HasSameVendorID_BeforeArgs(Params_HasSameVendorID args);

        public delegate bool HasSameVendorID_AfterArgs(Params_HasSameVendorID args, bool ret);

        public delegate bool HasSameVendorID_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig, InControl.NativeInputDevice self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_HasSameProductID
        {
            public InControl.NativeInputDevice self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void HasSameProductID_BeforeArgs(Params_HasSameProductID args);

        public delegate bool HasSameProductID_AfterArgs(Params_HasSameProductID args, bool ret);

        public delegate bool HasSameProductID_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig, InControl.NativeInputDevice self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_HasSameVersionNumber
        {
            public InControl.NativeInputDevice self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void HasSameVersionNumber_BeforeArgs(Params_HasSameVersionNumber args);

        public delegate bool HasSameVersionNumber_AfterArgs(Params_HasSameVersionNumber args, bool ret);

        public delegate bool HasSameVersionNumber_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig, InControl.NativeInputDevice self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_HasSameLocation
        {
            public InControl.NativeInputDevice self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void HasSameLocation_BeforeArgs(Params_HasSameLocation args);

        public delegate bool HasSameLocation_AfterArgs(Params_HasSameLocation args, bool ret);

        public delegate bool HasSameLocation_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig, InControl.NativeInputDevice self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_HasSameSerialNumber
        {
            public InControl.NativeInputDevice self;
            public InControl.InputDeviceInfo deviceInfo;
        }

        public delegate void HasSameSerialNumber_BeforeArgs(Params_HasSameSerialNumber args);

        public delegate bool HasSameSerialNumber_AfterArgs(Params_HasSameSerialNumber args, bool ret);

        public delegate bool HasSameSerialNumber_WithArgs(
            Func<InControl.NativeInputDevice, InControl.InputDeviceInfo, bool> orig, InControl.NativeInputDevice self,
            InControl.InputDeviceInfo deviceInfo);

        public sealed class Params_get_IsSupportedOnThisPlatform
        {
            public InControl.NativeInputDevice self;
        }

        public delegate void get_IsSupportedOnThisPlatform_BeforeArgs(Params_get_IsSupportedOnThisPlatform args);

        public delegate bool get_IsSupportedOnThisPlatform_AfterArgs(Params_get_IsSupportedOnThisPlatform args,
            bool ret);

        public delegate bool get_IsSupportedOnThisPlatform_WithArgs(Func<InControl.NativeInputDevice, bool> orig,
            InControl.NativeInputDevice self);

        public sealed class Params_get_IsKnown
        {
            public InControl.NativeInputDevice self;
        }

        public delegate void get_IsKnown_BeforeArgs(Params_get_IsKnown args);

        public delegate bool get_IsKnown_AfterArgs(Params_get_IsKnown args, bool ret);

        public delegate bool get_IsKnown_WithArgs(Func<InControl.NativeInputDevice, bool> orig,
            InControl.NativeInputDevice self);

        public sealed class Params_get_NumUnknownButtons
        {
            public InControl.NativeInputDevice self;
        }

        public delegate void get_NumUnknownButtons_BeforeArgs(Params_get_NumUnknownButtons args);

        public delegate int get_NumUnknownButtons_AfterArgs(Params_get_NumUnknownButtons args, int ret);

        public delegate int get_NumUnknownButtons_WithArgs(Func<InControl.NativeInputDevice, int> orig,
            InControl.NativeInputDevice self);

        public sealed class Params_get_NumUnknownAnalogs
        {
            public InControl.NativeInputDevice self;
        }

        public delegate void get_NumUnknownAnalogs_BeforeArgs(Params_get_NumUnknownAnalogs args);

        public delegate int get_NumUnknownAnalogs_AfterArgs(Params_get_NumUnknownAnalogs args, int ret);

        public delegate int get_NumUnknownAnalogs_WithArgs(Func<InControl.NativeInputDevice, int> orig,
            InControl.NativeInputDevice self);
    }

    /// <summary>
    /// Contains Hooks to that run code before orig(self) is called
    /// </summary>
    public static class BeforeOrig
    {
        public static event Delegates.get_Handle_BeforeArgs get_Handle
        {
            add
            {
                HookHandler._beforeget_Handle += value;
                HookHandler.Hookget_Handle();
            }
            remove => HookHandler._beforeget_Handle -= value;
        }

        public static event Delegates.set_Handle_BeforeArgs set_Handle
        {
            add
            {
                HookHandler._beforeset_Handle += value;
                HookHandler.Hookset_Handle();
            }
            remove => HookHandler._beforeset_Handle -= value;
        }

        public static event Delegates.get_Info_BeforeArgs get_Info
        {
            add
            {
                HookHandler._beforeget_Info += value;
                HookHandler.Hookget_Info();
            }
            remove => HookHandler._beforeget_Info -= value;
        }

        public static event Delegates.set_Info_BeforeArgs set_Info
        {
            add
            {
                HookHandler._beforeset_Info += value;
                HookHandler.Hookset_Info();
            }
            remove => HookHandler._beforeset_Info -= value;
        }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_BeforeArgs
            Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
            {
                add
                {
                    HookHandler._beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile += value;
                    HookHandler.HookInitialize_UInt32_InputDeviceInfo_InputDeviceProfile();
                }
                remove => HookHandler._beforeInitialize_UInt32_InputDeviceInfo_InputDeviceProfile -= value;
            }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_BeforeArgs Initialize_UInt32_InputDeviceInfo
        {
            add
            {
                HookHandler._beforeInitialize_UInt32_InputDeviceInfo += value;
                HookHandler.HookInitialize_UInt32_InputDeviceInfo();
            }
            remove => HookHandler._beforeInitialize_UInt32_InputDeviceInfo -= value;
        }

        public static event Delegates.Update_BeforeArgs Update
        {
            add
            {
                HookHandler._beforeUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._beforeUpdate -= value;
        }

        public static event Delegates.ReadRawButtonState_BeforeArgs ReadRawButtonState
        {
            add
            {
                HookHandler._beforeReadRawButtonState += value;
                HookHandler.HookReadRawButtonState();
            }
            remove => HookHandler._beforeReadRawButtonState -= value;
        }

        public static event Delegates.ReadRawAnalogValue_BeforeArgs ReadRawAnalogValue
        {
            add
            {
                HookHandler._beforeReadRawAnalogValue += value;
                HookHandler.HookReadRawAnalogValue();
            }
            remove => HookHandler._beforeReadRawAnalogValue -= value;
        }

        public static event Delegates.FloatToByte_BeforeArgs FloatToByte
        {
            add
            {
                HookHandler._beforeFloatToByte += value;
                HookHandler.HookFloatToByte();
            }
            remove => HookHandler._beforeFloatToByte -= value;
        }

        public static event Delegates.Vibrate_BeforeArgs Vibrate
        {
            add
            {
                HookHandler._beforeVibrate += value;
                HookHandler.HookVibrate();
            }
            remove => HookHandler._beforeVibrate -= value;
        }

        public static event Delegates.SetLightColor_BeforeArgs SetLightColor
        {
            add
            {
                HookHandler._beforeSetLightColor += value;
                HookHandler.HookSetLightColor();
            }
            remove => HookHandler._beforeSetLightColor -= value;
        }

        public static event Delegates.SetLightFlash_BeforeArgs SetLightFlash
        {
            add
            {
                HookHandler._beforeSetLightFlash += value;
                HookHandler.HookSetLightFlash();
            }
            remove => HookHandler._beforeSetLightFlash -= value;
        }

        public static event Delegates.GetAppleGlyphNameForControl_BeforeArgs GetAppleGlyphNameForControl
        {
            add
            {
                HookHandler._beforeGetAppleGlyphNameForControl += value;
                HookHandler.HookGetAppleGlyphNameForControl();
            }
            remove => HookHandler._beforeGetAppleGlyphNameForControl -= value;
        }

        public static event Delegates.HasSameVendorID_BeforeArgs HasSameVendorID
        {
            add
            {
                HookHandler._beforeHasSameVendorID += value;
                HookHandler.HookHasSameVendorID();
            }
            remove => HookHandler._beforeHasSameVendorID -= value;
        }

        public static event Delegates.HasSameProductID_BeforeArgs HasSameProductID
        {
            add
            {
                HookHandler._beforeHasSameProductID += value;
                HookHandler.HookHasSameProductID();
            }
            remove => HookHandler._beforeHasSameProductID -= value;
        }

        public static event Delegates.HasSameVersionNumber_BeforeArgs HasSameVersionNumber
        {
            add
            {
                HookHandler._beforeHasSameVersionNumber += value;
                HookHandler.HookHasSameVersionNumber();
            }
            remove => HookHandler._beforeHasSameVersionNumber -= value;
        }

        public static event Delegates.HasSameLocation_BeforeArgs HasSameLocation
        {
            add
            {
                HookHandler._beforeHasSameLocation += value;
                HookHandler.HookHasSameLocation();
            }
            remove => HookHandler._beforeHasSameLocation -= value;
        }

        public static event Delegates.HasSameSerialNumber_BeforeArgs HasSameSerialNumber
        {
            add
            {
                HookHandler._beforeHasSameSerialNumber += value;
                HookHandler.HookHasSameSerialNumber();
            }
            remove => HookHandler._beforeHasSameSerialNumber -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_BeforeArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._beforeget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._beforeget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.get_IsKnown_BeforeArgs get_IsKnown
        {
            add
            {
                HookHandler._beforeget_IsKnown += value;
                HookHandler.Hookget_IsKnown();
            }
            remove => HookHandler._beforeget_IsKnown -= value;
        }

        public static event Delegates.get_NumUnknownButtons_BeforeArgs get_NumUnknownButtons
        {
            add
            {
                HookHandler._beforeget_NumUnknownButtons += value;
                HookHandler.Hookget_NumUnknownButtons();
            }
            remove => HookHandler._beforeget_NumUnknownButtons -= value;
        }

        public static event Delegates.get_NumUnknownAnalogs_BeforeArgs get_NumUnknownAnalogs
        {
            add
            {
                HookHandler._beforeget_NumUnknownAnalogs += value;
                HookHandler.Hookget_NumUnknownAnalogs();
            }
            remove => HookHandler._beforeget_NumUnknownAnalogs -= value;
        }
    }

    /// <summary>
    /// Contains Hooks to that run code after orig(self) is called
    /// </summary>
    public static class AfterOrig
    {
        public static event Delegates.get_Handle_AfterArgs get_Handle
        {
            add
            {
                HookHandler._afterget_Handle += value;
                HookHandler.Hookget_Handle();
            }
            remove => HookHandler._afterget_Handle -= value;
        }

        public static event Delegates.set_Handle_AfterArgs set_Handle
        {
            add
            {
                HookHandler._afterset_Handle += value;
                HookHandler.Hookset_Handle();
            }
            remove => HookHandler._afterset_Handle -= value;
        }

        public static event Delegates.get_Info_AfterArgs get_Info
        {
            add
            {
                HookHandler._afterget_Info += value;
                HookHandler.Hookget_Info();
            }
            remove => HookHandler._afterget_Info -= value;
        }

        public static event Delegates.set_Info_AfterArgs set_Info
        {
            add
            {
                HookHandler._afterset_Info += value;
                HookHandler.Hookset_Info();
            }
            remove => HookHandler._afterset_Info -= value;
        }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_AfterArgs
            Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
            {
                add
                {
                    HookHandler._afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile += value;
                    HookHandler.HookInitialize_UInt32_InputDeviceInfo_InputDeviceProfile();
                }
                remove => HookHandler._afterInitialize_UInt32_InputDeviceInfo_InputDeviceProfile -= value;
            }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_AfterArgs Initialize_UInt32_InputDeviceInfo
        {
            add
            {
                HookHandler._afterInitialize_UInt32_InputDeviceInfo += value;
                HookHandler.HookInitialize_UInt32_InputDeviceInfo();
            }
            remove => HookHandler._afterInitialize_UInt32_InputDeviceInfo -= value;
        }

        public static event Delegates.Update_AfterArgs Update
        {
            add
            {
                HookHandler._afterUpdate += value;
                HookHandler.HookUpdate();
            }
            remove => HookHandler._afterUpdate -= value;
        }

        public static event Delegates.ReadRawButtonState_AfterArgs ReadRawButtonState
        {
            add
            {
                HookHandler._afterReadRawButtonState += value;
                HookHandler.HookReadRawButtonState();
            }
            remove => HookHandler._afterReadRawButtonState -= value;
        }

        public static event Delegates.ReadRawAnalogValue_AfterArgs ReadRawAnalogValue
        {
            add
            {
                HookHandler._afterReadRawAnalogValue += value;
                HookHandler.HookReadRawAnalogValue();
            }
            remove => HookHandler._afterReadRawAnalogValue -= value;
        }

        public static event Delegates.FloatToByte_AfterArgs FloatToByte
        {
            add
            {
                HookHandler._afterFloatToByte += value;
                HookHandler.HookFloatToByte();
            }
            remove => HookHandler._afterFloatToByte -= value;
        }

        public static event Delegates.Vibrate_AfterArgs Vibrate
        {
            add
            {
                HookHandler._afterVibrate += value;
                HookHandler.HookVibrate();
            }
            remove => HookHandler._afterVibrate -= value;
        }

        public static event Delegates.SetLightColor_AfterArgs SetLightColor
        {
            add
            {
                HookHandler._afterSetLightColor += value;
                HookHandler.HookSetLightColor();
            }
            remove => HookHandler._afterSetLightColor -= value;
        }

        public static event Delegates.SetLightFlash_AfterArgs SetLightFlash
        {
            add
            {
                HookHandler._afterSetLightFlash += value;
                HookHandler.HookSetLightFlash();
            }
            remove => HookHandler._afterSetLightFlash -= value;
        }

        public static event Delegates.GetAppleGlyphNameForControl_AfterArgs GetAppleGlyphNameForControl
        {
            add
            {
                HookHandler._afterGetAppleGlyphNameForControl += value;
                HookHandler.HookGetAppleGlyphNameForControl();
            }
            remove => HookHandler._afterGetAppleGlyphNameForControl -= value;
        }

        public static event Delegates.HasSameVendorID_AfterArgs HasSameVendorID
        {
            add
            {
                HookHandler._afterHasSameVendorID += value;
                HookHandler.HookHasSameVendorID();
            }
            remove => HookHandler._afterHasSameVendorID -= value;
        }

        public static event Delegates.HasSameProductID_AfterArgs HasSameProductID
        {
            add
            {
                HookHandler._afterHasSameProductID += value;
                HookHandler.HookHasSameProductID();
            }
            remove => HookHandler._afterHasSameProductID -= value;
        }

        public static event Delegates.HasSameVersionNumber_AfterArgs HasSameVersionNumber
        {
            add
            {
                HookHandler._afterHasSameVersionNumber += value;
                HookHandler.HookHasSameVersionNumber();
            }
            remove => HookHandler._afterHasSameVersionNumber -= value;
        }

        public static event Delegates.HasSameLocation_AfterArgs HasSameLocation
        {
            add
            {
                HookHandler._afterHasSameLocation += value;
                HookHandler.HookHasSameLocation();
            }
            remove => HookHandler._afterHasSameLocation -= value;
        }

        public static event Delegates.HasSameSerialNumber_AfterArgs HasSameSerialNumber
        {
            add
            {
                HookHandler._afterHasSameSerialNumber += value;
                HookHandler.HookHasSameSerialNumber();
            }
            remove => HookHandler._afterHasSameSerialNumber -= value;
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_AfterArgs get_IsSupportedOnThisPlatform
        {
            add
            {
                HookHandler._afterget_IsSupportedOnThisPlatform += value;
                HookHandler.Hookget_IsSupportedOnThisPlatform();
            }
            remove => HookHandler._afterget_IsSupportedOnThisPlatform -= value;
        }

        public static event Delegates.get_IsKnown_AfterArgs get_IsKnown
        {
            add
            {
                HookHandler._afterget_IsKnown += value;
                HookHandler.Hookget_IsKnown();
            }
            remove => HookHandler._afterget_IsKnown -= value;
        }

        public static event Delegates.get_NumUnknownButtons_AfterArgs get_NumUnknownButtons
        {
            add
            {
                HookHandler._afterget_NumUnknownButtons += value;
                HookHandler.Hookget_NumUnknownButtons();
            }
            remove => HookHandler._afterget_NumUnknownButtons -= value;
        }

        public static event Delegates.get_NumUnknownAnalogs_AfterArgs get_NumUnknownAnalogs
        {
            add
            {
                HookHandler._afterget_NumUnknownAnalogs += value;
                HookHandler.Hookget_NumUnknownAnalogs();
            }
            remove => HookHandler._afterget_NumUnknownAnalogs -= value;
        }
    }

    /// <summary>
    /// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
    /// </summary>
    public static class WithOrig
    {
        public static event Delegates.get_Handle_WithArgs get_Handle
        {
            add => HookEndpointManager.Add<Delegates.get_Handle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_Handle", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Handle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_Handle", true), value);
        }

        public static event Delegates.set_Handle_WithArgs set_Handle
        {
            add => HookEndpointManager.Add<Delegates.set_Handle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "set_Handle", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Handle_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "set_Handle", true), value);
        }

        public static event Delegates.get_Info_WithArgs get_Info
        {
            add => HookEndpointManager.Add<Delegates.get_Info_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_Info", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_Info_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_Info", true), value);
        }

        public static event Delegates.set_Info_WithArgs set_Info
        {
            add => HookEndpointManager.Add<Delegates.set_Info_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "set_Info", true), value);
            remove => HookEndpointManager.Remove<Delegates.set_Info_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "set_Info", true), value);
        }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_WithArgs
            Initialize_UInt32_InputDeviceInfo_InputDeviceProfile
            {
                add => HookEndpointManager.Add<Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_WithArgs>(
                    ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Initialize", true), value);
                remove =>
                    HookEndpointManager.Remove<Delegates.Initialize_UInt32_InputDeviceInfo_InputDeviceProfile_WithArgs>(
                        ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Initialize", true), value);
            }

        public static event Delegates.Initialize_UInt32_InputDeviceInfo_WithArgs Initialize_UInt32_InputDeviceInfo
        {
            add => HookEndpointManager.Add<Delegates.Initialize_UInt32_InputDeviceInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Initialize", true), value);
            remove => HookEndpointManager.Remove<Delegates.Initialize_UInt32_InputDeviceInfo_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Initialize", true), value);
        }

        public static event Delegates.Update_WithArgs Update
        {
            add => HookEndpointManager.Add<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Update", true), value);
            remove => HookEndpointManager.Remove<Delegates.Update_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Update", true), value);
        }

        public static event Delegates.ReadRawButtonState_WithArgs ReadRawButtonState
        {
            add => HookEndpointManager.Add<Delegates.ReadRawButtonState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "ReadRawButtonState", true), value);
            remove => HookEndpointManager.Remove<Delegates.ReadRawButtonState_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "ReadRawButtonState", true), value);
        }

        public static event Delegates.ReadRawAnalogValue_WithArgs ReadRawAnalogValue
        {
            add => HookEndpointManager.Add<Delegates.ReadRawAnalogValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "ReadRawAnalogValue", true), value);
            remove => HookEndpointManager.Remove<Delegates.ReadRawAnalogValue_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "ReadRawAnalogValue", true), value);
        }

        public static event Delegates.FloatToByte_WithArgs FloatToByte
        {
            add => HookEndpointManager.Add<Delegates.FloatToByte_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "FloatToByte", false), value);
            remove => HookEndpointManager.Remove<Delegates.FloatToByte_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "FloatToByte", false), value);
        }

        public static event Delegates.Vibrate_WithArgs Vibrate
        {
            add => HookEndpointManager.Add<Delegates.Vibrate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Vibrate", true), value);
            remove => HookEndpointManager.Remove<Delegates.Vibrate_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "Vibrate", true), value);
        }

        public static event Delegates.SetLightColor_WithArgs SetLightColor
        {
            add => HookEndpointManager.Add<Delegates.SetLightColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "SetLightColor", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightColor_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "SetLightColor", true), value);
        }

        public static event Delegates.SetLightFlash_WithArgs SetLightFlash
        {
            add => HookEndpointManager.Add<Delegates.SetLightFlash_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "SetLightFlash", true), value);
            remove => HookEndpointManager.Remove<Delegates.SetLightFlash_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "SetLightFlash", true), value);
        }

        public static event Delegates.GetAppleGlyphNameForControl_WithArgs GetAppleGlyphNameForControl
        {
            add => HookEndpointManager.Add<Delegates.GetAppleGlyphNameForControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "GetAppleGlyphNameForControl",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.GetAppleGlyphNameForControl_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "GetAppleGlyphNameForControl",
                    true), value);
        }

        public static event Delegates.HasSameVendorID_WithArgs HasSameVendorID
        {
            add => HookEndpointManager.Add<Delegates.HasSameVendorID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameVendorID", true), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameVendorID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameVendorID", true), value);
        }

        public static event Delegates.HasSameProductID_WithArgs HasSameProductID
        {
            add => HookEndpointManager.Add<Delegates.HasSameProductID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameProductID", true), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameProductID_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameProductID", true), value);
        }

        public static event Delegates.HasSameVersionNumber_WithArgs HasSameVersionNumber
        {
            add => HookEndpointManager.Add<Delegates.HasSameVersionNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameVersionNumber", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.HasSameVersionNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameVersionNumber", true),
                value);
        }

        public static event Delegates.HasSameLocation_WithArgs HasSameLocation
        {
            add => HookEndpointManager.Add<Delegates.HasSameLocation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameLocation", true), value);
            remove => HookEndpointManager.Remove<Delegates.HasSameLocation_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameLocation", true), value);
        }

        public static event Delegates.HasSameSerialNumber_WithArgs HasSameSerialNumber
        {
            add => HookEndpointManager.Add<Delegates.HasSameSerialNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameSerialNumber", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.HasSameSerialNumber_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "HasSameSerialNumber", true),
                value);
        }

        public static event Delegates.get_IsSupportedOnThisPlatform_WithArgs get_IsSupportedOnThisPlatform
        {
            add => HookEndpointManager.Add<Delegates.get_IsSupportedOnThisPlatform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_IsSupportedOnThisPlatform",
                    true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsSupportedOnThisPlatform_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_IsSupportedOnThisPlatform",
                    true), value);
        }

        public static event Delegates.get_IsKnown_WithArgs get_IsKnown
        {
            add => HookEndpointManager.Add<Delegates.get_IsKnown_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_IsKnown", true), value);
            remove => HookEndpointManager.Remove<Delegates.get_IsKnown_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_IsKnown", true), value);
        }

        public static event Delegates.get_NumUnknownButtons_WithArgs get_NumUnknownButtons
        {
            add => HookEndpointManager.Add<Delegates.get_NumUnknownButtons_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_NumUnknownButtons", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_NumUnknownButtons_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_NumUnknownButtons", true),
                value);
        }

        public static event Delegates.get_NumUnknownAnalogs_WithArgs get_NumUnknownAnalogs
        {
            add => HookEndpointManager.Add<Delegates.get_NumUnknownAnalogs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_NumUnknownAnalogs", true),
                value);
            remove => HookEndpointManager.Remove<Delegates.get_NumUnknownAnalogs_WithArgs>(
                ReflectionHelper.GetMethodInfo(typeof(InControl.NativeInputDevice), "get_NumUnknownAnalogs", true),
                value);
        }
    }
}