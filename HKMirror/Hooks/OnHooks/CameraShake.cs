using MonoMod.RuntimeDetour;
using MonoMod.RuntimeDetour.HookGen;
namespace HKMirror.Hooks.OnHooks;
/// <summary>
/// Contains different types of On Hooks for CameraShake class.<br />
/// Contains hooks that aren't generated by monomod, and before and after orig hooks for easier hooking.
/// </summary>
public static class OnCameraShake
{
internal static class HookHandler
{
private static List<string> HookedList = new List<string>();
internal static void HookInit()
{
if (!HookedList.Contains("Init"))
{
HookedList.Add("Init");
On.CameraShake.Init += Init;

}
}
internal static event Delegates.Init_BeforeArgs _beforeInit;
internal static event Delegates.Init_AfterArgs _afterInit;
private static void Init(On.CameraShake.orig_Init orig,CameraShake self)
{
Delegates.Params_Init @params = new() 
{
self = self
};
if (_beforeInit != null)
{
foreach (Delegates.Init_BeforeArgs toInvoke in _beforeInit.GetInvocationList())
{
try
{
_beforeInit?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterInit != null)
{
foreach (Delegates.Init_AfterArgs toInvoke in _afterInit.GetInvocationList())
{
try
{
_afterInit.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookAwake()
{
if (!HookedList.Contains("Awake"))
{
HookedList.Add("Awake");
On.CameraShake.Awake += Awake;

}
}
internal static event Delegates.Awake_BeforeArgs _beforeAwake;
internal static event Delegates.Awake_AfterArgs _afterAwake;
private static void Awake(On.CameraShake.orig_Awake orig,CameraShake self)
{
Delegates.Params_Awake @params = new() 
{
self = self
};
if (_beforeAwake != null)
{
foreach (Delegates.Awake_BeforeArgs toInvoke in _beforeAwake.GetInvocationList())
{
try
{
_beforeAwake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterAwake != null)
{
foreach (Delegates.Awake_AfterArgs toInvoke in _afterAwake.GetInvocationList())
{
try
{
_afterAwake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnEnable()
{
if (!HookedList.Contains("OnEnable"))
{
HookedList.Add("OnEnable");
On.CameraShake.OnEnable += OnEnable;

}
}
internal static event Delegates.OnEnable_BeforeArgs _beforeOnEnable;
internal static event Delegates.OnEnable_AfterArgs _afterOnEnable;
private static void OnEnable(On.CameraShake.orig_OnEnable orig,CameraShake self)
{
Delegates.Params_OnEnable @params = new() 
{
self = self
};
if (_beforeOnEnable != null)
{
foreach (Delegates.OnEnable_BeforeArgs toInvoke in _beforeOnEnable.GetInvocationList())
{
try
{
_beforeOnEnable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnEnable != null)
{
foreach (Delegates.OnEnable_AfterArgs toInvoke in _afterOnEnable.GetInvocationList())
{
try
{
_afterOnEnable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookOnDisable()
{
if (!HookedList.Contains("OnDisable"))
{
HookedList.Add("OnDisable");
On.CameraShake.OnDisable += OnDisable;

}
}
internal static event Delegates.OnDisable_BeforeArgs _beforeOnDisable;
internal static event Delegates.OnDisable_AfterArgs _afterOnDisable;
private static void OnDisable(On.CameraShake.orig_OnDisable orig,CameraShake self)
{
Delegates.Params_OnDisable @params = new() 
{
self = self
};
if (_beforeOnDisable != null)
{
foreach (Delegates.OnDisable_BeforeArgs toInvoke in _beforeOnDisable.GetInvocationList())
{
try
{
_beforeOnDisable?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
orig(self);
if (_afterOnDisable != null)
{
foreach (Delegates.OnDisable_AfterArgs toInvoke in _afterOnDisable.GetInvocationList())
{
try
{
_afterOnDisable.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShakeSingle()
{
if (!HookedList.Contains("ShakeSingle"))
{
HookedList.Add("ShakeSingle");
On.CameraShake.ShakeSingle += ShakeSingle;

}
}
internal static event Delegates.ShakeSingle_BeforeArgs _beforeShakeSingle;
internal static event Delegates.ShakeSingle_AfterArgs _afterShakeSingle;
private static void ShakeSingle(On.CameraShake.orig_ShakeSingle orig,CameraShake self,  CameraShakeCues cue)
{
Delegates.Params_ShakeSingle @params = new() 
{
self = self
, cue = cue
};
if (_beforeShakeSingle != null)
{
foreach (Delegates.ShakeSingle_BeforeArgs toInvoke in _beforeShakeSingle.GetInvocationList())
{
try
{
_beforeShakeSingle?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
self = @params.self;
cue = @params.cue;
orig(self, cue);
if (_afterShakeSingle != null)
{
foreach (Delegates.ShakeSingle_AfterArgs toInvoke in _afterShakeSingle.GetInvocationList())
{
try
{
_afterShakeSingle.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
internal static void HookShake()
{
if (!HookedList.Contains("Shake"))
{
HookedList.Add("Shake");
On.CameraShake.Shake += Shake;

}
}
internal static event Delegates.Shake_BeforeArgs _beforeShake;
internal static event Delegates.Shake_AfterArgs _afterShake;
private static void Shake(On.CameraShake.orig_Shake orig, CameraShakeCues cue)
{
Delegates.Params_Shake @params = new() 
{
cue = cue
};
if (_beforeShake != null)
{
foreach (Delegates.Shake_BeforeArgs toInvoke in _beforeShake.GetInvocationList())
{
try
{
_beforeShake?.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
cue = @params.cue;
orig(cue);
if (_afterShake != null)
{
foreach (Delegates.Shake_AfterArgs toInvoke in _afterShake.GetInvocationList())
{
try
{
_afterShake.Invoke(@params);
}
catch (Exception e) 
{ HKMirrorMod.DoLogError(e);
}
}
}
}
}

/// <summary>
/// Contains necessary information to create Hooks. Does not contain any hooks
/// </summary>
public static class Delegates
{
public sealed class Params_Init
{
public CameraShake self;
}
public delegate void Init_BeforeArgs(Params_Init args);
public delegate void Init_AfterArgs(Params_Init args);
public delegate void Init_WithArgs (Action<CameraShake> orig, CameraShake self);
public sealed class Params_Awake
{
public CameraShake self;
}
public delegate void Awake_BeforeArgs(Params_Awake args);
public delegate void Awake_AfterArgs(Params_Awake args);
public delegate void Awake_WithArgs (Action<CameraShake> orig, CameraShake self);
public sealed class Params_OnEnable
{
public CameraShake self;
}
public delegate void OnEnable_BeforeArgs(Params_OnEnable args);
public delegate void OnEnable_AfterArgs(Params_OnEnable args);
public delegate void OnEnable_WithArgs (Action<CameraShake> orig, CameraShake self);
public sealed class Params_OnDisable
{
public CameraShake self;
}
public delegate void OnDisable_BeforeArgs(Params_OnDisable args);
public delegate void OnDisable_AfterArgs(Params_OnDisable args);
public delegate void OnDisable_WithArgs (Action<CameraShake> orig, CameraShake self);
public sealed class Params_ShakeSingle
{
public CameraShake self;
public CameraShakeCues cue;
}
public delegate void ShakeSingle_BeforeArgs(Params_ShakeSingle args);
public delegate void ShakeSingle_AfterArgs(Params_ShakeSingle args);
public delegate void ShakeSingle_WithArgs (Action<CameraShake,  CameraShakeCues> orig, CameraShake self,  CameraShakeCues cue);
public sealed class Params_Shake
{
public CameraShakeCues cue;
}
public delegate void Shake_BeforeArgs(Params_Shake args);
public delegate void Shake_AfterArgs(Params_Shake args);
public delegate void Shake_WithArgs (Action< CameraShakeCues> orig,  CameraShakeCues cue);
}

/// <summary>
/// Contains Hooks to that run code before orig(self) is called
/// </summary>
public static class BeforeOrig
{
public static event Delegates.Init_BeforeArgs Init
{
add
{

HookHandler._beforeInit += value;
HookHandler.HookInit();
}
remove => HookHandler._beforeInit -= value;
}
public static event Delegates.Awake_BeforeArgs Awake
{
add
{

HookHandler._beforeAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._beforeAwake -= value;
}
public static event Delegates.OnEnable_BeforeArgs OnEnable
{
add
{

HookHandler._beforeOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._beforeOnEnable -= value;
}
public static event Delegates.OnDisable_BeforeArgs OnDisable
{
add
{

HookHandler._beforeOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._beforeOnDisable -= value;
}
public static event Delegates.ShakeSingle_BeforeArgs ShakeSingle
{
add
{

HookHandler._beforeShakeSingle += value;
HookHandler.HookShakeSingle();
}
remove => HookHandler._beforeShakeSingle -= value;
}
public static event Delegates.Shake_BeforeArgs Shake
{
add
{

HookHandler._beforeShake += value;
HookHandler.HookShake();
}
remove => HookHandler._beforeShake -= value;
}
}

/// <summary>
/// Contains Hooks to that run code after orig(self) is called
/// </summary>
public static class AfterOrig
{
public static event Delegates.Init_AfterArgs Init
{
add
{

HookHandler._afterInit += value;
HookHandler.HookInit();
}
remove => HookHandler._afterInit -= value;
}
public static event Delegates.Awake_AfterArgs Awake
{
add
{

HookHandler._afterAwake += value;
HookHandler.HookAwake();
}
remove => HookHandler._afterAwake -= value;
}
public static event Delegates.OnEnable_AfterArgs OnEnable
{
add
{

HookHandler._afterOnEnable += value;
HookHandler.HookOnEnable();
}
remove => HookHandler._afterOnEnable -= value;
}
public static event Delegates.OnDisable_AfterArgs OnDisable
{
add
{

HookHandler._afterOnDisable += value;
HookHandler.HookOnDisable();
}
remove => HookHandler._afterOnDisable -= value;
}
public static event Delegates.ShakeSingle_AfterArgs ShakeSingle
{
add
{

HookHandler._afterShakeSingle += value;
HookHandler.HookShakeSingle();
}
remove => HookHandler._afterShakeSingle -= value;
}
public static event Delegates.Shake_AfterArgs Shake
{
add
{

HookHandler._afterShake += value;
HookHandler.HookShake();
}
remove => HookHandler._afterShake -= value;
}
}

/// <summary>
/// Contains all On Hooks, even those that aren't in the On namespace such as API generated functions and property getters/setters
/// </summary>
public static class WithOrig
{
public static event On.CameraShake.hook_Init Init
{
add => On.CameraShake.Init += value;
remove => On.CameraShake.Init -= value;
}
public static event On.CameraShake.hook_Awake Awake
{
add => On.CameraShake.Awake += value;
remove => On.CameraShake.Awake -= value;
}
public static event On.CameraShake.hook_OnEnable OnEnable
{
add => On.CameraShake.OnEnable += value;
remove => On.CameraShake.OnEnable -= value;
}
public static event On.CameraShake.hook_OnDisable OnDisable
{
add => On.CameraShake.OnDisable += value;
remove => On.CameraShake.OnDisable -= value;
}
public static event On.CameraShake.hook_ShakeSingle ShakeSingle
{
add => On.CameraShake.ShakeSingle += value;
remove => On.CameraShake.ShakeSingle -= value;
}
public static event On.CameraShake.hook_Shake Shake
{
add => On.CameraShake.Shake += value;
remove => On.CameraShake.Shake -= value;
}
}

}
